{
  "_filename": "gunziplua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-compress-deflatelua/module/lmod/bin/gunziplua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 17,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 28,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 28,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 17,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 17,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 29
  }, {
    "from": 53,
    "label": "has",
    "to": 30
  }, {
    "from": 53,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 53,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 53,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 17,
    "label": "calls",
    "to": 57
  }, {
    "from": 17,
    "label": "calls",
    "to": 58
  }, {
    "from": 17,
    "label": "calls",
    "to": 59
  }, {
    "from": 17,
    "label": "calls",
    "to": 59
  }, {
    "from": 17,
    "label": "calls",
    "to": 59
  }, {
    "from": 12,
    "label": "calls",
    "to": 60
  }, {
    "from": 17,
    "label": "calls",
    "to": 60
  }, {
    "from": 17,
    "label": "calls",
    "to": 60
  }, {
    "from": 17,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "calls",
    "to": 62
  }, {
    "from": 8,
    "label": "calls",
    "to": 62
  }, {
    "from": 17,
    "label": "calls",
    "to": 63
  }, {
    "from": 17,
    "label": "calls",
    "to": 64
  }, {
    "from": 17,
    "label": "calls",
    "to": 64
  }, {
    "from": 17,
    "label": "calls",
    "to": 64
  }, {
    "from": 17,
    "label": "calls",
    "to": 64
  }, {
    "from": 17,
    "label": "calls",
    "to": 65
  }, {
    "from": 17,
    "label": "calls",
    "to": 66
  }, {
    "from": 17,
    "label": "calls",
    "to": 66
  }, {
    "from": 17,
    "label": "calls",
    "to": 66
  }, {
    "from": 17,
    "label": "calls",
    "to": 12
  }, {
    "from": 17,
    "label": "calls",
    "to": 67
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 8
  }, {
    "from": 17,
    "label": "calls",
    "to": 8
  }, {
    "from": 17,
    "label": "calls",
    "to": 69
  }, {
    "from": 17,
    "label": "calls",
    "to": 69
  }, {
    "from": 17,
    "label": "calls",
    "to": 69
  }, {
    "from": 55,
    "label": "calls",
    "to": 70
  }, {
    "from": 55,
    "label": "calls",
    "to": 70
  }, {
    "from": 55,
    "label": "calls",
    "to": 70
  }, {
    "from": 17,
    "label": "calls",
    "to": 68
  }, {
    "from": 17,
    "label": "calls",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 55,
    "label": "declares",
    "to": 3
  }, {
    "from": 55,
    "label": "declares",
    "to": 8
  }, {
    "from": 55,
    "label": "declares",
    "to": 12
  }, {
    "from": 55,
    "label": "declares",
    "to": 17
  }, {
    "from": 55,
    "label": "declares",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 71,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 71,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 71,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 71,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 71,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 71,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 71,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 71,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 71,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 71,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 71,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 71,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 72,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "requires",
    "to": 98
  }, {
    "from": 72,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 2
  }, {
    "from": 72,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 101
  }, {
    "from": 1,
    "label": "provides",
    "to": 102
  }, {
    "from": 17,
    "label": "represents",
    "to": 103
  }, {
    "from": 102,
    "label": "provides",
    "to": 103
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "gunziplua",
    "type": "module"
  }, {
    "id": 2,
    "text": "deflatelua",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function runtime_assert(val, msg)\r\n  if not val then error({msg}, val) end\r\n  return val\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if not val then error({msg}, val) end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "error({msg}, val)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function runtime_error(s, level)\r\n  level = level or 1\r\n  error({s}, level+1)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "level = level or 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "error({s}, level+1)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function file_exists(filename)\r\n  local fh = io.open(filename)\r\n  if fh then fh:close(); return true end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local fh = io.open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if fh then fh:close(); return true end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function call(...)\r\n  local opt = OptionParser{usage=\"%prog [options] [gzip-file...]\",\r\n                           version=string.format(\"gunzip %s\", version),\r\n                           add_help_option=false}\r\n  opt.add_option{\"-h\", \"--help\", action=\"store_true\", dest=\"help\",\r\n                 help=\"give this help\"}\r\n  opt.add_option{\r\n    \"-c\", \"--stdout\", dest=\"stdout\", action=\"store_true\",\r\n    help=\"write on standard output, keep original files unchanged\"}\r\n  opt.add_option{\r\n    \"-f\", \"--force\", dest=\"force\", action=\"store_true\",\r\n    help=\"force overwrite of output file\"}\r\n  opt.add_option{\r\n    \"--disable-crc\", dest=\"disable_crc\", action=\"store_true\",\r\n    help=\"skip CRC check (faster performance)\"}\r\n\r\n\r\n  local options, args = opt.parse_args()\r\n\r\n  local gzipfiles = args\r\n\r\n  if options.help then\r\n    opt.print_help()\r\n    os.exit()\r\n  end\r\n\r\n  local ok, err = xpcall(function()\r\n    local outfile_of = {}\r\n    local out_of = {}\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      local base = gzipfile:match('(.+)%.[gG][zZ]$')\r\n      if not base then\r\n        runtime_error(gzipfile .. ': unknown suffix')\r\n      end\r\n      outfile_of[gzipfile] = base\r\n\r\n      out_of[gzipfile] =\r\n        (options.stdout or not gzipfile) and assert(io.stdout)\r\n        or outfile_of[gzipfile]\r\n\r\n      if type(out_of[gzipfile]) == 'string' then\r\n        if file_exists(out_of[gzipfile]) then\r\n          io.stderr:write(out_of[gzipfile] ..\r\n            ' already exists; do you wish to overwrite(y or n)? ')\r\n          if not io.stdin:read'*l':match'^[yY]' then\r\n            runtime_error 'not overwritten'\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      local fh = gzipfile and runtime_assert(io.open(gzipfile, 'rb'))\r\n                 or assert(io.stdin)\r\n      local ofh = type(out_of[gzipfile]) == 'string' and\r\n        runtime_assert(io.open(out_of[gzipfile], 'wb'))\r\n        or out_of[gzipfile]\r\n\r\n      DEFLATE.gunzip {input=fh, output=ofh,\r\n        disable_crc=options.disable_crc}\r\n    end\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      assert(os.remove(gzipfile))\r\n    end\r\n\r\n  end, debug_traceback)\r\n  if not ok then\r\n    if type(err) == 'table' then err = err[1] end\r\n    io.stderr:write('error: ' .. err, '\\n')\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local opt = OptionParser{usage=\"%prog [options] [gzip-file...]\",\r\n                           version=string.format(\"gunzip %s\", version),\r\n                           add_help_option=false}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "opt.add_option{\"-h\", \"--help\", action=\"store_true\", dest=\"help\",\r\n                 help=\"give this help\"}",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "opt.add_option{\r\n    \"-c\", \"--stdout\", dest=\"stdout\", action=\"store_true\",\r\n    help=\"write on standard output, keep original files unchanged\"}",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "opt.add_option{\r\n    \"-f\", \"--force\", dest=\"force\", action=\"store_true\",\r\n    help=\"force overwrite of output file\"}",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "opt.add_option{\r\n    \"--disable-crc\", dest=\"disable_crc\", action=\"store_true\",\r\n    help=\"skip CRC check (faster performance)\"}",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local options, args = opt.parse_args()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local gzipfiles = args",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if options.help then\r\n    opt.print_help()\r\n    os.exit()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "opt.print_help()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "os.exit()",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local ok, err = xpcall(function()\r\n    local outfile_of = {}\r\n    local out_of = {}\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      local base = gzipfile:match('(.+)%.[gG][zZ]$')\r\n      if not base then\r\n        runtime_error(gzipfile .. ': unknown suffix')\r\n      end\r\n      outfile_of[gzipfile] = base\r\n\r\n      out_of[gzipfile] =\r\n        (options.stdout or not gzipfile) and assert(io.stdout)\r\n        or outfile_of[gzipfile]\r\n\r\n      if type(out_of[gzipfile]) == 'string' then\r\n        if file_exists(out_of[gzipfile]) then\r\n          io.stderr:write(out_of[gzipfile] ..\r\n            ' already exists; do you wish to overwrite(y or n)? ')\r\n          if not io.stdin:read'*l':match'^[yY]' then\r\n            runtime_error 'not overwritten'\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      local fh = gzipfile and runtime_assert(io.open(gzipfile, 'rb'))\r\n                 or assert(io.stdin)\r\n      local ofh = type(out_of[gzipfile]) == 'string' and\r\n        runtime_assert(io.open(out_of[gzipfile], 'wb'))\r\n        or out_of[gzipfile]\r\n\r\n      DEFLATE.gunzip {input=fh, output=ofh,\r\n        disable_crc=options.disable_crc}\r\n    end\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      assert(os.remove(gzipfile))\r\n    end\r\n\r\n  end, debug_traceback)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local outfile_of = {}",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local out_of = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for _,gzipfile in ipairs(gzipfiles) do\r\n      local base = gzipfile:match('(.+)%.[gG][zZ]$')\r\n      if not base then\r\n        runtime_error(gzipfile .. ': unknown suffix')\r\n      end\r\n      outfile_of[gzipfile] = base\r\n\r\n      out_of[gzipfile] =\r\n        (options.stdout or not gzipfile) and assert(io.stdout)\r\n        or outfile_of[gzipfile]\r\n\r\n      if type(out_of[gzipfile]) == 'string' then\r\n        if file_exists(out_of[gzipfile]) then\r\n          io.stderr:write(out_of[gzipfile] ..\r\n            ' already exists; do you wish to overwrite(y or n)? ')\r\n          if not io.stdin:read'*l':match'^[yY]' then\r\n            runtime_error 'not overwritten'\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "local base = gzipfile:match('(.+)%.[gG][zZ]$')",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if not base then\r\n        runtime_error(gzipfile .. ': unknown suffix')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "runtime_error(gzipfile .. ': unknown suffix')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "outfile_of[gzipfile] = base",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "out_of[gzipfile] =\r\n        (options.stdout or not gzipfile) and assert(io.stdout)\r\n        or outfile_of[gzipfile]",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if type(out_of[gzipfile]) == 'string' then\r\n        if file_exists(out_of[gzipfile]) then\r\n          io.stderr:write(out_of[gzipfile] ..\r\n            ' already exists; do you wish to overwrite(y or n)? ')\r\n          if not io.stdin:read'*l':match'^[yY]' then\r\n            runtime_error 'not overwritten'\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "if file_exists(out_of[gzipfile]) then\r\n          io.stderr:write(out_of[gzipfile] ..\r\n            ' already exists; do you wish to overwrite(y or n)? ')\r\n          if not io.stdin:read'*l':match'^[yY]' then\r\n            runtime_error 'not overwritten'\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "io.stderr:write(out_of[gzipfile] ..\r\n            ' already exists; do you wish to overwrite(y or n)? ')",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "if not io.stdin:read'*l':match'^[yY]' then\r\n            runtime_error 'not overwritten'\r\n          end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "runtime_error 'not overwritten'",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "for _,gzipfile in ipairs(gzipfiles) do\r\n      local fh = gzipfile and runtime_assert(io.open(gzipfile, 'rb'))\r\n                 or assert(io.stdin)\r\n      local ofh = type(out_of[gzipfile]) == 'string' and\r\n        runtime_assert(io.open(out_of[gzipfile], 'wb'))\r\n        or out_of[gzipfile]\r\n\r\n      DEFLATE.gunzip {input=fh, output=ofh,\r\n        disable_crc=options.disable_crc}\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 43,
    "text": "local fh = gzipfile and runtime_assert(io.open(gzipfile, 'rb'))\r\n                 or assert(io.stdin)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local ofh = type(out_of[gzipfile]) == 'string' and\r\n        runtime_assert(io.open(out_of[gzipfile], 'wb'))\r\n        or out_of[gzipfile]",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "DEFLATE.gunzip {input=fh, output=ofh,\r\n        disable_crc=options.disable_crc}",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "for _,gzipfile in ipairs(gzipfiles) do\r\n      assert(os.remove(gzipfile))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "assert(os.remove(gzipfile))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "if not ok then\r\n    if type(err) == 'table' then err = err[1] end\r\n    io.stderr:write('error: ' .. err, '\\n')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "if type(err) == 'table' then err = err[1] end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "err = err[1]",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "io.stderr:write('error: ' .. err, '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n    local outfile_of = {}\r\n    local out_of = {}\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      local base = gzipfile:match('(.+)%.[gG][zZ]$')\r\n      if not base then\r\n        runtime_error(gzipfile .. ': unknown suffix')\r\n      end\r\n      outfile_of[gzipfile] = base\r\n\r\n      out_of[gzipfile] =\r\n        (options.stdout or not gzipfile) and assert(io.stdout)\r\n        or outfile_of[gzipfile]\r\n\r\n      if type(out_of[gzipfile]) == 'string' then\r\n        if file_exists(out_of[gzipfile]) then\r\n          io.stderr:write(out_of[gzipfile] ..\r\n            ' already exists; do you wish to overwrite(y or n)? ')\r\n          if not io.stdin:read'*l':match'^[yY]' then\r\n            runtime_error 'not overwritten'\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      local fh = gzipfile and runtime_assert(io.open(gzipfile, 'rb'))\r\n                 or assert(io.stdin)\r\n      local ofh = type(out_of[gzipfile]) == 'string' and\r\n        runtime_assert(io.open(out_of[gzipfile], 'wb'))\r\n        or out_of[gzipfile]\r\n\r\n      DEFLATE.gunzip {input=fh, output=ofh,\r\n        disable_crc=options.disable_crc}\r\n    end\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      assert(os.remove(gzipfile))\r\n    end\r\n\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "",
    "type": "function container"
  }, {
    "id": 56,
    "text": "local function gunzip(t)\r\n  local bs = get_bitstream(t.input)\r\n  local outbs = get_obytestream(t.output)\r\n  local disable_crc = t.disable_crc\r\n  if disable_crc == nil then disable_crc = false end\r\n\r\n  parse_gzip_header(bs)\r\n\r\n  local data_crc32 = 0\r\n\r\n  deflate{input=bs, output=\r\n    disable_crc and outbs or\r\n      function(byte)\r\n        data_crc32 = crc32(byte, data_crc32)\r\n        outbs(byte)\r\n      end\r\n  }\r\n\r\n  bs:read(bs:nbits_left_in_byte())\r\n\r\n  local expected_crc32 = bs:read(32)\r\n  local isize = bs:read(32) -- ignored\r\n  if DEBUG then\r\n    debug('crc32=', expected_crc32)\r\n    debug('isize=', isize)\r\n  end\r\n  if not disable_crc and data_crc32 then\r\n    if data_crc32 ~= expected_crc32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end    \r\n  end\r\n  if bs:read() then\r\n    warn 'trailing garbage ignored'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "print_help",
    "type": "global function"
  }, {
    "id": 58,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 59,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 60,
    "text": "open",
    "type": "global function"
  }, {
    "id": 61,
    "text": "OptionParser",
    "type": "global function"
  }, {
    "id": 62,
    "text": "error",
    "type": "global function"
  }, {
    "id": 63,
    "text": "parse_args",
    "type": "global function"
  }, {
    "id": 64,
    "text": "add_option",
    "type": "global function"
  }, {
    "id": 65,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 66,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 67,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 68,
    "text": "format",
    "type": "global function"
  }, {
    "id": 69,
    "text": "type",
    "type": "global function"
  }, {
    "id": 70,
    "text": "require",
    "type": "global function"
  }, {
    "id": 71,
    "text": "",
    "type": "variable container"
  }, {
    "id": 72,
    "text": "",
    "type": "require container"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "string"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 98,
    "text": "debug",
    "type": "module"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "optparse",
    "type": "module"
  }, {
    "id": 102,
    "text": "",
    "type": "interface container"
  }, {
    "id": 103,
    "text": "",
    "type": "interface"
  } ]
}