{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-compress-deflatelua/test/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "calls",
    "to": 12
  }, {
    "from": 10,
    "label": "calls",
    "to": 12
  }, {
    "from": 10,
    "label": "calls",
    "to": 14
  }, {
    "from": 10,
    "label": "calls",
    "to": 14
  }, {
    "from": 10,
    "label": "calls",
    "to": 11
  }, {
    "from": 10,
    "label": "calls",
    "to": 11
  }, {
    "from": 10,
    "label": "calls",
    "to": 4
  }, {
    "from": 10,
    "label": "calls",
    "to": 13
  }, {
    "from": 10,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 10
  }, {
    "from": 10,
    "label": "declares",
    "to": 7
  }, {
    "from": 10,
    "label": "declares",
    "to": 9
  }, {
    "from": 1,
    "label": "contains",
    "to": 16
  }, {
    "from": 1,
    "label": "contains",
    "to": 17
  }, {
    "from": 16,
    "label": "initializes",
    "to": 18
  }, {
    "from": 18,
    "label": "assigns",
    "to": 19
  }, {
    "from": 16,
    "label": "initializes",
    "to": 20
  }, {
    "from": 20,
    "label": "assigns",
    "to": 21
  }, {
    "from": 16,
    "label": "initializes",
    "to": 22
  }, {
    "from": 22,
    "label": "assigns",
    "to": 23
  }, {
    "from": 16,
    "label": "initializes",
    "to": 24
  }, {
    "from": 24,
    "label": "assigns",
    "to": 25
  }, {
    "from": 16,
    "label": "initializes",
    "to": 26
  }, {
    "from": 26,
    "label": "assigns",
    "to": 27
  }, {
    "from": 16,
    "label": "initializes",
    "to": 28
  }, {
    "from": 28,
    "label": "assigns",
    "to": 29
  }, {
    "from": 18,
    "label": "contains",
    "to": 2
  }, {
    "from": 20,
    "label": "contains",
    "to": 2
  }, {
    "from": 18,
    "label": "contains",
    "to": 5
  }, {
    "from": 20,
    "label": "contains",
    "to": 5
  }, {
    "from": 18,
    "label": "contains",
    "to": 6
  }, {
    "from": 20,
    "label": "contains",
    "to": 6
  }, {
    "from": 18,
    "label": "contains",
    "to": 7
  }, {
    "from": 20,
    "label": "contains",
    "to": 7
  }, {
    "from": 18,
    "label": "contains",
    "to": 9
  }, {
    "from": 20,
    "label": "contains",
    "to": 9
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function output(outstate, byte)\r\n  -- debug('OUTPUT:', s)\r\n  local window_pos = outstate.window_pos\r\n  outstate.outbs(byte)\r\n  outstate.window[window_pos] = byte\r\n  outstate.window_pos = window_pos % 32768 + 1  -- 32K\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function gunzip(t)\r\n  local bs = get_bitstream(t.input)\r\n  local outbs = get_obytestream(t.output)\r\n  local disable_crc = t.disable_crc\r\n  if disable_crc == nil then disable_crc = false end\r\n\r\n  parse_gzip_header(bs)\r\n\r\n  local data_crc32 = 0\r\n\r\n  deflate{input=bs, output=\r\n    disable_crc and outbs or\r\n      function(byte)\r\n        data_crc32 = crc32(byte, data_crc32)\r\n        outbs(byte)\r\n      end\r\n  }\r\n\r\n  bs:read(bs:nbits_left_in_byte())\r\n\r\n  local expected_crc32 = bs:read(32)\r\n  local isize = bs:read(32) -- ignored\r\n  if DEBUG then\r\n    debug('crc32=', expected_crc32)\r\n    debug('isize=', isize)\r\n  end\r\n  if not disable_crc and data_crc32 then\r\n    if data_crc32 ~= expected_crc32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end    \r\n  end\r\n  if bs:read() then\r\n    warn 'trailing garbage ignored'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function inflate_zlib(t)\r\n  local bs = get_bitstream(t.input)\r\n  local outbs = get_obytestream(t.output)\r\n  local disable_crc = t.disable_crc\r\n  if disable_crc == nil then disable_crc = false end\r\n  \r\n  local window_size = parse_zlib_header(bs)\r\n  \r\n  local data_adler32 = 1\r\n  \r\n  deflate{input=bs, output=\r\n    disable_crc and outbs or\r\n      function(byte)\r\n        data_adler32 = adler32(byte, data_adler32)\r\n        outbs(byte)\r\n      end\r\n  }\r\n\r\n  bs:read(bs:nbits_left_in_byte())\r\n  \r\n  local b3 = bs:read(8)\r\n  local b2 = bs:read(8)\r\n  local b1 = bs:read(8)\r\n  local b0 = bs:read(8)\r\n  local expected_adler32 = ((b3*256 + b2)*256 + b1)*256 + b0\r\n  if DEBUG then\r\n    debug('alder32=', expected_adler32)\r\n  end\r\n  if not disable_crc then\r\n    if data_adler32 ~= expected_adler32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end    \r\n  end\r\n  if bs:read() then\r\n    warn 'trailing garbage ignored'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function(byte)\r\n        data_crc32 = crc32(byte, data_crc32)\r\n        outbs(byte)\r\n      end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function(byte)\r\n        data_adler32 = adler32(byte, data_adler32)\r\n        outbs(byte)\r\n      end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function(byte) output[#output+1] = string.char(byte) end",
    "type": "function"
  }, {
    "id": 8,
    "text": "output[#output+1] = string.char(byte)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "function(byte) output[#output+1] = string.char(byte) end",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "function container"
  }, {
    "id": 11,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 12,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 13,
    "text": "print",
    "type": "global function"
  }, {
    "id": 14,
    "text": "char",
    "type": "global function"
  }, {
    "id": 15,
    "text": "require",
    "type": "global function"
  }, {
    "id": 16,
    "text": "",
    "type": "variable container"
  }, {
    "id": 17,
    "text": "",
    "type": "require container"
  }, {
    "id": 18,
    "text": "",
    "type": "local variable"
  }, {
    "id": 19,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 20,
    "text": "",
    "type": "local variable"
  }, {
    "id": 21,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 22,
    "text": "",
    "type": "global variable"
  }, {
    "id": 23,
    "text": "",
    "type": "n/a"
  }, {
    "id": 24,
    "text": "",
    "type": "global variable"
  }, {
    "id": 25,
    "text": "",
    "type": "n/a"
  }, {
    "id": 26,
    "text": "",
    "type": "global variable"
  }, {
    "id": 27,
    "text": "",
    "type": "n/a"
  }, {
    "id": 28,
    "text": "",
    "type": "global variable"
  }, {
    "id": 29,
    "text": "",
    "type": "n/a"
  } ]
}