{
  "_filename": "tests-fcntl.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luaposix/tests-fcntl.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 10,
    "label": "calls",
    "to": 37
  }, {
    "from": 10,
    "label": "calls",
    "to": 37
  }, {
    "from": 10,
    "label": "calls",
    "to": 37
  }, {
    "from": 3,
    "label": "calls",
    "to": 33
  }, {
    "from": 10,
    "label": "calls",
    "to": 33
  }, {
    "from": 10,
    "label": "calls",
    "to": 33
  }, {
    "from": 3,
    "label": "calls",
    "to": 36
  }, {
    "from": 3,
    "label": "calls",
    "to": 31
  }, {
    "from": 10,
    "label": "calls",
    "to": 31
  }, {
    "from": 3,
    "label": "calls",
    "to": 32
  }, {
    "from": 10,
    "label": "calls",
    "to": 32
  }, {
    "from": 10,
    "label": "calls",
    "to": 32
  }, {
    "from": 10,
    "label": "calls",
    "to": 32
  }, {
    "from": 10,
    "label": "calls",
    "to": 32
  }, {
    "from": 10,
    "label": "calls",
    "to": 32
  }, {
    "from": 17,
    "label": "calls",
    "to": 32
  }, {
    "from": 21,
    "label": "calls",
    "to": 32
  }, {
    "from": 24,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 10,
    "label": "calls",
    "to": 38
  }, {
    "from": 10,
    "label": "calls",
    "to": 41
  }, {
    "from": 17,
    "label": "calls",
    "to": 39
  }, {
    "from": 21,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 3,
    "label": "calls",
    "to": 40
  }, {
    "from": 10,
    "label": "calls",
    "to": 40
  }, {
    "from": 17,
    "label": "calls",
    "to": 40
  }, {
    "from": 21,
    "label": "calls",
    "to": 40
  }, {
    "from": 24,
    "label": "calls",
    "to": 40
  }, {
    "from": 24,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 3
  }, {
    "from": 30,
    "label": "declares",
    "to": 10
  }, {
    "from": 30,
    "label": "declares",
    "to": 17
  }, {
    "from": 30,
    "label": "declares",
    "to": 21
  }, {
    "from": 30,
    "label": "declares",
    "to": 24
  }, {
    "from": 30,
    "label": "declares",
    "to": 28
  }, {
    "from": 2,
    "label": "contains",
    "to": 42
  }, {
    "from": 2,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 1
  }, {
    "from": 43,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "requires",
    "to": 1
  }, {
    "from": 43,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "requires",
    "to": 1
  }, {
    "from": 43,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "requires",
    "to": 1
  }, {
    "from": 43,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "requires",
    "to": 1
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 28
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "posix",
    "type": "module"
  }, {
    "id": 2,
    "text": "tests-fcntl",
    "type": "module"
  }, {
    "id": 3,
    "text": "function test_sane_getfl()\r\n   local posix = require \"posix\"\r\n   local fd = posix.fileno(io.stdin)\r\n   local flags = posix.fcntl(fd, posix.F_GETFL)\r\n   assert_number(flags)\r\n   assert(flags >= 0, \"returned flags are negative\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local posix = require \"posix\"",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local fd = posix.fileno(io.stdin)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local flags = posix.fcntl(fd, posix.F_GETFL)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "assert_number(flags)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert(flags >= 0, \"returned flags are negative\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function test_setfl_works()\r\n   local posix = require \"posix\"\r\n   local fd = posix.fileno(io.stdin)\r\n   local flags = posix.fcntl(fd, posix.F_GETFL)\r\n   -- Remove NONBLOCK, if any\r\n   posix.fcntl(fd, posix.F_SETFL, bit.band(flags, bit.bnot(posix.O_NONBLOCK)))\r\n   flags = posix.fcntl(fd, posix.F_GETFL)\r\n   assert(bit.band(flags, posix.O_NONBLOCK) == 0, \"Removal of O_NONBLOCK failed\")\r\n   posix.fcntl(fd, posix.F_SETFL, bit.bor(flags, posix.O_NONBLOCK))\r\n   flags = posix.fcntl(fd, posix.F_GETFL)\r\n   assert(bit.band(flags, posix.O_NONBLOCK) ~= 0, \"Set of O_NONBLOCK failed\")\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "posix.fcntl(fd, posix.F_SETFL, bit.band(flags, bit.bnot(posix.O_NONBLOCK)))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "flags = posix.fcntl(fd, posix.F_GETFL)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "assert(bit.band(flags, posix.O_NONBLOCK) == 0, \"Removal of O_NONBLOCK failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "posix.fcntl(fd, posix.F_SETFL, bit.bor(flags, posix.O_NONBLOCK))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert(bit.band(flags, posix.O_NONBLOCK) ~= 0, \"Set of O_NONBLOCK failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function test_negative_fd_fails()\r\n   local posix = require \"posix\"\r\n   ret, msg, errno = posix.fcntl(-7, posix.F_GETFL)\r\n   assert_nil(ret)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "ret, msg, errno = posix.fcntl(-7, posix.F_GETFL)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "assert_nil(ret)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function test_nonopen_fd_fails()\r\n   local posix = require \"posix\"\r\n   ret, msg, errno = posix.fcntl(666, posix.F_GETFL)\r\n   assert_nil(ret)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "ret, msg, errno = posix.fcntl(666, posix.F_GETFL)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function test_wrong_userdata_fails()\r\n   local posix = require \"posix\"\r\n   assert_error(\"Passing wrong type instead of fd does not bomb out\",\r\n      function()\r\n         posix.fcntl(\"foobar\", posix.F_GETFL)\r\n      end)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "assert_error(\"Passing wrong type instead of fd does not bomb out\",\r\n      function()\r\n         posix.fcntl(\"foobar\", posix.F_GETFL)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "posix.fcntl(\"foobar\", posix.F_GETFL)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n         posix.fcntl(\"foobar\", posix.F_GETFL)\r\n      end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "fileno",
    "type": "global function"
  }, {
    "id": 32,
    "text": "fcntl",
    "type": "global function"
  }, {
    "id": 33,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 34,
    "text": "module",
    "type": "global function"
  }, {
    "id": 35,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 36,
    "text": "assert_number",
    "type": "global function"
  }, {
    "id": 37,
    "text": "band",
    "type": "global function"
  }, {
    "id": 38,
    "text": "bnot",
    "type": "global function"
  }, {
    "id": 39,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 40,
    "text": "require",
    "type": "global function"
  }, {
    "id": 41,
    "text": "bor",
    "type": "global function"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "require local variable"
  } ]
}