{
  "_filename": "posix.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaposix/posix.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 37
  }, {
    "from": 17,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 17,
    "label": "has",
    "to": 40
  }, {
    "from": 17,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 31
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 29
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 17,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 31
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 27
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 31
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 42
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 3
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 65,
    "label": "has",
    "to": 77
  }, {
    "from": 65,
    "label": "has",
    "to": 78
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 79
  }, {
    "from": 65,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 83,
    "label": "has",
    "to": 95
  }, {
    "from": 81,
    "label": "has",
    "to": 3
  }, {
    "from": 81,
    "label": "has",
    "to": 3
  }, {
    "from": 81,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 97,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 97,
    "label": "has",
    "to": 3
  }, {
    "from": 97,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 3
  }, {
    "from": 111,
    "label": "has",
    "to": 3
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 98
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 116,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 116,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 129,
    "label": "has",
    "to": 31
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 57
  }, {
    "from": 131,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 42
  }, {
    "from": 131,
    "label": "has",
    "to": 3
  }, {
    "from": 131,
    "label": "has",
    "to": 3
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 81,
    "label": "calls",
    "to": 181
  }, {
    "from": 17,
    "label": "calls",
    "to": 205
  }, {
    "from": 46,
    "label": "calls",
    "to": 205
  }, {
    "from": 17,
    "label": "calls",
    "to": 199
  }, {
    "from": 65,
    "label": "calls",
    "to": 206
  }, {
    "from": 17,
    "label": "calls",
    "to": 207
  }, {
    "from": 17,
    "label": "calls",
    "to": 207
  }, {
    "from": 17,
    "label": "calls",
    "to": 207
  }, {
    "from": 17,
    "label": "calls",
    "to": 207
  }, {
    "from": 17,
    "label": "calls",
    "to": 207
  }, {
    "from": 17,
    "label": "calls",
    "to": 207
  }, {
    "from": 17,
    "label": "calls",
    "to": 207
  }, {
    "from": 46,
    "label": "calls",
    "to": 207
  }, {
    "from": 46,
    "label": "calls",
    "to": 207
  }, {
    "from": 5,
    "label": "calls",
    "to": 217
  }, {
    "from": 81,
    "label": "calls",
    "to": 151
  }, {
    "from": 17,
    "label": "calls",
    "to": 200
  }, {
    "from": 81,
    "label": "calls",
    "to": 177
  }, {
    "from": 5,
    "label": "calls",
    "to": 192
  }, {
    "from": 5,
    "label": "calls",
    "to": 173
  }, {
    "from": 17,
    "label": "calls",
    "to": 173
  }, {
    "from": 46,
    "label": "calls",
    "to": 173
  }, {
    "from": 46,
    "label": "calls",
    "to": 164
  }, {
    "from": 46,
    "label": "calls",
    "to": 168
  }, {
    "from": 60,
    "label": "calls",
    "to": 46
  }, {
    "from": 17,
    "label": "calls",
    "to": 5
  }, {
    "from": 17,
    "label": "calls",
    "to": 17
  }, {
    "from": 81,
    "label": "calls",
    "to": 195
  }, {
    "from": 65,
    "label": "calls",
    "to": 141
  }, {
    "from": 2,
    "label": "calls",
    "to": 153
  }, {
    "from": 81,
    "label": "calls",
    "to": 153
  }, {
    "from": 65,
    "label": "calls",
    "to": 193
  }, {
    "from": 17,
    "label": "calls",
    "to": 191
  }, {
    "from": 17,
    "label": "calls",
    "to": 191
  }, {
    "from": 17,
    "label": "calls",
    "to": 191
  }, {
    "from": 17,
    "label": "calls",
    "to": 191
  }, {
    "from": 17,
    "label": "calls",
    "to": 191
  }, {
    "from": 17,
    "label": "calls",
    "to": 191
  }, {
    "from": 17,
    "label": "calls",
    "to": 191
  }, {
    "from": 46,
    "label": "calls",
    "to": 191
  }, {
    "from": 46,
    "label": "calls",
    "to": 191
  }, {
    "from": 46,
    "label": "calls",
    "to": 136
  }, {
    "from": 2,
    "label": "calls",
    "to": 167
  }, {
    "from": 81,
    "label": "calls",
    "to": 167
  }, {
    "from": 81,
    "label": "calls",
    "to": 167
  }, {
    "from": 65,
    "label": "calls",
    "to": 186
  }, {
    "from": 5,
    "label": "calls",
    "to": 204
  }, {
    "from": 5,
    "label": "calls",
    "to": 204
  }, {
    "from": 17,
    "label": "calls",
    "to": 204
  }, {
    "from": 17,
    "label": "calls",
    "to": 204
  }, {
    "from": 65,
    "label": "calls",
    "to": 208
  }, {
    "from": 65,
    "label": "calls",
    "to": 208
  }, {
    "from": 65,
    "label": "calls",
    "to": 208
  }, {
    "from": 17,
    "label": "calls",
    "to": 215
  }, {
    "from": 17,
    "label": "calls",
    "to": 215
  }, {
    "from": 17,
    "label": "calls",
    "to": 215
  }, {
    "from": 17,
    "label": "calls",
    "to": 209
  }, {
    "from": 46,
    "label": "calls",
    "to": 201
  }, {
    "from": 46,
    "label": "calls",
    "to": 138
  }, {
    "from": 46,
    "label": "calls",
    "to": 138
  }, {
    "from": 5,
    "label": "calls",
    "to": 213
  }, {
    "from": 17,
    "label": "calls",
    "to": 214
  }, {
    "from": 81,
    "label": "calls",
    "to": 211
  }, {
    "from": 65,
    "label": "calls",
    "to": 202
  }, {
    "from": 5,
    "label": "calls",
    "to": 196
  }, {
    "from": 17,
    "label": "calls",
    "to": 196
  }, {
    "from": 46,
    "label": "calls",
    "to": 196
  }, {
    "from": 65,
    "label": "calls",
    "to": 203
  }, {
    "from": 65,
    "label": "calls",
    "to": 203
  }, {
    "from": 5,
    "label": "calls",
    "to": 216
  }, {
    "from": 133,
    "label": "calls",
    "to": 210
  }, {
    "from": 133,
    "label": "calls",
    "to": 210
  }, {
    "from": 133,
    "label": "calls",
    "to": 210
  }, {
    "from": 65,
    "label": "calls",
    "to": 212
  }, {
    "from": 5,
    "label": "calls",
    "to": 189
  }, {
    "from": 5,
    "label": "calls",
    "to": 189
  }, {
    "from": 1,
    "label": "contains",
    "to": 133
  }, {
    "from": 133,
    "label": "declares",
    "to": 2
  }, {
    "from": 133,
    "label": "declares",
    "to": 5
  }, {
    "from": 133,
    "label": "declares",
    "to": 17
  }, {
    "from": 133,
    "label": "declares",
    "to": 46
  }, {
    "from": 133,
    "label": "declares",
    "to": 60
  }, {
    "from": 133,
    "label": "declares",
    "to": 65
  }, {
    "from": 133,
    "label": "declares",
    "to": 81
  }, {
    "from": 133,
    "label": "declares",
    "to": 97
  }, {
    "from": 133,
    "label": "declares",
    "to": 111
  }, {
    "from": 133,
    "label": "declares",
    "to": 116
  }, {
    "from": 133,
    "label": "declares",
    "to": 129
  }, {
    "from": 133,
    "label": "declares",
    "to": 131
  }, {
    "from": 1,
    "label": "declares",
    "to": 134
  }, {
    "from": 1,
    "label": "declares",
    "to": 135
  }, {
    "from": 1,
    "label": "declares",
    "to": 136
  }, {
    "from": 1,
    "label": "declares",
    "to": 137
  }, {
    "from": 1,
    "label": "declares",
    "to": 138
  }, {
    "from": 1,
    "label": "declares",
    "to": 139
  }, {
    "from": 1,
    "label": "declares",
    "to": 140
  }, {
    "from": 1,
    "label": "declares",
    "to": 141
  }, {
    "from": 1,
    "label": "declares",
    "to": 142
  }, {
    "from": 1,
    "label": "declares",
    "to": 143
  }, {
    "from": 1,
    "label": "declares",
    "to": 144
  }, {
    "from": 1,
    "label": "declares",
    "to": 145
  }, {
    "from": 1,
    "label": "declares",
    "to": 146
  }, {
    "from": 1,
    "label": "declares",
    "to": 147
  }, {
    "from": 1,
    "label": "declares",
    "to": 148
  }, {
    "from": 1,
    "label": "declares",
    "to": 149
  }, {
    "from": 1,
    "label": "declares",
    "to": 150
  }, {
    "from": 1,
    "label": "declares",
    "to": 151
  }, {
    "from": 1,
    "label": "declares",
    "to": 152
  }, {
    "from": 1,
    "label": "declares",
    "to": 153
  }, {
    "from": 1,
    "label": "declares",
    "to": 154
  }, {
    "from": 1,
    "label": "declares",
    "to": 155
  }, {
    "from": 1,
    "label": "declares",
    "to": 156
  }, {
    "from": 1,
    "label": "declares",
    "to": 157
  }, {
    "from": 1,
    "label": "declares",
    "to": 158
  }, {
    "from": 1,
    "label": "declares",
    "to": 159
  }, {
    "from": 1,
    "label": "declares",
    "to": 160
  }, {
    "from": 1,
    "label": "declares",
    "to": 161
  }, {
    "from": 1,
    "label": "declares",
    "to": 162
  }, {
    "from": 1,
    "label": "declares",
    "to": 165
  }, {
    "from": 1,
    "label": "declares",
    "to": 166
  }, {
    "from": 1,
    "label": "declares",
    "to": 168
  }, {
    "from": 1,
    "label": "declares",
    "to": 169
  }, {
    "from": 1,
    "label": "declares",
    "to": 170
  }, {
    "from": 1,
    "label": "declares",
    "to": 171
  }, {
    "from": 1,
    "label": "declares",
    "to": 172
  }, {
    "from": 1,
    "label": "declares",
    "to": 173
  }, {
    "from": 1,
    "label": "declares",
    "to": 174
  }, {
    "from": 1,
    "label": "declares",
    "to": 175
  }, {
    "from": 1,
    "label": "declares",
    "to": 176
  }, {
    "from": 1,
    "label": "declares",
    "to": 177
  }, {
    "from": 1,
    "label": "declares",
    "to": 178
  }, {
    "from": 1,
    "label": "declares",
    "to": 179
  }, {
    "from": 1,
    "label": "declares",
    "to": 180
  }, {
    "from": 1,
    "label": "declares",
    "to": 181
  }, {
    "from": 1,
    "label": "declares",
    "to": 182
  }, {
    "from": 1,
    "label": "declares",
    "to": 183
  }, {
    "from": 1,
    "label": "declares",
    "to": 184
  }, {
    "from": 1,
    "label": "declares",
    "to": 185
  }, {
    "from": 1,
    "label": "declares",
    "to": 186
  }, {
    "from": 1,
    "label": "declares",
    "to": 187
  }, {
    "from": 1,
    "label": "declares",
    "to": 188
  }, {
    "from": 1,
    "label": "declares",
    "to": 189
  }, {
    "from": 1,
    "label": "declares",
    "to": 190
  }, {
    "from": 1,
    "label": "declares",
    "to": 191
  }, {
    "from": 1,
    "label": "declares",
    "to": 192
  }, {
    "from": 1,
    "label": "declares",
    "to": 193
  }, {
    "from": 1,
    "label": "declares",
    "to": 194
  }, {
    "from": 1,
    "label": "declares",
    "to": 195
  }, {
    "from": 1,
    "label": "declares",
    "to": 196
  }, {
    "from": 1,
    "label": "declares",
    "to": 197
  }, {
    "from": 1,
    "label": "declares",
    "to": 198
  }, {
    "from": 1,
    "label": "declares",
    "to": 151
  }, {
    "from": 1,
    "label": "declares",
    "to": 192
  }, {
    "from": 1,
    "label": "declares",
    "to": 168
  }, {
    "from": 1,
    "label": "declares",
    "to": 141
  }, {
    "from": 1,
    "label": "declares",
    "to": 153
  }, {
    "from": 1,
    "label": "declares",
    "to": 193
  }, {
    "from": 1,
    "label": "declares",
    "to": 191
  }, {
    "from": 1,
    "label": "declares",
    "to": 202
  }, {
    "from": 1,
    "label": "declares",
    "to": 196
  }, {
    "from": 1,
    "label": "declares",
    "to": 189
  }, {
    "from": 1,
    "label": "declares",
    "to": 181
  }, {
    "from": 1,
    "label": "declares",
    "to": 173
  }, {
    "from": 1,
    "label": "declares",
    "to": 195
  }, {
    "from": 1,
    "label": "declares",
    "to": 209
  }, {
    "from": 1,
    "label": "declares",
    "to": 186
  }, {
    "from": 1,
    "label": "declares",
    "to": 177
  }, {
    "from": 1,
    "label": "declares",
    "to": 136
  }, {
    "from": 1,
    "label": "declares",
    "to": 212
  }, {
    "from": 1,
    "label": "declares",
    "to": 215
  }, {
    "from": 1,
    "label": "declares",
    "to": 138
  }, {
    "from": 1,
    "label": "declares",
    "to": 217
  }, {
    "from": 218,
    "label": "requires",
    "to": 1
  }, {
    "from": 219,
    "label": "requires",
    "to": 1
  }, {
    "from": 218,
    "label": "requires",
    "to": 1
  }, {
    "from": 220,
    "label": "requires",
    "to": 1
  }, {
    "from": 218,
    "label": "requires",
    "to": 1
  }, {
    "from": 221,
    "label": "requires",
    "to": 1
  }, {
    "from": 222,
    "label": "requires",
    "to": 1
  }, {
    "from": 223,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 224
  }, {
    "from": 1,
    "label": "contains",
    "to": 225
  }, {
    "from": 224,
    "label": "initializes",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 224,
    "label": "initializes",
    "to": 228
  }, {
    "from": 224,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 224,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 225,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "requires",
    "to": 163
  }, {
    "from": 1,
    "label": "provides",
    "to": 234
  }, {
    "from": 234,
    "label": "provides",
    "to": 235
  }, {
    "from": 236,
    "label": "requires",
    "to": 1
  }, {
    "from": 237,
    "label": "requires",
    "to": 1
  }, {
    "from": 238,
    "label": "requires",
    "to": 1
  }, {
    "from": 239,
    "label": "requires",
    "to": 1
  }, {
    "from": 240,
    "label": "requires",
    "to": 1
  }, {
    "from": 241,
    "label": "requires",
    "to": 1
  }, {
    "from": 242,
    "label": "requires",
    "to": 1
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 129
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "posix",
    "type": "module"
  }, {
    "id": 2,
    "text": "function M.creat (file, mode)\r\n  return posix.open (file, bit.bor (posix.O_CREAT, posix.O_WRONLY, posix.O_TRUNC), mode)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function M.spawn (task, ...)\r\n  local pid, err = posix.fork ()\r\n  if pid == nil then\r\n    return pid, err\r\n  elseif pid == 0 then\r\n    if type (task) == \"string\" then\r\n      task = {\"/bin/sh\", \"-c\", task, ...}\r\n    end\r\n    if type (task) == \"table\" then\r\n      posix.execp (unpack (task))\r\n      -- Only get here if there's an error; kill the fork\r\n      local _, no = posix.errno ()\r\n      posix._exit (no)\r\n    else\r\n      posix._exit (task (...) or 0)\r\n    end\r\n  else\r\n    local _, reason, status = posix.wait (pid)\r\n    return status, reason -- If wait failed, status is nil & reason is error\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local pid, err = posix.fork ()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if pid == nil then\r\n    return pid, err\r\n  elseif pid == 0 then\r\n    if type (task) == \"string\" then\r\n      task = {\"/bin/sh\", \"-c\", task, ...}\r\n    end\r\n    if type (task) == \"table\" then\r\n      posix.execp (unpack (task))\r\n      -- Only get here if there's an error; kill the fork\r\n      local _, no = posix.errno ()\r\n      posix._exit (no)\r\n    else\r\n      posix._exit (task (...) or 0)\r\n    end\r\n  else\r\n    local _, reason, status = posix.wait (pid)\r\n    return status, reason -- If wait failed, status is nil & reason is error\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "if type (task) == \"string\" then\r\n      task = {\"/bin/sh\", \"-c\", task, ...}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "task = {\"/bin/sh\", \"-c\", task, ...}",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if type (task) == \"table\" then\r\n      posix.execp (unpack (task))\r\n      -- Only get here if there's an error; kill the fork\r\n      local _, no = posix.errno ()\r\n      posix._exit (no)\r\n    else\r\n      posix._exit (task (...) or 0)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "posix.execp (unpack (task))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local _, no = posix.errno ()",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "posix._exit (no)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "posix._exit (task (...) or 0)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local _, reason, status = posix.wait (pid)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function pipeline (t, pipe_fn)\r\n  local pipe_fn = pipe_fn or posix.pipe\r\n  assert (type (t) == \"table\",\r\n          \"bad argument #1 to 'pipeline' (table expected, got \" .. type (t1) .. \")\")\r\n\r\n  local pid, read_fd, write_fd, save_stdout\r\n  if #t > 1 then\r\n    read_fd, write_fd = pipe_fn ()\r\n    if not read_fd then\r\n      die (\"error opening pipe\")\r\n    end\r\n    pid = posix.fork ()\r\n    if pid == nil then\r\n      die (\"error forking\")\r\n    elseif pid == 0 then -- child process\r\n      if not posix.dup2 (read_fd, posix.STDIN_FILENO) then\r\n        die (\"error dup2-ing\")\r\n      end\r\n      posix.close (read_fd)\r\n      posix.close (write_fd)\r\n      os.exit (pipeline (list.sub (t, 2), pipe_fn)) -- recurse with remaining arguments\r\n    else -- parent process\r\n      save_stdout = posix.dup (posix.STDOUT_FILENO)\r\n      if not save_stdout then\r\n        die (\"error dup-ing\")\r\n      end\r\n      if not posix.dup2 (write_fd, posix.STDOUT_FILENO) then\r\n        die (\"error dup2-ing\")\r\n      end\r\n      posix.close (read_fd)\r\n      posix.close (write_fd)\r\n    end\r\n  end\r\n\r\n  local ret = M.spawn (t[1])\r\n  if not ret then\r\n    die (\"error in fork or wait\")\r\n  end\r\n  posix.close (posix.STDOUT_FILENO)\r\n  \r\n  if #t > 1 then\r\n    posix.close (write_fd)\r\n    posix.wait (pid)\r\n    if not posix.dup2 (save_stdout, posix.STDOUT_FILENO) then\r\n      die (\"error dup2-ing\")\r\n    end\r\n    posix.close (save_stdout)\r\n  end\r\n\r\n  return ret\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local pipe_fn = pipe_fn or posix.pipe",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "assert (type (t) == \"table\",\r\n          \"bad argument #1 to 'pipeline' (table expected, got \" .. type (t1) .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local pid, read_fd, write_fd, save_stdout",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if #t > 1 then\r\n    read_fd, write_fd = pipe_fn ()\r\n    if not read_fd then\r\n      die (\"error opening pipe\")\r\n    end\r\n    pid = posix.fork ()\r\n    if pid == nil then\r\n      die (\"error forking\")\r\n    elseif pid == 0 then -- child process\r\n      if not posix.dup2 (read_fd, posix.STDIN_FILENO) then\r\n        die (\"error dup2-ing\")\r\n      end\r\n      posix.close (read_fd)\r\n      posix.close (write_fd)\r\n      os.exit (pipeline (list.sub (t, 2), pipe_fn)) -- recurse with remaining arguments\r\n    else -- parent process\r\n      save_stdout = posix.dup (posix.STDOUT_FILENO)\r\n      if not save_stdout then\r\n        die (\"error dup-ing\")\r\n      end\r\n      if not posix.dup2 (write_fd, posix.STDOUT_FILENO) then\r\n        die (\"error dup2-ing\")\r\n      end\r\n      posix.close (read_fd)\r\n      posix.close (write_fd)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "read_fd, write_fd = pipe_fn ()",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if not read_fd then\r\n      die (\"error opening pipe\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "die (\"error opening pipe\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "pid = posix.fork ()",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if pid == nil then\r\n      die (\"error forking\")\r\n    elseif pid == 0 then -- child process\r\n      if not posix.dup2 (read_fd, posix.STDIN_FILENO) then\r\n        die (\"error dup2-ing\")\r\n      end\r\n      posix.close (read_fd)\r\n      posix.close (write_fd)\r\n      os.exit (pipeline (list.sub (t, 2), pipe_fn)) -- recurse with remaining arguments\r\n    else -- parent process\r\n      save_stdout = posix.dup (posix.STDOUT_FILENO)\r\n      if not save_stdout then\r\n        die (\"error dup-ing\")\r\n      end\r\n      if not posix.dup2 (write_fd, posix.STDOUT_FILENO) then\r\n        die (\"error dup2-ing\")\r\n      end\r\n      posix.close (read_fd)\r\n      posix.close (write_fd)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "die (\"error forking\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "if not posix.dup2 (read_fd, posix.STDIN_FILENO) then\r\n        die (\"error dup2-ing\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "die (\"error dup2-ing\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "posix.close (read_fd)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "posix.close (write_fd)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "os.exit (pipeline (list.sub (t, 2), pipe_fn))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "save_stdout = posix.dup (posix.STDOUT_FILENO)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if not save_stdout then\r\n        die (\"error dup-ing\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "die (\"error dup-ing\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if not posix.dup2 (write_fd, posix.STDOUT_FILENO) then\r\n        die (\"error dup2-ing\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local ret = M.spawn (t[1])",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if not ret then\r\n    die (\"error in fork or wait\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "die (\"error in fork or wait\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "posix.close (posix.STDOUT_FILENO)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if #t > 1 then\r\n    posix.close (write_fd)\r\n    posix.wait (pid)\r\n    if not posix.dup2 (save_stdout, posix.STDOUT_FILENO) then\r\n      die (\"error dup2-ing\")\r\n    end\r\n    posix.close (save_stdout)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "posix.wait (pid)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if not posix.dup2 (save_stdout, posix.STDOUT_FILENO) then\r\n      die (\"error dup2-ing\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "posix.close (save_stdout)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function M.pipeline_iterator (t, pipe_fn)\r\n  local read_fd, write_fd = posix.pipe ()\r\n  if not read_fd then\r\n    die (\"error opening pipe\")\r\n  end\r\n  table.insert (t, function ()\r\n                     while true do\r\n                       local s = posix.read (posix.STDIN_FILENO, posix.BUFSIZ)\r\n                       if not s or #s == 0 then break end\r\n                       posix.write (write_fd, s)\r\n                     end\r\n                     posix.close (write_fd)\r\n                   end)\r\n\r\n  local pid = posix.fork ()\r\n  if pid == nil then\r\n    die (\"error forking\")\r\n  elseif pid == 0 then -- child process\r\n    os.exit (M.pipeline (t, pipe_fn))\r\n  else -- parent process\r\n    posix.close (write_fd)\r\n    return function ()\r\n      local s = posix.read (read_fd, posix.BUFSIZ)\r\n      if not s or #s == 0 then\r\n        posix.wait (pid)\r\n        return nil\r\n      end\r\n      return s\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local read_fd, write_fd = posix.pipe ()",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if not read_fd then\r\n    die (\"error opening pipe\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "table.insert (t, function ()\r\n                     while true do\r\n                       local s = posix.read (posix.STDIN_FILENO, posix.BUFSIZ)\r\n                       if not s or #s == 0 then break end\r\n                       posix.write (write_fd, s)\r\n                     end\r\n                     posix.close (write_fd)\r\n                   end)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "while true do\r\n                       local s = posix.read (posix.STDIN_FILENO, posix.BUFSIZ)\r\n                       if not s or #s == 0 then break end\r\n                       posix.write (write_fd, s)\r\n                     end",
    "type": "statement:while"
  }, {
    "id": 51,
    "text": "local s = posix.read (posix.STDIN_FILENO, posix.BUFSIZ)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if not s or #s == 0 then break end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "posix.write (write_fd, s)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "local pid = posix.fork ()",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if pid == nil then\r\n    die (\"error forking\")\r\n  elseif pid == 0 then -- child process\r\n    os.exit (M.pipeline (t, pipe_fn))\r\n  else -- parent process\r\n    posix.close (write_fd)\r\n    return function ()\r\n      local s = posix.read (read_fd, posix.BUFSIZ)\r\n      if not s or #s == 0 then\r\n        posix.wait (pid)\r\n        return nil\r\n      end\r\n      return s\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "os.exit (M.pipeline (t, pipe_fn))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "local s = posix.read (read_fd, posix.BUFSIZ)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if not s or #s == 0 then\r\n        posix.wait (pid)\r\n        return nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function M.pipeline_slurp (t, pipe_fn)\r\n  local out = \"\"\r\n  for s in M.pipeline_iterator (t, pipe_fn) do\r\n    out = out .. s\r\n  end\r\n  return out\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local out = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "for s in M.pipeline_iterator (t, pipe_fn) do\r\n    out = out .. s\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "out = out .. s",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function M.euidaccess (file, mode)\r\n  local pid = posix.getpid ()\r\n\r\n  if pid.uid == pid.euid and pid.gid == pid.egid then\r\n    -- If we are not set-uid or set-gid, access does the same.\r\n    return posix.access (file, mode)\r\n  end\r\n\r\n  local stats = posix.stat (file)\r\n  if not stats then\r\n    return\r\n  end\r\n\r\n  -- The super-user can read and write any file, and execute any file\r\n  -- that anyone can execute.\r\n  if pid.euid == 0 and ((not string.match (mode, \"x\")) or\r\n                      string.match (stats.st_mode, \"x\")) then\r\n    return 0\r\n  end\r\n\r\n  -- Convert to simple list of modes.\r\n  mode = string.gsub (mode, \"[^rwx]\", \"\")\r\n\r\n  if mode == \"\" then\r\n    return 0 -- The file exists.\r\n  end\r\n\r\n  -- Get the modes we need.\r\n  local granted = stats.st_mode:sub (1, 3)\r\n  if pid.euid == stats.st_uid then\r\n    granted = stats.st_mode:sub (7, 9)\r\n  elseif pid.egid == stats.st_gid or set.new (posix.getgroups ()):member (stats.st_gid) then\r\n    granted = stats.st_mode:sub (4, 6)\r\n  end\r\n  granted = string.gsub (granted, \"[^rwx]\", \"\")\r\n\r\n  if string.gsub (\"[^\" .. granted .. \"]\", mode) == \"\" then\r\n    return 0\r\n  end\r\n  posix.set_errno (EACCESS)\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local pid = posix.getpid ()",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if pid.uid == pid.euid and pid.gid == pid.egid then\r\n    -- If we are not set-uid or set-gid, access does the same.\r\n    return posix.access (file, mode)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "local stats = posix.stat (file)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if not stats then\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "if pid.euid == 0 and ((not string.match (mode, \"x\")) or\r\n                      string.match (stats.st_mode, \"x\")) then\r\n    return 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "mode = string.gsub (mode, \"[^rwx]\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "if mode == \"\" then\r\n    return 0 -- The file exists.\r\n  end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "local granted = stats.st_mode:sub (1, 3)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if pid.euid == stats.st_uid then\r\n    granted = stats.st_mode:sub (7, 9)\r\n  elseif pid.egid == stats.st_gid or set.new (posix.getgroups ()):member (stats.st_gid) then\r\n    granted = stats.st_mode:sub (4, 6)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "granted = stats.st_mode:sub (7, 9)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "granted = stats.st_mode:sub (4, 6)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "granted = string.gsub (granted, \"[^rwx]\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if string.gsub (\"[^\" .. granted .. \"]\", mode) == \"\" then\r\n    return 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "posix.set_errno (EACCESS)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function M.openpty (term, win)\r\n  local master, reason = posix.openpt (bit.bor (posix.O_RDWR, posix.O_NOCTTY))\r\n  if master then\r\n    local ok\r\n    ok, reason = posix.grantpt (master)\r\n    if ok then\r\n      ok, reason = posix.unlockpt (master)\r\n      if ok then\r\n        local slave_name\r\n        slave_name, reason = posix.ptsname (master)\r\n        if slave_name then\r\n          local slave\r\n          slave, reason = posix.open (slave_name, bit.bor (posix.O_RDWR, posix.O_NOCTTY))\r\n          if slave then\r\n            return master, slave, slave_name\r\n          end\r\n        end\r\n      end\r\n    end\r\n    close (master)\r\n  end\r\n  return nil, reason\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "local master, reason = posix.openpt (bit.bor (posix.O_RDWR, posix.O_NOCTTY))",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "if master then\r\n    local ok\r\n    ok, reason = posix.grantpt (master)\r\n    if ok then\r\n      ok, reason = posix.unlockpt (master)\r\n      if ok then\r\n        local slave_name\r\n        slave_name, reason = posix.ptsname (master)\r\n        if slave_name then\r\n          local slave\r\n          slave, reason = posix.open (slave_name, bit.bor (posix.O_RDWR, posix.O_NOCTTY))\r\n          if slave then\r\n            return master, slave, slave_name\r\n          end\r\n        end\r\n      end\r\n    end\r\n    close (master)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "local ok",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "ok, reason = posix.grantpt (master)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if ok then\r\n      ok, reason = posix.unlockpt (master)\r\n      if ok then\r\n        local slave_name\r\n        slave_name, reason = posix.ptsname (master)\r\n        if slave_name then\r\n          local slave\r\n          slave, reason = posix.open (slave_name, bit.bor (posix.O_RDWR, posix.O_NOCTTY))\r\n          if slave then\r\n            return master, slave, slave_name\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "ok, reason = posix.unlockpt (master)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "if ok then\r\n        local slave_name\r\n        slave_name, reason = posix.ptsname (master)\r\n        if slave_name then\r\n          local slave\r\n          slave, reason = posix.open (slave_name, bit.bor (posix.O_RDWR, posix.O_NOCTTY))\r\n          if slave then\r\n            return master, slave, slave_name\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "local slave_name",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "slave_name, reason = posix.ptsname (master)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "if slave_name then\r\n          local slave\r\n          slave, reason = posix.open (slave_name, bit.bor (posix.O_RDWR, posix.O_NOCTTY))\r\n          if slave then\r\n            return master, slave, slave_name\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "local slave",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "slave, reason = posix.open (slave_name, bit.bor (posix.O_RDWR, posix.O_NOCTTY))",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "if slave then\r\n            return master, slave, slave_name\r\n          end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "close (master)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function M.timeradd (x,y)\r\n  local sec, usec = 0, 0\r\n  if x.sec then sec = sec + x.sec end\r\n  if y.sec then sec = sec + y.sec end\r\n  if x.usec then usec = usec + x.usec end\r\n  if y.usec then usec = usec + y.usec end\r\n  if usec > 1000000 then\r\n    sec = sec + 1\r\n    usec = usec - 1000000\r\n  end\r\n\r\n  return { sec = sec, usec = usec }\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local sec, usec = 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "if x.sec then sec = sec + x.sec end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "sec = sec + x.sec",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "if y.sec then sec = sec + y.sec end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "sec = sec + y.sec",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "if x.usec then usec = usec + x.usec end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "usec = usec + x.usec",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if y.usec then usec = usec + y.usec end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "usec = usec + y.usec",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if usec > 1000000 then\r\n    sec = sec + 1\r\n    usec = usec - 1000000\r\n  end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "sec = sec + 1",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "usec = usec - 1000000",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function M.timercmp (x, y)\r\n  local x = { sec = x.sec or 0, usec = x.usec or 0 }\r\n  local y = { sec = y.sec or 0, usec = y.usec or 0 }\r\n  if x.sec ~= y.sec then\r\n    return x.sec - y.sec\r\n  else\r\n    return x.usec - y.usec\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local x = { sec = x.sec or 0, usec = x.usec or 0 }",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "local y = { sec = y.sec or 0, usec = y.usec or 0 }",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "if x.sec ~= y.sec then\r\n    return x.sec - y.sec\r\n  else\r\n    return x.usec - y.usec\r\n  end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function M.timersub (x,y)\r\n  local sec, usec = 0, 0\r\n  if x.sec then sec = x.sec end\r\n  if y.sec then sec = sec - y.sec end\r\n  if x.usec then usec = x.usec end\r\n  if y.usec then usec = usec - y.usec end\r\n  if usec < 0 then\r\n    sec = sec - 1\r\n    usec = usec + 1000000\r\n  end\r\n\r\n  return { sec = sec, usec = usec }\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "if x.sec then sec = x.sec end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "sec = x.sec",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if y.sec then sec = sec - y.sec end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "sec = sec - y.sec",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "if x.usec then usec = x.usec end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "usec = x.usec",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "if y.usec then usec = usec - y.usec end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "usec = usec - y.usec",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if usec < 0 then\r\n    sec = sec - 1\r\n    usec = usec + 1000000\r\n  end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "sec = sec - 1",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "usec = usec + 1000000",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function ()\r\n                     while true do\r\n                       local s = posix.read (posix.STDIN_FILENO, posix.BUFSIZ)\r\n                       if not s or #s == 0 then break end\r\n                       posix.write (write_fd, s)\r\n                     end\r\n                     posix.close (write_fd)\r\n                   end",
    "type": "function"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function ()\r\n      local s = posix.read (read_fd, posix.BUFSIZ)\r\n      if not s or #s == 0 then\r\n        posix.wait (pid)\r\n        return nil\r\n      end\r\n      return s\r\n    end",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "",
    "type": "function container"
  }, {
    "id": 134,
    "text": "crypt",
    "type": "global function"
  }, {
    "id": 135,
    "text": "dirname",
    "type": "global function"
  }, {
    "id": 136,
    "text": "write",
    "type": "global function"
  }, {
    "id": 137,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 138,
    "text": "read",
    "type": "global function"
  }, {
    "id": 139,
    "text": "sysconf",
    "type": "global function"
  }, {
    "id": 140,
    "text": "getgroup",
    "type": "global function"
  }, {
    "id": 141,
    "text": "access",
    "type": "global function"
  }, {
    "id": 142,
    "text": "times",
    "type": "global function"
  }, {
    "id": 143,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 144,
    "text": "link",
    "type": "global function"
  }, {
    "id": 145,
    "text": "statvfs",
    "type": "global function"
  }, {
    "id": 146,
    "text": "msgsnd",
    "type": "global function"
  }, {
    "id": 147,
    "text": "fnmatch",
    "type": "global function"
  }, {
    "id": 148,
    "text": "getcwd",
    "type": "global function"
  }, {
    "id": 149,
    "text": "unlink",
    "type": "global function"
  }, {
    "id": 150,
    "text": "uname",
    "type": "global function"
  }, {
    "id": 151,
    "text": "unlockpt",
    "type": "global function"
  }, {
    "id": 152,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 153,
    "text": "open",
    "type": "global function"
  }, {
    "id": 154,
    "text": "umask",
    "type": "global function"
  }, {
    "id": 155,
    "text": "msgget",
    "type": "global function"
  }, {
    "id": 156,
    "text": "timercmp",
    "type": "global function"
  }, {
    "id": 157,
    "text": "readlink",
    "type": "global function"
  }, {
    "id": 158,
    "text": "setrlimit",
    "type": "global function"
  }, {
    "id": 159,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 160,
    "text": "ctermid",
    "type": "global function"
  }, {
    "id": 161,
    "text": "mkstemp",
    "type": "global function"
  }, {
    "id": 162,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 163,
    "text": "posix_c",
    "type": "module"
  }, {
    "id": 164,
    "text": "pipeline",
    "type": "global function"
  }, {
    "id": 165,
    "text": "getopt_long",
    "type": "global function"
  }, {
    "id": 166,
    "text": "timersub",
    "type": "global function"
  }, {
    "id": 167,
    "text": "bor",
    "type": "global function"
  }, {
    "id": 168,
    "text": "pipe",
    "type": "global function"
  }, {
    "id": 169,
    "text": "isatty",
    "type": "global function"
  }, {
    "id": 170,
    "text": "pipeline_slurp",
    "type": "global function"
  }, {
    "id": 171,
    "text": "basename",
    "type": "global function"
  }, {
    "id": 172,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 173,
    "text": "fork",
    "type": "global function"
  }, {
    "id": 174,
    "text": "getlogin",
    "type": "global function"
  }, {
    "id": 175,
    "text": "setenv",
    "type": "global function"
  }, {
    "id": 176,
    "text": "glob",
    "type": "global function"
  }, {
    "id": 177,
    "text": "ptsname",
    "type": "global function"
  }, {
    "id": 178,
    "text": "poll",
    "type": "global function"
  }, {
    "id": 179,
    "text": "mkdtemp",
    "type": "global function"
  }, {
    "id": 180,
    "text": "utime",
    "type": "global function"
  }, {
    "id": 181,
    "text": "grantpt",
    "type": "global function"
  }, {
    "id": 182,
    "text": "chmod",
    "type": "global function"
  }, {
    "id": 183,
    "text": "msgrcv",
    "type": "global function"
  }, {
    "id": 184,
    "text": "ttyname",
    "type": "global function"
  }, {
    "id": 185,
    "text": "timeradd",
    "type": "global function"
  }, {
    "id": 186,
    "text": "getpid",
    "type": "global function"
  }, {
    "id": 187,
    "text": "gettimeofday",
    "type": "global function"
  }, {
    "id": 188,
    "text": "fileno",
    "type": "global function"
  }, {
    "id": 189,
    "text": "_exit",
    "type": "global function"
  }, {
    "id": 190,
    "text": "pathconf",
    "type": "global function"
  }, {
    "id": 191,
    "text": "close",
    "type": "global function"
  }, {
    "id": 192,
    "text": "execp",
    "type": "global function"
  }, {
    "id": 193,
    "text": "stat",
    "type": "global function"
  }, {
    "id": 194,
    "text": "getpasswd",
    "type": "global function"
  }, {
    "id": 195,
    "text": "openpt",
    "type": "global function"
  }, {
    "id": 196,
    "text": "wait",
    "type": "global function"
  }, {
    "id": 197,
    "text": "files",
    "type": "global function"
  }, {
    "id": 198,
    "text": "fcntl",
    "type": "global function"
  }, {
    "id": 199,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 200,
    "text": "pipe_fn",
    "type": "global function"
  }, {
    "id": 201,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 202,
    "text": "getgroups",
    "type": "global function"
  }, {
    "id": 203,
    "text": "match",
    "type": "global function"
  }, {
    "id": 204,
    "text": "type",
    "type": "global function"
  }, {
    "id": 205,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 206,
    "text": "new",
    "type": "global function"
  }, {
    "id": 207,
    "text": "die",
    "type": "global function"
  }, {
    "id": 208,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 209,
    "text": "dup",
    "type": "global function"
  }, {
    "id": 210,
    "text": "require",
    "type": "global function"
  }, {
    "id": 211,
    "text": "close",
    "type": "global function"
  }, {
    "id": 212,
    "text": "set_errno",
    "type": "global function"
  }, {
    "id": 213,
    "text": "task",
    "type": "global function"
  }, {
    "id": 214,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 215,
    "text": "dup2",
    "type": "global function"
  }, {
    "id": 216,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 217,
    "text": "errno",
    "type": "global function"
  }, {
    "id": 218,
    "text": "",
    "type": "global variable"
  }, {
    "id": 219,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "variable container"
  }, {
    "id": 225,
    "text": "",
    "type": "require container"
  }, {
    "id": 226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "n/a"
  }, {
    "id": 228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "global variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "global variable"
  }, {
    "id": 232,
    "text": "",
    "type": "n/a"
  }, {
    "id": 233,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "interface container"
  }, {
    "id": 235,
    "text": "",
    "type": "interface"
  }, {
    "id": 236,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 242,
    "text": "",
    "type": "require local variable"
  } ]
}