{
  "_filename": "curses.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaposix/curses.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 27,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 6,
    "label": "calls",
    "to": 29
  }, {
    "from": 6,
    "label": "calls",
    "to": 29
  }, {
    "from": 9,
    "label": "calls",
    "to": 29
  }, {
    "from": 10,
    "label": "calls",
    "to": 29
  }, {
    "from": 11,
    "label": "calls",
    "to": 29
  }, {
    "from": 12,
    "label": "calls",
    "to": 29
  }, {
    "from": 13,
    "label": "calls",
    "to": 29
  }, {
    "from": 13,
    "label": "calls",
    "to": 29
  }, {
    "from": 20,
    "label": "calls",
    "to": 29
  }, {
    "from": 20,
    "label": "calls",
    "to": 29
  }, {
    "from": 23,
    "label": "calls",
    "to": 29
  }, {
    "from": 24,
    "label": "calls",
    "to": 29
  }, {
    "from": 25,
    "label": "calls",
    "to": 29
  }, {
    "from": 26,
    "label": "calls",
    "to": 29
  }, {
    "from": 27,
    "label": "calls",
    "to": 29
  }, {
    "from": 13,
    "label": "calls",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 28,
    "label": "declares",
    "to": 2
  }, {
    "from": 28,
    "label": "declares",
    "to": 6
  }, {
    "from": 28,
    "label": "declares",
    "to": 9
  }, {
    "from": 28,
    "label": "declares",
    "to": 10
  }, {
    "from": 28,
    "label": "declares",
    "to": 11
  }, {
    "from": 28,
    "label": "declares",
    "to": 12
  }, {
    "from": 28,
    "label": "declares",
    "to": 13
  }, {
    "from": 28,
    "label": "declares",
    "to": 20
  }, {
    "from": 28,
    "label": "declares",
    "to": 23
  }, {
    "from": 28,
    "label": "declares",
    "to": 24
  }, {
    "from": 28,
    "label": "declares",
    "to": 25
  }, {
    "from": 28,
    "label": "declares",
    "to": 26
  }, {
    "from": 28,
    "label": "declares",
    "to": 27
  }, {
    "from": 1,
    "label": "declares",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 32,
    "label": "initializes",
    "to": 34
  }, {
    "from": 34,
    "label": "assigns",
    "to": 35
  }, {
    "from": 32,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 33,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "requires",
    "to": 39
  }, {
    "from": 1,
    "label": "provides",
    "to": 40
  }, {
    "from": 40,
    "label": "provides",
    "to": 41
  }, {
    "from": 42,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "curses",
    "type": "module"
  }, {
    "id": 2,
    "text": "function M.addch (...)\r\n  if #{...} == 3 then\r\n    return curses.stdscr():mvaddch(...)\r\n  else\r\n    return curses.stdscr():addch(...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if #{...} == 3 then\r\n    return curses.stdscr():mvaddch(...)\r\n  else\r\n    return curses.stdscr():addch(...)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function M.addstr(...) -- detect number of args, like Unified Funcs in Perl Curses\r\n  if #{...} == 3 then\r\n    return curses.stdscr():mvaddstr(...)\r\n  else\r\n    return curses.stdscr():addstr(...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if #{...} == 3 then\r\n    return curses.stdscr():mvaddstr(...)\r\n  else\r\n    return curses.stdscr():addstr(...)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function M.attrset (a) return curses.stdscr():attrset(a) end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function M.clear ()    return curses.stdscr():clear() end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function M.clrtobot () return curses.stdscr():clrtobot() end",
    "type": "function"
  }, {
    "id": 12,
    "text": "function M.clrtoeol () return curses.stdscr():clrtoeol() end",
    "type": "function"
  }, {
    "id": 13,
    "text": "function M.getch (...)\r\n  local c\r\n  if #{...} == 2 then\r\n    c = curses.stdscr():mvgetch(...)\r\n  else\r\n    c = curses.stdscr():getch()\r\n  end\r\n  if c < 256 then\r\n    return string.char(c)\r\n  end\r\n  -- could kludge-test for utf8, e.g. c3 a9 20  c3 aa 20  c3 ab 20  e2 82 ac 0a\r\n  return c\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local c",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if #{...} == 2 then\r\n    c = curses.stdscr():mvgetch(...)\r\n  else\r\n    c = curses.stdscr():getch()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "c = curses.stdscr():mvgetch(...)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "c = curses.stdscr():getch()",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if c < 256 then\r\n    return string.char(c)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function M.getstr (...)\r\n  if #{...} > 1 then\r\n    return curses.stdscr():mvgetstr(...)\r\n  else\r\n    return curses.stdscr():getstr(...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if #{...} > 1 then\r\n    return curses.stdscr():mvgetstr(...)\r\n  else\r\n    return curses.stdscr():getstr(...)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function M.getyx ()    return curses.stdscr():getyx() end",
    "type": "function"
  }, {
    "id": 24,
    "text": "function M.keypad (b)  return curses.stdscr():keypad(b) end",
    "type": "function"
  }, {
    "id": 25,
    "text": "function M.move (y,x)  return curses.stdscr():move(y,x) end",
    "type": "function"
  }, {
    "id": 26,
    "text": "function M.refresh ()  return curses.stdscr():refresh() end",
    "type": "function"
  }, {
    "id": 27,
    "text": "function M.timeout (t) return curses.stdscr():timeout(t) end",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "function container"
  }, {
    "id": 29,
    "text": "stdscr",
    "type": "global function"
  }, {
    "id": 30,
    "text": "require",
    "type": "global function"
  }, {
    "id": 31,
    "text": "char",
    "type": "global function"
  }, {
    "id": 32,
    "text": "",
    "type": "variable container"
  }, {
    "id": 33,
    "text": "",
    "type": "require container"
  }, {
    "id": 34,
    "text": "",
    "type": "local variable"
  }, {
    "id": 35,
    "text": "",
    "type": "n/a"
  }, {
    "id": 36,
    "text": "",
    "type": "global variable"
  }, {
    "id": 37,
    "text": "",
    "type": "n/a"
  }, {
    "id": 38,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 39,
    "text": "curses_c",
    "type": "module"
  }, {
    "id": 40,
    "text": "",
    "type": "interface container"
  }, {
    "id": 41,
    "text": "",
    "type": "interface"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  } ]
}