{
  "_filename": "signal.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaposix/examples/signal.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 36
  }, {
    "from": 39,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "calls",
    "to": 10
  }, {
    "from": 3,
    "label": "calls",
    "to": 41
  }, {
    "from": 40,
    "label": "calls",
    "to": 3
  }, {
    "from": 40,
    "label": "calls",
    "to": 3
  }, {
    "from": 40,
    "label": "calls",
    "to": 3
  }, {
    "from": 40,
    "label": "calls",
    "to": 48
  }, {
    "from": 40,
    "label": "calls",
    "to": 48
  }, {
    "from": 40,
    "label": "calls",
    "to": 48
  }, {
    "from": 40,
    "label": "calls",
    "to": 48
  }, {
    "from": 10,
    "label": "calls",
    "to": 45
  }, {
    "from": 40,
    "label": "calls",
    "to": 45
  }, {
    "from": 17,
    "label": "calls",
    "to": 45
  }, {
    "from": 40,
    "label": "calls",
    "to": 45
  }, {
    "from": 40,
    "label": "calls",
    "to": 45
  }, {
    "from": 40,
    "label": "calls",
    "to": 43
  }, {
    "from": 40,
    "label": "calls",
    "to": 43
  }, {
    "from": 3,
    "label": "calls",
    "to": 42
  }, {
    "from": 22,
    "label": "calls",
    "to": 51
  }, {
    "from": 40,
    "label": "calls",
    "to": 50
  }, {
    "from": 40,
    "label": "calls",
    "to": 49
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 22,
    "label": "calls",
    "to": 47
  }, {
    "from": 40,
    "label": "calls",
    "to": 52
  }, {
    "from": 40,
    "label": "calls",
    "to": 52
  }, {
    "from": 40,
    "label": "calls",
    "to": 22
  }, {
    "from": 40,
    "label": "calls",
    "to": 22
  }, {
    "from": 40,
    "label": "calls",
    "to": 22
  }, {
    "from": 40,
    "label": "calls",
    "to": 22
  }, {
    "from": 10,
    "label": "calls",
    "to": 46
  }, {
    "from": 40,
    "label": "calls",
    "to": 46
  }, {
    "from": 40,
    "label": "calls",
    "to": 46
  }, {
    "from": 40,
    "label": "calls",
    "to": 46
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 40,
    "label": "declares",
    "to": 3
  }, {
    "from": 40,
    "label": "declares",
    "to": 10
  }, {
    "from": 40,
    "label": "declares",
    "to": 17
  }, {
    "from": 40,
    "label": "declares",
    "to": 22
  }, {
    "from": 40,
    "label": "declares",
    "to": 24
  }, {
    "from": 40,
    "label": "declares",
    "to": 33
  }, {
    "from": 40,
    "label": "declares",
    "to": 37
  }, {
    "from": 40,
    "label": "declares",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 53,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 53,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 53,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 53,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 53,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 53,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 54,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "signal",
    "type": "module"
  }, {
    "id": 2,
    "text": "posix",
    "type": "module"
  }, {
    "id": 3,
    "text": "function go(fn,...)\r\n  local cpid = P.fork()\r\n  if cpid == 0 then -- run function as child\r\n    local res = fn(...)\r\n    P._exit(res or 0)\r\n  else\r\n    return cpid\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local cpid = P.fork()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if cpid == 0 then -- run function as child\r\n    local res = fn(...)\r\n    P._exit(res or 0)\r\n  else\r\n    return cpid\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "local res = fn(...)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "P._exit(res or 0)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function sleepx(secs)\r\n  while true do\r\n    secs = sleep(secs)\r\n    if verbose then print('sleep',secs) end\r\n    if secs == 0 then return end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "while true do\r\n    secs = sleep(secs)\r\n    if verbose then print('sleep',secs) end\r\n    if secs == 0 then return end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 12,
    "text": "secs = sleep(secs)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if verbose then print('sleep',secs) end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "print('sleep',secs)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "if secs == 0 then return end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function handler(signo)\r\n  if verbose then print('handled',signo) end\r\n  nsig = nsig + 1\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if verbose then print('handled',signo) end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "print('handled',signo)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "nsig = nsig + 1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function killp(nsig) kill(getpid 'ppid',nsig) end",
    "type": "function"
  }, {
    "id": 23,
    "text": "kill(getpid 'ppid',nsig)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "function()\r\n         local  pid,status,code = wait(-1,WNOHANG)\r\n         while pid do\r\n           if pid ~= 0 then\r\n             if verbose then print('wait',pid,status,code) end\r\n             nchild = nchild + 1\r\n           end\r\n           pid,status,code = wait(-1,WNOHANG)\r\n         end\r\n               end",
    "type": "function"
  }, {
    "id": 25,
    "text": "local  pid,status,code = wait(-1,WNOHANG)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "while pid do\r\n           if pid ~= 0 then\r\n             if verbose then print('wait',pid,status,code) end\r\n             nchild = nchild + 1\r\n           end\r\n           pid,status,code = wait(-1,WNOHANG)\r\n         end",
    "type": "statement:while"
  }, {
    "id": 27,
    "text": "if pid ~= 0 then\r\n             if verbose then print('wait',pid,status,code) end\r\n             nchild = nchild + 1\r\n           end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "if verbose then print('wait',pid,status,code) end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "print('wait',pid,status,code)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "nchild = nchild + 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "pid,status,code = wait(-1,WNOHANG)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function() sleep(1); killp(SIGUSR1); killp(SIGUSR2) end",
    "type": "function"
  }, {
    "id": 34,
    "text": "sleep(1)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "killp(SIGUSR1)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "killp(SIGUSR2)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "function() sleep(2); killp(SIGUSR2); end",
    "type": "function"
  }, {
    "id": 38,
    "text": "sleep(2)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "function() sleep(2); killp(SIGUSR1) end",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "function container"
  }, {
    "id": 41,
    "text": "fork",
    "type": "global function"
  }, {
    "id": 42,
    "text": "_exit",
    "type": "global function"
  }, {
    "id": 43,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 44,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 45,
    "text": "print",
    "type": "global function"
  }, {
    "id": 46,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 47,
    "text": "kill",
    "type": "global function"
  }, {
    "id": 48,
    "text": "signal",
    "type": "global function"
  }, {
    "id": 49,
    "text": "require",
    "type": "global function"
  }, {
    "id": 50,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 51,
    "text": "getpid",
    "type": "global function"
  }, {
    "id": 52,
    "text": "wait",
    "type": "global function"
  }, {
    "id": 53,
    "text": "",
    "type": "variable container"
  }, {
    "id": 54,
    "text": "",
    "type": "require container"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "unop"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "number"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "number"
  }, {
    "id": 61,
    "text": "",
    "type": "global variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "global variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "global variable"
  }, {
    "id": 66,
    "text": "",
    "type": "n/a"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  } ]
}