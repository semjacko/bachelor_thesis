{
  "_filename": "lunit-console.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lunit/lunit-console.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 51
  }, {
    "from": 26,
    "label": "calls",
    "to": 5
  }, {
    "from": 30,
    "label": "calls",
    "to": 5
  }, {
    "from": 37,
    "label": "calls",
    "to": 5
  }, {
    "from": 40,
    "label": "calls",
    "to": 52
  }, {
    "from": 47,
    "label": "calls",
    "to": 56
  }, {
    "from": 15,
    "label": "calls",
    "to": 48
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 5,
    "label": "calls",
    "to": 55
  }, {
    "from": 5,
    "label": "calls",
    "to": 55
  }, {
    "from": 5,
    "label": "calls",
    "to": 55
  }, {
    "from": 47,
    "label": "calls",
    "to": 57
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 15,
    "label": "calls",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 47,
    "label": "declares",
    "to": 2
  }, {
    "from": 47,
    "label": "declares",
    "to": 5
  }, {
    "from": 47,
    "label": "declares",
    "to": 15
  }, {
    "from": 47,
    "label": "declares",
    "to": 24
  }, {
    "from": 47,
    "label": "declares",
    "to": 26
  }, {
    "from": 47,
    "label": "declares",
    "to": 30
  }, {
    "from": 47,
    "label": "declares",
    "to": 37
  }, {
    "from": 47,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 59,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 59,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 60,
    "label": "initializes",
    "to": 58
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lunit-console",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function printformat(format, ...)\r\n  io.write( string.format(format, ...) )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "io.write( string.format(format, ...) )",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function writestatus(char)\r\n  if columns_printed == 0 then\r\n    io.write(\"    \")\r\n  end\r\n  if columns_printed == 60 then\r\n    io.write(\"\\n    \")\r\n    columns_printed = 0\r\n  end\r\n  io.write(char)\r\n  io.flush()\r\n  columns_printed = columns_printed + 1\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if columns_printed == 0 then\r\n    io.write(\"    \")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "io.write(\"    \")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "if columns_printed == 60 then\r\n    io.write(\"\\n    \")\r\n    columns_printed = 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "io.write(\"\\n    \")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "columns_printed = 0",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "io.write(char)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "io.flush()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "columns_printed = columns_printed + 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function begin()\r\n  local total_tc = 0\r\n  local total_tests = 0\r\n\r\n  for tcname in lunit.testcases() do\r\n    total_tc = total_tc + 1\r\n    for testname, test in lunit.tests(tcname) do\r\n      total_tests = total_tests + 1\r\n    end\r\n  end\r\n\r\n  printformat(\"Loaded testsuite with %d tests in %d testcases.\\n\\n\", total_tests, total_tc)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local total_tc = 0",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local total_tests = 0",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "for tcname in lunit.testcases() do\r\n    total_tc = total_tc + 1\r\n    for testname, test in lunit.tests(tcname) do\r\n      total_tests = total_tests + 1\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "total_tc = total_tc + 1",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "for testname, test in lunit.tests(tcname) do\r\n      total_tests = total_tests + 1\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "total_tests = total_tests + 1",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "printformat(\"Loaded testsuite with %d tests in %d testcases.\\n\\n\", total_tests, total_tc)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function run(testcasename, testname)\r\n  -- NOP\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function err(fullname, message, traceback)\r\n  writestatus(\"E\")\r\n  msgs[#msgs+1] = \"Error! (\"..fullname..\"):\\n\"..message..\"\\n\\t\"..table.concat(traceback, \"\\n\\t\") .. \"\\n\"\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "writestatus(\"E\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "msgs[#msgs+1] = \"Error! (\"..fullname..\"):\\n\"..message..\"\\n\\t\"..table.concat(traceback, \"\\n\\t\") .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function fail(fullname, where, message, usermessage)\r\n  writestatus(\"F\")\r\n  local text =  \"Failure (\"..fullname..\"):\\n\"..\r\n                where..\": \"..message..\"\\n\"\r\n\r\n  if usermessage then\r\n    text = text .. where..\": \"..usermessage..\"\\n\"\r\n  end\r\n\r\n  msgs[#msgs+1] = text\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "writestatus(\"F\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local text =  \"Failure (\"..fullname..\"):\\n\"..\r\n                where..\": \"..message..\"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if usermessage then\r\n    text = text .. where..\": \"..usermessage..\"\\n\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "text = text .. where..\": \"..usermessage..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "msgs[#msgs+1] = text",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function pass(testcasename, testname)\r\n  writestatus(\".\")\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "writestatus(\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function done()\r\n  printformat(\"\\n\\n%d Assertions checked.\\n\", lunit.stats.assertions )\r\n  print()\r\n\r\n  for i, msg in ipairs(msgs) do\r\n    printformat( \"%3d) %s\\n\", i, msg )\r\n  end\r\n\r\n  printformat(\"Testsuite finished (%d passed, %d failed, %d errors).\\n\",\r\n      lunit.stats.passed, lunit.stats.failed, lunit.stats.errors )\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "printformat(\"\\n\\n%d Assertions checked.\\n\", lunit.stats.assertions )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "for i, msg in ipairs(msgs) do\r\n    printformat( \"%3d) %s\\n\", i, msg )\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "printformat( \"%3d) %s\\n\", i, msg )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "printformat(\"Testsuite finished (%d passed, %d failed, %d errors).\\n\",\r\n      lunit.stats.passed, lunit.stats.failed, lunit.stats.errors )",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "",
    "type": "function container"
  }, {
    "id": 48,
    "text": "tests",
    "type": "global function"
  }, {
    "id": 49,
    "text": "testcases",
    "type": "global function"
  }, {
    "id": 50,
    "text": "flush",
    "type": "global function"
  }, {
    "id": 51,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 52,
    "text": "print",
    "type": "global function"
  }, {
    "id": 53,
    "text": "format",
    "type": "global function"
  }, {
    "id": 54,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 55,
    "text": "write",
    "type": "global function"
  }, {
    "id": 56,
    "text": "module",
    "type": "global function"
  }, {
    "id": 57,
    "text": "require",
    "type": "global function"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "variable container"
  }, {
    "id": 60,
    "text": "",
    "type": "require container"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "number"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "tableconstructor"
  } ]
}