{
  "_filename": "lunit.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lunit/lunit.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 15,
    "label": "has",
    "to": 26
  }, {
    "from": 12,
    "label": "has",
    "to": 27
  }, {
    "from": 5,
    "label": "has",
    "to": 28
  }, {
    "from": 5,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 28
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 28
  }, {
    "from": 41,
    "label": "has",
    "to": 28
  }, {
    "from": 41,
    "label": "has",
    "to": 28
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 46
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 28
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 46
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 28
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 46
  }, {
    "from": 60,
    "label": "has",
    "to": 54
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 28
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 46
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 28
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 46
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 28
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 46
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 54
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 28
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 46
  }, {
    "from": 83,
    "label": "has",
    "to": 75
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 54
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 83,
    "label": "has",
    "to": 28
  }, {
    "from": 83,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 46
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 46
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 75
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 101,
    "label": "has",
    "to": 94
  }, {
    "from": 101,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 97
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 101,
    "label": "has",
    "to": 110
  }, {
    "from": 101,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 101,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 101,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 46
  }, {
    "from": 116,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 116,
    "label": "has",
    "to": 94
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 97
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 46
  }, {
    "from": 122,
    "label": "has",
    "to": 54
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 28
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 46
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 28
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 28
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 28
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 28
  }, {
    "from": 138,
    "label": "has",
    "to": 28
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 148,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 153,
    "label": "has",
    "to": 157
  }, {
    "from": 148,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 28
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 161,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 171,
    "label": "has",
    "to": 28
  }, {
    "from": 171,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 28
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 28
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 28
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 28
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 186,
    "label": "has",
    "to": 28
  }, {
    "from": 186,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 197,
    "label": "has",
    "to": 28
  }, {
    "from": 197,
    "label": "has",
    "to": 28
  }, {
    "from": 194,
    "label": "has",
    "to": 202
  }, {
    "from": 194,
    "label": "has",
    "to": 203
  }, {
    "from": 194,
    "label": "has",
    "to": 204
  }, {
    "from": 194,
    "label": "has",
    "to": 205
  }, {
    "from": 194,
    "label": "has",
    "to": 206
  }, {
    "from": 194,
    "label": "has",
    "to": 207
  }, {
    "from": 194,
    "label": "has",
    "to": 208
  }, {
    "from": 194,
    "label": "has",
    "to": 209
  }, {
    "from": 194,
    "label": "has",
    "to": 210
  }, {
    "from": 194,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 194,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 215,
    "label": "has",
    "to": 28
  }, {
    "from": 215,
    "label": "has",
    "to": 28
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 219
  }, {
    "from": 217,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 217,
    "label": "has",
    "to": 223
  }, {
    "from": 217,
    "label": "has",
    "to": 28
  }, {
    "from": 217,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 218
  }, {
    "from": 225,
    "label": "has",
    "to": 219
  }, {
    "from": 225,
    "label": "has",
    "to": 223
  }, {
    "from": 225,
    "label": "has",
    "to": 28
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 28
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 229,
    "label": "has",
    "to": 28
  }, {
    "from": 229,
    "label": "has",
    "to": 28
  }, {
    "from": 229,
    "label": "has",
    "to": 28
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 28
  }, {
    "from": 234,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 28
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 238,
    "label": "has",
    "to": 28
  }, {
    "from": 234,
    "label": "has",
    "to": 243
  }, {
    "from": 234,
    "label": "has",
    "to": 244
  }, {
    "from": 234,
    "label": "has",
    "to": 245
  }, {
    "from": 234,
    "label": "has",
    "to": 246
  }, {
    "from": 234,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 27
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 249,
    "label": "has",
    "to": 27
  }, {
    "from": 249,
    "label": "has",
    "to": 252
  }, {
    "from": 249,
    "label": "has",
    "to": 253
  }, {
    "from": 249,
    "label": "has",
    "to": 254
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 249,
    "label": "has",
    "to": 27
  }, {
    "from": 249,
    "label": "has",
    "to": 252
  }, {
    "from": 249,
    "label": "has",
    "to": 253
  }, {
    "from": 249,
    "label": "has",
    "to": 255
  }, {
    "from": 249,
    "label": "has",
    "to": 256
  }, {
    "from": 249,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 27
  }, {
    "from": 257,
    "label": "has",
    "to": 252
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 249,
    "label": "has",
    "to": 258
  }, {
    "from": 234,
    "label": "has",
    "to": 259
  }, {
    "from": 234,
    "label": "has",
    "to": 260
  }, {
    "from": 234,
    "label": "has",
    "to": 28
  }, {
    "from": 234,
    "label": "has",
    "to": 28
  }, {
    "from": 234,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 237
  }, {
    "from": 262,
    "label": "has",
    "to": 28
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 264,
    "label": "has",
    "to": 239
  }, {
    "from": 264,
    "label": "has",
    "to": 28
  }, {
    "from": 264,
    "label": "has",
    "to": 240
  }, {
    "from": 264,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 264,
    "label": "has",
    "to": 28
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 5,
    "label": "calls",
    "to": 293
  }, {
    "from": 182,
    "label": "calls",
    "to": 178
  }, {
    "from": 184,
    "label": "calls",
    "to": 178
  }, {
    "from": 138,
    "label": "calls",
    "to": 297
  }, {
    "from": 161,
    "label": "calls",
    "to": 297
  }, {
    "from": 178,
    "label": "calls",
    "to": 297
  }, {
    "from": 186,
    "label": "calls",
    "to": 297
  }, {
    "from": 194,
    "label": "calls",
    "to": 297
  }, {
    "from": 194,
    "label": "calls",
    "to": 297
  }, {
    "from": 262,
    "label": "calls",
    "to": 297
  }, {
    "from": 264,
    "label": "calls",
    "to": 297
  }, {
    "from": 215,
    "label": "calls",
    "to": 30
  }, {
    "from": 30,
    "label": "calls",
    "to": 283
  }, {
    "from": 143,
    "label": "calls",
    "to": 283
  }, {
    "from": 178,
    "label": "calls",
    "to": 283
  }, {
    "from": 186,
    "label": "calls",
    "to": 283
  }, {
    "from": 138,
    "label": "calls",
    "to": 269
  }, {
    "from": 74,
    "label": "calls",
    "to": 270
  }, {
    "from": 83,
    "label": "calls",
    "to": 270
  }, {
    "from": 101,
    "label": "calls",
    "to": 270
  }, {
    "from": 229,
    "label": "calls",
    "to": 270
  }, {
    "from": 194,
    "label": "calls",
    "to": 215
  }, {
    "from": 194,
    "label": "calls",
    "to": 215
  }, {
    "from": 194,
    "label": "calls",
    "to": 215
  }, {
    "from": 30,
    "label": "calls",
    "to": 284
  }, {
    "from": 215,
    "label": "calls",
    "to": 148
  }, {
    "from": 178,
    "label": "calls",
    "to": 285
  }, {
    "from": 186,
    "label": "calls",
    "to": 285
  }, {
    "from": 266,
    "label": "calls",
    "to": 271
  }, {
    "from": 266,
    "label": "calls",
    "to": 271
  }, {
    "from": 266,
    "label": "calls",
    "to": 271
  }, {
    "from": 229,
    "label": "calls",
    "to": 271
  }, {
    "from": 217,
    "label": "calls",
    "to": 300
  }, {
    "from": 91,
    "label": "calls",
    "to": 272
  }, {
    "from": 101,
    "label": "calls",
    "to": 272
  }, {
    "from": 116,
    "label": "calls",
    "to": 272
  }, {
    "from": 138,
    "label": "calls",
    "to": 272
  }, {
    "from": 143,
    "label": "calls",
    "to": 272
  }, {
    "from": 217,
    "label": "calls",
    "to": 287
  }, {
    "from": 225,
    "label": "calls",
    "to": 287
  }, {
    "from": 266,
    "label": "calls",
    "to": 287
  }, {
    "from": 264,
    "label": "calls",
    "to": 273
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 194,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 266,
    "label": "calls",
    "to": 2
  }, {
    "from": 227,
    "label": "calls",
    "to": 288
  }, {
    "from": 66,
    "label": "calls",
    "to": 41
  }, {
    "from": 66,
    "label": "calls",
    "to": 41
  }, {
    "from": 70,
    "label": "calls",
    "to": 41
  }, {
    "from": 5,
    "label": "calls",
    "to": 275
  }, {
    "from": 5,
    "label": "calls",
    "to": 275
  }, {
    "from": 234,
    "label": "calls",
    "to": 262
  }, {
    "from": 234,
    "label": "calls",
    "to": 262
  }, {
    "from": 161,
    "label": "calls",
    "to": 289
  }, {
    "from": 171,
    "label": "calls",
    "to": 289
  }, {
    "from": 178,
    "label": "calls",
    "to": 289
  }, {
    "from": 186,
    "label": "calls",
    "to": 289
  }, {
    "from": 234,
    "label": "calls",
    "to": 276
  }, {
    "from": 148,
    "label": "calls",
    "to": 143
  }, {
    "from": 148,
    "label": "calls",
    "to": 143
  }, {
    "from": 194,
    "label": "calls",
    "to": 143
  }, {
    "from": 194,
    "label": "calls",
    "to": 143
  }, {
    "from": 217,
    "label": "calls",
    "to": 143
  }, {
    "from": 217,
    "label": "calls",
    "to": 143
  }, {
    "from": 225,
    "label": "calls",
    "to": 143
  }, {
    "from": 225,
    "label": "calls",
    "to": 143
  }, {
    "from": 264,
    "label": "calls",
    "to": 291
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 5,
    "label": "calls",
    "to": 301
  }, {
    "from": 41,
    "label": "calls",
    "to": 301
  }, {
    "from": 41,
    "label": "calls",
    "to": 301
  }, {
    "from": 178,
    "label": "calls",
    "to": 176
  }, {
    "from": 186,
    "label": "calls",
    "to": 176
  }, {
    "from": 194,
    "label": "calls",
    "to": 176
  }, {
    "from": 186,
    "label": "calls",
    "to": 277
  }, {
    "from": 186,
    "label": "calls",
    "to": 277
  }, {
    "from": 5,
    "label": "calls",
    "to": 286
  }, {
    "from": 5,
    "label": "calls",
    "to": 286
  }, {
    "from": 133,
    "label": "calls",
    "to": 286
  }, {
    "from": 161,
    "label": "calls",
    "to": 286
  }, {
    "from": 30,
    "label": "calls",
    "to": 274
  }, {
    "from": 161,
    "label": "calls",
    "to": 274
  }, {
    "from": 161,
    "label": "calls",
    "to": 274
  }, {
    "from": 194,
    "label": "calls",
    "to": 274
  }, {
    "from": 194,
    "label": "calls",
    "to": 274
  }, {
    "from": 133,
    "label": "calls",
    "to": 278
  }, {
    "from": 5,
    "label": "calls",
    "to": 295
  }, {
    "from": 5,
    "label": "calls",
    "to": 295
  }, {
    "from": 5,
    "label": "calls",
    "to": 295
  }, {
    "from": 5,
    "label": "calls",
    "to": 295
  }, {
    "from": 5,
    "label": "calls",
    "to": 295
  }, {
    "from": 37,
    "label": "calls",
    "to": 295
  }, {
    "from": 217,
    "label": "calls",
    "to": 186
  }, {
    "from": 148,
    "label": "calls",
    "to": 279
  }, {
    "from": 194,
    "label": "calls",
    "to": 279
  }, {
    "from": 159,
    "label": "calls",
    "to": 280
  }, {
    "from": 217,
    "label": "calls",
    "to": 171
  }, {
    "from": 37,
    "label": "calls",
    "to": 290
  }, {
    "from": 133,
    "label": "calls",
    "to": 290
  }, {
    "from": 138,
    "label": "calls",
    "to": 290
  }, {
    "from": 138,
    "label": "calls",
    "to": 290
  }, {
    "from": 262,
    "label": "calls",
    "to": 290
  }, {
    "from": 264,
    "label": "calls",
    "to": 290
  }, {
    "from": 264,
    "label": "calls",
    "to": 290
  }, {
    "from": 148,
    "label": "calls",
    "to": 298
  }, {
    "from": 194,
    "label": "calls",
    "to": 298
  }, {
    "from": 266,
    "label": "calls",
    "to": 299
  }, {
    "from": 45,
    "label": "calls",
    "to": 37
  }, {
    "from": 49,
    "label": "calls",
    "to": 37
  }, {
    "from": 53,
    "label": "calls",
    "to": 37
  }, {
    "from": 53,
    "label": "calls",
    "to": 37
  }, {
    "from": 60,
    "label": "calls",
    "to": 37
  }, {
    "from": 60,
    "label": "calls",
    "to": 37
  }, {
    "from": 66,
    "label": "calls",
    "to": 37
  }, {
    "from": 70,
    "label": "calls",
    "to": 37
  }, {
    "from": 74,
    "label": "calls",
    "to": 37
  }, {
    "from": 74,
    "label": "calls",
    "to": 37
  }, {
    "from": 74,
    "label": "calls",
    "to": 37
  }, {
    "from": 83,
    "label": "calls",
    "to": 37
  }, {
    "from": 83,
    "label": "calls",
    "to": 37
  }, {
    "from": 83,
    "label": "calls",
    "to": 37
  }, {
    "from": 91,
    "label": "calls",
    "to": 37
  }, {
    "from": 91,
    "label": "calls",
    "to": 37
  }, {
    "from": 101,
    "label": "calls",
    "to": 37
  }, {
    "from": 101,
    "label": "calls",
    "to": 37
  }, {
    "from": 101,
    "label": "calls",
    "to": 37
  }, {
    "from": 101,
    "label": "calls",
    "to": 37
  }, {
    "from": 101,
    "label": "calls",
    "to": 37
  }, {
    "from": 116,
    "label": "calls",
    "to": 37
  }, {
    "from": 116,
    "label": "calls",
    "to": 37
  }, {
    "from": 266,
    "label": "calls",
    "to": 37
  }, {
    "from": 266,
    "label": "calls",
    "to": 37
  }, {
    "from": 266,
    "label": "calls",
    "to": 296
  }, {
    "from": 266,
    "label": "calls",
    "to": 281
  }, {
    "from": 41,
    "label": "calls",
    "to": 281
  }, {
    "from": 53,
    "label": "calls",
    "to": 281
  }, {
    "from": 60,
    "label": "calls",
    "to": 281
  }, {
    "from": 74,
    "label": "calls",
    "to": 281
  }, {
    "from": 74,
    "label": "calls",
    "to": 281
  }, {
    "from": 83,
    "label": "calls",
    "to": 281
  }, {
    "from": 83,
    "label": "calls",
    "to": 281
  }, {
    "from": 91,
    "label": "calls",
    "to": 281
  }, {
    "from": 101,
    "label": "calls",
    "to": 281
  }, {
    "from": 101,
    "label": "calls",
    "to": 281
  }, {
    "from": 101,
    "label": "calls",
    "to": 281
  }, {
    "from": 116,
    "label": "calls",
    "to": 281
  }, {
    "from": 266,
    "label": "calls",
    "to": 281
  }, {
    "from": 266,
    "label": "calls",
    "to": 281
  }, {
    "from": 234,
    "label": "calls",
    "to": 292
  }, {
    "from": 234,
    "label": "calls",
    "to": 264
  }, {
    "from": 234,
    "label": "calls",
    "to": 264
  }, {
    "from": 234,
    "label": "calls",
    "to": 282
  }, {
    "from": 1,
    "label": "contains",
    "to": 266
  }, {
    "from": 266,
    "label": "declares",
    "to": 2
  }, {
    "from": 266,
    "label": "declares",
    "to": 5
  }, {
    "from": 266,
    "label": "declares",
    "to": 30
  }, {
    "from": 266,
    "label": "declares",
    "to": 35
  }, {
    "from": 266,
    "label": "declares",
    "to": 37
  }, {
    "from": 266,
    "label": "declares",
    "to": 41
  }, {
    "from": 266,
    "label": "declares",
    "to": 45
  }, {
    "from": 266,
    "label": "declares",
    "to": 49
  }, {
    "from": 266,
    "label": "declares",
    "to": 53
  }, {
    "from": 266,
    "label": "declares",
    "to": 60
  }, {
    "from": 266,
    "label": "declares",
    "to": 66
  }, {
    "from": 266,
    "label": "declares",
    "to": 70
  }, {
    "from": 266,
    "label": "declares",
    "to": 74
  }, {
    "from": 266,
    "label": "declares",
    "to": 83
  }, {
    "from": 266,
    "label": "declares",
    "to": 91
  }, {
    "from": 266,
    "label": "declares",
    "to": 101
  }, {
    "from": 266,
    "label": "declares",
    "to": 116
  }, {
    "from": 266,
    "label": "declares",
    "to": 122
  }, {
    "from": 266,
    "label": "declares",
    "to": 126
  }, {
    "from": 266,
    "label": "declares",
    "to": 130
  }, {
    "from": 266,
    "label": "declares",
    "to": 133
  }, {
    "from": 266,
    "label": "declares",
    "to": 138
  }, {
    "from": 266,
    "label": "declares",
    "to": 143
  }, {
    "from": 266,
    "label": "declares",
    "to": 148
  }, {
    "from": 266,
    "label": "declares",
    "to": 159
  }, {
    "from": 266,
    "label": "declares",
    "to": 161
  }, {
    "from": 266,
    "label": "declares",
    "to": 171
  }, {
    "from": 266,
    "label": "declares",
    "to": 176
  }, {
    "from": 266,
    "label": "declares",
    "to": 178
  }, {
    "from": 266,
    "label": "declares",
    "to": 182
  }, {
    "from": 266,
    "label": "declares",
    "to": 184
  }, {
    "from": 266,
    "label": "declares",
    "to": 186
  }, {
    "from": 266,
    "label": "declares",
    "to": 194
  }, {
    "from": 266,
    "label": "declares",
    "to": 215
  }, {
    "from": 266,
    "label": "declares",
    "to": 217
  }, {
    "from": 266,
    "label": "declares",
    "to": 225
  }, {
    "from": 266,
    "label": "declares",
    "to": 227
  }, {
    "from": 266,
    "label": "declares",
    "to": 229
  }, {
    "from": 266,
    "label": "declares",
    "to": 234
  }, {
    "from": 266,
    "label": "declares",
    "to": 262
  }, {
    "from": 266,
    "label": "declares",
    "to": 264
  }, {
    "from": 1,
    "label": "declares",
    "to": 267
  }, {
    "from": 1,
    "label": "declares",
    "to": 268
  }, {
    "from": 302,
    "label": "requires",
    "to": 1
  }, {
    "from": 302,
    "label": "requires",
    "to": 1
  }, {
    "from": 302,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 303
  }, {
    "from": 1,
    "label": "contains",
    "to": 304
  }, {
    "from": 303,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 303,
    "label": "initializes",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 303,
    "label": "initializes",
    "to": 309
  }, {
    "from": 309,
    "label": "assigns",
    "to": 310
  }, {
    "from": 303,
    "label": "initializes",
    "to": 311
  }, {
    "from": 311,
    "label": "assigns",
    "to": 312
  }, {
    "from": 303,
    "label": "initializes",
    "to": 313
  }, {
    "from": 313,
    "label": "assigns",
    "to": 314
  }, {
    "from": 303,
    "label": "initializes",
    "to": 315
  }, {
    "from": 315,
    "label": "assigns",
    "to": 316
  }, {
    "from": 303,
    "label": "initializes",
    "to": 317
  }, {
    "from": 317,
    "label": "assigns",
    "to": 318
  }, {
    "from": 303,
    "label": "initializes",
    "to": 319
  }, {
    "from": 319,
    "label": "assigns",
    "to": 320
  }, {
    "from": 303,
    "label": "initializes",
    "to": 321
  }, {
    "from": 321,
    "label": "assigns",
    "to": 322
  }, {
    "from": 303,
    "label": "initializes",
    "to": 323
  }, {
    "from": 323,
    "label": "assigns",
    "to": 324
  }, {
    "from": 303,
    "label": "initializes",
    "to": 325
  }, {
    "from": 325,
    "label": "assigns",
    "to": 326
  }, {
    "from": 303,
    "label": "initializes",
    "to": 327
  }, {
    "from": 327,
    "label": "assigns",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 328,
    "label": "assigns",
    "to": 330
  }, {
    "from": 328,
    "label": "assigns",
    "to": 331
  }, {
    "from": 328,
    "label": "assigns",
    "to": 332
  }, {
    "from": 328,
    "label": "assigns",
    "to": 333
  }, {
    "from": 328,
    "label": "assigns",
    "to": 334
  }, {
    "from": 328,
    "label": "assigns",
    "to": 335
  }, {
    "from": 328,
    "label": "assigns",
    "to": 336
  }, {
    "from": 303,
    "label": "initializes",
    "to": 337
  }, {
    "from": 303,
    "label": "initializes",
    "to": 338
  }, {
    "from": 303,
    "label": "initializes",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 303,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 303,
    "label": "initializes",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 303,
    "label": "initializes",
    "to": 345
  }, {
    "from": 345,
    "label": "assigns",
    "to": 346
  }, {
    "from": 303,
    "label": "initializes",
    "to": 347
  }, {
    "from": 347,
    "label": "assigns",
    "to": 348
  }, {
    "from": 303,
    "label": "initializes",
    "to": 349
  }, {
    "from": 349,
    "label": "assigns",
    "to": 350
  }, {
    "from": 303,
    "label": "initializes",
    "to": 351
  }, {
    "from": 351,
    "label": "assigns",
    "to": 352
  }, {
    "from": 303,
    "label": "initializes",
    "to": 353
  }, {
    "from": 353,
    "label": "assigns",
    "to": 354
  }, {
    "from": 303,
    "label": "initializes",
    "to": 355
  }, {
    "from": 303,
    "label": "initializes",
    "to": 356
  }, {
    "from": 303,
    "label": "initializes",
    "to": 357
  }, {
    "from": 303,
    "label": "initializes",
    "to": 358
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 2,
    "text": "function traceback_hide(func)\r\n    _tb_hide[func] = true\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "_tb_hide[func] = true",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function my_traceback(errobj)\r\n    if is_table(errobj) and errobj.type == __failure__ then\r\n      local info = debug.getinfo(5, \"Sl\")   -- FIXME: Hardcoded integers are bad...\r\n      errobj.where = string_format( \"%s:%d\", info.short_src, info.currentline)\r\n    else\r\n      errobj = { msg = tostring(errobj) }\r\n      errobj.tb = {}\r\n      local i = 2\r\n      while true do\r\n        local info = debug.getinfo(i, \"Snlf\")\r\n        if not is_table(info) then\r\n          break\r\n        end\r\n        if not _tb_hide[info.func] then\r\n          local line = {}       -- Ripped from ldblib.c...\r\n          line[#line+1] = string_format(\"%s:\", info.short_src)\r\n          if info.currentline > 0 then\r\n            line[#line+1] = string_format(\"%d:\", info.currentline)\r\n          end\r\n          if info.namewhat ~= \"\" then\r\n            line[#line+1] = string_format(\" in function '%s'\", info.name)\r\n          else\r\n            if info.what == \"main\" then\r\n              line[#line+1] = \" in main chunk\"\r\n            elseif info.what == \"C\" or info.what == \"tail\" then\r\n              line[#line+1] = \" ?\"\r\n            else\r\n              line[#line+1] = string_format(\" in function <%s:%d>\", info.short_src, info.linedefined)\r\n            end\r\n          end\r\n          errobj.tb[#errobj.tb+1] = table.concat(line)\r\n        end\r\n        i = i + 1\r\n      end\r\n    end\r\n    return errobj\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "if is_table(errobj) and errobj.type == __failure__ then\r\n      local info = debug.getinfo(5, \"Sl\")   -- FIXME: Hardcoded integers are bad...\r\n      errobj.where = string_format( \"%s:%d\", info.short_src, info.currentline)\r\n    else\r\n      errobj = { msg = tostring(errobj) }\r\n      errobj.tb = {}\r\n      local i = 2\r\n      while true do\r\n        local info = debug.getinfo(i, \"Snlf\")\r\n        if not is_table(info) then\r\n          break\r\n        end\r\n        if not _tb_hide[info.func] then\r\n          local line = {}       -- Ripped from ldblib.c...\r\n          line[#line+1] = string_format(\"%s:\", info.short_src)\r\n          if info.currentline > 0 then\r\n            line[#line+1] = string_format(\"%d:\", info.currentline)\r\n          end\r\n          if info.namewhat ~= \"\" then\r\n            line[#line+1] = string_format(\" in function '%s'\", info.name)\r\n          else\r\n            if info.what == \"main\" then\r\n              line[#line+1] = \" in main chunk\"\r\n            elseif info.what == \"C\" or info.what == \"tail\" then\r\n              line[#line+1] = \" ?\"\r\n            else\r\n              line[#line+1] = string_format(\" in function <%s:%d>\", info.short_src, info.linedefined)\r\n            end\r\n          end\r\n          errobj.tb[#errobj.tb+1] = table.concat(line)\r\n        end\r\n        i = i + 1\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "local info = debug.getinfo(5, \"Sl\")",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "errobj.where = string_format( \"%s:%d\", info.short_src, info.currentline)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "errobj = { msg = tostring(errobj) }",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "errobj.tb = {}",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local i = 2",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "while true do\r\n        local info = debug.getinfo(i, \"Snlf\")\r\n        if not is_table(info) then\r\n          break\r\n        end\r\n        if not _tb_hide[info.func] then\r\n          local line = {}       -- Ripped from ldblib.c...\r\n          line[#line+1] = string_format(\"%s:\", info.short_src)\r\n          if info.currentline > 0 then\r\n            line[#line+1] = string_format(\"%d:\", info.currentline)\r\n          end\r\n          if info.namewhat ~= \"\" then\r\n            line[#line+1] = string_format(\" in function '%s'\", info.name)\r\n          else\r\n            if info.what == \"main\" then\r\n              line[#line+1] = \" in main chunk\"\r\n            elseif info.what == \"C\" or info.what == \"tail\" then\r\n              line[#line+1] = \" ?\"\r\n            else\r\n              line[#line+1] = string_format(\" in function <%s:%d>\", info.short_src, info.linedefined)\r\n            end\r\n          end\r\n          errobj.tb[#errobj.tb+1] = table.concat(line)\r\n        end\r\n        i = i + 1\r\n      end",
    "type": "statement:while"
  }, {
    "id": 13,
    "text": "local info = debug.getinfo(i, \"Snlf\")",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if not is_table(info) then\r\n          break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if not _tb_hide[info.func] then\r\n          local line = {}       -- Ripped from ldblib.c...\r\n          line[#line+1] = string_format(\"%s:\", info.short_src)\r\n          if info.currentline > 0 then\r\n            line[#line+1] = string_format(\"%d:\", info.currentline)\r\n          end\r\n          if info.namewhat ~= \"\" then\r\n            line[#line+1] = string_format(\" in function '%s'\", info.name)\r\n          else\r\n            if info.what == \"main\" then\r\n              line[#line+1] = \" in main chunk\"\r\n            elseif info.what == \"C\" or info.what == \"tail\" then\r\n              line[#line+1] = \" ?\"\r\n            else\r\n              line[#line+1] = string_format(\" in function <%s:%d>\", info.short_src, info.linedefined)\r\n            end\r\n          end\r\n          errobj.tb[#errobj.tb+1] = table.concat(line)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local line = {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "line[#line+1] = string_format(\"%s:\", info.short_src)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if info.currentline > 0 then\r\n            line[#line+1] = string_format(\"%d:\", info.currentline)\r\n          end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "line[#line+1] = string_format(\"%d:\", info.currentline)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if info.namewhat ~= \"\" then\r\n            line[#line+1] = string_format(\" in function '%s'\", info.name)\r\n          else\r\n            if info.what == \"main\" then\r\n              line[#line+1] = \" in main chunk\"\r\n            elseif info.what == \"C\" or info.what == \"tail\" then\r\n              line[#line+1] = \" ?\"\r\n            else\r\n              line[#line+1] = string_format(\" in function <%s:%d>\", info.short_src, info.linedefined)\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "line[#line+1] = string_format(\" in function '%s'\", info.name)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if info.what == \"main\" then\r\n              line[#line+1] = \" in main chunk\"\r\n            elseif info.what == \"C\" or info.what == \"tail\" then\r\n              line[#line+1] = \" ?\"\r\n            else\r\n              line[#line+1] = string_format(\" in function <%s:%d>\", info.short_src, info.linedefined)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "line[#line+1] = \" in main chunk\"",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "line[#line+1] = \" ?\"",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "line[#line+1] = string_format(\" in function <%s:%d>\", info.short_src, info.linedefined)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "errobj.tb[#errobj.tb+1] = table.concat(line)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function mypcall(func)\r\n    orig_assert( is_function(func) )\r\n    local ok, errobj = xpcall(func, my_traceback)\r\n    if not ok then\r\n      return errobj\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "orig_assert( is_function(func) )",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local ok, errobj = xpcall(func, my_traceback)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if not ok then\r\n      return errobj\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(x)\r\n    return type(x) == typename\r\n  end",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function failure(name, usermsg, defaultmsg, ...)\r\n  local errobj = {\r\n    type    = __failure__,\r\n    name    = name,\r\n    msg     = string_format(defaultmsg,...),\r\n    usermsg = usermsg\r\n  }\r\n  error(errobj, 0)\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local errobj = {\r\n    type    = __failure__,\r\n    name    = name,\r\n    msg     = string_format(defaultmsg,...),\r\n    usermsg = usermsg\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "error(errobj, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function format_arg(arg)\r\n  local argtype = type(arg)\r\n  if argtype == \"string\" then\r\n    return \"'\"..arg..\"'\"\r\n  elseif argtype == \"number\" or argtype == \"boolean\" or argtype == \"nil\" then\r\n    return tostring(arg)\r\n  else\r\n    return \"[\"..tostring(arg)..\"]\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local argtype = type(arg)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if argtype == \"string\" then\r\n    return \"'\"..arg..\"'\"\r\n  elseif argtype == \"number\" or argtype == \"boolean\" or argtype == \"nil\" then\r\n    return tostring(arg)\r\n  else\r\n    return \"[\"..tostring(arg)..\"]\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function fail(msg)\r\n  stats.assertions = stats.assertions + 1\r\n  failure( \"fail\", msg, \"failure\" )\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "stats.assertions = stats.assertions + 1",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "failure( \"fail\", msg, \"failure\" )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function assert(assertion, msg)\r\n  stats.assertions = stats.assertions + 1\r\n  if not assertion then\r\n    failure( \"assert\", msg, \"assertion failed\" )\r\n  end\r\n  return assertion\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if not assertion then\r\n    failure( \"assert\", msg, \"assertion failed\" )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "failure( \"assert\", msg, \"assertion failed\" )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function assert_true(actual, msg)\r\n  stats.assertions = stats.assertions + 1\r\n  local actualtype = type(actual)\r\n  if actualtype ~= \"boolean\" then\r\n    failure( \"assert_true\", msg, \"true expected but was a \"..actualtype )\r\n  end\r\n  if actual ~= true then\r\n    failure( \"assert_true\", msg, \"true expected but was false\" )\r\n  end\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local actualtype = type(actual)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if actualtype ~= \"boolean\" then\r\n    failure( \"assert_true\", msg, \"true expected but was a \"..actualtype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "failure( \"assert_true\", msg, \"true expected but was a \"..actualtype )",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "if actual ~= true then\r\n    failure( \"assert_true\", msg, \"true expected but was false\" )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "failure( \"assert_true\", msg, \"true expected but was false\" )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function assert_false(actual, msg)\r\n  stats.assertions = stats.assertions + 1\r\n  local actualtype = type(actual)\r\n  if actualtype ~= \"boolean\" then\r\n    failure( \"assert_false\", msg, \"false expected but was a \"..actualtype )\r\n  end\r\n  if actual ~= false then\r\n    failure( \"assert_false\", msg, \"false expected but was true\" )\r\n  end\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "if actualtype ~= \"boolean\" then\r\n    failure( \"assert_false\", msg, \"false expected but was a \"..actualtype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "failure( \"assert_false\", msg, \"false expected but was a \"..actualtype )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "if actual ~= false then\r\n    failure( \"assert_false\", msg, \"false expected but was true\" )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "failure( \"assert_false\", msg, \"false expected but was true\" )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function assert_equal(expected, actual, msg)\r\n  stats.assertions = stats.assertions + 1\r\n  if expected ~= actual then\r\n    failure( \"assert_equal\", msg, \"expected %s but was %s\", format_arg(expected), format_arg(actual) )\r\n  end\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "if expected ~= actual then\r\n    failure( \"assert_equal\", msg, \"expected %s but was %s\", format_arg(expected), format_arg(actual) )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "failure( \"assert_equal\", msg, \"expected %s but was %s\", format_arg(expected), format_arg(actual) )",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function assert_not_equal(unexpected, actual, msg)\r\n  stats.assertions = stats.assertions + 1\r\n  if unexpected == actual then\r\n    failure( \"assert_not_equal\", msg, \"%s not expected but was one\", format_arg(unexpected) )\r\n  end\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "if unexpected == actual then\r\n    failure( \"assert_not_equal\", msg, \"%s not expected but was one\", format_arg(unexpected) )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "failure( \"assert_not_equal\", msg, \"%s not expected but was one\", format_arg(unexpected) )",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function assert_match(pattern, actual, msg)\r\n  stats.assertions = stats.assertions + 1\r\n  local patterntype = type(pattern)\r\n  if patterntype ~= \"string\" then\r\n    failure( \"assert_match\", msg, \"expected the pattern as a string but was a \"..patterntype )\r\n  end\r\n  local actualtype = type(actual)\r\n  if actualtype ~= \"string\" then\r\n    failure( \"assert_match\", msg, \"expected a string to match pattern '%s' but was a %s\", pattern, actualtype )\r\n  end\r\n  if not string.find(actual, pattern) then\r\n    failure( \"assert_match\", msg, \"expected '%s' to match pattern '%s' but doesn't\", actual, pattern )\r\n  end\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local patterntype = type(pattern)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if patterntype ~= \"string\" then\r\n    failure( \"assert_match\", msg, \"expected the pattern as a string but was a \"..patterntype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "failure( \"assert_match\", msg, \"expected the pattern as a string but was a \"..patterntype )",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if actualtype ~= \"string\" then\r\n    failure( \"assert_match\", msg, \"expected a string to match pattern '%s' but was a %s\", pattern, actualtype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "failure( \"assert_match\", msg, \"expected a string to match pattern '%s' but was a %s\", pattern, actualtype )",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "if not string.find(actual, pattern) then\r\n    failure( \"assert_match\", msg, \"expected '%s' to match pattern '%s' but doesn't\", actual, pattern )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "failure( \"assert_match\", msg, \"expected '%s' to match pattern '%s' but doesn't\", actual, pattern )",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function assert_not_match(pattern, actual, msg)\r\n  stats.assertions = stats.assertions + 1\r\n  local patterntype = type(pattern)\r\n  if patterntype ~= \"string\" then\r\n    failure( \"assert_not_match\", msg, \"expected the pattern as a string but was a \"..patterntype )\r\n  end\r\n  local actualtype = type(actual)\r\n  if actualtype ~= \"string\" then\r\n    failure( \"assert_not_match\", msg, \"expected a string to not match pattern '%s' but was a %s\", pattern, actualtype )\r\n  end\r\n  if string.find(actual, pattern) then\r\n    failure( \"assert_not_match\", msg, \"expected '%s' to not match pattern '%s' but it does\", actual, pattern )\r\n  end\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "if patterntype ~= \"string\" then\r\n    failure( \"assert_not_match\", msg, \"expected the pattern as a string but was a \"..patterntype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "failure( \"assert_not_match\", msg, \"expected the pattern as a string but was a \"..patterntype )",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "if actualtype ~= \"string\" then\r\n    failure( \"assert_not_match\", msg, \"expected a string to not match pattern '%s' but was a %s\", pattern, actualtype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "failure( \"assert_not_match\", msg, \"expected a string to not match pattern '%s' but was a %s\", pattern, actualtype )",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "if string.find(actual, pattern) then\r\n    failure( \"assert_not_match\", msg, \"expected '%s' to not match pattern '%s' but it does\", actual, pattern )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "failure( \"assert_not_match\", msg, \"expected '%s' to not match pattern '%s' but it does\", actual, pattern )",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function assert_error(msg, func)\r\n  stats.assertions = stats.assertions + 1\r\n  if func == nil then\r\n    func, msg = msg, nil\r\n  end\r\n  local functype = type(func)\r\n  if functype ~= \"function\" then\r\n    failure( \"assert_error\", msg, \"expected a function as last argument but was a \"..functype )\r\n  end\r\n  local ok, errmsg = pcall(func)\r\n  if ok then\r\n    failure( \"assert_error\", msg, \"error expected but no error occurred\" )\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "if func == nil then\r\n    func, msg = msg, nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "func, msg = msg, nil",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "local functype = type(func)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if functype ~= \"function\" then\r\n    failure( \"assert_error\", msg, \"expected a function as last argument but was a \"..functype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "failure( \"assert_error\", msg, \"expected a function as last argument but was a \"..functype )",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "local ok, errmsg = pcall(func)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if ok then\r\n    failure( \"assert_error\", msg, \"error expected but no error occurred\" )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "failure( \"assert_error\", msg, \"error expected but no error occurred\" )",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function assert_error_match(msg, pattern, func)\r\n  stats.assertions = stats.assertions + 1\r\n  if func == nil then\r\n    msg, pattern, func = nil, msg, pattern\r\n  end\r\n  local patterntype = type(pattern)\r\n  if patterntype ~= \"string\" then\r\n    failure( \"assert_error_match\", msg, \"expected the pattern as a string but was a \"..patterntype )\r\n  end\r\n  local functype = type(func)\r\n  if functype ~= \"function\" then\r\n    failure( \"assert_error_match\", msg, \"expected a function as last argument but was a \"..functype )\r\n  end\r\n  local ok, errmsg = pcall(func)\r\n  if ok then\r\n    failure( \"assert_error_match\", msg, \"error expected but no error occurred\" )\r\n  end\r\n  local errmsgtype = type(errmsg)\r\n  if errmsgtype ~= \"string\" then\r\n    failure( \"assert_error_match\", msg, \"error as string expected but was a \"..errmsgtype )\r\n  end\r\n  if not string.find(errmsg, pattern) then\r\n    failure( \"assert_error_match\", msg, \"expected error '%s' to match pattern '%s' but doesn't\", errmsg, pattern )\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "if func == nil then\r\n    msg, pattern, func = nil, msg, pattern\r\n  end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "msg, pattern, func = nil, msg, pattern",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "if patterntype ~= \"string\" then\r\n    failure( \"assert_error_match\", msg, \"expected the pattern as a string but was a \"..patterntype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "failure( \"assert_error_match\", msg, \"expected the pattern as a string but was a \"..patterntype )",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "if functype ~= \"function\" then\r\n    failure( \"assert_error_match\", msg, \"expected a function as last argument but was a \"..functype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "failure( \"assert_error_match\", msg, \"expected a function as last argument but was a \"..functype )",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "if ok then\r\n    failure( \"assert_error_match\", msg, \"error expected but no error occurred\" )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "failure( \"assert_error_match\", msg, \"error expected but no error occurred\" )",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "local errmsgtype = type(errmsg)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if errmsgtype ~= \"string\" then\r\n    failure( \"assert_error_match\", msg, \"error as string expected but was a \"..errmsgtype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "failure( \"assert_error_match\", msg, \"error as string expected but was a \"..errmsgtype )",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "if not string.find(errmsg, pattern) then\r\n    failure( \"assert_error_match\", msg, \"expected error '%s' to match pattern '%s' but doesn't\", errmsg, pattern )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "failure( \"assert_error_match\", msg, \"expected error '%s' to match pattern '%s' but doesn't\", errmsg, pattern )",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function assert_pass(msg, func)\r\n  stats.assertions = stats.assertions + 1\r\n  if func == nil then\r\n    func, msg = msg, nil\r\n  end\r\n  local functype = type(func)\r\n  if functype ~= \"function\" then\r\n    failure( \"assert_pass\", msg, \"expected a function as last argument but was a %s\", functype )\r\n  end\r\n  local ok, errmsg = pcall(func)\r\n  if not ok then\r\n    failure( \"assert_pass\", msg, \"no error expected but error was: '%s'\", errmsg )\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "if functype ~= \"function\" then\r\n    failure( \"assert_pass\", msg, \"expected a function as last argument but was a %s\", functype )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "failure( \"assert_pass\", msg, \"expected a function as last argument but was a %s\", functype )",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "if not ok then\r\n    failure( \"assert_pass\", msg, \"no error expected but error was: '%s'\", errmsg )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "failure( \"assert_pass\", msg, \"no error expected but error was: '%s'\", errmsg )",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function(actual, msg)\r\n    stats.assertions = stats.assertions + 1\r\n    local actualtype = type(actual)\r\n    if actualtype ~= typename then\r\n      failure( assert_typename, msg, typename..\" expected but was a \"..actualtype )\r\n    end\r\n    return actual\r\n  end",
    "type": "function"
  }, {
    "id": 123,
    "text": "if actualtype ~= typename then\r\n      failure( assert_typename, msg, typename..\" expected but was a \"..actualtype )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "failure( assert_typename, msg, typename..\" expected but was a \"..actualtype )",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function(actual, msg)\r\n    stats.assertions = stats.assertions + 1\r\n    if type(actual) == typename then\r\n      failure( assert_not_typename, msg, typename..\" not expected but was one\" )\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 127,
    "text": "if type(actual) == typename then\r\n      failure( assert_not_typename, msg, typename..\" not expected but was one\" )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "failure( assert_not_typename, msg, typename..\" not expected but was one\" )",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function lunit.clearstats()\r\n  stats = {\r\n    assertions  = 0;\r\n    passed      = 0;\r\n    failed      = 0;\r\n    errors      = 0;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "stats = {\r\n    assertions  = 0;\r\n    passed      = 0;\r\n    failed      = 0;\r\n    errors      = 0;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function lunit.setrunner(newrunner)\r\n    if not ( is_table(newrunner) or is_nil(newrunner) ) then\r\n      return error(\"lunit.setrunner: Invalid argument\", 0)\r\n    end\r\n    local oldrunner = testrunner\r\n    testrunner = newrunner\r\n    return oldrunner\r\n  end",
    "type": "function"
  }, {
    "id": 134,
    "text": "if not ( is_table(newrunner) or is_nil(newrunner) ) then\r\n      return error(\"lunit.setrunner: Invalid argument\", 0)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "local oldrunner = testrunner",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "testrunner = newrunner",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function lunit.loadrunner(name)\r\n    if not is_string(name) then\r\n      return error(\"lunit.loadrunner: Invalid argument\", 0)\r\n    end\r\n    local ok, runner = pcall( require, name )\r\n    if not ok then\r\n      return error(\"lunit.loadrunner: Can't load test runner: \"..runner, 0)\r\n    end\r\n    return setrunner(runner)\r\n  end",
    "type": "function"
  }, {
    "id": 139,
    "text": "if not is_string(name) then\r\n      return error(\"lunit.loadrunner: Invalid argument\", 0)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "local ok, runner = pcall( require, name )",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "if not ok then\r\n      return error(\"lunit.loadrunner: Can't load test runner: \"..runner, 0)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function report(event, ...)\r\n    local f = testrunner and testrunner[event]\r\n    if is_function(f) then\r\n      pcall(f, ...)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 144,
    "text": "local f = testrunner and testrunner[event]",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "if is_function(f) then\r\n      pcall(f, ...)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "pcall(f, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function reporterrobj(context, tcname, testname, errobj)\r\n    local fullname = tcname .. \".\" .. testname\r\n    if context == \"setup\" then\r\n      fullname = fullname .. \":\" .. setupname(tcname, testname)\r\n    elseif context == \"teardown\" then\r\n      fullname = fullname .. \":\" .. teardownname(tcname, testname)\r\n    end\r\n    if errobj.type == __failure__ then\r\n      stats.failed = stats.failed + 1\r\n      report(\"fail\", fullname, errobj.where, errobj.msg, errobj.usermsg)\r\n    else\r\n      stats.errors = stats.errors + 1\r\n      report(\"err\", fullname, errobj.msg, errobj.tb)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 149,
    "text": "local fullname = tcname .. \".\" .. testname",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "if context == \"setup\" then\r\n      fullname = fullname .. \":\" .. setupname(tcname, testname)\r\n    elseif context == \"teardown\" then\r\n      fullname = fullname .. \":\" .. teardownname(tcname, testname)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "fullname = fullname .. \":\" .. setupname(tcname, testname)",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "fullname = fullname .. \":\" .. teardownname(tcname, testname)",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "if errobj.type == __failure__ then\r\n      stats.failed = stats.failed + 1\r\n      report(\"fail\", fullname, errobj.where, errobj.msg, errobj.usermsg)\r\n    else\r\n      stats.errors = stats.errors + 1\r\n      report(\"err\", fullname, errobj.msg, errobj.tb)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "stats.failed = stats.failed + 1",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "report(\"fail\", fullname, errobj.where, errobj.msg, errobj.usermsg)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "stats.errors = stats.errors + 1",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "report(\"err\", fullname, errobj.msg, errobj.tb)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "local function key_iter(t, k)\r\n    return (next(t,k))\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function lunit.testcase(m)\r\n    orig_assert( is_table(m) )\r\n    --orig_assert( m._M == m )\r\n    orig_assert( is_string(m._NAME) )\r\n    --orig_assert( is_string(m._PACKAGE) )\r\n\r\n    -- Register the module as a testcase\r\n    _testcases[m._NAME] = m\r\n\r\n    -- Import lunit, fail, assert* and is_* function to the module/testcase\r\n    m.lunit = lunit\r\n    m.fail = lunit.fail\r\n    for funcname, func in pairs(lunit) do\r\n      if \"assert\" == string_sub(funcname, 1, 6) or \"is_\" == string_sub(funcname, 1, 3) then\r\n        m[funcname] = func\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 162,
    "text": "orig_assert( is_table(m) )",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "orig_assert( is_string(m._NAME) )",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "_testcases[m._NAME] = m",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "m.lunit = lunit",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "m.fail = lunit.fail",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "for funcname, func in pairs(lunit) do\r\n      if \"assert\" == string_sub(funcname, 1, 6) or \"is_\" == string_sub(funcname, 1, 3) then\r\n        m[funcname] = func\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 168,
    "text": "if \"assert\" == string_sub(funcname, 1, 6) or \"is_\" == string_sub(funcname, 1, 3) then\r\n        m[funcname] = func\r\n      end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "m[funcname] = func",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function lunit.testcases()\r\n    -- Make a copy of testcases to prevent confusing the iterator when\r\n    -- new testcase are defined\r\n    local _testcases2 = {}\r\n    for k,v in pairs(_testcases) do\r\n        _testcases2[k] = true\r\n    end\r\n    return key_iter, _testcases2, nil\r\n  end",
    "type": "function"
  }, {
    "id": 172,
    "text": "local _testcases2 = {}",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "for k,v in pairs(_testcases) do\r\n        _testcases2[k] = true\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 174,
    "text": "_testcases2[k] = true",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function testcase(tcname)\r\n    return _testcases[tcname]\r\n  end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "local function findfuncname(tcname, name)\r\n    for key, value in pairs(testcase(tcname)) do\r\n      if is_string(key) and is_function(value) and string.lower(key) == name then\r\n        return key\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 179,
    "text": "for key, value in pairs(testcase(tcname)) do\r\n      if is_string(key) and is_function(value) and string.lower(key) == name then\r\n        return key\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 180,
    "text": "if is_string(key) and is_function(value) and string.lower(key) == name then\r\n        return key\r\n      end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "function lunit.setupname(tcname)\r\n    return findfuncname(tcname, \"setup\")\r\n  end",
    "type": "function"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function lunit.teardownname(tcname)\r\n    return findfuncname(tcname, \"teardown\")\r\n  end",
    "type": "function"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function lunit.tests(tcname)\r\n    local testnames = {}\r\n    for key, value in pairs(testcase(tcname)) do\r\n      if is_string(key) and is_function(value) then\r\n        local lfn = string.lower(key)\r\n        if string.sub(lfn, 1, 4) == \"test\" or string.sub(lfn, -4) == \"test\" then\r\n          testnames[key] = true\r\n        end\r\n      end\r\n    end\r\n    return key_iter, testnames, nil\r\n  end",
    "type": "function"
  }, {
    "id": 187,
    "text": "local testnames = {}",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "for key, value in pairs(testcase(tcname)) do\r\n      if is_string(key) and is_function(value) then\r\n        local lfn = string.lower(key)\r\n        if string.sub(lfn, 1, 4) == \"test\" or string.sub(lfn, -4) == \"test\" then\r\n          testnames[key] = true\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 189,
    "text": "if is_string(key) and is_function(value) then\r\n        local lfn = string.lower(key)\r\n        if string.sub(lfn, 1, 4) == \"test\" or string.sub(lfn, -4) == \"test\" then\r\n          testnames[key] = true\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "local lfn = string.lower(key)",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "if string.sub(lfn, 1, 4) == \"test\" or string.sub(lfn, -4) == \"test\" then\r\n          testnames[key] = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "testnames[key] = true",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function lunit.runtest(tcname, testname)\r\n  orig_assert( is_string(tcname) )\r\n  orig_assert( is_string(testname) )\r\n\r\n  local function callit(context, func)\r\n    if func then\r\n      local err = mypcall(func)\r\n      if err then\r\n        reporterrobj(context, tcname, testname, err)\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end\r\n  traceback_hide(callit)\r\n\r\n  report(\"run\", tcname, testname)\r\n\r\n  local tc          = testcase(tcname)\r\n  local setup       = tc[setupname(tcname)]\r\n  local test        = tc[testname]\r\n  local teardown    = tc[teardownname(tcname)]\r\n\r\n  local setup_ok    =              callit( \"setup\", setup )\r\n  local test_ok     = setup_ok and callit( \"test\", test )\r\n  local teardown_ok = setup_ok and callit( \"teardown\", teardown )\r\n\r\n  if setup_ok and test_ok and teardown_ok then\r\n    stats.passed = stats.passed + 1\r\n    report(\"pass\", tcname, testname)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 195,
    "text": "orig_assert( is_string(tcname) )",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "orig_assert( is_string(testname) )",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "local function callit(context, func)\r\n    if func then\r\n      local err = mypcall(func)\r\n      if err then\r\n        reporterrobj(context, tcname, testname, err)\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 198,
    "text": "if func then\r\n      local err = mypcall(func)\r\n      if err then\r\n        reporterrobj(context, tcname, testname, err)\r\n        return false\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "local err = mypcall(func)",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "if err then\r\n        reporterrobj(context, tcname, testname, err)\r\n        return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "reporterrobj(context, tcname, testname, err)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "traceback_hide(callit)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "report(\"run\", tcname, testname)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "local tc          = testcase(tcname)",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "local setup       = tc[setupname(tcname)]",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "local test        = tc[testname]",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "local teardown    = tc[teardownname(tcname)]",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "local setup_ok    =              callit( \"setup\", setup )",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "local test_ok     = setup_ok and callit( \"test\", test )",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "local teardown_ok = setup_ok and callit( \"teardown\", teardown )",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "if setup_ok and test_ok and teardown_ok then\r\n    stats.passed = stats.passed + 1\r\n    report(\"pass\", tcname, testname)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "stats.passed = stats.passed + 1",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "report(\"pass\", tcname, testname)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "local function callit(context, func)\r\n    if func then\r\n      local err = mypcall(func)\r\n      if err then\r\n        reporterrobj(context, tcname, testname, err)\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function lunit.run()\r\n  clearstats()\r\n  report(\"begin\")\r\n  for testcasename in lunit.testcases() do\r\n    -- Run tests in the testcases\r\n    for testname in lunit.tests(testcasename) do\r\n      runtest(testcasename, testname)\r\n    end\r\n  end\r\n  report(\"done\")\r\n  return stats\r\nend",
    "type": "function"
  }, {
    "id": 218,
    "text": "clearstats()",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "report(\"begin\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "for testcasename in lunit.testcases() do\r\n    -- Run tests in the testcases\r\n    for testname in lunit.tests(testcasename) do\r\n      runtest(testcasename, testname)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 221,
    "text": "for testname in lunit.tests(testcasename) do\r\n      runtest(testcasename, testname)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 222,
    "text": "runtest(testcasename, testname)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "report(\"done\")",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 225,
    "text": "function lunit.loadonly()\r\n  clearstats()\r\n  report(\"begin\")\r\n  report(\"done\")\r\n  return stats\r\nend",
    "type": "function"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function lunitpat2luapat(str)\r\n    return \"^\" .. string.gsub(str, \"%W\", conv) .. \"$\"\r\n  end",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "local function in_patternmap(map, name)\r\n  if map[name] == true then\r\n    return true\r\n  else\r\n    for _, pat in ipairs(map) do\r\n      if string.find(name, pat) then\r\n        return true\r\n      end\r\n    end\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "if map[name] == true then\r\n    return true\r\n  else\r\n    for _, pat in ipairs(map) do\r\n      if string.find(name, pat) then\r\n        return true\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "for _, pat in ipairs(map) do\r\n      if string.find(name, pat) then\r\n        return true\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 232,
    "text": "if string.find(name, pat) then\r\n        return true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function main(argv)\r\n  argv = argv or {}\r\n\r\n  -- FIXME: Error handling and error messages aren't nice.\r\n\r\n  local function checkarg(optname, arg)\r\n    if not is_string(arg) then\r\n      return error(\"lunit.main: option \"..optname..\": argument missing.\", 0)\r\n    end\r\n  end\r\n\r\n  local function loadtestcase(filename)\r\n    if not is_string(filename) then\r\n      return error(\"lunit.main: invalid argument\")\r\n    end\r\n    local chunk, err = loadfile(filename)\r\n    if err then\r\n      return error(err)\r\n    else\r\n      chunk()\r\n    end\r\n  end\r\n\r\n  local testpatterns = nil\r\n  local doloadonly = false\r\n  local runner = nil\r\n\r\n  local i = 0\r\n  while i < #argv do\r\n    i = i + 1\r\n    local arg = argv[i]\r\n    if arg == \"--loadonly\" then\r\n      doloadonly = true\r\n    elseif arg == \"--runner\" or arg == \"-r\" then\r\n      local optname = arg; i = i + 1; arg = argv[i]\r\n      checkarg(optname, arg)\r\n      runner = arg\r\n    elseif arg == \"--test\" or arg == \"-t\" then\r\n      local optname = arg; i = i + 1; arg = argv[i]\r\n      checkarg(optname, arg)\r\n      testpatterns = testpatterns or {}\r\n      testpatterns[#testpatterns+1] = arg\r\n    elseif arg == \"--\" then\r\n      while i < #argv do\r\n        i = i + 1; arg = argv[i]\r\n        loadtestcase(arg)\r\n      end\r\n    else\r\n      loadtestcase(arg)\r\n    end\r\n  end\r\n\r\n  loadrunner(runner or \"lunit-console\")\r\n\r\n  if doloadonly then\r\n    return loadonly()\r\n  else\r\n    return run(testpatterns)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "argv = argv or {}",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "local function checkarg(optname, arg)\r\n    if not is_string(arg) then\r\n      return error(\"lunit.main: option \"..optname..\": argument missing.\", 0)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 237,
    "text": "if not is_string(arg) then\r\n      return error(\"lunit.main: option \"..optname..\": argument missing.\", 0)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "local function loadtestcase(filename)\r\n    if not is_string(filename) then\r\n      return error(\"lunit.main: invalid argument\")\r\n    end\r\n    local chunk, err = loadfile(filename)\r\n    if err then\r\n      return error(err)\r\n    else\r\n      chunk()\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 239,
    "text": "if not is_string(filename) then\r\n      return error(\"lunit.main: invalid argument\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "local chunk, err = loadfile(filename)",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "if err then\r\n      return error(err)\r\n    else\r\n      chunk()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "chunk()",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "local testpatterns = nil",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "local doloadonly = false",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "local runner = nil",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "while i < #argv do\r\n    i = i + 1\r\n    local arg = argv[i]\r\n    if arg == \"--loadonly\" then\r\n      doloadonly = true\r\n    elseif arg == \"--runner\" or arg == \"-r\" then\r\n      local optname = arg; i = i + 1; arg = argv[i]\r\n      checkarg(optname, arg)\r\n      runner = arg\r\n    elseif arg == \"--test\" or arg == \"-t\" then\r\n      local optname = arg; i = i + 1; arg = argv[i]\r\n      checkarg(optname, arg)\r\n      testpatterns = testpatterns or {}\r\n      testpatterns[#testpatterns+1] = arg\r\n    elseif arg == \"--\" then\r\n      while i < #argv do\r\n        i = i + 1; arg = argv[i]\r\n        loadtestcase(arg)\r\n      end\r\n    else\r\n      loadtestcase(arg)\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 248,
    "text": "local arg = argv[i]",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "if arg == \"--loadonly\" then\r\n      doloadonly = true\r\n    elseif arg == \"--runner\" or arg == \"-r\" then\r\n      local optname = arg; i = i + 1; arg = argv[i]\r\n      checkarg(optname, arg)\r\n      runner = arg\r\n    elseif arg == \"--test\" or arg == \"-t\" then\r\n      local optname = arg; i = i + 1; arg = argv[i]\r\n      checkarg(optname, arg)\r\n      testpatterns = testpatterns or {}\r\n      testpatterns[#testpatterns+1] = arg\r\n    elseif arg == \"--\" then\r\n      while i < #argv do\r\n        i = i + 1; arg = argv[i]\r\n        loadtestcase(arg)\r\n      end\r\n    else\r\n      loadtestcase(arg)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 250,
    "text": "doloadonly = true",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "local optname = arg",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "arg = argv[i]",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "checkarg(optname, arg)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "runner = arg",
    "type": "statement:assign"
  }, {
    "id": 255,
    "text": "testpatterns = testpatterns or {}",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "testpatterns[#testpatterns+1] = arg",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "while i < #argv do\r\n        i = i + 1; arg = argv[i]\r\n        loadtestcase(arg)\r\n      end",
    "type": "statement:while"
  }, {
    "id": 258,
    "text": "loadtestcase(arg)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "loadrunner(runner or \"lunit-console\")",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "if doloadonly then\r\n    return loadonly()\r\n  else\r\n    return run(testpatterns)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "local function checkarg(optname, arg)\r\n    if not is_string(arg) then\r\n      return error(\"lunit.main: option \"..optname..\": argument missing.\", 0)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 263,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 264,
    "text": "local function loadtestcase(filename)\r\n    if not is_string(filename) then\r\n      return error(\"lunit.main: invalid argument\")\r\n    end\r\n    local chunk, err = loadfile(filename)\r\n    if err then\r\n      return error(err)\r\n    else\r\n      chunk()\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "",
    "type": "function container"
  }, {
    "id": 267,
    "text": "tests",
    "type": "global function"
  }, {
    "id": 268,
    "text": "testcases",
    "type": "global function"
  }, {
    "id": 269,
    "text": "setrunner",
    "type": "global function"
  }, {
    "id": 270,
    "text": "find",
    "type": "global function"
  }, {
    "id": 271,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 272,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 273,
    "text": "chunk",
    "type": "global function"
  }, {
    "id": 274,
    "text": "orig_assert",
    "type": "global function"
  }, {
    "id": 275,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 276,
    "text": "run",
    "type": "global function"
  }, {
    "id": 277,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 278,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 279,
    "text": "setupname",
    "type": "global function"
  }, {
    "id": 280,
    "text": "next",
    "type": "global function"
  }, {
    "id": 281,
    "text": "type",
    "type": "global function"
  }, {
    "id": 282,
    "text": "loadrunner",
    "type": "global function"
  }, {
    "id": 283,
    "text": "is_function",
    "type": "global function"
  }, {
    "id": 284,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 285,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 286,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 287,
    "text": "clearstats",
    "type": "global function"
  }, {
    "id": 288,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 289,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 290,
    "text": "error",
    "type": "global function"
  }, {
    "id": 291,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 292,
    "text": "loadonly",
    "type": "global function"
  }, {
    "id": 293,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 294,
    "text": "string_sub",
    "type": "global function"
  }, {
    "id": 295,
    "text": "string_format",
    "type": "global function"
  }, {
    "id": 296,
    "text": "module",
    "type": "global function"
  }, {
    "id": 297,
    "text": "is_string",
    "type": "global function"
  }, {
    "id": 298,
    "text": "teardownname",
    "type": "global function"
  }, {
    "id": 299,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 300,
    "text": "runtest",
    "type": "global function"
  }, {
    "id": 301,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 302,
    "text": "",
    "type": "global variable"
  }, {
    "id": 303,
    "text": "",
    "type": "variable container"
  }, {
    "id": 304,
    "text": "",
    "type": "require container"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "n/a"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "n/a"
  }, {
    "id": 309,
    "text": "",
    "type": "local variable"
  }, {
    "id": 310,
    "text": "",
    "type": "n/a"
  }, {
    "id": 311,
    "text": "",
    "type": "local variable"
  }, {
    "id": 312,
    "text": "",
    "type": "n/a"
  }, {
    "id": 313,
    "text": "",
    "type": "local variable"
  }, {
    "id": 314,
    "text": "",
    "type": "n/a"
  }, {
    "id": 315,
    "text": "",
    "type": "local variable"
  }, {
    "id": 316,
    "text": "",
    "type": "n/a"
  }, {
    "id": 317,
    "text": "",
    "type": "local variable"
  }, {
    "id": 318,
    "text": "",
    "type": "n/a"
  }, {
    "id": 319,
    "text": "",
    "type": "local variable"
  }, {
    "id": 320,
    "text": "",
    "type": "n/a"
  }, {
    "id": 321,
    "text": "",
    "type": "local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "n/a"
  }, {
    "id": 323,
    "text": "",
    "type": "local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "n/a"
  }, {
    "id": 325,
    "text": "",
    "type": "local variable"
  }, {
    "id": 326,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 327,
    "text": "",
    "type": "local variable"
  }, {
    "id": 328,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 329,
    "text": "",
    "type": "string"
  }, {
    "id": 330,
    "text": "",
    "type": "string"
  }, {
    "id": 331,
    "text": "",
    "type": "string"
  }, {
    "id": 332,
    "text": "",
    "type": "string"
  }, {
    "id": 333,
    "text": "",
    "type": "string"
  }, {
    "id": 334,
    "text": "",
    "type": "string"
  }, {
    "id": 335,
    "text": "",
    "type": "string"
  }, {
    "id": 336,
    "text": "",
    "type": "string"
  }, {
    "id": 337,
    "text": "",
    "type": "local variable"
  }, {
    "id": 338,
    "text": "",
    "type": "local variable"
  }, {
    "id": 339,
    "text": "",
    "type": "local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "n/a"
  }, {
    "id": 341,
    "text": "",
    "type": "local variable"
  }, {
    "id": 342,
    "text": "",
    "type": "n/a"
  }, {
    "id": 343,
    "text": "",
    "type": "local variable"
  }, {
    "id": 344,
    "text": "",
    "type": "n/a"
  }, {
    "id": 345,
    "text": "",
    "type": "local variable"
  }, {
    "id": 346,
    "text": "",
    "type": "n/a"
  }, {
    "id": 347,
    "text": "",
    "type": "local variable"
  }, {
    "id": 348,
    "text": "",
    "type": "n/a"
  }, {
    "id": 349,
    "text": "",
    "type": "local variable"
  }, {
    "id": 350,
    "text": "",
    "type": "n/a"
  }, {
    "id": 351,
    "text": "",
    "type": "local variable"
  }, {
    "id": 352,
    "text": "",
    "type": "n/a"
  }, {
    "id": 353,
    "text": "",
    "type": "local variable"
  }, {
    "id": 354,
    "text": "",
    "type": "n/a"
  }, {
    "id": 355,
    "text": "",
    "type": "local variable"
  }, {
    "id": 356,
    "text": "",
    "type": "local variable"
  }, {
    "id": 357,
    "text": "",
    "type": "local variable"
  }, {
    "id": 358,
    "text": "",
    "type": "local variable"
  } ]
}