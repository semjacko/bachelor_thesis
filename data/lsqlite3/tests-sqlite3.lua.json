{
  "_filename": "tests-sqlite3.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lsqlite3/tests-sqlite3.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 11,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 33
  }, {
    "from": 25,
    "label": "has",
    "to": 34
  }, {
    "from": 25,
    "label": "has",
    "to": 35
  }, {
    "from": 25,
    "label": "has",
    "to": 36
  }, {
    "from": 25,
    "label": "has",
    "to": 37
  }, {
    "from": 25,
    "label": "has",
    "to": 38
  }, {
    "from": 25,
    "label": "has",
    "to": 39
  }, {
    "from": 25,
    "label": "has",
    "to": 40
  }, {
    "from": 25,
    "label": "has",
    "to": 41
  }, {
    "from": 25,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 43
  }, {
    "from": 25,
    "label": "has",
    "to": 44
  }, {
    "from": 25,
    "label": "has",
    "to": 45
  }, {
    "from": 25,
    "label": "has",
    "to": 46
  }, {
    "from": 25,
    "label": "has",
    "to": 47
  }, {
    "from": 25,
    "label": "has",
    "to": 48
  }, {
    "from": 25,
    "label": "has",
    "to": 49
  }, {
    "from": 25,
    "label": "has",
    "to": 50
  }, {
    "from": 25,
    "label": "has",
    "to": 51
  }, {
    "from": 25,
    "label": "has",
    "to": 52
  }, {
    "from": 25,
    "label": "has",
    "to": 53
  }, {
    "from": 25,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 68
  }, {
    "from": 70,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 68
  }, {
    "from": 70,
    "label": "has",
    "to": 69
  }, {
    "from": 71,
    "label": "has",
    "to": 68
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 68
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 73
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 8
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 97,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 97,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 111
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 96
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 118
  }, {
    "from": 125,
    "label": "has",
    "to": 119
  }, {
    "from": 125,
    "label": "has",
    "to": 120
  }, {
    "from": 125,
    "label": "has",
    "to": 121
  }, {
    "from": 125,
    "label": "has",
    "to": 122
  }, {
    "from": 125,
    "label": "has",
    "to": 119
  }, {
    "from": 125,
    "label": "has",
    "to": 120
  }, {
    "from": 125,
    "label": "has",
    "to": 123
  }, {
    "from": 125,
    "label": "has",
    "to": 96
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 119
  }, {
    "from": 128,
    "label": "has",
    "to": 120
  }, {
    "from": 128,
    "label": "has",
    "to": 121
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 128,
    "label": "has",
    "to": 119
  }, {
    "from": 128,
    "label": "has",
    "to": 120
  }, {
    "from": 128,
    "label": "has",
    "to": 123
  }, {
    "from": 128,
    "label": "has",
    "to": 96
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 126
  }, {
    "from": 133,
    "label": "has",
    "to": 130
  }, {
    "from": 133,
    "label": "has",
    "to": 119
  }, {
    "from": 133,
    "label": "has",
    "to": 120
  }, {
    "from": 133,
    "label": "has",
    "to": 121
  }, {
    "from": 133,
    "label": "has",
    "to": 131
  }, {
    "from": 133,
    "label": "has",
    "to": 119
  }, {
    "from": 133,
    "label": "has",
    "to": 120
  }, {
    "from": 133,
    "label": "has",
    "to": 123
  }, {
    "from": 133,
    "label": "has",
    "to": 96
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 126
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 135,
    "label": "has",
    "to": 119
  }, {
    "from": 135,
    "label": "has",
    "to": 120
  }, {
    "from": 135,
    "label": "has",
    "to": 140
  }, {
    "from": 135,
    "label": "has",
    "to": 141
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 135,
    "label": "has",
    "to": 119
  }, {
    "from": 135,
    "label": "has",
    "to": 120
  }, {
    "from": 135,
    "label": "has",
    "to": 142
  }, {
    "from": 135,
    "label": "has",
    "to": 96
  }, {
    "from": 135,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 8
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 58
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 147,
    "label": "has",
    "to": 155
  }, {
    "from": 147,
    "label": "has",
    "to": 156
  }, {
    "from": 147,
    "label": "has",
    "to": 157
  }, {
    "from": 147,
    "label": "has",
    "to": 158
  }, {
    "from": 147,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 149
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 160,
    "label": "has",
    "to": 152
  }, {
    "from": 160,
    "label": "has",
    "to": 164
  }, {
    "from": 160,
    "label": "has",
    "to": 165
  }, {
    "from": 160,
    "label": "has",
    "to": 166
  }, {
    "from": 160,
    "label": "has",
    "to": 167
  }, {
    "from": 160,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 149
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 149
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 175
  }, {
    "from": 172,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 8
  }, {
    "from": 178,
    "label": "has",
    "to": 58
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 180,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 179,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 179,
    "label": "has",
    "to": 188
  }, {
    "from": 179,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 187
  }, {
    "from": 179,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 179,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 181
  }, {
    "from": 194,
    "label": "has",
    "to": 182
  }, {
    "from": 194,
    "label": "has",
    "to": 183
  }, {
    "from": 194,
    "label": "has",
    "to": 184
  }, {
    "from": 194,
    "label": "has",
    "to": 185
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 196,
    "label": "has",
    "to": 199
  }, {
    "from": 196,
    "label": "has",
    "to": 200
  }, {
    "from": 196,
    "label": "has",
    "to": 200
  }, {
    "from": 196,
    "label": "has",
    "to": 200
  }, {
    "from": 195,
    "label": "has",
    "to": 8
  }, {
    "from": 195,
    "label": "has",
    "to": 201
  }, {
    "from": 195,
    "label": "has",
    "to": 202
  }, {
    "from": 195,
    "label": "has",
    "to": 203
  }, {
    "from": 204,
    "label": "has",
    "to": 197
  }, {
    "from": 204,
    "label": "has",
    "to": 198
  }, {
    "from": 204,
    "label": "has",
    "to": 199
  }, {
    "from": 204,
    "label": "has",
    "to": 200
  }, {
    "from": 204,
    "label": "has",
    "to": 200
  }, {
    "from": 204,
    "label": "has",
    "to": 200
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 58
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 208,
    "label": "has",
    "to": 213
  }, {
    "from": 208,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 218,
    "label": "has",
    "to": 220
  }, {
    "from": 218,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 221
  }, {
    "from": 222,
    "label": "has",
    "to": 216
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 222,
    "label": "has",
    "to": 226
  }, {
    "from": 222,
    "label": "has",
    "to": 227
  }, {
    "from": 222,
    "label": "has",
    "to": 228
  }, {
    "from": 222,
    "label": "has",
    "to": 229
  }, {
    "from": 222,
    "label": "has",
    "to": 230
  }, {
    "from": 222,
    "label": "has",
    "to": 231
  }, {
    "from": 222,
    "label": "has",
    "to": 232
  }, {
    "from": 222,
    "label": "has",
    "to": 233
  }, {
    "from": 222,
    "label": "has",
    "to": 234
  }, {
    "from": 222,
    "label": "has",
    "to": 235
  }, {
    "from": 222,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 99
  }, {
    "from": 238,
    "label": "has",
    "to": 101
  }, {
    "from": 239,
    "label": "has",
    "to": 103
  }, {
    "from": 240,
    "label": "has",
    "to": 105
  }, {
    "from": 241,
    "label": "has",
    "to": 107
  }, {
    "from": 242,
    "label": "has",
    "to": 109
  }, {
    "from": 243,
    "label": "has",
    "to": 114
  }, {
    "from": 244,
    "label": "has",
    "to": 116
  }, {
    "from": 245,
    "label": "has",
    "to": 187
  }, {
    "from": 246,
    "label": "calls",
    "to": 247
  }, {
    "from": 246,
    "label": "calls",
    "to": 247
  }, {
    "from": 179,
    "label": "calls",
    "to": 247
  }, {
    "from": 246,
    "label": "calls",
    "to": 248
  }, {
    "from": 246,
    "label": "calls",
    "to": 248
  }, {
    "from": 7,
    "label": "calls",
    "to": 248
  }, {
    "from": 9,
    "label": "calls",
    "to": 248
  }, {
    "from": 21,
    "label": "calls",
    "to": 248
  }, {
    "from": 21,
    "label": "calls",
    "to": 248
  }, {
    "from": 23,
    "label": "calls",
    "to": 248
  }, {
    "from": 23,
    "label": "calls",
    "to": 248
  }, {
    "from": 78,
    "label": "calls",
    "to": 248
  }, {
    "from": 86,
    "label": "calls",
    "to": 248
  }, {
    "from": 86,
    "label": "calls",
    "to": 248
  }, {
    "from": 135,
    "label": "calls",
    "to": 248
  }, {
    "from": 135,
    "label": "calls",
    "to": 248
  }, {
    "from": 144,
    "label": "calls",
    "to": 248
  }, {
    "from": 177,
    "label": "calls",
    "to": 248
  }, {
    "from": 195,
    "label": "calls",
    "to": 248
  }, {
    "from": 57,
    "label": "calls",
    "to": 257
  }, {
    "from": 59,
    "label": "calls",
    "to": 257
  }, {
    "from": 61,
    "label": "calls",
    "to": 257
  }, {
    "from": 63,
    "label": "calls",
    "to": 257
  }, {
    "from": 65,
    "label": "calls",
    "to": 257
  }, {
    "from": 246,
    "label": "calls",
    "to": 257
  }, {
    "from": 86,
    "label": "calls",
    "to": 257
  }, {
    "from": 110,
    "label": "calls",
    "to": 257
  }, {
    "from": 117,
    "label": "calls",
    "to": 257
  }, {
    "from": 117,
    "label": "calls",
    "to": 257
  }, {
    "from": 117,
    "label": "calls",
    "to": 257
  }, {
    "from": 117,
    "label": "calls",
    "to": 257
  }, {
    "from": 117,
    "label": "calls",
    "to": 257
  }, {
    "from": 117,
    "label": "calls",
    "to": 257
  }, {
    "from": 117,
    "label": "calls",
    "to": 257
  }, {
    "from": 125,
    "label": "calls",
    "to": 257
  }, {
    "from": 125,
    "label": "calls",
    "to": 257
  }, {
    "from": 125,
    "label": "calls",
    "to": 257
  }, {
    "from": 125,
    "label": "calls",
    "to": 257
  }, {
    "from": 125,
    "label": "calls",
    "to": 257
  }, {
    "from": 125,
    "label": "calls",
    "to": 257
  }, {
    "from": 125,
    "label": "calls",
    "to": 257
  }, {
    "from": 128,
    "label": "calls",
    "to": 257
  }, {
    "from": 128,
    "label": "calls",
    "to": 257
  }, {
    "from": 128,
    "label": "calls",
    "to": 257
  }, {
    "from": 128,
    "label": "calls",
    "to": 257
  }, {
    "from": 128,
    "label": "calls",
    "to": 257
  }, {
    "from": 128,
    "label": "calls",
    "to": 257
  }, {
    "from": 128,
    "label": "calls",
    "to": 257
  }, {
    "from": 133,
    "label": "calls",
    "to": 257
  }, {
    "from": 133,
    "label": "calls",
    "to": 257
  }, {
    "from": 133,
    "label": "calls",
    "to": 257
  }, {
    "from": 133,
    "label": "calls",
    "to": 257
  }, {
    "from": 133,
    "label": "calls",
    "to": 257
  }, {
    "from": 133,
    "label": "calls",
    "to": 257
  }, {
    "from": 133,
    "label": "calls",
    "to": 257
  }, {
    "from": 135,
    "label": "calls",
    "to": 257
  }, {
    "from": 135,
    "label": "calls",
    "to": 257
  }, {
    "from": 135,
    "label": "calls",
    "to": 257
  }, {
    "from": 135,
    "label": "calls",
    "to": 257
  }, {
    "from": 135,
    "label": "calls",
    "to": 257
  }, {
    "from": 144,
    "label": "calls",
    "to": 257
  }, {
    "from": 146,
    "label": "calls",
    "to": 257
  }, {
    "from": 147,
    "label": "calls",
    "to": 257
  }, {
    "from": 147,
    "label": "calls",
    "to": 257
  }, {
    "from": 169,
    "label": "calls",
    "to": 257
  }, {
    "from": 172,
    "label": "calls",
    "to": 257
  }, {
    "from": 178,
    "label": "calls",
    "to": 257
  }, {
    "from": 179,
    "label": "calls",
    "to": 257
  }, {
    "from": 206,
    "label": "calls",
    "to": 257
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 256
  }, {
    "from": 78,
    "label": "calls",
    "to": 256
  }, {
    "from": 78,
    "label": "calls",
    "to": 256
  }, {
    "from": 78,
    "label": "calls",
    "to": 256
  }, {
    "from": 78,
    "label": "calls",
    "to": 256
  }, {
    "from": 84,
    "label": "calls",
    "to": 256
  }, {
    "from": 86,
    "label": "calls",
    "to": 256
  }, {
    "from": 86,
    "label": "calls",
    "to": 256
  }, {
    "from": 86,
    "label": "calls",
    "to": 256
  }, {
    "from": 86,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 147,
    "label": "calls",
    "to": 256
  }, {
    "from": 169,
    "label": "calls",
    "to": 256
  }, {
    "from": 172,
    "label": "calls",
    "to": 256
  }, {
    "from": 194,
    "label": "calls",
    "to": 256
  }, {
    "from": 194,
    "label": "calls",
    "to": 256
  }, {
    "from": 194,
    "label": "calls",
    "to": 256
  }, {
    "from": 208,
    "label": "calls",
    "to": 256
  }, {
    "from": 208,
    "label": "calls",
    "to": 256
  }, {
    "from": 246,
    "label": "calls",
    "to": 2
  }, {
    "from": 246,
    "label": "calls",
    "to": 2
  }, {
    "from": 246,
    "label": "calls",
    "to": 2
  }, {
    "from": 246,
    "label": "calls",
    "to": 2
  }, {
    "from": 246,
    "label": "calls",
    "to": 2
  }, {
    "from": 246,
    "label": "calls",
    "to": 2
  }, {
    "from": 246,
    "label": "calls",
    "to": 2
  }, {
    "from": 246,
    "label": "calls",
    "to": 258
  }, {
    "from": 7,
    "label": "calls",
    "to": 258
  }, {
    "from": 21,
    "label": "calls",
    "to": 258
  }, {
    "from": 55,
    "label": "calls",
    "to": 258
  }, {
    "from": 246,
    "label": "calls",
    "to": 258
  }, {
    "from": 78,
    "label": "calls",
    "to": 258
  }, {
    "from": 144,
    "label": "calls",
    "to": 258
  }, {
    "from": 177,
    "label": "calls",
    "to": 258
  }, {
    "from": 195,
    "label": "calls",
    "to": 258
  }, {
    "from": 172,
    "label": "calls",
    "to": 255
  }, {
    "from": 194,
    "label": "calls",
    "to": 255
  }, {
    "from": 194,
    "label": "calls",
    "to": 255
  }, {
    "from": 195,
    "label": "calls",
    "to": 255
  }, {
    "from": 246,
    "label": "calls",
    "to": 6
  }, {
    "from": 179,
    "label": "calls",
    "to": 194
  }, {
    "from": 179,
    "label": "calls",
    "to": 194
  }, {
    "from": 179,
    "label": "calls",
    "to": 194
  }, {
    "from": 246,
    "label": "calls",
    "to": 254
  }, {
    "from": 246,
    "label": "calls",
    "to": 254
  }, {
    "from": 55,
    "label": "calls",
    "to": 254
  }, {
    "from": 246,
    "label": "calls",
    "to": 254
  }, {
    "from": 246,
    "label": "calls",
    "to": 254
  }, {
    "from": 110,
    "label": "calls",
    "to": 254
  }, {
    "from": 117,
    "label": "calls",
    "to": 254
  }, {
    "from": 125,
    "label": "calls",
    "to": 254
  }, {
    "from": 128,
    "label": "calls",
    "to": 254
  }, {
    "from": 133,
    "label": "calls",
    "to": 254
  }, {
    "from": 135,
    "label": "calls",
    "to": 254
  }, {
    "from": 147,
    "label": "calls",
    "to": 254
  }, {
    "from": 147,
    "label": "calls",
    "to": 254
  }, {
    "from": 169,
    "label": "calls",
    "to": 254
  }, {
    "from": 172,
    "label": "calls",
    "to": 254
  }, {
    "from": 246,
    "label": "calls",
    "to": 260
  }, {
    "from": 246,
    "label": "calls",
    "to": 5
  }, {
    "from": 246,
    "label": "calls",
    "to": 5
  }, {
    "from": 11,
    "label": "calls",
    "to": 252
  }, {
    "from": 11,
    "label": "calls",
    "to": 252
  }, {
    "from": 11,
    "label": "calls",
    "to": 252
  }, {
    "from": 11,
    "label": "calls",
    "to": 252
  }, {
    "from": 11,
    "label": "calls",
    "to": 252
  }, {
    "from": 11,
    "label": "calls",
    "to": 252
  }, {
    "from": 11,
    "label": "calls",
    "to": 252
  }, {
    "from": 11,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 246,
    "label": "calls",
    "to": 250
  }, {
    "from": 246,
    "label": "calls",
    "to": 259
  }, {
    "from": 246,
    "label": "calls",
    "to": 259
  }, {
    "from": 97,
    "label": "calls",
    "to": 251
  }, {
    "from": 246,
    "label": "calls",
    "to": 3
  }, {
    "from": 246,
    "label": "calls",
    "to": 3
  }, {
    "from": 246,
    "label": "calls",
    "to": 3
  }, {
    "from": 97,
    "label": "calls",
    "to": 253
  }, {
    "from": 97,
    "label": "calls",
    "to": 253
  }, {
    "from": 97,
    "label": "calls",
    "to": 253
  }, {
    "from": 97,
    "label": "calls",
    "to": 253
  }, {
    "from": 97,
    "label": "calls",
    "to": 253
  }, {
    "from": 110,
    "label": "calls",
    "to": 253
  }, {
    "from": 110,
    "label": "calls",
    "to": 253
  }, {
    "from": 246,
    "label": "calls",
    "to": 249
  }, {
    "from": 246,
    "label": "calls",
    "to": 4
  }, {
    "from": 1,
    "label": "contains",
    "to": 246
  }, {
    "from": 246,
    "label": "declares",
    "to": 7
  }, {
    "from": 246,
    "label": "declares",
    "to": 9
  }, {
    "from": 246,
    "label": "declares",
    "to": 11
  }, {
    "from": 246,
    "label": "declares",
    "to": 21
  }, {
    "from": 246,
    "label": "declares",
    "to": 23
  }, {
    "from": 246,
    "label": "declares",
    "to": 25
  }, {
    "from": 246,
    "label": "declares",
    "to": 55
  }, {
    "from": 246,
    "label": "declares",
    "to": 57
  }, {
    "from": 246,
    "label": "declares",
    "to": 59
  }, {
    "from": 246,
    "label": "declares",
    "to": 61
  }, {
    "from": 246,
    "label": "declares",
    "to": 63
  }, {
    "from": 246,
    "label": "declares",
    "to": 65
  }, {
    "from": 246,
    "label": "declares",
    "to": 67
  }, {
    "from": 246,
    "label": "declares",
    "to": 70
  }, {
    "from": 246,
    "label": "declares",
    "to": 71
  }, {
    "from": 246,
    "label": "declares",
    "to": 75
  }, {
    "from": 246,
    "label": "declares",
    "to": 78
  }, {
    "from": 246,
    "label": "declares",
    "to": 84
  }, {
    "from": 246,
    "label": "declares",
    "to": 86
  }, {
    "from": 246,
    "label": "declares",
    "to": 97
  }, {
    "from": 246,
    "label": "declares",
    "to": 110
  }, {
    "from": 246,
    "label": "declares",
    "to": 117
  }, {
    "from": 246,
    "label": "declares",
    "to": 125
  }, {
    "from": 246,
    "label": "declares",
    "to": 128
  }, {
    "from": 246,
    "label": "declares",
    "to": 133
  }, {
    "from": 246,
    "label": "declares",
    "to": 135
  }, {
    "from": 246,
    "label": "declares",
    "to": 144
  }, {
    "from": 246,
    "label": "declares",
    "to": 146
  }, {
    "from": 246,
    "label": "declares",
    "to": 147
  }, {
    "from": 246,
    "label": "declares",
    "to": 160
  }, {
    "from": 246,
    "label": "declares",
    "to": 169
  }, {
    "from": 246,
    "label": "declares",
    "to": 172
  }, {
    "from": 246,
    "label": "declares",
    "to": 177
  }, {
    "from": 246,
    "label": "declares",
    "to": 178
  }, {
    "from": 246,
    "label": "declares",
    "to": 179
  }, {
    "from": 246,
    "label": "declares",
    "to": 194
  }, {
    "from": 246,
    "label": "declares",
    "to": 195
  }, {
    "from": 246,
    "label": "declares",
    "to": 204
  }, {
    "from": 246,
    "label": "declares",
    "to": 206
  }, {
    "from": 246,
    "label": "declares",
    "to": 208
  }, {
    "from": 246,
    "label": "declares",
    "to": 215
  }, {
    "from": 246,
    "label": "declares",
    "to": 218
  }, {
    "from": 246,
    "label": "declares",
    "to": 222
  }, {
    "from": 246,
    "label": "declares",
    "to": 237
  }, {
    "from": 246,
    "label": "declares",
    "to": 238
  }, {
    "from": 246,
    "label": "declares",
    "to": 239
  }, {
    "from": 246,
    "label": "declares",
    "to": 240
  }, {
    "from": 246,
    "label": "declares",
    "to": 241
  }, {
    "from": 246,
    "label": "declares",
    "to": 242
  }, {
    "from": 246,
    "label": "declares",
    "to": 243
  }, {
    "from": 246,
    "label": "declares",
    "to": 244
  }, {
    "from": 246,
    "label": "declares",
    "to": 245
  }, {
    "from": 1,
    "label": "contains",
    "to": 262
  }, {
    "from": 1,
    "label": "contains",
    "to": 263
  }, {
    "from": 262,
    "label": "initializes",
    "to": 264
  }, {
    "from": 264,
    "label": "assigns",
    "to": 265
  }, {
    "from": 262,
    "label": "initializes",
    "to": 266
  }, {
    "from": 266,
    "label": "assigns",
    "to": 267
  }, {
    "from": 262,
    "label": "initializes",
    "to": 268
  }, {
    "from": 268,
    "label": "assigns",
    "to": 269
  }, {
    "from": 262,
    "label": "initializes",
    "to": 270
  }, {
    "from": 270,
    "label": "assigns",
    "to": 271
  }, {
    "from": 262,
    "label": "initializes",
    "to": 272
  }, {
    "from": 272,
    "label": "assigns",
    "to": 273
  }, {
    "from": 262,
    "label": "initializes",
    "to": 274
  }, {
    "from": 274,
    "label": "assigns",
    "to": 275
  }, {
    "from": 262,
    "label": "initializes",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 263,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "requires",
    "to": 278
  }, {
    "from": 263,
    "label": "initializes",
    "to": 261
  }, {
    "from": 98,
    "label": "hasArgument",
    "to": 237
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 238
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 239
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 240
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 241
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 242
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 243
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 244
  }, {
    "from": 186,
    "label": "hasArgument",
    "to": 245
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tests-sqlite3",
    "type": "module"
  }, {
    "id": 2,
    "text": "function TestCase(name)\r\n  do_assert(is_string(name), \"lunit.TestCase() needs a string as an argument\")\r\n  local tc = {\r\n    __lunit_name = name;\r\n    __lunit_setup = nil;\r\n    __lunit_tests = { };\r\n    __lunit_teardown = nil;\r\n  }\r\n  setmetatable(tc, tc_mt)\r\n  table.insert(testcases, tc)\r\n  return tc\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function wrap(name, ...)\r\n  if is_function(name) then\r\n    table.insert({...}, 1, name)\r\n    name = \"Anonymous Testcase\"\r\n  end\r\n  \r\n  local tc = TestCase(name)\r\n  for index, test in ipairs({...}) do\r\n    tc[\"Test #\"..index] = test\r\n  end\r\n  return tc\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function run()\r\n  \r\n  ---------------------------\r\n  -- Initialize statistics --\r\n  ---------------------------\r\n  \r\n  stats.testcases = 0\t-- Total number of Test Cases\r\n  stats.tests = 0\t-- Total number of all Tests in all Test Cases\r\n  stats.run = 0\t\t-- Number of Tests run\r\n  stats.notrun = 0\t-- Number of Tests not run\r\n  stats.failed = 0\t-- Number of Tests failed\r\n  stats.warnings = 0\t-- Number of Warnings (teardown)\r\n  stats.errors = 0\t-- Number of Errors (setup)\r\n  stats.passed = 0\t-- Number of Test passed\r\n  stats.assertions = 0\t-- Number of all assertions made in all Test in all Test Cases\r\n  \r\n  --------------------------------\r\n  -- Count Test Cases and Tests --\r\n  --------------------------------\r\n  \r\n  stats.testcases = table.getn(testcases)\r\n  \r\n  for _, tc in ipairs(testcases) do\r\n    stats_inc(\"tests\" , table.getn(tc.__lunit_tests))\r\n  end\r\n  \r\n  ------------------\r\n  -- Print Header --\r\n  ------------------\r\n  \r\n  print()\r\n  print(\"#### Test Suite with \"..stats.tests..\" Tests in \"..stats.testcases..\" Test Cases loaded.\")\r\n  \r\n  ------------------------\r\n  -- Run all Test Cases --\r\n  ------------------------\r\n  \r\n  for _, tc in ipairs(testcases) do\r\n    run_testcase(tc)\r\n  end\r\n  \r\n  ------------------\r\n  -- Print Footer --\r\n  ------------------\r\n  \r\n  print()\r\n  print(\"#### Test Suite finished.\")\r\n  \r\n  local msg_assertions = stats.assertions..\" Assertions checked. \"\r\n  local msg_passed     = stats.passed == stats.tests and \"All Tests passed\" or  stats.passed..\" Tests passed\"\r\n  local msg_failed     = stats.failed > 0 and \", \"..stats.failed..\" failed\" or \"\"\r\n  local msg_run\t       = stats.notrun > 0 and \", \"..stats.notrun..\" not run\" or \"\"\r\n  local msg_warn       = stats.warnings > 0 and \", \"..stats.warnings..\" warnings\" or \"\"\r\n  \r\n  print()\r\n  print(msg_assertions..msg_passed..msg_failed..msg_run..msg_warn..\"!\")\r\n  \r\n  -----------------\r\n  -- Return code --\r\n  -----------------\r\n  \r\n  if stats.passed == stats.tests then\r\n    return 0\r\n  else\r\n    return 1\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function import(name)\r\n  \r\n  do_assert(is_string(name), \"lunit.import() expects a single string as argument\")\r\n  \r\n  local user_env = getfenv(2)\r\n  \r\n  --------------------------------------------------\r\n  -- Installs a specific function in the user env --\r\n  --------------------------------------------------\r\n  \r\n  local function install(funcname)\r\n    user_env[funcname] = P[funcname]\r\n  end\r\n  \r\n  \r\n  ----------------------------------------------------------\r\n  -- Install functions matching a pattern in the user env --\r\n  ----------------------------------------------------------\r\n  \r\n  local function install_pattern(pattern)\r\n    for funcname, _ in pairs(P) do\r\n      if string.find(funcname, pattern) then\r\n        install(funcname)\r\n      end\r\n    end\r\n  end\r\n  \r\n  ------------------------------------------------------------\r\n  -- Installs assert() and all assert_xxx() in the user env --\r\n  ------------------------------------------------------------\r\n  \r\n  local function install_asserts()\r\n    install_pattern(\"^assert.*\")\r\n  end\r\n  \r\n  -------------------------------------------\r\n  -- Installs all is_xxx() in the user env --\r\n  -------------------------------------------\r\n  \r\n  local function install_tests()\r\n    install_pattern(\"^is_.+\")\r\n  end\r\n  \r\n  if name == \"asserts\" or name == \"assertions\" then\r\n    install_asserts()\r\n  elseif name == \"tests\" or name == \"checks\" then\r\n    install_tests()\r\n  elseif name == \"all\" then\r\n    install_asserts()\r\n    install_tests()\r\n    install(\"TestCase\")\r\n  elseif string.find(name, \"^assert.*\") and P[name] then\r\n    install(name)\r\n  elseif string.find(name, \"^is_.+\") and P[name] then\r\n    install(name)\r\n  elseif name == \"TestCase\" then\r\n    install(\"TestCase\")\r\n  else\r\n    error(\"luniit.import(): invalid function '\"..name..\"' to import\", 2)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function setprivfenv()\r\n  local new_env = { }\r\n  local new_env_mt = { __index = getfenv(2) }\r\n  setmetatable(new_env, new_env_mt)\r\n  setfenv(2, new_env)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function db_funcs:setup()\n  self.db = assert( sqlite3.open_memory() )\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "self.db = assert( sqlite3.open_memory() )",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "function db_funcs:teardown()\n  assert( self.db:close() )\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert( self.db:close() )",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "function db_funcs:test()\n  local db = self.db\n  assert_function( db.close )\n  assert_function( db.exec )\n--e  assert_function( db.irows )\n  assert_function( db.rows )\n--e  assert_function( db.cols )\n--e  assert_function( db.first_irow )\n--e  assert_function( db.first_row )\n--e  assert_function( db.first_cols )\n  assert_function( db.prepare )\n  assert_function( db.interrupt )\n  assert_function( db.last_insert_rowid )\n  assert_function( db.changes )\n  assert_function( db.total_changes )\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local db = self.db",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "assert_function( db.close )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert_function( db.exec )",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert_function( db.rows )",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert_function( db.prepare )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert_function( db.interrupt )",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert_function( db.last_insert_rowid )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert_function( db.changes )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert_function( db.total_changes )",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "function stmt_funcs:setup()\n  self.db = assert( sqlite3.open_memory() )\n  self.stmt = assert( self.db:prepare(\"CREATE TABLE test (id, content)\") )\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "self.stmt = assert( self.db:prepare(\"CREATE TABLE test (id, content)\") )",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "function stmt_funcs:teardown()\n--e-  assert( self.stmt:close() )\r\n  assert( self.stmt:finalize() ) --e+\n  assert( self.db:close() )\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "assert( self.stmt:finalize() )",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "function stmt_funcs:test()\n  local stmt = self.stmt\n--e  assert_function( stmt.close )\n  assert_function( stmt.reset )\n--e  assert_function( stmt.exec )\n  assert_function( stmt.bind )\n--e  assert_function( stmt.irows )\n--e  assert_function( stmt.rows )\n--e  assert_function( stmt.cols )\n--e  assert_function( stmt.first_irow )\n--e  assert_function( stmt.first_row )\n--e  assert_function( stmt.first_cols )\n--e  assert_function( stmt.column_names )\n--e  assert_function( stmt.column_decltypes )\n--e  assert_function( stmt.column_count )\n--e +\r\n  assert_function( stmt.isopen )\r\n  assert_function( stmt.step )\r\n  assert_function( stmt.reset )\r\n  assert_function( stmt.finalize )\r\n  assert_function( stmt.columns )\r\n  assert_function( stmt.bind )\r\n  assert_function( stmt.bind_values )\r\n  assert_function( stmt.bind_names )\r\n  assert_function( stmt.bind_blob )\r\n  assert_function( stmt.bind_parameter_count )\r\n  assert_function( stmt.bind_parameter_name )\r\n  assert_function( stmt.get_value )\r\n  assert_function( stmt.get_values )\r\n  assert_function( stmt.get_name )\r\n  assert_function( stmt.get_names )\r\n  assert_function( stmt.get_type )\r\n  assert_function( stmt.get_types )\r\n  assert_function( stmt.get_uvalues )\r\n  assert_function( stmt.get_unames )\r\n  assert_function( stmt.get_utypes )\r\n  assert_function( stmt.get_named_values )\r\n  assert_function( stmt.get_named_types )\r\n  assert_function( stmt.idata )\r\n  assert_function( stmt.inames )\r\n  assert_function( stmt.itypes )\r\n  assert_function( stmt.data )\r\n  assert_function( stmt.type )\r\n--e +\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local stmt = self.stmt",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "assert_function( stmt.reset )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert_function( stmt.bind )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert_function( stmt.isopen )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert_function( stmt.step )",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert_function( stmt.finalize )",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert_function( stmt.columns )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert_function( stmt.bind_values )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert_function( stmt.bind_names )",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert_function( stmt.bind_blob )",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert_function( stmt.bind_parameter_count )",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert_function( stmt.bind_parameter_name )",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert_function( stmt.get_value )",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert_function( stmt.get_values )",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert_function( stmt.get_name )",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert_function( stmt.get_names )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert_function( stmt.get_type )",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert_function( stmt.get_types )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert_function( stmt.get_uvalues )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert_function( stmt.get_unames )",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert_function( stmt.get_utypes )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert_function( stmt.get_named_values )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert_function( stmt.get_named_types )",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert_function( stmt.idata )",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert_function( stmt.inames )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert_function( stmt.itypes )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert_function( stmt.data )",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert_function( stmt.type )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function basics:setup()\n  self.db = assert_userdata( sqlite3.open_memory() )\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "self.db = assert_userdata( sqlite3.open_memory() )",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "function basics:teardown()\n  assert_number( self.db:close() )\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "assert_number( self.db:close() )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "function basics:create_table()\n  assert_number( self.db:exec(\"CREATE TABLE test (id, name)\") )\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "assert_number( self.db:exec(\"CREATE TABLE test (id, name)\") )",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "function basics:drop_table()\n  assert_number( self.db:exec(\"DROP TABLE test\") )\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "assert_number( self.db:exec(\"DROP TABLE test\") )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "function basics:insert(id, name)\n  assert_number( self.db:exec(\"INSERT INTO test VALUES (\"..id..\", '\"..name..\"')\") )\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "assert_number( self.db:exec(\"INSERT INTO test VALUES (\"..id..\", '\"..name..\"')\") )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "function basics:update(id, name)\n  assert_number( self.db:exec(\"UPDATE test SET name = '\"..name..\"' WHERE id = \"..id) )\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "assert_number( self.db:exec(\"UPDATE test SET name = '\"..name..\"' WHERE id = \"..id) )",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "function basics:test_create_drop()\n  self:create_table()\n  self:drop_table()\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "self:create_table()",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "self:drop_table()",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "function basics:test_multi_create_drop()\n  self:create_table()\n  self:drop_table()\n  self:create_table()\n  self:drop_table()\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "function basics:test_insert()\n  self:create_table()\n  self:insert(1, \"Hello World\")\n  self:insert(2, \"Hello Lua\")\n  self:insert(3, \"Hello sqlite3\")\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "self:insert(1, \"Hello World\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "self:insert(2, \"Hello Lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "self:insert(3, \"Hello sqlite3\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "function basics:test_update()\n  self:create_table()\n  self:insert(1, \"Hello Home\")\n  self:insert(2, \"Hello Lua\")\n  self:update(1, \"Hello World\")\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "self:insert(1, \"Hello Home\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "self:update(1, \"Hello World\")",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "function st:setup()\r\n  self.db = assert( sqlite3.open_memory() )\n  assert_equal( sqlite3.OK, self.db:exec(\"CREATE TABLE test (id, name)\") )\n  assert_equal( sqlite3.OK, self.db:exec(\"INSERT INTO test VALUES (1, 'Hello World')\") )\n  assert_equal( sqlite3.OK, self.db:exec(\"INSERT INTO test VALUES (2, 'Hello Lua')\") )\n  assert_equal( sqlite3.OK, self.db:exec(\"INSERT INTO test VALUES (3, 'Hello sqlite3')\") )\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "assert_equal( sqlite3.OK, self.db:exec(\"CREATE TABLE test (id, name)\") )",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert_equal( sqlite3.OK, self.db:exec(\"INSERT INTO test VALUES (1, 'Hello World')\") )",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert_equal( sqlite3.OK, self.db:exec(\"INSERT INTO test VALUES (2, 'Hello Lua')\") )",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert_equal( sqlite3.OK, self.db:exec(\"INSERT INTO test VALUES (3, 'Hello sqlite3')\") )",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function st:teardown()\n  assert_equal( sqlite3.OK, self.db:close() )\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "assert_equal( sqlite3.OK, self.db:close() )",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "function st:check_content(expected)\n  local stmt = assert( self.db:prepare(\"SELECT * FROM test ORDER BY id\") )\n  local i = 0\n  for row in stmt:rows() do\n    i = i + 1\n    assert( i <= #(expected), \"Too many rows.\" )\n    assert_equal(2, #(row), \"Two result column expected.\")\n    assert_equal(i, row[1], \"Wrong 'id'.\")\n    assert_equal(expected[i], row[2], \"Wrong 'name'.\")\n  end\n  assert_equal( #(expected), i, \"Too few rows.\" )\n  assert_number( stmt:finalize() )\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local stmt = assert( self.db:prepare(\"SELECT * FROM test ORDER BY id\") )",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for row in stmt:rows() do\n    i = i + 1\n    assert( i <= #(expected), \"Too many rows.\" )\n    assert_equal(2, #(row), \"Two result column expected.\")\n    assert_equal(i, row[1], \"Wrong 'id'.\")\n    assert_equal(expected[i], row[2], \"Wrong 'name'.\")\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "assert( i <= #(expected), \"Too many rows.\" )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert_equal(2, #(row), \"Two result column expected.\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert_equal(i, row[1], \"Wrong 'id'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert_equal(expected[i], row[2], \"Wrong 'name'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assert_equal( #(expected), i, \"Too few rows.\" )",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "assert_number( stmt:finalize() )",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "function st:test_setup()\n  assert_pass(function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\" } end)\n  assert_error(function() self:check_content{ \"Hello World\", \"Hello Lua\" } end)\n  assert_error(function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"To much\" } end)\n  assert_error(function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Wrong\" } end)\n  assert_error(function() self:check_content{ \"Hello World\", \"Wrong\", \"Hello sqlite3\" } end)\n  assert_error(function() self:check_content{ \"Wrong\", \"Hello Lua\", \"Hello sqlite3\" } end)\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "assert_pass(function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\" } end)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\" }",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert_error(function() self:check_content{ \"Hello World\", \"Hello Lua\" } end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "self:check_content{ \"Hello World\", \"Hello Lua\" }",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "assert_error(function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"To much\" } end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"To much\" }",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert_error(function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Wrong\" } end)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "self:check_content{ \"Hello World\", \"Hello Lua\", \"Wrong\" }",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert_error(function() self:check_content{ \"Hello World\", \"Wrong\", \"Hello sqlite3\" } end)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "self:check_content{ \"Hello World\", \"Wrong\", \"Hello sqlite3\" }",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert_error(function() self:check_content{ \"Wrong\", \"Hello Lua\", \"Hello sqlite3\" } end)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "self:check_content{ \"Wrong\", \"Hello Lua\", \"Hello sqlite3\" }",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "function st:test_questionmark_args()\n  local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (?, ?)\")  )\n  assert_number( stmt:bind_values(0, \"Test\") )\n  assert_error(function() stmt:bind_values(\"To few\") end)\n  assert_error(function() stmt:bind_values(0, \"Test\", \"To many\") end)\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (?, ?)\")  )",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "assert_number( stmt:bind_values(0, \"Test\") )",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert_error(function() stmt:bind_values(\"To few\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "stmt:bind_values(\"To few\")",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "assert_error(function() stmt:bind_values(0, \"Test\", \"To many\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "stmt:bind_values(0, \"Test\", \"To many\")",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "function st:test_questionmark()\n  local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (?, ?)\")  )\n  assert_number( stmt:bind_values(4, \"Good morning\") )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\" }\n  assert_number( stmt:bind_values(5, \"Foo Bar\") )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\", \"Foo Bar\" }\n  assert_number( stmt:finalize() )\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "assert_number( stmt:bind_values(4, \"Good morning\") )",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert_number( stmt:step() )",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert_number( stmt:reset() )",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\" }",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert_number( stmt:bind_values(5, \"Foo Bar\") )",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\", \"Foo Bar\" }",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function st:test_identifiers()\n  local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (:id, :name)\")  )\n  assert_number( stmt:bind_values(4, \"Good morning\") )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\" }\n  assert_number( stmt:bind_values(5, \"Foo Bar\") )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\", \"Foo Bar\" }\n  assert_number( stmt:finalize() )\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (:id, :name)\")  )",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function st:test_identifiers_names()\n  --local stmt = assert_userdata( self.db:prepare({\"name\", \"id\"}, \"INSERT INTO test VALUES (:id, $name)\")  )\r\n  local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (:id, $name)\")  )\r\n  assert_number( stmt:bind_names({name=\"Good morning\", id=4}) )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\" }\n  assert_number( stmt:bind_names({name=\"Foo Bar\", id=5}) )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\", \"Foo Bar\" }\n  assert_number( stmt:finalize() )\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (:id, $name)\")  )",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "assert_number( stmt:bind_names({name=\"Good morning\", id=4}) )",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert_number( stmt:bind_names({name=\"Foo Bar\", id=5}) )",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function st:test_colon_identifiers_names()\n  local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (:id, :name)\")  )\n  assert_number( stmt:bind_names({name=\"Good morning\", id=4}) )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\" }\n  assert_number( stmt:bind_names({name=\"Foo Bar\", id=5}) )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"Good morning\", \"Foo Bar\" }\n  assert_number( stmt:finalize() )\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function st:test_bind_by_names()\n  local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES (:id, :name)\")  )\n  local args = { }\n  args.id = 5\n  args.name = \"Hello girls\"\n  assert( stmt:bind_names(args) )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  args.id = 4\n  args.name = \"Hello boys\"\n  assert( stmt:bind_names(args) )\n  assert_number( stmt:step() )\r\n  assert_number( stmt:reset() )\r\n  self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\",  \"Hello boys\", \"Hello girls\" }\n  assert_number( stmt:finalize() )\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local args = { }",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "args.id = 5",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "args.name = \"Hello girls\"",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "assert( stmt:bind_names(args) )",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "args.id = 4",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "args.name = \"Hello boys\"",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\",  \"Hello boys\", \"Hello girls\" }",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function b:setup()\n  self.db = assert( sqlite3.open_memory() )\n  assert_number( self.db:exec(\"CREATE TABLE test (id, name, u, v, w, x, y, z)\") )\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "assert_number( self.db:exec(\"CREATE TABLE test (id, name, u, v, w, x, y, z)\") )",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "function b:teardown()\n  assert_number( self.db:close() )\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "function b:test_auto_parameter_names()\r\n  local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES(:a, $b, :a2, :b2, $a, :b, $a3, $b3)\") )\r\n  local parameters = assert_number( stmt:bind_parameter_count() )\r\n  assert_equal( 8, parameters )\r\n  assert_equal( \":a\", stmt:bind_parameter_name(1) )\r\n  assert_equal( \"$b\", stmt:bind_parameter_name(2) )\r\n  assert_equal( \":a2\", stmt:bind_parameter_name(3) )\r\n  assert_equal( \":b2\", stmt:bind_parameter_name(4) )\r\n  assert_equal( \"$a\", stmt:bind_parameter_name(5) )\r\n  assert_equal( \":b\", stmt:bind_parameter_name(6) )\r\n  assert_equal( \"$a3\", stmt:bind_parameter_name(7) )\r\n  assert_equal( \"$b3\", stmt:bind_parameter_name(8) )\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES(:a, $b, :a2, :b2, $a, :b, $a3, $b3)\") )",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local parameters = assert_number( stmt:bind_parameter_count() )",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "assert_equal( 8, parameters )",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert_equal( \":a\", stmt:bind_parameter_name(1) )",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "assert_equal( \"$b\", stmt:bind_parameter_name(2) )",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "assert_equal( \":a2\", stmt:bind_parameter_name(3) )",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "assert_equal( \":b2\", stmt:bind_parameter_name(4) )",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "assert_equal( \"$a\", stmt:bind_parameter_name(5) )",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "assert_equal( \":b\", stmt:bind_parameter_name(6) )",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "assert_equal( \"$a3\", stmt:bind_parameter_name(7) )",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "assert_equal( \"$b3\", stmt:bind_parameter_name(8) )",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function b:test_auto_parameter_names()\r\n  local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES($a, $b, $a2, $b2, $a, $b, $a3, $b3)\") )\r\n  local parameters = assert_number( stmt:bind_parameter_count() )\r\n  assert_equal( 6, parameters )\r\n  assert_equal( \"$a\", stmt:bind_parameter_name(1) )\r\n  assert_equal( \"$b\", stmt:bind_parameter_name(2) )\r\n  assert_equal( \"$a2\", stmt:bind_parameter_name(3) )\r\n  assert_equal( \"$b2\", stmt:bind_parameter_name(4) )\r\n  assert_equal( \"$a3\", stmt:bind_parameter_name(5) )\r\n  assert_equal( \"$b3\", stmt:bind_parameter_name(6) )\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "local stmt = assert_userdata( self.db:prepare(\"INSERT INTO test VALUES($a, $b, $a2, $b2, $a, $b, $a3, $b3)\") )",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "assert_equal( 6, parameters )",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert_equal( \"$a\", stmt:bind_parameter_name(1) )",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "assert_equal( \"$a2\", stmt:bind_parameter_name(3) )",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "assert_equal( \"$b2\", stmt:bind_parameter_name(4) )",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "assert_equal( \"$a3\", stmt:bind_parameter_name(5) )",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert_equal( \"$b3\", stmt:bind_parameter_name(6) )",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function b:test_no_parameter_names_1()\n  local stmt = assert_userdata( self.db:prepare([[ SELECT * FROM test ]]))\n  local parameters = assert_number( stmt:bind_parameter_count() )\n  assert_equal( 0, (parameters) )\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "local stmt = assert_userdata( self.db:prepare([[ SELECT * FROM test ]]))",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "assert_equal( 0, (parameters) )",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "function b:test_no_parameter_names_2()\n  local stmt = assert_userdata( self.db:prepare([[ INSERT INTO test VALUES(?, ?, ?, ?, ?, ?, ?, ?) ]]))\n  local parameters = assert_number( stmt:bind_parameter_count() )\n  assert_equal( 8, (parameters) )\n  assert_nil( stmt:bind_parameter_name(1) )\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "local stmt = assert_userdata( self.db:prepare([[ INSERT INTO test VALUES(?, ?, ?, ?, ?, ?, ?, ?) ]]))",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "assert_equal( 8, (parameters) )",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "assert_nil( stmt:bind_parameter_name(1) )",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function bug:setup()\n  self.db = assert( sqlite3.open_memory() )\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "function bug:teardown()\n  assert_number( self.db:close() )\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "function bug:test_nils()   -- appeared in lua-5.1 (holes in arrays)\n  local function check(arg1, arg2, arg3, arg4, arg5)\n    assert_equal(1, arg1)\n    assert_equal(2, arg2)\n    assert_nil(arg3)\n    assert_equal(4, arg4)\n    assert_nil(arg5)\n  end\n  \n  self.db:create_function(\"test_nils\", 5, function(arg1, arg2, arg3, arg4, arg5)\n    check(arg1, arg2, arg3, arg4, arg5)\n  end, {})\n  \n  assert_number( self.db:exec([[ SELECT test_nils(1, 2, NULL, 4, NULL) ]]) )\n  \n  for arg1, arg2, arg3, arg4, arg5 in self.db:urows([[ SELECT 1, 2, NULL, 4, NULL ]])\n  do check(arg1, arg2, arg3, arg4, arg5) \r\n  end\n  \n  for row in self.db:rows([[ SELECT 1, 2, NULL, 4, NULL ]])\n  do assert_table( row ) \r\n     check(row[1], row[2], row[3], row[4], row[5])\n  end\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "local function check(arg1, arg2, arg3, arg4, arg5)\n    assert_equal(1, arg1)\n    assert_equal(2, arg2)\n    assert_nil(arg3)\n    assert_equal(4, arg4)\n    assert_nil(arg5)\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 181,
    "text": "assert_equal(1, arg1)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "assert_equal(2, arg2)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "assert_nil(arg3)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "assert_equal(4, arg4)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert_nil(arg5)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "self.db:create_function(\"test_nils\", 5, function(arg1, arg2, arg3, arg4, arg5)\n    check(arg1, arg2, arg3, arg4, arg5)\n  end, {})",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "check(arg1, arg2, arg3, arg4, arg5)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert_number( self.db:exec([[ SELECT test_nils(1, 2, NULL, 4, NULL) ]]) )",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "for arg1, arg2, arg3, arg4, arg5 in self.db:urows([[ SELECT 1, 2, NULL, 4, NULL ]])\n  do check(arg1, arg2, arg3, arg4, arg5) \r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 190,
    "text": "for row in self.db:rows([[ SELECT 1, 2, NULL, 4, NULL ]])\n  do assert_table( row ) \r\n     check(row[1], row[2], row[3], row[4], row[5])\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 191,
    "text": "assert_table( row )",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "check(row[1], row[2], row[3], row[4], row[5])",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "local function check(arg1, arg2, arg3, arg4, arg5)\n    assert_equal(1, arg1)\n    assert_equal(2, arg2)\n    assert_nil(arg3)\n    assert_equal(4, arg4)\n    assert_nil(arg5)\n  end",
    "type": "function"
  }, {
    "id": 195,
    "text": "function colla:setup()\r\n    local function collate(s1,s2)\r\n        -- if p then print(\"collation callback: \",s1,s2) end\r\n        s1=s1:lower()\r\n        s2=s2:lower()\r\n        if s1==s2 then return 0\r\n        elseif s1<s2 then return -1\r\n        else return 1 end\r\n    end\r\n    self.db = assert( sqlite3.open_memory() )\r\n    assert_nil(self.db:create_collation('CINSENS',collate))\r\n    self.db:exec[[\r\n      CREATE TABLE test(id INTEGER PRIMARY KEY,content COLLATE CINSENS);\r\n      INSERT INTO test VALUES(NULL,'hello world');\r\n      INSERT INTO test VALUES(NULL,'Buenos dias');\r\n      INSERT INTO test VALUES(NULL,'HELLO WORLD');\r\n      INSERT INTO test VALUES(NULL,'Guten Tag');\r\n      INSERT INTO test VALUES(NULL,'HeLlO WoRlD');\r\n      INSERT INTO test VALUES(NULL,'Bye for now');\r\n    ]]\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "local function collate(s1,s2)\r\n        -- if p then print(\"collation callback: \",s1,s2) end\r\n        s1=s1:lower()\r\n        s2=s2:lower()\r\n        if s1==s2 then return 0\r\n        elseif s1<s2 then return -1\r\n        else return 1 end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 197,
    "text": "s1=s1:lower()",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "s2=s2:lower()",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "if s1==s2 then return 0\r\n        elseif s1<s2 then return -1\r\n        else return 1 end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 201,
    "text": "assert_nil(self.db:create_collation('CINSENS',collate))",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "self.db:exec[[\r\n      CREATE TABLE test(id INTEGER PRIMARY KEY,content COLLATE CINSENS);\r\n      INSERT INTO test VALUES(NULL,'hello world');\r\n      INSERT INTO test VALUES(NULL,'Buenos dias');\r\n      INSERT INTO test VALUES(NULL,'HELLO WORLD');\r\n      INSERT INTO test VALUES(NULL,'Guten Tag');\r\n      INSERT INTO test VALUES(NULL,'HeLlO WoRlD');\r\n      INSERT INTO test VALUES(NULL,'Bye for now');\r\n    ]]",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 204,
    "text": "local function collate(s1,s2)\r\n        -- if p then print(\"collation callback: \",s1,s2) end\r\n        s1=s1:lower()\r\n        s2=s2:lower()\r\n        if s1==s2 then return 0\r\n        elseif s1<s2 then return -1\r\n        else return 1 end\r\n    end",
    "type": "function"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "function colla:teardown()\r\n  assert_number( self.db:close() )\r\nend",
    "type": "function"
  }, {
    "id": 207,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 208,
    "text": "function colla:test()\r\n    --for row in db:nrows('SELECT * FROM test') do\r\n    --  print(row.id,row.content)\r\n    --end\r\n    local n = 0\r\n    for row in self.db:nrows('SELECT * FROM test WHERE content=\"hElLo wOrLd\"') do\r\n      -- print(row.id,row.content)\r\n      assert_equal (row.content:lower(), \"hello world\")\r\n      n = n + 1\r\n    end\r\n    assert_equal (n, 3)\r\nend",
    "type": "function"
  }, {
    "id": 209,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "for row in self.db:nrows('SELECT * FROM test WHERE content=\"hElLo wOrLd\"') do\r\n      -- print(row.id,row.content)\r\n      assert_equal (row.content:lower(), \"hello world\")\r\n      n = n + 1\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 211,
    "text": "assert_equal (row.content:lower(), \"hello world\")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "assert_equal (n, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function()\n  local db = assert_userdata( sqlite3.open_memory() )\n  assert( db:close() )\nend",
    "type": "function"
  }, {
    "id": 216,
    "text": "local db = assert_userdata( sqlite3.open_memory() )",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "assert( db:close() )",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "function()\n  local filename = \"/tmp/__lua-sqlite3-20040906135849.\" .. os.time()\n  local db = assert_userdata( sqlite3.open(filename) )\n  assert( db:close() )\n  os.remove(filename)\nend",
    "type": "function"
  }, {
    "id": 219,
    "text": "local filename = \"/tmp/__lua-sqlite3-20040906135849.\" .. os.time()",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "local db = assert_userdata( sqlite3.open(filename) )",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "os.remove(filename)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "function()\n  local db = assert_userdata( sqlite3.open_memory() )\n  assert_number( db:exec(\"CREATE TABLE test (id INTEGER, name TEXT)\") )\n  local stmt = assert_userdata( db:prepare(\"SELECT * FROM test\") )\n  \n  assert_equal(2, stmt:columns(), \"Wrong number of columns.\" )\n  \n  local names = assert_table( stmt:get_names() )\n  assert_equal(2, #(names), \"Wrong number of names.\")\n  assert_equal(\"id\", names[1] )\n  assert_equal(\"name\", names[2] )\n  \n  local types = assert_table( stmt:get_types() )\n  assert_equal(2, #(types), \"Wrong number of declaration types.\")\n  assert_equal(\"INTEGER\", types[1] )\n  assert_equal(\"TEXT\", types[2] )\n  \n  assert_equal( sqlite3.OK, stmt:finalize() )\n  assert_equal( sqlite3.OK, db:close() )\nend",
    "type": "function"
  }, {
    "id": 223,
    "text": "assert_number( db:exec(\"CREATE TABLE test (id INTEGER, name TEXT)\") )",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "local stmt = assert_userdata( db:prepare(\"SELECT * FROM test\") )",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "assert_equal(2, stmt:columns(), \"Wrong number of columns.\" )",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "local names = assert_table( stmt:get_names() )",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "assert_equal(2, #(names), \"Wrong number of names.\")",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "assert_equal(\"id\", names[1] )",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "assert_equal(\"name\", names[2] )",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "local types = assert_table( stmt:get_types() )",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "assert_equal(2, #(types), \"Wrong number of declaration types.\")",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "assert_equal(\"INTEGER\", types[1] )",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "assert_equal(\"TEXT\", types[2] )",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "assert_equal( sqlite3.OK, stmt:finalize() )",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "assert_equal( sqlite3.OK, db:close() )",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\" } end",
    "type": "function"
  }, {
    "id": 238,
    "text": "function() self:check_content{ \"Hello World\", \"Hello Lua\" } end",
    "type": "function"
  }, {
    "id": 239,
    "text": "function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Hello sqlite3\", \"To much\" } end",
    "type": "function"
  }, {
    "id": 240,
    "text": "function() self:check_content{ \"Hello World\", \"Hello Lua\", \"Wrong\" } end",
    "type": "function"
  }, {
    "id": 241,
    "text": "function() self:check_content{ \"Hello World\", \"Wrong\", \"Hello sqlite3\" } end",
    "type": "function"
  }, {
    "id": 242,
    "text": "function() self:check_content{ \"Wrong\", \"Hello Lua\", \"Hello sqlite3\" } end",
    "type": "function"
  }, {
    "id": 243,
    "text": "function() stmt:bind_values(\"To few\") end",
    "type": "function"
  }, {
    "id": 244,
    "text": "function() stmt:bind_values(0, \"Test\", \"To many\") end",
    "type": "function"
  }, {
    "id": 245,
    "text": "function(arg1, arg2, arg3, arg4, arg5)\n    check(arg1, arg2, arg3, arg4, arg5)\n  end",
    "type": "function"
  }, {
    "id": 246,
    "text": "",
    "type": "function container"
  }, {
    "id": 247,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 248,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 249,
    "text": "open",
    "type": "global function"
  }, {
    "id": 250,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 251,
    "text": "assert_pass",
    "type": "global function"
  }, {
    "id": 252,
    "text": "assert_function",
    "type": "global function"
  }, {
    "id": 253,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 254,
    "text": "assert_userdata",
    "type": "global function"
  }, {
    "id": 255,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 256,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 257,
    "text": "assert_number",
    "type": "global function"
  }, {
    "id": 258,
    "text": "open_memory",
    "type": "global function"
  }, {
    "id": 259,
    "text": "require",
    "type": "global function"
  }, {
    "id": 260,
    "text": "time",
    "type": "global function"
  }, {
    "id": 261,
    "text": "",
    "type": "global variable"
  }, {
    "id": 262,
    "text": "",
    "type": "variable container"
  }, {
    "id": 263,
    "text": "",
    "type": "require container"
  }, {
    "id": 264,
    "text": "",
    "type": "local variable"
  }, {
    "id": 265,
    "text": "",
    "type": "n/a"
  }, {
    "id": 266,
    "text": "",
    "type": "local variable"
  }, {
    "id": 267,
    "text": "",
    "type": "n/a"
  }, {
    "id": 268,
    "text": "",
    "type": "local variable"
  }, {
    "id": 269,
    "text": "",
    "type": "n/a"
  }, {
    "id": 270,
    "text": "",
    "type": "global variable"
  }, {
    "id": 271,
    "text": "",
    "type": "n/a"
  }, {
    "id": 272,
    "text": "",
    "type": "global variable"
  }, {
    "id": 273,
    "text": "",
    "type": "n/a"
  }, {
    "id": 274,
    "text": "",
    "type": "global variable"
  }, {
    "id": 275,
    "text": "",
    "type": "n/a"
  }, {
    "id": 276,
    "text": "",
    "type": "global variable"
  }, {
    "id": 277,
    "text": "",
    "type": "n/a"
  }, {
    "id": 278,
    "text": "lsqlite3",
    "type": "module"
  } ]
}