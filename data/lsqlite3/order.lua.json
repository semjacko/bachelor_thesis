{
  "_filename": "order.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lsqlite3/examples/order.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 11,
    "label": "has",
    "to": 8
  }, {
    "from": 11,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 13
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 15
  }, {
    "from": 24,
    "label": "has",
    "to": 5
  }, {
    "from": 24,
    "label": "has",
    "to": 16
  }, {
    "from": 24,
    "label": "has",
    "to": 17
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 27
  }, {
    "from": 26,
    "label": "calls",
    "to": 10
  }, {
    "from": 26,
    "label": "calls",
    "to": 28
  }, {
    "from": 26,
    "label": "calls",
    "to": 28
  }, {
    "from": 26,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 30
  }, {
    "from": 11,
    "label": "calls",
    "to": 29
  }, {
    "from": 26,
    "label": "calls",
    "to": 32
  }, {
    "from": 26,
    "label": "calls",
    "to": 11
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 26,
    "label": "declares",
    "to": 2
  }, {
    "from": 26,
    "label": "declares",
    "to": 10
  }, {
    "from": 26,
    "label": "declares",
    "to": 11
  }, {
    "from": 26,
    "label": "declares",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 35
  }, {
    "from": 34,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 35,
    "label": "initializes",
    "to": 33
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "order",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function customer_name(id)\n  local stmt = db:prepare(\"SELECT name FROM customer WHERE id = ?\")\r\n  stmt:bind_values(id)\r\n  stmt:step()\r\n  local r = stmt:get_uvalues()\r\n  stmt:finalize()\n  return r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local stmt = db:prepare(\"SELECT name FROM customer WHERE id = ?\")",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "stmt:bind_values(id)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "stmt:step()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local r = stmt:get_uvalues()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "stmt:finalize()",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function all_invoices()\n  return db:nrows(\"SELECT id, customer, title FROM invoice\")\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function all_articles(invoice)\n\n  local function iterator()\n    local stmt, row\n\n    -- Get the articles that are contained in the invoice table itself.\n    stmt = db:prepare(\"SELECT article1, price1, article2, price2 FROM invoice WHERE id = ?\")\n    stmt:bind_values(invoice)\r\n    stmt:step()\r\n    row = stmt:get_named_values()\n\n    -- Every Invoice has at least one article.\n    coroutine.yield(row.article1, row.price1)\n\n    -- Maybe the Invoice has a second article?\n    if row.article2 then\n\n      -- Yes, there is a second article, so return it.\n      coroutine.yield(row.article2, row.price2)\n\n      -- When there was an second article, maybe there are even\n      -- more articles in the overflow table? We will see...\n\n      stmt = db:prepare(\"SELECT article, price FROM invoice_overflow WHERE invoice = ? ORDER BY id\")\n      stmt:bind_values(invoice)\r\n      \n      for row in stmt:nrows() do\n        coroutine.yield(row.article, row.price)\n      end\n    end\n  end\n\n  return coroutine.wrap(iterator)\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local function iterator()\n    local stmt, row\n\n    -- Get the articles that are contained in the invoice table itself.\n    stmt = db:prepare(\"SELECT article1, price1, article2, price2 FROM invoice WHERE id = ?\")\n    stmt:bind_values(invoice)\r\n    stmt:step()\r\n    row = stmt:get_named_values()\n\n    -- Every Invoice has at least one article.\n    coroutine.yield(row.article1, row.price1)\n\n    -- Maybe the Invoice has a second article?\n    if row.article2 then\n\n      -- Yes, there is a second article, so return it.\n      coroutine.yield(row.article2, row.price2)\n\n      -- When there was an second article, maybe there are even\n      -- more articles in the overflow table? We will see...\n\n      stmt = db:prepare(\"SELECT article, price FROM invoice_overflow WHERE invoice = ? ORDER BY id\")\n      stmt:bind_values(invoice)\r\n      \n      for row in stmt:nrows() do\n        coroutine.yield(row.article, row.price)\n      end\n    end\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 13,
    "text": "local stmt, row",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "stmt = db:prepare(\"SELECT article1, price1, article2, price2 FROM invoice WHERE id = ?\")",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "stmt:bind_values(invoice)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "row = stmt:get_named_values()",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "coroutine.yield(row.article1, row.price1)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "if row.article2 then\n\n      -- Yes, there is a second article, so return it.\n      coroutine.yield(row.article2, row.price2)\n\n      -- When there was an second article, maybe there are even\n      -- more articles in the overflow table? We will see...\n\n      stmt = db:prepare(\"SELECT article, price FROM invoice_overflow WHERE invoice = ? ORDER BY id\")\n      stmt:bind_values(invoice)\r\n      \n      for row in stmt:nrows() do\n        coroutine.yield(row.article, row.price)\n      end\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "coroutine.yield(row.article2, row.price2)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "stmt = db:prepare(\"SELECT article, price FROM invoice_overflow WHERE invoice = ? ORDER BY id\")",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "for row in stmt:nrows() do\n        coroutine.yield(row.article, row.price)\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 22,
    "text": "coroutine.yield(row.article, row.price)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function iterator()\n    local stmt, row\n\n    -- Get the articles that are contained in the invoice table itself.\n    stmt = db:prepare(\"SELECT article1, price1, article2, price2 FROM invoice WHERE id = ?\")\n    stmt:bind_values(invoice)\r\n    stmt:step()\r\n    row = stmt:get_named_values()\n\n    -- Every Invoice has at least one article.\n    coroutine.yield(row.article1, row.price1)\n\n    -- Maybe the Invoice has a second article?\n    if row.article2 then\n\n      -- Yes, there is a second article, so return it.\n      coroutine.yield(row.article2, row.price2)\n\n      -- When there was an second article, maybe there are even\n      -- more articles in the overflow table? We will see...\n\n      stmt = db:prepare(\"SELECT article, price FROM invoice_overflow WHERE invoice = ? ORDER BY id\")\n      stmt:bind_values(invoice)\r\n      \n      for row in stmt:nrows() do\n        coroutine.yield(row.article, row.price)\n      end\n    end\n  end",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "",
    "type": "function container"
  }, {
    "id": 27,
    "text": "format",
    "type": "global function"
  }, {
    "id": 28,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 29,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 30,
    "text": "print",
    "type": "global function"
  }, {
    "id": 31,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 32,
    "text": "require",
    "type": "global function"
  }, {
    "id": 33,
    "text": "",
    "type": "global variable"
  }, {
    "id": 34,
    "text": "",
    "type": "variable container"
  }, {
    "id": 35,
    "text": "",
    "type": "require container"
  }, {
    "id": 36,
    "text": "",
    "type": "local variable"
  }, {
    "id": 37,
    "text": "",
    "type": "n/a"
  } ]
}