{
  "_filename": "io.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-memoryfile/test/io.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 8
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 13
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 34
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 35
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 36
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 24
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 18
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 9
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 18
  }, {
    "from": 53,
    "label": "has",
    "to": 51
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 10
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 58
  }, {
    "from": 61,
    "label": "has",
    "to": 10
  }, {
    "from": 61,
    "label": "has",
    "to": 59
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 72
  }, {
    "from": 61,
    "label": "has",
    "to": 73
  }, {
    "from": 61,
    "label": "has",
    "to": 74
  }, {
    "from": 61,
    "label": "has",
    "to": 75
  }, {
    "from": 61,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 84
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 77,
    "label": "has",
    "to": 86
  }, {
    "from": 77,
    "label": "has",
    "to": 84
  }, {
    "from": 77,
    "label": "has",
    "to": 87
  }, {
    "from": 77,
    "label": "has",
    "to": 88
  }, {
    "from": 77,
    "label": "has",
    "to": 89
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 77,
    "label": "has",
    "to": 90
  }, {
    "from": 77,
    "label": "has",
    "to": 91
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 77,
    "label": "has",
    "to": 92
  }, {
    "from": 77,
    "label": "has",
    "to": 91
  }, {
    "from": 77,
    "label": "has",
    "to": 93
  }, {
    "from": 77,
    "label": "has",
    "to": 94
  }, {
    "from": 77,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 10
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 10
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 10
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 105
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 106
  }, {
    "from": 96,
    "label": "has",
    "to": 107
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 108
  }, {
    "from": 96,
    "label": "has",
    "to": 109
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 110
  }, {
    "from": 96,
    "label": "has",
    "to": 51
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 111
  }, {
    "from": 96,
    "label": "has",
    "to": 112
  }, {
    "from": 96,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 89
  }, {
    "from": 114,
    "label": "has",
    "to": 121
  }, {
    "from": 114,
    "label": "has",
    "to": 122
  }, {
    "from": 114,
    "label": "has",
    "to": 58
  }, {
    "from": 114,
    "label": "has",
    "to": 59
  }, {
    "from": 114,
    "label": "has",
    "to": 123
  }, {
    "from": 114,
    "label": "has",
    "to": 124
  }, {
    "from": 114,
    "label": "has",
    "to": 125
  }, {
    "from": 114,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 97
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 97
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 59
  }, {
    "from": 132,
    "label": "has",
    "to": 58
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 11
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 59
  }, {
    "from": 132,
    "label": "has",
    "to": 58
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 137,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 137,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 137,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 154,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 148
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 159,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 159,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 148
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 171
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 172
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 173
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 174
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 175
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 62
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 177,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 148
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 183,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 189,
    "label": "has",
    "to": 193
  }, {
    "from": 189,
    "label": "has",
    "to": 194
  }, {
    "from": 189,
    "label": "has",
    "to": 59
  }, {
    "from": 189,
    "label": "has",
    "to": 195
  }, {
    "from": 196,
    "label": "has",
    "to": 139
  }, {
    "from": 197,
    "label": "has",
    "to": 141
  }, {
    "from": 198,
    "label": "has",
    "to": 143
  }, {
    "from": 199,
    "label": "has",
    "to": 145
  }, {
    "from": 200,
    "label": "has",
    "to": 150
  }, {
    "from": 201,
    "label": "has",
    "to": 152
  }, {
    "from": 202,
    "label": "has",
    "to": 161
  }, {
    "from": 203,
    "label": "has",
    "to": 163
  }, {
    "from": 204,
    "label": "has",
    "to": 165
  }, {
    "from": 205,
    "label": "has",
    "to": 179
  }, {
    "from": 206,
    "label": "has",
    "to": 181
  }, {
    "from": 207,
    "label": "has",
    "to": 185
  }, {
    "from": 208,
    "label": "has",
    "to": 187
  }, {
    "from": 38,
    "label": "calls",
    "to": 218
  }, {
    "from": 127,
    "label": "calls",
    "to": 213
  }, {
    "from": 127,
    "label": "calls",
    "to": 213
  }, {
    "from": 132,
    "label": "calls",
    "to": 213
  }, {
    "from": 132,
    "label": "calls",
    "to": 213
  }, {
    "from": 2,
    "label": "calls",
    "to": 217
  }, {
    "from": 61,
    "label": "calls",
    "to": 217
  }, {
    "from": 61,
    "label": "calls",
    "to": 217
  }, {
    "from": 61,
    "label": "calls",
    "to": 217
  }, {
    "from": 77,
    "label": "calls",
    "to": 217
  }, {
    "from": 77,
    "label": "calls",
    "to": 217
  }, {
    "from": 77,
    "label": "calls",
    "to": 217
  }, {
    "from": 77,
    "label": "calls",
    "to": 217
  }, {
    "from": 96,
    "label": "calls",
    "to": 217
  }, {
    "from": 96,
    "label": "calls",
    "to": 217
  }, {
    "from": 96,
    "label": "calls",
    "to": 217
  }, {
    "from": 96,
    "label": "calls",
    "to": 217
  }, {
    "from": 96,
    "label": "calls",
    "to": 217
  }, {
    "from": 154,
    "label": "calls",
    "to": 217
  }, {
    "from": 154,
    "label": "calls",
    "to": 216
  }, {
    "from": 2,
    "label": "calls",
    "to": 221
  }, {
    "from": 2,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 7,
    "label": "calls",
    "to": 221
  }, {
    "from": 17,
    "label": "calls",
    "to": 221
  }, {
    "from": 17,
    "label": "calls",
    "to": 221
  }, {
    "from": 17,
    "label": "calls",
    "to": 221
  }, {
    "from": 17,
    "label": "calls",
    "to": 221
  }, {
    "from": 17,
    "label": "calls",
    "to": 221
  }, {
    "from": 17,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 23,
    "label": "calls",
    "to": 221
  }, {
    "from": 38,
    "label": "calls",
    "to": 221
  }, {
    "from": 38,
    "label": "calls",
    "to": 221
  }, {
    "from": 38,
    "label": "calls",
    "to": 221
  }, {
    "from": 38,
    "label": "calls",
    "to": 221
  }, {
    "from": 49,
    "label": "calls",
    "to": 221
  }, {
    "from": 49,
    "label": "calls",
    "to": 221
  }, {
    "from": 53,
    "label": "calls",
    "to": 221
  }, {
    "from": 53,
    "label": "calls",
    "to": 221
  }, {
    "from": 56,
    "label": "calls",
    "to": 221
  }, {
    "from": 56,
    "label": "calls",
    "to": 221
  }, {
    "from": 56,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 61,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 77,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 96,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 114,
    "label": "calls",
    "to": 221
  }, {
    "from": 127,
    "label": "calls",
    "to": 221
  }, {
    "from": 132,
    "label": "calls",
    "to": 221
  }, {
    "from": 132,
    "label": "calls",
    "to": 221
  }, {
    "from": 132,
    "label": "calls",
    "to": 221
  }, {
    "from": 132,
    "label": "calls",
    "to": 221
  }, {
    "from": 132,
    "label": "calls",
    "to": 221
  }, {
    "from": 132,
    "label": "calls",
    "to": 221
  }, {
    "from": 167,
    "label": "calls",
    "to": 221
  }, {
    "from": 167,
    "label": "calls",
    "to": 221
  }, {
    "from": 167,
    "label": "calls",
    "to": 221
  }, {
    "from": 167,
    "label": "calls",
    "to": 221
  }, {
    "from": 167,
    "label": "calls",
    "to": 221
  }, {
    "from": 167,
    "label": "calls",
    "to": 221
  }, {
    "from": 189,
    "label": "calls",
    "to": 221
  }, {
    "from": 189,
    "label": "calls",
    "to": 221
  }, {
    "from": 209,
    "label": "calls",
    "to": 224
  }, {
    "from": 209,
    "label": "calls",
    "to": 224
  }, {
    "from": 7,
    "label": "calls",
    "to": 215
  }, {
    "from": 7,
    "label": "calls",
    "to": 215
  }, {
    "from": 17,
    "label": "calls",
    "to": 215
  }, {
    "from": 23,
    "label": "calls",
    "to": 215
  }, {
    "from": 49,
    "label": "calls",
    "to": 215
  }, {
    "from": 53,
    "label": "calls",
    "to": 215
  }, {
    "from": 56,
    "label": "calls",
    "to": 215
  }, {
    "from": 61,
    "label": "calls",
    "to": 215
  }, {
    "from": 61,
    "label": "calls",
    "to": 215
  }, {
    "from": 61,
    "label": "calls",
    "to": 215
  }, {
    "from": 61,
    "label": "calls",
    "to": 215
  }, {
    "from": 77,
    "label": "calls",
    "to": 215
  }, {
    "from": 114,
    "label": "calls",
    "to": 215
  }, {
    "from": 114,
    "label": "calls",
    "to": 215
  }, {
    "from": 114,
    "label": "calls",
    "to": 215
  }, {
    "from": 114,
    "label": "calls",
    "to": 215
  }, {
    "from": 127,
    "label": "calls",
    "to": 215
  }, {
    "from": 132,
    "label": "calls",
    "to": 215
  }, {
    "from": 132,
    "label": "calls",
    "to": 215
  }, {
    "from": 132,
    "label": "calls",
    "to": 215
  }, {
    "from": 189,
    "label": "calls",
    "to": 215
  }, {
    "from": 189,
    "label": "calls",
    "to": 215
  }, {
    "from": 209,
    "label": "calls",
    "to": 220
  }, {
    "from": 49,
    "label": "calls",
    "to": 212
  }, {
    "from": 53,
    "label": "calls",
    "to": 212
  }, {
    "from": 96,
    "label": "calls",
    "to": 212
  }, {
    "from": 154,
    "label": "calls",
    "to": 212
  }, {
    "from": 2,
    "label": "calls",
    "to": 223
  }, {
    "from": 137,
    "label": "calls",
    "to": 214
  }, {
    "from": 137,
    "label": "calls",
    "to": 214
  }, {
    "from": 137,
    "label": "calls",
    "to": 214
  }, {
    "from": 137,
    "label": "calls",
    "to": 214
  }, {
    "from": 147,
    "label": "calls",
    "to": 214
  }, {
    "from": 147,
    "label": "calls",
    "to": 214
  }, {
    "from": 159,
    "label": "calls",
    "to": 214
  }, {
    "from": 159,
    "label": "calls",
    "to": 214
  }, {
    "from": 159,
    "label": "calls",
    "to": 214
  }, {
    "from": 177,
    "label": "calls",
    "to": 214
  }, {
    "from": 177,
    "label": "calls",
    "to": 214
  }, {
    "from": 183,
    "label": "calls",
    "to": 214
  }, {
    "from": 183,
    "label": "calls",
    "to": 214
  }, {
    "from": 167,
    "label": "calls",
    "to": 154
  }, {
    "from": 167,
    "label": "calls",
    "to": 154
  }, {
    "from": 167,
    "label": "calls",
    "to": 154
  }, {
    "from": 167,
    "label": "calls",
    "to": 154
  }, {
    "from": 167,
    "label": "calls",
    "to": 154
  }, {
    "from": 167,
    "label": "calls",
    "to": 154
  }, {
    "from": 7,
    "label": "calls",
    "to": 211
  }, {
    "from": 17,
    "label": "calls",
    "to": 211
  }, {
    "from": 23,
    "label": "calls",
    "to": 211
  }, {
    "from": 23,
    "label": "calls",
    "to": 211
  }, {
    "from": 23,
    "label": "calls",
    "to": 211
  }, {
    "from": 23,
    "label": "calls",
    "to": 211
  }, {
    "from": 38,
    "label": "calls",
    "to": 211
  }, {
    "from": 38,
    "label": "calls",
    "to": 211
  }, {
    "from": 49,
    "label": "calls",
    "to": 211
  }, {
    "from": 53,
    "label": "calls",
    "to": 211
  }, {
    "from": 56,
    "label": "calls",
    "to": 211
  }, {
    "from": 61,
    "label": "calls",
    "to": 211
  }, {
    "from": 77,
    "label": "calls",
    "to": 211
  }, {
    "from": 77,
    "label": "calls",
    "to": 211
  }, {
    "from": 96,
    "label": "calls",
    "to": 211
  }, {
    "from": 114,
    "label": "calls",
    "to": 211
  }, {
    "from": 127,
    "label": "calls",
    "to": 211
  }, {
    "from": 132,
    "label": "calls",
    "to": 211
  }, {
    "from": 137,
    "label": "calls",
    "to": 211
  }, {
    "from": 137,
    "label": "calls",
    "to": 211
  }, {
    "from": 137,
    "label": "calls",
    "to": 211
  }, {
    "from": 137,
    "label": "calls",
    "to": 211
  }, {
    "from": 147,
    "label": "calls",
    "to": 211
  }, {
    "from": 159,
    "label": "calls",
    "to": 211
  }, {
    "from": 167,
    "label": "calls",
    "to": 211
  }, {
    "from": 177,
    "label": "calls",
    "to": 211
  }, {
    "from": 183,
    "label": "calls",
    "to": 211
  }, {
    "from": 189,
    "label": "calls",
    "to": 211
  }, {
    "from": 1,
    "label": "contains",
    "to": 209
  }, {
    "from": 209,
    "label": "declares",
    "to": 2
  }, {
    "from": 209,
    "label": "declares",
    "to": 7
  }, {
    "from": 209,
    "label": "declares",
    "to": 17
  }, {
    "from": 209,
    "label": "declares",
    "to": 23
  }, {
    "from": 209,
    "label": "declares",
    "to": 38
  }, {
    "from": 209,
    "label": "declares",
    "to": 49
  }, {
    "from": 209,
    "label": "declares",
    "to": 53
  }, {
    "from": 209,
    "label": "declares",
    "to": 56
  }, {
    "from": 209,
    "label": "declares",
    "to": 61
  }, {
    "from": 209,
    "label": "declares",
    "to": 77
  }, {
    "from": 209,
    "label": "declares",
    "to": 96
  }, {
    "from": 209,
    "label": "declares",
    "to": 114
  }, {
    "from": 209,
    "label": "declares",
    "to": 127
  }, {
    "from": 209,
    "label": "declares",
    "to": 132
  }, {
    "from": 209,
    "label": "declares",
    "to": 137
  }, {
    "from": 209,
    "label": "declares",
    "to": 147
  }, {
    "from": 209,
    "label": "declares",
    "to": 154
  }, {
    "from": 209,
    "label": "declares",
    "to": 159
  }, {
    "from": 209,
    "label": "declares",
    "to": 167
  }, {
    "from": 209,
    "label": "declares",
    "to": 177
  }, {
    "from": 209,
    "label": "declares",
    "to": 183
  }, {
    "from": 209,
    "label": "declares",
    "to": 189
  }, {
    "from": 209,
    "label": "declares",
    "to": 196
  }, {
    "from": 209,
    "label": "declares",
    "to": 197
  }, {
    "from": 209,
    "label": "declares",
    "to": 198
  }, {
    "from": 209,
    "label": "declares",
    "to": 199
  }, {
    "from": 209,
    "label": "declares",
    "to": 200
  }, {
    "from": 209,
    "label": "declares",
    "to": 201
  }, {
    "from": 209,
    "label": "declares",
    "to": 202
  }, {
    "from": 209,
    "label": "declares",
    "to": 203
  }, {
    "from": 209,
    "label": "declares",
    "to": 204
  }, {
    "from": 209,
    "label": "declares",
    "to": 205
  }, {
    "from": 209,
    "label": "declares",
    "to": 206
  }, {
    "from": 209,
    "label": "declares",
    "to": 207
  }, {
    "from": 209,
    "label": "declares",
    "to": 208
  }, {
    "from": 1,
    "label": "declares",
    "to": 219
  }, {
    "from": 1,
    "label": "declares",
    "to": 222
  }, {
    "from": 1,
    "label": "contains",
    "to": 226
  }, {
    "from": 1,
    "label": "contains",
    "to": 227
  }, {
    "from": 227,
    "label": "initializes",
    "to": 228
  }, {
    "from": 228,
    "label": "requires",
    "to": 210
  }, {
    "from": 227,
    "label": "initializes",
    "to": 225
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 196
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 197
  }, {
    "from": 142,
    "label": "hasArgument",
    "to": 198
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 199
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 200
  }, {
    "from": 151,
    "label": "hasArgument",
    "to": 201
  }, {
    "from": 160,
    "label": "hasArgument",
    "to": 202
  }, {
    "from": 162,
    "label": "hasArgument",
    "to": 203
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 204
  }, {
    "from": 178,
    "label": "hasArgument",
    "to": 205
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 206
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 207
  }, {
    "from": 186,
    "label": "hasArgument",
    "to": 208
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "io",
    "type": "module"
  }, {
    "id": 2,
    "text": "function test_module_metadata ()\r\n    is(\"string\", type(MemFile._VERSION))\r\n    assert(MemFile._VERSION:len() > 0)\r\n    is(\"memoryfile\", MemFile._NAME)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "is(\"string\", type(MemFile._VERSION))",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "assert(MemFile._VERSION:len() > 0)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "is(\"memoryfile\", MemFile._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function test_read_small ()\r\n    local f = MemFile.open(\"frobnitz\", \"r\")\r\n    is(\"frobnitz\", tostring(f))\r\n    is(0, f:seek())\r\n    is(8, f:size())\r\n    is(\"frob\", f:read(4))\r\n    is(4, f:seek())\r\n    is(8, f:size())\r\n    is(\"nitz\", f:read(\"*a\"))\r\n    is(8, f:seek())\r\n    is(8, f:size())\r\n    is(\"frobnitz\", tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local f = MemFile.open(\"frobnitz\", \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "is(\"frobnitz\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "is(0, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "is(8, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "is(\"frob\", f:read(4))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "is(4, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "is(\"nitz\", f:read(\"*a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "is(8, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function test_read_all ()\r\n    local f = MemFile.open(\"frobnitz\", \"r\")\r\n    is(\"frobnitz\", f:read(\"*a\"))\r\n    local all2, all3 = f:read(\"*a\", \"*all\")\r\n    is(\"\", all2)\r\n    is(\"\", all3)\r\n    is(8, f:seek())\r\n    is(8, f:size())\r\n    is(\"frobnitz\", tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "is(\"frobnitz\", f:read(\"*a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local all2, all3 = f:read(\"*a\", \"*all\")",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "is(\"\", all2)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "is(\"\", all3)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function test_read_lines ()\r\n    local f = MemFile.open(\"foo\\nbar\\nbaz\\r\\n\", \"r\")\r\n    is(\"foo\", f:read(\"*l\"))\r\n    is(4, f:seek())\r\n    local line2, line3 = f:read(\"*l\", \"*line\")\r\n    is(\"bar\", line2)\r\n    is(\"baz\\r\", line3)\r\n    is(nil, f:read(\"*l\"))\r\n    is(13, f:seek())\r\n    is(13, f:size())\r\n    is(\"foo\\nbar\\nbaz\\r\\n\", tostring(f))\r\n\r\n    f = MemFile.open(\"foo\", \"r\")\r\n    is(\"foo\", f:read(\"*l\"))\r\n    is(nil, f:read(\"*l\"))\r\n\r\n    f = MemFile.open(\"foo\\nbar\", \"r\")\r\n    is(\"foo\", f:read(\"*l\"))\r\n    is(\"bar\", f:read(\"*l\"))\r\n    is(nil, f:read(\"*l\"))\r\n\r\n    f = MemFile.open(\"\", \"r\")\r\n    is(nil, f:read(\"*l\"))\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local f = MemFile.open(\"foo\\nbar\\nbaz\\r\\n\", \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "is(\"foo\", f:read(\"*l\"))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "local line2, line3 = f:read(\"*l\", \"*line\")",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "is(\"bar\", line2)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "is(\"baz\\r\", line3)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "is(nil, f:read(\"*l\"))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "is(13, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "is(13, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "is(\"foo\\nbar\\nbaz\\r\\n\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "f = MemFile.open(\"foo\", \"r\")",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "f = MemFile.open(\"foo\\nbar\", \"r\")",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "is(\"bar\", f:read(\"*l\"))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "f = MemFile.open(\"\", \"r\")",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function test_read_lines_iter ()\r\n    local f = MemFile.open(\"foo\\nbar\\nbaz\\r\\n\", \"r\")\r\n    local t = {}\r\n    for line in f:lines() do t[#t + 1] = line end\r\n    is(3, #t)\r\n    is(\"foo\", t[1])\r\n    is(\"bar\", t[2])\r\n    is(\"baz\\r\", t[3])\r\n\r\n    f = MemFile.open(\"\", \"r\")\r\n    for line in f:lines() do assert_fail(\"wasn't expecting line\") end\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for line in f:lines() do t[#t + 1] = line end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "t[#t + 1] = line",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "is(3, #t)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "is(\"foo\", t[1])",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "is(\"bar\", t[2])",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "is(\"baz\\r\", t[3])",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "for line in f:lines() do assert_fail(\"wasn't expecting line\") end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "assert_fail(\"wasn't expecting line\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function test_default_mode ()\r\n    local f = MemFile.open(\"frobnitz\")\r\n    is(\"frobnitz\", f:read(\"*a\"))\r\n    assert_nil(f:read(0))\r\n    is(\"frobnitz\", tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local f = MemFile.open(\"frobnitz\")",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "assert_nil(f:read(0))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function test_extra_mode_chars ()\r\n    local f = MemFile.open(\"frobnitz\", \"r+bx\")\r\n    is(\"frobnitz\", f:read(\"*a\"))\r\n    assert_nil(f:read(0))\r\n    is(\"frobnitz\", tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local f = MemFile.open(\"frobnitz\", \"r+bx\")",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function test_write_mode ()\r\n    local f = MemFile.open(\"foo\", \"w\")\r\n    is(0, f:size())\r\n    is(0, f:seek())\r\n    is(\"\", tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local f = MemFile.open(\"foo\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "is(0, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "is(\"\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function test_write ()\r\n    local f = MemFile.open(nil, \"w\")\r\n    is(0, f:size())\r\n    is(0, f:seek())\r\n    is(\"\", tostring(f))\r\n    assert(f:write(\"foobar\", \"baz\", 23.25))\r\n    is(14, f:size())\r\n    is(14, f:seek())\r\n    is(\"foobarbaz23.25\", tostring(f))\r\n\r\n    is(6, f:seek(\"set\", 6))\r\n    assert(f:write(\"xyzzy\"))\r\n    is(14, f:size())\r\n    is(11, f:seek())\r\n    is(\".25\", f:read(\"*a\"))\r\n    is(\"foobarxyzzy.25\", tostring(f))\r\n\r\n    is(6, f:seek(\"set\", 6))\r\n    assert(f:write(\"fol-de-rol-de-ra\"))\r\n    is(22, f:size())\r\n    is(22, f:seek())\r\n    is(\"foobarfol-de-rol-de-ra\", tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local f = MemFile.open(nil, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "assert(f:write(\"foobar\", \"baz\", 23.25))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "is(14, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "is(14, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "is(\"foobarbaz23.25\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "is(6, f:seek(\"set\", 6))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert(f:write(\"xyzzy\"))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "is(11, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "is(\".25\", f:read(\"*a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "is(\"foobarxyzzy.25\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert(f:write(\"fol-de-rol-de-ra\"))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "is(22, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "is(22, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "is(\"foobarfol-de-rol-de-ra\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function test_append ()\r\n    local f = MemFile.open(\"\", \"a\")\r\n    assert(f:write(\"foo\"))\r\n    assert(f:write(\"barb\"))\r\n    is(\"foobarb\", tostring(f))\r\n    is(7, f:size())\r\n    is(0, f:seek())\r\n    is(\"foobar\", f:read(6))\r\n    is(7, f:size())\r\n    is(6, f:seek())\r\n    assert(f:write(\"quuux\"))\r\n    is(12, f:size())\r\n    is(6, f:seek())\r\n    is(\"bquuux\", f:read(\"*a\"))\r\n\r\n    f = MemFile.open(\"foobar\", \"a\")\r\n    is(6, f:size())\r\n    is(0, f:seek())\r\n    assert(f:write(\"\\nquux\"))\r\n    is(11, f:size())\r\n    is(0, f:seek())\r\n    is(\"foobar\", f:read(\"*l\"))\r\n    is(11, f:size())\r\n    is(7, f:seek())\r\n    is(\"quux\", f:read(\"*a\"))\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local f = MemFile.open(\"\", \"a\")",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "assert(f:write(\"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert(f:write(\"barb\"))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "is(\"foobarb\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "is(7, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "is(\"foobar\", f:read(6))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "is(6, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert(f:write(\"quuux\"))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "is(12, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "is(\"bquuux\", f:read(\"*a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "f = MemFile.open(\"foobar\", \"a\")",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "is(6, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert(f:write(\"\\nquux\"))",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "is(11, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "is(\"foobar\", f:read(\"*l\"))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "is(7, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "is(\"quux\", f:read(\"*a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function test_seek ()\r\n    local f = MemFile.open(\"foobar\")\r\n    is(0, f:seek())\r\n    is(0, f:seek(\"cur\"))\r\n    is(0, f:seek(\"cur\", 0))\r\n    is(0, f:seek())\r\n\r\n    is(0, f:seek(\"set\"))\r\n    is(0, f:seek(\"set\", 0))\r\n    is(0, f:seek())\r\n\r\n    is(3, f:seek(\"set\", 3))\r\n    is(\"b\", f:read(1))\r\n\r\n    assert(f:seek(\"set\", 3))\r\n    is(3, f:seek(\"cur\", 0))\r\n    is(\"b\", f:read(1))\r\n\r\n    assert(f:seek(\"set\", 3))\r\n    is(1, f:seek(\"cur\", -2))\r\n    is(\"oo\", f:read(2))\r\n\r\n    assert(f:seek(\"set\", 3))\r\n    is(5, f:seek(\"cur\", 2))\r\n    is(\"r\", f:read(2))\r\n\r\n    assert(f:seek(\"set\", 3))\r\n    is(6, f:seek(\"end\", 0))\r\n    assert_nil(f:read(0))\r\n\r\n    assert(f:seek(\"set\", 3))\r\n    is(4, f:seek(\"end\", -2))\r\n    is(\"ar\", f:read(2))\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local f = MemFile.open(\"foobar\")",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "is(0, f:seek(\"cur\"))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "is(0, f:seek(\"cur\", 0))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "is(0, f:seek(\"set\"))",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "is(0, f:seek(\"set\", 0))",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "is(3, f:seek(\"set\", 3))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "is(\"b\", f:read(1))",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert(f:seek(\"set\", 3))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "is(3, f:seek(\"cur\", 0))",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "is(1, f:seek(\"cur\", -2))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "is(\"oo\", f:read(2))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "is(5, f:seek(\"cur\", 2))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "is(\"r\", f:read(2))",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "is(6, f:seek(\"end\", 0))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "is(4, f:seek(\"end\", -2))",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "is(\"ar\", f:read(2))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function test_size ()\r\n    local f = MemFile.open(\"frob\\0nitz\")\r\n    is(9, f:size())\r\n    is(9, f:size(999))\r\n    is(999, f:size())\r\n    is(\"frob\\0nitz\" .. (\"\\0\"):rep(990), tostring(f))\r\n    is(999, f:size(6))\r\n    is(6, f:size())\r\n    is(\"frob\\0n\", tostring(f))\r\n    is(6, f:size(0))\r\n    is(0, f:size())\r\n    is(\"\", tostring(f))\r\n    is(0, f:size(1000))\r\n    is(1000, f:size())\r\n    is((\"\\0\"):rep(1000), tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "local f = MemFile.open(\"frob\\0nitz\")",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "is(9, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "is(9, f:size(999))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "is(999, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "is(\"frob\\0nitz\" .. (\"\\0\"):rep(990), tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "is(999, f:size(6))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "is(\"frob\\0n\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "is(6, f:size(0))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "is(0, f:size(1000))",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "is(1000, f:size())",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "is((\"\\0\"):rep(1000), tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function test_noops ()\r\n    local f = MemFile.open(\"foobar\")\r\n    assert_true(f:flush())\r\n    assert_true(f:setvbuf())\r\n    is(\"foobar\", tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "assert_true(f:flush())",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert_true(f:setvbuf())",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "is(\"foobar\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function test_close ()\r\n    local f = MemFile.open(\"foobar\")\r\n    assert_true(f:close())\r\n    is(\"\", tostring(f))\r\n    is(0, f:size())\r\n    f:write(\"new text\")\r\n    is(\"new text\", tostring(f))\r\n    is(8, f:size())\r\n    assert_true(f:close())  -- make sure it's repeatable\r\n    is(\"\", tostring(f))\r\n    is(0, f:size())\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "assert_true(f:close())",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "f:write(\"new text\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "is(\"new text\", tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function test_open_bad_usage ()\r\n    assert_error(\"too many args\", function () MemFile.open(\"\", \"r\", nil) end)\r\n    assert_error(\"bad type of input data\",\r\n                 function () MemFile.open(true, \"r\") end)\r\n    assert_error(\"bad type of mode\", function () MemFile.open(\"\", true) end)\r\n    assert_error(\"bad mode letter\", function () MemFile.open(\"\", \"x\") end)\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "assert_error(\"too many args\", function () MemFile.open(\"\", \"r\", nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "MemFile.open(\"\", \"r\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "assert_error(\"bad type of input data\",\r\n                 function () MemFile.open(true, \"r\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "MemFile.open(true, \"r\")",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "assert_error(\"bad type of mode\", function () MemFile.open(\"\", true) end)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "MemFile.open(\"\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "assert_error(\"bad mode letter\", function () MemFile.open(\"\", \"x\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "MemFile.open(\"\", \"x\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function test_read_bad_usage ()\r\n    local f = MemFile.open(\"foo\", \"r\")\r\n    assert_error(\"invalid option, no asterisk\", function () f:read(\"x\") end)\r\n    assert_error(\"invalid option, unknown format\", function () f:read(\"*x\") end)\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "local f = MemFile.open(\"foo\", \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "assert_error(\"invalid option, no asterisk\", function () f:read(\"x\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "f:read(\"x\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert_error(\"invalid option, unknown format\", function () f:read(\"*x\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "f:read(\"*x\")",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "local function test_io_error (patn, ok, err)\r\n    assert_nil(ok)\r\n    assert_not_nil(err)\r\n    assert((err:find(patn)))\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "assert_nil(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "assert_not_nil(err)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "assert((err:find(patn)))",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function test_seek_bad_usage ()\r\n    local f = MemFile.open(\"foo\", \"r\")\r\n    assert_error(\"bad whence type\", function () f:seek(123, 1) end)\r\n    assert_error(\"bad whence value\", function () f:seek(\"foo\", 1) end)\r\n    assert_error(\"bad offset type\", function () f:seek(\"set\", true) end)\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "assert_error(\"bad whence type\", function () f:seek(123, 1) end)",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "f:seek(123, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "assert_error(\"bad whence value\", function () f:seek(\"foo\", 1) end)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "f:seek(\"foo\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "assert_error(\"bad offset type\", function () f:seek(\"set\", true) end)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "f:seek(\"set\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function test_seek_out_of_range ()\r\n    local f = MemFile.open(\"foo\", \"r\")\r\n    f:seek(\"set\", 1)\r\n    test_io_error(\"before start\", f:seek(\"set\", -1))\r\n    is(1, f:seek())\r\n    test_io_error(\"after end\", f:seek(\"set\", 4))\r\n    is(1, f:seek())\r\n    test_io_error(\"before start\", f:seek(\"cur\", -2))\r\n    is(1, f:seek())\r\n    test_io_error(\"after end\", f:seek(\"cur\", 3))\r\n    is(1, f:seek())\r\n    test_io_error(\"before start\", f:seek(\"end\", -4))\r\n    is(1, f:seek())\r\n    test_io_error(\"after end\", f:seek(\"end\", 1))\r\n    is(1, f:seek())\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "f:seek(\"set\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "test_io_error(\"before start\", f:seek(\"set\", -1))",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "is(1, f:seek())",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "test_io_error(\"after end\", f:seek(\"set\", 4))",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "test_io_error(\"before start\", f:seek(\"cur\", -2))",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "test_io_error(\"after end\", f:seek(\"cur\", 3))",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "test_io_error(\"before start\", f:seek(\"end\", -4))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "test_io_error(\"after end\", f:seek(\"end\", 1))",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function test_write_bad_usage ()\r\n    local f = MemFile.open(nil, \"w\")\r\n    assert_error(\"first arg not string or number\",\r\n                 function () f:write(true) end)\r\n    assert_error(\"second arg not string or number\",\r\n                 function () f:write(\"foo\", true) end)\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "assert_error(\"first arg not string or number\",\r\n                 function () f:write(true) end)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "f:write(true)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "assert_error(\"second arg not string or number\",\r\n                 function () f:write(\"foo\", true) end)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "f:write(\"foo\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function test_size_bad_usage ()\r\n    local f = MemFile.open(\"foo\", \"r\")\r\n    assert_error(\"new size not number\", function () f:size(true) end)\r\n    assert_error(\"new size negative\", function () f:size(-1) end)\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "assert_error(\"new size not number\", function () f:size(true) end)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "f:size(true)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "assert_error(\"new size negative\", function () f:size(-1) end)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "f:size(-1)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function test_grow_buffer ()\r\n    local f = MemFile.open()\r\n    for i = 1, 100000 do f:write(\"foobar\\n\") end\r\n    is((\"foobar\\n\"):rep(100000), tostring(f))\r\n    f:size(0)\r\n    is(\"\", tostring(f))\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "local f = MemFile.open()",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "for i = 1, 100000 do f:write(\"foobar\\n\") end",
    "type": "statement:numericfor"
  }, {
    "id": 192,
    "text": "f:write(\"foobar\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "is((\"foobar\\n\"):rep(100000), tostring(f))",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "f:size(0)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 196,
    "text": "function () MemFile.open(\"\", \"r\", nil) end",
    "type": "function"
  }, {
    "id": 197,
    "text": "function () MemFile.open(true, \"r\") end",
    "type": "function"
  }, {
    "id": 198,
    "text": "function () MemFile.open(\"\", true) end",
    "type": "function"
  }, {
    "id": 199,
    "text": "function () MemFile.open(\"\", \"x\") end",
    "type": "function"
  }, {
    "id": 200,
    "text": "function () f:read(\"x\") end",
    "type": "function"
  }, {
    "id": 201,
    "text": "function () f:read(\"*x\") end",
    "type": "function"
  }, {
    "id": 202,
    "text": "function () f:seek(123, 1) end",
    "type": "function"
  }, {
    "id": 203,
    "text": "function () f:seek(\"foo\", 1) end",
    "type": "function"
  }, {
    "id": 204,
    "text": "function () f:seek(\"set\", true) end",
    "type": "function"
  }, {
    "id": 205,
    "text": "function () f:write(true) end",
    "type": "function"
  }, {
    "id": 206,
    "text": "function () f:write(\"foo\", true) end",
    "type": "function"
  }, {
    "id": 207,
    "text": "function () f:size(true) end",
    "type": "function"
  }, {
    "id": 208,
    "text": "function () f:size(-1) end",
    "type": "function"
  }, {
    "id": 209,
    "text": "",
    "type": "function container"
  }, {
    "id": 210,
    "text": "memoryfile",
    "type": "module"
  }, {
    "id": 211,
    "text": "open",
    "type": "global function"
  }, {
    "id": 212,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 213,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 214,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 215,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 216,
    "text": "assert_not_nil",
    "type": "global function"
  }, {
    "id": 217,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 218,
    "text": "assert_fail",
    "type": "global function"
  }, {
    "id": 219,
    "text": "write",
    "type": "global function"
  }, {
    "id": 220,
    "text": "module",
    "type": "global function"
  }, {
    "id": 221,
    "text": "is",
    "type": "global function"
  }, {
    "id": 222,
    "text": "flush",
    "type": "global function"
  }, {
    "id": 223,
    "text": "type",
    "type": "global function"
  }, {
    "id": 224,
    "text": "require",
    "type": "global function"
  }, {
    "id": 225,
    "text": "",
    "type": "global variable"
  }, {
    "id": 226,
    "text": "",
    "type": "variable container"
  }, {
    "id": 227,
    "text": "",
    "type": "require container"
  }, {
    "id": 228,
    "text": "",
    "type": "require local variable"
  } ]
}