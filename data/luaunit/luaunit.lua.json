{
  "_filename": "luaunit.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaunit/luaunit.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 5
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 5
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 29,
    "label": "has",
    "to": 39
  }, {
    "from": 29,
    "label": "has",
    "to": 5
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 5
  }, {
    "from": 29,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 5
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 43,
    "label": "has",
    "to": 5
  }, {
    "from": 43,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 5
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 5
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 5
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 61
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 83,
    "label": "has",
    "to": 5
  }, {
    "from": 83,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 100,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 108,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 105
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 5
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 123,
    "label": "has",
    "to": 115
  }, {
    "from": 123,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 115
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 130,
    "label": "has",
    "to": 135
  }, {
    "from": 130,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 130,
    "label": "has",
    "to": 139
  }, {
    "from": 130,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 5
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 61
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 5
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 61
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 5
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 5
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 5
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 156,
    "label": "has",
    "to": 163
  }, {
    "from": 156,
    "label": "has",
    "to": 164
  }, {
    "from": 156,
    "label": "has",
    "to": 165
  }, {
    "from": 156,
    "label": "has",
    "to": 166
  }, {
    "from": 156,
    "label": "has",
    "to": 167
  }, {
    "from": 156,
    "label": "has",
    "to": 168
  }, {
    "from": 156,
    "label": "has",
    "to": 169
  }, {
    "from": 156,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 162
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 175,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 180,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 160
  }, {
    "from": 186,
    "label": "has",
    "to": 162
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 196,
    "label": "has",
    "to": 5
  }, {
    "from": 196,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 196,
    "label": "has",
    "to": 5
  }, {
    "from": 196,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 196,
    "label": "has",
    "to": 5
  }, {
    "from": 196,
    "label": "has",
    "to": 203
  }, {
    "from": 196,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 5
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 205,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 208,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 205,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 205,
    "label": "has",
    "to": 5
  }, {
    "from": 205,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 5
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 220,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 220,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 225,
    "label": "has",
    "to": 228
  }, {
    "from": 225,
    "label": "has",
    "to": 229
  }, {
    "from": 220,
    "label": "has",
    "to": 230
  }, {
    "from": 220,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 220,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 220,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 220,
    "label": "has",
    "to": 237
  }, {
    "from": 220,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 239,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 239,
    "label": "has",
    "to": 244
  }, {
    "from": 239,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 245,
    "label": "has",
    "to": 248
  }, {
    "from": 245,
    "label": "has",
    "to": 249
  }, {
    "from": 245,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 245,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 245,
    "label": "has",
    "to": 254
  }, {
    "from": 245,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 245,
    "label": "has",
    "to": 257
  }, {
    "from": 239,
    "label": "has",
    "to": 5
  }, {
    "from": 239,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 239,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 239,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 264,
    "label": "has",
    "to": 248
  }, {
    "from": 264,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 257
  }, {
    "from": 239,
    "label": "has",
    "to": 5
  }, {
    "from": 239,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 239,
    "label": "has",
    "to": 5
  }, {
    "from": 239,
    "label": "has",
    "to": 270
  }, {
    "from": 239,
    "label": "has",
    "to": 271
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 5
  }, {
    "from": 272,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 154
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 275,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 275,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 279,
    "label": "has",
    "to": 284
  }, {
    "from": 275,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 275,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 227
  }, {
    "from": 275,
    "label": "has",
    "to": 288
  }, {
    "from": 275,
    "label": "has",
    "to": 5
  }, {
    "from": 275,
    "label": "has",
    "to": 289
  }, {
    "from": 290,
    "label": "has",
    "to": 210
  }, {
    "from": 291,
    "label": "has",
    "to": 212
  }, {
    "from": 55,
    "label": "calls",
    "to": 293
  }, {
    "from": 23,
    "label": "calls",
    "to": 303
  }, {
    "from": 275,
    "label": "calls",
    "to": 303
  }, {
    "from": 8,
    "label": "calls",
    "to": 294
  }, {
    "from": 8,
    "label": "calls",
    "to": 294
  }, {
    "from": 8,
    "label": "calls",
    "to": 294
  }, {
    "from": 220,
    "label": "calls",
    "to": 294
  }, {
    "from": 239,
    "label": "calls",
    "to": 294
  }, {
    "from": 239,
    "label": "calls",
    "to": 294
  }, {
    "from": 68,
    "label": "calls",
    "to": 55
  }, {
    "from": 68,
    "label": "calls",
    "to": 55
  }, {
    "from": 55,
    "label": "calls",
    "to": 43
  }, {
    "from": 205,
    "label": "calls",
    "to": 43
  }, {
    "from": 13,
    "label": "calls",
    "to": 8
  }, {
    "from": 13,
    "label": "calls",
    "to": 8
  }, {
    "from": 13,
    "label": "calls",
    "to": 8
  }, {
    "from": 13,
    "label": "calls",
    "to": 8
  }, {
    "from": 23,
    "label": "calls",
    "to": 305
  }, {
    "from": 275,
    "label": "calls",
    "to": 305
  }, {
    "from": 43,
    "label": "calls",
    "to": 295
  }, {
    "from": 43,
    "label": "calls",
    "to": 295
  }, {
    "from": 239,
    "label": "calls",
    "to": 295
  }, {
    "from": 2,
    "label": "calls",
    "to": 304
  }, {
    "from": 13,
    "label": "calls",
    "to": 304
  }, {
    "from": 43,
    "label": "calls",
    "to": 304
  }, {
    "from": 196,
    "label": "calls",
    "to": 304
  }, {
    "from": 220,
    "label": "calls",
    "to": 304
  }, {
    "from": 239,
    "label": "calls",
    "to": 304
  }, {
    "from": 239,
    "label": "calls",
    "to": 304
  }, {
    "from": 239,
    "label": "calls",
    "to": 304
  }, {
    "from": 239,
    "label": "calls",
    "to": 304
  }, {
    "from": 239,
    "label": "calls",
    "to": 304
  }, {
    "from": 239,
    "label": "calls",
    "to": 304
  }, {
    "from": 239,
    "label": "calls",
    "to": 304
  }, {
    "from": 130,
    "label": "calls",
    "to": 296
  }, {
    "from": 43,
    "label": "calls",
    "to": 306
  }, {
    "from": 43,
    "label": "calls",
    "to": 306
  }, {
    "from": 205,
    "label": "calls",
    "to": 306
  }, {
    "from": 239,
    "label": "calls",
    "to": 306
  }, {
    "from": 239,
    "label": "calls",
    "to": 306
  }, {
    "from": 239,
    "label": "calls",
    "to": 306
  }, {
    "from": 275,
    "label": "calls",
    "to": 306
  }, {
    "from": 8,
    "label": "calls",
    "to": 311
  }, {
    "from": 8,
    "label": "calls",
    "to": 311
  }, {
    "from": 13,
    "label": "calls",
    "to": 311
  }, {
    "from": 150,
    "label": "calls",
    "to": 311
  }, {
    "from": 220,
    "label": "calls",
    "to": 311
  }, {
    "from": 220,
    "label": "calls",
    "to": 311
  }, {
    "from": 239,
    "label": "calls",
    "to": 311
  }, {
    "from": 239,
    "label": "calls",
    "to": 311
  }, {
    "from": 239,
    "label": "calls",
    "to": 311
  }, {
    "from": 239,
    "label": "calls",
    "to": 311
  }, {
    "from": 239,
    "label": "calls",
    "to": 311
  }, {
    "from": 239,
    "label": "calls",
    "to": 41
  }, {
    "from": 123,
    "label": "calls",
    "to": 297
  }, {
    "from": 275,
    "label": "calls",
    "to": 297
  }, {
    "from": 68,
    "label": "calls",
    "to": 307
  }, {
    "from": 75,
    "label": "calls",
    "to": 307
  }, {
    "from": 130,
    "label": "calls",
    "to": 307
  }, {
    "from": 23,
    "label": "calls",
    "to": 308
  }, {
    "from": 43,
    "label": "calls",
    "to": 308
  }, {
    "from": 43,
    "label": "calls",
    "to": 308
  }, {
    "from": 100,
    "label": "calls",
    "to": 308
  }, {
    "from": 275,
    "label": "calls",
    "to": 308
  }, {
    "from": 68,
    "label": "calls",
    "to": 298
  }, {
    "from": 68,
    "label": "calls",
    "to": 298
  }, {
    "from": 68,
    "label": "calls",
    "to": 298
  }, {
    "from": 75,
    "label": "calls",
    "to": 298
  }, {
    "from": 80,
    "label": "calls",
    "to": 298
  }, {
    "from": 92,
    "label": "calls",
    "to": 298
  }, {
    "from": 96,
    "label": "calls",
    "to": 298
  }, {
    "from": 100,
    "label": "calls",
    "to": 298
  }, {
    "from": 100,
    "label": "calls",
    "to": 298
  }, {
    "from": 113,
    "label": "calls",
    "to": 298
  }, {
    "from": 117,
    "label": "calls",
    "to": 298
  }, {
    "from": 117,
    "label": "calls",
    "to": 298
  }, {
    "from": 117,
    "label": "calls",
    "to": 298
  }, {
    "from": 123,
    "label": "calls",
    "to": 298
  }, {
    "from": 123,
    "label": "calls",
    "to": 298
  }, {
    "from": 123,
    "label": "calls",
    "to": 298
  }, {
    "from": 130,
    "label": "calls",
    "to": 298
  }, {
    "from": 130,
    "label": "calls",
    "to": 298
  }, {
    "from": 130,
    "label": "calls",
    "to": 298
  }, {
    "from": 205,
    "label": "calls",
    "to": 299
  }, {
    "from": 205,
    "label": "calls",
    "to": 299
  }, {
    "from": 239,
    "label": "calls",
    "to": 150
  }, {
    "from": 220,
    "label": "calls",
    "to": 309
  }, {
    "from": 220,
    "label": "calls",
    "to": 309
  }, {
    "from": 60,
    "label": "calls",
    "to": 310
  }, {
    "from": 83,
    "label": "calls",
    "to": 310
  }, {
    "from": 143,
    "label": "calls",
    "to": 310
  }, {
    "from": 147,
    "label": "calls",
    "to": 310
  }, {
    "from": 2,
    "label": "calls",
    "to": 300
  }, {
    "from": 218,
    "label": "calls",
    "to": 301
  }, {
    "from": 117,
    "label": "calls",
    "to": 313
  }, {
    "from": 8,
    "label": "calls",
    "to": 302
  }, {
    "from": 29,
    "label": "calls",
    "to": 23
  }, {
    "from": 205,
    "label": "calls",
    "to": 312
  }, {
    "from": 205,
    "label": "calls",
    "to": 312
  }, {
    "from": 1,
    "label": "contains",
    "to": 292
  }, {
    "from": 292,
    "label": "declares",
    "to": 2
  }, {
    "from": 292,
    "label": "declares",
    "to": 8
  }, {
    "from": 292,
    "label": "declares",
    "to": 13
  }, {
    "from": 292,
    "label": "declares",
    "to": 23
  }, {
    "from": 292,
    "label": "declares",
    "to": 29
  }, {
    "from": 292,
    "label": "declares",
    "to": 41
  }, {
    "from": 292,
    "label": "declares",
    "to": 43
  }, {
    "from": 292,
    "label": "declares",
    "to": 55
  }, {
    "from": 292,
    "label": "declares",
    "to": 60
  }, {
    "from": 292,
    "label": "declares",
    "to": 65
  }, {
    "from": 292,
    "label": "declares",
    "to": 66
  }, {
    "from": 292,
    "label": "declares",
    "to": 67
  }, {
    "from": 292,
    "label": "declares",
    "to": 68
  }, {
    "from": 292,
    "label": "declares",
    "to": 75
  }, {
    "from": 292,
    "label": "declares",
    "to": 79
  }, {
    "from": 292,
    "label": "declares",
    "to": 80
  }, {
    "from": 292,
    "label": "declares",
    "to": 83
  }, {
    "from": 292,
    "label": "declares",
    "to": 90
  }, {
    "from": 292,
    "label": "declares",
    "to": 92
  }, {
    "from": 292,
    "label": "declares",
    "to": 96
  }, {
    "from": 292,
    "label": "declares",
    "to": 100
  }, {
    "from": 292,
    "label": "declares",
    "to": 108
  }, {
    "from": 292,
    "label": "declares",
    "to": 113
  }, {
    "from": 292,
    "label": "declares",
    "to": 117
  }, {
    "from": 292,
    "label": "declares",
    "to": 123
  }, {
    "from": 292,
    "label": "declares",
    "to": 130
  }, {
    "from": 292,
    "label": "declares",
    "to": 141
  }, {
    "from": 292,
    "label": "declares",
    "to": 143
  }, {
    "from": 292,
    "label": "declares",
    "to": 147
  }, {
    "from": 292,
    "label": "declares",
    "to": 150
  }, {
    "from": 292,
    "label": "declares",
    "to": 152
  }, {
    "from": 292,
    "label": "declares",
    "to": 156
  }, {
    "from": 292,
    "label": "declares",
    "to": 171
  }, {
    "from": 292,
    "label": "declares",
    "to": 175
  }, {
    "from": 292,
    "label": "declares",
    "to": 180
  }, {
    "from": 292,
    "label": "declares",
    "to": 186
  }, {
    "from": 292,
    "label": "declares",
    "to": 189
  }, {
    "from": 292,
    "label": "declares",
    "to": 192
  }, {
    "from": 292,
    "label": "declares",
    "to": 196
  }, {
    "from": 292,
    "label": "declares",
    "to": 205
  }, {
    "from": 292,
    "label": "declares",
    "to": 218
  }, {
    "from": 292,
    "label": "declares",
    "to": 220
  }, {
    "from": 292,
    "label": "declares",
    "to": 239
  }, {
    "from": 292,
    "label": "declares",
    "to": 272
  }, {
    "from": 292,
    "label": "declares",
    "to": 275
  }, {
    "from": 292,
    "label": "declares",
    "to": 290
  }, {
    "from": 292,
    "label": "declares",
    "to": 291
  }, {
    "from": 1,
    "label": "contains",
    "to": 314
  }, {
    "from": 1,
    "label": "contains",
    "to": 315
  }, {
    "from": 314,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 314,
    "label": "initializes",
    "to": 318
  }, {
    "from": 314,
    "label": "initializes",
    "to": 319
  }, {
    "from": 314,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 314,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 314,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 314,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 314,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 314,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 314,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 314,
    "label": "initializes",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 314,
    "label": "initializes",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 314,
    "label": "initializes",
    "to": 338
  }, {
    "from": 338,
    "label": "assigns",
    "to": 339
  }, {
    "from": 314,
    "label": "initializes",
    "to": 340
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luaunit",
    "type": "module"
  }, {
    "id": 2,
    "text": "function assertError(f, ...)\r\n    -- assert that calling f with the arguments will raise an error\r\n    -- example: assertError( f, 1, 2 ) => f(1,2) should generate an error\r\n    local has_error, error_msg = not pcall( f, ... )\r\n    if has_error then return end \r\n    error( \"Expected an error but no error generated\", 2 )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local has_error, error_msg = not pcall( f, ... )",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if has_error then return end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "error( \"Expected an error but no error generated\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function mytostring( v )\r\n    if type(v) == 'string' then\r\n        return '\"'..v..'\"'\r\n    end\r\n    if type(v) == 'table' then\r\n        if v.__class__ then\r\n            return string.gsub( tostring(v), 'table', v.__class__ )\r\n        end\r\n        return tostring(v)\r\n    end\r\n    return tostring(v)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if type(v) == 'string' then\r\n        return '\"'..v..'\"'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "if type(v) == 'table' then\r\n        if v.__class__ then\r\n            return string.gsub( tostring(v), 'table', v.__class__ )\r\n        end\r\n        return tostring(v)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "if v.__class__ then\r\n            return string.gsub( tostring(v), 'table', v.__class__ )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function assertEquals(actual, expected)\r\n    -- assert that two values are equal and calls error else\r\n    if  actual ~= expected  then\r\n\r\n        if not USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS then\r\n            expected, actual = actual, expected\r\n        end\r\n\r\n        local errorMsg\r\n        if type(expected) == 'string' then\r\n            errorMsg = \"\\nexpected: \"..mytostring(expected)..\"\\n\"..\r\n                             \"actual  : \"..mytostring(actual)..\"\\n\"\r\n        else\r\n            errorMsg = \"expected: \"..mytostring(expected)..\", actual: \"..mytostring(actual)\r\n        end\r\n        error( errorMsg, 2 )\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if  actual ~= expected  then\r\n\r\n        if not USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS then\r\n            expected, actual = actual, expected\r\n        end\r\n\r\n        local errorMsg\r\n        if type(expected) == 'string' then\r\n            errorMsg = \"\\nexpected: \"..mytostring(expected)..\"\\n\"..\r\n                             \"actual  : \"..mytostring(actual)..\"\\n\"\r\n        else\r\n            errorMsg = \"expected: \"..mytostring(expected)..\", actual: \"..mytostring(actual)\r\n        end\r\n        error( errorMsg, 2 )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if not USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS then\r\n            expected, actual = actual, expected\r\n        end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "expected, actual = actual, expected",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local errorMsg",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if type(expected) == 'string' then\r\n            errorMsg = \"\\nexpected: \"..mytostring(expected)..\"\\n\"..\r\n                             \"actual  : \"..mytostring(actual)..\"\\n\"\r\n        else\r\n            errorMsg = \"expected: \"..mytostring(expected)..\", actual: \"..mytostring(actual)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "errorMsg = \"\\nexpected: \"..mytostring(expected)..\"\\n\"..\r\n                             \"actual  : \"..mytostring(actual)..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "errorMsg = \"expected: \"..mytostring(expected)..\", actual: \"..mytostring(actual)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "error( errorMsg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function __genOrderedIndex( t )\r\n    local orderedIndex = {}\r\n    for key,_ in pairs(t) do\r\n        table.insert( orderedIndex, key )\r\n    end\r\n    table.sort( orderedIndex )\r\n    return orderedIndex\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local orderedIndex = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "for key,_ in pairs(t) do\r\n        table.insert( orderedIndex, key )\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "table.insert( orderedIndex, key )",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "table.sort( orderedIndex )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function orderedNext(t, state)\r\n    -- Equivalent of the next() function of table iteration, but returns the\r\n    -- keys in the alphabetic order. We use a temporary ordered key table that\r\n    -- is stored in the table being iterated.\r\n\r\n    --print(\"orderedNext: state = \"..tostring(state) )\r\n    local key\r\n    if state == nil then\r\n        -- the first time, generate the index\r\n        t.__orderedIndex = nil\r\n        t.__orderedIndex = __genOrderedIndex( t )\r\n        key = t.__orderedIndex[1]\r\n        return key, t[key]\r\n    end\r\n    -- fetch the next value\r\n    key = nil\r\n    for i = 1,#t.__orderedIndex do\r\n        if t.__orderedIndex[i] == state then\r\n            key = t.__orderedIndex[i+1]\r\n        end\r\n    end\r\n\r\n    if key then\r\n        return key, t[key]\r\n    end\r\n\r\n    -- no more value to return, cleanup\r\n    t.__orderedIndex = nil\r\n    return\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local key",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if state == nil then\r\n        -- the first time, generate the index\r\n        t.__orderedIndex = nil\r\n        t.__orderedIndex = __genOrderedIndex( t )\r\n        key = t.__orderedIndex[1]\r\n        return key, t[key]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "t.__orderedIndex = nil",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "t.__orderedIndex = __genOrderedIndex( t )",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "key = t.__orderedIndex[1]",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "key = nil",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "for i = 1,#t.__orderedIndex do\r\n        if t.__orderedIndex[i] == state then\r\n            key = t.__orderedIndex[i+1]\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 37,
    "text": "if t.__orderedIndex[i] == state then\r\n            key = t.__orderedIndex[i+1]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "key = t.__orderedIndex[i+1]",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if key then\r\n        return key, t[key]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function orderedPairs(t)\r\n    -- Equivalent of the pairs() function on tables. Allows to iterate\r\n    -- in order\r\n    return orderedNext, t, nil\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function strsplit(delimiter, text)\r\n-- Split text into a list consisting of the strings in text,\r\n-- separated by strings matching delimiter (which may be a pattern). \r\n-- example: strsplit(\",%s*\", \"Anna, Bob, Charlie,Dolores\")\r\n    local list = {}\r\n    local pos = 1\r\n    if string.find(\"\", delimiter, 1) then -- this would result in endless loops\r\n        error(\"delimiter matches empty string!\")\r\n    end\r\n    while 1 do\r\n        local first, last = string.find(text, delimiter, pos)\r\n        if first then -- found?\r\n            table.insert(list, string.sub(text, pos, first-1))\r\n            pos = last+1\r\n        else\r\n            table.insert(list, string.sub(text, pos))\r\n            break\r\n        end\r\n    end\r\n    return list\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if string.find(\"\", delimiter, 1) then -- this would result in endless loops\r\n        error(\"delimiter matches empty string!\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "error(\"delimiter matches empty string!\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "while 1 do\r\n        local first, last = string.find(text, delimiter, pos)\r\n        if first then -- found?\r\n            table.insert(list, string.sub(text, pos, first-1))\r\n            pos = last+1\r\n        else\r\n            table.insert(list, string.sub(text, pos))\r\n            break\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 49,
    "text": "local first, last = string.find(text, delimiter, pos)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if first then -- found?\r\n            table.insert(list, string.sub(text, pos, first-1))\r\n            pos = last+1\r\n        else\r\n            table.insert(list, string.sub(text, pos))\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "table.insert(list, string.sub(text, pos, first-1))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "pos = last+1",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "table.insert(list, string.sub(text, pos))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function prefixString( prefix, s )\r\n    local t, s2\r\n    t = strsplit('\\n', s)\r\n    s2 = prefix..table.concat(t, '\\n'..prefix)\r\n    return s2\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local t, s2",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "t = strsplit('\\n', s)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "s2 = prefix..table.concat(t, '\\n'..prefix)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function TapOutput:new()\r\n        local t = {}\r\n        t.verbosity = 0\r\n        setmetatable( t, TapOutput_MT )\r\n        return t\r\n    end",
    "type": "function"
  }, {
    "id": 61,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "t.verbosity = 0",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "setmetatable( t, TapOutput_MT )",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function TapOutput:startSuite() end",
    "type": "function"
  }, {
    "id": 66,
    "text": "function TapOutput:startClass(className) end",
    "type": "function"
  }, {
    "id": 67,
    "text": "function TapOutput:startTest(testName) end",
    "type": "function"
  }, {
    "id": 68,
    "text": "function TapOutput:addFailure( errorMsg, stackTrace )\r\n       print(string.format(\"not ok %d\\t%s\", self.result.testCount, self.result.currentTestName ))\r\n       if self.verbosity > 0 then\r\n           print( prefixString( '    ', errorMsg ) )\r\n        end\r\n       if self.verbosity > 1 then\r\n           print( prefixString( '    ', stackTrace ) )\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 69,
    "text": "print(string.format(\"not ok %d\\t%s\", self.result.testCount, self.result.currentTestName ))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if self.verbosity > 0 then\r\n           print( prefixString( '    ', errorMsg ) )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "print( prefixString( '    ', errorMsg ) )",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "if self.verbosity > 1 then\r\n           print( prefixString( '    ', stackTrace ) )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "print( prefixString( '    ', stackTrace ) )",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function TapOutput:endTest(testHasFailure)\r\n       if not self.result.currentTestHasFailure then\r\n          print(string.format(\"ok     %d\\t%s\", self.result.testCount, self.result.currentTestName ))\r\n       end\r\n    end",
    "type": "function"
  }, {
    "id": 76,
    "text": "if not self.result.currentTestHasFailure then\r\n          print(string.format(\"ok     %d\\t%s\", self.result.testCount, self.result.currentTestName ))\r\n       end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "print(string.format(\"ok     %d\\t%s\", self.result.testCount, self.result.currentTestName ))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function TapOutput:endClass() end",
    "type": "function"
  }, {
    "id": 80,
    "text": "function TapOutput:endSuite()\r\n       print(\"1..\"..self.result.testCount)\r\n       return self.result.failureCount\r\n    end",
    "type": "function"
  }, {
    "id": 81,
    "text": "print(\"1..\"..self.result.testCount)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function TextOutput:new()\r\n        local t = {}\r\n        t.runner = nil\r\n        t.result = nil\r\n        t.errorList ={}\r\n        t.verbosity = 1\r\n        setmetatable( t, TextOutput_MT )\r\n        return t\r\n    end",
    "type": "function"
  }, {
    "id": 84,
    "text": "t.runner = nil",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "t.result = nil",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "t.errorList ={}",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "t.verbosity = 1",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "setmetatable( t, TextOutput_MT )",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function TextOutput:startSuite()\r\n    end",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function TextOutput:startClass(className)\r\n        if self.verbosity > 0 then\r\n            print( '>>>>>>>>> '.. self.result.currentClassName )\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 93,
    "text": "if self.verbosity > 0 then\r\n            print( '>>>>>>>>> '.. self.result.currentClassName )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "print( '>>>>>>>>> '.. self.result.currentClassName )",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function TextOutput:startTest(testName)\r\n        if self.verbosity > 0 then\r\n            print( \">>> \".. self.result.currentTestName )\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 97,
    "text": "if self.verbosity > 0 then\r\n            print( \">>> \".. self.result.currentTestName )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "print( \">>> \".. self.result.currentTestName )",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function TextOutput:addFailure( errorMsg, stackTrace )\r\n        table.insert( self.errorList, { self.result.currentTestName, errorMsg, stackTrace } )\r\n        if self.verbosity == 0 then\r\n            io.stdout:write(\"F\")\r\n        end\r\n        if self.verbosity > 0 then\r\n            print( errorMsg )\r\n            print( 'Failed' )\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 101,
    "text": "table.insert( self.errorList, { self.result.currentTestName, errorMsg, stackTrace } )",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "if self.verbosity == 0 then\r\n            io.stdout:write(\"F\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "io.stdout:write(\"F\")",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "if self.verbosity > 0 then\r\n            print( errorMsg )\r\n            print( 'Failed' )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "print( errorMsg )",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "print( 'Failed' )",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function TextOutput:endTest(testHasFailure)\r\n        if not testHasFailure then\r\n            if self.verbosity > 0 then\r\n                --print (\"Ok\" )\r\n            else \r\n                io.stdout:write(\".\")\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 109,
    "text": "if not testHasFailure then\r\n            if self.verbosity > 0 then\r\n                --print (\"Ok\" )\r\n            else \r\n                io.stdout:write(\".\")\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "if self.verbosity > 0 then\r\n                --print (\"Ok\" )\r\n            else \r\n                io.stdout:write(\".\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "io.stdout:write(\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function TextOutput:endClass()\r\n        if self.verbosity > 0 then\r\n           print()\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 114,
    "text": "if self.verbosity > 0 then\r\n           print()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function TextOutput:displayOneFailedTest( failure )\r\n        testName, errorMsg, stackTrace = unpack( failure )\r\n        print(\">>> \"..testName..\" failed\")\r\n        print( errorMsg )\r\n        if self.verbosity > 1 then\r\n            print( stackTrace )\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 118,
    "text": "testName, errorMsg, stackTrace = unpack( failure )",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "print(\">>> \"..testName..\" failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "if self.verbosity > 1 then\r\n            print( stackTrace )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "print( stackTrace )",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function TextOutput:displayFailedTests()\r\n        if #self.errorList == 0 then return end\r\n        print(\"Failed tests:\")\r\n        print(\"-------------\")\r\n        for i,v in ipairs(self.errorList) do\r\n            self:displayOneFailedTest( v )\r\n        end\r\n        print()\r\n    end",
    "type": "function"
  }, {
    "id": 124,
    "text": "if #self.errorList == 0 then return end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "print(\"Failed tests:\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "print(\"-------------\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "for i,v in ipairs(self.errorList) do\r\n            self:displayOneFailedTest( v )\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 128,
    "text": "self:displayOneFailedTest( v )",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function TextOutput:endSuite()\r\n        if self.verbosity == 0 then\r\n            print()\r\n        else\r\n            print(\"=========================================================\")\r\n        end\r\n        self:displayFailedTests()\r\n        local successPercent, successCount\r\n        successCount = self.result.testCount - self.result.failureCount\r\n        if self.result.testCount == 0 then\r\n            successPercent = 100\r\n        else\r\n            successPercent = math.ceil( 100 * successCount / self.result.testCount )\r\n        end\r\n        print( string.format(\"Success : %d%% - %d / %d\",\r\n            successPercent, successCount, self.result.testCount) )\r\n    end",
    "type": "function"
  }, {
    "id": 131,
    "text": "if self.verbosity == 0 then\r\n            print()\r\n        else\r\n            print(\"=========================================================\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "print(\"=========================================================\")",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "self:displayFailedTests()",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "local successPercent, successCount",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "successCount = self.result.testCount - self.result.failureCount",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "if self.result.testCount == 0 then\r\n            successPercent = 100\r\n        else\r\n            successPercent = math.ceil( 100 * successCount / self.result.testCount )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "successPercent = 100",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "successPercent = math.ceil( 100 * successCount / self.result.testCount )",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "print( string.format(\"Success : %d%% - %d / %d\",\r\n            successPercent, successCount, self.result.testCount) )",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function nopCallable() \r\n    --print(42) \r\n    return nopCallable\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function NilOutput:new()\r\n    local t = {}\r\n    t.__class__ = 'NilOutput'\r\n    setmetatable( t, NilOutput_MT )\r\n    return t \r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "t.__class__ = 'NilOutput'",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "setmetatable( t, NilOutput_MT )",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function LuaUnit:new()\r\n        local t = {}\r\n        setmetatable( t, LuaUnit_MT )\r\n        return t\r\n    end",
    "type": "function"
  }, {
    "id": 148,
    "text": "setmetatable( t, LuaUnit_MT )",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function LuaUnit.isFunction(aObject) \r\n        return 'function' == type(aObject)\r\n    end",
    "type": "function"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function LuaUnit:ensureSuiteStarted( )\r\n        if self.result and self.result.suiteStarted then\r\n            return\r\n        end\r\n        self:startSuite()\r\n    end",
    "type": "function"
  }, {
    "id": 153,
    "text": "if self.result and self.result.suiteStarted then\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "self:startSuite()",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function LuaUnit:startSuite()\r\n        self.result = {}\r\n        self.result.failureCount = 0\r\n        self.result.testCount = 0\r\n        self.result.currentTestName = \"\"\r\n        self.result.currentClassName = \"\"\r\n        self.result.currentTestHasFailure = false\r\n        self.result.suiteStarted = true\r\n        self.outputType = self.outputType or TextOutput\r\n        self.output = self.outputType:new()\r\n        self.output.runner = self\r\n        self.output.result = self.result\r\n        self.output.verbosity = self.verbosity\r\n        self.output:startSuite()\r\n    end",
    "type": "function"
  }, {
    "id": 157,
    "text": "self.result = {}",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "self.result.failureCount = 0",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "self.result.testCount = 0",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "self.result.currentTestName = \"\"",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "self.result.currentClassName = \"\"",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "self.result.currentTestHasFailure = false",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "self.result.suiteStarted = true",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "self.outputType = self.outputType or TextOutput",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "self.output = self.outputType:new()",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "self.output.runner = self",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "self.output.result = self.result",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "self.output.verbosity = self.verbosity",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "self.output:startSuite()",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function LuaUnit:startClass( className )\r\n        self.result.currentClassName = className\r\n        self.output:startClass( className )\r\n    end",
    "type": "function"
  }, {
    "id": 172,
    "text": "self.result.currentClassName = className",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "self.output:startClass( className )",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function LuaUnit:startTest( testName  )\r\n        self.result.currentTestName = testName\r\n        self.result.testCount = self.result.testCount + 1\r\n        self.result.currentTestHasFailure = false\r\n        self.output:startTest( testName )\r\n    end",
    "type": "function"
  }, {
    "id": 176,
    "text": "self.result.currentTestName = testName",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "self.result.testCount = self.result.testCount + 1",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "self.output:startTest( testName )",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function LuaUnit:addFailure( errorMsg, stackTrace )\r\n        if not self.result.currentTestHasFailure then\r\n            self.result.failureCount = self.result.failureCount + 1\r\n            self.result.currentTestHasFailure = true\r\n        end\r\n        self.output:addFailure( errorMsg, stackTrace )\r\n    end",
    "type": "function"
  }, {
    "id": 181,
    "text": "if not self.result.currentTestHasFailure then\r\n            self.result.failureCount = self.result.failureCount + 1\r\n            self.result.currentTestHasFailure = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "self.result.failureCount = self.result.failureCount + 1",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "self.result.currentTestHasFailure = true",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "self.output:addFailure( errorMsg, stackTrace )",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function LuaUnit:endTest()\r\n        self.output:endTest( self.result.currentTestHasFailure )\r\n        self.result.currentTestName = \"\"\r\n        self.result.currentTestHasFailure = false\r\n    end",
    "type": "function"
  }, {
    "id": 187,
    "text": "self.output:endTest( self.result.currentTestHasFailure )",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function LuaUnit:endClass()\r\n        self.output:endClass()\r\n    end",
    "type": "function"
  }, {
    "id": 190,
    "text": "self.output:endClass()",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function LuaUnit:endSuite()\r\n        self.result.suiteStarted = false\r\n        self.output:endSuite()\r\n    end",
    "type": "function"
  }, {
    "id": 193,
    "text": "self.result.suiteStarted = false",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "self.output:endSuite()",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 196,
    "text": "function LuaUnit:setOutputType(outputType)\r\n        -- default to text\r\n        -- tap produces results according to TAP format\r\n        if outputType:upper() == \"NIL\" then\r\n            self.outputType = NilOutput\r\n            return\r\n        end\r\n        if outputType:upper() == \"TAP\" then\r\n            self.outputType = TapOutput\r\n            return\r\n        end \r\n        if outputType:upper() == \"TEXT\" then\r\n            self.outputType = TextOutput\r\n            return\r\n        end\r\n        error( 'No such format: '..outputType)\r\n    end",
    "type": "function"
  }, {
    "id": 197,
    "text": "if outputType:upper() == \"NIL\" then\r\n            self.outputType = NilOutput\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "self.outputType = NilOutput",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "if outputType:upper() == \"TAP\" then\r\n            self.outputType = TapOutput\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "self.outputType = TapOutput",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "if outputType:upper() == \"TEXT\" then\r\n            self.outputType = TextOutput\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "self.outputType = TextOutput",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "error( 'No such format: '..outputType)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "function LuaUnit:protectedCall( classInstance , methodInstance)\r\n        -- if classInstance is nil, this is just a function run\r\n        local function err_handler(e)\r\n            return debug.traceback(e..SPLITTER, 4)\r\n        end\r\n\r\n        local ok=true, errorMsg, stackTrace\r\n        if classInstance then\r\n            -- stupid Lua < 5.2 does not allow xpcall with arguments so let's live with that\r\n            ok, errorMsg = xpcall( function () methodInstance(classInstance) end, err_handler )\r\n        else\r\n            ok, errorMsg = xpcall( function () methodInstance() end, err_handler )\r\n        end\r\n        if not ok then\r\n            t = strsplit( SPLITTER, errorMsg )\r\n            stackTrace = string.sub(t[2],2)\r\n            self:addFailure( t[1], stackTrace )\r\n        end\r\n\r\n        return ok\r\n    end",
    "type": "function"
  }, {
    "id": 206,
    "text": "local function err_handler(e)\r\n            return debug.traceback(e..SPLITTER, 4)\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 207,
    "text": "local ok=true, errorMsg, stackTrace",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "if classInstance then\r\n            -- stupid Lua < 5.2 does not allow xpcall with arguments so let's live with that\r\n            ok, errorMsg = xpcall( function () methodInstance(classInstance) end, err_handler )\r\n        else\r\n            ok, errorMsg = xpcall( function () methodInstance() end, err_handler )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "ok, errorMsg = xpcall( function () methodInstance(classInstance) end, err_handler )",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "methodInstance(classInstance)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "ok, errorMsg = xpcall( function () methodInstance() end, err_handler )",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "methodInstance()",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "if not ok then\r\n            t = strsplit( SPLITTER, errorMsg )\r\n            stackTrace = string.sub(t[2],2)\r\n            self:addFailure( t[1], stackTrace )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "t = strsplit( SPLITTER, errorMsg )",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "stackTrace = string.sub(t[2],2)",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "self:addFailure( t[1], stackTrace )",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 218,
    "text": "local function err_handler(e)\r\n            return debug.traceback(e..SPLITTER, 4)\r\n        end",
    "type": "function"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "function LuaUnit:_runTestMethod(className, methodName, classInstance, methodInstance)\r\n        -- When executing a class method, all parameters are set\r\n        -- When executing a test function, className and classInstance are nil\r\n\r\n        if type(methodInstance) ~= 'function' then\r\n            error( tostring(methodName)..'must be a function, not '..type(methodInstance))\r\n        end\r\n\r\n        if className == nil then\r\n            className = '<TestFunction>'\r\n        end\r\n\r\n        if self.lastClassName ~= className then\r\n            if self.lastClassName ~= nil then\r\n                self:endClass()\r\n            end\r\n            self:startClass( className )\r\n            self.lastClassName = className\r\n        end\r\n\r\n        self:startTest(className..':'..methodName)\r\n\r\n        -- run setUp first(if any)\r\n        if classInstance and self.isFunction( classInstance.setUp ) then\r\n            self:protectedCall( classInstance, classInstance.setUp)\r\n        end\r\n\r\n        -- run testMethod()\r\n        if not self.result.currentTestHasFailure then\r\n            self:protectedCall( classInstance, methodInstance)\r\n        end\r\n\r\n        -- lastly, run tearDown(if any)\r\n        if classInstance and self.isFunction(classInstance.tearDown) then\r\n            self:protectedCall( classInstance, classInstance.tearDown)\r\n        end\r\n\r\n        self:endTest()\r\n    end",
    "type": "function"
  }, {
    "id": 221,
    "text": "if type(methodInstance) ~= 'function' then\r\n            error( tostring(methodName)..'must be a function, not '..type(methodInstance))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "error( tostring(methodName)..'must be a function, not '..type(methodInstance))",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "if className == nil then\r\n            className = '<TestFunction>'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "className = '<TestFunction>'",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "if self.lastClassName ~= className then\r\n            if self.lastClassName ~= nil then\r\n                self:endClass()\r\n            end\r\n            self:startClass( className )\r\n            self.lastClassName = className\r\n        end",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "if self.lastClassName ~= nil then\r\n                self:endClass()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "self:endClass()",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "self:startClass( className )",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "self.lastClassName = className",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "self:startTest(className..':'..methodName)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "if classInstance and self.isFunction( classInstance.setUp ) then\r\n            self:protectedCall( classInstance, classInstance.setUp)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "self:protectedCall( classInstance, classInstance.setUp)",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "if not self.result.currentTestHasFailure then\r\n            self:protectedCall( classInstance, methodInstance)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "self:protectedCall( classInstance, methodInstance)",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "if classInstance and self.isFunction(classInstance.tearDown) then\r\n            self:protectedCall( classInstance, classInstance.tearDown)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "self:protectedCall( classInstance, classInstance.tearDown)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "self:endTest()",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function LuaUnit:runSomeTest( someName, someInstance )\r\n        -- name is mandatory\r\n        -- if instance is not given, it's looked up in the global namespace\r\n        -- name can be a test class, a test function, or a test class + test method\r\n        -- instance can be a test class or a test function\r\n        -- example: runSomeTest( 'TestToto' )\r\n        -- example: runSomeTest( 'TestToto', TestToto )\r\n        -- example: runSomeTest( 'TestToto:testTiti' )\r\n        -- example: runSomeTest( 'TestToto:testTiti', TestToto )\r\n        -- example: runSomeTest( 'testFunction' )\r\n        -- example: runSomeTest( 'testFunction' , testFunction )\r\n\r\n        self:ensureSuiteStarted()\r\n\r\n        local hasMethod, methodName, methodInstance, className, classInstance\r\n        if someName == nil or someName == '' then\r\n            error( 'Name is required!')\r\n        end\r\n\r\n        hasMethod = string.find(someName, ':' )\r\n\r\n        -- name is class + method\r\n        if hasMethod then\r\n            methodName = string.sub(someName, hasMethod+1)\r\n            className = string.sub(someName,1,hasMethod-1)\r\n            classInstance = someInstance\r\n\r\n            classInstance = classInstance or _G[className]\r\n            if classInstance == nil then\r\n                error( \"No such class: \"..className )\r\n            end\r\n\r\n            if type(classInstance) ~= 'table' then\r\n                error( 'Instance must be a table')\r\n            end\r\n\r\n            methodInstance = classInstance[methodName]\r\n            if methodInstance == nil then\r\n                error( \"Could not find method in class \"..tostring(className)..\" for method \"..tostring(methodName) )\r\n            end\r\n\r\n            self:_runTestMethod( className, methodName, classInstance, methodInstance )\r\n            return\r\n        end\r\n\r\n        if someInstance == nil then\r\n            someInstance = _G[someName]\r\n            if not someInstance then\r\n                error( \"No such variable: \"..someName )\r\n            end\r\n        end\r\n\r\n        if (type(someInstance) ~= 'table' and type(someInstance) ~= 'function') then\r\n            error( 'Instance must be function or table')\r\n        end\r\n\r\n        -- name is either a function or a class\r\n        if type(someInstance) == 'table' then\r\n            -- run all test methods of the class\r\n            className = someName\r\n            classInstance = someInstance\r\n\r\n            for methodName, methodInstance in orderedPairs(classInstance) do\r\n                if LuaUnit.isFunction(methodInstance) and string.sub(methodName, 1, 4) == \"test\" then\r\n                    self:_runTestMethod( className, methodName, classInstance, methodInstance )\r\n                end\r\n            end\r\n            return\r\n        end\r\n\r\n        if type(someInstance) == 'function' then\r\n            self:_runTestMethod( nil, someName, nil, someInstance )\r\n            return\r\n        end\r\n\r\n        error( 'Should never be reached...')\r\n\r\n    end",
    "type": "function"
  }, {
    "id": 240,
    "text": "self:ensureSuiteStarted()",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "local hasMethod, methodName, methodInstance, className, classInstance",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "if someName == nil or someName == '' then\r\n            error( 'Name is required!')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "error( 'Name is required!')",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "hasMethod = string.find(someName, ':' )",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "if hasMethod then\r\n            methodName = string.sub(someName, hasMethod+1)\r\n            className = string.sub(someName,1,hasMethod-1)\r\n            classInstance = someInstance\r\n\r\n            classInstance = classInstance or _G[className]\r\n            if classInstance == nil then\r\n                error( \"No such class: \"..className )\r\n            end\r\n\r\n            if type(classInstance) ~= 'table' then\r\n                error( 'Instance must be a table')\r\n            end\r\n\r\n            methodInstance = classInstance[methodName]\r\n            if methodInstance == nil then\r\n                error( \"Could not find method in class \"..tostring(className)..\" for method \"..tostring(methodName) )\r\n            end\r\n\r\n            self:_runTestMethod( className, methodName, classInstance, methodInstance )\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "methodName = string.sub(someName, hasMethod+1)",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "className = string.sub(someName,1,hasMethod-1)",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "classInstance = someInstance",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "classInstance = classInstance or _G[className]",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "if classInstance == nil then\r\n                error( \"No such class: \"..className )\r\n            end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "error( \"No such class: \"..className )",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "if type(classInstance) ~= 'table' then\r\n                error( 'Instance must be a table')\r\n            end",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "error( 'Instance must be a table')",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "methodInstance = classInstance[methodName]",
    "type": "statement:assign"
  }, {
    "id": 255,
    "text": "if methodInstance == nil then\r\n                error( \"Could not find method in class \"..tostring(className)..\" for method \"..tostring(methodName) )\r\n            end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "error( \"Could not find method in class \"..tostring(className)..\" for method \"..tostring(methodName) )",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "self:_runTestMethod( className, methodName, classInstance, methodInstance )",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "if someInstance == nil then\r\n            someInstance = _G[someName]\r\n            if not someInstance then\r\n                error( \"No such variable: \"..someName )\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "someInstance = _G[someName]",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "if not someInstance then\r\n                error( \"No such variable: \"..someName )\r\n            end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "error( \"No such variable: \"..someName )",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "if (type(someInstance) ~= 'table' and type(someInstance) ~= 'function') then\r\n            error( 'Instance must be function or table')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "error( 'Instance must be function or table')",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "if type(someInstance) == 'table' then\r\n            -- run all test methods of the class\r\n            className = someName\r\n            classInstance = someInstance\r\n\r\n            for methodName, methodInstance in orderedPairs(classInstance) do\r\n                if LuaUnit.isFunction(methodInstance) and string.sub(methodName, 1, 4) == \"test\" then\r\n                    self:_runTestMethod( className, methodName, classInstance, methodInstance )\r\n                end\r\n            end\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "className = someName",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "for methodName, methodInstance in orderedPairs(classInstance) do\r\n                if LuaUnit.isFunction(methodInstance) and string.sub(methodName, 1, 4) == \"test\" then\r\n                    self:_runTestMethod( className, methodName, classInstance, methodInstance )\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 267,
    "text": "if LuaUnit.isFunction(methodInstance) and string.sub(methodName, 1, 4) == \"test\" then\r\n                    self:_runTestMethod( className, methodName, classInstance, methodInstance )\r\n                end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "if type(someInstance) == 'function' then\r\n            self:_runTestMethod( nil, someName, nil, someInstance )\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "self:_runTestMethod( nil, someName, nil, someInstance )",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "error( 'Should never be reached...')",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 272,
    "text": "function LuaUnit:run(...)\r\n        -- Run some specific test classes.\r\n        -- If no arguments are passed, run the class names specified on the\r\n        -- command line. If no class name is specified on the command line\r\n        -- run all classes whose name starts with 'Test'\r\n        --\r\n        -- If arguments are passed, they must be strings of the class names \r\n        -- that you want to run\r\n        local runner = self:new()\r\n        return runner:runSuite(...)\r\n    end",
    "type": "function"
  }, {
    "id": 273,
    "text": "local runner = self:new()",
    "type": "statement:localassign"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "function LuaUnit:runSuite(...)\r\n        self:startSuite()\r\n\r\n        args={...};\r\n        if #args == 0 then\r\n            args = argv\r\n        end\r\n\r\n        if #args == 0 then\r\n            -- create the list if classes to run now ! If not, you can\r\n            -- not iterate over _G while modifying it.\r\n            args = {}\r\n            for key, val in pairs(_G) do \r\n                if string.sub(key,1,4) == 'Test' then \r\n                    table.insert( args, key )\r\n                end\r\n            end\r\n            table.sort( args )\r\n        end\r\n\r\n        for i,testName in ipairs( args ) do\r\n            self:runSomeTest( testName )\r\n        end\r\n\r\n        if self.lastClassName ~= nil then\r\n            self:endClass()\r\n        end\r\n        self:endSuite()\r\n        return self.result.failureCount\r\n    end",
    "type": "function"
  }, {
    "id": 276,
    "text": "args={...}",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "if #args == 0 then\r\n            args = argv\r\n        end",
    "type": "statement:if"
  }, {
    "id": 278,
    "text": "args = argv",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "if #args == 0 then\r\n            -- create the list if classes to run now ! If not, you can\r\n            -- not iterate over _G while modifying it.\r\n            args = {}\r\n            for key, val in pairs(_G) do \r\n                if string.sub(key,1,4) == 'Test' then \r\n                    table.insert( args, key )\r\n                end\r\n            end\r\n            table.sort( args )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "args = {}",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "for key, val in pairs(_G) do \r\n                if string.sub(key,1,4) == 'Test' then \r\n                    table.insert( args, key )\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 282,
    "text": "if string.sub(key,1,4) == 'Test' then \r\n                    table.insert( args, key )\r\n                end",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "table.insert( args, key )",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "table.sort( args )",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "for i,testName in ipairs( args ) do\r\n            self:runSomeTest( testName )\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 286,
    "text": "self:runSomeTest( testName )",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "if self.lastClassName ~= nil then\r\n            self:endClass()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "self:endSuite()",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 290,
    "text": "function () methodInstance(classInstance) end",
    "type": "function"
  }, {
    "id": 291,
    "text": "function () methodInstance() end",
    "type": "function"
  }, {
    "id": 292,
    "text": "",
    "type": "function container"
  }, {
    "id": 293,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 294,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 295,
    "text": "find",
    "type": "global function"
  }, {
    "id": 296,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 297,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 298,
    "text": "print",
    "type": "global function"
  }, {
    "id": 299,
    "text": "methodInstance",
    "type": "global function"
  }, {
    "id": 300,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 301,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 302,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 303,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 304,
    "text": "error",
    "type": "global function"
  }, {
    "id": 305,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 306,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 307,
    "text": "format",
    "type": "global function"
  }, {
    "id": 308,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 309,
    "text": "isFunction",
    "type": "global function"
  }, {
    "id": 310,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 311,
    "text": "type",
    "type": "global function"
  }, {
    "id": 312,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 313,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 314,
    "text": "",
    "type": "variable container"
  }, {
    "id": 315,
    "text": "",
    "type": "require container"
  }, {
    "id": 316,
    "text": "",
    "type": "global variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "global variable"
  }, {
    "id": 319,
    "text": "",
    "type": "global variable"
  }, {
    "id": 320,
    "text": "",
    "type": "global variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "global variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "global variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "global variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "global variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "global variable"
  }, {
    "id": 331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 332,
    "text": "",
    "type": "global variable"
  }, {
    "id": 333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 334,
    "text": "",
    "type": "global variable"
  }, {
    "id": 335,
    "text": "",
    "type": "n/a"
  }, {
    "id": 336,
    "text": "",
    "type": "global variable"
  }, {
    "id": 337,
    "text": "",
    "type": "n/a"
  }, {
    "id": 338,
    "text": "",
    "type": "global variable"
  }, {
    "id": 339,
    "text": "",
    "type": "n/a"
  }, {
    "id": 340,
    "text": "",
    "type": "global variable"
  } ]
}