{
  "_filename": "example_with_luaunit.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaunit/example_with_luaunit.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 8
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 8
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 12
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 14
  }, {
    "from": 28,
    "label": "has",
    "to": 14
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 33
  }, {
    "from": 40,
    "label": "has",
    "to": 37
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 32,
    "label": "calls",
    "to": 43
  }, {
    "from": 32,
    "label": "calls",
    "to": 43
  }, {
    "from": 36,
    "label": "calls",
    "to": 43
  }, {
    "from": 36,
    "label": "calls",
    "to": 43
  }, {
    "from": 40,
    "label": "calls",
    "to": 43
  }, {
    "from": 40,
    "label": "calls",
    "to": 43
  }, {
    "from": 16,
    "label": "calls",
    "to": 45
  }, {
    "from": 42,
    "label": "calls",
    "to": 46
  }, {
    "from": 6,
    "label": "calls",
    "to": 47
  }, {
    "from": 6,
    "label": "calls",
    "to": 47
  }, {
    "from": 6,
    "label": "calls",
    "to": 47
  }, {
    "from": 11,
    "label": "calls",
    "to": 47
  }, {
    "from": 11,
    "label": "calls",
    "to": 47
  }, {
    "from": 11,
    "label": "calls",
    "to": 47
  }, {
    "from": 11,
    "label": "calls",
    "to": 47
  }, {
    "from": 16,
    "label": "calls",
    "to": 47
  }, {
    "from": 16,
    "label": "calls",
    "to": 47
  }, {
    "from": 16,
    "label": "calls",
    "to": 47
  }, {
    "from": 26,
    "label": "calls",
    "to": 47
  }, {
    "from": 26,
    "label": "calls",
    "to": 47
  }, {
    "from": 26,
    "label": "calls",
    "to": 47
  }, {
    "from": 28,
    "label": "calls",
    "to": 47
  }, {
    "from": 28,
    "label": "calls",
    "to": 47
  }, {
    "from": 28,
    "label": "calls",
    "to": 47
  }, {
    "from": 28,
    "label": "calls",
    "to": 47
  }, {
    "from": 30,
    "label": "calls",
    "to": 47
  }, {
    "from": 30,
    "label": "calls",
    "to": 47
  }, {
    "from": 6,
    "label": "calls",
    "to": 44
  }, {
    "from": 11,
    "label": "calls",
    "to": 44
  }, {
    "from": 16,
    "label": "calls",
    "to": 44
  }, {
    "from": 20,
    "label": "calls",
    "to": 44
  }, {
    "from": 23,
    "label": "calls",
    "to": 44
  }, {
    "from": 26,
    "label": "calls",
    "to": 44
  }, {
    "from": 28,
    "label": "calls",
    "to": 44
  }, {
    "from": 30,
    "label": "calls",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 42,
    "label": "declares",
    "to": 2
  }, {
    "from": 42,
    "label": "declares",
    "to": 6
  }, {
    "from": 42,
    "label": "declares",
    "to": 11
  }, {
    "from": 42,
    "label": "declares",
    "to": 16
  }, {
    "from": 42,
    "label": "declares",
    "to": 20
  }, {
    "from": 42,
    "label": "declares",
    "to": 23
  }, {
    "from": 42,
    "label": "declares",
    "to": 26
  }, {
    "from": 42,
    "label": "declares",
    "to": 28
  }, {
    "from": 42,
    "label": "declares",
    "to": 30
  }, {
    "from": 42,
    "label": "declares",
    "to": 32
  }, {
    "from": 42,
    "label": "declares",
    "to": 36
  }, {
    "from": 42,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 48,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 48,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 49,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "requires",
    "to": 55
  }, {
    "from": 56,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "requires",
    "to": 55
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "example_with_luaunit",
    "type": "module"
  }, {
    "id": 2,
    "text": "function TestToto:setUp()\r\n        -- set up tests\r\n        self.a = 1\r\n        self.s = 'hop' \r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "self.a = 1",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "self.s = 'hop'",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function TestToto:test1_withFailure()\r\n        print( \"some stuff test 1\" )\r\n        assertEquals( self.a , 1 )\r\n        -- will fail\r\n        assertEquals( self.a , 2 )\r\n        assertEquals( self.a , 2 )\r\n    end",
    "type": "function"
  }, {
    "id": 7,
    "text": "print( \"some stuff test 1\" )",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assertEquals( self.a , 1 )",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assertEquals( self.a , 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function TestToto:test2_withFailure()\r\n        print( \"some stuff test 2\" )\r\n        assertEquals( self.a , 1 )\r\n        assertEquals( self.s , 'hop' )\r\n        -- will fail\r\n        assertEquals( self.s , 'bof' )\r\n        assertEquals( self.s , 'bof' )\r\n    end",
    "type": "function"
  }, {
    "id": 12,
    "text": "print( \"some stuff test 2\" )",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assertEquals( self.s , 'hop' )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assertEquals( self.s , 'bof' )",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function TestToto:test3()\r\n        print( \"some stuff test 3\" )\r\n        assertEquals( self.a , 1 )\r\n        assertEquals( self.s , 'hop' )\r\n        assertEquals( type(self.a), 'number' )\r\n    end",
    "type": "function"
  }, {
    "id": 17,
    "text": "print( \"some stuff test 3\" )",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assertEquals( type(self.a), 'number' )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function TestTiti:setUp()\r\n        -- set up tests\r\n        self.a = 1\r\n        self.s = 'hop' \r\n        print( 'TestTiti:setUp' )\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "print( 'TestTiti:setUp' )",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function TestTiti:tearDown()\r\n        -- some tearDown() code if necessary\r\n        print( 'TestTiti:tearDown' )\r\n    end",
    "type": "function"
  }, {
    "id": 24,
    "text": "print( 'TestTiti:tearDown' )",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function TestTiti:test1_withFailure()\r\n        print( \"some stuff test 1\" )\r\n        assertEquals( self.a , 1 )\r\n        -- will fail\r\n        assertEquals( self.a , 2 )\r\n        assertEquals( self.a , 2 )\r\n    end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function TestTiti:test2_withFailure()\r\n        print( \"some stuff test 2\" )\r\n        assertEquals( self.a , 1 )\r\n        assertEquals( self.s , 'hop' )\r\n        -- will fail\r\n        assertEquals( self.s , 'bof' )\r\n        assertEquals( self.s , 'bof' )\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function TestTiti:test3()\r\n        print( \"some stuff test 3\" )\r\n        assertEquals( self.a , 1 )\r\n        assertEquals( self.s , 'hop' )\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function test1_withFailure()\r\n    assert( 1 == 1)\r\n    -- will fail\r\n    assert( 1 == 2)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "assert( 1 == 1)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert( 1 == 2)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function test2_withFailure()\r\n    assert( 'a' == 'a')\r\n    -- will fail\r\n    assert( 'a' == 'b')\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "assert( 'a' == 'a')",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert( 'a' == 'b')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function test3()\r\n    assert( 1 == 1)\r\n    assert( 'a' == 'a')\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "",
    "type": "function container"
  }, {
    "id": 43,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 44,
    "text": "print",
    "type": "global function"
  }, {
    "id": 45,
    "text": "type",
    "type": "global function"
  }, {
    "id": 46,
    "text": "require",
    "type": "global function"
  }, {
    "id": 47,
    "text": "assertEquals",
    "type": "global function"
  }, {
    "id": 48,
    "text": "",
    "type": "variable container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "(luaunit)",
    "type": "module"
  }, {
    "id": 56,
    "text": "",
    "type": "require container"
  } ]
}