{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lualiterate/src/literate/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 6,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 6,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 6,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 6,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 6,
    "label": "has",
    "to": 32
  }, {
    "from": 6,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 31
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 3,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 40
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 40
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 78
  }, {
    "from": 66,
    "label": "has",
    "to": 79
  }, {
    "from": 66,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 66,
    "label": "has",
    "to": 86
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 59,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 53,
    "label": "has",
    "to": 89
  }, {
    "from": 53,
    "label": "has",
    "to": 40
  }, {
    "from": 53,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 40
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 3,
    "label": "calls",
    "to": 99
  }, {
    "from": 53,
    "label": "calls",
    "to": 98
  }, {
    "from": 38,
    "label": "calls",
    "to": 104
  }, {
    "from": 3,
    "label": "calls",
    "to": 3
  }, {
    "from": 53,
    "label": "calls",
    "to": 3
  }, {
    "from": 53,
    "label": "calls",
    "to": 100
  }, {
    "from": 53,
    "label": "calls",
    "to": 97
  }, {
    "from": 53,
    "label": "calls",
    "to": 96
  }, {
    "from": 3,
    "label": "calls",
    "to": 101
  }, {
    "from": 38,
    "label": "calls",
    "to": 101
  }, {
    "from": 53,
    "label": "calls",
    "to": 101
  }, {
    "from": 53,
    "label": "calls",
    "to": 101
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 3,
    "label": "calls",
    "to": 102
  }, {
    "from": 53,
    "label": "calls",
    "to": 102
  }, {
    "from": 91,
    "label": "calls",
    "to": 102
  }, {
    "from": 53,
    "label": "calls",
    "to": 38
  }, {
    "from": 53,
    "label": "calls",
    "to": 38
  }, {
    "from": 95,
    "label": "calls",
    "to": 105
  }, {
    "from": 53,
    "label": "calls",
    "to": 108
  }, {
    "from": 53,
    "label": "calls",
    "to": 103
  }, {
    "from": 3,
    "label": "calls",
    "to": 106
  }, {
    "from": 53,
    "label": "calls",
    "to": 106
  }, {
    "from": 95,
    "label": "calls",
    "to": 107
  }, {
    "from": 95,
    "label": "calls",
    "to": 107
  }, {
    "from": 95,
    "label": "calls",
    "to": 107
  }, {
    "from": 95,
    "label": "calls",
    "to": 107
  }, {
    "from": 95,
    "label": "calls",
    "to": 107
  }, {
    "from": 45,
    "label": "calls",
    "to": 45
  }, {
    "from": 91,
    "label": "calls",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 95
  }, {
    "from": 95,
    "label": "declares",
    "to": 3
  }, {
    "from": 95,
    "label": "declares",
    "to": 38
  }, {
    "from": 95,
    "label": "declares",
    "to": 45
  }, {
    "from": 95,
    "label": "declares",
    "to": 53
  }, {
    "from": 95,
    "label": "declares",
    "to": 91
  }, {
    "from": 1,
    "label": "contains",
    "to": 109
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 109,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 109,
    "label": "initializes",
    "to": 113
  }, {
    "from": 109,
    "label": "initializes",
    "to": 114
  }, {
    "from": 109,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 109,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 109,
    "label": "initializes",
    "to": 119
  }, {
    "from": 109,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 110,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 123
  }, {
    "from": 110,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "requires",
    "to": 125
  }, {
    "from": 110,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "requires",
    "to": 2
  }, {
    "from": 110,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "requires",
    "to": 128
  }, {
    "from": 110,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 130
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "init",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function extractCodeNodes(ast)\r\n    --[[\r\n    This function recursively process whole AST and splits it into LP documentation part and code part.\r\n    Code part may also contain comments, such as API documentation or commented out code.\r\n    --]]\r\n\r\n    if #ast.data > 0 then\r\n        --_ We check current node's children.\r\n        for i,v in ipairs(ast.data) do\r\n            --^ `filter comments` If child (node) is comment, we process it based on its type.\r\n\r\n            if v.key == \"COMMENT\" and v.parsed.style == \"literate\" then\r\n                --[[\r\n                If we haven't found a docstring we just add a new row into doc_block table,\r\n                so the comment that we have just found could be aligned with the code it belongs to.\r\n                --]]\r\n                if last_docstring ~= v.parsed.text then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                end\r\n                --_ LP and LP - Markdown comments are added into current row's doc part.\r\n                if v.parsed.type == \"lp\" or v.parsed.type == \"markdown\" then\r\n                    doc_blocks[#doc_blocks].doc = { str = v.parsed.text, type = v.parsed.type }\r\n                end\r\n\r\n            elseif v.key == \"COMMENT\" and v.parsed.style == \"luadoc\" then\r\n                if v.parsed.type == \"descr\" then\r\n                    if v.parsed.text == \"\" and doc_blocks[#doc_blocks].doc.type ~= \"api\" then\r\n                        table.insert(doc_blocks,\r\n                            {\r\n                                doc = { str = \"\", type = \"api\" },\r\n                                code = {}\r\n                            })\r\n                    else\r\n                        if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. v.parsed.text\r\n                        end\r\n                    end\r\n                elseif v.parsed.type == \"name\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = '<em>Function</em> <strong>'.. v.parsed.name ..'</strong><br/>' .. doc_blocks[#doc_blocks].doc.str\r\n                    end\r\n                elseif v.parsed.type == \"param\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. '<br/><em>Param </em><strong>' .. v.parsed.name .. '</strong>: ' .. v.parsed.text .. ''\r\n                    end\r\n                end\r\n\r\n            --[[\r\n            Block comments are parsed different way. There is emphasized block name before the description.\r\n            It's inserted as a new row into doc_blocks table.\r\n            --]]\r\n            elseif v.key == \"COMMENT\" and v.parsed.style == \"custom\" then\r\n                if v.parsed.type == \"startblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"<strong>\"..v.parsed.block..\"</strong> block<br/>\"..v.parsed.text,\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                elseif v.parsed.type == \"endblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"end of <strong>\"..(v.parsed.block or \"\")..\"</strong> block\",\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                    --_ After the end of block, an extra line needs to be inserted in order to keep the output properly aligned.\r\n                    table.insert(doc_blocks, { doc ={}, code = {} })\r\n                end\r\n            --v `filter comments`\r\n\r\n            --[[\r\n            If current node is not the AST's leaf, we check it for being a function call or definition. Then we recurse into this subtree.\r\n            --]]\r\n            elseif type(v.data) == \"table\" and #v.data > 0 then\r\n                if doc_blocks[#doc_blocks].doc.type == \"api\" then table.insert(doc_blocks, { doc = {}, code = {} }) end\r\n                --_ In case is's function definition with docstring, the new line is inserted. In the code part, a cross-reference anchor is inserted and the docstring is remembered.\r\n                if (v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\") and v.docstring then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                    last_docstring = v.docstring\r\n                    --_ If it's a function without docstring, only a cross-reference anchor has to be inserted.\r\n                elseif v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\" then\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                --_ When a function call is found, we remember that it is the last (most recent) found statement.\r\n                elseif v['key'] == \"FunctionCall\" then\r\n                    last_stat = \"FunctionCall\"\r\n                end\r\n                --_ When any statement is found, we forget about the previous one.\r\n                if v['key'] == \"Stat\" then last_stat = nil end\r\n                extractCodeNodes(v)\r\n            else\r\n                --_ Finally, if current node is a leaf and it's name of function being called, the name is wrapped into a cross-reference link.\r\n                if v['key'] == \"ID\" and last_stat == \"FunctionCall\" and functions[v.str] then\r\n                    table.insert(doc_blocks[#doc_blocks].code,'<a href=\"../'.. luadoc.file_link(functions[v.str].path,filename) ..'#'.. v['str'] ..'Xref\" title=\"'.. (functions[v.str].docstring or \"\") ..'\">')\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                    table.insert(doc_blocks[#doc_blocks].code, '</a>')\r\n                    last_stat = nil\r\n                --_ Otherwise, if it's any other leaf in AST, its text is just appended to current row's code part.\r\n                else\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if #ast.data > 0 then\r\n        --_ We check current node's children.\r\n        for i,v in ipairs(ast.data) do\r\n            --^ `filter comments` If child (node) is comment, we process it based on its type.\r\n\r\n            if v.key == \"COMMENT\" and v.parsed.style == \"literate\" then\r\n                --[[\r\n                If we haven't found a docstring we just add a new row into doc_block table,\r\n                so the comment that we have just found could be aligned with the code it belongs to.\r\n                --]]\r\n                if last_docstring ~= v.parsed.text then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                end\r\n                --_ LP and LP - Markdown comments are added into current row's doc part.\r\n                if v.parsed.type == \"lp\" or v.parsed.type == \"markdown\" then\r\n                    doc_blocks[#doc_blocks].doc = { str = v.parsed.text, type = v.parsed.type }\r\n                end\r\n\r\n            elseif v.key == \"COMMENT\" and v.parsed.style == \"luadoc\" then\r\n                if v.parsed.type == \"descr\" then\r\n                    if v.parsed.text == \"\" and doc_blocks[#doc_blocks].doc.type ~= \"api\" then\r\n                        table.insert(doc_blocks,\r\n                            {\r\n                                doc = { str = \"\", type = \"api\" },\r\n                                code = {}\r\n                            })\r\n                    else\r\n                        if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. v.parsed.text\r\n                        end\r\n                    end\r\n                elseif v.parsed.type == \"name\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = '<em>Function</em> <strong>'.. v.parsed.name ..'</strong><br/>' .. doc_blocks[#doc_blocks].doc.str\r\n                    end\r\n                elseif v.parsed.type == \"param\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. '<br/><em>Param </em><strong>' .. v.parsed.name .. '</strong>: ' .. v.parsed.text .. ''\r\n                    end\r\n                end\r\n\r\n            --[[\r\n            Block comments are parsed different way. There is emphasized block name before the description.\r\n            It's inserted as a new row into doc_blocks table.\r\n            --]]\r\n            elseif v.key == \"COMMENT\" and v.parsed.style == \"custom\" then\r\n                if v.parsed.type == \"startblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"<strong>\"..v.parsed.block..\"</strong> block<br/>\"..v.parsed.text,\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                elseif v.parsed.type == \"endblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"end of <strong>\"..(v.parsed.block or \"\")..\"</strong> block\",\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                    --_ After the end of block, an extra line needs to be inserted in order to keep the output properly aligned.\r\n                    table.insert(doc_blocks, { doc ={}, code = {} })\r\n                end\r\n            --v `filter comments`\r\n\r\n            --[[\r\n            If current node is not the AST's leaf, we check it for being a function call or definition. Then we recurse into this subtree.\r\n            --]]\r\n            elseif type(v.data) == \"table\" and #v.data > 0 then\r\n                if doc_blocks[#doc_blocks].doc.type == \"api\" then table.insert(doc_blocks, { doc = {}, code = {} }) end\r\n                --_ In case is's function definition with docstring, the new line is inserted. In the code part, a cross-reference anchor is inserted and the docstring is remembered.\r\n                if (v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\") and v.docstring then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                    last_docstring = v.docstring\r\n                    --_ If it's a function without docstring, only a cross-reference anchor has to be inserted.\r\n                elseif v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\" then\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                --_ When a function call is found, we remember that it is the last (most recent) found statement.\r\n                elseif v['key'] == \"FunctionCall\" then\r\n                    last_stat = \"FunctionCall\"\r\n                end\r\n                --_ When any statement is found, we forget about the previous one.\r\n                if v['key'] == \"Stat\" then last_stat = nil end\r\n                extractCodeNodes(v)\r\n            else\r\n                --_ Finally, if current node is a leaf and it's name of function being called, the name is wrapped into a cross-reference link.\r\n                if v['key'] == \"ID\" and last_stat == \"FunctionCall\" and functions[v.str] then\r\n                    table.insert(doc_blocks[#doc_blocks].code,'<a href=\"../'.. luadoc.file_link(functions[v.str].path,filename) ..'#'.. v['str'] ..'Xref\" title=\"'.. (functions[v.str].docstring or \"\") ..'\">')\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                    table.insert(doc_blocks[#doc_blocks].code, '</a>')\r\n                    last_stat = nil\r\n                --_ Otherwise, if it's any other leaf in AST, its text is just appended to current row's code part.\r\n                else\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "for i,v in ipairs(ast.data) do\r\n            --^ `filter comments` If child (node) is comment, we process it based on its type.\r\n\r\n            if v.key == \"COMMENT\" and v.parsed.style == \"literate\" then\r\n                --[[\r\n                If we haven't found a docstring we just add a new row into doc_block table,\r\n                so the comment that we have just found could be aligned with the code it belongs to.\r\n                --]]\r\n                if last_docstring ~= v.parsed.text then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                end\r\n                --_ LP and LP - Markdown comments are added into current row's doc part.\r\n                if v.parsed.type == \"lp\" or v.parsed.type == \"markdown\" then\r\n                    doc_blocks[#doc_blocks].doc = { str = v.parsed.text, type = v.parsed.type }\r\n                end\r\n\r\n            elseif v.key == \"COMMENT\" and v.parsed.style == \"luadoc\" then\r\n                if v.parsed.type == \"descr\" then\r\n                    if v.parsed.text == \"\" and doc_blocks[#doc_blocks].doc.type ~= \"api\" then\r\n                        table.insert(doc_blocks,\r\n                            {\r\n                                doc = { str = \"\", type = \"api\" },\r\n                                code = {}\r\n                            })\r\n                    else\r\n                        if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. v.parsed.text\r\n                        end\r\n                    end\r\n                elseif v.parsed.type == \"name\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = '<em>Function</em> <strong>'.. v.parsed.name ..'</strong><br/>' .. doc_blocks[#doc_blocks].doc.str\r\n                    end\r\n                elseif v.parsed.type == \"param\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. '<br/><em>Param </em><strong>' .. v.parsed.name .. '</strong>: ' .. v.parsed.text .. ''\r\n                    end\r\n                end\r\n\r\n            --[[\r\n            Block comments are parsed different way. There is emphasized block name before the description.\r\n            It's inserted as a new row into doc_blocks table.\r\n            --]]\r\n            elseif v.key == \"COMMENT\" and v.parsed.style == \"custom\" then\r\n                if v.parsed.type == \"startblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"<strong>\"..v.parsed.block..\"</strong> block<br/>\"..v.parsed.text,\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                elseif v.parsed.type == \"endblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"end of <strong>\"..(v.parsed.block or \"\")..\"</strong> block\",\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                    --_ After the end of block, an extra line needs to be inserted in order to keep the output properly aligned.\r\n                    table.insert(doc_blocks, { doc ={}, code = {} })\r\n                end\r\n            --v `filter comments`\r\n\r\n            --[[\r\n            If current node is not the AST's leaf, we check it for being a function call or definition. Then we recurse into this subtree.\r\n            --]]\r\n            elseif type(v.data) == \"table\" and #v.data > 0 then\r\n                if doc_blocks[#doc_blocks].doc.type == \"api\" then table.insert(doc_blocks, { doc = {}, code = {} }) end\r\n                --_ In case is's function definition with docstring, the new line is inserted. In the code part, a cross-reference anchor is inserted and the docstring is remembered.\r\n                if (v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\") and v.docstring then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                    last_docstring = v.docstring\r\n                    --_ If it's a function without docstring, only a cross-reference anchor has to be inserted.\r\n                elseif v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\" then\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                --_ When a function call is found, we remember that it is the last (most recent) found statement.\r\n                elseif v['key'] == \"FunctionCall\" then\r\n                    last_stat = \"FunctionCall\"\r\n                end\r\n                --_ When any statement is found, we forget about the previous one.\r\n                if v['key'] == \"Stat\" then last_stat = nil end\r\n                extractCodeNodes(v)\r\n            else\r\n                --_ Finally, if current node is a leaf and it's name of function being called, the name is wrapped into a cross-reference link.\r\n                if v['key'] == \"ID\" and last_stat == \"FunctionCall\" and functions[v.str] then\r\n                    table.insert(doc_blocks[#doc_blocks].code,'<a href=\"../'.. luadoc.file_link(functions[v.str].path,filename) ..'#'.. v['str'] ..'Xref\" title=\"'.. (functions[v.str].docstring or \"\") ..'\">')\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                    table.insert(doc_blocks[#doc_blocks].code, '</a>')\r\n                    last_stat = nil\r\n                --_ Otherwise, if it's any other leaf in AST, its text is just appended to current row's code part.\r\n                else\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                end\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "if v.key == \"COMMENT\" and v.parsed.style == \"literate\" then\r\n                --[[\r\n                If we haven't found a docstring we just add a new row into doc_block table,\r\n                so the comment that we have just found could be aligned with the code it belongs to.\r\n                --]]\r\n                if last_docstring ~= v.parsed.text then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                end\r\n                --_ LP and LP - Markdown comments are added into current row's doc part.\r\n                if v.parsed.type == \"lp\" or v.parsed.type == \"markdown\" then\r\n                    doc_blocks[#doc_blocks].doc = { str = v.parsed.text, type = v.parsed.type }\r\n                end\r\n\r\n            elseif v.key == \"COMMENT\" and v.parsed.style == \"luadoc\" then\r\n                if v.parsed.type == \"descr\" then\r\n                    if v.parsed.text == \"\" and doc_blocks[#doc_blocks].doc.type ~= \"api\" then\r\n                        table.insert(doc_blocks,\r\n                            {\r\n                                doc = { str = \"\", type = \"api\" },\r\n                                code = {}\r\n                            })\r\n                    else\r\n                        if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. v.parsed.text\r\n                        end\r\n                    end\r\n                elseif v.parsed.type == \"name\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = '<em>Function</em> <strong>'.. v.parsed.name ..'</strong><br/>' .. doc_blocks[#doc_blocks].doc.str\r\n                    end\r\n                elseif v.parsed.type == \"param\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. '<br/><em>Param </em><strong>' .. v.parsed.name .. '</strong>: ' .. v.parsed.text .. ''\r\n                    end\r\n                end\r\n\r\n            --[[\r\n            Block comments are parsed different way. There is emphasized block name before the description.\r\n            It's inserted as a new row into doc_blocks table.\r\n            --]]\r\n            elseif v.key == \"COMMENT\" and v.parsed.style == \"custom\" then\r\n                if v.parsed.type == \"startblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"<strong>\"..v.parsed.block..\"</strong> block<br/>\"..v.parsed.text,\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                elseif v.parsed.type == \"endblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"end of <strong>\"..(v.parsed.block or \"\")..\"</strong> block\",\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                    --_ After the end of block, an extra line needs to be inserted in order to keep the output properly aligned.\r\n                    table.insert(doc_blocks, { doc ={}, code = {} })\r\n                end\r\n            --v `filter comments`\r\n\r\n            --[[\r\n            If current node is not the AST's leaf, we check it for being a function call or definition. Then we recurse into this subtree.\r\n            --]]\r\n            elseif type(v.data) == \"table\" and #v.data > 0 then\r\n                if doc_blocks[#doc_blocks].doc.type == \"api\" then table.insert(doc_blocks, { doc = {}, code = {} }) end\r\n                --_ In case is's function definition with docstring, the new line is inserted. In the code part, a cross-reference anchor is inserted and the docstring is remembered.\r\n                if (v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\") and v.docstring then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                    last_docstring = v.docstring\r\n                    --_ If it's a function without docstring, only a cross-reference anchor has to be inserted.\r\n                elseif v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\" then\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                --_ When a function call is found, we remember that it is the last (most recent) found statement.\r\n                elseif v['key'] == \"FunctionCall\" then\r\n                    last_stat = \"FunctionCall\"\r\n                end\r\n                --_ When any statement is found, we forget about the previous one.\r\n                if v['key'] == \"Stat\" then last_stat = nil end\r\n                extractCodeNodes(v)\r\n            else\r\n                --_ Finally, if current node is a leaf and it's name of function being called, the name is wrapped into a cross-reference link.\r\n                if v['key'] == \"ID\" and last_stat == \"FunctionCall\" and functions[v.str] then\r\n                    table.insert(doc_blocks[#doc_blocks].code,'<a href=\"../'.. luadoc.file_link(functions[v.str].path,filename) ..'#'.. v['str'] ..'Xref\" title=\"'.. (functions[v.str].docstring or \"\") ..'\">')\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                    table.insert(doc_blocks[#doc_blocks].code, '</a>')\r\n                    last_stat = nil\r\n                --_ Otherwise, if it's any other leaf in AST, its text is just appended to current row's code part.\r\n                else\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "if last_docstring ~= v.parsed.text then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "table.insert(doc_blocks, { doc = \"\", code = {}})",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "if v.parsed.type == \"lp\" or v.parsed.type == \"markdown\" then\r\n                    doc_blocks[#doc_blocks].doc = { str = v.parsed.text, type = v.parsed.type }\r\n                end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "doc_blocks[#doc_blocks].doc = { str = v.parsed.text, type = v.parsed.type }",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if v.parsed.type == \"descr\" then\r\n                    if v.parsed.text == \"\" and doc_blocks[#doc_blocks].doc.type ~= \"api\" then\r\n                        table.insert(doc_blocks,\r\n                            {\r\n                                doc = { str = \"\", type = \"api\" },\r\n                                code = {}\r\n                            })\r\n                    else\r\n                        if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. v.parsed.text\r\n                        end\r\n                    end\r\n                elseif v.parsed.type == \"name\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = '<em>Function</em> <strong>'.. v.parsed.name ..'</strong><br/>' .. doc_blocks[#doc_blocks].doc.str\r\n                    end\r\n                elseif v.parsed.type == \"param\" then\r\n                    if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. '<br/><em>Param </em><strong>' .. v.parsed.name .. '</strong>: ' .. v.parsed.text .. ''\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if v.parsed.text == \"\" and doc_blocks[#doc_blocks].doc.type ~= \"api\" then\r\n                        table.insert(doc_blocks,\r\n                            {\r\n                                doc = { str = \"\", type = \"api\" },\r\n                                code = {}\r\n                            })\r\n                    else\r\n                        if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. v.parsed.text\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "table.insert(doc_blocks,\r\n                            {\r\n                                doc = { str = \"\", type = \"api\" },\r\n                                code = {}\r\n                            })",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. v.parsed.text\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. v.parsed.text",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = '<em>Function</em> <strong>'.. v.parsed.name ..'</strong><br/>' .. doc_blocks[#doc_blocks].doc.str\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "doc_blocks[#doc_blocks].doc.str = '<em>Function</em> <strong>'.. v.parsed.name ..'</strong><br/>' .. doc_blocks[#doc_blocks].doc.str",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if doc_blocks[#doc_blocks].doc.type == \"api\" then\r\n                            doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. '<br/><em>Param </em><strong>' .. v.parsed.name .. '</strong>: ' .. v.parsed.text .. ''\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "doc_blocks[#doc_blocks].doc.str = doc_blocks[#doc_blocks].doc.str .. '<br/><em>Param </em><strong>' .. v.parsed.name .. '</strong>: ' .. v.parsed.text .. ''",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if v.parsed.type == \"startblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"<strong>\"..v.parsed.block..\"</strong> block<br/>\"..v.parsed.text,\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                elseif v.parsed.type == \"endblock\" then\r\n                    table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"end of <strong>\"..(v.parsed.block or \"\")..\"</strong> block\",\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })\r\n                    --_ After the end of block, an extra line needs to be inserted in order to keep the output properly aligned.\r\n                    table.insert(doc_blocks, { doc ={}, code = {} })\r\n                end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"<strong>\"..v.parsed.block..\"</strong> block<br/>\"..v.parsed.text,\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "table.insert(doc_blocks,\r\n                        {\r\n                            doc =\r\n                                {\r\n                                    str = \"end of <strong>\"..(v.parsed.block or \"\")..\"</strong> block\",\r\n                                    type = v.parsed.type\r\n                                },\r\n                            code = {}\r\n                        })",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "table.insert(doc_blocks, { doc ={}, code = {} })",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "if doc_blocks[#doc_blocks].doc.type == \"api\" then table.insert(doc_blocks, { doc = {}, code = {} }) end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "table.insert(doc_blocks, { doc = {}, code = {} })",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "if (v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\") and v.docstring then\r\n                    table.insert(doc_blocks, { doc = \"\", code = {}})\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                    last_docstring = v.docstring\r\n                    --_ If it's a function without docstring, only a cross-reference anchor has to be inserted.\r\n                elseif v['key'] == \"GlobalFunction\" or v['key'] == \"LocalFunction\" then\r\n                    table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')\r\n                --_ When a function call is found, we remember that it is the last (most recent) found statement.\r\n                elseif v['key'] == \"FunctionCall\" then\r\n                    last_stat = \"FunctionCall\"\r\n                end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "table.insert(doc_blocks[#doc_blocks].code, '<a name=\"'..v['name']..'Xref\"></a>')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "last_docstring = v.docstring",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "last_stat = \"FunctionCall\"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if v['key'] == \"Stat\" then last_stat = nil end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "last_stat = nil",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "extractCodeNodes(v)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if v['key'] == \"ID\" and last_stat == \"FunctionCall\" and functions[v.str] then\r\n                    table.insert(doc_blocks[#doc_blocks].code,'<a href=\"../'.. luadoc.file_link(functions[v.str].path,filename) ..'#'.. v['str'] ..'Xref\" title=\"'.. (functions[v.str].docstring or \"\") ..'\">')\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                    table.insert(doc_blocks[#doc_blocks].code, '</a>')\r\n                    last_stat = nil\r\n                --_ Otherwise, if it's any other leaf in AST, its text is just appended to current row's code part.\r\n                else\r\n                    table.insert(doc_blocks[#doc_blocks].code, v)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "table.insert(doc_blocks[#doc_blocks].code,'<a href=\"../'.. luadoc.file_link(functions[v.str].path,filename) ..'#'.. v['str'] ..'Xref\" title=\"'.. (functions[v.str].docstring or \"\") ..'\">')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "table.insert(doc_blocks[#doc_blocks].code, v)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "table.insert(doc_blocks[#doc_blocks].code, '</a>')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function blockCommentsClass()\r\n    --[[\r\n    Function prepares CSS class string for block comments, deliberating blocks nesting.\r\n    --]]\r\n    if #block_comments_stack == 0 then\r\n        return nil\r\n    end\r\n    --^ `chaining class` This creates class string for HTML begining with \"block_comment\" and adds block# for each block comment level above current.\r\n    local class = \"block_comment\"\r\n    for _,v in ipairs(block_comments_stack) do\r\n        class = class .. \" block\"..tostring(v)\r\n    end\r\n    --v `chaining class`\r\n    return class\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "if #block_comments_stack == 0 then\r\n        return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 41,
    "text": "local class = \"block_comment\"",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "for _,v in ipairs(block_comments_stack) do\r\n        class = class .. \" block\"..tostring(v)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 43,
    "text": "class = class .. \" block\"..tostring(v)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function encapsulateNode(node)\r\n    --[[\r\n    Wraps node recursively into its ancestors in the same manner as in the AST.\r\n    --]]\r\n\r\n    --_ Duplicate current node, ignoring most of its attributes.\r\n    local t = { key = node.key, text = node.text, data = {} }\r\n\r\n    if node.varid then\r\n        t.varid = node.varid\r\n    end\r\n\r\n    --_ The root of the AST returns self.\r\n    if node.parent == nil then\r\n        return t, t\r\n    end\r\n\r\n    --_ All children recurse into their parent and add self as their parent's child.\r\n    local new, p = encapsulateNode(node.parent)\r\n    p.data[1] = t\r\n\r\n    --_ Function returns reference to the topmost node (root) and to current node.\r\n    return new, t\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local t = { key = node.key, text = node.text, data = {} }",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if node.varid then\r\n        t.varid = node.varid\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "t.varid = node.varid",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if node.parent == nil then\r\n        return t, t\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local new, p = encapsulateNode(node.parent)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "p.data[1] = t",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function ASTtoHTML(ast)\r\n\r\n    --[[\r\n    Process table with split code and documentation and outputs final HTML code.\r\n    --]]\r\n\r\n    local html\r\n    local class\r\n    local fullwidth = true\r\n    extractCodeNodes(ast)\r\n    html = \"<table>\"\r\n    for _,v in ipairs(doc_blocks) do\r\n        --_ Special processing for start of block comments and Markdown formatted comments.\r\n        if v.doc.type == \"startblock\" then\r\n            block_comments_count = block_comments_count + 1\r\n            table.insert(block_comments_stack, block_comments_count)\r\n            html = html .. '<tr class=\"folder '..blockCommentsClass()..'\"><td class=\"docs\">~v~ hidden block ~v~</td><td class=\"code\"></td></tr>'\r\n        elseif v.doc.type == \"markdown\" then\r\n            v.doc.str = markdown(v.doc.str)\r\n        end\r\n\r\n        util.trimCodeBlock(v.code)\r\n        if #v.code == 0 and fullwidth then\r\n            if v.doc.type == \"api\" then\r\n                html = html .. '<tr class=\"api\"><td class=\"docs\" colspan=\"2\">'\r\n            else\r\n                html = html .. '<tr><td class=\"docs\" colspan=\"2\">'\r\n            end\r\n            html = html .. (v.doc.str or \"\")\r\n            html = html .. \"</td></tr>\"\r\n        else\r\n            fullwidth = false\r\n            class = blockCommentsClass()\r\n            --_ If class variable is not empty (we are inside of block comment), put it into table row's class attribute.\r\n            if class then\r\n                html = html .. '<tr class=\"'.. class ..'\"><td class=\"docs\">'\r\n            elseif v.doc.type == \"api\" then\r\n                html = html .. '<tr class=\"api\"><td class=\"docs\">'\r\n            else\r\n                html = html .. '<tr><td class=\"docs\">'\r\n            end\r\n            html = html .. (v.doc.str or \"\")\r\n            html = html .. '</td><td class=\"code\">'\r\n            html = html .. \"<pre class=\\\"highlighted_code\\\">\"\r\n\r\n            for _,v in ipairs(v.code) do\r\n                if type(v) == \"table\" then\r\n                    -- v = encapsulateNode(v)\r\n                    --[[\r\n                    Use highlighter module to convert code node from metrics AST\r\n                    to highlighter compatible node, highlight and print it out.\r\n                    --]]\r\n                    local tree = ast_helper.metrics_to_highlighter(v)\r\n                    local text, tree = highlighter.highlight_text(\"\",tree)\r\n                    html = html .. highlighter.assemble_table(tree)\r\n                else\r\n                    html = html .. v\r\n                end\r\n            end\r\n            html = html .. \"</pre>\"\r\n            html = html .. \"</td></tr>\"\r\n        end\r\n\r\n        --_ At the end of block comment, pop value from stack, which is used for marking nested block comments.\r\n        if v.doc.type == \"endblock\" then\r\n            table.remove(block_comments_stack)\r\n        end\r\n    end\r\n    html = html .. \"</table>\"\r\n\r\n    return html\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local html",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local class",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local fullwidth = true",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "extractCodeNodes(ast)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "html = \"<table>\"",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "for _,v in ipairs(doc_blocks) do\r\n        --_ Special processing for start of block comments and Markdown formatted comments.\r\n        if v.doc.type == \"startblock\" then\r\n            block_comments_count = block_comments_count + 1\r\n            table.insert(block_comments_stack, block_comments_count)\r\n            html = html .. '<tr class=\"folder '..blockCommentsClass()..'\"><td class=\"docs\">~v~ hidden block ~v~</td><td class=\"code\"></td></tr>'\r\n        elseif v.doc.type == \"markdown\" then\r\n            v.doc.str = markdown(v.doc.str)\r\n        end\r\n\r\n        util.trimCodeBlock(v.code)\r\n        if #v.code == 0 and fullwidth then\r\n            if v.doc.type == \"api\" then\r\n                html = html .. '<tr class=\"api\"><td class=\"docs\" colspan=\"2\">'\r\n            else\r\n                html = html .. '<tr><td class=\"docs\" colspan=\"2\">'\r\n            end\r\n            html = html .. (v.doc.str or \"\")\r\n            html = html .. \"</td></tr>\"\r\n        else\r\n            fullwidth = false\r\n            class = blockCommentsClass()\r\n            --_ If class variable is not empty (we are inside of block comment), put it into table row's class attribute.\r\n            if class then\r\n                html = html .. '<tr class=\"'.. class ..'\"><td class=\"docs\">'\r\n            elseif v.doc.type == \"api\" then\r\n                html = html .. '<tr class=\"api\"><td class=\"docs\">'\r\n            else\r\n                html = html .. '<tr><td class=\"docs\">'\r\n            end\r\n            html = html .. (v.doc.str or \"\")\r\n            html = html .. '</td><td class=\"code\">'\r\n            html = html .. \"<pre class=\\\"highlighted_code\\\">\"\r\n\r\n            for _,v in ipairs(v.code) do\r\n                if type(v) == \"table\" then\r\n                    -- v = encapsulateNode(v)\r\n                    --[[\r\n                    Use highlighter module to convert code node from metrics AST\r\n                    to highlighter compatible node, highlight and print it out.\r\n                    --]]\r\n                    local tree = ast_helper.metrics_to_highlighter(v)\r\n                    local text, tree = highlighter.highlight_text(\"\",tree)\r\n                    html = html .. highlighter.assemble_table(tree)\r\n                else\r\n                    html = html .. v\r\n                end\r\n            end\r\n            html = html .. \"</pre>\"\r\n            html = html .. \"</td></tr>\"\r\n        end\r\n\r\n        --_ At the end of block comment, pop value from stack, which is used for marking nested block comments.\r\n        if v.doc.type == \"endblock\" then\r\n            table.remove(block_comments_stack)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "if v.doc.type == \"startblock\" then\r\n            block_comments_count = block_comments_count + 1\r\n            table.insert(block_comments_stack, block_comments_count)\r\n            html = html .. '<tr class=\"folder '..blockCommentsClass()..'\"><td class=\"docs\">~v~ hidden block ~v~</td><td class=\"code\"></td></tr>'\r\n        elseif v.doc.type == \"markdown\" then\r\n            v.doc.str = markdown(v.doc.str)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "block_comments_count = block_comments_count + 1",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "table.insert(block_comments_stack, block_comments_count)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "html = html .. '<tr class=\"folder '..blockCommentsClass()..'\"><td class=\"docs\">~v~ hidden block ~v~</td><td class=\"code\"></td></tr>'",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "v.doc.str = markdown(v.doc.str)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "util.trimCodeBlock(v.code)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if #v.code == 0 and fullwidth then\r\n            if v.doc.type == \"api\" then\r\n                html = html .. '<tr class=\"api\"><td class=\"docs\" colspan=\"2\">'\r\n            else\r\n                html = html .. '<tr><td class=\"docs\" colspan=\"2\">'\r\n            end\r\n            html = html .. (v.doc.str or \"\")\r\n            html = html .. \"</td></tr>\"\r\n        else\r\n            fullwidth = false\r\n            class = blockCommentsClass()\r\n            --_ If class variable is not empty (we are inside of block comment), put it into table row's class attribute.\r\n            if class then\r\n                html = html .. '<tr class=\"'.. class ..'\"><td class=\"docs\">'\r\n            elseif v.doc.type == \"api\" then\r\n                html = html .. '<tr class=\"api\"><td class=\"docs\">'\r\n            else\r\n                html = html .. '<tr><td class=\"docs\">'\r\n            end\r\n            html = html .. (v.doc.str or \"\")\r\n            html = html .. '</td><td class=\"code\">'\r\n            html = html .. \"<pre class=\\\"highlighted_code\\\">\"\r\n\r\n            for _,v in ipairs(v.code) do\r\n                if type(v) == \"table\" then\r\n                    -- v = encapsulateNode(v)\r\n                    --[[\r\n                    Use highlighter module to convert code node from metrics AST\r\n                    to highlighter compatible node, highlight and print it out.\r\n                    --]]\r\n                    local tree = ast_helper.metrics_to_highlighter(v)\r\n                    local text, tree = highlighter.highlight_text(\"\",tree)\r\n                    html = html .. highlighter.assemble_table(tree)\r\n                else\r\n                    html = html .. v\r\n                end\r\n            end\r\n            html = html .. \"</pre>\"\r\n            html = html .. \"</td></tr>\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "if v.doc.type == \"api\" then\r\n                html = html .. '<tr class=\"api\"><td class=\"docs\" colspan=\"2\">'\r\n            else\r\n                html = html .. '<tr><td class=\"docs\" colspan=\"2\">'\r\n            end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "html = html .. '<tr class=\"api\"><td class=\"docs\" colspan=\"2\">'",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "html = html .. '<tr><td class=\"docs\" colspan=\"2\">'",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "html = html .. (v.doc.str or \"\")",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "html = html .. \"</td></tr>\"",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "fullwidth = false",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "class = blockCommentsClass()",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if class then\r\n                html = html .. '<tr class=\"'.. class ..'\"><td class=\"docs\">'\r\n            elseif v.doc.type == \"api\" then\r\n                html = html .. '<tr class=\"api\"><td class=\"docs\">'\r\n            else\r\n                html = html .. '<tr><td class=\"docs\">'\r\n            end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "html = html .. '<tr class=\"'.. class ..'\"><td class=\"docs\">'",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "html = html .. '<tr class=\"api\"><td class=\"docs\">'",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "html = html .. '<tr><td class=\"docs\">'",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "html = html .. '</td><td class=\"code\">'",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "html = html .. \"<pre class=\\\"highlighted_code\\\">\"",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "for _,v in ipairs(v.code) do\r\n                if type(v) == \"table\" then\r\n                    -- v = encapsulateNode(v)\r\n                    --[[\r\n                    Use highlighter module to convert code node from metrics AST\r\n                    to highlighter compatible node, highlight and print it out.\r\n                    --]]\r\n                    local tree = ast_helper.metrics_to_highlighter(v)\r\n                    local text, tree = highlighter.highlight_text(\"\",tree)\r\n                    html = html .. highlighter.assemble_table(tree)\r\n                else\r\n                    html = html .. v\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 81,
    "text": "if type(v) == \"table\" then\r\n                    -- v = encapsulateNode(v)\r\n                    --[[\r\n                    Use highlighter module to convert code node from metrics AST\r\n                    to highlighter compatible node, highlight and print it out.\r\n                    --]]\r\n                    local tree = ast_helper.metrics_to_highlighter(v)\r\n                    local text, tree = highlighter.highlight_text(\"\",tree)\r\n                    html = html .. highlighter.assemble_table(tree)\r\n                else\r\n                    html = html .. v\r\n                end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "local tree = ast_helper.metrics_to_highlighter(v)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local text, tree = highlighter.highlight_text(\"\",tree)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "html = html .. highlighter.assemble_table(tree)",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "html = html .. v",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "html = html .. \"</pre>\"",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if v.doc.type == \"endblock\" then\r\n            table.remove(block_comments_stack)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "table.remove(block_comments_stack)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "html = html .. \"</table>\"",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function literate(ast)\r\n    doc_blocks = {}\r\n    --_ Reset doc_blocks table for each source file\r\n    table.insert(doc_blocks, { doc = \"\", code = {} })\r\n    return ASTtoHTML(ast), doc_blocks\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "doc_blocks = {}",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "table.insert(doc_blocks, { doc = \"\", code = {} })",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "",
    "type": "function container"
  }, {
    "id": 96,
    "text": "function trimCodeBlock(block)\r\n\r\n    --[[\r\n    This function trims code block by removing newlines from the begin and the end of block.\r\n    --]]\r\n\r\n    for i,v in ipairs(block) do\r\n        if v.key == \"NEWLINE\" then\r\n            table.remove(block,i)\r\n        else\r\n            break\r\n        end\r\n    end\r\n\r\n    for i = #block, 1, -1 do\r\n        if block[i].key == \"SPACE\" or block[i].key == \"NEWLINE\" then\r\n            table.remove(block,i)\r\n        else\r\n            break\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "assemble_table",
    "type": "global function"
  }, {
    "id": 98,
    "text": "highlight_text",
    "type": "global function"
  }, {
    "id": 99,
    "text": "file_link",
    "type": "global function"
  }, {
    "id": 100,
    "text": "metrics_to_highlighter",
    "type": "global function"
  }, {
    "id": 101,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 102,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 103,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 104,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 105,
    "text": "module",
    "type": "global function"
  }, {
    "id": 106,
    "text": "type",
    "type": "global function"
  }, {
    "id": 107,
    "text": "require",
    "type": "global function"
  }, {
    "id": 108,
    "text": "markdown",
    "type": "global function"
  }, {
    "id": 109,
    "text": "",
    "type": "variable container"
  }, {
    "id": 110,
    "text": "",
    "type": "require container"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "number"
  }, {
    "id": 119,
    "text": "",
    "type": "global variable"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "highlighter",
    "type": "module"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "ast_helper",
    "type": "module"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "html",
    "type": "module"
  }, {
    "id": 129,
    "text": "",
    "type": "global variable"
  }, {
    "id": 130,
    "text": "markdown",
    "type": "module"
  } ]
}