{
  "_filename": "multitest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cd/doc/html/examples/multitest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "calls",
    "to": 30
  }, {
    "from": 29,
    "label": "calls",
    "to": 34
  }, {
    "from": 29,
    "label": "calls",
    "to": 34
  }, {
    "from": 29,
    "label": "calls",
    "to": 34
  }, {
    "from": 21,
    "label": "calls",
    "to": 34
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 2
  }, {
    "from": 29,
    "label": "calls",
    "to": 2
  }, {
    "from": 29,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 29,
    "label": "calls",
    "to": 32
  }, {
    "from": 29,
    "label": "calls",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 29,
    "label": "declares",
    "to": 2
  }, {
    "from": 29,
    "label": "declares",
    "to": 21
  }, {
    "from": 29,
    "label": "declares",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 37,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 37,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 37,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 37,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 37,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 38,
    "label": "initializes",
    "to": 36
  }, {
    "from": 38,
    "label": "initializes",
    "to": 36
  }, {
    "from": 38,
    "label": "initializes",
    "to": 36
  }, {
    "from": 38,
    "label": "initializes",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "multitest",
    "type": "module"
  }, {
    "id": 2,
    "text": "function DrawInCanvas(canvas)\r\n  -- If you want that your coordinates means the same thing independent from the driver\r\n  -- then set the Window to be the your \"world\" coordinate system\r\n  canvas:wWindow(0, 50, 0, 50)\r\n  \r\n  -- The you just have to choose how this \"world\" will be showed in the canvas by setting the Viewport\r\n  -- Since you set a square world, set a square Viewport to keep the aspect ratio\r\n  local width, height = canvas:GetSize()\r\n  local square_size = width\r\n  if (width > height) then square_size = height end\r\n  canvas:wViewport(0, square_size, 0, square_size)\r\n  \r\n  -- The file drivers will have the same size all the time, but the dialog you can change its size\r\n  -- since this is dinamically changed, the drawing will scale on screen when the dialog is resized\r\n  -- if you do not want that, you can set wWindow and wViewport in another place in the code\r\n\r\n  canvas:Foreground(cd.BLACK)\r\n  canvas:TextAlignment(cd.CENTER)\r\n  canvas:TextOrientation(0)\r\n  \r\n  -- size in mm actually do not depend on the transformation\r\n  canvas:wFont('Courier', cd.BOLD, 3) -- size in mm\r\n  canvas:wLineWidth(0.25) -- size in mm\r\n  \r\n  canvas:wRect(10,10 + 8,10 + 1,10 + 7)\r\n  canvas:wText(10 + 2,10 + 2,'S')\r\n  canvas:wText(10 + 2,10 + 5,'R')\r\n  canvas:wText(10 + 6,10 + 5,'Q')\r\n  canvas:wArc(10 + 9,10 + 2,2,2,0,360)\r\n  canvas:wSector(20,20,2,2,0,360)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "canvas:wWindow(0, 50, 0, 50)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local width, height = canvas:GetSize()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local square_size = width",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if (width > height) then square_size = height end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "square_size = height",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "canvas:wViewport(0, square_size, 0, square_size)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "canvas:Foreground(cd.BLACK)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "canvas:TextAlignment(cd.CENTER)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "canvas:TextOrientation(0)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "canvas:wFont('Courier', cd.BOLD, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "canvas:wLineWidth(0.25)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "canvas:wRect(10,10 + 8,10 + 1,10 + 7)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "canvas:wText(10 + 2,10 + 2,'S')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "canvas:wText(10 + 2,10 + 5,'R')",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "canvas:wText(10 + 6,10 + 5,'Q')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "canvas:wArc(10 + 9,10 + 2,2,2,0,360)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "canvas:wSector(20,20,2,2,0,360)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function iupCanvas:map_cb()\r\n  canvas = cd.CreateCanvas(cd.IUP,self) -- store the CD canvas in a IUP attribute\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "canvas = cd.CreateCanvas(cd.IUP,self)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function iupCanvas:action()\r\n  canvas:Activate()\r\n  canvas:Clear()\r\n  DrawInCanvas(canvas)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "canvas:Activate()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "canvas:Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "DrawInCanvas(canvas)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "",
    "type": "function container"
  }, {
    "id": 30,
    "text": "canvas",
    "type": "global function"
  }, {
    "id": 31,
    "text": "KillCanvas",
    "type": "global function"
  }, {
    "id": 32,
    "text": "dialog",
    "type": "global function"
  }, {
    "id": 33,
    "text": "require",
    "type": "global function"
  }, {
    "id": 34,
    "text": "CreateCanvas",
    "type": "global function"
  }, {
    "id": 35,
    "text": "MainLoop",
    "type": "global function"
  }, {
    "id": 36,
    "text": "",
    "type": "global variable"
  }, {
    "id": 37,
    "text": "",
    "type": "variable container"
  }, {
    "id": 38,
    "text": "",
    "type": "require container"
  }, {
    "id": 39,
    "text": "",
    "type": "global variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  }, {
    "id": 41,
    "text": "",
    "type": "global variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "global variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "global variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "global variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  } ]
}