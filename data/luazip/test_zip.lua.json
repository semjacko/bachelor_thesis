{
  "_filename": "test_zip.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luazip/tests/test_zip.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 23,
    "label": "has",
    "to": 34
  }, {
    "from": 23,
    "label": "has",
    "to": 35
  }, {
    "from": 23,
    "label": "has",
    "to": 36
  }, {
    "from": 23,
    "label": "has",
    "to": 37
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 23,
    "label": "calls",
    "to": 47
  }, {
    "from": 23,
    "label": "calls",
    "to": 47
  }, {
    "from": 23,
    "label": "calls",
    "to": 47
  }, {
    "from": 23,
    "label": "calls",
    "to": 47
  }, {
    "from": 23,
    "label": "calls",
    "to": 47
  }, {
    "from": 23,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 39,
    "label": "calls",
    "to": 45
  }, {
    "from": 39,
    "label": "calls",
    "to": 45
  }, {
    "from": 23,
    "label": "calls",
    "to": 40
  }, {
    "from": 23,
    "label": "calls",
    "to": 40
  }, {
    "from": 23,
    "label": "calls",
    "to": 40
  }, {
    "from": 23,
    "label": "calls",
    "to": 40
  }, {
    "from": 23,
    "label": "calls",
    "to": 40
  }, {
    "from": 23,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 23
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 39,
    "label": "calls",
    "to": 46
  }, {
    "from": 39,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 23,
    "label": "calls",
    "to": 44
  }, {
    "from": 23,
    "label": "calls",
    "to": 44
  }, {
    "from": 23,
    "label": "calls",
    "to": 44
  }, {
    "from": 39,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 39,
    "label": "declares",
    "to": 2
  }, {
    "from": 39,
    "label": "declares",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 49,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "requires",
    "to": 51
  }, {
    "from": 49,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "requires",
    "to": 52
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_zip",
    "type": "module"
  }, {
    "id": 2,
    "text": "function test_open ()\r\n\tlocal zfile, err = zip.open('luazip.zip')\r\n\t\r\n\tassert(zfile, err)\r\n\t\r\n\tprint(\"File list begin\")\r\n\tfor file in zfile:files() do\r\n\t\tprint(file.filename)\r\n\tend\r\n\tprint(\"File list ended OK!\")\r\n\tprint()\r\n\t\r\n\tprint(\"Testing zfile:open\")\r\n\tlocal f1, err = zfile:open('README')\r\n\tassert(f1, err)\r\n\t\r\n\tlocal f2, err = zfile:open('luazip.h')\r\n\tassert(f2, err)\r\n\tprint(\"zfile:open OK!\")\r\n\tprint()\r\n\t\r\n\tprint(\"Testing reading by number\")\r\n\tlocal c = f1:read(1)\r\n\twhile c ~= nil do\r\n\t\tio.write(c)\r\n\t\tc = f1:read(1)\r\n\tend\r\n\r\n\tprint()\r\n\tprint(\"OK\")\r\n\tprint()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local zfile, err = zip.open('luazip.zip')",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "assert(zfile, err)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "print(\"File list begin\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "for file in zfile:files() do\r\n\t\tprint(file.filename)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "print(file.filename)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "print(\"File list ended OK!\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "print(\"Testing zfile:open\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local f1, err = zfile:open('README')",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "assert(f1, err)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local f2, err = zfile:open('luazip.h')",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "assert(f2, err)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "print(\"zfile:open OK!\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "print(\"Testing reading by number\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "local c = f1:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "while c ~= nil do\r\n\t\tio.write(c)\r\n\t\tc = f1:read(1)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 19,
    "text": "io.write(c)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "c = f1:read(1)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "print(\"OK\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function test_openfile ()\r\n\tprint(\"Testing the openfile magic\")\r\n\t\r\n\tlocal d, err = zip.openfile('a/b/c/d.txt')\r\n\tassert(d, err)\r\n\t\r\n\tlocal e, err = zip.openfile('a/b/c/e.txt')\r\n\tassert(e == nil, err)\r\n\t\r\n\tlocal d2, err = zip.openfile('a2/b2/c2/d2.txt', \"ext2\")\r\n\tassert(d2, err)\r\n\t\r\n\tlocal e2, err = zip.openfile('a2/b2/c2/e2.txt', \"ext2\")\r\n\tassert(e2 == nil, err)\r\n\t\r\n\tlocal d3, err = zip.openfile('a3/b3/c3/d3.txt', {\"ext2\", \"ext3\"})\r\n\tassert(d3, err)\r\n\t\r\n\tlocal e3, err = zip.openfile('a3/b3/c3/e3.txt', {\"ext2\", \"ext3\"})\r\n\tassert(e3 == nil, err)\r\n\t\r\n\tprint(\"Smooth magic!\")\r\n\tprint()\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "print(\"Testing the openfile magic\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local d, err = zip.openfile('a/b/c/d.txt')",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "assert(d, err)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local e, err = zip.openfile('a/b/c/e.txt')",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert(e == nil, err)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local d2, err = zip.openfile('a2/b2/c2/d2.txt', \"ext2\")",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "assert(d2, err)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "local e2, err = zip.openfile('a2/b2/c2/e2.txt', \"ext2\")",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "assert(e2 == nil, err)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local d3, err = zip.openfile('a3/b3/c3/d3.txt', {\"ext2\", \"ext3\"})",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "assert(d3, err)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "local e3, err = zip.openfile('a3/b3/c3/e3.txt', {\"ext2\", \"ext3\"})",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "assert(e3 == nil, err)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "print(\"Smooth magic!\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "",
    "type": "function container"
  }, {
    "id": 40,
    "text": "openfile",
    "type": "global function"
  }, {
    "id": 41,
    "text": "open",
    "type": "global function"
  }, {
    "id": 42,
    "text": "write",
    "type": "global function"
  }, {
    "id": 43,
    "text": "find",
    "type": "global function"
  }, {
    "id": 44,
    "text": "print",
    "type": "global function"
  }, {
    "id": 45,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 46,
    "text": "require",
    "type": "global function"
  }, {
    "id": 47,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 48,
    "text": "",
    "type": "variable container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "1",
    "type": "module"
  }, {
    "id": 52,
    "text": "(zip)",
    "type": "module"
  } ]
}