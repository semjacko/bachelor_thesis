{
  "_filename": "filedir.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/versium/lua/versium/filedir.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 15,
    "label": "has",
    "to": 26
  }, {
    "from": 15,
    "label": "has",
    "to": 27
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 9
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 9
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 30
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 20
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 25
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 30
  }, {
    "from": 59,
    "label": "has",
    "to": 36
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 59,
    "label": "has",
    "to": 67
  }, {
    "from": 59,
    "label": "has",
    "to": 68
  }, {
    "from": 59,
    "label": "has",
    "to": 69
  }, {
    "from": 59,
    "label": "has",
    "to": 70
  }, {
    "from": 59,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 59,
    "label": "has",
    "to": 73
  }, {
    "from": 59,
    "label": "has",
    "to": 74
  }, {
    "from": 59,
    "label": "has",
    "to": 9
  }, {
    "from": 59,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 30
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 9
  }, {
    "from": 76,
    "label": "has",
    "to": 65
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 9
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 15,
    "label": "calls",
    "to": 90
  }, {
    "from": 11,
    "label": "calls",
    "to": 83
  }, {
    "from": 29,
    "label": "calls",
    "to": 83
  }, {
    "from": 59,
    "label": "calls",
    "to": 83
  }, {
    "from": 59,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 29,
    "label": "calls",
    "to": 91
  }, {
    "from": 29,
    "label": "calls",
    "to": 91
  }, {
    "from": 29,
    "label": "calls",
    "to": 91
  }, {
    "from": 40,
    "label": "calls",
    "to": 91
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 76,
    "label": "calls",
    "to": 91
  }, {
    "from": 76,
    "label": "calls",
    "to": 91
  }, {
    "from": 50,
    "label": "calls",
    "to": 92
  }, {
    "from": 59,
    "label": "calls",
    "to": 92
  }, {
    "from": 59,
    "label": "calls",
    "to": 100
  }, {
    "from": 59,
    "label": "calls",
    "to": 11
  }, {
    "from": 76,
    "label": "calls",
    "to": 11
  }, {
    "from": 59,
    "label": "calls",
    "to": 15
  }, {
    "from": 76,
    "label": "calls",
    "to": 15
  }, {
    "from": 11,
    "label": "calls",
    "to": 87
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 40,
    "label": "calls",
    "to": 93
  }, {
    "from": 59,
    "label": "calls",
    "to": 85
  }, {
    "from": 59,
    "label": "calls",
    "to": 85
  }, {
    "from": 59,
    "label": "calls",
    "to": 88
  }, {
    "from": 59,
    "label": "calls",
    "to": 96
  }, {
    "from": 59,
    "label": "calls",
    "to": 96
  }, {
    "from": 59,
    "label": "calls",
    "to": 96
  }, {
    "from": 29,
    "label": "calls",
    "to": 86
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 15,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 15,
    "label": "calls",
    "to": 95
  }, {
    "from": 82,
    "label": "calls",
    "to": 101
  }, {
    "from": 82,
    "label": "calls",
    "to": 101
  }, {
    "from": 82,
    "label": "calls",
    "to": 101
  }, {
    "from": 15,
    "label": "calls",
    "to": 94
  }, {
    "from": 50,
    "label": "calls",
    "to": 94
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 82,
    "label": "declares",
    "to": 2
  }, {
    "from": 82,
    "label": "declares",
    "to": 11
  }, {
    "from": 82,
    "label": "declares",
    "to": 15
  }, {
    "from": 82,
    "label": "declares",
    "to": 29
  }, {
    "from": 82,
    "label": "declares",
    "to": 38
  }, {
    "from": 82,
    "label": "declares",
    "to": 40
  }, {
    "from": 82,
    "label": "declares",
    "to": 50
  }, {
    "from": 82,
    "label": "declares",
    "to": 59
  }, {
    "from": 82,
    "label": "declares",
    "to": 76
  }, {
    "from": 82,
    "label": "declares",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 1,
    "label": "contains",
    "to": 103
  }, {
    "from": 102,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 102,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 102,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 109,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 102,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 103,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "requires",
    "to": 117
  }, {
    "from": 103,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "requires",
    "to": 119
  }, {
    "from": 103,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "requires",
    "to": 121
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "filedir",
    "type": "module"
  }, {
    "id": 2,
    "text": "function new(params)\r\n   assert(params[1], \"the first parameter is required\")\r\n   local new_versium = {dir=params[1], node_table={}}\r\n   local new_versium = setmetatable(new_versium, FileDirVersium_mt)\r\n   for x in lfs.dir(new_versium.dir) do\r\n      if not (x==\".\" or x==\"..\") then\r\n         new_versium.node_table[util.fs_unescape_id(x)] = 1\r\n      end\r\n   end\r\n   return new_versium \r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert(params[1], \"the first parameter is required\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local new_versium = {dir=params[1], node_table={}}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local new_versium = setmetatable(new_versium, FileDirVersium_mt)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for x in lfs.dir(new_versium.dir) do\r\n      if not (x==\".\" or x==\"..\") then\r\n         new_versium.node_table[util.fs_unescape_id(x)] = 1\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "if not (x==\".\" or x==\"..\") then\r\n         new_versium.node_table[util.fs_unescape_id(x)] = 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "new_versium.node_table[util.fs_unescape_id(x)] = 1",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function get_raw_history(dir, id)\r\n   local path = dir..\"/\"..util.fs_escape_id(id)..\"/index\"\r\n   local raw_history = util.read_file_if_exists(path)\r\n   return raw_history\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local path = dir..\"/\"..util.fs_escape_id(id)..\"/index\"",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local raw_history = util.read_file_if_exists(path)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function parse_history(raw_history, date_prefix, limit)\r\n   date_prefix = date_prefix or \"\"\r\n   local preflen = date_prefix:len()\r\n   local f = loadstring(raw_history)\r\n   local all_versions = {}\r\n   local counter = 0\r\n   local environment = {\r\n      add_version = function (values)\r\n                       if not limit or counter <= limit then\r\n                          if values.timestamp:sub(1, preflen) == date_prefix then \r\n                             table.insert(all_versions, values)\r\n                             counter = counter + 1\r\n                          end\r\n                       end\r\n                    end \r\n   }\r\n   setfenv(f, environment)\r\n   f()\r\n   return all_versions\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "date_prefix = date_prefix or \"\"",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local preflen = date_prefix:len()",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local f = loadstring(raw_history)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local all_versions = {}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local counter = 0",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local environment = {\r\n      add_version = function (values)\r\n                       if not limit or counter <= limit then\r\n                          if values.timestamp:sub(1, preflen) == date_prefix then \r\n                             table.insert(all_versions, values)\r\n                             counter = counter + 1\r\n                          end\r\n                       end\r\n                    end \r\n   }",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if not limit or counter <= limit then\r\n                          if values.timestamp:sub(1, preflen) == date_prefix then \r\n                             table.insert(all_versions, values)\r\n                             counter = counter + 1\r\n                          end\r\n                       end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if values.timestamp:sub(1, preflen) == date_prefix then \r\n                             table.insert(all_versions, values)\r\n                             counter = counter + 1\r\n                          end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "table.insert(all_versions, values)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "counter = counter + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "setfenv(f, environment)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "f()",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function FileDirVersium:get_node(id, version)\r\n   assert(id)\r\n   if not self:node_exists(id) then\r\n      return nil\r\n   end\r\n   local metadata = self:get_node_info(id, version)\r\n   assert(metadata.version) -- should come from history\r\n   local path = self.dir..\"/\"..util.fs_escape_id(id)..\"/\"..metadata.version\r\n   local data = util.read_file(path, id)\r\n   assert(data)\r\n   return data\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert(id)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if not self:node_exists(id) then\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "local metadata = self:get_node_info(id, version)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "assert(metadata.version)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local path = self.dir..\"/\"..util.fs_escape_id(id)..\"/\"..metadata.version",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local data = util.read_file(path, id)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "assert(data)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function FileDirVersium:node_exists(id)\r\n   return self.node_table[id] ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function FileDirVersium:get_node_info(id, version)\r\n   assert(id)\r\n   local history\r\n   if not version then \r\n      history = self:get_node_history(id, nil, 1) or {}\r\n   else\r\n      history = self:get_node_history(id) or {}\r\n   end\r\n   if not #history==0 then return nil end\r\n\r\n   if version then\r\n      for i, commit in ipairs(history) do\r\n         if commit.version == version then\r\n            return commit\r\n         end\r\n      end\r\n   else\r\n      return history[1] -- i.e., the _latest_ version\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local history",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if not version then \r\n      history = self:get_node_history(id, nil, 1) or {}\r\n   else\r\n      history = self:get_node_history(id) or {}\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "history = self:get_node_history(id, nil, 1) or {}",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "history = self:get_node_history(id) or {}",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if not #history==0 then return nil end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "if version then\r\n      for i, commit in ipairs(history) do\r\n         if commit.version == version then\r\n            return commit\r\n         end\r\n      end\r\n   else\r\n      return history[1] -- i.e., the _latest_ version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "for i, commit in ipairs(history) do\r\n         if commit.version == version then\r\n            return commit\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if commit.version == version then\r\n            return commit\r\n         end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function FileDirVersium:get_node_ids(prefix, limit)\r\n   local ids = {}\r\n   local counter = 0\r\n   prefix = prefix or \"\"\r\n   local preflen = prefix:len()\r\n   for id, _ in pairs(self.node_table) do\r\n      if id:sub(1, preflen) == prefix then\r\n         if counter == limit then\r\n            return ids, true\r\n         else\r\n            table.insert(ids, id)\r\n            counter = counter + 1\r\n         end\r\n      end\r\n   end\r\n   return ids\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local ids = {}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "prefix = prefix or \"\"",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "local preflen = prefix:len()",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "for id, _ in pairs(self.node_table) do\r\n      if id:sub(1, preflen) == prefix then\r\n         if counter == limit then\r\n            return ids, true\r\n         else\r\n            table.insert(ids, id)\r\n            counter = counter + 1\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "if id:sub(1, preflen) == prefix then\r\n         if counter == limit then\r\n            return ids, true\r\n         else\r\n            table.insert(ids, id)\r\n            counter = counter + 1\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if counter == limit then\r\n            return ids, true\r\n         else\r\n            table.insert(ids, id)\r\n            counter = counter + 1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "table.insert(ids, id)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function FileDirVersium:save_version(id, data, author, comment, extra, timestamp)\r\n   assert(id)\r\n   assert(data)\r\n   assert(author)\r\n   local node_path = self.dir..\"/\"..util.fs_escape_id(id)\r\n   -- create a directory if necessary\r\n   if not self:node_exists(id) then\r\n      lfs.mkdir(node_path)\r\n      self.node_table[id] = 1\r\n   end\r\n   -- load history, figure out the new revision ID, write data to file\r\n   local raw_history = get_raw_history(self.dir, id)\r\n   local history = parse_history(raw_history)\r\n   local new_version_id = string.format(\"%06d\", #history + 1)\r\n   util.write_file(node_path..\"/\"..new_version_id, data, id)\r\n   -- generate and save the new index\r\n   timestamp = timestamp or os.date(\"!%Y-%m-%d %H:%M:%S\") -- default to current time   \r\n   local extra_buffer = \"\"\r\n   for k,v in pairs(extra or {}) do\r\n      extra_buffer = extra_buffer..string.format(\"\\n [%q] = %q, \", k, v)\r\n   end                                \r\n   local new_history = string.format(INDEX_TEMPLATE, \r\n                                     new_version_id, timestamp, author, \r\n                                     comment or \"\", extra_buffer) \r\n   util.write_file(self.dir..\"/\"..util.fs_escape_id(id)..\"/index\", new_history..raw_history, id)\r\n\r\n   return new_version_id\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "assert(author)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "local node_path = self.dir..\"/\"..util.fs_escape_id(id)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if not self:node_exists(id) then\r\n      lfs.mkdir(node_path)\r\n      self.node_table[id] = 1\r\n   end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "lfs.mkdir(node_path)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "self.node_table[id] = 1",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "local raw_history = get_raw_history(self.dir, id)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local history = parse_history(raw_history)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local new_version_id = string.format(\"%06d\", #history + 1)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "util.write_file(node_path..\"/\"..new_version_id, data, id)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "timestamp = timestamp or os.date(\"!%Y-%m-%d %H:%M:%S\")",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "local extra_buffer = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "for k,v in pairs(extra or {}) do\r\n      extra_buffer = extra_buffer..string.format(\"\\n [%q] = %q, \", k, v)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "extra_buffer = extra_buffer..string.format(\"\\n [%q] = %q, \", k, v)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local new_history = string.format(INDEX_TEMPLATE, \r\n                                     new_version_id, timestamp, author, \r\n                                     comment or \"\", extra_buffer)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "util.write_file(self.dir..\"/\"..util.fs_escape_id(id)..\"/index\", new_history..raw_history, id)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function FileDirVersium:get_node_history(id, date_prefix, limit)\r\n   assert(id)\r\n   if not self:node_exists(id) then return nil end\r\n\r\n   local raw_history = get_raw_history(self.dir, id)\r\n   assert(raw_history:len() > 0, \"Empty history for node '\"..id..\"'.\")\r\n   return parse_history(raw_history, date_prefix, limit)\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "if not self:node_exists(id) then return nil end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "assert(raw_history:len() > 0, \"Empty history for node '\"..id..\"'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function (values)\r\n                       if not limit or counter <= limit then\r\n                          if values.timestamp:sub(1, preflen) == date_prefix then \r\n                             table.insert(all_versions, values)\r\n                             counter = counter + 1\r\n                          end\r\n                       end\r\n                    end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "",
    "type": "function container"
  }, {
    "id": 83,
    "text": "function fs_escape_id(id)\r\n   assert(id and id:len() > 0)\r\n   return fs_escape_id_but_keep_slash(id):gsub(\"/\", \"%%2F\")\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "function fs_unescape_id(id)\r\n   assert(id and id:len() > 0)\r\n   return id:gsub(\"%%2F\", \"/\"):gsub(\"%%3A\", \":\"):gsub(\"%%25\", \"%%\")\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "function write_file(path, data, node)\r\n   assert(path)\r\n   assert(data)\r\n   local f, err = io.open(path, \"w\")\r\n   assert(f, errors.could_not_save(node, err))\r\n   f:write(data)\r\n   f:close()\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "function read_file(path, node)\r\n   assert(path)\r\n   local f, err = io.open(path)\r\n   assert(f, errors.could_not_read(node, err))\r\n   local data = f:read(\"*all\")\r\n   f:close()\r\n   return data\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "function read_file_if_exists(path)\r\n   assert(path)\r\n   local status, f = pcall(io.open, path)\r\n   if status and f then\r\n      local data = f:read(\"*all\")\r\n      f:close()\r\n      return data\r\n   else\r\n      return \"\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 89,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 90,
    "text": "f",
    "type": "global function"
  }, {
    "id": 91,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 92,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 93,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 94,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 95,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 96,
    "text": "format",
    "type": "global function"
  }, {
    "id": 97,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 98,
    "text": "module",
    "type": "global function"
  }, {
    "id": 99,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 100,
    "text": "date",
    "type": "global function"
  }, {
    "id": 101,
    "text": "require",
    "type": "global function"
  }, {
    "id": 102,
    "text": "",
    "type": "variable container"
  }, {
    "id": 103,
    "text": "",
    "type": "require container"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "string"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 110,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 111,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 114,
    "text": "",
    "type": "global variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "util)",
    "type": "module"
  }, {
    "id": 118,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 119,
    "text": "errors)",
    "type": "module"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "(lfs)",
    "type": "module"
  } ]
}