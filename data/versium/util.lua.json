{
  "_filename": "util.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/versium/lua/versium/util.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 9
  }, {
    "from": 7,
    "label": "calls",
    "to": 9
  }, {
    "from": 8,
    "label": "calls",
    "to": 9
  }, {
    "from": 8,
    "label": "calls",
    "to": 9
  }, {
    "from": 6,
    "label": "calls",
    "to": 30
  }, {
    "from": 8,
    "label": "calls",
    "to": 17
  }, {
    "from": 8,
    "label": "calls",
    "to": 17
  }, {
    "from": 7,
    "label": "calls",
    "to": 25
  }, {
    "from": 5,
    "label": "calls",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 11
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 18
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 11
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 18
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 28
  }, {
    "from": 32,
    "label": "has",
    "to": 23
  }, {
    "from": 30,
    "label": "has",
    "to": 11
  }, {
    "from": 30,
    "label": "has",
    "to": 11
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 34,
    "label": "has",
    "to": 42
  }, {
    "from": 34,
    "label": "has",
    "to": 43
  }, {
    "from": 34,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 34,
    "label": "has",
    "to": 46
  }, {
    "from": 34,
    "label": "has",
    "to": 47
  }, {
    "from": 34,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 34,
    "label": "has",
    "to": 51
  }, {
    "from": 34,
    "label": "has",
    "to": 11
  }, {
    "from": 34,
    "label": "has",
    "to": 52
  }, {
    "from": 34,
    "label": "calls",
    "to": 57
  }, {
    "from": 34,
    "label": "calls",
    "to": 63
  }, {
    "from": 34,
    "label": "calls",
    "to": 63
  }, {
    "from": 9,
    "label": "calls",
    "to": 54
  }, {
    "from": 15,
    "label": "calls",
    "to": 54
  }, {
    "from": 17,
    "label": "calls",
    "to": 54
  }, {
    "from": 17,
    "label": "calls",
    "to": 54
  }, {
    "from": 17,
    "label": "calls",
    "to": 54
  }, {
    "from": 25,
    "label": "calls",
    "to": 54
  }, {
    "from": 25,
    "label": "calls",
    "to": 54
  }, {
    "from": 30,
    "label": "calls",
    "to": 54
  }, {
    "from": 17,
    "label": "calls",
    "to": 55
  }, {
    "from": 25,
    "label": "calls",
    "to": 55
  }, {
    "from": 9,
    "label": "calls",
    "to": 13
  }, {
    "from": 34,
    "label": "calls",
    "to": 56
  }, {
    "from": 34,
    "label": "calls",
    "to": 56
  }, {
    "from": 34,
    "label": "calls",
    "to": 61
  }, {
    "from": 34,
    "label": "calls",
    "to": 61
  }, {
    "from": 34,
    "label": "calls",
    "to": 61
  }, {
    "from": 53,
    "label": "calls",
    "to": 60
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 4
  }, {
    "from": 53,
    "label": "calls",
    "to": 62
  }, {
    "from": 30,
    "label": "calls",
    "to": 59
  }, {
    "from": 34,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "contains",
    "to": 53
  }, {
    "from": 53,
    "label": "declares",
    "to": 9
  }, {
    "from": 53,
    "label": "declares",
    "to": 13
  }, {
    "from": 53,
    "label": "declares",
    "to": 15
  }, {
    "from": 53,
    "label": "declares",
    "to": 17
  }, {
    "from": 53,
    "label": "declares",
    "to": 25
  }, {
    "from": 53,
    "label": "declares",
    "to": 30
  }, {
    "from": 53,
    "label": "declares",
    "to": 34
  }, {
    "from": 2,
    "label": "contains",
    "to": 64
  }, {
    "from": 2,
    "label": "contains",
    "to": 65
  }, {
    "from": 65,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "errors",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "function could_not_save(node, reason)\r\n   return \"versium could not save node \"..node..\": \"..(reason or \"\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function could_not_read(node, reason)\r\n   return \"versium could not read node \"..node..\": \"..(readon or \"\")\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function new(params)\r\n   assert(params[1], \"the first parameter is required\")\r\n   local new_versium = {dir=params[1], node_table={}}\r\n   local new_versium = setmetatable(new_versium, FileDirVersium_mt)\r\n   for x in lfs.dir(new_versium.dir) do\r\n      if not (x==\".\" or x==\"..\") then\r\n         new_versium.node_table[util.fs_unescape_id(x)] = 1\r\n      end\r\n   end\r\n   return new_versium \r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function get_raw_history(dir, id)\r\n   local path = dir..\"/\"..util.fs_escape_id(id)..\"/index\"\r\n   local raw_history = util.read_file_if_exists(path)\r\n   return raw_history\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function FileDirVersium:get_node(id, version)\r\n   assert(id)\r\n   if not self:node_exists(id) then\r\n      return nil\r\n   end\r\n   local metadata = self:get_node_info(id, version)\r\n   assert(metadata.version) -- should come from history\r\n   local path = self.dir..\"/\"..util.fs_escape_id(id)..\"/\"..metadata.version\r\n   local data = util.read_file(path, id)\r\n   assert(data)\r\n   return data\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function FileDirVersium:save_version(id, data, author, comment, extra, timestamp)\r\n   assert(id)\r\n   assert(data)\r\n   assert(author)\r\n   local node_path = self.dir..\"/\"..util.fs_escape_id(id)\r\n   -- create a directory if necessary\r\n   if not self:node_exists(id) then\r\n      lfs.mkdir(node_path)\r\n      self.node_table[id] = 1\r\n   end\r\n   -- load history, figure out the new revision ID, write data to file\r\n   local raw_history = get_raw_history(self.dir, id)\r\n   local history = parse_history(raw_history)\r\n   local new_version_id = string.format(\"%06d\", #history + 1)\r\n   util.write_file(node_path..\"/\"..new_version_id, data, id)\r\n   -- generate and save the new index\r\n   timestamp = timestamp or os.date(\"!%Y-%m-%d %H:%M:%S\") -- default to current time   \r\n   local extra_buffer = \"\"\r\n   for k,v in pairs(extra or {}) do\r\n      extra_buffer = extra_buffer..string.format(\"\\n [%q] = %q, \", k, v)\r\n   end                                \r\n   local new_history = string.format(INDEX_TEMPLATE, \r\n                                     new_version_id, timestamp, author, \r\n                                     comment or \"\", extra_buffer) \r\n   util.write_file(self.dir..\"/\"..util.fs_escape_id(id)..\"/index\", new_history..raw_history, id)\r\n\r\n   return new_version_id\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function fs_escape_id(id)\r\n   assert(id and id:len() > 0)\r\n   return fs_escape_id_but_keep_slash(id):gsub(\"/\", \"%%2F\")\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert(id and id:len() > 0)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function fs_escape_id_but_keep_slash(id, options)\r\n   return id:gsub(\"%%\", \"%%25\"):gsub(\":\", \"%%3A\")\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function fs_unescape_id(id)\r\n   assert(id and id:len() > 0)\r\n   return id:gsub(\"%%2F\", \"/\"):gsub(\"%%3A\", \":\"):gsub(\"%%25\", \"%%\")\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function write_file(path, data, node)\r\n   assert(path)\r\n   assert(data)\r\n   local f, err = io.open(path, \"w\")\r\n   assert(f, errors.could_not_save(node, err))\r\n   f:write(data)\r\n   f:close()\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert(path)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert(data)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local f, err = io.open(path, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assert(f, errors.could_not_save(node, err))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "f:write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function read_file(path, node)\r\n   assert(path)\r\n   local f, err = io.open(path)\r\n   assert(f, errors.could_not_read(node, err))\r\n   local data = f:read(\"*all\")\r\n   f:close()\r\n   return data\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local f, err = io.open(path)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "assert(f, errors.could_not_read(node, err))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local data = f:read(\"*all\")",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function read_file_if_exists(path)\r\n   assert(path)\r\n   local status, f = pcall(io.open, path)\r\n   if status and f then\r\n      local data = f:read(\"*all\")\r\n      f:close()\r\n      return data\r\n   else\r\n      return \"\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local status, f = pcall(io.open, path)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if status and f then\r\n      local data = f:read(\"*all\")\r\n      f:close()\r\n      return data\r\n   else\r\n      return \"\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function format_time(timestamp, format, tzoffset, tzname)\r\n   if tzoffset == \"local\" then  -- calculate local time zone (for the server)\r\n      local now = os.time()\r\n      local local_t = os.date(\"*t\", now)\r\n      local utc_t = os.date(\"!*t\", now)\r\n      local delta = (local_t.hour - utc_t.hour)*60 + (local_t.min - utc_t.min)\r\n      local h, m = math.modf( delta / 60)\r\n      tzoffset = string.format(\"%+.4d\", 100 * h + 60 * m)\r\n   end\r\n   tzoffset = tzoffset or \"GMT\"\r\n   format = format:gsub(\"%%z\", tzname or tzoffset)\r\n   if tzoffset == \"GMT\" then \r\n      tzoffset = \"+0000\"\r\n   end\r\n   tzoffset = tzoffset:gsub(\":\", \"\")\r\n\r\n   local sign = 1\r\n   if tzoffset:sub(1,1) == \"-\" then\r\n      sign = -1\r\n      tzoffset = tzoffset:sub(2)\r\n   elseif tzoffset:sub(1,1) == \"+\" then\r\n      tzoffset = tzoffset:sub(2)       \r\n   end\r\n   tzoffset = sign * (tonumber(tzoffset:sub(1,2))*60 + tonumber(tzoffset:sub(3,4)))*60\r\n   return os.date(format, os.time{ year=timestamp:sub(1,4), month=timestamp:sub(6,7),\r\n                                   day=timestamp:sub(9,10), hour=timestamp:sub(12,13),\r\n                                   min=timestamp:sub(15,16), sec=timestamp:sub(18)} + tzoffset)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if tzoffset == \"local\" then  -- calculate local time zone (for the server)\r\n      local now = os.time()\r\n      local local_t = os.date(\"*t\", now)\r\n      local utc_t = os.date(\"!*t\", now)\r\n      local delta = (local_t.hour - utc_t.hour)*60 + (local_t.min - utc_t.min)\r\n      local h, m = math.modf( delta / 60)\r\n      tzoffset = string.format(\"%+.4d\", 100 * h + 60 * m)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "local now = os.time()",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local local_t = os.date(\"*t\", now)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local utc_t = os.date(\"!*t\", now)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local delta = (local_t.hour - utc_t.hour)*60 + (local_t.min - utc_t.min)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local h, m = math.modf( delta / 60)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "tzoffset = string.format(\"%+.4d\", 100 * h + 60 * m)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "tzoffset = tzoffset or \"GMT\"",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "format = format:gsub(\"%%z\", tzname or tzoffset)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if tzoffset == \"GMT\" then \r\n      tzoffset = \"+0000\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "tzoffset = \"+0000\"",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "tzoffset = tzoffset:gsub(\":\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local sign = 1",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if tzoffset:sub(1,1) == \"-\" then\r\n      sign = -1\r\n      tzoffset = tzoffset:sub(2)\r\n   elseif tzoffset:sub(1,1) == \"+\" then\r\n      tzoffset = tzoffset:sub(2)       \r\n   end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "sign = -1",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "tzoffset = tzoffset:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "tzoffset = sign * (tonumber(tzoffset:sub(1,2))*60 + tonumber(tzoffset:sub(3,4)))*60",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "",
    "type": "function container"
  }, {
    "id": 54,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 55,
    "text": "open",
    "type": "global function"
  }, {
    "id": 56,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 57,
    "text": "modf",
    "type": "global function"
  }, {
    "id": 58,
    "text": "format",
    "type": "global function"
  }, {
    "id": 59,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 60,
    "text": "module",
    "type": "global function"
  }, {
    "id": 61,
    "text": "date",
    "type": "global function"
  }, {
    "id": 62,
    "text": "require",
    "type": "global function"
  }, {
    "id": 63,
    "text": "time",
    "type": "global function"
  }, {
    "id": 64,
    "text": "",
    "type": "variable container"
  }, {
    "id": 65,
    "text": "",
    "type": "require container"
  }, {
    "id": 66,
    "text": "",
    "type": "require local variable"
  } ]
}