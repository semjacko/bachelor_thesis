{
  "_filename": "info.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/im-examples/examples/Lua/info.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 16
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 16
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 16
  }, {
    "from": 37,
    "label": "has",
    "to": 16
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 16
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 41,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 54,
    "label": "has",
    "to": 62
  }, {
    "from": 54,
    "label": "has",
    "to": 63
  }, {
    "from": 54,
    "label": "has",
    "to": 64
  }, {
    "from": 54,
    "label": "has",
    "to": 65
  }, {
    "from": 54,
    "label": "has",
    "to": 66
  }, {
    "from": 54,
    "label": "has",
    "to": 67
  }, {
    "from": 54,
    "label": "has",
    "to": 68
  }, {
    "from": 54,
    "label": "has",
    "to": 69
  }, {
    "from": 54,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 41,
    "label": "has",
    "to": 16
  }, {
    "from": 41,
    "label": "has",
    "to": 58
  }, {
    "from": 41,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 16
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 16
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 20,
    "label": "calls",
    "to": 91
  }, {
    "from": 20,
    "label": "calls",
    "to": 91
  }, {
    "from": 20,
    "label": "calls",
    "to": 91
  }, {
    "from": 20,
    "label": "calls",
    "to": 91
  }, {
    "from": 20,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 91
  }, {
    "from": 41,
    "label": "calls",
    "to": 95
  }, {
    "from": 41,
    "label": "calls",
    "to": 37
  }, {
    "from": 41,
    "label": "calls",
    "to": 20
  }, {
    "from": 41,
    "label": "calls",
    "to": 20
  }, {
    "from": 41,
    "label": "calls",
    "to": 14
  }, {
    "from": 80,
    "label": "calls",
    "to": 41
  }, {
    "from": 85,
    "label": "calls",
    "to": 80
  }, {
    "from": 41,
    "label": "calls",
    "to": 88
  }, {
    "from": 41,
    "label": "calls",
    "to": 89
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 94
  }, {
    "from": 2,
    "label": "calls",
    "to": 87
  }, {
    "from": 2,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 87
  }, {
    "from": 80,
    "label": "calls",
    "to": 87
  }, {
    "from": 41,
    "label": "calls",
    "to": 93
  }, {
    "from": 41,
    "label": "calls",
    "to": 28
  }, {
    "from": 41,
    "label": "calls",
    "to": 28
  }, {
    "from": 14,
    "label": "calls",
    "to": 96
  }, {
    "from": 41,
    "label": "calls",
    "to": 96
  }, {
    "from": 41,
    "label": "calls",
    "to": 96
  }, {
    "from": 80,
    "label": "calls",
    "to": 96
  }, {
    "from": 37,
    "label": "calls",
    "to": 86
  }, {
    "from": 41,
    "label": "calls",
    "to": 97
  }, {
    "from": 85,
    "label": "calls",
    "to": 98
  }, {
    "from": 85,
    "label": "calls",
    "to": 98
  }, {
    "from": 41,
    "label": "calls",
    "to": 92
  }, {
    "from": 41,
    "label": "calls",
    "to": 90
  }, {
    "from": 1,
    "label": "contains",
    "to": 85
  }, {
    "from": 85,
    "label": "declares",
    "to": 2
  }, {
    "from": 85,
    "label": "declares",
    "to": 14
  }, {
    "from": 85,
    "label": "declares",
    "to": 20
  }, {
    "from": 85,
    "label": "declares",
    "to": 28
  }, {
    "from": 85,
    "label": "declares",
    "to": 37
  }, {
    "from": 85,
    "label": "declares",
    "to": 41
  }, {
    "from": 85,
    "label": "declares",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 101,
    "label": "initializes",
    "to": 99
  }, {
    "from": 101,
    "label": "initializes",
    "to": 99
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "info",
    "type": "module"
  }, {
    "id": 2,
    "text": "function PrintError(error)\r\n\tlocal msg = {}\r\n\tmsg[im.ERR_OPEN] = \"Error Opening File.\"\r\n\tmsg[im.ERR_MEM] = \"Insuficient memory.\"\r\n\tmsg[im.ERR_ACCESS] = \"Error Accessing File.\"\r\n\tmsg[im.ERR_DATA] = \"Image type not Suported.\"\r\n\tmsg[im.ERR_FORMAT] = \"Invalid Format.\"\r\n\tmsg[im.ERR_COMPRESS] = \"Invalid or unsupported compression.\"\r\n\t\r\n\tif msg[error] then\r\n\t\tprint(msg[error])\r\n\telse\r\n\t\tprint(\"Unknown Error.\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local msg = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "msg[im.ERR_OPEN] = \"Error Opening File.\"",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "msg[im.ERR_MEM] = \"Insuficient memory.\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "msg[im.ERR_ACCESS] = \"Error Accessing File.\"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "msg[im.ERR_DATA] = \"Image type not Suported.\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "msg[im.ERR_FORMAT] = \"Invalid Format.\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "msg[im.ERR_COMPRESS] = \"Invalid or unsupported compression.\"",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if msg[error] then\r\n\t\tprint(msg[error])\r\n\telse\r\n\t\tprint(\"Unknown Error.\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "print(msg[error])",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "print(\"Unknown Error.\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function FindZero(data)\r\n if (not data) then return false end\r\n\tfor i = 1, table.getn(data) do\r\n\t\tif data[i] == 0 then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend\t\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if (not data) then return false end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 17,
    "text": "for i = 1, table.getn(data) do\r\n\t\tif data[i] == 0 then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "if data[i] == 0 then\r\n\t\t\treturn true\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function AttribData2Str(data, data_type)\r\n\tlocal data_str\r\n\r\n\tif data_type == im.BYTE then\r\n\t\tdata_str = string.format(\"%3d\", data[1])\r\n\telseif data_type == im.USHORT then\r\n\t\tdata_str = string.format(\"%5d\", data[1])\r\n\telseif data_type == im.INT then\r\n\t\tdata_str = string.format(\"%5d\", data[1])\r\n\telseif data_type == im.FLOAT then\r\n\t\tdata_str = string.format(\"%5.2f\", data[1])\r\n\telseif data_type == im.CFLOAT then\r\n\t\tdata_str = string.format(\"%5.2f, %5.2f\", data[1], data[2])\r\n\tend\r\n\t\r\n\treturn data_str\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local data_str",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if data_type == im.BYTE then\r\n\t\tdata_str = string.format(\"%3d\", data[1])\r\n\telseif data_type == im.USHORT then\r\n\t\tdata_str = string.format(\"%5d\", data[1])\r\n\telseif data_type == im.INT then\r\n\t\tdata_str = string.format(\"%5d\", data[1])\r\n\telseif data_type == im.FLOAT then\r\n\t\tdata_str = string.format(\"%5.2f\", data[1])\r\n\telseif data_type == im.CFLOAT then\r\n\t\tdata_str = string.format(\"%5.2f, %5.2f\", data[1], data[2])\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "data_str = string.format(\"%3d\", data[1])",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "data_str = string.format(\"%5d\", data[1])",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "data_str = string.format(\"%5.2f\", data[1])",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "data_str = string.format(\"%5.2f, %5.2f\", data[1], data[2])",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function GetSizeDesc(size)\r\n\tlocal size_desc\r\n\r\n\tif size < 1024 then\r\n\t\tsize_desc = \"b\"\r\n\telse\r\n\t\tsize = size / 1024\r\n\r\n\t\tif size < 1024 then\r\n\t\t\tsize_desc = \"Kb\"\r\n\t\telse\r\n\t\t\tsize = size / 1024\r\n\t\t\tsize_desc = \"Mb\"\r\n\t\tend\r\n\tend\r\n\r\n\treturn size, size_desc\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local size_desc",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if size < 1024 then\r\n\t\tsize_desc = \"b\"\r\n\telse\r\n\t\tsize = size / 1024\r\n\r\n\t\tif size < 1024 then\r\n\t\t\tsize_desc = \"Kb\"\r\n\t\telse\r\n\t\t\tsize = size / 1024\r\n\t\t\tsize_desc = \"Mb\"\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "size_desc = \"b\"",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "size = size / 1024",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if size < 1024 then\r\n\t\t\tsize_desc = \"Kb\"\r\n\t\telse\r\n\t\t\tsize = size / 1024\r\n\t\t\tsize_desc = \"Mb\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "size_desc = \"Kb\"",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "size_desc = \"Mb\"",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function FileSize(file_name)\r\n  if lfs then\r\n    local attr = lfs.attributes(file_name)\r\n    return attr.size\r\n  else\r\n    return 0\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if lfs then\r\n    local attr = lfs.attributes(file_name)\r\n    return attr.size\r\n  else\r\n    return 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local attr = lfs.attributes(file_name)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function PrintImageInfo(file_name)\r\n\tprint(\"IM Info\")\r\n\tprint(string.format(\"  File Name:\\n    %s\", file_name))\r\n\r\n\tlocal ifile, error = im.FileOpen(file_name)\r\n\tif not ifile then\r\n\t\tPrintError(error)\r\n\t\treturn nil\r\n\tend\r\n\r\n\tlocal file_size = FileSize(file_name)\r\n\t\r\n\tprint(string.format(\"  File Size: %.2f %s\", GetSizeDesc(file_size)))\r\n\r\n\tlocal format, compression, image_count = ifile:GetInfo()\r\n\r\n\tlocal error, format_desc = im.FormatInfo(format)\r\n\tprint(string.format(\"  Format: %s - %s\", format, format_desc))\r\n\tprint(string.format(\"  Compression: %s\", compression))\r\n\tprint(string.format(\"  Image Count: %d\", image_count))\r\n\tfor i = 1, image_count do\r\n\t\tlocal error, width, height, color_mode, data_type = ifile:ReadImageInfo(i-1)\r\n\t\tif width == nil then\r\n\t\t\tPrintError(height)\r\n\t\t\tifile:Close()\r\n\t\t\treturn nil\r\n\t\tend\r\n\r\n\t\tprint(string.format(\"  Image #%d\", i))\r\n\t\tprint(string.format(\"    Width: %d\", width))\r\n\t\tprint(string.format(\"    Height: %d\", height))\r\n\t\tprint(string.format(\"    Color Space: %s\", im.ColorModeSpaceName(color_mode)))\r\n\t\tprint(string.format(\"      Has Alpha: %s\", im.ColorModeHasAlpha(color_mode) and \"Yes\" or \"No\"))\r\n\t\tprint(string.format(\"      Is Packed: %s\", im.ColorModeIsPacked(color_mode) and \"Yes\" or \"No\"))\r\n\t\tprint(string.format(\"      Is Top Down: %s\", im.ColorModeIsTopDown(color_mode) and \"Yes\" or \"No\"))\r\n\t\tprint(string.format(\"    Data Type: %s\", im.DataTypeName(data_type)))\r\n\r\n\t\tlocal image_size = im.ImageDataSize(width, height, color_mode, data_type)\r\n\t\tprint(string.format(\"    Data Size: %.2f %s\", GetSizeDesc(image_size)))\r\n\r\n\t\tlocal attrib_list = ifile:GetAttributeList()\r\n\t\tfor a = 1, table.getn(attrib_list) do\r\n\t\t\tif a == 1 then\r\n\t\t\t\tprint(\"    Attributes:\")\r\n\t\t\tend\r\n\r\n\t\t\tlocal attrib_data, attrib_data_type = ifile:GetAttribute(attrib_list[a])\r\n\r\n\t\t\tif table.getn(attrib_data) == 1 then\r\n\t\t\t\tprint(string.format(\"      %s: %s\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))\r\n\t\t\telseif attrib_data_type == im.BYTE and FindZero(attrib_data) then\r\n        attrib_data = ifile:GetAttribute(attrib_list[a], true)\r\n\t\t\t\tprint(string.format(\"      %s: %s\", attrib_list[a], attrib_data))\r\n\t\t\telse\r\n\t\t\t\tprint(string.format(\"      %s: %s ...\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n    \r\n\tifile:Close()\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "print(\"IM Info\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "print(string.format(\"  File Name:\\n    %s\", file_name))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local ifile, error = im.FileOpen(file_name)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if not ifile then\r\n\t\tPrintError(error)\r\n\t\treturn nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "PrintError(error)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local file_size = FileSize(file_name)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "print(string.format(\"  File Size: %.2f %s\", GetSizeDesc(file_size)))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local format, compression, image_count = ifile:GetInfo()",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local error, format_desc = im.FormatInfo(format)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "print(string.format(\"  Format: %s - %s\", format, format_desc))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "print(string.format(\"  Compression: %s\", compression))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "print(string.format(\"  Image Count: %d\", image_count))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "for i = 1, image_count do\r\n\t\tlocal error, width, height, color_mode, data_type = ifile:ReadImageInfo(i-1)\r\n\t\tif width == nil then\r\n\t\t\tPrintError(height)\r\n\t\t\tifile:Close()\r\n\t\t\treturn nil\r\n\t\tend\r\n\r\n\t\tprint(string.format(\"  Image #%d\", i))\r\n\t\tprint(string.format(\"    Width: %d\", width))\r\n\t\tprint(string.format(\"    Height: %d\", height))\r\n\t\tprint(string.format(\"    Color Space: %s\", im.ColorModeSpaceName(color_mode)))\r\n\t\tprint(string.format(\"      Has Alpha: %s\", im.ColorModeHasAlpha(color_mode) and \"Yes\" or \"No\"))\r\n\t\tprint(string.format(\"      Is Packed: %s\", im.ColorModeIsPacked(color_mode) and \"Yes\" or \"No\"))\r\n\t\tprint(string.format(\"      Is Top Down: %s\", im.ColorModeIsTopDown(color_mode) and \"Yes\" or \"No\"))\r\n\t\tprint(string.format(\"    Data Type: %s\", im.DataTypeName(data_type)))\r\n\r\n\t\tlocal image_size = im.ImageDataSize(width, height, color_mode, data_type)\r\n\t\tprint(string.format(\"    Data Size: %.2f %s\", GetSizeDesc(image_size)))\r\n\r\n\t\tlocal attrib_list = ifile:GetAttributeList()\r\n\t\tfor a = 1, table.getn(attrib_list) do\r\n\t\t\tif a == 1 then\r\n\t\t\t\tprint(\"    Attributes:\")\r\n\t\t\tend\r\n\r\n\t\t\tlocal attrib_data, attrib_data_type = ifile:GetAttribute(attrib_list[a])\r\n\r\n\t\t\tif table.getn(attrib_data) == 1 then\r\n\t\t\t\tprint(string.format(\"      %s: %s\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))\r\n\t\t\telseif attrib_data_type == im.BYTE and FindZero(attrib_data) then\r\n        attrib_data = ifile:GetAttribute(attrib_list[a], true)\r\n\t\t\t\tprint(string.format(\"      %s: %s\", attrib_list[a], attrib_data))\r\n\t\t\telse\r\n\t\t\t\tprint(string.format(\"      %s: %s ...\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 55,
    "text": "local error, width, height, color_mode, data_type = ifile:ReadImageInfo(i-1)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if width == nil then\r\n\t\t\tPrintError(height)\r\n\t\t\tifile:Close()\r\n\t\t\treturn nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "PrintError(height)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "ifile:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "print(string.format(\"  Image #%d\", i))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "print(string.format(\"    Width: %d\", width))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "print(string.format(\"    Height: %d\", height))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "print(string.format(\"    Color Space: %s\", im.ColorModeSpaceName(color_mode)))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "print(string.format(\"      Has Alpha: %s\", im.ColorModeHasAlpha(color_mode) and \"Yes\" or \"No\"))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "print(string.format(\"      Is Packed: %s\", im.ColorModeIsPacked(color_mode) and \"Yes\" or \"No\"))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "print(string.format(\"      Is Top Down: %s\", im.ColorModeIsTopDown(color_mode) and \"Yes\" or \"No\"))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "print(string.format(\"    Data Type: %s\", im.DataTypeName(data_type)))",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "local image_size = im.ImageDataSize(width, height, color_mode, data_type)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "print(string.format(\"    Data Size: %.2f %s\", GetSizeDesc(image_size)))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local attrib_list = ifile:GetAttributeList()",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "for a = 1, table.getn(attrib_list) do\r\n\t\t\tif a == 1 then\r\n\t\t\t\tprint(\"    Attributes:\")\r\n\t\t\tend\r\n\r\n\t\t\tlocal attrib_data, attrib_data_type = ifile:GetAttribute(attrib_list[a])\r\n\r\n\t\t\tif table.getn(attrib_data) == 1 then\r\n\t\t\t\tprint(string.format(\"      %s: %s\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))\r\n\t\t\telseif attrib_data_type == im.BYTE and FindZero(attrib_data) then\r\n        attrib_data = ifile:GetAttribute(attrib_list[a], true)\r\n\t\t\t\tprint(string.format(\"      %s: %s\", attrib_list[a], attrib_data))\r\n\t\t\telse\r\n\t\t\t\tprint(string.format(\"      %s: %s ...\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 71,
    "text": "if a == 1 then\r\n\t\t\t\tprint(\"    Attributes:\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "print(\"    Attributes:\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "local attrib_data, attrib_data_type = ifile:GetAttribute(attrib_list[a])",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if table.getn(attrib_data) == 1 then\r\n\t\t\t\tprint(string.format(\"      %s: %s\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))\r\n\t\t\telseif attrib_data_type == im.BYTE and FindZero(attrib_data) then\r\n        attrib_data = ifile:GetAttribute(attrib_list[a], true)\r\n\t\t\t\tprint(string.format(\"      %s: %s\", attrib_list[a], attrib_data))\r\n\t\t\telse\r\n\t\t\t\tprint(string.format(\"      %s: %s ...\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "print(string.format(\"      %s: %s\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "attrib_data = ifile:GetAttribute(attrib_list[a], true)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "print(string.format(\"      %s: %s\", attrib_list[a], attrib_data))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "print(string.format(\"      %s: %s ...\", attrib_list[a], AttribData2Str(attrib_data, attrib_data_type)))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function main(arg)\r\n  if (not arg or table.getn(arg) < 1) then\r\n    print(\"Invalid number of arguments.\")\r\n    return nil\r\n  end\r\n\r\n  PrintImageInfo(arg[1])\r\n  return 1\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "if (not arg or table.getn(arg) < 1) then\r\n    print(\"Invalid number of arguments.\")\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "print(\"Invalid number of arguments.\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "PrintImageInfo(arg[1])",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "",
    "type": "function container"
  }, {
    "id": 86,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 87,
    "text": "print",
    "type": "global function"
  }, {
    "id": 88,
    "text": "FormatInfo",
    "type": "global function"
  }, {
    "id": 89,
    "text": "ColorModeHasAlpha",
    "type": "global function"
  }, {
    "id": 90,
    "text": "FileOpen",
    "type": "global function"
  }, {
    "id": 91,
    "text": "format",
    "type": "global function"
  }, {
    "id": 92,
    "text": "ColorModeIsTopDown",
    "type": "global function"
  }, {
    "id": 93,
    "text": "DataTypeName",
    "type": "global function"
  }, {
    "id": 94,
    "text": "ColorModeSpaceName",
    "type": "global function"
  }, {
    "id": 95,
    "text": "ColorModeIsPacked",
    "type": "global function"
  }, {
    "id": 96,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 97,
    "text": "ImageDataSize",
    "type": "global function"
  }, {
    "id": 98,
    "text": "require",
    "type": "global function"
  }, {
    "id": 99,
    "text": "",
    "type": "global variable"
  }, {
    "id": 100,
    "text": "",
    "type": "variable container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  } ]
}