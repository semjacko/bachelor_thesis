{
  "_filename": "multimorpho.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/im-examples/examples/Lua/multimorpho.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 2,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "calls",
    "to": 35
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 32,
    "label": "calls",
    "to": 41
  }, {
    "from": 32,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 32,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 32,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 43,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 43,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 43,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 43,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 43,
    "label": "initializes",
    "to": 53
  }, {
    "from": 44,
    "label": "initializes",
    "to": 42
  }, {
    "from": 44,
    "label": "initializes",
    "to": 42
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "multimorpho",
    "type": "module"
  }, {
    "id": 2,
    "text": "function ProcessImageFile(file_name, num_step)\r\n  print(\"Loading File: \"..file_name)\r\n  image, err = im.FileImageLoad(file_name);\r\n\r\n  if (err and err ~= im.ERR_NONE) then\r\n    error(err_msg[err+1])\r\n  end\r\n    \r\n  if (image:ColorSpace() ~= im.BINARY) then\r\n    error(\"Invalid Image Color Space. Must be a Binary image [Color Space=\"..colorspace_str[image:ColorSpace()+1]..\"].\")\r\n  end\r\n\r\n  file_name = file_name..\".csv\"\r\n  print(\"Saving Log File: \"..file_name)\r\n  log = io.open(file_name, \"w\")\r\n\r\n  morph_image = image:Clone()\r\n  obj_image = im.ImageCreateBased(image, nil, nil, im.GRAY, im.USHORT)\r\n\r\n  for step = 1, num_step do\r\n    kernel_size = 2*step+1\r\n    print(\"  Binary Morphology Open [Kernel Size=\"..kernel_size..\"x\"..kernel_size..\"].\")\r\n    im.ProcessBinMorphOpen(image, morph_image, kernel_size, 1)  -- 1 interaction\r\n    \r\n    num_obj = im.AnalyzeFindRegions(morph_image, obj_image, 4, false)  -- 4 connected, ignore objects that touch the border\r\n    print(\"    Objects Found: \"..num_obj)\r\n    log:write(kernel_size..\";\"..num_obj..\"\\n\")\r\n    \r\n    if (num_obj == 0) then\r\n      step = num_step\r\n    end\r\n    \r\n    obj_image:Clear()\r\n    morph_image:Clear()\r\n  end\r\n   \r\n  log:close() \r\n  obj_image:Destroy()\r\n  morph_image:Destroy()\r\n  image:Destroy()\r\n  print(\"Done File.\")\r\n  print(\"\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(\"Loading File: \"..file_name)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "image, err = im.FileImageLoad(file_name)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "if (err and err ~= im.ERR_NONE) then\r\n    error(err_msg[err+1])\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "error(err_msg[err+1])",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "if (image:ColorSpace() ~= im.BINARY) then\r\n    error(\"Invalid Image Color Space. Must be a Binary image [Color Space=\"..colorspace_str[image:ColorSpace()+1]..\"].\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "error(\"Invalid Image Color Space. Must be a Binary image [Color Space=\"..colorspace_str[image:ColorSpace()+1]..\"].\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "file_name = file_name..\".csv\"",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "print(\"Saving Log File: \"..file_name)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "log = io.open(file_name, \"w\")",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "morph_image = image:Clone()",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "obj_image = im.ImageCreateBased(image, nil, nil, im.GRAY, im.USHORT)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "for step = 1, num_step do\r\n    kernel_size = 2*step+1\r\n    print(\"  Binary Morphology Open [Kernel Size=\"..kernel_size..\"x\"..kernel_size..\"].\")\r\n    im.ProcessBinMorphOpen(image, morph_image, kernel_size, 1)  -- 1 interaction\r\n    \r\n    num_obj = im.AnalyzeFindRegions(morph_image, obj_image, 4, false)  -- 4 connected, ignore objects that touch the border\r\n    print(\"    Objects Found: \"..num_obj)\r\n    log:write(kernel_size..\";\"..num_obj..\"\\n\")\r\n    \r\n    if (num_obj == 0) then\r\n      step = num_step\r\n    end\r\n    \r\n    obj_image:Clear()\r\n    morph_image:Clear()\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 15,
    "text": "kernel_size = 2*step+1",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "print(\"  Binary Morphology Open [Kernel Size=\"..kernel_size..\"x\"..kernel_size..\"].\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "im.ProcessBinMorphOpen(image, morph_image, kernel_size, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "num_obj = im.AnalyzeFindRegions(morph_image, obj_image, 4, false)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "print(\"    Objects Found: \"..num_obj)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "log:write(kernel_size..\";\"..num_obj..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "if (num_obj == 0) then\r\n      step = num_step\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "step = num_step",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "obj_image:Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "morph_image:Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "log:close()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "obj_image:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "morph_image:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "image:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "print(\"Done File.\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "print(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "",
    "type": "function container"
  }, {
    "id": 33,
    "text": "ProcessBinMorphOpen",
    "type": "global function"
  }, {
    "id": 34,
    "text": "ImageCreateBased",
    "type": "global function"
  }, {
    "id": 35,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 36,
    "text": "print",
    "type": "global function"
  }, {
    "id": 37,
    "text": "AnalyzeFindRegions",
    "type": "global function"
  }, {
    "id": 38,
    "text": "FileImageLoad",
    "type": "global function"
  }, {
    "id": 39,
    "text": "open",
    "type": "global function"
  }, {
    "id": 40,
    "text": "error",
    "type": "global function"
  }, {
    "id": 41,
    "text": "require",
    "type": "global function"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  }, {
    "id": 43,
    "text": "",
    "type": "variable container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  }, {
    "id": 45,
    "text": "",
    "type": "global variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "global variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "global variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  } ]
}