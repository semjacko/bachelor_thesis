{
  "_filename": "view_image.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/im-examples/examples/modules/view_image.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 5,
    "label": "has",
    "to": 23
  }, {
    "from": 5,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 2,
    "label": "has",
    "to": 32
  }, {
    "from": 2,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 33,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 2,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 2,
    "label": "has",
    "to": 43
  }, {
    "from": 2,
    "label": "has",
    "to": 44
  }, {
    "from": 2,
    "label": "has",
    "to": 45
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 7
  }, {
    "from": 47,
    "label": "has",
    "to": 8
  }, {
    "from": 47,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 10
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 12
  }, {
    "from": 47,
    "label": "has",
    "to": 13
  }, {
    "from": 47,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 23
  }, {
    "from": 47,
    "label": "has",
    "to": 24
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 26
  }, {
    "from": 49,
    "label": "has",
    "to": 27
  }, {
    "from": 49,
    "label": "has",
    "to": 9
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 34
  }, {
    "from": 51,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 37
  }, {
    "from": 53,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 41
  }, {
    "from": 55,
    "label": "has",
    "to": 42
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 57,
    "label": "declares",
    "to": 2
  }, {
    "from": 57,
    "label": "declares",
    "to": 47
  }, {
    "from": 57,
    "label": "declares",
    "to": 49
  }, {
    "from": 57,
    "label": "declares",
    "to": 51
  }, {
    "from": 57,
    "label": "declares",
    "to": 53
  }, {
    "from": 57,
    "label": "declares",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 68
  }, {
    "from": 68,
    "label": "initializes",
    "to": 66
  }, {
    "from": 68,
    "label": "initializes",
    "to": 66
  }, {
    "from": 68,
    "label": "initializes",
    "to": 66
  }, {
    "from": 68,
    "label": "initializes",
    "to": 66
  }, {
    "from": 68,
    "label": "initializes",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "view_image",
    "type": "module"
  }, {
    "id": 2,
    "text": "function View_Image(image, title)\r\n  ret = false\r\n\r\n  cnv = iup.canvas{}\r\n  \r\n  function cnv:action()\r\n    local canvas = dlg.canvas\r\n    local image = dlg.image\r\n    \r\n    if (not canvas) then return end\r\n    \r\n    canvas:Activate()\r\n    cw, ch = canvas:GetSize()\r\n    iw = image:Width()\r\n    ih = image:Height()\r\n    \r\n    if (iw > ih) then\r\n      h = iw/iw * ch\r\n      y = (ch-h)/2\r\n      x = 0\r\n      w = cw\r\n    else\r\n      w = iw/ih * ch\r\n      x = (cw-w)/2\r\n      y = 0\r\n      h = ch\r\n    end\r\n    \r\n    canvas:Clear()\r\n    image:cdCanvasPutImageRect(canvas, x, y, w, h, 0, 0, 0, 0)\r\n  end\r\n\r\n  function cnv:button_cb()\r\n    dlg:close_cb()\r\n    ret = true\r\n    return iup.CLOSE\r\n  end\r\n  \r\n  dlg = iup.dialog{iup.vbox{cnv, iup.label{title=\"Click to accept or press Esc to abort.\"}}}\r\n  dlg.placement=\"maximized\"\r\n  dlg.title = title\r\n  dlg.cnv = cnv\r\n  dlg.image = image\r\n  \r\n  function dlg:k_any(c)\r\n  print(\"K_any(\"..c..\")\")\r\n    if (c == iup.K_ESC) then\r\n      dlg:close_cb()\r\n      return iup.CLOSE\r\n    end\r\n  end\r\n\r\n  function dlg:close_cb()\r\n    local canvas = self.canvas\r\n    if canvas then canvas:Kill() end\r\n  end\r\n\r\n  function dlg:map_cb()\r\n    canvas = cd.CreateCanvas(cd.IUP, self.cnv)\r\n    self.canvas = canvas\r\n  end\r\n  \r\n  dlg:show()\r\n  iup.MainLoop()\r\n  dlg:destroy()\r\n  \r\n  return ret\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "ret = false",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "cnv = iup.canvas{}",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "function cnv:action()\r\n    local canvas = dlg.canvas\r\n    local image = dlg.image\r\n    \r\n    if (not canvas) then return end\r\n    \r\n    canvas:Activate()\r\n    cw, ch = canvas:GetSize()\r\n    iw = image:Width()\r\n    ih = image:Height()\r\n    \r\n    if (iw > ih) then\r\n      h = iw/iw * ch\r\n      y = (ch-h)/2\r\n      x = 0\r\n      w = cw\r\n    else\r\n      w = iw/ih * ch\r\n      x = (cw-w)/2\r\n      y = 0\r\n      h = ch\r\n    end\r\n    \r\n    canvas:Clear()\r\n    image:cdCanvasPutImageRect(canvas, x, y, w, h, 0, 0, 0, 0)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 6,
    "text": "local canvas = dlg.canvas",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local image = dlg.image",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if (not canvas) then return end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "canvas:Activate()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "cw, ch = canvas:GetSize()",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "iw = image:Width()",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "ih = image:Height()",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if (iw > ih) then\r\n      h = iw/iw * ch\r\n      y = (ch-h)/2\r\n      x = 0\r\n      w = cw\r\n    else\r\n      w = iw/ih * ch\r\n      x = (cw-w)/2\r\n      y = 0\r\n      h = ch\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "h = iw/iw * ch",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "y = (ch-h)/2",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "x = 0",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "w = cw",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "w = iw/ih * ch",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "x = (cw-w)/2",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "y = 0",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "h = ch",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "canvas:Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "image:cdCanvasPutImageRect(canvas, x, y, w, h, 0, 0, 0, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "function cnv:button_cb()\r\n    dlg:close_cb()\r\n    ret = true\r\n    return iup.CLOSE\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 26,
    "text": "dlg:close_cb()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "ret = true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "dlg = iup.dialog{iup.vbox{cnv, iup.label{title=\"Click to accept or press Esc to abort.\"}}}",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "dlg.placement=\"maximized\"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "dlg.title = title",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "dlg.cnv = cnv",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "dlg.image = image",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "function dlg:k_any(c)\r\n  print(\"K_any(\"..c..\")\")\r\n    if (c == iup.K_ESC) then\r\n      dlg:close_cb()\r\n      return iup.CLOSE\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 34,
    "text": "print(\"K_any(\"..c..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if (c == iup.K_ESC) then\r\n      dlg:close_cb()\r\n      return iup.CLOSE\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "function dlg:close_cb()\r\n    local canvas = self.canvas\r\n    if canvas then canvas:Kill() end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 37,
    "text": "local canvas = self.canvas",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if canvas then canvas:Kill() end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "canvas:Kill()",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "function dlg:map_cb()\r\n    canvas = cd.CreateCanvas(cd.IUP, self.cnv)\r\n    self.canvas = canvas\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 41,
    "text": "canvas = cd.CreateCanvas(cd.IUP, self.cnv)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "self.canvas = canvas",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "dlg:show()",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "iup.MainLoop()",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "dlg:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function cnv:action()\r\n    local canvas = dlg.canvas\r\n    local image = dlg.image\r\n    \r\n    if (not canvas) then return end\r\n    \r\n    canvas:Activate()\r\n    cw, ch = canvas:GetSize()\r\n    iw = image:Width()\r\n    ih = image:Height()\r\n    \r\n    if (iw > ih) then\r\n      h = iw/iw * ch\r\n      y = (ch-h)/2\r\n      x = 0\r\n      w = cw\r\n    else\r\n      w = iw/ih * ch\r\n      x = (cw-w)/2\r\n      y = 0\r\n      h = ch\r\n    end\r\n    \r\n    canvas:Clear()\r\n    image:cdCanvasPutImageRect(canvas, x, y, w, h, 0, 0, 0, 0)\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function cnv:button_cb()\r\n    dlg:close_cb()\r\n    ret = true\r\n    return iup.CLOSE\r\n  end",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function dlg:k_any(c)\r\n  print(\"K_any(\"..c..\")\")\r\n    if (c == iup.K_ESC) then\r\n      dlg:close_cb()\r\n      return iup.CLOSE\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function dlg:close_cb()\r\n    local canvas = self.canvas\r\n    if canvas then canvas:Kill() end\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function dlg:map_cb()\r\n    canvas = cd.CreateCanvas(cd.IUP, self.cnv)\r\n    self.canvas = canvas\r\n  end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "",
    "type": "function container"
  }, {
    "id": 58,
    "text": "print",
    "type": "global function"
  }, {
    "id": 59,
    "text": "dialog",
    "type": "global function"
  }, {
    "id": 60,
    "text": "MainLoop",
    "type": "global function"
  }, {
    "id": 61,
    "text": "CreateCanvas",
    "type": "global function"
  }, {
    "id": 62,
    "text": "vbox",
    "type": "global function"
  }, {
    "id": 63,
    "text": "canvas",
    "type": "global function"
  }, {
    "id": 64,
    "text": "label",
    "type": "global function"
  }, {
    "id": 65,
    "text": "require",
    "type": "global function"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "variable container"
  }, {
    "id": 68,
    "text": "",
    "type": "require container"
  } ]
}