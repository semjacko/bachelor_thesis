{
  "_filename": "engine.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/remdebug/src/remdebug/engine.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 23
  }, {
    "from": 26,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 16
  }, {
    "from": 31,
    "label": "has",
    "to": 17
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 21
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 24
  }, {
    "from": 31,
    "label": "has",
    "to": 25
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 21
  }, {
    "from": 36,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 24
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 31,
    "label": "has",
    "to": 12
  }, {
    "from": 31,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 12
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 12
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 55,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 54,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 84
  }, {
    "from": 86,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 88
  }, {
    "from": 80,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 89,
    "label": "has",
    "to": 95
  }, {
    "from": 89,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 89,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 100
  }, {
    "from": 80,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 101,
    "label": "has",
    "to": 105
  }, {
    "from": 101,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 107
  }, {
    "from": 80,
    "label": "has",
    "to": 108
  }, {
    "from": 80,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 84
  }, {
    "from": 109,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 111
  }, {
    "from": 80,
    "label": "has",
    "to": 112
  }, {
    "from": 80,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 118
  }, {
    "from": 80,
    "label": "has",
    "to": 111
  }, {
    "from": 80,
    "label": "has",
    "to": 112
  }, {
    "from": 80,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 119
  }, {
    "from": 80,
    "label": "has",
    "to": 120
  }, {
    "from": 80,
    "label": "has",
    "to": 111
  }, {
    "from": 80,
    "label": "has",
    "to": 112
  }, {
    "from": 80,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 74,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 12
  }, {
    "from": 131,
    "label": "has",
    "to": 137
  }, {
    "from": 128,
    "label": "has",
    "to": 12
  }, {
    "from": 128,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 133
  }, {
    "from": 139,
    "label": "has",
    "to": 134
  }, {
    "from": 139,
    "label": "has",
    "to": 135
  }, {
    "from": 139,
    "label": "has",
    "to": 136
  }, {
    "from": 139,
    "label": "has",
    "to": 12
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 64
  }, {
    "from": 141,
    "label": "has",
    "to": 65
  }, {
    "from": 141,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 54,
    "label": "calls",
    "to": 46
  }, {
    "from": 46,
    "label": "calls",
    "to": 182
  }, {
    "from": 143,
    "label": "calls",
    "to": 158
  }, {
    "from": 54,
    "label": "calls",
    "to": 159
  }, {
    "from": 54,
    "label": "calls",
    "to": 159
  }, {
    "from": 128,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 160
  }, {
    "from": 74,
    "label": "calls",
    "to": 162
  }, {
    "from": 74,
    "label": "calls",
    "to": 162
  }, {
    "from": 74,
    "label": "calls",
    "to": 162
  }, {
    "from": 74,
    "label": "calls",
    "to": 7
  }, {
    "from": 54,
    "label": "calls",
    "to": 165
  }, {
    "from": 74,
    "label": "calls",
    "to": 165
  }, {
    "from": 74,
    "label": "calls",
    "to": 165
  }, {
    "from": 74,
    "label": "calls",
    "to": 165
  }, {
    "from": 74,
    "label": "calls",
    "to": 165
  }, {
    "from": 74,
    "label": "calls",
    "to": 165
  }, {
    "from": 74,
    "label": "calls",
    "to": 165
  }, {
    "from": 74,
    "label": "calls",
    "to": 167
  }, {
    "from": 46,
    "label": "calls",
    "to": 170
  }, {
    "from": 14,
    "label": "calls",
    "to": 149
  }, {
    "from": 31,
    "label": "calls",
    "to": 149
  }, {
    "from": 74,
    "label": "calls",
    "to": 173
  }, {
    "from": 54,
    "label": "calls",
    "to": 176
  }, {
    "from": 128,
    "label": "calls",
    "to": 176
  }, {
    "from": 143,
    "label": "calls",
    "to": 178
  }, {
    "from": 128,
    "label": "calls",
    "to": 146
  }, {
    "from": 40,
    "label": "calls",
    "to": 179
  }, {
    "from": 14,
    "label": "calls",
    "to": 151
  }, {
    "from": 31,
    "label": "calls",
    "to": 151
  }, {
    "from": 40,
    "label": "calls",
    "to": 157
  }, {
    "from": 14,
    "label": "calls",
    "to": 150
  }, {
    "from": 31,
    "label": "calls",
    "to": 150
  }, {
    "from": 54,
    "label": "calls",
    "to": 150
  }, {
    "from": 74,
    "label": "calls",
    "to": 168
  }, {
    "from": 74,
    "label": "calls",
    "to": 168
  }, {
    "from": 74,
    "label": "calls",
    "to": 168
  }, {
    "from": 14,
    "label": "calls",
    "to": 147
  }, {
    "from": 54,
    "label": "calls",
    "to": 14
  }, {
    "from": 54,
    "label": "calls",
    "to": 11
  }, {
    "from": 54,
    "label": "calls",
    "to": 175
  }, {
    "from": 54,
    "label": "calls",
    "to": 174
  }, {
    "from": 74,
    "label": "calls",
    "to": 174
  }, {
    "from": 14,
    "label": "calls",
    "to": 156
  }, {
    "from": 54,
    "label": "calls",
    "to": 171
  }, {
    "from": 74,
    "label": "calls",
    "to": 171
  }, {
    "from": 128,
    "label": "calls",
    "to": 148
  }, {
    "from": 46,
    "label": "calls",
    "to": 40
  }, {
    "from": 46,
    "label": "calls",
    "to": 40
  }, {
    "from": 54,
    "label": "calls",
    "to": 155
  }, {
    "from": 40,
    "label": "calls",
    "to": 172
  }, {
    "from": 46,
    "label": "calls",
    "to": 172
  }, {
    "from": 46,
    "label": "calls",
    "to": 169
  }, {
    "from": 74,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 180
  }, {
    "from": 143,
    "label": "calls",
    "to": 181
  }, {
    "from": 143,
    "label": "calls",
    "to": 181
  }, {
    "from": 143,
    "label": "calls",
    "to": 181
  }, {
    "from": 31,
    "label": "calls",
    "to": 177
  }, {
    "from": 46,
    "label": "calls",
    "to": 166
  }, {
    "from": 74,
    "label": "calls",
    "to": 166
  }, {
    "from": 128,
    "label": "calls",
    "to": 153
  }, {
    "from": 74,
    "label": "calls",
    "to": 164
  }, {
    "from": 74,
    "label": "calls",
    "to": 164
  }, {
    "from": 74,
    "label": "calls",
    "to": 164
  }, {
    "from": 74,
    "label": "calls",
    "to": 164
  }, {
    "from": 74,
    "label": "calls",
    "to": 164
  }, {
    "from": 128,
    "label": "calls",
    "to": 164
  }, {
    "from": 31,
    "label": "calls",
    "to": 163
  }, {
    "from": 31,
    "label": "calls",
    "to": 163
  }, {
    "from": 54,
    "label": "calls",
    "to": 31
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 1,
    "label": "contains",
    "to": 143
  }, {
    "from": 143,
    "label": "declares",
    "to": 2
  }, {
    "from": 143,
    "label": "declares",
    "to": 7
  }, {
    "from": 143,
    "label": "declares",
    "to": 11
  }, {
    "from": 143,
    "label": "declares",
    "to": 14
  }, {
    "from": 143,
    "label": "declares",
    "to": 31
  }, {
    "from": 143,
    "label": "declares",
    "to": 40
  }, {
    "from": 143,
    "label": "declares",
    "to": 46
  }, {
    "from": 143,
    "label": "declares",
    "to": 54
  }, {
    "from": 143,
    "label": "declares",
    "to": 74
  }, {
    "from": 143,
    "label": "declares",
    "to": 122
  }, {
    "from": 143,
    "label": "declares",
    "to": 128
  }, {
    "from": 143,
    "label": "declares",
    "to": 139
  }, {
    "from": 143,
    "label": "declares",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 128
  }, {
    "from": 1,
    "label": "contains",
    "to": 183
  }, {
    "from": 1,
    "label": "contains",
    "to": 184
  }, {
    "from": 183,
    "label": "initializes",
    "to": 185
  }, {
    "from": 183,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 187,
    "label": "assigns",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 183,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 183,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 183,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 183,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 183,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 183,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 183,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 183,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 183,
    "label": "initializes",
    "to": 208
  }, {
    "from": 183,
    "label": "initializes",
    "to": 209
  }, {
    "from": 183,
    "label": "initializes",
    "to": 210
  }, {
    "from": 183,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 184,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "requires",
    "to": 152
  }, {
    "from": 184,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "requires",
    "to": 154
  }, {
    "from": 184,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "requires",
    "to": 145
  }, {
    "from": 216,
    "label": "requires",
    "to": 1
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 141
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "engine",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function set_breakpoint(file, line)\r\n  if not breakpoints[file] then\r\n    breakpoints[file] = {}\r\n  end\r\n  breakpoints[file][line] = true  \r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if not breakpoints[file] then\r\n    breakpoints[file] = {}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "breakpoints[file] = {}",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "breakpoints[file][line] = true",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function remove_breakpoint(file, line)\r\n  if breakpoints[file] then\r\n    breakpoints[file][line] = nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if breakpoints[file] then\r\n    breakpoints[file][line] = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "breakpoints[file][line] = nil",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function has_breakpoint(file, line)\r\n  return breakpoints[file] and breakpoints[file][line]\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function restore_vars(vars)\r\n  if type(vars) ~= 'table' then return end\r\n  local func = debug.getinfo(3, \"f\").func\r\n  local i = 1\r\n  local written_vars = {}\r\n  while true do\r\n    local name = debug.getlocal(3, i)\r\n    if not name then break end\r\n    debug.setlocal(3, i, vars[name])\r\n    written_vars[name] = true\r\n    i = i + 1\r\n  end\r\n  i = 1\r\n  while true do\r\n    local name = debug.getupvalue(func, i)\r\n    if not name then break end\r\n    if not written_vars[name] then\r\n      debug.setupvalue(func, i, vars[name])\r\n      written_vars[name] = true\r\n    end\r\n    i = i + 1\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if type(vars) ~= 'table' then return end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local func = debug.getinfo(3, \"f\").func",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local written_vars = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "while true do\r\n    local name = debug.getlocal(3, i)\r\n    if not name then break end\r\n    debug.setlocal(3, i, vars[name])\r\n    written_vars[name] = true\r\n    i = i + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 20,
    "text": "local name = debug.getlocal(3, i)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not name then break end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "debug.setlocal(3, i, vars[name])",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "written_vars[name] = true",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "i = 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "while true do\r\n    local name = debug.getupvalue(func, i)\r\n    if not name then break end\r\n    if not written_vars[name] then\r\n      debug.setupvalue(func, i, vars[name])\r\n      written_vars[name] = true\r\n    end\r\n    i = i + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 27,
    "text": "local name = debug.getupvalue(func, i)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if not written_vars[name] then\r\n      debug.setupvalue(func, i, vars[name])\r\n      written_vars[name] = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "debug.setupvalue(func, i, vars[name])",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function capture_vars()\r\n  local vars = {}\r\n  local func = debug.getinfo(3, \"f\").func\r\n  local i = 1\r\n  while true do\r\n    local name, value = debug.getupvalue(func, i)\r\n    if not name then break end\r\n    vars[name] = value\r\n    i = i + 1\r\n  end\r\n  i = 1\r\n  while true do\r\n    local name, value = debug.getlocal(3, i)\r\n    if not name then break end\r\n    vars[name] = value\r\n    i = i + 1\r\n  end\r\n  setmetatable(vars, { __index = getfenv(func), __newindex = getfenv(func) })\r\n  return vars\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local vars = {}",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "while true do\r\n    local name, value = debug.getupvalue(func, i)\r\n    if not name then break end\r\n    vars[name] = value\r\n    i = i + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 34,
    "text": "local name, value = debug.getupvalue(func, i)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "vars[name] = value",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "while true do\r\n    local name, value = debug.getlocal(3, i)\r\n    if not name then break end\r\n    vars[name] = value\r\n    i = i + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 37,
    "text": "local name, value = debug.getlocal(3, i)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "setmetatable(vars, { __index = getfenv(func), __newindex = getfenv(func) })",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function break_dir(path) \r\n  local paths = {}\r\n  path = string.gsub(path, \"\\\\\", \"/\")\r\n  for w in string.gfind(path, \"[^\\/]+\") do\r\n    table.insert(paths, w)\r\n  end\r\n  return paths\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local paths = {}",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "path = string.gsub(path, \"\\\\\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "for w in string.gfind(path, \"[^\\/]+\") do\r\n    table.insert(paths, w)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "table.insert(paths, w)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function merge_paths(path1, path2)\r\n  local paths1 = break_dir(path1)\r\n  local paths2 = break_dir(path2)\r\n  for i, path in ipairs(paths2) do\r\n    if path == \"..\" then\r\n      table.remove(paths1, table.getn(paths1))\r\n    elseif path ~= \".\" then\r\n      table.insert(paths1, path)\r\n    end\r\n  end\r\n  return table.concat(paths1, \"/\")\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local paths1 = break_dir(path1)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local paths2 = break_dir(path2)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "for i, path in ipairs(paths2) do\r\n    if path == \"..\" then\r\n      table.remove(paths1, table.getn(paths1))\r\n    elseif path ~= \".\" then\r\n      table.insert(paths1, path)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 50,
    "text": "if path == \"..\" then\r\n      table.remove(paths1, table.getn(paths1))\r\n    elseif path ~= \".\" then\r\n      table.insert(paths1, path)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "table.remove(paths1, table.getn(paths1))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "table.insert(paths1, path)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function debug_hook(event, line)\r\n  if event == \"call\" then\r\n    stack_level = stack_level + 1\r\n  elseif event == \"return\" then\r\n    stack_level = stack_level - 1\r\n  else\r\n    local file = debug.getinfo(2, \"S\").source\r\n    if string.find(file, \"@\") == 1 then\r\n      file = string.sub(file, 2)\r\n    end\r\n    file = merge_paths(lfs.currentdir(), file)\r\n    local vars = capture_vars()\r\n    table.foreach(watches, function (index, value)\r\n      setfenv(value, vars)\r\n      local status, res = pcall(value)\r\n      if status and res then\r\n        coroutine.resume(coro_debugger, events.WATCH, vars, file, line, index)\r\n      end\r\n    end)\r\n    if step_into or (step_over and stack_level <= step_level) or has_breakpoint(file, line) then\r\n      step_into = false\r\n      step_over = false\r\n      coroutine.resume(coro_debugger, events.BREAK, vars, file, line)\r\n      restore_vars(vars)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "if event == \"call\" then\r\n    stack_level = stack_level + 1\r\n  elseif event == \"return\" then\r\n    stack_level = stack_level - 1\r\n  else\r\n    local file = debug.getinfo(2, \"S\").source\r\n    if string.find(file, \"@\") == 1 then\r\n      file = string.sub(file, 2)\r\n    end\r\n    file = merge_paths(lfs.currentdir(), file)\r\n    local vars = capture_vars()\r\n    table.foreach(watches, function (index, value)\r\n      setfenv(value, vars)\r\n      local status, res = pcall(value)\r\n      if status and res then\r\n        coroutine.resume(coro_debugger, events.WATCH, vars, file, line, index)\r\n      end\r\n    end)\r\n    if step_into or (step_over and stack_level <= step_level) or has_breakpoint(file, line) then\r\n      step_into = false\r\n      step_over = false\r\n      coroutine.resume(coro_debugger, events.BREAK, vars, file, line)\r\n      restore_vars(vars)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "stack_level = stack_level + 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "stack_level = stack_level - 1",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "local file = debug.getinfo(2, \"S\").source",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if string.find(file, \"@\") == 1 then\r\n      file = string.sub(file, 2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "file = string.sub(file, 2)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "file = merge_paths(lfs.currentdir(), file)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "local vars = capture_vars()",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "table.foreach(watches, function (index, value)\r\n      setfenv(value, vars)\r\n      local status, res = pcall(value)\r\n      if status and res then\r\n        coroutine.resume(coro_debugger, events.WATCH, vars, file, line, index)\r\n      end\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "setfenv(value, vars)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local status, res = pcall(value)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if status and res then\r\n        coroutine.resume(coro_debugger, events.WATCH, vars, file, line, index)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "coroutine.resume(coro_debugger, events.WATCH, vars, file, line, index)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "if step_into or (step_over and stack_level <= step_level) or has_breakpoint(file, line) then\r\n      step_into = false\r\n      step_over = false\r\n      coroutine.resume(coro_debugger, events.BREAK, vars, file, line)\r\n      restore_vars(vars)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "step_into = false",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "step_over = false",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "coroutine.resume(coro_debugger, events.BREAK, vars, file, line)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "restore_vars(vars)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "local function debugger_loop(server)\r\n  local command\r\n  local eval_env = {}\r\n  \r\n  while true do\r\n    local line, status = server:receive()\r\n    command = string.sub(line, string.find(line, \"^[A-Z]+\"))\r\n    if command == \"SETB\" then\r\n      local _, _, _, filename, line = string.find(line, \"^([A-Z]+)%s+([%w%p]+)%s+(%d+)$\")\r\n      if filename and line then\r\n        set_breakpoint(filename, tonumber(line))\r\n        server:send(\"200 OK\\n\")\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"DELB\" then\r\n      local _, _, _, filename, line = string.find(line, \"^([A-Z]+)%s+([%w%p]+)%s+(%d+)$\")\r\n      if filename and line then\r\n        remove_breakpoint(filename, tonumber(line))\r\n        server:send(\"200 OK\\n\")\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"EXEC\" then\r\n      local _, _, chunk = string.find(line, \"^[A-Z]+%s+(.+)$\")\r\n      if chunk then \r\n        local func = loadstring(chunk)\r\n        local status, res\r\n        if func then\r\n          setfenv(func, eval_env)\r\n          status, res = xpcall(func, debug.traceback)\r\n        end\r\n        res = tostring(res)\r\n        if status then\r\n          server:send(\"200 OK \" .. string.len(res) .. \"\\n\") \r\n          server:send(res)\r\n        else\r\n          server:send(\"401 Error in Expression \" .. string.len(res) .. \"\\n\")\r\n          server:send(res)\r\n        end\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"SETW\" then\r\n      local _, _, exp = string.find(line, \"^[A-Z]+%s+(.+)$\")\r\n      if exp then \r\n        local func = loadstring(\"return(\" .. exp .. \")\")\r\n        local newidx = table.getn(watches) + 1\r\n        watches[newidx] = func\r\n        table.setn(watches, newidx)\r\n        server:send(\"200 OK \" .. newidx .. \"\\n\") \r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"DELW\" then\r\n      local _, _, index = string.find(line, \"^[A-Z]+%s+(%d+)$\")\r\n      index = tonumber(index)\r\n      if index then\r\n        watches[index] = nil\r\n        server:send(\"200 OK\\n\") \r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"RUN\" then\r\n      server:send(\"200 OK\\n\")\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    elseif command == \"STEP\" then\r\n      server:send(\"200 OK\\n\")\r\n      step_into = true\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    elseif command == \"OVER\" then\r\n      server:send(\"200 OK\\n\")\r\n      step_over = true\r\n      step_level = stack_level\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    else\r\n      server:send(\"400 Bad Request\\n\")\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local command",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local eval_env = {}",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "while true do\r\n    local line, status = server:receive()\r\n    command = string.sub(line, string.find(line, \"^[A-Z]+\"))\r\n    if command == \"SETB\" then\r\n      local _, _, _, filename, line = string.find(line, \"^([A-Z]+)%s+([%w%p]+)%s+(%d+)$\")\r\n      if filename and line then\r\n        set_breakpoint(filename, tonumber(line))\r\n        server:send(\"200 OK\\n\")\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"DELB\" then\r\n      local _, _, _, filename, line = string.find(line, \"^([A-Z]+)%s+([%w%p]+)%s+(%d+)$\")\r\n      if filename and line then\r\n        remove_breakpoint(filename, tonumber(line))\r\n        server:send(\"200 OK\\n\")\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"EXEC\" then\r\n      local _, _, chunk = string.find(line, \"^[A-Z]+%s+(.+)$\")\r\n      if chunk then \r\n        local func = loadstring(chunk)\r\n        local status, res\r\n        if func then\r\n          setfenv(func, eval_env)\r\n          status, res = xpcall(func, debug.traceback)\r\n        end\r\n        res = tostring(res)\r\n        if status then\r\n          server:send(\"200 OK \" .. string.len(res) .. \"\\n\") \r\n          server:send(res)\r\n        else\r\n          server:send(\"401 Error in Expression \" .. string.len(res) .. \"\\n\")\r\n          server:send(res)\r\n        end\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"SETW\" then\r\n      local _, _, exp = string.find(line, \"^[A-Z]+%s+(.+)$\")\r\n      if exp then \r\n        local func = loadstring(\"return(\" .. exp .. \")\")\r\n        local newidx = table.getn(watches) + 1\r\n        watches[newidx] = func\r\n        table.setn(watches, newidx)\r\n        server:send(\"200 OK \" .. newidx .. \"\\n\") \r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"DELW\" then\r\n      local _, _, index = string.find(line, \"^[A-Z]+%s+(%d+)$\")\r\n      index = tonumber(index)\r\n      if index then\r\n        watches[index] = nil\r\n        server:send(\"200 OK\\n\") \r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"RUN\" then\r\n      server:send(\"200 OK\\n\")\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    elseif command == \"STEP\" then\r\n      server:send(\"200 OK\\n\")\r\n      step_into = true\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    elseif command == \"OVER\" then\r\n      server:send(\"200 OK\\n\")\r\n      step_over = true\r\n      step_level = stack_level\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    else\r\n      server:send(\"400 Bad Request\\n\")\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 78,
    "text": "local line, status = server:receive()",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "command = string.sub(line, string.find(line, \"^[A-Z]+\"))",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if command == \"SETB\" then\r\n      local _, _, _, filename, line = string.find(line, \"^([A-Z]+)%s+([%w%p]+)%s+(%d+)$\")\r\n      if filename and line then\r\n        set_breakpoint(filename, tonumber(line))\r\n        server:send(\"200 OK\\n\")\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"DELB\" then\r\n      local _, _, _, filename, line = string.find(line, \"^([A-Z]+)%s+([%w%p]+)%s+(%d+)$\")\r\n      if filename and line then\r\n        remove_breakpoint(filename, tonumber(line))\r\n        server:send(\"200 OK\\n\")\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"EXEC\" then\r\n      local _, _, chunk = string.find(line, \"^[A-Z]+%s+(.+)$\")\r\n      if chunk then \r\n        local func = loadstring(chunk)\r\n        local status, res\r\n        if func then\r\n          setfenv(func, eval_env)\r\n          status, res = xpcall(func, debug.traceback)\r\n        end\r\n        res = tostring(res)\r\n        if status then\r\n          server:send(\"200 OK \" .. string.len(res) .. \"\\n\") \r\n          server:send(res)\r\n        else\r\n          server:send(\"401 Error in Expression \" .. string.len(res) .. \"\\n\")\r\n          server:send(res)\r\n        end\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"SETW\" then\r\n      local _, _, exp = string.find(line, \"^[A-Z]+%s+(.+)$\")\r\n      if exp then \r\n        local func = loadstring(\"return(\" .. exp .. \")\")\r\n        local newidx = table.getn(watches) + 1\r\n        watches[newidx] = func\r\n        table.setn(watches, newidx)\r\n        server:send(\"200 OK \" .. newidx .. \"\\n\") \r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"DELW\" then\r\n      local _, _, index = string.find(line, \"^[A-Z]+%s+(%d+)$\")\r\n      index = tonumber(index)\r\n      if index then\r\n        watches[index] = nil\r\n        server:send(\"200 OK\\n\") \r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end\r\n    elseif command == \"RUN\" then\r\n      server:send(\"200 OK\\n\")\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    elseif command == \"STEP\" then\r\n      server:send(\"200 OK\\n\")\r\n      step_into = true\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    elseif command == \"OVER\" then\r\n      server:send(\"200 OK\\n\")\r\n      step_over = true\r\n      step_level = stack_level\r\n      local ev, vars, file, line, idx_watch = coroutine.yield()\r\n      eval_env = vars\r\n      if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end\r\n    else\r\n      server:send(\"400 Bad Request\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "local _, _, _, filename, line = string.find(line, \"^([A-Z]+)%s+([%w%p]+)%s+(%d+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if filename and line then\r\n        set_breakpoint(filename, tonumber(line))\r\n        server:send(\"200 OK\\n\")\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "set_breakpoint(filename, tonumber(line))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "server:send(\"200 OK\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "server:send(\"400 Bad Request\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "if filename and line then\r\n        remove_breakpoint(filename, tonumber(line))\r\n        server:send(\"200 OK\\n\")\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "remove_breakpoint(filename, tonumber(line))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "local _, _, chunk = string.find(line, \"^[A-Z]+%s+(.+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if chunk then \r\n        local func = loadstring(chunk)\r\n        local status, res\r\n        if func then\r\n          setfenv(func, eval_env)\r\n          status, res = xpcall(func, debug.traceback)\r\n        end\r\n        res = tostring(res)\r\n        if status then\r\n          server:send(\"200 OK \" .. string.len(res) .. \"\\n\") \r\n          server:send(res)\r\n        else\r\n          server:send(\"401 Error in Expression \" .. string.len(res) .. \"\\n\")\r\n          server:send(res)\r\n        end\r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "local func = loadstring(chunk)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local status, res",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if func then\r\n          setfenv(func, eval_env)\r\n          status, res = xpcall(func, debug.traceback)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "setfenv(func, eval_env)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "status, res = xpcall(func, debug.traceback)",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "res = tostring(res)",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if status then\r\n          server:send(\"200 OK \" .. string.len(res) .. \"\\n\") \r\n          server:send(res)\r\n        else\r\n          server:send(\"401 Error in Expression \" .. string.len(res) .. \"\\n\")\r\n          server:send(res)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "server:send(\"200 OK \" .. string.len(res) .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "server:send(res)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "server:send(\"401 Error in Expression \" .. string.len(res) .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "local _, _, exp = string.find(line, \"^[A-Z]+%s+(.+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if exp then \r\n        local func = loadstring(\"return(\" .. exp .. \")\")\r\n        local newidx = table.getn(watches) + 1\r\n        watches[newidx] = func\r\n        table.setn(watches, newidx)\r\n        server:send(\"200 OK \" .. newidx .. \"\\n\") \r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "local func = loadstring(\"return(\" .. exp .. \")\")",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local newidx = table.getn(watches) + 1",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "watches[newidx] = func",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "table.setn(watches, newidx)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "server:send(\"200 OK \" .. newidx .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "local _, _, index = string.find(line, \"^[A-Z]+%s+(%d+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "index = tonumber(index)",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if index then\r\n        watches[index] = nil\r\n        server:send(\"200 OK\\n\") \r\n      else\r\n        server:send(\"400 Bad Request\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "watches[index] = nil",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "local ev, vars, file, line, idx_watch = coroutine.yield()",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "eval_env = vars",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if ev == events.BREAK then\r\n        server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")\r\n      elseif ev == events.WATCH then\r\n        server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")\r\n      else\r\n        server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")\r\n        server:send(file)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "server:send(\"202 Paused \" .. file .. \" \" .. line .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "server:send(\"203 Paused \" .. file .. \" \" .. line .. \" \" .. idx_watch .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "server:send(\"401 Error in Execution \" .. string.len(file) .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "server:send(file)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "step_into = true",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "step_over = true",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "step_level = stack_level",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function config(tab)\r\n  if tab.host then\r\n    controller_host = tab.host\r\n  end\r\n  if tab.port then\r\n    controller_port = tab.port\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "if tab.host then\r\n    controller_host = tab.host\r\n  end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "controller_host = tab.host",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if tab.port then\r\n    controller_port = tab.port\r\n  end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "controller_port = tab.port",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function start()\r\n  pcall(require, \"remdebug.config\")\r\n  local server = socket.connect(controller_host, controller_port)\r\n  if server then\r\n    _TRACEBACK = function (message) \r\n      local err = debug.traceback(message)\r\n      server:send(\"401 Error in Execution \" .. string.len(err) .. \"\\n\")\r\n      server:send(err)\r\n      server:close()\r\n      return err\r\n    end\r\n    debug.sethook(debug_hook, \"lcr\")\r\n    return coroutine.resume(coro_debugger, server)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "pcall(require, \"remdebug.config\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local server = socket.connect(controller_host, controller_port)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if server then\r\n    _TRACEBACK = function (message) \r\n      local err = debug.traceback(message)\r\n      server:send(\"401 Error in Execution \" .. string.len(err) .. \"\\n\")\r\n      server:send(err)\r\n      server:close()\r\n      return err\r\n    end\r\n    debug.sethook(debug_hook, \"lcr\")\r\n    return coroutine.resume(coro_debugger, server)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "_TRACEBACK = function (message) \r\n      local err = debug.traceback(message)\r\n      server:send(\"401 Error in Execution \" .. string.len(err) .. \"\\n\")\r\n      server:send(err)\r\n      server:close()\r\n      return err\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "local err = debug.traceback(message)",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "server:send(\"401 Error in Execution \" .. string.len(err) .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "server:send(err)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "server:close()",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "debug.sethook(debug_hook, \"lcr\")",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function (message) \r\n      local err = debug.traceback(message)\r\n      server:send(\"401 Error in Execution \" .. string.len(err) .. \"\\n\")\r\n      server:send(err)\r\n      server:close()\r\n      return err\r\n    end",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function (index, value)\r\n      setfenv(value, vars)\r\n      local status, res = pcall(value)\r\n      if status and res then\r\n        coroutine.resume(coro_debugger, events.WATCH, vars, file, line, index)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "",
    "type": "function container"
  }, {
    "id": 144,
    "text": "",
    "type": "function container"
  }, {
    "id": 145,
    "text": "debug",
    "type": "module"
  }, {
    "id": 146,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 147,
    "text": "setlocal",
    "type": "global function"
  }, {
    "id": 148,
    "text": "sethook",
    "type": "global function"
  }, {
    "id": 149,
    "text": "getlocal",
    "type": "global function"
  }, {
    "id": 150,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 151,
    "text": "getupvalue",
    "type": "global function"
  }, {
    "id": 152,
    "text": "socket",
    "type": "module"
  }, {
    "id": 153,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 154,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 155,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 156,
    "text": "setupvalue",
    "type": "global function"
  }, {
    "id": 157,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 158,
    "text": "create",
    "type": "global function"
  }, {
    "id": 159,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 160,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 161,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 162,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 163,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 164,
    "text": "len",
    "type": "global function"
  }, {
    "id": 165,
    "text": "find",
    "type": "global function"
  }, {
    "id": 166,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 167,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 168,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 169,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 170,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 171,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 172,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 173,
    "text": "setn",
    "type": "global function"
  }, {
    "id": 174,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 175,
    "text": "foreach",
    "type": "global function"
  }, {
    "id": 176,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 177,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 178,
    "text": "module",
    "type": "global function"
  }, {
    "id": 179,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 180,
    "text": "type",
    "type": "global function"
  }, {
    "id": 181,
    "text": "require",
    "type": "global function"
  }, {
    "id": 182,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 183,
    "text": "",
    "type": "variable container"
  }, {
    "id": 184,
    "text": "",
    "type": "require container"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 188,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 189,
    "text": "",
    "type": "number"
  }, {
    "id": 190,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 191,
    "text": "",
    "type": "number"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 194,
    "text": "",
    "type": "local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 196,
    "text": "",
    "type": "local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "boolean"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "boolean"
  }, {
    "id": 200,
    "text": "",
    "type": "local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "number"
  }, {
    "id": 202,
    "text": "",
    "type": "local variable"
  }, {
    "id": 203,
    "text": "",
    "type": "number"
  }, {
    "id": 204,
    "text": "",
    "type": "local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "string"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "number"
  }, {
    "id": 208,
    "text": "",
    "type": "global variable"
  }, {
    "id": 209,
    "text": "",
    "type": "global variable"
  }, {
    "id": 210,
    "text": "",
    "type": "global variable"
  }, {
    "id": 211,
    "text": "",
    "type": "global variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "global variable"
  } ]
}