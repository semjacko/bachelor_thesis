{
  "_filename": "time_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luasystem/spec/time_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 3
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 13
  }, {
    "from": 27,
    "label": "has",
    "to": 14
  }, {
    "from": 27,
    "label": "has",
    "to": 6
  }, {
    "from": 27,
    "label": "has",
    "to": 15
  }, {
    "from": 27,
    "label": "has",
    "to": 16
  }, {
    "from": 27,
    "label": "has",
    "to": 17
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 20
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 28,
    "label": "has",
    "to": 22
  }, {
    "from": 28,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 2
  }, {
    "from": 30,
    "label": "declares",
    "to": 12
  }, {
    "from": 30,
    "label": "declares",
    "to": 19
  }, {
    "from": 30,
    "label": "declares",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 46,
    "label": "requires",
    "to": 45
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 19
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "time_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function()\r\n    local starttime = system.gettime()\r\n    local expected = os.time()\r\n    local endtime = system.gettime()\r\n    local delta = endtime - starttime\r\n    local avg = starttime + delta/2\r\n    assert.is_true(expected >= math.floor(starttime))\r\n    assert.is_true(expected <= math.ceil(endtime))\r\n    assert.is_near(expected, avg, 1 + delta)\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local starttime = system.gettime()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local expected = os.time()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local endtime = system.gettime()",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local delta = endtime - starttime",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local avg = starttime + delta/2",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "assert.is_true(expected >= math.floor(starttime))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assert.is_true(expected <= math.ceil(endtime))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert.is_near(expected, avg, 1 + delta)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n    local starttime = system.monotime()\r\n    local endtime = system.monotime()\r\n    local delta = endtime - starttime\r\n    assert.is_true(starttime > 0)\r\n    assert.is_true(delta >= 0)\r\n    assert.is_true(system.monotime() - endtime >= 0)\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "local starttime = system.monotime()",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local endtime = system.monotime()",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "assert.is_true(starttime > 0)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert.is_true(delta >= 0)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert.is_true(system.monotime() - endtime >= 0)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n    local starttime = system.gettime()\r\n    local starttick = system.monotime()\r\n    system.sleep(0.5)\r\n    assert.is_near(0.5, system.gettime() - starttime, 0.1)\r\n    assert.is_near(0.5, system.monotime() - starttick, 0.1)\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "local starttick = system.monotime()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "system.sleep(0.5)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.is_near(0.5, system.gettime() - starttime, 0.1)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.is_near(0.5, system.monotime() - starttick, 0.1)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n  it('gettime returns current time', function()\r\n    local starttime = system.gettime()\r\n    local expected = os.time()\r\n    local endtime = system.gettime()\r\n    local delta = endtime - starttime\r\n    local avg = starttime + delta/2\r\n    assert.is_true(expected >= math.floor(starttime))\r\n    assert.is_true(expected <= math.ceil(endtime))\r\n    assert.is_near(expected, avg, 1 + delta)\r\n  end)\r\n\r\n  it('monottime returns monotonically increasing time', function()\r\n    local starttime = system.monotime()\r\n    local endtime = system.monotime()\r\n    local delta = endtime - starttime\r\n    assert.is_true(starttime > 0)\r\n    assert.is_true(delta >= 0)\r\n    assert.is_true(system.monotime() - endtime >= 0)\r\n  end)\r\n\r\n  it('sleep will wait for specified amount of time', function()\r\n    local starttime = system.gettime()\r\n    local starttick = system.monotime()\r\n    system.sleep(0.5)\r\n    assert.is_near(0.5, system.gettime() - starttime, 0.1)\r\n    assert.is_near(0.5, system.monotime() - starttick, 0.1)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "it('gettime returns current time', function()\r\n    local starttime = system.gettime()\r\n    local expected = os.time()\r\n    local endtime = system.gettime()\r\n    local delta = endtime - starttime\r\n    local avg = starttime + delta/2\r\n    assert.is_true(expected >= math.floor(starttime))\r\n    assert.is_true(expected <= math.ceil(endtime))\r\n    assert.is_near(expected, avg, 1 + delta)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "it('monottime returns monotonically increasing time', function()\r\n    local starttime = system.monotime()\r\n    local endtime = system.monotime()\r\n    local delta = endtime - starttime\r\n    assert.is_true(starttime > 0)\r\n    assert.is_true(delta >= 0)\r\n    assert.is_true(system.monotime() - endtime >= 0)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "it('sleep will wait for specified amount of time', function()\r\n    local starttime = system.gettime()\r\n    local starttick = system.monotime()\r\n    system.sleep(0.5)\r\n    assert.is_near(0.5, system.gettime() - starttime, 0.1)\r\n    assert.is_near(0.5, system.monotime() - starttick, 0.1)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "monotime",
    "type": "global function"
  }, {
    "id": 32,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 33,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 34,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 35,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 36,
    "text": "time",
    "type": "global function"
  }, {
    "id": 37,
    "text": "is_near",
    "type": "global function"
  }, {
    "id": 38,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 39,
    "text": "require",
    "type": "global function"
  }, {
    "id": 40,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 41,
    "text": "it",
    "type": "global function"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 45,
    "text": "core",
    "type": "module"
  }, {
    "id": 46,
    "text": "",
    "type": "require local variable"
  } ]
}