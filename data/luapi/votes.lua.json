{
  "_filename": "votes.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/examples/tutorial/votes.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 15,
    "label": "calls",
    "to": 36
  }, {
    "from": 15,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 15,
    "label": "calls",
    "to": 33
  }, {
    "from": 15,
    "label": "calls",
    "to": 33
  }, {
    "from": 31,
    "label": "calls",
    "to": 33
  }, {
    "from": 31,
    "label": "calls",
    "to": 33
  }, {
    "from": 31,
    "label": "calls",
    "to": 33
  }, {
    "from": 31,
    "label": "calls",
    "to": 33
  }, {
    "from": 31,
    "label": "calls",
    "to": 33
  }, {
    "from": 31,
    "label": "calls",
    "to": 33
  }, {
    "from": 31,
    "label": "calls",
    "to": 34
  }, {
    "from": 31,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 15,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "declares",
    "to": 2
  }, {
    "from": 31,
    "label": "declares",
    "to": 15
  }, {
    "from": 31,
    "label": "declares",
    "to": 24
  }, {
    "from": 31,
    "label": "declares",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 42,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 42,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 42,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 42,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 43,
    "label": "initializes",
    "to": 41
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "votes",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Coordinator(thread,vote,nb,ifYes,ifNo)\r\n  for turn=1,nb do\r\n    -- (1) create a secret channel for this turn's vote\r\n    local secret = thread:new(\"secret\"..tostring(turn))\r\n    -- (2) broadcast the vote activation message (with the secret channel)\r\n    thread:broadcast(vote,turn,secret)\r\n    -- (3) collect all votes\r\n    local votes = thread:collect(secret)\r\n    -- (4) analyze the votes and take the final decision\r\n    --     Remark: votes is an array of returned values\r\n    local nbYes = 0\r\n    for i,yes in ipairs(votes) do\r\n      if yes[1]==true then\r\n        nbYes = nbYes + 1\r\n      end\r\n    end\r\n    if nbYes >= #votes / 2 then\r\n      ifYes(turn,#votes,nbYes)\r\n    else\r\n      ifNo(turn,#votes,nbYes)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "for turn=1,nb do\r\n    -- (1) create a secret channel for this turn's vote\r\n    local secret = thread:new(\"secret\"..tostring(turn))\r\n    -- (2) broadcast the vote activation message (with the secret channel)\r\n    thread:broadcast(vote,turn,secret)\r\n    -- (3) collect all votes\r\n    local votes = thread:collect(secret)\r\n    -- (4) analyze the votes and take the final decision\r\n    --     Remark: votes is an array of returned values\r\n    local nbYes = 0\r\n    for i,yes in ipairs(votes) do\r\n      if yes[1]==true then\r\n        nbYes = nbYes + 1\r\n      end\r\n    end\r\n    if nbYes >= #votes / 2 then\r\n      ifYes(turn,#votes,nbYes)\r\n    else\r\n      ifNo(turn,#votes,nbYes)\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 4,
    "text": "local secret = thread:new(\"secret\"..tostring(turn))",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "thread:broadcast(vote,turn,secret)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local votes = thread:collect(secret)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local nbYes = 0",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for i,yes in ipairs(votes) do\r\n      if yes[1]==true then\r\n        nbYes = nbYes + 1\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "if yes[1]==true then\r\n        nbYes = nbYes + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "nbYes = nbYes + 1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if nbYes >= #votes / 2 then\r\n      ifYes(turn,#votes,nbYes)\r\n    else\r\n      ifNo(turn,#votes,nbYes)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "ifYes(turn,#votes,nbYes)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "ifNo(turn,#votes,nbYes)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function Voter(thread,id,vote)\r\n  while true do\r\n    local turn, secret = thread:receive(vote)\r\n    if math.random() > 0.5 then\r\n      print(\"Voter #\" .. tostring(id) .. \": vote YES\")\r\n      thread:send(secret,true) -- vote YES\r\n    else\r\n      print(\"Voter #\" .. tostring(id) .. \": vote NO\")\r\n      thread:send(secret,false) -- vote NO\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "while true do\r\n    local turn, secret = thread:receive(vote)\r\n    if math.random() > 0.5 then\r\n      print(\"Voter #\" .. tostring(id) .. \": vote YES\")\r\n      thread:send(secret,true) -- vote YES\r\n    else\r\n      print(\"Voter #\" .. tostring(id) .. \": vote NO\")\r\n      thread:send(secret,false) -- vote NO\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 17,
    "text": "local turn, secret = thread:receive(vote)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if math.random() > 0.5 then\r\n      print(\"Voter #\" .. tostring(id) .. \": vote YES\")\r\n      thread:send(secret,true) -- vote YES\r\n    else\r\n      print(\"Voter #\" .. tostring(id) .. \": vote NO\")\r\n      thread:send(secret,false) -- vote NO\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "print(\"Voter #\" .. tostring(id) .. \": vote YES\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "thread:send(secret,true)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "print(\"Voter #\" .. tostring(id) .. \": vote NO\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "thread:send(secret,false)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(turn,nbVotes,nbYes)\r\n              print(\"Turn #\" .. tostring(turn) .. \" global decision is YES\")\r\n              print(\"( \" .. tostring(nbVotes) .. \" voters, \" .. tostring(nbYes) .. \" voted Yes)\")\r\n            end",
    "type": "function"
  }, {
    "id": 25,
    "text": "print(\"Turn #\" .. tostring(turn) .. \" global decision is YES\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "print(\"( \" .. tostring(nbVotes) .. \" voters, \" .. tostring(nbYes) .. \" voted Yes)\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function(turn,nbVotes,nbYes)\r\n              print(\"Turn #\" .. tostring(turn) .. \" global decision is NO\")\r\n              print(\"( \" .. tostring(nbVotes) .. \" voters, \" .. tostring(nbYes) .. \" voted Yes)\")\r\n            end",
    "type": "function"
  }, {
    "id": 29,
    "text": "print(\"Turn #\" .. tostring(turn) .. \" global decision is NO\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "",
    "type": "function container"
  }, {
    "id": 32,
    "text": "init",
    "type": "global function"
  }, {
    "id": 33,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 34,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 35,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 36,
    "text": "print",
    "type": "global function"
  }, {
    "id": 37,
    "text": "random",
    "type": "global function"
  }, {
    "id": 38,
    "text": "require",
    "type": "global function"
  }, {
    "id": 39,
    "text": "ifYes",
    "type": "global function"
  }, {
    "id": 40,
    "text": "ifNo",
    "type": "global function"
  }, {
    "id": 41,
    "text": "",
    "type": "global variable"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "global variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  } ]
}