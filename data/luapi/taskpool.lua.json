{
  "_filename": "taskpool.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/examples/taskpool.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 8
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "calls",
    "to": 28
  }, {
    "from": 24,
    "label": "calls",
    "to": 25
  }, {
    "from": 24,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 24,
    "label": "calls",
    "to": 31
  }, {
    "from": 24,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 24,
    "label": "calls",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 24
  }, {
    "from": 24,
    "label": "declares",
    "to": 2
  }, {
    "from": 24,
    "label": "declares",
    "to": 13
  }, {
    "from": 24,
    "label": "declares",
    "to": 20
  }, {
    "from": 24,
    "label": "declares",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 33,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 33,
    "label": "initializes",
    "to": 37
  }, {
    "from": 33,
    "label": "initializes",
    "to": 38
  }, {
    "from": 33,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 33,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 33,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 34,
    "label": "initializes",
    "to": 32
  }, {
    "from": 34,
    "label": "initializes",
    "to": 32
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 22
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "taskpool",
    "type": "module"
  }, {
    "id": 2,
    "text": "function TaskPool(proc,remain,enter,leave)\r\n  while true do\r\n    if remain>0 then\r\n        proc:choice( \r\n        { enter:receive(),  function(id) print(\"[OPEN] Entering: \"..tostring(id))\r\n                                remain = remain - 1\r\n                            end },\r\n        { leave:receive(),  function(id) print(\"[OPEN] Leaving: \"..tostring(id))\r\n                                remain = remain + 1\r\n                            end }\r\n        )()\r\n    else\r\n      local id = proc:receive(leave)\r\n      print(\"[CLOSE] Leaving: \"..tostring(id))\r\n      remain = remain + 1\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "while true do\r\n    if remain>0 then\r\n        proc:choice( \r\n        { enter:receive(),  function(id) print(\"[OPEN] Entering: \"..tostring(id))\r\n                                remain = remain - 1\r\n                            end },\r\n        { leave:receive(),  function(id) print(\"[OPEN] Leaving: \"..tostring(id))\r\n                                remain = remain + 1\r\n                            end }\r\n        )()\r\n    else\r\n      local id = proc:receive(leave)\r\n      print(\"[CLOSE] Leaving: \"..tostring(id))\r\n      remain = remain + 1\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 4,
    "text": "if remain>0 then\r\n        proc:choice( \r\n        { enter:receive(),  function(id) print(\"[OPEN] Entering: \"..tostring(id))\r\n                                remain = remain - 1\r\n                            end },\r\n        { leave:receive(),  function(id) print(\"[OPEN] Leaving: \"..tostring(id))\r\n                                remain = remain + 1\r\n                            end }\r\n        )()\r\n    else\r\n      local id = proc:receive(leave)\r\n      print(\"[CLOSE] Leaving: \"..tostring(id))\r\n      remain = remain + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "proc:choice( \r\n        { enter:receive(),  function(id) print(\"[OPEN] Entering: \"..tostring(id))\r\n                                remain = remain - 1\r\n                            end },\r\n        { leave:receive(),  function(id) print(\"[OPEN] Leaving: \"..tostring(id))\r\n                                remain = remain + 1\r\n                            end }\r\n        )()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "print(\"[OPEN] Entering: \"..tostring(id))",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "remain = remain - 1",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "print(\"[OPEN] Leaving: \"..tostring(id))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "remain = remain + 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local id = proc:receive(leave)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "print(\"[CLOSE] Leaving: \"..tostring(id))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function Task(proc,id,sleep,enter,leave)\r\n  proc:send(enter,id)\r\n  while sleep>0 do\r\n    proc:yield()\r\n    sleep = sleep -1\r\n  end\r\n  proc:send(leave,id)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "proc:send(enter,id)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "while sleep>0 do\r\n    proc:yield()\r\n    sleep = sleep -1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 16,
    "text": "proc:yield()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "sleep = sleep -1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "proc:send(leave,id)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function(id) print(\"[OPEN] Entering: \"..tostring(id))\r\n                                remain = remain - 1\r\n                            end",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(id) print(\"[OPEN] Leaving: \"..tostring(id))\r\n                                remain = remain + 1\r\n                            end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "",
    "type": "function container"
  }, {
    "id": 25,
    "text": "function replicate(agent,procname,n,procfun,...)\r\n  --DEBUG(agent,\"replicate with arguments\",...)  \r\n  for i=1,n do\r\n    agent:spawn(procname..tostring(i),procfun,i,...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "init",
    "type": "global function"
  }, {
    "id": 27,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 28,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 29,
    "text": "procchoice",
    "type": "global function"
  }, {
    "id": 30,
    "text": "print",
    "type": "global function"
  }, {
    "id": 31,
    "text": "require",
    "type": "global function"
  }, {
    "id": 32,
    "text": "",
    "type": "global variable"
  }, {
    "id": 33,
    "text": "",
    "type": "variable container"
  }, {
    "id": 34,
    "text": "",
    "type": "require container"
  }, {
    "id": 35,
    "text": "",
    "type": "global variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "global variable"
  }, {
    "id": 38,
    "text": "",
    "type": "global variable"
  }, {
    "id": 39,
    "text": "",
    "type": "global variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  }, {
    "id": 41,
    "text": "",
    "type": "global variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "global variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  } ]
}