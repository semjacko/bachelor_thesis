{
  "_filename": "boolguards.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/examples/boolguards.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 23,
    "label": "has",
    "to": 6
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 25,
    "label": "calls",
    "to": 29
  }, {
    "from": 25,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 17,
    "label": "calls",
    "to": 30
  }, {
    "from": 25,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 25,
    "label": "declares",
    "to": 2
  }, {
    "from": 25,
    "label": "declares",
    "to": 17
  }, {
    "from": 25,
    "label": "declares",
    "to": 22
  }, {
    "from": 25,
    "label": "declares",
    "to": 23
  }, {
    "from": 25,
    "label": "declares",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 35
  }, {
    "from": 34,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 34,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 34,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 34,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 34,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 35,
    "label": "initializes",
    "to": 33
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "boolguards",
    "type": "module"
  }, {
    "id": 2,
    "text": "function MaxDie(proc,die,fuel)\r\n  -- need to prepare the lexical environment for the choice\r\n  local die1 , die2\r\n  -- prepare the choice in advance\r\n  local choice = proc:choice( \r\n      { function() return die1 >= die2 end, function() print \"MaxDie: chooses die 1\" ; proc:send(die,die1) end },\r\n      { true, function() print \"MaxDie: chooses die 2\" ; proc:send(die,die2) end })\r\n  -- main loop\r\n  while fuel>0 do\r\n    die1 = math.random(6) -- change the variables in current scope (affects the choice)\r\n    die2 = math.random(6)\r\n    local ch = choice() -- enact the choice once\r\n    print(\"MaxDie: Branch #\" .. tostring(ch) .. \" executed\")\r\n    fuel = fuel - 1\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local die1 , die2",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local choice = proc:choice( \r\n      { function() return die1 >= die2 end, function() print \"MaxDie: chooses die 1\" ; proc:send(die,die1) end },\r\n      { true, function() print \"MaxDie: chooses die 2\" ; proc:send(die,die2) end })",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "print \"MaxDie: chooses die 1\"",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "proc:send(die,die1)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "print \"MaxDie: chooses die 2\"",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "proc:send(die,die2)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "while fuel>0 do\r\n    die1 = math.random(6) -- change the variables in current scope (affects the choice)\r\n    die2 = math.random(6)\r\n    local ch = choice() -- enact the choice once\r\n    print(\"MaxDie: Branch #\" .. tostring(ch) .. \" executed\")\r\n    fuel = fuel - 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 11,
    "text": "die1 = math.random(6)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "die2 = math.random(6)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "local ch = choice()",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "print(\"MaxDie: Branch #\" .. tostring(ch) .. \" executed\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "fuel = fuel - 1",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function FetchDie(proc,diechan)\r\n  while true do\r\n    local die = proc:receive(diechan)\r\n    print(\"FetchDir: received \" .. tostring(die))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "while true do\r\n    local die = proc:receive(diechan)\r\n    print(\"FetchDir: received \" .. tostring(die))\r\n  end",
    "type": "statement:while"
  }, {
    "id": 19,
    "text": "local die = proc:receive(diechan)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "print(\"FetchDir: received \" .. tostring(die))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function() return die1 >= die2 end",
    "type": "function"
  }, {
    "id": 23,
    "text": "function() print \"MaxDie: chooses die 1\" ; proc:send(die,die1) end",
    "type": "function"
  }, {
    "id": 24,
    "text": "function() print \"MaxDie: chooses die 2\" ; proc:send(die,die2) end",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "function container"
  }, {
    "id": 26,
    "text": "init",
    "type": "global function"
  }, {
    "id": 27,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 28,
    "text": "choice",
    "type": "global function"
  }, {
    "id": 29,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 30,
    "text": "print",
    "type": "global function"
  }, {
    "id": 31,
    "text": "random",
    "type": "global function"
  }, {
    "id": 32,
    "text": "require",
    "type": "global function"
  }, {
    "id": 33,
    "text": "",
    "type": "global variable"
  }, {
    "id": 34,
    "text": "",
    "type": "variable container"
  }, {
    "id": 35,
    "text": "",
    "type": "require container"
  }, {
    "id": 36,
    "text": "",
    "type": "global variable"
  }, {
    "id": 37,
    "text": "",
    "type": "n/a"
  }, {
    "id": 38,
    "text": "",
    "type": "global variable"
  }, {
    "id": 39,
    "text": "",
    "type": "n/a"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "n/a"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  }, {
    "id": 43,
    "text": "",
    "type": "n/a"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  } ]
}