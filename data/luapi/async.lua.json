{
  "_filename": "async.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/examples/tutorial/async.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 15
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 17,
    "label": "calls",
    "to": 36
  }, {
    "from": 17,
    "label": "calls",
    "to": 36
  }, {
    "from": 34,
    "label": "calls",
    "to": 37
  }, {
    "from": 34,
    "label": "calls",
    "to": 37
  }, {
    "from": 34,
    "label": "calls",
    "to": 37
  }, {
    "from": 34,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 34,
    "label": "calls",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 17,
    "label": "calls",
    "to": 38
  }, {
    "from": 25,
    "label": "calls",
    "to": 38
  }, {
    "from": 34,
    "label": "calls",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "declares",
    "to": 2
  }, {
    "from": 34,
    "label": "declares",
    "to": 17
  }, {
    "from": 34,
    "label": "declares",
    "to": 25
  }, {
    "from": 34,
    "label": "declares",
    "to": 30
  }, {
    "from": 34,
    "label": "declares",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 45,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 45,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 45,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 45,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 45,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 45,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 45,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 46,
    "label": "initializes",
    "to": 44
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 32
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "async",
    "type": "module"
  }, {
    "id": 2,
    "text": "function MsgQueue(thread,put,take,capacity)\r\n  local queue = {}\r\n  while true do\r\n    print(\"Queue size: \",#queue)\r\n    -- empty queue (can only put)\r\n    if next(queue)==nil then\r\n      print(\"Queue is empty\")\r\n      local msg = thread:receive(put)\r\n      table.insert(queue,1,msg)\r\n    -- full queue (can only take)\r\n    elseif #queue==capacity then\r\n      print(\"Queue is full\")\r\n      local msg = table.remove(queue)\r\n      thread:send(take,msg)\r\n    else -- other cases (can put or take)\r\n      local msg = queue[#queue]\r\n      thread:choice(\r\n        { put:receive(),  function(msg)\r\n                           table.insert(queue,1,msg)\r\n                          end },\r\n        { take:send(msg), function()\r\n                           table.remove(queue)\r\n                          end })()\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local queue = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "while true do\r\n    print(\"Queue size: \",#queue)\r\n    -- empty queue (can only put)\r\n    if next(queue)==nil then\r\n      print(\"Queue is empty\")\r\n      local msg = thread:receive(put)\r\n      table.insert(queue,1,msg)\r\n    -- full queue (can only take)\r\n    elseif #queue==capacity then\r\n      print(\"Queue is full\")\r\n      local msg = table.remove(queue)\r\n      thread:send(take,msg)\r\n    else -- other cases (can put or take)\r\n      local msg = queue[#queue]\r\n      thread:choice(\r\n        { put:receive(),  function(msg)\r\n                           table.insert(queue,1,msg)\r\n                          end },\r\n        { take:send(msg), function()\r\n                           table.remove(queue)\r\n                          end })()\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 5,
    "text": "print(\"Queue size: \",#queue)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "if next(queue)==nil then\r\n      print(\"Queue is empty\")\r\n      local msg = thread:receive(put)\r\n      table.insert(queue,1,msg)\r\n    -- full queue (can only take)\r\n    elseif #queue==capacity then\r\n      print(\"Queue is full\")\r\n      local msg = table.remove(queue)\r\n      thread:send(take,msg)\r\n    else -- other cases (can put or take)\r\n      local msg = queue[#queue]\r\n      thread:choice(\r\n        { put:receive(),  function(msg)\r\n                           table.insert(queue,1,msg)\r\n                          end },\r\n        { take:send(msg), function()\r\n                           table.remove(queue)\r\n                          end })()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "print(\"Queue is empty\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local msg = thread:receive(put)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "table.insert(queue,1,msg)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "print(\"Queue is full\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local msg = table.remove(queue)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "thread:send(take,msg)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local msg = queue[#queue]",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "thread:choice(\r\n        { put:receive(),  function(msg)\r\n                           table.insert(queue,1,msg)\r\n                          end },\r\n        { take:send(msg), function()\r\n                           table.remove(queue)\r\n                          end })()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "table.remove(queue)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function Writer(thread,id,put,msg,count)\r\n  local first = count\r\n  while count>0 do\r\n    print(\"Writer #\",id,\" sends: \",msg..tostring(first+1-count))\r\n    thread:send(put,msg..tostring(first+1-count))\r\n    count = count - 1\r\n    thread:yield() -- for better illustration of behavior\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local first = count",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "while count>0 do\r\n    print(\"Writer #\",id,\" sends: \",msg..tostring(first+1-count))\r\n    thread:send(put,msg..tostring(first+1-count))\r\n    count = count - 1\r\n    thread:yield() -- for better illustration of behavior\r\n  end",
    "type": "statement:while"
  }, {
    "id": 20,
    "text": "print(\"Writer #\",id,\" sends: \",msg..tostring(first+1-count))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "thread:send(put,msg..tostring(first+1-count))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "count = count - 1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "thread:yield()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function Reader(thread,id,take)\r\n  while true do\r\n    local msg = thread:receive(take)\r\n    print(\"Reader #\",id,\" receives: \",msg)\r\n    thread:yield() -- for better illustration of behavior\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "while true do\r\n    local msg = thread:receive(take)\r\n    print(\"Reader #\",id,\" receives: \",msg)\r\n    thread:yield() -- for better illustration of behavior\r\n  end",
    "type": "statement:while"
  }, {
    "id": 27,
    "text": "local msg = thread:receive(take)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "print(\"Reader #\",id,\" receives: \",msg)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function(msg)\r\n                           table.insert(queue,1,msg)\r\n                          end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function()\r\n                           table.remove(queue)\r\n                          end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "init",
    "type": "global function"
  }, {
    "id": 36,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 37,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 38,
    "text": "print",
    "type": "global function"
  }, {
    "id": 39,
    "text": "threadchoice",
    "type": "global function"
  }, {
    "id": 40,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 41,
    "text": "next",
    "type": "global function"
  }, {
    "id": 42,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 43,
    "text": "require",
    "type": "global function"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "variable container"
  }, {
    "id": 46,
    "text": "",
    "type": "require container"
  }, {
    "id": 47,
    "text": "",
    "type": "global variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "global variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  } ]
}