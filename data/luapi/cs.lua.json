{
  "_filename": "cs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/examples/tutorial/cs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "calls",
    "to": 38
  }, {
    "from": 34,
    "label": "calls",
    "to": 35
  }, {
    "from": 11,
    "label": "calls",
    "to": 36
  }, {
    "from": 11,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 34,
    "label": "calls",
    "to": 40
  }, {
    "from": 11,
    "label": "calls",
    "to": 37
  }, {
    "from": 11,
    "label": "calls",
    "to": 37
  }, {
    "from": 20,
    "label": "calls",
    "to": 37
  }, {
    "from": 20,
    "label": "calls",
    "to": 37
  }, {
    "from": 11,
    "label": "calls",
    "to": 39
  }, {
    "from": 11,
    "label": "calls",
    "to": 39
  }, {
    "from": 20,
    "label": "calls",
    "to": 39
  }, {
    "from": 20,
    "label": "calls",
    "to": 39
  }, {
    "from": 34,
    "label": "calls",
    "to": 39
  }, {
    "from": 34,
    "label": "calls",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "declares",
    "to": 2
  }, {
    "from": 34,
    "label": "declares",
    "to": 11
  }, {
    "from": 34,
    "label": "declares",
    "to": 20
  }, {
    "from": 34,
    "label": "declares",
    "to": 28
  }, {
    "from": 34,
    "label": "declares",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 43,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 43,
    "label": "initializes",
    "to": 47
  }, {
    "from": 43,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 43,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 43,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 43,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 43,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 44,
    "label": "initializes",
    "to": 42
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cs",
    "type": "module"
  }, {
    "id": 2,
    "text": "function CS(thread,n,lock,csfun)\r\n  local enter,leave = thread:receive(lock)\r\n  -- START of Critical Section\r\n  CS_COUNT = CS_COUNT + 1\r\n  thread:send(enter,n)\r\n  -- the critical section content\r\n  csfun(thread)\r\n  thread:send(leave,n)\r\n  -- END of Critical Section\r\n  CS_COUNT = CS_COUNT - 1\r\n  thread:send(lock,enter,leave)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local enter,leave = thread:receive(lock)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "CS_COUNT = CS_COUNT + 1",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "thread:send(enter,n)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "csfun(thread)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "thread:send(leave,n)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "CS_COUNT = CS_COUNT - 1",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "thread:send(lock,enter,leave)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function Observer(thread,enter,leave)\r\n  while true do\r\n    local n = thread:receive(enter)\r\n    print(\"Lock taken by \"..tostring(n))\r\n    -- check the mutual exclusion property\r\n    assert(CS_COUNT==1)\r\n    local m = thread:receive(leave)\r\n    print(\"Lock released by \"..tostring(m))\r\n    -- check the take/release pair\r\n    assert(n==m)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "while true do\r\n    local n = thread:receive(enter)\r\n    print(\"Lock taken by \"..tostring(n))\r\n    -- check the mutual exclusion property\r\n    assert(CS_COUNT==1)\r\n    local m = thread:receive(leave)\r\n    print(\"Lock released by \"..tostring(m))\r\n    -- check the take/release pair\r\n    assert(n==m)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 13,
    "text": "local n = thread:receive(enter)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "print(\"Lock taken by \"..tostring(n))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert(CS_COUNT==1)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "local m = thread:receive(leave)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "print(\"Lock released by \"..tostring(m))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert(n==m)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function Launch(thread,n,lock,start,csfun)\r\n  while n>0 do\r\n    print(\"Start process : \"..tostring(n))\r\n    thread:spawn(\"CS\"..tostring(n),CS,n,lock,csfun)\r\n    n = n - 1\r\n  end\r\n  print(\"Go !\")\r\n  thread:signal(start)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "while n>0 do\r\n    print(\"Start process : \"..tostring(n))\r\n    thread:spawn(\"CS\"..tostring(n),CS,n,lock,csfun)\r\n    n = n - 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 22,
    "text": "print(\"Start process : \"..tostring(n))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "thread:spawn(\"CS\"..tostring(n),CS,n,lock,csfun)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "n = n - 1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "print(\"Go !\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "thread:signal(start)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function Barrier(thread,start,lock,enter,leave)\r\n  thread:wait(start)\r\n  thread:send(lock,enter,leave)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "thread:wait(start)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function (thread)\r\n    print(\"Process \"..thread.name..\": critical section\")\r\n  end",
    "type": "function"
  }, {
    "id": 32,
    "text": "print(\"Process \"..thread.name..\": critical section\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "init",
    "type": "global function"
  }, {
    "id": 36,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 37,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 38,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 39,
    "text": "print",
    "type": "global function"
  }, {
    "id": 40,
    "text": "require",
    "type": "global function"
  }, {
    "id": 41,
    "text": "csfun",
    "type": "global function"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  }, {
    "id": 43,
    "text": "",
    "type": "variable container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  }, {
    "id": 45,
    "text": "",
    "type": "global variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "global variable"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "global variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  } ]
}