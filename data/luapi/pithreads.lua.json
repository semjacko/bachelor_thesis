{
  "_filename": "pithreads.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/lib/pithreads.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 409
  }, {
    "from": 3,
    "label": "calls",
    "to": 409
  }, {
    "from": 4,
    "label": "calls",
    "to": 409
  }, {
    "from": 5,
    "label": "calls",
    "to": 409
  }, {
    "from": 6,
    "label": "calls",
    "to": 409
  }, {
    "from": 7,
    "label": "calls",
    "to": 409
  }, {
    "from": 8,
    "label": "calls",
    "to": 409
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 24
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 24
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 43,
    "label": "has",
    "to": 52
  }, {
    "from": 43,
    "label": "has",
    "to": 53
  }, {
    "from": 43,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 45
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 24
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 17
  }, {
    "from": 67,
    "label": "has",
    "to": 45
  }, {
    "from": 67,
    "label": "has",
    "to": 46
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 67,
    "label": "has",
    "to": 75
  }, {
    "from": 67,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 17
  }, {
    "from": 77,
    "label": "has",
    "to": 45
  }, {
    "from": 77,
    "label": "has",
    "to": 57
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 73
  }, {
    "from": 77,
    "label": "has",
    "to": 74
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 24
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 24
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 37
  }, {
    "from": 94,
    "label": "has",
    "to": 38
  }, {
    "from": 94,
    "label": "has",
    "to": 24
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 24
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 24
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 106,
    "label": "has",
    "to": 24
  }, {
    "from": 106,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 24
  }, {
    "from": 111,
    "label": "has",
    "to": 24
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 24
  }, {
    "from": 114,
    "label": "has",
    "to": 24
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 24
  }, {
    "from": 119,
    "label": "has",
    "to": 24
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 126,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 126,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 126,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 24
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 24
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 160,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 155,
    "label": "has",
    "to": 164
  }, {
    "from": 155,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 75
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 165,
    "label": "has",
    "to": 163
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 158
  }, {
    "from": 165,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 163
  }, {
    "from": 155,
    "label": "has",
    "to": 173
  }, {
    "from": 155,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 166
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 170
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 178
  }, {
    "from": 150,
    "label": "has",
    "to": 179
  }, {
    "from": 150,
    "label": "has",
    "to": 24
  }, {
    "from": 150,
    "label": "has",
    "to": 24
  }, {
    "from": 148,
    "label": "has",
    "to": 24
  }, {
    "from": 148,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 151
  }, {
    "from": 181,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 160,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 155,
    "label": "has",
    "to": 164
  }, {
    "from": 155,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 75
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 165,
    "label": "has",
    "to": 163
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 158
  }, {
    "from": 165,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 163
  }, {
    "from": 155,
    "label": "has",
    "to": 173
  }, {
    "from": 155,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 166
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 170
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 178
  }, {
    "from": 181,
    "label": "has",
    "to": 179
  }, {
    "from": 181,
    "label": "has",
    "to": 24
  }, {
    "from": 181,
    "label": "has",
    "to": 24
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 151
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 153
  }, {
    "from": 187,
    "label": "has",
    "to": 154
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 188,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 160,
    "label": "has",
    "to": 159
  }, {
    "from": 188,
    "label": "has",
    "to": 161
  }, {
    "from": 188,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 188,
    "label": "has",
    "to": 164
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 166
  }, {
    "from": 189,
    "label": "has",
    "to": 75
  }, {
    "from": 189,
    "label": "has",
    "to": 167
  }, {
    "from": 189,
    "label": "has",
    "to": 168
  }, {
    "from": 189,
    "label": "has",
    "to": 169
  }, {
    "from": 189,
    "label": "has",
    "to": 170
  }, {
    "from": 189,
    "label": "has",
    "to": 163
  }, {
    "from": 189,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 158
  }, {
    "from": 189,
    "label": "has",
    "to": 159
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 163
  }, {
    "from": 188,
    "label": "has",
    "to": 173
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 166
  }, {
    "from": 191,
    "label": "has",
    "to": 175
  }, {
    "from": 191,
    "label": "has",
    "to": 170
  }, {
    "from": 191,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 191,
    "label": "has",
    "to": 159
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 188,
    "label": "has",
    "to": 178
  }, {
    "from": 185,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 193,
    "label": "has",
    "to": 198
  }, {
    "from": 193,
    "label": "has",
    "to": 163
  }, {
    "from": 193,
    "label": "has",
    "to": 199
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 193,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 185,
    "label": "has",
    "to": 24
  }, {
    "from": 185,
    "label": "has",
    "to": 24
  }, {
    "from": 183,
    "label": "has",
    "to": 24
  }, {
    "from": 183,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 186
  }, {
    "from": 205,
    "label": "has",
    "to": 151
  }, {
    "from": 205,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 153
  }, {
    "from": 187,
    "label": "has",
    "to": 154
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 188,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 160,
    "label": "has",
    "to": 159
  }, {
    "from": 188,
    "label": "has",
    "to": 161
  }, {
    "from": 188,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 188,
    "label": "has",
    "to": 164
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 166
  }, {
    "from": 189,
    "label": "has",
    "to": 75
  }, {
    "from": 189,
    "label": "has",
    "to": 167
  }, {
    "from": 189,
    "label": "has",
    "to": 168
  }, {
    "from": 189,
    "label": "has",
    "to": 169
  }, {
    "from": 189,
    "label": "has",
    "to": 170
  }, {
    "from": 189,
    "label": "has",
    "to": 163
  }, {
    "from": 189,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 158
  }, {
    "from": 189,
    "label": "has",
    "to": 159
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 163
  }, {
    "from": 188,
    "label": "has",
    "to": 173
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 166
  }, {
    "from": 191,
    "label": "has",
    "to": 175
  }, {
    "from": 191,
    "label": "has",
    "to": 170
  }, {
    "from": 191,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 191,
    "label": "has",
    "to": 159
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 188,
    "label": "has",
    "to": 178
  }, {
    "from": 205,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 193,
    "label": "has",
    "to": 198
  }, {
    "from": 193,
    "label": "has",
    "to": 163
  }, {
    "from": 193,
    "label": "has",
    "to": 199
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 193,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 205,
    "label": "has",
    "to": 24
  }, {
    "from": 205,
    "label": "has",
    "to": 24
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 207,
    "label": "has",
    "to": 24
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 207,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 207,
    "label": "has",
    "to": 24
  }, {
    "from": 207,
    "label": "has",
    "to": 215
  }, {
    "from": 207,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 216,
    "label": "has",
    "to": 219
  }, {
    "from": 207,
    "label": "has",
    "to": 24
  }, {
    "from": 207,
    "label": "has",
    "to": 24
  }, {
    "from": 207,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 221,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 221,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 227,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 166
  }, {
    "from": 235,
    "label": "has",
    "to": 175
  }, {
    "from": 235,
    "label": "has",
    "to": 170
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 235,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 235,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 233,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 166
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 242,
    "label": "has",
    "to": 169
  }, {
    "from": 242,
    "label": "has",
    "to": 170
  }, {
    "from": 233,
    "label": "has",
    "to": 24
  }, {
    "from": 233,
    "label": "has",
    "to": 245
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 75
  }, {
    "from": 248,
    "label": "has",
    "to": 163
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 158
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 246,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 253,
    "label": "has",
    "to": 256
  }, {
    "from": 253,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 257,
    "label": "has",
    "to": 260
  }, {
    "from": 257,
    "label": "has",
    "to": 261
  }, {
    "from": 257,
    "label": "has",
    "to": 262
  }, {
    "from": 257,
    "label": "has",
    "to": 263
  }, {
    "from": 257,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 257,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 269,
    "label": "has",
    "to": 272
  }, {
    "from": 269,
    "label": "has",
    "to": 273
  }, {
    "from": 269,
    "label": "has",
    "to": 274
  }, {
    "from": 269,
    "label": "has",
    "to": 275
  }, {
    "from": 269,
    "label": "has",
    "to": 276
  }, {
    "from": 269,
    "label": "has",
    "to": 277
  }, {
    "from": 257,
    "label": "has",
    "to": 278
  }, {
    "from": 257,
    "label": "has",
    "to": 268
  }, {
    "from": 257,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 268
  }, {
    "from": 257,
    "label": "has",
    "to": 281
  }, {
    "from": 253,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 283,
    "label": "has",
    "to": 286
  }, {
    "from": 283,
    "label": "has",
    "to": 287
  }, {
    "from": 283,
    "label": "has",
    "to": 288
  }, {
    "from": 283,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 283,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 283,
    "label": "has",
    "to": 163
  }, {
    "from": 283,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 290
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 292
  }, {
    "from": 283,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 283,
    "label": "has",
    "to": 299
  }, {
    "from": 282,
    "label": "has",
    "to": 24
  }, {
    "from": 282,
    "label": "has",
    "to": 24
  }, {
    "from": 253,
    "label": "has",
    "to": 24
  }, {
    "from": 253,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 283,
    "label": "has",
    "to": 286
  }, {
    "from": 283,
    "label": "has",
    "to": 287
  }, {
    "from": 283,
    "label": "has",
    "to": 288
  }, {
    "from": 283,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 283,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 283,
    "label": "has",
    "to": 163
  }, {
    "from": 283,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 290
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 292
  }, {
    "from": 283,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 283,
    "label": "has",
    "to": 299
  }, {
    "from": 301,
    "label": "has",
    "to": 24
  }, {
    "from": 301,
    "label": "has",
    "to": 24
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 24
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 303,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 306,
    "label": "has",
    "to": 309
  }, {
    "from": 306,
    "label": "has",
    "to": 108
  }, {
    "from": 306,
    "label": "has",
    "to": 310
  }, {
    "from": 306,
    "label": "has",
    "to": 311
  }, {
    "from": 306,
    "label": "has",
    "to": 312
  }, {
    "from": 306,
    "label": "has",
    "to": 313
  }, {
    "from": 303,
    "label": "has",
    "to": 24
  }, {
    "from": 303,
    "label": "has",
    "to": 24
  }, {
    "from": 303,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 313
  }, {
    "from": 315,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 317,
    "label": "has",
    "to": 320
  }, {
    "from": 317,
    "label": "has",
    "to": 321
  }, {
    "from": 317,
    "label": "has",
    "to": 313
  }, {
    "from": 315,
    "label": "has",
    "to": 24
  }, {
    "from": 315,
    "label": "has",
    "to": 322
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 313
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 313
  }, {
    "from": 323,
    "label": "has",
    "to": 326
  }, {
    "from": 323,
    "label": "has",
    "to": 327
  }, {
    "from": 323,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 309
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 307
  }, {
    "from": 329,
    "label": "has",
    "to": 308
  }, {
    "from": 329,
    "label": "has",
    "to": 108
  }, {
    "from": 329,
    "label": "has",
    "to": 310
  }, {
    "from": 329,
    "label": "has",
    "to": 311
  }, {
    "from": 329,
    "label": "has",
    "to": 312
  }, {
    "from": 328,
    "label": "has",
    "to": 313
  }, {
    "from": 323,
    "label": "has",
    "to": 24
  }, {
    "from": 323,
    "label": "has",
    "to": 24
  }, {
    "from": 323,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 331,
    "label": "has",
    "to": 334
  }, {
    "from": 331,
    "label": "has",
    "to": 333
  }, {
    "from": 331,
    "label": "has",
    "to": 335
  }, {
    "from": 331,
    "label": "has",
    "to": 333
  }, {
    "from": 331,
    "label": "has",
    "to": 336
  }, {
    "from": 331,
    "label": "has",
    "to": 337
  }, {
    "from": 331,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 341
  }, {
    "from": 339,
    "label": "has",
    "to": 342
  }, {
    "from": 339,
    "label": "has",
    "to": 343
  }, {
    "from": 339,
    "label": "has",
    "to": 344
  }, {
    "from": 339,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 339,
    "label": "has",
    "to": 347
  }, {
    "from": 331,
    "label": "has",
    "to": 24
  }, {
    "from": 331,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 349,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 340
  }, {
    "from": 351,
    "label": "has",
    "to": 341
  }, {
    "from": 351,
    "label": "has",
    "to": 342
  }, {
    "from": 351,
    "label": "has",
    "to": 347
  }, {
    "from": 349,
    "label": "has",
    "to": 24
  }, {
    "from": 349,
    "label": "has",
    "to": 24
  }, {
    "from": 349,
    "label": "has",
    "to": 352
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 353,
    "label": "has",
    "to": 24
  }, {
    "from": 353,
    "label": "has",
    "to": 355
  }, {
    "from": 353,
    "label": "has",
    "to": 356
  }, {
    "from": 353,
    "label": "has",
    "to": 24
  }, {
    "from": 353,
    "label": "has",
    "to": 24
  }, {
    "from": 353,
    "label": "has",
    "to": 357
  }, {
    "from": 358,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 358,
    "label": "has",
    "to": 355
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 24
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 358,
    "label": "has",
    "to": 361
  }, {
    "from": 358,
    "label": "has",
    "to": 362
  }, {
    "from": 358,
    "label": "has",
    "to": 363
  }, {
    "from": 358,
    "label": "has",
    "to": 333
  }, {
    "from": 358,
    "label": "has",
    "to": 24
  }, {
    "from": 358,
    "label": "has",
    "to": 364
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 365,
    "label": "has",
    "to": 367
  }, {
    "from": 365,
    "label": "has",
    "to": 368
  }, {
    "from": 365,
    "label": "has",
    "to": 24
  }, {
    "from": 365,
    "label": "has",
    "to": 369
  }, {
    "from": 370,
    "label": "has",
    "to": 24
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 45
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 48
  }, {
    "from": 374,
    "label": "has",
    "to": 49
  }, {
    "from": 374,
    "label": "has",
    "to": 50
  }, {
    "from": 374,
    "label": "has",
    "to": 51
  }, {
    "from": 372,
    "label": "has",
    "to": 375
  }, {
    "from": 372,
    "label": "has",
    "to": 376
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 377,
    "label": "has",
    "to": 379
  }, {
    "from": 377,
    "label": "has",
    "to": 380
  }, {
    "from": 377,
    "label": "has",
    "to": 381
  }, {
    "from": 377,
    "label": "has",
    "to": 382
  }, {
    "from": 377,
    "label": "has",
    "to": 383
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 383,
    "label": "has",
    "to": 385
  }, {
    "from": 383,
    "label": "has",
    "to": 386
  }, {
    "from": 386,
    "label": "has",
    "to": 387
  }, {
    "from": 387,
    "label": "has",
    "to": 388
  }, {
    "from": 387,
    "label": "has",
    "to": 389
  }, {
    "from": 387,
    "label": "has",
    "to": 390
  }, {
    "from": 386,
    "label": "has",
    "to": 391
  }, {
    "from": 386,
    "label": "has",
    "to": 392
  }, {
    "from": 386,
    "label": "has",
    "to": 393
  }, {
    "from": 393,
    "label": "has",
    "to": 388
  }, {
    "from": 393,
    "label": "has",
    "to": 389
  }, {
    "from": 393,
    "label": "has",
    "to": 392
  }, {
    "from": 386,
    "label": "has",
    "to": 268
  }, {
    "from": 383,
    "label": "has",
    "to": 394
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 395,
    "label": "has",
    "to": 398
  }, {
    "from": 395,
    "label": "has",
    "to": 399
  }, {
    "from": 395,
    "label": "has",
    "to": 400
  }, {
    "from": 395,
    "label": "has",
    "to": 401
  }, {
    "from": 394,
    "label": "has",
    "to": 402
  }, {
    "from": 377,
    "label": "has",
    "to": 403
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 404,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 404,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 412
  }, {
    "from": 413,
    "label": "has",
    "to": 24
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 415,
    "label": "has",
    "to": 24
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 148,
    "label": "calls",
    "to": 67
  }, {
    "from": 148,
    "label": "calls",
    "to": 67
  }, {
    "from": 183,
    "label": "calls",
    "to": 67
  }, {
    "from": 183,
    "label": "calls",
    "to": 67
  }, {
    "from": 233,
    "label": "calls",
    "to": 67
  }, {
    "from": 233,
    "label": "calls",
    "to": 67
  }, {
    "from": 303,
    "label": "calls",
    "to": 67
  }, {
    "from": 323,
    "label": "calls",
    "to": 67
  }, {
    "from": 331,
    "label": "calls",
    "to": 67
  }, {
    "from": 349,
    "label": "calls",
    "to": 67
  }, {
    "from": 148,
    "label": "calls",
    "to": 419
  }, {
    "from": 148,
    "label": "calls",
    "to": 419
  }, {
    "from": 148,
    "label": "calls",
    "to": 419
  }, {
    "from": 148,
    "label": "calls",
    "to": 419
  }, {
    "from": 183,
    "label": "calls",
    "to": 419
  }, {
    "from": 183,
    "label": "calls",
    "to": 419
  }, {
    "from": 183,
    "label": "calls",
    "to": 419
  }, {
    "from": 183,
    "label": "calls",
    "to": 419
  }, {
    "from": 246,
    "label": "calls",
    "to": 419
  }, {
    "from": 246,
    "label": "calls",
    "to": 419
  }, {
    "from": 22,
    "label": "calls",
    "to": 438
  }, {
    "from": 365,
    "label": "calls",
    "to": 438
  }, {
    "from": 183,
    "label": "calls",
    "to": 126
  }, {
    "from": 315,
    "label": "calls",
    "to": 126
  }, {
    "from": 358,
    "label": "calls",
    "to": 126
  }, {
    "from": 22,
    "label": "calls",
    "to": 420
  }, {
    "from": 84,
    "label": "calls",
    "to": 420
  }, {
    "from": 404,
    "label": "calls",
    "to": 420
  }, {
    "from": 33,
    "label": "calls",
    "to": 421
  }, {
    "from": 84,
    "label": "calls",
    "to": 421
  }, {
    "from": 148,
    "label": "calls",
    "to": 421
  }, {
    "from": 183,
    "label": "calls",
    "to": 421
  }, {
    "from": 253,
    "label": "calls",
    "to": 421
  }, {
    "from": 409,
    "label": "calls",
    "to": 421
  }, {
    "from": 148,
    "label": "calls",
    "to": 422
  }, {
    "from": 183,
    "label": "calls",
    "to": 422
  }, {
    "from": 323,
    "label": "calls",
    "to": 119
  }, {
    "from": 331,
    "label": "calls",
    "to": 119
  }, {
    "from": 353,
    "label": "calls",
    "to": 349
  }, {
    "from": 358,
    "label": "calls",
    "to": 349
  }, {
    "from": 207,
    "label": "calls",
    "to": 423
  }, {
    "from": 94,
    "label": "calls",
    "to": 424
  }, {
    "from": 148,
    "label": "calls",
    "to": 424
  }, {
    "from": 183,
    "label": "calls",
    "to": 424
  }, {
    "from": 183,
    "label": "calls",
    "to": 424
  }, {
    "from": 207,
    "label": "calls",
    "to": 424
  }, {
    "from": 207,
    "label": "calls",
    "to": 424
  }, {
    "from": 207,
    "label": "calls",
    "to": 424
  }, {
    "from": 233,
    "label": "calls",
    "to": 424
  }, {
    "from": 233,
    "label": "calls",
    "to": 424
  }, {
    "from": 233,
    "label": "calls",
    "to": 424
  }, {
    "from": 253,
    "label": "calls",
    "to": 424
  }, {
    "from": 253,
    "label": "calls",
    "to": 424
  }, {
    "from": 253,
    "label": "calls",
    "to": 424
  }, {
    "from": 323,
    "label": "calls",
    "to": 424
  }, {
    "from": 331,
    "label": "calls",
    "to": 424
  }, {
    "from": 331,
    "label": "calls",
    "to": 424
  }, {
    "from": 377,
    "label": "calls",
    "to": 424
  }, {
    "from": 148,
    "label": "calls",
    "to": 138
  }, {
    "from": 148,
    "label": "calls",
    "to": 138
  }, {
    "from": 183,
    "label": "calls",
    "to": 138
  }, {
    "from": 183,
    "label": "calls",
    "to": 138
  }, {
    "from": 233,
    "label": "calls",
    "to": 138
  }, {
    "from": 233,
    "label": "calls",
    "to": 138
  }, {
    "from": 303,
    "label": "calls",
    "to": 138
  }, {
    "from": 323,
    "label": "calls",
    "to": 138
  }, {
    "from": 331,
    "label": "calls",
    "to": 138
  }, {
    "from": 349,
    "label": "calls",
    "to": 138
  }, {
    "from": 372,
    "label": "calls",
    "to": 138
  }, {
    "from": 253,
    "label": "calls",
    "to": 55
  }, {
    "from": 183,
    "label": "calls",
    "to": 43
  }, {
    "from": 315,
    "label": "calls",
    "to": 43
  }, {
    "from": 358,
    "label": "calls",
    "to": 43
  }, {
    "from": 33,
    "label": "calls",
    "to": 111
  }, {
    "from": 94,
    "label": "calls",
    "to": 111
  }, {
    "from": 417,
    "label": "calls",
    "to": 426
  }, {
    "from": 183,
    "label": "calls",
    "to": 427
  }, {
    "from": 183,
    "label": "calls",
    "to": 427
  }, {
    "from": 246,
    "label": "calls",
    "to": 233
  }, {
    "from": 40,
    "label": "calls",
    "to": 441
  }, {
    "from": 183,
    "label": "calls",
    "to": 104
  }, {
    "from": 358,
    "label": "calls",
    "to": 104
  }, {
    "from": 148,
    "label": "calls",
    "to": 432
  }, {
    "from": 148,
    "label": "calls",
    "to": 432
  }, {
    "from": 148,
    "label": "calls",
    "to": 432
  }, {
    "from": 183,
    "label": "calls",
    "to": 432
  }, {
    "from": 183,
    "label": "calls",
    "to": 432
  }, {
    "from": 183,
    "label": "calls",
    "to": 432
  }, {
    "from": 253,
    "label": "calls",
    "to": 432
  }, {
    "from": 253,
    "label": "calls",
    "to": 432
  }, {
    "from": 253,
    "label": "calls",
    "to": 432
  }, {
    "from": 253,
    "label": "calls",
    "to": 432
  }, {
    "from": 22,
    "label": "calls",
    "to": 429
  }, {
    "from": 84,
    "label": "calls",
    "to": 429
  }, {
    "from": 148,
    "label": "calls",
    "to": 429
  }, {
    "from": 148,
    "label": "calls",
    "to": 429
  }, {
    "from": 183,
    "label": "calls",
    "to": 429
  }, {
    "from": 183,
    "label": "calls",
    "to": 429
  }, {
    "from": 253,
    "label": "calls",
    "to": 429
  }, {
    "from": 253,
    "label": "calls",
    "to": 429
  }, {
    "from": 253,
    "label": "calls",
    "to": 429
  }, {
    "from": 253,
    "label": "calls",
    "to": 429
  }, {
    "from": 404,
    "label": "calls",
    "to": 429
  }, {
    "from": 253,
    "label": "calls",
    "to": 246
  }, {
    "from": 253,
    "label": "calls",
    "to": 246
  }, {
    "from": 417,
    "label": "calls",
    "to": 437
  }, {
    "from": 148,
    "label": "calls",
    "to": 439
  }, {
    "from": 183,
    "label": "calls",
    "to": 439
  }, {
    "from": 183,
    "label": "calls",
    "to": 439
  }, {
    "from": 246,
    "label": "calls",
    "to": 439
  }, {
    "from": 353,
    "label": "calls",
    "to": 439
  }, {
    "from": 358,
    "label": "calls",
    "to": 439
  }, {
    "from": 358,
    "label": "calls",
    "to": 439
  }, {
    "from": 183,
    "label": "calls",
    "to": 106
  }, {
    "from": 315,
    "label": "calls",
    "to": 106
  }, {
    "from": 377,
    "label": "calls",
    "to": 440
  }, {
    "from": 377,
    "label": "calls",
    "to": 77
  }, {
    "from": 33,
    "label": "calls",
    "to": 428
  }, {
    "from": 33,
    "label": "calls",
    "to": 428
  }, {
    "from": 94,
    "label": "calls",
    "to": 428
  }, {
    "from": 114,
    "label": "calls",
    "to": 428
  }, {
    "from": 119,
    "label": "calls",
    "to": 428
  }, {
    "from": 138,
    "label": "calls",
    "to": 428
  }, {
    "from": 221,
    "label": "calls",
    "to": 428
  }, {
    "from": 221,
    "label": "calls",
    "to": 428
  }, {
    "from": 227,
    "label": "calls",
    "to": 428
  }, {
    "from": 227,
    "label": "calls",
    "to": 428
  }, {
    "from": 148,
    "label": "calls",
    "to": 40
  }, {
    "from": 148,
    "label": "calls",
    "to": 40
  }, {
    "from": 148,
    "label": "calls",
    "to": 40
  }, {
    "from": 183,
    "label": "calls",
    "to": 40
  }, {
    "from": 183,
    "label": "calls",
    "to": 40
  }, {
    "from": 183,
    "label": "calls",
    "to": 40
  }, {
    "from": 183,
    "label": "calls",
    "to": 40
  }, {
    "from": 246,
    "label": "calls",
    "to": 40
  }, {
    "from": 253,
    "label": "calls",
    "to": 40
  }, {
    "from": 303,
    "label": "calls",
    "to": 40
  }, {
    "from": 315,
    "label": "calls",
    "to": 40
  }, {
    "from": 315,
    "label": "calls",
    "to": 40
  }, {
    "from": 323,
    "label": "calls",
    "to": 40
  }, {
    "from": 323,
    "label": "calls",
    "to": 40
  }, {
    "from": 323,
    "label": "calls",
    "to": 40
  }, {
    "from": 331,
    "label": "calls",
    "to": 40
  }, {
    "from": 331,
    "label": "calls",
    "to": 40
  }, {
    "from": 331,
    "label": "calls",
    "to": 40
  }, {
    "from": 358,
    "label": "calls",
    "to": 40
  }, {
    "from": 358,
    "label": "calls",
    "to": 40
  }, {
    "from": 148,
    "label": "calls",
    "to": 114
  }, {
    "from": 148,
    "label": "calls",
    "to": 114
  }, {
    "from": 183,
    "label": "calls",
    "to": 114
  }, {
    "from": 183,
    "label": "calls",
    "to": 114
  }, {
    "from": 207,
    "label": "calls",
    "to": 114
  }, {
    "from": 207,
    "label": "calls",
    "to": 114
  }, {
    "from": 303,
    "label": "calls",
    "to": 114
  }, {
    "from": 349,
    "label": "calls",
    "to": 114
  }, {
    "from": 43,
    "label": "calls",
    "to": 436
  }, {
    "from": 43,
    "label": "calls",
    "to": 436
  }, {
    "from": 55,
    "label": "calls",
    "to": 436
  }, {
    "from": 55,
    "label": "calls",
    "to": 436
  }, {
    "from": 64,
    "label": "calls",
    "to": 436
  }, {
    "from": 67,
    "label": "calls",
    "to": 436
  }, {
    "from": 67,
    "label": "calls",
    "to": 436
  }, {
    "from": 77,
    "label": "calls",
    "to": 436
  }, {
    "from": 77,
    "label": "calls",
    "to": 436
  }, {
    "from": 372,
    "label": "calls",
    "to": 436
  }, {
    "from": 372,
    "label": "calls",
    "to": 436
  }, {
    "from": 370,
    "label": "calls",
    "to": 433
  }, {
    "from": 22,
    "label": "calls",
    "to": 434
  }, {
    "from": 43,
    "label": "calls",
    "to": 434
  }, {
    "from": 55,
    "label": "calls",
    "to": 434
  }, {
    "from": 61,
    "label": "calls",
    "to": 434
  }, {
    "from": 67,
    "label": "calls",
    "to": 434
  }, {
    "from": 77,
    "label": "calls",
    "to": 434
  }, {
    "from": 119,
    "label": "calls",
    "to": 434
  }, {
    "from": 126,
    "label": "calls",
    "to": 434
  }, {
    "from": 126,
    "label": "calls",
    "to": 434
  }, {
    "from": 183,
    "label": "calls",
    "to": 434
  }, {
    "from": 183,
    "label": "calls",
    "to": 434
  }, {
    "from": 207,
    "label": "calls",
    "to": 434
  }, {
    "from": 207,
    "label": "calls",
    "to": 434
  }, {
    "from": 233,
    "label": "calls",
    "to": 434
  }, {
    "from": 233,
    "label": "calls",
    "to": 434
  }, {
    "from": 233,
    "label": "calls",
    "to": 434
  }, {
    "from": 253,
    "label": "calls",
    "to": 434
  }, {
    "from": 253,
    "label": "calls",
    "to": 434
  }, {
    "from": 253,
    "label": "calls",
    "to": 434
  }, {
    "from": 253,
    "label": "calls",
    "to": 434
  }, {
    "from": 246,
    "label": "calls",
    "to": 435
  }, {
    "from": 377,
    "label": "calls",
    "to": 435
  }, {
    "from": 377,
    "label": "calls",
    "to": 435
  }, {
    "from": 377,
    "label": "calls",
    "to": 435
  }, {
    "from": 104,
    "label": "calls",
    "to": 99
  }, {
    "from": 106,
    "label": "calls",
    "to": 99
  }, {
    "from": 16,
    "label": "calls",
    "to": 15
  }, {
    "from": 16,
    "label": "calls",
    "to": 431
  }, {
    "from": 22,
    "label": "calls",
    "to": 430
  }, {
    "from": 89,
    "label": "calls",
    "to": 430
  }, {
    "from": 99,
    "label": "calls",
    "to": 430
  }, {
    "from": 365,
    "label": "calls",
    "to": 430
  }, {
    "from": 253,
    "label": "calls",
    "to": 207
  }, {
    "from": 253,
    "label": "calls",
    "to": 207
  }, {
    "from": 377,
    "label": "calls",
    "to": 64
  }, {
    "from": 377,
    "label": "calls",
    "to": 64
  }, {
    "from": 67,
    "label": "calls",
    "to": 61
  }, {
    "from": 148,
    "label": "calls",
    "to": 61
  }, {
    "from": 183,
    "label": "calls",
    "to": 61
  }, {
    "from": 246,
    "label": "calls",
    "to": 61
  }, {
    "from": 303,
    "label": "calls",
    "to": 61
  }, {
    "from": 323,
    "label": "calls",
    "to": 61
  }, {
    "from": 377,
    "label": "calls",
    "to": 84
  }, {
    "from": 377,
    "label": "calls",
    "to": 84
  }, {
    "from": 417,
    "label": "calls",
    "to": 425
  }, {
    "from": 417,
    "label": "calls",
    "to": 425
  }, {
    "from": 377,
    "label": "calls",
    "to": 425
  }, {
    "from": 377,
    "label": "calls",
    "to": 425
  }, {
    "from": 315,
    "label": "calls",
    "to": 303
  }, {
    "from": 1,
    "label": "contains",
    "to": 417
  }, {
    "from": 417,
    "label": "declares",
    "to": 9
  }, {
    "from": 417,
    "label": "declares",
    "to": 10
  }, {
    "from": 417,
    "label": "declares",
    "to": 15
  }, {
    "from": 417,
    "label": "declares",
    "to": 16
  }, {
    "from": 417,
    "label": "declares",
    "to": 22
  }, {
    "from": 417,
    "label": "declares",
    "to": 33
  }, {
    "from": 417,
    "label": "declares",
    "to": 40
  }, {
    "from": 417,
    "label": "declares",
    "to": 43
  }, {
    "from": 417,
    "label": "declares",
    "to": 55
  }, {
    "from": 417,
    "label": "declares",
    "to": 61
  }, {
    "from": 417,
    "label": "declares",
    "to": 64
  }, {
    "from": 417,
    "label": "declares",
    "to": 67
  }, {
    "from": 417,
    "label": "declares",
    "to": 77
  }, {
    "from": 417,
    "label": "declares",
    "to": 84
  }, {
    "from": 417,
    "label": "declares",
    "to": 89
  }, {
    "from": 417,
    "label": "declares",
    "to": 94
  }, {
    "from": 417,
    "label": "declares",
    "to": 99
  }, {
    "from": 417,
    "label": "declares",
    "to": 104
  }, {
    "from": 417,
    "label": "declares",
    "to": 106
  }, {
    "from": 417,
    "label": "declares",
    "to": 111
  }, {
    "from": 417,
    "label": "declares",
    "to": 114
  }, {
    "from": 417,
    "label": "declares",
    "to": 119
  }, {
    "from": 417,
    "label": "declares",
    "to": 126
  }, {
    "from": 417,
    "label": "declares",
    "to": 138
  }, {
    "from": 417,
    "label": "declares",
    "to": 144
  }, {
    "from": 417,
    "label": "declares",
    "to": 146
  }, {
    "from": 417,
    "label": "declares",
    "to": 148
  }, {
    "from": 417,
    "label": "declares",
    "to": 181
  }, {
    "from": 417,
    "label": "declares",
    "to": 183
  }, {
    "from": 417,
    "label": "declares",
    "to": 205
  }, {
    "from": 417,
    "label": "declares",
    "to": 207
  }, {
    "from": 417,
    "label": "declares",
    "to": 221
  }, {
    "from": 417,
    "label": "declares",
    "to": 227
  }, {
    "from": 417,
    "label": "declares",
    "to": 233
  }, {
    "from": 417,
    "label": "declares",
    "to": 246
  }, {
    "from": 417,
    "label": "declares",
    "to": 253
  }, {
    "from": 417,
    "label": "declares",
    "to": 301
  }, {
    "from": 417,
    "label": "declares",
    "to": 303
  }, {
    "from": 417,
    "label": "declares",
    "to": 315
  }, {
    "from": 417,
    "label": "declares",
    "to": 323
  }, {
    "from": 417,
    "label": "declares",
    "to": 331
  }, {
    "from": 417,
    "label": "declares",
    "to": 349
  }, {
    "from": 417,
    "label": "declares",
    "to": 353
  }, {
    "from": 417,
    "label": "declares",
    "to": 358
  }, {
    "from": 417,
    "label": "declares",
    "to": 365
  }, {
    "from": 417,
    "label": "declares",
    "to": 370
  }, {
    "from": 417,
    "label": "declares",
    "to": 372
  }, {
    "from": 417,
    "label": "declares",
    "to": 377
  }, {
    "from": 417,
    "label": "declares",
    "to": 404
  }, {
    "from": 417,
    "label": "declares",
    "to": 409
  }, {
    "from": 417,
    "label": "declares",
    "to": 413
  }, {
    "from": 417,
    "label": "declares",
    "to": 415
  }, {
    "from": 1,
    "label": "declares",
    "to": 418
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 442,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 443
  }, {
    "from": 1,
    "label": "contains",
    "to": 444
  }, {
    "from": 443,
    "label": "initializes",
    "to": 445
  }, {
    "from": 445,
    "label": "assigns",
    "to": 446
  }, {
    "from": 443,
    "label": "initializes",
    "to": 447
  }, {
    "from": 447,
    "label": "assigns",
    "to": 448
  }, {
    "from": 443,
    "label": "initializes",
    "to": 449
  }, {
    "from": 443,
    "label": "initializes",
    "to": 450
  }, {
    "from": 450,
    "label": "assigns",
    "to": 451
  }, {
    "from": 443,
    "label": "initializes",
    "to": 452
  }, {
    "from": 452,
    "label": "assigns",
    "to": 453
  }, {
    "from": 443,
    "label": "initializes",
    "to": 454
  }, {
    "from": 454,
    "label": "assigns",
    "to": 455
  }, {
    "from": 443,
    "label": "initializes",
    "to": 456
  }, {
    "from": 456,
    "label": "assigns",
    "to": 457
  }, {
    "from": 443,
    "label": "initializes",
    "to": 458
  }, {
    "from": 458,
    "label": "assigns",
    "to": 459
  }, {
    "from": 443,
    "label": "initializes",
    "to": 460
  }, {
    "from": 460,
    "label": "assigns",
    "to": 461
  }, {
    "from": 443,
    "label": "initializes",
    "to": 462
  }, {
    "from": 462,
    "label": "assigns",
    "to": 463
  }, {
    "from": 443,
    "label": "initializes",
    "to": 464
  }, {
    "from": 464,
    "label": "assigns",
    "to": 465
  }, {
    "from": 444,
    "label": "initializes",
    "to": 442
  }, {
    "from": 456,
    "label": "contains",
    "to": 144
  }, {
    "from": 456,
    "label": "contains",
    "to": 146
  }, {
    "from": 458,
    "label": "contains",
    "to": 148
  }, {
    "from": 458,
    "label": "contains",
    "to": 183
  }, {
    "from": 460,
    "label": "contains",
    "to": 207
  }, {
    "from": 460,
    "label": "contains",
    "to": 221
  }, {
    "from": 460,
    "label": "contains",
    "to": 227
  }, {
    "from": 460,
    "label": "contains",
    "to": 233
  }, {
    "from": 460,
    "label": "contains",
    "to": 246
  }, {
    "from": 460,
    "label": "contains",
    "to": 253
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pithreads",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "",
    "type": "function container"
  }, {
    "id": 7,
    "text": "",
    "type": "function container"
  }, {
    "id": 8,
    "text": "",
    "type": "function container"
  }, {
    "id": 9,
    "text": "local function DEBUG(proc,...) end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function(proc,...)\r\n      if proc ~= nil and proc.name ~= nil then\r\n        print(\"[\"..proc.name..\"]\",...)\r\n      else\r\n        print(\"[AGENT]\",...)\r\n      end\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "if proc ~= nil and proc.name ~= nil then\r\n        print(\"[\"..proc.name..\"]\",...)\r\n      else\r\n        print(\"[AGENT]\",...)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "print(\"[\"..proc.name..\"]\",...)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "print(\"[AGENT]\",...)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function(proc) end",
    "type": "function"
  }, {
    "id": 16,
    "text": "local function processInitWrapper(proc,fun,...)\r\n  --coroutine.yield(proc)\r\n  proc.mode = \"ready\"\r\n  proc:yield()\r\n  --DEBUG(proc,\"starts with fun\",fun,\"arg\",...)\r\n  fun(proc,...)\r\n  -- DEBUG(proc.agent,\"HERE proc=\",proc)\r\n  destroy(proc)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "proc.mode = \"ready\"",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "proc:yield()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "fun(proc,...)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "destroy(proc)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function makeProcess(iagent,name,fun,...)\r\n  local proc = { tag=\"proc\", name=name, mode=\"init\", commits = {}, agent=iagent,\r\n                 routine=coroutine.create(processInitWrapper),send=send,emit=send,signal=send,\r\n                 receive=receive,wait=receive,listen=receive,\r\n                 trySend=trySend,tryReceive=tryReceive,\r\n                 choice=Choice.make, tryChoice=Choice.try,\r\n                 broadcast=broadcast,bcast=broadcast,speak=broadcast,talk=broadcast,\r\n                 collect=collect,\r\n                 join=Join.join,\r\n                 new=function(proc,...) \r\n                       return proc.agent:new(...) \r\n                     end, \r\n                 spawn=function(proc,...) \r\n                         return proc.agent:spawn(...) \r\n                       end,\r\n                 yield=yieldProcess}\r\n  local procMT = { __tostring = processToString }\r\n  setmetatable(proc,procMT)\r\n  --DEBUG(iagent,\"Make process: \"..tostring(proc)..\" with arguments\",...)\r\n  table.insert(iagent.procs.ready,proc)\r\n  proc.ref = #iagent.procs.ready   -- reference in the agent (O(1) detroy)\r\n  local ret,res = coroutine.resume(proc.routine,proc,fun,...)\r\n  if not ret then\r\n    error(\"Initialisation error: \"..res)\r\n  end\r\n  return proc\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local proc = { tag=\"proc\", name=name, mode=\"init\", commits = {}, agent=iagent,\r\n                 routine=coroutine.create(processInitWrapper),send=send,emit=send,signal=send,\r\n                 receive=receive,wait=receive,listen=receive,\r\n                 trySend=trySend,tryReceive=tryReceive,\r\n                 choice=Choice.make, tryChoice=Choice.try,\r\n                 broadcast=broadcast,bcast=broadcast,speak=broadcast,talk=broadcast,\r\n                 collect=collect,\r\n                 join=Join.join,\r\n                 new=function(proc,...) \r\n                       return proc.agent:new(...) \r\n                     end, \r\n                 spawn=function(proc,...) \r\n                         return proc.agent:spawn(...) \r\n                       end,\r\n                 yield=yieldProcess}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 25,
    "text": "local procMT = { __tostring = processToString }",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "setmetatable(proc,procMT)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "table.insert(iagent.procs.ready,proc)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "proc.ref = #iagent.procs.ready",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local ret,res = coroutine.resume(proc.routine,proc,fun,...)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not ret then\r\n    error(\"Initialisation error: \"..res)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "error(\"Initialisation error: \"..res)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function processToString(proc)\r\n  local str = \"proc[\"..proc.name..\":\"..tostring(proc.ref)..\"(\"..proc.mode..\"),commits={ \"\r\n  for chan,commits in pairs(proc.commits) do\r\n    for i,commit in pairs(commits) do\r\n      str = str .. commitToString(commit) .. \" \"\r\n      end\r\n  end\r\n  str = str .. \"}]\"\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local str = \"proc[\"..proc.name..\":\"..tostring(proc.ref)..\"(\"..proc.mode..\"),commits={ \"",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "for chan,commits in pairs(proc.commits) do\r\n    for i,commit in pairs(commits) do\r\n      str = str .. commitToString(commit) .. \" \"\r\n      end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "for i,commit in pairs(commits) do\r\n      str = str .. commitToString(commit) .. \" \"\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "str = str .. commitToString(commit) .. \" \"",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "str = str .. \"}]\"",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function yieldProcess(proc)\r\n  --DEBUG(proc,\"yields\")\r\n  result = coroutine.yield()\r\n  --DEBUG(proc,\"resumes with\",u.toString(result))\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "result = coroutine.yield()",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function awaitProcess(proc)\r\n  --assert(proc.mode~=\"waiting\",\"The process must not be already waiting\")\r\n\r\n  proc.mode=\"waiting\"\r\n  local ready = proc.agent.procs.ready\r\n  local waiting = proc.agent.procs.waiting\r\n  -- remove the process from the ready queue\r\n  if #ready==1 then\r\n    table.remove(ready,proc.ref)\r\n  else\r\n    ready[proc.ref] = ready[#ready]\r\n    ready[proc.ref].ref = proc.ref\r\n    table.remove(ready,#ready)\r\n  end\r\n  -- and put it in the waiting queue\r\n  table.insert(waiting,proc)\r\n  proc.ref = #waiting  \r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "proc.mode=\"waiting\"",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "local ready = proc.agent.procs.ready",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local waiting = proc.agent.procs.waiting",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if #ready==1 then\r\n    table.remove(ready,proc.ref)\r\n  else\r\n    ready[proc.ref] = ready[#ready]\r\n    ready[proc.ref].ref = proc.ref\r\n    table.remove(ready,#ready)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "table.remove(ready,proc.ref)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "ready[proc.ref] = ready[#ready]",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "ready[proc.ref].ref = proc.ref",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "table.remove(ready,#ready)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "table.insert(waiting,proc)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "proc.ref = #waiting",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function awaitJoinProcess(proc)\r\n  --assert(proc.mode~=\"waiting\",\"The process must not be already waiting\")\r\n\r\n  proc.mode=\"joining\"\r\n  local ready = proc.agent.procs.ready\r\n  local joining = proc.agent.procs.joining\r\n  -- remove the process from the ready queue\r\n  if #ready==1 then\r\n    table.remove(ready,proc.ref)\r\n  else\r\n    ready[proc.ref] = ready[#ready]\r\n    ready[proc.ref].ref = proc.ref\r\n    table.remove(ready,#ready)\r\n  end\r\n  -- and put it in the joining queue\r\n  table.insert(joining,proc)\r\n  proc.ref = #joining\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "proc.mode=\"joining\"",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "local joining = proc.agent.procs.joining",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "table.insert(joining,proc)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "proc.ref = #joining",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function pushPrioProcess(proc)\r\n  --assert(proc~=nil,\"The process must not be nil\")\r\n  --assert(proc.mode==\"ready\",\"The process must be ready to be prioritized\")\r\n  \r\n  table.insert(proc.agent.procs.prio,proc)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "table.insert(proc.agent.procs.prio,proc)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "local function popPrioProcess(agent)\r\n  --assert(next(agent.procs.prio)~=nil,\"The prioritized queue must not be empty\")\r\n  local proc = table.remove(agent.procs.prio)\r\n  return proc\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local proc = table.remove(agent.procs.prio)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "local function readyProcess(proc)\r\n  --assert(proc~=nil,\"The process must not be nil\")\r\n  --assert(proc.mode==\"waiting\",\"The process must be initially waiting\")\r\n\r\n  proc.mode = \"ready\"\r\n\r\n  local ready = proc.agent.procs.ready\r\n  local waiting = proc.agent.procs.waiting\r\n  -- remove the process from the waiting queue\r\n  if #waiting==1 then\r\n    table.remove(waiting,proc.ref)\r\n  else\r\n    waiting[proc.ref] = waiting[#waiting]\r\n    waiting[proc.ref].ref = proc.ref\r\n    table.remove(waiting,#waiting)\r\n  end\r\n  -- and put it in the ready queue\r\n  table.insert(ready,proc)\r\n  proc.ref = #ready\r\n  \r\n  pushPrioProcess(proc) -- makes the process prioritized\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "if #waiting==1 then\r\n    table.remove(waiting,proc.ref)\r\n  else\r\n    waiting[proc.ref] = waiting[#waiting]\r\n    waiting[proc.ref].ref = proc.ref\r\n    table.remove(waiting,#waiting)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "table.remove(waiting,proc.ref)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "waiting[proc.ref] = waiting[#waiting]",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "waiting[proc.ref].ref = proc.ref",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "table.remove(waiting,#waiting)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "table.insert(ready,proc)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "proc.ref = #ready",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "pushPrioProcess(proc)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "local function readyJoiningProcess(proc)\r\n  --assert(proc~=nil,\"The process must not be nil\")\r\n  --assert(proc.mode==\"waiting\",\"The process must be initially waiting\")\r\n\r\n  proc.mode = \"ready\"\r\n\r\n  local ready = proc.agent.procs.ready\r\n  local joining = proc.agent.procs.joining\r\n  -- remove the process from the joining queue\r\n  if #joining==1 then\r\n    table.remove(joining,proc.ref)\r\n  else\r\n    joining[proc.ref] = joining[#joining]\r\n    joining[proc.ref].ref = proc.ref\r\n    table.remove(joining,#joining)\r\n  end\r\n  -- and put it in the ready queue\r\n  table.insert(ready,proc)\r\n  proc.ref = #ready\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "if #joining==1 then\r\n    table.remove(joining,proc.ref)\r\n  else\r\n    joining[proc.ref] = joining[#joining]\r\n    joining[proc.ref].ref = proc.ref\r\n    table.remove(joining,#joining)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "table.remove(joining,proc.ref)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "joining[proc.ref] = joining[#joining]",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "joining[proc.ref].ref = proc.ref",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "table.remove(joining,#joining)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function awakeProcess(proc)\r\n  --assert(proc~=nil,\"The process must not be nil\")\r\n\r\n  --DEBUG(proc,\"awaking\")\r\n  --DEBUG(proc,\"coroutine status\",coroutine.status(proc.routine))\r\n  local err,ret = coroutine.resume(proc.routine)  -- TODO: what if res is false ?  error-management ?\r\n  --DEBUG(proc,\"end of wake with\",err,res)\r\n  -- --DEBUG(proc,\"traceback: \"..debug.traceback())\r\n  if not err then\r\n    error(\"Process \"..tostring(proc)..\" aborted: \\n ==> \"..ret)\r\n  end\r\n  -- here ret is true so there is no error\r\n  return ret -- should be a commitment\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local err,ret = coroutine.resume(proc.routine)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if not err then\r\n    error(\"Process \"..tostring(proc)..\" aborted: \\n ==> \"..ret)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "error(\"Process \"..tostring(proc)..\" aborted: \\n ==> \"..ret)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function makeChannel(agent,name)\r\n  local chan = { tag=\"chan\", name=name, incommits={}, outcommits={}, \r\n                 send=Guard.send, receive=Guard.receive,\r\n                 broadcasting=nil, collecting=nil, outjoin=nil, injoin=nil }\r\n  local chanMT = { __tostring = channelToString }\r\n  setmetatable(chan,chanMT)\r\n  -- XXX: do not record channels globally (if needed, use weak references to\r\n  --      let the GC perform its work...)\r\n  -- table.insert(agent.chans,chan)\r\n  return chan\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local chan = { tag=\"chan\", name=name, incommits={}, outcommits={}, \r\n                 send=Guard.send, receive=Guard.receive,\r\n                 broadcasting=nil, collecting=nil, outjoin=nil, injoin=nil }",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local chanMT = { __tostring = channelToString }",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "setmetatable(chan,chanMT)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function channelToString(chan)\r\n  local str = \"chan[\"..chan.name..\",incommits={ \"\r\n  for proc,commits in pairs(chan.incommits) do\r\n    for i,commit in ipairs(commits) do\r\n      str = str .. commitToString(commit) .. \" \"\r\n    end\r\n  end\r\n  str = str .. \"}]\"\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local str = \"chan[\"..chan.name..\",incommits={ \"",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "for proc,commits in pairs(chan.incommits) do\r\n    for i,commit in ipairs(commits) do\r\n      str = str .. commitToString(commit) .. \" \"\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "for i,commit in ipairs(commits) do\r\n      str = str .. commitToString(commit) .. \" \"\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "local function makeCommitment(proc,chan,kind,cont) \r\n  -- create the commitment\r\n  local commit = { tag=\"commit\", proc=proc, chan=chan, kind=kind, cont=cont}\r\n  local commitMT = { __tostring = commitToString }\r\n  setmetatable(commit,commitMT)\r\n  ----DEBUG(proc,\"creating new commitment: \"..u.toString(commit))\r\n  ----DEBUG(proc,\"process is \" .. u.toString(cproc.name),\"chan is \" .. u.toString(chan,1))\r\n  return commit\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local commit = { tag=\"commit\", proc=proc, chan=chan, kind=kind, cont=cont}",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local commitMT = { __tostring = commitToString }",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "setmetatable(commit,commitMT)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function makeInputCommitment(proc,chan,cont)\r\n  return makeCommitment(proc,chan,\"input\",cont)\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "local function makeOutputCommitment(proc,chan,value,extra,cont)\r\n  commit = makeCommitment(proc,chan,\"output\",cont)\r\n  commit.value = value\r\n  commit.extra = extra\r\n  return commit\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "commit = makeCommitment(proc,chan,\"output\",cont)",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "commit.value = value",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "commit.extra = extra",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function commitToString(commit)\r\n  if commit.kind==\"input\" then\r\n    return \"Commit[\"..commit.proc.name..\"<-\"..commit.chan.name..\"(\"..commit.kind..\")]\"\r\n  else\r\n    return \"Commit[\"..commit.proc.name..\"->\"..commit.chan.name..\"(\"..commit.kind..\")]\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "if commit.kind==\"input\" then\r\n    return \"Commit[\"..commit.proc.name..\"<-\"..commit.chan.name..\"(\"..commit.kind..\")]\"\r\n  else\r\n    return \"Commit[\"..commit.proc.name..\"->\"..commit.chan.name..\"(\"..commit.kind..\")]\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "local function lookupCommitment(proc,commits)\r\n  if commits==nil then\r\n    return nil\r\n  else\r\n  -- look for a commitment\r\n  --DEBUG(chan,\"Lookup for commitment on \"..tostring(chan)..\" of kind \"..kind)\r\n    for proc2,commits in pairs(commits) do\r\n      -- TODO: here we always take the first commitment ... maybe a fair approach would be better\r\n      -- (easy, keep a counter in the channel)\r\n      if proc2~=proc then\r\n        return commits[1]\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "if commits==nil then\r\n    return nil\r\n  else\r\n  -- look for a commitment\r\n  --DEBUG(chan,\"Lookup for commitment on \"..tostring(chan)..\" of kind \"..kind)\r\n    for proc2,commits in pairs(commits) do\r\n      -- TODO: here we always take the first commitment ... maybe a fair approach would be better\r\n      -- (easy, keep a counter in the channel)\r\n      if proc2~=proc then\r\n        return commits[1]\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "for proc2,commits in pairs(commits) do\r\n      -- TODO: here we always take the first commitment ... maybe a fair approach would be better\r\n      -- (easy, keep a counter in the channel)\r\n      if proc2~=proc then\r\n        return commits[1]\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 117,
    "text": "if proc2~=proc then\r\n        return commits[1]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "local function lookupAllCommitments(proc,commits)\r\n  --DEBUG(chan,\"Lookup for all commitments on \"..tostring(chan)..\" of kind \"..kind)\r\n  if commits==nil then\r\n    return nil\r\n  else\r\n    local selected = {}\r\n    -- we only need to get one corresponding commitment for each found process\r\n    for proc2,pcommits in pairs(commits) do\r\n      --TODO: here select the first commitment of the peer process\r\n      -- maybe other strategies could be implemented (random/fair)\r\n      if proc2~=proc then -- XXX: should not be the case (a broadcasting process cannot put commitments)\r\n        table.insert(selected,pcommits[1])\r\n      end\r\n    end\r\n    return selected\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "if commits==nil then\r\n    return nil\r\n  else\r\n    local selected = {}\r\n    -- we only need to get one corresponding commitment for each found process\r\n    for proc2,pcommits in pairs(commits) do\r\n      --TODO: here select the first commitment of the peer process\r\n      -- maybe other strategies could be implemented (random/fair)\r\n      if proc2~=proc then -- XXX: should not be the case (a broadcasting process cannot put commitments)\r\n        table.insert(selected,pcommits[1])\r\n      end\r\n    end\r\n    return selected\r\n  end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "local selected = {}",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "for proc2,pcommits in pairs(commits) do\r\n      --TODO: here select the first commitment of the peer process\r\n      -- maybe other strategies could be implemented (random/fair)\r\n      if proc2~=proc then -- XXX: should not be the case (a broadcasting process cannot put commitments)\r\n        table.insert(selected,pcommits[1])\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 123,
    "text": "if proc2~=proc then -- XXX: should not be the case (a broadcasting process cannot put commitments)\r\n        table.insert(selected,pcommits[1])\r\n      end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "table.insert(selected,pcommits[1])",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "local function registerCommitment(proc,chan,commit)\r\n  -- register the commitment in the process\r\n  if proc.commits[chan] == nil then\r\n    proc.commits[chan] = { commit }\r\n  else\r\n    table.insert(proc.commits[chan],commit)\r\n  end\r\n  --DEBUG(proc,\"register commitment: \"..u.toString(proc.commits,3))\r\n  -- register the commitment in the channel\r\n  local commits = nil\r\n  if commit.kind==\"input\" then\r\n    commits = chan.incommits\r\n  else\r\n    commits = chan.outcommits\r\n  end\r\n\r\n  if commits[proc] == nil then\r\n    commits[proc] = { commit }\r\n  else\r\n   table.insert(commits[proc],commit)\r\n  end\r\n  --DEBUG(proc,\"register commitment in chan: \"..u.toString(chan.commits,3))\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "if proc.commits[chan] == nil then\r\n    proc.commits[chan] = { commit }\r\n  else\r\n    table.insert(proc.commits[chan],commit)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "proc.commits[chan] = { commit }",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "table.insert(proc.commits[chan],commit)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local commits = nil",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if commit.kind==\"input\" then\r\n    commits = chan.incommits\r\n  else\r\n    commits = chan.outcommits\r\n  end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "commits = chan.incommits",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "commits = chan.outcommits",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "if commits[proc] == nil then\r\n    commits[proc] = { commit }\r\n  else\r\n   table.insert(commits[proc],commit)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "commits[proc] = { commit }",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "table.insert(commits[proc],commit)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "local function eraseCommitments(proc)\r\n  --DEBUG(proc,\"Erase commitments of \"..tostring(proc))\r\n  for chan,commits in pairs(proc.commits) do\r\n    chan.incommits[proc] = nil\r\n    chan.outcommits[proc] = nil\r\n  end\r\n  proc.commits = {}\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "for chan,commits in pairs(proc.commits) do\r\n    chan.incommits[proc] = nil\r\n    chan.outcommits[proc] = nil\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 140,
    "text": "chan.incommits[proc] = nil",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "chan.outcommits[proc] = nil",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "proc.commits = {}",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function Guard.send(chan,value,...)\r\n  return { tag=\"guard\", chan=chan,mode=\"send\",value=value,extra={...} }\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function Guard.receive(chan)\r\n  return { tag=\"guard\", chan=chan, mode=\"receive\" }\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function Choice.try(proc,...)\r\n  local arg={...}\r\n  local tryChoiceFun = function()\r\n    local chosen = -1\r\n    --DEBUG(proc,\"Making choice, args = \"..u.toString(arg,3))\r\n    for i,ch in ipairs(arg) do\r\n      local choice = ch[1]\r\n      local cont = ch[2]\r\n      --DEBUG(proc,\"Analyse choice \"..u.toString(choice))\r\n      if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end\r\n    end -- for loop\r\n    if chosen==-1 then\r\n      return false\r\n    else\r\n      return true,chosen\r\n    end\r\n  end -- tryChoiceFun()\r\n  return tryChoiceFun\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "local arg={...}",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "local tryChoiceFun = function()\r\n    local chosen = -1\r\n    --DEBUG(proc,\"Making choice, args = \"..u.toString(arg,3))\r\n    for i,ch in ipairs(arg) do\r\n      local choice = ch[1]\r\n      local cont = ch[2]\r\n      --DEBUG(proc,\"Analyse choice \"..u.toString(choice))\r\n      if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end\r\n    end -- for loop\r\n    if chosen==-1 then\r\n      return false\r\n    else\r\n      return true,chosen\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "local chosen = -1",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "for i,ch in ipairs(arg) do\r\n      local choice = ch[1]\r\n      local cont = ch[2]\r\n      --DEBUG(proc,\"Analyse choice \"..u.toString(choice))\r\n      if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 153,
    "text": "local choice = ch[1]",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "local cont = ch[2]",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "cont()",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "chosen = i",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "error(\"Invalid guard\")",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end",
    "type": "statement:while"
  }, {
    "id": 163,
    "text": "yieldProcess(proc)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "local commit = lookupCommitment(proc,choice.chan.incommits)",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "eraseCommitments(commit.proc)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "commit.value = choice.value",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "commit.extra = choice.extra",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "commit.proc.lastCommit=commit",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "readyProcess(commit.proc)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "if cont~=nil then\r\n            cont()\r\n          end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end",
    "type": "statement:while"
  }, {
    "id": 173,
    "text": "local commit = lookupCommitment(proc,choice.chan.outcommits)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "commit.proc.lastCommit = commit",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "cont(commit.value,unpack(commit.extra))",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "if chosen==-1 then\r\n      return false\r\n    else\r\n      return true,chosen\r\n    end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function()\r\n    local chosen = -1\r\n    --DEBUG(proc,\"Making choice, args = \"..u.toString(arg,3))\r\n    for i,ch in ipairs(arg) do\r\n      local choice = ch[1]\r\n      local cont = ch[2]\r\n      --DEBUG(proc,\"Analyse choice \"..u.toString(choice))\r\n      if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end\r\n    end -- for loop\r\n    if chosen==-1 then\r\n      return false\r\n    else\r\n      return true,chosen\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function Choice.make(proc,...)\r\n  local arg = {...}  -- lua pre 5.1 compatibility for luajit\r\n  local choiceFun = function ()\r\n    local commits = {}\r\n    local chosen = -1\r\n    --DEBUG(proc,\"Making choice, args = \"..u.toString(arg,3))\r\n    for i,ch in ipairs(arg) do\r\n      local choice = ch[1]\r\n      local cont = ch[2]\r\n      --DEBUG(proc,\"Analyse choice \"..u.toString(choice))\r\n      if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeOutputCommitment(proc,choice.chan,choice.value,choice.extra,cont))\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeInputCommitment(proc,choice.chan,cont))\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end\r\n    end -- for loop\r\n    if chosen==-1 then\r\n      --DEBUG(proc,\"Register all choice commitments in \"..u.toString(commits))\r\n      -- no branch has been chosen\r\n      for i,commit in ipairs(commits) do\r\n        commit.index = i\r\n        proc.lastCommit = nil\r\n        registerCommitment(proc,commit.chan,commit)\r\n      end\r\n      awaitProcess(proc)\r\n      yieldProcess(proc)\r\n      --DEBUG(proc,\"(choice) Awaken with commitment \"..u.toString(commit))\r\n      local commit = proc.lastCommit\r\n      proc.lastCommit = nil\r\n      if commit.cont~=nil then -- there is a continuation to execute  \r\n      --DEBUG(proc,\"A continuation has to execute: \",commit.cont)\r\n        if commit.kind==\"output\" then -- output continuation\r\n          --DEBUG(proc,\"Output (or broadcast) continuation (no arg)\")\r\n          commit.cont()\r\n        elseif commit.kind==\"input\" then -- input continuation\r\n          --DEBUG(proc,\"Intput continuation (passed arg=\"..tostring(commit.value)..\")\")\r\n          commit.cont(commit.value,unpack(commit.extra))\r\n        end\r\n      end\r\n      --DEBUG(proc,\"Choosen (after waiting) \"..tostring(chosen)..\"th branch\")\r\n      return commit.index\r\n    else\r\n      --DEBUG(proc,\"Choosen \"..tostring(chosen)..\"th branch\")\r\n      return chosen\r\n    end\r\n  end\r\n  return choiceFun\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "local arg = {...}",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "local choiceFun = function ()\r\n    local commits = {}\r\n    local chosen = -1\r\n    --DEBUG(proc,\"Making choice, args = \"..u.toString(arg,3))\r\n    for i,ch in ipairs(arg) do\r\n      local choice = ch[1]\r\n      local cont = ch[2]\r\n      --DEBUG(proc,\"Analyse choice \"..u.toString(choice))\r\n      if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeOutputCommitment(proc,choice.chan,choice.value,choice.extra,cont))\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeInputCommitment(proc,choice.chan,cont))\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end\r\n    end -- for loop\r\n    if chosen==-1 then\r\n      --DEBUG(proc,\"Register all choice commitments in \"..u.toString(commits))\r\n      -- no branch has been chosen\r\n      for i,commit in ipairs(commits) do\r\n        commit.index = i\r\n        proc.lastCommit = nil\r\n        registerCommitment(proc,commit.chan,commit)\r\n      end\r\n      awaitProcess(proc)\r\n      yieldProcess(proc)\r\n      --DEBUG(proc,\"(choice) Awaken with commitment \"..u.toString(commit))\r\n      local commit = proc.lastCommit\r\n      proc.lastCommit = nil\r\n      if commit.cont~=nil then -- there is a continuation to execute  \r\n      --DEBUG(proc,\"A continuation has to execute: \",commit.cont)\r\n        if commit.kind==\"output\" then -- output continuation\r\n          --DEBUG(proc,\"Output (or broadcast) continuation (no arg)\")\r\n          commit.cont()\r\n        elseif commit.kind==\"input\" then -- input continuation\r\n          --DEBUG(proc,\"Intput continuation (passed arg=\"..tostring(commit.value)..\")\")\r\n          commit.cont(commit.value,unpack(commit.extra))\r\n        end\r\n      end\r\n      --DEBUG(proc,\"Choosen (after waiting) \"..tostring(chosen)..\"th branch\")\r\n      return commit.index\r\n    else\r\n      --DEBUG(proc,\"Choosen \"..tostring(chosen)..\"th branch\")\r\n      return chosen\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "local commits = {}",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "for i,ch in ipairs(arg) do\r\n      local choice = ch[1]\r\n      local cont = ch[2]\r\n      --DEBUG(proc,\"Analyse choice \"..u.toString(choice))\r\n      if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeOutputCommitment(proc,choice.chan,choice.value,choice.extra,cont))\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeInputCommitment(proc,choice.chan,cont))\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 188,
    "text": "if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeOutputCommitment(proc,choice.chan,choice.value,choice.extra,cont))\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeInputCommitment(proc,choice.chan,cont))\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeOutputCommitment(proc,choice.chan,choice.value,choice.extra,cont))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "table.insert(commits,makeOutputCommitment(proc,choice.chan,choice.value,choice.extra,cont))",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeInputCommitment(proc,choice.chan,cont))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "table.insert(commits,makeInputCommitment(proc,choice.chan,cont))",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "if chosen==-1 then\r\n      --DEBUG(proc,\"Register all choice commitments in \"..u.toString(commits))\r\n      -- no branch has been chosen\r\n      for i,commit in ipairs(commits) do\r\n        commit.index = i\r\n        proc.lastCommit = nil\r\n        registerCommitment(proc,commit.chan,commit)\r\n      end\r\n      awaitProcess(proc)\r\n      yieldProcess(proc)\r\n      --DEBUG(proc,\"(choice) Awaken with commitment \"..u.toString(commit))\r\n      local commit = proc.lastCommit\r\n      proc.lastCommit = nil\r\n      if commit.cont~=nil then -- there is a continuation to execute  \r\n      --DEBUG(proc,\"A continuation has to execute: \",commit.cont)\r\n        if commit.kind==\"output\" then -- output continuation\r\n          --DEBUG(proc,\"Output (or broadcast) continuation (no arg)\")\r\n          commit.cont()\r\n        elseif commit.kind==\"input\" then -- input continuation\r\n          --DEBUG(proc,\"Intput continuation (passed arg=\"..tostring(commit.value)..\")\")\r\n          commit.cont(commit.value,unpack(commit.extra))\r\n        end\r\n      end\r\n      --DEBUG(proc,\"Choosen (after waiting) \"..tostring(chosen)..\"th branch\")\r\n      return commit.index\r\n    else\r\n      --DEBUG(proc,\"Choosen \"..tostring(chosen)..\"th branch\")\r\n      return chosen\r\n    end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "for i,commit in ipairs(commits) do\r\n        commit.index = i\r\n        proc.lastCommit = nil\r\n        registerCommitment(proc,commit.chan,commit)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 195,
    "text": "commit.index = i",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "proc.lastCommit = nil",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "registerCommitment(proc,commit.chan,commit)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "awaitProcess(proc)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "local commit = proc.lastCommit",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "if commit.cont~=nil then -- there is a continuation to execute  \r\n      --DEBUG(proc,\"A continuation has to execute: \",commit.cont)\r\n        if commit.kind==\"output\" then -- output continuation\r\n          --DEBUG(proc,\"Output (or broadcast) continuation (no arg)\")\r\n          commit.cont()\r\n        elseif commit.kind==\"input\" then -- input continuation\r\n          --DEBUG(proc,\"Intput continuation (passed arg=\"..tostring(commit.value)..\")\")\r\n          commit.cont(commit.value,unpack(commit.extra))\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "if commit.kind==\"output\" then -- output continuation\r\n          --DEBUG(proc,\"Output (or broadcast) continuation (no arg)\")\r\n          commit.cont()\r\n        elseif commit.kind==\"input\" then -- input continuation\r\n          --DEBUG(proc,\"Intput continuation (passed arg=\"..tostring(commit.value)..\")\")\r\n          commit.cont(commit.value,unpack(commit.extra))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "commit.cont()",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "commit.cont(commit.value,unpack(commit.extra))",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "function ()\r\n    local commits = {}\r\n    local chosen = -1\r\n    --DEBUG(proc,\"Making choice, args = \"..u.toString(arg,3))\r\n    for i,ch in ipairs(arg) do\r\n      local choice = ch[1]\r\n      local cont = ch[2]\r\n      --DEBUG(proc,\"Analyse choice \"..u.toString(choice))\r\n      if type(choice)==\"boolean\" then\r\n        if choice then\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)==\"function\" then\r\n        if choice() then -- boolean guard\r\n          if cont~=nil then -- if true\r\n            cont()  -- the run the continuation\r\n          end\r\n          chosen = i  -- and selects this guard\r\n          break;\r\n        end\r\n      elseif type(choice)~=\"table\" or choice.tag~=\"guard\" or choice.mode==nil then\r\n        error(\"Invalid guard\")\r\n      elseif choice.mode==\"send\" then\r\n        -- if broadcasting then skip one scheduler round\r\n        while choice.chan.broadcasting~=nil or choice.chan.outjoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice    \r\n        local commit = lookupCommitment(proc,choice.chan.incommits)\r\n        --DEBUG(proc,\"Choice matches with input commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the channel\r\n          --DEBUG(proc,\"awake choice process \"..tostring(commit.proc)..\" for \"..tostring(commit))\r\n          pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receiver)\r\n          commit.value = choice.value -- gives the sent value to the receiver\r\n          commit.extra = choice.extra\r\n          commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n          readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n          yieldProcess(proc) -- yield this process and let the scheduler awake the receiver\r\n          -- if I have a continuation, then run it (send: no argument)\r\n          if cont~=nil then\r\n            cont()\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeOutputCommitment(proc,choice.chan,choice.value,choice.extra,cont))\r\n        end\r\n      elseif choice.mode==\"receive\" then\r\n        -- if collecting then skip one scheduler round\r\n        while choice.chan.collecting~=nil or choice.chan.injoin~=nil do\r\n          yieldProcess(proc)\r\n        end\r\n        -- first try to resolve the choice\r\n        local commit = lookupCommitment(proc,choice.chan.outcommits)\r\n        --DEBUG(proc,\"Choice matches with output commitment: \"..tostring(commit))\r\n        if commit~=nil then\r\n          eraseCommitments(commit.proc) -- erase commitments for the sender\r\n          commit.proc.lastCommit = commit -- gives the sender the commited (for optional choice resolution)\r\n          readyProcess(commit.proc) -- make the sender ready and prioritize it\r\n          -- if I have a continuation, then run it (receive: pass argument)\r\n          if cont~=nil then\r\n            cont(commit.value,unpack(commit.extra))\r\n          end\r\n          chosen = i -- the choice number is returned (for global continuation)\r\n          break -- we quit the loop for the continuation activation\r\n        else -- else record the commitment\r\n          table.insert(commits,makeInputCommitment(proc,choice.chan,cont))\r\n        end\r\n      else\r\n        error(\"Invalid guard mode '\" .. tostring(guard.mode) .. \"'\")\r\n      end\r\n    end -- for loop\r\n    if chosen==-1 then\r\n      --DEBUG(proc,\"Register all choice commitments in \"..u.toString(commits))\r\n      -- no branch has been chosen\r\n      for i,commit in ipairs(commits) do\r\n        commit.index = i\r\n        proc.lastCommit = nil\r\n        registerCommitment(proc,commit.chan,commit)\r\n      end\r\n      awaitProcess(proc)\r\n      yieldProcess(proc)\r\n      --DEBUG(proc,\"(choice) Awaken with commitment \"..u.toString(commit))\r\n      local commit = proc.lastCommit\r\n      proc.lastCommit = nil\r\n      if commit.cont~=nil then -- there is a continuation to execute  \r\n      --DEBUG(proc,\"A continuation has to execute: \",commit.cont)\r\n        if commit.kind==\"output\" then -- output continuation\r\n          --DEBUG(proc,\"Output (or broadcast) continuation (no arg)\")\r\n          commit.cont()\r\n        elseif commit.kind==\"input\" then -- input continuation\r\n          --DEBUG(proc,\"Intput continuation (passed arg=\"..tostring(commit.value)..\")\")\r\n          commit.cont(commit.value,unpack(commit.extra))\r\n        end\r\n      end\r\n      --DEBUG(proc,\"Choosen (after waiting) \"..tostring(chosen)..\"th branch\")\r\n      return commit.index\r\n    else\r\n      --DEBUG(proc,\"Choosen \"..tostring(chosen)..\"th branch\")\r\n      return chosen\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function Join.activate(proc,boolguards,inguards,outguards)\r\n  --DEBUG(proc,\"Activate join pattern\")\r\n  -- first try to enable all boolean guards\r\n  for i,guard in ipairs(boolguards) do\r\n    if not guard() then\r\n      return false\r\n    end\r\n  end\r\n\r\n  --DEBUG(proc,\"Activate join: boolean guards passed\")\r\n\r\n  -- second try to enable all output guards\r\n  local incommits = {}\r\n  for i,guard in ipairs(outguards) do\r\n    local commit = lookupCommitment(proc,guard.chan.incommits)\r\n    if commit==nil then\r\n      return false\r\n    end\r\n    table.insert(incommits,commit)\r\n  end\r\n\r\n  --DEBUG(proc,\"Activate join: output guards passed\")\r\n\r\n  -- second try to enable all input guards\r\n  local outcommits = {}\r\n  for i,guard in ipairs(inguards) do\r\n    local commit = lookupCommitment(proc,guard.chan.outcommits)\r\n    if commit==nil then\r\n      --DEBUG(proc,\"Activate join: input guard unmatched on \"..tostring(guard.chan.name))\r\n      return false\r\n    end\r\n    table.insert(outcommits,commit)\r\n  end\r\n\r\n  --DEBUG(proc,\"Activate join: input guards passed\")\r\n\r\n  -- if we are here then we now all the output and input commitments\r\n  -- that enable this join pattern\r\n  return true,outcommits,incommits\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "for i,guard in ipairs(boolguards) do\r\n    if not guard() then\r\n      return false\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 209,
    "text": "if not guard() then\r\n      return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "local incommits = {}",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "for i,guard in ipairs(outguards) do\r\n    local commit = lookupCommitment(proc,guard.chan.incommits)\r\n    if commit==nil then\r\n      return false\r\n    end\r\n    table.insert(incommits,commit)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 212,
    "text": "local commit = lookupCommitment(proc,guard.chan.incommits)",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "if commit==nil then\r\n      return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "table.insert(incommits,commit)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "local outcommits = {}",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "for i,guard in ipairs(inguards) do\r\n    local commit = lookupCommitment(proc,guard.chan.outcommits)\r\n    if commit==nil then\r\n      --DEBUG(proc,\"Activate join: input guard unmatched on \"..tostring(guard.chan.name))\r\n      return false\r\n    end\r\n    table.insert(outcommits,commit)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 217,
    "text": "local commit = lookupCommitment(proc,guard.chan.outcommits)",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "if commit==nil then\r\n      --DEBUG(proc,\"Activate join: input guard unmatched on \"..tostring(guard.chan.name))\r\n      return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "table.insert(outcommits,commit)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function Join.protect(proc,inchans,outchans)\r\n  for chan,v in pairs(inchans) do\r\n    chan.injoin = proc\r\n  end\r\n  for chan,v in pairs(outchans) do\r\n    chan.outjoin = proc\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 222,
    "text": "for chan,v in pairs(inchans) do\r\n    chan.injoin = proc\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 223,
    "text": "chan.injoin = proc",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "for chan,v in pairs(outchans) do\r\n    chan.outjoin = proc\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 225,
    "text": "chan.outjoin = proc",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function Join.unprotect(proc,inchans,outchans)\r\n  for chan,v in pairs(inchans) do\r\n    chan.injoin = nil\r\n  end\r\n  for chan,v in pairs(outchans) do\r\n    chan.outjoin = nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "for chan,v in pairs(inchans) do\r\n    chan.injoin = nil\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 229,
    "text": "chan.injoin = nil",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "for chan,v in pairs(outchans) do\r\n    chan.outjoin = nil\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 231,
    "text": "chan.outjoin = nil",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function Join.enact(proc,incommits,outcommits,outguards)\r\n\r\n  local values = {}\r\n\r\n  -- awake sender processes\r\n  for i,commit in ipairs(outcommits) do\r\n    eraseCommitments(commit.proc) -- erase commitments for the channel\r\n    commit.proc.lastCommit = commit -- tell the chosen commitment to the sender (choice resolution)\r\n    readyProcess(commit.proc) -- we keep the priority but the sender will come next in the priority\r\n    --DEBUG(proc,\"Join: add first value\",commit.value)\r\n    local val = { commit.value }\r\n    for i,value in ipairs(commit.extra) do\r\n      --DEBUG(proc,\"Join: add extra value\",value)\r\n      table.insert(val,value)\r\n    end\r\n    if #val==1 then\r\n      --DEBUG(proc,\"Join: added unique value\",val[1])\r\n      table.insert(values,val[1])\r\n    else\r\n      table.insert(values,val)\r\n    end\r\n  end\r\n\r\n  -- awake receiver processes\r\n  for i,commit in ipairs(incommits) do\r\n    eraseCommitments(commit.proc) -- erase commitments for the channel\r\n    commit.value = outguards[i].value -- gives the sent value to the receiver\r\n    commit.extra = outguards[i].extra\r\n    commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n    readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n  end\r\n\r\n  --DEBUG(proc,\"Join: returned values=\",u.toString(values))\r\n  return values\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "local values = {}",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "for i,commit in ipairs(outcommits) do\r\n    eraseCommitments(commit.proc) -- erase commitments for the channel\r\n    commit.proc.lastCommit = commit -- tell the chosen commitment to the sender (choice resolution)\r\n    readyProcess(commit.proc) -- we keep the priority but the sender will come next in the priority\r\n    --DEBUG(proc,\"Join: add first value\",commit.value)\r\n    local val = { commit.value }\r\n    for i,value in ipairs(commit.extra) do\r\n      --DEBUG(proc,\"Join: add extra value\",value)\r\n      table.insert(val,value)\r\n    end\r\n    if #val==1 then\r\n      --DEBUG(proc,\"Join: added unique value\",val[1])\r\n      table.insert(values,val[1])\r\n    else\r\n      table.insert(values,val)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 236,
    "text": "local val = { commit.value }",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "for i,value in ipairs(commit.extra) do\r\n      --DEBUG(proc,\"Join: add extra value\",value)\r\n      table.insert(val,value)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 238,
    "text": "table.insert(val,value)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "if #val==1 then\r\n      --DEBUG(proc,\"Join: added unique value\",val[1])\r\n      table.insert(values,val[1])\r\n    else\r\n      table.insert(values,val)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "table.insert(values,val[1])",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "table.insert(values,val)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "for i,commit in ipairs(incommits) do\r\n    eraseCommitments(commit.proc) -- erase commitments for the channel\r\n    commit.value = outguards[i].value -- gives the sent value to the receiver\r\n    commit.extra = outguards[i].extra\r\n    commit.proc.lastCommit=commit -- the receiver will be awoken with the chosen commitment\r\n    readyProcess(commit.proc) -- ready (and prioritize) the receiver\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 243,
    "text": "commit.value = outguards[i].value",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "commit.extra = outguards[i].extra",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 246,
    "text": "function Join.resolve(proc,incommits,outcommits,outguards,cont)\r\n  local values = Join.enact(proc,incommits,outcommits,outguards)\r\n  if next(values)==nil then -- no received value\r\n    pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receivers)\r\n    yieldProcess(proc) -- not a receiver so pass the dutch\r\n    if cont~=nil then\r\n       cont()\r\n    end\r\n  else -- at least one received value\r\n    if cont~=nil then\r\n      cont(unpack(values))\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 247,
    "text": "local values = Join.enact(proc,incommits,outcommits,outguards)",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "if next(values)==nil then -- no received value\r\n    pushPrioProcess(proc) -- put ourselves in the prioritized queue (but after the receivers)\r\n    yieldProcess(proc) -- not a receiver so pass the dutch\r\n    if cont~=nil then\r\n       cont()\r\n    end\r\n  else -- at least one received value\r\n    if cont~=nil then\r\n      cont(unpack(values))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "if cont~=nil then\r\n       cont()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 250,
    "text": "if cont~=nil then\r\n      cont(unpack(values))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "cont(unpack(values))",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "function Join.join(proc,...)\r\n  local args = { ... }\r\n  local i = 1\r\n  local patterns = {}\r\n  while i<=#args do\r\n    local boolguards = {}\r\n    local outguards = {}\r\n    local inguards = {}\r\n    local outchans = {}\r\n    local inchans = {}\r\n    local pattern = args[i]\r\n    if type(pattern)~=\"table\" then\r\n      error(\"A join pattern is expected\")\r\n    end\r\n    for j,guard in ipairs(pattern) do\r\n      if not guard then\r\n         i = i + 1 -- do not record the whole pattern\r\n         break\r\n      elseif guard~=true then -- skip true guards\r\n        if type(guard)==\"function\" then\r\n          table.insert(boolguards,guard)\r\n        elseif type(guard)~=\"table\" then\r\n          error(\"Invalid join pattern: Unknow guard type\")\r\n        elseif guard.mode==nil then\r\n          error(\"Invalid join pattern: Missing guard mode\")\r\n        elseif guard.mode==\"send\" then\r\n          outchans[guard.chan] = true\r\n          table.insert(outguards,guard)\r\n        elseif guard.mode==\"receive\" then\r\n          table.insert(inguards,guard)\r\n          inchans[guard.chan] = true\r\n        else\r\n          error(\"Invalid join pattern: invalid guard mode '\" .. tostring(guard.mode) .. \"'\",2)\r\n        end\r\n      end\r\n    end -- for j, ...\r\n    local patt = { tag=\"join\", boolguards=boolguards, outguards=outguards, inguards=inguards, inchans=inchans, outchans=outchans }\r\n    i = i + 1\r\n    if type(args[i])==\"function\" then\r\n      patt.cont = args[i]\r\n      i = i + 1\r\n    end\r\n    table.insert(patterns,patt)\r\n  end -- end while\r\n\r\n  local joinFun = function()\r\n    while true do  -- join patterns are running until one is enabled\r\n      local ok = false\r\n      local outcommits = nil\r\n      local incommits = nil\r\n      local choice = 0\r\n      local patt = nil\r\n      -- (1) activate the patterns before yielding\r\n      for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then \r\n          patt = pattern\r\n          choice=i\r\n          break \r\n        end\r\n      end\r\n      if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end\r\n      -- (2) protect the join channels  (join patterns are prioritary)\r\n      --for i,pattern in ipairs(patterns) do\r\n       --Join.protect(proc,pattern.inchans,pattern.outchans)\r\n      --end\r\n      -- (3) let one scheduler round pass\r\n      yieldProcess(proc)\r\n      -- (4) try to activate again the patterns after yielding\r\n      for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then\r\n          choice = i\r\n          patt = pattern\r\n          break \r\n        end\r\n      end\r\n      -- (5) unproctect the join channels\r\n      --for i,pattern in ipairs(patterns) do\r\n       --Join.unprotect(proc,pattern.inchans,pattern.outchans)\r\n      --end\r\n      -- (6) resolve join\r\n      if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end\r\n      -- the join process must await\r\n      awaitJoinProcess(proc)\r\n    end\r\n    -- not reachable\r\n  end -- end of joinFun\r\n  return joinFun\r\nend",
    "type": "function"
  }, {
    "id": 254,
    "text": "local args = { ... }",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "local patterns = {}",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "while i<=#args do\r\n    local boolguards = {}\r\n    local outguards = {}\r\n    local inguards = {}\r\n    local outchans = {}\r\n    local inchans = {}\r\n    local pattern = args[i]\r\n    if type(pattern)~=\"table\" then\r\n      error(\"A join pattern is expected\")\r\n    end\r\n    for j,guard in ipairs(pattern) do\r\n      if not guard then\r\n         i = i + 1 -- do not record the whole pattern\r\n         break\r\n      elseif guard~=true then -- skip true guards\r\n        if type(guard)==\"function\" then\r\n          table.insert(boolguards,guard)\r\n        elseif type(guard)~=\"table\" then\r\n          error(\"Invalid join pattern: Unknow guard type\")\r\n        elseif guard.mode==nil then\r\n          error(\"Invalid join pattern: Missing guard mode\")\r\n        elseif guard.mode==\"send\" then\r\n          outchans[guard.chan] = true\r\n          table.insert(outguards,guard)\r\n        elseif guard.mode==\"receive\" then\r\n          table.insert(inguards,guard)\r\n          inchans[guard.chan] = true\r\n        else\r\n          error(\"Invalid join pattern: invalid guard mode '\" .. tostring(guard.mode) .. \"'\",2)\r\n        end\r\n      end\r\n    end -- for j, ...\r\n    local patt = { tag=\"join\", boolguards=boolguards, outguards=outguards, inguards=inguards, inchans=inchans, outchans=outchans }\r\n    i = i + 1\r\n    if type(args[i])==\"function\" then\r\n      patt.cont = args[i]\r\n      i = i + 1\r\n    end\r\n    table.insert(patterns,patt)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 258,
    "text": "local boolguards = {}",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "local outguards = {}",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "local inguards = {}",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "local outchans = {}",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "local inchans = {}",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "local pattern = args[i]",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "if type(pattern)~=\"table\" then\r\n      error(\"A join pattern is expected\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "error(\"A join pattern is expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "for j,guard in ipairs(pattern) do\r\n      if not guard then\r\n         i = i + 1 -- do not record the whole pattern\r\n         break\r\n      elseif guard~=true then -- skip true guards\r\n        if type(guard)==\"function\" then\r\n          table.insert(boolguards,guard)\r\n        elseif type(guard)~=\"table\" then\r\n          error(\"Invalid join pattern: Unknow guard type\")\r\n        elseif guard.mode==nil then\r\n          error(\"Invalid join pattern: Missing guard mode\")\r\n        elseif guard.mode==\"send\" then\r\n          outchans[guard.chan] = true\r\n          table.insert(outguards,guard)\r\n        elseif guard.mode==\"receive\" then\r\n          table.insert(inguards,guard)\r\n          inchans[guard.chan] = true\r\n        else\r\n          error(\"Invalid join pattern: invalid guard mode '\" .. tostring(guard.mode) .. \"'\",2)\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 267,
    "text": "if not guard then\r\n         i = i + 1 -- do not record the whole pattern\r\n         break\r\n      elseif guard~=true then -- skip true guards\r\n        if type(guard)==\"function\" then\r\n          table.insert(boolguards,guard)\r\n        elseif type(guard)~=\"table\" then\r\n          error(\"Invalid join pattern: Unknow guard type\")\r\n        elseif guard.mode==nil then\r\n          error(\"Invalid join pattern: Missing guard mode\")\r\n        elseif guard.mode==\"send\" then\r\n          outchans[guard.chan] = true\r\n          table.insert(outguards,guard)\r\n        elseif guard.mode==\"receive\" then\r\n          table.insert(inguards,guard)\r\n          inchans[guard.chan] = true\r\n        else\r\n          error(\"Invalid join pattern: invalid guard mode '\" .. tostring(guard.mode) .. \"'\",2)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "if type(guard)==\"function\" then\r\n          table.insert(boolguards,guard)\r\n        elseif type(guard)~=\"table\" then\r\n          error(\"Invalid join pattern: Unknow guard type\")\r\n        elseif guard.mode==nil then\r\n          error(\"Invalid join pattern: Missing guard mode\")\r\n        elseif guard.mode==\"send\" then\r\n          outchans[guard.chan] = true\r\n          table.insert(outguards,guard)\r\n        elseif guard.mode==\"receive\" then\r\n          table.insert(inguards,guard)\r\n          inchans[guard.chan] = true\r\n        else\r\n          error(\"Invalid join pattern: invalid guard mode '\" .. tostring(guard.mode) .. \"'\",2)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "table.insert(boolguards,guard)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "error(\"Invalid join pattern: Unknow guard type\")",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "error(\"Invalid join pattern: Missing guard mode\")",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "outchans[guard.chan] = true",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "table.insert(outguards,guard)",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "table.insert(inguards,guard)",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "inchans[guard.chan] = true",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "error(\"Invalid join pattern: invalid guard mode '\" .. tostring(guard.mode) .. \"'\",2)",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "local patt = { tag=\"join\", boolguards=boolguards, outguards=outguards, inguards=inguards, inchans=inchans, outchans=outchans }",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "if type(args[i])==\"function\" then\r\n      patt.cont = args[i]\r\n      i = i + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "patt.cont = args[i]",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "table.insert(patterns,patt)",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "local joinFun = function()\r\n    while true do  -- join patterns are running until one is enabled\r\n      local ok = false\r\n      local outcommits = nil\r\n      local incommits = nil\r\n      local choice = 0\r\n      local patt = nil\r\n      -- (1) activate the patterns before yielding\r\n      for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then \r\n          patt = pattern\r\n          choice=i\r\n          break \r\n        end\r\n      end\r\n      if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end\r\n      -- (2) protect the join channels  (join patterns are prioritary)\r\n      --for i,pattern in ipairs(patterns) do\r\n       --Join.protect(proc,pattern.inchans,pattern.outchans)\r\n      --end\r\n      -- (3) let one scheduler round pass\r\n      yieldProcess(proc)\r\n      -- (4) try to activate again the patterns after yielding\r\n      for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then\r\n          choice = i\r\n          patt = pattern\r\n          break \r\n        end\r\n      end\r\n      -- (5) unproctect the join channels\r\n      --for i,pattern in ipairs(patterns) do\r\n       --Join.unprotect(proc,pattern.inchans,pattern.outchans)\r\n      --end\r\n      -- (6) resolve join\r\n      if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end\r\n      -- the join process must await\r\n      awaitJoinProcess(proc)\r\n    end\r\n    -- not reachable\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "while true do  -- join patterns are running until one is enabled\r\n      local ok = false\r\n      local outcommits = nil\r\n      local incommits = nil\r\n      local choice = 0\r\n      local patt = nil\r\n      -- (1) activate the patterns before yielding\r\n      for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then \r\n          patt = pattern\r\n          choice=i\r\n          break \r\n        end\r\n      end\r\n      if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end\r\n      -- (2) protect the join channels  (join patterns are prioritary)\r\n      --for i,pattern in ipairs(patterns) do\r\n       --Join.protect(proc,pattern.inchans,pattern.outchans)\r\n      --end\r\n      -- (3) let one scheduler round pass\r\n      yieldProcess(proc)\r\n      -- (4) try to activate again the patterns after yielding\r\n      for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then\r\n          choice = i\r\n          patt = pattern\r\n          break \r\n        end\r\n      end\r\n      -- (5) unproctect the join channels\r\n      --for i,pattern in ipairs(patterns) do\r\n       --Join.unprotect(proc,pattern.inchans,pattern.outchans)\r\n      --end\r\n      -- (6) resolve join\r\n      if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end\r\n      -- the join process must await\r\n      awaitJoinProcess(proc)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 284,
    "text": "local ok = false",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "local outcommits = nil",
    "type": "statement:localassign"
  }, {
    "id": 286,
    "text": "local incommits = nil",
    "type": "statement:localassign"
  }, {
    "id": 287,
    "text": "local choice = 0",
    "type": "statement:localassign"
  }, {
    "id": 288,
    "text": "local patt = nil",
    "type": "statement:localassign"
  }, {
    "id": 289,
    "text": "for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then \r\n          patt = pattern\r\n          choice=i\r\n          break \r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 290,
    "text": "ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "if ok then \r\n          patt = pattern\r\n          choice=i\r\n          break \r\n        end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "patt = pattern",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "choice=i",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end",
    "type": "statement:if"
  }, {
    "id": 295,
    "text": "Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then\r\n          choice = i\r\n          patt = pattern\r\n          break \r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 297,
    "text": "if ok then\r\n          choice = i\r\n          patt = pattern\r\n          break \r\n        end",
    "type": "statement:if"
  }, {
    "id": 298,
    "text": "choice = i",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "awaitJoinProcess(proc)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function()\r\n    while true do  -- join patterns are running until one is enabled\r\n      local ok = false\r\n      local outcommits = nil\r\n      local incommits = nil\r\n      local choice = 0\r\n      local patt = nil\r\n      -- (1) activate the patterns before yielding\r\n      for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then \r\n          patt = pattern\r\n          choice=i\r\n          break \r\n        end\r\n      end\r\n      if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end\r\n      -- (2) protect the join channels  (join patterns are prioritary)\r\n      --for i,pattern in ipairs(patterns) do\r\n       --Join.protect(proc,pattern.inchans,pattern.outchans)\r\n      --end\r\n      -- (3) let one scheduler round pass\r\n      yieldProcess(proc)\r\n      -- (4) try to activate again the patterns after yielding\r\n      for i,pattern in ipairs(patterns) do\r\n        ok, outcommits, incommits = Join.activate(proc,pattern.boolguards,pattern.inguards,pattern.outguards)\r\n        if ok then\r\n          choice = i\r\n          patt = pattern\r\n          break \r\n        end\r\n      end\r\n      -- (5) unproctect the join channels\r\n      --for i,pattern in ipairs(patterns) do\r\n       --Join.unprotect(proc,pattern.inchans,pattern.outchans)\r\n      --end\r\n      -- (6) resolve join\r\n      if ok then\r\n        Join.resolve(proc,incommits,outcommits,patt.outguards,patt.cont)\r\n        return choice\r\n      end\r\n      -- the join process must await\r\n      awaitJoinProcess(proc)\r\n    end\r\n    -- not reachable\r\n  end",
    "type": "function"
  }, {
    "id": 302,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 303,
    "text": "function trySend(sender,chan,value,...)\r\n  -- if broadcasting is active the cannot send now\r\n  if chan.broadcasting~=nil or chan.outjoin~=nil then\r\n    return false\r\n  end\r\n\r\n  local commit = lookupCommitment(sender,chan.incommits)\r\n  if commit~=nil then\r\n    local receiver = commit.proc\r\n    eraseCommitments(receiver) -- erase commitments for the channel\r\n    pushPrioProcess(sender) -- make this process the second in the list of prioritized processes\r\n    commit.value = value -- tell the receiver the received value\r\n    commit.extra = { ... }\r\n    receiver.lastCommit = commit -- tell the receiver the chosen commitment\r\n    readyProcess(receiver) -- ready and make the receiver prioritary    \r\n    yieldProcess(sender) -- do not put in the waiting queue\r\n    return true\r\n  else\r\n    return false\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 304,
    "text": "if chan.broadcasting~=nil or chan.outjoin~=nil then\r\n    return false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 305,
    "text": "local commit = lookupCommitment(sender,chan.incommits)",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "if commit~=nil then\r\n    local receiver = commit.proc\r\n    eraseCommitments(receiver) -- erase commitments for the channel\r\n    pushPrioProcess(sender) -- make this process the second in the list of prioritized processes\r\n    commit.value = value -- tell the receiver the received value\r\n    commit.extra = { ... }\r\n    receiver.lastCommit = commit -- tell the receiver the chosen commitment\r\n    readyProcess(receiver) -- ready and make the receiver prioritary    \r\n    yieldProcess(sender) -- do not put in the waiting queue\r\n    return true\r\n  else\r\n    return false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 307,
    "text": "local receiver = commit.proc",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "eraseCommitments(receiver)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "pushPrioProcess(sender)",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "commit.extra = { ... }",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "receiver.lastCommit = commit",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "readyProcess(receiver)",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "yieldProcess(sender)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "function send(sender,chan,value,...)\r\n   --DEBUG(\"Sender \",sender.name,\" send on channel \",chan,\"value\",value)\r\n   -- if broadcasting then skip one scheduler round\r\n   while chan.broadcasting~=nil or chan.outjoin~=nil do\r\n      yieldProcess(sender)\r\n   end\r\n\r\n  --DEBUG(sender,\"wants to send \"..tostring(value)..\",\"..tostring(extra)..\" on channel \"..channelToString(chan))\r\n  if trySend(sender,chan,value,...) then\r\n    return\r\n  else\r\n    -- no input commitment found (only output commitments, so add a new commitment)\r\n    commit = makeOutputCommitment(sender,chan,value,{...})\r\n    sender.lastCommit = nil -- cancel the last commitment\r\n    registerCommitment(sender,chan,commit)\r\n    awaitProcess(sender) -- put in the waiting queue\r\n    yieldProcess(sender) -- send forgets about any received value\r\n    -- then continue when awoken\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 316,
    "text": "while chan.broadcasting~=nil or chan.outjoin~=nil do\r\n      yieldProcess(sender)\r\n   end",
    "type": "statement:while"
  }, {
    "id": 317,
    "text": "if trySend(sender,chan,value,...) then\r\n    return\r\n  else\r\n    -- no input commitment found (only output commitments, so add a new commitment)\r\n    commit = makeOutputCommitment(sender,chan,value,{...})\r\n    sender.lastCommit = nil -- cancel the last commitment\r\n    registerCommitment(sender,chan,commit)\r\n    awaitProcess(sender) -- put in the waiting queue\r\n    yieldProcess(sender) -- send forgets about any received value\r\n    -- then continue when awoken\r\n  end",
    "type": "statement:if"
  }, {
    "id": 318,
    "text": "commit = makeOutputCommitment(sender,chan,value,{...})",
    "type": "statement:assign"
  }, {
    "id": 319,
    "text": "sender.lastCommit = nil",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "registerCommitment(sender,chan,commit)",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "awaitProcess(sender)",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 323,
    "text": "function broadcast(sender,chan,value,...)\r\n  --DEBUG(sender,\"wants to send \"..tostring(value)..\" on channel \"..channelToString(chan))\r\n\r\n  -- if already broadcasting then yield before broadcasting again\r\n  while chan.broadcasting~=nil or chan.outjoin~=nil do\r\n    yieldProcess(sender)\r\n  end\r\n \r\n  -- restrict the use of chan for output\r\n  chan.broadcasting = sender\r\n  --  yields to ensure all the potential receivers are ready to receive\r\n  yieldProcess(sender)\r\n  -- the restriction is finished\r\n  chan.broadcasting = nil\r\n\r\n  -- look for a commitment\r\n  local commits = lookupAllCommitments(sender,chan.incommits)\r\n  if commits~=nil then\r\n    pushPrioProcess(sender) -- make this process the next of receivers in the list of prioritized processes\r\n    for i,commit in ipairs(commits) do\r\n      local receiver = commit.proc\r\n      eraseCommitments(receiver) -- erase commitments for the channel\r\n      commit.value = value -- tell the receiver the received value\r\n      commit.extra = { ... }\r\n      receiver.lastCommit = commit -- tell the receiver the chosen commitment\r\n      readyProcess(receiver) -- ready and make the receiver prioritary\r\n    end\r\n    yieldProcess(sender) -- do not put in the waiting queue\r\n    return true -- ok the broadcast was a success\r\n  else\r\n    return false -- ko no potential receiver\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 324,
    "text": "while chan.broadcasting~=nil or chan.outjoin~=nil do\r\n    yieldProcess(sender)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 325,
    "text": "chan.broadcasting = sender",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "chan.broadcasting = nil",
    "type": "statement:assign"
  }, {
    "id": 327,
    "text": "local commits = lookupAllCommitments(sender,chan.incommits)",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "if commits~=nil then\r\n    pushPrioProcess(sender) -- make this process the next of receivers in the list of prioritized processes\r\n    for i,commit in ipairs(commits) do\r\n      local receiver = commit.proc\r\n      eraseCommitments(receiver) -- erase commitments for the channel\r\n      commit.value = value -- tell the receiver the received value\r\n      commit.extra = { ... }\r\n      receiver.lastCommit = commit -- tell the receiver the chosen commitment\r\n      readyProcess(receiver) -- ready and make the receiver prioritary\r\n    end\r\n    yieldProcess(sender) -- do not put in the waiting queue\r\n    return true -- ok the broadcast was a success\r\n  else\r\n    return false -- ko no potential receiver\r\n  end",
    "type": "statement:if"
  }, {
    "id": 329,
    "text": "for i,commit in ipairs(commits) do\r\n      local receiver = commit.proc\r\n      eraseCommitments(receiver) -- erase commitments for the channel\r\n      commit.value = value -- tell the receiver the received value\r\n      commit.extra = { ... }\r\n      receiver.lastCommit = commit -- tell the receiver the chosen commitment\r\n      readyProcess(receiver) -- ready and make the receiver prioritary\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 330,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 331,
    "text": "function collect(receiver,chan)\r\n  --DEBUG(sender,\"wants to send \"..tostring(value)..\" on channel \"..channelToString(chan))\r\n\r\n  -- if already collecting then yield before collecting again\r\n  while chan.collecting~=nil or chan.injoin~=nil do\r\n    yieldProcess(receiver)\r\n  end\r\n \r\n  -- restrict the use of chan for input\r\n  chan.collecting = receiver\r\n  --  yields to ensure all the potential receivers are ready to receive\r\n  yieldProcess(receiver)\r\n  -- the restriction is finished\r\n  chan.collecting = nil\r\n\r\n  --  yields to ensure all the potential senders are ready to send\r\n  yieldProcess(receiver)\r\n  -- the table (array) to store the collected values\r\n  local collection = {}\r\n  -- look for a commitment\r\n  local commits = lookupAllCommitments(receiver,chan.outcommits)\r\n  if commits~=nil then\r\n    for i,commit in ipairs(commits) do\r\n      local sender = commit.proc\r\n      eraseCommitments(sender) -- erase commitments for the channel\r\n      sender.lastCommit = commit -- for choice resolution\r\n      collection[i] = {} \r\n      collection[i][1] = commit.value\r\n      for j,val in ipairs(commit.extra) do\r\n        collection[i][j] = val\r\n      end\r\n      readyProcess(sender) -- ready and make the sender prioritary\r\n    end\r\n  end\r\n\r\n  -- we simply return the collection (and keep the control)\r\n  return collection\r\nend",
    "type": "function"
  }, {
    "id": 332,
    "text": "while chan.collecting~=nil or chan.injoin~=nil do\r\n    yieldProcess(receiver)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 333,
    "text": "yieldProcess(receiver)",
    "type": "statement:functioncall"
  }, {
    "id": 334,
    "text": "chan.collecting = receiver",
    "type": "statement:assign"
  }, {
    "id": 335,
    "text": "chan.collecting = nil",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "local collection = {}",
    "type": "statement:localassign"
  }, {
    "id": 337,
    "text": "local commits = lookupAllCommitments(receiver,chan.outcommits)",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "if commits~=nil then\r\n    for i,commit in ipairs(commits) do\r\n      local sender = commit.proc\r\n      eraseCommitments(sender) -- erase commitments for the channel\r\n      sender.lastCommit = commit -- for choice resolution\r\n      collection[i] = {} \r\n      collection[i][1] = commit.value\r\n      for j,val in ipairs(commit.extra) do\r\n        collection[i][j] = val\r\n      end\r\n      readyProcess(sender) -- ready and make the sender prioritary\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 339,
    "text": "for i,commit in ipairs(commits) do\r\n      local sender = commit.proc\r\n      eraseCommitments(sender) -- erase commitments for the channel\r\n      sender.lastCommit = commit -- for choice resolution\r\n      collection[i] = {} \r\n      collection[i][1] = commit.value\r\n      for j,val in ipairs(commit.extra) do\r\n        collection[i][j] = val\r\n      end\r\n      readyProcess(sender) -- ready and make the sender prioritary\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 340,
    "text": "local sender = commit.proc",
    "type": "statement:localassign"
  }, {
    "id": 341,
    "text": "eraseCommitments(sender)",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "sender.lastCommit = commit",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "collection[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "collection[i][1] = commit.value",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "for j,val in ipairs(commit.extra) do\r\n        collection[i][j] = val\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 346,
    "text": "collection[i][j] = val",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "readyProcess(sender)",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 349,
    "text": "function tryReceiveImpl(receiver,chan)\r\n  local commit = lookupCommitment(receiver,chan.outcommits)\r\n  if commit~=nil then\r\n    local sender = commit.proc\r\n    eraseCommitments(sender) -- erase commitments for the channel\r\n    sender.lastCommit = commit -- tell the chosen commitment to the sender (choice resolution)\r\n    readyProcess(sender) -- we keep the priority but the sender will come next in the priority\r\n    return commit\r\n  else\r\n    return nil\r\n  end \r\nend",
    "type": "function"
  }, {
    "id": 350,
    "text": "local commit = lookupCommitment(receiver,chan.outcommits)",
    "type": "statement:localassign"
  }, {
    "id": 351,
    "text": "if commit~=nil then\r\n    local sender = commit.proc\r\n    eraseCommitments(sender) -- erase commitments for the channel\r\n    sender.lastCommit = commit -- tell the chosen commitment to the sender (choice resolution)\r\n    readyProcess(sender) -- we keep the priority but the sender will come next in the priority\r\n    return commit\r\n  else\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 352,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 353,
    "text": "function tryReceive(receiver,chan)\r\n  --DEBUG(receiver,\"tries to receive on \"..channelToString(chan))\r\n\r\n  -- if collecting then cannot receive now\r\n  if chan.collecting~=nil or chan.injoin~=nil then\r\n    return false\r\n  end\r\n\r\n  -- look for a commitment\r\n  local commit = tryReceiveImpl(receiver,chan)\r\n  if commit~=nil then\r\n    return true,commit.value,unpack(commit.extra)\r\n  else\r\n    return false\r\n  end \r\nend",
    "type": "function"
  }, {
    "id": 354,
    "text": "if chan.collecting~=nil or chan.injoin~=nil then\r\n    return false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 355,
    "text": "local commit = tryReceiveImpl(receiver,chan)",
    "type": "statement:localassign"
  }, {
    "id": 356,
    "text": "if commit~=nil then\r\n    return true,commit.value,unpack(commit.extra)\r\n  else\r\n    return false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 357,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 358,
    "text": "function receive(receiver,chan)\r\n  --DEBUG(receiver,\"tries to receive on \"..channelToString(chan))\r\n\r\n  -- if collecting then yield\r\n  while chan.collecting~=nil or chan.injoin~=nil do\r\n    yieldProcess(receiver)\r\n  end\r\n\r\n  -- look for a commitment\r\n  local commit = tryReceiveImpl(receiver,chan)\r\n  if commit~=nil then\r\n    return commit.value,unpack(commit.extra)\r\n  end\r\n  -- no output commitments, only input commitments ... add one\r\n  local commit = makeInputCommitment(receiver,chan)\r\n  receiver.lastCommit = nil -- cancel the last commitment\r\n  registerCommitment(receiver,chan,commit)\r\n  ----DEBUG(receiver,\"waiting with \"..processToString(receiver))\r\n  awaitProcess(receiver)\r\n  yieldProcess(receiver) -- we should be awoken with a value\r\n  --DEBUG(receiver,\"received \",commit)\r\n  return receiver.lastCommit.value , unpack(receiver.lastCommit.extra)\r\nend",
    "type": "function"
  }, {
    "id": 359,
    "text": "if commit~=nil then\r\n    return commit.value,unpack(commit.extra)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 360,
    "text": "local commit = makeInputCommitment(receiver,chan)",
    "type": "statement:localassign"
  }, {
    "id": 361,
    "text": "receiver.lastCommit = nil",
    "type": "statement:assign"
  }, {
    "id": 362,
    "text": "registerCommitment(receiver,chan,commit)",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "awaitProcess(receiver)",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 365,
    "text": "local function makeAgent()\r\n   -- XXX: chans queue not needed and probably bad wrt. Lua GC\r\n   -- local agent = { procs = {}, chans = {}, routine=coroutine.create(scheduling), spawn=spawn,new=new,run=run }\r\n   local agent = { tag=\"agent\", procs = { prio = {}, ready = {}, waiting = {}, joining = {}}, routine=coroutine.create(scheduling), spawn=spawn,new=new,run=run,\r\n                    replicate=replicate }\r\n   local agentMT = { __tostring = agentToString } -- Q: how to make agentToString local ?\r\n   setmetatable(agent,agentMT)\r\n   return agent\r\nend",
    "type": "function"
  }, {
    "id": 366,
    "text": "local agent = { tag=\"agent\", procs = { prio = {}, ready = {}, waiting = {}, joining = {}}, routine=coroutine.create(scheduling), spawn=spawn,new=new,run=run,\r\n                    replicate=replicate }",
    "type": "statement:localassign"
  }, {
    "id": 367,
    "text": "local agentMT = { __tostring = agentToString }",
    "type": "statement:localassign"
  }, {
    "id": 368,
    "text": "setmetatable(agent,agentMT)",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 370,
    "text": "function agentToString(agent)\r\n  return u.toString(agent,3)\r\n  -- return \"Agent{}\"\r\nend",
    "type": "function"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "local function destroyProcess(proc)\r\n  --DEBUG(proc,\"to be destroyed\")\r\n  eraseCommitments(proc)\r\n  local ready = proc.agent.procs.ready\r\n  if #ready == 1 then\r\n    table.remove(ready,proc.ref)\r\n  else\r\n    ready[proc.ref] = ready[#ready]\r\n    ready[proc.ref].ref = proc.ref\r\n    table.remove(ready,#ready)\r\n  end\r\n  proc.mode = \"ended\"\r\n  --DEBUG(proc,\"destroyed\")\r\nend",
    "type": "function"
  }, {
    "id": 373,
    "text": "eraseCommitments(proc)",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "if #ready == 1 then\r\n    table.remove(ready,proc.ref)\r\n  else\r\n    ready[proc.ref] = ready[#ready]\r\n    ready[proc.ref].ref = proc.ref\r\n    table.remove(ready,#ready)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 375,
    "text": "proc.mode = \"ended\"",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 377,
    "text": "function scheduling(agent)\r\n  --DEBUG(agent,\"started \"..u.toString(agent))\r\n  local finish = false\r\n  local ready = agent.procs.ready\r\n  local joining = agent.procs.joining\r\n  local prio = agent.procs.prio\r\n  local finishTurn = false\r\n  while not finish do  \r\n    --print(agent)\r\n    --print \"here\"\r\n    local i= 1\r\n    local proc = nil\r\n    while i<=#ready do\r\n      if next(prio)~=nil then\r\n        proc = popPrioProcess(agent)\r\n        i = proc.ref\r\n      else\r\n        proc = ready[i]\r\n      end\r\n      --assert(proc.ref == i,\"The process reference \"..proc.ref..\" must match the position \"..i..\" in the ready queue\")\r\n      --DEBUG(agent,\"tries process #\"..tostring(i),\"process\",proc.name,\"(\" .. proc.mode .. \")\")\r\n      local status = coroutine.status(proc.routine)\r\n      --DEBUG(proc,\"Coroutine status\",status)\r\n      --if status == \"dead\" then\r\n\t --DEBUG(agent,\"HERE\")\r\n        --destroyProcess(proc)\r\n      --else\r\n        --assert(proc.mode~=\"waiting\",\"process must not be waiting\")\r\n        --DEBUG(agent,\"awake process \"..proc.name)\r\n        awakeProcess(proc)\r\n        --DEBUG(agent,\"awakes with commitment \"..tostring(commit))\r\n        while #prio > 1 do\r\n          proc = popPrioProcess(agent)\r\n          i = proc.ref\r\n          --DEBUG(agent,\"awakes (2) with commitment \"..tostring(commit))\r\n          awakeProcess(proc)\r\n        end\r\n      --end\r\n      i = i + 1\r\n    end\r\n\r\n    if next(ready)==nil then\r\n      if not finishTurn and next(joining)~=nil then\r\n        for ref,proc in ipairs(joining) do\r\n          readyJoiningProcess(proc)\r\n        end\r\n        finishTurn=true\r\n      else\r\n        --print(agent)\r\n        print(\"====\")\r\n        print(\"All Pi-theads terminated\")\r\n        finish=true\r\n      end\r\n    else -- more process to execute\r\n      finishTurn = false\r\n    end\r\n  end\r\n  --print(\"End of scheduling\")\r\nend",
    "type": "function"
  }, {
    "id": 378,
    "text": "local finish = false",
    "type": "statement:localassign"
  }, {
    "id": 379,
    "text": "local ready = agent.procs.ready",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "local joining = agent.procs.joining",
    "type": "statement:localassign"
  }, {
    "id": 381,
    "text": "local prio = agent.procs.prio",
    "type": "statement:localassign"
  }, {
    "id": 382,
    "text": "local finishTurn = false",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "while not finish do  \r\n    --print(agent)\r\n    --print \"here\"\r\n    local i= 1\r\n    local proc = nil\r\n    while i<=#ready do\r\n      if next(prio)~=nil then\r\n        proc = popPrioProcess(agent)\r\n        i = proc.ref\r\n      else\r\n        proc = ready[i]\r\n      end\r\n      --assert(proc.ref == i,\"The process reference \"..proc.ref..\" must match the position \"..i..\" in the ready queue\")\r\n      --DEBUG(agent,\"tries process #\"..tostring(i),\"process\",proc.name,\"(\" .. proc.mode .. \")\")\r\n      local status = coroutine.status(proc.routine)\r\n      --DEBUG(proc,\"Coroutine status\",status)\r\n      --if status == \"dead\" then\r\n\t --DEBUG(agent,\"HERE\")\r\n        --destroyProcess(proc)\r\n      --else\r\n        --assert(proc.mode~=\"waiting\",\"process must not be waiting\")\r\n        --DEBUG(agent,\"awake process \"..proc.name)\r\n        awakeProcess(proc)\r\n        --DEBUG(agent,\"awakes with commitment \"..tostring(commit))\r\n        while #prio > 1 do\r\n          proc = popPrioProcess(agent)\r\n          i = proc.ref\r\n          --DEBUG(agent,\"awakes (2) with commitment \"..tostring(commit))\r\n          awakeProcess(proc)\r\n        end\r\n      --end\r\n      i = i + 1\r\n    end\r\n\r\n    if next(ready)==nil then\r\n      if not finishTurn and next(joining)~=nil then\r\n        for ref,proc in ipairs(joining) do\r\n          readyJoiningProcess(proc)\r\n        end\r\n        finishTurn=true\r\n      else\r\n        --print(agent)\r\n        print(\"====\")\r\n        print(\"All Pi-theads terminated\")\r\n        finish=true\r\n      end\r\n    else -- more process to execute\r\n      finishTurn = false\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 384,
    "text": "local i= 1",
    "type": "statement:localassign"
  }, {
    "id": 385,
    "text": "local proc = nil",
    "type": "statement:localassign"
  }, {
    "id": 386,
    "text": "while i<=#ready do\r\n      if next(prio)~=nil then\r\n        proc = popPrioProcess(agent)\r\n        i = proc.ref\r\n      else\r\n        proc = ready[i]\r\n      end\r\n      --assert(proc.ref == i,\"The process reference \"..proc.ref..\" must match the position \"..i..\" in the ready queue\")\r\n      --DEBUG(agent,\"tries process #\"..tostring(i),\"process\",proc.name,\"(\" .. proc.mode .. \")\")\r\n      local status = coroutine.status(proc.routine)\r\n      --DEBUG(proc,\"Coroutine status\",status)\r\n      --if status == \"dead\" then\r\n\t --DEBUG(agent,\"HERE\")\r\n        --destroyProcess(proc)\r\n      --else\r\n        --assert(proc.mode~=\"waiting\",\"process must not be waiting\")\r\n        --DEBUG(agent,\"awake process \"..proc.name)\r\n        awakeProcess(proc)\r\n        --DEBUG(agent,\"awakes with commitment \"..tostring(commit))\r\n        while #prio > 1 do\r\n          proc = popPrioProcess(agent)\r\n          i = proc.ref\r\n          --DEBUG(agent,\"awakes (2) with commitment \"..tostring(commit))\r\n          awakeProcess(proc)\r\n        end\r\n      --end\r\n      i = i + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 387,
    "text": "if next(prio)~=nil then\r\n        proc = popPrioProcess(agent)\r\n        i = proc.ref\r\n      else\r\n        proc = ready[i]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 388,
    "text": "proc = popPrioProcess(agent)",
    "type": "statement:assign"
  }, {
    "id": 389,
    "text": "i = proc.ref",
    "type": "statement:assign"
  }, {
    "id": 390,
    "text": "proc = ready[i]",
    "type": "statement:assign"
  }, {
    "id": 391,
    "text": "local status = coroutine.status(proc.routine)",
    "type": "statement:localassign"
  }, {
    "id": 392,
    "text": "awakeProcess(proc)",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "while #prio > 1 do\r\n          proc = popPrioProcess(agent)\r\n          i = proc.ref\r\n          --DEBUG(agent,\"awakes (2) with commitment \"..tostring(commit))\r\n          awakeProcess(proc)\r\n        end",
    "type": "statement:while"
  }, {
    "id": 394,
    "text": "if next(ready)==nil then\r\n      if not finishTurn and next(joining)~=nil then\r\n        for ref,proc in ipairs(joining) do\r\n          readyJoiningProcess(proc)\r\n        end\r\n        finishTurn=true\r\n      else\r\n        --print(agent)\r\n        print(\"====\")\r\n        print(\"All Pi-theads terminated\")\r\n        finish=true\r\n      end\r\n    else -- more process to execute\r\n      finishTurn = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 395,
    "text": "if not finishTurn and next(joining)~=nil then\r\n        for ref,proc in ipairs(joining) do\r\n          readyJoiningProcess(proc)\r\n        end\r\n        finishTurn=true\r\n      else\r\n        --print(agent)\r\n        print(\"====\")\r\n        print(\"All Pi-theads terminated\")\r\n        finish=true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 396,
    "text": "for ref,proc in ipairs(joining) do\r\n          readyJoiningProcess(proc)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 397,
    "text": "readyJoiningProcess(proc)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "finishTurn=true",
    "type": "statement:assign"
  }, {
    "id": 399,
    "text": "print(\"====\")",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "print(\"All Pi-theads terminated\")",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "finish=true",
    "type": "statement:assign"
  }, {
    "id": 402,
    "text": "finishTurn = false",
    "type": "statement:assign"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "function run(agent)\r\n  --print(\"Start scheduling\")\r\n  local res,ret = coroutine.resume(agent.routine,agent)\r\n  if not res then\r\n    error(\"Agent aborted: \\n==> \"..ret)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 405,
    "text": "local res,ret = coroutine.resume(agent.routine,agent)",
    "type": "statement:localassign"
  }, {
    "id": 406,
    "text": "if not res then\r\n    error(\"Agent aborted: \\n==> \"..ret)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 407,
    "text": "error(\"Agent aborted: \\n==> \"..ret)",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "function replicate(agent,procname,n,procfun,...)\r\n  --DEBUG(agent,\"replicate with arguments\",...)  \r\n  for i=1,n do\r\n    agent:spawn(procname..tostring(i),procfun,i,...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 410,
    "text": "for i=1,n do\r\n    agent:spawn(procname..tostring(i),procfun,i,...)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 411,
    "text": "agent:spawn(procname..tostring(i),procfun,i,...)",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 413,
    "text": "function(proc,...) \r\n                       return proc.agent:new(...) \r\n                     end",
    "type": "function"
  }, {
    "id": 414,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 415,
    "text": "function(proc,...) \r\n                         return proc.agent:spawn(...) \r\n                       end",
    "type": "function"
  }, {
    "id": 416,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 417,
    "text": "",
    "type": "function container"
  }, {
    "id": 418,
    "text": "init",
    "type": "global function"
  }, {
    "id": 419,
    "text": "cont",
    "type": "global function"
  }, {
    "id": 420,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 421,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 422,
    "text": "choice",
    "type": "global function"
  }, {
    "id": 423,
    "text": "guard",
    "type": "global function"
  }, {
    "id": 424,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 425,
    "text": "print",
    "type": "global function"
  }, {
    "id": 426,
    "text": "module",
    "type": "global function"
  }, {
    "id": 427,
    "text": "cont",
    "type": "global function"
  }, {
    "id": 428,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 429,
    "text": "error",
    "type": "global function"
  }, {
    "id": 430,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 431,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 432,
    "text": "type",
    "type": "global function"
  }, {
    "id": 433,
    "text": "toString",
    "type": "global function"
  }, {
    "id": 434,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 435,
    "text": "next",
    "type": "global function"
  }, {
    "id": 436,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 437,
    "text": "require",
    "type": "global function"
  }, {
    "id": 438,
    "text": "create",
    "type": "global function"
  }, {
    "id": 439,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 440,
    "text": "status",
    "type": "global function"
  }, {
    "id": 441,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 442,
    "text": "",
    "type": "global variable"
  }, {
    "id": 443,
    "text": "",
    "type": "variable container"
  }, {
    "id": 444,
    "text": "",
    "type": "require container"
  }, {
    "id": 445,
    "text": "",
    "type": "local variable"
  }, {
    "id": 446,
    "text": "",
    "type": "n/a"
  }, {
    "id": 447,
    "text": "",
    "type": "global variable"
  }, {
    "id": 448,
    "text": "",
    "type": "n/a"
  }, {
    "id": 449,
    "text": "",
    "type": "global variable"
  }, {
    "id": 450,
    "text": "",
    "type": "global variable"
  }, {
    "id": 451,
    "text": "",
    "type": "n/a"
  }, {
    "id": 452,
    "text": "",
    "type": "global variable"
  }, {
    "id": 453,
    "text": "",
    "type": "n/a"
  }, {
    "id": 454,
    "text": "",
    "type": "global variable"
  }, {
    "id": 455,
    "text": "",
    "type": "n/a"
  }, {
    "id": 456,
    "text": "",
    "type": "global variable"
  }, {
    "id": 457,
    "text": "",
    "type": "n/a"
  }, {
    "id": 458,
    "text": "",
    "type": "global variable"
  }, {
    "id": 459,
    "text": "",
    "type": "n/a"
  }, {
    "id": 460,
    "text": "",
    "type": "global variable"
  }, {
    "id": 461,
    "text": "",
    "type": "n/a"
  }, {
    "id": 462,
    "text": "",
    "type": "global variable"
  }, {
    "id": 463,
    "text": "",
    "type": "n/a"
  }, {
    "id": 464,
    "text": "",
    "type": "global variable"
  }, {
    "id": 465,
    "text": "",
    "type": "n/a"
  } ]
}