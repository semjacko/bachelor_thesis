{
  "_filename": "dining1.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/examples/tutorial/dining1.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 23,
    "label": "has",
    "to": 34
  }, {
    "from": 23,
    "label": "has",
    "to": 35
  }, {
    "from": 23,
    "label": "has",
    "to": 36
  }, {
    "from": 23,
    "label": "has",
    "to": 37
  }, {
    "from": 23,
    "label": "has",
    "to": 38
  }, {
    "from": 23,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 21,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 46
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 21,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 51
  }, {
    "from": 45,
    "label": "calls",
    "to": 51
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 21,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 45,
    "label": "declares",
    "to": 2
  }, {
    "from": 45,
    "label": "declares",
    "to": 7
  }, {
    "from": 45,
    "label": "declares",
    "to": 14
  }, {
    "from": 45,
    "label": "declares",
    "to": 21
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 54,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 54,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 54,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 54,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 54,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 54,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 54,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 54,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 54,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 55,
    "label": "initializes",
    "to": 53
  }, {
    "from": 55,
    "label": "initializes",
    "to": 53
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dining1",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Fork(thread,take)\r\n  while true do\r\n    thread:signal(take)\r\n    --print(thread.name..\" taken\")\r\n    thread:wait(take)\r\n    --print(thread.name..\" released\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "while true do\r\n    thread:signal(take)\r\n    --print(thread.name..\" taken\")\r\n    thread:wait(take)\r\n    --print(thread.name..\" released\")\r\n  end",
    "type": "statement:while"
  }, {
    "id": 4,
    "text": "thread:signal(take)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "thread:wait(take)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function Plate(thread,eat,quantity)\r\n  while quantity==nil or quantity>0 do\r\n    thread:send(eat,1) -- one noodle\r\n    if quantity~=nil then\r\n      quantity = quantity - 1\r\n    end\r\n  end\r\n  thread:send(eat,0)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "while quantity==nil or quantity>0 do\r\n    thread:send(eat,1) -- one noodle\r\n    if quantity~=nil then\r\n      quantity = quantity - 1\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 9,
    "text": "thread:send(eat,1)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "if quantity~=nil then\r\n      quantity = quantity - 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "quantity = quantity - 1",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "thread:send(eat,0)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function Chair(thread,seat,fork1,fork2,plate)\r\n  local leave = thread:new(\"leave:\"..thread.name)\r\n  local ok = true\r\n  while ok do\r\n    thread:send(seat,fork1,fork2,plate,leave)\r\n    --print(thread.name..\" used\")\r\n    ok = thread:receive(leave)\r\n    --print(thread.name..\" leaved\")\r\n  end\r\n  --print(thread.name..\" removed\")\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local leave = thread:new(\"leave:\"..thread.name)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local ok = true",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "while ok do\r\n    thread:send(seat,fork1,fork2,plate,leave)\r\n    --print(thread.name..\" used\")\r\n    ok = thread:receive(leave)\r\n    --print(thread.name..\" leaved\")\r\n  end",
    "type": "statement:while"
  }, {
    "id": 18,
    "text": "thread:send(seat,fork1,fork2,plate,leave)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "ok = thread:receive(leave)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function Philo(thread,seat)\r\n  local total = 0\r\n  while true do\r\n    print(thread.name .. \" thinks\")\r\n    local fork1,fork2,eat,leave = thread:receive(seat)\r\n    print(thread.name .. \" seats\")\r\n    thread:wait(fork1)\r\n    print(thread.name .. \" left fork taken\")\r\n    thread:yield() -- to see the problem\r\n    thread:wait(fork2)\r\n    print(thread.name .. \" right fork taken\")\r\n    local nb = thread:receive(eat)\r\n    total = total + nb\r\n    STATS[thread.name] = total\r\n    print(thread.name .. \" eats \" .. tostring(nb) .. \" noodle(s)\")\r\n    thread:signal(fork1)\r\n    thread:signal(fork2)\r\n    print(thread.name .. \" releases the forks\")\r\n    if nb==0 then\r\n      thread:send(leave,false)\r\n      print(thread.name .. \" .. Nothing to eat ? leaves the table (unhappily)\")\r\n    else\r\n      thread:send(leave,true)\r\n      print(thread.name .. \" leaves the table\")\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local total = 0",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "while true do\r\n    print(thread.name .. \" thinks\")\r\n    local fork1,fork2,eat,leave = thread:receive(seat)\r\n    print(thread.name .. \" seats\")\r\n    thread:wait(fork1)\r\n    print(thread.name .. \" left fork taken\")\r\n    thread:yield() -- to see the problem\r\n    thread:wait(fork2)\r\n    print(thread.name .. \" right fork taken\")\r\n    local nb = thread:receive(eat)\r\n    total = total + nb\r\n    STATS[thread.name] = total\r\n    print(thread.name .. \" eats \" .. tostring(nb) .. \" noodle(s)\")\r\n    thread:signal(fork1)\r\n    thread:signal(fork2)\r\n    print(thread.name .. \" releases the forks\")\r\n    if nb==0 then\r\n      thread:send(leave,false)\r\n      print(thread.name .. \" .. Nothing to eat ? leaves the table (unhappily)\")\r\n    else\r\n      thread:send(leave,true)\r\n      print(thread.name .. \" leaves the table\")\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 24,
    "text": "print(thread.name .. \" thinks\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local fork1,fork2,eat,leave = thread:receive(seat)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "print(thread.name .. \" seats\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "thread:wait(fork1)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "print(thread.name .. \" left fork taken\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "thread:yield()",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "thread:wait(fork2)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "print(thread.name .. \" right fork taken\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local nb = thread:receive(eat)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "total = total + nb",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "STATS[thread.name] = total",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "print(thread.name .. \" eats \" .. tostring(nb) .. \" noodle(s)\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "thread:signal(fork1)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "thread:signal(fork2)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "print(thread.name .. \" releases the forks\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if nb==0 then\r\n      thread:send(leave,false)\r\n      print(thread.name .. \" .. Nothing to eat ? leaves the table (unhappily)\")\r\n    else\r\n      thread:send(leave,true)\r\n      print(thread.name .. \" leaves the table\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "thread:send(leave,false)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "print(thread.name .. \" .. Nothing to eat ? leaves the table (unhappily)\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "thread:send(leave,true)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "print(thread.name .. \" leaves the table\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "",
    "type": "function container"
  }, {
    "id": 46,
    "text": "init",
    "type": "global function"
  }, {
    "id": 47,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 48,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 49,
    "text": "print",
    "type": "global function"
  }, {
    "id": 50,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 51,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 52,
    "text": "require",
    "type": "global function"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  }, {
    "id": 54,
    "text": "",
    "type": "variable container"
  }, {
    "id": 55,
    "text": "",
    "type": "require container"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "number"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "global variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  } ]
}