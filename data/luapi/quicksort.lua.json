{
  "_filename": "quicksort.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/examples/quicksort.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 11,
    "label": "has",
    "to": 3
  }, {
    "from": 11,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 21
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 38
  }, {
    "from": 27,
    "label": "has",
    "to": 39
  }, {
    "from": 27,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 27,
    "label": "calls",
    "to": 63
  }, {
    "from": 11,
    "label": "calls",
    "to": 60
  }, {
    "from": 24,
    "label": "calls",
    "to": 60
  }, {
    "from": 41,
    "label": "calls",
    "to": 60
  }, {
    "from": 11,
    "label": "calls",
    "to": 64
  }, {
    "from": 11,
    "label": "calls",
    "to": 64
  }, {
    "from": 24,
    "label": "calls",
    "to": 64
  }, {
    "from": 56,
    "label": "calls",
    "to": 64
  }, {
    "from": 49,
    "label": "calls",
    "to": 61
  }, {
    "from": 49,
    "label": "calls",
    "to": 61
  }, {
    "from": 41,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 49,
    "label": "calls",
    "to": 58
  }, {
    "from": 56,
    "label": "calls",
    "to": 59
  }, {
    "from": 56,
    "label": "calls",
    "to": 59
  }, {
    "from": 56,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 56,
    "label": "calls",
    "to": 62
  }, {
    "from": 49,
    "label": "calls",
    "to": 41
  }, {
    "from": 49,
    "label": "calls",
    "to": 41
  }, {
    "from": 27,
    "label": "calls",
    "to": 11
  }, {
    "from": 56,
    "label": "calls",
    "to": 65
  }, {
    "from": 56,
    "label": "calls",
    "to": 57
  }, {
    "from": 27,
    "label": "calls",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 56,
    "label": "declares",
    "to": 2
  }, {
    "from": 56,
    "label": "declares",
    "to": 5
  }, {
    "from": 56,
    "label": "declares",
    "to": 7
  }, {
    "from": 56,
    "label": "declares",
    "to": 9
  }, {
    "from": 56,
    "label": "declares",
    "to": 11
  }, {
    "from": 56,
    "label": "declares",
    "to": 24
  }, {
    "from": 56,
    "label": "declares",
    "to": 27
  }, {
    "from": 56,
    "label": "declares",
    "to": 41
  }, {
    "from": 56,
    "label": "declares",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 68
  }, {
    "from": 67,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 67,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 67,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 67,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 67,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 68,
    "label": "initializes",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "quicksort",
    "type": "module"
  }, {
    "id": 2,
    "text": "function RandomPivot(imin,imax)\r\n  return math.random(imin,imax)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function MidPivot(imin,imax)\r\n  return (imax-imin) / 2 + imin\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function MinPivot(imin,imax)\r\n  return imin;\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function MaxPivot(imin,imax)\r\n  return imax;\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function Partition(tab,pivot)\r\n  local left = {}\r\n  local right = {}\r\n  local rep = 0\r\n  local prev = nil\r\n  for i,elem in ipairs(tab) do\r\n    if elem==prev then\r\n      rep = rep + 1\r\n    end\r\n    prev = elem\r\n    if elem<=pivot then\r\n      table.insert(left,elem)\r\n    else\r\n      table.insert(right,elem)\r\n    end\r\n  end\r\n  return rep~=#tab-1,left,right\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local left = {}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local right = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local rep = 0",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local prev = nil",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for i,elem in ipairs(tab) do\r\n    if elem==prev then\r\n      rep = rep + 1\r\n    end\r\n    prev = elem\r\n    if elem<=pivot then\r\n      table.insert(left,elem)\r\n    else\r\n      table.insert(right,elem)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "if elem==prev then\r\n      rep = rep + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "rep = rep + 1",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "prev = elem",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if elem<=pivot then\r\n      table.insert(left,elem)\r\n    else\r\n      table.insert(right,elem)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "table.insert(left,elem)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "table.insert(right,elem)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function Assemble(left,right)\r\n  for i,elem in ipairs(right) do\r\n    table.insert(left,elem)\r\n  end\r\n  return left\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "for i,elem in ipairs(right) do\r\n    table.insert(left,elem)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function QuickSort(proc,tab,pivotfun,finish)\r\n  if #tab<=1 then\r\n    proc:send(finish,tab)\r\n    return\r\n  end\r\n  local pivotindex = pivotfun(1,#tab)\r\n  local cont,left,right = Partition(tab,tab[pivotindex])\r\n  if not cont then\r\n    proc:send(finish,tab)\r\n    return\r\n  end\r\n  local finish1 = proc:new(\"finish1\")\r\n  local finish2 = proc:new(\"finish2\")\r\n  proc:spawn(\"Sort\",QuickSort,left,pivotfun,finish1)\r\n  proc:spawn(\"Sort\",QuickSort,right,pivotfun,finish2)\r\n  left = proc:receive(finish1)\r\n  right = proc:receive(finish2)\r\n--[[\r\n  local ok = proc:join({ finish1:receive(), finish2:receive() },\r\n                      function(left,right)\r\n                        proc:send(finish,Assemble(left,right))\r\n                      end)()\r\n  if not ok then\r\n    error(\"Join failure\")\r\n  end\r\n]]\r\n  proc:send(finish,Assemble(left,right))\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "if #tab<=1 then\r\n    proc:send(finish,tab)\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "proc:send(finish,tab)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local pivotindex = pivotfun(1,#tab)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local cont,left,right = Partition(tab,tab[pivotindex])",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if not cont then\r\n    proc:send(finish,tab)\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local finish1 = proc:new(\"finish1\")",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local finish2 = proc:new(\"finish2\")",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "proc:spawn(\"Sort\",QuickSort,left,pivotfun,finish1)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "proc:spawn(\"Sort\",QuickSort,right,pivotfun,finish2)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "left = proc:receive(finish1)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "right = proc:receive(finish2)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "proc:send(finish,Assemble(left,right))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function PrintTab(tab)\r\n  local str = \"[ \"\r\n  for i,elem in ipairs(tab) do\r\n    str = str .. tostring(elem)\r\n    if i<#tab then\r\n      str = str .. \", \"\r\n    end\r\n  end\r\n  str = str .. \" ]\"\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local str = \"[ \"",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "for i,elem in ipairs(tab) do\r\n    str = str .. tostring(elem)\r\n    if i<#tab then\r\n      str = str .. \", \"\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "str = str .. tostring(elem)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if i<#tab then\r\n      str = str .. \", \"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "str = str .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "str = str .. \" ]\"",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function Main(proc,tab)\r\n  print(\"Initial: \" .. tostring(PrintTab(tab)))\r\n  local finish = proc:new(\"finish\")\r\n\r\n  proc:spawn(\"Sort\",QuickSort,tab,RandomPivot,finish)\r\n  local sorted = proc:receive(finish)\r\n\r\n  print(\"Sorted: \" .. tostring(PrintTab(sorted)))\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "print(\"Initial: \" .. tostring(PrintTab(tab)))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local finish = proc:new(\"finish\")",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "proc:spawn(\"Sort\",QuickSort,tab,RandomPivot,finish)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local sorted = proc:receive(finish)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "print(\"Sorted: \" .. tostring(PrintTab(sorted)))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "",
    "type": "function container"
  }, {
    "id": 57,
    "text": "init",
    "type": "global function"
  }, {
    "id": 58,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 59,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 60,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 61,
    "text": "print",
    "type": "global function"
  }, {
    "id": 62,
    "text": "random",
    "type": "global function"
  }, {
    "id": 63,
    "text": "pivotfun",
    "type": "global function"
  }, {
    "id": 64,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 65,
    "text": "require",
    "type": "global function"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "variable container"
  }, {
    "id": 68,
    "text": "",
    "type": "require container"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  } ]
}