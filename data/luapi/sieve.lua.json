{
  "_filename": "sieve.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luapi/examples/sieve.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "calls",
    "to": 20
  }, {
    "from": 7,
    "label": "calls",
    "to": 7
  }, {
    "from": 7,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 23
  }, {
    "from": 13,
    "label": "calls",
    "to": 22
  }, {
    "from": 13,
    "label": "calls",
    "to": 21
  }, {
    "from": 13,
    "label": "calls",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 19,
    "label": "declares",
    "to": 2
  }, {
    "from": 19,
    "label": "declares",
    "to": 7
  }, {
    "from": 19,
    "label": "declares",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 25,
    "label": "initializes",
    "to": 27
  }, {
    "from": 27,
    "label": "assigns",
    "to": 28
  }, {
    "from": 25,
    "label": "initializes",
    "to": 29
  }, {
    "from": 29,
    "label": "assigns",
    "to": 30
  }, {
    "from": 25,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "assigns",
    "to": 32
  }, {
    "from": 26,
    "label": "initializes",
    "to": 24
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sieve",
    "type": "module"
  }, {
    "id": 2,
    "text": "function GenInt2(proc,i,nb,gen)\r\n  while i<nb do\r\n    proc:send(gen,i)\r\n    i = i + 2\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "while i<nb do\r\n    proc:send(gen,i)\r\n    i = i + 2\r\n  end",
    "type": "statement:while"
  }, {
    "id": 4,
    "text": "proc:send(gen,i)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "i = i + 2",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function PrimeFilter(proc,cin,n,cout)\r\n  local x = proc:receive(cin)\r\n  if x % n == 0 then\r\n    PrimeFilter(proc,cin,n,cout)\r\n  else\r\n    proc:send(cout,x)\r\n    PrimeFilter(proc,cin,n,cout)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local x = proc:receive(cin)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if x % n == 0 then\r\n    PrimeFilter(proc,cin,n,cout)\r\n  else\r\n    proc:send(cout,x)\r\n    PrimeFilter(proc,cin,n,cout)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "PrimeFilter(proc,cin,n,cout)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "proc:send(cout,x)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function EndPrimeFilter(proc,cin)\r\n  local x = proc:receive(cin)\r\n  local cout = proc:new(\"out\")\r\n  print(x,\" is prime\")\r\n  proc:spawn(\"PrimeFilter(\"..tostring(x)..\")\",PrimeFilter,cin,x,cout)\r\n  EndPrimeFilter(proc,cout)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local cout = proc:new(\"out\")",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "print(x,\" is prime\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "proc:spawn(\"PrimeFilter(\"..tostring(x)..\")\",PrimeFilter,cin,x,cout)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "EndPrimeFilter(proc,cout)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "",
    "type": "function container"
  }, {
    "id": 20,
    "text": "init",
    "type": "global function"
  }, {
    "id": 21,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 22,
    "text": "print",
    "type": "global function"
  }, {
    "id": 23,
    "text": "require",
    "type": "global function"
  }, {
    "id": 24,
    "text": "",
    "type": "global variable"
  }, {
    "id": 25,
    "text": "",
    "type": "variable container"
  }, {
    "id": 26,
    "text": "",
    "type": "require container"
  }, {
    "id": 27,
    "text": "",
    "type": "local variable"
  }, {
    "id": 28,
    "text": "",
    "type": "n/a"
  }, {
    "id": 29,
    "text": "",
    "type": "local variable"
  }, {
    "id": 30,
    "text": "",
    "type": "n/a"
  }, {
    "id": 31,
    "text": "",
    "type": "global variable"
  }, {
    "id": 32,
    "text": "",
    "type": "n/a"
  } ]
}