{
  "_filename": "tcbtest.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-tokyocabinet/tcbtest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 24,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 24,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 24,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 24,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 24,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 24,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 24,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 24,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 24,
    "label": "has",
    "to": 57
  }, {
    "from": 24,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 65,
    "label": "has",
    "to": 75
  }, {
    "from": 65,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 78,
    "label": "has",
    "to": 4
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 77,
    "label": "has",
    "to": 86
  }, {
    "from": 77,
    "label": "has",
    "to": 87
  }, {
    "from": 77,
    "label": "has",
    "to": 88
  }, {
    "from": 77,
    "label": "has",
    "to": 89
  }, {
    "from": 77,
    "label": "has",
    "to": 90
  }, {
    "from": 77,
    "label": "has",
    "to": 91
  }, {
    "from": 77,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 65,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 65,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 65,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 65,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 65,
    "label": "has",
    "to": 103
  }, {
    "from": 65,
    "label": "has",
    "to": 12
  }, {
    "from": 65,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 66
  }, {
    "from": 105,
    "label": "has",
    "to": 67
  }, {
    "from": 105,
    "label": "has",
    "to": 75
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 83
  }, {
    "from": 108,
    "label": "has",
    "to": 84
  }, {
    "from": 108,
    "label": "has",
    "to": 4
  }, {
    "from": 107,
    "label": "has",
    "to": 85
  }, {
    "from": 107,
    "label": "has",
    "to": 4
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 4
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 12
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 66
  }, {
    "from": 112,
    "label": "has",
    "to": 67
  }, {
    "from": 112,
    "label": "has",
    "to": 75
  }, {
    "from": 112,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 83
  }, {
    "from": 108,
    "label": "has",
    "to": 84
  }, {
    "from": 108,
    "label": "has",
    "to": 4
  }, {
    "from": 107,
    "label": "has",
    "to": 85
  }, {
    "from": 107,
    "label": "has",
    "to": 4
  }, {
    "from": 112,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 4
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 12
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 66
  }, {
    "from": 115,
    "label": "has",
    "to": 67
  }, {
    "from": 115,
    "label": "has",
    "to": 68
  }, {
    "from": 115,
    "label": "has",
    "to": 74
  }, {
    "from": 115,
    "label": "has",
    "to": 75
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 78,
    "label": "has",
    "to": 4
  }, {
    "from": 117,
    "label": "has",
    "to": 85
  }, {
    "from": 117,
    "label": "has",
    "to": 86
  }, {
    "from": 117,
    "label": "has",
    "to": 4
  }, {
    "from": 115,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 4
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 12
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 126
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 126
  }, {
    "from": 129,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 120,
    "label": "has",
    "to": 140
  }, {
    "from": 120,
    "label": "has",
    "to": 141
  }, {
    "from": 120,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 144
  }, {
    "from": 120,
    "label": "has",
    "to": 145
  }, {
    "from": 120,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 120,
    "label": "has",
    "to": 12
  }, {
    "from": 120,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 122
  }, {
    "from": 151,
    "label": "has",
    "to": 123
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 128
  }, {
    "from": 153,
    "label": "has",
    "to": 126
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 151,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 130
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 126
  }, {
    "from": 155,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 151,
    "label": "has",
    "to": 140
  }, {
    "from": 151,
    "label": "has",
    "to": 141
  }, {
    "from": 151,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 126
  }, {
    "from": 151,
    "label": "has",
    "to": 144
  }, {
    "from": 151,
    "label": "has",
    "to": 145
  }, {
    "from": 151,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 151,
    "label": "has",
    "to": 12
  }, {
    "from": 151,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 122
  }, {
    "from": 159,
    "label": "has",
    "to": 123
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 128
  }, {
    "from": 161,
    "label": "has",
    "to": 126
  }, {
    "from": 159,
    "label": "has",
    "to": 154
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 130
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 126
  }, {
    "from": 162,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 159,
    "label": "has",
    "to": 140
  }, {
    "from": 159,
    "label": "has",
    "to": 141
  }, {
    "from": 159,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 126
  }, {
    "from": 159,
    "label": "has",
    "to": 144
  }, {
    "from": 159,
    "label": "has",
    "to": 145
  }, {
    "from": 159,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 159,
    "label": "has",
    "to": 12
  }, {
    "from": 159,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 122
  }, {
    "from": 166,
    "label": "has",
    "to": 123
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 125
  }, {
    "from": 168,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 175
  }, {
    "from": 166,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 130
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 135
  }, {
    "from": 177,
    "label": "has",
    "to": 126
  }, {
    "from": 176,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 166,
    "label": "has",
    "to": 178
  }, {
    "from": 166,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 130
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 126
  }, {
    "from": 155,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 166,
    "label": "has",
    "to": 179
  }, {
    "from": 166,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 130
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 164
  }, {
    "from": 181,
    "label": "has",
    "to": 126
  }, {
    "from": 180,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 166,
    "label": "has",
    "to": 182
  }, {
    "from": 166,
    "label": "has",
    "to": 183
  }, {
    "from": 166,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 184,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 186
  }, {
    "from": 166,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 126
  }, {
    "from": 187,
    "label": "has",
    "to": 193
  }, {
    "from": 187,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 137
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 187,
    "label": "has",
    "to": 197
  }, {
    "from": 166,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 196
  }, {
    "from": 166,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 201
  }, {
    "from": 166,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 204
  }, {
    "from": 166,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 126
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 126
  }, {
    "from": 205,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 166,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 216
  }, {
    "from": 166,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 219
  }, {
    "from": 166,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 222
  }, {
    "from": 166,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 211
  }, {
    "from": 225,
    "label": "has",
    "to": 126
  }, {
    "from": 223,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 166,
    "label": "has",
    "to": 226
  }, {
    "from": 166,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 224
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 188
  }, {
    "from": 229,
    "label": "has",
    "to": 189
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 230,
    "label": "has",
    "to": 233
  }, {
    "from": 229,
    "label": "has",
    "to": 193
  }, {
    "from": 227,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 166,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 236
  }, {
    "from": 166,
    "label": "has",
    "to": 237
  }, {
    "from": 166,
    "label": "has",
    "to": 238
  }, {
    "from": 166,
    "label": "has",
    "to": 239
  }, {
    "from": 166,
    "label": "has",
    "to": 240
  }, {
    "from": 166,
    "label": "has",
    "to": 241
  }, {
    "from": 166,
    "label": "has",
    "to": 242
  }, {
    "from": 166,
    "label": "has",
    "to": 243
  }, {
    "from": 166,
    "label": "has",
    "to": 193
  }, {
    "from": 166,
    "label": "has",
    "to": 193
  }, {
    "from": 166,
    "label": "has",
    "to": 244
  }, {
    "from": 166,
    "label": "has",
    "to": 245
  }, {
    "from": 166,
    "label": "has",
    "to": 246
  }, {
    "from": 166,
    "label": "has",
    "to": 231
  }, {
    "from": 166,
    "label": "has",
    "to": 247
  }, {
    "from": 166,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 250
  }, {
    "from": 166,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 235
  }, {
    "from": 257,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 258
  }, {
    "from": 166,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 206
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 259,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 166,
    "label": "has",
    "to": 263
  }, {
    "from": 166,
    "label": "has",
    "to": 264
  }, {
    "from": 166,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 137
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 265,
    "label": "has",
    "to": 12
  }, {
    "from": 166,
    "label": "has",
    "to": 270
  }, {
    "from": 166,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 269
  }, {
    "from": 166,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 200
  }, {
    "from": 272,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 140
  }, {
    "from": 166,
    "label": "has",
    "to": 141
  }, {
    "from": 166,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 126
  }, {
    "from": 166,
    "label": "has",
    "to": 144
  }, {
    "from": 166,
    "label": "has",
    "to": 145
  }, {
    "from": 166,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 166,
    "label": "has",
    "to": 12
  }, {
    "from": 166,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 266
  }, {
    "from": 274,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 137
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 274,
    "label": "has",
    "to": 12
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 112,
    "label": "calls",
    "to": 159
  }, {
    "from": 24,
    "label": "calls",
    "to": 280
  }, {
    "from": 120,
    "label": "calls",
    "to": 280
  }, {
    "from": 151,
    "label": "calls",
    "to": 280
  }, {
    "from": 159,
    "label": "calls",
    "to": 280
  }, {
    "from": 166,
    "label": "calls",
    "to": 280
  }, {
    "from": 166,
    "label": "calls",
    "to": 280
  }, {
    "from": 166,
    "label": "calls",
    "to": 280
  }, {
    "from": 166,
    "label": "calls",
    "to": 280
  }, {
    "from": 166,
    "label": "calls",
    "to": 280
  }, {
    "from": 166,
    "label": "calls",
    "to": 280
  }, {
    "from": 166,
    "label": "calls",
    "to": 280
  }, {
    "from": 14,
    "label": "calls",
    "to": 281
  }, {
    "from": 276,
    "label": "calls",
    "to": 281
  }, {
    "from": 2,
    "label": "calls",
    "to": 115
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 166,
    "label": "calls",
    "to": 288
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 24,
    "label": "calls",
    "to": 287
  }, {
    "from": 120,
    "label": "calls",
    "to": 59
  }, {
    "from": 120,
    "label": "calls",
    "to": 59
  }, {
    "from": 120,
    "label": "calls",
    "to": 59
  }, {
    "from": 120,
    "label": "calls",
    "to": 59
  }, {
    "from": 120,
    "label": "calls",
    "to": 59
  }, {
    "from": 151,
    "label": "calls",
    "to": 59
  }, {
    "from": 151,
    "label": "calls",
    "to": 59
  }, {
    "from": 151,
    "label": "calls",
    "to": 59
  }, {
    "from": 159,
    "label": "calls",
    "to": 59
  }, {
    "from": 159,
    "label": "calls",
    "to": 59
  }, {
    "from": 159,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 166,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 65
  }, {
    "from": 65,
    "label": "calls",
    "to": 278
  }, {
    "from": 105,
    "label": "calls",
    "to": 278
  }, {
    "from": 112,
    "label": "calls",
    "to": 278
  }, {
    "from": 115,
    "label": "calls",
    "to": 278
  }, {
    "from": 2,
    "label": "calls",
    "to": 112
  }, {
    "from": 276,
    "label": "calls",
    "to": 2
  }, {
    "from": 276,
    "label": "calls",
    "to": 282
  }, {
    "from": 65,
    "label": "calls",
    "to": 292
  }, {
    "from": 65,
    "label": "calls",
    "to": 292
  }, {
    "from": 65,
    "label": "calls",
    "to": 292
  }, {
    "from": 65,
    "label": "calls",
    "to": 292
  }, {
    "from": 65,
    "label": "calls",
    "to": 292
  }, {
    "from": 65,
    "label": "calls",
    "to": 292
  }, {
    "from": 115,
    "label": "calls",
    "to": 292
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 59,
    "label": "calls",
    "to": 24
  }, {
    "from": 120,
    "label": "calls",
    "to": 24
  }, {
    "from": 120,
    "label": "calls",
    "to": 24
  }, {
    "from": 120,
    "label": "calls",
    "to": 24
  }, {
    "from": 120,
    "label": "calls",
    "to": 24
  }, {
    "from": 120,
    "label": "calls",
    "to": 24
  }, {
    "from": 120,
    "label": "calls",
    "to": 24
  }, {
    "from": 120,
    "label": "calls",
    "to": 24
  }, {
    "from": 120,
    "label": "calls",
    "to": 24
  }, {
    "from": 151,
    "label": "calls",
    "to": 24
  }, {
    "from": 151,
    "label": "calls",
    "to": 24
  }, {
    "from": 151,
    "label": "calls",
    "to": 24
  }, {
    "from": 151,
    "label": "calls",
    "to": 24
  }, {
    "from": 151,
    "label": "calls",
    "to": 24
  }, {
    "from": 151,
    "label": "calls",
    "to": 24
  }, {
    "from": 151,
    "label": "calls",
    "to": 24
  }, {
    "from": 151,
    "label": "calls",
    "to": 24
  }, {
    "from": 159,
    "label": "calls",
    "to": 24
  }, {
    "from": 159,
    "label": "calls",
    "to": 24
  }, {
    "from": 159,
    "label": "calls",
    "to": 24
  }, {
    "from": 159,
    "label": "calls",
    "to": 24
  }, {
    "from": 159,
    "label": "calls",
    "to": 24
  }, {
    "from": 159,
    "label": "calls",
    "to": 24
  }, {
    "from": 159,
    "label": "calls",
    "to": 24
  }, {
    "from": 159,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 166,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 285
  }, {
    "from": 276,
    "label": "calls",
    "to": 291
  }, {
    "from": 65,
    "label": "calls",
    "to": 120
  }, {
    "from": 166,
    "label": "calls",
    "to": 286
  }, {
    "from": 166,
    "label": "calls",
    "to": 277
  }, {
    "from": 105,
    "label": "calls",
    "to": 151
  }, {
    "from": 120,
    "label": "calls",
    "to": 279
  }, {
    "from": 120,
    "label": "calls",
    "to": 279
  }, {
    "from": 151,
    "label": "calls",
    "to": 279
  }, {
    "from": 151,
    "label": "calls",
    "to": 279
  }, {
    "from": 159,
    "label": "calls",
    "to": 279
  }, {
    "from": 159,
    "label": "calls",
    "to": 279
  }, {
    "from": 166,
    "label": "calls",
    "to": 279
  }, {
    "from": 166,
    "label": "calls",
    "to": 279
  }, {
    "from": 2,
    "label": "calls",
    "to": 14
  }, {
    "from": 2,
    "label": "calls",
    "to": 14
  }, {
    "from": 65,
    "label": "calls",
    "to": 14
  }, {
    "from": 65,
    "label": "calls",
    "to": 14
  }, {
    "from": 65,
    "label": "calls",
    "to": 14
  }, {
    "from": 105,
    "label": "calls",
    "to": 14
  }, {
    "from": 105,
    "label": "calls",
    "to": 14
  }, {
    "from": 105,
    "label": "calls",
    "to": 14
  }, {
    "from": 112,
    "label": "calls",
    "to": 14
  }, {
    "from": 112,
    "label": "calls",
    "to": 14
  }, {
    "from": 112,
    "label": "calls",
    "to": 14
  }, {
    "from": 115,
    "label": "calls",
    "to": 14
  }, {
    "from": 115,
    "label": "calls",
    "to": 14
  }, {
    "from": 115,
    "label": "calls",
    "to": 14
  }, {
    "from": 65,
    "label": "calls",
    "to": 289
  }, {
    "from": 105,
    "label": "calls",
    "to": 289
  }, {
    "from": 112,
    "label": "calls",
    "to": 289
  }, {
    "from": 115,
    "label": "calls",
    "to": 289
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 24,
    "label": "calls",
    "to": 283
  }, {
    "from": 276,
    "label": "calls",
    "to": 290
  }, {
    "from": 115,
    "label": "calls",
    "to": 166
  }, {
    "from": 276,
    "label": "calls",
    "to": 284
  }, {
    "from": 1,
    "label": "contains",
    "to": 276
  }, {
    "from": 276,
    "label": "declares",
    "to": 2
  }, {
    "from": 276,
    "label": "declares",
    "to": 14
  }, {
    "from": 276,
    "label": "declares",
    "to": 24
  }, {
    "from": 276,
    "label": "declares",
    "to": 59
  }, {
    "from": 276,
    "label": "declares",
    "to": 65
  }, {
    "from": 276,
    "label": "declares",
    "to": 105
  }, {
    "from": 276,
    "label": "declares",
    "to": 112
  }, {
    "from": 276,
    "label": "declares",
    "to": 115
  }, {
    "from": 276,
    "label": "declares",
    "to": 120
  }, {
    "from": 276,
    "label": "declares",
    "to": 151
  }, {
    "from": 276,
    "label": "declares",
    "to": 159
  }, {
    "from": 276,
    "label": "declares",
    "to": 166
  }, {
    "from": 276,
    "label": "declares",
    "to": 274
  }, {
    "from": 1,
    "label": "contains",
    "to": 294
  }, {
    "from": 1,
    "label": "contains",
    "to": 295
  }, {
    "from": 295,
    "label": "initializes",
    "to": 293
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tcbtest",
    "type": "module"
  }, {
    "id": 2,
    "text": "function main()\r\n   if #arg < 1 then usage() end\r\n   local rv\r\n   if arg[1] == \"write\" then\r\n      rv = runwrite()\r\n   elseif arg[1] == \"read\" then\r\n      rv = runread()\r\n   elseif arg[1] == \"remove\" then\r\n      rv = runremove()\r\n   elseif arg[1] == \"misc\" then\r\n      rv = runmisc()\r\n   else\r\n      usage()\r\n   end\r\n   collectgarbage(\"collect\")\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if #arg < 1 then usage() end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "usage()",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local rv",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if arg[1] == \"write\" then\r\n      rv = runwrite()\r\n   elseif arg[1] == \"read\" then\r\n      rv = runread()\r\n   elseif arg[1] == \"remove\" then\r\n      rv = runremove()\r\n   elseif arg[1] == \"misc\" then\r\n      rv = runmisc()\r\n   else\r\n      usage()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "rv = runwrite()",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "rv = runread()",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "rv = runremove()",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "rv = runmisc()",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function usage()\r\n   printf(\"%s: test cases of the B+ tree database API\\n\", progname)\r\n   printf(\"\\n\")\r\n   printf(\"usage:\\n\")\r\n   printf(\"  %s write [-tl] [-td|-tb|-tt] [-nl|-nb] path rnum\" ..\r\n          \" [lmemb [nmemb [bnum [apow [fpow]]]]]\\n\", progname)\r\n   printf(\"  %s read [-nl|-nb] path\\n\", progname)\r\n   printf(\"  %s remove [-nl|-nb] path\\n\", progname)\r\n   printf(\"  %s misc [-tl] [-td|-tb|-tt] [-nl|-nb] path rnum\\n\", progname)\r\n   printf(\"\\n\")\r\n   os.exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "printf(\"%s: test cases of the B+ tree database API\\n\", progname)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "printf(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "printf(\"usage:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "printf(\"  %s write [-tl] [-td|-tb|-tt] [-nl|-nb] path rnum\" ..\r\n          \" [lmemb [nmemb [bnum [apow [fpow]]]]]\\n\", progname)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "printf(\"  %s read [-nl|-nb] path\\n\", progname)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "printf(\"  %s remove [-nl|-nb] path\\n\", progname)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "printf(\"  %s misc [-tl] [-td|-tb|-tt] [-nl|-nb] path rnum\\n\", progname)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function printf(format, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)\r\n   if type(a) ~= \"number\" then a = tostring(a) end\r\n   if type(b) ~= \"number\" then b = tostring(b) end\r\n   if type(c) ~= \"number\" then c = tostring(c) end\r\n   if type(d) ~= \"number\" then d = tostring(d) end\r\n   if type(e) ~= \"number\" then e = tostring(e) end\r\n   if type(f) ~= \"number\" then f = tostring(f) end\r\n   if type(g) ~= \"number\" then g = tostring(g) end\r\n   if type(h) ~= \"number\" then h = tostring(h) end\r\n   if type(i) ~= \"number\" then i = tostring(i) end\r\n   if type(j) ~= \"number\" then j = tostring(j) end\r\n   if type(k) ~= \"number\" then k = tostring(k) end\r\n   if type(l) ~= \"number\" then l = tostring(l) end\r\n   if type(m) ~= \"number\" then m = tostring(m) end\r\n   if type(n) ~= \"number\" then n = tostring(n) end\r\n   if type(o) ~= \"number\" then o = tostring(o) end\r\n   if type(p) ~= \"number\" then p = tostring(p) end\r\n   io.stdout:write(string.format(format, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p))\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "if type(a) ~= \"number\" then a = tostring(a) end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "a = tostring(a)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if type(b) ~= \"number\" then b = tostring(b) end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "b = tostring(b)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if type(c) ~= \"number\" then c = tostring(c) end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "c = tostring(c)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if type(d) ~= \"number\" then d = tostring(d) end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "d = tostring(d)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if type(e) ~= \"number\" then e = tostring(e) end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "e = tostring(e)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if type(f) ~= \"number\" then f = tostring(f) end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "f = tostring(f)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if type(g) ~= \"number\" then g = tostring(g) end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "g = tostring(g)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if type(h) ~= \"number\" then h = tostring(h) end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "h = tostring(h)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if type(i) ~= \"number\" then i = tostring(i) end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "i = tostring(i)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if type(j) ~= \"number\" then j = tostring(j) end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "j = tostring(j)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if type(k) ~= \"number\" then k = tostring(k) end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "k = tostring(k)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if type(l) ~= \"number\" then l = tostring(l) end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "l = tostring(l)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if type(m) ~= \"number\" then m = tostring(m) end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "m = tostring(m)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if type(n) ~= \"number\" then n = tostring(n) end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "n = tostring(n)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if type(o) ~= \"number\" then o = tostring(o) end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "o = tostring(o)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if type(p) ~= \"number\" then p = tostring(p) end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "p = tostring(p)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "io.stdout:write(string.format(format, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function eprint(bdb, func)\r\n   local path = bdb:path()\r\n   if not path then path = \"-\" end\r\n   printf(\"%s: %s: %s: %s\\n\", progname, path, func, bdb:errmsg())\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local path = bdb:path()",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if not path then path = \"-\" end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "path = \"-\"",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "printf(\"%s: %s: %s: %s\\n\", progname, path, func, bdb:errmsg())",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function runwrite()\r\n   local bdb = tokyocabinet.bdbnew()\r\n   local path = nil\r\n   local rnum = nil\r\n   local lmemb = nil\r\n   local nmemb = nil\r\n   local bnum = nil\r\n   local apow = nil\r\n   local fpow = nil\r\n   local opts = 0\r\n   local omode = 0\r\n   for i = 2, #arg do\r\n      if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-tl\" then\r\n            opts = opts + bdb.TLARGE\r\n         elseif arg[i] == \"-td\" then\r\n            opts = opts + bdb.TDEFLATE\r\n         elseif arg[i] == \"-tb\" then\r\n            opts = opts + bdb.TBZIP\r\n         elseif arg[i] == \"-tt\" then\r\n            opts = opts + bdb.TTCBS\r\n         elseif arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      elseif not lmemb then\r\n         lmemb = tonumber(arg[i])\r\n      elseif not nmemb then\r\n         nmemb = tonumber(arg[i])\r\n      elseif not bnum then\r\n         bnum = tonumber(arg[i])\r\n      elseif not apow then\r\n         apow = tonumber(arg[i])\r\n      elseif not fpow then\r\n         fpow = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end\r\n   end\r\n   if not path or not rnum or rnum < 1 then usage() end\r\n   if not lmemb then lmemb = -1 end\r\n   if not nmemb then nmemb = -1 end\r\n   if not bnum then bnum = -1 end\r\n   if not apow then apow = -1 end\r\n   if not fpow then fpow = -1 end\r\n   local rv = procwrite(bdb, path, rnum, lmemb, nmemb, bnum, apow, fpow, opts, omode)\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local bdb = tokyocabinet.bdbnew()",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local path = nil",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local rnum = nil",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local lmemb = nil",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local nmemb = nil",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local bnum = nil",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local apow = nil",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local fpow = nil",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local opts = 0",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local omode = 0",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "for i = 2, #arg do\r\n      if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-tl\" then\r\n            opts = opts + bdb.TLARGE\r\n         elseif arg[i] == \"-td\" then\r\n            opts = opts + bdb.TDEFLATE\r\n         elseif arg[i] == \"-tb\" then\r\n            opts = opts + bdb.TBZIP\r\n         elseif arg[i] == \"-tt\" then\r\n            opts = opts + bdb.TTCBS\r\n         elseif arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      elseif not lmemb then\r\n         lmemb = tonumber(arg[i])\r\n      elseif not nmemb then\r\n         nmemb = tonumber(arg[i])\r\n      elseif not bnum then\r\n         bnum = tonumber(arg[i])\r\n      elseif not apow then\r\n         apow = tonumber(arg[i])\r\n      elseif not fpow then\r\n         fpow = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 77,
    "text": "if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-tl\" then\r\n            opts = opts + bdb.TLARGE\r\n         elseif arg[i] == \"-td\" then\r\n            opts = opts + bdb.TDEFLATE\r\n         elseif arg[i] == \"-tb\" then\r\n            opts = opts + bdb.TBZIP\r\n         elseif arg[i] == \"-tt\" then\r\n            opts = opts + bdb.TTCBS\r\n         elseif arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      elseif not lmemb then\r\n         lmemb = tonumber(arg[i])\r\n      elseif not nmemb then\r\n         nmemb = tonumber(arg[i])\r\n      elseif not bnum then\r\n         bnum = tonumber(arg[i])\r\n      elseif not apow then\r\n         apow = tonumber(arg[i])\r\n      elseif not fpow then\r\n         fpow = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "if arg[i] == \"-tl\" then\r\n            opts = opts + bdb.TLARGE\r\n         elseif arg[i] == \"-td\" then\r\n            opts = opts + bdb.TDEFLATE\r\n         elseif arg[i] == \"-tb\" then\r\n            opts = opts + bdb.TBZIP\r\n         elseif arg[i] == \"-tt\" then\r\n            opts = opts + bdb.TTCBS\r\n         elseif arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "opts = opts + bdb.TLARGE",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "opts = opts + bdb.TDEFLATE",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "opts = opts + bdb.TBZIP",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "opts = opts + bdb.TTCBS",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "omode = omode + bdb.ONOLCK",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "omode = omode + bdb.OLCKNB",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "path = arg[i]",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "rnum = tonumber(arg[i])",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "lmemb = tonumber(arg[i])",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "nmemb = tonumber(arg[i])",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "bnum = tonumber(arg[i])",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "apow = tonumber(arg[i])",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "fpow = tonumber(arg[i])",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "if not path or not rnum or rnum < 1 then usage() end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "if not lmemb then lmemb = -1 end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "lmemb = -1",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if not nmemb then nmemb = -1 end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "nmemb = -1",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if not bnum then bnum = -1 end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "bnum = -1",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if not apow then apow = -1 end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "apow = -1",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "if not fpow then fpow = -1 end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "fpow = -1",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "local rv = procwrite(bdb, path, rnum, lmemb, nmemb, bnum, apow, fpow, opts, omode)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function runread()\r\n   local bdb = tokyocabinet.bdbnew()\r\n   local path = nil\r\n   local omode = 0\r\n   for i = 2, #arg do\r\n      if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      else\r\n         usage()\r\n      end\r\n   end\r\n   if not path then usage() end\r\n   local rv = procread(bdb, path, omode)\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "for i = 2, #arg do\r\n      if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      else\r\n         usage()\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 107,
    "text": "if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      else\r\n         usage()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "if arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "if not path then usage() end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "local rv = procread(bdb, path, omode)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function runremove()\r\n   local bdb = tokyocabinet.bdbnew()\r\n   local path = nil\r\n   local omode = 0\r\n   for i = 2, #arg do\r\n      if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      else\r\n         usage()\r\n      end\r\n   end\r\n   if not path then usage() end\r\n   local rv = procremove(bdb, path, omode)\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local rv = procremove(bdb, path, omode)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function runmisc()\r\n   local bdb = tokyocabinet.bdbnew()\r\n   local path = nil\r\n   local rnum = nil\r\n   local opts = 0\r\n   local omode = 0\r\n   for i = 2, #arg do\r\n      if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-tl\" then\r\n            opts = opts + bdb.TLARGE\r\n         elseif arg[i] == \"-td\" then\r\n            opts = opts + bdb.TDEFLATE\r\n         elseif arg[i] == \"-tb\" then\r\n            opts = opts + bdb.TBZIP\r\n         elseif arg[i] == \"-tt\" then\r\n            opts = opts + bdb.TTCBS\r\n         elseif arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end\r\n   end\r\n   if not path or not rnum or rnum < 1 then usage() end\r\n   local rv = procmisc(bdb, path, rnum, opts, omode)\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "for i = 2, #arg do\r\n      if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-tl\" then\r\n            opts = opts + bdb.TLARGE\r\n         elseif arg[i] == \"-td\" then\r\n            opts = opts + bdb.TDEFLATE\r\n         elseif arg[i] == \"-tb\" then\r\n            opts = opts + bdb.TBZIP\r\n         elseif arg[i] == \"-tt\" then\r\n            opts = opts + bdb.TTCBS\r\n         elseif arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 117,
    "text": "if not path and string.match(arg[i], \"^-\") then\r\n         if arg[i] == \"-tl\" then\r\n            opts = opts + bdb.TLARGE\r\n         elseif arg[i] == \"-td\" then\r\n            opts = opts + bdb.TDEFLATE\r\n         elseif arg[i] == \"-tb\" then\r\n            opts = opts + bdb.TBZIP\r\n         elseif arg[i] == \"-tt\" then\r\n            opts = opts + bdb.TTCBS\r\n         elseif arg[i] == \"-nl\" then\r\n            omode = omode + bdb.ONOLCK\r\n         elseif arg[i] == \"-nb\" then\r\n            omode = omode + bdb.OLCKNB\r\n         else\r\n            usage()\r\n         end\r\n      elseif not path then\r\n         path = arg[i]\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "local rv = procmisc(bdb, path, rnum, opts, omode)",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function procwrite(bdb, path, rnum, lmemb, nmemb, bnum, apow, fpow, opts, omode)\r\n   printf(\"<Writing Test>\\n  path=%s  rnum=%d  lmemb=%d  nmemb=%d  bnum=%d  apow=%d  fpow=%d\"\r\n          .. \"  opts=%d  omode=%d\\n\\n\",\r\n       path, rnum, lmemb, nmemb, bnum, apow, fpow, opts, omode, as)\r\n   local err = false\r\n   local stime = tokyocabinet.time()\r\n   if not bdb:tune(lmemb, nmemb, bnum, apow, fpow, opts) then\r\n      eprint(bdb, \"tune\")\r\n      err = true\r\n   end\r\n   if not bdb:open(path, bdb.OWRITER + bdb.OCREAT + bdb.OTRUNC + omode) then\r\n      eprint(bdb, \"open\")\r\n      err = true\r\n   end\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if as then\r\n         if not bdb:putasync(buf, buf) then\r\n            eprint(bdb, \"putasync\")\r\n            err = true\r\n            break\r\n         end\r\n      else\r\n         if not bdb:put(buf, buf) then\r\n            eprint(bdb, \"put\")\r\n            err = true\r\n            break\r\n         end\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"record number: %d\\n\", bdb:rnum())\r\n   printf(\"size: %d\\n\", bdb:fsiz())\r\n   if not bdb:close() then\r\n      eprint(bdb, \"close\")\r\n      err = true\r\n   end\r\n   printf(\"time: %.3f\\n\", tokyocabinet.time() - stime)\r\n   local rv = 0\r\n   if err then\r\n      printf(\"err\\n\\n\")\r\n      rv = 1\r\n   else\r\n      printf(\"ok\\n\\n\")\r\n   end\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "printf(\"<Writing Test>\\n  path=%s  rnum=%d  lmemb=%d  nmemb=%d  bnum=%d  apow=%d  fpow=%d\"\r\n          .. \"  opts=%d  omode=%d\\n\\n\",\r\n       path, rnum, lmemb, nmemb, bnum, apow, fpow, opts, omode, as)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "local err = false",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "local stime = tokyocabinet.time()",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "if not bdb:tune(lmemb, nmemb, bnum, apow, fpow, opts) then\r\n      eprint(bdb, \"tune\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "eprint(bdb, \"tune\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "err = true",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if not bdb:open(path, bdb.OWRITER + bdb.OCREAT + bdb.OTRUNC + omode) then\r\n      eprint(bdb, \"open\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "eprint(bdb, \"open\")",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if as then\r\n         if not bdb:putasync(buf, buf) then\r\n            eprint(bdb, \"putasync\")\r\n            err = true\r\n            break\r\n         end\r\n      else\r\n         if not bdb:put(buf, buf) then\r\n            eprint(bdb, \"put\")\r\n            err = true\r\n            break\r\n         end\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 130,
    "text": "local buf = string.format(\"%08d\", i)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if as then\r\n         if not bdb:putasync(buf, buf) then\r\n            eprint(bdb, \"putasync\")\r\n            err = true\r\n            break\r\n         end\r\n      else\r\n         if not bdb:put(buf, buf) then\r\n            eprint(bdb, \"put\")\r\n            err = true\r\n            break\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "if not bdb:putasync(buf, buf) then\r\n            eprint(bdb, \"putasync\")\r\n            err = true\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "eprint(bdb, \"putasync\")",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "if not bdb:put(buf, buf) then\r\n            eprint(bdb, \"put\")\r\n            err = true\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "eprint(bdb, \"put\")",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "printf(\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "printf(\" (%08d)\\n\", i)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "printf(\"record number: %d\\n\", bdb:rnum())",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "printf(\"size: %d\\n\", bdb:fsiz())",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "if not bdb:close() then\r\n      eprint(bdb, \"close\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "eprint(bdb, \"close\")",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "printf(\"time: %.3f\\n\", tokyocabinet.time() - stime)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "local rv = 0",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "if err then\r\n      printf(\"err\\n\\n\")\r\n      rv = 1\r\n   else\r\n      printf(\"ok\\n\\n\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "printf(\"err\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "rv = 1",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "printf(\"ok\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function procread(bdb, path, omode)\r\n   printf(\"<Reading Test>\\n  path=%s  omode=%d\\n\\n\", path, omode)\r\n   local err = false\r\n   local stime = tokyocabinet.time()\r\n   if not bdb:open(path, bdb.OREADER + omode) then\r\n      eprint(bdb, \"open\")\r\n      err = true\r\n   end\r\n   local rnum = bdb:rnum()\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if not bdb:get(buf) then\r\n         eprint(bdb, \"get\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"record number: %d\\n\", bdb:rnum())\r\n   printf(\"size: %d\\n\", bdb:fsiz())\r\n   if not bdb:close() then\r\n      eprint(bdb, \"close\")\r\n      err = true\r\n   end\r\n   printf(\"time: %.3f\\n\", tokyocabinet.time() - stime)\r\n   local rv = 0\r\n   if err then\r\n      printf(\"err\\n\\n\")\r\n      rv = 1\r\n   else\r\n      printf(\"ok\\n\\n\")\r\n   end\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "printf(\"<Reading Test>\\n  path=%s  omode=%d\\n\\n\", path, omode)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "if not bdb:open(path, bdb.OREADER + omode) then\r\n      eprint(bdb, \"open\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "local rnum = bdb:rnum()",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if not bdb:get(buf) then\r\n         eprint(bdb, \"get\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 156,
    "text": "if not bdb:get(buf) then\r\n         eprint(bdb, \"get\")\r\n         err = true\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "eprint(bdb, \"get\")",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function procremove(bdb, path, omode)\r\n   printf(\"<Removing Test>\\n  path=%s  omode=%d\\n\\n\", path, omode)\r\n   local err = false\r\n   local stime = tokyocabinet.time()\r\n   if not bdb:open(path, bdb.OWRITER + omode) then\r\n      eprint(bdb, \"open\")\r\n      err = true\r\n   end\r\n   local rnum = bdb:rnum()\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if not bdb:out(buf) then\r\n         eprint(bdb, \"out\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"record number: %d\\n\", bdb:rnum())\r\n   printf(\"size: %d\\n\", bdb:fsiz())\r\n   if not bdb:close() then\r\n      eprint(bdb, \"close\")\r\n      err = true\r\n   end\r\n   printf(\"time: %.3f\\n\", tokyocabinet.time() - stime)\r\n   local rv = 0\r\n   if err then\r\n      printf(\"err\\n\\n\")\r\n      rv = 1\r\n   else\r\n      printf(\"ok\\n\\n\")\r\n   end\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "printf(\"<Removing Test>\\n  path=%s  omode=%d\\n\\n\", path, omode)",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "if not bdb:open(path, bdb.OWRITER + omode) then\r\n      eprint(bdb, \"open\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if not bdb:out(buf) then\r\n         eprint(bdb, \"out\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 163,
    "text": "if not bdb:out(buf) then\r\n         eprint(bdb, \"out\")\r\n         err = true\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "eprint(bdb, \"out\")",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function procmisc(bdb, path, rnum, opts, omode)\r\n   printf(\"<Miscellaneous Test>\\n  path=%s  rnum=%d  opts=%d  omode=%d\\n\\n\",\r\n          path, rnum, opts, omode)\r\n   local err = false\r\n   local stime = tokyocabinet.time()\r\n   if not bdb:tune(10, 10, rnum / 50, 2, -1, opts) then\r\n      eprint(bdb, \"tune\")\r\n      err = true\r\n   end\r\n   if not bdb:setcache(128, 256) then\r\n      eprint(bdb, \"setcache\")\r\n      err = true\r\n   end\r\n   if not bdb:setxmsiz(rnum * 4) then\r\n      eprint(bdb, \"setxmsiz\")\r\n      err = true\r\n   end\r\n   if not bdb:setdfunit(8) then\r\n      eprint(bdb, \"setdfunit\")\r\n      err = true\r\n   end\r\n   if not bdb:open(path, bdb.OWRITER + bdb.OCREAT + bdb.OTRUNC + omode) then\r\n      eprint(bdb, \"open\")\r\n      err = true\r\n   end\r\n   printf(\"writing:\\n\")\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if not bdb:put(buf, buf) then\r\n         eprint(bdb, \"put\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"reading:\\n\")\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if not bdb:get(buf) then\r\n         eprint(bdb, \"get\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"removing:\\n\")\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if math.random(2) == 1 and not bdb:out(buf) then\r\n         eprint(bdb, \"out\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"checking cursor:\\n\")\r\n   local cur = tokyocabinet.bdbcurnew(bdb)\r\n   if not cur:first() and bdb:ecode() ~= bdb.ENOREC then\r\n      eprint(bdb, \"cur:first\")\r\n      err = true\r\n   end\r\n   local inum = 0\r\n   while true do\r\n      local key = cur:key()\r\n      if not key then break end\r\n      local value = cur:val()\r\n      if not value then\r\n         eprint(bdb, \"cur:val\")\r\n         err = true\r\n      end\r\n      cur:next()\r\n      if inum > 0 and rnum > 250 and inum % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if inum == rnum or inum % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", inum)\r\n         end\r\n      end\r\n      inum = inum + 1\r\n   end\r\n   if rnum > 250 then printf(\" (%08d)\\n\", inum) end\r\n   if bdb:ecode() ~= bdb.ENOREC or inum ~= bdb:rnum() then\r\n      eprint(bdb, \"(validation)\")\r\n      err = true\r\n   end\r\n   local keys = bdb:fwmkeys(\"0\", 10)\r\n   if bdb:rnum() >= 10 and #keys ~= 10 then\r\n      eprint(bdb, \"fwmkeys\")\r\n      err = true\r\n   end\r\n   printf(\"checking counting:\\n\")\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"[%d]\", math.random(rnum))\r\n      if math.random(2) == 1 then\r\n         if not bdb:addint(buf, 1) and bdb:ecode() ~= bdb.EKEEP then\r\n            eprint(bdb, \"addint\")\r\n            err = true\r\n            break\r\n         end\r\n      else\r\n         if not bdb:adddouble(buf, 1) and bdb:ecode() ~= bdb.EKEEP then\r\n            eprint(bdb, \"adddouble\")\r\n            err = true\r\n            break\r\n         end\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   if not bdb:sync() then\r\n      eprint(bdb, \"sync\")\r\n      err = true\r\n   end\r\n   if not bdb:optimize() then\r\n      eprint(bdb, \"optimize\")\r\n      err = true\r\n   end\r\n   local npath = path .. \"-tmp\"\r\n   if not bdb:copy(npath) then\r\n      eprint(bdb, \"copy\")\r\n      err = true\r\n   end\r\n   os.remove(npath)\r\n   if not bdb:vanish() then\r\n      eprint(bdb, \"vanish\")\r\n      err = true\r\n   end\r\n   printf(\"random writing:\\n\")\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", math.random(i))\r\n      if not bdb:putdup(buf, buf) then\r\n         eprint(bdb, \"adddouble\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"cursor updating:\\n\")\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", math.random(i))\r\n      cur:jump(buf)\r\n      for j = 1, 10 do\r\n         local key = cur:key()\r\n         if not key then break end\r\n         if math.random(3) == 1 then\r\n            cur:out()\r\n         else\r\n            local cpmode = cur.CPCURRENT + math.random(3)\r\n            cur:put(buf, cpmode)\r\n         end\r\n         cur:next()\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   if not bdb:tranbegin() then\r\n      eprint(bdb, \"tranbegin\")\r\n      err = true\r\n   end\r\n   bdb:putdup(\"::1\", \"1\")\r\n   bdb:putdup(\"::2\", \"2a\")\r\n   bdb:putdup(\"::2\", \"2b\")\r\n   bdb:putdup(\"::3\", \"3\")\r\n   cur:jump(\"::2\")\r\n   cur:put(\"2A\")\r\n   cur:put(\"2-\", cur.CPBEFORE)\r\n   cur:put(\"2+\")\r\n   cur:next()\r\n   cur:next()\r\n   cur:put(\"mid\", cur.CPBEFORE)\r\n   cur:put(\"2C\", cur.CPAFTER)\r\n   cur:prev()\r\n   cur:out()\r\n   local vals = bdb:getlist(\"::2\")\r\n   if not vals or #vals ~= 4 then\r\n      eprint(bdb, \"getlist\")\r\n      err = true\r\n   end\r\n   local pvals = { \"hop\", \"step\", \"jump\" }\r\n   if not bdb:putlist(\"::1\", pvals) then\r\n      eprint(bdb, \"putlist\")\r\n      err = true\r\n   end\r\n   if not bdb:outlist(\"::1\") then\r\n      eprint(bdb, \"outlist\")\r\n      err = true\r\n   end\r\n   if not bdb:trancommit() then\r\n      eprint(bdb, \"trancommit\")\r\n      err = true\r\n   end\r\n   if not bdb:tranbegin() or not bdb:tranabort() then\r\n      eprint(bdb, \"tranbegin\")\r\n      err = true\r\n   end\r\n   printf(\"checking table-like updating:\\n\")\r\n   for i = 1, rnum do\r\n      local buf = string.format(\"[%d]\", math.random(rnum))\r\n      if math.random(2) == 1 then\r\n         bdb[buf] = buf\r\n      else\r\n         local value = bdb[buf]\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"checking foreach method:\\n\")\r\n   local cnt = 0\r\n   function iterfunc(key, value)\r\n      cnt = cnt + 1\r\n      if rnum > 250 and cnt % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if cnt == rnum or cnt % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", cnt)\r\n         end\r\n      end\r\n      return true\r\n   end\r\n   bdb:foreach(iterfunc)\r\n   if rnum > 250 then printf(\" (%08d)\\n\", cnt) end\r\n   if cnt ~= bdb:rnum() then\r\n      eprint(bdb, \"(validation)\")\r\n      err = true\r\n   end\r\n   printf(\"record number: %d\\n\", bdb:rnum())\r\n   printf(\"size: %d\\n\", bdb:fsiz())\r\n   if not bdb:close() then\r\n      eprint(bdb, \"close\")\r\n      err = true\r\n   end\r\n   printf(\"time: %.3f\\n\", tokyocabinet.time() - stime)\r\n   local rv = 0\r\n   if err then\r\n      printf(\"err\\n\\n\")\r\n      rv = 1\r\n   else\r\n      printf(\"ok\\n\\n\")\r\n   end\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "printf(\"<Miscellaneous Test>\\n  path=%s  rnum=%d  opts=%d  omode=%d\\n\\n\",\r\n          path, rnum, opts, omode)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "if not bdb:tune(10, 10, rnum / 50, 2, -1, opts) then\r\n      eprint(bdb, \"tune\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "if not bdb:setcache(128, 256) then\r\n      eprint(bdb, \"setcache\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "eprint(bdb, \"setcache\")",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "if not bdb:setxmsiz(rnum * 4) then\r\n      eprint(bdb, \"setxmsiz\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "eprint(bdb, \"setxmsiz\")",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "if not bdb:setdfunit(8) then\r\n      eprint(bdb, \"setdfunit\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "eprint(bdb, \"setdfunit\")",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "printf(\"writing:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if not bdb:put(buf, buf) then\r\n         eprint(bdb, \"put\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 177,
    "text": "if not bdb:put(buf, buf) then\r\n         eprint(bdb, \"put\")\r\n         err = true\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "printf(\"reading:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "printf(\"removing:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", i)\r\n      if math.random(2) == 1 and not bdb:out(buf) then\r\n         eprint(bdb, \"out\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 181,
    "text": "if math.random(2) == 1 and not bdb:out(buf) then\r\n         eprint(bdb, \"out\")\r\n         err = true\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "printf(\"checking cursor:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "local cur = tokyocabinet.bdbcurnew(bdb)",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "if not cur:first() and bdb:ecode() ~= bdb.ENOREC then\r\n      eprint(bdb, \"cur:first\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "eprint(bdb, \"cur:first\")",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "local inum = 0",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "while true do\r\n      local key = cur:key()\r\n      if not key then break end\r\n      local value = cur:val()\r\n      if not value then\r\n         eprint(bdb, \"cur:val\")\r\n         err = true\r\n      end\r\n      cur:next()\r\n      if inum > 0 and rnum > 250 and inum % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if inum == rnum or inum % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", inum)\r\n         end\r\n      end\r\n      inum = inum + 1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 188,
    "text": "local key = cur:key()",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "if not key then break end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "local value = cur:val()",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "if not value then\r\n         eprint(bdb, \"cur:val\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "eprint(bdb, \"cur:val\")",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "cur:next()",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "if inum > 0 and rnum > 250 and inum % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if inum == rnum or inum % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", inum)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "if inum == rnum or inum % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", inum)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "printf(\" (%08d)\\n\", inum)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "inum = inum + 1",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "if rnum > 250 then printf(\" (%08d)\\n\", inum) end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "if bdb:ecode() ~= bdb.ENOREC or inum ~= bdb:rnum() then\r\n      eprint(bdb, \"(validation)\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "eprint(bdb, \"(validation)\")",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "local keys = bdb:fwmkeys(\"0\", 10)",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if bdb:rnum() >= 10 and #keys ~= 10 then\r\n      eprint(bdb, \"fwmkeys\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "eprint(bdb, \"fwmkeys\")",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "printf(\"checking counting:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"[%d]\", math.random(rnum))\r\n      if math.random(2) == 1 then\r\n         if not bdb:addint(buf, 1) and bdb:ecode() ~= bdb.EKEEP then\r\n            eprint(bdb, \"addint\")\r\n            err = true\r\n            break\r\n         end\r\n      else\r\n         if not bdb:adddouble(buf, 1) and bdb:ecode() ~= bdb.EKEEP then\r\n            eprint(bdb, \"adddouble\")\r\n            err = true\r\n            break\r\n         end\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 206,
    "text": "local buf = string.format(\"[%d]\", math.random(rnum))",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "if math.random(2) == 1 then\r\n         if not bdb:addint(buf, 1) and bdb:ecode() ~= bdb.EKEEP then\r\n            eprint(bdb, \"addint\")\r\n            err = true\r\n            break\r\n         end\r\n      else\r\n         if not bdb:adddouble(buf, 1) and bdb:ecode() ~= bdb.EKEEP then\r\n            eprint(bdb, \"adddouble\")\r\n            err = true\r\n            break\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "if not bdb:addint(buf, 1) and bdb:ecode() ~= bdb.EKEEP then\r\n            eprint(bdb, \"addint\")\r\n            err = true\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "eprint(bdb, \"addint\")",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "if not bdb:adddouble(buf, 1) and bdb:ecode() ~= bdb.EKEEP then\r\n            eprint(bdb, \"adddouble\")\r\n            err = true\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "eprint(bdb, \"adddouble\")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "if not bdb:sync() then\r\n      eprint(bdb, \"sync\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "eprint(bdb, \"sync\")",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "if not bdb:optimize() then\r\n      eprint(bdb, \"optimize\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "eprint(bdb, \"optimize\")",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "local npath = path .. \"-tmp\"",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "if not bdb:copy(npath) then\r\n      eprint(bdb, \"copy\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "eprint(bdb, \"copy\")",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "os.remove(npath)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "if not bdb:vanish() then\r\n      eprint(bdb, \"vanish\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "eprint(bdb, \"vanish\")",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "printf(\"random writing:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", math.random(i))\r\n      if not bdb:putdup(buf, buf) then\r\n         eprint(bdb, \"adddouble\")\r\n         err = true\r\n         break\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 224,
    "text": "local buf = string.format(\"%08d\", math.random(i))",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "if not bdb:putdup(buf, buf) then\r\n         eprint(bdb, \"adddouble\")\r\n         err = true\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "printf(\"cursor updating:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"%08d\", math.random(i))\r\n      cur:jump(buf)\r\n      for j = 1, 10 do\r\n         local key = cur:key()\r\n         if not key then break end\r\n         if math.random(3) == 1 then\r\n            cur:out()\r\n         else\r\n            local cpmode = cur.CPCURRENT + math.random(3)\r\n            cur:put(buf, cpmode)\r\n         end\r\n         cur:next()\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 228,
    "text": "cur:jump(buf)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "for j = 1, 10 do\r\n         local key = cur:key()\r\n         if not key then break end\r\n         if math.random(3) == 1 then\r\n            cur:out()\r\n         else\r\n            local cpmode = cur.CPCURRENT + math.random(3)\r\n            cur:put(buf, cpmode)\r\n         end\r\n         cur:next()\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 230,
    "text": "if math.random(3) == 1 then\r\n            cur:out()\r\n         else\r\n            local cpmode = cur.CPCURRENT + math.random(3)\r\n            cur:put(buf, cpmode)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "cur:out()",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "local cpmode = cur.CPCURRENT + math.random(3)",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "cur:put(buf, cpmode)",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "if not bdb:tranbegin() then\r\n      eprint(bdb, \"tranbegin\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 235,
    "text": "eprint(bdb, \"tranbegin\")",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "bdb:putdup(\"::1\", \"1\")",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "bdb:putdup(\"::2\", \"2a\")",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "bdb:putdup(\"::2\", \"2b\")",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "bdb:putdup(\"::3\", \"3\")",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "cur:jump(\"::2\")",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "cur:put(\"2A\")",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "cur:put(\"2-\", cur.CPBEFORE)",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "cur:put(\"2+\")",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "cur:put(\"mid\", cur.CPBEFORE)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "cur:put(\"2C\", cur.CPAFTER)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "cur:prev()",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "local vals = bdb:getlist(\"::2\")",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "if not vals or #vals ~= 4 then\r\n      eprint(bdb, \"getlist\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "eprint(bdb, \"getlist\")",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "local pvals = { \"hop\", \"step\", \"jump\" }",
    "type": "statement:localassign"
  }, {
    "id": 251,
    "text": "if not bdb:putlist(\"::1\", pvals) then\r\n      eprint(bdb, \"putlist\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "eprint(bdb, \"putlist\")",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "if not bdb:outlist(\"::1\") then\r\n      eprint(bdb, \"outlist\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 254,
    "text": "eprint(bdb, \"outlist\")",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "if not bdb:trancommit() then\r\n      eprint(bdb, \"trancommit\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "eprint(bdb, \"trancommit\")",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "if not bdb:tranbegin() or not bdb:tranabort() then\r\n      eprint(bdb, \"tranbegin\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "printf(\"checking table-like updating:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "for i = 1, rnum do\r\n      local buf = string.format(\"[%d]\", math.random(rnum))\r\n      if math.random(2) == 1 then\r\n         bdb[buf] = buf\r\n      else\r\n         local value = bdb[buf]\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 260,
    "text": "if math.random(2) == 1 then\r\n         bdb[buf] = buf\r\n      else\r\n         local value = bdb[buf]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "bdb[buf] = buf",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "local value = bdb[buf]",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "printf(\"checking foreach method:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "local cnt = 0",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "function iterfunc(key, value)\r\n      cnt = cnt + 1\r\n      if rnum > 250 and cnt % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if cnt == rnum or cnt % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", cnt)\r\n         end\r\n      end\r\n      return true\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 266,
    "text": "cnt = cnt + 1",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "if rnum > 250 and cnt % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if cnt == rnum or cnt % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", cnt)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "if cnt == rnum or cnt % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", cnt)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "printf(\" (%08d)\\n\", cnt)",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "bdb:foreach(iterfunc)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "if rnum > 250 then printf(\" (%08d)\\n\", cnt) end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "if cnt ~= bdb:rnum() then\r\n      eprint(bdb, \"(validation)\")\r\n      err = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "function iterfunc(key, value)\r\n      cnt = cnt + 1\r\n      if rnum > 250 and cnt % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if cnt == rnum or cnt % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", cnt)\r\n         end\r\n      end\r\n      return true\r\n   end",
    "type": "function"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "",
    "type": "function container"
  }, {
    "id": 277,
    "text": "bdbcurnew",
    "type": "global function"
  }, {
    "id": 278,
    "text": "bdbnew",
    "type": "global function"
  }, {
    "id": 279,
    "text": "time",
    "type": "global function"
  }, {
    "id": 280,
    "text": "format",
    "type": "global function"
  }, {
    "id": 281,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 282,
    "text": "randomseed",
    "type": "global function"
  }, {
    "id": 283,
    "text": "type",
    "type": "global function"
  }, {
    "id": 284,
    "text": "time",
    "type": "global function"
  }, {
    "id": 285,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 286,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 287,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 288,
    "text": "random",
    "type": "global function"
  }, {
    "id": 289,
    "text": "match",
    "type": "global function"
  }, {
    "id": 290,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 291,
    "text": "require",
    "type": "global function"
  }, {
    "id": 292,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 293,
    "text": "",
    "type": "global variable"
  }, {
    "id": 294,
    "text": "",
    "type": "variable container"
  }, {
    "id": 295,
    "text": "",
    "type": "require container"
  } ]
}