{
  "_filename": "tcutest.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-tokyocabinet/tcutest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 18,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 18,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 18,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 18,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 18,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 18,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 18,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 18,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 18,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 18,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 18,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 18,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 18,
    "label": "has",
    "to": 51
  }, {
    "from": 18,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 56,
    "label": "has",
    "to": 9
  }, {
    "from": 56,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 71
  }, {
    "from": 64,
    "label": "has",
    "to": 72
  }, {
    "from": 64,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 73,
    "label": "has",
    "to": 83
  }, {
    "from": 73,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 73,
    "label": "has",
    "to": 86
  }, {
    "from": 73,
    "label": "has",
    "to": 87
  }, {
    "from": 73,
    "label": "has",
    "to": 88
  }, {
    "from": 73,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 91
  }, {
    "from": 73,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 94
  }, {
    "from": 73,
    "label": "has",
    "to": 95
  }, {
    "from": 73,
    "label": "has",
    "to": 96
  }, {
    "from": 73,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 101
  }, {
    "from": 73,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 104
  }, {
    "from": 73,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 107
  }, {
    "from": 73,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 111
  }, {
    "from": 73,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 114
  }, {
    "from": 73,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 113
  }, {
    "from": 115,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 116
  }, {
    "from": 73,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 73,
    "label": "has",
    "to": 119
  }, {
    "from": 73,
    "label": "has",
    "to": 120
  }, {
    "from": 73,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 123
  }, {
    "from": 73,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 126
  }, {
    "from": 73,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 73,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 135,
    "label": "has",
    "to": 140
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 135,
    "label": "has",
    "to": 143
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 135,
    "label": "has",
    "to": 146
  }, {
    "from": 135,
    "label": "has",
    "to": 147
  }, {
    "from": 135,
    "label": "has",
    "to": 148
  }, {
    "from": 135,
    "label": "has",
    "to": 149
  }, {
    "from": 135,
    "label": "has",
    "to": 150
  }, {
    "from": 135,
    "label": "has",
    "to": 151
  }, {
    "from": 73,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 64,
    "label": "has",
    "to": 156
  }, {
    "from": 64,
    "label": "has",
    "to": 157
  }, {
    "from": 64,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 64,
    "label": "has",
    "to": 9
  }, {
    "from": 64,
    "label": "has",
    "to": 162
  }, {
    "from": 18,
    "label": "calls",
    "to": 180
  }, {
    "from": 11,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 64,
    "label": "calls",
    "to": 164
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 18,
    "label": "calls",
    "to": 188
  }, {
    "from": 64,
    "label": "calls",
    "to": 188
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 64,
    "label": "calls",
    "to": 53
  }, {
    "from": 56,
    "label": "calls",
    "to": 193
  }, {
    "from": 64,
    "label": "calls",
    "to": 177
  }, {
    "from": 64,
    "label": "calls",
    "to": 176
  }, {
    "from": 64,
    "label": "calls",
    "to": 175
  }, {
    "from": 163,
    "label": "calls",
    "to": 185
  }, {
    "from": 11,
    "label": "calls",
    "to": 18
  }, {
    "from": 11,
    "label": "calls",
    "to": 18
  }, {
    "from": 11,
    "label": "calls",
    "to": 18
  }, {
    "from": 11,
    "label": "calls",
    "to": 18
  }, {
    "from": 11,
    "label": "calls",
    "to": 18
  }, {
    "from": 53,
    "label": "calls",
    "to": 18
  }, {
    "from": 64,
    "label": "calls",
    "to": 18
  }, {
    "from": 64,
    "label": "calls",
    "to": 18
  }, {
    "from": 64,
    "label": "calls",
    "to": 18
  }, {
    "from": 64,
    "label": "calls",
    "to": 18
  }, {
    "from": 64,
    "label": "calls",
    "to": 18
  }, {
    "from": 64,
    "label": "calls",
    "to": 18
  }, {
    "from": 64,
    "label": "calls",
    "to": 18
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 56,
    "label": "calls",
    "to": 11
  }, {
    "from": 56,
    "label": "calls",
    "to": 11
  }, {
    "from": 56,
    "label": "calls",
    "to": 11
  }, {
    "from": 163,
    "label": "calls",
    "to": 191
  }, {
    "from": 56,
    "label": "calls",
    "to": 64
  }, {
    "from": 64,
    "label": "calls",
    "to": 171
  }, {
    "from": 64,
    "label": "calls",
    "to": 171
  }, {
    "from": 64,
    "label": "calls",
    "to": 171
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 189
  }, {
    "from": 64,
    "label": "calls",
    "to": 166
  }, {
    "from": 64,
    "label": "calls",
    "to": 179
  }, {
    "from": 64,
    "label": "calls",
    "to": 168
  }, {
    "from": 64,
    "label": "calls",
    "to": 168
  }, {
    "from": 64,
    "label": "calls",
    "to": 168
  }, {
    "from": 163,
    "label": "calls",
    "to": 2
  }, {
    "from": 64,
    "label": "calls",
    "to": 182
  }, {
    "from": 163,
    "label": "calls",
    "to": 183
  }, {
    "from": 64,
    "label": "calls",
    "to": 178
  }, {
    "from": 64,
    "label": "calls",
    "to": 178
  }, {
    "from": 64,
    "label": "calls",
    "to": 178
  }, {
    "from": 64,
    "label": "calls",
    "to": 173
  }, {
    "from": 64,
    "label": "calls",
    "to": 187
  }, {
    "from": 64,
    "label": "calls",
    "to": 187
  }, {
    "from": 64,
    "label": "calls",
    "to": 187
  }, {
    "from": 64,
    "label": "calls",
    "to": 187
  }, {
    "from": 64,
    "label": "calls",
    "to": 167
  }, {
    "from": 64,
    "label": "calls",
    "to": 167
  }, {
    "from": 64,
    "label": "calls",
    "to": 172
  }, {
    "from": 64,
    "label": "calls",
    "to": 174
  }, {
    "from": 64,
    "label": "calls",
    "to": 174
  }, {
    "from": 64,
    "label": "calls",
    "to": 165
  }, {
    "from": 64,
    "label": "calls",
    "to": 170
  }, {
    "from": 64,
    "label": "calls",
    "to": 170
  }, {
    "from": 56,
    "label": "calls",
    "to": 190
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 18,
    "label": "calls",
    "to": 184
  }, {
    "from": 163,
    "label": "calls",
    "to": 192
  }, {
    "from": 64,
    "label": "calls",
    "to": 169
  }, {
    "from": 64,
    "label": "calls",
    "to": 169
  }, {
    "from": 64,
    "label": "calls",
    "to": 169
  }, {
    "from": 2,
    "label": "calls",
    "to": 186
  }, {
    "from": 1,
    "label": "contains",
    "to": 163
  }, {
    "from": 163,
    "label": "declares",
    "to": 2
  }, {
    "from": 163,
    "label": "declares",
    "to": 11
  }, {
    "from": 163,
    "label": "declares",
    "to": 18
  }, {
    "from": 163,
    "label": "declares",
    "to": 53
  }, {
    "from": 163,
    "label": "declares",
    "to": 56
  }, {
    "from": 163,
    "label": "declares",
    "to": 64
  }, {
    "from": 1,
    "label": "contains",
    "to": 195
  }, {
    "from": 1,
    "label": "contains",
    "to": 196
  }, {
    "from": 196,
    "label": "initializes",
    "to": 194
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tcutest",
    "type": "module"
  }, {
    "id": 2,
    "text": "function main()\r\n   if #arg < 1 then usage() end\r\n   local rv\r\n   if arg[1] == \"misc\" then\r\n      rv = runmisc()\r\n   else\r\n      usage()\r\n   end\r\n   collectgarbage(\"collect\")\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if #arg < 1 then usage() end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "usage()",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local rv",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if arg[1] == \"misc\" then\r\n      rv = runmisc()\r\n   else\r\n      usage()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "rv = runmisc()",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function usage()\r\n   printf(\"%s: test cases of the utility API\\n\", progname)\r\n   printf(\"\\n\")\r\n   printf(\"usage:\\n\")\r\n   printf(\"  %s misc rnum\\n\", progname)\r\n   printf(\"\\n\")\r\n   os.exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "printf(\"%s: test cases of the utility API\\n\", progname)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "printf(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "printf(\"usage:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "printf(\"  %s misc rnum\\n\", progname)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function printf(format, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)\r\n   if type(a) ~= \"number\" then a = tostring(a) end\r\n   if type(b) ~= \"number\" then b = tostring(b) end\r\n   if type(c) ~= \"number\" then c = tostring(c) end\r\n   if type(d) ~= \"number\" then d = tostring(d) end\r\n   if type(e) ~= \"number\" then e = tostring(e) end\r\n   if type(f) ~= \"number\" then f = tostring(f) end\r\n   if type(g) ~= \"number\" then g = tostring(g) end\r\n   if type(h) ~= \"number\" then h = tostring(h) end\r\n   if type(i) ~= \"number\" then i = tostring(i) end\r\n   if type(j) ~= \"number\" then j = tostring(j) end\r\n   if type(k) ~= \"number\" then k = tostring(k) end\r\n   if type(l) ~= \"number\" then l = tostring(l) end\r\n   if type(m) ~= \"number\" then m = tostring(m) end\r\n   if type(n) ~= \"number\" then n = tostring(n) end\r\n   if type(o) ~= \"number\" then o = tostring(o) end\r\n   if type(p) ~= \"number\" then p = tostring(p) end\r\n   io.stdout:write(string.format(format, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p))\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if type(a) ~= \"number\" then a = tostring(a) end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "a = tostring(a)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if type(b) ~= \"number\" then b = tostring(b) end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "b = tostring(b)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if type(c) ~= \"number\" then c = tostring(c) end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "c = tostring(c)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if type(d) ~= \"number\" then d = tostring(d) end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "d = tostring(d)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if type(e) ~= \"number\" then e = tostring(e) end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "e = tostring(e)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if type(f) ~= \"number\" then f = tostring(f) end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "f = tostring(f)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if type(g) ~= \"number\" then g = tostring(g) end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "g = tostring(g)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if type(h) ~= \"number\" then h = tostring(h) end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "h = tostring(h)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if type(i) ~= \"number\" then i = tostring(i) end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "i = tostring(i)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if type(j) ~= \"number\" then j = tostring(j) end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "j = tostring(j)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if type(k) ~= \"number\" then k = tostring(k) end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "k = tostring(k)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if type(l) ~= \"number\" then l = tostring(l) end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "l = tostring(l)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if type(m) ~= \"number\" then m = tostring(m) end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "m = tostring(m)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if type(n) ~= \"number\" then n = tostring(n) end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "n = tostring(n)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if type(o) ~= \"number\" then o = tostring(o) end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "o = tostring(o)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if type(p) ~= \"number\" then p = tostring(p) end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "p = tostring(p)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "io.stdout:write(string.format(format, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function eprint(func)\r\n   printf(\"%s: error: %s\\n\", progname, func)\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "printf(\"%s: error: %s\\n\", progname, func)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function runmisc()\r\n   local rnum = nil\r\n   for i = 2, #arg do\r\n      if not rnum and string.match(arg[i], \"^-\") then\r\n         usage()\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end\r\n   end\r\n   if not rnum or rnum < 1 then usage() end\r\n   local rv = procmisc(rnum)\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local rnum = nil",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "for i = 2, #arg do\r\n      if not rnum and string.match(arg[i], \"^-\") then\r\n         usage()\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 59,
    "text": "if not rnum and string.match(arg[i], \"^-\") then\r\n         usage()\r\n      elseif not rnum then\r\n         rnum = tonumber(arg[i])\r\n      else\r\n         usage()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "rnum = tonumber(arg[i])",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if not rnum or rnum < 1 then usage() end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "local rv = procmisc(rnum)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function procmisc(rnum)\r\n   printf(\"<Miscellaneous Test>\\n  rnum=%d\\n\\n\", rnum)\r\n   local err = false\r\n   local stime = tokyocabinet.time()\r\n   printf(\"checking:\\n\")\r\n   local format = \"cCsSiIlLfdnNMwc5C5s5S5i5I5l5L5f5d5n5N5M5w*\"\r\n   local cmodes = { \"url\", \"base\", \"hex\", \"pack\", \"tcbs\", \"deflate\", \"gzip\", \"bzip\", \"xml\" }\r\n   local hmodes = { \"md5\", \"md5raw\", \"crc32\" }\r\n   local bitops = { \"and\", \"or\", \"xor\", \"not\", \"left\", \"right\" }\r\n   for i = 1, rnum do\r\n      tokyocabinet.tablenew(math.random(1000), math.random(1000))\r\n      if tokyocabinet.time() < 1 then\r\n         eprint(\"time\")\r\n         err = true\r\n      end\r\n      if math.random(100) == 1 then\r\n         tokyocabinet.sleep(10 / rnum)\r\n      end\r\n      local len = math.random(256) - 1\r\n      if math.random(rnum / 5 + 1) == 1 then\r\n         len = len * math.random(512)\r\n      end\r\n      local ary = {}\r\n      for j = 1, len do\r\n         ary[j] = math.random() * 4294967296 - math.random() * 4294967296\r\n      end\r\n      local off = math.random(#format - 3)\r\n      local myfmt = string.sub(format, off, off + math.random(#format / 3))\r\n      local str = tokyocabinet.pack(myfmt, ary)\r\n      if not str then\r\n         eprint(\"pack\")\r\n         err = true\r\n      end\r\n      local nary = tokyocabinet.unpack(myfmt, str)\r\n      if not nary then\r\n         eprint(\"unpack\")\r\n         err = true\r\n      end\r\n      local cmode = cmodes[math.random(#cmodes)]\r\n      local enc = tokyocabinet.codec(cmode, str)\r\n      local dec = tokyocabinet.codec(\"~\" .. cmode, enc)\r\n      if not enc or not dec then\r\n         eprint(\"codec\")\r\n         err = true\r\n      end\r\n      if dec ~= str and cmode ~= \"xml\" then\r\n         eprint(\"(validation:\" .. cmode .. \")\")\r\n         err = true\r\n      end\r\n      local hmode = hmodes[math.random(#hmodes)]\r\n      if not tokyocabinet.hash(hmode, str) then\r\n         eprint(\"hash\")\r\n         err = true\r\n      end\r\n      local bitop = bitops[math.random(#bitops)]\r\n      if not tokyocabinet.bit(bitop, math.random(0x7fffffff), math.random(0x7fffffff)) then\r\n         eprint(\"bit\")\r\n         err = true\r\n      end\r\n      local mstr = math.random(rnum);\r\n      if tokyocabinet.strstr(mstr, mstr) ~= 1 then\r\n         eprint(\"strstr\")\r\n         err = true\r\n      end\r\n      if not tokyocabinet.strstr(mstr, mstr, \"hoge\") then\r\n         eprint(\"strstr\")\r\n         err = true\r\n      end\r\n      local rstr = math.random(rnum);\r\n      if not tokyocabinet.regex(rstr, rstr) then\r\n         eprint(\"regex\")\r\n         err = true\r\n      end\r\n      local ralt = tostring(math.random(rnum))\r\n      if tokyocabinet.regex(rstr, \"^\" .. rstr .. \"$\", ralt) ~= ralt then\r\n         eprint(\"regex\")\r\n         err = true\r\n      end\r\n      local ucs = {}\r\n      for j = 1, len do\r\n         table.insert(ucs, 0x3042 + math.random(50) - 1)\r\n      end\r\n      local utf = tokyocabinet.ucs(ucs)\r\n      local udec = tokyocabinet.ucs(utf)\r\n      if #udec ~= #ucs then\r\n         eprint(\"(validation:ucs:enc)\")\r\n         err = true\r\n      end\r\n      local uenc = tokyocabinet.ucs(udec)\r\n      if utf ~= uenc then\r\n         eprint(\"(validation:ucs:dec)\")\r\n         err = true\r\n      end\r\n      local umode = true\r\n      if math.random(2) == 1 then\r\n         umode = false\r\n      end\r\n      if tokyocabinet.dist(utf, uenc, umode) ~= 0 then\r\n         eprint(\"(validation:dist)\")\r\n         err = true\r\n      end\r\n      if not tokyocabinet.stat(\"/\") then\r\n         eprint(\"stat\")\r\n         err = true\r\n      end\r\n      if not tokyocabinet.glob(\"/\") then\r\n         eprint(\"glob\")\r\n         err = true\r\n      end\r\n      if i % 100 == 1 then\r\n         local t1 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t1, math.random(10))\r\n         end\r\n         local t2 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t2, math.random(10))\r\n         end\r\n         local t3 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t3, math.random(10))\r\n         end\r\n         tokyocabinet.isect(t1)\r\n         tokyocabinet.isect(t1, t2)\r\n         tokyocabinet.isect({t1, t2, t3})\r\n         tokyocabinet.union(t1)\r\n         tokyocabinet.union(t1, t2)\r\n         tokyocabinet.union({t1, t2, t3})\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end\r\n   printf(\"time: %.3f\\n\", tokyocabinet.time() - stime)\r\n   local rv = 0\r\n   if err then\r\n      printf(\"err\\n\\n\")\r\n      rv = 1\r\n   else\r\n      printf(\"ok\\n\\n\")\r\n   end\r\n   return rv\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "printf(\"<Miscellaneous Test>\\n  rnum=%d\\n\\n\", rnum)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local err = false",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local stime = tokyocabinet.time()",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "printf(\"checking:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local format = \"cCsSiIlLfdnNMwc5C5s5S5i5I5l5L5f5d5n5N5M5w*\"",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local cmodes = { \"url\", \"base\", \"hex\", \"pack\", \"tcbs\", \"deflate\", \"gzip\", \"bzip\", \"xml\" }",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local hmodes = { \"md5\", \"md5raw\", \"crc32\" }",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local bitops = { \"and\", \"or\", \"xor\", \"not\", \"left\", \"right\" }",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "for i = 1, rnum do\r\n      tokyocabinet.tablenew(math.random(1000), math.random(1000))\r\n      if tokyocabinet.time() < 1 then\r\n         eprint(\"time\")\r\n         err = true\r\n      end\r\n      if math.random(100) == 1 then\r\n         tokyocabinet.sleep(10 / rnum)\r\n      end\r\n      local len = math.random(256) - 1\r\n      if math.random(rnum / 5 + 1) == 1 then\r\n         len = len * math.random(512)\r\n      end\r\n      local ary = {}\r\n      for j = 1, len do\r\n         ary[j] = math.random() * 4294967296 - math.random() * 4294967296\r\n      end\r\n      local off = math.random(#format - 3)\r\n      local myfmt = string.sub(format, off, off + math.random(#format / 3))\r\n      local str = tokyocabinet.pack(myfmt, ary)\r\n      if not str then\r\n         eprint(\"pack\")\r\n         err = true\r\n      end\r\n      local nary = tokyocabinet.unpack(myfmt, str)\r\n      if not nary then\r\n         eprint(\"unpack\")\r\n         err = true\r\n      end\r\n      local cmode = cmodes[math.random(#cmodes)]\r\n      local enc = tokyocabinet.codec(cmode, str)\r\n      local dec = tokyocabinet.codec(\"~\" .. cmode, enc)\r\n      if not enc or not dec then\r\n         eprint(\"codec\")\r\n         err = true\r\n      end\r\n      if dec ~= str and cmode ~= \"xml\" then\r\n         eprint(\"(validation:\" .. cmode .. \")\")\r\n         err = true\r\n      end\r\n      local hmode = hmodes[math.random(#hmodes)]\r\n      if not tokyocabinet.hash(hmode, str) then\r\n         eprint(\"hash\")\r\n         err = true\r\n      end\r\n      local bitop = bitops[math.random(#bitops)]\r\n      if not tokyocabinet.bit(bitop, math.random(0x7fffffff), math.random(0x7fffffff)) then\r\n         eprint(\"bit\")\r\n         err = true\r\n      end\r\n      local mstr = math.random(rnum);\r\n      if tokyocabinet.strstr(mstr, mstr) ~= 1 then\r\n         eprint(\"strstr\")\r\n         err = true\r\n      end\r\n      if not tokyocabinet.strstr(mstr, mstr, \"hoge\") then\r\n         eprint(\"strstr\")\r\n         err = true\r\n      end\r\n      local rstr = math.random(rnum);\r\n      if not tokyocabinet.regex(rstr, rstr) then\r\n         eprint(\"regex\")\r\n         err = true\r\n      end\r\n      local ralt = tostring(math.random(rnum))\r\n      if tokyocabinet.regex(rstr, \"^\" .. rstr .. \"$\", ralt) ~= ralt then\r\n         eprint(\"regex\")\r\n         err = true\r\n      end\r\n      local ucs = {}\r\n      for j = 1, len do\r\n         table.insert(ucs, 0x3042 + math.random(50) - 1)\r\n      end\r\n      local utf = tokyocabinet.ucs(ucs)\r\n      local udec = tokyocabinet.ucs(utf)\r\n      if #udec ~= #ucs then\r\n         eprint(\"(validation:ucs:enc)\")\r\n         err = true\r\n      end\r\n      local uenc = tokyocabinet.ucs(udec)\r\n      if utf ~= uenc then\r\n         eprint(\"(validation:ucs:dec)\")\r\n         err = true\r\n      end\r\n      local umode = true\r\n      if math.random(2) == 1 then\r\n         umode = false\r\n      end\r\n      if tokyocabinet.dist(utf, uenc, umode) ~= 0 then\r\n         eprint(\"(validation:dist)\")\r\n         err = true\r\n      end\r\n      if not tokyocabinet.stat(\"/\") then\r\n         eprint(\"stat\")\r\n         err = true\r\n      end\r\n      if not tokyocabinet.glob(\"/\") then\r\n         eprint(\"glob\")\r\n         err = true\r\n      end\r\n      if i % 100 == 1 then\r\n         local t1 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t1, math.random(10))\r\n         end\r\n         local t2 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t2, math.random(10))\r\n         end\r\n         local t3 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t3, math.random(10))\r\n         end\r\n         tokyocabinet.isect(t1)\r\n         tokyocabinet.isect(t1, t2)\r\n         tokyocabinet.isect({t1, t2, t3})\r\n         tokyocabinet.union(t1)\r\n         tokyocabinet.union(t1, t2)\r\n         tokyocabinet.union({t1, t2, t3})\r\n      end\r\n      if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 74,
    "text": "tokyocabinet.tablenew(math.random(1000), math.random(1000))",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "if tokyocabinet.time() < 1 then\r\n         eprint(\"time\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "eprint(\"time\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "err = true",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if math.random(100) == 1 then\r\n         tokyocabinet.sleep(10 / rnum)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "tokyocabinet.sleep(10 / rnum)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "local len = math.random(256) - 1",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "if math.random(rnum / 5 + 1) == 1 then\r\n         len = len * math.random(512)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "len = len * math.random(512)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "local ary = {}",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "for j = 1, len do\r\n         ary[j] = math.random() * 4294967296 - math.random() * 4294967296\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 85,
    "text": "ary[j] = math.random() * 4294967296 - math.random() * 4294967296",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "local off = math.random(#format - 3)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local myfmt = string.sub(format, off, off + math.random(#format / 3))",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local str = tokyocabinet.pack(myfmt, ary)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if not str then\r\n         eprint(\"pack\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "eprint(\"pack\")",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "local nary = tokyocabinet.unpack(myfmt, str)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if not nary then\r\n         eprint(\"unpack\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "eprint(\"unpack\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "local cmode = cmodes[math.random(#cmodes)]",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local enc = tokyocabinet.codec(cmode, str)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "local dec = tokyocabinet.codec(\"~\" .. cmode, enc)",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "if not enc or not dec then\r\n         eprint(\"codec\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "eprint(\"codec\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "if dec ~= str and cmode ~= \"xml\" then\r\n         eprint(\"(validation:\" .. cmode .. \")\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "eprint(\"(validation:\" .. cmode .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local hmode = hmodes[math.random(#hmodes)]",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if not tokyocabinet.hash(hmode, str) then\r\n         eprint(\"hash\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "eprint(\"hash\")",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "local bitop = bitops[math.random(#bitops)]",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if not tokyocabinet.bit(bitop, math.random(0x7fffffff), math.random(0x7fffffff)) then\r\n         eprint(\"bit\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "eprint(\"bit\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "local mstr = math.random(rnum)",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "if tokyocabinet.strstr(mstr, mstr) ~= 1 then\r\n         eprint(\"strstr\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "eprint(\"strstr\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "if not tokyocabinet.strstr(mstr, mstr, \"hoge\") then\r\n         eprint(\"strstr\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "local rstr = math.random(rnum)",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "if not tokyocabinet.regex(rstr, rstr) then\r\n         eprint(\"regex\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "eprint(\"regex\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "local ralt = tostring(math.random(rnum))",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if tokyocabinet.regex(rstr, \"^\" .. rstr .. \"$\", ralt) ~= ralt then\r\n         eprint(\"regex\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "local ucs = {}",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "for j = 1, len do\r\n         table.insert(ucs, 0x3042 + math.random(50) - 1)\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 118,
    "text": "table.insert(ucs, 0x3042 + math.random(50) - 1)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "local utf = tokyocabinet.ucs(ucs)",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "local udec = tokyocabinet.ucs(utf)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "if #udec ~= #ucs then\r\n         eprint(\"(validation:ucs:enc)\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "eprint(\"(validation:ucs:enc)\")",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "local uenc = tokyocabinet.ucs(udec)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "if utf ~= uenc then\r\n         eprint(\"(validation:ucs:dec)\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "eprint(\"(validation:ucs:dec)\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "local umode = true",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "if math.random(2) == 1 then\r\n         umode = false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "umode = false",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "if tokyocabinet.dist(utf, uenc, umode) ~= 0 then\r\n         eprint(\"(validation:dist)\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "eprint(\"(validation:dist)\")",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "if not tokyocabinet.stat(\"/\") then\r\n         eprint(\"stat\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "eprint(\"stat\")",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "if not tokyocabinet.glob(\"/\") then\r\n         eprint(\"glob\")\r\n         err = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "eprint(\"glob\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "if i % 100 == 1 then\r\n         local t1 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t1, math.random(10))\r\n         end\r\n         local t2 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t2, math.random(10))\r\n         end\r\n         local t3 = {}\r\n         len = math.random(10)\r\n         for j = 1, len do\r\n            table.insert(t3, math.random(10))\r\n         end\r\n         tokyocabinet.isect(t1)\r\n         tokyocabinet.isect(t1, t2)\r\n         tokyocabinet.isect({t1, t2, t3})\r\n         tokyocabinet.union(t1)\r\n         tokyocabinet.union(t1, t2)\r\n         tokyocabinet.union({t1, t2, t3})\r\n      end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "local t1 = {}",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "len = math.random(10)",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "for j = 1, len do\r\n            table.insert(t1, math.random(10))\r\n         end",
    "type": "statement:numericfor"
  }, {
    "id": 139,
    "text": "table.insert(t1, math.random(10))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "local t2 = {}",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "for j = 1, len do\r\n            table.insert(t2, math.random(10))\r\n         end",
    "type": "statement:numericfor"
  }, {
    "id": 142,
    "text": "table.insert(t2, math.random(10))",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "local t3 = {}",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "for j = 1, len do\r\n            table.insert(t3, math.random(10))\r\n         end",
    "type": "statement:numericfor"
  }, {
    "id": 145,
    "text": "table.insert(t3, math.random(10))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "tokyocabinet.isect(t1)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "tokyocabinet.isect(t1, t2)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "tokyocabinet.isect({t1, t2, t3})",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "tokyocabinet.union(t1)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "tokyocabinet.union(t1, t2)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "tokyocabinet.union({t1, t2, t3})",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "if rnum > 250 and i % (rnum / 250) == 0 then\r\n         printf(\".\")\r\n         if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "printf(\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "if i == rnum or i % (rnum / 10) == 0 then\r\n            printf(\" (%08d)\\n\", i)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "printf(\" (%08d)\\n\", i)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "printf(\"time: %.3f\\n\", tokyocabinet.time() - stime)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "local rv = 0",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if err then\r\n      printf(\"err\\n\\n\")\r\n      rv = 1\r\n   else\r\n      printf(\"ok\\n\\n\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "printf(\"err\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "rv = 1",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "printf(\"ok\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "",
    "type": "function container"
  }, {
    "id": 164,
    "text": "tablenew",
    "type": "global function"
  }, {
    "id": 165,
    "text": "dist",
    "type": "global function"
  }, {
    "id": 166,
    "text": "glob",
    "type": "global function"
  }, {
    "id": 167,
    "text": "codec",
    "type": "global function"
  }, {
    "id": 168,
    "text": "time",
    "type": "global function"
  }, {
    "id": 169,
    "text": "union",
    "type": "global function"
  }, {
    "id": 170,
    "text": "regex",
    "type": "global function"
  }, {
    "id": 171,
    "text": "isect",
    "type": "global function"
  }, {
    "id": 172,
    "text": "stat",
    "type": "global function"
  }, {
    "id": 173,
    "text": "pack",
    "type": "global function"
  }, {
    "id": 174,
    "text": "strstr",
    "type": "global function"
  }, {
    "id": 175,
    "text": "bit",
    "type": "global function"
  }, {
    "id": 176,
    "text": "hash",
    "type": "global function"
  }, {
    "id": 177,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 178,
    "text": "ucs",
    "type": "global function"
  }, {
    "id": 179,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 180,
    "text": "format",
    "type": "global function"
  }, {
    "id": 181,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 182,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 183,
    "text": "randomseed",
    "type": "global function"
  }, {
    "id": 184,
    "text": "type",
    "type": "global function"
  }, {
    "id": 185,
    "text": "time",
    "type": "global function"
  }, {
    "id": 186,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 187,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 188,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 189,
    "text": "random",
    "type": "global function"
  }, {
    "id": 190,
    "text": "match",
    "type": "global function"
  }, {
    "id": 191,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 192,
    "text": "require",
    "type": "global function"
  }, {
    "id": 193,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 194,
    "text": "",
    "type": "global variable"
  }, {
    "id": 195,
    "text": "",
    "type": "variable container"
  }, {
    "id": 196,
    "text": "",
    "type": "require container"
  } ]
}