{
  "_filename": "etree.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/etree/src/etree.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 22,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 31
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 28
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 31
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 4
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 4
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 46
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 4
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 4
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 61,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 61,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 78,
    "label": "has",
    "to": 87
  }, {
    "from": 61,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 89,
    "label": "has",
    "to": 4
  }, {
    "from": 89,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "calls",
    "to": 99
  }, {
    "from": 96,
    "label": "calls",
    "to": 99
  }, {
    "from": 96,
    "label": "calls",
    "to": 100
  }, {
    "from": 96,
    "label": "calls",
    "to": 100
  }, {
    "from": 13,
    "label": "calls",
    "to": 101
  }, {
    "from": 22,
    "label": "calls",
    "to": 101
  }, {
    "from": 22,
    "label": "calls",
    "to": 101
  }, {
    "from": 96,
    "label": "calls",
    "to": 101
  }, {
    "from": 40,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 103
  }, {
    "from": 96,
    "label": "calls",
    "to": 103
  }, {
    "from": 96,
    "label": "calls",
    "to": 103
  }, {
    "from": 96,
    "label": "calls",
    "to": 104
  }, {
    "from": 96,
    "label": "calls",
    "to": 13
  }, {
    "from": 96,
    "label": "calls",
    "to": 13
  }, {
    "from": 96,
    "label": "calls",
    "to": 105
  }, {
    "from": 22,
    "label": "calls",
    "to": 114
  }, {
    "from": 36,
    "label": "calls",
    "to": 114
  }, {
    "from": 17,
    "label": "calls",
    "to": 107
  }, {
    "from": 22,
    "label": "calls",
    "to": 107
  }, {
    "from": 96,
    "label": "calls",
    "to": 107
  }, {
    "from": 96,
    "label": "calls",
    "to": 107
  }, {
    "from": 96,
    "label": "calls",
    "to": 118
  }, {
    "from": 96,
    "label": "calls",
    "to": 2
  }, {
    "from": 96,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 115
  }, {
    "from": 22,
    "label": "calls",
    "to": 115
  }, {
    "from": 36,
    "label": "calls",
    "to": 115
  }, {
    "from": 96,
    "label": "calls",
    "to": 115
  }, {
    "from": 96,
    "label": "calls",
    "to": 115
  }, {
    "from": 2,
    "label": "calls",
    "to": 116
  }, {
    "from": 96,
    "label": "calls",
    "to": 116
  }, {
    "from": 96,
    "label": "calls",
    "to": 112
  }, {
    "from": 2,
    "label": "calls",
    "to": 113
  }, {
    "from": 96,
    "label": "calls",
    "to": 113
  }, {
    "from": 96,
    "label": "calls",
    "to": 113
  }, {
    "from": 96,
    "label": "calls",
    "to": 113
  }, {
    "from": 96,
    "label": "calls",
    "to": 113
  }, {
    "from": 40,
    "label": "calls",
    "to": 111
  }, {
    "from": 96,
    "label": "calls",
    "to": 110
  }, {
    "from": 96,
    "label": "calls",
    "to": 106
  }, {
    "from": 40,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 108
  }, {
    "from": 96,
    "label": "calls",
    "to": 108
  }, {
    "from": 96,
    "label": "calls",
    "to": 117
  }, {
    "from": 17,
    "label": "calls",
    "to": 109
  }, {
    "from": 22,
    "label": "calls",
    "to": 109
  }, {
    "from": 22,
    "label": "calls",
    "to": 109
  }, {
    "from": 22,
    "label": "calls",
    "to": 109
  }, {
    "from": 36,
    "label": "calls",
    "to": 109
  }, {
    "from": 96,
    "label": "calls",
    "to": 17
  }, {
    "from": 96,
    "label": "calls",
    "to": 17
  }, {
    "from": 96,
    "label": "calls",
    "to": 17
  }, {
    "from": 96,
    "label": "calls",
    "to": 17
  }, {
    "from": 96,
    "label": "calls",
    "to": 17
  }, {
    "from": 96,
    "label": "calls",
    "to": 17
  }, {
    "from": 96,
    "label": "calls",
    "to": 17
  }, {
    "from": 96,
    "label": "calls",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 96
  }, {
    "from": 96,
    "label": "declares",
    "to": 2
  }, {
    "from": 96,
    "label": "declares",
    "to": 11
  }, {
    "from": 96,
    "label": "declares",
    "to": 13
  }, {
    "from": 96,
    "label": "declares",
    "to": 17
  }, {
    "from": 96,
    "label": "declares",
    "to": 22
  }, {
    "from": 96,
    "label": "declares",
    "to": 36
  }, {
    "from": 96,
    "label": "declares",
    "to": 40
  }, {
    "from": 96,
    "label": "declares",
    "to": 44
  }, {
    "from": 96,
    "label": "declares",
    "to": 49
  }, {
    "from": 96,
    "label": "declares",
    "to": 57
  }, {
    "from": 96,
    "label": "declares",
    "to": 61
  }, {
    "from": 96,
    "label": "declares",
    "to": 89
  }, {
    "from": 1,
    "label": "declares",
    "to": 97
  }, {
    "from": 1,
    "label": "declares",
    "to": 98
  }, {
    "from": 119,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 120
  }, {
    "from": 1,
    "label": "contains",
    "to": 121
  }, {
    "from": 120,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 120,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 120,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 120,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 120,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 120,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 120,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 120,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 120,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 120,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 120,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 120,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 120,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 120,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 120,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 120,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 155,
    "label": "assigns",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 155,
    "label": "assigns",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 155,
    "label": "assigns",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 155,
    "label": "assigns",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 155,
    "label": "assigns",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 155,
    "label": "assigns",
    "to": 168
  }, {
    "from": 168,
    "label": "assigns",
    "to": 169
  }, {
    "from": 155,
    "label": "assigns",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 120,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 120,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 120,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 120,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 120,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 120,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 120,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 120,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 120,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 120,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 120,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 120,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 121,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 196
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "etree",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Type(cls)\r\n  local constructor = function(cls, ...)\r\n    return cls:new(unpack(arg)) -- cls:new(...) in Lua 5.1\r\n  end\r\n  local mt = getmetatable(cls)\r\n  if mt == nil then\r\n    mt = {}\r\n    setmetatable(cls, mt)\r\n  end\r\n  mt.__call = constructor\r\n  return cls\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local constructor = function(cls, ...)\r\n    return cls:new(unpack(arg)) -- cls:new(...) in Lua 5.1\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local mt = getmetatable(cls)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if mt == nil then\r\n    mt = {}\r\n    setmetatable(cls, mt)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "mt = {}",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "setmetatable(cls, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "mt.__call = constructor",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function(cls, ...)\r\n    return cls:new(unpack(arg)) -- cls:new(...) in Lua 5.1\r\n  end",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function table.update(self, other)\r\n  for key, value in pairs(other) do\r\n    self[key] = value\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "for key, value in pairs(other) do\r\n    self[key] = value\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "self[key] = value",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function map(symbols)\r\n  local array = {}\r\n  for _, symbol in ipairs(symbols) do\r\n    table.insert(array, {symbol, mapping[symbol]})\r\n  end\r\n  return array\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local array = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "for _, symbol in ipairs(symbols) do\r\n    table.insert(array, {symbol, mapping[symbol]})\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "table.insert(array, {symbol, mapping[symbol]})",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function lom_sort(attrs)\r\n  -- collect the ordered attributes\r\n  local indices = {}\r\n  for key, _ in pairs(attrs) do\r\n    if type(key) == \"number\" then\r\n      table.insert(indices, key)\r\n    end\r\n  end\r\n  table.sort(indices)\r\n  local attrs_ = {}\r\n  for _, index in ipairs(indices) do\r\n    local attr = attrs[index]\r\n    table.insert(attrs_, attr)\r\n    attrs_[attr] = true\r\n  end\r\n  -- the others will appear last, in no particular order\r\n  for attr, _ in pairs(attrs) do\r\n    if type(attr)==\"string\" and not attrs_[attr] then\r\n      table.insert(attrs_, attr)\r\n    end\r\n  end\r\n  return attrs_\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local indices = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for key, _ in pairs(attrs) do\r\n    if type(key) == \"number\" then\r\n      table.insert(indices, key)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "if type(key) == \"number\" then\r\n      table.insert(indices, key)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "table.insert(indices, key)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "table.sort(indices)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local attrs_ = {}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "for _, index in ipairs(indices) do\r\n    local attr = attrs[index]\r\n    table.insert(attrs_, attr)\r\n    attrs_[attr] = true\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "local attr = attrs[index]",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "table.insert(attrs_, attr)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "attrs_[attr] = true",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "for attr, _ in pairs(attrs) do\r\n    if type(attr)==\"string\" and not attrs_[attr] then\r\n      table.insert(attrs_, attr)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "if type(attr)==\"string\" and not attrs_[attr] then\r\n      table.insert(attrs_, attr)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function lexicographic(attrs)\r\n  local attrs_ = {}\r\n  for attr, _ in attrs do\r\n    if type(attr) == \"string\" then\r\n      table.insert(attrs_, attr)\r\n    end\r\n  end\r\n  return table.sort(attrs_)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "for attr, _ in attrs do\r\n    if type(attr) == \"string\" then\r\n      table.insert(attrs_, attr)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "if type(attr) == \"string\" then\r\n      table.insert(attrs_, attr)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function tostring(elt)\r\n  buffer = StringBuffer()\r\n  ElementTree(elt):write(buffer)\r\n  return base.tostring(buffer)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "buffer = StringBuffer()",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "ElementTree(elt):write(buffer)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function(cls, elt)\r\n    local buffer = {}\r\n    cls.__index = cls\r\n    setmetatable(buffer, cls)\r\n    return buffer\r\n  end",
    "type": "function"
  }, {
    "id": 45,
    "text": "local buffer = {}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "cls.__index = cls",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "setmetatable(buffer, cls)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function(cls, elt, options)\r\n    local etree = {}\r\n    cls.__index = cls\r\n    setmetatable(etree, cls)\r\n\r\n    etree.root = assert(elt, \"ElementTree:new: root element required\")\r\n    etree.options = {}\r\n\r\n    table.update(etree.options, cls.options)\r\n    table.update(etree.options, options or {})\r\n\r\n    return etree\r\n  end",
    "type": "function"
  }, {
    "id": 50,
    "text": "local etree = {}",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "setmetatable(etree, cls)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "etree.root = assert(elt, \"ElementTree:new: root element required\")",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "etree.options = {}",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "table.update(etree.options, cls.options)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "table.update(etree.options, options or {})",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function(text, encoding)\r\n    for _, key_value in pairs(encoding) do\r\n      text = string.gsub(text, key_value[1], key_value[2])\r\n    end\r\n    return text\r\n  end",
    "type": "function"
  }, {
    "id": 58,
    "text": "for _, key_value in pairs(encoding) do\r\n      text = string.gsub(text, key_value[1], key_value[2])\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 59,
    "text": "text = string.gsub(text, key_value[1], key_value[2])",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function(self, file, elt)\r\n    if file == nil then\r\n      file = io.stdout\r\n    end\r\n    if not elt and self.options.decl then\r\n      local decl = \"<?xml version='1.0' encoding='UTF-8'?>\\n\"\r\n      file:write(decl)\r\n    end\r\n    local elt = elt or self.root\r\n    local cdata_encoding, attributes_encoding = unpack(self.options.encoding)\r\n\r\n    file:write(\"<\" .. elt.tag)\r\n    local elt_attr = elt.attr or {}\r\n    local attrs = self.options.attr_sort(elt_attr)\r\n    for _, name in ipairs(attrs) do\r\n      local value = elt_attr[name]\r\n      name  = ElementTree._encode(name, cdata_encoding)\r\n      value = ElementTree._encode(value, attributes_encoding)\r\n      local assignment = string.format('%s=\"%s\"', name, value)\r\n      file:write(\" \" .. assignment)\r\n    end\r\n\r\n    if table.getn(elt) == 0 and self.options.empty == true then\r\n      file:write(\"/>\")\r\n    else\r\n      file:write(\">\")\r\n      for _, child in ipairs(elt) do\r\n        if type(child)==\"string\" then\r\n          child = ElementTree._encode(child, cdata_encoding)\r\n          file:write(child)\r\n        else\r\n          assert(type(child)==\"table\")\r\n          self:write(file, child)\r\n        end\r\n      end\r\n      file:write(\"</\" .. elt.tag .. \">\")\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "if file == nil then\r\n      file = io.stdout\r\n    end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "file = io.stdout",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if not elt and self.options.decl then\r\n      local decl = \"<?xml version='1.0' encoding='UTF-8'?>\\n\"\r\n      file:write(decl)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "local decl = \"<?xml version='1.0' encoding='UTF-8'?>\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "file:write(decl)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "local elt = elt or self.root",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local cdata_encoding, attributes_encoding = unpack(self.options.encoding)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "file:write(\"<\" .. elt.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "local elt_attr = elt.attr or {}",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local attrs = self.options.attr_sort(elt_attr)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "for _, name in ipairs(attrs) do\r\n      local value = elt_attr[name]\r\n      name  = ElementTree._encode(name, cdata_encoding)\r\n      value = ElementTree._encode(value, attributes_encoding)\r\n      local assignment = string.format('%s=\"%s\"', name, value)\r\n      file:write(\" \" .. assignment)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "local value = elt_attr[name]",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "name  = ElementTree._encode(name, cdata_encoding)",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "value = ElementTree._encode(value, attributes_encoding)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local assignment = string.format('%s=\"%s\"', name, value)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "file:write(\" \" .. assignment)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if table.getn(elt) == 0 and self.options.empty == true then\r\n      file:write(\"/>\")\r\n    else\r\n      file:write(\">\")\r\n      for _, child in ipairs(elt) do\r\n        if type(child)==\"string\" then\r\n          child = ElementTree._encode(child, cdata_encoding)\r\n          file:write(child)\r\n        else\r\n          assert(type(child)==\"table\")\r\n          self:write(file, child)\r\n        end\r\n      end\r\n      file:write(\"</\" .. elt.tag .. \">\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "file:write(\"/>\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "file:write(\">\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "for _, child in ipairs(elt) do\r\n        if type(child)==\"string\" then\r\n          child = ElementTree._encode(child, cdata_encoding)\r\n          file:write(child)\r\n        else\r\n          assert(type(child)==\"table\")\r\n          self:write(file, child)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "if type(child)==\"string\" then\r\n          child = ElementTree._encode(child, cdata_encoding)\r\n          file:write(child)\r\n        else\r\n          assert(type(child)==\"table\")\r\n          self:write(file, child)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "child = ElementTree._encode(child, cdata_encoding)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "file:write(child)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert(type(child)==\"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "self:write(file, child)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "file:write(\"</\" .. elt.tag .. \">\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function(self)\r\n    local mt = getmetatable(self)\r\n    setmetatable(self, nil)\r\n    local repr = base.tostring(self)\r\n    setmetatable(self, mt)\r\n    local _, _, address = string.find(repr, \"[a-zA-Z]*: (.+)\")\r\n    return string.format(\"element tree: %s\", address)\r\n  end",
    "type": "function"
  }, {
    "id": 90,
    "text": "local mt = getmetatable(self)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "setmetatable(self, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local repr = base.tostring(self)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "setmetatable(self, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "local _, _, address = string.find(repr, \"[a-zA-Z]*: (.+)\")",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "",
    "type": "function container"
  }, {
    "id": 97,
    "text": "fromstring",
    "type": "global function"
  }, {
    "id": 98,
    "text": "ElementTree",
    "type": "global function"
  }, {
    "id": 99,
    "text": "format",
    "type": "global function"
  }, {
    "id": 100,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 101,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 102,
    "text": "StringBuffer",
    "type": "global function"
  }, {
    "id": 103,
    "text": "_encode",
    "type": "global function"
  }, {
    "id": 104,
    "text": "find",
    "type": "global function"
  }, {
    "id": 105,
    "text": "self.options.attr_sort",
    "type": "global function"
  }, {
    "id": 106,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 107,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 108,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 109,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 110,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 111,
    "text": "ElementTree",
    "type": "global function"
  }, {
    "id": 112,
    "text": "module",
    "type": "global function"
  }, {
    "id": 113,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 114,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 115,
    "text": "type",
    "type": "global function"
  }, {
    "id": 116,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 117,
    "text": "require",
    "type": "global function"
  }, {
    "id": 118,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 119,
    "text": "",
    "type": "global variable"
  }, {
    "id": 120,
    "text": "",
    "type": "variable container"
  }, {
    "id": 121,
    "text": "",
    "type": "require container"
  }, {
    "id": 122,
    "text": "",
    "type": "local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "n/a"
  }, {
    "id": 124,
    "text": "",
    "type": "local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "n/a"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "n/a"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 142,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 143,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "n/a"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "n/a"
  }, {
    "id": 154,
    "text": "",
    "type": "local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 156,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 157,
    "text": "",
    "type": "string"
  }, {
    "id": 158,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 159,
    "text": "",
    "type": "string"
  }, {
    "id": 160,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 161,
    "text": "",
    "type": "string"
  }, {
    "id": 162,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 163,
    "text": "",
    "type": "string"
  }, {
    "id": 164,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 165,
    "text": "",
    "type": "string"
  }, {
    "id": 166,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 167,
    "text": "",
    "type": "string"
  }, {
    "id": 168,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 169,
    "text": "",
    "type": "string"
  }, {
    "id": 170,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 171,
    "text": "",
    "type": "string"
  }, {
    "id": 172,
    "text": "",
    "type": "global variable"
  }, {
    "id": 173,
    "text": "",
    "type": "n/a"
  }, {
    "id": 174,
    "text": "",
    "type": "global variable"
  }, {
    "id": 175,
    "text": "",
    "type": "n/a"
  }, {
    "id": 176,
    "text": "",
    "type": "global variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  }, {
    "id": 178,
    "text": "",
    "type": "global variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "global variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "global variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "global variable"
  }, {
    "id": 187,
    "text": "",
    "type": "n/a"
  }, {
    "id": 188,
    "text": "",
    "type": "global variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "global variable"
  }, {
    "id": 191,
    "text": "",
    "type": "n/a"
  }, {
    "id": 192,
    "text": "",
    "type": "global variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "global variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "lom",
    "type": "module"
  } ]
}