{
  "_filename": "basexx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/basexx/lib/basexx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 10
  }, {
    "from": 31,
    "label": "has",
    "to": 10
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 10
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 4
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 10
  }, {
    "from": 44,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 10
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 10
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 10
  }, {
    "from": 58,
    "label": "has",
    "to": 10
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 10
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 10
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 10
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 10
  }, {
    "from": 69,
    "label": "has",
    "to": 10
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 26
  }, {
    "from": 71,
    "label": "has",
    "to": 13
  }, {
    "from": 71,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 71,
    "label": "has",
    "to": 10
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 10
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 10
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "calls",
    "to": 89
  }, {
    "from": 25,
    "label": "calls",
    "to": 89
  }, {
    "from": 35,
    "label": "calls",
    "to": 89
  }, {
    "from": 44,
    "label": "calls",
    "to": 89
  }, {
    "from": 54,
    "label": "calls",
    "to": 35
  }, {
    "from": 58,
    "label": "calls",
    "to": 35
  }, {
    "from": 64,
    "label": "calls",
    "to": 35
  }, {
    "from": 12,
    "label": "calls",
    "to": 90
  }, {
    "from": 25,
    "label": "calls",
    "to": 91
  }, {
    "from": 21,
    "label": "calls",
    "to": 92
  }, {
    "from": 31,
    "label": "calls",
    "to": 92
  }, {
    "from": 44,
    "label": "calls",
    "to": 92
  }, {
    "from": 35,
    "label": "calls",
    "to": 93
  }, {
    "from": 35,
    "label": "calls",
    "to": 94
  }, {
    "from": 35,
    "label": "calls",
    "to": 94
  }, {
    "from": 44,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 95
  }, {
    "from": 44,
    "label": "calls",
    "to": 96
  }, {
    "from": 35,
    "label": "calls",
    "to": 12
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 12,
    "label": "calls",
    "to": 97
  }, {
    "from": 12,
    "label": "calls",
    "to": 97
  }, {
    "from": 25,
    "label": "calls",
    "to": 97
  }, {
    "from": 35,
    "label": "calls",
    "to": 97
  }, {
    "from": 44,
    "label": "calls",
    "to": 97
  }, {
    "from": 44,
    "label": "calls",
    "to": 97
  }, {
    "from": 44,
    "label": "calls",
    "to": 98
  }, {
    "from": 54,
    "label": "calls",
    "to": 102
  }, {
    "from": 58,
    "label": "calls",
    "to": 102
  }, {
    "from": 56,
    "label": "calls",
    "to": 44
  }, {
    "from": 62,
    "label": "calls",
    "to": 44
  }, {
    "from": 66,
    "label": "calls",
    "to": 44
  }, {
    "from": 21,
    "label": "calls",
    "to": 99
  }, {
    "from": 31,
    "label": "calls",
    "to": 99
  }, {
    "from": 33,
    "label": "calls",
    "to": 101
  }, {
    "from": 25,
    "label": "calls",
    "to": 100
  }, {
    "from": 33,
    "label": "calls",
    "to": 100
  }, {
    "from": 35,
    "label": "calls",
    "to": 21
  }, {
    "from": 44,
    "label": "calls",
    "to": 25
  }, {
    "from": 12,
    "label": "calls",
    "to": 103
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 78,
    "label": "declares",
    "to": 2
  }, {
    "from": 78,
    "label": "declares",
    "to": 12
  }, {
    "from": 78,
    "label": "declares",
    "to": 21
  }, {
    "from": 78,
    "label": "declares",
    "to": 25
  }, {
    "from": 78,
    "label": "declares",
    "to": 31
  }, {
    "from": 78,
    "label": "declares",
    "to": 33
  }, {
    "from": 78,
    "label": "declares",
    "to": 35
  }, {
    "from": 78,
    "label": "declares",
    "to": 44
  }, {
    "from": 78,
    "label": "declares",
    "to": 54
  }, {
    "from": 78,
    "label": "declares",
    "to": 56
  }, {
    "from": 78,
    "label": "declares",
    "to": 58
  }, {
    "from": 78,
    "label": "declares",
    "to": 62
  }, {
    "from": 78,
    "label": "declares",
    "to": 64
  }, {
    "from": 78,
    "label": "declares",
    "to": 66
  }, {
    "from": 78,
    "label": "declares",
    "to": 68
  }, {
    "from": 78,
    "label": "declares",
    "to": 69
  }, {
    "from": 78,
    "label": "declares",
    "to": 71
  }, {
    "from": 78,
    "label": "declares",
    "to": 73
  }, {
    "from": 78,
    "label": "declares",
    "to": 75
  }, {
    "from": 78,
    "label": "declares",
    "to": 77
  }, {
    "from": 1,
    "label": "declares",
    "to": 79
  }, {
    "from": 1,
    "label": "declares",
    "to": 80
  }, {
    "from": 1,
    "label": "declares",
    "to": 81
  }, {
    "from": 1,
    "label": "declares",
    "to": 82
  }, {
    "from": 1,
    "label": "declares",
    "to": 83
  }, {
    "from": 1,
    "label": "declares",
    "to": 84
  }, {
    "from": 1,
    "label": "declares",
    "to": 85
  }, {
    "from": 1,
    "label": "declares",
    "to": 86
  }, {
    "from": 1,
    "label": "declares",
    "to": 87
  }, {
    "from": 1,
    "label": "declares",
    "to": 88
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 1,
    "label": "contains",
    "to": 105
  }, {
    "from": 104,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 104,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 109,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 109,
    "label": "assigns",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 104,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 104,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 104,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 121,
    "label": "assigns",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 121,
    "label": "assigns",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 121,
    "label": "assigns",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 104,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 1,
    "label": "provides",
    "to": 132
  }, {
    "from": 106,
    "label": "represents",
    "to": 133
  }, {
    "from": 132,
    "label": "provides",
    "to": 133
  }, {
    "from": 106,
    "label": "contains",
    "to": 21
  }, {
    "from": 106,
    "label": "contains",
    "to": 25
  }, {
    "from": 106,
    "label": "contains",
    "to": 31
  }, {
    "from": 106,
    "label": "contains",
    "to": 33
  }, {
    "from": 106,
    "label": "contains",
    "to": 54
  }, {
    "from": 106,
    "label": "contains",
    "to": 56
  }, {
    "from": 106,
    "label": "contains",
    "to": 58
  }, {
    "from": 106,
    "label": "contains",
    "to": 62
  }, {
    "from": 106,
    "label": "contains",
    "to": 64
  }, {
    "from": 106,
    "label": "contains",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "basexx",
    "type": "module"
  }, {
    "id": 2,
    "text": "function divide_string( str, max, fillChar )\r\n   fillChar = fillChar or \"\"\r\n   local result = {}\r\n\r\n   local start = 1\r\n   for i = 1, #str do\r\n      if i % max == 0 then\r\n         table.insert( result, str:sub( start, i ) )\r\n         start = i + 1\r\n      elseif i == #str then\r\n         table.insert( result, str:sub( start, i ) )\r\n      end\r\n   end\r\n\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "fillChar = fillChar or \"\"",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local start = 1",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for i = 1, #str do\r\n      if i % max == 0 then\r\n         table.insert( result, str:sub( start, i ) )\r\n         start = i + 1\r\n      elseif i == #str then\r\n         table.insert( result, str:sub( start, i ) )\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 7,
    "text": "if i % max == 0 then\r\n         table.insert( result, str:sub( start, i ) )\r\n         start = i + 1\r\n      elseif i == #str then\r\n         table.insert( result, str:sub( start, i ) )\r\n      end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "table.insert( result, str:sub( start, i ) )",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "start = i + 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function number_to_bit( num, length )\r\n   local bits = {}\r\n\r\n   while num > 0 do\r\n      local rest = math.fmod( num, 2 )\r\n      table.insert( bits, rest )\r\n      num = ( num - rest ) / 2\r\n   end\r\n\r\n   while #bits < length do\r\n      table.insert( bits, \"0\" )\r\n   end\r\n\r\n   return string.reverse( table.concat( bits ) )\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local bits = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "while num > 0 do\r\n      local rest = math.fmod( num, 2 )\r\n      table.insert( bits, rest )\r\n      num = ( num - rest ) / 2\r\n   end",
    "type": "statement:while"
  }, {
    "id": 15,
    "text": "local rest = math.fmod( num, 2 )",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "table.insert( bits, rest )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "num = ( num - rest ) / 2",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "while #bits < length do\r\n      table.insert( bits, \"0\" )\r\n   end",
    "type": "statement:while"
  }, {
    "id": 19,
    "text": "table.insert( bits, \"0\" )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function basexx.from_bit( str )\r\n   str = string.lower( str )\r\n   str = str:gsub( '[ilo]', function( c ) return bitMap[ c ] end )\r\n   return ( str:gsub( '........', function ( cc )\r\n               return string.char( tonumber( cc, 2 ) )\r\n            end ) )\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "str = string.lower( str )",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "str = str:gsub( '[ilo]', function( c ) return bitMap[ c ] end )",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function basexx.to_bit( str )\r\n   return ( str:gsub( '.', function ( c )\r\n               local byte = string.byte( c )\r\n               local bits = {}\r\n               for i = 1,8 do\r\n                  table.insert( bits, byte % 2 )\r\n                  byte = math.floor( byte / 2 )\r\n               end\r\n               return table.concat( bits ):reverse()\r\n            end ) )\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local byte = string.byte( c )",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "for i = 1,8 do\r\n                  table.insert( bits, byte % 2 )\r\n                  byte = math.floor( byte / 2 )\r\n               end",
    "type": "statement:numericfor"
  }, {
    "id": 28,
    "text": "table.insert( bits, byte % 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "byte = math.floor( byte / 2 )",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function basexx.from_hex( str )\r\n   return ( str:gsub( '..', function ( cc )\r\n               return string.char( tonumber( cc, 16 ) )\r\n            end ) )\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function basexx.to_hex( str )\r\n   return ( str:gsub( '.', function ( c )\r\n               return string.format('%02X', string.byte( c ) )\r\n            end ) )\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function from_basexx( str, alphabet, bits )\r\n   local result = {}\r\n   for i = 1, #str do\r\n      local c = string.sub( str, i, i )\r\n      if c ~= '=' then\r\n         local index = string.find( alphabet, c )\r\n         table.insert( result, number_to_bit( index - 1, bits ) )\r\n      end\r\n   end\r\n\r\n   local value = table.concat( result )\r\n   local pad = #value % 8\r\n   return basexx.from_bit( string.sub( value, 1, #value - pad ) )\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "for i = 1, #str do\r\n      local c = string.sub( str, i, i )\r\n      if c ~= '=' then\r\n         local index = string.find( alphabet, c )\r\n         table.insert( result, number_to_bit( index - 1, bits ) )\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 37,
    "text": "local c = string.sub( str, i, i )",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if c ~= '=' then\r\n         local index = string.find( alphabet, c )\r\n         table.insert( result, number_to_bit( index - 1, bits ) )\r\n      end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local index = string.find( alphabet, c )",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "table.insert( result, number_to_bit( index - 1, bits ) )",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local value = table.concat( result )",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local pad = #value % 8",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function to_basexx( str, alphabet, bits, pad )\r\n   local bitString = basexx.to_bit( str )\r\n\r\n   local chunks = divide_string( bitString, bits )\r\n   local result = {}\r\n   for key,value in ipairs( chunks ) do\r\n      if ( #value < bits ) then\r\n         value = value .. string.rep( '0', bits - #value )\r\n      end\r\n      local pos = tonumber( value, 2 ) + 1\r\n      table.insert( result, alphabet:sub( pos, pos ) )\r\n   end\r\n\r\n   table.insert( result, pad )\r\n   return table.concat( result )   \r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local bitString = basexx.to_bit( str )",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local chunks = divide_string( bitString, bits )",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "for key,value in ipairs( chunks ) do\r\n      if ( #value < bits ) then\r\n         value = value .. string.rep( '0', bits - #value )\r\n      end\r\n      local pos = tonumber( value, 2 ) + 1\r\n      table.insert( result, alphabet:sub( pos, pos ) )\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if ( #value < bits ) then\r\n         value = value .. string.rep( '0', bits - #value )\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "value = value .. string.rep( '0', bits - #value )",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local pos = tonumber( value, 2 ) + 1",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "table.insert( result, alphabet:sub( pos, pos ) )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "table.insert( result, pad )",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function basexx.from_base32( str )\r\n   return from_basexx( string.upper( str ), base32Alphabet, 5 )\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function basexx.to_base32( str )\r\n   return to_basexx( str, base32Alphabet, 5, ({ '', '======', '====', '===', '=' })[ #str % 5 + 1 ] )\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function basexx.from_crockford( str )\r\n   str = string.upper( str )\r\n   str = str:gsub( '[ILOU]', function( c ) return crockfordMap[ c ] end )\r\n   return from_basexx( str, crockfordAlphabet, 5 )\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "str = string.upper( str )",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "str = str:gsub( '[ILOU]', function( c ) return crockfordMap[ c ] end )",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function basexx.to_crockford( str )\r\n   return to_basexx( str, crockfordAlphabet, 5, \"\" )\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function basexx.from_base64( str )\r\n   return from_basexx( str, base64Alphabet, 6 )\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function basexx.to_base64( str )\r\n   return to_basexx( str, base64Alphabet, 6, ({ '', '==', '=' })[ #str % 3 + 1 ] )\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function( c ) return bitMap[ c ] end",
    "type": "function"
  }, {
    "id": 69,
    "text": "function ( cc )\r\n               return string.char( tonumber( cc, 2 ) )\r\n            end",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function ( c )\r\n               local byte = string.byte( c )\r\n               local bits = {}\r\n               for i = 1,8 do\r\n                  table.insert( bits, byte % 2 )\r\n                  byte = math.floor( byte / 2 )\r\n               end\r\n               return table.concat( bits ):reverse()\r\n            end",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function ( cc )\r\n               return string.char( tonumber( cc, 16 ) )\r\n            end",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function ( c )\r\n               return string.format('%02X', string.byte( c ) )\r\n            end",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function( c ) return crockfordMap[ c ] end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "function container"
  }, {
    "id": 79,
    "text": "to_hex",
    "type": "global function"
  }, {
    "id": 80,
    "text": "from_base64",
    "type": "global function"
  }, {
    "id": 81,
    "text": "to_bit",
    "type": "global function"
  }, {
    "id": 82,
    "text": "from_base32",
    "type": "global function"
  }, {
    "id": 83,
    "text": "from_bit",
    "type": "global function"
  }, {
    "id": 84,
    "text": "from_crockford",
    "type": "global function"
  }, {
    "id": 85,
    "text": "to_base64",
    "type": "global function"
  }, {
    "id": 86,
    "text": "from_hex",
    "type": "global function"
  }, {
    "id": 87,
    "text": "to_base32",
    "type": "global function"
  }, {
    "id": 88,
    "text": "to_crockford",
    "type": "global function"
  }, {
    "id": 89,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 90,
    "text": "reverse",
    "type": "global function"
  }, {
    "id": 91,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 92,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 93,
    "text": "find",
    "type": "global function"
  }, {
    "id": 94,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 95,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 96,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 97,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 98,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 99,
    "text": "char",
    "type": "global function"
  }, {
    "id": 100,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 101,
    "text": "format",
    "type": "global function"
  }, {
    "id": 102,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 103,
    "text": "fmod",
    "type": "global function"
  }, {
    "id": 104,
    "text": "",
    "type": "variable container"
  }, {
    "id": 105,
    "text": "",
    "type": "require container"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 110,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 111,
    "text": "",
    "type": "string"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "string"
  }, {
    "id": 114,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 115,
    "text": "",
    "type": "string"
  }, {
    "id": 116,
    "text": "",
    "type": "local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "string"
  }, {
    "id": 118,
    "text": "",
    "type": "local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "string"
  }, {
    "id": 120,
    "text": "",
    "type": "local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 122,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 123,
    "text": "",
    "type": "string"
  }, {
    "id": 124,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 125,
    "text": "",
    "type": "string"
  }, {
    "id": 126,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 127,
    "text": "",
    "type": "string"
  }, {
    "id": 128,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 129,
    "text": "",
    "type": "string"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "string"
  }, {
    "id": 132,
    "text": "",
    "type": "interface container"
  }, {
    "id": 133,
    "text": "",
    "type": "interface"
  } ]
}