{
  "_filename": "base_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": true,
  "_path": "modules/basexx/test/base_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 39
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 42
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 56,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 49
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 51
  }, {
    "from": 67,
    "label": "has",
    "to": 52
  }, {
    "from": 67,
    "label": "has",
    "to": 53
  }, {
    "from": 67,
    "label": "has",
    "to": 54
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 57
  }, {
    "from": 68,
    "label": "has",
    "to": 58
  }, {
    "from": 68,
    "label": "has",
    "to": 59
  }, {
    "from": 68,
    "label": "has",
    "to": 60
  }, {
    "from": 68,
    "label": "has",
    "to": 61
  }, {
    "from": 68,
    "label": "has",
    "to": 62
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 71,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 18
  }, {
    "from": 72,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 22
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 73,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 32
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 39
  }, {
    "from": 74,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 42
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 65
  }, {
    "from": 75,
    "label": "has",
    "to": 66
  }, {
    "from": 75,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 49
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 51
  }, {
    "from": 67,
    "label": "has",
    "to": 52
  }, {
    "from": 67,
    "label": "has",
    "to": 53
  }, {
    "from": 67,
    "label": "has",
    "to": 54
  }, {
    "from": 75,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 57
  }, {
    "from": 68,
    "label": "has",
    "to": 58
  }, {
    "from": 68,
    "label": "has",
    "to": 59
  }, {
    "from": 68,
    "label": "has",
    "to": 60
  }, {
    "from": 68,
    "label": "has",
    "to": 61
  }, {
    "from": 68,
    "label": "has",
    "to": 62
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "calls",
    "to": 78
  }, {
    "from": 77,
    "label": "calls",
    "to": 92
  }, {
    "from": 77,
    "label": "calls",
    "to": 92
  }, {
    "from": 77,
    "label": "calls",
    "to": 92
  }, {
    "from": 77,
    "label": "calls",
    "to": 92
  }, {
    "from": 77,
    "label": "calls",
    "to": 92
  }, {
    "from": 77,
    "label": "calls",
    "to": 92
  }, {
    "from": 77,
    "label": "calls",
    "to": 91
  }, {
    "from": 77,
    "label": "calls",
    "to": 82
  }, {
    "from": 77,
    "label": "calls",
    "to": 82
  }, {
    "from": 77,
    "label": "calls",
    "to": 82
  }, {
    "from": 77,
    "label": "calls",
    "to": 80
  }, {
    "from": 77,
    "label": "calls",
    "to": 85
  }, {
    "from": 77,
    "label": "calls",
    "to": 85
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 81
  }, {
    "from": 77,
    "label": "calls",
    "to": 86
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 77,
    "label": "calls",
    "to": 87
  }, {
    "from": 77,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 79
  }, {
    "from": 77,
    "label": "calls",
    "to": 90
  }, {
    "from": 77,
    "label": "calls",
    "to": 90
  }, {
    "from": 77,
    "label": "calls",
    "to": 90
  }, {
    "from": 77,
    "label": "calls",
    "to": 90
  }, {
    "from": 77,
    "label": "calls",
    "to": 84
  }, {
    "from": 77,
    "label": "calls",
    "to": 84
  }, {
    "from": 77,
    "label": "calls",
    "to": 84
  }, {
    "from": 77,
    "label": "calls",
    "to": 84
  }, {
    "from": 77,
    "label": "calls",
    "to": 84
  }, {
    "from": 77,
    "label": "calls",
    "to": 84
  }, {
    "from": 77,
    "label": "calls",
    "to": 83
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 77,
    "label": "declares",
    "to": 2
  }, {
    "from": 77,
    "label": "declares",
    "to": 5
  }, {
    "from": 77,
    "label": "declares",
    "to": 8
  }, {
    "from": 77,
    "label": "declares",
    "to": 12
  }, {
    "from": 77,
    "label": "declares",
    "to": 17
  }, {
    "from": 77,
    "label": "declares",
    "to": 20
  }, {
    "from": 77,
    "label": "declares",
    "to": 24
  }, {
    "from": 77,
    "label": "declares",
    "to": 28
  }, {
    "from": 77,
    "label": "declares",
    "to": 31
  }, {
    "from": 77,
    "label": "declares",
    "to": 34
  }, {
    "from": 77,
    "label": "declares",
    "to": 38
  }, {
    "from": 77,
    "label": "declares",
    "to": 41
  }, {
    "from": 77,
    "label": "declares",
    "to": 44
  }, {
    "from": 77,
    "label": "declares",
    "to": 48
  }, {
    "from": 77,
    "label": "declares",
    "to": 56
  }, {
    "from": 77,
    "label": "declares",
    "to": 64
  }, {
    "from": 77,
    "label": "declares",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 94
  }, {
    "from": 13,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 64
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function()\r\n         assert.is.same( \"01000001010000110100010001000011\", basexx.to_bit( \"ACDC\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert.is.same( \"01000001010000110100010001000011\", basexx.to_bit( \"ACDC\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function()\r\n         assert.is.same( \"ACDC\", basexx.from_bit( \"01000001010000110100010001000011\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 6,
    "text": "assert.is.same( \"ACDC\", basexx.from_bit( \"01000001010000110100010001000011\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n         assert.is.same( \"AC\", basexx.from_bit( \"o1ooooo1o1oooo11\" ) )\r\n         assert.is.same( \"AC\", basexx.from_bit( \"OioooooiOiooooii\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 9,
    "text": "assert.is.same( \"AC\", basexx.from_bit( \"o1ooooo1o1oooo11\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert.is.same( \"AC\", basexx.from_bit( \"OioooooiOiooooii\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n      it( \"should convert data to a bitfields string\", function()\r\n         assert.is.same( \"01000001010000110100010001000011\", basexx.to_bit( \"ACDC\" ) )\r\n      end)\r\n      it( \"should read data from a bitfields string\", function()\r\n         assert.is.same( \"ACDC\", basexx.from_bit( \"01000001010000110100010001000011\" ) )\r\n      end)\r\n      it( \"should read data from a bitfields string that uses o instead of 0\", function()\r\n         assert.is.same( \"AC\", basexx.from_bit( \"o1ooooo1o1oooo11\" ) )\r\n         assert.is.same( \"AC\", basexx.from_bit( \"OioooooiOiooooii\" ) )\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 13,
    "text": "it( \"should convert data to a bitfields string\", function()\r\n         assert.is.same( \"01000001010000110100010001000011\", basexx.to_bit( \"ACDC\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "it( \"should read data from a bitfields string\", function()\r\n         assert.is.same( \"ACDC\", basexx.from_bit( \"01000001010000110100010001000011\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "it( \"should read data from a bitfields string that uses o instead of 0\", function()\r\n         assert.is.same( \"AC\", basexx.from_bit( \"o1ooooo1o1oooo11\" ) )\r\n         assert.is.same( \"AC\", basexx.from_bit( \"OioooooiOiooooii\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n         assert.is.same( \"48656C6C6F20776F726C6421\", basexx.to_hex( \"Hello world!\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert.is.same( \"48656C6C6F20776F726C6421\", basexx.to_hex( \"Hello world!\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function()\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656C6C6F20776F726C6421\" ) )\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656c6c6f20776f726c6421\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert.is.same( \"Hello world!\", basexx.from_hex( \"48656C6C6F20776F726C6421\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.is.same( \"Hello world!\", basexx.from_hex( \"48656c6c6f20776f726c6421\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n      it( \"should convert data to a hex string\", function()\r\n         assert.is.same( \"48656C6C6F20776F726C6421\", basexx.to_hex( \"Hello world!\" ) )\r\n      end)\r\n      it( \"should read data from a upper and lower hex string\", function()\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656C6C6F20776F726C6421\" ) )\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656c6c6f20776f726c6421\" ) )\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 25,
    "text": "it( \"should convert data to a hex string\", function()\r\n         assert.is.same( \"48656C6C6F20776F726C6421\", basexx.to_hex( \"Hello world!\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "it( \"should read data from a upper and lower hex string\", function()\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656C6C6F20776F726C6421\" ) )\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656c6c6f20776f726c6421\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"MNUHK3TLPEQGEYLDN5XCC===\", basexx.to_base32( \"chunky bacon!\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert.is.same( \"MNUHK3TLPEQGEYLDN5XCC===\", basexx.to_base32( \"chunky bacon!\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"chunky bacon!\", basexx.from_base32( \"MNUHK3TLPEQGEYLDN5XCC===\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 32,
    "text": "assert.is.same( \"chunky bacon!\", basexx.from_base32( \"MNUHK3TLPEQGEYLDN5XCC===\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n      it( \"should convert data to a base32 string\", function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"MNUHK3TLPEQGEYLDN5XCC===\", basexx.to_base32( \"chunky bacon!\" ) )\r\n      end)\r\n      it( \"should read data from a base32 string\", function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"chunky bacon!\", basexx.from_base32( \"MNUHK3TLPEQGEYLDN5XCC===\" ) )\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 35,
    "text": "it( \"should convert data to a base32 string\", function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"MNUHK3TLPEQGEYLDN5XCC===\", basexx.to_base32( \"chunky bacon!\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "it( \"should read data from a base32 string\", function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"chunky bacon!\", basexx.from_base32( \"MNUHK3TLPEQGEYLDN5XCC===\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"CSQPY\", basexx.to_crockford( \"foo\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 39,
    "text": "assert.is.same( \"CSQPY\", basexx.to_crockford( \"foo\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"foo\", basexx.from_crockford( \"CSQPY\" ) )\r\n      end",
    "type": "function"
  }, {
    "id": 42,
    "text": "assert.is.same( \"foo\", basexx.from_crockford( \"CSQPY\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n      it( \"should convert data to a base32 string\", function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"CSQPY\", basexx.to_crockford( \"foo\" ) )\r\n      end)\r\n      it( \"should read data from a base32 string\", function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"foo\", basexx.from_crockford( \"CSQPY\" ) )\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 45,
    "text": "it( \"should convert data to a base32 string\", function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"CSQPY\", basexx.to_crockford( \"foo\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "it( \"should read data from a base32 string\", function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"foo\", basexx.from_crockford( \"CSQPY\" ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'TWFu', basexx.to_base64( 'Man') )\r\n         assert.is.same( 'bGVhc3VyZS4=', basexx.to_base64( 'leasure.') )\r\n         assert.is.same( 'cGxlYXN1cmUu', basexx.to_base64( 'pleasure.') )\r\n         assert.is.same( 'ZWFzdXJlLg==', basexx.to_base64( 'easure.') )\r\n         assert.is.same( 'c3VyZS4=', basexx.to_base64( 'sure.') )\r\n\r\n         assert.is.same( string.gsub( long64, \"\\n\", \"\" ), basexx.to_base64( string.gsub( longtxt, \"\\n\", \"\" ) ) )\r\n      end",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert.is.same( 'TWFu', basexx.to_base64( 'Man') )",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert.is.same( 'bGVhc3VyZS4=', basexx.to_base64( 'leasure.') )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.is.same( 'cGxlYXN1cmUu', basexx.to_base64( 'pleasure.') )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert.is.same( 'ZWFzdXJlLg==', basexx.to_base64( 'easure.') )",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert.is.same( 'c3VyZS4=', basexx.to_base64( 'sure.') )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert.is.same( string.gsub( long64, \"\\n\", \"\" ), basexx.to_base64( string.gsub( longtxt, \"\\n\", \"\" ) ) )",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'Man', basexx.from_base64( 'TWFu') )\r\n         assert.is.same( 'leasure.', basexx.from_base64( 'bGVhc3VyZS4=') )\r\n         assert.is.same( 'pleasure.', basexx.from_base64( 'cGxlYXN1cmUu') )\r\n         assert.is.same( 'easure.', basexx.from_base64( 'ZWFzdXJlLg==') )\r\n         assert.is.same( 'sure.', basexx.from_base64( 'c3VyZS4=') )\r\n\r\n\r\n         assert.is.same( string.gsub( longtxt, \"\\n\", \"\" ), basexx.from_base64( string.gsub( long64, \"\\n\", \"\" ) ) )\r\n      end",
    "type": "function"
  }, {
    "id": 57,
    "text": "assert.is.same( 'Man', basexx.from_base64( 'TWFu') )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert.is.same( 'leasure.', basexx.from_base64( 'bGVhc3VyZS4=') )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert.is.same( 'pleasure.', basexx.from_base64( 'cGxlYXN1cmUu') )",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.is.same( 'easure.', basexx.from_base64( 'ZWFzdXJlLg==') )",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.is.same( 'sure.', basexx.from_base64( 'c3VyZS4=') )",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert.is.same( string.gsub( longtxt, \"\\n\", \"\" ), basexx.from_base64( string.gsub( long64, \"\\n\", \"\" ) ) )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function()\r\n      local longtxt = [=[Man is distinguished, not only by his reason, but by this singular passion from other\r\n animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation\r\n of knowledge, exceeds the short vehemence of any carnal pleasure.]=]     \r\n      local long64 = [=[TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3\r\nNpb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbi\r\nB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW\r\n55IGNhcm5hbCBwbGVhc3VyZS4=]=]\r\n\r\n      it( \"should convert data to a base64 string\", function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'TWFu', basexx.to_base64( 'Man') )\r\n         assert.is.same( 'bGVhc3VyZS4=', basexx.to_base64( 'leasure.') )\r\n         assert.is.same( 'cGxlYXN1cmUu', basexx.to_base64( 'pleasure.') )\r\n         assert.is.same( 'ZWFzdXJlLg==', basexx.to_base64( 'easure.') )\r\n         assert.is.same( 'c3VyZS4=', basexx.to_base64( 'sure.') )\r\n\r\n         assert.is.same( string.gsub( long64, \"\\n\", \"\" ), basexx.to_base64( string.gsub( longtxt, \"\\n\", \"\" ) ) )\r\n      end)\r\n      it( \"should read data from a base64 string\", function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'Man', basexx.from_base64( 'TWFu') )\r\n         assert.is.same( 'leasure.', basexx.from_base64( 'bGVhc3VyZS4=') )\r\n         assert.is.same( 'pleasure.', basexx.from_base64( 'cGxlYXN1cmUu') )\r\n         assert.is.same( 'easure.', basexx.from_base64( 'ZWFzdXJlLg==') )\r\n         assert.is.same( 'sure.', basexx.from_base64( 'c3VyZS4=') )\r\n\r\n\r\n         assert.is.same( string.gsub( longtxt, \"\\n\", \"\" ), basexx.from_base64( string.gsub( long64, \"\\n\", \"\" ) ) )\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 65,
    "text": "local longtxt = [=[Man is distinguished, not only by his reason, but by this singular passion from other\r\n animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation\r\n of knowledge, exceeds the short vehemence of any carnal pleasure.]=]",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local long64 = [=[TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3\r\nNpb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbi\r\nB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW\r\n55IGNhcm5hbCBwbGVhc3VyZS4=]=]",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "it( \"should convert data to a base64 string\", function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'TWFu', basexx.to_base64( 'Man') )\r\n         assert.is.same( 'bGVhc3VyZS4=', basexx.to_base64( 'leasure.') )\r\n         assert.is.same( 'cGxlYXN1cmUu', basexx.to_base64( 'pleasure.') )\r\n         assert.is.same( 'ZWFzdXJlLg==', basexx.to_base64( 'easure.') )\r\n         assert.is.same( 'c3VyZS4=', basexx.to_base64( 'sure.') )\r\n\r\n         assert.is.same( string.gsub( long64, \"\\n\", \"\" ), basexx.to_base64( string.gsub( longtxt, \"\\n\", \"\" ) ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "it( \"should read data from a base64 string\", function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'Man', basexx.from_base64( 'TWFu') )\r\n         assert.is.same( 'leasure.', basexx.from_base64( 'bGVhc3VyZS4=') )\r\n         assert.is.same( 'pleasure.', basexx.from_base64( 'cGxlYXN1cmUu') )\r\n         assert.is.same( 'easure.', basexx.from_base64( 'ZWFzdXJlLg==') )\r\n         assert.is.same( 'sure.', basexx.from_base64( 'c3VyZS4=') )\r\n\r\n\r\n         assert.is.same( string.gsub( longtxt, \"\\n\", \"\" ), basexx.from_base64( string.gsub( long64, \"\\n\", \"\" ) ) )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n   describe( \"should handle bitfields strings\", function()\r\n      it( \"should convert data to a bitfields string\", function()\r\n         assert.is.same( \"01000001010000110100010001000011\", basexx.to_bit( \"ACDC\" ) )\r\n      end)\r\n      it( \"should read data from a bitfields string\", function()\r\n         assert.is.same( \"ACDC\", basexx.from_bit( \"01000001010000110100010001000011\" ) )\r\n      end)\r\n      it( \"should read data from a bitfields string that uses o instead of 0\", function()\r\n         assert.is.same( \"AC\", basexx.from_bit( \"o1ooooo1o1oooo11\" ) )\r\n         assert.is.same( \"AC\", basexx.from_bit( \"OioooooiOiooooii\" ) )\r\n      end)\r\n   end)\r\n\r\n   describe( \"should handle hex strings\", function()\r\n      it( \"should convert data to a hex string\", function()\r\n         assert.is.same( \"48656C6C6F20776F726C6421\", basexx.to_hex( \"Hello world!\" ) )\r\n      end)\r\n      it( \"should read data from a upper and lower hex string\", function()\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656C6C6F20776F726C6421\" ) )\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656c6c6f20776f726c6421\" ) )\r\n      end)\r\n   end)\r\n\r\n   describe( \"should handle base32(rfc3548) strings\", function()\r\n      it( \"should convert data to a base32 string\", function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"MNUHK3TLPEQGEYLDN5XCC===\", basexx.to_base32( \"chunky bacon!\" ) )\r\n      end)\r\n      it( \"should read data from a base32 string\", function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"chunky bacon!\", basexx.from_base32( \"MNUHK3TLPEQGEYLDN5XCC===\" ) )\r\n      end)\r\n   end)\r\n\r\n   describe( \"should handle base32(crockford) strings\", function()\r\n      it( \"should convert data to a base32 string\", function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"CSQPY\", basexx.to_crockford( \"foo\" ) )\r\n      end)\r\n      it( \"should read data from a base32 string\", function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"foo\", basexx.from_crockford( \"CSQPY\" ) )\r\n      end)\r\n   end)\r\n\r\n   describe( \"should handle base64 strings\", function()\r\n      local longtxt = [=[Man is distinguished, not only by his reason, but by this singular passion from other\r\n animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation\r\n of knowledge, exceeds the short vehemence of any carnal pleasure.]=]     \r\n      local long64 = [=[TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3\r\nNpb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbi\r\nB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW\r\n55IGNhcm5hbCBwbGVhc3VyZS4=]=]\r\n\r\n      it( \"should convert data to a base64 string\", function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'TWFu', basexx.to_base64( 'Man') )\r\n         assert.is.same( 'bGVhc3VyZS4=', basexx.to_base64( 'leasure.') )\r\n         assert.is.same( 'cGxlYXN1cmUu', basexx.to_base64( 'pleasure.') )\r\n         assert.is.same( 'ZWFzdXJlLg==', basexx.to_base64( 'easure.') )\r\n         assert.is.same( 'c3VyZS4=', basexx.to_base64( 'sure.') )\r\n\r\n         assert.is.same( string.gsub( long64, \"\\n\", \"\" ), basexx.to_base64( string.gsub( longtxt, \"\\n\", \"\" ) ) )\r\n      end)\r\n      it( \"should read data from a base64 string\", function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'Man', basexx.from_base64( 'TWFu') )\r\n         assert.is.same( 'leasure.', basexx.from_base64( 'bGVhc3VyZS4=') )\r\n         assert.is.same( 'pleasure.', basexx.from_base64( 'cGxlYXN1cmUu') )\r\n         assert.is.same( 'easure.', basexx.from_base64( 'ZWFzdXJlLg==') )\r\n         assert.is.same( 'sure.', basexx.from_base64( 'c3VyZS4=') )\r\n\r\n\r\n         assert.is.same( string.gsub( longtxt, \"\\n\", \"\" ), basexx.from_base64( string.gsub( long64, \"\\n\", \"\" ) ) )\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "describe( \"should handle bitfields strings\", function()\r\n      it( \"should convert data to a bitfields string\", function()\r\n         assert.is.same( \"01000001010000110100010001000011\", basexx.to_bit( \"ACDC\" ) )\r\n      end)\r\n      it( \"should read data from a bitfields string\", function()\r\n         assert.is.same( \"ACDC\", basexx.from_bit( \"01000001010000110100010001000011\" ) )\r\n      end)\r\n      it( \"should read data from a bitfields string that uses o instead of 0\", function()\r\n         assert.is.same( \"AC\", basexx.from_bit( \"o1ooooo1o1oooo11\" ) )\r\n         assert.is.same( \"AC\", basexx.from_bit( \"OioooooiOiooooii\" ) )\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "describe( \"should handle hex strings\", function()\r\n      it( \"should convert data to a hex string\", function()\r\n         assert.is.same( \"48656C6C6F20776F726C6421\", basexx.to_hex( \"Hello world!\" ) )\r\n      end)\r\n      it( \"should read data from a upper and lower hex string\", function()\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656C6C6F20776F726C6421\" ) )\r\n         assert.is.same( \"Hello world!\", basexx.from_hex( \"48656c6c6f20776f726c6421\" ) )\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "describe( \"should handle base32(rfc3548) strings\", function()\r\n      it( \"should convert data to a base32 string\", function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"MNUHK3TLPEQGEYLDN5XCC===\", basexx.to_base32( \"chunky bacon!\" ) )\r\n      end)\r\n      it( \"should read data from a base32 string\", function()\r\n         -- https://github.com/stesla/base32\r\n         assert.is.same( \"chunky bacon!\", basexx.from_base32( \"MNUHK3TLPEQGEYLDN5XCC===\" ) )\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "describe( \"should handle base32(crockford) strings\", function()\r\n      it( \"should convert data to a base32 string\", function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"CSQPY\", basexx.to_crockford( \"foo\" ) )\r\n      end)\r\n      it( \"should read data from a base32 string\", function()\r\n         -- https://github.com/ingydotnet/crockford-py/blob/master/tests/test_functions.py\r\n         assert.is.same( \"foo\", basexx.from_crockford( \"CSQPY\" ) )\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "describe( \"should handle base64 strings\", function()\r\n      local longtxt = [=[Man is distinguished, not only by his reason, but by this singular passion from other\r\n animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation\r\n of knowledge, exceeds the short vehemence of any carnal pleasure.]=]     \r\n      local long64 = [=[TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3\r\nNpb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbi\r\nB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW\r\n55IGNhcm5hbCBwbGVhc3VyZS4=]=]\r\n\r\n      it( \"should convert data to a base64 string\", function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'TWFu', basexx.to_base64( 'Man') )\r\n         assert.is.same( 'bGVhc3VyZS4=', basexx.to_base64( 'leasure.') )\r\n         assert.is.same( 'cGxlYXN1cmUu', basexx.to_base64( 'pleasure.') )\r\n         assert.is.same( 'ZWFzdXJlLg==', basexx.to_base64( 'easure.') )\r\n         assert.is.same( 'c3VyZS4=', basexx.to_base64( 'sure.') )\r\n\r\n         assert.is.same( string.gsub( long64, \"\\n\", \"\" ), basexx.to_base64( string.gsub( longtxt, \"\\n\", \"\" ) ) )\r\n      end)\r\n      it( \"should read data from a base64 string\", function()\r\n         -- http://en.wikipedia.org/wiki/Base64\r\n         assert.is.same( 'Man', basexx.from_base64( 'TWFu') )\r\n         assert.is.same( 'leasure.', basexx.from_base64( 'bGVhc3VyZS4=') )\r\n         assert.is.same( 'pleasure.', basexx.from_base64( 'cGxlYXN1cmUu') )\r\n         assert.is.same( 'easure.', basexx.from_base64( 'ZWFzdXJlLg==') )\r\n         assert.is.same( 'sure.', basexx.from_base64( 'c3VyZS4=') )\r\n\r\n\r\n         assert.is.same( string.gsub( longtxt, \"\\n\", \"\" ), basexx.from_base64( string.gsub( long64, \"\\n\", \"\" ) ) )\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "",
    "type": "function container"
  }, {
    "id": 78,
    "text": "to_hex",
    "type": "global function"
  }, {
    "id": 79,
    "text": "from_base64",
    "type": "global function"
  }, {
    "id": 80,
    "text": "to_bit",
    "type": "global function"
  }, {
    "id": 81,
    "text": "from_base32",
    "type": "global function"
  }, {
    "id": 82,
    "text": "from_bit",
    "type": "global function"
  }, {
    "id": 83,
    "text": "from_crockford",
    "type": "global function"
  }, {
    "id": 84,
    "text": "to_base64",
    "type": "global function"
  }, {
    "id": 85,
    "text": "from_hex",
    "type": "global function"
  }, {
    "id": 86,
    "text": "to_base32",
    "type": "global function"
  }, {
    "id": 87,
    "text": "to_crockford",
    "type": "global function"
  }, {
    "id": 88,
    "text": "assert.is.same",
    "type": "global function"
  }, {
    "id": 89,
    "text": "it",
    "type": "global function"
  }, {
    "id": 90,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 91,
    "text": "require",
    "type": "global function"
  }, {
    "id": 92,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 93,
    "text": "",
    "type": "variable container"
  }, {
    "id": 94,
    "text": "",
    "type": "require container"
  } ]
}