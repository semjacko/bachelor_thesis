{
  "_filename": "ansicolors_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/ansicolors/specs/ansicolors_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 23
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 31
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 37
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 47
  }, {
    "from": 54,
    "label": "has",
    "to": 48
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 54,
    "label": "has",
    "to": 50
  }, {
    "from": 54,
    "label": "has",
    "to": 51
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 48
  }, {
    "from": 56,
    "label": "has",
    "to": 49
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 48
  }, {
    "from": 60,
    "label": "has",
    "to": 49
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 48
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 49
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 48
  }, {
    "from": 67,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 4
  }, {
    "from": 67,
    "label": "has",
    "to": 49
  }, {
    "from": 67,
    "label": "has",
    "to": 64
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 48
  }, {
    "from": 60,
    "label": "has",
    "to": 49
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 48
  }, {
    "from": 67,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 4
  }, {
    "from": 67,
    "label": "has",
    "to": 49
  }, {
    "from": 67,
    "label": "has",
    "to": 64
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 6
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 14
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 17
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 20
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 23
  }, {
    "from": 79,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 79,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 31
  }, {
    "from": 79,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 34
  }, {
    "from": 79,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 37
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 47
  }, {
    "from": 54,
    "label": "has",
    "to": 48
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 54,
    "label": "has",
    "to": 50
  }, {
    "from": 54,
    "label": "has",
    "to": 51
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 48
  }, {
    "from": 60,
    "label": "has",
    "to": 49
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 81,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 48
  }, {
    "from": 67,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 4
  }, {
    "from": 67,
    "label": "has",
    "to": 49
  }, {
    "from": 67,
    "label": "has",
    "to": 64
  }, {
    "from": 73,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "calls",
    "to": 87
  }, {
    "from": 83,
    "label": "calls",
    "to": 87
  }, {
    "from": 83,
    "label": "calls",
    "to": 87
  }, {
    "from": 83,
    "label": "calls",
    "to": 84
  }, {
    "from": 83,
    "label": "calls",
    "to": 84
  }, {
    "from": 83,
    "label": "calls",
    "to": 84
  }, {
    "from": 83,
    "label": "calls",
    "to": 84
  }, {
    "from": 83,
    "label": "calls",
    "to": 84
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 83,
    "label": "calls",
    "to": 85
  }, {
    "from": 83,
    "label": "calls",
    "to": 85
  }, {
    "from": 83,
    "label": "calls",
    "to": 85
  }, {
    "from": 83,
    "label": "calls",
    "to": 85
  }, {
    "from": 83,
    "label": "calls",
    "to": 85
  }, {
    "from": 83,
    "label": "calls",
    "to": 90
  }, {
    "from": 83,
    "label": "calls",
    "to": 86
  }, {
    "from": 83,
    "label": "calls",
    "to": 86
  }, {
    "from": 83,
    "label": "calls",
    "to": 86
  }, {
    "from": 83,
    "label": "calls",
    "to": 93
  }, {
    "from": 83,
    "label": "calls",
    "to": 91
  }, {
    "from": 83,
    "label": "calls",
    "to": 91
  }, {
    "from": 83,
    "label": "calls",
    "to": 92
  }, {
    "from": 83,
    "label": "calls",
    "to": 92
  }, {
    "from": 83,
    "label": "calls",
    "to": 92
  }, {
    "from": 83,
    "label": "calls",
    "to": 92
  }, {
    "from": 83,
    "label": "calls",
    "to": 92
  }, {
    "from": 83,
    "label": "calls",
    "to": 92
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "contains",
    "to": 83
  }, {
    "from": 83,
    "label": "declares",
    "to": 3
  }, {
    "from": 83,
    "label": "declares",
    "to": 5
  }, {
    "from": 83,
    "label": "declares",
    "to": 8
  }, {
    "from": 83,
    "label": "declares",
    "to": 10
  }, {
    "from": 83,
    "label": "declares",
    "to": 13
  }, {
    "from": 83,
    "label": "declares",
    "to": 16
  }, {
    "from": 83,
    "label": "declares",
    "to": 19
  }, {
    "from": 83,
    "label": "declares",
    "to": 22
  }, {
    "from": 83,
    "label": "declares",
    "to": 25
  }, {
    "from": 83,
    "label": "declares",
    "to": 27
  }, {
    "from": 83,
    "label": "declares",
    "to": 30
  }, {
    "from": 83,
    "label": "declares",
    "to": 33
  }, {
    "from": 83,
    "label": "declares",
    "to": 36
  }, {
    "from": 83,
    "label": "declares",
    "to": 39
  }, {
    "from": 83,
    "label": "declares",
    "to": 46
  }, {
    "from": 83,
    "label": "declares",
    "to": 53
  }, {
    "from": 83,
    "label": "declares",
    "to": 56
  }, {
    "from": 83,
    "label": "declares",
    "to": 59
  }, {
    "from": 83,
    "label": "declares",
    "to": 62
  }, {
    "from": 83,
    "label": "declares",
    "to": 66
  }, {
    "from": 83,
    "label": "declares",
    "to": 69
  }, {
    "from": 83,
    "label": "declares",
    "to": 73
  }, {
    "from": 2,
    "label": "contains",
    "to": 94
  }, {
    "from": 2,
    "label": "contains",
    "to": 95
  }, {
    "from": 94,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 95,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 1
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 19
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 80,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 80,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 69
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ansicolors",
    "type": "module"
  }, {
    "id": 2,
    "text": "ansicolors_spec",
    "type": "module"
  }, {
    "id": 3,
    "text": "function () return true end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "function()\r\n    assert_equal(ansicolors('foo'), c27 .. '[0m' .. 'foo' .. c27 .. '[0m' )\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "assert_equal(ansicolors('foo'), c27 .. '[0m' .. 'foo' .. c27 .. '[0m' )",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function() ansicolors('%{blah}foo') end",
    "type": "function"
  }, {
    "id": 9,
    "text": "ansicolors('%{blah}foo')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "function()\r\n    assert_error(function() ansicolors('%{blah}foo') end)\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "assert_error(function() ansicolors('%{blah}foo') end)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function()\r\n    assert_equal(ansicolors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert_equal(ansicolors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function()\r\n    assert_equal(ansicolors('%{red underline}foo'),  c27 .. '[0m' .. c27 .. '[31m' .. c27 .. '[4mfoo' .. c27 .. '[0m')\r\n  end",
    "type": "function"
  }, {
    "id": 17,
    "text": "assert_equal(ansicolors('%{red underline}foo'),  c27 .. '[0m' .. c27 .. '[31m' .. c27 .. '[4mfoo' .. c27 .. '[0m')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n    assert_equal(ansicolors('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[0m' .. c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[0m')\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "assert_equal(ansicolors('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[0m' .. c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[0m')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function()\r\n      assert_equal(ansicolors.noReset('foo'), 'foo' )\r\n    end",
    "type": "function"
  }, {
    "id": 23,
    "text": "assert_equal(ansicolors.noReset('foo'), 'foo' )",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function() ansicolors.noReset('%{blah}foo') end",
    "type": "function"
  }, {
    "id": 26,
    "text": "ansicolors.noReset('%{blah}foo')",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "function()\r\n      assert_error(function() ansicolors.noReset('%{blah}foo') end)\r\n    end",
    "type": "function"
  }, {
    "id": 28,
    "text": "assert_error(function() ansicolors.noReset('%{blah}foo') end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function()\r\n      assert_equal(ansicolors.noReset('%{red}foo'), c27 .. '[31mfoo')\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "assert_equal(ansicolors.noReset('%{red}foo'), c27 .. '[31mfoo')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n      assert_equal(ansicolors.noReset('%{red underline}foo'), c27 .. '[31m' .. c27 .. '[4mfoo')\r\n    end",
    "type": "function"
  }, {
    "id": 34,
    "text": "assert_equal(ansicolors.noReset('%{red underline}foo'), c27 .. '[31m' .. c27 .. '[4mfoo')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function()\r\n      assert_equal(ansicolors.noReset('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*')\r\n    end",
    "type": "function"
  }, {
    "id": 37,
    "text": "assert_equal(ansicolors.noReset('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*')",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function ()\r\n    it('should do nothing if no options given', function()\r\n      assert_equal(ansicolors.noReset('foo'), 'foo' )\r\n    end)\r\n\r\n    it('should throw an error on invalid options', function()\r\n      assert_error(function() ansicolors.noReset('%{blah}foo') end)\r\n    end)\r\n\r\n    it('should add red color to text', function()\r\n      assert_equal(ansicolors.noReset('%{red}foo'), c27 .. '[31mfoo')\r\n    end)\r\n\r\n    it('should add red underlined text', function()\r\n      assert_equal(ansicolors.noReset('%{red underline}foo'), c27 .. '[31m' .. c27 .. '[4mfoo')\r\n    end)\r\n\r\n    it('should with heterogeneous attributes', function()\r\n      assert_equal(ansicolors.noReset('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*')\r\n    end)\r\n\r\n  end",
    "type": "function"
  }, {
    "id": 40,
    "text": "it('should do nothing if no options given', function()\r\n      assert_equal(ansicolors.noReset('foo'), 'foo' )\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "it('should throw an error on invalid options', function()\r\n      assert_error(function() ansicolors.noReset('%{blah}foo') end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "it('should add red color to text', function()\r\n      assert_equal(ansicolors.noReset('%{red}foo'), c27 .. '[31mfoo')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "it('should add red underlined text', function()\r\n      assert_equal(ansicolors.noReset('%{red underline}foo'), c27 .. '[31m' .. c27 .. '[4mfoo')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "it('should with heterogeneous attributes', function()\r\n      assert_equal(ansicolors.noReset('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function()\r\n      local prevConfig = package.config\r\n      package.config = \"\\\\\"\r\n      local colors = dofile 'ansicolors.lua'\r\n\r\n      assert_equal(colors('%{red underline}foo'), 'foo')\r\n\r\n      io.popen = prevIoPopen\r\n    end",
    "type": "function"
  }, {
    "id": 47,
    "text": "local prevConfig = package.config",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "package.config = \"\\\\\"",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "local colors = dofile 'ansicolors.lua'",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "assert_equal(colors('%{red underline}foo'), 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "io.popen = prevIoPopen",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n\r\n    it('should return a plain text string on systems with no package.config', function()\r\n      local prevConfig = package.config\r\n      package.config = \"\\\\\"\r\n      local colors = dofile 'ansicolors.lua'\r\n\r\n      assert_equal(colors('%{red underline}foo'), 'foo')\r\n\r\n      io.popen = prevIoPopen\r\n    end)\r\n\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "it('should return a plain text string on systems with no package.config', function()\r\n      local prevConfig = package.config\r\n      package.config = \"\\\\\"\r\n      local colors = dofile 'ansicolors.lua'\r\n\r\n      assert_equal(colors('%{red underline}foo'), 'foo')\r\n\r\n      io.popen = prevIoPopen\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n        package.config = \"\\\\\"\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), 'foo')\r\n      end",
    "type": "function"
  }, {
    "id": 57,
    "text": "assert_equal(colors('%{red}foo'), 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function()\r\n      it('should return a plain text string', function()\r\n        package.config = \"\\\\\"\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), 'foo')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 60,
    "text": "it('should return a plain text string', function()\r\n        package.config = \"\\\\\"\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), 'foo')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function()\r\n        package.config = \"\\\\\"\r\n        os.getenv = function () return true end\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n      end",
    "type": "function"
  }, {
    "id": 63,
    "text": "os.getenv = function () return true end",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "assert_equal(colors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n      it('should add ANSI escapes to text', function()\r\n        package.config = \"\\\\\"\r\n        os.getenv = function () return true end\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 67,
    "text": "it('should add ANSI escapes to text', function()\r\n        package.config = \"\\\\\"\r\n        os.getenv = function () return true end\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function()\r\n\r\n    describe('without ANSICON', function()\r\n      it('should return a plain text string', function()\r\n        package.config = \"\\\\\"\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), 'foo')\r\n      end)\r\n    end)\r\n\r\n    describe('with ANSICON', function()\r\n      it('should add ANSI escapes to text', function()\r\n        package.config = \"\\\\\"\r\n        os.getenv = function () return true end\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 70,
    "text": "describe('without ANSICON', function()\r\n      it('should return a plain text string', function()\r\n        package.config = \"\\\\\"\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), 'foo')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "describe('with ANSICON', function()\r\n      it('should add ANSI escapes to text', function()\r\n        package.config = \"\\\\\"\r\n        os.getenv = function () return true end\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n\r\n  it('should add resets if no options given', function()\r\n    assert_equal(ansicolors('foo'), c27 .. '[0m' .. 'foo' .. c27 .. '[0m' )\r\n  end)\r\n\r\n  it('should throw an error on invalid options', function()\r\n    assert_error(function() ansicolors('%{blah}foo') end)\r\n  end)\r\n\r\n  it('should add red color to text', function()\r\n    assert_equal(ansicolors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n  end)\r\n\r\n  it('should add red underlined text', function()\r\n    assert_equal(ansicolors('%{red underline}foo'),  c27 .. '[0m' .. c27 .. '[31m' .. c27 .. '[4mfoo' .. c27 .. '[0m')\r\n  end)\r\n\r\n  it('should with heterogeneous attributes', function()\r\n    assert_equal(ansicolors('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[0m' .. c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[0m')\r\n  end)\r\n\r\n  describe('noReset', function ()\r\n    it('should do nothing if no options given', function()\r\n      assert_equal(ansicolors.noReset('foo'), 'foo' )\r\n    end)\r\n\r\n    it('should throw an error on invalid options', function()\r\n      assert_error(function() ansicolors.noReset('%{blah}foo') end)\r\n    end)\r\n\r\n    it('should add red color to text', function()\r\n      assert_equal(ansicolors.noReset('%{red}foo'), c27 .. '[31mfoo')\r\n    end)\r\n\r\n    it('should add red underlined text', function()\r\n      assert_equal(ansicolors.noReset('%{red underline}foo'), c27 .. '[31m' .. c27 .. '[4mfoo')\r\n    end)\r\n\r\n    it('should with heterogeneous attributes', function()\r\n      assert_equal(ansicolors.noReset('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*')\r\n    end)\r\n\r\n  end)\r\n\r\n  describe('support detection', function()\r\n\r\n    it('should return a plain text string on systems with no package.config', function()\r\n      local prevConfig = package.config\r\n      package.config = \"\\\\\"\r\n      local colors = dofile 'ansicolors.lua'\r\n\r\n      assert_equal(colors('%{red underline}foo'), 'foo')\r\n\r\n      io.popen = prevIoPopen\r\n    end)\r\n\r\n  end)\r\n\r\n  describe('under Windows', function()\r\n\r\n    describe('without ANSICON', function()\r\n      it('should return a plain text string', function()\r\n        package.config = \"\\\\\"\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), 'foo')\r\n      end)\r\n    end)\r\n\r\n    describe('with ANSICON', function()\r\n      it('should add ANSI escapes to text', function()\r\n        package.config = \"\\\\\"\r\n        os.getenv = function () return true end\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n      end)\r\n    end)\r\n  end)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "it('should add resets if no options given', function()\r\n    assert_equal(ansicolors('foo'), c27 .. '[0m' .. 'foo' .. c27 .. '[0m' )\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "it('should throw an error on invalid options', function()\r\n    assert_error(function() ansicolors('%{blah}foo') end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "it('should add red color to text', function()\r\n    assert_equal(ansicolors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "it('should add red underlined text', function()\r\n    assert_equal(ansicolors('%{red underline}foo'),  c27 .. '[0m' .. c27 .. '[31m' .. c27 .. '[4mfoo' .. c27 .. '[0m')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "it('should with heterogeneous attributes', function()\r\n    assert_equal(ansicolors('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[0m' .. c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[0m')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "describe('noReset', function ()\r\n    it('should do nothing if no options given', function()\r\n      assert_equal(ansicolors.noReset('foo'), 'foo' )\r\n    end)\r\n\r\n    it('should throw an error on invalid options', function()\r\n      assert_error(function() ansicolors.noReset('%{blah}foo') end)\r\n    end)\r\n\r\n    it('should add red color to text', function()\r\n      assert_equal(ansicolors.noReset('%{red}foo'), c27 .. '[31mfoo')\r\n    end)\r\n\r\n    it('should add red underlined text', function()\r\n      assert_equal(ansicolors.noReset('%{red underline}foo'), c27 .. '[31m' .. c27 .. '[4mfoo')\r\n    end)\r\n\r\n    it('should with heterogeneous attributes', function()\r\n      assert_equal(ansicolors.noReset('%{bright white}*%{bright red}BEEP%{bright white}*'),  c27 .. '[1m' .. c27 .. '[37m*' .. c27 .. '[1m' .. c27 .. '[31mBEEP' .. c27 .. '[1m' .. c27 .. '[37m*')\r\n    end)\r\n\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "describe('support detection', function()\r\n\r\n    it('should return a plain text string on systems with no package.config', function()\r\n      local prevConfig = package.config\r\n      package.config = \"\\\\\"\r\n      local colors = dofile 'ansicolors.lua'\r\n\r\n      assert_equal(colors('%{red underline}foo'), 'foo')\r\n\r\n      io.popen = prevIoPopen\r\n    end)\r\n\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "describe('under Windows', function()\r\n\r\n    describe('without ANSICON', function()\r\n      it('should return a plain text string', function()\r\n        package.config = \"\\\\\"\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), 'foo')\r\n      end)\r\n    end)\r\n\r\n    describe('with ANSICON', function()\r\n      it('should add ANSI escapes to text', function()\r\n        package.config = \"\\\\\"\r\n        os.getenv = function () return true end\r\n        local colors = dofile 'ansicolors.lua'\r\n        assert_equal(colors('%{red}foo'), c27 .. '[0m' .. c27 .. '[31mfoo' .. c27 .. '[0m')\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "",
    "type": "function container"
  }, {
    "id": 84,
    "text": "noReset",
    "type": "global function"
  }, {
    "id": 85,
    "text": "ansicolors",
    "type": "global function"
  }, {
    "id": 86,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 87,
    "text": "colors",
    "type": "global function"
  }, {
    "id": 88,
    "text": "it",
    "type": "global function"
  }, {
    "id": 89,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 90,
    "text": "char",
    "type": "global function"
  }, {
    "id": 91,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 92,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 93,
    "text": "require",
    "type": "global function"
  }, {
    "id": 94,
    "text": "",
    "type": "variable container"
  }, {
    "id": 95,
    "text": "",
    "type": "require container"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  } ]
}