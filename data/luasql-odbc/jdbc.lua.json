{
  "_filename": "jdbc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasql-odbc/src/jdbc/src/lua/jdbc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 36
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 16
  }, {
    "from": 38,
    "label": "has",
    "to": 6
  }, {
    "from": 38,
    "label": "has",
    "to": 17
  }, {
    "from": 38,
    "label": "has",
    "to": 18
  }, {
    "from": 38,
    "label": "has",
    "to": 6
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 40,
    "label": "has",
    "to": 22
  }, {
    "from": 40,
    "label": "has",
    "to": 6
  }, {
    "from": 40,
    "label": "has",
    "to": 23
  }, {
    "from": 40,
    "label": "has",
    "to": 6
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 42,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 42,
    "label": "has",
    "to": 27
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 42,
    "label": "has",
    "to": 28
  }, {
    "from": 42,
    "label": "has",
    "to": 29
  }, {
    "from": 42,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 42,
    "label": "has",
    "to": 33
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 42,
    "label": "has",
    "to": 34
  }, {
    "from": 42,
    "label": "has",
    "to": 35
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 60
  }, {
    "from": 74,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 60
  }, {
    "from": 76,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 78
  }, {
    "from": 44,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 49
  }, {
    "from": 80,
    "label": "has",
    "to": 6
  }, {
    "from": 80,
    "label": "has",
    "to": 50
  }, {
    "from": 80,
    "label": "has",
    "to": 51
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 82,
    "label": "has",
    "to": 55
  }, {
    "from": 82,
    "label": "has",
    "to": 6
  }, {
    "from": 82,
    "label": "has",
    "to": 56
  }, {
    "from": 82,
    "label": "has",
    "to": 57
  }, {
    "from": 82,
    "label": "has",
    "to": 6
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 84,
    "label": "has",
    "to": 59
  }, {
    "from": 84,
    "label": "has",
    "to": 60
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 86,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 86,
    "label": "has",
    "to": 64
  }, {
    "from": 86,
    "label": "has",
    "to": 65
  }, {
    "from": 86,
    "label": "has",
    "to": 66
  }, {
    "from": 86,
    "label": "has",
    "to": 6
  }, {
    "from": 86,
    "label": "has",
    "to": 67
  }, {
    "from": 86,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 86,
    "label": "has",
    "to": 6
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 88,
    "label": "has",
    "to": 75
  }, {
    "from": 88,
    "label": "has",
    "to": 60
  }, {
    "from": 88,
    "label": "has",
    "to": 6
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 90,
    "label": "has",
    "to": 77
  }, {
    "from": 90,
    "label": "has",
    "to": 60
  }, {
    "from": 90,
    "label": "has",
    "to": 6
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 92,
    "label": "has",
    "to": 98
  }, {
    "from": 92,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 6
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 73
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 99,
    "label": "has",
    "to": 23
  }, {
    "from": 99,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 105,
    "label": "has",
    "to": 6
  }, {
    "from": 105,
    "label": "has",
    "to": 6
  }, {
    "from": 105,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 105,
    "label": "has",
    "to": 114
  }, {
    "from": 105,
    "label": "has",
    "to": 115
  }, {
    "from": 105,
    "label": "has",
    "to": 6
  }, {
    "from": 105,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 6
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 6
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 6
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 115
  }, {
    "from": 121,
    "label": "has",
    "to": 6
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 125
  }, {
    "from": 92,
    "label": "has",
    "to": 6
  }, {
    "from": 92,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 127,
    "label": "has",
    "to": 102
  }, {
    "from": 127,
    "label": "has",
    "to": 6
  }, {
    "from": 127,
    "label": "has",
    "to": 103
  }, {
    "from": 127,
    "label": "has",
    "to": 73
  }, {
    "from": 127,
    "label": "has",
    "to": 104
  }, {
    "from": 127,
    "label": "has",
    "to": 23
  }, {
    "from": 127,
    "label": "has",
    "to": 6
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 129,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 129,
    "label": "has",
    "to": 6
  }, {
    "from": 129,
    "label": "has",
    "to": 6
  }, {
    "from": 129,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 129,
    "label": "has",
    "to": 114
  }, {
    "from": 129,
    "label": "has",
    "to": 115
  }, {
    "from": 129,
    "label": "has",
    "to": 6
  }, {
    "from": 129,
    "label": "has",
    "to": 6
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 131,
    "label": "has",
    "to": 117
  }, {
    "from": 131,
    "label": "has",
    "to": 6
  }, {
    "from": 131,
    "label": "has",
    "to": 118
  }, {
    "from": 131,
    "label": "has",
    "to": 119
  }, {
    "from": 131,
    "label": "has",
    "to": 6
  }, {
    "from": 131,
    "label": "has",
    "to": 120
  }, {
    "from": 131,
    "label": "has",
    "to": 6
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 133,
    "label": "has",
    "to": 122
  }, {
    "from": 133,
    "label": "has",
    "to": 6
  }, {
    "from": 133,
    "label": "has",
    "to": 123
  }, {
    "from": 133,
    "label": "has",
    "to": 115
  }, {
    "from": 133,
    "label": "has",
    "to": 6
  }, {
    "from": 133,
    "label": "has",
    "to": 124
  }, {
    "from": 133,
    "label": "has",
    "to": 6
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "calls",
    "to": 137
  }, {
    "from": 44,
    "label": "calls",
    "to": 136
  }, {
    "from": 92,
    "label": "calls",
    "to": 136
  }, {
    "from": 44,
    "label": "calls",
    "to": 92
  }, {
    "from": 10,
    "label": "calls",
    "to": 44
  }, {
    "from": 4,
    "label": "calls",
    "to": 139
  }, {
    "from": 10,
    "label": "calls",
    "to": 139
  }, {
    "from": 10,
    "label": "calls",
    "to": 139
  }, {
    "from": 44,
    "label": "calls",
    "to": 139
  }, {
    "from": 44,
    "label": "calls",
    "to": 139
  }, {
    "from": 44,
    "label": "calls",
    "to": 139
  }, {
    "from": 44,
    "label": "calls",
    "to": 139
  }, {
    "from": 92,
    "label": "calls",
    "to": 139
  }, {
    "from": 92,
    "label": "calls",
    "to": 139
  }, {
    "from": 92,
    "label": "calls",
    "to": 139
  }, {
    "from": 92,
    "label": "calls",
    "to": 139
  }, {
    "from": 10,
    "label": "calls",
    "to": 142
  }, {
    "from": 44,
    "label": "calls",
    "to": 142
  }, {
    "from": 92,
    "label": "calls",
    "to": 142
  }, {
    "from": 4,
    "label": "calls",
    "to": 10
  }, {
    "from": 135,
    "label": "calls",
    "to": 141
  }, {
    "from": 10,
    "label": "calls",
    "to": 141
  }, {
    "from": 10,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 92,
    "label": "calls",
    "to": 141
  }, {
    "from": 92,
    "label": "calls",
    "to": 141
  }, {
    "from": 92,
    "label": "calls",
    "to": 141
  }, {
    "from": 92,
    "label": "calls",
    "to": 141
  }, {
    "from": 92,
    "label": "calls",
    "to": 141
  }, {
    "from": 92,
    "label": "calls",
    "to": 141
  }, {
    "from": 92,
    "label": "calls",
    "to": 143
  }, {
    "from": 10,
    "label": "calls",
    "to": 140
  }, {
    "from": 10,
    "label": "calls",
    "to": 140
  }, {
    "from": 10,
    "label": "calls",
    "to": 140
  }, {
    "from": 44,
    "label": "calls",
    "to": 140
  }, {
    "from": 44,
    "label": "calls",
    "to": 140
  }, {
    "from": 44,
    "label": "calls",
    "to": 140
  }, {
    "from": 44,
    "label": "calls",
    "to": 140
  }, {
    "from": 44,
    "label": "calls",
    "to": 140
  }, {
    "from": 44,
    "label": "calls",
    "to": 140
  }, {
    "from": 92,
    "label": "calls",
    "to": 140
  }, {
    "from": 92,
    "label": "calls",
    "to": 140
  }, {
    "from": 92,
    "label": "calls",
    "to": 140
  }, {
    "from": 92,
    "label": "calls",
    "to": 140
  }, {
    "from": 92,
    "label": "calls",
    "to": 140
  }, {
    "from": 10,
    "label": "calls",
    "to": 144
  }, {
    "from": 92,
    "label": "calls",
    "to": 138
  }, {
    "from": 1,
    "label": "contains",
    "to": 135
  }, {
    "from": 135,
    "label": "declares",
    "to": 4
  }, {
    "from": 135,
    "label": "declares",
    "to": 10
  }, {
    "from": 135,
    "label": "declares",
    "to": 38
  }, {
    "from": 135,
    "label": "declares",
    "to": 40
  }, {
    "from": 135,
    "label": "declares",
    "to": 42
  }, {
    "from": 135,
    "label": "declares",
    "to": 44
  }, {
    "from": 135,
    "label": "declares",
    "to": 80
  }, {
    "from": 135,
    "label": "declares",
    "to": 82
  }, {
    "from": 135,
    "label": "declares",
    "to": 84
  }, {
    "from": 135,
    "label": "declares",
    "to": 86
  }, {
    "from": 135,
    "label": "declares",
    "to": 88
  }, {
    "from": 135,
    "label": "declares",
    "to": 90
  }, {
    "from": 135,
    "label": "declares",
    "to": 92
  }, {
    "from": 135,
    "label": "declares",
    "to": 127
  }, {
    "from": 135,
    "label": "declares",
    "to": 129
  }, {
    "from": 135,
    "label": "declares",
    "to": 131
  }, {
    "from": 135,
    "label": "declares",
    "to": 133
  }, {
    "from": 1,
    "label": "contains",
    "to": 146
  }, {
    "from": 1,
    "label": "contains",
    "to": 147
  }, {
    "from": 146,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 146,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 146,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 146,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 146,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 146,
    "label": "initializes",
    "to": 158
  }, {
    "from": 146,
    "label": "initializes",
    "to": 159
  }, {
    "from": 146,
    "label": "initializes",
    "to": 160
  }, {
    "from": 152,
    "label": "contains",
    "to": 2
  }, {
    "from": 152,
    "label": "contains",
    "to": 3
  }, {
    "from": 145,
    "label": "contains",
    "to": 10
  }, {
    "from": 152,
    "label": "contains",
    "to": 10
  }, {
    "from": 145,
    "label": "contains",
    "to": 44
  }, {
    "from": 152,
    "label": "contains",
    "to": 44
  }, {
    "from": 145,
    "label": "contains",
    "to": 92
  }, {
    "from": 152,
    "label": "contains",
    "to": 92
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "jdbc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Private.createConnection(conObj, closeFunc)\r\n\r\n    local openCursors = {}\r\n    openCursors.n = 0\r\n    local isClosed = false\r\n    \r\n    local con = {}\r\n\r\n    setmetatable(con, metatable)\r\n\r\n    local autocommit = true\r\n    \r\n    local function closeCursor(cursor)\r\n    \r\n        if not openCursors[cursor] then\r\n            return false\r\n        end\r\n        \r\n        openCursors[cursor] = nil\r\n        openCursors.n = openCursors.n - 1\r\n    end\r\n    \r\n    function con:close()\r\n        if not self then error(\"You must provide a self parameter\") end\r\n\r\n        if isClosed or openCursors.n ~= 0 then\r\n            return false\r\n        end\r\n        \r\n        isClosed = true\r\n        local cond, err = pcall(conObj.RollbackTrans, conObj)\r\n        conObj:Close()\r\n        closeFunc(conObj)\r\n        \r\n        return true\r\n    end\r\n    \r\n    function con:commit()\r\n        if not self then error(\"You must provide a self parameter\") end\r\n\r\n        if isClosed then\r\n          error(\"Connection closed\")\r\n        end          \r\n          \r\n        local cond, err = pcall(conObj.CommitTrans, conObj)\r\n        if not cond then\r\n            return false, err\r\n        end\r\n\r\n        local cond, err = pcall(conObj.BeginTrans, conObj)\r\n        if not cond then\r\n            return false, err\r\n        end\r\n        \r\n        return true\r\n    end\r\n    \r\n    function con:execute(sql)\r\n        if not self then error(\"You must provide a self parameter\") end\r\n\r\n        if isClosed then\r\n          error(\"Connection closed\")\r\n        end          \r\n        \r\n        local cond, res, upcount = pcall(conObj.Execute, conObj, sql)\r\n        if not cond then\r\n            return nil, res\r\n        end\r\n        \r\n        if not upcount then upcount = 0 end\r\n         \r\n        if autocommit then\r\n          local cond, err = con:commit()\r\n          if not cond then\r\n            return nil, err\r\n          end\r\n        end\r\n\r\n        if res and res.State ~= 0  then\r\n            res = Private.createCursor(res, con, closeCursor)\r\n            openCursors[res] = true\r\n            openCursors.n = openCursors.n + 1\r\n        else\r\n            res = upcount\r\n        end\r\n        \r\n        return res\r\n    end\r\n    \r\n    function con:rollback()\r\n        if not self then error(\"You must provide a self parameter\") end\r\n\r\n        if isClosed then\r\n          error(\"Connection closed\")\r\n        end          \r\n          \r\n        local cond, err = pcall(conObj.RollbackTrans, conObj)\r\n        if not cond then\r\n            return false, err\r\n        end\r\n\r\n        local cond, err = pcall(conObj.BeginTrans, conObj)\r\n        if not cond then\r\n            return false, err\r\n        end\r\n        \r\n        return true\r\n    end\r\n    \r\n    function con:setautocommit(bool)\r\n        if not self then error(\"You must provide a self parameter\") end\r\n\r\n        if isClosed then\r\n          error(\"Connection closed\")\r\n        end          \r\n\r\n        local cond, err = pcall(conObj.CommitTrans, conObj)\r\n        if not cond then\r\n            return false, err\r\n        end\r\n\r\n        autocommit = bool\r\n\r\n        local cond, err = pcall(conObj.BeginTrans, conObj)\r\n        if not cond then\r\n            return false, err\r\n        end\r\n\r\n        return true\r\n    end\r\n   \r\n    return con\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function Private.createCursor(rs, con, closeFunc)\r\n\r\n    local isClosed = false\r\n    local cursor = rs\r\n    local res = {}\r\n    local col_names = nil\r\n    local col_types = nil\r\n\r\n    setmetatable(res, metatable)\r\n    \r\n    function res:close()\r\n        if not self then error(\"You must provide a self parameter\") end\r\n    \r\n        if isClosed then\r\n            return false\r\n        end\r\n        \r\n        rs:Close()\r\n        closeFunc(res, con)\r\n        \r\n        isClosed = true\r\n        \r\n        return true\r\n    end\r\n    \r\n    function res:fetch(tb, modestring)\r\n        if not self then error(\"You must provide a self parameter\") end\r\n\r\n        if isClosed then\r\n          error(\"Cursor closed\")\r\n        end          \r\n\r\n        local arg_tb = tb\r\n    \r\n        if cursor.EOF then\r\n          return nil, \"End of cursor reached\"\r\n        end\r\n        \r\n        if tb == nil or type(tb) ~= \"table\" then\r\n            tb = {}\r\n        end\r\n        \r\n        if modestring == nil or type(modestring) ~= \"string\" then\r\n            modestring = \"n\"\r\n        end\r\n        \r\n        for i = 0, cursor.Fields.Count-1 do\r\n          local fields = cursor.Fields\r\n          local cond, field = pcall(fields.Item, fields, i)\r\n          if not cond then\r\n            return nil, field\r\n          end\r\n          if modestring == \"n\" or modestring == \"an\" or modestring == \"na\" then\r\n            tb[i+1] = field.Value\r\n          end\r\n          if modestring == \"a\" or modestring == \"an\" or modestring == \"na\" then\r\n            tb[field.Name] = field.Value\r\n          end\r\n        end\r\n        local cond, err = pcall(cursor.MoveNext, cursor)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n        \r\n        if modestring == \"n\" and not arg_tb then\r\n          return unpack(tb)\r\n        else\r\n          return tb\r\n        end  \r\n    end\r\n    \r\n    function res:getcolnames()\r\n        if not self then error(\"You must provide a self parameter\") end\r\n\r\n        if isClosed then\r\n          error(\"Cursor closed\")\r\n        end          \r\n\r\n        if col_names then return col_names end\r\n        \r\n        col_names = {}\r\n        local tb = col_names\r\n        \r\n        for i = 0, cursor.Fields.Count-1 do\r\n          local fields = cursor.Fields\r\n          local cond, field = pcall(fields.Item, fields, i)\r\n          if not cond then\r\n            return nil, field\r\n          end\r\n          tb[i+1] = field.Name\r\n        end\r\n                \r\n        return tb\r\n    end\r\n    \r\n    function res:getcoltypes()\r\n        if not self then error(\"You must provide a self parameter\") end\r\n\r\n        if isClosed then\r\n          error(\"Cursor closed\")\r\n        end          \r\n\r\n        if col_types then return col_types end\r\n        \r\n        col_types = {}\r\n        local tb = col_types\r\n       \r\n        for i = 0, cursor.Fields.Count-1 do\r\n          local fields = cursor.Fields\r\n          local cond, field = pcall(fields.Item, fields, i)\r\n          if not cond then\r\n            return nil, field\r\n          end\r\n          tb[i+1] = ADOTypes[field.Type]\r\n        end\r\n                \r\n        return tb\r\n    end\r\n    \r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function luasql.jdbc(driver)\r\n\r\n    if driver == nil then\r\n        return nil, \"Error. Argument #1 must be the jdbc driver class.\"\r\n    end\r\n    \r\n    local cond, err = pcall(luajava.bindClass, driver)\r\n    if not cond then\r\n        return nil, err\r\n    end\r\n    \r\n    return Private.createEnv()\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if driver == nil then\r\n        return nil, \"Error. Argument #1 must be the jdbc driver class.\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "local cond, err = pcall(luajava.bindClass, driver)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not cond then\r\n        return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function Private.createEnv()\r\n\r\n    local isClosed  = false\r\n    local openConns = {}\r\n    openConns.n     = 0\r\n\r\n    local env = {}\r\n    \r\n    local function closeConn(con)\r\n    \r\n        if not openConns[con] then\r\n            return false\r\n        end\r\n        \r\n        openConns[con] = nil\r\n        openConns.n = openConns.n - 1\r\n        \r\n        return true\r\n    end\r\n    \r\n    function env:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"environment expected\")\r\n        end\r\n        \r\n        if isClosed or openConns.n ~= 0 then\r\n            return false\r\n        end\r\n        \r\n        isClosed = true\r\n        \r\n        return true\r\n    end\r\n    \r\n    function env:connect(sourcename, username, password)\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"environment expected\")\r\n        end\r\n\r\n        if isClosed then\r\n            error(LUASQL_PREFIX..\"environment is closed\")\r\n            --return nil, \"Environment closed.\"\r\n        end\r\n        if sourcename == nil then\r\n            return nil, \"Invalid sourcename.\"\r\n        end\r\n\r\n        local driverManager = luajava.bindClass(\"java.sql.DriverManager\")\r\n        \r\n        local cond, con\r\n        if username == nil and password == nil then\r\n            cond, con = pcall(driverManager.getConnection, driverManager, sourcename)\r\n        else\r\n            cond, con = pcall(driverManager.getConnection, driverManager, sourcename, username or '', password or '')\r\n        end\r\n        \r\n        if not cond then\r\n            return nil, con\r\n        end\r\n        \r\n        openConns[con] = true\r\n        openConns.n = openConns.n + 1\r\n        \r\n        return Private.createConnection(con, closeConn)\r\n    end\r\n    \r\n    -- For compatibility with other drivers\r\n    setmetatable(env, {__metatable = LUASQL_PREFIX..\"you're not allowed to get this metatable\"})\r\n    \r\n    return env\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local isClosed  = false",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local openConns = {}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "openConns.n     = 0",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local env = {}",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local function closeConn(con)\r\n    \r\n        if not openConns[con] then\r\n            return false\r\n        end\r\n        \r\n        openConns[con] = nil\r\n        openConns.n = openConns.n - 1\r\n        \r\n        return true\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 16,
    "text": "if not openConns[con] then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "openConns[con] = nil",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "openConns.n = openConns.n - 1",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "function env:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"environment expected\")\r\n        end\r\n        \r\n        if isClosed or openConns.n ~= 0 then\r\n            return false\r\n        end\r\n        \r\n        isClosed = true\r\n        \r\n        return true\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 20,
    "text": "if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"environment expected\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "error(LUASQL_PREFIX..\"environment expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if isClosed or openConns.n ~= 0 then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "isClosed = true",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "function env:connect(sourcename, username, password)\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"environment expected\")\r\n        end\r\n\r\n        if isClosed then\r\n            error(LUASQL_PREFIX..\"environment is closed\")\r\n            --return nil, \"Environment closed.\"\r\n        end\r\n        if sourcename == nil then\r\n            return nil, \"Invalid sourcename.\"\r\n        end\r\n\r\n        local driverManager = luajava.bindClass(\"java.sql.DriverManager\")\r\n        \r\n        local cond, con\r\n        if username == nil and password == nil then\r\n            cond, con = pcall(driverManager.getConnection, driverManager, sourcename)\r\n        else\r\n            cond, con = pcall(driverManager.getConnection, driverManager, sourcename, username or '', password or '')\r\n        end\r\n        \r\n        if not cond then\r\n            return nil, con\r\n        end\r\n        \r\n        openConns[con] = true\r\n        openConns.n = openConns.n + 1\r\n        \r\n        return Private.createConnection(con, closeConn)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 25,
    "text": "if isClosed then\r\n            error(LUASQL_PREFIX..\"environment is closed\")\r\n            --return nil, \"Environment closed.\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "error(LUASQL_PREFIX..\"environment is closed\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "if sourcename == nil then\r\n            return nil, \"Invalid sourcename.\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local driverManager = luajava.bindClass(\"java.sql.DriverManager\")",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local cond, con",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if username == nil and password == nil then\r\n            cond, con = pcall(driverManager.getConnection, driverManager, sourcename)\r\n        else\r\n            cond, con = pcall(driverManager.getConnection, driverManager, sourcename, username or '', password or '')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "cond, con = pcall(driverManager.getConnection, driverManager, sourcename)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "cond, con = pcall(driverManager.getConnection, driverManager, sourcename, username or '', password or '')",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if not cond then\r\n            return nil, con\r\n        end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "openConns[con] = true",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "openConns.n = openConns.n + 1",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "setmetatable(env, {__metatable = LUASQL_PREFIX..\"you're not allowed to get this metatable\"})",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function closeConn(con)\r\n    \r\n        if not openConns[con] then\r\n            return false\r\n        end\r\n        \r\n        openConns[con] = nil\r\n        openConns.n = openConns.n - 1\r\n        \r\n        return true\r\n    end",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function env:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"environment expected\")\r\n        end\r\n        \r\n        if isClosed or openConns.n ~= 0 then\r\n            return false\r\n        end\r\n        \r\n        isClosed = true\r\n        \r\n        return true\r\n    end",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function env:connect(sourcename, username, password)\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"environment expected\")\r\n        end\r\n\r\n        if isClosed then\r\n            error(LUASQL_PREFIX..\"environment is closed\")\r\n            --return nil, \"Environment closed.\"\r\n        end\r\n        if sourcename == nil then\r\n            return nil, \"Invalid sourcename.\"\r\n        end\r\n\r\n        local driverManager = luajava.bindClass(\"java.sql.DriverManager\")\r\n        \r\n        local cond, con\r\n        if username == nil and password == nil then\r\n            cond, con = pcall(driverManager.getConnection, driverManager, sourcename)\r\n        else\r\n            cond, con = pcall(driverManager.getConnection, driverManager, sourcename, username or '', password or '')\r\n        end\r\n        \r\n        if not cond then\r\n            return nil, con\r\n        end\r\n        \r\n        openConns[con] = true\r\n        openConns.n = openConns.n + 1\r\n        \r\n        return Private.createConnection(con, closeConn)\r\n    end",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function Private.createConnection(conObj, closeFunc)\r\n\r\n    local openCursors = {}\r\n    openCursors.n = 0\r\n    \r\n    local con = {}\r\n    \r\n    local function closeCursor(cursor)\r\n    \r\n        if not openCursors[cursor] then\r\n            return false\r\n        end\r\n        \r\n        openCursors[cursor] = nil\r\n        openCursors.n = openCursors.n - 1\r\n    end\r\n    \r\n    function con:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        if conObj:isClosed() or openCursors.n ~= 0 then\r\n            return false\r\n        end\r\n        \r\n        conObj:close()\r\n        closeFunc(conObj)\r\n        \r\n        return true\r\n    end\r\n    \r\n    function con:commit()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.commit, conObj)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end\r\n    \r\n    function con:execute(sql)\r\n    \r\n        if conObj:isClosed() then\r\n            error(LUASQL_PREFIX..\"connection is closed\")\r\n        end\r\n        \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local st = conObj:createStatement()\r\n\r\n        local cond, isRS = pcall(st.execute, st, sql)\r\n        if not cond then\r\n            return nil, isRS\r\n        end\r\n\r\n        local res;\r\n        if isRS then\r\n            res = Private.createCursor(st:getResultSet(), st, closeCursor, con)\r\n            openCursors[res] = true\r\n            openCursors.n = openCursors.n + 1\r\n        else\r\n            res = st:getUpdateCount()\r\n            st:close();\r\n        end\r\n        \r\n        return res\r\n    end\r\n    \r\n    function con:rollback()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.rollback, conObj)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end\r\n    \r\n    function con:setautocommit(bool)\r\n\r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.setAutoCommit, conObj, bool)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end\r\n   \r\n    -- For compatibility with other drivers\r\n    setmetatable(con, {__metatable = LUASQL_PREFIX..\"you're not allowed to get this metatable\"})\r\n\r\n    return con\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local openCursors = {}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "openCursors.n = 0",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local con = {}",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local function closeCursor(cursor)\r\n    \r\n        if not openCursors[cursor] then\r\n            return false\r\n        end\r\n        \r\n        openCursors[cursor] = nil\r\n        openCursors.n = openCursors.n - 1\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 49,
    "text": "if not openCursors[cursor] then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "openCursors[cursor] = nil",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "openCursors.n = openCursors.n - 1",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "function con:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        if conObj:isClosed() or openCursors.n ~= 0 then\r\n            return false\r\n        end\r\n        \r\n        conObj:close()\r\n        closeFunc(conObj)\r\n        \r\n        return true\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 53,
    "text": "if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "error(LUASQL_PREFIX..\"connection expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if conObj:isClosed() or openCursors.n ~= 0 then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "conObj:close()",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "closeFunc(conObj)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "function con:commit()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.commit, conObj)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 59,
    "text": "local cond, err = pcall(conObj.commit, conObj)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if not cond then\r\n            return nil, err\r\n        end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "function con:execute(sql)\r\n    \r\n        if conObj:isClosed() then\r\n            error(LUASQL_PREFIX..\"connection is closed\")\r\n        end\r\n        \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local st = conObj:createStatement()\r\n\r\n        local cond, isRS = pcall(st.execute, st, sql)\r\n        if not cond then\r\n            return nil, isRS\r\n        end\r\n\r\n        local res;\r\n        if isRS then\r\n            res = Private.createCursor(st:getResultSet(), st, closeCursor, con)\r\n            openCursors[res] = true\r\n            openCursors.n = openCursors.n + 1\r\n        else\r\n            res = st:getUpdateCount()\r\n            st:close();\r\n        end\r\n        \r\n        return res\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 62,
    "text": "if conObj:isClosed() then\r\n            error(LUASQL_PREFIX..\"connection is closed\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "error(LUASQL_PREFIX..\"connection is closed\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "local st = conObj:createStatement()",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local cond, isRS = pcall(st.execute, st, sql)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if not cond then\r\n            return nil, isRS\r\n        end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if isRS then\r\n            res = Private.createCursor(st:getResultSet(), st, closeCursor, con)\r\n            openCursors[res] = true\r\n            openCursors.n = openCursors.n + 1\r\n        else\r\n            res = st:getUpdateCount()\r\n            st:close();\r\n        end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "res = Private.createCursor(st:getResultSet(), st, closeCursor, con)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "openCursors[res] = true",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "openCursors.n = openCursors.n + 1",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "res = st:getUpdateCount()",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "st:close()",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "function con:rollback()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.rollback, conObj)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 75,
    "text": "local cond, err = pcall(conObj.rollback, conObj)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "function con:setautocommit(bool)\r\n\r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.setAutoCommit, conObj, bool)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 77,
    "text": "local cond, err = pcall(conObj.setAutoCommit, conObj, bool)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "setmetatable(con, {__metatable = LUASQL_PREFIX..\"you're not allowed to get this metatable\"})",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "local function closeCursor(cursor)\r\n    \r\n        if not openCursors[cursor] then\r\n            return false\r\n        end\r\n        \r\n        openCursors[cursor] = nil\r\n        openCursors.n = openCursors.n - 1\r\n    end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function con:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        if conObj:isClosed() or openCursors.n ~= 0 then\r\n            return false\r\n        end\r\n        \r\n        conObj:close()\r\n        closeFunc(conObj)\r\n        \r\n        return true\r\n    end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function con:commit()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.commit, conObj)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function con:execute(sql)\r\n    \r\n        if conObj:isClosed() then\r\n            error(LUASQL_PREFIX..\"connection is closed\")\r\n        end\r\n        \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local st = conObj:createStatement()\r\n\r\n        local cond, isRS = pcall(st.execute, st, sql)\r\n        if not cond then\r\n            return nil, isRS\r\n        end\r\n\r\n        local res;\r\n        if isRS then\r\n            res = Private.createCursor(st:getResultSet(), st, closeCursor, con)\r\n            openCursors[res] = true\r\n            openCursors.n = openCursors.n + 1\r\n        else\r\n            res = st:getUpdateCount()\r\n            st:close();\r\n        end\r\n        \r\n        return res\r\n    end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function con:rollback()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.rollback, conObj)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function con:setautocommit(bool)\r\n\r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"connection expected\")\r\n        end\r\n\r\n        local cond, err = pcall(conObj.setAutoCommit, conObj, bool)\r\n        if not cond then\r\n            return nil, err\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function Private.createCursor(rs, st, closeFunc, con)\r\n\r\n    local isClosed = false\r\n    local cursor = Private.createJavaCursor(rs)\r\n    local res = {}\r\n    local names\r\n    local types\r\n    \r\n    res._con = con\r\n    \r\n    function res:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if isClosed then\r\n            return false\r\n        end\r\n        \r\n        rs:close()\r\n        st:close()\r\n        closeFunc(res)\r\n        \r\n        isClosed = true\r\n        \r\n        return true\r\n    end\r\n    \r\n    function res:fetch(tb, modestring)\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if tb == nil or type(tb) ~= \"table\" then\r\n            tb = {}\r\n            local cond, tb = pcall(cursor.fetch, cursor, tb, \"n\")\r\n            if not cond then\r\n                error(LUASQ_PREFIX..\"error fetching result\")\r\n            end\r\n            \r\n            if tb then \r\n                return unpack(tb) \r\n            else \r\n                return nil \r\n            end\r\n        end\r\n        \r\n        if modestring == nil or type(modestring) ~= \"string\" then\r\n            modestring = \"n\"\r\n        end\r\n        \r\n        local cond, tb = pcall(cursor.fetch, cursor, tb, modestring)\r\n        if not cond then\r\n            return nil, tb\r\n        end\r\n        \r\n        return tb\r\n    end\r\n    \r\n    function res:getcolnames()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if names then\r\n            return names\r\n        end\r\n        \r\n        local cond, tb = pcall (cursor.getcolnames, cursor)\r\n        if not cond then\r\n            return cond, tb\r\n        end\r\n        \r\n        names = tb\r\n        \r\n        return tb\r\n    end\r\n    \r\n    function res:getcoltypes()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n        \r\n        if types then\r\n            return types\r\n        end\r\n\r\n        local cond, tb = pcall(cursor.getcoltypes, cursor)\r\n        if not cond then\r\n            return nil, tb\r\n        end\r\n        \r\n        types = tb\r\n        \r\n        return tb\r\n    end\r\n    \r\n    -- For compatibility with other drivers\r\n    setmetatable(res, {__metatable = LUASQL_PREFIX..\"you're not allowed to get this metatable\"})\r\n\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "local isClosed = false",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local cursor = Private.createJavaCursor(rs)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "local names",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local types",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "res._con = con",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "function res:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if isClosed then\r\n            return false\r\n        end\r\n        \r\n        rs:close()\r\n        st:close()\r\n        closeFunc(res)\r\n        \r\n        isClosed = true\r\n        \r\n        return true\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 100,
    "text": "if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "error(LUASQL_PREFIX..\"cursor expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "if isClosed then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "rs:close()",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "closeFunc(res)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "function res:fetch(tb, modestring)\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if tb == nil or type(tb) ~= \"table\" then\r\n            tb = {}\r\n            local cond, tb = pcall(cursor.fetch, cursor, tb, \"n\")\r\n            if not cond then\r\n                error(LUASQ_PREFIX..\"error fetching result\")\r\n            end\r\n            \r\n            if tb then \r\n                return unpack(tb) \r\n            else \r\n                return nil \r\n            end\r\n        end\r\n        \r\n        if modestring == nil or type(modestring) ~= \"string\" then\r\n            modestring = \"n\"\r\n        end\r\n        \r\n        local cond, tb = pcall(cursor.fetch, cursor, tb, modestring)\r\n        if not cond then\r\n            return nil, tb\r\n        end\r\n        \r\n        return tb\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 106,
    "text": "if tb == nil or type(tb) ~= \"table\" then\r\n            tb = {}\r\n            local cond, tb = pcall(cursor.fetch, cursor, tb, \"n\")\r\n            if not cond then\r\n                error(LUASQ_PREFIX..\"error fetching result\")\r\n            end\r\n            \r\n            if tb then \r\n                return unpack(tb) \r\n            else \r\n                return nil \r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "tb = {}",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "local cond, tb = pcall(cursor.fetch, cursor, tb, \"n\")",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if not cond then\r\n                error(LUASQ_PREFIX..\"error fetching result\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "error(LUASQ_PREFIX..\"error fetching result\")",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "if tb then \r\n                return unpack(tb) \r\n            else \r\n                return nil \r\n            end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "if modestring == nil or type(modestring) ~= \"string\" then\r\n            modestring = \"n\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "modestring = \"n\"",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "local cond, tb = pcall(cursor.fetch, cursor, tb, modestring)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if not cond then\r\n            return nil, tb\r\n        end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "function res:getcolnames()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if names then\r\n            return names\r\n        end\r\n        \r\n        local cond, tb = pcall (cursor.getcolnames, cursor)\r\n        if not cond then\r\n            return cond, tb\r\n        end\r\n        \r\n        names = tb\r\n        \r\n        return tb\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 117,
    "text": "if names then\r\n            return names\r\n        end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "local cond, tb = pcall (cursor.getcolnames, cursor)",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if not cond then\r\n            return cond, tb\r\n        end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "names = tb",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "function res:getcoltypes()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n        \r\n        if types then\r\n            return types\r\n        end\r\n\r\n        local cond, tb = pcall(cursor.getcoltypes, cursor)\r\n        if not cond then\r\n            return nil, tb\r\n        end\r\n        \r\n        types = tb\r\n        \r\n        return tb\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 122,
    "text": "if types then\r\n            return types\r\n        end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "local cond, tb = pcall(cursor.getcoltypes, cursor)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "types = tb",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "setmetatable(res, {__metatable = LUASQL_PREFIX..\"you're not allowed to get this metatable\"})",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function res:close()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if isClosed then\r\n            return false\r\n        end\r\n        \r\n        rs:close()\r\n        st:close()\r\n        closeFunc(res)\r\n        \r\n        isClosed = true\r\n        \r\n        return true\r\n    end",
    "type": "function"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function res:fetch(tb, modestring)\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if tb == nil or type(tb) ~= \"table\" then\r\n            tb = {}\r\n            local cond, tb = pcall(cursor.fetch, cursor, tb, \"n\")\r\n            if not cond then\r\n                error(LUASQ_PREFIX..\"error fetching result\")\r\n            end\r\n            \r\n            if tb then \r\n                return unpack(tb) \r\n            else \r\n                return nil \r\n            end\r\n        end\r\n        \r\n        if modestring == nil or type(modestring) ~= \"string\" then\r\n            modestring = \"n\"\r\n        end\r\n        \r\n        local cond, tb = pcall(cursor.fetch, cursor, tb, modestring)\r\n        if not cond then\r\n            return nil, tb\r\n        end\r\n        \r\n        return tb\r\n    end",
    "type": "function"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function res:getcolnames()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n\r\n        if names then\r\n            return names\r\n        end\r\n        \r\n        local cond, tb = pcall (cursor.getcolnames, cursor)\r\n        if not cond then\r\n            return cond, tb\r\n        end\r\n        \r\n        names = tb\r\n        \r\n        return tb\r\n    end",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function res:getcoltypes()\r\n    \r\n        -- For compatibility with other drivers\r\n        if type(self) ~= \"table\" then\r\n            error(LUASQL_PREFIX..\"cursor expected\")\r\n        end\r\n        \r\n        if types then\r\n            return types\r\n        end\r\n\r\n        local cond, tb = pcall(cursor.getcoltypes, cursor)\r\n        if not cond then\r\n            return nil, tb\r\n        end\r\n        \r\n        types = tb\r\n        \r\n        return tb\r\n    end",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "",
    "type": "function container"
  }, {
    "id": 136,
    "text": "closeFunc",
    "type": "global function"
  }, {
    "id": 137,
    "text": "loadLib",
    "type": "global function"
  }, {
    "id": 138,
    "text": "createJavaCursor",
    "type": "global function"
  }, {
    "id": 139,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 140,
    "text": "error",
    "type": "global function"
  }, {
    "id": 141,
    "text": "type",
    "type": "global function"
  }, {
    "id": 142,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 143,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 144,
    "text": "bindClass",
    "type": "global function"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "variable container"
  }, {
    "id": 147,
    "text": "",
    "type": "require container"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "string"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "string"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 154,
    "text": "",
    "type": "global variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "global variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "global variable"
  }, {
    "id": 159,
    "text": "",
    "type": "global variable"
  }, {
    "id": 160,
    "text": "",
    "type": "global variable"
  } ]
}