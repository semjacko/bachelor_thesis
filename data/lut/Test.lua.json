{
  "_filename": "Test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lut/lut/Test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 35,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 36
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 45,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 45,
    "label": "has",
    "to": 58
  }, {
    "from": 45,
    "label": "has",
    "to": 59
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 21
  }, {
    "from": 61,
    "label": "has",
    "to": 21
  }, {
    "from": 61,
    "label": "has",
    "to": 21
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 81
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 81
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 99
  }, {
    "from": 92,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 105
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 112
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 116,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 135,
    "label": "has",
    "to": 141
  }, {
    "from": 135,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 142,
    "label": "has",
    "to": 146
  }, {
    "from": 135,
    "label": "has",
    "to": 147
  }, {
    "from": 135,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 150,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 153
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 150,
    "label": "has",
    "to": 161
  }, {
    "from": 150,
    "label": "has",
    "to": 162
  }, {
    "from": 150,
    "label": "has",
    "to": 163
  }, {
    "from": 150,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 21
  }, {
    "from": 150,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 170,
    "label": "has",
    "to": 180
  }, {
    "from": 170,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 170,
    "label": "has",
    "to": 186
  }, {
    "from": 149,
    "label": "has",
    "to": 187
  }, {
    "from": 149,
    "label": "has",
    "to": 188
  }, {
    "from": 149,
    "label": "has",
    "to": 189
  }, {
    "from": 149,
    "label": "has",
    "to": 190
  }, {
    "from": 149,
    "label": "has",
    "to": 191
  }, {
    "from": 149,
    "label": "has",
    "to": 192
  }, {
    "from": 149,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 21
  }, {
    "from": 149,
    "label": "has",
    "to": 194
  }, {
    "from": 149,
    "label": "has",
    "to": 195
  }, {
    "from": 149,
    "label": "has",
    "to": 196
  }, {
    "from": 149,
    "label": "has",
    "to": 197
  }, {
    "from": 149,
    "label": "has",
    "to": 198
  }, {
    "from": 149,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 199,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 206,
    "label": "has",
    "to": 209
  }, {
    "from": 206,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 206,
    "label": "has",
    "to": 212
  }, {
    "from": 206,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 206,
    "label": "has",
    "to": 215
  }, {
    "from": 206,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 206,
    "label": "has",
    "to": 219
  }, {
    "from": 206,
    "label": "has",
    "to": 220
  }, {
    "from": 149,
    "label": "has",
    "to": 221
  }, {
    "from": 149,
    "label": "has",
    "to": 222
  }, {
    "from": 149,
    "label": "has",
    "to": 223
  }, {
    "from": 149,
    "label": "has",
    "to": 224
  }, {
    "from": 149,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 168
  }, {
    "from": 226,
    "label": "has",
    "to": 169
  }, {
    "from": 226,
    "label": "has",
    "to": 21
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 171
  }, {
    "from": 228,
    "label": "has",
    "to": 172
  }, {
    "from": 228,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 228,
    "label": "has",
    "to": 180
  }, {
    "from": 228,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 228,
    "label": "has",
    "to": 186
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 21
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 231,
    "label": "has",
    "to": 236
  }, {
    "from": 231,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 231,
    "label": "has",
    "to": 241
  }, {
    "from": 231,
    "label": "has",
    "to": 242
  }, {
    "from": 231,
    "label": "has",
    "to": 243
  }, {
    "from": 231,
    "label": "has",
    "to": 244
  }, {
    "from": 231,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 246,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 21
  }, {
    "from": 246,
    "label": "has",
    "to": 250
  }, {
    "from": 231,
    "label": "has",
    "to": 251
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 252,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 38
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 260,
    "label": "has",
    "to": 263
  }, {
    "from": 260,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 264,
    "label": "has",
    "to": 266
  }, {
    "from": 264,
    "label": "has",
    "to": 267
  }, {
    "from": 260,
    "label": "has",
    "to": 43
  }, {
    "from": 260,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 269,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 273,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 281
  }, {
    "from": 273,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 282,
    "label": "has",
    "to": 284
  }, {
    "from": 269,
    "label": "has",
    "to": 285
  }, {
    "from": 269,
    "label": "has",
    "to": 286
  }, {
    "from": 269,
    "label": "has",
    "to": 287
  }, {
    "from": 288,
    "label": "has",
    "to": 21
  }, {
    "from": 74,
    "label": "calls",
    "to": 315
  }, {
    "from": 77,
    "label": "calls",
    "to": 315
  }, {
    "from": 80,
    "label": "calls",
    "to": 315
  }, {
    "from": 80,
    "label": "calls",
    "to": 315
  }, {
    "from": 92,
    "label": "calls",
    "to": 315
  }, {
    "from": 101,
    "label": "calls",
    "to": 315
  }, {
    "from": 104,
    "label": "calls",
    "to": 315
  }, {
    "from": 104,
    "label": "calls",
    "to": 315
  }, {
    "from": 108,
    "label": "calls",
    "to": 315
  }, {
    "from": 108,
    "label": "calls",
    "to": 315
  }, {
    "from": 111,
    "label": "calls",
    "to": 315
  }, {
    "from": 111,
    "label": "calls",
    "to": 315
  }, {
    "from": 123,
    "label": "calls",
    "to": 315
  }, {
    "from": 126,
    "label": "calls",
    "to": 315
  }, {
    "from": 129,
    "label": "calls",
    "to": 315
  }, {
    "from": 132,
    "label": "calls",
    "to": 315
  }, {
    "from": 149,
    "label": "calls",
    "to": 315
  }, {
    "from": 149,
    "label": "calls",
    "to": 315
  }, {
    "from": 231,
    "label": "calls",
    "to": 315
  }, {
    "from": 231,
    "label": "calls",
    "to": 315
  }, {
    "from": 231,
    "label": "calls",
    "to": 315
  }, {
    "from": 231,
    "label": "calls",
    "to": 315
  }, {
    "from": 269,
    "label": "calls",
    "to": 315
  }, {
    "from": 269,
    "label": "calls",
    "to": 315
  }, {
    "from": 269,
    "label": "calls",
    "to": 315
  }, {
    "from": 269,
    "label": "calls",
    "to": 315
  }, {
    "from": 269,
    "label": "calls",
    "to": 315
  }, {
    "from": 269,
    "label": "calls",
    "to": 315
  }, {
    "from": 269,
    "label": "calls",
    "to": 315
  }, {
    "from": 269,
    "label": "calls",
    "to": 315
  }, {
    "from": 87,
    "label": "calls",
    "to": 80
  }, {
    "from": 92,
    "label": "calls",
    "to": 80
  }, {
    "from": 92,
    "label": "calls",
    "to": 80
  }, {
    "from": 71,
    "label": "calls",
    "to": 65
  }, {
    "from": 74,
    "label": "calls",
    "to": 65
  }, {
    "from": 77,
    "label": "calls",
    "to": 65
  }, {
    "from": 80,
    "label": "calls",
    "to": 65
  }, {
    "from": 80,
    "label": "calls",
    "to": 65
  }, {
    "from": 92,
    "label": "calls",
    "to": 65
  }, {
    "from": 101,
    "label": "calls",
    "to": 65
  }, {
    "from": 104,
    "label": "calls",
    "to": 65
  }, {
    "from": 104,
    "label": "calls",
    "to": 65
  }, {
    "from": 108,
    "label": "calls",
    "to": 65
  }, {
    "from": 108,
    "label": "calls",
    "to": 65
  }, {
    "from": 111,
    "label": "calls",
    "to": 65
  }, {
    "from": 111,
    "label": "calls",
    "to": 65
  }, {
    "from": 116,
    "label": "calls",
    "to": 65
  }, {
    "from": 116,
    "label": "calls",
    "to": 65
  }, {
    "from": 123,
    "label": "calls",
    "to": 65
  }, {
    "from": 126,
    "label": "calls",
    "to": 65
  }, {
    "from": 129,
    "label": "calls",
    "to": 65
  }, {
    "from": 132,
    "label": "calls",
    "to": 65
  }, {
    "from": 135,
    "label": "calls",
    "to": 65
  }, {
    "from": 61,
    "label": "calls",
    "to": 299
  }, {
    "from": 61,
    "label": "calls",
    "to": 299
  }, {
    "from": 23,
    "label": "calls",
    "to": 12
  }, {
    "from": 104,
    "label": "calls",
    "to": 329
  }, {
    "from": 108,
    "label": "calls",
    "to": 329
  }, {
    "from": 111,
    "label": "calls",
    "to": 329
  }, {
    "from": 135,
    "label": "calls",
    "to": 332
  }, {
    "from": 116,
    "label": "calls",
    "to": 326
  }, {
    "from": 231,
    "label": "calls",
    "to": 317
  }, {
    "from": 45,
    "label": "calls",
    "to": 301
  }, {
    "from": 45,
    "label": "calls",
    "to": 301
  }, {
    "from": 149,
    "label": "calls",
    "to": 301
  }, {
    "from": 149,
    "label": "calls",
    "to": 301
  }, {
    "from": 149,
    "label": "calls",
    "to": 301
  }, {
    "from": 231,
    "label": "calls",
    "to": 301
  }, {
    "from": 260,
    "label": "calls",
    "to": 301
  }, {
    "from": 231,
    "label": "calls",
    "to": 302
  }, {
    "from": 231,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 269,
    "label": "calls",
    "to": 302
  }, {
    "from": 149,
    "label": "calls",
    "to": 318
  }, {
    "from": 149,
    "label": "calls",
    "to": 318
  }, {
    "from": 149,
    "label": "calls",
    "to": 319
  }, {
    "from": 149,
    "label": "calls",
    "to": 298
  }, {
    "from": 92,
    "label": "calls",
    "to": 321
  }, {
    "from": 92,
    "label": "calls",
    "to": 321
  }, {
    "from": 149,
    "label": "calls",
    "to": 321
  }, {
    "from": 149,
    "label": "calls",
    "to": 321
  }, {
    "from": 149,
    "label": "calls",
    "to": 321
  }, {
    "from": 252,
    "label": "calls",
    "to": 321
  }, {
    "from": 149,
    "label": "calls",
    "to": 297
  }, {
    "from": 149,
    "label": "calls",
    "to": 297
  }, {
    "from": 231,
    "label": "calls",
    "to": 320
  }, {
    "from": 231,
    "label": "calls",
    "to": 320
  }, {
    "from": 135,
    "label": "calls",
    "to": 314
  }, {
    "from": 135,
    "label": "calls",
    "to": 314
  }, {
    "from": 135,
    "label": "calls",
    "to": 314
  }, {
    "from": 135,
    "label": "calls",
    "to": 304
  }, {
    "from": 45,
    "label": "calls",
    "to": 260
  }, {
    "from": 29,
    "label": "calls",
    "to": 313
  }, {
    "from": 45,
    "label": "calls",
    "to": 313
  }, {
    "from": 61,
    "label": "calls",
    "to": 313
  }, {
    "from": 80,
    "label": "calls",
    "to": 313
  }, {
    "from": 87,
    "label": "calls",
    "to": 313
  }, {
    "from": 92,
    "label": "calls",
    "to": 313
  }, {
    "from": 104,
    "label": "calls",
    "to": 313
  }, {
    "from": 104,
    "label": "calls",
    "to": 313
  }, {
    "from": 108,
    "label": "calls",
    "to": 313
  }, {
    "from": 108,
    "label": "calls",
    "to": 313
  }, {
    "from": 126,
    "label": "calls",
    "to": 313
  }, {
    "from": 126,
    "label": "calls",
    "to": 313
  }, {
    "from": 129,
    "label": "calls",
    "to": 313
  }, {
    "from": 129,
    "label": "calls",
    "to": 313
  }, {
    "from": 149,
    "label": "calls",
    "to": 313
  }, {
    "from": 80,
    "label": "calls",
    "to": 61
  }, {
    "from": 80,
    "label": "calls",
    "to": 61
  }, {
    "from": 80,
    "label": "calls",
    "to": 61
  }, {
    "from": 80,
    "label": "calls",
    "to": 61
  }, {
    "from": 92,
    "label": "calls",
    "to": 61
  }, {
    "from": 101,
    "label": "calls",
    "to": 61
  }, {
    "from": 104,
    "label": "calls",
    "to": 61
  }, {
    "from": 104,
    "label": "calls",
    "to": 61
  }, {
    "from": 108,
    "label": "calls",
    "to": 61
  }, {
    "from": 108,
    "label": "calls",
    "to": 61
  }, {
    "from": 111,
    "label": "calls",
    "to": 61
  }, {
    "from": 111,
    "label": "calls",
    "to": 61
  }, {
    "from": 149,
    "label": "calls",
    "to": 293
  }, {
    "from": 149,
    "label": "calls",
    "to": 293
  }, {
    "from": 29,
    "label": "calls",
    "to": 305
  }, {
    "from": 149,
    "label": "calls",
    "to": 306
  }, {
    "from": 35,
    "label": "calls",
    "to": 252
  }, {
    "from": 45,
    "label": "calls",
    "to": 252
  }, {
    "from": 92,
    "label": "calls",
    "to": 87
  }, {
    "from": 92,
    "label": "calls",
    "to": 87
  }, {
    "from": 65,
    "label": "calls",
    "to": 322
  }, {
    "from": 149,
    "label": "calls",
    "to": 308
  }, {
    "from": 149,
    "label": "calls",
    "to": 308
  }, {
    "from": 35,
    "label": "calls",
    "to": 307
  }, {
    "from": 260,
    "label": "calls",
    "to": 307
  }, {
    "from": 45,
    "label": "calls",
    "to": 324
  }, {
    "from": 149,
    "label": "calls",
    "to": 309
  }, {
    "from": 269,
    "label": "calls",
    "to": 316
  }, {
    "from": 149,
    "label": "calls",
    "to": 291
  }, {
    "from": 149,
    "label": "calls",
    "to": 325
  }, {
    "from": 45,
    "label": "calls",
    "to": 292
  }, {
    "from": 230,
    "label": "calls",
    "to": 310
  }, {
    "from": 289,
    "label": "calls",
    "to": 294
  }, {
    "from": 149,
    "label": "calls",
    "to": 327
  }, {
    "from": 12,
    "label": "calls",
    "to": 311
  }, {
    "from": 29,
    "label": "calls",
    "to": 311
  }, {
    "from": 45,
    "label": "calls",
    "to": 311
  }, {
    "from": 149,
    "label": "calls",
    "to": 311
  }, {
    "from": 35,
    "label": "calls",
    "to": 269
  }, {
    "from": 260,
    "label": "calls",
    "to": 269
  }, {
    "from": 149,
    "label": "calls",
    "to": 300
  }, {
    "from": 149,
    "label": "calls",
    "to": 77
  }, {
    "from": 87,
    "label": "calls",
    "to": 92
  }, {
    "from": 12,
    "label": "calls",
    "to": 328
  }, {
    "from": 111,
    "label": "calls",
    "to": 303
  }, {
    "from": 116,
    "label": "calls",
    "to": 303
  }, {
    "from": 149,
    "label": "calls",
    "to": 303
  }, {
    "from": 45,
    "label": "calls",
    "to": 312
  }, {
    "from": 252,
    "label": "calls",
    "to": 312
  }, {
    "from": 149,
    "label": "calls",
    "to": 330
  }, {
    "from": 231,
    "label": "calls",
    "to": 330
  }, {
    "from": 289,
    "label": "calls",
    "to": 331
  }, {
    "from": 289,
    "label": "calls",
    "to": 331
  }, {
    "from": 35,
    "label": "calls",
    "to": 323
  }, {
    "from": 260,
    "label": "calls",
    "to": 323
  }, {
    "from": 149,
    "label": "calls",
    "to": 296
  }, {
    "from": 1,
    "label": "contains",
    "to": 289
  }, {
    "from": 289,
    "label": "declares",
    "to": 12
  }, {
    "from": 289,
    "label": "declares",
    "to": 23
  }, {
    "from": 289,
    "label": "declares",
    "to": 27
  }, {
    "from": 289,
    "label": "declares",
    "to": 28
  }, {
    "from": 289,
    "label": "declares",
    "to": 29
  }, {
    "from": 289,
    "label": "declares",
    "to": 35
  }, {
    "from": 289,
    "label": "declares",
    "to": 45
  }, {
    "from": 289,
    "label": "declares",
    "to": 60
  }, {
    "from": 289,
    "label": "declares",
    "to": 61
  }, {
    "from": 289,
    "label": "declares",
    "to": 65
  }, {
    "from": 289,
    "label": "declares",
    "to": 71
  }, {
    "from": 289,
    "label": "declares",
    "to": 74
  }, {
    "from": 289,
    "label": "declares",
    "to": 77
  }, {
    "from": 289,
    "label": "declares",
    "to": 80
  }, {
    "from": 289,
    "label": "declares",
    "to": 87
  }, {
    "from": 289,
    "label": "declares",
    "to": 92
  }, {
    "from": 289,
    "label": "declares",
    "to": 101
  }, {
    "from": 289,
    "label": "declares",
    "to": 104
  }, {
    "from": 289,
    "label": "declares",
    "to": 108
  }, {
    "from": 289,
    "label": "declares",
    "to": 111
  }, {
    "from": 289,
    "label": "declares",
    "to": 116
  }, {
    "from": 289,
    "label": "declares",
    "to": 123
  }, {
    "from": 289,
    "label": "declares",
    "to": 126
  }, {
    "from": 289,
    "label": "declares",
    "to": 129
  }, {
    "from": 289,
    "label": "declares",
    "to": 132
  }, {
    "from": 289,
    "label": "declares",
    "to": 135
  }, {
    "from": 289,
    "label": "declares",
    "to": 149
  }, {
    "from": 289,
    "label": "declares",
    "to": 226
  }, {
    "from": 289,
    "label": "declares",
    "to": 228
  }, {
    "from": 289,
    "label": "declares",
    "to": 230
  }, {
    "from": 289,
    "label": "declares",
    "to": 231
  }, {
    "from": 289,
    "label": "declares",
    "to": 252
  }, {
    "from": 289,
    "label": "declares",
    "to": 260
  }, {
    "from": 289,
    "label": "declares",
    "to": 269
  }, {
    "from": 289,
    "label": "declares",
    "to": 288
  }, {
    "from": 1,
    "label": "contains",
    "to": 335
  }, {
    "from": 1,
    "label": "contains",
    "to": 336
  }, {
    "from": 335,
    "label": "initializes",
    "to": 337
  }, {
    "from": 337,
    "label": "assigns",
    "to": 338
  }, {
    "from": 335,
    "label": "initializes",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 335,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 335,
    "label": "initializes",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 335,
    "label": "initializes",
    "to": 345
  }, {
    "from": 335,
    "label": "initializes",
    "to": 346
  }, {
    "from": 335,
    "label": "initializes",
    "to": 347
  }, {
    "from": 335,
    "label": "initializes",
    "to": 348
  }, {
    "from": 335,
    "label": "initializes",
    "to": 349
  }, {
    "from": 335,
    "label": "initializes",
    "to": 350
  }, {
    "from": 336,
    "label": "initializes",
    "to": 351
  }, {
    "from": 351,
    "label": "requires",
    "to": 295
  }, {
    "from": 336,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "requires",
    "to": 290
  }, {
    "from": 1,
    "label": "provides",
    "to": 353
  }, {
    "from": 333,
    "label": "represents",
    "to": 354
  }, {
    "from": 353,
    "label": "provides",
    "to": 354
  }, {
    "from": 339,
    "label": "contains",
    "to": 2
  }, {
    "from": 339,
    "label": "contains",
    "to": 3
  }, {
    "from": 339,
    "label": "contains",
    "to": 4
  }, {
    "from": 339,
    "label": "contains",
    "to": 5
  }, {
    "from": 339,
    "label": "contains",
    "to": 6
  }, {
    "from": 339,
    "label": "contains",
    "to": 7
  }, {
    "from": 339,
    "label": "contains",
    "to": 8
  }, {
    "from": 339,
    "label": "contains",
    "to": 9
  }, {
    "from": 339,
    "label": "contains",
    "to": 10
  }, {
    "from": 339,
    "label": "contains",
    "to": 11
  }, {
    "from": 334,
    "label": "contains",
    "to": 252
  }, {
    "from": 339,
    "label": "contains",
    "to": 252
  }, {
    "from": 334,
    "label": "contains",
    "to": 260
  }, {
    "from": 339,
    "label": "contains",
    "to": 260
  }, {
    "from": 334,
    "label": "contains",
    "to": 269
  }, {
    "from": 339,
    "label": "contains",
    "to": 269
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function private.parseSources(tree, sources)\r\n  local prepend = sources.prepend\r\n  for _, mpath in ipairs(sources) do\r\n    if type(mpath) == 'table' then\r\n      private.parseSources(tree, mpath)\r\n    else\r\n      local mpath = lub.absolutizePath(mpath)\r\n      if lub.fileType(mpath) == 'directory' then\r\n        for path in lub.Dir(mpath):glob '%.lua' do\r\n          private.insertInTree(tree, path, mpath, prepend)\r\n        end\r\n      else\r\n        private.insertInTree(tree, mpath, lub.dir(mpath), prepend)\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function private.insertInTree(tree, fullpath, base, prepend)\r\n  -- Remove base from path\r\n  local path = string.sub(fullpath, string.len(base) + 2, -1)\r\n  if prepend then\r\n    path = prepend .. '/' .. path\r\n  end\r\n  if not match(path, '/') and not match(base, '/lib$') then\r\n    -- base is too close to file, we need to have at least one\r\n    -- folder level to get module name. If we are scanning \"lib\", consider\r\n    -- files inside to be module definitions.\r\n    local o = base\r\n    base = lub.dir(base)\r\n    return private.insertInTree(tree, fullpath, base)\r\n  end\r\n  local curr = tree\r\n  local list = lub.split(path, '/')\r\n  local last = #list\r\n  for i, part in ipairs(list) do\r\n    -- transform foo/init.lua into foo.lua\r\n    local is_init\r\n\r\n    if i == last then\r\n      is_init = part == 'init.lua'\r\n      -- Remove extension\r\n      part = match(part, '(.*)%.lua$')\r\n    end\r\n\r\n    if is_init then\r\n      curr.__file = fullpath\r\n    else\r\n      if not curr[part] then\r\n        local fullname\r\n        if curr.__fullname then\r\n          fullname = curr.__fullname .. '.' .. part\r\n        else\r\n          fullname = part\r\n        end\r\n        curr[part] = { __name = part, __fullname = fullname}\r\n        lub.insertSorted(curr, part)\r\n      end\r\n      curr = curr[part]\r\n\r\n      if i == last then\r\n        curr.__file = fullpath\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function private.makeDoc(tree, def)\r\n  for _, elem_name in ipairs(tree) do\r\n    local elem = tree[elem_name]\r\n    -- Depth first so that we collect all titles and summary first.\r\n    private.makeDoc(elem, def)\r\n    local children, navigation\r\n    if tree.is_root then\r\n      children   = elem\r\n      navigation = elem\r\n    else\r\n      children   = elem\r\n      navigation = tree\r\n    end\r\n\r\n    local doc = lib.new(elem.__file, {\r\n      -- Parent & siblings navigation (right menu)\r\n      navigation = tree,\r\n      -- Children navigation (listed in main div)\r\n      children   = elem,\r\n      target     = def.target,\r\n      header     = def.header,\r\n      footer     = def.footer or DEFAULT_FOOTER,\r\n      toplevel   = tree.is_root,\r\n      opts       = def,\r\n    })\r\n    elem.__title   = doc.sections[1].title\r\n    elem.__summary = doc.sections[1][1][1]\r\n    local img = doc.sections[1][1][2]\r\n    if img and match(img.text or '', '^!%[') then\r\n      elem.__img = img\r\n    end\r\n    elem.__todo    = doc.todo\r\n    elem.__fixme   = doc.fixme\r\n    local trg = def.target .. '/' .. doc.fullname .. '.' .. def.format\r\n    lub.writeall(trg, private.output[def.format](doc, def.template))\r\n  end\r\n\r\n  if tree.is_root then\r\n    tree.__name = 'index'\r\n    -- Create index.html file\r\n\r\n    -- Support for meta tag in index page.\r\n    if def.index_head then\r\n      def.head = def.index_head\r\n    end\r\n\r\n    local doc = lib.new(nil, {\r\n      code = def.index or [=[ \r\n--[[----------\r\n  # Table of contents\r\n\r\n--]]----------\r\n]=],\r\n      -- Parent & siblings navigation (right menu)\r\n      navigation = tree,\r\n      -- Children navigation (listed in main div)\r\n      children   = tree,\r\n      target     = def.target,\r\n      header     = def.header,\r\n      footer     = def.footer or DEFAULT_FOOTER,\r\n      toplevel   = false,\r\n      opts       = def,\r\n    })\r\n    local trg = def.target .. '/index.' .. def.format\r\n    lub.writeall(trg, private.output[def.format](doc, def.template))\r\n  end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function private.getName(path)\r\n  local name, module, fullname\r\n  name = assert(match(path, '([^/]+)%.lua$'), \"Invalid path '\"..path..\"'.\")\r\n  module = match(path, '([^/]+)/[^/]+$')\r\n  if module then\r\n    fullname = module .. '.' .. name\r\n  else\r\n    fullname = name\r\n  end\r\n  \r\n  return module, name, fullname\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function private.getTemplate(format)\r\n  local filename = 'template.'..format\r\n  return lub.content(lub.path('|doc/'..filename))\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function private.output:html(template)\r\n  local tmplt = lub.Template(template or private.getTemplate('html'))\r\n  return tmplt:run {self = self, private = private}\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function private.mod_output.html(module, def, modules)\r\n  local tmplt = lub.Template(def.template or private.getTemplate('html'))\r\n  -- Create a pseudo class with classes as methods and class summary\r\n  -- as method documentation.\r\n  local self = {\r\n    name = module.name,\r\n    title = module.name,\r\n    fullname = module.name,\r\n    sections = {},\r\n    navigation = modules,\r\n    header = def.header,\r\n    footer = def.footer or DEFAULT_FOOTER,\r\n  }\r\n  local section = {name = modules.name, title = module.name}\r\n  table.insert(self.sections, section)\r\n  for _, class in ipairs(module) do\r\n    local def = module[class]\r\n    -- A group = class doc\r\n    table.insert(section, {\r\n      class = def.fullname,\r\n      name  = def.name,\r\n      { text = def.summary },\r\n    })\r\n  end\r\n  setmetatable(self, lib)\r\n  return tmplt:run {self = self, private = private}\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function private.copyFiles(list, target)\r\n  for _, mpath in ipairs(list) do\r\n    local len = string.len(mpath)\r\n    for src in lub.Dir(mpath):glob() do\r\n      local path = string.sub(src, len + 2)\r\n      local trg  = target .. '/' .. path\r\n      lub.copy(src, trg)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function private.copyAssets.html(target)\r\n  local src_base = lub.path '|'\r\n  for _, path in ipairs(lib.ASSETS) do\r\n    local src = src_base .. '/doc/' .. path\r\n    local trg = target .. '/' .. path\r\n    lub.writeall(trg, lub.content(src))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function private.autoLink(p, codes)\r\n  -- method link lut.Doc#make or lut.Doc.make\r\n  if codes then\r\n    -- para auto-link\r\n    p = gsub(p, ' ([a-z]+%.[A-Z]+[a-z][a-zA-Z]+)([#%.])([a-zA-Z_]+)', function(class, typ, fun)\r\n      table.insert(codes, string.format(\" <a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun))\r\n      return CODE..#codes\r\n    end)\r\n  else\r\n    -- code auto-link\r\n    p = gsub(p, '([a-z]+%.[A-Z]+[a-z][a-zA-Z]+)([#%.])([a-zA-Z_]+)', function(class, typ, fun)\r\n      return string.format(\"<a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun)\r\n    end)\r\n  end\r\n  -- auto-link lut.Doc\r\n  p = gsub(p, ' ([a-z]+%.[A-Z]+[a-z0-9][a-zA-Z]*)([%. %(])', \" <a href='%1.html'>%1</a>%2\")\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function lib.new(name, options)\r\n  options = options or {}\r\n  local self = {\r\n    -- We store everything in _info to make sure __newindex is called to add\r\n    -- new tests.\r\n    _info = {\r\n      name = name,\r\n      tests = {},\r\n      errors = {},\r\n      user_suite = options.user_suite,\r\n    },\r\n    -- This is used to ignore coverage errors for deprecated functions.\r\n    ignore = {},\r\n  }\r\n  -- This is to get setup/teardown functions.\r\n  self._info.self = self\r\n\r\n  if options.coverage == false then\r\n    self._info.coverage = false\r\n  else\r\n    self._info.coverage = true\r\n  end\r\n  setmetatable(self, lib)\r\n  table.insert(lib.suites, self)\r\n  -- default setup and teardown functions\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "options = options or {}",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local self = {\r\n    -- We store everything in _info to make sure __newindex is called to add\r\n    -- new tests.\r\n    _info = {\r\n      name = name,\r\n      tests = {},\r\n      errors = {},\r\n      user_suite = options.user_suite,\r\n    },\r\n    -- This is used to ignore coverage errors for deprecated functions.\r\n    ignore = {},\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "self._info.self = self",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if options.coverage == false then\r\n    self._info.coverage = false\r\n  else\r\n    self._info.coverage = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "self._info.coverage = false",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "self._info.coverage = true",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "setmetatable(self, lib)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "table.insert(lib.suites, self)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function lib:testWithUser()\r\n  local obj = lib.new(self._info.name .. '[ux]', {\r\n    user_suite = true,\r\n    coverage   = false,\r\n  })\r\n  -- this is to enable syntax like: withUser.should.receiveClick()\r\n  obj.should = obj\r\n  return obj\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local obj = lib.new(self._info.name .. '[ux]', {\r\n    user_suite = true,\r\n    coverage   = false,\r\n  })",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "obj.should = obj",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function lib.setup() end",
    "type": "function"
  }, {
    "id": 28,
    "text": "function lib.teardown() end",
    "type": "function"
  }, {
    "id": 29,
    "text": "function lib:__newindex(key, value)\r\n  rawset(self, key, value)\r\n  if type(value) == 'function' then\r\n    if key ~= 'setup' and\r\n       key ~= 'teardown' and\r\n       key ~= 'should' then\r\n      table.insert(self._info.tests, {key, value})\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "rawset(self, key, value)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if type(value) == 'function' then\r\n    if key ~= 'setup' and\r\n       key ~= 'teardown' and\r\n       key ~= 'should' then\r\n      table.insert(self._info.tests, {key, value})\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "if key ~= 'setup' and\r\n       key ~= 'teardown' and\r\n       key ~= 'should' then\r\n      table.insert(self._info.tests, {key, value})\r\n    end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "table.insert(self._info.tests, {key, value})",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function lib:test(batch)\r\n  private.parseArgs()\r\n  lib.total_exec  = 0\r\n  lib.total_count = 0\r\n  lib.total_asrt  = 0\r\n  lib.total_fail  = 0\r\n\r\n  private.runSuite(self)\r\n  private.reportSuite(self)\r\n  private.report()\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "private.parseArgs()",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "lib.total_exec  = 0",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "lib.total_count = 0",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "lib.total_asrt  = 0",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "lib.total_fail  = 0",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "private.runSuite(self)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "private.reportSuite(self)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "private.report()",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function lib.files(list_or_path, pattern, reject)\r\n  private.parseArgs()\r\n  pattern = pattern or '%_test.lua$'\r\n  local sources = type(list_or_path) == 'table' and list_or_path or {list_or_path}\r\n\r\n  -- First disable should:test()\r\n  local test = lib.test\r\n  lib.test = function() end\r\n\r\n  local list = {}\r\n  for _, path in ipairs(sources) do\r\n    for file in lub.Dir(path):glob(pattern) do\r\n      if reject and string.match(file, reject) then\r\n        -- skip\r\n      else\r\n        table.insert(list, file)\r\n      end\r\n    end\r\n  end\r\n\r\n  for _, file in ipairs(list) do\r\n    lib.file_count = lib.file_count + 1\r\n    dofile(file)\r\n  end\r\n\r\n  -- Run all tests.\r\n  private.testAll()\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "pattern = pattern or '%_test.lua$'",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local sources = type(list_or_path) == 'table' and list_or_path or {list_or_path}",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local test = lib.test",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "lib.test = function() end",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "for _, path in ipairs(sources) do\r\n    for file in lub.Dir(path):glob(pattern) do\r\n      if reject and string.match(file, reject) then\r\n        -- skip\r\n      else\r\n        table.insert(list, file)\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 52,
    "text": "for file in lub.Dir(path):glob(pattern) do\r\n      if reject and string.match(file, reject) then\r\n        -- skip\r\n      else\r\n        table.insert(list, file)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "if reject and string.match(file, reject) then\r\n        -- skip\r\n      else\r\n        table.insert(list, file)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "table.insert(list, file)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "for _, file in ipairs(list) do\r\n    lib.file_count = lib.file_count + 1\r\n    dofile(file)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "lib.file_count = lib.file_count + 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "dofile(file)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "private.testAll()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 61,
    "text": "local function formatArg(arg)\r\n  local argtype = type(arg)\r\n  if argtype == \"string\" then\r\n    return \"'\"..arg..\"'\"\r\n  elseif argtype == \"number\" or argtype == \"boolean\" or argtype == \"nil\" then\r\n    return tostring(arg)\r\n  else\r\n    return tostring(arg)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local argtype = type(arg)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if argtype == \"string\" then\r\n    return \"'\"..arg..\"'\"\r\n  elseif argtype == \"number\" or argtype == \"boolean\" or argtype == \"nil\" then\r\n    return tostring(arg)\r\n  else\r\n    return tostring(arg)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "local function assert(ok, msg, up_count)\r\n  up_count = up_count or 2\r\n  current.assert_count = current.assert_count + 1\r\n  if not ok then\r\n    error(msg, up_count + 1)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "up_count = up_count or 2",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "current.assert_count = current.assert_count + 1",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if not ok then\r\n    error(msg, up_count + 1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "error(msg, up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function fail(msg)\r\n  assert(false, msg)\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "assert(false, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function assertFalse(val)\r\n  assert(not val, string.format('Should fail but passed.'))\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "assert(not val, string.format('Should fail but passed.'))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function assertTrue(ok, msg)\r\n  assert(ok, msg or string.format('True expected but was false.'))\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "assert(ok, msg or string.format('True expected but was false.'))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function assertEqual(expected, value, resolution, up_count)\r\n  up_count = up_count or 1\r\n  if resolution and type(expected) == 'number' then\r\n    local ok = (value >= expected - resolution) and (value <= expected + resolution)\r\n    assert(ok, string.format('Expected %s but found %s (resolution: %f).', formatArg(expected), formatArg(value), resolution), up_count + 1)\r\n  else\r\n    assert(value == expected, string.format('Expected %s but found %s.', formatArg(expected), formatArg(value)), up_count + 1)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "up_count = up_count or 1",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if resolution and type(expected) == 'number' then\r\n    local ok = (value >= expected - resolution) and (value <= expected + resolution)\r\n    assert(ok, string.format('Expected %s but found %s (resolution: %f).', formatArg(expected), formatArg(value), resolution), up_count + 1)\r\n  else\r\n    assert(value == expected, string.format('Expected %s but found %s.', formatArg(expected), formatArg(value)), up_count + 1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "local ok = (value >= expected - resolution) and (value <= expected + resolution)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "assert(ok, string.format('Expected %s but found %s (resolution: %f).', formatArg(expected), formatArg(value), resolution), up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert(value == expected, string.format('Expected %s but found %s.', formatArg(expected), formatArg(value)), up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function assertValueEqual(expected, value, resolution, up_count)\r\n  up_count = up_count or 1\r\n  if type(expected) == 'table' then\r\n    assertTableEqual(expected, value, resolution, up_count + 1)\r\n  else\r\n    assertEqual(expected, value, resolution, up_count + 1)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "if type(expected) == 'table' then\r\n    assertTableEqual(expected, value, resolution, up_count + 1)\r\n  else\r\n    assertEqual(expected, value, resolution, up_count + 1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "assertTableEqual(expected, value, resolution, up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assertEqual(expected, value, resolution, up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function assertTableEqual(expected, value, resolution, up_count)\r\n  up_count = up_count or 1\r\n  assertEqual('table', type(value), resolution, up_count + 1)\r\n  for k, v in pairs(expected) do\r\n    assertValueEqual(v, value[k], resolution, up_count + 1)\r\n  end\r\n  for k, v in pairs(value) do\r\n    if expected[k] == nil then\r\n      assert(false, string.format(\"Expected no '%s' key but found %s.\", k, formatArg(v)), up_count + 1)\r\n    end\r\n    assertValueEqual(v, value[k], resolution, up_count + 1)\r\n  end\r\n  assertEqual(#expected, #value, up_count + 1)\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "assertEqual('table', type(value), resolution, up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "for k, v in pairs(expected) do\r\n    assertValueEqual(v, value[k], resolution, up_count + 1)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 95,
    "text": "assertValueEqual(v, value[k], resolution, up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "for k, v in pairs(value) do\r\n    if expected[k] == nil then\r\n      assert(false, string.format(\"Expected no '%s' key but found %s.\", k, formatArg(v)), up_count + 1)\r\n    end\r\n    assertValueEqual(v, value[k], resolution, up_count + 1)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "if expected[k] == nil then\r\n      assert(false, string.format(\"Expected no '%s' key but found %s.\", k, formatArg(v)), up_count + 1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "assert(false, string.format(\"Expected no '%s' key but found %s.\", k, formatArg(v)), up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assertEqual(#expected, #value, up_count + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function assertNotEqual(unexpected, value)\r\n  assert(value ~= unexpected, string.format('Should not equal %s.', formatArg(unexpected)))\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "assert(value ~= unexpected, string.format('Should not equal %s.', formatArg(unexpected)))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function assertMatch(pattern, value)\r\n  assert(type(value) == 'string', string.format('Should be a string but was a %s.', type(value)))\r\n  assert(string.find(value, pattern), string.format('Expected to match %s but was %s.', formatArg(pattern), formatArg(value)))\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "assert(type(value) == 'string', string.format('Should be a string but was a %s.', type(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert(string.find(value, pattern), string.format('Expected to match %s but was %s.', formatArg(pattern), formatArg(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function assertNotMatch(pattern, value, msg)\r\n  assert(type(value) == 'string', string.format('Should be a string but was a %s.', type(value)))\r\n  assert(not string.find(value, pattern), string.format('Expected to not match %s but was %s.', formatArg(pattern), formatArg(value)))\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "assert(not string.find(value, pattern), string.format('Expected to not match %s but was %s.', formatArg(pattern), formatArg(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function assertError(pattern, func)\r\n  local ok, err = pcall(func)\r\n  assert(not ok, string.format('Should raise an error but none found.'))\r\n  assert(string.find(err, pattern), string.format('Error expected to match %s but was %s.', formatArg(pattern), formatArg(err)))\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local ok, err = pcall(func)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "assert(not ok, string.format('Should raise an error but none found.'))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert(string.find(err, pattern), string.format('Error expected to match %s but was %s.', formatArg(pattern), formatArg(err)))",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function assertPass(func, teardown)\r\n  local ok, err = pcall(func)\r\n  if teardown then\r\n    teardown()\r\n  end\r\n  if ok then\r\n    assert(true)\r\n  else\r\n    assert(false, err)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "if teardown then\r\n    teardown()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "teardown()",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "if ok then\r\n    assert(true)\r\n  else\r\n    assert(false, err)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "assert(true)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert(false, err)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function assertLessThen(expected, value)\r\n  assert(value < expected, string.format('Should be less then %f but was %f.', expected, value))\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "assert(value < expected, string.format('Should be less then %f but was %f.', expected, value))",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function assertType(expected, value)\r\n  assert(type(value) == expected, string.format('Should be a %s but was %s.', expected, type(value)))\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "assert(type(value) == expected, string.format('Should be a %s but was %s.', expected, type(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function assertNil(value)\r\n  assert(type(value) == 'nil', string.format('Should be a Nil but was %s.', type(value)))\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "assert(type(value) == 'nil', string.format('Should be a Nil but was %s.', type(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function assertInRange(t1, t2, value)\r\n  assert(value >= t1 and value < t2, string.format('Should be in [%f, %f[ but was %f.', t1, t2, value))\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "assert(value >= t1 and value < t2, string.format('Should be in [%f, %f[ but was %f.', t1, t2, value))",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function assertPassWithTimeout(func, msg, timeout)\r\n  local ok = false\r\n  -- if not self._suite._info.user_suite then\r\n  --   printf(\"Using timeout without user in %s (%s).\", self._suite._info.name, self._name)\r\n  -- end\r\n  if not func then\r\n    msg  = func\r\n    func = timeout\r\n    timeout = self.TIMEOUT\r\n  end\r\n  local start = elapsed()\r\n  while true do\r\n    local el = elapsed()\r\n    ok = func(el)\r\n    if ok or elapsed() > start + timeout then break end\r\n    sleep(0.3)\r\n  end\r\n  assert(ok, msg or 'Did not pass before timeout.')\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local ok = false",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if not func then\r\n    msg  = func\r\n    func = timeout\r\n    timeout = self.TIMEOUT\r\n  end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "msg  = func",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "func = timeout",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "timeout = self.TIMEOUT",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "local start = elapsed()",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "while true do\r\n    local el = elapsed()\r\n    ok = func(el)\r\n    if ok or elapsed() > start + timeout then break end\r\n    sleep(0.3)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 143,
    "text": "local el = elapsed()",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "ok = func(el)",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "if ok or elapsed() > start + timeout then break end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "sleep(0.3)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "assert(ok, msg or 'Did not pass before timeout.')",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function private:runSuite()\r\n  if self._info.coverage then\r\n    -- Make sure all functions are called at least once.\r\n    local meta = self._info.metatable\r\n    if not meta then\r\n      local parent\r\n      parent, meta = _G, _G\r\n      for _, part in ipairs(lub.split(self._info.name, '%.')) do\r\n        parent = meta\r\n        meta   = meta[part]\r\n        if not meta then break end\r\n      end\r\n    end\r\n    if not meta then\r\n      -- try in package.loaded\r\n      local parent\r\n      parent, meta = package.loaded, package.loaded\r\n      for _, part in ipairs(lub.split(self._info.name, '%.')) do\r\n        parent = meta\r\n        meta   = meta[part]\r\n        if not meta then break end\r\n      end\r\n    end\r\n    _G.assert(meta, string.format(\"Testing coverage but '%s' metatable not found.\", self._info.name))\r\n\r\n    local coverage = {}\r\n    self._info.coverage_ = coverage\r\n    for k, v in pairs(meta) do\r\n      if type(v) == 'function' then\r\n        coverage[k] = v\r\n        -- Dummy function to catch first call without using debug hook.\r\n        meta[k] = function(...)\r\n          coverage[k] = true\r\n          meta[k] = v\r\n          return v(...)\r\n        end\r\n      end\r\n    end\r\n\r\n    function self.testAllFunctions()\r\n      local all_ok = true\r\n      local not_tested = {}\r\n      for k, info in pairs(coverage) do\r\n        if info ~= true and not self.ignore[k] then\r\n          if lib.mock then\r\n            k = string.upper(string.sub(k, 1, 1))..string.sub(k, 2, -1)\r\n            lub.insertSorted(not_tested, {\r\n              text = 'function should.respondTo'..k..'()\\n'..lib.mock..'end',\r\n              line = tonumber(debug.getinfo(info).linedefined),\r\n            }, 'line')\r\n          else\r\n            lub.insertSorted(not_tested, \"'\"..k..\"'\")\r\n          end\r\n          all_ok = false\r\n        end\r\n      end\r\n      local list\r\n      if lib.mock then\r\n        list = '\\n\\n'\r\n        for _, info in ipairs(not_tested) do\r\n          list = list .. '\\n\\n' .. info.text .. ' --' .. info.line\r\n        end\r\n      else\r\n        list = lub.join(not_tested, ', ')\r\n      end\r\n      assertTrue(all_ok, string.format(\"Missing tests for %s\", list))\r\n    end\r\n  end\r\n\r\n  local exec_count = 0\r\n  local fail_count = 0\r\n  local skip_count = 0\r\n  local errors = self._info.errors\r\n  local test_var\r\n  local test_func\r\n  local function pass_args() return test_func(test_var) end\r\n  current = self._info\r\n  current.assert_count = 0\r\n  -- list of objects protected from gc\r\n  current.gc_protect = {}\r\n  local gc_protect = current.gc_protect\r\n  -- run all tests in the current file\r\n  local skip = current.user_suite and lib.file_count > 1\r\n  for i,e in pairs(current.tests) do\r\n    local name, func = unpack(e)\r\n    -- Testing scratchpad (used for GC protection).\r\n    test_var = {}\r\n    test_var._name  = name\r\n    test_var._suite = self\r\n    gc_protect[name] = test_var\r\n    test_func = func\r\n    if skip or (lib.only and lib.only ~= name) then\r\n      -- skip user tests\r\n      skip_count = skip_count + 1\r\n    else\r\n      exec_count = exec_count + 1\r\n      current.self.setup(gc_protect[name])\r\n\r\n      if lib.verbose then\r\n        printf(\"%-12s Run %s\", '['..current.name..']', name)\r\n      end\r\n      -- Enable sched:pcall when we need yield in testing. For now,\r\n      -- turn this off.\r\n      local ok, err = pcall(pass_args)\r\n      if lib.verbose then\r\n        printf(\"%s %s\", ok and 'OK' or 'FAIL', err or '')\r\n      end\r\n      collectgarbage('collect')\r\n      if not ok then\r\n        fail_count = fail_count + 1\r\n        -- Get line and message for assertPass, assertError\r\n        table.insert(errors, {i, name, err})\r\n      end\r\n\r\n      current.self.teardown(gc_protect[name])\r\n\r\n      if lib.abort then\r\n        break\r\n      end\r\n    end\r\n  end\r\n\r\n  current.exec_count = exec_count\r\n  current.total_count = #current.tests\r\n  current.fail_count = fail_count\r\n  current.skip_count = skip_count\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "if self._info.coverage then\r\n    -- Make sure all functions are called at least once.\r\n    local meta = self._info.metatable\r\n    if not meta then\r\n      local parent\r\n      parent, meta = _G, _G\r\n      for _, part in ipairs(lub.split(self._info.name, '%.')) do\r\n        parent = meta\r\n        meta   = meta[part]\r\n        if not meta then break end\r\n      end\r\n    end\r\n    if not meta then\r\n      -- try in package.loaded\r\n      local parent\r\n      parent, meta = package.loaded, package.loaded\r\n      for _, part in ipairs(lub.split(self._info.name, '%.')) do\r\n        parent = meta\r\n        meta   = meta[part]\r\n        if not meta then break end\r\n      end\r\n    end\r\n    _G.assert(meta, string.format(\"Testing coverage but '%s' metatable not found.\", self._info.name))\r\n\r\n    local coverage = {}\r\n    self._info.coverage_ = coverage\r\n    for k, v in pairs(meta) do\r\n      if type(v) == 'function' then\r\n        coverage[k] = v\r\n        -- Dummy function to catch first call without using debug hook.\r\n        meta[k] = function(...)\r\n          coverage[k] = true\r\n          meta[k] = v\r\n          return v(...)\r\n        end\r\n      end\r\n    end\r\n\r\n    function self.testAllFunctions()\r\n      local all_ok = true\r\n      local not_tested = {}\r\n      for k, info in pairs(coverage) do\r\n        if info ~= true and not self.ignore[k] then\r\n          if lib.mock then\r\n            k = string.upper(string.sub(k, 1, 1))..string.sub(k, 2, -1)\r\n            lub.insertSorted(not_tested, {\r\n              text = 'function should.respondTo'..k..'()\\n'..lib.mock..'end',\r\n              line = tonumber(debug.getinfo(info).linedefined),\r\n            }, 'line')\r\n          else\r\n            lub.insertSorted(not_tested, \"'\"..k..\"'\")\r\n          end\r\n          all_ok = false\r\n        end\r\n      end\r\n      local list\r\n      if lib.mock then\r\n        list = '\\n\\n'\r\n        for _, info in ipairs(not_tested) do\r\n          list = list .. '\\n\\n' .. info.text .. ' --' .. info.line\r\n        end\r\n      else\r\n        list = lub.join(not_tested, ', ')\r\n      end\r\n      assertTrue(all_ok, string.format(\"Missing tests for %s\", list))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "local meta = self._info.metatable",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if not meta then\r\n      local parent\r\n      parent, meta = _G, _G\r\n      for _, part in ipairs(lub.split(self._info.name, '%.')) do\r\n        parent = meta\r\n        meta   = meta[part]\r\n        if not meta then break end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "local parent",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "parent, meta = _G, _G",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "for _, part in ipairs(lub.split(self._info.name, '%.')) do\r\n        parent = meta\r\n        meta   = meta[part]\r\n        if not meta then break end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "parent = meta",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "meta   = meta[part]",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "if not meta then break end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "if not meta then\r\n      -- try in package.loaded\r\n      local parent\r\n      parent, meta = package.loaded, package.loaded\r\n      for _, part in ipairs(lub.split(self._info.name, '%.')) do\r\n        parent = meta\r\n        meta   = meta[part]\r\n        if not meta then break end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "parent, meta = package.loaded, package.loaded",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "_G.assert(meta, string.format(\"Testing coverage but '%s' metatable not found.\", self._info.name))",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "local coverage = {}",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "self._info.coverage_ = coverage",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "for k, v in pairs(meta) do\r\n      if type(v) == 'function' then\r\n        coverage[k] = v\r\n        -- Dummy function to catch first call without using debug hook.\r\n        meta[k] = function(...)\r\n          coverage[k] = true\r\n          meta[k] = v\r\n          return v(...)\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 165,
    "text": "if type(v) == 'function' then\r\n        coverage[k] = v\r\n        -- Dummy function to catch first call without using debug hook.\r\n        meta[k] = function(...)\r\n          coverage[k] = true\r\n          meta[k] = v\r\n          return v(...)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "coverage[k] = v",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "meta[k] = function(...)\r\n          coverage[k] = true\r\n          meta[k] = v\r\n          return v(...)\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "coverage[k] = true",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "meta[k] = v",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "function self.testAllFunctions()\r\n      local all_ok = true\r\n      local not_tested = {}\r\n      for k, info in pairs(coverage) do\r\n        if info ~= true and not self.ignore[k] then\r\n          if lib.mock then\r\n            k = string.upper(string.sub(k, 1, 1))..string.sub(k, 2, -1)\r\n            lub.insertSorted(not_tested, {\r\n              text = 'function should.respondTo'..k..'()\\n'..lib.mock..'end',\r\n              line = tonumber(debug.getinfo(info).linedefined),\r\n            }, 'line')\r\n          else\r\n            lub.insertSorted(not_tested, \"'\"..k..\"'\")\r\n          end\r\n          all_ok = false\r\n        end\r\n      end\r\n      local list\r\n      if lib.mock then\r\n        list = '\\n\\n'\r\n        for _, info in ipairs(not_tested) do\r\n          list = list .. '\\n\\n' .. info.text .. ' --' .. info.line\r\n        end\r\n      else\r\n        list = lub.join(not_tested, ', ')\r\n      end\r\n      assertTrue(all_ok, string.format(\"Missing tests for %s\", list))\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 171,
    "text": "local all_ok = true",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "local not_tested = {}",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "for k, info in pairs(coverage) do\r\n        if info ~= true and not self.ignore[k] then\r\n          if lib.mock then\r\n            k = string.upper(string.sub(k, 1, 1))..string.sub(k, 2, -1)\r\n            lub.insertSorted(not_tested, {\r\n              text = 'function should.respondTo'..k..'()\\n'..lib.mock..'end',\r\n              line = tonumber(debug.getinfo(info).linedefined),\r\n            }, 'line')\r\n          else\r\n            lub.insertSorted(not_tested, \"'\"..k..\"'\")\r\n          end\r\n          all_ok = false\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 174,
    "text": "if info ~= true and not self.ignore[k] then\r\n          if lib.mock then\r\n            k = string.upper(string.sub(k, 1, 1))..string.sub(k, 2, -1)\r\n            lub.insertSorted(not_tested, {\r\n              text = 'function should.respondTo'..k..'()\\n'..lib.mock..'end',\r\n              line = tonumber(debug.getinfo(info).linedefined),\r\n            }, 'line')\r\n          else\r\n            lub.insertSorted(not_tested, \"'\"..k..\"'\")\r\n          end\r\n          all_ok = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "if lib.mock then\r\n            k = string.upper(string.sub(k, 1, 1))..string.sub(k, 2, -1)\r\n            lub.insertSorted(not_tested, {\r\n              text = 'function should.respondTo'..k..'()\\n'..lib.mock..'end',\r\n              line = tonumber(debug.getinfo(info).linedefined),\r\n            }, 'line')\r\n          else\r\n            lub.insertSorted(not_tested, \"'\"..k..\"'\")\r\n          end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "k = string.upper(string.sub(k, 1, 1))..string.sub(k, 2, -1)",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "lub.insertSorted(not_tested, {\r\n              text = 'function should.respondTo'..k..'()\\n'..lib.mock..'end',\r\n              line = tonumber(debug.getinfo(info).linedefined),\r\n            }, 'line')",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "lub.insertSorted(not_tested, \"'\"..k..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "all_ok = false",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "local list",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "if lib.mock then\r\n        list = '\\n\\n'\r\n        for _, info in ipairs(not_tested) do\r\n          list = list .. '\\n\\n' .. info.text .. ' --' .. info.line\r\n        end\r\n      else\r\n        list = lub.join(not_tested, ', ')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "list = '\\n\\n'",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "for _, info in ipairs(not_tested) do\r\n          list = list .. '\\n\\n' .. info.text .. ' --' .. info.line\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 184,
    "text": "list = list .. '\\n\\n' .. info.text .. ' --' .. info.line",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "list = lub.join(not_tested, ', ')",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "assertTrue(all_ok, string.format(\"Missing tests for %s\", list))",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "local exec_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "local fail_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local skip_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "local errors = self._info.errors",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "local test_var",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "local test_func",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "local function pass_args() return test_func(test_var) end",
    "type": "statement:localfunction"
  }, {
    "id": 194,
    "text": "current = self._info",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "current.assert_count = 0",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "current.gc_protect = {}",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "local gc_protect = current.gc_protect",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "local skip = current.user_suite and lib.file_count > 1",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "for i,e in pairs(current.tests) do\r\n    local name, func = unpack(e)\r\n    -- Testing scratchpad (used for GC protection).\r\n    test_var = {}\r\n    test_var._name  = name\r\n    test_var._suite = self\r\n    gc_protect[name] = test_var\r\n    test_func = func\r\n    if skip or (lib.only and lib.only ~= name) then\r\n      -- skip user tests\r\n      skip_count = skip_count + 1\r\n    else\r\n      exec_count = exec_count + 1\r\n      current.self.setup(gc_protect[name])\r\n\r\n      if lib.verbose then\r\n        printf(\"%-12s Run %s\", '['..current.name..']', name)\r\n      end\r\n      -- Enable sched:pcall when we need yield in testing. For now,\r\n      -- turn this off.\r\n      local ok, err = pcall(pass_args)\r\n      if lib.verbose then\r\n        printf(\"%s %s\", ok and 'OK' or 'FAIL', err or '')\r\n      end\r\n      collectgarbage('collect')\r\n      if not ok then\r\n        fail_count = fail_count + 1\r\n        -- Get line and message for assertPass, assertError\r\n        table.insert(errors, {i, name, err})\r\n      end\r\n\r\n      current.self.teardown(gc_protect[name])\r\n\r\n      if lib.abort then\r\n        break\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 200,
    "text": "local name, func = unpack(e)",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "test_var = {}",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "test_var._name  = name",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "test_var._suite = self",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "gc_protect[name] = test_var",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "test_func = func",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "if skip or (lib.only and lib.only ~= name) then\r\n      -- skip user tests\r\n      skip_count = skip_count + 1\r\n    else\r\n      exec_count = exec_count + 1\r\n      current.self.setup(gc_protect[name])\r\n\r\n      if lib.verbose then\r\n        printf(\"%-12s Run %s\", '['..current.name..']', name)\r\n      end\r\n      -- Enable sched:pcall when we need yield in testing. For now,\r\n      -- turn this off.\r\n      local ok, err = pcall(pass_args)\r\n      if lib.verbose then\r\n        printf(\"%s %s\", ok and 'OK' or 'FAIL', err or '')\r\n      end\r\n      collectgarbage('collect')\r\n      if not ok then\r\n        fail_count = fail_count + 1\r\n        -- Get line and message for assertPass, assertError\r\n        table.insert(errors, {i, name, err})\r\n      end\r\n\r\n      current.self.teardown(gc_protect[name])\r\n\r\n      if lib.abort then\r\n        break\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "skip_count = skip_count + 1",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "exec_count = exec_count + 1",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "current.self.setup(gc_protect[name])",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "if lib.verbose then\r\n        printf(\"%-12s Run %s\", '['..current.name..']', name)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "printf(\"%-12s Run %s\", '['..current.name..']', name)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "local ok, err = pcall(pass_args)",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "if lib.verbose then\r\n        printf(\"%s %s\", ok and 'OK' or 'FAIL', err or '')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "printf(\"%s %s\", ok and 'OK' or 'FAIL', err or '')",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "collectgarbage('collect')",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "if not ok then\r\n        fail_count = fail_count + 1\r\n        -- Get line and message for assertPass, assertError\r\n        table.insert(errors, {i, name, err})\r\n      end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "fail_count = fail_count + 1",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "table.insert(errors, {i, name, err})",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "current.self.teardown(gc_protect[name])",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "if lib.abort then\r\n        break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "current.exec_count = exec_count",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "current.total_count = #current.tests",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "current.fail_count = fail_count",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "current.skip_count = skip_count",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function(...)\r\n          coverage[k] = true\r\n          meta[k] = v\r\n          return v(...)\r\n        end",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function self.testAllFunctions()\r\n      local all_ok = true\r\n      local not_tested = {}\r\n      for k, info in pairs(coverage) do\r\n        if info ~= true and not self.ignore[k] then\r\n          if lib.mock then\r\n            k = string.upper(string.sub(k, 1, 1))..string.sub(k, 2, -1)\r\n            lub.insertSorted(not_tested, {\r\n              text = 'function should.respondTo'..k..'()\\n'..lib.mock..'end',\r\n              line = tonumber(debug.getinfo(info).linedefined),\r\n            }, 'line')\r\n          else\r\n            lub.insertSorted(not_tested, \"'\"..k..\"'\")\r\n          end\r\n          all_ok = false\r\n        end\r\n      end\r\n      local list\r\n      if lib.mock then\r\n        list = '\\n\\n'\r\n        for _, info in ipairs(not_tested) do\r\n          list = list .. '\\n\\n' .. info.text .. ' --' .. info.line\r\n        end\r\n      else\r\n        list = lub.join(not_tested, ', ')\r\n      end\r\n      assertTrue(all_ok, string.format(\"Missing tests for %s\", list))\r\n    end",
    "type": "function"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "local function pass_args() return test_func(test_var) end",
    "type": "function"
  }, {
    "id": 231,
    "text": "function private:reportSuite()\r\n  local ok_message, skip_message = '', ''\r\n  if self._info.fail_count == 0 then\r\n    ok_message = 'OK'\r\n  else\r\n    ok_message = string.format('%i Failure(s)', self._info.fail_count)\r\n  end\r\n  local exec_count = self._info.exec_count\r\n  if self._info.skip_count > 0 then\r\n    if exec_count == 0 then\r\n      ok_message = '-- skip'\r\n    else\r\n      skip_message = string.format(' : skipped %i', self._info.skip_count)\r\n    end\r\n  end\r\n  print(string.format('==== %-28s (%2i test%s%s): %s', self._info.name, exec_count, exec_count > 1 and 's' or ' ', skip_message, ok_message))\r\n  lib.total_exec = lib.total_exec + self._info.exec_count\r\n  lib.total_count = lib.total_count + self._info.total_count\r\n  lib.total_asrt = lib.total_asrt + self._info.assert_count\r\n  if self._info.fail_count > 0 then\r\n    for _, e in ipairs(self._info.errors) do\r\n      local i, name, err = unpack(e)\r\n      lib.total_fail = lib.total_fail + 1\r\n      local hname = string.gsub(name, '([A-Z])', function(x) return ' '..string.lower(x) end)\r\n      print(string.format('  %i. Should %s\\n     %s\\n', i, hname, string.gsub(err, '\\n', '\\n     ')))\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 232,
    "text": "local ok_message, skip_message = '', ''",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "if self._info.fail_count == 0 then\r\n    ok_message = 'OK'\r\n  else\r\n    ok_message = string.format('%i Failure(s)', self._info.fail_count)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "ok_message = 'OK'",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "ok_message = string.format('%i Failure(s)', self._info.fail_count)",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "local exec_count = self._info.exec_count",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "if self._info.skip_count > 0 then\r\n    if exec_count == 0 then\r\n      ok_message = '-- skip'\r\n    else\r\n      skip_message = string.format(' : skipped %i', self._info.skip_count)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "if exec_count == 0 then\r\n      ok_message = '-- skip'\r\n    else\r\n      skip_message = string.format(' : skipped %i', self._info.skip_count)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 239,
    "text": "ok_message = '-- skip'",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "skip_message = string.format(' : skipped %i', self._info.skip_count)",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "print(string.format('==== %-28s (%2i test%s%s): %s', self._info.name, exec_count, exec_count > 1 and 's' or ' ', skip_message, ok_message))",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "lib.total_exec = lib.total_exec + self._info.exec_count",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "lib.total_count = lib.total_count + self._info.total_count",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "lib.total_asrt = lib.total_asrt + self._info.assert_count",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "if self._info.fail_count > 0 then\r\n    for _, e in ipairs(self._info.errors) do\r\n      local i, name, err = unpack(e)\r\n      lib.total_fail = lib.total_fail + 1\r\n      local hname = string.gsub(name, '([A-Z])', function(x) return ' '..string.lower(x) end)\r\n      print(string.format('  %i. Should %s\\n     %s\\n', i, hname, string.gsub(err, '\\n', '\\n     ')))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "for _, e in ipairs(self._info.errors) do\r\n      local i, name, err = unpack(e)\r\n      lib.total_fail = lib.total_fail + 1\r\n      local hname = string.gsub(name, '([A-Z])', function(x) return ' '..string.lower(x) end)\r\n      print(string.format('  %i. Should %s\\n     %s\\n', i, hname, string.gsub(err, '\\n', '\\n     ')))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 247,
    "text": "local i, name, err = unpack(e)",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "lib.total_fail = lib.total_fail + 1",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "local hname = string.gsub(name, '([A-Z])', function(x) return ' '..string.lower(x) end)",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "print(string.format('  %i. Should %s\\n     %s\\n', i, hname, string.gsub(err, '\\n', '\\n     ')))",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 252,
    "text": "function private.parseArgs()\r\n  for _, val in pairs(arg) do\r\n    if val == '--verbose' then\r\n      lib.verbose = true\r\n    else\r\n      local key,value = string.match(val, '%-%-(.-)=(.*)')\r\n      if key == 'only' then\r\n        lib.only = value\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 253,
    "text": "for _, val in pairs(arg) do\r\n    if val == '--verbose' then\r\n      lib.verbose = true\r\n    else\r\n      local key,value = string.match(val, '%-%-(.-)=(.*)')\r\n      if key == 'only' then\r\n        lib.only = value\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 254,
    "text": "if val == '--verbose' then\r\n      lib.verbose = true\r\n    else\r\n      local key,value = string.match(val, '%-%-(.-)=(.*)')\r\n      if key == 'only' then\r\n        lib.only = value\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "lib.verbose = true",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "local key,value = string.match(val, '%-%-(.-)=(.*)')",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "if key == 'only' then\r\n        lib.only = value\r\n      end",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "lib.only = value",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "function private.testAll()\r\n  lib.total_exec = 0\r\n  lib.total_count = 0\r\n  lib.total_asrt = 0\r\n  lib.total_fail = 0\r\n  for i, suite in ipairs(lib.suites) do\r\n    private.runSuite(suite)\r\n    private.reportSuite(suite)\r\n    if lib.abort then\r\n      break\r\n    end\r\n  end\r\n  private.report()\r\nend",
    "type": "function"
  }, {
    "id": 261,
    "text": "lib.total_exec = 0",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "lib.total_asrt = 0",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "lib.total_fail = 0",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "for i, suite in ipairs(lib.suites) do\r\n    private.runSuite(suite)\r\n    private.reportSuite(suite)\r\n    if lib.abort then\r\n      break\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 265,
    "text": "private.runSuite(suite)",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "private.reportSuite(suite)",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "if lib.abort then\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function private.report()\r\n  print('\\n')\r\n  if lib.only then\r\n    print('Only testing \\''..lib.only..'\\'.')\r\n  end\r\n\r\n  if lib.total_exec == 0 then\r\n    print(string.format('No tests defined. Test files must end with \"_test.lua\"'))\r\n  elseif lib.abort then\r\n    print(string.format('Abort after %i / %i tests', lib.total_exec, lib.total_count))\r\n  elseif lib.total_fail == 0 then\r\n    if lib.total_exec == 1 then\r\n      print(string.format('Success! %i test passes (%i assertions).', lib.total_exec, lib.total_asrt))\r\n    else\r\n      print(string.format('Success! %i tests pass (%i assertions).', lib.total_exec, lib.total_asrt))\r\n    end\r\n  elseif lib.total_exec == 1 then\r\n    if lib.total_fail == 1 then\r\n      print(string.format('Fail... %i failure / %i test', lib.total_fail, lib.total_exec))\r\n    else\r\n      print(string.format('Fail... %i failures / %i test', lib.total_fail, lib.total_exec))\r\n    end\r\n  else\r\n    if lib.total_fail == 1 then\r\n      print(string.format('Fail... %i failure / %i tests', lib.total_fail, lib.total_exec))\r\n    else\r\n      print(string.format('Fail... %i failures / %i tests', lib.total_fail, lib.total_exec))\r\n    end\r\n  end\r\n  print('')\r\n\r\n  os.exit(lib.total_fail == 0 and 0 or -1)\r\nend",
    "type": "function"
  }, {
    "id": 270,
    "text": "print('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "if lib.only then\r\n    print('Only testing \\''..lib.only..'\\'.')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "print('Only testing \\''..lib.only..'\\'.')",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "if lib.total_exec == 0 then\r\n    print(string.format('No tests defined. Test files must end with \"_test.lua\"'))\r\n  elseif lib.abort then\r\n    print(string.format('Abort after %i / %i tests', lib.total_exec, lib.total_count))\r\n  elseif lib.total_fail == 0 then\r\n    if lib.total_exec == 1 then\r\n      print(string.format('Success! %i test passes (%i assertions).', lib.total_exec, lib.total_asrt))\r\n    else\r\n      print(string.format('Success! %i tests pass (%i assertions).', lib.total_exec, lib.total_asrt))\r\n    end\r\n  elseif lib.total_exec == 1 then\r\n    if lib.total_fail == 1 then\r\n      print(string.format('Fail... %i failure / %i test', lib.total_fail, lib.total_exec))\r\n    else\r\n      print(string.format('Fail... %i failures / %i test', lib.total_fail, lib.total_exec))\r\n    end\r\n  else\r\n    if lib.total_fail == 1 then\r\n      print(string.format('Fail... %i failure / %i tests', lib.total_fail, lib.total_exec))\r\n    else\r\n      print(string.format('Fail... %i failures / %i tests', lib.total_fail, lib.total_exec))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 274,
    "text": "print(string.format('No tests defined. Test files must end with \"_test.lua\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "print(string.format('Abort after %i / %i tests', lib.total_exec, lib.total_count))",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "if lib.total_exec == 1 then\r\n      print(string.format('Success! %i test passes (%i assertions).', lib.total_exec, lib.total_asrt))\r\n    else\r\n      print(string.format('Success! %i tests pass (%i assertions).', lib.total_exec, lib.total_asrt))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 277,
    "text": "print(string.format('Success! %i test passes (%i assertions).', lib.total_exec, lib.total_asrt))",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "print(string.format('Success! %i tests pass (%i assertions).', lib.total_exec, lib.total_asrt))",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "if lib.total_fail == 1 then\r\n      print(string.format('Fail... %i failure / %i test', lib.total_fail, lib.total_exec))\r\n    else\r\n      print(string.format('Fail... %i failures / %i test', lib.total_fail, lib.total_exec))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "print(string.format('Fail... %i failure / %i test', lib.total_fail, lib.total_exec))",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "print(string.format('Fail... %i failures / %i test', lib.total_fail, lib.total_exec))",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "if lib.total_fail == 1 then\r\n      print(string.format('Fail... %i failure / %i tests', lib.total_fail, lib.total_exec))\r\n    else\r\n      print(string.format('Fail... %i failures / %i tests', lib.total_fail, lib.total_exec))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "print(string.format('Fail... %i failure / %i tests', lib.total_fail, lib.total_exec))",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "print(string.format('Fail... %i failures / %i tests', lib.total_fail, lib.total_exec))",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "print('')",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "os.exit(lib.total_fail == 0 and 0 or -1)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 288,
    "text": "function(x) return ' '..string.lower(x) end",
    "type": "function"
  }, {
    "id": 289,
    "text": "",
    "type": "function container"
  }, {
    "id": 290,
    "text": "lub",
    "type": "module"
  }, {
    "id": 291,
    "text": "join",
    "type": "global function"
  }, {
    "id": 292,
    "text": "Dir",
    "type": "global function"
  }, {
    "id": 293,
    "text": "split",
    "type": "global function"
  }, {
    "id": 294,
    "text": "class",
    "type": "global function"
  }, {
    "id": 295,
    "text": "debug",
    "type": "module"
  }, {
    "id": 296,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 297,
    "text": "insertSorted",
    "type": "global function"
  }, {
    "id": 298,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 299,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 300,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 301,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 302,
    "text": "print",
    "type": "global function"
  }, {
    "id": 303,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 304,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 305,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 306,
    "text": "v",
    "type": "global function"
  }, {
    "id": 307,
    "text": "reportSuite",
    "type": "global function"
  }, {
    "id": 308,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 309,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 310,
    "text": "test_func",
    "type": "global function"
  }, {
    "id": 311,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 312,
    "text": "match",
    "type": "global function"
  }, {
    "id": 313,
    "text": "type",
    "type": "global function"
  }, {
    "id": 314,
    "text": "elapsed",
    "type": "global function"
  }, {
    "id": 315,
    "text": "format",
    "type": "global function"
  }, {
    "id": 316,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 317,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 318,
    "text": "printf",
    "type": "global function"
  }, {
    "id": 319,
    "text": "current.self.teardown",
    "type": "global function"
  }, {
    "id": 320,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 321,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 322,
    "text": "error",
    "type": "global function"
  }, {
    "id": 323,
    "text": "runSuite",
    "type": "global function"
  }, {
    "id": 324,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 325,
    "text": "current.self.setup",
    "type": "global function"
  }, {
    "id": 326,
    "text": "teardown",
    "type": "global function"
  }, {
    "id": 327,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 328,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 329,
    "text": "find",
    "type": "global function"
  }, {
    "id": 330,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 331,
    "text": "require",
    "type": "global function"
  }, {
    "id": 332,
    "text": "func",
    "type": "global function"
  }, {
    "id": 333,
    "text": "",
    "type": "local variable"
  }, {
    "id": 334,
    "text": "",
    "type": "local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "variable container"
  }, {
    "id": 336,
    "text": "",
    "type": "require container"
  }, {
    "id": 337,
    "text": "",
    "type": "local variable"
  }, {
    "id": 338,
    "text": "",
    "type": "n/a"
  }, {
    "id": 339,
    "text": "",
    "type": "local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 341,
    "text": "",
    "type": "local variable"
  }, {
    "id": 342,
    "text": "",
    "type": "keyword"
  }, {
    "id": 343,
    "text": "",
    "type": "global variable"
  }, {
    "id": 344,
    "text": "",
    "type": "n/a"
  }, {
    "id": 345,
    "text": "",
    "type": "global variable"
  }, {
    "id": 346,
    "text": "",
    "type": "global variable"
  }, {
    "id": 347,
    "text": "",
    "type": "global variable"
  }, {
    "id": 348,
    "text": "",
    "type": "global variable"
  }, {
    "id": 349,
    "text": "",
    "type": "global variable"
  }, {
    "id": 350,
    "text": "",
    "type": "global variable"
  }, {
    "id": 351,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 352,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 353,
    "text": "",
    "type": "interface container"
  }, {
    "id": 354,
    "text": "",
    "type": "interface"
  } ]
}