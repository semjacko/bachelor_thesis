{
  "_filename": "Doc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lut/lut/Doc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 2,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 2,
    "label": "has",
    "to": 38
  }, {
    "from": 2,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 38
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 54,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 38
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 65,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 80,
    "label": "has",
    "to": 89
  }, {
    "from": 80,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 81
  }, {
    "from": 65,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 93,
    "label": "has",
    "to": 101
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 93,
    "label": "has",
    "to": 103
  }, {
    "from": 93,
    "label": "has",
    "to": 104
  }, {
    "from": 93,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 93,
    "label": "has",
    "to": 107
  }, {
    "from": 93,
    "label": "has",
    "to": 108
  }, {
    "from": 93,
    "label": "has",
    "to": 109
  }, {
    "from": 93,
    "label": "has",
    "to": 110
  }, {
    "from": 92,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 110
  }, {
    "from": 92,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 118,
    "label": "has",
    "to": 38
  }, {
    "from": 118,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 38
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 126,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 38
  }, {
    "from": 132,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 153,
    "label": "has",
    "to": 160
  }, {
    "from": 153,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 161,
    "label": "has",
    "to": 168
  }, {
    "from": 161,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 161,
    "label": "has",
    "to": 171
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 172
  }, {
    "from": 161,
    "label": "has",
    "to": 168
  }, {
    "from": 161,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 140,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 140,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 140,
    "label": "has",
    "to": 177
  }, {
    "from": 140,
    "label": "has",
    "to": 178
  }, {
    "from": 140,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 184,
    "label": "has",
    "to": 38
  }, {
    "from": 184,
    "label": "has",
    "to": 186
  }, {
    "from": 184,
    "label": "has",
    "to": 187
  }, {
    "from": 184,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 184,
    "label": "has",
    "to": 190
  }, {
    "from": 184,
    "label": "has",
    "to": 191
  }, {
    "from": 184,
    "label": "has",
    "to": 192
  }, {
    "from": 184,
    "label": "has",
    "to": 193
  }, {
    "from": 184,
    "label": "has",
    "to": 38
  }, {
    "from": 184,
    "label": "has",
    "to": 194
  }, {
    "from": 184,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 184,
    "label": "has",
    "to": 198
  }, {
    "from": 184,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 200,
    "label": "has",
    "to": 38
  }, {
    "from": 200,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 205,
    "label": "has",
    "to": 208
  }, {
    "from": 200,
    "label": "has",
    "to": 209
  }, {
    "from": 200,
    "label": "has",
    "to": 210
  }, {
    "from": 200,
    "label": "has",
    "to": 211
  }, {
    "from": 200,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 201
  }, {
    "from": 213,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 213,
    "label": "has",
    "to": 38
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 209
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 216,
    "label": "has",
    "to": 219
  }, {
    "from": 216,
    "label": "has",
    "to": 220
  }, {
    "from": 213,
    "label": "has",
    "to": 210
  }, {
    "from": 213,
    "label": "has",
    "to": 221
  }, {
    "from": 213,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 182
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 210
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 232,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 232,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 241,
    "label": "has",
    "to": 236
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 239
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 245,
    "label": "has",
    "to": 236
  }, {
    "from": 245,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 182
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 250,
    "label": "has",
    "to": 253
  }, {
    "from": 250,
    "label": "has",
    "to": 254
  }, {
    "from": 245,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 182
  }, {
    "from": 256,
    "label": "has",
    "to": 221
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 256,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 256,
    "label": "has",
    "to": 264
  }, {
    "from": 256,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 266,
    "label": "has",
    "to": 204
  }, {
    "from": 266,
    "label": "has",
    "to": 269
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 270,
    "label": "has",
    "to": 38
  }, {
    "from": 270,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 38
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 276,
    "label": "has",
    "to": 280
  }, {
    "from": 276,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 276,
    "label": "has",
    "to": 16
  }, {
    "from": 276,
    "label": "has",
    "to": 38
  }, {
    "from": 276,
    "label": "has",
    "to": 284
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 288,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 291
  }, {
    "from": 285,
    "label": "has",
    "to": 292
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 295,
    "label": "has",
    "to": 298
  }, {
    "from": 293,
    "label": "has",
    "to": 299
  }, {
    "from": 300,
    "label": "has",
    "to": 38
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 304,
    "label": "has",
    "to": 306
  }, {
    "from": 304,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 302,
    "label": "has",
    "to": 38
  }, {
    "from": 302,
    "label": "has",
    "to": 38
  }, {
    "from": 302,
    "label": "has",
    "to": 38
  }, {
    "from": 302,
    "label": "has",
    "to": 38
  }, {
    "from": 302,
    "label": "has",
    "to": 38
  }, {
    "from": 302,
    "label": "has",
    "to": 38
  }, {
    "from": 302,
    "label": "has",
    "to": 38
  }, {
    "from": 302,
    "label": "has",
    "to": 310
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 311,
    "label": "has",
    "to": 313
  }, {
    "from": 311,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 318,
    "label": "has",
    "to": 320
  }, {
    "from": 317,
    "label": "has",
    "to": 321
  }, {
    "from": 317,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 317,
    "label": "has",
    "to": 325
  }, {
    "from": 314,
    "label": "has",
    "to": 326
  }, {
    "from": 311,
    "label": "has",
    "to": 38
  }, {
    "from": 311,
    "label": "has",
    "to": 327
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 38
  }, {
    "from": 329,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 38
  }, {
    "from": 328,
    "label": "has",
    "to": 333
  }, {
    "from": 328,
    "label": "has",
    "to": 38
  }, {
    "from": 328,
    "label": "has",
    "to": 334
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 335,
    "label": "has",
    "to": 337
  }, {
    "from": 335,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 38
  }, {
    "from": 335,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 38
  }, {
    "from": 335,
    "label": "has",
    "to": 342
  }, {
    "from": 335,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 38
  }, {
    "from": 335,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 344
  }, {
    "from": 345,
    "label": "has",
    "to": 38
  }, {
    "from": 335,
    "label": "has",
    "to": 346
  }, {
    "from": 335,
    "label": "has",
    "to": 347
  }, {
    "from": 335,
    "label": "has",
    "to": 348
  }, {
    "from": 335,
    "label": "has",
    "to": 349
  }, {
    "from": 335,
    "label": "has",
    "to": 350
  }, {
    "from": 335,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 38
  }, {
    "from": 335,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 38
  }, {
    "from": 335,
    "label": "has",
    "to": 38
  }, {
    "from": 335,
    "label": "has",
    "to": 354
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 356,
    "label": "has",
    "to": 252
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 355,
    "label": "has",
    "to": 359
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 359,
    "label": "has",
    "to": 361
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 359,
    "label": "has",
    "to": 363
  }, {
    "from": 359,
    "label": "has",
    "to": 364
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 355,
    "label": "has",
    "to": 38
  }, {
    "from": 355,
    "label": "has",
    "to": 38
  }, {
    "from": 355,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 367,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 367,
    "label": "has",
    "to": 38
  }, {
    "from": 367,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 38
  }, {
    "from": 372,
    "label": "has",
    "to": 38
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 375,
    "label": "has",
    "to": 377
  }, {
    "from": 375,
    "label": "has",
    "to": 378
  }, {
    "from": 375,
    "label": "has",
    "to": 379
  }, {
    "from": 375,
    "label": "has",
    "to": 38
  }, {
    "from": 375,
    "label": "has",
    "to": 380
  }, {
    "from": 375,
    "label": "has",
    "to": 381
  }, {
    "from": 375,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 383
  }, {
    "from": 382,
    "label": "has",
    "to": 384
  }, {
    "from": 375,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 385,
    "label": "has",
    "to": 387
  }, {
    "from": 375,
    "label": "has",
    "to": 388
  }, {
    "from": 375,
    "label": "has",
    "to": 389
  }, {
    "from": 375,
    "label": "has",
    "to": 390
  }, {
    "from": 375,
    "label": "has",
    "to": 391
  }, {
    "from": 375,
    "label": "has",
    "to": 392
  }, {
    "from": 375,
    "label": "has",
    "to": 393
  }, {
    "from": 375,
    "label": "has",
    "to": 394
  }, {
    "from": 375,
    "label": "has",
    "to": 395
  }, {
    "from": 375,
    "label": "has",
    "to": 396
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 375,
    "label": "has",
    "to": 38
  }, {
    "from": 375,
    "label": "has",
    "to": 398
  }, {
    "from": 398,
    "label": "has",
    "to": 397
  }, {
    "from": 375,
    "label": "has",
    "to": 38
  }, {
    "from": 375,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 397
  }, {
    "from": 375,
    "label": "has",
    "to": 38
  }, {
    "from": 375,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 397
  }, {
    "from": 375,
    "label": "has",
    "to": 38
  }, {
    "from": 375,
    "label": "has",
    "to": 397
  }, {
    "from": 375,
    "label": "has",
    "to": 38
  }, {
    "from": 375,
    "label": "has",
    "to": 401
  }, {
    "from": 402,
    "label": "has",
    "to": 38
  }, {
    "from": 402,
    "label": "has",
    "to": 403
  }, {
    "from": 404,
    "label": "has",
    "to": 137
  }, {
    "from": 404,
    "label": "has",
    "to": 138
  }, {
    "from": 404,
    "label": "has",
    "to": 38
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 406,
    "label": "has",
    "to": 408
  }, {
    "from": 406,
    "label": "has",
    "to": 409
  }, {
    "from": 410,
    "label": "has",
    "to": 38
  }, {
    "from": 411,
    "label": "has",
    "to": 38
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 412,
    "label": "has",
    "to": 414
  }, {
    "from": 412,
    "label": "has",
    "to": 21
  }, {
    "from": 412,
    "label": "has",
    "to": 415
  }, {
    "from": 416,
    "label": "has",
    "to": 38
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 417,
    "label": "has",
    "to": 414
  }, {
    "from": 417,
    "label": "has",
    "to": 21
  }, {
    "from": 417,
    "label": "has",
    "to": 419
  }, {
    "from": 420,
    "label": "has",
    "to": 38
  }, {
    "from": 421,
    "label": "has",
    "to": 38
  }, {
    "from": 422,
    "label": "has",
    "to": 38
  }, {
    "from": 423,
    "label": "has",
    "to": 38
  }, {
    "from": 424,
    "label": "has",
    "to": 425
  }, {
    "from": 424,
    "label": "has",
    "to": 426
  }, {
    "from": 426,
    "label": "has",
    "to": 427
  }, {
    "from": 426,
    "label": "has",
    "to": 428
  }, {
    "from": 424,
    "label": "has",
    "to": 429
  }, {
    "from": 424,
    "label": "has",
    "to": 430
  }, {
    "from": 424,
    "label": "has",
    "to": 431
  }, {
    "from": 432,
    "label": "has",
    "to": 433
  }, {
    "from": 432,
    "label": "has",
    "to": 434
  }, {
    "from": 435,
    "label": "has",
    "to": 182
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 437,
    "label": "has",
    "to": 38
  }, {
    "from": 438,
    "label": "has",
    "to": 439
  }, {
    "from": 438,
    "label": "has",
    "to": 426
  }, {
    "from": 426,
    "label": "has",
    "to": 427
  }, {
    "from": 426,
    "label": "has",
    "to": 428
  }, {
    "from": 438,
    "label": "has",
    "to": 429
  }, {
    "from": 438,
    "label": "has",
    "to": 430
  }, {
    "from": 438,
    "label": "has",
    "to": 440
  }, {
    "from": 441,
    "label": "has",
    "to": 433
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 443,
    "label": "has",
    "to": 182
  }, {
    "from": 443,
    "label": "has",
    "to": 444
  }, {
    "from": 445,
    "label": "has",
    "to": 38
  }, {
    "from": 446,
    "label": "has",
    "to": 182
  }, {
    "from": 446,
    "label": "has",
    "to": 447
  }, {
    "from": 446,
    "label": "has",
    "to": 182
  }, {
    "from": 446,
    "label": "has",
    "to": 448
  }, {
    "from": 449,
    "label": "has",
    "to": 38
  }, {
    "from": 450,
    "label": "has",
    "to": 182
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 450,
    "label": "has",
    "to": 452
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 453,
    "label": "has",
    "to": 182
  }, {
    "from": 453,
    "label": "has",
    "to": 455
  }, {
    "from": 456,
    "label": "has",
    "to": 38
  }, {
    "from": 457,
    "label": "has",
    "to": 182
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 457,
    "label": "has",
    "to": 182
  }, {
    "from": 457,
    "label": "has",
    "to": 459
  }, {
    "from": 460,
    "label": "has",
    "to": 38
  }, {
    "from": 461,
    "label": "has",
    "to": 182
  }, {
    "from": 461,
    "label": "has",
    "to": 458
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 463,
    "label": "has",
    "to": 454
  }, {
    "from": 463,
    "label": "has",
    "to": 182
  }, {
    "from": 463,
    "label": "has",
    "to": 464
  }, {
    "from": 465,
    "label": "has",
    "to": 38
  }, {
    "from": 466,
    "label": "has",
    "to": 38
  }, {
    "from": 467,
    "label": "has",
    "to": 38
  }, {
    "from": 468,
    "label": "has",
    "to": 469
  }, {
    "from": 468,
    "label": "has",
    "to": 38
  }, {
    "from": 468,
    "label": "has",
    "to": 38
  }, {
    "from": 468,
    "label": "has",
    "to": 470
  }, {
    "from": 471,
    "label": "has",
    "to": 38
  }, {
    "from": 472,
    "label": "has",
    "to": 38
  }, {
    "from": 473,
    "label": "has",
    "to": 38
  }, {
    "from": 474,
    "label": "has",
    "to": 38
  }, {
    "from": 475,
    "label": "has",
    "to": 476
  }, {
    "from": 475,
    "label": "has",
    "to": 477
  }, {
    "from": 477,
    "label": "has",
    "to": 478
  }, {
    "from": 477,
    "label": "has",
    "to": 479
  }, {
    "from": 477,
    "label": "has",
    "to": 480
  }, {
    "from": 477,
    "label": "has",
    "to": 481
  }, {
    "from": 477,
    "label": "has",
    "to": 482
  }, {
    "from": 482,
    "label": "has",
    "to": 221
  }, {
    "from": 482,
    "label": "has",
    "to": 483
  }, {
    "from": 483,
    "label": "has",
    "to": 484
  }, {
    "from": 482,
    "label": "has",
    "to": 485
  }, {
    "from": 482,
    "label": "has",
    "to": 485
  }, {
    "from": 475,
    "label": "has",
    "to": 486
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 487,
    "label": "has",
    "to": 489
  }, {
    "from": 490,
    "label": "has",
    "to": 38
  }, {
    "from": 491,
    "label": "has",
    "to": 492
  }, {
    "from": 492,
    "label": "has",
    "to": 210
  }, {
    "from": 492,
    "label": "has",
    "to": 221
  }, {
    "from": 492,
    "label": "has",
    "to": 493
  }, {
    "from": 491,
    "label": "has",
    "to": 494
  }, {
    "from": 495,
    "label": "has",
    "to": 496
  }, {
    "from": 496,
    "label": "has",
    "to": 497
  }, {
    "from": 497,
    "label": "has",
    "to": 204
  }, {
    "from": 497,
    "label": "has",
    "to": 182
  }, {
    "from": 497,
    "label": "has",
    "to": 210
  }, {
    "from": 495,
    "label": "has",
    "to": 498
  }, {
    "from": 499,
    "label": "has",
    "to": 500
  }, {
    "from": 500,
    "label": "has",
    "to": 501
  }, {
    "from": 500,
    "label": "has",
    "to": 221
  }, {
    "from": 500,
    "label": "has",
    "to": 502
  }, {
    "from": 502,
    "label": "has",
    "to": 484
  }, {
    "from": 500,
    "label": "has",
    "to": 503
  }, {
    "from": 499,
    "label": "has",
    "to": 504
  }, {
    "from": 505,
    "label": "has",
    "to": 506
  }, {
    "from": 506,
    "label": "has",
    "to": 501
  }, {
    "from": 506,
    "label": "has",
    "to": 221
  }, {
    "from": 506,
    "label": "has",
    "to": 476
  }, {
    "from": 506,
    "label": "has",
    "to": 507
  }, {
    "from": 507,
    "label": "has",
    "to": 478
  }, {
    "from": 507,
    "label": "has",
    "to": 479
  }, {
    "from": 507,
    "label": "has",
    "to": 508
  }, {
    "from": 507,
    "label": "has",
    "to": 481
  }, {
    "from": 507,
    "label": "has",
    "to": 483
  }, {
    "from": 483,
    "label": "has",
    "to": 484
  }, {
    "from": 507,
    "label": "has",
    "to": 485
  }, {
    "from": 505,
    "label": "has",
    "to": 509
  }, {
    "from": 510,
    "label": "has",
    "to": 511
  }, {
    "from": 510,
    "label": "has",
    "to": 512
  }, {
    "from": 512,
    "label": "has",
    "to": 513
  }, {
    "from": 510,
    "label": "has",
    "to": 514
  }, {
    "from": 515,
    "label": "has",
    "to": 516
  }, {
    "from": 515,
    "label": "has",
    "to": 517
  }, {
    "from": 515,
    "label": "has",
    "to": 518
  }, {
    "from": 519,
    "label": "has",
    "to": 516
  }, {
    "from": 519,
    "label": "has",
    "to": 520
  }, {
    "from": 520,
    "label": "has",
    "to": 521
  }, {
    "from": 519,
    "label": "has",
    "to": 522
  }, {
    "from": 519,
    "label": "has",
    "to": 523
  }, {
    "from": 524,
    "label": "has",
    "to": 478
  }, {
    "from": 524,
    "label": "has",
    "to": 479
  }, {
    "from": 524,
    "label": "has",
    "to": 525
  }, {
    "from": 524,
    "label": "has",
    "to": 526
  }, {
    "from": 524,
    "label": "has",
    "to": 527
  }, {
    "from": 524,
    "label": "has",
    "to": 528
  }, {
    "from": 529,
    "label": "has",
    "to": 38
  }, {
    "from": 530,
    "label": "has",
    "to": 221
  }, {
    "from": 530,
    "label": "has",
    "to": 38
  }, {
    "from": 530,
    "label": "has",
    "to": 531
  }, {
    "from": 532,
    "label": "has",
    "to": 221
  }, {
    "from": 532,
    "label": "has",
    "to": 533
  }, {
    "from": 534,
    "label": "has",
    "to": 38
  }, {
    "from": 535,
    "label": "has",
    "to": 536
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 535,
    "label": "has",
    "to": 538
  }, {
    "from": 539,
    "label": "has",
    "to": 540
  }, {
    "from": 539,
    "label": "has",
    "to": 210
  }, {
    "from": 539,
    "label": "has",
    "to": 541
  }, {
    "from": 542,
    "label": "has",
    "to": 221
  }, {
    "from": 542,
    "label": "has",
    "to": 543
  }, {
    "from": 544,
    "label": "has",
    "to": 545
  }, {
    "from": 544,
    "label": "has",
    "to": 38
  }, {
    "from": 544,
    "label": "has",
    "to": 546
  }, {
    "from": 547,
    "label": "has",
    "to": 454
  }, {
    "from": 547,
    "label": "has",
    "to": 221
  }, {
    "from": 547,
    "label": "has",
    "to": 548
  }, {
    "from": 549,
    "label": "has",
    "to": 545
  }, {
    "from": 549,
    "label": "has",
    "to": 38
  }, {
    "from": 549,
    "label": "has",
    "to": 550
  }, {
    "from": 551,
    "label": "has",
    "to": 552
  }, {
    "from": 551,
    "label": "has",
    "to": 553
  }, {
    "from": 554,
    "label": "has",
    "to": 555
  }, {
    "from": 554,
    "label": "has",
    "to": 210
  }, {
    "from": 554,
    "label": "has",
    "to": 556
  }, {
    "from": 557,
    "label": "has",
    "to": 558
  }, {
    "from": 557,
    "label": "has",
    "to": 38
  }, {
    "from": 557,
    "label": "has",
    "to": 559
  }, {
    "from": 560,
    "label": "has",
    "to": 182
  }, {
    "from": 560,
    "label": "has",
    "to": 221
  }, {
    "from": 560,
    "label": "has",
    "to": 561
  }, {
    "from": 562,
    "label": "has",
    "to": 331
  }, {
    "from": 562,
    "label": "has",
    "to": 38
  }, {
    "from": 562,
    "label": "has",
    "to": 563
  }, {
    "from": 564,
    "label": "has",
    "to": 38
  }, {
    "from": 564,
    "label": "has",
    "to": 565
  }, {
    "from": 566,
    "label": "has",
    "to": 339
  }, {
    "from": 566,
    "label": "has",
    "to": 38
  }, {
    "from": 566,
    "label": "has",
    "to": 567
  }, {
    "from": 568,
    "label": "has",
    "to": 341
  }, {
    "from": 568,
    "label": "has",
    "to": 38
  }, {
    "from": 568,
    "label": "has",
    "to": 569
  }, {
    "from": 570,
    "label": "has",
    "to": 344
  }, {
    "from": 570,
    "label": "has",
    "to": 38
  }, {
    "from": 570,
    "label": "has",
    "to": 571
  }, {
    "from": 572,
    "label": "has",
    "to": 344
  }, {
    "from": 572,
    "label": "has",
    "to": 38
  }, {
    "from": 572,
    "label": "has",
    "to": 573
  }, {
    "from": 574,
    "label": "has",
    "to": 38
  }, {
    "from": 574,
    "label": "has",
    "to": 575
  }, {
    "from": 576,
    "label": "has",
    "to": 38
  }, {
    "from": 576,
    "label": "has",
    "to": 577
  }, {
    "from": 52,
    "label": "calls",
    "to": 599
  }, {
    "from": 184,
    "label": "calls",
    "to": 600
  }, {
    "from": 184,
    "label": "calls",
    "to": 600
  }, {
    "from": 311,
    "label": "calls",
    "to": 600
  }, {
    "from": 2,
    "label": "calls",
    "to": 601
  }, {
    "from": 40,
    "label": "calls",
    "to": 601
  }, {
    "from": 40,
    "label": "calls",
    "to": 601
  }, {
    "from": 118,
    "label": "calls",
    "to": 601
  }, {
    "from": 126,
    "label": "calls",
    "to": 601
  }, {
    "from": 578,
    "label": "calls",
    "to": 601
  }, {
    "from": 578,
    "label": "calls",
    "to": 601
  }, {
    "from": 126,
    "label": "calls",
    "to": 602
  }, {
    "from": 2,
    "label": "calls",
    "to": 603
  }, {
    "from": 92,
    "label": "calls",
    "to": 2
  }, {
    "from": 92,
    "label": "calls",
    "to": 2
  }, {
    "from": 65,
    "label": "calls",
    "to": 605
  }, {
    "from": 65,
    "label": "calls",
    "to": 605
  }, {
    "from": 65,
    "label": "calls",
    "to": 605
  }, {
    "from": 92,
    "label": "calls",
    "to": 605
  }, {
    "from": 118,
    "label": "calls",
    "to": 605
  }, {
    "from": 118,
    "label": "calls",
    "to": 605
  }, {
    "from": 140,
    "label": "calls",
    "to": 605
  }, {
    "from": 140,
    "label": "calls",
    "to": 605
  }, {
    "from": 184,
    "label": "calls",
    "to": 605
  }, {
    "from": 578,
    "label": "calls",
    "to": 605
  }, {
    "from": 578,
    "label": "calls",
    "to": 605
  }, {
    "from": 578,
    "label": "calls",
    "to": 605
  }, {
    "from": 578,
    "label": "calls",
    "to": 605
  }, {
    "from": 578,
    "label": "calls",
    "to": 605
  }, {
    "from": 302,
    "label": "calls",
    "to": 605
  }, {
    "from": 302,
    "label": "calls",
    "to": 605
  }, {
    "from": 375,
    "label": "calls",
    "to": 605
  }, {
    "from": 180,
    "label": "calls",
    "to": 606
  }, {
    "from": 140,
    "label": "calls",
    "to": 607
  }, {
    "from": 270,
    "label": "calls",
    "to": 594
  }, {
    "from": 293,
    "label": "calls",
    "to": 594
  }, {
    "from": 140,
    "label": "calls",
    "to": 608
  }, {
    "from": 140,
    "label": "calls",
    "to": 609
  }, {
    "from": 140,
    "label": "calls",
    "to": 609
  }, {
    "from": 2,
    "label": "calls",
    "to": 610
  }, {
    "from": 2,
    "label": "calls",
    "to": 610
  }, {
    "from": 2,
    "label": "calls",
    "to": 610
  }, {
    "from": 54,
    "label": "calls",
    "to": 610
  }, {
    "from": 65,
    "label": "calls",
    "to": 610
  }, {
    "from": 92,
    "label": "calls",
    "to": 610
  }, {
    "from": 132,
    "label": "calls",
    "to": 610
  }, {
    "from": 276,
    "label": "calls",
    "to": 610
  }, {
    "from": 285,
    "label": "calls",
    "to": 610
  }, {
    "from": 293,
    "label": "calls",
    "to": 610
  }, {
    "from": 355,
    "label": "calls",
    "to": 610
  }, {
    "from": 355,
    "label": "calls",
    "to": 610
  }, {
    "from": 578,
    "label": "calls",
    "to": 638
  }, {
    "from": 578,
    "label": "calls",
    "to": 638
  }, {
    "from": 65,
    "label": "calls",
    "to": 587
  }, {
    "from": 132,
    "label": "calls",
    "to": 587
  }, {
    "from": 302,
    "label": "calls",
    "to": 636
  }, {
    "from": 302,
    "label": "calls",
    "to": 636
  }, {
    "from": 302,
    "label": "calls",
    "to": 636
  }, {
    "from": 311,
    "label": "calls",
    "to": 636
  }, {
    "from": 355,
    "label": "calls",
    "to": 636
  }, {
    "from": 355,
    "label": "calls",
    "to": 636
  }, {
    "from": 355,
    "label": "calls",
    "to": 636
  }, {
    "from": 65,
    "label": "calls",
    "to": 597
  }, {
    "from": 92,
    "label": "calls",
    "to": 598
  }, {
    "from": 92,
    "label": "calls",
    "to": 598
  }, {
    "from": 293,
    "label": "calls",
    "to": 598
  }, {
    "from": 375,
    "label": "calls",
    "to": 598
  }, {
    "from": 578,
    "label": "calls",
    "to": 614
  }, {
    "from": 578,
    "label": "calls",
    "to": 614
  }, {
    "from": 578,
    "label": "calls",
    "to": 614
  }, {
    "from": 578,
    "label": "calls",
    "to": 614
  }, {
    "from": 578,
    "label": "calls",
    "to": 614
  }, {
    "from": 140,
    "label": "calls",
    "to": 592
  }, {
    "from": 375,
    "label": "calls",
    "to": 643
  }, {
    "from": 302,
    "label": "calls",
    "to": 615
  }, {
    "from": 2,
    "label": "calls",
    "to": 616
  }, {
    "from": 40,
    "label": "calls",
    "to": 92
  }, {
    "from": 92,
    "label": "calls",
    "to": 92
  }, {
    "from": 65,
    "label": "calls",
    "to": 617
  }, {
    "from": 285,
    "label": "calls",
    "to": 617
  }, {
    "from": 54,
    "label": "calls",
    "to": 588
  }, {
    "from": 2,
    "label": "calls",
    "to": 618
  }, {
    "from": 2,
    "label": "calls",
    "to": 618
  }, {
    "from": 2,
    "label": "calls",
    "to": 618
  }, {
    "from": 2,
    "label": "calls",
    "to": 618
  }, {
    "from": 2,
    "label": "calls",
    "to": 618
  }, {
    "from": 2,
    "label": "calls",
    "to": 618
  }, {
    "from": 184,
    "label": "calls",
    "to": 618
  }, {
    "from": 184,
    "label": "calls",
    "to": 618
  }, {
    "from": 213,
    "label": "calls",
    "to": 618
  }, {
    "from": 213,
    "label": "calls",
    "to": 618
  }, {
    "from": 223,
    "label": "calls",
    "to": 618
  }, {
    "from": 227,
    "label": "calls",
    "to": 618
  }, {
    "from": 245,
    "label": "calls",
    "to": 618
  }, {
    "from": 256,
    "label": "calls",
    "to": 618
  }, {
    "from": 266,
    "label": "calls",
    "to": 618
  }, {
    "from": 578,
    "label": "calls",
    "to": 618
  }, {
    "from": 578,
    "label": "calls",
    "to": 618
  }, {
    "from": 276,
    "label": "calls",
    "to": 618
  }, {
    "from": 276,
    "label": "calls",
    "to": 618
  }, {
    "from": 328,
    "label": "calls",
    "to": 618
  }, {
    "from": 335,
    "label": "calls",
    "to": 618
  }, {
    "from": 335,
    "label": "calls",
    "to": 618
  }, {
    "from": 335,
    "label": "calls",
    "to": 618
  }, {
    "from": 335,
    "label": "calls",
    "to": 618
  }, {
    "from": 355,
    "label": "calls",
    "to": 618
  }, {
    "from": 200,
    "label": "calls",
    "to": 619
  }, {
    "from": 213,
    "label": "calls",
    "to": 619
  }, {
    "from": 126,
    "label": "calls",
    "to": 620
  }, {
    "from": 132,
    "label": "calls",
    "to": 620
  }, {
    "from": 375,
    "label": "calls",
    "to": 367
  }, {
    "from": 375,
    "label": "calls",
    "to": 367
  }, {
    "from": 375,
    "label": "calls",
    "to": 367
  }, {
    "from": 375,
    "label": "calls",
    "to": 367
  }, {
    "from": 40,
    "label": "calls",
    "to": 585
  }, {
    "from": 375,
    "label": "calls",
    "to": 585
  }, {
    "from": 375,
    "label": "calls",
    "to": 585
  }, {
    "from": 54,
    "label": "calls",
    "to": 621
  }, {
    "from": 140,
    "label": "calls",
    "to": 621
  }, {
    "from": 302,
    "label": "calls",
    "to": 328
  }, {
    "from": 335,
    "label": "calls",
    "to": 328
  }, {
    "from": 578,
    "label": "calls",
    "to": 622
  }, {
    "from": 578,
    "label": "calls",
    "to": 622
  }, {
    "from": 578,
    "label": "calls",
    "to": 622
  }, {
    "from": 578,
    "label": "calls",
    "to": 622
  }, {
    "from": 328,
    "label": "calls",
    "to": 622
  }, {
    "from": 328,
    "label": "calls",
    "to": 622
  }, {
    "from": 335,
    "label": "calls",
    "to": 622
  }, {
    "from": 335,
    "label": "calls",
    "to": 622
  }, {
    "from": 375,
    "label": "calls",
    "to": 622
  }, {
    "from": 375,
    "label": "calls",
    "to": 622
  }, {
    "from": 375,
    "label": "calls",
    "to": 622
  }, {
    "from": 375,
    "label": "calls",
    "to": 622
  }, {
    "from": 375,
    "label": "calls",
    "to": 622
  }, {
    "from": 270,
    "label": "calls",
    "to": 593
  }, {
    "from": 293,
    "label": "calls",
    "to": 593
  }, {
    "from": 140,
    "label": "calls",
    "to": 623
  }, {
    "from": 256,
    "label": "calls",
    "to": 624
  }, {
    "from": 300,
    "label": "calls",
    "to": 624
  }, {
    "from": 300,
    "label": "calls",
    "to": 624
  }, {
    "from": 302,
    "label": "calls",
    "to": 624
  }, {
    "from": 328,
    "label": "calls",
    "to": 624
  }, {
    "from": 328,
    "label": "calls",
    "to": 624
  }, {
    "from": 328,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 335,
    "label": "calls",
    "to": 624
  }, {
    "from": 40,
    "label": "calls",
    "to": 285
  }, {
    "from": 54,
    "label": "calls",
    "to": 65
  }, {
    "from": 54,
    "label": "calls",
    "to": 65
  }, {
    "from": 65,
    "label": "calls",
    "to": 65
  }, {
    "from": 184,
    "label": "calls",
    "to": 626
  }, {
    "from": 578,
    "label": "calls",
    "to": 626
  }, {
    "from": 578,
    "label": "calls",
    "to": 626
  }, {
    "from": 578,
    "label": "calls",
    "to": 627
  }, {
    "from": 578,
    "label": "calls",
    "to": 627
  }, {
    "from": 578,
    "label": "calls",
    "to": 627
  }, {
    "from": 578,
    "label": "calls",
    "to": 627
  }, {
    "from": 367,
    "label": "calls",
    "to": 628
  }, {
    "from": 2,
    "label": "calls",
    "to": 629
  }, {
    "from": 578,
    "label": "calls",
    "to": 629
  }, {
    "from": 578,
    "label": "calls",
    "to": 629
  }, {
    "from": 578,
    "label": "calls",
    "to": 629
  }, {
    "from": 375,
    "label": "calls",
    "to": 583
  }, {
    "from": 375,
    "label": "calls",
    "to": 583
  }, {
    "from": 375,
    "label": "calls",
    "to": 583
  }, {
    "from": 375,
    "label": "calls",
    "to": 583
  }, {
    "from": 375,
    "label": "calls",
    "to": 583
  }, {
    "from": 367,
    "label": "calls",
    "to": 630
  }, {
    "from": 578,
    "label": "calls",
    "to": 590
  }, {
    "from": 578,
    "label": "calls",
    "to": 591
  }, {
    "from": 578,
    "label": "calls",
    "to": 611
  }, {
    "from": 578,
    "label": "calls",
    "to": 611
  }, {
    "from": 578,
    "label": "calls",
    "to": 612
  }, {
    "from": 578,
    "label": "calls",
    "to": 612
  }, {
    "from": 578,
    "label": "calls",
    "to": 612
  }, {
    "from": 578,
    "label": "calls",
    "to": 612
  }, {
    "from": 578,
    "label": "calls",
    "to": 631
  }, {
    "from": 92,
    "label": "calls",
    "to": 632
  }, {
    "from": 92,
    "label": "calls",
    "to": 632
  }, {
    "from": 40,
    "label": "calls",
    "to": 54
  }, {
    "from": 54,
    "label": "calls",
    "to": 54
  }, {
    "from": 273,
    "label": "calls",
    "to": 584
  }, {
    "from": 276,
    "label": "calls",
    "to": 584
  }, {
    "from": 375,
    "label": "calls",
    "to": 584
  }, {
    "from": 140,
    "label": "calls",
    "to": 634
  }, {
    "from": 2,
    "label": "calls",
    "to": 118
  }, {
    "from": 140,
    "label": "calls",
    "to": 646
  }, {
    "from": 184,
    "label": "calls",
    "to": 641
  }, {
    "from": 578,
    "label": "calls",
    "to": 641
  }, {
    "from": 578,
    "label": "calls",
    "to": 641
  }, {
    "from": 578,
    "label": "calls",
    "to": 641
  }, {
    "from": 40,
    "label": "calls",
    "to": 635
  }, {
    "from": 140,
    "label": "calls",
    "to": 625
  }, {
    "from": 140,
    "label": "calls",
    "to": 625
  }, {
    "from": 126,
    "label": "calls",
    "to": 637
  }, {
    "from": 132,
    "label": "calls",
    "to": 637
  }, {
    "from": 140,
    "label": "calls",
    "to": 410
  }, {
    "from": 126,
    "label": "calls",
    "to": 633
  }, {
    "from": 54,
    "label": "calls",
    "to": 596
  }, {
    "from": 180,
    "label": "calls",
    "to": 639
  }, {
    "from": 223,
    "label": "calls",
    "to": 639
  }, {
    "from": 245,
    "label": "calls",
    "to": 639
  }, {
    "from": 256,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 578,
    "label": "calls",
    "to": 639
  }, {
    "from": 54,
    "label": "calls",
    "to": 586
  }, {
    "from": 285,
    "label": "calls",
    "to": 586
  }, {
    "from": 54,
    "label": "calls",
    "to": 595
  }, {
    "from": 65,
    "label": "calls",
    "to": 595
  }, {
    "from": 335,
    "label": "calls",
    "to": 604
  }, {
    "from": 200,
    "label": "calls",
    "to": 642
  }, {
    "from": 213,
    "label": "calls",
    "to": 642
  }, {
    "from": 223,
    "label": "calls",
    "to": 642
  }, {
    "from": 578,
    "label": "calls",
    "to": 642
  }, {
    "from": 578,
    "label": "calls",
    "to": 642
  }, {
    "from": 578,
    "label": "calls",
    "to": 642
  }, {
    "from": 578,
    "label": "calls",
    "to": 642
  }, {
    "from": 578,
    "label": "calls",
    "to": 648
  }, {
    "from": 578,
    "label": "calls",
    "to": 648
  }, {
    "from": 578,
    "label": "calls",
    "to": 648
  }, {
    "from": 578,
    "label": "calls",
    "to": 648
  }, {
    "from": 578,
    "label": "calls",
    "to": 648
  }, {
    "from": 578,
    "label": "calls",
    "to": 648
  }, {
    "from": 273,
    "label": "calls",
    "to": 270
  }, {
    "from": 276,
    "label": "calls",
    "to": 270
  }, {
    "from": 2,
    "label": "calls",
    "to": 644
  }, {
    "from": 276,
    "label": "calls",
    "to": 644
  }, {
    "from": 302,
    "label": "calls",
    "to": 300
  }, {
    "from": 335,
    "label": "calls",
    "to": 300
  }, {
    "from": 302,
    "label": "calls",
    "to": 640
  }, {
    "from": 65,
    "label": "calls",
    "to": 645
  }, {
    "from": 285,
    "label": "calls",
    "to": 645
  }, {
    "from": 578,
    "label": "calls",
    "to": 647
  }, {
    "from": 302,
    "label": "calls",
    "to": 613
  }, {
    "from": 335,
    "label": "calls",
    "to": 613
  }, {
    "from": 285,
    "label": "calls",
    "to": 589
  }, {
    "from": 1,
    "label": "contains",
    "to": 578
  }, {
    "from": 578,
    "label": "declares",
    "to": 2
  }, {
    "from": 578,
    "label": "declares",
    "to": 40
  }, {
    "from": 578,
    "label": "declares",
    "to": 52
  }, {
    "from": 578,
    "label": "declares",
    "to": 54
  }, {
    "from": 578,
    "label": "declares",
    "to": 65
  }, {
    "from": 578,
    "label": "declares",
    "to": 92
  }, {
    "from": 578,
    "label": "declares",
    "to": 118
  }, {
    "from": 578,
    "label": "declares",
    "to": 126
  }, {
    "from": 578,
    "label": "declares",
    "to": 132
  }, {
    "from": 578,
    "label": "declares",
    "to": 140
  }, {
    "from": 578,
    "label": "declares",
    "to": 180
  }, {
    "from": 578,
    "label": "declares",
    "to": 184
  }, {
    "from": 578,
    "label": "declares",
    "to": 200
  }, {
    "from": 578,
    "label": "declares",
    "to": 213
  }, {
    "from": 578,
    "label": "declares",
    "to": 223
  }, {
    "from": 578,
    "label": "declares",
    "to": 227
  }, {
    "from": 578,
    "label": "declares",
    "to": 232
  }, {
    "from": 578,
    "label": "declares",
    "to": 241
  }, {
    "from": 578,
    "label": "declares",
    "to": 245
  }, {
    "from": 578,
    "label": "declares",
    "to": 256
  }, {
    "from": 578,
    "label": "declares",
    "to": 266
  }, {
    "from": 578,
    "label": "declares",
    "to": 270
  }, {
    "from": 578,
    "label": "declares",
    "to": 273
  }, {
    "from": 578,
    "label": "declares",
    "to": 276
  }, {
    "from": 578,
    "label": "declares",
    "to": 285
  }, {
    "from": 578,
    "label": "declares",
    "to": 293
  }, {
    "from": 578,
    "label": "declares",
    "to": 300
  }, {
    "from": 578,
    "label": "declares",
    "to": 302
  }, {
    "from": 578,
    "label": "declares",
    "to": 311
  }, {
    "from": 578,
    "label": "declares",
    "to": 328
  }, {
    "from": 578,
    "label": "declares",
    "to": 335
  }, {
    "from": 578,
    "label": "declares",
    "to": 355
  }, {
    "from": 578,
    "label": "declares",
    "to": 367
  }, {
    "from": 578,
    "label": "declares",
    "to": 372
  }, {
    "from": 578,
    "label": "declares",
    "to": 375
  }, {
    "from": 578,
    "label": "declares",
    "to": 402
  }, {
    "from": 578,
    "label": "declares",
    "to": 404
  }, {
    "from": 578,
    "label": "declares",
    "to": 406
  }, {
    "from": 578,
    "label": "declares",
    "to": 410
  }, {
    "from": 578,
    "label": "declares",
    "to": 411
  }, {
    "from": 578,
    "label": "declares",
    "to": 412
  }, {
    "from": 578,
    "label": "declares",
    "to": 416
  }, {
    "from": 578,
    "label": "declares",
    "to": 417
  }, {
    "from": 578,
    "label": "declares",
    "to": 420
  }, {
    "from": 578,
    "label": "declares",
    "to": 421
  }, {
    "from": 578,
    "label": "declares",
    "to": 422
  }, {
    "from": 578,
    "label": "declares",
    "to": 423
  }, {
    "from": 578,
    "label": "declares",
    "to": 424
  }, {
    "from": 578,
    "label": "declares",
    "to": 432
  }, {
    "from": 578,
    "label": "declares",
    "to": 435
  }, {
    "from": 578,
    "label": "declares",
    "to": 437
  }, {
    "from": 578,
    "label": "declares",
    "to": 438
  }, {
    "from": 578,
    "label": "declares",
    "to": 441
  }, {
    "from": 578,
    "label": "declares",
    "to": 443
  }, {
    "from": 578,
    "label": "declares",
    "to": 445
  }, {
    "from": 578,
    "label": "declares",
    "to": 446
  }, {
    "from": 578,
    "label": "declares",
    "to": 449
  }, {
    "from": 578,
    "label": "declares",
    "to": 450
  }, {
    "from": 578,
    "label": "declares",
    "to": 453
  }, {
    "from": 578,
    "label": "declares",
    "to": 456
  }, {
    "from": 578,
    "label": "declares",
    "to": 457
  }, {
    "from": 578,
    "label": "declares",
    "to": 460
  }, {
    "from": 578,
    "label": "declares",
    "to": 461
  }, {
    "from": 578,
    "label": "declares",
    "to": 463
  }, {
    "from": 578,
    "label": "declares",
    "to": 465
  }, {
    "from": 578,
    "label": "declares",
    "to": 466
  }, {
    "from": 578,
    "label": "declares",
    "to": 467
  }, {
    "from": 578,
    "label": "declares",
    "to": 468
  }, {
    "from": 578,
    "label": "declares",
    "to": 471
  }, {
    "from": 578,
    "label": "declares",
    "to": 472
  }, {
    "from": 578,
    "label": "declares",
    "to": 473
  }, {
    "from": 578,
    "label": "declares",
    "to": 474
  }, {
    "from": 578,
    "label": "declares",
    "to": 475
  }, {
    "from": 578,
    "label": "declares",
    "to": 487
  }, {
    "from": 578,
    "label": "declares",
    "to": 490
  }, {
    "from": 578,
    "label": "declares",
    "to": 491
  }, {
    "from": 578,
    "label": "declares",
    "to": 495
  }, {
    "from": 578,
    "label": "declares",
    "to": 499
  }, {
    "from": 578,
    "label": "declares",
    "to": 505
  }, {
    "from": 578,
    "label": "declares",
    "to": 510
  }, {
    "from": 578,
    "label": "declares",
    "to": 515
  }, {
    "from": 578,
    "label": "declares",
    "to": 519
  }, {
    "from": 578,
    "label": "declares",
    "to": 524
  }, {
    "from": 578,
    "label": "declares",
    "to": 529
  }, {
    "from": 578,
    "label": "declares",
    "to": 530
  }, {
    "from": 578,
    "label": "declares",
    "to": 532
  }, {
    "from": 578,
    "label": "declares",
    "to": 534
  }, {
    "from": 578,
    "label": "declares",
    "to": 535
  }, {
    "from": 578,
    "label": "declares",
    "to": 539
  }, {
    "from": 578,
    "label": "declares",
    "to": 542
  }, {
    "from": 578,
    "label": "declares",
    "to": 544
  }, {
    "from": 578,
    "label": "declares",
    "to": 547
  }, {
    "from": 578,
    "label": "declares",
    "to": 549
  }, {
    "from": 578,
    "label": "declares",
    "to": 551
  }, {
    "from": 578,
    "label": "declares",
    "to": 554
  }, {
    "from": 578,
    "label": "declares",
    "to": 557
  }, {
    "from": 578,
    "label": "declares",
    "to": 560
  }, {
    "from": 578,
    "label": "declares",
    "to": 562
  }, {
    "from": 578,
    "label": "declares",
    "to": 564
  }, {
    "from": 578,
    "label": "declares",
    "to": 566
  }, {
    "from": 578,
    "label": "declares",
    "to": 568
  }, {
    "from": 578,
    "label": "declares",
    "to": 570
  }, {
    "from": 578,
    "label": "declares",
    "to": 572
  }, {
    "from": 578,
    "label": "declares",
    "to": 574
  }, {
    "from": 578,
    "label": "declares",
    "to": 576
  }, {
    "from": 1,
    "label": "contains",
    "to": 649
  }, {
    "from": 1,
    "label": "contains",
    "to": 650
  }, {
    "from": 649,
    "label": "initializes",
    "to": 651
  }, {
    "from": 651,
    "label": "assigns",
    "to": 652
  }, {
    "from": 652,
    "label": "assigns",
    "to": 653
  }, {
    "from": 653,
    "label": "assigns",
    "to": 654
  }, {
    "from": 652,
    "label": "assigns",
    "to": 655
  }, {
    "from": 655,
    "label": "assigns",
    "to": 656
  }, {
    "from": 652,
    "label": "assigns",
    "to": 657
  }, {
    "from": 657,
    "label": "assigns",
    "to": 658
  }, {
    "from": 649,
    "label": "initializes",
    "to": 659
  }, {
    "from": 659,
    "label": "assigns",
    "to": 660
  }, {
    "from": 649,
    "label": "initializes",
    "to": 661
  }, {
    "from": 661,
    "label": "assigns",
    "to": 662
  }, {
    "from": 649,
    "label": "initializes",
    "to": 663
  }, {
    "from": 663,
    "label": "assigns",
    "to": 664
  }, {
    "from": 649,
    "label": "initializes",
    "to": 665
  }, {
    "from": 665,
    "label": "assigns",
    "to": 666
  }, {
    "from": 649,
    "label": "initializes",
    "to": 667
  }, {
    "from": 667,
    "label": "assigns",
    "to": 668
  }, {
    "from": 668,
    "label": "assigns",
    "to": 669
  }, {
    "from": 669,
    "label": "assigns",
    "to": 670
  }, {
    "from": 668,
    "label": "assigns",
    "to": 671
  }, {
    "from": 671,
    "label": "assigns",
    "to": 672
  }, {
    "from": 649,
    "label": "initializes",
    "to": 673
  }, {
    "from": 673,
    "label": "assigns",
    "to": 674
  }, {
    "from": 649,
    "label": "initializes",
    "to": 675
  }, {
    "from": 675,
    "label": "assigns",
    "to": 676
  }, {
    "from": 649,
    "label": "initializes",
    "to": 677
  }, {
    "from": 677,
    "label": "assigns",
    "to": 678
  }, {
    "from": 649,
    "label": "initializes",
    "to": 679
  }, {
    "from": 679,
    "label": "assigns",
    "to": 680
  }, {
    "from": 649,
    "label": "initializes",
    "to": 681
  }, {
    "from": 681,
    "label": "assigns",
    "to": 682
  }, {
    "from": 682,
    "label": "assigns",
    "to": 683
  }, {
    "from": 683,
    "label": "assigns",
    "to": 684
  }, {
    "from": 682,
    "label": "assigns",
    "to": 685
  }, {
    "from": 685,
    "label": "assigns",
    "to": 686
  }, {
    "from": 682,
    "label": "assigns",
    "to": 687
  }, {
    "from": 687,
    "label": "assigns",
    "to": 688
  }, {
    "from": 682,
    "label": "assigns",
    "to": 689
  }, {
    "from": 689,
    "label": "assigns",
    "to": 690
  }, {
    "from": 649,
    "label": "initializes",
    "to": 691
  }, {
    "from": 691,
    "label": "assigns",
    "to": 692
  }, {
    "from": 649,
    "label": "initializes",
    "to": 693
  }, {
    "from": 693,
    "label": "assigns",
    "to": 694
  }, {
    "from": 649,
    "label": "initializes",
    "to": 695
  }, {
    "from": 695,
    "label": "assigns",
    "to": 696
  }, {
    "from": 649,
    "label": "initializes",
    "to": 697
  }, {
    "from": 697,
    "label": "assigns",
    "to": 698
  }, {
    "from": 649,
    "label": "initializes",
    "to": 699
  }, {
    "from": 699,
    "label": "assigns",
    "to": 700
  }, {
    "from": 649,
    "label": "initializes",
    "to": 701
  }, {
    "from": 701,
    "label": "assigns",
    "to": 702
  }, {
    "from": 649,
    "label": "initializes",
    "to": 703
  }, {
    "from": 703,
    "label": "assigns",
    "to": 704
  }, {
    "from": 649,
    "label": "initializes",
    "to": 705
  }, {
    "from": 705,
    "label": "assigns",
    "to": 706
  }, {
    "from": 649,
    "label": "initializes",
    "to": 707
  }, {
    "from": 707,
    "label": "assigns",
    "to": 708
  }, {
    "from": 649,
    "label": "initializes",
    "to": 709
  }, {
    "from": 709,
    "label": "assigns",
    "to": 710
  }, {
    "from": 649,
    "label": "initializes",
    "to": 711
  }, {
    "from": 711,
    "label": "assigns",
    "to": 712
  }, {
    "from": 649,
    "label": "initializes",
    "to": 713
  }, {
    "from": 713,
    "label": "assigns",
    "to": 714
  }, {
    "from": 649,
    "label": "initializes",
    "to": 715
  }, {
    "from": 715,
    "label": "assigns",
    "to": 716
  }, {
    "from": 649,
    "label": "initializes",
    "to": 717
  }, {
    "from": 717,
    "label": "assigns",
    "to": 718
  }, {
    "from": 649,
    "label": "initializes",
    "to": 719
  }, {
    "from": 650,
    "label": "initializes",
    "to": 720
  }, {
    "from": 720,
    "label": "requires",
    "to": 582
  }, {
    "from": 1,
    "label": "provides",
    "to": 721
  }, {
    "from": 659,
    "label": "represents",
    "to": 722
  }, {
    "from": 721,
    "label": "provides",
    "to": 722
  }, {
    "from": 659,
    "label": "represents",
    "to": 723
  }, {
    "from": 659,
    "label": "represents",
    "to": 725
  }, {
    "from": 661,
    "label": "contains",
    "to": 54
  }, {
    "from": 724,
    "label": "contains",
    "to": 54
  }, {
    "from": 661,
    "label": "contains",
    "to": 65
  }, {
    "from": 724,
    "label": "contains",
    "to": 65
  }, {
    "from": 661,
    "label": "contains",
    "to": 92
  }, {
    "from": 724,
    "label": "contains",
    "to": 92
  }, {
    "from": 661,
    "label": "contains",
    "to": 118
  }, {
    "from": 724,
    "label": "contains",
    "to": 118
  }, {
    "from": 661,
    "label": "contains",
    "to": 270
  }, {
    "from": 724,
    "label": "contains",
    "to": 270
  }, {
    "from": 661,
    "label": "contains",
    "to": 273
  }, {
    "from": 724,
    "label": "contains",
    "to": 273
  }, {
    "from": 661,
    "label": "contains",
    "to": 276
  }, {
    "from": 724,
    "label": "contains",
    "to": 276
  }, {
    "from": 661,
    "label": "contains",
    "to": 285
  }, {
    "from": 724,
    "label": "contains",
    "to": 285
  }, {
    "from": 661,
    "label": "contains",
    "to": 293
  }, {
    "from": 724,
    "label": "contains",
    "to": 293
  }, {
    "from": 661,
    "label": "contains",
    "to": 328
  }, {
    "from": 724,
    "label": "contains",
    "to": 328
  }, {
    "from": 661,
    "label": "contains",
    "to": 579
  }, {
    "from": 661,
    "label": "contains",
    "to": 580
  }, {
    "from": 661,
    "label": "contains",
    "to": 581
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 402
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 404
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Doc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function lib.new(path, def)\r\n  def = def or {}\r\n  local self = {\r\n    path   = path,\r\n    name   = def.name,\r\n    target = def.target,\r\n    header = def.header or DEFAULT_HEADER,\r\n    footer = def.footer or DEFAULT_FOOTER,\r\n    navigation = def.navigation or {},\r\n    children   = def.children or {},\r\n    sections = {},\r\n    -- List of documented parameters.\r\n    params   = {},\r\n    opts     = def.opts or def,\r\n  }\r\n  \r\n  if def.navigation then\r\n    self.module   = self.navigation.__fullname\r\n    self.name     = self.children.__name\r\n    if def.toplevel then\r\n      self.toplevel = true\r\n      self.fullname = self.name\r\n      self.navigation = self.children\r\n    else\r\n      if self.navigation.__fullname then\r\n        self.fullname = self.navigation.__fullname .. '.' .. self.name\r\n      else\r\n        self.fullname = self.name\r\n      end\r\n    end\r\n  elseif path then\r\n    self.module, self.name, self.fullname = private.getName(path)\r\n  else\r\n    assert(self.name)\r\n  end\r\n\r\n  setmetatable(self, lib)\r\n  if path then\r\n    private.parseFile(self, path)\r\n  elseif def.code then\r\n    private.parseCode(self, def.code)\r\n  else\r\n    -- make dummy doc\r\n    private.newSection(self, 0, self.name)\r\n    table.insert(self.group, {text = '', class = 'summary'})\r\n  end\r\n\r\n  if self.children and #self.children > 0 then\r\n    local children = self.children\r\n    local section = self.section\r\n    for _, name in ipairs(children) do\r\n      local child = children[name]\r\n\r\n      local group = {\r\n        -- Use 'class' key for children elements.\r\n        class = child.__fullname,\r\n        name  = child.__name,\r\n        child.__summary,\r\n        child.__img,\r\n      }\r\n\r\n      if child.__fixme then\r\n        for _, p in ipairs(child.__fixme[1]) do\r\n          table.insert(group, p)\r\n        end\r\n      end\r\n\r\n      if child.__todo then\r\n        for _, p in ipairs(child.__todo[1]) do\r\n          table.insert(group, p)\r\n        end\r\n      end\r\n\r\n      table.insert(section, group)\r\n    end\r\n  end\r\n\r\n  if self.todo then\r\n    table.insert(self.sections, self.todo)\r\n  end\r\n\r\n  if self.fixme then\r\n    table.insert(self.sections, self.fixme)\r\n  end\r\n\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "def = def or {}",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local self = {\r\n    path   = path,\r\n    name   = def.name,\r\n    target = def.target,\r\n    header = def.header or DEFAULT_HEADER,\r\n    footer = def.footer or DEFAULT_FOOTER,\r\n    navigation = def.navigation or {},\r\n    children   = def.children or {},\r\n    sections = {},\r\n    -- List of documented parameters.\r\n    params   = {},\r\n    opts     = def.opts or def,\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if def.navigation then\r\n    self.module   = self.navigation.__fullname\r\n    self.name     = self.children.__name\r\n    if def.toplevel then\r\n      self.toplevel = true\r\n      self.fullname = self.name\r\n      self.navigation = self.children\r\n    else\r\n      if self.navigation.__fullname then\r\n        self.fullname = self.navigation.__fullname .. '.' .. self.name\r\n      else\r\n        self.fullname = self.name\r\n      end\r\n    end\r\n  elseif path then\r\n    self.module, self.name, self.fullname = private.getName(path)\r\n  else\r\n    assert(self.name)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "self.module   = self.navigation.__fullname",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "self.name     = self.children.__name",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if def.toplevel then\r\n      self.toplevel = true\r\n      self.fullname = self.name\r\n      self.navigation = self.children\r\n    else\r\n      if self.navigation.__fullname then\r\n        self.fullname = self.navigation.__fullname .. '.' .. self.name\r\n      else\r\n        self.fullname = self.name\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "self.toplevel = true",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "self.fullname = self.name",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "self.navigation = self.children",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if self.navigation.__fullname then\r\n        self.fullname = self.navigation.__fullname .. '.' .. self.name\r\n      else\r\n        self.fullname = self.name\r\n      end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "self.fullname = self.navigation.__fullname .. '.' .. self.name",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "self.module, self.name, self.fullname = private.getName(path)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "assert(self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "setmetatable(self, lib)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "if path then\r\n    private.parseFile(self, path)\r\n  elseif def.code then\r\n    private.parseCode(self, def.code)\r\n  else\r\n    -- make dummy doc\r\n    private.newSection(self, 0, self.name)\r\n    table.insert(self.group, {text = '', class = 'summary'})\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "private.parseFile(self, path)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "private.parseCode(self, def.code)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "private.newSection(self, 0, self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "table.insert(self.group, {text = '', class = 'summary'})",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if self.children and #self.children > 0 then\r\n    local children = self.children\r\n    local section = self.section\r\n    for _, name in ipairs(children) do\r\n      local child = children[name]\r\n\r\n      local group = {\r\n        -- Use 'class' key for children elements.\r\n        class = child.__fullname,\r\n        name  = child.__name,\r\n        child.__summary,\r\n        child.__img,\r\n      }\r\n\r\n      if child.__fixme then\r\n        for _, p in ipairs(child.__fixme[1]) do\r\n          table.insert(group, p)\r\n        end\r\n      end\r\n\r\n      if child.__todo then\r\n        for _, p in ipairs(child.__todo[1]) do\r\n          table.insert(group, p)\r\n        end\r\n      end\r\n\r\n      table.insert(section, group)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local children = self.children",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local section = self.section",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "for _, name in ipairs(children) do\r\n      local child = children[name]\r\n\r\n      local group = {\r\n        -- Use 'class' key for children elements.\r\n        class = child.__fullname,\r\n        name  = child.__name,\r\n        child.__summary,\r\n        child.__img,\r\n      }\r\n\r\n      if child.__fixme then\r\n        for _, p in ipairs(child.__fixme[1]) do\r\n          table.insert(group, p)\r\n        end\r\n      end\r\n\r\n      if child.__todo then\r\n        for _, p in ipairs(child.__todo[1]) do\r\n          table.insert(group, p)\r\n        end\r\n      end\r\n\r\n      table.insert(section, group)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "local child = children[name]",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local group = {\r\n        -- Use 'class' key for children elements.\r\n        class = child.__fullname,\r\n        name  = child.__name,\r\n        child.__summary,\r\n        child.__img,\r\n      }",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if child.__fixme then\r\n        for _, p in ipairs(child.__fixme[1]) do\r\n          table.insert(group, p)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "for _, p in ipairs(child.__fixme[1]) do\r\n          table.insert(group, p)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "table.insert(group, p)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if child.__todo then\r\n        for _, p in ipairs(child.__todo[1]) do\r\n          table.insert(group, p)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "for _, p in ipairs(child.__todo[1]) do\r\n          table.insert(group, p)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "table.insert(section, group)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "if self.todo then\r\n    table.insert(self.sections, self.todo)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "table.insert(self.sections, self.todo)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if self.fixme then\r\n    table.insert(self.sections, self.fixme)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "table.insert(self.sections, self.fixme)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function lib.make(def)\r\n  local format = def.format or 'html'\r\n  local output = assert(private.output[format])\r\n  local mod_output = assert(private.mod_output[format])\r\n  -- Prepare output\r\n  lub.makePath(def.target)\r\n\r\n  -- Copy base assets\r\n  private.copyAssets[def.format](def.target)\r\n  if def.copy then\r\n    private.copyFiles(def.copy, def.target)\r\n  end\r\n\r\n\r\n  -- Parse all files and create a tree from the directories and\r\n  -- files to parse.\r\n  -- { name = 'xxxx', sub, { name = 'xxx', subsub }}.\r\n  local tree = {is_root = true}\r\n  private.parseSources(tree, def.sources)\r\n\r\n  private.makeDoc(tree, def)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local format = def.format or 'html'",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local output = assert(private.output[format])",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local mod_output = assert(private.mod_output[format])",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "lub.makePath(def.target)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "private.copyAssets[def.format](def.target)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "if def.copy then\r\n    private.copyFiles(def.copy, def.target)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "private.copyFiles(def.copy, def.target)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local tree = {is_root = true}",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "private.parseSources(tree, def.sources)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "private.makeDoc(tree, def)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function lib:toHtml(template)\r\n  return private.output.html(self, template)\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function private.parseSources(tree, sources)\r\n  local prepend = sources.prepend\r\n  for _, mpath in ipairs(sources) do\r\n    if type(mpath) == 'table' then\r\n      private.parseSources(tree, mpath)\r\n    else\r\n      local mpath = lub.absolutizePath(mpath)\r\n      if lub.fileType(mpath) == 'directory' then\r\n        for path in lub.Dir(mpath):glob '%.lua' do\r\n          private.insertInTree(tree, path, mpath, prepend)\r\n        end\r\n      else\r\n        private.insertInTree(tree, mpath, lub.dir(mpath), prepend)\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local prepend = sources.prepend",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for _, mpath in ipairs(sources) do\r\n    if type(mpath) == 'table' then\r\n      private.parseSources(tree, mpath)\r\n    else\r\n      local mpath = lub.absolutizePath(mpath)\r\n      if lub.fileType(mpath) == 'directory' then\r\n        for path in lub.Dir(mpath):glob '%.lua' do\r\n          private.insertInTree(tree, path, mpath, prepend)\r\n        end\r\n      else\r\n        private.insertInTree(tree, mpath, lub.dir(mpath), prepend)\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "if type(mpath) == 'table' then\r\n      private.parseSources(tree, mpath)\r\n    else\r\n      local mpath = lub.absolutizePath(mpath)\r\n      if lub.fileType(mpath) == 'directory' then\r\n        for path in lub.Dir(mpath):glob '%.lua' do\r\n          private.insertInTree(tree, path, mpath, prepend)\r\n        end\r\n      else\r\n        private.insertInTree(tree, mpath, lub.dir(mpath), prepend)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "private.parseSources(tree, mpath)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local mpath = lub.absolutizePath(mpath)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if lub.fileType(mpath) == 'directory' then\r\n        for path in lub.Dir(mpath):glob '%.lua' do\r\n          private.insertInTree(tree, path, mpath, prepend)\r\n        end\r\n      else\r\n        private.insertInTree(tree, mpath, lub.dir(mpath), prepend)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "for path in lub.Dir(mpath):glob '%.lua' do\r\n          private.insertInTree(tree, path, mpath, prepend)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "private.insertInTree(tree, path, mpath, prepend)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "private.insertInTree(tree, mpath, lub.dir(mpath), prepend)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function private.insertInTree(tree, fullpath, base, prepend)\r\n  -- Remove base from path\r\n  local path = string.sub(fullpath, string.len(base) + 2, -1)\r\n  if prepend then\r\n    path = prepend .. '/' .. path\r\n  end\r\n  if not match(path, '/') and not match(base, '/lib$') then\r\n    -- base is too close to file, we need to have at least one\r\n    -- folder level to get module name. If we are scanning \"lib\", consider\r\n    -- files inside to be module definitions.\r\n    local o = base\r\n    base = lub.dir(base)\r\n    return private.insertInTree(tree, fullpath, base)\r\n  end\r\n  local curr = tree\r\n  local list = lub.split(path, '/')\r\n  local last = #list\r\n  for i, part in ipairs(list) do\r\n    -- transform foo/init.lua into foo.lua\r\n    local is_init\r\n\r\n    if i == last then\r\n      is_init = part == 'init.lua'\r\n      -- Remove extension\r\n      part = match(part, '(.*)%.lua$')\r\n    end\r\n\r\n    if is_init then\r\n      curr.__file = fullpath\r\n    else\r\n      if not curr[part] then\r\n        local fullname\r\n        if curr.__fullname then\r\n          fullname = curr.__fullname .. '.' .. part\r\n        else\r\n          fullname = part\r\n        end\r\n        curr[part] = { __name = part, __fullname = fullname}\r\n        lub.insertSorted(curr, part)\r\n      end\r\n      curr = curr[part]\r\n\r\n      if i == last then\r\n        curr.__file = fullpath\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local path = string.sub(fullpath, string.len(base) + 2, -1)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if prepend then\r\n    path = prepend .. '/' .. path\r\n  end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "path = prepend .. '/' .. path",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if not match(path, '/') and not match(base, '/lib$') then\r\n    -- base is too close to file, we need to have at least one\r\n    -- folder level to get module name. If we are scanning \"lib\", consider\r\n    -- files inside to be module definitions.\r\n    local o = base\r\n    base = lub.dir(base)\r\n    return private.insertInTree(tree, fullpath, base)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "local o = base",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "base = lub.dir(base)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local curr = tree",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local list = lub.split(path, '/')",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local last = #list",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "for i, part in ipairs(list) do\r\n    -- transform foo/init.lua into foo.lua\r\n    local is_init\r\n\r\n    if i == last then\r\n      is_init = part == 'init.lua'\r\n      -- Remove extension\r\n      part = match(part, '(.*)%.lua$')\r\n    end\r\n\r\n    if is_init then\r\n      curr.__file = fullpath\r\n    else\r\n      if not curr[part] then\r\n        local fullname\r\n        if curr.__fullname then\r\n          fullname = curr.__fullname .. '.' .. part\r\n        else\r\n          fullname = part\r\n        end\r\n        curr[part] = { __name = part, __fullname = fullname}\r\n        lub.insertSorted(curr, part)\r\n      end\r\n      curr = curr[part]\r\n\r\n      if i == last then\r\n        curr.__file = fullpath\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 76,
    "text": "local is_init",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if i == last then\r\n      is_init = part == 'init.lua'\r\n      -- Remove extension\r\n      part = match(part, '(.*)%.lua$')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "is_init = part == 'init.lua'",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "part = match(part, '(.*)%.lua$')",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if is_init then\r\n      curr.__file = fullpath\r\n    else\r\n      if not curr[part] then\r\n        local fullname\r\n        if curr.__fullname then\r\n          fullname = curr.__fullname .. '.' .. part\r\n        else\r\n          fullname = part\r\n        end\r\n        curr[part] = { __name = part, __fullname = fullname}\r\n        lub.insertSorted(curr, part)\r\n      end\r\n      curr = curr[part]\r\n\r\n      if i == last then\r\n        curr.__file = fullpath\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "curr.__file = fullpath",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if not curr[part] then\r\n        local fullname\r\n        if curr.__fullname then\r\n          fullname = curr.__fullname .. '.' .. part\r\n        else\r\n          fullname = part\r\n        end\r\n        curr[part] = { __name = part, __fullname = fullname}\r\n        lub.insertSorted(curr, part)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "local fullname",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if curr.__fullname then\r\n          fullname = curr.__fullname .. '.' .. part\r\n        else\r\n          fullname = part\r\n        end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "fullname = curr.__fullname .. '.' .. part",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "fullname = part",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "curr[part] = { __name = part, __fullname = fullname}",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "lub.insertSorted(curr, part)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "curr = curr[part]",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "if i == last then\r\n        curr.__file = fullpath\r\n      end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function private.makeDoc(tree, def)\r\n  for _, elem_name in ipairs(tree) do\r\n    local elem = tree[elem_name]\r\n    -- Depth first so that we collect all titles and summary first.\r\n    private.makeDoc(elem, def)\r\n    local children, navigation\r\n    if tree.is_root then\r\n      children   = elem\r\n      navigation = elem\r\n    else\r\n      children   = elem\r\n      navigation = tree\r\n    end\r\n\r\n    local doc = lib.new(elem.__file, {\r\n      -- Parent & siblings navigation (right menu)\r\n      navigation = tree,\r\n      -- Children navigation (listed in main div)\r\n      children   = elem,\r\n      target     = def.target,\r\n      header     = def.header,\r\n      footer     = def.footer or DEFAULT_FOOTER,\r\n      toplevel   = tree.is_root,\r\n      opts       = def,\r\n    })\r\n    elem.__title   = doc.sections[1].title\r\n    elem.__summary = doc.sections[1][1][1]\r\n    local img = doc.sections[1][1][2]\r\n    if img and match(img.text or '', '^!%[') then\r\n      elem.__img = img\r\n    end\r\n    elem.__todo    = doc.todo\r\n    elem.__fixme   = doc.fixme\r\n    local trg = def.target .. '/' .. doc.fullname .. '.' .. def.format\r\n    lub.writeall(trg, private.output[def.format](doc, def.template))\r\n  end\r\n\r\n  if tree.is_root then\r\n    tree.__name = 'index'\r\n    -- Create index.html file\r\n\r\n    -- Support for meta tag in index page.\r\n    if def.index_head then\r\n      def.head = def.index_head\r\n    end\r\n\r\n    local doc = lib.new(nil, {\r\n      code = def.index or [=[ \r\n--[[----------\r\n  # Table of contents\r\n\r\n--]]----------\r\n]=],\r\n      -- Parent & siblings navigation (right menu)\r\n      navigation = tree,\r\n      -- Children navigation (listed in main div)\r\n      children   = tree,\r\n      target     = def.target,\r\n      header     = def.header,\r\n      footer     = def.footer or DEFAULT_FOOTER,\r\n      toplevel   = false,\r\n      opts       = def,\r\n    })\r\n    local trg = def.target .. '/index.' .. def.format\r\n    lub.writeall(trg, private.output[def.format](doc, def.template))\r\n  end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "for _, elem_name in ipairs(tree) do\r\n    local elem = tree[elem_name]\r\n    -- Depth first so that we collect all titles and summary first.\r\n    private.makeDoc(elem, def)\r\n    local children, navigation\r\n    if tree.is_root then\r\n      children   = elem\r\n      navigation = elem\r\n    else\r\n      children   = elem\r\n      navigation = tree\r\n    end\r\n\r\n    local doc = lib.new(elem.__file, {\r\n      -- Parent & siblings navigation (right menu)\r\n      navigation = tree,\r\n      -- Children navigation (listed in main div)\r\n      children   = elem,\r\n      target     = def.target,\r\n      header     = def.header,\r\n      footer     = def.footer or DEFAULT_FOOTER,\r\n      toplevel   = tree.is_root,\r\n      opts       = def,\r\n    })\r\n    elem.__title   = doc.sections[1].title\r\n    elem.__summary = doc.sections[1][1][1]\r\n    local img = doc.sections[1][1][2]\r\n    if img and match(img.text or '', '^!%[') then\r\n      elem.__img = img\r\n    end\r\n    elem.__todo    = doc.todo\r\n    elem.__fixme   = doc.fixme\r\n    local trg = def.target .. '/' .. doc.fullname .. '.' .. def.format\r\n    lub.writeall(trg, private.output[def.format](doc, def.template))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "local elem = tree[elem_name]",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "private.makeDoc(elem, def)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "local children, navigation",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "if tree.is_root then\r\n      children   = elem\r\n      navigation = elem\r\n    else\r\n      children   = elem\r\n      navigation = tree\r\n    end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "children   = elem",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "navigation = elem",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "navigation = tree",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "local doc = lib.new(elem.__file, {\r\n      -- Parent & siblings navigation (right menu)\r\n      navigation = tree,\r\n      -- Children navigation (listed in main div)\r\n      children   = elem,\r\n      target     = def.target,\r\n      header     = def.header,\r\n      footer     = def.footer or DEFAULT_FOOTER,\r\n      toplevel   = tree.is_root,\r\n      opts       = def,\r\n    })",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "elem.__title   = doc.sections[1].title",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "elem.__summary = doc.sections[1][1][1]",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "local img = doc.sections[1][1][2]",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if img and match(img.text or '', '^!%[') then\r\n      elem.__img = img\r\n    end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "elem.__img = img",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "elem.__todo    = doc.todo",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "elem.__fixme   = doc.fixme",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "local trg = def.target .. '/' .. doc.fullname .. '.' .. def.format",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "lub.writeall(trg, private.output[def.format](doc, def.template))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "if tree.is_root then\r\n    tree.__name = 'index'\r\n    -- Create index.html file\r\n\r\n    -- Support for meta tag in index page.\r\n    if def.index_head then\r\n      def.head = def.index_head\r\n    end\r\n\r\n    local doc = lib.new(nil, {\r\n      code = def.index or [=[ \r\n--[[----------\r\n  # Table of contents\r\n\r\n--]]----------\r\n]=],\r\n      -- Parent & siblings navigation (right menu)\r\n      navigation = tree,\r\n      -- Children navigation (listed in main div)\r\n      children   = tree,\r\n      target     = def.target,\r\n      header     = def.header,\r\n      footer     = def.footer or DEFAULT_FOOTER,\r\n      toplevel   = false,\r\n      opts       = def,\r\n    })\r\n    local trg = def.target .. '/index.' .. def.format\r\n    lub.writeall(trg, private.output[def.format](doc, def.template))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "tree.__name = 'index'",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if def.index_head then\r\n      def.head = def.index_head\r\n    end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "def.head = def.index_head",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "local doc = lib.new(nil, {\r\n      code = def.index or [=[ \r\n--[[----------\r\n  # Table of contents\r\n\r\n--]]----------\r\n]=],\r\n      -- Parent & siblings navigation (right menu)\r\n      navigation = tree,\r\n      -- Children navigation (listed in main div)\r\n      children   = tree,\r\n      target     = def.target,\r\n      header     = def.header,\r\n      footer     = def.footer or DEFAULT_FOOTER,\r\n      toplevel   = false,\r\n      opts       = def,\r\n    })",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "local trg = def.target .. '/index.' .. def.format",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function private.getName(path)\r\n  local name, module, fullname\r\n  name = assert(match(path, '([^/]+)%.lua$'), \"Invalid path '\"..path..\"'.\")\r\n  module = match(path, '([^/]+)/[^/]+$')\r\n  if module then\r\n    fullname = module .. '.' .. name\r\n  else\r\n    fullname = name\r\n  end\r\n  \r\n  return module, name, fullname\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "local name, module, fullname",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "name = assert(match(path, '([^/]+)%.lua$'), \"Invalid path '\"..path..\"'.\")",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "module = match(path, '([^/]+)/[^/]+$')",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "if module then\r\n    fullname = module .. '.' .. name\r\n  else\r\n    fullname = name\r\n  end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "fullname = module .. '.' .. name",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "fullname = name",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function private:parseFile(path)\r\n  local file = assert(io.open(path, \"r\"))\r\n  local it = file:lines()\r\n  private.doParse(self, function()\r\n    return it()\r\n  end)\r\n  io.close(file)\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "local file = assert(io.open(path, \"r\"))",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "local it = file:lines()",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "private.doParse(self, function()\r\n    return it()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "io.close(file)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function private:parseCode(code)\r\n  local lines = lub.split(code, '\\n')\r\n  local it = ipairs(lines)\r\n  local i = 0\r\n  private.doParse(self, function()\r\n    local _, l = it(lines, i)\r\n    i = i + 1\r\n    return l\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "local lines = lub.split(code, '\\n')",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local it = ipairs(lines)",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "private.doParse(self, function()\r\n    local _, l = it(lines, i)\r\n    i = i + 1\r\n    return l\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "local _, l = it(lines, i)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function private:doParse(iterator)\r\n  local state = parser.start\r\n  local line_i = 0\r\n  -- This is true on entering a state.\r\n  local entering = true\r\n  for line in iterator do\r\n    local replay = true\r\n    line_i = line_i + 1\r\n    while replay do\r\n      -- if self.name == 'Doc' then\r\n      --   print(string.format(\"%3i %-14s %s\", line_i, state.name or 'SUB', line))\r\n      -- end\r\n      replay = false\r\n      for i=1,#state do\r\n        local matcher = state[i]\r\n        if not matcher.on_enter or entering then\r\n          local m = {match(line, matcher.match)}\r\n          if m[1] then\r\n            local move = matcher.move\r\n            if matcher.output then\r\n              matcher.output(self, line_i, unpack(m))\r\n              if self.force_move then\r\n                -- We need this to avoid calling move and (enter/exit) just to\r\n                -- test if we need to move.\r\n                move = self.force_move\r\n                self.force_move = nil\r\n              end\r\n            end\r\n            local state_exit = state.exit\r\n            if type(move) == 'function' then\r\n              if state_exit  then state_exit(self) end\r\n              state, replay = move(self)\r\n              if not state then\r\n                local def = debug.getinfo(move)\r\n                error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)\r\n              end\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            elseif not move then\r\n              -- do not change state\r\n              entering = false\r\n            else\r\n              if state_exit  then state_exit(self) end\r\n              state = move\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            end\r\n            break\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  if state.exit then\r\n    state.exit(self)\r\n  end\r\n\r\n  if state.eof then\r\n    state.eof(self, line_i)\r\n  end\r\n  -- Clean draft content\r\n  self.para  = nil\r\n  self.scrap = nil\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "local state = parser.start",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "local line_i = 0",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local entering = true",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "for line in iterator do\r\n    local replay = true\r\n    line_i = line_i + 1\r\n    while replay do\r\n      -- if self.name == 'Doc' then\r\n      --   print(string.format(\"%3i %-14s %s\", line_i, state.name or 'SUB', line))\r\n      -- end\r\n      replay = false\r\n      for i=1,#state do\r\n        local matcher = state[i]\r\n        if not matcher.on_enter or entering then\r\n          local m = {match(line, matcher.match)}\r\n          if m[1] then\r\n            local move = matcher.move\r\n            if matcher.output then\r\n              matcher.output(self, line_i, unpack(m))\r\n              if self.force_move then\r\n                -- We need this to avoid calling move and (enter/exit) just to\r\n                -- test if we need to move.\r\n                move = self.force_move\r\n                self.force_move = nil\r\n              end\r\n            end\r\n            local state_exit = state.exit\r\n            if type(move) == 'function' then\r\n              if state_exit  then state_exit(self) end\r\n              state, replay = move(self)\r\n              if not state then\r\n                local def = debug.getinfo(move)\r\n                error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)\r\n              end\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            elseif not move then\r\n              -- do not change state\r\n              entering = false\r\n            else\r\n              if state_exit  then state_exit(self) end\r\n              state = move\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            end\r\n            break\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 145,
    "text": "local replay = true",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "line_i = line_i + 1",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "while replay do\r\n      -- if self.name == 'Doc' then\r\n      --   print(string.format(\"%3i %-14s %s\", line_i, state.name or 'SUB', line))\r\n      -- end\r\n      replay = false\r\n      for i=1,#state do\r\n        local matcher = state[i]\r\n        if not matcher.on_enter or entering then\r\n          local m = {match(line, matcher.match)}\r\n          if m[1] then\r\n            local move = matcher.move\r\n            if matcher.output then\r\n              matcher.output(self, line_i, unpack(m))\r\n              if self.force_move then\r\n                -- We need this to avoid calling move and (enter/exit) just to\r\n                -- test if we need to move.\r\n                move = self.force_move\r\n                self.force_move = nil\r\n              end\r\n            end\r\n            local state_exit = state.exit\r\n            if type(move) == 'function' then\r\n              if state_exit  then state_exit(self) end\r\n              state, replay = move(self)\r\n              if not state then\r\n                local def = debug.getinfo(move)\r\n                error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)\r\n              end\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            elseif not move then\r\n              -- do not change state\r\n              entering = false\r\n            else\r\n              if state_exit  then state_exit(self) end\r\n              state = move\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            end\r\n            break\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 148,
    "text": "replay = false",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "for i=1,#state do\r\n        local matcher = state[i]\r\n        if not matcher.on_enter or entering then\r\n          local m = {match(line, matcher.match)}\r\n          if m[1] then\r\n            local move = matcher.move\r\n            if matcher.output then\r\n              matcher.output(self, line_i, unpack(m))\r\n              if self.force_move then\r\n                -- We need this to avoid calling move and (enter/exit) just to\r\n                -- test if we need to move.\r\n                move = self.force_move\r\n                self.force_move = nil\r\n              end\r\n            end\r\n            local state_exit = state.exit\r\n            if type(move) == 'function' then\r\n              if state_exit  then state_exit(self) end\r\n              state, replay = move(self)\r\n              if not state then\r\n                local def = debug.getinfo(move)\r\n                error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)\r\n              end\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            elseif not move then\r\n              -- do not change state\r\n              entering = false\r\n            else\r\n              if state_exit  then state_exit(self) end\r\n              state = move\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            end\r\n            break\r\n          end\r\n        end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 150,
    "text": "local matcher = state[i]",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "if not matcher.on_enter or entering then\r\n          local m = {match(line, matcher.match)}\r\n          if m[1] then\r\n            local move = matcher.move\r\n            if matcher.output then\r\n              matcher.output(self, line_i, unpack(m))\r\n              if self.force_move then\r\n                -- We need this to avoid calling move and (enter/exit) just to\r\n                -- test if we need to move.\r\n                move = self.force_move\r\n                self.force_move = nil\r\n              end\r\n            end\r\n            local state_exit = state.exit\r\n            if type(move) == 'function' then\r\n              if state_exit  then state_exit(self) end\r\n              state, replay = move(self)\r\n              if not state then\r\n                local def = debug.getinfo(move)\r\n                error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)\r\n              end\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            elseif not move then\r\n              -- do not change state\r\n              entering = false\r\n            else\r\n              if state_exit  then state_exit(self) end\r\n              state = move\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            end\r\n            break\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "local m = {match(line, matcher.match)}",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "if m[1] then\r\n            local move = matcher.move\r\n            if matcher.output then\r\n              matcher.output(self, line_i, unpack(m))\r\n              if self.force_move then\r\n                -- We need this to avoid calling move and (enter/exit) just to\r\n                -- test if we need to move.\r\n                move = self.force_move\r\n                self.force_move = nil\r\n              end\r\n            end\r\n            local state_exit = state.exit\r\n            if type(move) == 'function' then\r\n              if state_exit  then state_exit(self) end\r\n              state, replay = move(self)\r\n              if not state then\r\n                local def = debug.getinfo(move)\r\n                error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)\r\n              end\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            elseif not move then\r\n              -- do not change state\r\n              entering = false\r\n            else\r\n              if state_exit  then state_exit(self) end\r\n              state = move\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            end\r\n            break\r\n          end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "local move = matcher.move",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "if matcher.output then\r\n              matcher.output(self, line_i, unpack(m))\r\n              if self.force_move then\r\n                -- We need this to avoid calling move and (enter/exit) just to\r\n                -- test if we need to move.\r\n                move = self.force_move\r\n                self.force_move = nil\r\n              end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "matcher.output(self, line_i, unpack(m))",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "if self.force_move then\r\n                -- We need this to avoid calling move and (enter/exit) just to\r\n                -- test if we need to move.\r\n                move = self.force_move\r\n                self.force_move = nil\r\n              end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "move = self.force_move",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "self.force_move = nil",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "local state_exit = state.exit",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "if type(move) == 'function' then\r\n              if state_exit  then state_exit(self) end\r\n              state, replay = move(self)\r\n              if not state then\r\n                local def = debug.getinfo(move)\r\n                error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)\r\n              end\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            elseif not move then\r\n              -- do not change state\r\n              entering = false\r\n            else\r\n              if state_exit  then state_exit(self) end\r\n              state = move\r\n              entering = true\r\n              if state.enter then state.enter(self) end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "if state_exit  then state_exit(self) end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "state_exit(self)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "state, replay = move(self)",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "if not state then\r\n                local def = debug.getinfo(move)\r\n                error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)\r\n              end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "local def = debug.getinfo(move)",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "error(\"Error in state definition \".. match(def.source, '^@(.+)$') .. ':' .. def.linedefined)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "entering = true",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "if state.enter then state.enter(self) end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "state.enter(self)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "entering = false",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "state = move",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "if state.exit then\r\n    state.exit(self)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "state.exit(self)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "if state.eof then\r\n    state.eof(self, line_i)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "state.eof(self, line_i)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "self.para  = nil",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "self.scrap = nil",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function private:addTodo(i, text)\r\n  private.todoFixme(self, i, '', 'TODO', text)\r\n  private.flushPara(self)\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "private.todoFixme(self, i, '', 'TODO', text)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "private.flushPara(self)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function private:todoFixme(i, all, typ, text)\r\n  if not USED_TYPES[typ] then\r\n    return private.addToPara(self, i, all)\r\n  end\r\n  local group = self.in_func or self.group\r\n\r\n  local no_list, txt = match(text, '^(-) *(.*)$')\r\n  if no_list then\r\n    text = txt\r\n  end\r\n\r\n  typ = string.lower(typ)\r\n  table.insert(group, self.para)\r\n  self.para = {\r\n    span = typ,\r\n    text = text,\r\n  }\r\n  -- If TODO/FIXME message starts with '-', do not show in lists.\r\n  if no_list then return end\r\n\r\n  local list = self[typ]\r\n  if not list then\r\n    -- Section for todo or fixme\r\n    list = {\r\n      name  = string.upper(typ),\r\n      title = string.upper(typ),\r\n      -- A single group with all fixmes and todos.\r\n      {},\r\n    }\r\n    self[typ] = list\r\n  end\r\n  table.insert(list[1], {\r\n    span  = typ,\r\n    text  = text,\r\n    -- This is to find function reference when the todo is shown\r\n    -- outside the function documentation.\r\n    group = group,\r\n    file  = self.fullname,\r\n    section_name = self.section.name,\r\n  })\r\nend",
    "type": "function"
  }, {
    "id": 185,
    "text": "if not USED_TYPES[typ] then\r\n    return private.addToPara(self, i, all)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "local group = self.in_func or self.group",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "local no_list, txt = match(text, '^(-) *(.*)$')",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "if no_list then\r\n    text = txt\r\n  end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "text = txt",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "typ = string.lower(typ)",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "table.insert(group, self.para)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "self.para = {\r\n    span = typ,\r\n    text = text,\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "if no_list then return end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "local list = self[typ]",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "if not list then\r\n    -- Section for todo or fixme\r\n    list = {\r\n      name  = string.upper(typ),\r\n      title = string.upper(typ),\r\n      -- A single group with all fixmes and todos.\r\n      {},\r\n    }\r\n    self[typ] = list\r\n  end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "list = {\r\n      name  = string.upper(typ),\r\n      title = string.upper(typ),\r\n      -- A single group with all fixmes and todos.\r\n      {},\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "self[typ] = list",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "table.insert(list[1], {\r\n    span  = typ,\r\n    text  = text,\r\n    -- This is to find function reference when the todo is shown\r\n    -- outside the function documentation.\r\n    group = group,\r\n    file  = self.fullname,\r\n    section_name = self.section.name,\r\n  })",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "function private:newFunction(i, typ, fun, params)\r\n  local i = #self.group\r\n  if self.group[i] and self.group[i].text == 'nodoc' then\r\n    -- ignore last para\r\n    table.remove(self.group)\r\n    self.para = nil\r\n    return\r\n  end\r\n\r\n  -- Store last group as function definition\r\n  if typ == ':' then\r\n    self.group.fun = fun\r\n  elseif typ == '.' then\r\n    self.group.class_fun = fun\r\n  else\r\n    self.group.global_fun = fun\r\n  end\r\n  self.group.params = params\r\n  private.useGroup(self)\r\n  self.in_func = self.group\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "local i = #self.group",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if self.group[i] and self.group[i].text == 'nodoc' then\r\n    -- ignore last para\r\n    table.remove(self.group)\r\n    self.para = nil\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "table.remove(self.group)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "self.para = nil",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "if typ == ':' then\r\n    self.group.fun = fun\r\n  elseif typ == '.' then\r\n    self.group.class_fun = fun\r\n  else\r\n    self.group.global_fun = fun\r\n  end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "self.group.fun = fun",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "self.group.class_fun = fun",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "self.group.global_fun = fun",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "self.group.params = params",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "private.useGroup(self)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "self.in_func = self.group",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function private:newParam(i, key, params, typ)\r\n  typ = typ or 'param'\r\n  local i = #self.group\r\n  if self.group[i] and self.group[i].text == 'nodoc' then\r\n    -- ignore last para\r\n    table.remove(self.group)\r\n    self.para = nil\r\n    return\r\n  end\r\n\r\n  -- Store last group as param definition\r\n  self.group[typ] = key\r\n  self.group.params = params\r\n\r\n  if typ == 'tparam' then\r\n    -- This is to have creation order\r\n    table.insert(self.curr_param, self.group)\r\n    self.curr_param[key] = self.group\r\n  else\r\n    table.insert(self.params, self.group)\r\n    self.params[key] = self.group\r\n  end\r\n\r\n  private.useGroup(self)\r\n  self.group = {}\r\nend",
    "type": "function"
  }, {
    "id": 214,
    "text": "typ = typ or 'param'",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "self.group[typ] = key",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "if typ == 'tparam' then\r\n    -- This is to have creation order\r\n    table.insert(self.curr_param, self.group)\r\n    self.curr_param[key] = self.group\r\n  else\r\n    table.insert(self.params, self.group)\r\n    self.params[key] = self.group\r\n  end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "table.insert(self.curr_param, self.group)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "self.curr_param[key] = self.group",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "table.insert(self.params, self.group)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "self.params[key] = self.group",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "self.group = {}",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function private:newTitle(i, title, typ)\r\n  typ = typ or 'title'\r\n  private.flushPara(self)\r\n  table.insert(self.group, {\r\n    heading = typ, text = title\r\n  })\r\n  private.useGroup(self)\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "typ = typ or 'title'",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "table.insert(self.group, {\r\n    heading = typ, text = title\r\n  })",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function private:useGroup()\r\n  local s = self.section\r\n  if s[#s] ~= self.group then\r\n    table.insert(s, self.group)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "local s = self.section",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "if s[#s] ~= self.group then\r\n    table.insert(s, self.group)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "table.insert(s, self.group)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "function private:addToPara(i, d)\r\n  if not self.para then\r\n    self.para = { class = self.next_para_class}\r\n    self.next_para_class = nil\r\n  end\r\n  local para = self.para\r\n  if para.text then\r\n    --para.text = para.text .. '\\n' .. d or ''\r\n    para.text = para.text .. ' ' .. d or ''\r\n  else\r\n    para.text = d or ''\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 233,
    "text": "if not self.para then\r\n    self.para = { class = self.next_para_class}\r\n    self.next_para_class = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "self.para = { class = self.next_para_class}",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "self.next_para_class = nil",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "local para = self.para",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "if para.text then\r\n    --para.text = para.text .. '\\n' .. d or ''\r\n    para.text = para.text .. ' ' .. d or ''\r\n  else\r\n    para.text = d or ''\r\n  end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "para.text = para.text .. ' ' .. d or ''",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "para.text = d or ''",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "function private:addToParaN(i, d)\r\n  if not self.para then\r\n    self.para = { class = self.next_para_class}\r\n    self.next_para_class = nil\r\n  end\r\n  local para = self.para\r\n  if para.text then\r\n    para.text = para.text .. '\\n' .. d or ''\r\n  else\r\n    para.text = d or ''\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 242,
    "text": "if para.text then\r\n    para.text = para.text .. '\\n' .. d or ''\r\n  else\r\n    para.text = d or ''\r\n  end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "para.text = para.text .. '\\n' .. d or ''",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function private:addToList(i, tag, text, definition)\r\n  local key\r\n  if definition then\r\n    key  = text\r\n    text = definition\r\n  end\r\n  local para = self.para\r\n  if not para then\r\n    self.para = {list = {}, text = text, key = key}\r\n  elseif not para.list then\r\n    -- Save previous paragraph.\r\n    private.flushPara(self)\r\n    -- Start new list\r\n    self.para = {list = {}, text = text, key = key}\r\n  else\r\n    -- Move previous element in list\r\n    table.insert(para.list, {text = para.text, key = para.key})\r\n    -- Prepare next.\r\n    para.text = text\r\n    para.key  = key\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 246,
    "text": "local key",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "if definition then\r\n    key  = text\r\n    text = definition\r\n  end",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "key  = text",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "text = definition",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "if not para then\r\n    self.para = {list = {}, text = text, key = key}\r\n  elseif not para.list then\r\n    -- Save previous paragraph.\r\n    private.flushPara(self)\r\n    -- Start new list\r\n    self.para = {list = {}, text = text, key = key}\r\n  else\r\n    -- Move previous element in list\r\n    table.insert(para.list, {text = para.text, key = para.key})\r\n    -- Prepare next.\r\n    para.text = text\r\n    para.key  = key\r\n  end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "self.para = {list = {}, text = text, key = key}",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "table.insert(para.list, {text = para.text, key = para.key})",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "para.text = text",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "para.key  = key",
    "type": "statement:assign"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function private:newSection(i, title)\r\n  private.flushPara(self)\r\n  self.group = {}\r\n  self.section = {self.group}\r\n  table.insert(self.sections, self.section)\r\n  self.section.title = title\r\n  local name = title\r\n  if #self.sections == 1 then\r\n    name = self.name\r\n  else\r\n    name = gsub(title, ' ', '-')\r\n  end\r\n  self.section.name = name\r\nend",
    "type": "function"
  }, {
    "id": 257,
    "text": "self.section = {self.group}",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "table.insert(self.sections, self.section)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "self.section.title = title",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "local name = title",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "if #self.sections == 1 then\r\n    name = self.name\r\n  else\r\n    name = gsub(title, ' ', '-')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "name = self.name",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "name = gsub(title, ' ', '-')",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "self.section.name = name",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "function private:flushPara()\r\n  if self.para then\r\n    table.insert(self.group, self.para)\r\n  end\r\n  self.para = nil\r\nend",
    "type": "function"
  }, {
    "id": 267,
    "text": "if self.para then\r\n    table.insert(self.group, self.para)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "table.insert(self.group, self.para)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 270,
    "text": "function private.getTemplate(format)\r\n  local filename = 'template.'..format\r\n  return lub.content(lub.path('|doc/'..filename))\r\nend",
    "type": "function"
  }, {
    "id": 271,
    "text": "local filename = 'template.'..format",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function private.output:html(template)\r\n  local tmplt = lub.Template(template or private.getTemplate('html'))\r\n  return tmplt:run {self = self, private = private}\r\nend",
    "type": "function"
  }, {
    "id": 274,
    "text": "local tmplt = lub.Template(template or private.getTemplate('html'))",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "function private.mod_output.html(module, def, modules)\r\n  local tmplt = lub.Template(def.template or private.getTemplate('html'))\r\n  -- Create a pseudo class with classes as methods and class summary\r\n  -- as method documentation.\r\n  local self = {\r\n    name = module.name,\r\n    title = module.name,\r\n    fullname = module.name,\r\n    sections = {},\r\n    navigation = modules,\r\n    header = def.header,\r\n    footer = def.footer or DEFAULT_FOOTER,\r\n  }\r\n  local section = {name = modules.name, title = module.name}\r\n  table.insert(self.sections, section)\r\n  for _, class in ipairs(module) do\r\n    local def = module[class]\r\n    -- A group = class doc\r\n    table.insert(section, {\r\n      class = def.fullname,\r\n      name  = def.name,\r\n      { text = def.summary },\r\n    })\r\n  end\r\n  setmetatable(self, lib)\r\n  return tmplt:run {self = self, private = private}\r\nend",
    "type": "function"
  }, {
    "id": 277,
    "text": "local tmplt = lub.Template(def.template or private.getTemplate('html'))",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "local self = {\r\n    name = module.name,\r\n    title = module.name,\r\n    fullname = module.name,\r\n    sections = {},\r\n    navigation = modules,\r\n    header = def.header,\r\n    footer = def.footer or DEFAULT_FOOTER,\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "local section = {name = modules.name, title = module.name}",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "table.insert(self.sections, section)",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "for _, class in ipairs(module) do\r\n    local def = module[class]\r\n    -- A group = class doc\r\n    table.insert(section, {\r\n      class = def.fullname,\r\n      name  = def.name,\r\n      { text = def.summary },\r\n    })\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 282,
    "text": "local def = module[class]",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "table.insert(section, {\r\n      class = def.fullname,\r\n      name  = def.name,\r\n      { text = def.summary },\r\n    })",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 285,
    "text": "function private.copyFiles(list, target)\r\n  for _, mpath in ipairs(list) do\r\n    local len = string.len(mpath)\r\n    for src in lub.Dir(mpath):glob() do\r\n      local path = string.sub(src, len + 2)\r\n      local trg  = target .. '/' .. path\r\n      lub.copy(src, trg)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 286,
    "text": "for _, mpath in ipairs(list) do\r\n    local len = string.len(mpath)\r\n    for src in lub.Dir(mpath):glob() do\r\n      local path = string.sub(src, len + 2)\r\n      local trg  = target .. '/' .. path\r\n      lub.copy(src, trg)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 287,
    "text": "local len = string.len(mpath)",
    "type": "statement:localassign"
  }, {
    "id": 288,
    "text": "for src in lub.Dir(mpath):glob() do\r\n      local path = string.sub(src, len + 2)\r\n      local trg  = target .. '/' .. path\r\n      lub.copy(src, trg)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 289,
    "text": "local path = string.sub(src, len + 2)",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "local trg  = target .. '/' .. path",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "lub.copy(src, trg)",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 293,
    "text": "function private.copyAssets.html(target)\r\n  local src_base = lub.path '|'\r\n  for _, path in ipairs(lib.ASSETS) do\r\n    local src = src_base .. '/doc/' .. path\r\n    local trg = target .. '/' .. path\r\n    lub.writeall(trg, lub.content(src))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 294,
    "text": "local src_base = lub.path '|'",
    "type": "statement:localassign"
  }, {
    "id": 295,
    "text": "for _, path in ipairs(lib.ASSETS) do\r\n    local src = src_base .. '/doc/' .. path\r\n    local trg = target .. '/' .. path\r\n    lub.writeall(trg, lub.content(src))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 296,
    "text": "local src = src_base .. '/doc/' .. path",
    "type": "statement:localassign"
  }, {
    "id": 297,
    "text": "local trg = target .. '/' .. path",
    "type": "statement:localassign"
  }, {
    "id": 298,
    "text": "lub.writeall(trg, lub.content(src))",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 300,
    "text": "local function escapeHtml(text)\r\n  return gsub(\r\n    gsub(text,\r\n      '<', '&lt;'\r\n    ),\r\n      '>', '&gt;'\r\n    )\r\nend",
    "type": "function"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "function private:paraToHtml(para)\r\n  local text = para.text or ''\r\n  if para.class then\r\n    return \"<p class='\"..para.class..\"'>\"..private.textToHtml(self, text)..\"</p>\"\r\n  elseif para.heading then\r\n    return \"<h4 class='sub-\"..para.heading..\"'>\"..private.textToHtml(self, text)..\"</h4>\"\r\n  elseif para.math then\r\n    return \"<p>\"..private.mathjaxTag(self, para)..\"</p>\"\r\n  elseif para.code then\r\n    local tag\r\n    local k =\r\n    match(para.code or '', '^txt( .+)?$')\r\n    if match(para.code, '^txt') then\r\n      tag = \"<pre class='\"..para.code..\"'>\"\r\n    else\r\n      tag = \"<pre class='prettyprint lang-\"..para.code..\"'>\"\r\n    end\r\n    return tag .. \r\n      private.autoLink(gsub(escapeHtml(text), '%%%%', ''), nil)..\r\n      \"</pre>\"\r\n  elseif para.span then\r\n    return private.spanToHtml(self, para)\r\n  elseif para.list then\r\n    -- render list\r\n    return private.listToHtml(self, para)\r\n  else\r\n    return \"<p>\"..private.textToHtml(self, text)..\"</p>\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 303,
    "text": "local text = para.text or ''",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "if para.class then\r\n    return \"<p class='\"..para.class..\"'>\"..private.textToHtml(self, text)..\"</p>\"\r\n  elseif para.heading then\r\n    return \"<h4 class='sub-\"..para.heading..\"'>\"..private.textToHtml(self, text)..\"</h4>\"\r\n  elseif para.math then\r\n    return \"<p>\"..private.mathjaxTag(self, para)..\"</p>\"\r\n  elseif para.code then\r\n    local tag\r\n    local k =\r\n    match(para.code or '', '^txt( .+)?$')\r\n    if match(para.code, '^txt') then\r\n      tag = \"<pre class='\"..para.code..\"'>\"\r\n    else\r\n      tag = \"<pre class='prettyprint lang-\"..para.code..\"'>\"\r\n    end\r\n    return tag .. \r\n      private.autoLink(gsub(escapeHtml(text), '%%%%', ''), nil)..\r\n      \"</pre>\"\r\n  elseif para.span then\r\n    return private.spanToHtml(self, para)\r\n  elseif para.list then\r\n    -- render list\r\n    return private.listToHtml(self, para)\r\n  else\r\n    return \"<p>\"..private.textToHtml(self, text)..\"</p>\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 305,
    "text": "local tag",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "local k =\r\n    match(para.code or '', '^txt( .+)?$')",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "if match(para.code, '^txt') then\r\n      tag = \"<pre class='\"..para.code..\"'>\"\r\n    else\r\n      tag = \"<pre class='prettyprint lang-\"..para.code..\"'>\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "tag = \"<pre class='\"..para.code..\"'>\"",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "tag = \"<pre class='prettyprint lang-\"..para.code..\"'>\"",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 311,
    "text": "function private:spanToHtml(para)\r\n  local ref = ''\r\n  local ref_name\r\n  if para.group then\r\n    if self.fullname ~= para.file then\r\n      ref = para.file .. '.html'\r\n    end\r\n    if para.group.fun then\r\n      if ref then\r\n        ref = ref .. '#' .. para.group.fun\r\n      else\r\n        ref = '#' .. para.group.fun\r\n      end\r\n      ref_name = '#' .. para.group.fun\r\n    elseif para.section_name then\r\n      if ref then\r\n        ref = ref .. '#' .. para.section_name\r\n      else\r\n        ref = '#' .. para.section_name\r\n      end\r\n      ref_name = para.section_name\r\n    end\r\n    ref = \"<span class='ref'><a href='\"..ref..\"'>\"..ref_name..\"</a></span>\"\r\n  end\r\n  return \"<p class='\"..para.span..\"'>\" ..\r\n         ref ..\r\n         \"<span>\"..string.upper(para.span)..\"</span> \"..\r\n         private.textToHtml(self, para.text)..\r\n         \"</p>\"\r\nend",
    "type": "function"
  }, {
    "id": 312,
    "text": "local ref = ''",
    "type": "statement:localassign"
  }, {
    "id": 313,
    "text": "local ref_name",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "if para.group then\r\n    if self.fullname ~= para.file then\r\n      ref = para.file .. '.html'\r\n    end\r\n    if para.group.fun then\r\n      if ref then\r\n        ref = ref .. '#' .. para.group.fun\r\n      else\r\n        ref = '#' .. para.group.fun\r\n      end\r\n      ref_name = '#' .. para.group.fun\r\n    elseif para.section_name then\r\n      if ref then\r\n        ref = ref .. '#' .. para.section_name\r\n      else\r\n        ref = '#' .. para.section_name\r\n      end\r\n      ref_name = para.section_name\r\n    end\r\n    ref = \"<span class='ref'><a href='\"..ref..\"'>\"..ref_name..\"</a></span>\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "if self.fullname ~= para.file then\r\n      ref = para.file .. '.html'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 316,
    "text": "ref = para.file .. '.html'",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "if para.group.fun then\r\n      if ref then\r\n        ref = ref .. '#' .. para.group.fun\r\n      else\r\n        ref = '#' .. para.group.fun\r\n      end\r\n      ref_name = '#' .. para.group.fun\r\n    elseif para.section_name then\r\n      if ref then\r\n        ref = ref .. '#' .. para.section_name\r\n      else\r\n        ref = '#' .. para.section_name\r\n      end\r\n      ref_name = para.section_name\r\n    end",
    "type": "statement:if"
  }, {
    "id": 318,
    "text": "if ref then\r\n        ref = ref .. '#' .. para.group.fun\r\n      else\r\n        ref = '#' .. para.group.fun\r\n      end",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "ref = ref .. '#' .. para.group.fun",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "ref = '#' .. para.group.fun",
    "type": "statement:assign"
  }, {
    "id": 321,
    "text": "ref_name = '#' .. para.group.fun",
    "type": "statement:assign"
  }, {
    "id": 322,
    "text": "if ref then\r\n        ref = ref .. '#' .. para.section_name\r\n      else\r\n        ref = '#' .. para.section_name\r\n      end",
    "type": "statement:if"
  }, {
    "id": 323,
    "text": "ref = ref .. '#' .. para.section_name",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "ref = '#' .. para.section_name",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "ref_name = para.section_name",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "ref = \"<span class='ref'><a href='\"..ref..\"'>\"..ref_name..\"</a></span>\"",
    "type": "statement:assign"
  }, {
    "id": 327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 328,
    "text": "function private.autoLink(p, codes)\r\n  -- method link lut.Doc#make or lut.Doc.make\r\n  if codes then\r\n    -- para auto-link\r\n    p = gsub(p, ' ([a-z]+%.[A-Z]+[a-z][a-zA-Z]+)([#%.])([a-zA-Z_]+)', function(class, typ, fun)\r\n      table.insert(codes, string.format(\" <a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun))\r\n      return CODE..#codes\r\n    end)\r\n  else\r\n    -- code auto-link\r\n    p = gsub(p, '([a-z]+%.[A-Z]+[a-z][a-zA-Z]+)([#%.])([a-zA-Z_]+)', function(class, typ, fun)\r\n      return string.format(\"<a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun)\r\n    end)\r\n  end\r\n  -- auto-link lut.Doc\r\n  p = gsub(p, ' ([a-z]+%.[A-Z]+[a-z0-9][a-zA-Z]*)([%. %(])', \" <a href='%1.html'>%1</a>%2\")\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 329,
    "text": "if codes then\r\n    -- para auto-link\r\n    p = gsub(p, ' ([a-z]+%.[A-Z]+[a-z][a-zA-Z]+)([#%.])([a-zA-Z_]+)', function(class, typ, fun)\r\n      table.insert(codes, string.format(\" <a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun))\r\n      return CODE..#codes\r\n    end)\r\n  else\r\n    -- code auto-link\r\n    p = gsub(p, '([a-z]+%.[A-Z]+[a-z][a-zA-Z]+)([#%.])([a-zA-Z_]+)', function(class, typ, fun)\r\n      return string.format(\"<a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun)\r\n    end)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 330,
    "text": "p = gsub(p, ' ([a-z]+%.[A-Z]+[a-z][a-zA-Z]+)([#%.])([a-zA-Z_]+)', function(class, typ, fun)\r\n      table.insert(codes, string.format(\" <a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun))\r\n      return CODE..#codes\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "table.insert(codes, string.format(\" <a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun))",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "p = gsub(p, '([a-z]+%.[A-Z]+[a-z][a-zA-Z]+)([#%.])([a-zA-Z_]+)', function(class, typ, fun)\r\n      return string.format(\"<a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun)\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "p = gsub(p, ' ([a-z]+%.[A-Z]+[a-z0-9][a-zA-Z]*)([%. %(])', \" <a href='%1.html'>%1</a>%2\")",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 335,
    "text": "function private:textToHtml(text)\r\n  -- filter content\r\n  local p = escapeHtml(text or '')\r\n  -- We could replace textToHtml with a walking parser to avoid double parsing.\r\n  \r\n  -- code\r\n  local codes = {}\r\n  p = gsub(p, '%[math%](.-)%[/math%]', function(latex)\r\n    table.insert(codes, private.mathjaxTag(self, {math = 'inline', text = latex}))\r\n    return CODE..#codes\r\n  end)\r\n\r\n  p = gsub(p, '`(.-)`', function(code)\r\n    table.insert(codes, '<code>'..code..'</code>')\r\n    return CODE..#codes\r\n  end)\r\n  p = private.autoLink(p, codes)\r\n  -- section link #Make or method link #foo\r\n  p = gsub(p, ' #([A-Za-z]+[A-Za-z_]+)', function(name)\r\n    table.insert(codes, string.format(\" <a href='#%s'>%s</a>\", name, name))\r\n    return CODE..#codes\r\n  end)\r\n\r\n  p = gsub(p, '^#([A-Za-z]+[A-Za-z_]+)', function(name)\r\n    table.insert(codes, string.format(\" <a href='#%s'>%s</a>\", name, name))\r\n    return CODE..#codes\r\n  end)\r\n\r\n  -- strong\r\n  p = gsub(p, '%*([^\\n]-)%*', '<strong>%1</strong>')\r\n  -- em\r\n  p = gsub(p, ' _(.-)_ ', ' <em>%1</em> ')\r\n  p = gsub(p, '^_(.-)_', '<em>%1</em>')\r\n  p = gsub(p, '_(.-)_$', '<em>%1</em>')\r\n  -- ![Dummy example image](img/box.jpg)\r\n  p = gsub(p, '!%[(.-)%]%((.-)%)', \"<img alt='%1' src='%2'/>\")\r\n  -- link [some text](http://example.com)\r\n  p = gsub(p, '%[([^%]]+)%]%(([^%)]+)%)', function(text, href)\r\n    return \"<a href='\"..href..\"'>\"..text..\"</a>\"\r\n  end)\r\n\r\n  if #codes > 0 then\r\n    p = gsub(p, CODE..'([0-9]+)', function(id)\r\n      return codes[tonumber(id)]\r\n    end)\r\n  end\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 336,
    "text": "local p = escapeHtml(text or '')",
    "type": "statement:localassign"
  }, {
    "id": 337,
    "text": "local codes = {}",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "p = gsub(p, '%[math%](.-)%[/math%]', function(latex)\r\n    table.insert(codes, private.mathjaxTag(self, {math = 'inline', text = latex}))\r\n    return CODE..#codes\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 339,
    "text": "table.insert(codes, private.mathjaxTag(self, {math = 'inline', text = latex}))",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "p = gsub(p, '`(.-)`', function(code)\r\n    table.insert(codes, '<code>'..code..'</code>')\r\n    return CODE..#codes\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "table.insert(codes, '<code>'..code..'</code>')",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "p = private.autoLink(p, codes)",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "p = gsub(p, ' #([A-Za-z]+[A-Za-z_]+)', function(name)\r\n    table.insert(codes, string.format(\" <a href='#%s'>%s</a>\", name, name))\r\n    return CODE..#codes\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "table.insert(codes, string.format(\" <a href='#%s'>%s</a>\", name, name))",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "p = gsub(p, '^#([A-Za-z]+[A-Za-z_]+)', function(name)\r\n    table.insert(codes, string.format(\" <a href='#%s'>%s</a>\", name, name))\r\n    return CODE..#codes\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "p = gsub(p, '%*([^\\n]-)%*', '<strong>%1</strong>')",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "p = gsub(p, ' _(.-)_ ', ' <em>%1</em> ')",
    "type": "statement:assign"
  }, {
    "id": 348,
    "text": "p = gsub(p, '^_(.-)_', '<em>%1</em>')",
    "type": "statement:assign"
  }, {
    "id": 349,
    "text": "p = gsub(p, '_(.-)_$', '<em>%1</em>')",
    "type": "statement:assign"
  }, {
    "id": 350,
    "text": "p = gsub(p, '!%[(.-)%]%((.-)%)', \"<img alt='%1' src='%2'/>\")",
    "type": "statement:assign"
  }, {
    "id": 351,
    "text": "p = gsub(p, '%[([^%]]+)%]%(([^%)]+)%)', function(text, href)\r\n    return \"<a href='\"..href..\"'>\"..text..\"</a>\"\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 352,
    "text": "if #codes > 0 then\r\n    p = gsub(p, CODE..'([0-9]+)', function(id)\r\n      return codes[tonumber(id)]\r\n    end)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 353,
    "text": "p = gsub(p, CODE..'([0-9]+)', function(id)\r\n      return codes[tonumber(id)]\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 354,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 355,
    "text": "function private:listToHtml(para)\r\n  if para.text then\r\n    -- Flush last list element.\r\n    table.insert(para.list, {text = para.text, key = para.key})\r\n    para.text = nil\r\n    para.key  = nil\r\n  end\r\n\r\n  if para.list[1].key then\r\n    -- definition list\r\n    local out = \"<table class='definition'>\\n\"\r\n    for _, line in ipairs(para.list) do\r\n      out = out .. \"  <tr><td class='key'>\"..\r\n            private.textToHtml(self, line.key) ..\"</td><td>\" ..\r\n            private.textToHtml(self, line.text)..\"</td></tr>\\n\"\r\n    end\r\n    return out .. '\\n</table>'\r\n  else\r\n    -- bullet list\r\n    local out = '<ul>\\n'\r\n    for _, line in ipairs(para.list) do\r\n      out = out .. '<li>' .. private.textToHtml(self, line.text) .. '</li>\\n'\r\n    end\r\n    return out .. '</ul>'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 356,
    "text": "if para.text then\r\n    -- Flush last list element.\r\n    table.insert(para.list, {text = para.text, key = para.key})\r\n    para.text = nil\r\n    para.key  = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 357,
    "text": "para.text = nil",
    "type": "statement:assign"
  }, {
    "id": 358,
    "text": "para.key  = nil",
    "type": "statement:assign"
  }, {
    "id": 359,
    "text": "if para.list[1].key then\r\n    -- definition list\r\n    local out = \"<table class='definition'>\\n\"\r\n    for _, line in ipairs(para.list) do\r\n      out = out .. \"  <tr><td class='key'>\"..\r\n            private.textToHtml(self, line.key) ..\"</td><td>\" ..\r\n            private.textToHtml(self, line.text)..\"</td></tr>\\n\"\r\n    end\r\n    return out .. '\\n</table>'\r\n  else\r\n    -- bullet list\r\n    local out = '<ul>\\n'\r\n    for _, line in ipairs(para.list) do\r\n      out = out .. '<li>' .. private.textToHtml(self, line.text) .. '</li>\\n'\r\n    end\r\n    return out .. '</ul>'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 360,
    "text": "local out = \"<table class='definition'>\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 361,
    "text": "for _, line in ipairs(para.list) do\r\n      out = out .. \"  <tr><td class='key'>\"..\r\n            private.textToHtml(self, line.key) ..\"</td><td>\" ..\r\n            private.textToHtml(self, line.text)..\"</td></tr>\\n\"\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 362,
    "text": "out = out .. \"  <tr><td class='key'>\"..\r\n            private.textToHtml(self, line.key) ..\"</td><td>\" ..\r\n            private.textToHtml(self, line.text)..\"</td></tr>\\n\"",
    "type": "statement:assign"
  }, {
    "id": 363,
    "text": "local out = '<ul>\\n'",
    "type": "statement:localassign"
  }, {
    "id": 364,
    "text": "for _, line in ipairs(para.list) do\r\n      out = out .. '<li>' .. private.textToHtml(self, line.text) .. '</li>\\n'\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 365,
    "text": "out = out .. '<li>' .. private.textToHtml(self, line.text) .. '</li>\\n'",
    "type": "statement:assign"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "local function osTry(cmd)\r\n  local ret = os.execute(cmd)\r\n  if ret ~= 0 then\r\n    printf(\"Could not execute '%s'.\", cmd)\r\n  end\r\n  return ret\r\nend",
    "type": "function"
  }, {
    "id": 368,
    "text": "local ret = os.execute(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 369,
    "text": "if ret ~= 0 then\r\n    printf(\"Could not execute '%s'.\", cmd)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 370,
    "text": "printf(\"Could not execute '%s'.\", cmd)",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function private:mathjaxTag(para)\r\n  if para.math == 'inline' then\r\n    return '\\\\('..para.text..'\\\\)'\r\n  else\r\n    return '$$'..para.text..'$$'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 373,
    "text": "if para.math == 'inline' then\r\n    return '\\\\('..para.text..'\\\\)'\r\n  else\r\n    return '$$'..para.text..'$$'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 374,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 375,
    "text": "function private:latexImageTag(para)\r\n  local target = self.target\r\n  local latex = para.text\r\n  local mock = '[latex]'..latex..'[/latex]'\r\n  -- Cannot process latex if we do not have an output target\r\n  if not target then return mock end\r\n\r\n  local pre, post = '', ''\r\n  local type = match(latex, '^ *\\\\begin\\\\{(.-)}')\r\n  if not type or\r\n    (type ~= 'align' and\r\n    type ~= 'equation' and\r\n    type ~= 'itemize') then\r\n    pre = '\\\\['\r\n    post = '\\\\]'\r\n  end\r\n\r\n  if self.latex_img_i then\r\n    self.latex_img_i = self.latex_img_i + 1\r\n  else\r\n    self.latex_img_i = 1\r\n  end\r\n  local img_name = self.fullname .. '.' .. self.latex_img_i .. '.png'\r\n  local img_id   = 'latex'..self.latex_img_i\r\n\r\n  local template = lub.Template(private.LATEX_IMG_TEMPLATE)\r\n  local content = template:run { pre = pre, latex = latex, post = post }\r\n  -- Create tmp file\r\n  -- write content\r\n  -- create image\r\n  -- copy image to target/latex/doc.DocTest.1.png\r\n  -- return image tag\r\n  local tempf = 'tmpf' .. math.random(10000000, 99999999)\r\n\r\n  lub.makePath(tempf)\r\n  lub.makePath(target .. '/latex')\r\n  lub.writeall(tempf .. '/base.tex', content)\r\n  if osTry(string.format('cd %s && latex -interaction=batchmode \"base.tex\" &> /dev/null', tempf)) ~= 0 then\r\n    lub.rmTree(tempf, true)\r\n    return mock\r\n  end\r\n  if osTry(string.format('cd %s && dvips base.dvi -E -o base.ps &> /dev/null', tempf)) ~= 0 then\r\n    lub.rmTree(tempf, true)\r\n    return mock\r\n  end\r\n  if osTry(string.format('cd %s && convert -density 150 base.ps -matte -fuzz 10%% -transparent \"#ffffff\" base.png', tempf, target, img_name)) ~= 0 then\r\n    lub.rmTree(tempf, true)\r\n    return mock\r\n  end\r\n  if osTry(string.format('mv %s/base.png %s/latex/%s', tempf, target, img_name)) ~= 0 then\r\n    lub.rmTree(tempf, true)\r\n    return mock\r\n  end\r\n  lub.rmTree(tempf, true)\r\n  return string.format(\"<code id='c%s' class='prettyprint lang-tex' style='display:none'>%s</code><img class='latex' id='%s' onclick='$(\\\"#c%s\\\").toggle()' src='latex/%s'/>\", img_id, latex, img_id, img_id, img_name)\r\nend",
    "type": "function"
  }, {
    "id": 376,
    "text": "local target = self.target",
    "type": "statement:localassign"
  }, {
    "id": 377,
    "text": "local latex = para.text",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "local mock = '[latex]'..latex..'[/latex]'",
    "type": "statement:localassign"
  }, {
    "id": 379,
    "text": "if not target then return mock end",
    "type": "statement:if"
  }, {
    "id": 380,
    "text": "local pre, post = '', ''",
    "type": "statement:localassign"
  }, {
    "id": 381,
    "text": "local type = match(latex, '^ *\\\\begin\\\\{(.-)}')",
    "type": "statement:localassign"
  }, {
    "id": 382,
    "text": "if not type or\r\n    (type ~= 'align' and\r\n    type ~= 'equation' and\r\n    type ~= 'itemize') then\r\n    pre = '\\\\['\r\n    post = '\\\\]'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 383,
    "text": "pre = '\\\\['",
    "type": "statement:assign"
  }, {
    "id": 384,
    "text": "post = '\\\\]'",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "if self.latex_img_i then\r\n    self.latex_img_i = self.latex_img_i + 1\r\n  else\r\n    self.latex_img_i = 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 386,
    "text": "self.latex_img_i = self.latex_img_i + 1",
    "type": "statement:assign"
  }, {
    "id": 387,
    "text": "self.latex_img_i = 1",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "local img_name = self.fullname .. '.' .. self.latex_img_i .. '.png'",
    "type": "statement:localassign"
  }, {
    "id": 389,
    "text": "local img_id   = 'latex'..self.latex_img_i",
    "type": "statement:localassign"
  }, {
    "id": 390,
    "text": "local template = lub.Template(private.LATEX_IMG_TEMPLATE)",
    "type": "statement:localassign"
  }, {
    "id": 391,
    "text": "local content = template:run { pre = pre, latex = latex, post = post }",
    "type": "statement:localassign"
  }, {
    "id": 392,
    "text": "local tempf = 'tmpf' .. math.random(10000000, 99999999)",
    "type": "statement:localassign"
  }, {
    "id": 393,
    "text": "lub.makePath(tempf)",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "lub.makePath(target .. '/latex')",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "lub.writeall(tempf .. '/base.tex', content)",
    "type": "statement:functioncall"
  }, {
    "id": 396,
    "text": "if osTry(string.format('cd %s && latex -interaction=batchmode \"base.tex\" &> /dev/null', tempf)) ~= 0 then\r\n    lub.rmTree(tempf, true)\r\n    return mock\r\n  end",
    "type": "statement:if"
  }, {
    "id": 397,
    "text": "lub.rmTree(tempf, true)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "if osTry(string.format('cd %s && dvips base.dvi -E -o base.ps &> /dev/null', tempf)) ~= 0 then\r\n    lub.rmTree(tempf, true)\r\n    return mock\r\n  end",
    "type": "statement:if"
  }, {
    "id": 399,
    "text": "if osTry(string.format('cd %s && convert -density 150 base.ps -matte -fuzz 10%% -transparent \"#ffffff\" base.png', tempf, target, img_name)) ~= 0 then\r\n    lub.rmTree(tempf, true)\r\n    return mock\r\n  end",
    "type": "statement:if"
  }, {
    "id": 400,
    "text": "if osTry(string.format('mv %s/base.png %s/latex/%s', tempf, target, img_name)) ~= 0 then\r\n    lub.rmTree(tempf, true)\r\n    return mock\r\n  end",
    "type": "statement:if"
  }, {
    "id": 401,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 402,
    "text": "function()\r\n    return it()\r\n  end",
    "type": "function"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "function()\r\n    local _, l = it(lines, i)\r\n    i = i + 1\r\n    return l\r\n  end",
    "type": "function"
  }, {
    "id": 405,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 406,
    "text": "function(self, i, d)\r\n          private.newSection(self, i, d)\r\n          self.next_para_class = 'summary'\r\n        end",
    "type": "function"
  }, {
    "id": 407,
    "text": "private.newSection(self, i, d)",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "self.next_para_class = 'summary'",
    "type": "statement:assign"
  }, {
    "id": 409,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 410,
    "text": "function() return parser.mgroup end",
    "type": "function"
  }, {
    "id": 411,
    "text": "function() return parser.mgroup end",
    "type": "function"
  }, {
    "id": 412,
    "text": "function(self, i)\r\n          print(string.format(\"Missing '# title' in preamble from '%s'.\", self.fullname))\r\n          -- make dummy doc\r\n          private.newSection(self, i, self.fullname)\r\n          table.insert(self.group, {text = '', class = 'summary'})\r\n        end",
    "type": "function"
  }, {
    "id": 413,
    "text": "print(string.format(\"Missing '# title' in preamble from '%s'.\", self.fullname))",
    "type": "statement:functioncall"
  }, {
    "id": 414,
    "text": "private.newSection(self, i, self.fullname)",
    "type": "statement:functioncall"
  }, {
    "id": 415,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 416,
    "text": "function() return parser.mgroup end",
    "type": "function"
  }, {
    "id": 417,
    "text": "function(self, i)\r\n    print(string.format(\"Reaching end of document without finding preamble documentation in '%s'.\", self.fullname))\r\n    -- make dummy doc\r\n    private.newSection(self, i, self.fullname)\r\n    table.insert(self.group, {text = '', class = 'summary'})\r\n  end",
    "type": "function"
  }, {
    "id": 418,
    "text": "print(string.format(\"Reaching end of document without finding preamble documentation in '%s'.\", self.fullname))",
    "type": "statement:functioncall"
  }, {
    "id": 419,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 420,
    "text": "function(self) return self.back or parser.end_comment end",
    "type": "function"
  }, {
    "id": 421,
    "text": "function() return parser.mmath, true end",
    "type": "function"
  }, {
    "id": 422,
    "text": "function() return parser.mcode, true end",
    "type": "function"
  }, {
    "id": 423,
    "text": "function() return parser.mgroup, true end",
    "type": "function"
  }, {
    "id": 424,
    "text": "function(self, i, d)\r\n      local lang = match(d, '#([^ ]+)')\r\n      if lang then\r\n        d = nil\r\n      else\r\n        lang = 'lua'\r\n      end\r\n      lang = string.lower(lang)\r\n      self.para = {code = lang, text = d}\r\n    end",
    "type": "function"
  }, {
    "id": 425,
    "text": "local lang = match(d, '#([^ ]+)')",
    "type": "statement:localassign"
  }, {
    "id": 426,
    "text": "if lang then\r\n        d = nil\r\n      else\r\n        lang = 'lua'\r\n      end",
    "type": "statement:if"
  }, {
    "id": 427,
    "text": "d = nil",
    "type": "statement:assign"
  }, {
    "id": 428,
    "text": "lang = 'lua'",
    "type": "statement:assign"
  }, {
    "id": 429,
    "text": "lang = string.lower(lang)",
    "type": "statement:assign"
  }, {
    "id": 430,
    "text": "self.para = {code = lang, text = d}",
    "type": "statement:assign"
  }, {
    "id": 431,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 432,
    "text": "function(self, i)\r\n          private.addToParaN(self, i, '')\r\n        end",
    "type": "function"
  }, {
    "id": 433,
    "text": "private.addToParaN(self, i, '')",
    "type": "statement:functioncall"
  }, {
    "id": 434,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 435,
    "text": "function(self, i, d)\r\n          private.flushPara(self)\r\n        end",
    "type": "function"
  }, {
    "id": 436,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 437,
    "text": "function() return parser.mgroup, true end",
    "type": "function"
  }, {
    "id": 438,
    "text": "function(self, i, d)\r\n      local lang = match(d, '#([^ ]+.+)')\r\n      if lang then\r\n        d = nil\r\n      else\r\n        lang = 'lua'\r\n      end\r\n      lang = string.lower(lang)\r\n      self.para = {code = lang, text = d}\r\n    end",
    "type": "function"
  }, {
    "id": 439,
    "text": "local lang = match(d, '#([^ ]+.+)')",
    "type": "statement:localassign"
  }, {
    "id": 440,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 441,
    "text": "function(self, i)\r\n          private.addToParaN(self, i, '')\r\n        end",
    "type": "function"
  }, {
    "id": 442,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 443,
    "text": "function(self, i, d)\r\n          private.flushPara(self)\r\n        end",
    "type": "function"
  }, {
    "id": 444,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 445,
    "text": "function() return parser.group, true end",
    "type": "function"
  }, {
    "id": 446,
    "text": "function(self, i, d)\r\n      private.flushPara(self)\r\n      self.para = {math = 'inline', text = d}\r\n      private.flushPara(self)\r\n    end",
    "type": "function"
  }, {
    "id": 447,
    "text": "self.para = {math = 'inline', text = d}",
    "type": "statement:assign"
  }, {
    "id": 448,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 449,
    "text": "function() return parser.mgroup end",
    "type": "function"
  }, {
    "id": 450,
    "text": "function(self, i, d)\r\n      private.flushPara(self)\r\n      self.para = {math = 'block', text = d}\r\n    end",
    "type": "function"
  }, {
    "id": 451,
    "text": "self.para = {math = 'block', text = d}",
    "type": "statement:assign"
  }, {
    "id": 452,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 453,
    "text": "function(self, i, d)\r\n      private.addToPara(self, i, d)\r\n      private.flushPara(self)\r\n    end",
    "type": "function"
  }, {
    "id": 454,
    "text": "private.addToPara(self, i, d)",
    "type": "statement:functioncall"
  }, {
    "id": 455,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 456,
    "text": "function() return parser.mgroup end",
    "type": "function"
  }, {
    "id": 457,
    "text": "function(self, i, d)\r\n      private.flushPara(self)\r\n      self.para = {math = true, text = d}\r\n      private.flushPara(self)\r\n    end",
    "type": "function"
  }, {
    "id": 458,
    "text": "self.para = {math = true, text = d}",
    "type": "statement:assign"
  }, {
    "id": 459,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 460,
    "text": "function() return parser.group end",
    "type": "function"
  }, {
    "id": 461,
    "text": "function(self, i, d)\r\n      private.flushPara(self)\r\n      self.para = {math = true, text = d}\r\n    end",
    "type": "function"
  }, {
    "id": 462,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 463,
    "text": "function(self, i, d)\r\n      private.addToPara(self, i, d)\r\n      private.flushPara(self)\r\n    end",
    "type": "function"
  }, {
    "id": 464,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 465,
    "text": "function() return parser.group end",
    "type": "function"
  }, {
    "id": 466,
    "text": "function() return parser.code, true end",
    "type": "function"
  }, {
    "id": 467,
    "text": "function(self) return self.back or parser.end_comment, true end",
    "type": "function"
  }, {
    "id": 468,
    "text": "function(self)\r\n      if self.back then\r\n        return self.back, true\r\n      else\r\n        return parser.lua\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 469,
    "text": "if self.back then\r\n        return self.back, true\r\n      else\r\n        return parser.lua\r\n      end",
    "type": "statement:if"
  }, {
    "id": 470,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 471,
    "text": "function() return parser.math, true end",
    "type": "function"
  }, {
    "id": 472,
    "text": "function() return parser.code, true end",
    "type": "function"
  }, {
    "id": 473,
    "text": "function() return parser.group, true end",
    "type": "function"
  }, {
    "id": 474,
    "text": "function() return parser.lua end",
    "type": "function"
  }, {
    "id": 475,
    "text": "function(self, i, key, def)\r\n      local def2 = match(def, '^(.-) *%-%- *doc *$')\r\n      if def2 then\r\n        -- Special case where a lib attribute itself is documented\r\n        self.curr_param = {}\r\n        self.params[key] = self.curr_param\r\n        private.newTitle(self, i, '.'..key .. ' = ')\r\n        self.force_move = parser.params\r\n      else\r\n        if self.group[1] and self.group[1].heading then\r\n          -- Group is not for us\r\n          self.group = {}\r\n          if not self.loose then\r\n            private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n          end\r\n          private.newParam(self, i, key, def)\r\n        else\r\n          private.newParam(self, i, key, def)\r\n        end\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 476,
    "text": "local def2 = match(def, '^(.-) *%-%- *doc *$')",
    "type": "statement:localassign"
  }, {
    "id": 477,
    "text": "if def2 then\r\n        -- Special case where a lib attribute itself is documented\r\n        self.curr_param = {}\r\n        self.params[key] = self.curr_param\r\n        private.newTitle(self, i, '.'..key .. ' = ')\r\n        self.force_move = parser.params\r\n      else\r\n        if self.group[1] and self.group[1].heading then\r\n          -- Group is not for us\r\n          self.group = {}\r\n          if not self.loose then\r\n            private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n          end\r\n          private.newParam(self, i, key, def)\r\n        else\r\n          private.newParam(self, i, key, def)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 478,
    "text": "self.curr_param = {}",
    "type": "statement:assign"
  }, {
    "id": 479,
    "text": "self.params[key] = self.curr_param",
    "type": "statement:assign"
  }, {
    "id": 480,
    "text": "private.newTitle(self, i, '.'..key .. ' = ')",
    "type": "statement:functioncall"
  }, {
    "id": 481,
    "text": "self.force_move = parser.params",
    "type": "statement:assign"
  }, {
    "id": 482,
    "text": "if self.group[1] and self.group[1].heading then\r\n          -- Group is not for us\r\n          self.group = {}\r\n          if not self.loose then\r\n            private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n          end\r\n          private.newParam(self, i, key, def)\r\n        else\r\n          private.newParam(self, i, key, def)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 483,
    "text": "if not self.loose then\r\n            private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n          end",
    "type": "statement:if"
  }, {
    "id": 484,
    "text": "private.addTodo(self, i, 'MISSING DOCUMENTATION')",
    "type": "statement:functioncall"
  }, {
    "id": 485,
    "text": "private.newParam(self, i, key, def)",
    "type": "statement:functioncall"
  }, {
    "id": 486,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 487,
    "text": "function(self, i, name, params)\r\n      private.newFunction(self, i, '', name, params)\r\n    end",
    "type": "function"
  }, {
    "id": 488,
    "text": "private.newFunction(self, i, '', name, params)",
    "type": "statement:functioncall"
  }, {
    "id": 489,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 490,
    "text": "function(self) return parser.lua, true end",
    "type": "function"
  }, {
    "id": 491,
    "text": "function(self)\r\n    if self.lit then\r\n      -- Make sure we use previous comment.\r\n      private.useGroup(self)\r\n      self.group = {}\r\n      self.para = {code = 'lua'}\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 492,
    "text": "if self.lit then\r\n      -- Make sure we use previous comment.\r\n      private.useGroup(self)\r\n      self.group = {}\r\n      self.para = {code = 'lua'}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 493,
    "text": "self.para = {code = 'lua'}",
    "type": "statement:assign"
  }, {
    "id": 494,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 495,
    "text": "function(self)\r\n    if self.lit then\r\n      if lub.strip(self.para.text or '') == '' then\r\n        -- Do not insert code for blank lines.\r\n        self.para = nil\r\n      else\r\n        private.flushPara(self)\r\n        private.useGroup(self)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 496,
    "text": "if self.lit then\r\n      if lub.strip(self.para.text or '') == '' then\r\n        -- Do not insert code for blank lines.\r\n        self.para = nil\r\n      else\r\n        private.flushPara(self)\r\n        private.useGroup(self)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 497,
    "text": "if lub.strip(self.para.text or '') == '' then\r\n        -- Do not insert code for blank lines.\r\n        self.para = nil\r\n      else\r\n        private.flushPara(self)\r\n        private.useGroup(self)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 498,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 499,
    "text": "function(self, i, all, typ, fun, params)\r\n      if self.lit then\r\n        private.addToParaN(self, i, all)\r\n      else\r\n        self.group = {}\r\n        if not self.loose then\r\n          private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n        end\r\n        private.newFunction(self, i, typ, fun, params)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 500,
    "text": "if self.lit then\r\n        private.addToParaN(self, i, all)\r\n      else\r\n        self.group = {}\r\n        if not self.loose then\r\n          private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n        end\r\n        private.newFunction(self, i, typ, fun, params)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 501,
    "text": "private.addToParaN(self, i, all)",
    "type": "statement:functioncall"
  }, {
    "id": 502,
    "text": "if not self.loose then\r\n          private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 503,
    "text": "private.newFunction(self, i, typ, fun, params)",
    "type": "statement:functioncall"
  }, {
    "id": 504,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 505,
    "text": "function(self, i, all, key, def)\r\n      if self.lit then\r\n        private.addToParaN(self, i, all)\r\n      else\r\n        self.group = {}\r\n        -- document all params\r\n        -- match(def, '^({) *$') or\r\n        local def2 = match(def, '^(.-) *%-%- *doc *$')\r\n        if def2 then\r\n          -- Special case where a lib attribute itself is documented\r\n          self.curr_param = {}\r\n          self.params[key] = self.curr_param\r\n          private.newTitle(self, i, '.'..key .. ' = {')\r\n          self.force_move = parser.params\r\n        else\r\n          if not self.loose then\r\n            private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n          end\r\n          private.newParam(self, i, key, def)\r\n        end\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 506,
    "text": "if self.lit then\r\n        private.addToParaN(self, i, all)\r\n      else\r\n        self.group = {}\r\n        -- document all params\r\n        -- match(def, '^({) *$') or\r\n        local def2 = match(def, '^(.-) *%-%- *doc *$')\r\n        if def2 then\r\n          -- Special case where a lib attribute itself is documented\r\n          self.curr_param = {}\r\n          self.params[key] = self.curr_param\r\n          private.newTitle(self, i, '.'..key .. ' = {')\r\n          self.force_move = parser.params\r\n        else\r\n          if not self.loose then\r\n            private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n          end\r\n          private.newParam(self, i, key, def)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 507,
    "text": "if def2 then\r\n          -- Special case where a lib attribute itself is documented\r\n          self.curr_param = {}\r\n          self.params[key] = self.curr_param\r\n          private.newTitle(self, i, '.'..key .. ' = {')\r\n          self.force_move = parser.params\r\n        else\r\n          if not self.loose then\r\n            private.addTodo(self, i, 'MISSING DOCUMENTATION')\r\n          end\r\n          private.newParam(self, i, key, def)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 508,
    "text": "private.newTitle(self, i, '.'..key .. ' = {')",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 510,
    "text": "function(self, i, d)\r\n      self.in_func = nil\r\n      if self.lit then private.addToParaN(self, i, d) end\r\n    end",
    "type": "function"
  }, {
    "id": 511,
    "text": "self.in_func = nil",
    "type": "statement:assign"
  }, {
    "id": 512,
    "text": "if self.lit then private.addToParaN(self, i, d) end",
    "type": "statement:if"
  }, {
    "id": 513,
    "text": "private.addToParaN(self, i, d)",
    "type": "statement:functioncall"
  }, {
    "id": 514,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 515,
    "text": "function(self, i, d)\r\n      assert(ALLOWED_OPTIONS[d], string.format(\"Invalid option '%s' in '%s'.\", d, self.name))\r\n      self[d] = false\r\n    end",
    "type": "function"
  }, {
    "id": 516,
    "text": "assert(ALLOWED_OPTIONS[d], string.format(\"Invalid option '%s' in '%s'.\", d, self.name))",
    "type": "statement:functioncall"
  }, {
    "id": 517,
    "text": "self[d] = false",
    "type": "statement:assign"
  }, {
    "id": 518,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 519,
    "text": "function(self, i, d)\r\n      assert(ALLOWED_OPTIONS[d], string.format(\"Invalid option '%s' in '%s'.\", d, self.name))\r\n      if d == 'loose' then\r\n        private.addTodo(self, i, 'INCOMPLETE DOCUMENTATION')\r\n      end\r\n      self[d] = true\r\n    end",
    "type": "function"
  }, {
    "id": 520,
    "text": "if d == 'loose' then\r\n        private.addTodo(self, i, 'INCOMPLETE DOCUMENTATION')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 521,
    "text": "private.addTodo(self, i, 'INCOMPLETE DOCUMENTATION')",
    "type": "statement:functioncall"
  }, {
    "id": 522,
    "text": "self[d] = true",
    "type": "statement:assign"
  }, {
    "id": 523,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 524,
    "text": "function(self, i, key)\r\n      self.curr_param = {}\r\n      self.params[key] = self.curr_param\r\n      -- remove 'local' prefix\r\n      local k = match(key, '^local *(.+)$')\r\n      key = k or key\r\n      private.newTitle(self, i, key .. ' {')\r\n    end",
    "type": "function"
  }, {
    "id": 525,
    "text": "local k = match(key, '^local *(.+)$')",
    "type": "statement:localassign"
  }, {
    "id": 526,
    "text": "key = k or key",
    "type": "statement:assign"
  }, {
    "id": 527,
    "text": "private.newTitle(self, i, key .. ' {')",
    "type": "statement:functioncall"
  }, {
    "id": 528,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 529,
    "text": "function() return parser.params end",
    "type": "function"
  }, {
    "id": 530,
    "text": "function(self)\r\n      -- Temporary group (not inserted in section).\r\n      self.group = {}\r\n                           -- replay last line\r\n      return parser.group, true\r\n    end",
    "type": "function"
  }, {
    "id": 531,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 532,
    "text": "function(self)\r\n      -- Temporary group (not inserted in section).\r\n      self.group = {}\r\n    end",
    "type": "function"
  }, {
    "id": 533,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 534,
    "text": "function() return parser.mgroup end",
    "type": "function"
  }, {
    "id": 535,
    "text": "function(self, ...)\r\n      if self.lit then\r\n        private.addToParaN(self, ...)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 536,
    "text": "if self.lit then\r\n        private.addToParaN(self, ...)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 537,
    "text": "private.addToParaN(self, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 538,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 539,
    "text": "function(self, i, d)\r\n      private.newTitle(self, i, d, 'param')\r\n      private.useGroup(self)\r\n    end",
    "type": "function"
  }, {
    "id": 540,
    "text": "private.newTitle(self, i, d, 'param')",
    "type": "statement:functioncall"
  }, {
    "id": 541,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 542,
    "text": "function(self, i, d)\r\n      -- Temporary group (not inserted in section).\r\n      self.group = {}\r\n    end",
    "type": "function"
  }, {
    "id": 543,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 544,
    "text": "function(self)\r\n      self.back = parser.params\r\n      -- replay last line\r\n      return parser.group, true\r\n    end",
    "type": "function"
  }, {
    "id": 545,
    "text": "self.back = parser.params",
    "type": "statement:assign"
  }, {
    "id": 546,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 547,
    "text": "function(self, i, d)\r\n      private.addToPara(self, i, d)\r\n      -- Temporary group (not inserted in section).\r\n      self.group = {}\r\n    end",
    "type": "function"
  }, {
    "id": 548,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 549,
    "text": "function(self)\r\n      self.back = parser.params\r\n      return parser.mgroup\r\n    end",
    "type": "function"
  }, {
    "id": 550,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 551,
    "text": "function(self, i, key, d)\r\n      private.newParam(self, i, key, d, 'tparam')\r\n    end",
    "type": "function"
  }, {
    "id": 552,
    "text": "private.newParam(self, i, key, d, 'tparam')",
    "type": "statement:functioncall"
  }, {
    "id": 553,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 554,
    "text": "function(self, i)\r\n      private.newTitle(self, i, '}', 'end')\r\n      private.useGroup(self)\r\n    end",
    "type": "function"
  }, {
    "id": 555,
    "text": "private.newTitle(self, i, '}', 'end')",
    "type": "statement:functioncall"
  }, {
    "id": 556,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 557,
    "text": "function(self)\r\n      self.back = nil\r\n      return parser.lua\r\n    end",
    "type": "function"
  }, {
    "id": 558,
    "text": "self.back = nil",
    "type": "statement:assign"
  }, {
    "id": 559,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 560,
    "text": "function(self)\r\n      private.flushPara(self)\r\n      self.group = {}\r\n    end",
    "type": "function"
  }, {
    "id": 561,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 562,
    "text": "function(class, typ, fun)\r\n      table.insert(codes, string.format(\" <a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun))\r\n      return CODE..#codes\r\n    end",
    "type": "function"
  }, {
    "id": 563,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 564,
    "text": "function(class, typ, fun)\r\n      return string.format(\"<a href='%s.html#%s'>%s%s%s</a>\", class, fun, class, typ, fun)\r\n    end",
    "type": "function"
  }, {
    "id": 565,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 566,
    "text": "function(latex)\r\n    table.insert(codes, private.mathjaxTag(self, {math = 'inline', text = latex}))\r\n    return CODE..#codes\r\n  end",
    "type": "function"
  }, {
    "id": 567,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 568,
    "text": "function(code)\r\n    table.insert(codes, '<code>'..code..'</code>')\r\n    return CODE..#codes\r\n  end",
    "type": "function"
  }, {
    "id": 569,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 570,
    "text": "function(name)\r\n    table.insert(codes, string.format(\" <a href='#%s'>%s</a>\", name, name))\r\n    return CODE..#codes\r\n  end",
    "type": "function"
  }, {
    "id": 571,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 572,
    "text": "function(name)\r\n    table.insert(codes, string.format(\" <a href='#%s'>%s</a>\", name, name))\r\n    return CODE..#codes\r\n  end",
    "type": "function"
  }, {
    "id": 573,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 574,
    "text": "function(text, href)\r\n    return \"<a href='\"..href..\"'>\"..text..\"</a>\"\r\n  end",
    "type": "function"
  }, {
    "id": 575,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 576,
    "text": "function(id)\r\n      return codes[tonumber(id)]\r\n    end",
    "type": "function"
  }, {
    "id": 577,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 578,
    "text": "",
    "type": "function container"
  }, {
    "id": 579,
    "text": "function private.parseArgs()\r\n  for _, val in pairs(arg) do\r\n    if val == '--verbose' then\r\n      lib.verbose = true\r\n    else\r\n      local key,value = string.match(val, '%-%-(.-)=(.*)')\r\n      if key == 'only' then\r\n        lib.only = value\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 580,
    "text": "function private.testAll()\r\n  lib.total_exec = 0\r\n  lib.total_count = 0\r\n  lib.total_asrt = 0\r\n  lib.total_fail = 0\r\n  for i, suite in ipairs(lib.suites) do\r\n    private.runSuite(suite)\r\n    private.reportSuite(suite)\r\n    if lib.abort then\r\n      break\r\n    end\r\n  end\r\n  private.report()\r\nend",
    "type": "function"
  }, {
    "id": 581,
    "text": "function private.report()\r\n  print('\\n')\r\n  if lib.only then\r\n    print('Only testing \\''..lib.only..'\\'.')\r\n  end\r\n\r\n  if lib.total_exec == 0 then\r\n    print(string.format('No tests defined. Test files must end with \"_test.lua\"'))\r\n  elseif lib.abort then\r\n    print(string.format('Abort after %i / %i tests', lib.total_exec, lib.total_count))\r\n  elseif lib.total_fail == 0 then\r\n    if lib.total_exec == 1 then\r\n      print(string.format('Success! %i test passes (%i assertions).', lib.total_exec, lib.total_asrt))\r\n    else\r\n      print(string.format('Success! %i tests pass (%i assertions).', lib.total_exec, lib.total_asrt))\r\n    end\r\n  elseif lib.total_exec == 1 then\r\n    if lib.total_fail == 1 then\r\n      print(string.format('Fail... %i failure / %i test', lib.total_fail, lib.total_exec))\r\n    else\r\n      print(string.format('Fail... %i failures / %i test', lib.total_fail, lib.total_exec))\r\n    end\r\n  else\r\n    if lib.total_fail == 1 then\r\n      print(string.format('Fail... %i failure / %i tests', lib.total_fail, lib.total_exec))\r\n    else\r\n      print(string.format('Fail... %i failures / %i tests', lib.total_fail, lib.total_exec))\r\n    end\r\n  end\r\n  print('')\r\n\r\n  os.exit(lib.total_fail == 0 and 0 or -1)\r\nend",
    "type": "function"
  }, {
    "id": 582,
    "text": "lub",
    "type": "module"
  }, {
    "id": 583,
    "text": "rmTree",
    "type": "global function"
  }, {
    "id": 584,
    "text": "Template",
    "type": "global function"
  }, {
    "id": 585,
    "text": "makePath",
    "type": "global function"
  }, {
    "id": 586,
    "text": "Dir",
    "type": "global function"
  }, {
    "id": 587,
    "text": "split",
    "type": "global function"
  }, {
    "id": 588,
    "text": "absolutizePath",
    "type": "global function"
  }, {
    "id": 589,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 590,
    "text": "class",
    "type": "global function"
  }, {
    "id": 591,
    "text": "strip",
    "type": "global function"
  }, {
    "id": 592,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 593,
    "text": "path",
    "type": "global function"
  }, {
    "id": 594,
    "text": "content",
    "type": "global function"
  }, {
    "id": 595,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 596,
    "text": "fileType",
    "type": "global function"
  }, {
    "id": 597,
    "text": "insertSorted",
    "type": "global function"
  }, {
    "id": 598,
    "text": "writeall",
    "type": "global function"
  }, {
    "id": 599,
    "text": "private.output.html",
    "type": "global function"
  }, {
    "id": 600,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 601,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 602,
    "text": "close",
    "type": "global function"
  }, {
    "id": 603,
    "text": "parseFile",
    "type": "global function"
  }, {
    "id": 604,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 605,
    "text": "match",
    "type": "global function"
  }, {
    "id": 606,
    "text": "todoFixme",
    "type": "global function"
  }, {
    "id": 607,
    "text": "output",
    "type": "global function"
  }, {
    "id": 608,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 609,
    "text": "enter",
    "type": "global function"
  }, {
    "id": 610,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 611,
    "text": "print",
    "type": "global function"
  }, {
    "id": 612,
    "text": "newParam",
    "type": "global function"
  }, {
    "id": 613,
    "text": "mathjaxTag",
    "type": "global function"
  }, {
    "id": 614,
    "text": "newTitle",
    "type": "global function"
  }, {
    "id": 615,
    "text": "spanToHtml",
    "type": "global function"
  }, {
    "id": 616,
    "text": "parseCode",
    "type": "global function"
  }, {
    "id": 617,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 618,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 619,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 620,
    "text": "it",
    "type": "global function"
  }, {
    "id": 621,
    "text": "type",
    "type": "global function"
  }, {
    "id": 622,
    "text": "format",
    "type": "global function"
  }, {
    "id": 623,
    "text": "eof",
    "type": "global function"
  }, {
    "id": 624,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 625,
    "text": "state_exit",
    "type": "global function"
  }, {
    "id": 626,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 627,
    "text": "addTodo",
    "type": "global function"
  }, {
    "id": 628,
    "text": "printf",
    "type": "global function"
  }, {
    "id": 629,
    "text": "newSection",
    "type": "global function"
  }, {
    "id": 630,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 631,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 632,
    "text": "private.output[def.format]",
    "type": "global function"
  }, {
    "id": 633,
    "text": "open",
    "type": "global function"
  }, {
    "id": 634,
    "text": "error",
    "type": "global function"
  }, {
    "id": 635,
    "text": "private.copyAssets[def.format]",
    "type": "global function"
  }, {
    "id": 636,
    "text": "textToHtml",
    "type": "global function"
  }, {
    "id": 637,
    "text": "doParse",
    "type": "global function"
  }, {
    "id": 638,
    "text": "newFunction",
    "type": "global function"
  }, {
    "id": 639,
    "text": "flushPara",
    "type": "global function"
  }, {
    "id": 640,
    "text": "listToHtml",
    "type": "global function"
  }, {
    "id": 641,
    "text": "addToPara",
    "type": "global function"
  }, {
    "id": 642,
    "text": "useGroup",
    "type": "global function"
  }, {
    "id": 643,
    "text": "random",
    "type": "global function"
  }, {
    "id": 644,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 645,
    "text": "len",
    "type": "global function"
  }, {
    "id": 646,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 647,
    "text": "require",
    "type": "global function"
  }, {
    "id": 648,
    "text": "addToParaN",
    "type": "global function"
  }, {
    "id": 649,
    "text": "",
    "type": "variable container"
  }, {
    "id": 650,
    "text": "",
    "type": "require container"
  }, {
    "id": 651,
    "text": "",
    "type": "local variable"
  }, {
    "id": 652,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 653,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 654,
    "text": "",
    "type": "string"
  }, {
    "id": 655,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 656,
    "text": "",
    "type": "string"
  }, {
    "id": 657,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 658,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 659,
    "text": "",
    "type": "local variable"
  }, {
    "id": 660,
    "text": "",
    "type": "n/a"
  }, {
    "id": 661,
    "text": "",
    "type": "local variable"
  }, {
    "id": 662,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 663,
    "text": "",
    "type": "local variable"
  }, {
    "id": 664,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 665,
    "text": "",
    "type": "local variable"
  }, {
    "id": 666,
    "text": "",
    "type": "string"
  }, {
    "id": 667,
    "text": "",
    "type": "local variable"
  }, {
    "id": 668,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 669,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 670,
    "text": "",
    "type": "boolean"
  }, {
    "id": 671,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 672,
    "text": "",
    "type": "boolean"
  }, {
    "id": 673,
    "text": "",
    "type": "local variable"
  }, {
    "id": 674,
    "text": "",
    "type": "string"
  }, {
    "id": 675,
    "text": "",
    "type": "local variable"
  }, {
    "id": 676,
    "text": "",
    "type": "string"
  }, {
    "id": 677,
    "text": "",
    "type": "local variable"
  }, {
    "id": 678,
    "text": "",
    "type": "n/a"
  }, {
    "id": 679,
    "text": "",
    "type": "local variable"
  }, {
    "id": 680,
    "text": "",
    "type": "n/a"
  }, {
    "id": 681,
    "text": "",
    "type": "local variable"
  }, {
    "id": 682,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 683,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 684,
    "text": "",
    "type": "boolean"
  }, {
    "id": 685,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 686,
    "text": "",
    "type": "boolean"
  }, {
    "id": 687,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 688,
    "text": "",
    "type": "boolean"
  }, {
    "id": 689,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 690,
    "text": "",
    "type": "boolean"
  }, {
    "id": 691,
    "text": "",
    "type": "global variable"
  }, {
    "id": 692,
    "text": "",
    "type": "n/a"
  }, {
    "id": 693,
    "text": "",
    "type": "global variable"
  }, {
    "id": 694,
    "text": "",
    "type": "n/a"
  }, {
    "id": 695,
    "text": "",
    "type": "global variable"
  }, {
    "id": 696,
    "text": "",
    "type": "n/a"
  }, {
    "id": 697,
    "text": "",
    "type": "global variable"
  }, {
    "id": 698,
    "text": "",
    "type": "n/a"
  }, {
    "id": 699,
    "text": "",
    "type": "global variable"
  }, {
    "id": 700,
    "text": "",
    "type": "n/a"
  }, {
    "id": 701,
    "text": "",
    "type": "global variable"
  }, {
    "id": 702,
    "text": "",
    "type": "n/a"
  }, {
    "id": 703,
    "text": "",
    "type": "global variable"
  }, {
    "id": 704,
    "text": "",
    "type": "n/a"
  }, {
    "id": 705,
    "text": "",
    "type": "global variable"
  }, {
    "id": 706,
    "text": "",
    "type": "n/a"
  }, {
    "id": 707,
    "text": "",
    "type": "global variable"
  }, {
    "id": 708,
    "text": "",
    "type": "n/a"
  }, {
    "id": 709,
    "text": "",
    "type": "global variable"
  }, {
    "id": 710,
    "text": "",
    "type": "n/a"
  }, {
    "id": 711,
    "text": "",
    "type": "global variable"
  }, {
    "id": 712,
    "text": "",
    "type": "n/a"
  }, {
    "id": 713,
    "text": "",
    "type": "global variable"
  }, {
    "id": 714,
    "text": "",
    "type": "n/a"
  }, {
    "id": 715,
    "text": "",
    "type": "global variable"
  }, {
    "id": 716,
    "text": "",
    "type": "n/a"
  }, {
    "id": 717,
    "text": "",
    "type": "global variable"
  }, {
    "id": 718,
    "text": "",
    "type": "n/a"
  }, {
    "id": 719,
    "text": "",
    "type": "global variable"
  }, {
    "id": 720,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 721,
    "text": "",
    "type": "interface container"
  }, {
    "id": 722,
    "text": "",
    "type": "interface"
  }, {
    "id": 723,
    "text": "",
    "type": "interface"
  }, {
    "id": 724,
    "text": "",
    "type": "local variable"
  }, {
    "id": 725,
    "text": "",
    "type": "interface"
  } ]
}