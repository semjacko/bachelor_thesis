{
  "_filename": "patternhandler.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/xavante/src/xavante/patternhandler.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "calls",
    "to": 24
  }, {
    "from": 5,
    "label": "calls",
    "to": 24
  }, {
    "from": 5,
    "label": "calls",
    "to": 23
  }, {
    "from": 13,
    "label": "calls",
    "to": 21
  }, {
    "from": 13,
    "label": "calls",
    "to": 22
  }, {
    "from": 13,
    "label": "calls",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 20
  }, {
    "from": 20,
    "label": "declares",
    "to": 2
  }, {
    "from": 20,
    "label": "declares",
    "to": 5
  }, {
    "from": 20,
    "label": "declares",
    "to": 13
  }, {
    "from": 20,
    "label": "declares",
    "to": 18
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 27
  }, {
    "from": 25,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "patternhandler",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function path_iterator (path)\r\n  return path_p, path\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function match_url (req, conf)\r\n  local path = req.relpath\r\n  for _, rule in ipairs(conf) do\r\n    for _, pat in ipairs(rule.pattern) do\r\n      local cap = { string.match(path, pat) }\r\n      if #cap > 0 then \r\n\treq.handler = rule.handler\r\n\treturn cap \r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local path = req.relpath",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for _, rule in ipairs(conf) do\r\n    for _, pat in ipairs(rule.pattern) do\r\n      local cap = { string.match(path, pat) }\r\n      if #cap > 0 then \r\n\treq.handler = rule.handler\r\n\treturn cap \r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "for _, pat in ipairs(rule.pattern) do\r\n      local cap = { string.match(path, pat) }\r\n      if #cap > 0 then \r\n\treq.handler = rule.handler\r\n\treturn cap \r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "local cap = { string.match(path, pat) }",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if #cap > 0 then \r\n\treq.handler = rule.handler\r\n\treturn cap \r\n      end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "req.handler = rule.handler",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function xavante.patternhandler (conf)\r\n  if not conf or type (conf) ~= \"table\" then return nil end\r\n  \r\n  return function (req, res)\r\n\t   local cap = match_url (req, conf) or {}\r\n\t   local h = req.handler or xavante.httpd.err_404\r\n\t   return h (req, res, cap)\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if not conf or type (conf) ~= \"table\" then return nil end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "local cap = match_url (req, conf) or {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local h = req.handler or xavante.httpd.err_404",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function (req, res)\r\n\t   local cap = match_url (req, conf) or {}\r\n\t   local h = req.handler or xavante.httpd.err_404\r\n\t   return h (req, res, cap)\r\n\t end",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "",
    "type": "function container"
  }, {
    "id": 21,
    "text": "type",
    "type": "global function"
  }, {
    "id": 22,
    "text": "h",
    "type": "global function"
  }, {
    "id": 23,
    "text": "match",
    "type": "global function"
  }, {
    "id": 24,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 25,
    "text": "",
    "type": "global variable"
  }, {
    "id": 26,
    "text": "",
    "type": "variable container"
  }, {
    "id": 27,
    "text": "",
    "type": "require container"
  } ]
}