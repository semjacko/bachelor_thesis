{
  "_filename": "sajax.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/xavante/src/sajax/sajax.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 20
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 3
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 3
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 81,
    "label": "has",
    "to": 23
  }, {
    "from": 81,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 81,
    "label": "has",
    "to": 3
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 9,
    "label": "calls",
    "to": 97
  }, {
    "from": 5,
    "label": "calls",
    "to": 84
  }, {
    "from": 60,
    "label": "calls",
    "to": 84
  }, {
    "from": 66,
    "label": "calls",
    "to": 98
  }, {
    "from": 19,
    "label": "calls",
    "to": 9
  }, {
    "from": 83,
    "label": "calls",
    "to": 93
  }, {
    "from": 7,
    "label": "calls",
    "to": 93
  }, {
    "from": 83,
    "label": "calls",
    "to": 89
  }, {
    "from": 9,
    "label": "calls",
    "to": 90
  }, {
    "from": 5,
    "label": "calls",
    "to": 90
  }, {
    "from": 5,
    "label": "calls",
    "to": 99
  }, {
    "from": 5,
    "label": "calls",
    "to": 99
  }, {
    "from": 5,
    "label": "calls",
    "to": 99
  }, {
    "from": 57,
    "label": "calls",
    "to": 99
  }, {
    "from": 63,
    "label": "calls",
    "to": 99
  }, {
    "from": 74,
    "label": "calls",
    "to": 99
  }, {
    "from": 57,
    "label": "calls",
    "to": 55
  }, {
    "from": 66,
    "label": "calls",
    "to": 55
  }, {
    "from": 83,
    "label": "calls",
    "to": 85
  }, {
    "from": 19,
    "label": "calls",
    "to": 86
  }, {
    "from": 5,
    "label": "calls",
    "to": 86
  }, {
    "from": 5,
    "label": "calls",
    "to": 86
  }, {
    "from": 5,
    "label": "calls",
    "to": 86
  }, {
    "from": 60,
    "label": "calls",
    "to": 2
  }, {
    "from": 19,
    "label": "calls",
    "to": 95
  }, {
    "from": 5,
    "label": "calls",
    "to": 96
  }, {
    "from": 5,
    "label": "calls",
    "to": 96
  }, {
    "from": 5,
    "label": "calls",
    "to": 96
  }, {
    "from": 5,
    "label": "calls",
    "to": 96
  }, {
    "from": 83,
    "label": "calls",
    "to": 87
  }, {
    "from": 83,
    "label": "calls",
    "to": 87
  }, {
    "from": 19,
    "label": "calls",
    "to": 94
  }, {
    "from": 83,
    "label": "calls",
    "to": 91
  }, {
    "from": 7,
    "label": "calls",
    "to": 91
  }, {
    "from": 83,
    "label": "calls",
    "to": 88
  }, {
    "from": 74,
    "label": "calls",
    "to": 66
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 102
  }, {
    "from": 5,
    "label": "calls",
    "to": 102
  }, {
    "from": 5,
    "label": "calls",
    "to": 92
  }, {
    "from": 5,
    "label": "calls",
    "to": 92
  }, {
    "from": 9,
    "label": "calls",
    "to": 100
  }, {
    "from": 66,
    "label": "calls",
    "to": 100
  }, {
    "from": 66,
    "label": "calls",
    "to": 100
  }, {
    "from": 66,
    "label": "calls",
    "to": 101
  }, {
    "from": 63,
    "label": "calls",
    "to": 60
  }, {
    "from": 66,
    "label": "calls",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 83
  }, {
    "from": 83,
    "label": "declares",
    "to": 2
  }, {
    "from": 83,
    "label": "declares",
    "to": 5
  }, {
    "from": 83,
    "label": "declares",
    "to": 7
  }, {
    "from": 83,
    "label": "declares",
    "to": 9
  }, {
    "from": 83,
    "label": "declares",
    "to": 19
  }, {
    "from": 83,
    "label": "declares",
    "to": 28
  }, {
    "from": 83,
    "label": "declares",
    "to": 34
  }, {
    "from": 83,
    "label": "declares",
    "to": 53
  }, {
    "from": 83,
    "label": "declares",
    "to": 55
  }, {
    "from": 83,
    "label": "declares",
    "to": 57
  }, {
    "from": 83,
    "label": "declares",
    "to": 60
  }, {
    "from": 83,
    "label": "declares",
    "to": 63
  }, {
    "from": 83,
    "label": "declares",
    "to": 66
  }, {
    "from": 83,
    "label": "declares",
    "to": 74
  }, {
    "from": 83,
    "label": "declares",
    "to": 77
  }, {
    "from": 83,
    "label": "declares",
    "to": 79
  }, {
    "from": 83,
    "label": "declares",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 103
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 103,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 103,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 103,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 103,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 103,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 103,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 103,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 103,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 103,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 103,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 103,
    "label": "initializes",
    "to": 125
  }, {
    "from": 103,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 81
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sajax",
    "type": "module"
  }, {
    "id": 2,
    "text": "function (funcname)\r\n\t\treturn cgilua.mkabsoluteurl (cgilua.mkurlpath (cgilua.servervariable\"SCRIPT_NAME\" .. \"/\" .. funcname.. \"?rs=rs\"))\r\n\tend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function handle_client_request ()\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function register_path (funcname)\r\n\t\treturn cgilua.mkurlpath (cgilua.servervariable\"SCRIPT_NAME\" .. \"/\" .. funcname)\r\n\tend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function handle_prefix (req, res)\r\n\t\tres.headers [\"Expires\"] = \"Mon, 26 Jul 1997 05:00:00 GMT\"    -- Date in the past\r\n\t\tres.headers [\"Last-Modified\"] =  os.date (\"!%a, %d %b %Y %H:%M:%S GMT\")\r\n\t\t-- always modified\r\n\t\tres.headers [\"Cache-Control\"] = \"no-cache, must-revalidate\"\t\t-- HTTP/1.1\r\n\t\tres.headers [\"Pragma\"] =  \"no-cache\"\t\t\t\t\t\t\t-- HTTP/1.0\r\n\t\t\r\n\t\tlocal qry = req.parsed_url.query or \"\"\r\n\t\tlocal rsargs = {}\r\n\t\tfor rs_arg in string.gfind (qry, \"rsargs%[%]=([^&=]*)&?\") do\r\n\t\t\ttable.insert (rsargs, rs_arg)\r\n\t\tend\r\n\t\treturn rsargs\r\n\tend",
    "type": "function"
  }, {
    "id": 10,
    "text": "res.headers [\"Expires\"] = \"Mon, 26 Jul 1997 05:00:00 GMT\"",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "res.headers [\"Last-Modified\"] =  os.date (\"!%a, %d %b %Y %H:%M:%S GMT\")",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "res.headers [\"Cache-Control\"] = \"no-cache, must-revalidate\"",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "res.headers [\"Pragma\"] =  \"no-cache\"",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local qry = req.parsed_url.query or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local rsargs = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for rs_arg in string.gfind (qry, \"rsargs%[%]=([^&=]*)&?\") do\r\n\t\t\ttable.insert (rsargs, rs_arg)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "table.insert (rsargs, rs_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function export (funcname, func)\r\n\t\texport_list[funcname] = func\r\n\t\t\r\n\t\txavante.httpd.addHandler (nil, register_path (funcname), function (req, res)\r\n\t\t\t\tlocal isok, result = xpcall (function ()\r\n\t\t\t\t\t\treturn func (unpack (handle_prefix (req, res)))\r\n\t\t\t\t\tend, tostring)\r\n\t\t\t\tresult = result or \"\"\r\n\t\t\t\tif isok then\r\n\t\t\t\t\tres.content = \"+:\" .. result\r\n\t\t\t\telse\r\n\t\t\t\t\tres.content = \"-:\" .. result\r\n\t\t\t\tend\r\n\t\t\t\treturn res\r\n\t\t\tend)\r\n\tend",
    "type": "function"
  }, {
    "id": 20,
    "text": "export_list[funcname] = func",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "xavante.httpd.addHandler (nil, register_path (funcname), function (req, res)\r\n\t\t\t\tlocal isok, result = xpcall (function ()\r\n\t\t\t\t\t\treturn func (unpack (handle_prefix (req, res)))\r\n\t\t\t\t\tend, tostring)\r\n\t\t\t\tresult = result or \"\"\r\n\t\t\t\tif isok then\r\n\t\t\t\t\tres.content = \"+:\" .. result\r\n\t\t\t\telse\r\n\t\t\t\t\tres.content = \"-:\" .. result\r\n\t\t\t\tend\r\n\t\t\t\treturn res\r\n\t\t\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local isok, result = xpcall (function ()\r\n\t\t\t\t\t\treturn func (unpack (handle_prefix (req, res)))\r\n\t\t\t\t\tend, tostring)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "result = result or \"\"",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if isok then\r\n\t\t\t\t\tres.content = \"+:\" .. result\r\n\t\t\t\telse\r\n\t\t\t\t\tres.content = \"-:\" .. result\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "res.content = \"+:\" .. result",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "res.content = \"-:\" .. result",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function (funcname)\r\n\t\tlocal uri = \"\"\r\n\t\tif string.find (uri, \"?\") then\r\n\t\t\turi = uri .. \"&rs=\" .. cgilua.urlcode.escape (funcname)\r\n\t\telse\r\n\t\t\turi = uri .. \"?rs=\" .. cgilua.urlcode.escape (funcname)\r\n\t\tend\r\n\t\t\r\n\t\treturn uri\r\n\tend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local uri = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if string.find (uri, \"?\") then\r\n\t\t\turi = uri .. \"&rs=\" .. cgilua.urlcode.escape (funcname)\r\n\t\telse\r\n\t\t\turi = uri .. \"?rs=\" .. cgilua.urlcode.escape (funcname)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "uri = uri .. \"&rs=\" .. cgilua.urlcode.escape (funcname)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "uri = uri .. \"?rs=\" .. cgilua.urlcode.escape (funcname)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function handle_client_request ()\r\n\t\r\n\t\tif not cgilua.QUERY.rs then return end\r\n\t\t\r\n\t\t-- Bust cache in the head\r\n\t\tcgilua.header (\"Expires\", \"Mon, 26 Jul 1997 05:00:00 GMT\")    -- Date in the past\r\n\t\tcgilua.header (\"Last-Modified\", os.date (\"!%a, %d %b %Y %H:%M:%S GMT\"))\r\n\t\t-- always modified\r\n\t\tcgilua.header (\"Cache-Control\", \"no-cache, must-revalidate\")\t-- HTTP/1.1\r\n\t\tcgilua.header (\"Pragma\", \"no-cache\")\t\t\t\t\t\t\t-- HTTP/1.0\r\n\t\t\r\n\t\tlocal funcname = cgilua.QUERY.rs\r\n\t\t\r\n\t\tif not export_list[funcname] then\r\n\t\t\tcgilua.put (string.format (\"-:%s not callable\", funcname))\r\n\t\telse\r\n\t\t\tlocal func = export_list[funcname]\r\n\t\t\tlocal rsargs = cgilua.QUERY[\"rsargs[]\"]\r\n\t\t\tlocal result\r\n\t\t\t\r\n\t\t\tif not rsargs then\r\n\t\t\t\tresult = func()\r\n\t\t\telseif type (rsargs) == \"string\" then\r\n\t\t\t\tresult = func (rsargs)\r\n\t\t\telseif type (rsargs) == \"table\" then\r\n\t\t\t\tresult = func (unpack (rsargs))\r\n\t\t\telse\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tcgilua.put (\"+:\")\r\n\t\t\tcgilua.put (result)\r\n\t\tend\r\n\t\t\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if not cgilua.QUERY.rs then return end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "cgilua.header (\"Expires\", \"Mon, 26 Jul 1997 05:00:00 GMT\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "cgilua.header (\"Last-Modified\", os.date (\"!%a, %d %b %Y %H:%M:%S GMT\"))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "cgilua.header (\"Cache-Control\", \"no-cache, must-revalidate\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "cgilua.header (\"Pragma\", \"no-cache\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "local funcname = cgilua.QUERY.rs",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if not export_list[funcname] then\r\n\t\t\tcgilua.put (string.format (\"-:%s not callable\", funcname))\r\n\t\telse\r\n\t\t\tlocal func = export_list[funcname]\r\n\t\t\tlocal rsargs = cgilua.QUERY[\"rsargs[]\"]\r\n\t\t\tlocal result\r\n\t\t\t\r\n\t\t\tif not rsargs then\r\n\t\t\t\tresult = func()\r\n\t\t\telseif type (rsargs) == \"string\" then\r\n\t\t\t\tresult = func (rsargs)\r\n\t\t\telseif type (rsargs) == \"table\" then\r\n\t\t\t\tresult = func (unpack (rsargs))\r\n\t\t\telse\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tcgilua.put (\"+:\")\r\n\t\t\tcgilua.put (result)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "cgilua.put (string.format (\"-:%s not callable\", funcname))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local func = export_list[funcname]",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local rsargs = cgilua.QUERY[\"rsargs[]\"]",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local result",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if not rsargs then\r\n\t\t\t\tresult = func()\r\n\t\t\telseif type (rsargs) == \"string\" then\r\n\t\t\t\tresult = func (rsargs)\r\n\t\t\telseif type (rsargs) == \"table\" then\r\n\t\t\t\tresult = func (unpack (rsargs))\r\n\t\t\telse\r\n\t\t\t\treturn\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "result = func()",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "result = func (rsargs)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "result = func (unpack (rsargs))",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "cgilua.put (\"+:\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "cgilua.put (result)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function export (funcname, func)\r\n\t\texport_list[funcname] = func\r\n\tend",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function get_common_js ()\r\n\treturn [[\r\n\t\t// remote scripting library\r\n        // released under BSD license\r\n\t\t// (c) copyright 2005 modernmethod, inc\r\n\t\tvar sajax_debug_mode = false;\r\n\t\t\r\n\t\tfunction sajax_debug(text) {\r\n\t\t\tif (sajax_debug_mode)\r\n\t\t\t\talert(\"RSD: \" + text)\r\n\t\t}\r\n\t\tfunction sajax_init_object() {\r\n\t\t\tsajax_debug(\"rs_init_object() called..\")\r\n\t\t\t\r\n\t\t\tvar A;\r\n\t\t\ttry {\r\n\t\t\t\tA=new ActiveXObject(\"Msxml2.XMLHTTP\");\r\n\t\t\t} catch (e) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tA=new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n\t\t\t\t} catch (oc) {\r\n\t\t\t\t\tA=null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!A && typeof XMLHttpRequest != \"undefined\")\r\n\t\t\t\tA = new XMLHttpRequest();\r\n\t\t\tif (!A)\r\n\t\t\t\tsajax_debug(\"Could not create connection object.\");\r\n\t\t\treturn A;\r\n\t\t}\r\n\t\tfunction sajax_do_call(func_name, url, args) {\r\n\t\t\tvar i, x, n;\r\n\t\t\tfor (i = 0; i < args.length-1; i++) \r\n\t\t\t\turl = url + \"&rsargs[]=\" + escape(args[i]);\r\n\t\t\turl = url + \"&rsrnd=\" + new Date().getTime();\r\n\t\t\tx = sajax_init_object();\r\n\t\t\tx.open(\"GET\", url, true);\r\n\t\t\tx.onreadystatechange = function() {\r\n\t\t\t\tif (x.readyState != 4) \r\n\t\t\t\t\treturn;\r\n\t\t\t\tsajax_debug(\"received \" + x.responseText);\r\n\t\t\t\t\r\n\t\t\t\tvar status;\r\n\t\t\t\tvar data;\r\n\t\t\t\tstatus = x.responseText.charAt(0);\r\n\t\t\t\tdata = x.responseText.substring(2);\r\n\t\t\t\tif (status == \"-\") \r\n\t\t\t\t\talert(\"Error: \" + data);\r\n\t\t\t\telse  \r\n\t\t\t\t\targs[args.length-1](data);\r\n\t\t\t}\r\n\t\t\tx.send(null);\r\n\t\t\tsajax_debug(func_name + \" url = \" + url);\r\n\t\t\tsajax_debug(func_name + \" waiting..\");\r\n\t\t\tdelete x;\r\n\t\t}\r\n\t\tfunction sajax_call(func_name, script, callback, args) {\r\n\t\t\tvar url = script + \"?rs=\" + func_name;\r\n\t\t\targs.push(callback);\r\n\t\t\tsajax_do_call(func_name, url, args);\r\n\t\t}\r\n\t]]\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function show_common_js()\r\n\tcgilua.put (get_common_js ())\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "cgilua.put (get_common_js ())",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "local function get_one_stub (funcname)\r\n\tlocal uri = request_uri (funcname)\r\n\t\r\n\treturn (string.format ([[\r\n\t\t// wrapper for %s\r\n\t\t\r\n\t\tfunction x_%s() {\r\n\t\t\t// count args; build URL\r\n\t\t\tsajax_do_call (\"%s\", \"%s\", x_%s.arguments);\r\n\t\t}\r\n\t\t]], funcname, funcname, funcname, uri, funcname))\r\n--[[\r\n\t\t\tvar i, x, n;\r\n\t\t\tvar url = \"%s\";\r\n\t\t\tvar a = x_%s.arguments;\r\n\t\t\tfor (i = 0; i < a.length-1; i++) \r\n\t\t\t\turl = url + \"&rsargs[]=\" + escape(a[i]);\r\n\t\t\turl = url + \"&rsrnd=\" + new Date().getTime();\r\n\t\t\tx = rs_init_object();\r\n\t\t\tx.open(\"GET\", url, true);\r\n\t\t\tx.onreadystatechange = function() {\r\n\t\t\t\tif (x.readyState != 4) \r\n\t\t\t\t\treturn;\r\n\t\t\t\trs_debug(\"received \" + x.responseText);\r\n\t\t\t\t\r\n\t\t\t\tvar status;\r\n\t\t\t\tvar data;\r\n\t\t\t\tstatus = x.responseText.charAt(0);\r\n\t\t\t\tdata = x.responseText.substring(2);\r\n\t\t\t\tif (status == \"-\") \r\n\t\t\t\t\talert(\"Error: \" + callback_n);\r\n\t\t\t\telse  \r\n\t\t\t\t\ta[a.length-1](data);\r\n\t\t\t}\r\n\t\t\tx.send(null);\r\n\t\t\trs_debug(\"x_%s url = \" + url);\r\n\t\t\trs_debug(\"x_%s waiting..\");\r\n\t\t\tdelete x;\r\n\t\t}\r\n\t] ], funcname, funcname, uri, funcname, funcname, funcname))\t\t--]]\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local uri = request_uri (funcname)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function show_one_stub (funcname)\r\n\tcgilua.put (get_one_stub (funcname))\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "cgilua.put (get_one_stub (funcname))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function get_javascript ()\r\n\tlocal js = {}\r\n\t\r\n\tif not js_has_been_shown then\r\n\t\ttable.insert (js, get_common_js ())\r\n\t\tjs_has_been_shown = true\r\n\tend\r\n\t\r\n\tfor fn,_ in pairs (export_list) do\r\n\t\ttable.insert (js, get_one_stub (fn))\r\n\tend\r\n\treturn (table.concat (js))\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local js = {}",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if not js_has_been_shown then\r\n\t\ttable.insert (js, get_common_js ())\r\n\t\tjs_has_been_shown = true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "table.insert (js, get_common_js ())",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "js_has_been_shown = true",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "for fn,_ in pairs (export_list) do\r\n\t\ttable.insert (js, get_one_stub (fn))\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "table.insert (js, get_one_stub (fn))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function show_javascript ()\r\n\tcgilua.put (get_javascript ())\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "cgilua.put (get_javascript ())",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function init ()\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function ()\r\n\t\t\t\t\t\treturn func (unpack (handle_prefix (req, res)))\r\n\t\t\t\t\tend",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function (req, res)\r\n\t\t\t\tlocal isok, result = xpcall (function ()\r\n\t\t\t\t\t\treturn func (unpack (handle_prefix (req, res)))\r\n\t\t\t\t\tend, tostring)\r\n\t\t\t\tresult = result or \"\"\r\n\t\t\t\tif isok then\r\n\t\t\t\t\tres.content = \"+:\" .. result\r\n\t\t\t\telse\r\n\t\t\t\t\tres.content = \"-:\" .. result\r\n\t\t\t\tend\r\n\t\t\t\treturn res\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "",
    "type": "function container"
  }, {
    "id": 84,
    "text": "format",
    "type": "global function"
  }, {
    "id": 85,
    "text": "find",
    "type": "global function"
  }, {
    "id": 86,
    "text": "func",
    "type": "global function"
  }, {
    "id": 87,
    "text": "cgilua.urlcode.escape",
    "type": "global function"
  }, {
    "id": 88,
    "text": "module",
    "type": "global function"
  }, {
    "id": 89,
    "text": "mkabsoluteurl",
    "type": "global function"
  }, {
    "id": 90,
    "text": "date",
    "type": "global function"
  }, {
    "id": 91,
    "text": "servervariable",
    "type": "global function"
  }, {
    "id": 92,
    "text": "type",
    "type": "global function"
  }, {
    "id": 93,
    "text": "mkurlpath",
    "type": "global function"
  }, {
    "id": 94,
    "text": "xavante.httpd.addHandler",
    "type": "global function"
  }, {
    "id": 95,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 96,
    "text": "header",
    "type": "global function"
  }, {
    "id": 97,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 98,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 99,
    "text": "put",
    "type": "global function"
  }, {
    "id": 100,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 101,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 102,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 103,
    "text": "",
    "type": "variable container"
  }, {
    "id": 104,
    "text": "",
    "type": "require container"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "n/a"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "boolean"
  } ]
}