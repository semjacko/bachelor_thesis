{
  "_filename": "davhandler.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/xavante/src/webdav/davhandler.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 10,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 3
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 3
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 31,
    "label": "has",
    "to": 41
  }, {
    "from": 31,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 31,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 31,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 31,
    "label": "has",
    "to": 3
  }, {
    "from": 31,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 50,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 57
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 3
  }, {
    "from": 77,
    "label": "has",
    "to": 6
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 3
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 80
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 90,
    "label": "has",
    "to": 97
  }, {
    "from": 89,
    "label": "has",
    "to": 3
  }, {
    "from": 89,
    "label": "has",
    "to": 3
  }, {
    "from": 89,
    "label": "has",
    "to": 3
  }, {
    "from": 89,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 3
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 119,
    "label": "has",
    "to": 126
  }, {
    "from": 112,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 128,
    "label": "has",
    "to": 133
  }, {
    "from": 128,
    "label": "has",
    "to": 134
  }, {
    "from": 128,
    "label": "has",
    "to": 135
  }, {
    "from": 128,
    "label": "has",
    "to": 3
  }, {
    "from": 128,
    "label": "has",
    "to": 136
  }, {
    "from": 128,
    "label": "has",
    "to": 137
  }, {
    "from": 128,
    "label": "has",
    "to": 138
  }, {
    "from": 128,
    "label": "has",
    "to": 139
  }, {
    "from": 128,
    "label": "has",
    "to": 140
  }, {
    "from": 128,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 146,
    "label": "has",
    "to": 151
  }, {
    "from": 145,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 150
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 145,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 150
  }, {
    "from": 155,
    "label": "has",
    "to": 153
  }, {
    "from": 145,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 150
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 151
  }, {
    "from": 145,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 150
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 151
  }, {
    "from": 141,
    "label": "has",
    "to": 161
  }, {
    "from": 141,
    "label": "has",
    "to": 162
  }, {
    "from": 141,
    "label": "has",
    "to": 163
  }, {
    "from": 141,
    "label": "has",
    "to": 164
  }, {
    "from": 141,
    "label": "has",
    "to": 165
  }, {
    "from": 128,
    "label": "has",
    "to": 166
  }, {
    "from": 128,
    "label": "has",
    "to": 167
  }, {
    "from": 128,
    "label": "has",
    "to": 3
  }, {
    "from": 128,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 129
  }, {
    "from": 169,
    "label": "has",
    "to": 130
  }, {
    "from": 169,
    "label": "has",
    "to": 132
  }, {
    "from": 169,
    "label": "has",
    "to": 133
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 3
  }, {
    "from": 169,
    "label": "has",
    "to": 136
  }, {
    "from": 169,
    "label": "has",
    "to": 137
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 169,
    "label": "has",
    "to": 142
  }, {
    "from": 169,
    "label": "has",
    "to": 173
  }, {
    "from": 169,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 177,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 169,
    "label": "has",
    "to": 185
  }, {
    "from": 169,
    "label": "has",
    "to": 186
  }, {
    "from": 169,
    "label": "has",
    "to": 163
  }, {
    "from": 169,
    "label": "has",
    "to": 164
  }, {
    "from": 169,
    "label": "has",
    "to": 165
  }, {
    "from": 169,
    "label": "has",
    "to": 166
  }, {
    "from": 169,
    "label": "has",
    "to": 167
  }, {
    "from": 169,
    "label": "has",
    "to": 3
  }, {
    "from": 169,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 3
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 171
  }, {
    "from": 192,
    "label": "has",
    "to": 3
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 192,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 192,
    "label": "has",
    "to": 3
  }, {
    "from": 192,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 132
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 200,
    "label": "has",
    "to": 3
  }, {
    "from": 200,
    "label": "has",
    "to": 203
  }, {
    "from": 200,
    "label": "has",
    "to": 204
  }, {
    "from": 200,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 205,
    "label": "has",
    "to": 210
  }, {
    "from": 200,
    "label": "has",
    "to": 196
  }, {
    "from": 200,
    "label": "has",
    "to": 3
  }, {
    "from": 200,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 132
  }, {
    "from": 212,
    "label": "has",
    "to": 170
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 190
  }, {
    "from": 212,
    "label": "has",
    "to": 3
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 212,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 212,
    "label": "has",
    "to": 190
  }, {
    "from": 212,
    "label": "has",
    "to": 3
  }, {
    "from": 212,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 132
  }, {
    "from": 220,
    "label": "has",
    "to": 170
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 3
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 129
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 222,
    "label": "has",
    "to": 226
  }, {
    "from": 220,
    "label": "has",
    "to": 3
  }, {
    "from": 220,
    "label": "has",
    "to": 227
  }, {
    "from": 220,
    "label": "has",
    "to": 190
  }, {
    "from": 220,
    "label": "has",
    "to": 3
  }, {
    "from": 220,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 133
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 229,
    "label": "has",
    "to": 3
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 3
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 3
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 3
  }, {
    "from": 239,
    "label": "has",
    "to": 57
  }, {
    "from": 240,
    "label": "has",
    "to": 3
  }, {
    "from": 241,
    "label": "has",
    "to": 57
  }, {
    "from": 242,
    "label": "has",
    "to": 3
  }, {
    "from": 243,
    "label": "has",
    "to": 235
  }, {
    "from": 243,
    "label": "has",
    "to": 236
  }, {
    "from": 243,
    "label": "has",
    "to": 3
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 5,
    "label": "calls",
    "to": 246
  }, {
    "from": 31,
    "label": "calls",
    "to": 246
  }, {
    "from": 89,
    "label": "calls",
    "to": 246
  }, {
    "from": 89,
    "label": "calls",
    "to": 246
  }, {
    "from": 99,
    "label": "calls",
    "to": 246
  }, {
    "from": 104,
    "label": "calls",
    "to": 246
  }, {
    "from": 104,
    "label": "calls",
    "to": 246
  }, {
    "from": 104,
    "label": "calls",
    "to": 246
  }, {
    "from": 112,
    "label": "calls",
    "to": 246
  }, {
    "from": 128,
    "label": "calls",
    "to": 246
  }, {
    "from": 128,
    "label": "calls",
    "to": 246
  }, {
    "from": 169,
    "label": "calls",
    "to": 246
  }, {
    "from": 169,
    "label": "calls",
    "to": 246
  }, {
    "from": 169,
    "label": "calls",
    "to": 246
  }, {
    "from": 220,
    "label": "calls",
    "to": 246
  }, {
    "from": 128,
    "label": "calls",
    "to": 247
  }, {
    "from": 169,
    "label": "calls",
    "to": 247
  }, {
    "from": 200,
    "label": "calls",
    "to": 247
  }, {
    "from": 128,
    "label": "calls",
    "to": 248
  }, {
    "from": 169,
    "label": "calls",
    "to": 248
  }, {
    "from": 192,
    "label": "calls",
    "to": 248
  }, {
    "from": 31,
    "label": "calls",
    "to": 31
  }, {
    "from": 128,
    "label": "calls",
    "to": 31
  }, {
    "from": 169,
    "label": "calls",
    "to": 31
  }, {
    "from": 229,
    "label": "calls",
    "to": 31
  }, {
    "from": 31,
    "label": "calls",
    "to": 249
  }, {
    "from": 31,
    "label": "calls",
    "to": 249
  }, {
    "from": 89,
    "label": "calls",
    "to": 249
  }, {
    "from": 89,
    "label": "calls",
    "to": 249
  }, {
    "from": 5,
    "label": "calls",
    "to": 261
  }, {
    "from": 10,
    "label": "calls",
    "to": 261
  }, {
    "from": 31,
    "label": "calls",
    "to": 261
  }, {
    "from": 31,
    "label": "calls",
    "to": 261
  }, {
    "from": 50,
    "label": "calls",
    "to": 261
  }, {
    "from": 61,
    "label": "calls",
    "to": 261
  }, {
    "from": 69,
    "label": "calls",
    "to": 261
  }, {
    "from": 77,
    "label": "calls",
    "to": 261
  }, {
    "from": 112,
    "label": "calls",
    "to": 261
  }, {
    "from": 112,
    "label": "calls",
    "to": 261
  }, {
    "from": 128,
    "label": "calls",
    "to": 112
  }, {
    "from": 169,
    "label": "calls",
    "to": 112
  }, {
    "from": 229,
    "label": "calls",
    "to": 250
  }, {
    "from": 229,
    "label": "calls",
    "to": 250
  }, {
    "from": 169,
    "label": "calls",
    "to": 77
  }, {
    "from": 245,
    "label": "calls",
    "to": 251
  }, {
    "from": 50,
    "label": "calls",
    "to": 59
  }, {
    "from": 61,
    "label": "calls",
    "to": 59
  }, {
    "from": 61,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 256
  }, {
    "from": 2,
    "label": "calls",
    "to": 256
  }, {
    "from": 31,
    "label": "calls",
    "to": 256
  }, {
    "from": 10,
    "label": "calls",
    "to": 5
  }, {
    "from": 128,
    "label": "calls",
    "to": 69
  }, {
    "from": 128,
    "label": "calls",
    "to": 69
  }, {
    "from": 169,
    "label": "calls",
    "to": 69
  }, {
    "from": 169,
    "label": "calls",
    "to": 69
  }, {
    "from": 50,
    "label": "calls",
    "to": 253
  }, {
    "from": 61,
    "label": "calls",
    "to": 253
  }, {
    "from": 69,
    "label": "calls",
    "to": 253
  }, {
    "from": 10,
    "label": "calls",
    "to": 10
  }, {
    "from": 77,
    "label": "calls",
    "to": 10
  }, {
    "from": 229,
    "label": "calls",
    "to": 10
  }, {
    "from": 10,
    "label": "calls",
    "to": 84
  }, {
    "from": 10,
    "label": "calls",
    "to": 84
  }, {
    "from": 10,
    "label": "calls",
    "to": 84
  }, {
    "from": 10,
    "label": "calls",
    "to": 84
  }, {
    "from": 128,
    "label": "calls",
    "to": 104
  }, {
    "from": 128,
    "label": "calls",
    "to": 104
  }, {
    "from": 128,
    "label": "calls",
    "to": 104
  }, {
    "from": 128,
    "label": "calls",
    "to": 104
  }, {
    "from": 128,
    "label": "calls",
    "to": 104
  }, {
    "from": 5,
    "label": "calls",
    "to": 263
  }, {
    "from": 77,
    "label": "calls",
    "to": 263
  }, {
    "from": 99,
    "label": "calls",
    "to": 263
  }, {
    "from": 112,
    "label": "calls",
    "to": 259
  }, {
    "from": 128,
    "label": "calls",
    "to": 99
  }, {
    "from": 169,
    "label": "calls",
    "to": 99
  }, {
    "from": 5,
    "label": "calls",
    "to": 262
  }, {
    "from": 77,
    "label": "calls",
    "to": 262
  }, {
    "from": 99,
    "label": "calls",
    "to": 262
  }, {
    "from": 104,
    "label": "calls",
    "to": 262
  }, {
    "from": 104,
    "label": "calls",
    "to": 262
  }, {
    "from": 104,
    "label": "calls",
    "to": 262
  }, {
    "from": 112,
    "label": "calls",
    "to": 262
  }, {
    "from": 112,
    "label": "calls",
    "to": 262
  }, {
    "from": 112,
    "label": "calls",
    "to": 262
  }, {
    "from": 112,
    "label": "calls",
    "to": 262
  }, {
    "from": 112,
    "label": "calls",
    "to": 262
  }, {
    "from": 112,
    "label": "calls",
    "to": 262
  }, {
    "from": 112,
    "label": "calls",
    "to": 262
  }, {
    "from": 128,
    "label": "calls",
    "to": 262
  }, {
    "from": 128,
    "label": "calls",
    "to": 262
  }, {
    "from": 128,
    "label": "calls",
    "to": 262
  }, {
    "from": 128,
    "label": "calls",
    "to": 262
  }, {
    "from": 128,
    "label": "calls",
    "to": 262
  }, {
    "from": 128,
    "label": "calls",
    "to": 262
  }, {
    "from": 169,
    "label": "calls",
    "to": 262
  }, {
    "from": 169,
    "label": "calls",
    "to": 262
  }, {
    "from": 169,
    "label": "calls",
    "to": 262
  }, {
    "from": 169,
    "label": "calls",
    "to": 262
  }, {
    "from": 169,
    "label": "calls",
    "to": 262
  }, {
    "from": 169,
    "label": "calls",
    "to": 262
  }, {
    "from": 169,
    "label": "calls",
    "to": 262
  }, {
    "from": 128,
    "label": "calls",
    "to": 89
  }, {
    "from": 128,
    "label": "calls",
    "to": 89
  }, {
    "from": 128,
    "label": "calls",
    "to": 89
  }, {
    "from": 128,
    "label": "calls",
    "to": 89
  }, {
    "from": 128,
    "label": "calls",
    "to": 89
  }, {
    "from": 169,
    "label": "calls",
    "to": 89
  }, {
    "from": 128,
    "label": "calls",
    "to": 23
  }, {
    "from": 169,
    "label": "calls",
    "to": 23
  }, {
    "from": 229,
    "label": "calls",
    "to": 23
  }, {
    "from": 234,
    "label": "calls",
    "to": 252
  }, {
    "from": 89,
    "label": "calls",
    "to": 257
  }, {
    "from": 99,
    "label": "calls",
    "to": 257
  }, {
    "from": 112,
    "label": "calls",
    "to": 257
  }, {
    "from": 23,
    "label": "calls",
    "to": 258
  }, {
    "from": 50,
    "label": "calls",
    "to": 260
  }, {
    "from": 61,
    "label": "calls",
    "to": 260
  }, {
    "from": 69,
    "label": "calls",
    "to": 260
  }, {
    "from": 169,
    "label": "calls",
    "to": 50
  }, {
    "from": 10,
    "label": "calls",
    "to": 254
  }, {
    "from": 31,
    "label": "calls",
    "to": 254
  }, {
    "from": 50,
    "label": "calls",
    "to": 254
  }, {
    "from": 61,
    "label": "calls",
    "to": 254
  }, {
    "from": 69,
    "label": "calls",
    "to": 254
  }, {
    "from": 245,
    "label": "calls",
    "to": 264
  }, {
    "from": 245,
    "label": "calls",
    "to": 264
  }, {
    "from": 200,
    "label": "calls",
    "to": 255
  }, {
    "from": 104,
    "label": "calls",
    "to": 86
  }, {
    "from": 104,
    "label": "calls",
    "to": 86
  }, {
    "from": 169,
    "label": "calls",
    "to": 86
  }, {
    "from": 1,
    "label": "contains",
    "to": 245
  }, {
    "from": 245,
    "label": "declares",
    "to": 2
  }, {
    "from": 245,
    "label": "declares",
    "to": 5
  }, {
    "from": 245,
    "label": "declares",
    "to": 10
  }, {
    "from": 245,
    "label": "declares",
    "to": 23
  }, {
    "from": 245,
    "label": "declares",
    "to": 30
  }, {
    "from": 245,
    "label": "declares",
    "to": 31
  }, {
    "from": 245,
    "label": "declares",
    "to": 50
  }, {
    "from": 245,
    "label": "declares",
    "to": 59
  }, {
    "from": 245,
    "label": "declares",
    "to": 61
  }, {
    "from": 245,
    "label": "declares",
    "to": 67
  }, {
    "from": 245,
    "label": "declares",
    "to": 69
  }, {
    "from": 245,
    "label": "declares",
    "to": 75
  }, {
    "from": 245,
    "label": "declares",
    "to": 77
  }, {
    "from": 245,
    "label": "declares",
    "to": 84
  }, {
    "from": 245,
    "label": "declares",
    "to": 86
  }, {
    "from": 245,
    "label": "declares",
    "to": 89
  }, {
    "from": 245,
    "label": "declares",
    "to": 99
  }, {
    "from": 245,
    "label": "declares",
    "to": 104
  }, {
    "from": 245,
    "label": "declares",
    "to": 112
  }, {
    "from": 245,
    "label": "declares",
    "to": 128
  }, {
    "from": 245,
    "label": "declares",
    "to": 169
  }, {
    "from": 245,
    "label": "declares",
    "to": 188
  }, {
    "from": 245,
    "label": "declares",
    "to": 192
  }, {
    "from": 245,
    "label": "declares",
    "to": 200
  }, {
    "from": 245,
    "label": "declares",
    "to": 212
  }, {
    "from": 245,
    "label": "declares",
    "to": 220
  }, {
    "from": 245,
    "label": "declares",
    "to": 229
  }, {
    "from": 245,
    "label": "declares",
    "to": 234
  }, {
    "from": 245,
    "label": "declares",
    "to": 238
  }, {
    "from": 245,
    "label": "declares",
    "to": 239
  }, {
    "from": 245,
    "label": "declares",
    "to": 240
  }, {
    "from": 245,
    "label": "declares",
    "to": 241
  }, {
    "from": 245,
    "label": "declares",
    "to": 242
  }, {
    "from": 245,
    "label": "declares",
    "to": 243
  }, {
    "from": 1,
    "label": "contains",
    "to": 266
  }, {
    "from": 1,
    "label": "contains",
    "to": 267
  }, {
    "from": 266,
    "label": "initializes",
    "to": 268
  }, {
    "from": 268,
    "label": "assigns",
    "to": 269
  }, {
    "from": 266,
    "label": "initializes",
    "to": 270
  }, {
    "from": 270,
    "label": "assigns",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 272,
    "label": "assigns",
    "to": 273
  }, {
    "from": 271,
    "label": "assigns",
    "to": 274
  }, {
    "from": 274,
    "label": "assigns",
    "to": 275
  }, {
    "from": 271,
    "label": "assigns",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 271,
    "label": "assigns",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 271,
    "label": "assigns",
    "to": 280
  }, {
    "from": 280,
    "label": "assigns",
    "to": 281
  }, {
    "from": 271,
    "label": "assigns",
    "to": 282
  }, {
    "from": 282,
    "label": "assigns",
    "to": 283
  }, {
    "from": 271,
    "label": "assigns",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 271,
    "label": "assigns",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 267,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "requires",
    "to": 288
  }, {
    "from": 267,
    "label": "initializes",
    "to": 265
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "davhandler",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function trim (s)\t\r\n\treturn (string.gsub (string.gsub (s, \"^%s*\", \"\"), \"%s*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function attrstostr (a)\r\n\tlocal out = {}\r\n\tfor i,attr in ipairs (a) do\r\n\t\ttable.insert (out, string.format ('%s = \"%s\"', attr,  a[attr]))\r\n\tend\r\n\treturn table.concat (out, \" \")\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for i,attr in ipairs (a) do\r\n\t\ttable.insert (out, string.format ('%s = \"%s\"', attr,  a[attr]))\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "table.insert (out, string.format ('%s = \"%s\"', attr,  a[attr]))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function lomtoxml (x, of)\r\n\tif type (x) == \"string\" then\r\n\t\treturn of (x)\r\n\tend\r\n\tof = of or print\r\n\tlocal attrs = \"\"\r\n\t-- does it have any attributes?\r\n\tif x.attr [1] then\r\n\t\tattrs = \" \" .. attrstostr (x.attr)\r\n\tend\r\n\t\r\n\t-- is there any content?\r\n\tif x[1] then\r\n\t\tof (\"<\" .. x.tag .. attrs .. \">\")\r\n\t\tfor i in ipairs (x) do\r\n\t\t\tlomtoxml (x[i], of)\r\n\t\tend\r\n\t\tof (\"</\".. x.tag .. \">\")\r\n\telse\r\n\t\tof (\"<\" .. x.tag .. attrs .. \"/>\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if type (x) == \"string\" then\r\n\t\treturn of (x)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "of = of or print",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "local attrs = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if x.attr [1] then\r\n\t\tattrs = \" \" .. attrstostr (x.attr)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "attrs = \" \" .. attrstostr (x.attr)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if x[1] then\r\n\t\tof (\"<\" .. x.tag .. attrs .. \">\")\r\n\t\tfor i in ipairs (x) do\r\n\t\t\tlomtoxml (x[i], of)\r\n\t\tend\r\n\t\tof (\"</\".. x.tag .. \">\")\r\n\telse\r\n\t\tof (\"<\" .. x.tag .. attrs .. \"/>\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "of (\"<\" .. x.tag .. attrs .. \">\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "for i in ipairs (x) do\r\n\t\t\tlomtoxml (x[i], of)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "lomtoxml (x[i], of)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "of (\"</\".. x.tag .. \">\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "of (\"<\" .. x.tag .. attrs .. \"/>\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function req_xml (req)\r\n\tlocal sz = req.headers [\"content-length\"]\r\n\tlocal indata\r\n\tif sz then\r\n\t\tindata = req.socket:receive (sz)\r\n\telse\r\n\t\tindata = function () return req.socket:receive () end\r\n\tend\r\n\treturn lxp.lom.parse (indata)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local sz = req.headers [\"content-length\"]",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local indata",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if sz then\r\n\t\tindata = req.socket:receive (sz)\r\n\telse\r\n\t\tindata = function () return req.socket:receive () end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "indata = req.socket:receive (sz)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "indata = function () return req.socket:receive () end",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function () return req.socket:receive () end",
    "type": "function"
  }, {
    "id": 31,
    "text": "local function xml_ns (x, dict)\r\n\tif not x then return end\r\n\tif type (x) == \"string\" then return x end\r\n\t\r\n\tdict = dict or {}\r\n\t\r\n\t-- adds any new namespace to the dictionary\r\n\tfor i,attr_name in ipairs (x.attr) do\r\n\t\t-- default namespace\r\n\t\tif attr_name == \"xmlns\" then\r\n\t\t\tdict [\"\"] = x.attr [attr_name]\r\n\t\tend\r\n\t\t-- named namespaces\r\n\t\tlocal _,_, ns_var = string.find (attr_name, \"xmlns:(.*)$\")\r\n\t\tif ns_var then\r\n\t\t\tdict [ns_var] = x.attr [attr_name]\r\n\t\tend\r\n\tend\r\n\t\r\n\t-- modifies this node's tag\r\n\tlocal _,_, ns = string.find (x.tag, \"^(.*):\")\r\n\tif ns and dict [ns] then\r\n\t\tlocal pat = string.format (\"^%s:\", ns)\r\n\t\tx.tag = string.gsub (x.tag, pat, dict[ns])\r\n\tend\r\n\tif not ns and dict [\"\"] then\r\n\t\tx.tag = dict [\"\"] .. x.tag\r\n\tend\r\n\t\r\n\t-- recurses to child nodes\r\n\tfor _, sub in ipairs (x) do\r\n\t\txml_ns (sub, dict)\r\n\tend\r\n\r\n\treturn x\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "if not x then return end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "if type (x) == \"string\" then return x end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "dict = dict or {}",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "for i,attr_name in ipairs (x.attr) do\r\n\t\t-- default namespace\r\n\t\tif attr_name == \"xmlns\" then\r\n\t\t\tdict [\"\"] = x.attr [attr_name]\r\n\t\tend\r\n\t\t-- named namespaces\r\n\t\tlocal _,_, ns_var = string.find (attr_name, \"xmlns:(.*)$\")\r\n\t\tif ns_var then\r\n\t\t\tdict [ns_var] = x.attr [attr_name]\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "if attr_name == \"xmlns\" then\r\n\t\t\tdict [\"\"] = x.attr [attr_name]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "dict [\"\"] = x.attr [attr_name]",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "local _,_, ns_var = string.find (attr_name, \"xmlns:(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if ns_var then\r\n\t\t\tdict [ns_var] = x.attr [attr_name]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "dict [ns_var] = x.attr [attr_name]",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "local _,_, ns = string.find (x.tag, \"^(.*):\")",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if ns and dict [ns] then\r\n\t\tlocal pat = string.format (\"^%s:\", ns)\r\n\t\tx.tag = string.gsub (x.tag, pat, dict[ns])\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "local pat = string.format (\"^%s:\", ns)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "x.tag = string.gsub (x.tag, pat, dict[ns])",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if not ns and dict [\"\"] then\r\n\t\tx.tag = dict [\"\"] .. x.tag\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "x.tag = dict [\"\"] .. x.tag",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "for _, sub in ipairs (x) do\r\n\t\txml_ns (sub, dict)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "xml_ns (sub, dict)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function lomChildsByTagName (x, tagname)\r\n\tif not x then\r\n\t\treturn function () return nil end\r\n\tend\r\n\r\n\tlocal function gen (x)\r\n\t\tfor _,elem in ipairs (x) do\r\n\t\t\tif type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\treturn coroutine.wrap (function () gen (x) end)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "if not x then\r\n\t\treturn function () return nil end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "local function gen (x)\r\n\t\tfor _,elem in ipairs (x) do\r\n\t\t\tif type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 53,
    "text": "for _,elem in ipairs (x) do\r\n\t\t\tif type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "if type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "coroutine.yield (elem)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "gen (x)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function gen (x)\r\n\t\tfor _,elem in ipairs (x) do\r\n\t\t\tif type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function lomElementsByTagName (x, tagname)\r\n\tif not x then\r\n\t\treturn function () return nil end\r\n\tend\r\n\r\n\tlocal function gen (x)\r\n\t\tfor _,elem in ipairs (x) do\r\n\t\t\tif type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\t\tgen (elem)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\treturn coroutine.wrap (function () gen (x) end)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local function gen (x)\r\n\t\tfor _,elem in ipairs (x) do\r\n\t\t\tif type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\t\tgen (elem)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 63,
    "text": "for _,elem in ipairs (x) do\r\n\t\t\tif type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\t\tgen (elem)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 64,
    "text": "if type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\t\tgen (elem)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "gen (elem)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "local function gen (x)\r\n\t\tfor _,elem in ipairs (x) do\r\n\t\t\tif type(elem) == \"table\" then\r\n\t\t\t\tif elem.tag and elem.tag == tagname then\r\n\t\t\t\t\tcoroutine.yield (elem)\r\n\t\t\t\tend\r\n\t\t\t\tgen (elem)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "local function lomChilds (x)\r\n\tif not x then\r\n\t\treturn function () return nil end\r\n\tend\r\n\r\n\tlocal function gen ()\r\n\t\tfor _, elem in ipairs (x) do\r\n\t\t\tif type (elem) == \"table\" and elem.tag then\r\n\t\t\t\tcoroutine.yield (elem, elem.tag)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn coroutine.wrap (gen)\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local function gen ()\r\n\t\tfor _, elem in ipairs (x) do\r\n\t\t\tif type (elem) == \"table\" and elem.tag then\r\n\t\t\t\tcoroutine.yield (elem, elem.tag)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 71,
    "text": "for _, elem in ipairs (x) do\r\n\t\t\tif type (elem) == \"table\" and elem.tag then\r\n\t\t\t\tcoroutine.yield (elem, elem.tag)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "if type (elem) == \"table\" and elem.tag then\r\n\t\t\t\tcoroutine.yield (elem, elem.tag)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "coroutine.yield (elem, elem.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "local function gen ()\r\n\t\tfor _, elem in ipairs (x) do\r\n\t\t\tif type (elem) == \"table\" and elem.tag then\r\n\t\t\t\tcoroutine.yield (elem, elem.tag)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "local function lomContent (x)\r\n\tif not x then\r\n\t\treturn \"\"\r\n\tend\r\n\r\n\tlocal out = {}\r\n\tlocal function of (s)\r\n\t\ttable.insert (out, s)\r\n\tend\r\n\tfor _, child in ipairs (x) do\r\n\t\tlomtoxml (child, of)\r\n\tend\r\n\treturn table.concat (out)\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "if not x then\r\n\t\treturn \"\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "local function of (s)\r\n\t\ttable.insert (out, s)\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 80,
    "text": "table.insert (out, s)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "for _, child in ipairs (x) do\r\n\t\tlomtoxml (child, of)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "lomtoxml (child, of)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function of (s)\r\n\t\ttable.insert (out, s)\r\n\tend",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "local function maketabletable (t,k)\r\n\tt[k] = t[k] or {}\r\n\treturn t[k]\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "t[k] = t[k] or {}",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function reducename (ns, name)\r\n\tif string.find (name, \"[:/?#]\") then\r\n\t\tlocal _,_,pfx,sfx = string.find (name, \"(.*%W)(%w+)\")\r\n\t\tlocal n = 0\r\n\t\tfor k,v in pairs (ns) do\r\n\t\t\tn = n+1\r\n\t\t\tif v == pfx then\r\n\t\t\t\treturn string.format (\"%s:%s\", k, sfx)\r\n\t\t\tend\r\n\t\tend\r\n\t\tlocal newns = \"lm\"..n\r\n\t\tns [newns] = pfx\r\n\t\treturn string.format (\"%s:%s\", newns, sfx)\r\n\telse\r\n\t\treturn name\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "if string.find (name, \"[:/?#]\") then\r\n\t\tlocal _,_,pfx,sfx = string.find (name, \"(.*%W)(%w+)\")\r\n\t\tlocal n = 0\r\n\t\tfor k,v in pairs (ns) do\r\n\t\t\tn = n+1\r\n\t\t\tif v == pfx then\r\n\t\t\t\treturn string.format (\"%s:%s\", k, sfx)\r\n\t\t\tend\r\n\t\tend\r\n\t\tlocal newns = \"lm\"..n\r\n\t\tns [newns] = pfx\r\n\t\treturn string.format (\"%s:%s\", newns, sfx)\r\n\telse\r\n\t\treturn name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "local _,_,pfx,sfx = string.find (name, \"(.*%W)(%w+)\")",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "for k,v in pairs (ns) do\r\n\t\t\tn = n+1\r\n\t\t\tif v == pfx then\r\n\t\t\t\treturn string.format (\"%s:%s\", k, sfx)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "n = n+1",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if v == pfx then\r\n\t\t\t\treturn string.format (\"%s:%s\", k, sfx)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "local newns = \"lm\"..n",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "ns [newns] = pfx",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "local function nsattr (ns)\r\n\tlocal attr = {}\r\n\tfor k,v in pairs (ns) do\r\n\t\ttable.insert (attr, string.format ([[xmlns:%s=\"%s\"]], k, v))\r\n\tend\r\n\treturn table.concat (attr, \" \")\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local attr = {}",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "for k,v in pairs (ns) do\r\n\t\ttable.insert (attr, string.format ([[xmlns:%s=\"%s\"]], k, v))\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 102,
    "text": "table.insert (attr, string.format ([[xmlns:%s=\"%s\"]], k, v))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function addProp (outtable, propname, propval)\r\n\tif propval then\r\n\t\tlocal propentry = maketabletable (outtable, \"HTTP/1.1 200 OK\")\r\n\t\tif propval == \"\" then\r\n\t\t\ttable.insert (propentry, string.format ([[<%s/>]], propname))\r\n\t\telse\r\n\t\t\ttable.insert (propentry, \r\n\t\t\t\tstring.format ([[<%s>%s</%s>]], \r\n\t\t\t\t\tpropname, propval, propname))\r\n\t\tend\r\n\telse\r\n\t\tlocal propentry = maketabletable (outtable, \"HTTP/1.1 404 NotFound\")\r\n\t\ttable.insert (propentry, string.format ([[<%s/>]], propname))\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "if propval then\r\n\t\tlocal propentry = maketabletable (outtable, \"HTTP/1.1 200 OK\")\r\n\t\tif propval == \"\" then\r\n\t\t\ttable.insert (propentry, string.format ([[<%s/>]], propname))\r\n\t\telse\r\n\t\t\ttable.insert (propentry, \r\n\t\t\t\tstring.format ([[<%s>%s</%s>]], \r\n\t\t\t\t\tpropname, propval, propname))\r\n\t\tend\r\n\telse\r\n\t\tlocal propentry = maketabletable (outtable, \"HTTP/1.1 404 NotFound\")\r\n\t\ttable.insert (propentry, string.format ([[<%s/>]], propname))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "local propentry = maketabletable (outtable, \"HTTP/1.1 200 OK\")",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "if propval == \"\" then\r\n\t\t\ttable.insert (propentry, string.format ([[<%s/>]], propname))\r\n\t\telse\r\n\t\t\ttable.insert (propentry, \r\n\t\t\t\tstring.format ([[<%s>%s</%s>]], \r\n\t\t\t\t\tpropname, propval, propname))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "table.insert (propentry, string.format ([[<%s/>]], propname))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "table.insert (propentry, \r\n\t\t\t\tstring.format ([[<%s>%s</%s>]], \r\n\t\t\t\t\tpropname, propval, propname))",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "local propentry = maketabletable (outtable, \"HTTP/1.1 404 NotFound\")",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local function addPropstat (outtable, propstat)\r\n\tlocal codes = {}\r\n\tfor stat in pairs (propstat) do\r\n\t\ttable.insert (codes, stat)\r\n\tend\r\n\ttable.sort (codes)\r\n\tfor _, stat in ipairs (codes) do\r\n\t\tprops = propstat [stat]\r\n\t\tif props then\r\n\t\t\ttable.insert (outtable, [[<D:propstat>]])\r\n\t\t\ttable.insert (outtable, [[<D:prop>]])\r\n\t\t\tfor _,prop in ipairs (props) do\r\n\t\t\t\ttable.insert (outtable, prop)\r\n\t\t\tend\r\n\t\t\ttable.insert (outtable, [[</D:prop>]])\r\n\t\t\ttable.insert (outtable, string.format ([[<D:status>%s</D:status>]], stat))\r\n\t\t\ttable.insert (outtable, [[</D:propstat>]])\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local codes = {}",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "for stat in pairs (propstat) do\r\n\t\ttable.insert (codes, stat)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 115,
    "text": "table.insert (codes, stat)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "table.sort (codes)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "for _, stat in ipairs (codes) do\r\n\t\tprops = propstat [stat]\r\n\t\tif props then\r\n\t\t\ttable.insert (outtable, [[<D:propstat>]])\r\n\t\t\ttable.insert (outtable, [[<D:prop>]])\r\n\t\t\tfor _,prop in ipairs (props) do\r\n\t\t\t\ttable.insert (outtable, prop)\r\n\t\t\tend\r\n\t\t\ttable.insert (outtable, [[</D:prop>]])\r\n\t\t\ttable.insert (outtable, string.format ([[<D:status>%s</D:status>]], stat))\r\n\t\t\ttable.insert (outtable, [[</D:propstat>]])\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "props = propstat [stat]",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if props then\r\n\t\t\ttable.insert (outtable, [[<D:propstat>]])\r\n\t\t\ttable.insert (outtable, [[<D:prop>]])\r\n\t\t\tfor _,prop in ipairs (props) do\r\n\t\t\t\ttable.insert (outtable, prop)\r\n\t\t\tend\r\n\t\t\ttable.insert (outtable, [[</D:prop>]])\r\n\t\t\ttable.insert (outtable, string.format ([[<D:status>%s</D:status>]], stat))\r\n\t\t\ttable.insert (outtable, [[</D:propstat>]])\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "table.insert (outtable, [[<D:propstat>]])",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "table.insert (outtable, [[<D:prop>]])",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "for _,prop in ipairs (props) do\r\n\t\t\t\ttable.insert (outtable, prop)\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 123,
    "text": "table.insert (outtable, prop)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "table.insert (outtable, [[</D:prop>]])",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "table.insert (outtable, string.format ([[<D:status>%s</D:status>]], stat))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "table.insert (outtable, [[</D:propstat>]])",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "local function dav_propfind (req, res, repos_b, props_b)\r\n\tres.statusline = \"HTTP/1.1 207 Multi-Status\\r\\n\"\r\n\tres.headers [\"Content-Type\"] = 'text/xml; charset=\"utf-8\"'\r\n\r\n\tlocal depth = req.headers.depth\r\n\tlocal path = req.relpath\r\n\tlocal data = xml_ns (req_xml (req))\r\n\r\n--\tprint (\"path:\", path, req.relpath)\r\n--\tprint (\"depth:\", depth)\r\n\r\n--\tprint (\"como xml:\") lomtoxml (data) print ()\r\n\r\n\r\n\tlocal resource_q = repos_b:getResource (req.match, path)\r\n\tif not resource_q then\r\n\t\treturn httpd.err_404 (req, res)\r\n\tend\r\n\r\n\tlocal content = {}\r\n\r\n\ttable.insert (content, [[<?xml version=\"1.0\" encoding=\"utf-8\" ?>]])\r\n\ttable.insert (content, [[<D:multistatus xmlns:D=\"DAV:\">]])\r\n\tlocal namespace = {}\r\n\r\n\tassert (data.tag == \"DAV:propfind\")\r\n\tfor resource in resource_q:getItems (depth) do\r\n\t--\tprint (\"resource:\", resource.path)\r\n\t\tlocal propstat = {}\r\n\t\tnamespace.D=\"DAV:\"\r\n\r\n\t\tfor findtype, findtype_tn in lomChilds (data) do\r\n\r\n\t\t\tif findtype_tn == \"DAV:prop\" then\r\n\t\t\t\tfor _, propname in lomChilds (findtype) do\r\n\t\t\t\t\tlocal propval = resource:getProp (propname)\r\n\t\t\t\t\tif not propval and props_b then\r\n\t\t\t\t\t\tpropval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend\r\n\r\n\t\t\telseif findtype_tn == \"DAV:propname\" then\r\n\t\t\t\tfor propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\tend\r\n\t\t\t\tif props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\telseif findtype_tn == \"DAV:allprop\" then\r\n\t\t\t\tfor propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\tlocal propval =  resource:getProp (propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend\r\n\t\t\t\tif props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\tlocal propval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\r\n\t\tnamespace.D = nil\r\n\r\n\t\ttable.insert (content, string.format ([[<D:response %s>]], nsattr (namespace)))\r\n\t\ttable.insert (content, string.format ([[<D:href>%s</D:href>]], resource:getHRef()))\r\n\t\taddPropstat (content, propstat)\r\n\t\ttable.insert (content, [[</D:response>]])\r\n\tend\r\n\t\r\n\ttable.insert (content, [[</D:multistatus>]])\r\n\r\n--\tfor _,l in ipairs (content) do print (l) end\r\n\r\n\tres.content = content\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "res.statusline = \"HTTP/1.1 207 Multi-Status\\r\\n\"",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "res.headers [\"Content-Type\"] = 'text/xml; charset=\"utf-8\"'",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "local depth = req.headers.depth",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "local path = req.relpath",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local data = xml_ns (req_xml (req))",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local resource_q = repos_b:getResource (req.match, path)",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "if not resource_q then\r\n\t\treturn httpd.err_404 (req, res)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "local content = {}",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "table.insert (content, [[<?xml version=\"1.0\" encoding=\"utf-8\" ?>]])",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "table.insert (content, [[<D:multistatus xmlns:D=\"DAV:\">]])",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "local namespace = {}",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "assert (data.tag == \"DAV:propfind\")",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "for resource in resource_q:getItems (depth) do\r\n\t--\tprint (\"resource:\", resource.path)\r\n\t\tlocal propstat = {}\r\n\t\tnamespace.D=\"DAV:\"\r\n\r\n\t\tfor findtype, findtype_tn in lomChilds (data) do\r\n\r\n\t\t\tif findtype_tn == \"DAV:prop\" then\r\n\t\t\t\tfor _, propname in lomChilds (findtype) do\r\n\t\t\t\t\tlocal propval = resource:getProp (propname)\r\n\t\t\t\t\tif not propval and props_b then\r\n\t\t\t\t\t\tpropval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend\r\n\r\n\t\t\telseif findtype_tn == \"DAV:propname\" then\r\n\t\t\t\tfor propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\tend\r\n\t\t\t\tif props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\telseif findtype_tn == \"DAV:allprop\" then\r\n\t\t\t\tfor propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\tlocal propval =  resource:getProp (propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend\r\n\t\t\t\tif props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\tlocal propval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\r\n\t\tnamespace.D = nil\r\n\r\n\t\ttable.insert (content, string.format ([[<D:response %s>]], nsattr (namespace)))\r\n\t\ttable.insert (content, string.format ([[<D:href>%s</D:href>]], resource:getHRef()))\r\n\t\taddPropstat (content, propstat)\r\n\t\ttable.insert (content, [[</D:response>]])\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 142,
    "text": "local propstat = {}",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "namespace.D=\"DAV:\"",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "for findtype, findtype_tn in lomChilds (data) do\r\n\r\n\t\t\tif findtype_tn == \"DAV:prop\" then\r\n\t\t\t\tfor _, propname in lomChilds (findtype) do\r\n\t\t\t\t\tlocal propval = resource:getProp (propname)\r\n\t\t\t\t\tif not propval and props_b then\r\n\t\t\t\t\t\tpropval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend\r\n\r\n\t\t\telseif findtype_tn == \"DAV:propname\" then\r\n\t\t\t\tfor propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\tend\r\n\t\t\t\tif props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\telseif findtype_tn == \"DAV:allprop\" then\r\n\t\t\t\tfor propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\tlocal propval =  resource:getProp (propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend\r\n\t\t\t\tif props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\tlocal propval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 145,
    "text": "if findtype_tn == \"DAV:prop\" then\r\n\t\t\t\tfor _, propname in lomChilds (findtype) do\r\n\t\t\t\t\tlocal propval = resource:getProp (propname)\r\n\t\t\t\t\tif not propval and props_b then\r\n\t\t\t\t\t\tpropval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend\r\n\r\n\t\t\telseif findtype_tn == \"DAV:propname\" then\r\n\t\t\t\tfor propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\tend\r\n\t\t\t\tif props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\telseif findtype_tn == \"DAV:allprop\" then\r\n\t\t\t\tfor propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\tlocal propval =  resource:getProp (propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend\r\n\t\t\t\tif props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\tlocal propval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "for _, propname in lomChilds (findtype) do\r\n\t\t\t\t\tlocal propval = resource:getProp (propname)\r\n\t\t\t\t\tif not propval and props_b then\r\n\t\t\t\t\t\tpropval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 147,
    "text": "local propval = resource:getProp (propname)",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if not propval and props_b then\r\n\t\t\t\t\t\tpropval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "propval = props_b:getProp (req.relpath, propname)",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "local shortname = reducename (namespace, propname)",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "addProp (propstat, shortname, propval)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "for propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 153,
    "text": "addProp (propstat, shortname, \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "if props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "for propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, \"\")\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "for propname in resource:getPropNames () do\r\n\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\tlocal propval =  resource:getProp (propname)\r\n\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 157,
    "text": "local propval =  resource:getProp (propname)",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if props_b then\r\n\t\t\t\t\tfor propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\tlocal propval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "for propname in props_b:getPropNames (req.relpath) do\r\n\t\t\t\t\t\tlocal shortname = reducename (namespace, propname)\r\n\t\t\t\t\t\tlocal propval = props_b:getProp (req.relpath, propname)\r\n\t\t\t\t\t\taddProp (propstat, shortname, propval)\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 160,
    "text": "local propval = props_b:getProp (req.relpath, propname)",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "namespace.D = nil",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "table.insert (content, string.format ([[<D:response %s>]], nsattr (namespace)))",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "table.insert (content, string.format ([[<D:href>%s</D:href>]], resource:getHRef()))",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "addPropstat (content, propstat)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "table.insert (content, [[</D:response>]])",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "table.insert (content, [[</D:multistatus>]])",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "res.content = content",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "local function dav_proppatch (req, res, repos_b, props_b)\r\n\tres.statusline = \"HTTP/1.1 207 Multi-Status\\r\\n\"\r\n\tres.headers [\"Content-Type\"] = 'text/xml; charset=\"utf-8\"'\r\n\r\n\tlocal path = req.relpath\r\n\tlocal data = xml_ns (req_xml (req))\r\n--\tprint (\"como xml:\") lomtoxml (data) print ()\r\n\r\n\tlocal resource = repos_b:getResource (req.match, path)\r\n\tif not resource then\r\n\t\treturn httpd.err_404 (req, res)\r\n\tend\r\n\r\n\tlocal content = {}\r\n\r\n\ttable.insert (content, [[<?xml version=\"1.0\" encoding=\"utf-8\" ?>]])\r\n\tlocal namespace = {D=\"DAV:\"}\r\n\tlocal propstat = {}\r\n\r\n\tassert (data.tag == \"DAV:propertyupdate\")\r\n\tfor cmd_node, cmd_name in lomChilds (data) do\r\n\t\tfor nd in lomChildsByTagName (cmd_node, \"DAV:prop\") do\r\n\t\t\tlocal status = nil\r\n\t\t\tfor prop_node, propname in lomChilds (nd) do\r\n\t\t\t\tif cmd_name == \"DAV:set\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, lomContent (prop_node))\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\telseif cmd_name == \"DAV:remove\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, nil)\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\tend\r\n\r\n\t\t\t\tif status then\r\n\t\t\t\t\tlocal propentry = maketabletable (content, status)\r\n\t\t\t\t\ttable.insert (propentry, string.format ([[<%s/>]], reducename (namespace, propname)))\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\ttable.insert (content, string.format ([[<D:multistatus %s>]], nsattr (namespace)))\r\n\ttable.insert (content, [[<D:response>]])\r\n\ttable.insert (content, string.format ([[<D:href>%s</D:href>]], resource:getHRef()))\r\n\taddPropstat (content, propstat)\r\n\ttable.insert (content, [[</D:response>]])\r\n\ttable.insert (content, [[</D:multistatus>]])\r\n\r\n\tres.content = content\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "local resource = repos_b:getResource (req.match, path)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "if not resource then\r\n\t\treturn httpd.err_404 (req, res)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "local namespace = {D=\"DAV:\"}",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "assert (data.tag == \"DAV:propertyupdate\")",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "for cmd_node, cmd_name in lomChilds (data) do\r\n\t\tfor nd in lomChildsByTagName (cmd_node, \"DAV:prop\") do\r\n\t\t\tlocal status = nil\r\n\t\t\tfor prop_node, propname in lomChilds (nd) do\r\n\t\t\t\tif cmd_name == \"DAV:set\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, lomContent (prop_node))\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\telseif cmd_name == \"DAV:remove\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, nil)\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\tend\r\n\r\n\t\t\t\tif status then\r\n\t\t\t\t\tlocal propentry = maketabletable (content, status)\r\n\t\t\t\t\ttable.insert (propentry, string.format ([[<%s/>]], reducename (namespace, propname)))\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 175,
    "text": "for nd in lomChildsByTagName (cmd_node, \"DAV:prop\") do\r\n\t\t\tlocal status = nil\r\n\t\t\tfor prop_node, propname in lomChilds (nd) do\r\n\t\t\t\tif cmd_name == \"DAV:set\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, lomContent (prop_node))\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\telseif cmd_name == \"DAV:remove\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, nil)\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\tend\r\n\r\n\t\t\t\tif status then\r\n\t\t\t\t\tlocal propentry = maketabletable (content, status)\r\n\t\t\t\t\ttable.insert (propentry, string.format ([[<%s/>]], reducename (namespace, propname)))\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 176,
    "text": "local status = nil",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "for prop_node, propname in lomChilds (nd) do\r\n\t\t\t\tif cmd_name == \"DAV:set\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, lomContent (prop_node))\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\telseif cmd_name == \"DAV:remove\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, nil)\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\tend\r\n\r\n\t\t\t\tif status then\r\n\t\t\t\t\tlocal propentry = maketabletable (content, status)\r\n\t\t\t\t\ttable.insert (propentry, string.format ([[<%s/>]], reducename (namespace, propname)))\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 178,
    "text": "if cmd_name == \"DAV:set\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, lomContent (prop_node))\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\telseif cmd_name == \"DAV:remove\" then\r\n\t\t\t\t\tprops_b:setProp (path, propname, nil)\r\n\t\t\t\t\tstatus = \"HTTP/1.1 200 OK\"\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "props_b:setProp (path, propname, lomContent (prop_node))",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "status = \"HTTP/1.1 200 OK\"",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "props_b:setProp (path, propname, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "if status then\r\n\t\t\t\t\tlocal propentry = maketabletable (content, status)\r\n\t\t\t\t\ttable.insert (propentry, string.format ([[<%s/>]], reducename (namespace, propname)))\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "local propentry = maketabletable (content, status)",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "table.insert (propentry, string.format ([[<%s/>]], reducename (namespace, propname)))",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "table.insert (content, string.format ([[<D:multistatus %s>]], nsattr (namespace)))",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "table.insert (content, [[<D:response>]])",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "local function dav_options (req, res, repos_b, props_b)\r\n\tres.headers [\"DAV\"] = \"1,2\"\r\n\tres.content = \"\"\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "res.headers [\"DAV\"] = \"1,2\"",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "res.content = \"\"",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "local function dav_get (req, res, repos_b, props_b)\r\n\tlocal resource = repos_b:getResource (req.match, req.relpath)\r\n\tif not resource then\r\n\t\treturn httpd.err_404 (req, res)\r\n\tend\r\n\r\n\tres.headers [\"Content-Type\"] = resource:getContentType ()\r\n\tres.headers [\"Content-Length\"] = resource:getContentSize () or 0\r\n\r\n\tres:send_headers ()\r\n\tfor block in resource:getContentData () do\r\n\t\tres:send_data (block)\r\n\tend\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 193,
    "text": "local resource = repos_b:getResource (req.match, req.relpath)",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "res.headers [\"Content-Type\"] = resource:getContentType ()",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "res.headers [\"Content-Length\"] = resource:getContentSize () or 0",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "res:send_headers ()",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "for block in resource:getContentData () do\r\n\t\tres:send_data (block)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 198,
    "text": "res:send_data (block)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "local function dav_put (req, res, repos_b)\r\n\tlocal path = req.relpath\r\n\tlocal resource = repos_b:getResource (req.match, path)\r\n\t\tor repos_b:createResource (req.match, path)\r\n\r\n\tif req.headers[\"content-range\"] then\r\n\t\treturn httpd.err_405 (req, res)\r\n\tend\r\n\r\n\tlocal contentlength = assert (req.headers [\"content-length\"]) + 0\r\n\tlocal bsz\r\n\twhile contentlength > 0 do\r\n\t\tif contentlength > 4096 then bsz = 4096 else bsz = contentlength end\r\n\t\tresource:addContentData (req.socket:receive (bsz))\r\n\t\tcontentlength = contentlength - bsz\r\n\tend\r\n\tres:send_headers ()\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "local resource = repos_b:getResource (req.match, path)\r\n\t\tor repos_b:createResource (req.match, path)",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if req.headers[\"content-range\"] then\r\n\t\treturn httpd.err_405 (req, res)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "local contentlength = assert (req.headers [\"content-length\"]) + 0",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "local bsz",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "while contentlength > 0 do\r\n\t\tif contentlength > 4096 then bsz = 4096 else bsz = contentlength end\r\n\t\tresource:addContentData (req.socket:receive (bsz))\r\n\t\tcontentlength = contentlength - bsz\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 206,
    "text": "if contentlength > 4096 then bsz = 4096 else bsz = contentlength end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "bsz = 4096",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "bsz = contentlength",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "resource:addContentData (req.socket:receive (bsz))",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "contentlength = contentlength - bsz",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "local function dav_mkcol (req, res, repos_b)\r\n\tlocal path = req.relpath\r\n\tlocal resource = repos_b:getResource (req.match, path)\r\n\tif resource then\r\n\t\tres.statusline = \"HTTP/1.1 405 Method Not Allowed\\r\\n\"\r\n\t\tres.content = \"\"\r\n\t\treturn res\r\n\tend\r\n\tlocal done, err = repos_b:createCollection (req.match, path)\r\n\tif done then\r\n\t\tres.statusline = \"HTTP/1.1 201 Created\\r\\n\"\r\n\telse\r\n\t\tres.statusline = \"HTTP/1.1 403 Forbidden\\r\\n\"\r\n\tend\r\n\tres.content = \"\"\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 213,
    "text": "if resource then\r\n\t\tres.statusline = \"HTTP/1.1 405 Method Not Allowed\\r\\n\"\r\n\t\tres.content = \"\"\r\n\t\treturn res\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "res.statusline = \"HTTP/1.1 405 Method Not Allowed\\r\\n\"",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "local done, err = repos_b:createCollection (req.match, path)",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "if done then\r\n\t\tres.statusline = \"HTTP/1.1 201 Created\\r\\n\"\r\n\telse\r\n\t\tres.statusline = \"HTTP/1.1 403 Forbidden\\r\\n\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "res.statusline = \"HTTP/1.1 201 Created\\r\\n\"",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "res.statusline = \"HTTP/1.1 403 Forbidden\\r\\n\"",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "local function dav_delete (req, res, repos_b, props_b)\r\n\tlocal path = req.relpath\r\n\tlocal resource = repos_b:getResource (req.match, path)\r\n\tif not resource then\r\n\t\treturn http.err_404\r\n\tend\r\n\t\r\n\t-- NOTE: this should iterate depth-first\r\n\tfor r in resource:getItems (\"Infinity\") do\r\n\t\tlocal ok, err = resource:delete ()\r\n\t\tif not ok then\r\n\t\t\tres.statusline = \"HTTP/1.1 207 Multi-Status\\r\\n\"\r\n\t\t\tres.content = string.format ([[\r\n\t\t\t\t<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n\t\t\t\t<d:multistatus xmlns:d=\"DAV:\">\r\n\t\t\t\t\t<d:response>\r\n\t\t\t\t\t\t<d:href>%s</d:href>\r\n\t\t\t\t\t\t<d:status>%s</d:status>\r\n\t\t\t\t\t</d:response>\r\n\t\t\t\t</d:multistatus>]], resource:getHRef(), err)\r\n\t\t\treturn res\r\n\t\tend\r\n\t\tprops_b:delete (resource:getPath ())\t\t-- TODO\r\n\tend\r\n\tres.statusline = \"HTTP/1.1 204 No Content\\r\\n\"\r\n--[[\r\n\tlocal done, err = resource:delete ()\r\n\tif done then\r\n\t\tres.statusline = \"HTTP/1.1 204 No Content\\r\\n\"\r\n\t\tprops_b:delete (path)\r\n\telse\r\n\t\tres.statusline = \"HTTP/1.1 403 Forbidden\\r\\n\"\r\n\tend\r\n--]]\r\n\tres.content = \"\"\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 221,
    "text": "if not resource then\r\n\t\treturn http.err_404\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "for r in resource:getItems (\"Infinity\") do\r\n\t\tlocal ok, err = resource:delete ()\r\n\t\tif not ok then\r\n\t\t\tres.statusline = \"HTTP/1.1 207 Multi-Status\\r\\n\"\r\n\t\t\tres.content = string.format ([[\r\n\t\t\t\t<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n\t\t\t\t<d:multistatus xmlns:d=\"DAV:\">\r\n\t\t\t\t\t<d:response>\r\n\t\t\t\t\t\t<d:href>%s</d:href>\r\n\t\t\t\t\t\t<d:status>%s</d:status>\r\n\t\t\t\t\t</d:response>\r\n\t\t\t\t</d:multistatus>]], resource:getHRef(), err)\r\n\t\t\treturn res\r\n\t\tend\r\n\t\tprops_b:delete (resource:getPath ())\t\t-- TODO\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 223,
    "text": "local ok, err = resource:delete ()",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "if not ok then\r\n\t\t\tres.statusline = \"HTTP/1.1 207 Multi-Status\\r\\n\"\r\n\t\t\tres.content = string.format ([[\r\n\t\t\t\t<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n\t\t\t\t<d:multistatus xmlns:d=\"DAV:\">\r\n\t\t\t\t\t<d:response>\r\n\t\t\t\t\t\t<d:href>%s</d:href>\r\n\t\t\t\t\t\t<d:status>%s</d:status>\r\n\t\t\t\t\t</d:response>\r\n\t\t\t\t</d:multistatus>]], resource:getHRef(), err)\r\n\t\t\treturn res\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "res.content = string.format ([[\r\n\t\t\t\t<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n\t\t\t\t<d:multistatus xmlns:d=\"DAV:\">\r\n\t\t\t\t\t<d:response>\r\n\t\t\t\t\t\t<d:href>%s</d:href>\r\n\t\t\t\t\t\t<d:status>%s</d:status>\r\n\t\t\t\t\t</d:response>\r\n\t\t\t\t</d:multistatus>]], resource:getHRef(), err)",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "props_b:delete (resource:getPath ())",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "res.statusline = \"HTTP/1.1 204 No Content\\r\\n\"",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "local function dav_lock (req, res, repos_b)\r\n\tlocal data = xml_ns (req_xml (req))\r\n\tprint (\"como xml:\") lomtoxml (data) print ()\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "print (\"como xml:\")",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "lomtoxml (data)",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "print ()",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function makeHandler (repos_b, props_b)\r\n\treturn function (req, res)\r\n--\t\tprint (req.cmd_mth, req.parsed_url.path)\r\n--\t\tfor k,v in pairs (req.headers) do print (k,v) end\r\n\r\n\t\tlocal dav_handler = dav_cmd_dispatch [req.cmd_mth]\r\n\t\tif dav_handler then\r\n\t\t\treturn dav_handler (req, res, repos_b, props_b)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "local dav_handler = dav_cmd_dispatch [req.cmd_mth]",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "if dav_handler then\r\n\t\t\treturn dav_handler (req, res, repos_b, props_b)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "function () return nil end",
    "type": "function"
  }, {
    "id": 239,
    "text": "function () gen (x) end",
    "type": "function"
  }, {
    "id": 240,
    "text": "function () return nil end",
    "type": "function"
  }, {
    "id": 241,
    "text": "function () gen (x) end",
    "type": "function"
  }, {
    "id": 242,
    "text": "function () return nil end",
    "type": "function"
  }, {
    "id": 243,
    "text": "function (req, res)\r\n--\t\tprint (req.cmd_mth, req.parsed_url.path)\r\n--\t\tfor k,v in pairs (req.headers) do print (k,v) end\r\n\r\n\t\tlocal dav_handler = dav_cmd_dispatch [req.cmd_mth]\r\n\t\tif dav_handler then\r\n\t\t\treturn dav_handler (req, res, repos_b, props_b)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "",
    "type": "function container"
  }, {
    "id": 246,
    "text": "format",
    "type": "global function"
  }, {
    "id": 247,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 248,
    "text": "err_404",
    "type": "global function"
  }, {
    "id": 249,
    "text": "find",
    "type": "global function"
  }, {
    "id": 250,
    "text": "print",
    "type": "global function"
  }, {
    "id": 251,
    "text": "module",
    "type": "global function"
  }, {
    "id": 252,
    "text": "dav_handler",
    "type": "global function"
  }, {
    "id": 253,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 254,
    "text": "type",
    "type": "global function"
  }, {
    "id": 255,
    "text": "err_405",
    "type": "global function"
  }, {
    "id": 256,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 257,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 258,
    "text": "lxp.lom.parse",
    "type": "global function"
  }, {
    "id": 259,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 260,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 261,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 262,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 263,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 264,
    "text": "require",
    "type": "global function"
  }, {
    "id": 265,
    "text": "",
    "type": "global variable"
  }, {
    "id": 266,
    "text": "",
    "type": "variable container"
  }, {
    "id": 267,
    "text": "",
    "type": "require container"
  }, {
    "id": 268,
    "text": "",
    "type": "local variable"
  }, {
    "id": 269,
    "text": "",
    "type": "n/a"
  }, {
    "id": 270,
    "text": "",
    "type": "local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 272,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 273,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 274,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 275,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 276,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 277,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 278,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 279,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 280,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 281,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 282,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 283,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 284,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 285,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 286,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 287,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 288,
    "text": "lom",
    "type": "module"
  } ]
}