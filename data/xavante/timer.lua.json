{
  "_filename": "timer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/xavante/src/codeweb/timer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 5,
    "label": "calls",
    "to": 34
  }, {
    "from": 21,
    "label": "calls",
    "to": 32
  }, {
    "from": 28,
    "label": "calls",
    "to": 30
  }, {
    "from": 15,
    "label": "calls",
    "to": 29
  }, {
    "from": 23,
    "label": "calls",
    "to": 29
  }, {
    "from": 5,
    "label": "calls",
    "to": 35
  }, {
    "from": 5,
    "label": "calls",
    "to": 35
  }, {
    "from": 23,
    "label": "calls",
    "to": 31
  }, {
    "from": 23,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 28,
    "label": "declares",
    "to": 2
  }, {
    "from": 28,
    "label": "declares",
    "to": 5
  }, {
    "from": 28,
    "label": "declares",
    "to": 15
  }, {
    "from": 28,
    "label": "declares",
    "to": 17
  }, {
    "from": 28,
    "label": "declares",
    "to": 21
  }, {
    "from": 28,
    "label": "declares",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 37,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 37,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "timer",
    "type": "module"
  }, {
    "id": 2,
    "text": "function new ()\r\n\treturn setmetatable ({jobs={}}, timer_mt)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function timer:add (t, f)\r\n\tlocal job={time=t, func=f}\r\n\tlocal ins = -1\r\n\r\n\tfor i,v in ipairs (self.jobs) do\r\n\t\tif v.time > t then\r\n\t\t\tins = i\r\n\t\t\tbreak\r\n\t\tend\r\n\tend\r\n\r\n\tif ins > 0 then\r\n\t\ttable.insert (self.jobs, ins, job)\r\n\telse\r\n\t\ttable.insert (self.jobs, job)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local job={time=t, func=f}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local ins = -1",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for i,v in ipairs (self.jobs) do\r\n\t\tif v.time > t then\r\n\t\t\tins = i\r\n\t\t\tbreak\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "if v.time > t then\r\n\t\t\tins = i\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "ins = i",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if ins > 0 then\r\n\t\ttable.insert (self.jobs, ins, job)\r\n\telse\r\n\t\ttable.insert (self.jobs, job)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "table.insert (self.jobs, ins, job)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "table.insert (self.jobs, job)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function timer:add_rel (t, f)\r\n\treturn self:add (os.time() + t, f)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function timer:add_rep (t, f)\r\n\tlocal function w ()\r\n\t\tf ()\r\n\t\treturn self:add_rel (t, w)\r\n\tend\r\n\treturn self:add_rel (t, w)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local function w ()\r\n\t\tf ()\r\n\t\treturn self:add_rel (t, w)\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 19,
    "text": "f ()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function w ()\r\n\t\tf ()\r\n\t\treturn self:add_rel (t, w)\r\n\tend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function timer:tick ()\r\n\twhile self.jobs[1] and os.time() >= self.jobs[1].time do\r\n\t\tlocal job = table.remove (self.jobs, 1)\r\n\t\tjob.func()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "while self.jobs[1] and os.time() >= self.jobs[1].time do\r\n\t\tlocal job = table.remove (self.jobs, 1)\r\n\t\tjob.func()\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 25,
    "text": "local job = table.remove (self.jobs, 1)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "job.func()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "",
    "type": "function container"
  }, {
    "id": 29,
    "text": "time",
    "type": "global function"
  }, {
    "id": 30,
    "text": "module",
    "type": "global function"
  }, {
    "id": 31,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 32,
    "text": "f",
    "type": "global function"
  }, {
    "id": 33,
    "text": "func",
    "type": "global function"
  }, {
    "id": 34,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 35,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 36,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 37,
    "text": "",
    "type": "variable container"
  }, {
    "id": 38,
    "text": "",
    "type": "require container"
  }, {
    "id": 39,
    "text": "",
    "type": "local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 41,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 42,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  } ]
}