{
  "_filename": "davFileRepository.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/xavante/src/webdav/davFileRepository.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 6
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 3
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 3
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 3
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 3
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 3
  }, {
    "from": 45,
    "label": "has",
    "to": 3
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 3
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 3
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 50
  }, {
    "from": 59,
    "label": "has",
    "to": 51
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 52
  }, {
    "from": 59,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 59,
    "label": "has",
    "to": 57
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 57
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 11
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 76,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 71,
    "label": "has",
    "to": 96
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 78
  }, {
    "from": 99,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 11
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 99,
    "label": "has",
    "to": 78
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 88
  }, {
    "from": 101,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 95
  }, {
    "from": 104,
    "label": "has",
    "to": 3
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 3
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 3
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 3
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 3
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 3
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "calls",
    "to": 132
  }, {
    "from": 66,
    "label": "calls",
    "to": 122
  }, {
    "from": 61,
    "label": "calls",
    "to": 124
  }, {
    "from": 101,
    "label": "calls",
    "to": 124
  }, {
    "from": 109,
    "label": "calls",
    "to": 133
  }, {
    "from": 59,
    "label": "calls",
    "to": 127
  }, {
    "from": 71,
    "label": "calls",
    "to": 127
  }, {
    "from": 71,
    "label": "calls",
    "to": 127
  }, {
    "from": 71,
    "label": "calls",
    "to": 127
  }, {
    "from": 101,
    "label": "calls",
    "to": 127
  }, {
    "from": 13,
    "label": "calls",
    "to": 134
  }, {
    "from": 59,
    "label": "calls",
    "to": 134
  }, {
    "from": 61,
    "label": "calls",
    "to": 134
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 5,
    "label": "calls",
    "to": 125
  }, {
    "from": 13,
    "label": "calls",
    "to": 125
  }, {
    "from": 40,
    "label": "calls",
    "to": 125
  }, {
    "from": 106,
    "label": "calls",
    "to": 125
  }, {
    "from": 5,
    "label": "calls",
    "to": 129
  }, {
    "from": 71,
    "label": "calls",
    "to": 129
  }, {
    "from": 71,
    "label": "calls",
    "to": 129
  }, {
    "from": 71,
    "label": "calls",
    "to": 129
  }, {
    "from": 101,
    "label": "calls",
    "to": 129
  }, {
    "from": 71,
    "label": "calls",
    "to": 136
  }, {
    "from": 101,
    "label": "calls",
    "to": 136
  }, {
    "from": 48,
    "label": "calls",
    "to": 135
  }, {
    "from": 71,
    "label": "calls",
    "to": 135
  }, {
    "from": 18,
    "label": "calls",
    "to": 137
  }, {
    "from": 66,
    "label": "calls",
    "to": 131
  }, {
    "from": 5,
    "label": "calls",
    "to": 138
  }, {
    "from": 13,
    "label": "calls",
    "to": 138
  }, {
    "from": 117,
    "label": "calls",
    "to": 138
  }, {
    "from": 121,
    "label": "calls",
    "to": 126
  }, {
    "from": 5,
    "label": "calls",
    "to": 123
  }, {
    "from": 13,
    "label": "calls",
    "to": 123
  }, {
    "from": 13,
    "label": "calls",
    "to": 123
  }, {
    "from": 101,
    "label": "calls",
    "to": 123
  }, {
    "from": 121,
    "label": "calls",
    "to": 139
  }, {
    "from": 121,
    "label": "calls",
    "to": 139
  }, {
    "from": 121,
    "label": "calls",
    "to": 139
  }, {
    "from": 101,
    "label": "calls",
    "to": 101
  }, {
    "from": 71,
    "label": "calls",
    "to": 101
  }, {
    "from": 111,
    "label": "calls",
    "to": 130
  }, {
    "from": 1,
    "label": "contains",
    "to": 121
  }, {
    "from": 121,
    "label": "declares",
    "to": 2
  }, {
    "from": 121,
    "label": "declares",
    "to": 5
  }, {
    "from": 121,
    "label": "declares",
    "to": 13
  }, {
    "from": 121,
    "label": "declares",
    "to": 18
  }, {
    "from": 121,
    "label": "declares",
    "to": 20
  }, {
    "from": 121,
    "label": "declares",
    "to": 22
  }, {
    "from": 121,
    "label": "declares",
    "to": 27
  }, {
    "from": 121,
    "label": "declares",
    "to": 29
  }, {
    "from": 121,
    "label": "declares",
    "to": 31
  }, {
    "from": 121,
    "label": "declares",
    "to": 33
  }, {
    "from": 121,
    "label": "declares",
    "to": 36
  }, {
    "from": 121,
    "label": "declares",
    "to": 38
  }, {
    "from": 121,
    "label": "declares",
    "to": 40
  }, {
    "from": 121,
    "label": "declares",
    "to": 45
  }, {
    "from": 121,
    "label": "declares",
    "to": 48
  }, {
    "from": 121,
    "label": "declares",
    "to": 59
  }, {
    "from": 121,
    "label": "declares",
    "to": 61
  }, {
    "from": 121,
    "label": "declares",
    "to": 66
  }, {
    "from": 121,
    "label": "declares",
    "to": 71
  }, {
    "from": 121,
    "label": "declares",
    "to": 98
  }, {
    "from": 121,
    "label": "declares",
    "to": 99
  }, {
    "from": 121,
    "label": "declares",
    "to": 101
  }, {
    "from": 121,
    "label": "declares",
    "to": 103
  }, {
    "from": 121,
    "label": "declares",
    "to": 104
  }, {
    "from": 121,
    "label": "declares",
    "to": 106
  }, {
    "from": 121,
    "label": "declares",
    "to": 109
  }, {
    "from": 121,
    "label": "declares",
    "to": 111
  }, {
    "from": 121,
    "label": "declares",
    "to": 115
  }, {
    "from": 121,
    "label": "declares",
    "to": 117
  }, {
    "from": 1,
    "label": "contains",
    "to": 141
  }, {
    "from": 1,
    "label": "contains",
    "to": 142
  }, {
    "from": 141,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 141,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 141,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 141,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 141,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 141,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 141,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 141,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 141,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 141,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 141,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 141,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 141,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 142,
    "label": "initializes",
    "to": 140
  }, {
    "from": 142,
    "label": "initializes",
    "to": 140
  }, {
    "from": 142,
    "label": "initializes",
    "to": 140
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "davFileRepository",
    "type": "module"
  }, {
    "id": 2,
    "text": "function source:getRoot ()\r\n\treturn self.rootDir\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function source:getResource (rootUrl, path)\r\n\tlocal diskpath = self.rootDir .. path\r\n\tlocal attr = lfs.attributes (diskpath)\r\n\tif not attr then return end\r\n\r\n\tlocal _,_,pfx = string.find (rootUrl, \"^(.*/)[^/]-$\")\r\n\r\n\tif attr.mode == \"directory\" and string.sub (path, -1) ~= \"/\" then\r\n\t\tpath = path ..\"/\"\r\n\tend\r\n\t\r\n\treturn setmetatable ({\r\n\t\tsource = self,\r\n\t\tpath = path,\r\n\t\tdiskpath = diskpath,\r\n\t\tattr = attr,\r\n\t\tpfx = pfx\r\n\t}, resource_mt)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local diskpath = self.rootDir .. path",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local attr = lfs.attributes (diskpath)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not attr then return end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "local _,_,pfx = string.find (rootUrl, \"^(.*/)[^/]-$\")",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if attr.mode == \"directory\" and string.sub (path, -1) ~= \"/\" then\r\n\t\tpath = path ..\"/\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "path = path ..\"/\"",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function source:createResource (rootUrl, path)\r\n\tlocal diskpath = self.rootDir .. path\r\n\tlocal attr = lfs.attributes (diskpath)\r\n\tif not attr then\r\n\t\tio.open (diskpath, \"w\"):close ()\r\n\t\tattr = lfs.attributes (diskpath)\r\n\tend\r\n\t\r\n\tlocal _,_,pfx = string.find (rootUrl, \"^(.*/)[^/]-$\")\r\n\r\n\treturn setmetatable ({\r\n\t\tsource = self,\r\n\t\tpath = path,\r\n\t\tdiskpath = diskpath,\r\n\t\tattr = attr,\r\n\t\tpfx = pfx\r\n\t}, resource_mt)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if not attr then\r\n\t\tio.open (diskpath, \"w\"):close ()\r\n\t\tattr = lfs.attributes (diskpath)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "io.open (diskpath, \"w\"):close ()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "attr = lfs.attributes (diskpath)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function source:createCollection (rootUrl, path)\r\n\tlocal diskpath = self.rootDir .. path\r\n\treturn lfs.mkdir (diskpath)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function (self)\r\n\treturn os.date (\"!%a, %d %b %Y %H:%M:%S GMT\", self.attr.change)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function (self)\r\n\tlocal name = \"\"\r\n\tfor part in string.gfind (self.path, \"[^/]+\") do\r\n\t\tname = part\r\n\tend\r\n\treturn name\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local name = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for part in string.gfind (self.path, \"[^/]+\") do\r\n\t\tname = part\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "name = part",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function (self)\r\n\treturn self:getHRef ()\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function (self)\r\n\treturn [[<D:lockentry>\r\n<D:lockscope><D:exclusive/></D:lockscope>\r\n<D:locktype><D:write/></D:locktype>\r\n</D:lockentry>\r\n<D:lockentry>\r\n<D:lockscope><D:shared/></D:lockscope>\r\n<D:locktype><D:write/></D:locktype>\r\n</D:lockentry>]]\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function (self)\r\n\treturn os.date (\"!%a, %d %b %Y %H:%M:%S GMT\", self.attr.modification)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function (self)\r\n\tif self.attr.mode == \"directory\" then\r\n\t\treturn \"<D:collection/>\"\r\n\telse\r\n\t\treturn \"\"\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "if self.attr.mode == \"directory\" then\r\n\t\treturn \"<D:collection/>\"\r\n\telse\r\n\t\treturn \"\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function (self)\r\n\treturn self:getContentType ()\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function (self)\r\n\treturn self:getContentSize ()\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function resource:getContentType ()\r\n\tif self.attr.mode == \"directory\" then\r\n\t\treturn \"httpd/unix-directory\"\r\n\tend\r\n\tlocal _,_,exten = string.find (self.path, \"%.([^.]*)$\")\r\n\texten = exten or \"\"\r\n\treturn xavante.mimetypes [exten] or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if self.attr.mode == \"directory\" then\r\n\t\treturn \"httpd/unix-directory\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local _,_,exten = string.find (self.path, \"%.([^.]*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "exten = exten or \"\"",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function resource:getContentSize ()\r\n\tif self.attr.mode == \"file\" then\r\n\t\treturn self.attr.size\r\n\telse return 0\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if self.attr.mode == \"file\" then\r\n\t\treturn self.attr.size\r\n\telse return 0\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function resource:getContentData ()\r\n\tlocal function gen ()\r\n\t\tlocal f = io.open (self.diskpath, \"rb\")\r\n\t\tif not f then\r\n\t\t\treturn\r\n\t\tend\r\n\r\n\t\tlocal block\r\n\t\trepeat\r\n\t\t\tblock = f:read (8192)\r\n\t\t\tif block then\r\n\t\t\t\tcoroutine.yield (block)\r\n\t\t\tend\r\n\t\tuntil not block\r\n\t\tf:close ()\r\n\tend\r\n\r\n\treturn coroutine.wrap (gen)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local function gen ()\r\n\t\tlocal f = io.open (self.diskpath, \"rb\")\r\n\t\tif not f then\r\n\t\t\treturn\r\n\t\tend\r\n\r\n\t\tlocal block\r\n\t\trepeat\r\n\t\t\tblock = f:read (8192)\r\n\t\t\tif block then\r\n\t\t\t\tcoroutine.yield (block)\r\n\t\t\tend\r\n\t\tuntil not block\r\n\t\tf:close ()\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 50,
    "text": "local f = io.open (self.diskpath, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if not f then\r\n\t\t\treturn\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "local block",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "repeat\r\n\t\t\tblock = f:read (8192)\r\n\t\t\tif block then\r\n\t\t\t\tcoroutine.yield (block)\r\n\t\t\tend\r\n\t\tuntil not block",
    "type": "statement:repeat"
  }, {
    "id": 54,
    "text": "block = f:read (8192)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if block then\r\n\t\t\t\tcoroutine.yield (block)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "coroutine.yield (block)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "f:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function gen ()\r\n\t\tlocal f = io.open (self.diskpath, \"rb\")\r\n\t\tif not f then\r\n\t\t\treturn\r\n\t\tend\r\n\r\n\t\tlocal block\r\n\t\trepeat\r\n\t\t\tblock = f:read (8192)\r\n\t\t\tif block then\r\n\t\t\t\tcoroutine.yield (block)\r\n\t\t\tend\r\n\t\tuntil not block\r\n\t\tf:close ()\r\n\tend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function resource:addContentData (b)\r\n\tlocal f = assert (io.open (self.diskpath, \"a+b\"))\r\n\tf:seek (\"end\")\r\n\tf:write (b)\r\n\tf:close ()\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local f = assert (io.open (self.diskpath, \"a+b\"))",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "f:seek (\"end\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "f:write (b)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function resource:delete ()\r\n\tlocal ok, err = os.remove (self.diskpath)\r\n\tif not ok then\r\n\t\terr = string.format ([[HTTP/1.1 424 %s]], err)\r\n\tend\r\n\treturn ok, err\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local ok, err = os.remove (self.diskpath)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if not ok then\r\n\t\terr = string.format ([[HTTP/1.1 424 %s]], err)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "err = string.format ([[HTTP/1.1 424 %s]], err)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function resource:getItems (depth)\r\n\tlocal gen\r\n\tlocal path = self.path\r\n\tlocal diskpath = self.diskpath\r\n\tlocal rootdir = self.source.rootDir\r\n\r\n\tif depth == \"0\" then\r\n\t\tgen = function () coroutine.yield (self) end\r\n\r\n\telseif depth == \"1\" then\r\n\t\tgen = function ()\r\n\t\t\t\tif self.attr.mode == \"directory\" then\r\n\t\t\t\t\tif string.sub (diskpath, -1) ~= \"/\" then\r\n\t\t\t\t\t\tdiskpath = diskpath ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif string.sub (path, -1) ~= \"/\" then\r\n\t\t\t\t\t\tpath = path ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tfor entry in lfs.dir (diskpath) do\r\n\t\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\t\tcoroutine.yield (self.source:getResource (self.pfx, path..entry))\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tcoroutine.yield (self)\r\n\t\t\tend\r\n\r\n\telse\r\n\t\tlocal function recur (p)\r\n\t\t\tlocal attr = assert (lfs.attributes (rootdir .. p))\r\n\t\t\tif attr.mode == \"directory\" then\r\n\t\t\t\tfor entry in lfs.dir (rootdir .. p) do\r\n\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\trecur (p..\"/\"..entry)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tcoroutine.yield (self.source:getResource (self.pfx, p))\r\n\t\t\tend\r\n\t\tend\r\n\t\tgen = function () recur (path) end\r\n\tend\r\n\t\r\n\tif gen then return coroutine.wrap (gen) end\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local gen",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local path = self.path",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local diskpath = self.diskpath",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local rootdir = self.source.rootDir",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if depth == \"0\" then\r\n\t\tgen = function () coroutine.yield (self) end\r\n\r\n\telseif depth == \"1\" then\r\n\t\tgen = function ()\r\n\t\t\t\tif self.attr.mode == \"directory\" then\r\n\t\t\t\t\tif string.sub (diskpath, -1) ~= \"/\" then\r\n\t\t\t\t\t\tdiskpath = diskpath ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif string.sub (path, -1) ~= \"/\" then\r\n\t\t\t\t\t\tpath = path ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tfor entry in lfs.dir (diskpath) do\r\n\t\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\t\tcoroutine.yield (self.source:getResource (self.pfx, path..entry))\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tcoroutine.yield (self)\r\n\t\t\tend\r\n\r\n\telse\r\n\t\tlocal function recur (p)\r\n\t\t\tlocal attr = assert (lfs.attributes (rootdir .. p))\r\n\t\t\tif attr.mode == \"directory\" then\r\n\t\t\t\tfor entry in lfs.dir (rootdir .. p) do\r\n\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\trecur (p..\"/\"..entry)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tcoroutine.yield (self.source:getResource (self.pfx, p))\r\n\t\t\tend\r\n\t\tend\r\n\t\tgen = function () recur (path) end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "gen = function () coroutine.yield (self) end",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "coroutine.yield (self)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "gen = function ()\r\n\t\t\t\tif self.attr.mode == \"directory\" then\r\n\t\t\t\t\tif string.sub (diskpath, -1) ~= \"/\" then\r\n\t\t\t\t\t\tdiskpath = diskpath ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif string.sub (path, -1) ~= \"/\" then\r\n\t\t\t\t\t\tpath = path ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tfor entry in lfs.dir (diskpath) do\r\n\t\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\t\tcoroutine.yield (self.source:getResource (self.pfx, path..entry))\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tcoroutine.yield (self)\r\n\t\t\tend",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if self.attr.mode == \"directory\" then\r\n\t\t\t\t\tif string.sub (diskpath, -1) ~= \"/\" then\r\n\t\t\t\t\t\tdiskpath = diskpath ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif string.sub (path, -1) ~= \"/\" then\r\n\t\t\t\t\t\tpath = path ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tfor entry in lfs.dir (diskpath) do\r\n\t\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\t\tcoroutine.yield (self.source:getResource (self.pfx, path..entry))\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "if string.sub (diskpath, -1) ~= \"/\" then\r\n\t\t\t\t\t\tdiskpath = diskpath ..\"/\"\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "diskpath = diskpath ..\"/\"",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "if string.sub (path, -1) ~= \"/\" then\r\n\t\t\t\t\t\tpath = path ..\"/\"\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "for entry in lfs.dir (diskpath) do\r\n\t\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\t\tcoroutine.yield (self.source:getResource (self.pfx, path..entry))\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 85,
    "text": "if string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\t\tcoroutine.yield (self.source:getResource (self.pfx, path..entry))\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "coroutine.yield (self.source:getResource (self.pfx, path..entry))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "local function recur (p)\r\n\t\t\tlocal attr = assert (lfs.attributes (rootdir .. p))\r\n\t\t\tif attr.mode == \"directory\" then\r\n\t\t\t\tfor entry in lfs.dir (rootdir .. p) do\r\n\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\trecur (p..\"/\"..entry)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tcoroutine.yield (self.source:getResource (self.pfx, p))\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 88,
    "text": "local attr = assert (lfs.attributes (rootdir .. p))",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if attr.mode == \"directory\" then\r\n\t\t\t\tfor entry in lfs.dir (rootdir .. p) do\r\n\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\trecur (p..\"/\"..entry)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tcoroutine.yield (self.source:getResource (self.pfx, p))\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "for entry in lfs.dir (rootdir .. p) do\r\n\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\trecur (p..\"/\"..entry)\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "if string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\trecur (p..\"/\"..entry)\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "recur (p..\"/\"..entry)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "coroutine.yield (self.source:getResource (self.pfx, p))",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "gen = function () recur (path) end",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "recur (path)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "if gen then return coroutine.wrap (gen) end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function () coroutine.yield (self) end",
    "type": "function"
  }, {
    "id": 99,
    "text": "function ()\r\n\t\t\t\tif self.attr.mode == \"directory\" then\r\n\t\t\t\t\tif string.sub (diskpath, -1) ~= \"/\" then\r\n\t\t\t\t\t\tdiskpath = diskpath ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif string.sub (path, -1) ~= \"/\" then\r\n\t\t\t\t\t\tpath = path ..\"/\"\r\n\t\t\t\t\tend\r\n\t\t\t\t\tfor entry in lfs.dir (diskpath) do\r\n\t\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\t\tcoroutine.yield (self.source:getResource (self.pfx, path..entry))\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tcoroutine.yield (self)\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "local function recur (p)\r\n\t\t\tlocal attr = assert (lfs.attributes (rootdir .. p))\r\n\t\t\tif attr.mode == \"directory\" then\r\n\t\t\t\tfor entry in lfs.dir (rootdir .. p) do\r\n\t\t\t\t\tif string.sub (entry, 1,1) ~= \".\" then\r\n\t\t\t\t\t\trecur (p..\"/\"..entry)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tcoroutine.yield (self.source:getResource (self.pfx, p))\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function () recur (path) end",
    "type": "function"
  }, {
    "id": 104,
    "text": "function resource:getPath ()\r\n\treturn self.path\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function resource:getHRef ()\r\n\tlocal _,_,sfx = string.find (self.path, \"^/*(.*)$\")\r\n\treturn self.pfx..sfx\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "local _,_,sfx = string.find (self.path, \"^/*(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function resource:getPropNames ()\r\n\treturn pairs (_liveprops)\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function resource:getProp (propname)\r\n\tlocal liveprop = _liveprops [propname]\r\n\tif liveprop then\r\n\t\treturn liveprop (self)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local liveprop = _liveprops [propname]",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if liveprop then\r\n\t\treturn liveprop (self)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function resource:setProp (propname, value)\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function makeSource (params)\r\n\tparams = params or {}\r\n\tparams.rootDir = params.rootDir or \"./\"\r\n\r\n\treturn setmetatable (params, source_mt)\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "params = params or {}",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "params.rootDir = params.rootDir or \"./\"",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "",
    "type": "function container"
  }, {
    "id": 122,
    "text": "format",
    "type": "global function"
  }, {
    "id": 123,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 124,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 125,
    "text": "find",
    "type": "global function"
  }, {
    "id": 126,
    "text": "module",
    "type": "global function"
  }, {
    "id": 127,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 128,
    "text": "date",
    "type": "global function"
  }, {
    "id": 129,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 130,
    "text": "liveprop",
    "type": "global function"
  }, {
    "id": 131,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 132,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 133,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 134,
    "text": "open",
    "type": "global function"
  }, {
    "id": 135,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 136,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 137,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 138,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 139,
    "text": "require",
    "type": "global function"
  }, {
    "id": 140,
    "text": "",
    "type": "global variable"
  }, {
    "id": 141,
    "text": "",
    "type": "variable container"
  }, {
    "id": 142,
    "text": "",
    "type": "require container"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 145,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 146,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 151,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 152,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 157,
    "text": "",
    "type": "global variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "global variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "global variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "global variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "global variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "global variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "global variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  } ]
}