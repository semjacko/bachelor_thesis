{
  "_filename": "data.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-uri/uri/data.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 19,
    "label": "calls",
    "to": 89
  }, {
    "from": 19,
    "label": "calls",
    "to": 91
  }, {
    "from": 19,
    "label": "calls",
    "to": 96
  }, {
    "from": 19,
    "label": "calls",
    "to": 96
  }, {
    "from": 19,
    "label": "calls",
    "to": 96
  }, {
    "from": 19,
    "label": "calls",
    "to": 97
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 19,
    "label": "declares",
    "to": 4
  }, {
    "from": 19,
    "label": "declares",
    "to": 5
  }, {
    "from": 19,
    "label": "declares",
    "to": 6
  }, {
    "from": 19,
    "label": "declares",
    "to": 7
  }, {
    "from": 19,
    "label": "declares",
    "to": 8
  }, {
    "from": 19,
    "label": "declares",
    "to": 9
  }, {
    "from": 19,
    "label": "declares",
    "to": 10
  }, {
    "from": 19,
    "label": "declares",
    "to": 11
  }, {
    "from": 19,
    "label": "declares",
    "to": 12
  }, {
    "from": 19,
    "label": "declares",
    "to": 13
  }, {
    "from": 19,
    "label": "declares",
    "to": 14
  }, {
    "from": 19,
    "label": "declares",
    "to": 15
  }, {
    "from": 19,
    "label": "declares",
    "to": 16
  }, {
    "from": 19,
    "label": "declares",
    "to": 17
  }, {
    "from": 19,
    "label": "declares",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 36,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 36,
    "label": "has",
    "to": 21
  }, {
    "from": 36,
    "label": "has",
    "to": 21
  }, {
    "from": 36,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 21
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 21
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 21
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 39
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 58,
    "label": "has",
    "to": 21
  }, {
    "from": 58,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 74,
    "label": "has",
    "to": 21
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 19,
    "label": "calls",
    "to": 89
  }, {
    "from": 31,
    "label": "calls",
    "to": 22
  }, {
    "from": 36,
    "label": "calls",
    "to": 22
  }, {
    "from": 58,
    "label": "calls",
    "to": 22
  }, {
    "from": 74,
    "label": "calls",
    "to": 22
  }, {
    "from": 19,
    "label": "calls",
    "to": 87
  }, {
    "from": 31,
    "label": "calls",
    "to": 90
  }, {
    "from": 36,
    "label": "calls",
    "to": 90
  }, {
    "from": 36,
    "label": "calls",
    "to": 90
  }, {
    "from": 58,
    "label": "calls",
    "to": 90
  }, {
    "from": 58,
    "label": "calls",
    "to": 90
  }, {
    "from": 74,
    "label": "calls",
    "to": 90
  }, {
    "from": 74,
    "label": "calls",
    "to": 90
  }, {
    "from": 58,
    "label": "calls",
    "to": 56
  }, {
    "from": 58,
    "label": "calls",
    "to": 56
  }, {
    "from": 19,
    "label": "calls",
    "to": 88
  }, {
    "from": 19,
    "label": "calls",
    "to": 88
  }, {
    "from": 19,
    "label": "calls",
    "to": 88
  }, {
    "from": 58,
    "label": "calls",
    "to": 52
  }, {
    "from": 31,
    "label": "calls",
    "to": 95
  }, {
    "from": 58,
    "label": "calls",
    "to": 92
  }, {
    "from": 74,
    "label": "calls",
    "to": 92
  }, {
    "from": 74,
    "label": "calls",
    "to": 92
  }, {
    "from": 19,
    "label": "calls",
    "to": 96
  }, {
    "from": 19,
    "label": "calls",
    "to": 96
  }, {
    "from": 36,
    "label": "calls",
    "to": 94
  }, {
    "from": 58,
    "label": "calls",
    "to": 94
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 36,
    "label": "calls",
    "to": 85
  }, {
    "from": 58,
    "label": "calls",
    "to": 85
  }, {
    "from": 58,
    "label": "calls",
    "to": 48
  }, {
    "from": 36,
    "label": "calls",
    "to": 86
  }, {
    "from": 56,
    "label": "calls",
    "to": 93
  }, {
    "from": 22,
    "label": "calls",
    "to": 20
  }, {
    "from": 19,
    "label": "declares",
    "to": 20
  }, {
    "from": 19,
    "label": "declares",
    "to": 22
  }, {
    "from": 19,
    "label": "declares",
    "to": 31
  }, {
    "from": 19,
    "label": "declares",
    "to": 36
  }, {
    "from": 19,
    "label": "declares",
    "to": 48
  }, {
    "from": 19,
    "label": "declares",
    "to": 52
  }, {
    "from": 19,
    "label": "declares",
    "to": 56
  }, {
    "from": 19,
    "label": "declares",
    "to": 58
  }, {
    "from": 19,
    "label": "declares",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 98
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 98,
    "label": "initializes",
    "to": 100
  }, {
    "from": 98,
    "label": "initializes",
    "to": 101
  }, {
    "from": 99,
    "label": "initializes",
    "to": 102
  }, {
    "from": 99,
    "label": "initializes",
    "to": 103
  }, {
    "from": 99,
    "label": "initializes",
    "to": 104
  }, {
    "from": 1,
    "label": "contains",
    "to": 105
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 105,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 105,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 106,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "requires",
    "to": 2
  }, {
    "from": 106,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "requires",
    "to": 3
  }, {
    "from": 1,
    "label": "provides",
    "to": 115
  }, {
    "from": 107,
    "label": "represents",
    "to": 116
  }, {
    "from": 115,
    "label": "provides",
    "to": 116
  }, {
    "from": 107,
    "label": "represents",
    "to": 117
  }, {
    "from": 107,
    "label": "represents",
    "to": 118
  }, {
    "from": 107,
    "label": "represents",
    "to": 119
  }, {
    "from": 107,
    "label": "represents",
    "to": 120
  }, {
    "from": 107,
    "label": "represents",
    "to": 121
  }, {
    "from": 107,
    "label": "represents",
    "to": 122
  }, {
    "from": 107,
    "label": "represents",
    "to": 123
  }, {
    "from": 107,
    "label": "represents",
    "to": 124
  }, {
    "from": 107,
    "label": "represents",
    "to": 125
  }, {
    "from": 107,
    "label": "represents",
    "to": 126
  }, {
    "from": 107,
    "label": "represents",
    "to": 127
  }, {
    "from": 107,
    "label": "represents",
    "to": 128
  }, {
    "from": 107,
    "label": "represents",
    "to": 129
  }, {
    "from": 107,
    "label": "represents",
    "to": 130
  }, {
    "from": 107,
    "label": "represents",
    "to": 131
  }, {
    "from": 107,
    "label": "represents",
    "to": 132
  }, {
    "from": 107,
    "label": "represents",
    "to": 133
  }, {
    "from": 107,
    "label": "represents",
    "to": 134
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "data",
    "type": "module"
  }, {
    "id": 2,
    "text": "_util",
    "type": "module"
  }, {
    "id": 3,
    "text": "uri",
    "type": "module"
  }, {
    "id": 4,
    "text": "function testcase:test_data_uri_encoded ()\r\n    local uri = assert(URI:new(\"data:,A%20brief%20note\"))\r\n    is(\"uri.data\", uri._NAME)\r\n    is(\",A%20brief%20note\", uri:path())\r\n    is(\"data\", uri:scheme())\r\n\r\n    is(\"text/plain;charset=US-ASCII\", uri:data_media_type())\r\n    is(\"A brief note\", uri:data_bytes())\r\n\r\n    local old = uri:data_bytes(\"F\\229r-i-k\\229l er tingen!\")\r\n    is(\"A brief note\", old)\r\n    is(\"data:,F%E5r-i-k%E5l%20er%20tingen!\", tostring(uri))\r\n\r\n    old = uri:data_media_type(\"text/plain;charset=iso-8859-1\")\r\n    is(\"text/plain;charset=US-ASCII\", old)\r\n    is(\"data:text/plain;charset=iso-8859-1,F%E5r-i-k%E5l%20er%20tingen!\",\r\n       tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function testcase:test_data_big_base64_chunk ()\r\n    local imgdata = \"R0lGODdhMAAwAPAAAAAAAP///ywAAAAAMAAwAAAC8IyPqcvt3wCcDkiLc7C0qwyGHhSWpjQu5yqmCYsapyuvUUlvONmOZtfzgFzByTB10QgxOR0TqBQejhRNzOfkVJ+5YiUqrXF5Y5lKh/DeuNcP5yLWGsEbtLiOSpa/TPg7JpJHxyendzWTBfX0cxOnKPjgBzi4diinWGdkF8kjdfnycQZXZeYGejmJlZeGl9i2icVqaNVailT6F5iJ90m6mvuTS4OK05M0vDk0Q4XUtwvKOzrcd3iq9uisF81M1OIcR7lEewwcLp7tuNNkM3uNna3F2JQFo97Vriy/Xl4/f1cf5VWzXyym7PHhhx4dbgYKAAA7\"\r\n    local uri = assert(URI:new(\"data:image/gif;base64,\" .. imgdata))\r\n    is(\"image/gif\", uri:data_media_type())\r\n\r\n    if Filter then\r\n        local gotdata = uri:data_bytes()\r\n        is(273, gotdata:len())\r\n        is(imgdata, Filter.base64_encode(gotdata))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function testcase:test_data_containing_commas ()\r\n    local uri = assert(URI:new(\"data:application/vnd-xxx-query,select_vcount,fcol_from_fieldtable/local\"))\r\n    is(\"application/vnd-xxx-query\", uri:data_media_type())\r\n    is(\"select_vcount,fcol_from_fieldtable/local\", uri:data_bytes())\r\n    uri:data_bytes(\"\")\r\n    is(\"data:application/vnd-xxx-query,\", tostring(uri))\r\n\r\n    uri:data_bytes(\"a,b\")\r\n    uri:data_media_type(nil)\r\n    is(\"data:,a,b\", tostring(uri))\r\n\r\n    is(\"a,b\", uri:data_bytes(nil))\r\n    is(\"\", uri:data_bytes())\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function testcase:test_automatic_selection_of_uri_or_base64_encoding ()\r\n    local uri = assert(URI:new(\"data:,\"))\r\n    uri:data_bytes(\"\")\r\n    is(\"data:,\", tostring(uri))\r\n\r\n    uri:data_bytes(\">\")\r\n    is(\"data:,%3E\", tostring(uri))\r\n    is(\">\", uri:data_bytes())\r\n\r\n    uri:data_bytes(\">>>>>\")\r\n    is(\"data:,%3E%3E%3E%3E%3E\", tostring(uri))\r\n\r\n    if Filter then\r\n        uri:data_bytes(\">>>>>>\")\r\n        is(\"data:;base64,Pj4+Pj4+\", tostring(uri))\r\n\r\n        uri:data_media_type(\"text/plain;foo=bar\")\r\n        is(\"data:text/plain;foo=bar;base64,Pj4+Pj4+\", tostring(uri))\r\n\r\n        uri:data_media_type(\"foo\")\r\n        is(\"data:foo;base64,Pj4+Pj4+\", tostring(uri))\r\n\r\n        uri:data_bytes((\">\"):rep(3000))\r\n        is(\"data:foo;base64,\" .. (\"Pj4+\"):rep(1000), tostring(uri))\r\n        is((\">\"):rep(3000), uri:data_bytes())\r\n    else\r\n        uri:data_bytes(\">>>>>>\")\r\n        is(\"data:,%3E%3E%3E%3E%3E%3E\", tostring(uri))\r\n        uri:data_media_type(\"foo\")\r\n        is(\"data:foo,%3E%3E%3E%3E%3E%3E\", tostring(uri))\r\n    end\r\n\r\n    uri:data_media_type(nil)\r\n    uri:data_bytes(nil)\r\n    is(\"data:,\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function testcase:test_bad_uri ()\r\n    is_bad_uri(\"missing comma\", \"data:foo\")\r\n    is_bad_uri(\"no path at all\", \"data:\")\r\n    is_bad_uri(\"has host\", \"data://host/,\")\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function testcase:test_set_path ()\r\n    local uri = assert(URI:new(\"data:image/gif,foobar\"))\r\n    is(\"image/gif,foobar\", uri:path(\"image/jpeg;foo=bar,x y,?\"))\r\n    is(\"image/jpeg;foo=bar,x%20y,%3F\", uri:path(\",blah\"))\r\n    is(\",blah\", uri:path(\",\"))\r\n    is(\",\", uri:path())\r\n    is(\"data:,\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function testcase:test_set_path_bad ()\r\n    local uri = assert(URI:new(\"data:image/gif,foobar\"))\r\n    assert_error(\"no path\", function () uri:path(nil) end)\r\n    assert_error(\"empty path\", function () uri:path(\"\") end)\r\n    assert_error(\"no comma\", function () uri:path(\"foo;bar\") end)\r\n    assert_error(\"bad base64 encoding\", function () uri:path(\";base64,x_0\") end)\r\n    is(\"image/gif,foobar\", uri:path())\r\n    is(\"data:image/gif,foobar\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function testcase:test_set_disallowed_stuff ()\r\n    local uri = assert(URI:new(\"data:,\"))\r\n    assert_error(\"can't set userinfo\", function () uri:userinfo(\"x\") end)\r\n    assert_error(\"can't set host\", function () uri:host(\"x\") end)\r\n    assert_error(\"can't set port\", function () uri:port(23) end)\r\n    is(\"data:,\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function () uri:path(nil) end",
    "type": "function"
  }, {
    "id": 13,
    "text": "function () uri:path(\"\") end",
    "type": "function"
  }, {
    "id": 14,
    "text": "function () uri:path(\"foo;bar\") end",
    "type": "function"
  }, {
    "id": 15,
    "text": "function () uri:path(\";base64,x_0\") end",
    "type": "function"
  }, {
    "id": 16,
    "text": "function () uri:userinfo(\"x\") end",
    "type": "function"
  }, {
    "id": 17,
    "text": "function () uri:host(\"x\") end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function () uri:port(23) end",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "function container"
  }, {
    "id": 20,
    "text": "local function _valid_base64 (data) return data:find(\"^[0-9a-zA-Z/+]*$\") end",
    "type": "function"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "local function _split_path (path)\r\n    local _, _, mediatype, data = path:find(\"^([^,]*),(.*)\")\r\n    if not mediatype then return \"must have comma in path\" end\r\n    local base64 = false\r\n    if mediatype:find(\";base64$\") then\r\n        base64 = true\r\n        mediatype = mediatype:sub(1, -8)\r\n    end\r\n    if base64 and not _valid_base64(data) then\r\n        return \"illegal character in base64 encoding\"\r\n    end\r\n    return nil, mediatype, base64, data\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local _, _, mediatype, data = path:find(\"^([^,]*),(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if not mediatype then return \"must have comma in path\" end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local base64 = false",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if mediatype:find(\";base64$\") then\r\n        base64 = true\r\n        mediatype = mediatype:sub(1, -8)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "base64 = true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "mediatype = mediatype:sub(1, -8)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if base64 and not _valid_base64(data) then\r\n        return \"illegal character in base64 encoding\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function M.init (self)\r\n    if M._SUPER.host(self) then\r\n        return nil, \"data URIs may not have authority parts\"\r\n    end\r\n    local err, mediatype, base64, data = _split_path(M._SUPER.path(self))\r\n    if err then return nil, \"invalid data URI (\" .. err .. \")\" end\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "if M._SUPER.host(self) then\r\n        return nil, \"data URIs may not have authority parts\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local err, mediatype, base64, data = _split_path(M._SUPER.path(self))",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if err then return nil, \"invalid data URI (\" .. err .. \")\" end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function M.data_media_type (self, ...)\r\n    local _, old, base64, data = _split_path(M._SUPER.path(self))\r\n\r\n    if select('#', ...) > 0 then\r\n        local new = ... or \"\"\r\n        new = Util.uri_encode(new, \"^A-Za-z0-9%-._~!$&'()*+;=:@/\")\r\n        if base64 then new = new .. \";base64\" end\r\n        M._SUPER.path(self, new .. \",\" .. data)\r\n    end\r\n\r\n    if old ~= \"\" then\r\n        if old:find(\"^;\") then old = \"text/plain\" .. old end\r\n        return Util.uri_decode(old)\r\n    else\r\n        return \"text/plain;charset=US-ASCII\"    -- default type\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local _, old, base64, data = _split_path(M._SUPER.path(self))",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if select('#', ...) > 0 then\r\n        local new = ... or \"\"\r\n        new = Util.uri_encode(new, \"^A-Za-z0-9%-._~!$&'()*+;=:@/\")\r\n        if base64 then new = new .. \";base64\" end\r\n        M._SUPER.path(self, new .. \",\" .. data)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local new = ... or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "new = Util.uri_encode(new, \"^A-Za-z0-9%-._~!$&'()*+;=:@/\")",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if base64 then new = new .. \";base64\" end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "new = new .. \";base64\"",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "M._SUPER.path(self, new .. \",\" .. data)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "if old ~= \"\" then\r\n        if old:find(\"^;\") then old = \"text/plain\" .. old end\r\n        return Util.uri_decode(old)\r\n    else\r\n        return \"text/plain;charset=US-ASCII\"    -- default type\r\n    end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "if old:find(\"^;\") then old = \"text/plain\" .. old end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "old = \"text/plain\" .. old",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function _urienc_len (s)\r\n    local num_unsafe_chars = s:gsub(\"[A-Za-z0-9%-._~!$&'()*+,;=:@/]\", \"\"):len()\r\n    local num_safe_chars = s:len() - num_unsafe_chars\r\n    return num_safe_chars + num_unsafe_chars * 3\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local num_unsafe_chars = s:gsub(\"[A-Za-z0-9%-._~!$&'()*+,;=:@/]\", \"\"):len()",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local num_safe_chars = s:len() - num_unsafe_chars",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function _base64_len (s)\r\n    local num_blocks = (s:len() + 2) / 3\r\n    num_blocks = num_blocks - num_blocks % 1\r\n    return num_blocks * 4\r\n           + 7      -- because of \";base64\" marker\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local num_blocks = (s:len() + 2) / 3",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "num_blocks = num_blocks - num_blocks % 1",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function _do_filter (algorithm, input)\r\n    return Filter[algorithm](input)\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function M.data_bytes (self, ...)\r\n    local _, mediatype, base64, old = _split_path(M._SUPER.path(self))\r\n    if base64 then\r\n        if not Filter then\r\n            error(\"'datafilter' Lua module required to decode base64 data\")\r\n        end\r\n        old = _do_filter(\"base64_decode\", old)\r\n    else\r\n        old = Util.uri_decode(old)\r\n    end\r\n\r\n    if select('#', ...) > 0 then\r\n        local new = ... or \"\"\r\n        local urienc_len = _urienc_len(new)\r\n        local base64_len = _base64_len(new)\r\n        if base64_len < urienc_len and Filter then\r\n            mediatype = mediatype .. \";base64\"\r\n            new = _do_filter(\"base64_encode\", new)\r\n        else\r\n            new = new:gsub(\"%%\", \"%%25\")\r\n        end\r\n        M._SUPER.path(self, mediatype .. \",\" .. new)\r\n    end\r\n\r\n    return old\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local _, mediatype, base64, old = _split_path(M._SUPER.path(self))",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if base64 then\r\n        if not Filter then\r\n            error(\"'datafilter' Lua module required to decode base64 data\")\r\n        end\r\n        old = _do_filter(\"base64_decode\", old)\r\n    else\r\n        old = Util.uri_decode(old)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "if not Filter then\r\n            error(\"'datafilter' Lua module required to decode base64 data\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "error(\"'datafilter' Lua module required to decode base64 data\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "old = _do_filter(\"base64_decode\", old)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "old = Util.uri_decode(old)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if select('#', ...) > 0 then\r\n        local new = ... or \"\"\r\n        local urienc_len = _urienc_len(new)\r\n        local base64_len = _base64_len(new)\r\n        if base64_len < urienc_len and Filter then\r\n            mediatype = mediatype .. \";base64\"\r\n            new = _do_filter(\"base64_encode\", new)\r\n        else\r\n            new = new:gsub(\"%%\", \"%%25\")\r\n        end\r\n        M._SUPER.path(self, mediatype .. \",\" .. new)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local urienc_len = _urienc_len(new)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local base64_len = _base64_len(new)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if base64_len < urienc_len and Filter then\r\n            mediatype = mediatype .. \";base64\"\r\n            new = _do_filter(\"base64_encode\", new)\r\n        else\r\n            new = new:gsub(\"%%\", \"%%25\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "mediatype = mediatype .. \";base64\"",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "new = _do_filter(\"base64_encode\", new)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "new = new:gsub(\"%%\", \"%%25\")",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "M._SUPER.path(self, mediatype .. \",\" .. new)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function M.path (self, ...)\r\n    local old = M._SUPER.path(self)\r\n\r\n    if select('#', ...) > 0 then\r\n        local new = ...\r\n        if not new then error(\"there must be a path in a data URI\") end\r\n        local err = _split_path(new)\r\n        if err then error(\"invalid data URI (\" .. err .. \")\") end\r\n        M._SUPER.path(self, new)\r\n    end\r\n\r\n    return old\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local old = M._SUPER.path(self)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if select('#', ...) > 0 then\r\n        local new = ...\r\n        if not new then error(\"there must be a path in a data URI\") end\r\n        local err = _split_path(new)\r\n        if err then error(\"invalid data URI (\" .. err .. \")\") end\r\n        M._SUPER.path(self, new)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "local new = ...",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if not new then error(\"there must be a path in a data URI\") end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "error(\"there must be a path in a data URI\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "local err = _split_path(new)",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "if err then error(\"invalid data URI (\" .. err .. \")\") end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "error(\"invalid data URI (\" .. err .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "M._SUPER.path(self, new)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "uri_decode",
    "type": "global function"
  }, {
    "id": 86,
    "text": "uri_encode",
    "type": "global function"
  }, {
    "id": 87,
    "text": "subclass_of",
    "type": "global function"
  }, {
    "id": 88,
    "text": "uri_part_not_allowed",
    "type": "global function"
  }, {
    "id": 89,
    "text": "attempt_require",
    "type": "global function"
  }, {
    "id": 90,
    "text": "M._SUPER.path",
    "type": "global function"
  }, {
    "id": 91,
    "text": "TestCase",
    "type": "global function"
  }, {
    "id": 92,
    "text": "error",
    "type": "global function"
  }, {
    "id": 93,
    "text": "Filter[algorithm]",
    "type": "global function"
  }, {
    "id": 94,
    "text": "select",
    "type": "global function"
  }, {
    "id": 95,
    "text": "M._SUPER.host",
    "type": "global function"
  }, {
    "id": 96,
    "text": "require",
    "type": "global function"
  }, {
    "id": 97,
    "text": "run",
    "type": "global function"
  }, {
    "id": 98,
    "text": "",
    "type": "variable container"
  }, {
    "id": 99,
    "text": "",
    "type": "require container"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "global variable"
  }, {
    "id": 105,
    "text": "",
    "type": "variable container"
  }, {
    "id": 106,
    "text": "",
    "type": "require container"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 109,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 110,
    "text": "",
    "type": "string"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "interface container"
  }, {
    "id": 116,
    "text": "",
    "type": "interface"
  }, {
    "id": 117,
    "text": "",
    "type": "interface"
  }, {
    "id": 118,
    "text": "",
    "type": "interface"
  }, {
    "id": 119,
    "text": "",
    "type": "interface"
  }, {
    "id": 120,
    "text": "",
    "type": "interface"
  }, {
    "id": 121,
    "text": "",
    "type": "interface"
  }, {
    "id": 122,
    "text": "",
    "type": "interface"
  }, {
    "id": 123,
    "text": "",
    "type": "interface"
  }, {
    "id": 124,
    "text": "",
    "type": "interface"
  }, {
    "id": 125,
    "text": "",
    "type": "interface"
  }, {
    "id": 126,
    "text": "",
    "type": "interface"
  }, {
    "id": 127,
    "text": "",
    "type": "interface"
  }, {
    "id": 128,
    "text": "",
    "type": "interface"
  }, {
    "id": 129,
    "text": "",
    "type": "interface"
  }, {
    "id": 130,
    "text": "",
    "type": "interface"
  }, {
    "id": 131,
    "text": "",
    "type": "interface"
  }, {
    "id": 132,
    "text": "",
    "type": "interface"
  }, {
    "id": 133,
    "text": "",
    "type": "interface"
  }, {
    "id": 134,
    "text": "",
    "type": "interface"
  } ]
}