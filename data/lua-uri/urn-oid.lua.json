{
  "_filename": "urn-oid.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-uri/test/urn-oid.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 3,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 20
  }, {
    "from": 3,
    "label": "has",
    "to": 21
  }, {
    "from": 3,
    "label": "has",
    "to": 22
  }, {
    "from": 3,
    "label": "has",
    "to": 23
  }, {
    "from": 3,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 5
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 41
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 33
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 35
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 37
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 41
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 66,
    "label": "has",
    "to": 48
  }, {
    "from": 66,
    "label": "has",
    "to": 50
  }, {
    "from": 66,
    "label": "has",
    "to": 5
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 43
  }, {
    "from": 77,
    "label": "has",
    "to": 45
  }, {
    "from": 78,
    "label": "has",
    "to": 47
  }, {
    "from": 79,
    "label": "has",
    "to": 56
  }, {
    "from": 80,
    "label": "has",
    "to": 68
  }, {
    "from": 81,
    "label": "has",
    "to": 70
  }, {
    "from": 82,
    "label": "has",
    "to": 72
  }, {
    "from": 83,
    "label": "has",
    "to": 74
  }, {
    "from": 3,
    "label": "calls",
    "to": 90
  }, {
    "from": 3,
    "label": "calls",
    "to": 90
  }, {
    "from": 3,
    "label": "calls",
    "to": 90
  }, {
    "from": 3,
    "label": "calls",
    "to": 90
  }, {
    "from": 3,
    "label": "calls",
    "to": 90
  }, {
    "from": 40,
    "label": "calls",
    "to": 90
  }, {
    "from": 59,
    "label": "calls",
    "to": 90
  }, {
    "from": 59,
    "label": "calls",
    "to": 90
  }, {
    "from": 59,
    "label": "calls",
    "to": 90
  }, {
    "from": 59,
    "label": "calls",
    "to": 90
  }, {
    "from": 66,
    "label": "calls",
    "to": 90
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 3,
    "label": "calls",
    "to": 91
  }, {
    "from": 32,
    "label": "calls",
    "to": 91
  }, {
    "from": 32,
    "label": "calls",
    "to": 91
  }, {
    "from": 32,
    "label": "calls",
    "to": 91
  }, {
    "from": 32,
    "label": "calls",
    "to": 91
  }, {
    "from": 32,
    "label": "calls",
    "to": 91
  }, {
    "from": 40,
    "label": "calls",
    "to": 91
  }, {
    "from": 40,
    "label": "calls",
    "to": 91
  }, {
    "from": 40,
    "label": "calls",
    "to": 91
  }, {
    "from": 52,
    "label": "calls",
    "to": 91
  }, {
    "from": 52,
    "label": "calls",
    "to": 91
  }, {
    "from": 52,
    "label": "calls",
    "to": 91
  }, {
    "from": 52,
    "label": "calls",
    "to": 91
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 66,
    "label": "calls",
    "to": 91
  }, {
    "from": 66,
    "label": "calls",
    "to": 91
  }, {
    "from": 84,
    "label": "calls",
    "to": 88
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 32,
    "label": "calls",
    "to": 85
  }, {
    "from": 40,
    "label": "calls",
    "to": 85
  }, {
    "from": 52,
    "label": "calls",
    "to": 85
  }, {
    "from": 59,
    "label": "calls",
    "to": 85
  }, {
    "from": 66,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 86
  }, {
    "from": 3,
    "label": "calls",
    "to": 86
  }, {
    "from": 3,
    "label": "calls",
    "to": 86
  }, {
    "from": 3,
    "label": "calls",
    "to": 86
  }, {
    "from": 3,
    "label": "calls",
    "to": 86
  }, {
    "from": 32,
    "label": "calls",
    "to": 86
  }, {
    "from": 32,
    "label": "calls",
    "to": 86
  }, {
    "from": 40,
    "label": "calls",
    "to": 86
  }, {
    "from": 52,
    "label": "calls",
    "to": 86
  }, {
    "from": 52,
    "label": "calls",
    "to": 86
  }, {
    "from": 59,
    "label": "calls",
    "to": 86
  }, {
    "from": 59,
    "label": "calls",
    "to": 86
  }, {
    "from": 59,
    "label": "calls",
    "to": 86
  }, {
    "from": 66,
    "label": "calls",
    "to": 86
  }, {
    "from": 25,
    "label": "calls",
    "to": 89
  }, {
    "from": 25,
    "label": "calls",
    "to": 89
  }, {
    "from": 25,
    "label": "calls",
    "to": 89
  }, {
    "from": 25,
    "label": "calls",
    "to": 89
  }, {
    "from": 25,
    "label": "calls",
    "to": 89
  }, {
    "from": 84,
    "label": "calls",
    "to": 92
  }, {
    "from": 84,
    "label": "calls",
    "to": 92
  }, {
    "from": 40,
    "label": "calls",
    "to": 87
  }, {
    "from": 40,
    "label": "calls",
    "to": 87
  }, {
    "from": 40,
    "label": "calls",
    "to": 87
  }, {
    "from": 52,
    "label": "calls",
    "to": 87
  }, {
    "from": 66,
    "label": "calls",
    "to": 87
  }, {
    "from": 66,
    "label": "calls",
    "to": 87
  }, {
    "from": 66,
    "label": "calls",
    "to": 87
  }, {
    "from": 66,
    "label": "calls",
    "to": 87
  }, {
    "from": 84,
    "label": "calls",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 84
  }, {
    "from": 84,
    "label": "declares",
    "to": 3
  }, {
    "from": 84,
    "label": "declares",
    "to": 25
  }, {
    "from": 84,
    "label": "declares",
    "to": 32
  }, {
    "from": 84,
    "label": "declares",
    "to": 40
  }, {
    "from": 84,
    "label": "declares",
    "to": 52
  }, {
    "from": 84,
    "label": "declares",
    "to": 59
  }, {
    "from": 84,
    "label": "declares",
    "to": 66
  }, {
    "from": 84,
    "label": "declares",
    "to": 76
  }, {
    "from": 84,
    "label": "declares",
    "to": 77
  }, {
    "from": 84,
    "label": "declares",
    "to": 78
  }, {
    "from": 84,
    "label": "declares",
    "to": 79
  }, {
    "from": 84,
    "label": "declares",
    "to": 80
  }, {
    "from": 84,
    "label": "declares",
    "to": 81
  }, {
    "from": 84,
    "label": "declares",
    "to": 82
  }, {
    "from": 84,
    "label": "declares",
    "to": 83
  }, {
    "from": 1,
    "label": "contains",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 96
  }, {
    "from": 95,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 96,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 2
  }, {
    "from": 96,
    "label": "initializes",
    "to": 94
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 83
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "urn-oid",
    "type": "module"
  }, {
    "id": 2,
    "text": "uri",
    "type": "module"
  }, {
    "id": 3,
    "text": "function testcase:test_parse_and_normalize ()\r\n    local uri = assert(URI:new(\"urn:OId:1.3.50403060.0.23\"))\r\n    is(\"uri.urn.oid\", uri._NAME)\r\n    is(\"urn:oid:1.3.50403060.0.23\", uri:uri())\r\n    is(\"urn:oid:1.3.50403060.0.23\", tostring(uri))\r\n    is(\"oid\", uri:nid())\r\n    is(\"1.3.50403060.0.23\", uri:nss())\r\n    is(\"oid:1.3.50403060.0.23\", uri:path())\r\n    assert_array_shallow_equal({ 1, 3, 50403060, 0, 23 }, uri:oid_numbers())\r\n\r\n    -- Examples from RFC 3061 section 3\r\n    uri = assert(URI:new(\"urn:oid:1.3.6.1\"))\r\n    is(\"urn:oid:1.3.6.1\", tostring(uri))\r\n    assert_array_shallow_equal({ 1, 3, 6, 1 }, uri:oid_numbers())\r\n    uri = assert(URI:new(\"urn:oid:1.3.6.1.4.1\"))\r\n    is(\"urn:oid:1.3.6.1.4.1\", tostring(uri))\r\n    assert_array_shallow_equal({ 1, 3, 6, 1, 4, 1 }, uri:oid_numbers())\r\n    uri = assert(URI:new(\"urn:oid:1.3.6.1.2.1.27\"))\r\n    is(\"urn:oid:1.3.6.1.2.1.27\", tostring(uri))\r\n    assert_array_shallow_equal({ 1, 3, 6, 1, 2, 1, 27 }, uri:oid_numbers())\r\n    uri = assert(URI:new(\"URN:OID:0.9.2342.19200300.100.4\"))\r\n    is(\"urn:oid:0.9.2342.19200300.100.4\", tostring(uri))\r\n    assert_array_shallow_equal({ 0, 9, 2342, 19200300, 100, 4 },\r\n                               uri:oid_numbers())\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local uri = assert(URI:new(\"urn:OId:1.3.50403060.0.23\"))",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "is(\"uri.urn.oid\", uri._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "is(\"urn:oid:1.3.50403060.0.23\", uri:uri())",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "is(\"urn:oid:1.3.50403060.0.23\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "is(\"oid\", uri:nid())",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "is(\"1.3.50403060.0.23\", uri:nss())",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "is(\"oid:1.3.50403060.0.23\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert_array_shallow_equal({ 1, 3, 50403060, 0, 23 }, uri:oid_numbers())",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "uri = assert(URI:new(\"urn:oid:1.3.6.1\"))",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "is(\"urn:oid:1.3.6.1\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert_array_shallow_equal({ 1, 3, 6, 1 }, uri:oid_numbers())",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "uri = assert(URI:new(\"urn:oid:1.3.6.1.4.1\"))",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "is(\"urn:oid:1.3.6.1.4.1\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert_array_shallow_equal({ 1, 3, 6, 1, 4, 1 }, uri:oid_numbers())",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "uri = assert(URI:new(\"urn:oid:1.3.6.1.2.1.27\"))",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "is(\"urn:oid:1.3.6.1.2.1.27\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert_array_shallow_equal({ 1, 3, 6, 1, 2, 1, 27 }, uri:oid_numbers())",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "uri = assert(URI:new(\"URN:OID:0.9.2342.19200300.100.4\"))",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "is(\"urn:oid:0.9.2342.19200300.100.4\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert_array_shallow_equal({ 0, 9, 2342, 19200300, 100, 4 },\r\n                               uri:oid_numbers())",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function testcase:test_bad_syntax ()\r\n    is_bad_uri(\"empty nss\", \"urn:oid:\")\r\n    is_bad_uri(\"bad character\", \"urn:oid:1.2.x.3\")\r\n    is_bad_uri(\"missing number\", \"urn:oid:1.2..3\")\r\n    is_bad_uri(\"leading zero\", \"urn:oid:1.2.03.3\")\r\n    is_bad_uri(\"leading zero at start\", \"urn:oid:01.2.3.3\")\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "is_bad_uri(\"empty nss\", \"urn:oid:\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "is_bad_uri(\"bad character\", \"urn:oid:1.2.x.3\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "is_bad_uri(\"missing number\", \"urn:oid:1.2..3\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "is_bad_uri(\"leading zero\", \"urn:oid:1.2.03.3\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "is_bad_uri(\"leading zero at start\", \"urn:oid:01.2.3.3\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function testcase:test_set_nss ()\r\n    local uri = assert(URI:new(\"urn:oid:0.1.23\"))\r\n    is(\"0.1.23\", uri:nss(\"1\"))\r\n    is(\"urn:oid:1\", tostring(uri))\r\n    is(\"1\", uri:nss(\"234252345.340.4.0\"))\r\n    is(\"urn:oid:234252345.340.4.0\", tostring(uri))\r\n    is(\"234252345.340.4.0\", uri:nss())\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local uri = assert(URI:new(\"urn:oid:0.1.23\"))",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "is(\"0.1.23\", uri:nss(\"1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "is(\"urn:oid:1\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "is(\"1\", uri:nss(\"234252345.340.4.0\"))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "is(\"urn:oid:234252345.340.4.0\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "is(\"234252345.340.4.0\", uri:nss())",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function testcase:test_set_bad_nss ()\r\n    local uri = assert(URI:new(\"urn:OID:0.1.23\"))\r\n    assert_error(\"set NSS to non-string value\", function () uri:nss({}) end)\r\n    assert_error(\"set NSS to empty\", function () uri:nss(\"\") end)\r\n    assert_error(\"set NSS to bad char\", function () uri:nss(\"x\") end)\r\n\r\n    -- None of that should have had any affect\r\n    is(\"urn:oid:0.1.23\", tostring(uri))\r\n    is(\"0.1.23\", uri:nss())\r\n    assert_array_shallow_equal({ 0, 1, 23 }, uri:oid_numbers())\r\n    is(\"uri.urn.oid\", uri._NAME)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local uri = assert(URI:new(\"urn:OID:0.1.23\"))",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "assert_error(\"set NSS to non-string value\", function () uri:nss({}) end)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "uri:nss({})",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert_error(\"set NSS to empty\", function () uri:nss(\"\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "uri:nss(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert_error(\"set NSS to bad char\", function () uri:nss(\"x\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "uri:nss(\"x\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "is(\"urn:oid:0.1.23\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "is(\"0.1.23\", uri:nss())",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert_array_shallow_equal({ 0, 1, 23 }, uri:oid_numbers())",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function testcase:test_set_path ()\r\n    local uri = assert(URI:new(\"urn:OID:0.1.23\"))\r\n    is(\"oid:0.1.23\", uri:path(\"OId:23.1.0\"))\r\n    is(\"urn:oid:23.1.0\", tostring(uri))\r\n\r\n    assert_error(\"bad path\", function () uri:path(\"oid:1.02\") end)\r\n    is(\"urn:oid:23.1.0\", tostring(uri))\r\n    is(\"oid:23.1.0\", uri:path())\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "is(\"oid:0.1.23\", uri:path(\"OId:23.1.0\"))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "is(\"urn:oid:23.1.0\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert_error(\"bad path\", function () uri:path(\"oid:1.02\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "uri:path(\"oid:1.02\")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "is(\"oid:23.1.0\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function testcase:test_set_oid_numbers ()\r\n    local uri = assert(URI:new(\"urn:oid:0.1.23\"))\r\n    assert_array_shallow_equal({ 0, 1, 23 }, uri:oid_numbers({ 1 }))\r\n    is(\"urn:oid:1\", tostring(uri))\r\n    assert_array_shallow_equal({ 1 }, uri:oid_numbers({ 234252345, 340, 4, 0 }))\r\n    is(\"urn:oid:234252345.340.4.0\", tostring(uri))\r\n    assert_array_shallow_equal({ 234252345, 340, 4, 0 },\r\n                               uri:oid_numbers({ 23.42 }))\r\n    is(\"urn:oid:23\", tostring(uri))\r\n    assert_array_shallow_equal({ 23 }, uri:oid_numbers())\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "assert_array_shallow_equal({ 0, 1, 23 }, uri:oid_numbers({ 1 }))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert_array_shallow_equal({ 1 }, uri:oid_numbers({ 234252345, 340, 4, 0 }))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_array_shallow_equal({ 234252345, 340, 4, 0 },\r\n                               uri:oid_numbers({ 23.42 }))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "is(\"urn:oid:23\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert_array_shallow_equal({ 23 }, uri:oid_numbers())",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function testcase:test_set_bad_oid_numbers ()\r\n    local uri = assert(URI:new(\"urn:OID:0.1.23\"))\r\n    assert_error(\"set OID numbers to non-table value\",\r\n                 function () uri:oid_numbers(\"1\") end)\r\n    assert_error(\"set OID to empty list of numbers\",\r\n                 function () uri:oid_numbers({}) end)\r\n    assert_error(\"set OID number to negative number\",\r\n                 function () uri:oid_numbers({ -23 }) end)\r\n    assert_error(\"set OID number array containing bad type\",\r\n                 function () uri:oid_numbers({ \"x\" }) end)\r\n\r\n    -- None of that should have had any affect\r\n    is(\"urn:oid:0.1.23\", tostring(uri))\r\n    assert_array_shallow_equal({ 0, 1, 23 }, uri:oid_numbers())\r\n    is(\"uri.urn.oid\", uri._NAME)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "assert_error(\"set OID numbers to non-table value\",\r\n                 function () uri:oid_numbers(\"1\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "uri:oid_numbers(\"1\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert_error(\"set OID to empty list of numbers\",\r\n                 function () uri:oid_numbers({}) end)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "uri:oid_numbers({})",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert_error(\"set OID number to negative number\",\r\n                 function () uri:oid_numbers({ -23 }) end)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "uri:oid_numbers({ -23 })",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert_error(\"set OID number array containing bad type\",\r\n                 function () uri:oid_numbers({ \"x\" }) end)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "uri:oid_numbers({ \"x\" })",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function () uri:nss({}) end",
    "type": "function"
  }, {
    "id": 77,
    "text": "function () uri:nss(\"\") end",
    "type": "function"
  }, {
    "id": 78,
    "text": "function () uri:nss(\"x\") end",
    "type": "function"
  }, {
    "id": 79,
    "text": "function () uri:path(\"oid:1.02\") end",
    "type": "function"
  }, {
    "id": 80,
    "text": "function () uri:oid_numbers(\"1\") end",
    "type": "function"
  }, {
    "id": 81,
    "text": "function () uri:oid_numbers({}) end",
    "type": "function"
  }, {
    "id": 82,
    "text": "function () uri:oid_numbers({ -23 }) end",
    "type": "function"
  }, {
    "id": 83,
    "text": "function () uri:oid_numbers({ \"x\" }) end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "function container"
  }, {
    "id": 85,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 86,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 87,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 88,
    "text": "TestCase",
    "type": "global function"
  }, {
    "id": 89,
    "text": "is_bad_uri",
    "type": "global function"
  }, {
    "id": 90,
    "text": "assert_array_shallow_equal",
    "type": "global function"
  }, {
    "id": 91,
    "text": "is",
    "type": "global function"
  }, {
    "id": 92,
    "text": "require",
    "type": "global function"
  }, {
    "id": 93,
    "text": "run",
    "type": "global function"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "variable container"
  }, {
    "id": 96,
    "text": "",
    "type": "require container"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  } ]
}