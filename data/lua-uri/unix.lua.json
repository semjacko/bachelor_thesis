{
  "_filename": "unix.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-uri/uri/file/unix.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 4,
    "label": "calls",
    "to": 22
  }, {
    "from": 4,
    "label": "calls",
    "to": 22
  }, {
    "from": 12,
    "label": "calls",
    "to": 22
  }, {
    "from": 12,
    "label": "calls",
    "to": 21
  }, {
    "from": 18,
    "label": "calls",
    "to": 23
  }, {
    "from": 18,
    "label": "calls",
    "to": 23
  }, {
    "from": 12,
    "label": "calls",
    "to": 20
  }, {
    "from": 4,
    "label": "calls",
    "to": 19
  }, {
    "from": 1,
    "label": "contains",
    "to": 18
  }, {
    "from": 18,
    "label": "declares",
    "to": 4
  }, {
    "from": 18,
    "label": "declares",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 25,
    "label": "initializes",
    "to": 27
  }, {
    "from": 27,
    "label": "assigns",
    "to": 28
  }, {
    "from": 28,
    "label": "assigns",
    "to": 29
  }, {
    "from": 29,
    "label": "assigns",
    "to": 30
  }, {
    "from": 26,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "requires",
    "to": 3
  }, {
    "from": 26,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 33
  }, {
    "from": 24,
    "label": "represents",
    "to": 34
  }, {
    "from": 33,
    "label": "provides",
    "to": 34
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "unix",
    "type": "module"
  }, {
    "id": 2,
    "text": "_util",
    "type": "module"
  }, {
    "id": 3,
    "text": "uri",
    "type": "module"
  }, {
    "id": 4,
    "text": "function M.filesystem_path (uri)\r\n    if uri:host() ~= \"\" then\r\n        error(\"a file URI with a host name can't be converted to a Unix path\")\r\n    end\r\n    local path = uri:path()\r\n    if path:find(\"%%00\") or path:find(\"%%2F\") then\r\n        error(\"Unix paths cannot contain encoded null bytes or slashes\")\r\n    end\r\n    return Util.uri_decode(path)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if uri:host() ~= \"\" then\r\n        error(\"a file URI with a host name can't be converted to a Unix path\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "error(\"a file URI with a host name can't be converted to a Unix path\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local path = uri:path()",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if path:find(\"%%00\") or path:find(\"%%2F\") then\r\n        error(\"Unix paths cannot contain encoded null bytes or slashes\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "error(\"Unix paths cannot contain encoded null bytes or slashes\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function M.make_file_uri (path)\r\n    if not path:find(\"^/\") then\r\n        error(\"Unix relative paths can't be converted to file URIs\")\r\n    end\r\n    path = path:gsub(\"//+\", \"/\")\r\n    path = Util.uri_encode(path, \"^A-Za-z0-9%-._~!$&'()*+,;=:@/\")\r\n    return assert(URI:new(\"file://\" .. path))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "if not path:find(\"^/\") then\r\n        error(\"Unix relative paths can't be converted to file URIs\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "error(\"Unix relative paths can't be converted to file URIs\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "path = path:gsub(\"//+\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "path = Util.uri_encode(path, \"^A-Za-z0-9%-._~!$&'()*+,;=:@/\")",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "",
    "type": "function container"
  }, {
    "id": 19,
    "text": "uri_decode",
    "type": "global function"
  }, {
    "id": 20,
    "text": "uri_encode",
    "type": "global function"
  }, {
    "id": 21,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 22,
    "text": "error",
    "type": "global function"
  }, {
    "id": 23,
    "text": "require",
    "type": "global function"
  }, {
    "id": 24,
    "text": "",
    "type": "local variable"
  }, {
    "id": 25,
    "text": "",
    "type": "variable container"
  }, {
    "id": 26,
    "text": "",
    "type": "require container"
  }, {
    "id": 27,
    "text": "",
    "type": "local variable"
  }, {
    "id": 28,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 29,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 30,
    "text": "",
    "type": "string"
  }, {
    "id": 31,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 32,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "interface container"
  }, {
    "id": 34,
    "text": "",
    "type": "interface"
  } ]
}