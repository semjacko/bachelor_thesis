{
  "_filename": "_generic.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-uri/test/_generic.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 3,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 20
  }, {
    "from": 3,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 3,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 25,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 25,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 25,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 25,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 25,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 43,
    "label": "has",
    "to": 50
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 60
  }, {
    "from": 52,
    "label": "has",
    "to": 61
  }, {
    "from": 52,
    "label": "has",
    "to": 62
  }, {
    "from": 52,
    "label": "has",
    "to": 63
  }, {
    "from": 52,
    "label": "has",
    "to": 64
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 66,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 66,
    "label": "has",
    "to": 78
  }, {
    "from": 66,
    "label": "has",
    "to": 55
  }, {
    "from": 66,
    "label": "has",
    "to": 56
  }, {
    "from": 66,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 91,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 92
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 101,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 113,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 113,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 129
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 130
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 131
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 132
  }, {
    "from": 124,
    "label": "has",
    "to": 133
  }, {
    "from": 124,
    "label": "has",
    "to": 134
  }, {
    "from": 124,
    "label": "has",
    "to": 135
  }, {
    "from": 124,
    "label": "has",
    "to": 136
  }, {
    "from": 124,
    "label": "has",
    "to": 137
  }, {
    "from": 124,
    "label": "has",
    "to": 138
  }, {
    "from": 124,
    "label": "has",
    "to": 139
  }, {
    "from": 124,
    "label": "has",
    "to": 140
  }, {
    "from": 124,
    "label": "has",
    "to": 141
  }, {
    "from": 124,
    "label": "has",
    "to": 142
  }, {
    "from": 124,
    "label": "has",
    "to": 143
  }, {
    "from": 124,
    "label": "has",
    "to": 144
  }, {
    "from": 124,
    "label": "has",
    "to": 145
  }, {
    "from": 124,
    "label": "has",
    "to": 146
  }, {
    "from": 124,
    "label": "has",
    "to": 147
  }, {
    "from": 124,
    "label": "has",
    "to": 148
  }, {
    "from": 124,
    "label": "has",
    "to": 149
  }, {
    "from": 124,
    "label": "has",
    "to": 150
  }, {
    "from": 124,
    "label": "has",
    "to": 151
  }, {
    "from": 124,
    "label": "has",
    "to": 152
  }, {
    "from": 124,
    "label": "has",
    "to": 153
  }, {
    "from": 124,
    "label": "has",
    "to": 154
  }, {
    "from": 124,
    "label": "has",
    "to": 155
  }, {
    "from": 124,
    "label": "has",
    "to": 156
  }, {
    "from": 124,
    "label": "has",
    "to": 157
  }, {
    "from": 124,
    "label": "has",
    "to": 158
  }, {
    "from": 124,
    "label": "has",
    "to": 159
  }, {
    "from": 124,
    "label": "has",
    "to": 160
  }, {
    "from": 124,
    "label": "has",
    "to": 161
  }, {
    "from": 124,
    "label": "has",
    "to": 162
  }, {
    "from": 124,
    "label": "has",
    "to": 163
  }, {
    "from": 124,
    "label": "has",
    "to": 164
  }, {
    "from": 124,
    "label": "has",
    "to": 165
  }, {
    "from": 124,
    "label": "has",
    "to": 166
  }, {
    "from": 124,
    "label": "has",
    "to": 167
  }, {
    "from": 124,
    "label": "has",
    "to": 168
  }, {
    "from": 124,
    "label": "has",
    "to": 169
  }, {
    "from": 124,
    "label": "has",
    "to": 170
  }, {
    "from": 124,
    "label": "has",
    "to": 171
  }, {
    "from": 124,
    "label": "has",
    "to": 172
  }, {
    "from": 124,
    "label": "has",
    "to": 173
  }, {
    "from": 124,
    "label": "has",
    "to": 174
  }, {
    "from": 124,
    "label": "has",
    "to": 175
  }, {
    "from": 124,
    "label": "has",
    "to": 176
  }, {
    "from": 124,
    "label": "has",
    "to": 177
  }, {
    "from": 124,
    "label": "has",
    "to": 178
  }, {
    "from": 124,
    "label": "has",
    "to": 179
  }, {
    "from": 124,
    "label": "has",
    "to": 180
  }, {
    "from": 124,
    "label": "has",
    "to": 181
  }, {
    "from": 124,
    "label": "has",
    "to": 182
  }, {
    "from": 124,
    "label": "has",
    "to": 183
  }, {
    "from": 124,
    "label": "has",
    "to": 184
  }, {
    "from": 124,
    "label": "has",
    "to": 185
  }, {
    "from": 124,
    "label": "has",
    "to": 186
  }, {
    "from": 124,
    "label": "has",
    "to": 187
  }, {
    "from": 124,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 192
  }, {
    "from": 189,
    "label": "has",
    "to": 193
  }, {
    "from": 189,
    "label": "has",
    "to": 194
  }, {
    "from": 189,
    "label": "has",
    "to": 195
  }, {
    "from": 189,
    "label": "has",
    "to": 196
  }, {
    "from": 189,
    "label": "has",
    "to": 197
  }, {
    "from": 189,
    "label": "has",
    "to": 198
  }, {
    "from": 189,
    "label": "has",
    "to": 199
  }, {
    "from": 189,
    "label": "has",
    "to": 200
  }, {
    "from": 189,
    "label": "has",
    "to": 201
  }, {
    "from": 189,
    "label": "has",
    "to": 202
  }, {
    "from": 189,
    "label": "has",
    "to": 203
  }, {
    "from": 189,
    "label": "has",
    "to": 204
  }, {
    "from": 189,
    "label": "has",
    "to": 205
  }, {
    "from": 189,
    "label": "has",
    "to": 206
  }, {
    "from": 189,
    "label": "has",
    "to": 207
  }, {
    "from": 189,
    "label": "has",
    "to": 208
  }, {
    "from": 189,
    "label": "has",
    "to": 209
  }, {
    "from": 189,
    "label": "has",
    "to": 210
  }, {
    "from": 189,
    "label": "has",
    "to": 211
  }, {
    "from": 189,
    "label": "has",
    "to": 212
  }, {
    "from": 189,
    "label": "has",
    "to": 213
  }, {
    "from": 189,
    "label": "has",
    "to": 214
  }, {
    "from": 189,
    "label": "has",
    "to": 215
  }, {
    "from": 189,
    "label": "has",
    "to": 216
  }, {
    "from": 189,
    "label": "has",
    "to": 217
  }, {
    "from": 189,
    "label": "has",
    "to": 218
  }, {
    "from": 189,
    "label": "has",
    "to": 219
  }, {
    "from": 189,
    "label": "has",
    "to": 220
  }, {
    "from": 189,
    "label": "has",
    "to": 221
  }, {
    "from": 189,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 227,
    "label": "has",
    "to": 232
  }, {
    "from": 227,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 238
  }, {
    "from": 234,
    "label": "has",
    "to": 239
  }, {
    "from": 234,
    "label": "has",
    "to": 240
  }, {
    "from": 234,
    "label": "has",
    "to": 241
  }, {
    "from": 234,
    "label": "has",
    "to": 242
  }, {
    "from": 234,
    "label": "has",
    "to": 243
  }, {
    "from": 234,
    "label": "has",
    "to": 244
  }, {
    "from": 234,
    "label": "has",
    "to": 245
  }, {
    "from": 234,
    "label": "has",
    "to": 246
  }, {
    "from": 234,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 235
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 248,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 248,
    "label": "has",
    "to": 255
  }, {
    "from": 248,
    "label": "has",
    "to": 256
  }, {
    "from": 248,
    "label": "has",
    "to": 257
  }, {
    "from": 248,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 248,
    "label": "has",
    "to": 260
  }, {
    "from": 248,
    "label": "has",
    "to": 261
  }, {
    "from": 248,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 259
  }, {
    "from": 248,
    "label": "has",
    "to": 263
  }, {
    "from": 248,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 268
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 269
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 270
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 271
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 272
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 273
  }, {
    "from": 265,
    "label": "has",
    "to": 274
  }, {
    "from": 265,
    "label": "has",
    "to": 275
  }, {
    "from": 265,
    "label": "has",
    "to": 274
  }, {
    "from": 265,
    "label": "has",
    "to": 276
  }, {
    "from": 265,
    "label": "has",
    "to": 274
  }, {
    "from": 265,
    "label": "has",
    "to": 277
  }, {
    "from": 265,
    "label": "has",
    "to": 278
  }, {
    "from": 265,
    "label": "has",
    "to": 279
  }, {
    "from": 265,
    "label": "has",
    "to": 278
  }, {
    "from": 265,
    "label": "has",
    "to": 280
  }, {
    "from": 265,
    "label": "has",
    "to": 278
  }, {
    "from": 265,
    "label": "has",
    "to": 281
  }, {
    "from": 265,
    "label": "has",
    "to": 278
  }, {
    "from": 265,
    "label": "has",
    "to": 282
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 283,
    "label": "has",
    "to": 286
  }, {
    "from": 283,
    "label": "has",
    "to": 287
  }, {
    "from": 283,
    "label": "has",
    "to": 288
  }, {
    "from": 283,
    "label": "has",
    "to": 289
  }, {
    "from": 283,
    "label": "has",
    "to": 286
  }, {
    "from": 283,
    "label": "has",
    "to": 287
  }, {
    "from": 283,
    "label": "has",
    "to": 290
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 291,
    "label": "has",
    "to": 86
  }, {
    "from": 291,
    "label": "has",
    "to": 294
  }, {
    "from": 291,
    "label": "has",
    "to": 295
  }, {
    "from": 291,
    "label": "has",
    "to": 296
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 291,
    "label": "has",
    "to": 86
  }, {
    "from": 291,
    "label": "has",
    "to": 294
  }, {
    "from": 291,
    "label": "has",
    "to": 295
  }, {
    "from": 291,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 298,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 298,
    "label": "has",
    "to": 304
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 298,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 298,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 298,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 298,
    "label": "has",
    "to": 274
  }, {
    "from": 298,
    "label": "has",
    "to": 312
  }, {
    "from": 298,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 317
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 318
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 319
  }, {
    "from": 314,
    "label": "has",
    "to": 320
  }, {
    "from": 314,
    "label": "has",
    "to": 321
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 322
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 323
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 324
  }, {
    "from": 314,
    "label": "has",
    "to": 320
  }, {
    "from": 314,
    "label": "has",
    "to": 325
  }, {
    "from": 314,
    "label": "has",
    "to": 326
  }, {
    "from": 314,
    "label": "has",
    "to": 327
  }, {
    "from": 314,
    "label": "has",
    "to": 328
  }, {
    "from": 314,
    "label": "has",
    "to": 329
  }, {
    "from": 314,
    "label": "has",
    "to": 330
  }, {
    "from": 314,
    "label": "has",
    "to": 331
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 332
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 333
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 334
  }, {
    "from": 314,
    "label": "has",
    "to": 330
  }, {
    "from": 314,
    "label": "has",
    "to": 335
  }, {
    "from": 314,
    "label": "has",
    "to": 336
  }, {
    "from": 314,
    "label": "has",
    "to": 337
  }, {
    "from": 314,
    "label": "has",
    "to": 320
  }, {
    "from": 314,
    "label": "has",
    "to": 338
  }, {
    "from": 314,
    "label": "has",
    "to": 339
  }, {
    "from": 314,
    "label": "has",
    "to": 340
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 344,
    "label": "has",
    "to": 347
  }, {
    "from": 344,
    "label": "has",
    "to": 348
  }, {
    "from": 344,
    "label": "has",
    "to": 349
  }, {
    "from": 344,
    "label": "has",
    "to": 350
  }, {
    "from": 344,
    "label": "has",
    "to": 351
  }, {
    "from": 344,
    "label": "has",
    "to": 316
  }, {
    "from": 344,
    "label": "has",
    "to": 352
  }, {
    "from": 344,
    "label": "has",
    "to": 353
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 354,
    "label": "has",
    "to": 356
  }, {
    "from": 354,
    "label": "has",
    "to": 348
  }, {
    "from": 354,
    "label": "has",
    "to": 357
  }, {
    "from": 354,
    "label": "has",
    "to": 358
  }, {
    "from": 354,
    "label": "has",
    "to": 316
  }, {
    "from": 354,
    "label": "has",
    "to": 359
  }, {
    "from": 354,
    "label": "has",
    "to": 360
  }, {
    "from": 361,
    "label": "has",
    "to": 355
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 361,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 361,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 361,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 361,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 361,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 361,
    "label": "has",
    "to": 373
  }, {
    "from": 361,
    "label": "has",
    "to": 374
  }, {
    "from": 361,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 376,
    "label": "has",
    "to": 379
  }, {
    "from": 376,
    "label": "has",
    "to": 380
  }, {
    "from": 376,
    "label": "has",
    "to": 329
  }, {
    "from": 376,
    "label": "has",
    "to": 380
  }, {
    "from": 376,
    "label": "has",
    "to": 381
  }, {
    "from": 376,
    "label": "has",
    "to": 380
  }, {
    "from": 376,
    "label": "has",
    "to": 382
  }, {
    "from": 376,
    "label": "has",
    "to": 380
  }, {
    "from": 376,
    "label": "has",
    "to": 383
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 376,
    "label": "has",
    "to": 332
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 376,
    "label": "has",
    "to": 384
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 376,
    "label": "has",
    "to": 385
  }, {
    "from": 376,
    "label": "has",
    "to": 386
  }, {
    "from": 376,
    "label": "has",
    "to": 387
  }, {
    "from": 376,
    "label": "has",
    "to": 388
  }, {
    "from": 376,
    "label": "has",
    "to": 389
  }, {
    "from": 376,
    "label": "has",
    "to": 388
  }, {
    "from": 376,
    "label": "has",
    "to": 390
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 376,
    "label": "has",
    "to": 391
  }, {
    "from": 376,
    "label": "has",
    "to": 392
  }, {
    "from": 376,
    "label": "has",
    "to": 393
  }, {
    "from": 376,
    "label": "has",
    "to": 394
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 395,
    "label": "has",
    "to": 397
  }, {
    "from": 398,
    "label": "has",
    "to": 399
  }, {
    "from": 398,
    "label": "has",
    "to": 400
  }, {
    "from": 398,
    "label": "has",
    "to": 401
  }, {
    "from": 398,
    "label": "has",
    "to": 402
  }, {
    "from": 398,
    "label": "has",
    "to": 403
  }, {
    "from": 398,
    "label": "has",
    "to": 404
  }, {
    "from": 398,
    "label": "has",
    "to": 405
  }, {
    "from": 398,
    "label": "has",
    "to": 406
  }, {
    "from": 398,
    "label": "has",
    "to": 380
  }, {
    "from": 398,
    "label": "has",
    "to": 407
  }, {
    "from": 398,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 315
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 409,
    "label": "has",
    "to": 318
  }, {
    "from": 409,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 323
  }, {
    "from": 409,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 412
  }, {
    "from": 409,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 413
  }, {
    "from": 409,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 414
  }, {
    "from": 409,
    "label": "has",
    "to": 415
  }, {
    "from": 409,
    "label": "has",
    "to": 416
  }, {
    "from": 409,
    "label": "has",
    "to": 417
  }, {
    "from": 409,
    "label": "has",
    "to": 415
  }, {
    "from": 409,
    "label": "has",
    "to": 389
  }, {
    "from": 409,
    "label": "has",
    "to": 418
  }, {
    "from": 409,
    "label": "has",
    "to": 419
  }, {
    "from": 420,
    "label": "has",
    "to": 421
  }, {
    "from": 420,
    "label": "has",
    "to": 422
  }, {
    "from": 423,
    "label": "has",
    "to": 399
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 423,
    "label": "has",
    "to": 425
  }, {
    "from": 423,
    "label": "has",
    "to": 426
  }, {
    "from": 423,
    "label": "has",
    "to": 427
  }, {
    "from": 423,
    "label": "has",
    "to": 428
  }, {
    "from": 423,
    "label": "has",
    "to": 429
  }, {
    "from": 423,
    "label": "has",
    "to": 430
  }, {
    "from": 423,
    "label": "has",
    "to": 410
  }, {
    "from": 423,
    "label": "has",
    "to": 407
  }, {
    "from": 423,
    "label": "has",
    "to": 431
  }, {
    "from": 432,
    "label": "has",
    "to": 433
  }, {
    "from": 433,
    "label": "has",
    "to": 434
  }, {
    "from": 432,
    "label": "has",
    "to": 435
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 432,
    "label": "has",
    "to": 437
  }, {
    "from": 438,
    "label": "has",
    "to": 439
  }, {
    "from": 438,
    "label": "has",
    "to": 362
  }, {
    "from": 438,
    "label": "has",
    "to": 440
  }, {
    "from": 438,
    "label": "has",
    "to": 441
  }, {
    "from": 438,
    "label": "has",
    "to": 442
  }, {
    "from": 438,
    "label": "has",
    "to": 443
  }, {
    "from": 438,
    "label": "has",
    "to": 444
  }, {
    "from": 438,
    "label": "has",
    "to": 445
  }, {
    "from": 438,
    "label": "has",
    "to": 446
  }, {
    "from": 438,
    "label": "has",
    "to": 447
  }, {
    "from": 438,
    "label": "has",
    "to": 441
  }, {
    "from": 438,
    "label": "has",
    "to": 448
  }, {
    "from": 438,
    "label": "has",
    "to": 449
  }, {
    "from": 438,
    "label": "has",
    "to": 450
  }, {
    "from": 438,
    "label": "has",
    "to": 451
  }, {
    "from": 438,
    "label": "has",
    "to": 452
  }, {
    "from": 453,
    "label": "has",
    "to": 439
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 453,
    "label": "has",
    "to": 455
  }, {
    "from": 453,
    "label": "has",
    "to": 450
  }, {
    "from": 453,
    "label": "has",
    "to": 61
  }, {
    "from": 453,
    "label": "has",
    "to": 456
  }, {
    "from": 453,
    "label": "has",
    "to": 457
  }, {
    "from": 453,
    "label": "has",
    "to": 458
  }, {
    "from": 453,
    "label": "has",
    "to": 459
  }, {
    "from": 453,
    "label": "has",
    "to": 460
  }, {
    "from": 453,
    "label": "has",
    "to": 461
  }, {
    "from": 462,
    "label": "has",
    "to": 439
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 463,
    "label": "has",
    "to": 464
  }, {
    "from": 462,
    "label": "has",
    "to": 465
  }, {
    "from": 465,
    "label": "has",
    "to": 466
  }, {
    "from": 462,
    "label": "has",
    "to": 467
  }, {
    "from": 462,
    "label": "has",
    "to": 444
  }, {
    "from": 462,
    "label": "has",
    "to": 55
  }, {
    "from": 462,
    "label": "has",
    "to": 468
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 469,
    "label": "has",
    "to": 471
  }, {
    "from": 469,
    "label": "has",
    "to": 472
  }, {
    "from": 469,
    "label": "has",
    "to": 473
  }, {
    "from": 469,
    "label": "has",
    "to": 474
  }, {
    "from": 469,
    "label": "has",
    "to": 475
  }, {
    "from": 469,
    "label": "has",
    "to": 476
  }, {
    "from": 469,
    "label": "has",
    "to": 477
  }, {
    "from": 469,
    "label": "has",
    "to": 478
  }, {
    "from": 469,
    "label": "has",
    "to": 479
  }, {
    "from": 469,
    "label": "has",
    "to": 480
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 481,
    "label": "has",
    "to": 483
  }, {
    "from": 481,
    "label": "has",
    "to": 484
  }, {
    "from": 481,
    "label": "has",
    "to": 485
  }, {
    "from": 481,
    "label": "has",
    "to": 483
  }, {
    "from": 481,
    "label": "has",
    "to": 484
  }, {
    "from": 481,
    "label": "has",
    "to": 486
  }, {
    "from": 487,
    "label": "has",
    "to": 27
  }, {
    "from": 488,
    "label": "has",
    "to": 29
  }, {
    "from": 489,
    "label": "has",
    "to": 31
  }, {
    "from": 490,
    "label": "has",
    "to": 33
  }, {
    "from": 491,
    "label": "has",
    "to": 35
  }, {
    "from": 492,
    "label": "has",
    "to": 37
  }, {
    "from": 493,
    "label": "has",
    "to": 39
  }, {
    "from": 494,
    "label": "has",
    "to": 41
  }, {
    "from": 495,
    "label": "has",
    "to": 69
  }, {
    "from": 496,
    "label": "has",
    "to": 71
  }, {
    "from": 497,
    "label": "has",
    "to": 73
  }, {
    "from": 498,
    "label": "has",
    "to": 75
  }, {
    "from": 499,
    "label": "has",
    "to": 77
  }, {
    "from": 500,
    "label": "has",
    "to": 103
  }, {
    "from": 501,
    "label": "has",
    "to": 105
  }, {
    "from": 502,
    "label": "has",
    "to": 250
  }, {
    "from": 503,
    "label": "has",
    "to": 252
  }, {
    "from": 504,
    "label": "has",
    "to": 254
  }, {
    "from": 505,
    "label": "has",
    "to": 259
  }, {
    "from": 506,
    "label": "has",
    "to": 259
  }, {
    "from": 507,
    "label": "has",
    "to": 301
  }, {
    "from": 508,
    "label": "has",
    "to": 303
  }, {
    "from": 509,
    "label": "has",
    "to": 305
  }, {
    "from": 510,
    "label": "has",
    "to": 307
  }, {
    "from": 511,
    "label": "has",
    "to": 309
  }, {
    "from": 512,
    "label": "has",
    "to": 311
  }, {
    "from": 513,
    "label": "has",
    "to": 364
  }, {
    "from": 514,
    "label": "has",
    "to": 366
  }, {
    "from": 515,
    "label": "has",
    "to": 368
  }, {
    "from": 516,
    "label": "has",
    "to": 370
  }, {
    "from": 517,
    "label": "has",
    "to": 372
  }, {
    "from": 518,
    "label": "has",
    "to": 434
  }, {
    "from": 519,
    "label": "has",
    "to": 436
  }, {
    "from": 520,
    "label": "has",
    "to": 464
  }, {
    "from": 521,
    "label": "has",
    "to": 466
  }, {
    "from": 3,
    "label": "calls",
    "to": 524
  }, {
    "from": 3,
    "label": "calls",
    "to": 524
  }, {
    "from": 3,
    "label": "calls",
    "to": 524
  }, {
    "from": 438,
    "label": "calls",
    "to": 525
  }, {
    "from": 438,
    "label": "calls",
    "to": 525
  }, {
    "from": 43,
    "label": "calls",
    "to": 526
  }, {
    "from": 52,
    "label": "calls",
    "to": 526
  }, {
    "from": 66,
    "label": "calls",
    "to": 526
  }, {
    "from": 80,
    "label": "calls",
    "to": 526
  }, {
    "from": 91,
    "label": "calls",
    "to": 526
  }, {
    "from": 101,
    "label": "calls",
    "to": 526
  }, {
    "from": 109,
    "label": "calls",
    "to": 526
  }, {
    "from": 113,
    "label": "calls",
    "to": 526
  }, {
    "from": 113,
    "label": "calls",
    "to": 526
  }, {
    "from": 113,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 124,
    "label": "calls",
    "to": 526
  }, {
    "from": 223,
    "label": "calls",
    "to": 526
  }, {
    "from": 234,
    "label": "calls",
    "to": 526
  }, {
    "from": 248,
    "label": "calls",
    "to": 526
  }, {
    "from": 248,
    "label": "calls",
    "to": 526
  }, {
    "from": 248,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 265,
    "label": "calls",
    "to": 526
  }, {
    "from": 283,
    "label": "calls",
    "to": 526
  }, {
    "from": 283,
    "label": "calls",
    "to": 526
  }, {
    "from": 291,
    "label": "calls",
    "to": 526
  }, {
    "from": 291,
    "label": "calls",
    "to": 526
  }, {
    "from": 298,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 314,
    "label": "calls",
    "to": 526
  }, {
    "from": 344,
    "label": "calls",
    "to": 526
  }, {
    "from": 354,
    "label": "calls",
    "to": 526
  }, {
    "from": 361,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 376,
    "label": "calls",
    "to": 526
  }, {
    "from": 398,
    "label": "calls",
    "to": 526
  }, {
    "from": 409,
    "label": "calls",
    "to": 526
  }, {
    "from": 409,
    "label": "calls",
    "to": 526
  }, {
    "from": 409,
    "label": "calls",
    "to": 526
  }, {
    "from": 409,
    "label": "calls",
    "to": 526
  }, {
    "from": 409,
    "label": "calls",
    "to": 526
  }, {
    "from": 409,
    "label": "calls",
    "to": 526
  }, {
    "from": 409,
    "label": "calls",
    "to": 526
  }, {
    "from": 409,
    "label": "calls",
    "to": 526
  }, {
    "from": 423,
    "label": "calls",
    "to": 526
  }, {
    "from": 438,
    "label": "calls",
    "to": 526
  }, {
    "from": 438,
    "label": "calls",
    "to": 526
  }, {
    "from": 453,
    "label": "calls",
    "to": 526
  }, {
    "from": 462,
    "label": "calls",
    "to": 526
  }, {
    "from": 469,
    "label": "calls",
    "to": 526
  }, {
    "from": 469,
    "label": "calls",
    "to": 526
  }, {
    "from": 469,
    "label": "calls",
    "to": 527
  }, {
    "from": 469,
    "label": "calls",
    "to": 527
  }, {
    "from": 469,
    "label": "calls",
    "to": 527
  }, {
    "from": 469,
    "label": "calls",
    "to": 527
  }, {
    "from": 481,
    "label": "calls",
    "to": 527
  }, {
    "from": 481,
    "label": "calls",
    "to": 527
  }, {
    "from": 52,
    "label": "calls",
    "to": 528
  }, {
    "from": 52,
    "label": "calls",
    "to": 528
  }, {
    "from": 52,
    "label": "calls",
    "to": 528
  }, {
    "from": 52,
    "label": "calls",
    "to": 528
  }, {
    "from": 66,
    "label": "calls",
    "to": 528
  }, {
    "from": 80,
    "label": "calls",
    "to": 528
  }, {
    "from": 91,
    "label": "calls",
    "to": 528
  }, {
    "from": 101,
    "label": "calls",
    "to": 528
  }, {
    "from": 234,
    "label": "calls",
    "to": 528
  }, {
    "from": 234,
    "label": "calls",
    "to": 528
  }, {
    "from": 234,
    "label": "calls",
    "to": 528
  }, {
    "from": 234,
    "label": "calls",
    "to": 528
  }, {
    "from": 234,
    "label": "calls",
    "to": 528
  }, {
    "from": 248,
    "label": "calls",
    "to": 528
  }, {
    "from": 248,
    "label": "calls",
    "to": 528
  }, {
    "from": 248,
    "label": "calls",
    "to": 528
  }, {
    "from": 283,
    "label": "calls",
    "to": 528
  }, {
    "from": 283,
    "label": "calls",
    "to": 528
  }, {
    "from": 291,
    "label": "calls",
    "to": 528
  }, {
    "from": 291,
    "label": "calls",
    "to": 528
  }, {
    "from": 298,
    "label": "calls",
    "to": 528
  }, {
    "from": 344,
    "label": "calls",
    "to": 528
  }, {
    "from": 354,
    "label": "calls",
    "to": 528
  }, {
    "from": 361,
    "label": "calls",
    "to": 528
  }, {
    "from": 361,
    "label": "calls",
    "to": 528
  }, {
    "from": 398,
    "label": "calls",
    "to": 528
  }, {
    "from": 398,
    "label": "calls",
    "to": 528
  }, {
    "from": 398,
    "label": "calls",
    "to": 528
  }, {
    "from": 398,
    "label": "calls",
    "to": 528
  }, {
    "from": 423,
    "label": "calls",
    "to": 528
  }, {
    "from": 423,
    "label": "calls",
    "to": 528
  }, {
    "from": 423,
    "label": "calls",
    "to": 528
  }, {
    "from": 423,
    "label": "calls",
    "to": 528
  }, {
    "from": 438,
    "label": "calls",
    "to": 528
  }, {
    "from": 438,
    "label": "calls",
    "to": 528
  }, {
    "from": 438,
    "label": "calls",
    "to": 528
  }, {
    "from": 438,
    "label": "calls",
    "to": 528
  }, {
    "from": 438,
    "label": "calls",
    "to": 528
  }, {
    "from": 453,
    "label": "calls",
    "to": 528
  }, {
    "from": 522,
    "label": "calls",
    "to": 535
  }, {
    "from": 469,
    "label": "calls",
    "to": 523
  }, {
    "from": 469,
    "label": "calls",
    "to": 523
  }, {
    "from": 469,
    "label": "calls",
    "to": 523
  }, {
    "from": 469,
    "label": "calls",
    "to": 523
  }, {
    "from": 469,
    "label": "calls",
    "to": 523
  }, {
    "from": 469,
    "label": "calls",
    "to": 523
  }, {
    "from": 469,
    "label": "calls",
    "to": 523
  }, {
    "from": 469,
    "label": "calls",
    "to": 523
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 3,
    "label": "calls",
    "to": 529
  }, {
    "from": 43,
    "label": "calls",
    "to": 529
  }, {
    "from": 88,
    "label": "calls",
    "to": 536
  }, {
    "from": 121,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 189,
    "label": "calls",
    "to": 536
  }, {
    "from": 227,
    "label": "calls",
    "to": 536
  }, {
    "from": 227,
    "label": "calls",
    "to": 536
  }, {
    "from": 227,
    "label": "calls",
    "to": 536
  }, {
    "from": 227,
    "label": "calls",
    "to": 536
  }, {
    "from": 227,
    "label": "calls",
    "to": 536
  }, {
    "from": 341,
    "label": "calls",
    "to": 536
  }, {
    "from": 395,
    "label": "calls",
    "to": 536
  }, {
    "from": 420,
    "label": "calls",
    "to": 536
  }, {
    "from": 43,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 52,
    "label": "calls",
    "to": 538
  }, {
    "from": 66,
    "label": "calls",
    "to": 538
  }, {
    "from": 66,
    "label": "calls",
    "to": 538
  }, {
    "from": 66,
    "label": "calls",
    "to": 538
  }, {
    "from": 80,
    "label": "calls",
    "to": 538
  }, {
    "from": 80,
    "label": "calls",
    "to": 538
  }, {
    "from": 80,
    "label": "calls",
    "to": 538
  }, {
    "from": 80,
    "label": "calls",
    "to": 538
  }, {
    "from": 80,
    "label": "calls",
    "to": 538
  }, {
    "from": 91,
    "label": "calls",
    "to": 538
  }, {
    "from": 91,
    "label": "calls",
    "to": 538
  }, {
    "from": 91,
    "label": "calls",
    "to": 538
  }, {
    "from": 91,
    "label": "calls",
    "to": 538
  }, {
    "from": 91,
    "label": "calls",
    "to": 538
  }, {
    "from": 91,
    "label": "calls",
    "to": 538
  }, {
    "from": 91,
    "label": "calls",
    "to": 538
  }, {
    "from": 101,
    "label": "calls",
    "to": 538
  }, {
    "from": 101,
    "label": "calls",
    "to": 538
  }, {
    "from": 109,
    "label": "calls",
    "to": 538
  }, {
    "from": 113,
    "label": "calls",
    "to": 538
  }, {
    "from": 113,
    "label": "calls",
    "to": 538
  }, {
    "from": 113,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 124,
    "label": "calls",
    "to": 538
  }, {
    "from": 223,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 234,
    "label": "calls",
    "to": 538
  }, {
    "from": 248,
    "label": "calls",
    "to": 538
  }, {
    "from": 248,
    "label": "calls",
    "to": 538
  }, {
    "from": 248,
    "label": "calls",
    "to": 538
  }, {
    "from": 248,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 265,
    "label": "calls",
    "to": 538
  }, {
    "from": 283,
    "label": "calls",
    "to": 538
  }, {
    "from": 283,
    "label": "calls",
    "to": 538
  }, {
    "from": 283,
    "label": "calls",
    "to": 538
  }, {
    "from": 283,
    "label": "calls",
    "to": 538
  }, {
    "from": 283,
    "label": "calls",
    "to": 538
  }, {
    "from": 283,
    "label": "calls",
    "to": 538
  }, {
    "from": 291,
    "label": "calls",
    "to": 538
  }, {
    "from": 291,
    "label": "calls",
    "to": 538
  }, {
    "from": 291,
    "label": "calls",
    "to": 538
  }, {
    "from": 291,
    "label": "calls",
    "to": 538
  }, {
    "from": 291,
    "label": "calls",
    "to": 538
  }, {
    "from": 291,
    "label": "calls",
    "to": 538
  }, {
    "from": 291,
    "label": "calls",
    "to": 538
  }, {
    "from": 291,
    "label": "calls",
    "to": 538
  }, {
    "from": 298,
    "label": "calls",
    "to": 538
  }, {
    "from": 298,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 314,
    "label": "calls",
    "to": 538
  }, {
    "from": 344,
    "label": "calls",
    "to": 538
  }, {
    "from": 344,
    "label": "calls",
    "to": 538
  }, {
    "from": 344,
    "label": "calls",
    "to": 538
  }, {
    "from": 344,
    "label": "calls",
    "to": 538
  }, {
    "from": 344,
    "label": "calls",
    "to": 538
  }, {
    "from": 344,
    "label": "calls",
    "to": 538
  }, {
    "from": 344,
    "label": "calls",
    "to": 538
  }, {
    "from": 344,
    "label": "calls",
    "to": 538
  }, {
    "from": 354,
    "label": "calls",
    "to": 538
  }, {
    "from": 354,
    "label": "calls",
    "to": 538
  }, {
    "from": 354,
    "label": "calls",
    "to": 538
  }, {
    "from": 354,
    "label": "calls",
    "to": 538
  }, {
    "from": 354,
    "label": "calls",
    "to": 538
  }, {
    "from": 354,
    "label": "calls",
    "to": 538
  }, {
    "from": 361,
    "label": "calls",
    "to": 538
  }, {
    "from": 361,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 376,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 398,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 409,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 423,
    "label": "calls",
    "to": 538
  }, {
    "from": 438,
    "label": "calls",
    "to": 538
  }, {
    "from": 438,
    "label": "calls",
    "to": 538
  }, {
    "from": 438,
    "label": "calls",
    "to": 538
  }, {
    "from": 438,
    "label": "calls",
    "to": 538
  }, {
    "from": 438,
    "label": "calls",
    "to": 538
  }, {
    "from": 438,
    "label": "calls",
    "to": 538
  }, {
    "from": 438,
    "label": "calls",
    "to": 538
  }, {
    "from": 438,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 453,
    "label": "calls",
    "to": 538
  }, {
    "from": 462,
    "label": "calls",
    "to": 538
  }, {
    "from": 462,
    "label": "calls",
    "to": 538
  }, {
    "from": 462,
    "label": "calls",
    "to": 538
  }, {
    "from": 481,
    "label": "calls",
    "to": 530
  }, {
    "from": 481,
    "label": "calls",
    "to": 530
  }, {
    "from": 481,
    "label": "calls",
    "to": 531
  }, {
    "from": 481,
    "label": "calls",
    "to": 531
  }, {
    "from": 469,
    "label": "calls",
    "to": 534
  }, {
    "from": 469,
    "label": "calls",
    "to": 534
  }, {
    "from": 469,
    "label": "calls",
    "to": 534
  }, {
    "from": 469,
    "label": "calls",
    "to": 534
  }, {
    "from": 25,
    "label": "calls",
    "to": 532
  }, {
    "from": 25,
    "label": "calls",
    "to": 532
  }, {
    "from": 25,
    "label": "calls",
    "to": 532
  }, {
    "from": 25,
    "label": "calls",
    "to": 532
  }, {
    "from": 25,
    "label": "calls",
    "to": 532
  }, {
    "from": 25,
    "label": "calls",
    "to": 532
  }, {
    "from": 25,
    "label": "calls",
    "to": 532
  }, {
    "from": 25,
    "label": "calls",
    "to": 532
  }, {
    "from": 66,
    "label": "calls",
    "to": 532
  }, {
    "from": 66,
    "label": "calls",
    "to": 532
  }, {
    "from": 66,
    "label": "calls",
    "to": 532
  }, {
    "from": 66,
    "label": "calls",
    "to": 532
  }, {
    "from": 66,
    "label": "calls",
    "to": 532
  }, {
    "from": 101,
    "label": "calls",
    "to": 532
  }, {
    "from": 101,
    "label": "calls",
    "to": 532
  }, {
    "from": 248,
    "label": "calls",
    "to": 532
  }, {
    "from": 248,
    "label": "calls",
    "to": 532
  }, {
    "from": 248,
    "label": "calls",
    "to": 532
  }, {
    "from": 248,
    "label": "calls",
    "to": 532
  }, {
    "from": 248,
    "label": "calls",
    "to": 532
  }, {
    "from": 298,
    "label": "calls",
    "to": 532
  }, {
    "from": 298,
    "label": "calls",
    "to": 532
  }, {
    "from": 298,
    "label": "calls",
    "to": 532
  }, {
    "from": 298,
    "label": "calls",
    "to": 532
  }, {
    "from": 298,
    "label": "calls",
    "to": 532
  }, {
    "from": 298,
    "label": "calls",
    "to": 532
  }, {
    "from": 361,
    "label": "calls",
    "to": 532
  }, {
    "from": 361,
    "label": "calls",
    "to": 532
  }, {
    "from": 361,
    "label": "calls",
    "to": 532
  }, {
    "from": 361,
    "label": "calls",
    "to": 532
  }, {
    "from": 361,
    "label": "calls",
    "to": 532
  }, {
    "from": 432,
    "label": "calls",
    "to": 532
  }, {
    "from": 432,
    "label": "calls",
    "to": 532
  }, {
    "from": 462,
    "label": "calls",
    "to": 532
  }, {
    "from": 462,
    "label": "calls",
    "to": 532
  }, {
    "from": 522,
    "label": "calls",
    "to": 539
  }, {
    "from": 522,
    "label": "calls",
    "to": 539
  }, {
    "from": 438,
    "label": "calls",
    "to": 533
  }, {
    "from": 438,
    "label": "calls",
    "to": 533
  }, {
    "from": 438,
    "label": "calls",
    "to": 533
  }, {
    "from": 438,
    "label": "calls",
    "to": 533
  }, {
    "from": 453,
    "label": "calls",
    "to": 533
  }, {
    "from": 453,
    "label": "calls",
    "to": 533
  }, {
    "from": 462,
    "label": "calls",
    "to": 533
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 3,
    "label": "calls",
    "to": 537
  }, {
    "from": 43,
    "label": "calls",
    "to": 537
  }, {
    "from": 43,
    "label": "calls",
    "to": 537
  }, {
    "from": 43,
    "label": "calls",
    "to": 537
  }, {
    "from": 43,
    "label": "calls",
    "to": 537
  }, {
    "from": 522,
    "label": "calls",
    "to": 540
  }, {
    "from": 1,
    "label": "contains",
    "to": 522
  }, {
    "from": 522,
    "label": "declares",
    "to": 3
  }, {
    "from": 522,
    "label": "declares",
    "to": 25
  }, {
    "from": 522,
    "label": "declares",
    "to": 43
  }, {
    "from": 522,
    "label": "declares",
    "to": 52
  }, {
    "from": 522,
    "label": "declares",
    "to": 66
  }, {
    "from": 522,
    "label": "declares",
    "to": 80
  }, {
    "from": 522,
    "label": "declares",
    "to": 88
  }, {
    "from": 522,
    "label": "declares",
    "to": 91
  }, {
    "from": 522,
    "label": "declares",
    "to": 101
  }, {
    "from": 522,
    "label": "declares",
    "to": 109
  }, {
    "from": 522,
    "label": "declares",
    "to": 113
  }, {
    "from": 522,
    "label": "declares",
    "to": 121
  }, {
    "from": 522,
    "label": "declares",
    "to": 124
  }, {
    "from": 522,
    "label": "declares",
    "to": 189
  }, {
    "from": 522,
    "label": "declares",
    "to": 223
  }, {
    "from": 522,
    "label": "declares",
    "to": 227
  }, {
    "from": 522,
    "label": "declares",
    "to": 234
  }, {
    "from": 522,
    "label": "declares",
    "to": 248
  }, {
    "from": 522,
    "label": "declares",
    "to": 265
  }, {
    "from": 522,
    "label": "declares",
    "to": 283
  }, {
    "from": 522,
    "label": "declares",
    "to": 291
  }, {
    "from": 522,
    "label": "declares",
    "to": 298
  }, {
    "from": 522,
    "label": "declares",
    "to": 314
  }, {
    "from": 522,
    "label": "declares",
    "to": 341
  }, {
    "from": 522,
    "label": "declares",
    "to": 344
  }, {
    "from": 522,
    "label": "declares",
    "to": 354
  }, {
    "from": 522,
    "label": "declares",
    "to": 361
  }, {
    "from": 522,
    "label": "declares",
    "to": 376
  }, {
    "from": 522,
    "label": "declares",
    "to": 395
  }, {
    "from": 522,
    "label": "declares",
    "to": 398
  }, {
    "from": 522,
    "label": "declares",
    "to": 409
  }, {
    "from": 522,
    "label": "declares",
    "to": 420
  }, {
    "from": 522,
    "label": "declares",
    "to": 423
  }, {
    "from": 522,
    "label": "declares",
    "to": 432
  }, {
    "from": 522,
    "label": "declares",
    "to": 438
  }, {
    "from": 522,
    "label": "declares",
    "to": 453
  }, {
    "from": 522,
    "label": "declares",
    "to": 462
  }, {
    "from": 522,
    "label": "declares",
    "to": 469
  }, {
    "from": 522,
    "label": "declares",
    "to": 481
  }, {
    "from": 522,
    "label": "declares",
    "to": 487
  }, {
    "from": 522,
    "label": "declares",
    "to": 488
  }, {
    "from": 522,
    "label": "declares",
    "to": 489
  }, {
    "from": 522,
    "label": "declares",
    "to": 490
  }, {
    "from": 522,
    "label": "declares",
    "to": 491
  }, {
    "from": 522,
    "label": "declares",
    "to": 492
  }, {
    "from": 522,
    "label": "declares",
    "to": 493
  }, {
    "from": 522,
    "label": "declares",
    "to": 494
  }, {
    "from": 522,
    "label": "declares",
    "to": 495
  }, {
    "from": 522,
    "label": "declares",
    "to": 496
  }, {
    "from": 522,
    "label": "declares",
    "to": 497
  }, {
    "from": 522,
    "label": "declares",
    "to": 498
  }, {
    "from": 522,
    "label": "declares",
    "to": 499
  }, {
    "from": 522,
    "label": "declares",
    "to": 500
  }, {
    "from": 522,
    "label": "declares",
    "to": 501
  }, {
    "from": 522,
    "label": "declares",
    "to": 502
  }, {
    "from": 522,
    "label": "declares",
    "to": 503
  }, {
    "from": 522,
    "label": "declares",
    "to": 504
  }, {
    "from": 522,
    "label": "declares",
    "to": 505
  }, {
    "from": 522,
    "label": "declares",
    "to": 506
  }, {
    "from": 522,
    "label": "declares",
    "to": 507
  }, {
    "from": 522,
    "label": "declares",
    "to": 508
  }, {
    "from": 522,
    "label": "declares",
    "to": 509
  }, {
    "from": 522,
    "label": "declares",
    "to": 510
  }, {
    "from": 522,
    "label": "declares",
    "to": 511
  }, {
    "from": 522,
    "label": "declares",
    "to": 512
  }, {
    "from": 522,
    "label": "declares",
    "to": 513
  }, {
    "from": 522,
    "label": "declares",
    "to": 514
  }, {
    "from": 522,
    "label": "declares",
    "to": 515
  }, {
    "from": 522,
    "label": "declares",
    "to": 516
  }, {
    "from": 522,
    "label": "declares",
    "to": 517
  }, {
    "from": 522,
    "label": "declares",
    "to": 518
  }, {
    "from": 522,
    "label": "declares",
    "to": 519
  }, {
    "from": 522,
    "label": "declares",
    "to": 520
  }, {
    "from": 522,
    "label": "declares",
    "to": 521
  }, {
    "from": 1,
    "label": "contains",
    "to": 542
  }, {
    "from": 1,
    "label": "contains",
    "to": 543
  }, {
    "from": 542,
    "label": "initializes",
    "to": 544
  }, {
    "from": 544,
    "label": "assigns",
    "to": 545
  }, {
    "from": 543,
    "label": "initializes",
    "to": 546
  }, {
    "from": 546,
    "label": "requires",
    "to": 2
  }, {
    "from": 543,
    "label": "initializes",
    "to": 541
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 487
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 488
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 489
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 490
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 491
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 492
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 494
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 496
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 497
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 498
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 499
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 500
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 501
  }, {
    "from": 249,
    "label": "hasArgument",
    "to": 502
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 503
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 504
  }, {
    "from": 258,
    "label": "hasArgument",
    "to": 505
  }, {
    "from": 258,
    "label": "hasArgument",
    "to": 506
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 505
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 506
  }, {
    "from": 300,
    "label": "hasArgument",
    "to": 507
  }, {
    "from": 302,
    "label": "hasArgument",
    "to": 508
  }, {
    "from": 304,
    "label": "hasArgument",
    "to": 509
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 510
  }, {
    "from": 308,
    "label": "hasArgument",
    "to": 511
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 512
  }, {
    "from": 363,
    "label": "hasArgument",
    "to": 513
  }, {
    "from": 365,
    "label": "hasArgument",
    "to": 514
  }, {
    "from": 367,
    "label": "hasArgument",
    "to": 515
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 516
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 517
  }, {
    "from": 433,
    "label": "hasArgument",
    "to": 518
  }, {
    "from": 435,
    "label": "hasArgument",
    "to": 519
  }, {
    "from": 463,
    "label": "hasArgument",
    "to": 520
  }, {
    "from": 465,
    "label": "hasArgument",
    "to": 521
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "_generic",
    "type": "module"
  }, {
    "id": 2,
    "text": "uri",
    "type": "module"
  }, {
    "id": 3,
    "text": "function testcase:test_normalize_percent_encoding ()\r\n    -- Don't use unnecessary percent encoding for unreserved characters.\r\n    test_norm(\"x:ABCDEFGHIJKLM\", \"x:%41%42%43%44%45%46%47%48%49%4A%4b%4C%4d\")\r\n    test_norm(\"x:NOPQRSTUVWXYZ\", \"x:%4E%4f%50%51%52%53%54%55%56%57%58%59%5A\")\r\n    test_norm(\"x:abcdefghijklm\", \"x:%61%62%63%64%65%66%67%68%69%6A%6b%6C%6d\")\r\n    test_norm(\"x:nopqrstuvwxyz\", \"x:%6E%6f%70%71%72%73%74%75%76%77%78%79%7A\")\r\n    test_norm(\"x:0123456789\", \"x:%30%31%32%33%34%35%36%37%38%39\")\r\n    test_norm(\"x:-._~\", \"x:%2D%2e%5F%7e\")\r\n\r\n    -- Keep percent encoding for other characters in US-ASCII.\r\n    test_norm_already(\"x:%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F\")\r\n    test_norm_already(\"x:%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F\")\r\n    test_norm_already(\"x:%20%21%22%23%24%25%26%27%28%29%2A%2B%2C\")\r\n    test_norm_already(\"x:%2F\")\r\n    test_norm_already(\"x:%3A%3B%3C%3D%3E%3F%40\")\r\n    test_norm_already(\"x:%5B%5C%5D%5E\")\r\n    test_norm_already(\"x:%60\")\r\n    test_norm_already(\"x:%7B%7C%7D\")\r\n    test_norm_already(\"x:%7F\")\r\n\r\n    -- Normalize hex digits in percent encoding to uppercase.\r\n    test_norm(\"x:%0A%0B%0C%0D%0E%0F\", \"x:%0a%0b%0c%0d%0e%0f\")\r\n    test_norm(\"x:%AA%BB%CC%DD%EE%FF\", \"x:%aA%bB%cC%dD%eE%fF\")\r\n\r\n    -- Keep percent encoding, and normalize hex digit case, for all characters\r\n    -- outside US-ASCII.\r\n    for i = 0x80, 0xFF do\r\n        test_norm_already(string.format(\"x:%%%02X\", i))\r\n        test_norm(string.format(\"x:%%%02X\", i), string.format(\"x:%%%02x\", i))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "test_norm(\"x:ABCDEFGHIJKLM\", \"x:%41%42%43%44%45%46%47%48%49%4A%4b%4C%4d\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "test_norm(\"x:NOPQRSTUVWXYZ\", \"x:%4E%4f%50%51%52%53%54%55%56%57%58%59%5A\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "test_norm(\"x:abcdefghijklm\", \"x:%61%62%63%64%65%66%67%68%69%6A%6b%6C%6d\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "test_norm(\"x:nopqrstuvwxyz\", \"x:%6E%6f%70%71%72%73%74%75%76%77%78%79%7A\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "test_norm(\"x:0123456789\", \"x:%30%31%32%33%34%35%36%37%38%39\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "test_norm(\"x:-._~\", \"x:%2D%2e%5F%7e\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "test_norm_already(\"x:%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "test_norm_already(\"x:%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "test_norm_already(\"x:%20%21%22%23%24%25%26%27%28%29%2A%2B%2C\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "test_norm_already(\"x:%2F\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "test_norm_already(\"x:%3A%3B%3C%3D%3E%3F%40\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "test_norm_already(\"x:%5B%5C%5D%5E\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "test_norm_already(\"x:%60\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "test_norm_already(\"x:%7B%7C%7D\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "test_norm_already(\"x:%7F\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "test_norm(\"x:%0A%0B%0C%0D%0E%0F\", \"x:%0a%0b%0c%0d%0e%0f\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "test_norm(\"x:%AA%BB%CC%DD%EE%FF\", \"x:%aA%bB%cC%dD%eE%fF\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "for i = 0x80, 0xFF do\r\n        test_norm_already(string.format(\"x:%%%02X\", i))\r\n        test_norm(string.format(\"x:%%%02X\", i), string.format(\"x:%%%02x\", i))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 22,
    "text": "test_norm_already(string.format(\"x:%%%02X\", i))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "test_norm(string.format(\"x:%%%02X\", i), string.format(\"x:%%%02x\", i))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function testcase:test_bad_percent_encoding ()\r\n    assert_error(\"double percent\", function () URI:new(\"x:foo%%2525\") end)\r\n    assert_error(\"no hex digits\", function () URI:new(\"x:foo%\") end)\r\n    assert_error(\"no hex digits 2nd time\", function () URI:new(\"x:f%20o%\") end)\r\n    assert_error(\"1 hex digit\", function () URI:new(\"x:foo%2\") end)\r\n    assert_error(\"1 hex digit 2nd time\", function () URI:new(\"x:f%20o%2\") end)\r\n    assert_error(\"bad hex digit 1\", function () URI:new(\"x:foo%G2bar\") end)\r\n    assert_error(\"bad hex digit 2\", function () URI:new(\"x:foo%2Gbar\") end)\r\n    assert_error(\"bad hex digit both\", function () URI:new(\"x:foo%GGbar\") end)\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "assert_error(\"double percent\", function () URI:new(\"x:foo%%2525\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "URI:new(\"x:foo%%2525\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert_error(\"no hex digits\", function () URI:new(\"x:foo%\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "URI:new(\"x:foo%\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert_error(\"no hex digits 2nd time\", function () URI:new(\"x:f%20o%\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "URI:new(\"x:f%20o%\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert_error(\"1 hex digit\", function () URI:new(\"x:foo%2\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "URI:new(\"x:foo%2\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert_error(\"1 hex digit 2nd time\", function () URI:new(\"x:f%20o%2\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "URI:new(\"x:f%20o%2\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert_error(\"bad hex digit 1\", function () URI:new(\"x:foo%G2bar\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "URI:new(\"x:foo%G2bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert_error(\"bad hex digit 2\", function () URI:new(\"x:foo%2Gbar\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "URI:new(\"x:foo%2Gbar\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert_error(\"bad hex digit both\", function () URI:new(\"x:foo%GGbar\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "URI:new(\"x:foo%GGbar\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function testcase:test_scheme ()\r\n    test_norm_already(\"foo:\")\r\n    test_norm_already(\"foo:-+.:\")\r\n    test_norm_already(\"foo:-+.0123456789:\")\r\n    test_norm_already(\"x:\")\r\n    test_norm(\"example:FooBar:Baz\", \"ExAMplE:FooBar:Baz\")\r\n\r\n    local uri = assert(URI:new(\"Foo-Bar:Baz%20Quux\"))\r\n    is(\"foo-bar\", uri:scheme())\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "test_norm_already(\"foo:\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "test_norm_already(\"foo:-+.:\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "test_norm_already(\"foo:-+.0123456789:\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "test_norm_already(\"x:\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "test_norm(\"example:FooBar:Baz\", \"ExAMplE:FooBar:Baz\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local uri = assert(URI:new(\"Foo-Bar:Baz%20Quux\"))",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "is(\"foo-bar\", uri:scheme())",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function testcase:test_change_scheme ()\r\n    local uri = assert(URI:new(\"x-foo://example.com/blah\"))\r\n    is(\"x-foo://example.com/blah\", tostring(uri))\r\n    is(\"x-foo\", uri:scheme())\r\n    is(\"uri\", uri._NAME)\r\n\r\n    -- x-foo -> x-bar\r\n    is(\"x-foo\", uri:scheme(\"x-bar\"))\r\n    is(\"x-bar\", uri:scheme())\r\n    is(\"x-bar://example.com/blah\", tostring(uri))\r\n    is(\"uri\", uri._NAME)\r\n\r\n    -- x-bar -> http\r\n    is(\"x-bar\", uri:scheme(\"http\"))\r\n    is(\"http\", uri:scheme())\r\n    is(\"http://example.com/blah\", tostring(uri))\r\n    is(\"uri.http\", uri._NAME)\r\n\r\n    -- http -> x-foo\r\n    is(\"http\", uri:scheme(\"x-foo\"))\r\n    is(\"x-foo\", uri:scheme())\r\n    is(\"x-foo://example.com/blah\", tostring(uri))\r\n    is(\"uri\", uri._NAME)\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local uri = assert(URI:new(\"x-foo://example.com/blah\"))",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "is(\"x-foo://example.com/blah\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "is(\"x-foo\", uri:scheme())",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "is(\"uri\", uri._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "is(\"x-foo\", uri:scheme(\"x-bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "is(\"x-bar\", uri:scheme())",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "is(\"x-bar://example.com/blah\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "is(\"x-bar\", uri:scheme(\"http\"))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "is(\"http\", uri:scheme())",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "is(\"http://example.com/blah\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "is(\"uri.http\", uri._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "is(\"http\", uri:scheme(\"x-foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function testcase:test_change_scheme_bad ()\r\n    local uri = assert(URI:new(\"x-foo://foo@bar/\"))\r\n\r\n    -- Try changing the scheme to something invalid\r\n    assert_error(\"bad scheme '-x-foo'\", function () uri:scheme(\"-x-foo\") end)\r\n    assert_error(\"bad scheme 'x,foo'\", function () uri:scheme(\"x,foo\") end)\r\n    assert_error(\"bad scheme 'x:foo'\", function () uri:scheme(\"x:foo\") end)\r\n    assert_error(\"bad scheme 'x-foo:'\", function () uri:scheme(\"x-foo:\") end)\r\n\r\n    -- Change to valid scheme, but where the rest of the URI is not valid for it\r\n    assert_error(\"bad HTTP URI\", function () uri:scheme(\"http\") end)\r\n\r\n    -- Original URI should be left unchanged\r\n    is(\"x-foo://foo@bar/\", tostring(uri))\r\n    is(\"x-foo\", uri:scheme())\r\n    is(\"uri\", uri._NAME)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local uri = assert(URI:new(\"x-foo://foo@bar/\"))",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "assert_error(\"bad scheme '-x-foo'\", function () uri:scheme(\"-x-foo\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "uri:scheme(\"-x-foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert_error(\"bad scheme 'x,foo'\", function () uri:scheme(\"x,foo\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "uri:scheme(\"x,foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert_error(\"bad scheme 'x:foo'\", function () uri:scheme(\"x:foo\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "uri:scheme(\"x:foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert_error(\"bad scheme 'x-foo:'\", function () uri:scheme(\"x-foo:\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "uri:scheme(\"x-foo:\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert_error(\"bad HTTP URI\", function () uri:scheme(\"http\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "uri:scheme(\"http\")",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "is(\"x-foo://foo@bar/\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function testcase:test_auth_userinfo ()\r\n    local uri = assert(URI:new(\"X://a-zA-Z09!$:&%40@FOO.com:80/\"))\r\n    is(\"x://a-zA-Z09!$:&%40@foo.com:80/\", tostring(uri))\r\n    is(\"x\", uri:scheme())\r\n    is(\"a-zA-Z09!$:&%40\", uri:userinfo())\r\n    is(\"foo.com\", uri:host())\r\n    is(80, uri:port())\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local uri = assert(URI:new(\"X://a-zA-Z09!$:&%40@FOO.com:80/\"))",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "is(\"x://a-zA-Z09!$:&%40@foo.com:80/\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "is(\"x\", uri:scheme())",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "is(\"a-zA-Z09!$:&%40\", uri:userinfo())",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "is(\"foo.com\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "is(80, uri:port())",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function testcase:test_auth_userinfo_bad ()\r\n    is_bad_uri(\"bad character in userinfo\", \"x-a://foo^bar@example.com/\")\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "is_bad_uri(\"bad character in userinfo\", \"x-a://foo^bar@example.com/\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function testcase:test_auth_set_userinfo ()\r\n    local uri = assert(URI:new(\"X-foo://user:pass@FOO.com:80/\"))\r\n    is(\"user:pass\", uri:userinfo(\"newuserinfo\"))\r\n    is(\"newuserinfo\", uri:userinfo())\r\n    is(\"x-foo://newuserinfo@foo.com:80/\", tostring(uri))\r\n\r\n    -- Userinfo should be supplied already percent-encoded, but the percent\r\n    -- encoding should be normalized.\r\n    is(\"newuserinfo\", uri:userinfo(\"foo%3abar%3A:%78\"))\r\n    is(\"foo%3Abar%3A:x\", uri:userinfo())\r\n\r\n    -- It should be OK to use more than one colon in userinfo for generic URIs,\r\n    -- although not for ones which specificly divide it into username:password.\r\n    is(\"foo%3Abar%3A:x\", uri:userinfo(\"foo:bar:baz::\"))\r\n    is(\"foo:bar:baz::\", uri:userinfo())\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "local uri = assert(URI:new(\"X-foo://user:pass@FOO.com:80/\"))",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "is(\"user:pass\", uri:userinfo(\"newuserinfo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "is(\"newuserinfo\", uri:userinfo())",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "is(\"x-foo://newuserinfo@foo.com:80/\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "is(\"newuserinfo\", uri:userinfo(\"foo%3abar%3A:%78\"))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "is(\"foo%3Abar%3A:x\", uri:userinfo())",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "is(\"foo%3Abar%3A:x\", uri:userinfo(\"foo:bar:baz::\"))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "is(\"foo:bar:baz::\", uri:userinfo())",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function testcase:test_auth_set_bad_userinfo ()\r\n    local uri = assert(URI:new(\"X-foo://user:pass@FOO.com:80/\"))\r\n    assert_error(\"/ in userinfo\", function () uri:userinfo(\"foo/bar\") end)\r\n    assert_error(\"@ in userinfo\", function () uri:userinfo(\"foo@bar\") end)\r\n    is(\"user:pass\", uri:userinfo())\r\n    is(\"x-foo://user:pass@foo.com:80/\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "assert_error(\"/ in userinfo\", function () uri:userinfo(\"foo/bar\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "uri:userinfo(\"foo/bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert_error(\"@ in userinfo\", function () uri:userinfo(\"foo@bar\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "uri:userinfo(\"foo@bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "is(\"user:pass\", uri:userinfo())",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "is(\"x-foo://user:pass@foo.com:80/\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function testcase:test_auth_reg_name ()\r\n    local uri = assert(URI:new(\"x://azAZ0-9--foo.bqr_baz~%20!$;/\"))\r\n    -- TODO - %20 should probably be rejected.  Apparently only UTF-8 pctenc\r\n    -- should be produced, so after unescaping unreserved chars there should\r\n    -- be nothing left percent encoded other than valid UTF-8 sequences.  If\r\n    -- that's right I could safely decode the host before returning it.\r\n    is(\"azaz0-9--foo.bqr_baz~%20!$;\", uri:host())\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "local uri = assert(URI:new(\"x://azAZ0-9--foo.bqr_baz~%20!$;/\"))",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "is(\"azaz0-9--foo.bqr_baz~%20!$;\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function testcase:test_auth_ip4 ()\r\n    local uri = assert(URI:new(\"x://0.0.0.0/path\"))\r\n    is(\"0.0.0.0\", uri:host())\r\n    uri = assert(URI:new(\"x://192.168.0.1/path\"))\r\n    is(\"192.168.0.1\", uri:host())\r\n    uri = assert(URI:new(\"x://255.255.255.255/path\"))\r\n    is(\"255.255.255.255\", uri:host())\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local uri = assert(URI:new(\"x://0.0.0.0/path\"))",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "is(\"0.0.0.0\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "uri = assert(URI:new(\"x://192.168.0.1/path\"))",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "is(\"192.168.0.1\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "uri = assert(URI:new(\"x://255.255.255.255/path\"))",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "is(\"255.255.255.255\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function testcase:test_auth_ip4_or_reg_name_bad ()\r\n    is_bad_uri(\"bad character in host part\", \"x://foo:bar/\")\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "is_bad_uri(\"bad character in host part\", \"x://foo:bar/\")",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function testcase:test_auth_ip6 ()\r\n    -- The example addresses in here are all from RFC 4291 section 2.2, except\r\n    -- that they get normalized to lowercase here in the results.\r\n    local uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]\"))\r\n    is(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\", uri:host())\r\n    uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]/\"))\r\n    is(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\", uri:host())\r\n    uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]:\"))\r\n    is(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\", uri:host())\r\n    uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]:/\"))\r\n    is(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\", uri:host())\r\n    uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]:0/\"))\r\n    is(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\", uri:host())\r\n    uri = assert(URI:new(\"x://y:z@[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]:80/\"))\r\n    is(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\", uri:host())\r\n    uri = assert(URI:new(\"x://[2001:DB8:0:0:8:800:200C:417A]/\"))\r\n    is(\"[2001:db8:0:0:8:800:200c:417a]\", uri:host())\r\n    uri = assert(URI:new(\"x://[FF01:0:0:0:0:0:0:101]/\"))\r\n    is(\"[ff01:0:0:0:0:0:0:101]\", uri:host())\r\n    uri = assert(URI:new(\"x://[ff01::101]/\"))\r\n    is(\"[ff01::101]\", uri:host())\r\n    uri = assert(URI:new(\"x://[0:0:0:0:0:0:0:1]/\"))\r\n    is(\"[0:0:0:0:0:0:0:1]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::1]/\"))\r\n    is(\"[::1]\", uri:host())\r\n    uri = assert(URI:new(\"x://[0:0:0:0:0:0:0:0]/\"))\r\n    is(\"[0:0:0:0:0:0:0:0]\", uri:host())\r\n    uri = assert(URI:new(\"x://[0:0:0:0:0:0:13.1.68.3]/\"))\r\n    is(\"[0:0:0:0:0:0:13.1.68.3]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::13.1.68.3]/\"))\r\n    is(\"[::13.1.68.3]\", uri:host())\r\n    uri = assert(URI:new(\"x://[0:0:0:0:0:FFFF:129.144.52.38]/\"))\r\n    is(\"[0:0:0:0:0:ffff:129.144.52.38]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::FFFF:129.144.52.38]/\"))\r\n    is(\"[::ffff:129.144.52.38]\", uri:host())\r\n\r\n    -- These try all the cominations of abbreviating using '::'.\r\n    uri = assert(URI:new(\"x://[08:19:2a:3B:4c:5D:6e:7F]/\"))\r\n    is(\"[08:19:2a:3b:4c:5d:6e:7f]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::19:2a:3B:4c:5D:6e:7F]/\"))\r\n    is(\"[::19:2a:3b:4c:5d:6e:7f]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::2a:3B:4c:5D:6e:7F]/\"))\r\n    is(\"[::2a:3b:4c:5d:6e:7f]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::3B:4c:5D:6e:7F]/\"))\r\n    is(\"[::3b:4c:5d:6e:7f]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::4c:5D:6e:7F]/\"))\r\n    is(\"[::4c:5d:6e:7f]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::5D:6e:7F]/\"))\r\n    is(\"[::5d:6e:7f]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::6e:7F]/\"))\r\n    is(\"[::6e:7f]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::7F]/\"))\r\n    is(\"[::7f]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::]/\"))\r\n    is(\"[::]\", uri:host())\r\n    uri = assert(URI:new(\"x://[08::]/\"))\r\n    is(\"[08::]\", uri:host())\r\n    uri = assert(URI:new(\"x://[08:19::]/\"))\r\n    is(\"[08:19::]\", uri:host())\r\n    uri = assert(URI:new(\"x://[08:19:2a::]/\"))\r\n    is(\"[08:19:2a::]\", uri:host())\r\n    uri = assert(URI:new(\"x://[08:19:2a:3B::]/\"))\r\n    is(\"[08:19:2a:3b::]\", uri:host())\r\n    uri = assert(URI:new(\"x://[08:19:2a:3B:4c::]/\"))\r\n    is(\"[08:19:2a:3b:4c::]\", uri:host())\r\n    uri = assert(URI:new(\"x://[08:19:2a:3B:4c:5D::]/\"))\r\n    is(\"[08:19:2a:3b:4c:5d::]\", uri:host())\r\n    uri = assert(URI:new(\"x://[08:19:2a:3B:4c:5D:6e::]/\"))\r\n    is(\"[08:19:2a:3b:4c:5d:6e::]\", uri:host())\r\n\r\n    -- Try extremes of good IPv4 addresses mapped to IPv6.\r\n    uri = assert(URI:new(\"x://[::FFFF:0.0.0.0]/path\"))\r\n    is(\"[::ffff:0.0.0.0]\", uri:host())\r\n    uri = assert(URI:new(\"x://[::ffff:255.255.255.255]/path\"))\r\n    is(\"[::ffff:255.255.255.255]\", uri:host())\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]\"))",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "is(\"[abcd:ef01:2345:6789:abcd:ef01:2345:6789]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]/\"))",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]:\"))",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]:/\"))",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "uri = assert(URI:new(\"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]:0/\"))",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "uri = assert(URI:new(\"x://y:z@[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]:80/\"))",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "uri = assert(URI:new(\"x://[2001:DB8:0:0:8:800:200C:417A]/\"))",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "is(\"[2001:db8:0:0:8:800:200c:417a]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "uri = assert(URI:new(\"x://[FF01:0:0:0:0:0:0:101]/\"))",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "is(\"[ff01:0:0:0:0:0:0:101]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "uri = assert(URI:new(\"x://[ff01::101]/\"))",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "is(\"[ff01::101]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "uri = assert(URI:new(\"x://[0:0:0:0:0:0:0:1]/\"))",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "is(\"[0:0:0:0:0:0:0:1]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "uri = assert(URI:new(\"x://[::1]/\"))",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "is(\"[::1]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "uri = assert(URI:new(\"x://[0:0:0:0:0:0:0:0]/\"))",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "is(\"[0:0:0:0:0:0:0:0]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "uri = assert(URI:new(\"x://[0:0:0:0:0:0:13.1.68.3]/\"))",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "is(\"[0:0:0:0:0:0:13.1.68.3]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "uri = assert(URI:new(\"x://[::13.1.68.3]/\"))",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "is(\"[::13.1.68.3]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "uri = assert(URI:new(\"x://[0:0:0:0:0:FFFF:129.144.52.38]/\"))",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "is(\"[0:0:0:0:0:ffff:129.144.52.38]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "uri = assert(URI:new(\"x://[::FFFF:129.144.52.38]/\"))",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "is(\"[::ffff:129.144.52.38]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "uri = assert(URI:new(\"x://[08:19:2a:3B:4c:5D:6e:7F]/\"))",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "is(\"[08:19:2a:3b:4c:5d:6e:7f]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "uri = assert(URI:new(\"x://[::19:2a:3B:4c:5D:6e:7F]/\"))",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "is(\"[::19:2a:3b:4c:5d:6e:7f]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "uri = assert(URI:new(\"x://[::2a:3B:4c:5D:6e:7F]/\"))",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "is(\"[::2a:3b:4c:5d:6e:7f]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "uri = assert(URI:new(\"x://[::3B:4c:5D:6e:7F]/\"))",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "is(\"[::3b:4c:5d:6e:7f]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "uri = assert(URI:new(\"x://[::4c:5D:6e:7F]/\"))",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "is(\"[::4c:5d:6e:7f]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "uri = assert(URI:new(\"x://[::5D:6e:7F]/\"))",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "is(\"[::5d:6e:7f]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "uri = assert(URI:new(\"x://[::6e:7F]/\"))",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "is(\"[::6e:7f]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "uri = assert(URI:new(\"x://[::7F]/\"))",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "is(\"[::7f]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "uri = assert(URI:new(\"x://[::]/\"))",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "is(\"[::]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "uri = assert(URI:new(\"x://[08::]/\"))",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "is(\"[08::]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "uri = assert(URI:new(\"x://[08:19::]/\"))",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "is(\"[08:19::]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "uri = assert(URI:new(\"x://[08:19:2a::]/\"))",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "is(\"[08:19:2a::]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "uri = assert(URI:new(\"x://[08:19:2a:3B::]/\"))",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "is(\"[08:19:2a:3b::]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "uri = assert(URI:new(\"x://[08:19:2a:3B:4c::]/\"))",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "is(\"[08:19:2a:3b:4c::]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "uri = assert(URI:new(\"x://[08:19:2a:3B:4c:5D::]/\"))",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "is(\"[08:19:2a:3b:4c:5d::]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "uri = assert(URI:new(\"x://[08:19:2a:3B:4c:5D:6e::]/\"))",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "is(\"[08:19:2a:3b:4c:5d:6e::]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "uri = assert(URI:new(\"x://[::FFFF:0.0.0.0]/path\"))",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "is(\"[::ffff:0.0.0.0]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "uri = assert(URI:new(\"x://[::ffff:255.255.255.255]/path\"))",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "is(\"[::ffff:255.255.255.255]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function testcase:test_auth_ip6_bad ()\r\n    is_bad_uri(\"empty brackets\", \"x://[]\")\r\n    is_bad_uri(\"just colon\", \"x://[:]\")\r\n    is_bad_uri(\"3 colons only\", \"x://[:::]\")\r\n    is_bad_uri(\"3 colons at start\", \"x://[:::1234]\")\r\n    is_bad_uri(\"3 colons at end\", \"x://[1234:::]\")\r\n    is_bad_uri(\"3 colons in middle\", \"x://[1234:::5678]\")\r\n    is_bad_uri(\"non-hex char\", \"x://[ABCD:EF01:2345:6789:ABCD:EG01:2345:6789]\")\r\n    is_bad_uri(\"chunk too big\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EFF01:2345:6789]\")\r\n    is_bad_uri(\"too many chunks\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789:1]\")\r\n    is_bad_uri(\"not enough chunks\", \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345]\")\r\n    is_bad_uri(\"too many chunks with ellipsis in middle\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD::EF01:2345:6789]\")\r\n    is_bad_uri(\"too many chunks with ellipsis at end\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789::]\")\r\n    is_bad_uri(\"too many chunks with ellipsis at start\",\r\n               \"x://[::ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]\")\r\n    is_bad_uri(\"two elipses, middle and end\",\r\n               \"x://[EF01:2345::6789:ABCD:EF01:2345::]\")\r\n    is_bad_uri(\"two elipses, start and middle\",\r\n               \"x://[::EF01:2345::6789:ABCD:EF01:2345]\")\r\n    is_bad_uri(\"two elipses, both ends\",\r\n               \"x://[::EF01:2345:6789:ABCD:EF01:2345::]\")\r\n    is_bad_uri(\"two elipses, both middle\",\r\n               \"x://[EF01:2345::6789:ABCD:::EF01:2345]\")\r\n    is_bad_uri(\"extra colon at start\",\r\n               \"x://[:ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]\")\r\n    is_bad_uri(\"missing chunk at start\",\r\n               \"x://[:EF01:2345:6789:ABCD:EF01:2345:6789]\")\r\n    is_bad_uri(\"extra colon at end\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789:]\")\r\n    is_bad_uri(\"missing chunk at end\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:]\")\r\n\r\n    -- Bad IPv4 addresses mapped to IPv6.\r\n    is_bad_uri(\"octet 1 too big\", \"x://[::FFFF:256.2.3.4]/\")\r\n    is_bad_uri(\"octet 2 too big\", \"x://[::FFFF:1.256.3.4]/\")\r\n    is_bad_uri(\"octet 3 too big\", \"x://[::FFFF:1.2.256.4]/\")\r\n    is_bad_uri(\"octet 4 too big\", \"x://[::FFFF:1.2.3.256]/\")\r\n    is_bad_uri(\"octet 1 leading zeroes\", \"x://[::FFFF:01.2.3.4]/\")\r\n    is_bad_uri(\"octet 2 leading zeroes\", \"x://[::FFFF:1.02.3.4]/\")\r\n    is_bad_uri(\"octet 3 leading zeroes\", \"x://[::FFFF:1.2.03.4]/\")\r\n    is_bad_uri(\"octet 4 leading zeroes\", \"x://[::FFFF:1.2.3.04]/\")\r\n    is_bad_uri(\"only 2 octets\", \"x://[::FFFF:1.2]/\")\r\n    is_bad_uri(\"only 3 octets\", \"x://[::FFFF:1.2.3]/\")\r\n    is_bad_uri(\"5 octets\", \"x://[::FFFF:1.2.3.4.5]/\")\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "is_bad_uri(\"empty brackets\", \"x://[]\")",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "is_bad_uri(\"just colon\", \"x://[:]\")",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "is_bad_uri(\"3 colons only\", \"x://[:::]\")",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "is_bad_uri(\"3 colons at start\", \"x://[:::1234]\")",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "is_bad_uri(\"3 colons at end\", \"x://[1234:::]\")",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "is_bad_uri(\"3 colons in middle\", \"x://[1234:::5678]\")",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "is_bad_uri(\"non-hex char\", \"x://[ABCD:EF01:2345:6789:ABCD:EG01:2345:6789]\")",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "is_bad_uri(\"chunk too big\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EFF01:2345:6789]\")",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "is_bad_uri(\"too many chunks\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789:1]\")",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "is_bad_uri(\"not enough chunks\", \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345]\")",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "is_bad_uri(\"too many chunks with ellipsis in middle\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD::EF01:2345:6789]\")",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "is_bad_uri(\"too many chunks with ellipsis at end\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789::]\")",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "is_bad_uri(\"too many chunks with ellipsis at start\",\r\n               \"x://[::ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]\")",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "is_bad_uri(\"two elipses, middle and end\",\r\n               \"x://[EF01:2345::6789:ABCD:EF01:2345::]\")",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "is_bad_uri(\"two elipses, start and middle\",\r\n               \"x://[::EF01:2345::6789:ABCD:EF01:2345]\")",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "is_bad_uri(\"two elipses, both ends\",\r\n               \"x://[::EF01:2345:6789:ABCD:EF01:2345::]\")",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "is_bad_uri(\"two elipses, both middle\",\r\n               \"x://[EF01:2345::6789:ABCD:::EF01:2345]\")",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "is_bad_uri(\"extra colon at start\",\r\n               \"x://[:ABCD:EF01:2345:6789:ABCD:EF01:2345:6789]\")",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "is_bad_uri(\"missing chunk at start\",\r\n               \"x://[:EF01:2345:6789:ABCD:EF01:2345:6789]\")",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "is_bad_uri(\"extra colon at end\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:6789:]\")",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "is_bad_uri(\"missing chunk at end\",\r\n               \"x://[ABCD:EF01:2345:6789:ABCD:EF01:2345:]\")",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "is_bad_uri(\"octet 1 too big\", \"x://[::FFFF:256.2.3.4]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "is_bad_uri(\"octet 2 too big\", \"x://[::FFFF:1.256.3.4]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "is_bad_uri(\"octet 3 too big\", \"x://[::FFFF:1.2.256.4]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "is_bad_uri(\"octet 4 too big\", \"x://[::FFFF:1.2.3.256]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "is_bad_uri(\"octet 1 leading zeroes\", \"x://[::FFFF:01.2.3.4]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "is_bad_uri(\"octet 2 leading zeroes\", \"x://[::FFFF:1.02.3.4]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "is_bad_uri(\"octet 3 leading zeroes\", \"x://[::FFFF:1.2.03.4]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "is_bad_uri(\"octet 4 leading zeroes\", \"x://[::FFFF:1.2.3.04]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "is_bad_uri(\"only 2 octets\", \"x://[::FFFF:1.2]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "is_bad_uri(\"only 3 octets\", \"x://[::FFFF:1.2.3]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "is_bad_uri(\"5 octets\", \"x://[::FFFF:1.2.3.4.5]/\")",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function testcase:test_auth_ipvfuture ()\r\n    local uri = assert(URI:new(\"x://[v123456789ABCdef.foo=bar]/\"))\r\n    is(\"[v123456789abcdef.foo=bar]\", uri:host())\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "local uri = assert(URI:new(\"x://[v123456789ABCdef.foo=bar]/\"))",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "is(\"[v123456789abcdef.foo=bar]\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function testcase:test_auth_ipvfuture_bad ()\r\n    is_bad_uri(\"missing dot\", \"x://[v999]\")\r\n    is_bad_uri(\"missing hex num\", \"x://[v.foo]\")\r\n    is_bad_uri(\"missing bit after dot\", \"x://[v999.]\")\r\n    is_bad_uri(\"bad character in hex num\", \"x://[v99g.foo]\")\r\n    is_bad_uri(\"bad character after dot\", \"x://[v999.foo:bar]\")\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "is_bad_uri(\"missing dot\", \"x://[v999]\")",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "is_bad_uri(\"missing hex num\", \"x://[v.foo]\")",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "is_bad_uri(\"missing bit after dot\", \"x://[v999.]\")",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "is_bad_uri(\"bad character in hex num\", \"x://[v99g.foo]\")",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "is_bad_uri(\"bad character after dot\", \"x://[v999.foo:bar]\")",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function testcase:test_auth_set_host ()\r\n    local uri = assert(URI:new(\"x-a://host/path\"))\r\n    is(\"host\", uri:host(\"FOO.BAR\"))\r\n    is(\"x-a://foo.bar/path\", tostring(uri))\r\n    is(\"foo.bar\", uri:host(\"[::6e:7F]\"))\r\n    is(\"x-a://[::6e:7f]/path\", tostring(uri))\r\n    is(\"[::6e:7f]\", uri:host(\"[v7F.foo=BAR]\"))\r\n    is(\"x-a://[v7f.foo=bar]/path\", tostring(uri))\r\n    is(\"[v7f.foo=bar]\", uri:host(\"\"))\r\n    is(\"x-a:///path\", tostring(uri))\r\n    is(\"\", uri:host(nil))\r\n    is(nil, uri:host())\r\n    is(\"x-a:/path\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "local uri = assert(URI:new(\"x-a://host/path\"))",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "is(\"host\", uri:host(\"FOO.BAR\"))",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "is(\"x-a://foo.bar/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "is(\"foo.bar\", uri:host(\"[::6e:7F]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "is(\"x-a://[::6e:7f]/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "is(\"[::6e:7f]\", uri:host(\"[v7F.foo=BAR]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "is(\"x-a://[v7f.foo=bar]/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "is(\"[v7f.foo=bar]\", uri:host(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "is(\"x-a:///path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "is(\"\", uri:host(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "is(nil, uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "is(\"x-a:/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function testcase:test_auth_set_host_bad ()\r\n    local uri = assert(URI:new(\"x-a://host/path\"))\r\n    assert_error(\"bad char in host\", function () uri:host(\"foo^bar\") end)\r\n    assert_error(\"invalid IPv6 host\", function () uri:host(\"[::3G]\") end)\r\n    assert_error(\"invalid IPvFuture host\", function () uri:host(\"[v7.]\") end)\r\n    is(\"host\", uri:host())\r\n    is(\"x-a://host/path\", tostring(uri))\r\n    -- There must be a hsot when there is a userinfo or port.\r\n    uri = assert(URI:new(\"x-a://foo@/\"))\r\n    assert_error(\"userinfo but no host\", function () uri:host(nil) end)\r\n    is(\"x-a://foo@/\", tostring(uri))\r\n    uri = assert(URI:new(\"x-a://:123/\"))\r\n    assert_error(\"port but no host\", function () uri:host(nil) end)\r\n    is(\"x-a://:123/\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "assert_error(\"bad char in host\", function () uri:host(\"foo^bar\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "uri:host(\"foo^bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "assert_error(\"invalid IPv6 host\", function () uri:host(\"[::3G]\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "uri:host(\"[::3G]\")",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "assert_error(\"invalid IPvFuture host\", function () uri:host(\"[v7.]\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "uri:host(\"[v7.]\")",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "is(\"host\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "is(\"x-a://host/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "uri = assert(URI:new(\"x-a://foo@/\"))",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "assert_error(\"userinfo but no host\", function () uri:host(nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "uri:host(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "is(\"x-a://foo@/\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "uri = assert(URI:new(\"x-a://:123/\"))",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "assert_error(\"port but no host\", function () uri:host(nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "is(\"x-a://:123/\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function testcase:test_auth_port ()\r\n    local uri = assert(URI:new(\"x://localhost:0/path\"))\r\n    is(0, uri:port())\r\n    uri = assert(URI:new(\"x://localhost:0\"))\r\n    is(0, uri:port())\r\n    uri = assert(URI:new(\"x://foo:bar@localhost:0\"))\r\n    is(0, uri:port())\r\n    uri = assert(URI:new(\"x://localhost:00/path\"))\r\n    is(0, uri:port())\r\n    uri = assert(URI:new(\"x://localhost:00\"))\r\n    is(0, uri:port())\r\n    uri = assert(URI:new(\"x://foo:bar@localhost:00\"))\r\n    is(0, uri:port())\r\n    uri = assert(URI:new(\"x://localhost:54321/path\"))\r\n    is(54321, uri:port())\r\n    uri = assert(URI:new(\"x://localhost:54321\"))\r\n    is(54321, uri:port())\r\n    uri = assert(URI:new(\"x://foo:bar@localhost:54321\"))\r\n    is(54321, uri:port())\r\n    uri = assert(URI:new(\"x://foo:bar@localhost:\"))\r\n    is(nil, uri:port())\r\n    uri = assert(URI:new(\"x://foo:bar@localhost:/\"))\r\n    is(nil, uri:port())\r\n    uri = assert(URI:new(\"x://foo:bar@localhost\"))\r\n    is(nil, uri:port())\r\n    uri = assert(URI:new(\"x://foo:bar@localhost/\"))\r\n    is(nil, uri:port())\r\nend",
    "type": "function"
  }, {
    "id": 266,
    "text": "local uri = assert(URI:new(\"x://localhost:0/path\"))",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "is(0, uri:port())",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "uri = assert(URI:new(\"x://localhost:0\"))",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "uri = assert(URI:new(\"x://foo:bar@localhost:0\"))",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "uri = assert(URI:new(\"x://localhost:00/path\"))",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "uri = assert(URI:new(\"x://localhost:00\"))",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "uri = assert(URI:new(\"x://foo:bar@localhost:00\"))",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "uri = assert(URI:new(\"x://localhost:54321/path\"))",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "is(54321, uri:port())",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "uri = assert(URI:new(\"x://localhost:54321\"))",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "uri = assert(URI:new(\"x://foo:bar@localhost:54321\"))",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "uri = assert(URI:new(\"x://foo:bar@localhost:\"))",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "is(nil, uri:port())",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "uri = assert(URI:new(\"x://foo:bar@localhost:/\"))",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "uri = assert(URI:new(\"x://foo:bar@localhost\"))",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "uri = assert(URI:new(\"x://foo:bar@localhost/\"))",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 283,
    "text": "function testcase:test_auth_set_port ()\r\n    -- Test unusual but valid values for port.\r\n    local uri = assert(URI:new(\"x://localhost/path\"))\r\n    is(nil, uri:port(\"12345\"))  -- string\r\n    is(12345, uri:port())\r\n    is(\"x://localhost:12345/path\", tostring(uri))\r\n    uri = assert(URI:new(\"x://localhost/path\"))\r\n    is(nil, uri:port(12345.0))  -- float\r\n    is(12345, uri:port())\r\n    is(\"x://localhost:12345/path\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 284,
    "text": "local uri = assert(URI:new(\"x://localhost/path\"))",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "is(nil, uri:port(\"12345\"))",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "is(12345, uri:port())",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "is(\"x://localhost:12345/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "uri = assert(URI:new(\"x://localhost/path\"))",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "is(nil, uri:port(12345.0))",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 291,
    "text": "function testcase:test_auth_set_port_without_host ()\r\n    local uri = assert(URI:new(\"x:///path\"))\r\n    is(nil, uri:port(80))\r\n    is(80, uri:port())\r\n    is(\"\", uri:host())\r\n    is(\"x://:80/path\", tostring(uri))\r\n    uri = assert(URI:new(\"x:/path\"))\r\n    is(nil, uri:port(80))\r\n    is(80, uri:port())\r\n    is(\"\", uri:host())\r\n    is(\"x://:80/path\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 292,
    "text": "local uri = assert(URI:new(\"x:///path\"))",
    "type": "statement:localassign"
  }, {
    "id": 293,
    "text": "is(nil, uri:port(80))",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "is(\"\", uri:host())",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "is(\"x://:80/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "uri = assert(URI:new(\"x:/path\"))",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function testcase:test_auth_set_port_bad ()\r\n    local uri = assert(URI:new(\"x://localhost:54321/path\"))\r\n    assert_error(\"negative port number\", function () uri:port(-23) end)\r\n    assert_error(\"port not integer\", function () uri:port(23.00001) end)\r\n    assert_error(\"string not number\", function () uri:port(\"x\") end)\r\n    assert_error(\"string not all number\", function () uri:port(\"x23\") end)\r\n    assert_error(\"string negative number\", function () uri:port(\"-23\") end)\r\n    assert_error(\"string empty\", function () uri:port(\"\") end)\r\n    is(54321, uri:port())\r\n    is(\"x://localhost:54321/path\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 299,
    "text": "local uri = assert(URI:new(\"x://localhost:54321/path\"))",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "assert_error(\"negative port number\", function () uri:port(-23) end)",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "uri:port(-23)",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "assert_error(\"port not integer\", function () uri:port(23.00001) end)",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "uri:port(23.00001)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "assert_error(\"string not number\", function () uri:port(\"x\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "uri:port(\"x\")",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "assert_error(\"string not all number\", function () uri:port(\"x23\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "uri:port(\"x23\")",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "assert_error(\"string negative number\", function () uri:port(\"-23\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "uri:port(\"-23\")",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "assert_error(\"string empty\", function () uri:port(\"\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "uri:port(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "is(\"x://localhost:54321/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function testcase:test_path ()\r\n    local uri = assert(URI:new(\"x:\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x:?\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x:#\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x:/\"))\r\n    is(\"/\", uri:path())\r\n    uri = assert(URI:new(\"x://\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x://?\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x://#\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x:///\"))\r\n    is(\"/\", uri:path())\r\n    uri = assert(URI:new(\"x:////\"))\r\n    is(\"//\", uri:path())\r\n    uri = assert(URI:new(\"x:foo\"))\r\n    is(\"foo\", uri:path())\r\n    uri = assert(URI:new(\"x:/foo\"))\r\n    is(\"/foo\", uri:path())\r\n    uri = assert(URI:new(\"x://foo\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x://foo?\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x://foo#\"))\r\n    is(\"\", uri:path())\r\n    uri = assert(URI:new(\"x:///foo\"))\r\n    is(\"/foo\", uri:path())\r\n    uri = assert(URI:new(\"x:////foo\"))\r\n    is(\"//foo\", uri:path())\r\n    uri = assert(URI:new(\"x://foo/\"))\r\n    is(\"/\", uri:path())\r\n    uri = assert(URI:new(\"x://foo/bar\"))\r\n    is(\"/bar\", uri:path())\r\nend",
    "type": "function"
  }, {
    "id": 315,
    "text": "local uri = assert(URI:new(\"x:\"))",
    "type": "statement:localassign"
  }, {
    "id": 316,
    "text": "is(\"\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "uri = assert(URI:new(\"x:?\"))",
    "type": "statement:assign"
  }, {
    "id": 318,
    "text": "uri = assert(URI:new(\"x:#\"))",
    "type": "statement:assign"
  }, {
    "id": 319,
    "text": "uri = assert(URI:new(\"x:/\"))",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "is(\"/\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "uri = assert(URI:new(\"x://\"))",
    "type": "statement:assign"
  }, {
    "id": 322,
    "text": "uri = assert(URI:new(\"x://?\"))",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "uri = assert(URI:new(\"x://#\"))",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "uri = assert(URI:new(\"x:///\"))",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "uri = assert(URI:new(\"x:////\"))",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "is(\"//\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "uri = assert(URI:new(\"x:foo\"))",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "is(\"foo\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "uri = assert(URI:new(\"x:/foo\"))",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "is(\"/foo\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "uri = assert(URI:new(\"x://foo\"))",
    "type": "statement:assign"
  }, {
    "id": 332,
    "text": "uri = assert(URI:new(\"x://foo?\"))",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "uri = assert(URI:new(\"x://foo#\"))",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "uri = assert(URI:new(\"x:///foo\"))",
    "type": "statement:assign"
  }, {
    "id": 335,
    "text": "uri = assert(URI:new(\"x:////foo\"))",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "is(\"//foo\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "uri = assert(URI:new(\"x://foo/\"))",
    "type": "statement:assign"
  }, {
    "id": 338,
    "text": "uri = assert(URI:new(\"x://foo/bar\"))",
    "type": "statement:assign"
  }, {
    "id": 339,
    "text": "is(\"/bar\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 341,
    "text": "function testcase:test_path_bad ()\r\n    is_bad_uri(\"bad character in path\", \"x-a://host/^/\")\r\nend",
    "type": "function"
  }, {
    "id": 342,
    "text": "is_bad_uri(\"bad character in path\", \"x-a://host/^/\")",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 344,
    "text": "function testcase:test_set_path_without_auth ()\r\n    local uri = assert(URI:new(\"x:blah\"))\r\n    is(\"blah\", uri:path(\"frob%25%3a%78/%2F\"))\r\n    is(\"frob%25%3Ax/%2F\", uri:path(\"/foo/bar\"))\r\n    is(\"/foo/bar\", uri:path(\"//foo//bar\"))\r\n    is(\"/%2Ffoo//bar\", uri:path(\"x ?#\\\"\\0\\127\\255\"))\r\n    is(\"x%20%3F%23%22%00%7F%FF\", uri:path(\"\"))\r\n    is(\"\", uri:path(nil))\r\n    is(\"\", uri:path())\r\n    is(\"x:\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 345,
    "text": "local uri = assert(URI:new(\"x:blah\"))",
    "type": "statement:localassign"
  }, {
    "id": 346,
    "text": "is(\"blah\", uri:path(\"frob%25%3a%78/%2F\"))",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "is(\"frob%25%3Ax/%2F\", uri:path(\"/foo/bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "is(\"/foo/bar\", uri:path(\"//foo//bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "is(\"/%2Ffoo//bar\", uri:path(\"x ?#\\\"\\0\\127\\255\"))",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "is(\"x%20%3F%23%22%00%7F%FF\", uri:path(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "is(\"\", uri:path(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "is(\"x:\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 354,
    "text": "function testcase:test_set_path_with_auth ()\r\n    local uri = assert(URI:new(\"x://host/wibble\"))\r\n    is(\"/wibble\", uri:path(\"/foo/bar\"))\r\n    is(\"/foo/bar\", uri:path(\"//foo//bar\"))\r\n    is(\"//foo//bar\", uri:path(nil))\r\n    is(\"\", uri:path(\"\"))\r\n    is(\"\", uri:path())\r\n    is(\"x://host\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 355,
    "text": "local uri = assert(URI:new(\"x://host/wibble\"))",
    "type": "statement:localassign"
  }, {
    "id": 356,
    "text": "is(\"/wibble\", uri:path(\"/foo/bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "is(\"//foo//bar\", uri:path(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "is(\"\", uri:path(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "is(\"x://host\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 361,
    "text": "function testcase:test_set_path_bad ()\r\n    local uri = assert(URI:new(\"x://host/wibble\"))\r\n    tostring(uri)\r\n    assert_error(\"with authority, path must start with /\",\r\n                 function () uri:path(\"foo\") end)\r\n    assert_error(\"bad %-encoding, % at end\", function () uri:path(\"foo%\") end)\r\n    assert_error(\"bad %-encoding, %2 at end\", function () uri:path(\"foo%2\") end)\r\n    assert_error(\"bad %-encoding, %gf\", function () uri:path(\"%gf\") end)\r\n    assert_error(\"bad %-encoding, %fg\", function () uri:path(\"%fg\") end)\r\n    is(\"/wibble\", uri:path())\r\n    is(\"x://host/wibble\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 362,
    "text": "tostring(uri)",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "assert_error(\"with authority, path must start with /\",\r\n                 function () uri:path(\"foo\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "uri:path(\"foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 365,
    "text": "assert_error(\"bad %-encoding, % at end\", function () uri:path(\"foo%\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 366,
    "text": "uri:path(\"foo%\")",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "assert_error(\"bad %-encoding, %2 at end\", function () uri:path(\"foo%2\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "uri:path(\"foo%2\")",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "assert_error(\"bad %-encoding, %gf\", function () uri:path(\"%gf\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "uri:path(\"%gf\")",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "assert_error(\"bad %-encoding, %fg\", function () uri:path(\"%fg\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "uri:path(\"%fg\")",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "is(\"/wibble\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "is(\"x://host/wibble\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function testcase:test_query ()\r\n    local uri = assert(URI:new(\"x:?\"))\r\n    is(\"\", uri:query())\r\n    uri = assert(URI:new(\"x:\"))\r\n    is(nil, uri:query())\r\n    uri = assert(URI:new(\"x:/foo\"))\r\n    is(nil, uri:query())\r\n    uri = assert(URI:new(\"x:/foo#\"))\r\n    is(nil, uri:query())\r\n    uri = assert(URI:new(\"x:/foo#bar?baz\"))\r\n    is(nil, uri:query())\r\n    uri = assert(URI:new(\"x:/foo?\"))\r\n    is(\"\", uri:query())\r\n    uri = assert(URI:new(\"x://foo?\"))\r\n    is(\"\", uri:query())\r\n    uri = assert(URI:new(\"x://foo/?\"))\r\n    is(\"\", uri:query())\r\n    uri = assert(URI:new(\"x:/foo?bar\"))\r\n    is(\"bar\", uri:query())\r\n    uri = assert(URI:new(\"x:?foo?bar?\"))\r\n    is(\"foo?bar?\", uri:query())\r\n    uri = assert(URI:new(\"x:?foo?bar?#quux?frob\"))\r\n    is(\"foo?bar?\", uri:query())\r\n    uri = assert(URI:new(\"x://foo/bar%3Fbaz?\"))\r\n    is(\"\", uri:query())\r\n    uri = assert(URI:new(\"x:%3F?foo\"))\r\n    is(\"%3F\", uri:path())\r\n    is(\"foo\", uri:query())\r\nend",
    "type": "function"
  }, {
    "id": 377,
    "text": "local uri = assert(URI:new(\"x:?\"))",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "is(\"\", uri:query())",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "uri = assert(URI:new(\"x:\"))",
    "type": "statement:assign"
  }, {
    "id": 380,
    "text": "is(nil, uri:query())",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "uri = assert(URI:new(\"x:/foo#\"))",
    "type": "statement:assign"
  }, {
    "id": 382,
    "text": "uri = assert(URI:new(\"x:/foo#bar?baz\"))",
    "type": "statement:assign"
  }, {
    "id": 383,
    "text": "uri = assert(URI:new(\"x:/foo?\"))",
    "type": "statement:assign"
  }, {
    "id": 384,
    "text": "uri = assert(URI:new(\"x://foo/?\"))",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "uri = assert(URI:new(\"x:/foo?bar\"))",
    "type": "statement:assign"
  }, {
    "id": 386,
    "text": "is(\"bar\", uri:query())",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "uri = assert(URI:new(\"x:?foo?bar?\"))",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "is(\"foo?bar?\", uri:query())",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "uri = assert(URI:new(\"x:?foo?bar?#quux?frob\"))",
    "type": "statement:assign"
  }, {
    "id": 390,
    "text": "uri = assert(URI:new(\"x://foo/bar%3Fbaz?\"))",
    "type": "statement:assign"
  }, {
    "id": 391,
    "text": "uri = assert(URI:new(\"x:%3F?foo\"))",
    "type": "statement:assign"
  }, {
    "id": 392,
    "text": "is(\"%3F\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "is(\"foo\", uri:query())",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 395,
    "text": "function testcase:test_query_bad ()\r\n    is_bad_uri(\"bad character in query\", \"x-a://host/path/?foo^bar\")\r\nend",
    "type": "function"
  }, {
    "id": 396,
    "text": "is_bad_uri(\"bad character in query\", \"x-a://host/path/?foo^bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 398,
    "text": "function testcase:test_set_query ()\r\n    local uri = assert(URI:new(\"x://host/path\"))\r\n    is(nil, uri:query(\"foo/bar?baz\"))\r\n    is(\"x://host/path?foo/bar?baz\", tostring(uri))\r\n    is(\"foo/bar?baz\", uri:query(\"\"))\r\n    is(\"x://host/path?\", tostring(uri))\r\n    is(\"\", uri:query(\"foo^bar#baz\"))\r\n    is(\"x://host/path?foo%5Ebar%23baz\", tostring(uri))\r\n    is(\"foo%5Ebar%23baz\", uri:query(nil))\r\n    is(nil, uri:query())\r\n    is(\"x://host/path\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 399,
    "text": "local uri = assert(URI:new(\"x://host/path\"))",
    "type": "statement:localassign"
  }, {
    "id": 400,
    "text": "is(nil, uri:query(\"foo/bar?baz\"))",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "is(\"x://host/path?foo/bar?baz\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "is(\"foo/bar?baz\", uri:query(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "is(\"x://host/path?\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "is(\"\", uri:query(\"foo^bar#baz\"))",
    "type": "statement:functioncall"
  }, {
    "id": 405,
    "text": "is(\"x://host/path?foo%5Ebar%23baz\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 406,
    "text": "is(\"foo%5Ebar%23baz\", uri:query(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 407,
    "text": "is(\"x://host/path\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "function testcase:test_fragment ()\r\n    local uri = assert(URI:new(\"x:\"))\r\n    is(nil, uri:fragment())\r\n    uri = assert(URI:new(\"x:#\"))\r\n    is(\"\", uri:fragment())\r\n    uri = assert(URI:new(\"x://#\"))\r\n    is(\"\", uri:fragment())\r\n    uri = assert(URI:new(\"x:///#\"))\r\n    is(\"\", uri:fragment())\r\n    uri = assert(URI:new(\"x:////#\"))\r\n    is(\"\", uri:fragment())\r\n    uri = assert(URI:new(\"x:#foo\"))\r\n    is(\"foo\", uri:fragment())\r\n    uri = assert(URI:new(\"x:%23#foo\"))\r\n    is(\"%23\", uri:path())\r\n    is(\"foo\", uri:fragment())\r\n    uri = assert(URI:new(\"x:?foo?bar?#quux?frob\"))\r\n    is(\"quux?frob\", uri:fragment())\r\nend",
    "type": "function"
  }, {
    "id": 410,
    "text": "is(nil, uri:fragment())",
    "type": "statement:functioncall"
  }, {
    "id": 411,
    "text": "is(\"\", uri:fragment())",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "uri = assert(URI:new(\"x:///#\"))",
    "type": "statement:assign"
  }, {
    "id": 413,
    "text": "uri = assert(URI:new(\"x:////#\"))",
    "type": "statement:assign"
  }, {
    "id": 414,
    "text": "uri = assert(URI:new(\"x:#foo\"))",
    "type": "statement:assign"
  }, {
    "id": 415,
    "text": "is(\"foo\", uri:fragment())",
    "type": "statement:functioncall"
  }, {
    "id": 416,
    "text": "uri = assert(URI:new(\"x:%23#foo\"))",
    "type": "statement:assign"
  }, {
    "id": 417,
    "text": "is(\"%23\", uri:path())",
    "type": "statement:functioncall"
  }, {
    "id": 418,
    "text": "is(\"quux?frob\", uri:fragment())",
    "type": "statement:functioncall"
  }, {
    "id": 419,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 420,
    "text": "function testcase:test_fragment_bad ()\r\n    is_bad_uri(\"bad character in fragment\", \"x-a://host/path/#foo^bar\")\r\nend",
    "type": "function"
  }, {
    "id": 421,
    "text": "is_bad_uri(\"bad character in fragment\", \"x-a://host/path/#foo^bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 422,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 423,
    "text": "function testcase:test_set_fragment ()\r\n    local uri = assert(URI:new(\"x://host/path\"))\r\n    is(nil, uri:fragment(\"foo/bar#baz\"))\r\n    is(\"x://host/path#foo/bar%23baz\", tostring(uri))\r\n    is(\"foo/bar%23baz\", uri:fragment(\"\"))\r\n    is(\"x://host/path#\", tostring(uri))\r\n    is(\"\", uri:fragment(\"foo^bar?baz\"))\r\n    is(\"x://host/path#foo%5Ebar?baz\", tostring(uri))\r\n    is(\"foo%5Ebar?baz\", uri:fragment(nil))\r\n    is(nil, uri:fragment())\r\n    is(\"x://host/path\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 424,
    "text": "is(nil, uri:fragment(\"foo/bar#baz\"))",
    "type": "statement:functioncall"
  }, {
    "id": 425,
    "text": "is(\"x://host/path#foo/bar%23baz\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 426,
    "text": "is(\"foo/bar%23baz\", uri:fragment(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 427,
    "text": "is(\"x://host/path#\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 428,
    "text": "is(\"\", uri:fragment(\"foo^bar?baz\"))",
    "type": "statement:functioncall"
  }, {
    "id": 429,
    "text": "is(\"x://host/path#foo%5Ebar?baz\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 430,
    "text": "is(\"foo%5Ebar?baz\", uri:fragment(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 431,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 432,
    "text": "function testcase:test_bad_usage ()\r\n    assert_error(\"missing uri arg\", function () URI:new() end)\r\n    assert_error(\"nil uri arg\", function () URI:new(nil) end)\r\nend",
    "type": "function"
  }, {
    "id": 433,
    "text": "assert_error(\"missing uri arg\", function () URI:new() end)",
    "type": "statement:functioncall"
  }, {
    "id": 434,
    "text": "URI:new()",
    "type": "statement:functioncall"
  }, {
    "id": 435,
    "text": "assert_error(\"nil uri arg\", function () URI:new(nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 436,
    "text": "URI:new(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 437,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 438,
    "text": "function testcase:test_clone_with_new ()\r\n    -- Test cloning with as many components set as possible.\r\n    local uri = assert(URI:new(\"x-foo://user:pass@bar.com:123/blah?q#frag\"))\r\n    tostring(uri)\r\n    local clone = URI:new(uri)\r\n    assert_table(clone)\r\n    is(\"x-foo://user:pass@bar.com:123/blah?q#frag\", tostring(uri))\r\n    is(\"x-foo://user:pass@bar.com:123/blah?q#frag\", tostring(clone))\r\n    is(\"uri\", getmetatable(uri)._NAME)\r\n    is(\"uri\", getmetatable(clone)._NAME)\r\n\r\n    -- Test cloning with less stuff specified, but not in the base class.\r\n    uri = assert(URI:new(\"http://example.com/\"))\r\n    clone = URI:new(uri)\r\n    assert_table(clone)\r\n    is(\"http://example.com/\", tostring(uri))\r\n    is(\"http://example.com/\", tostring(clone))\r\n    is(\"uri.http\", getmetatable(uri)._NAME)\r\n    is(\"uri.http\", getmetatable(clone)._NAME)\r\nend",
    "type": "function"
  }, {
    "id": 439,
    "text": "local uri = assert(URI:new(\"x-foo://user:pass@bar.com:123/blah?q#frag\"))",
    "type": "statement:localassign"
  }, {
    "id": 440,
    "text": "local clone = URI:new(uri)",
    "type": "statement:localassign"
  }, {
    "id": 441,
    "text": "assert_table(clone)",
    "type": "statement:functioncall"
  }, {
    "id": 442,
    "text": "is(\"x-foo://user:pass@bar.com:123/blah?q#frag\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "is(\"x-foo://user:pass@bar.com:123/blah?q#frag\", tostring(clone))",
    "type": "statement:functioncall"
  }, {
    "id": 444,
    "text": "is(\"uri\", getmetatable(uri)._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 445,
    "text": "is(\"uri\", getmetatable(clone)._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 446,
    "text": "uri = assert(URI:new(\"http://example.com/\"))",
    "type": "statement:assign"
  }, {
    "id": 447,
    "text": "clone = URI:new(uri)",
    "type": "statement:assign"
  }, {
    "id": 448,
    "text": "is(\"http://example.com/\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 449,
    "text": "is(\"http://example.com/\", tostring(clone))",
    "type": "statement:functioncall"
  }, {
    "id": 450,
    "text": "is(\"uri.http\", getmetatable(uri)._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 451,
    "text": "is(\"uri.http\", getmetatable(clone)._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 452,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 453,
    "text": "function testcase:test_set_uri ()\r\n    local uri = assert(URI:new(\"x-foo://user:pass@bar.com:123/blah?q#frag\"))\r\n    is(\"x-foo://user:pass@bar.com:123/blah?q#frag\",\r\n       uri:uri(\"http://example.com:81/blah2?q2#frag2\"))\r\n    is(\"http://example.com:81/blah2?q2#frag2\", uri:uri())\r\n    is(\"uri.http\", getmetatable(uri)._NAME)\r\n    is(\"http\", uri:scheme())\r\n    is(\"q2\", uri:query())\r\n    is(\"http://example.com:81/blah2?q2#frag2\", uri:uri(\"Urn:X-FOO:bar\"))\r\n    is(\"uri.urn\", getmetatable(uri)._NAME)\r\n    is(\"x-foo\", uri:nid())\r\n    is(\"urn:x-foo:bar\", tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 454,
    "text": "is(\"x-foo://user:pass@bar.com:123/blah?q#frag\",\r\n       uri:uri(\"http://example.com:81/blah2?q2#frag2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 455,
    "text": "is(\"http://example.com:81/blah2?q2#frag2\", uri:uri())",
    "type": "statement:functioncall"
  }, {
    "id": 456,
    "text": "is(\"q2\", uri:query())",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "is(\"http://example.com:81/blah2?q2#frag2\", uri:uri(\"Urn:X-FOO:bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 458,
    "text": "is(\"uri.urn\", getmetatable(uri)._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "is(\"x-foo\", uri:nid())",
    "type": "statement:functioncall"
  }, {
    "id": 460,
    "text": "is(\"urn:x-foo:bar\", tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 461,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 462,
    "text": "function testcase:test_set_uri_bad ()\r\n    local uri = assert(URI:new(\"x-foo://user:pass@bar.com:123/blah?q#frag\"))\r\n    assert_error(\"can't set URI to nil\", function () uri:uri(nil) end)\r\n    assert_error(\"invalid authority\", function () uri:uri(\"foo://@@\") end)\r\n    is(\"x-foo://user:pass@bar.com:123/blah?q#frag\", uri:uri())\r\n    is(\"uri\", getmetatable(uri)._NAME)\r\n    is(\"x-foo\", uri:scheme())\r\nend",
    "type": "function"
  }, {
    "id": 463,
    "text": "assert_error(\"can't set URI to nil\", function () uri:uri(nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 464,
    "text": "uri:uri(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 465,
    "text": "assert_error(\"invalid authority\", function () uri:uri(\"foo://@@\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 466,
    "text": "uri:uri(\"foo://@@\")",
    "type": "statement:functioncall"
  }, {
    "id": 467,
    "text": "is(\"x-foo://user:pass@bar.com:123/blah?q#frag\", uri:uri())",
    "type": "statement:functioncall"
  }, {
    "id": 468,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 469,
    "text": "function testcase:test_eq ()\r\n    local uri1str, uri2str = \"x-a://host/foo\", \"x-a://host/bar\"\r\n    local uri1obj, uri2obj = assert(URI:new(uri1str)), assert(URI:new(uri2str))\r\n    assert_true(URI.eq(uri1str, uri1str), \"str == str\")\r\n    assert_false(URI.eq(uri1str, uri2str), \"str ~= str\")\r\n    assert_true(URI.eq(uri1str, uri1obj), \"str == obj\")\r\n    assert_false(URI.eq(uri1str, uri2obj), \"str ~= obj\")\r\n    assert_true(URI.eq(uri1obj, uri1str), \"obj == str\")\r\n    assert_false(URI.eq(uri1obj, uri2str), \"obj ~= str\")\r\n    assert_true(URI.eq(uri1obj, uri1obj), \"obj == obj\")\r\n    assert_false(URI.eq(uri1obj, uri2obj), \"obj ~= obj\")\r\nend",
    "type": "function"
  }, {
    "id": 470,
    "text": "local uri1str, uri2str = \"x-a://host/foo\", \"x-a://host/bar\"",
    "type": "statement:localassign"
  }, {
    "id": 471,
    "text": "local uri1obj, uri2obj = assert(URI:new(uri1str)), assert(URI:new(uri2str))",
    "type": "statement:localassign"
  }, {
    "id": 472,
    "text": "assert_true(URI.eq(uri1str, uri1str), \"str == str\")",
    "type": "statement:functioncall"
  }, {
    "id": 473,
    "text": "assert_false(URI.eq(uri1str, uri2str), \"str ~= str\")",
    "type": "statement:functioncall"
  }, {
    "id": 474,
    "text": "assert_true(URI.eq(uri1str, uri1obj), \"str == obj\")",
    "type": "statement:functioncall"
  }, {
    "id": 475,
    "text": "assert_false(URI.eq(uri1str, uri2obj), \"str ~= obj\")",
    "type": "statement:functioncall"
  }, {
    "id": 476,
    "text": "assert_true(URI.eq(uri1obj, uri1str), \"obj == str\")",
    "type": "statement:functioncall"
  }, {
    "id": 477,
    "text": "assert_false(URI.eq(uri1obj, uri2str), \"obj ~= str\")",
    "type": "statement:functioncall"
  }, {
    "id": 478,
    "text": "assert_true(URI.eq(uri1obj, uri1obj), \"obj == obj\")",
    "type": "statement:functioncall"
  }, {
    "id": 479,
    "text": "assert_false(URI.eq(uri1obj, uri2obj), \"obj ~= obj\")",
    "type": "statement:functioncall"
  }, {
    "id": 480,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 481,
    "text": "function testcase:test_eq_bad_uri ()\r\n    -- Check that an exception is thrown when 'eq' is given a bad URI string,\r\n    -- and also that it's not just the error from trying to call the 'uri'\r\n    -- method on nil, because that won't be very helpful to the caller.\r\n    local ok, err = pcall(URI.eq, \"^\", \"x-a://x/\")\r\n    assert_false(ok)\r\n    assert_not_match(\"a nil value\", err)\r\n    ok, err = pcall(URI.eq, \"x-a://x/\", \"^\")\r\n    assert_false(ok)\r\n    assert_not_match(\"a nil value\", err)\r\nend",
    "type": "function"
  }, {
    "id": 482,
    "text": "local ok, err = pcall(URI.eq, \"^\", \"x-a://x/\")",
    "type": "statement:localassign"
  }, {
    "id": 483,
    "text": "assert_false(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "assert_not_match(\"a nil value\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 485,
    "text": "ok, err = pcall(URI.eq, \"x-a://x/\", \"^\")",
    "type": "statement:assign"
  }, {
    "id": 486,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 487,
    "text": "function () URI:new(\"x:foo%%2525\") end",
    "type": "function"
  }, {
    "id": 488,
    "text": "function () URI:new(\"x:foo%\") end",
    "type": "function"
  }, {
    "id": 489,
    "text": "function () URI:new(\"x:f%20o%\") end",
    "type": "function"
  }, {
    "id": 490,
    "text": "function () URI:new(\"x:foo%2\") end",
    "type": "function"
  }, {
    "id": 491,
    "text": "function () URI:new(\"x:f%20o%2\") end",
    "type": "function"
  }, {
    "id": 492,
    "text": "function () URI:new(\"x:foo%G2bar\") end",
    "type": "function"
  }, {
    "id": 493,
    "text": "function () URI:new(\"x:foo%2Gbar\") end",
    "type": "function"
  }, {
    "id": 494,
    "text": "function () URI:new(\"x:foo%GGbar\") end",
    "type": "function"
  }, {
    "id": 495,
    "text": "function () uri:scheme(\"-x-foo\") end",
    "type": "function"
  }, {
    "id": 496,
    "text": "function () uri:scheme(\"x,foo\") end",
    "type": "function"
  }, {
    "id": 497,
    "text": "function () uri:scheme(\"x:foo\") end",
    "type": "function"
  }, {
    "id": 498,
    "text": "function () uri:scheme(\"x-foo:\") end",
    "type": "function"
  }, {
    "id": 499,
    "text": "function () uri:scheme(\"http\") end",
    "type": "function"
  }, {
    "id": 500,
    "text": "function () uri:userinfo(\"foo/bar\") end",
    "type": "function"
  }, {
    "id": 501,
    "text": "function () uri:userinfo(\"foo@bar\") end",
    "type": "function"
  }, {
    "id": 502,
    "text": "function () uri:host(\"foo^bar\") end",
    "type": "function"
  }, {
    "id": 503,
    "text": "function () uri:host(\"[::3G]\") end",
    "type": "function"
  }, {
    "id": 504,
    "text": "function () uri:host(\"[v7.]\") end",
    "type": "function"
  }, {
    "id": 505,
    "text": "function () uri:host(nil) end",
    "type": "function"
  }, {
    "id": 506,
    "text": "function () uri:host(nil) end",
    "type": "function"
  }, {
    "id": 507,
    "text": "function () uri:port(-23) end",
    "type": "function"
  }, {
    "id": 508,
    "text": "function () uri:port(23.00001) end",
    "type": "function"
  }, {
    "id": 509,
    "text": "function () uri:port(\"x\") end",
    "type": "function"
  }, {
    "id": 510,
    "text": "function () uri:port(\"x23\") end",
    "type": "function"
  }, {
    "id": 511,
    "text": "function () uri:port(\"-23\") end",
    "type": "function"
  }, {
    "id": 512,
    "text": "function () uri:port(\"\") end",
    "type": "function"
  }, {
    "id": 513,
    "text": "function () uri:path(\"foo\") end",
    "type": "function"
  }, {
    "id": 514,
    "text": "function () uri:path(\"foo%\") end",
    "type": "function"
  }, {
    "id": 515,
    "text": "function () uri:path(\"foo%2\") end",
    "type": "function"
  }, {
    "id": 516,
    "text": "function () uri:path(\"%gf\") end",
    "type": "function"
  }, {
    "id": 517,
    "text": "function () uri:path(\"%fg\") end",
    "type": "function"
  }, {
    "id": 518,
    "text": "function () URI:new() end",
    "type": "function"
  }, {
    "id": 519,
    "text": "function () URI:new(nil) end",
    "type": "function"
  }, {
    "id": 520,
    "text": "function () uri:uri(nil) end",
    "type": "function"
  }, {
    "id": 521,
    "text": "function () uri:uri(\"foo://@@\") end",
    "type": "function"
  }, {
    "id": 522,
    "text": "",
    "type": "function container"
  }, {
    "id": 523,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 524,
    "text": "format",
    "type": "global function"
  }, {
    "id": 525,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 526,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 527,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 528,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 529,
    "text": "test_norm",
    "type": "global function"
  }, {
    "id": 530,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 531,
    "text": "assert_not_match",
    "type": "global function"
  }, {
    "id": 532,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 533,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 534,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 535,
    "text": "TestCase",
    "type": "global function"
  }, {
    "id": 536,
    "text": "is_bad_uri",
    "type": "global function"
  }, {
    "id": 537,
    "text": "test_norm_already",
    "type": "global function"
  }, {
    "id": 538,
    "text": "is",
    "type": "global function"
  }, {
    "id": 539,
    "text": "require",
    "type": "global function"
  }, {
    "id": 540,
    "text": "run",
    "type": "global function"
  }, {
    "id": 541,
    "text": "",
    "type": "global variable"
  }, {
    "id": 542,
    "text": "",
    "type": "variable container"
  }, {
    "id": 543,
    "text": "",
    "type": "require container"
  }, {
    "id": 544,
    "text": "",
    "type": "local variable"
  }, {
    "id": 545,
    "text": "",
    "type": "n/a"
  }, {
    "id": 546,
    "text": "",
    "type": "require local variable"
  } ]
}