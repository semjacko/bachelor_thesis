{
  "_filename": "_relative.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-uri/uri/_relative.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 8,
    "label": "calls",
    "to": 61
  }, {
    "from": 8,
    "label": "calls",
    "to": 66
  }, {
    "from": 8,
    "label": "calls",
    "to": 66
  }, {
    "from": 8,
    "label": "calls",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 8
  }, {
    "from": 8,
    "label": "declares",
    "to": 4
  }, {
    "from": 8,
    "label": "declares",
    "to": 5
  }, {
    "from": 8,
    "label": "declares",
    "to": 6
  }, {
    "from": 8,
    "label": "declares",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 20,
    "label": "has",
    "to": 37
  }, {
    "from": 20,
    "label": "has",
    "to": 38
  }, {
    "from": 20,
    "label": "has",
    "to": 39
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 20,
    "label": "calls",
    "to": 17
  }, {
    "from": 8,
    "label": "calls",
    "to": 55
  }, {
    "from": 20,
    "label": "calls",
    "to": 56
  }, {
    "from": 41,
    "label": "calls",
    "to": 56
  }, {
    "from": 41,
    "label": "calls",
    "to": 60
  }, {
    "from": 41,
    "label": "calls",
    "to": 60
  }, {
    "from": 41,
    "label": "calls",
    "to": 57
  }, {
    "from": 12,
    "label": "calls",
    "to": 62
  }, {
    "from": 41,
    "label": "calls",
    "to": 62
  }, {
    "from": 20,
    "label": "calls",
    "to": 64
  }, {
    "from": 41,
    "label": "calls",
    "to": 64
  }, {
    "from": 12,
    "label": "calls",
    "to": 63
  }, {
    "from": 20,
    "label": "calls",
    "to": 54
  }, {
    "from": 20,
    "label": "calls",
    "to": 54
  }, {
    "from": 20,
    "label": "calls",
    "to": 54
  }, {
    "from": 20,
    "label": "calls",
    "to": 65
  }, {
    "from": 41,
    "label": "calls",
    "to": 59
  }, {
    "from": 41,
    "label": "calls",
    "to": 58
  }, {
    "from": 8,
    "label": "calls",
    "to": 66
  }, {
    "from": 8,
    "label": "calls",
    "to": 66
  }, {
    "from": 8,
    "label": "declares",
    "to": 9
  }, {
    "from": 8,
    "label": "declares",
    "to": 12
  }, {
    "from": 8,
    "label": "declares",
    "to": 16
  }, {
    "from": 8,
    "label": "declares",
    "to": 17
  }, {
    "from": 8,
    "label": "declares",
    "to": 20
  }, {
    "from": 8,
    "label": "declares",
    "to": 41
  }, {
    "from": 8,
    "label": "declares",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 69,
    "label": "initializes",
    "to": 71
  }, {
    "from": 70,
    "label": "initializes",
    "to": 72
  }, {
    "from": 70,
    "label": "initializes",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 74,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 75,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "requires",
    "to": 2
  }, {
    "from": 75,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 3
  }, {
    "from": 1,
    "label": "provides",
    "to": 82
  }, {
    "from": 73,
    "label": "represents",
    "to": 83
  }, {
    "from": 82,
    "label": "provides",
    "to": 83
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "_relative",
    "type": "module"
  }, {
    "id": 2,
    "text": "_util",
    "type": "module"
  }, {
    "id": 3,
    "text": "uri",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function test_rel (input, userinfo, host, port, path, query, frag,\r\n                         expected)\r\n    local uri = assert(URI:new(input))\r\n    assert_true(uri:is_relative())\r\n    is(\"uri._relative\", getmetatable(uri)._NAME)\r\n    is(nil, uri:scheme())\r\n    is(userinfo, uri:userinfo())\r\n    is(host, uri:host())\r\n    is(port, uri:port())\r\n    is(path, uri:path())\r\n    is(query, uri:query())\r\n    is(frag, uri:fragment())\r\n    if not expected then expected = input end\r\n    is(expected, uri:uri())\r\n    is(expected, tostring(uri))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function testcase:test_relative ()\r\n    test_rel(\"\", nil, nil, nil, \"\", nil, nil)\r\n    test_rel(\"foo/bar\", nil, nil, nil, \"foo/bar\", nil, nil)\r\n    test_rel(\"/foo/bar\", nil, nil, nil, \"/foo/bar\", nil, nil)\r\n    test_rel(\"?query\", nil, nil, nil, \"\", \"query\", nil)\r\n    test_rel(\"?\", nil, nil, nil, \"\", \"\", nil)\r\n    test_rel(\"#foo\", nil, nil, nil, \"\", nil, \"foo\")\r\n    test_rel(\"#\", nil, nil, nil, \"\", nil, \"\")\r\n    test_rel(\"?q#f\", nil, nil, nil, \"\", \"q\", \"f\")\r\n    test_rel(\"?#\", nil, nil, nil, \"\", \"\", \"\")\r\n    test_rel(\"foo?q#f\", nil, nil, nil, \"foo\", \"q\", \"f\")\r\n    test_rel(\"//host.com\", nil, \"host.com\", nil, \"\", nil, nil)\r\n    test_rel(\"//host.com/blah?q#f\", nil, \"host.com\", nil, \"/blah\", \"q\", \"f\")\r\n    test_rel(\"//host.com:123/blah?q#f\", nil, \"host.com\", 123, \"/blah\", \"q\", \"f\")\r\n    test_rel(\"//u:p@host.com:123/blah?q#f\",\r\n             \"u:p\", \"host.com\", 123, \"/blah\", \"q\", \"f\")\r\n\r\n    -- Paths shouldn't be normalized in a relative reference, only after it\r\n    -- has been used to create an absolute one.\r\n    test_rel(\"./foo/bar\", nil, nil, nil, \"./foo/bar\", nil, nil)\r\n    test_rel(\"././foo/./bar\", nil, nil, nil, \"././foo/./bar\", nil, nil)\r\n    test_rel(\"../foo/bar\", nil, nil, nil, \"../foo/bar\", nil, nil)\r\n    test_rel(\"../../foo/../bar\", nil, nil, nil, \"../../foo/../bar\", nil, nil)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function testcase:test_bad_usage ()\r\n    local uri = assert(URI:new(\"foo\"))\r\n    assert_error(\"set scheme on relative ref\",\r\n                 function () uri:scheme(\"x-foo\") end)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function () uri:scheme(\"x-foo\") end",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "function container"
  }, {
    "id": 9,
    "text": "function M.init (self)\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function M.scheme (self, ...)\r\n    if select(\"#\", ...) > 0 then\r\n        error(\"relative URI references can't have a scheme, perhaps you\" ..\r\n              \" need to resolve this against an absolute URI instead\")\r\n    end\r\n    return nil\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "if select(\"#\", ...) > 0 then\r\n        error(\"relative URI references can't have a scheme, perhaps you\" ..\r\n              \" need to resolve this against an absolute URI instead\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "error(\"relative URI references can't have a scheme, perhaps you\" ..\r\n              \" need to resolve this against an absolute URI instead\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function M.is_relative () return true end",
    "type": "function"
  }, {
    "id": 17,
    "text": "local function _merge_paths (base, r, base_has_auth)\r\n    if base_has_auth and base == \"\" then\r\n        return \"/\" .. r\r\n    end\r\n\r\n    return base:gsub(\"[^/]+$\", \"\", 1) .. r\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if base_has_auth and base == \"\" then\r\n        return \"/\" .. r\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function _do_resolve (self, base)\r\n    if type(base) == \"string\" then base = assert(URI:new(base)) end\r\n    setmetatable(self, URI)\r\n\r\n    if self:host() or self:userinfo() or self:port() then\r\n        -- network path reference, just needs a scheme\r\n        self:path(Util.remove_dot_segments(self:path()))\r\n        self:scheme(base:scheme())\r\n        return\r\n    end\r\n\r\n    local path = self:path()\r\n    if path == \"\" then\r\n        self:path(base:path())\r\n        if not self:query() then self:query(base:query()) end\r\n    else\r\n        if path:find(\"^/\") then\r\n            self:path(Util.remove_dot_segments(path))\r\n        else\r\n            local base_has_auth = base:host() or base:userinfo() or base:port()\r\n            local merged = _merge_paths(base:path(), path, base_has_auth)\r\n            self:path(Util.remove_dot_segments(merged))\r\n        end\r\n    end\r\n    self:host(base:host())\r\n    self:userinfo(base:userinfo())\r\n    self:port(base:port())\r\n    self:scheme(base:scheme())\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if type(base) == \"string\" then base = assert(URI:new(base)) end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "base = assert(URI:new(base))",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "setmetatable(self, URI)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "if self:host() or self:userinfo() or self:port() then\r\n        -- network path reference, just needs a scheme\r\n        self:path(Util.remove_dot_segments(self:path()))\r\n        self:scheme(base:scheme())\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "self:path(Util.remove_dot_segments(self:path()))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "self:scheme(base:scheme())",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local path = self:path()",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if path == \"\" then\r\n        self:path(base:path())\r\n        if not self:query() then self:query(base:query()) end\r\n    else\r\n        if path:find(\"^/\") then\r\n            self:path(Util.remove_dot_segments(path))\r\n        else\r\n            local base_has_auth = base:host() or base:userinfo() or base:port()\r\n            local merged = _merge_paths(base:path(), path, base_has_auth)\r\n            self:path(Util.remove_dot_segments(merged))\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "self:path(base:path())",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "if not self:query() then self:query(base:query()) end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "self:query(base:query())",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "if path:find(\"^/\") then\r\n            self:path(Util.remove_dot_segments(path))\r\n        else\r\n            local base_has_auth = base:host() or base:userinfo() or base:port()\r\n            local merged = _merge_paths(base:path(), path, base_has_auth)\r\n            self:path(Util.remove_dot_segments(merged))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "self:path(Util.remove_dot_segments(path))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local base_has_auth = base:host() or base:userinfo() or base:port()",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local merged = _merge_paths(base:path(), path, base_has_auth)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "self:path(Util.remove_dot_segments(merged))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "self:host(base:host())",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "self:userinfo(base:userinfo())",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "self:port(base:port())",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function M.resolve (self, base)\r\n    local orig = tostring(self)\r\n    local ok, result = pcall(_do_resolve, self, base)\r\n    if ok then return end\r\n\r\n    -- If the resolving causes an exception, it means that the resulting URI\r\n    -- would be invalid, so we restore self to its original state and rethrow\r\n    -- the exception.\r\n    local restored = assert(URI:new(orig))\r\n    for k in pairs(self) do self[k] = nil end\r\n    for k, v in pairs(restored) do self[k] = v end\r\n    setmetatable(self, getmetatable(restored))\r\n    error(\"resolved URI reference would be invalid: \" .. result)\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local orig = tostring(self)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local ok, result = pcall(_do_resolve, self, base)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if ok then return end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local restored = assert(URI:new(orig))",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "for k in pairs(self) do self[k] = nil end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "self[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "for k, v in pairs(restored) do self[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "self[k] = v",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "setmetatable(self, getmetatable(restored))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "error(\"resolved URI reference would be invalid: \" .. result)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function M.relativize (self, base) end",
    "type": "function"
  }, {
    "id": 54,
    "text": "remove_dot_segments",
    "type": "global function"
  }, {
    "id": 55,
    "text": "subclass_of",
    "type": "global function"
  }, {
    "id": 56,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 57,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 58,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 59,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 60,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 61,
    "text": "TestCase",
    "type": "global function"
  }, {
    "id": 62,
    "text": "error",
    "type": "global function"
  }, {
    "id": 63,
    "text": "select",
    "type": "global function"
  }, {
    "id": 64,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 65,
    "text": "type",
    "type": "global function"
  }, {
    "id": 66,
    "text": "require",
    "type": "global function"
  }, {
    "id": 67,
    "text": "run",
    "type": "global function"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "variable container"
  }, {
    "id": 70,
    "text": "",
    "type": "require container"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "variable container"
  }, {
    "id": 75,
    "text": "",
    "type": "require container"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 78,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 79,
    "text": "",
    "type": "string"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "interface container"
  }, {
    "id": 83,
    "text": "",
    "type": "interface"
  } ]
}