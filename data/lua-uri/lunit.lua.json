{
  "_filename": "lunit.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-uri/lunit.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 3
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 20
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 20
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 20
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 20
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 20
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 3
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 20
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 20
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 3
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 20
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 3
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 20
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 20
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 20
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 20
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 20
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 3
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 20
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 3
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 20
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 3
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 20
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 3
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 20
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 3
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 20
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 3
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 20
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 3
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 20
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 3
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 20
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 3
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 20
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 3
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 20
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 3
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 20
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 121,
    "label": "has",
    "to": 127
  }, {
    "from": 121,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 20
  }, {
    "from": 129,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 126
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 135,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 144,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 149,
    "label": "has",
    "to": 153
  }, {
    "from": 149,
    "label": "has",
    "to": 3
  }, {
    "from": 149,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 3
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 163,
    "label": "has",
    "to": 167
  }, {
    "from": 163,
    "label": "has",
    "to": 168
  }, {
    "from": 163,
    "label": "has",
    "to": 169
  }, {
    "from": 163,
    "label": "has",
    "to": 170
  }, {
    "from": 163,
    "label": "has",
    "to": 171
  }, {
    "from": 163,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 163,
    "label": "has",
    "to": 174
  }, {
    "from": 163,
    "label": "has",
    "to": 175
  }, {
    "from": 163,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 163,
    "label": "has",
    "to": 174
  }, {
    "from": 163,
    "label": "has",
    "to": 178
  }, {
    "from": 163,
    "label": "has",
    "to": 179
  }, {
    "from": 163,
    "label": "has",
    "to": 180
  }, {
    "from": 163,
    "label": "has",
    "to": 181
  }, {
    "from": 163,
    "label": "has",
    "to": 182
  }, {
    "from": 163,
    "label": "has",
    "to": 174
  }, {
    "from": 163,
    "label": "has",
    "to": 183
  }, {
    "from": 163,
    "label": "has",
    "to": 184
  }, {
    "from": 163,
    "label": "has",
    "to": 3
  }, {
    "from": 163,
    "label": "has",
    "to": 3
  }, {
    "from": 163,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 186,
    "label": "has",
    "to": 191
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 192,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 174
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 192,
    "label": "has",
    "to": 3
  }, {
    "from": 186,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 3
  }, {
    "from": 199,
    "label": "has",
    "to": 3
  }, {
    "from": 186,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 201,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 201,
    "label": "has",
    "to": 3
  }, {
    "from": 186,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 186,
    "label": "has",
    "to": 174
  }, {
    "from": 186,
    "label": "has",
    "to": 211
  }, {
    "from": 186,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 213,
    "label": "has",
    "to": 218
  }, {
    "from": 186,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 193
  }, {
    "from": 220,
    "label": "has",
    "to": 194
  }, {
    "from": 220,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 220,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 174
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 220,
    "label": "has",
    "to": 3
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 222,
    "label": "has",
    "to": 200
  }, {
    "from": 222,
    "label": "has",
    "to": 3
  }, {
    "from": 222,
    "label": "has",
    "to": 3
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 202
  }, {
    "from": 224,
    "label": "has",
    "to": 203
  }, {
    "from": 224,
    "label": "has",
    "to": 204
  }, {
    "from": 224,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 224,
    "label": "has",
    "to": 3
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 228,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 228,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 228,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 228,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 241,
    "label": "has",
    "to": 245
  }, {
    "from": 241,
    "label": "has",
    "to": 245
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 241,
    "label": "has",
    "to": 246
  }, {
    "from": 228,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 232
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 252,
    "label": "has",
    "to": 238
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 240
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 256,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 3
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 262,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 269,
    "label": "has",
    "to": 277
  }, {
    "from": 278,
    "label": "has",
    "to": 196
  }, {
    "from": 73,
    "label": "calls",
    "to": 7
  }, {
    "from": 77,
    "label": "calls",
    "to": 7
  }, {
    "from": 262,
    "label": "calls",
    "to": 7
  }, {
    "from": 46,
    "label": "calls",
    "to": 9
  }, {
    "from": 46,
    "label": "calls",
    "to": 9
  }, {
    "from": 52,
    "label": "calls",
    "to": 9
  }, {
    "from": 81,
    "label": "calls",
    "to": 9
  }, {
    "from": 85,
    "label": "calls",
    "to": 9
  }, {
    "from": 135,
    "label": "calls",
    "to": 9
  }, {
    "from": 135,
    "label": "calls",
    "to": 9
  }, {
    "from": 144,
    "label": "calls",
    "to": 9
  }, {
    "from": 144,
    "label": "calls",
    "to": 9
  }, {
    "from": 149,
    "label": "calls",
    "to": 9
  }, {
    "from": 279,
    "label": "calls",
    "to": 9
  }, {
    "from": 186,
    "label": "calls",
    "to": 9
  }, {
    "from": 220,
    "label": "calls",
    "to": 9
  }, {
    "from": 163,
    "label": "calls",
    "to": 9
  }, {
    "from": 228,
    "label": "calls",
    "to": 9
  }, {
    "from": 262,
    "label": "calls",
    "to": 9
  }, {
    "from": 19,
    "label": "calls",
    "to": 283
  }, {
    "from": 38,
    "label": "calls",
    "to": 283
  }, {
    "from": 38,
    "label": "calls",
    "to": 283
  }, {
    "from": 42,
    "label": "calls",
    "to": 283
  }, {
    "from": 155,
    "label": "calls",
    "to": 283
  }, {
    "from": 186,
    "label": "calls",
    "to": 222
  }, {
    "from": 46,
    "label": "calls",
    "to": 284
  }, {
    "from": 52,
    "label": "calls",
    "to": 284
  }, {
    "from": 279,
    "label": "calls",
    "to": 284
  }, {
    "from": 279,
    "label": "calls",
    "to": 284
  }, {
    "from": 250,
    "label": "calls",
    "to": 284
  }, {
    "from": 228,
    "label": "calls",
    "to": 284
  }, {
    "from": 228,
    "label": "calls",
    "to": 284
  }, {
    "from": 220,
    "label": "calls",
    "to": 285
  }, {
    "from": 186,
    "label": "calls",
    "to": 226
  }, {
    "from": 19,
    "label": "calls",
    "to": 135
  }, {
    "from": 24,
    "label": "calls",
    "to": 135
  }, {
    "from": 28,
    "label": "calls",
    "to": 135
  }, {
    "from": 28,
    "label": "calls",
    "to": 135
  }, {
    "from": 33,
    "label": "calls",
    "to": 135
  }, {
    "from": 33,
    "label": "calls",
    "to": 135
  }, {
    "from": 38,
    "label": "calls",
    "to": 135
  }, {
    "from": 42,
    "label": "calls",
    "to": 135
  }, {
    "from": 46,
    "label": "calls",
    "to": 135
  }, {
    "from": 46,
    "label": "calls",
    "to": 135
  }, {
    "from": 46,
    "label": "calls",
    "to": 135
  }, {
    "from": 52,
    "label": "calls",
    "to": 135
  }, {
    "from": 52,
    "label": "calls",
    "to": 135
  }, {
    "from": 57,
    "label": "calls",
    "to": 135
  }, {
    "from": 61,
    "label": "calls",
    "to": 135
  }, {
    "from": 65,
    "label": "calls",
    "to": 135
  }, {
    "from": 69,
    "label": "calls",
    "to": 135
  }, {
    "from": 73,
    "label": "calls",
    "to": 135
  }, {
    "from": 77,
    "label": "calls",
    "to": 135
  }, {
    "from": 81,
    "label": "calls",
    "to": 135
  }, {
    "from": 85,
    "label": "calls",
    "to": 135
  }, {
    "from": 89,
    "label": "calls",
    "to": 135
  }, {
    "from": 93,
    "label": "calls",
    "to": 135
  }, {
    "from": 97,
    "label": "calls",
    "to": 135
  }, {
    "from": 101,
    "label": "calls",
    "to": 135
  }, {
    "from": 105,
    "label": "calls",
    "to": 135
  }, {
    "from": 109,
    "label": "calls",
    "to": 135
  }, {
    "from": 113,
    "label": "calls",
    "to": 135
  }, {
    "from": 117,
    "label": "calls",
    "to": 135
  }, {
    "from": 121,
    "label": "calls",
    "to": 135
  }, {
    "from": 121,
    "label": "calls",
    "to": 135
  }, {
    "from": 129,
    "label": "calls",
    "to": 135
  }, {
    "from": 129,
    "label": "calls",
    "to": 135
  }, {
    "from": 149,
    "label": "calls",
    "to": 135
  }, {
    "from": 228,
    "label": "calls",
    "to": 135
  }, {
    "from": 19,
    "label": "calls",
    "to": 262
  }, {
    "from": 24,
    "label": "calls",
    "to": 262
  }, {
    "from": 28,
    "label": "calls",
    "to": 262
  }, {
    "from": 33,
    "label": "calls",
    "to": 262
  }, {
    "from": 38,
    "label": "calls",
    "to": 262
  }, {
    "from": 42,
    "label": "calls",
    "to": 262
  }, {
    "from": 46,
    "label": "calls",
    "to": 262
  }, {
    "from": 52,
    "label": "calls",
    "to": 262
  }, {
    "from": 57,
    "label": "calls",
    "to": 262
  }, {
    "from": 61,
    "label": "calls",
    "to": 262
  }, {
    "from": 65,
    "label": "calls",
    "to": 262
  }, {
    "from": 69,
    "label": "calls",
    "to": 262
  }, {
    "from": 73,
    "label": "calls",
    "to": 262
  }, {
    "from": 77,
    "label": "calls",
    "to": 262
  }, {
    "from": 81,
    "label": "calls",
    "to": 262
  }, {
    "from": 85,
    "label": "calls",
    "to": 262
  }, {
    "from": 89,
    "label": "calls",
    "to": 262
  }, {
    "from": 93,
    "label": "calls",
    "to": 262
  }, {
    "from": 97,
    "label": "calls",
    "to": 262
  }, {
    "from": 101,
    "label": "calls",
    "to": 262
  }, {
    "from": 105,
    "label": "calls",
    "to": 262
  }, {
    "from": 109,
    "label": "calls",
    "to": 262
  }, {
    "from": 113,
    "label": "calls",
    "to": 262
  }, {
    "from": 117,
    "label": "calls",
    "to": 262
  }, {
    "from": 121,
    "label": "calls",
    "to": 262
  }, {
    "from": 129,
    "label": "calls",
    "to": 262
  }, {
    "from": 163,
    "label": "calls",
    "to": 262
  }, {
    "from": 163,
    "label": "calls",
    "to": 262
  }, {
    "from": 163,
    "label": "calls",
    "to": 262
  }, {
    "from": 186,
    "label": "calls",
    "to": 262
  }, {
    "from": 186,
    "label": "calls",
    "to": 262
  }, {
    "from": 279,
    "label": "calls",
    "to": 287
  }, {
    "from": 155,
    "label": "calls",
    "to": 288
  }, {
    "from": 163,
    "label": "calls",
    "to": 288
  }, {
    "from": 163,
    "label": "calls",
    "to": 288
  }, {
    "from": 186,
    "label": "calls",
    "to": 288
  }, {
    "from": 228,
    "label": "calls",
    "to": 252
  }, {
    "from": 228,
    "label": "calls",
    "to": 252
  }, {
    "from": 105,
    "label": "calls",
    "to": 15
  }, {
    "from": 109,
    "label": "calls",
    "to": 15
  }, {
    "from": 89,
    "label": "calls",
    "to": 11
  }, {
    "from": 93,
    "label": "calls",
    "to": 11
  }, {
    "from": 186,
    "label": "calls",
    "to": 11
  }, {
    "from": 186,
    "label": "calls",
    "to": 11
  }, {
    "from": 262,
    "label": "calls",
    "to": 11
  }, {
    "from": 279,
    "label": "calls",
    "to": 299
  }, {
    "from": 256,
    "label": "calls",
    "to": 299
  }, {
    "from": 113,
    "label": "calls",
    "to": 17
  }, {
    "from": 117,
    "label": "calls",
    "to": 17
  }, {
    "from": 222,
    "label": "calls",
    "to": 220
  }, {
    "from": 163,
    "label": "calls",
    "to": 220
  }, {
    "from": 226,
    "label": "calls",
    "to": 220
  }, {
    "from": 135,
    "label": "calls",
    "to": 291
  }, {
    "from": 135,
    "label": "calls",
    "to": 291
  }, {
    "from": 135,
    "label": "calls",
    "to": 291
  }, {
    "from": 144,
    "label": "calls",
    "to": 291
  }, {
    "from": 186,
    "label": "calls",
    "to": 291
  }, {
    "from": 186,
    "label": "calls",
    "to": 291
  }, {
    "from": 186,
    "label": "calls",
    "to": 291
  }, {
    "from": 186,
    "label": "calls",
    "to": 291
  }, {
    "from": 186,
    "label": "calls",
    "to": 291
  }, {
    "from": 220,
    "label": "calls",
    "to": 291
  }, {
    "from": 220,
    "label": "calls",
    "to": 291
  }, {
    "from": 163,
    "label": "calls",
    "to": 291
  }, {
    "from": 163,
    "label": "calls",
    "to": 291
  }, {
    "from": 262,
    "label": "calls",
    "to": 291
  }, {
    "from": 262,
    "label": "calls",
    "to": 291
  }, {
    "from": 262,
    "label": "calls",
    "to": 291
  }, {
    "from": 279,
    "label": "calls",
    "to": 294
  }, {
    "from": 19,
    "label": "calls",
    "to": 144
  }, {
    "from": 24,
    "label": "calls",
    "to": 144
  }, {
    "from": 28,
    "label": "calls",
    "to": 144
  }, {
    "from": 33,
    "label": "calls",
    "to": 144
  }, {
    "from": 38,
    "label": "calls",
    "to": 144
  }, {
    "from": 42,
    "label": "calls",
    "to": 144
  }, {
    "from": 46,
    "label": "calls",
    "to": 144
  }, {
    "from": 52,
    "label": "calls",
    "to": 144
  }, {
    "from": 57,
    "label": "calls",
    "to": 144
  }, {
    "from": 61,
    "label": "calls",
    "to": 144
  }, {
    "from": 65,
    "label": "calls",
    "to": 144
  }, {
    "from": 69,
    "label": "calls",
    "to": 144
  }, {
    "from": 73,
    "label": "calls",
    "to": 144
  }, {
    "from": 77,
    "label": "calls",
    "to": 144
  }, {
    "from": 81,
    "label": "calls",
    "to": 144
  }, {
    "from": 85,
    "label": "calls",
    "to": 144
  }, {
    "from": 89,
    "label": "calls",
    "to": 144
  }, {
    "from": 93,
    "label": "calls",
    "to": 144
  }, {
    "from": 97,
    "label": "calls",
    "to": 144
  }, {
    "from": 101,
    "label": "calls",
    "to": 144
  }, {
    "from": 105,
    "label": "calls",
    "to": 144
  }, {
    "from": 109,
    "label": "calls",
    "to": 144
  }, {
    "from": 113,
    "label": "calls",
    "to": 144
  }, {
    "from": 117,
    "label": "calls",
    "to": 144
  }, {
    "from": 121,
    "label": "calls",
    "to": 144
  }, {
    "from": 129,
    "label": "calls",
    "to": 144
  }, {
    "from": 155,
    "label": "calls",
    "to": 149
  }, {
    "from": 186,
    "label": "calls",
    "to": 163
  }, {
    "from": 28,
    "label": "calls",
    "to": 5
  }, {
    "from": 33,
    "label": "calls",
    "to": 5
  }, {
    "from": 65,
    "label": "calls",
    "to": 5
  }, {
    "from": 69,
    "label": "calls",
    "to": 5
  }, {
    "from": 135,
    "label": "calls",
    "to": 5
  }, {
    "from": 163,
    "label": "calls",
    "to": 186
  }, {
    "from": 57,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 121,
    "label": "calls",
    "to": 2
  }, {
    "from": 129,
    "label": "calls",
    "to": 2
  }, {
    "from": 135,
    "label": "calls",
    "to": 2
  }, {
    "from": 144,
    "label": "calls",
    "to": 2
  }, {
    "from": 186,
    "label": "calls",
    "to": 2
  }, {
    "from": 186,
    "label": "calls",
    "to": 2
  }, {
    "from": 262,
    "label": "calls",
    "to": 2
  }, {
    "from": 220,
    "label": "calls",
    "to": 286
  }, {
    "from": 163,
    "label": "calls",
    "to": 289
  }, {
    "from": 163,
    "label": "calls",
    "to": 289
  }, {
    "from": 163,
    "label": "calls",
    "to": 289
  }, {
    "from": 163,
    "label": "calls",
    "to": 289
  }, {
    "from": 163,
    "label": "calls",
    "to": 289
  }, {
    "from": 163,
    "label": "calls",
    "to": 289
  }, {
    "from": 220,
    "label": "calls",
    "to": 289
  }, {
    "from": 220,
    "label": "calls",
    "to": 289
  }, {
    "from": 186,
    "label": "calls",
    "to": 289
  }, {
    "from": 186,
    "label": "calls",
    "to": 289
  }, {
    "from": 186,
    "label": "calls",
    "to": 289
  }, {
    "from": 149,
    "label": "calls",
    "to": 295
  }, {
    "from": 279,
    "label": "calls",
    "to": 295
  }, {
    "from": 155,
    "label": "calls",
    "to": 295
  }, {
    "from": 97,
    "label": "calls",
    "to": 13
  }, {
    "from": 101,
    "label": "calls",
    "to": 13
  }, {
    "from": 121,
    "label": "calls",
    "to": 13
  }, {
    "from": 129,
    "label": "calls",
    "to": 13
  }, {
    "from": 279,
    "label": "calls",
    "to": 13
  }, {
    "from": 155,
    "label": "calls",
    "to": 13
  }, {
    "from": 186,
    "label": "calls",
    "to": 13
  }, {
    "from": 186,
    "label": "calls",
    "to": 13
  }, {
    "from": 220,
    "label": "calls",
    "to": 13
  }, {
    "from": 163,
    "label": "calls",
    "to": 13
  }, {
    "from": 121,
    "label": "calls",
    "to": 290
  }, {
    "from": 129,
    "label": "calls",
    "to": 290
  }, {
    "from": 250,
    "label": "calls",
    "to": 292
  }, {
    "from": 163,
    "label": "calls",
    "to": 298
  }, {
    "from": 163,
    "label": "calls",
    "to": 298
  }, {
    "from": 186,
    "label": "calls",
    "to": 298
  }, {
    "from": 149,
    "label": "calls",
    "to": 297
  }, {
    "from": 256,
    "label": "calls",
    "to": 297
  }, {
    "from": 250,
    "label": "calls",
    "to": 248
  }, {
    "from": 228,
    "label": "calls",
    "to": 248
  }, {
    "from": 228,
    "label": "calls",
    "to": 248
  }, {
    "from": 228,
    "label": "calls",
    "to": 248
  }, {
    "from": 228,
    "label": "calls",
    "to": 248
  }, {
    "from": 228,
    "label": "calls",
    "to": 254
  }, {
    "from": 228,
    "label": "calls",
    "to": 254
  }, {
    "from": 2,
    "label": "calls",
    "to": 300
  }, {
    "from": 5,
    "label": "calls",
    "to": 300
  }, {
    "from": 7,
    "label": "calls",
    "to": 300
  }, {
    "from": 9,
    "label": "calls",
    "to": 300
  }, {
    "from": 11,
    "label": "calls",
    "to": 300
  }, {
    "from": 13,
    "label": "calls",
    "to": 300
  }, {
    "from": 15,
    "label": "calls",
    "to": 300
  }, {
    "from": 17,
    "label": "calls",
    "to": 300
  }, {
    "from": 28,
    "label": "calls",
    "to": 300
  }, {
    "from": 33,
    "label": "calls",
    "to": 300
  }, {
    "from": 46,
    "label": "calls",
    "to": 300
  }, {
    "from": 52,
    "label": "calls",
    "to": 300
  }, {
    "from": 57,
    "label": "calls",
    "to": 300
  }, {
    "from": 65,
    "label": "calls",
    "to": 300
  }, {
    "from": 73,
    "label": "calls",
    "to": 300
  }, {
    "from": 81,
    "label": "calls",
    "to": 300
  }, {
    "from": 89,
    "label": "calls",
    "to": 300
  }, {
    "from": 97,
    "label": "calls",
    "to": 300
  }, {
    "from": 105,
    "label": "calls",
    "to": 300
  }, {
    "from": 113,
    "label": "calls",
    "to": 300
  }, {
    "from": 121,
    "label": "calls",
    "to": 300
  }, {
    "from": 129,
    "label": "calls",
    "to": 300
  }, {
    "from": 144,
    "label": "calls",
    "to": 300
  }, {
    "from": 228,
    "label": "calls",
    "to": 296
  }, {
    "from": 256,
    "label": "calls",
    "to": 296
  }, {
    "from": 252,
    "label": "calls",
    "to": 250
  }, {
    "from": 254,
    "label": "calls",
    "to": 250
  }, {
    "from": 135,
    "label": "calls",
    "to": 293
  }, {
    "from": 135,
    "label": "calls",
    "to": 293
  }, {
    "from": 144,
    "label": "calls",
    "to": 293
  }, {
    "from": 228,
    "label": "calls",
    "to": 293
  }, {
    "from": 1,
    "label": "contains",
    "to": 279
  }, {
    "from": 279,
    "label": "declares",
    "to": 2
  }, {
    "from": 279,
    "label": "declares",
    "to": 5
  }, {
    "from": 279,
    "label": "declares",
    "to": 7
  }, {
    "from": 279,
    "label": "declares",
    "to": 9
  }, {
    "from": 279,
    "label": "declares",
    "to": 11
  }, {
    "from": 279,
    "label": "declares",
    "to": 13
  }, {
    "from": 279,
    "label": "declares",
    "to": 15
  }, {
    "from": 279,
    "label": "declares",
    "to": 17
  }, {
    "from": 279,
    "label": "declares",
    "to": 19
  }, {
    "from": 279,
    "label": "declares",
    "to": 24
  }, {
    "from": 279,
    "label": "declares",
    "to": 28
  }, {
    "from": 279,
    "label": "declares",
    "to": 33
  }, {
    "from": 279,
    "label": "declares",
    "to": 38
  }, {
    "from": 279,
    "label": "declares",
    "to": 42
  }, {
    "from": 279,
    "label": "declares",
    "to": 46
  }, {
    "from": 279,
    "label": "declares",
    "to": 52
  }, {
    "from": 279,
    "label": "declares",
    "to": 57
  }, {
    "from": 279,
    "label": "declares",
    "to": 61
  }, {
    "from": 279,
    "label": "declares",
    "to": 65
  }, {
    "from": 279,
    "label": "declares",
    "to": 69
  }, {
    "from": 279,
    "label": "declares",
    "to": 73
  }, {
    "from": 279,
    "label": "declares",
    "to": 77
  }, {
    "from": 279,
    "label": "declares",
    "to": 81
  }, {
    "from": 279,
    "label": "declares",
    "to": 85
  }, {
    "from": 279,
    "label": "declares",
    "to": 89
  }, {
    "from": 279,
    "label": "declares",
    "to": 93
  }, {
    "from": 279,
    "label": "declares",
    "to": 97
  }, {
    "from": 279,
    "label": "declares",
    "to": 101
  }, {
    "from": 279,
    "label": "declares",
    "to": 105
  }, {
    "from": 279,
    "label": "declares",
    "to": 109
  }, {
    "from": 279,
    "label": "declares",
    "to": 113
  }, {
    "from": 279,
    "label": "declares",
    "to": 117
  }, {
    "from": 279,
    "label": "declares",
    "to": 121
  }, {
    "from": 279,
    "label": "declares",
    "to": 129
  }, {
    "from": 279,
    "label": "declares",
    "to": 135
  }, {
    "from": 279,
    "label": "declares",
    "to": 144
  }, {
    "from": 279,
    "label": "declares",
    "to": 149
  }, {
    "from": 279,
    "label": "declares",
    "to": 155
  }, {
    "from": 279,
    "label": "declares",
    "to": 163
  }, {
    "from": 279,
    "label": "declares",
    "to": 186
  }, {
    "from": 279,
    "label": "declares",
    "to": 220
  }, {
    "from": 279,
    "label": "declares",
    "to": 222
  }, {
    "from": 279,
    "label": "declares",
    "to": 224
  }, {
    "from": 279,
    "label": "declares",
    "to": 226
  }, {
    "from": 279,
    "label": "declares",
    "to": 228
  }, {
    "from": 279,
    "label": "declares",
    "to": 248
  }, {
    "from": 279,
    "label": "declares",
    "to": 250
  }, {
    "from": 279,
    "label": "declares",
    "to": 252
  }, {
    "from": 279,
    "label": "declares",
    "to": 254
  }, {
    "from": 279,
    "label": "declares",
    "to": 256
  }, {
    "from": 279,
    "label": "declares",
    "to": 262
  }, {
    "from": 279,
    "label": "declares",
    "to": 269
  }, {
    "from": 279,
    "label": "declares",
    "to": 278
  }, {
    "from": 281,
    "label": "calls",
    "to": 149
  }, {
    "from": 280,
    "label": "calls",
    "to": 61
  }, {
    "from": 280,
    "label": "calls",
    "to": 61
  }, {
    "from": 281,
    "label": "calls",
    "to": 163
  }, {
    "from": 282,
    "label": "calls",
    "to": 228
  }, {
    "from": 1,
    "label": "declares",
    "to": 301
  }, {
    "from": 1,
    "label": "contains",
    "to": 302
  }, {
    "from": 1,
    "label": "contains",
    "to": 303
  }, {
    "from": 302,
    "label": "initializes",
    "to": 304
  }, {
    "from": 304,
    "label": "assigns",
    "to": 305
  }, {
    "from": 302,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "assigns",
    "to": 307
  }, {
    "from": 302,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 302,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 302,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 302,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 302,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 302,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 302,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 302,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 302,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 302,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 302,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 302,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 302,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 302,
    "label": "initializes",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 302,
    "label": "initializes",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 302,
    "label": "initializes",
    "to": 338
  }, {
    "from": 302,
    "label": "initializes",
    "to": 339
  }, {
    "from": 302,
    "label": "initializes",
    "to": 340
  }, {
    "from": 302,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 302,
    "label": "initializes",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 302,
    "label": "initializes",
    "to": 345
  }, {
    "from": 302,
    "label": "initializes",
    "to": 346
  }, {
    "from": 302,
    "label": "initializes",
    "to": 347
  }, {
    "from": 347,
    "label": "assigns",
    "to": 348
  }, {
    "from": 302,
    "label": "initializes",
    "to": 349
  }, {
    "from": 349,
    "label": "assigns",
    "to": 350
  }, {
    "from": 351,
    "label": "requires",
    "to": 1
  }, {
    "from": 351,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 2,
    "text": "function is_nil(x)\r\n  return type(x) == \"nil\"\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function is_boolean(x)\r\n  return type(x) == \"boolean\"\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function is_number(x)\r\n  return type(x) == \"number\"\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function is_string(x)\r\n  return type(x) == \"string\"\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function is_table(x)\r\n  return type(x) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function is_function(x)\r\n  return type(x) == \"function\"\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function is_thread(x)\r\n  return type(x) == \"thread\"\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function is_userdata(x)\r\n  return type(x) == \"userdata\"\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function assert(assertion, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert\", msg)\r\n  do_assert(not not assertion, \"assertion failed (was: \"..tostring(assertion)..\")\", msg)\t\t-- (convert assertion to bool)\r\n  return assertion\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "stats_inc(\"assertions\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "check_msg(\"assert\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "do_assert(not not assertion, \"assertion failed (was: \"..tostring(assertion)..\")\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function assert_fail(msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_fail\", msg)\r\n  do_assert(false, \"failure\", msg)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "check_msg(\"assert_fail\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "do_assert(false, \"failure\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function assert_true(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_true\", msg)\r\n  do_assert(is_boolean(actual), \"true expected but was a \"..type(actual), msg)\r\n  do_assert(actual == true, \"true expected but was false\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "check_msg(\"assert_true\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "do_assert(is_boolean(actual), \"true expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "do_assert(actual == true, \"true expected but was false\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function assert_false(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_false\", msg)\r\n  do_assert(is_boolean(actual), \"false expected but was a \"..type(actual), msg)\r\n  do_assert(actual == false, \"false expected but was true\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "check_msg(\"assert_false\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "do_assert(is_boolean(actual), \"false expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "do_assert(actual == false, \"false expected but was true\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function assert_equal(expected, actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_equal\", msg)\r\n  do_assert(expected == actual, \"expected '\"..tostring(expected)..\"' but was '\"..tostring(actual)..\"'\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "check_msg(\"assert_equal\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "do_assert(expected == actual, \"expected '\"..tostring(expected)..\"' but was '\"..tostring(actual)..\"'\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function assert_not_equal(unexpected, actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_equal\", msg)\r\n  do_assert(unexpected ~= actual, \"'\"..tostring(expected)..\"' not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "check_msg(\"assert_not_equal\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "do_assert(unexpected ~= actual, \"'\"..tostring(expected)..\"' not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function assert_match(pattern, actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_match\", msg)\r\n  do_assert(is_string(pattern), \"assert_match expects the pattern as a string\")\r\n  do_assert(is_string(actual), \"expected a string to match pattern '\"..pattern..\"' but was a '\"..type(actual)..\"'\", msg)\r\n  do_assert(not not string.find(actual, pattern), \"expected '\"..actual..\"' to match pattern '\"..pattern..\"' but doesn't\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "check_msg(\"assert_match\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "do_assert(is_string(pattern), \"assert_match expects the pattern as a string\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "do_assert(is_string(actual), \"expected a string to match pattern '\"..pattern..\"' but was a '\"..type(actual)..\"'\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "do_assert(not not string.find(actual, pattern), \"expected '\"..actual..\"' to match pattern '\"..pattern..\"' but doesn't\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function assert_not_match(pattern, actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_match\", msg)\r\n  do_assert(is_string(actual), \"expected a string to not match pattern '\"..pattern..\"' but was a '\"..type(actual)..\"'\", msg)\r\n  do_assert(string.find(actual, pattern) == nil, \"expected '\"..actual..\"' to not match pattern '\"..pattern..\"' but it does\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "check_msg(\"assert_not_match\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "do_assert(is_string(actual), \"expected a string to not match pattern '\"..pattern..\"' but was a '\"..type(actual)..\"'\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "do_assert(string.find(actual, pattern) == nil, \"expected '\"..actual..\"' to not match pattern '\"..pattern..\"' but it does\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function assert_nil(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_nil\", msg)\r\n  do_assert(is_nil(actual), \"nil expected but was a \"..type(actual), msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "check_msg(\"assert_nil\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "do_assert(is_nil(actual), \"nil expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function assert_not_nil(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_nil\", msg)\r\n  do_assert(not is_nil(actual), \"nil not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "check_msg(\"assert_not_nil\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "do_assert(not is_nil(actual), \"nil not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function assert_boolean(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_boolean\", msg)\r\n  do_assert(is_boolean(actual), \"boolean expected but was a \"..type(actual), msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "check_msg(\"assert_boolean\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "do_assert(is_boolean(actual), \"boolean expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function assert_not_boolean(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_boolean\", msg)\r\n  do_assert(not is_boolean(actual), \"boolean not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "check_msg(\"assert_not_boolean\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "do_assert(not is_boolean(actual), \"boolean not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function assert_number(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_number\", msg)\r\n  do_assert(is_number(actual), \"number expected but was a \"..type(actual), msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "check_msg(\"assert_number\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "do_assert(is_number(actual), \"number expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function assert_not_number(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_number\", msg)\r\n  do_assert(not is_number(actual), \"number not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "check_msg(\"assert_not_number\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "do_assert(not is_number(actual), \"number not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function assert_string(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_string\", msg)\r\n  do_assert(is_string(actual), \"string expected but was a \"..type(actual), msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "check_msg(\"assert_string\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "do_assert(is_string(actual), \"string expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function assert_not_string(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_string\", msg)\r\n  do_assert(not is_string(actual), \"string not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "check_msg(\"assert_not_string\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "do_assert(not is_string(actual), \"string not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function assert_table(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_table\", msg)\r\n  do_assert(is_table(actual), \"table expected but was a \"..type(actual), msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "check_msg(\"assert_table\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "do_assert(is_table(actual), \"table expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function assert_not_table(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_table\", msg)\r\n  do_assert(not is_table(actual), \"table not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "check_msg(\"assert_not_table\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "do_assert(not is_table(actual), \"table not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function assert_function(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_function\", msg)\r\n  do_assert(is_function(actual), \"function expected but was a \"..type(actual), msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "check_msg(\"assert_function\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "do_assert(is_function(actual), \"function expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function assert_not_function(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_function\", msg)\r\n  do_assert(not is_function(actual), \"function not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "check_msg(\"assert_not_function\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "do_assert(not is_function(actual), \"function not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function assert_thread(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_thread\", msg)\r\n  do_assert(is_thread(actual), \"thread expected but was a \"..type(actual), msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "check_msg(\"assert_thread\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "do_assert(is_thread(actual), \"thread expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function assert_not_thread(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_thread\", msg)\r\n  do_assert(not is_thread(actual), \"thread not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "check_msg(\"assert_not_thread\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "do_assert(not is_thread(actual), \"thread not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function assert_userdata(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_userdata\", msg)\r\n  do_assert(is_userdata(actual), \"userdata expected but was a \"..type(actual), msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "check_msg(\"assert_userdata\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "do_assert(is_userdata(actual), \"userdata expected but was a \"..type(actual), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function assert_not_userdata(actual, msg)\r\n  stats_inc(\"assertions\")\r\n  check_msg(\"assert_not_userdata\", msg)\r\n  do_assert(not is_userdata(actual), \"userdata not expected but was one\", msg)\r\n  return actual\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "check_msg(\"assert_not_userdata\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "do_assert(not is_userdata(actual), \"userdata not expected but was one\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function assert_error(msg, func)\r\n  stats_inc(\"assertions\")\r\n  if is_nil(func) then func, msg = msg, nil end\r\n  check_msg(\"assert_error\", msg)\r\n  do_assert(is_function(func), \"assert_error expects a function as the last argument but it was a \"..type(func))\r\n  local ok, errmsg = pcall(func)\r\n  do_assert(ok == false, \"error expected but no error occurred\", msg)\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "if is_nil(func) then func, msg = msg, nil end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "func, msg = msg, nil",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "check_msg(\"assert_error\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "do_assert(is_function(func), \"assert_error expects a function as the last argument but it was a \"..type(func))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "local ok, errmsg = pcall(func)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "do_assert(ok == false, \"error expected but no error occurred\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function assert_pass(msg, func)\r\n  stats_inc(\"assertions\")\r\n  if is_nil(func) then func, msg = msg, nil end\r\n  check_msg(\"assert_pass\", msg)\r\n  do_assert(is_function(func), \"assert_pass expects a function as the last argument but it was a \"..type(func))\r\n  local ok, errmsg = pcall(func)\r\n  if not ok then do_assert(ok == true, \"no error expected but error was: \"..errmsg, msg) end\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "check_msg(\"assert_pass\", msg)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "do_assert(is_function(func), \"assert_pass expects a function as the last argument but it was a \"..type(func))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "if not ok then do_assert(ok == true, \"no error expected but error was: \"..errmsg, msg) end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "do_assert(ok == true, \"no error expected but error was: \"..errmsg, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function do_assert(assertion, base_msg, user_msg)\r\n  orig_assert(is_boolean(assertion))\r\n  orig_assert(is_string(base_msg))\r\n  orig_assert(is_string(user_msg) or is_nil(user_msg))\r\n  if not assertion then\r\n    if user_msg then\r\n      error(base_msg..\": \"..user_msg, 3)\r\n    else\r\n      error(base_msg..\"!\", 3)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "orig_assert(is_boolean(assertion))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "orig_assert(is_string(base_msg))",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "orig_assert(is_string(user_msg) or is_nil(user_msg))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "if not assertion then\r\n    if user_msg then\r\n      error(base_msg..\": \"..user_msg, 3)\r\n    else\r\n      error(base_msg..\"!\", 3)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "if user_msg then\r\n      error(base_msg..\": \"..user_msg, 3)\r\n    else\r\n      error(base_msg..\"!\", 3)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "error(base_msg..\": \"..user_msg, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "error(base_msg..\"!\", 3)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function check_msg(name, msg)\r\n  orig_assert(is_string(name))\r\n  if not (is_nil(msg) or is_string(msg)) then\r\n    error(\"lunit.\"..name..\"() expects the optional message as a string but it was a \"..type(msg)..\"!\" ,3)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "orig_assert(is_string(name))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "if not (is_nil(msg) or is_string(msg)) then\r\n    error(\"lunit.\"..name..\"() expects the optional message as a string but it was a \"..type(msg)..\"!\" ,3)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "error(\"lunit.\"..name..\"() expects the optional message as a string but it was a \"..type(msg)..\"!\" ,3)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function TestCase(name)\r\n  do_assert(is_string(name), \"lunit.TestCase() needs a string as an argument\")\r\n  local tc = {\r\n    __lunit_name = name;\r\n    __lunit_setup = nil;\r\n    __lunit_tests = { };\r\n    __lunit_teardown = nil;\r\n  }\r\n  setmetatable(tc, tc_mt)\r\n  table.insert(testcases, tc)\r\n  return tc\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "do_assert(is_string(name), \"lunit.TestCase() needs a string as an argument\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "local tc = {\r\n    __lunit_name = name;\r\n    __lunit_setup = nil;\r\n    __lunit_tests = { };\r\n    __lunit_teardown = nil;\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "setmetatable(tc, tc_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "table.insert(testcases, tc)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function wrap(name, ...)\r\n  if is_function(name) then\r\n    table.insert(arg, 1, name)\r\n    name = \"Anonymous Testcase\"\r\n  end\r\n  \r\n  local tc = TestCase(name)\r\n  for index, test in ipairs(arg) do\r\n    tc[\"Test #\"..tostring(index)] = test\r\n  end\r\n  return tc\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "if is_function(name) then\r\n    table.insert(arg, 1, name)\r\n    name = \"Anonymous Testcase\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "table.insert(arg, 1, name)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "name = \"Anonymous Testcase\"",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "local tc = TestCase(name)",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "for index, test in ipairs(arg) do\r\n    tc[\"Test #\"..tostring(index)] = test\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 161,
    "text": "tc[\"Test #\"..tostring(index)] = test",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function run()\r\n  \r\n  ---------------------------\r\n  -- Initialize statistics --\r\n  ---------------------------\r\n  \r\n  stats.testcases = 0\t-- Total number of Test Cases\r\n  stats.tests = 0\t-- Total number of all Tests in all Test Cases\r\n  stats.run = 0\t\t-- Number of Tests run\r\n  stats.notrun = 0\t-- Number of Tests not run\r\n  stats.failed = 0\t-- Number of Tests failed\r\n  stats.passed = 0\t-- Number of Test passed\r\n  stats.assertions = 0\t-- Number of all assertions made in all Test in all Test Cases\r\n  \r\n  --------------------------------\r\n  -- Count Test Cases and Tests --\r\n  --------------------------------\r\n  \r\n  stats.testcases = table.getn(testcases)\r\n  \r\n  for _, tc in ipairs(testcases) do\r\n    stats_inc(\"tests\" , table.getn(tc.__lunit_tests))\r\n  end\r\n  \r\n  ------------------\r\n  -- Print Header --\r\n  ------------------\r\n  \r\n  print()\r\n  print(\"#### Test Suite with \"..stats.tests..\" Tests in \"..stats.testcases..\" Test Cases loaded.\")\r\n  \r\n  ------------------------\r\n  -- Run all Test Cases --\r\n  ------------------------\r\n  \r\n  for _, tc in ipairs(testcases) do\r\n    run_testcase(tc)\r\n  end\r\n  \r\n  ------------------\r\n  -- Print Footer --\r\n  ------------------\r\n  \r\n  print()\r\n  print(\"#### Test Suite finished.\")\r\n  \r\n  local msg_assertions = stats.assertions..\" Assertions checked. \"\r\n  local msg_passed     = stats.passed == stats.tests and \"All Tests passed\" or  stats.passed..\" Tests passed\"\r\n  local msg_failed     = stats.failed > 0 and \", \"..stats.failed..\" failed\" or \"\"\r\n  local msg_run\t       = stats.notrun > 0 and \", \"..stats.notrun..\" not run\" or \"\"\r\n  \r\n  print()\r\n  print(msg_assertions..msg_passed..msg_failed..msg_run..\"!\")\r\n  \r\n  -----------------\r\n  -- Return code --\r\n  -----------------\r\n  \r\n  if stats.passed == stats.tests then\r\n    return 0\r\n  else\r\n    return 1\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "stats.testcases = 0",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "stats.tests = 0",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "stats.run = 0",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "stats.notrun = 0",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "stats.failed = 0",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "stats.passed = 0",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "stats.assertions = 0",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "stats.testcases = table.getn(testcases)",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "for _, tc in ipairs(testcases) do\r\n    stats_inc(\"tests\" , table.getn(tc.__lunit_tests))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 173,
    "text": "stats_inc(\"tests\" , table.getn(tc.__lunit_tests))",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "print(\"#### Test Suite with \"..stats.tests..\" Tests in \"..stats.testcases..\" Test Cases loaded.\")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "for _, tc in ipairs(testcases) do\r\n    run_testcase(tc)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 177,
    "text": "run_testcase(tc)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "print(\"#### Test Suite finished.\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "local msg_assertions = stats.assertions..\" Assertions checked. \"",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "local msg_passed     = stats.passed == stats.tests and \"All Tests passed\" or  stats.passed..\" Tests passed\"",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "local msg_failed     = stats.failed > 0 and \", \"..stats.failed..\" failed\" or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "local msg_run\t       = stats.notrun > 0 and \", \"..stats.notrun..\" not run\" or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "print(msg_assertions..msg_passed..msg_failed..msg_run..\"!\")",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "if stats.passed == stats.tests then\r\n    return 0\r\n  else\r\n    return 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function run_testcase(tc)\r\n  \r\n  orig_assert(is_table(tc))\r\n  orig_assert(is_table(tc.__lunit_tests))\r\n  orig_assert(is_string(tc.__lunit_name))\r\n  orig_assert(is_nil(tc.__lunit_setup) or is_function(tc.__lunit_setup))\r\n  orig_assert(is_nil(tc.__lunit_teardown) or is_function(tc.__lunit_teardown))\r\n  \r\n  --------------------------------------------\r\n  -- Protected call to a Test Case function --\r\n  --------------------------------------------\r\n  \r\n  local function call(errprefix, func)\r\n    orig_assert(is_string(errprefix))\r\n    orig_assert(is_function(func))\r\n    local ok, errmsg = xpcall(function() func(tc) end, traceback)\r\n    if not ok then\r\n      print()\r\n      print(errprefix..\": \"..errmsg)\r\n    end\r\n    return ok\r\n  end\r\n  \r\n  ------------------------------------\r\n  -- Calls setup() on the Test Case --\r\n  ------------------------------------\r\n  \r\n  local function setup()\r\n    if tc.__lunit_setup then \r\n      return call(\"ERROR: setup() failed\", tc.__lunit_setup)\r\n    else\r\n      return true\r\n    end\r\n  end\r\n  \r\n  ------------------------------------------\r\n  -- Calls a single Test on the Test Case --\r\n  ------------------------------------------\r\n  \r\n  local function run(testname)\r\n    orig_assert(is_string(testname))\r\n    orig_assert(is_function(tc[testname]))\r\n    local ok = call(\"FAIL: \"..testname, tc[testname])\r\n    if not ok then\r\n      stats_inc(\"failed\")\r\n    else\r\n      stats_inc(\"passed\")\r\n    end\r\n    return ok\r\n  end\r\n  \r\n  ---------------------------------------\r\n  -- Calls teardown() on the Test Case --\r\n  ---------------------------------------\r\n  \r\n  local function teardown()\r\n     if tc.__lunit_teardown then\r\n       call(\"WARNING: teardown() failed\", tc.__lunit_teardown)\r\n     end\r\n  end\r\n  \r\n  ---------------------------------\r\n  -- Run all Tests on a TestCase --\r\n  ---------------------------------\r\n  \r\n  print()\r\n  print(\"#### Running '\"..tc.__lunit_name..\"' (\"..table.getn(tc.__lunit_tests)..\" Tests)...\")\r\n  \r\n  for _, testname in ipairs(tc.__lunit_tests) do\r\n    if setup() then\r\n      run(testname)\r\n      stats_inc(\"run\")\r\n      teardown()\r\n    else\r\n      print(\"WARN: Skipping '\"..testname..\"'...\")\r\n      stats_inc(\"notrun\")\r\n    end\r\n  end\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "orig_assert(is_table(tc))",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "orig_assert(is_table(tc.__lunit_tests))",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "orig_assert(is_string(tc.__lunit_name))",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "orig_assert(is_nil(tc.__lunit_setup) or is_function(tc.__lunit_setup))",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "orig_assert(is_nil(tc.__lunit_teardown) or is_function(tc.__lunit_teardown))",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "local function call(errprefix, func)\r\n    orig_assert(is_string(errprefix))\r\n    orig_assert(is_function(func))\r\n    local ok, errmsg = xpcall(function() func(tc) end, traceback)\r\n    if not ok then\r\n      print()\r\n      print(errprefix..\": \"..errmsg)\r\n    end\r\n    return ok\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 193,
    "text": "orig_assert(is_string(errprefix))",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "orig_assert(is_function(func))",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "local ok, errmsg = xpcall(function() func(tc) end, traceback)",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "func(tc)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "if not ok then\r\n      print()\r\n      print(errprefix..\": \"..errmsg)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "print(errprefix..\": \"..errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "local function setup()\r\n    if tc.__lunit_setup then \r\n      return call(\"ERROR: setup() failed\", tc.__lunit_setup)\r\n    else\r\n      return true\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 200,
    "text": "if tc.__lunit_setup then \r\n      return call(\"ERROR: setup() failed\", tc.__lunit_setup)\r\n    else\r\n      return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "local function run(testname)\r\n    orig_assert(is_string(testname))\r\n    orig_assert(is_function(tc[testname]))\r\n    local ok = call(\"FAIL: \"..testname, tc[testname])\r\n    if not ok then\r\n      stats_inc(\"failed\")\r\n    else\r\n      stats_inc(\"passed\")\r\n    end\r\n    return ok\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 202,
    "text": "orig_assert(is_string(testname))",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "orig_assert(is_function(tc[testname]))",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "local ok = call(\"FAIL: \"..testname, tc[testname])",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "if not ok then\r\n      stats_inc(\"failed\")\r\n    else\r\n      stats_inc(\"passed\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "stats_inc(\"failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "stats_inc(\"passed\")",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "local function teardown()\r\n     if tc.__lunit_teardown then\r\n       call(\"WARNING: teardown() failed\", tc.__lunit_teardown)\r\n     end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 209,
    "text": "if tc.__lunit_teardown then\r\n       call(\"WARNING: teardown() failed\", tc.__lunit_teardown)\r\n     end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "call(\"WARNING: teardown() failed\", tc.__lunit_teardown)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "print(\"#### Running '\"..tc.__lunit_name..\"' (\"..table.getn(tc.__lunit_tests)..\" Tests)...\")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "for _, testname in ipairs(tc.__lunit_tests) do\r\n    if setup() then\r\n      run(testname)\r\n      stats_inc(\"run\")\r\n      teardown()\r\n    else\r\n      print(\"WARN: Skipping '\"..testname..\"'...\")\r\n      stats_inc(\"notrun\")\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 213,
    "text": "if setup() then\r\n      run(testname)\r\n      stats_inc(\"run\")\r\n      teardown()\r\n    else\r\n      print(\"WARN: Skipping '\"..testname..\"'...\")\r\n      stats_inc(\"notrun\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "run(testname)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "stats_inc(\"run\")",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "teardown()",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "print(\"WARN: Skipping '\"..testname..\"'...\")",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "stats_inc(\"notrun\")",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "local function call(errprefix, func)\r\n    orig_assert(is_string(errprefix))\r\n    orig_assert(is_function(func))\r\n    local ok, errmsg = xpcall(function() func(tc) end, traceback)\r\n    if not ok then\r\n      print()\r\n      print(errprefix..\": \"..errmsg)\r\n    end\r\n    return ok\r\n  end",
    "type": "function"
  }, {
    "id": 221,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 222,
    "text": "local function setup()\r\n    if tc.__lunit_setup then \r\n      return call(\"ERROR: setup() failed\", tc.__lunit_setup)\r\n    else\r\n      return true\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "local function run(testname)\r\n    orig_assert(is_string(testname))\r\n    orig_assert(is_function(tc[testname]))\r\n    local ok = call(\"FAIL: \"..testname, tc[testname])\r\n    if not ok then\r\n      stats_inc(\"failed\")\r\n    else\r\n      stats_inc(\"passed\")\r\n    end\r\n    return ok\r\n  end",
    "type": "function"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "local function teardown()\r\n     if tc.__lunit_teardown then\r\n       call(\"WARNING: teardown() failed\", tc.__lunit_teardown)\r\n     end\r\n  end",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function import(name)\r\n  \r\n  do_assert(is_string(name), \"lunit.import() expects a single string as argument\")\r\n  \r\n  local user_env = getfenv(2)\r\n  \r\n  --------------------------------------------------\r\n  -- Installs a specific function in the user env --\r\n  --------------------------------------------------\r\n  \r\n  local function install(funcname)\r\n    user_env[funcname] = P[funcname]\r\n  end\r\n  \r\n  \r\n  ----------------------------------------------------------\r\n  -- Install functions matching a pattern in the user env --\r\n  ----------------------------------------------------------\r\n  \r\n  local function install_pattern(pattern)\r\n    for funcname, _ in pairs(P) do\r\n      if string.find(funcname, pattern) then\r\n        install(funcname)\r\n      end\r\n    end\r\n  end\r\n  \r\n  ------------------------------------------------------------\r\n  -- Installs assert() and all assert_xxx() in the user env --\r\n  ------------------------------------------------------------\r\n  \r\n  local function install_asserts()\r\n    install_pattern(\"^assert.*\")\r\n  end\r\n  \r\n  -------------------------------------------\r\n  -- Installs all is_xxx() in the user env --\r\n  -------------------------------------------\r\n  \r\n  local function install_tests()\r\n    install_pattern(\"^is_.+\")\r\n  end\r\n  \r\n  if name == \"asserts\" or name == \"assertions\" then\r\n    install_asserts()\r\n  elseif name == \"tests\" or name == \"checks\" then\r\n    install_tests()\r\n  elseif name == \"all\" then\r\n    install_asserts()\r\n    install_tests()\r\n    install(\"TestCase\")\r\n  elseif string.find(name, \"^assert.*\") and P[name] then\r\n    install(name)\r\n  elseif string.find(name, \"^is_.+\") and P[name] then\r\n    install(name)\r\n  elseif name == \"TestCase\" then\r\n    install(\"TestCase\")\r\n  else\r\n    error(\"luniit.import(): invalid function '\"..name..\"' to import\", 2)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "do_assert(is_string(name), \"lunit.import() expects a single string as argument\")",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "local user_env = getfenv(2)",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "local function install(funcname)\r\n    user_env[funcname] = P[funcname]\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 232,
    "text": "user_env[funcname] = P[funcname]",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "local function install_pattern(pattern)\r\n    for funcname, _ in pairs(P) do\r\n      if string.find(funcname, pattern) then\r\n        install(funcname)\r\n      end\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 234,
    "text": "for funcname, _ in pairs(P) do\r\n      if string.find(funcname, pattern) then\r\n        install(funcname)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 235,
    "text": "if string.find(funcname, pattern) then\r\n        install(funcname)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "install(funcname)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "local function install_asserts()\r\n    install_pattern(\"^assert.*\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 238,
    "text": "install_pattern(\"^assert.*\")",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "local function install_tests()\r\n    install_pattern(\"^is_.+\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 240,
    "text": "install_pattern(\"^is_.+\")",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "if name == \"asserts\" or name == \"assertions\" then\r\n    install_asserts()\r\n  elseif name == \"tests\" or name == \"checks\" then\r\n    install_tests()\r\n  elseif name == \"all\" then\r\n    install_asserts()\r\n    install_tests()\r\n    install(\"TestCase\")\r\n  elseif string.find(name, \"^assert.*\") and P[name] then\r\n    install(name)\r\n  elseif string.find(name, \"^is_.+\") and P[name] then\r\n    install(name)\r\n  elseif name == \"TestCase\" then\r\n    install(\"TestCase\")\r\n  else\r\n    error(\"luniit.import(): invalid function '\"..name..\"' to import\", 2)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "install_asserts()",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "install_tests()",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "install(\"TestCase\")",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "install(name)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "error(\"luniit.import(): invalid function '\"..name..\"' to import\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "local function install(funcname)\r\n    user_env[funcname] = P[funcname]\r\n  end",
    "type": "function"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "local function install_pattern(pattern)\r\n    for funcname, _ in pairs(P) do\r\n      if string.find(funcname, pattern) then\r\n        install(funcname)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 251,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 252,
    "text": "local function install_asserts()\r\n    install_pattern(\"^assert.*\")\r\n  end",
    "type": "function"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "local function install_tests()\r\n    install_pattern(\"^is_.+\")\r\n  end",
    "type": "function"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function setprivfenv()\r\n  local new_env = { }\r\n  local new_env_mt = { __index = getfenv(2) }\r\n  setmetatable(new_env, new_env_mt)\r\n  setfenv(2, new_env)\r\nend",
    "type": "function"
  }, {
    "id": 257,
    "text": "local new_env = { }",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "local new_env_mt = { __index = getfenv(2) }",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "setmetatable(new_env, new_env_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "setfenv(2, new_env)",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "function stats_inc(varname, value)\r\n  orig_assert(is_table(stats))\r\n  orig_assert(is_string(varname))\r\n  orig_assert(is_nil(value) or is_number(value))\r\n  if not stats[varname] then return end\r\n  stats[varname] = stats[varname] + (value or 1)\r\nend",
    "type": "function"
  }, {
    "id": 263,
    "text": "orig_assert(is_table(stats))",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "orig_assert(is_string(varname))",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "orig_assert(is_nil(value) or is_number(value))",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "if not stats[varname] then return end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "stats[varname] = stats[varname] + (value or 1)",
    "type": "statement:assign"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function(tc, key, value)\r\n    rawset(tc, key, value)\r\n    if is_string(key) and is_function(value) then\r\n      local name = string.lower(key)\r\n      if string.find(name, \"^test\") or string.find(name, \"test$\") then\r\n        table.insert(tc.__lunit_tests, key)\r\n      elseif name == \"setup\" then\r\n        tc.__lunit_setup = value\r\n      elseif name == \"teardown\" then\r\n        tc.__lunit_teardown = value\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 270,
    "text": "rawset(tc, key, value)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "if is_string(key) and is_function(value) then\r\n      local name = string.lower(key)\r\n      if string.find(name, \"^test\") or string.find(name, \"test$\") then\r\n        table.insert(tc.__lunit_tests, key)\r\n      elseif name == \"setup\" then\r\n        tc.__lunit_setup = value\r\n      elseif name == \"teardown\" then\r\n        tc.__lunit_teardown = value\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "local name = string.lower(key)",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "if string.find(name, \"^test\") or string.find(name, \"test$\") then\r\n        table.insert(tc.__lunit_tests, key)\r\n      elseif name == \"setup\" then\r\n        tc.__lunit_setup = value\r\n      elseif name == \"teardown\" then\r\n        tc.__lunit_teardown = value\r\n      end",
    "type": "statement:if"
  }, {
    "id": 274,
    "text": "table.insert(tc.__lunit_tests, key)",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "tc.__lunit_setup = value",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "tc.__lunit_teardown = value",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 278,
    "text": "function() func(tc) end",
    "type": "function"
  }, {
    "id": 279,
    "text": "",
    "type": "function container"
  }, {
    "id": 280,
    "text": "function testcase:test_no_global_clobbering ()\r\n    local globals = {}\r\n    for key in pairs(_G) do globals[key] = true end\r\n\r\n    -- Load all the modules for the different types of URIs, in case any one\r\n    -- of those treads on a global.  I keep them around in a table to make\r\n    -- sure they're all loaded at the same time, just in case that does\r\n    -- anything interesting.\r\n    local schemes = {\r\n        \"_login\", \"_relative\", \"_util\", \"data\",\r\n        \"file\", \"file.unix\", \"file.win32\",\r\n        \"ftp\", \"http\", \"https\",\r\n        \"pop\", \"rtsp\", \"rtspu\", \"telnet\",\r\n        \"urn\", \"urn.isbn\", \"urn.issn\", \"urn.oid\"\r\n    }\r\n    local loaded = {}\r\n    local URI = require \"uri\"\r\n    for _, name in ipairs(schemes) do\r\n        loaded[name] = require(\"uri.\" .. name)\r\n    end\r\n\r\n    for key in pairs(_G) do\r\n        lunit.assert_not_nil(globals[key],\r\n                             \"global '\" .. key .. \"' created by lib\")\r\n    end\r\n    for key in pairs(globals) do\r\n        lunit.assert_not_nil(_G[key],\r\n                             \"global '\" .. key .. \"' destroyed by lib\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 281,
    "text": "",
    "type": "function container"
  }, {
    "id": 282,
    "text": "",
    "type": "function container"
  }, {
    "id": 283,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 284,
    "text": "find",
    "type": "global function"
  }, {
    "id": 285,
    "text": "func",
    "type": "global function"
  }, {
    "id": 286,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 287,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 288,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 289,
    "text": "print",
    "type": "global function"
  }, {
    "id": 290,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 291,
    "text": "orig_assert",
    "type": "global function"
  }, {
    "id": 292,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 293,
    "text": "error",
    "type": "global function"
  }, {
    "id": 294,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 295,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 296,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 297,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 298,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 299,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 300,
    "text": "type",
    "type": "global function"
  }, {
    "id": 301,
    "text": "run",
    "type": "global function"
  }, {
    "id": 302,
    "text": "",
    "type": "variable container"
  }, {
    "id": 303,
    "text": "",
    "type": "require container"
  }, {
    "id": 304,
    "text": "",
    "type": "local variable"
  }, {
    "id": 305,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 306,
    "text": "",
    "type": "local variable"
  }, {
    "id": 307,
    "text": "",
    "type": "n/a"
  }, {
    "id": 308,
    "text": "",
    "type": "local variable"
  }, {
    "id": 309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "local variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "local variable"
  }, {
    "id": 331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 332,
    "text": "",
    "type": "local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 334,
    "text": "",
    "type": "local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "n/a"
  }, {
    "id": 336,
    "text": "",
    "type": "local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "n/a"
  }, {
    "id": 338,
    "text": "",
    "type": "local variable"
  }, {
    "id": 339,
    "text": "",
    "type": "local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "local variable"
  }, {
    "id": 341,
    "text": "",
    "type": "local variable"
  }, {
    "id": 342,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 343,
    "text": "",
    "type": "local variable"
  }, {
    "id": 344,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 345,
    "text": "",
    "type": "local variable"
  }, {
    "id": 346,
    "text": "",
    "type": "local variable"
  }, {
    "id": 347,
    "text": "",
    "type": "global variable"
  }, {
    "id": 348,
    "text": "",
    "type": "n/a"
  }, {
    "id": 349,
    "text": "",
    "type": "global variable"
  }, {
    "id": 350,
    "text": "",
    "type": "n/a"
  }, {
    "id": 351,
    "text": "",
    "type": "global variable"
  } ]
}