{
  "_filename": "uri-test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-uri/uri-test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 4,
    "label": "has",
    "to": 16
  }, {
    "from": 4,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 18,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 30,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 7
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 33
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 18,
    "label": "calls",
    "to": 70
  }, {
    "from": 18,
    "label": "calls",
    "to": 70
  }, {
    "from": 30,
    "label": "calls",
    "to": 70
  }, {
    "from": 46,
    "label": "calls",
    "to": 70
  }, {
    "from": 60,
    "label": "calls",
    "to": 71
  }, {
    "from": 30,
    "label": "calls",
    "to": 77
  }, {
    "from": 4,
    "label": "calls",
    "to": 73
  }, {
    "from": 4,
    "label": "calls",
    "to": 73
  }, {
    "from": 46,
    "label": "calls",
    "to": 73
  }, {
    "from": 60,
    "label": "calls",
    "to": 73
  }, {
    "from": 55,
    "label": "calls",
    "to": 80
  }, {
    "from": 18,
    "label": "calls",
    "to": 79
  }, {
    "from": 18,
    "label": "calls",
    "to": 79
  }, {
    "from": 66,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 74
  }, {
    "from": 4,
    "label": "calls",
    "to": 75
  }, {
    "from": 4,
    "label": "calls",
    "to": 75
  }, {
    "from": 30,
    "label": "calls",
    "to": 82
  }, {
    "from": 30,
    "label": "calls",
    "to": 82
  }, {
    "from": 46,
    "label": "calls",
    "to": 82
  }, {
    "from": 46,
    "label": "calls",
    "to": 82
  }, {
    "from": 60,
    "label": "calls",
    "to": 82
  }, {
    "from": 60,
    "label": "calls",
    "to": 82
  }, {
    "from": 46,
    "label": "calls",
    "to": 41
  }, {
    "from": 46,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 78
  }, {
    "from": 41,
    "label": "calls",
    "to": 78
  }, {
    "from": 46,
    "label": "calls",
    "to": 78
  }, {
    "from": 69,
    "label": "calls",
    "to": 3
  }, {
    "from": 4,
    "label": "calls",
    "to": 81
  }, {
    "from": 69,
    "label": "calls",
    "to": 83
  }, {
    "from": 69,
    "label": "calls",
    "to": 83
  }, {
    "from": 18,
    "label": "calls",
    "to": 76
  }, {
    "from": 60,
    "label": "calls",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "declares",
    "to": 4
  }, {
    "from": 69,
    "label": "declares",
    "to": 18
  }, {
    "from": 69,
    "label": "declares",
    "to": 30
  }, {
    "from": 69,
    "label": "declares",
    "to": 41
  }, {
    "from": 69,
    "label": "declares",
    "to": 46
  }, {
    "from": 69,
    "label": "declares",
    "to": 55
  }, {
    "from": 69,
    "label": "declares",
    "to": 60
  }, {
    "from": 69,
    "label": "declares",
    "to": 66
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 84,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 85
  }, {
    "from": 1,
    "label": "contains",
    "to": 86
  }, {
    "from": 85,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 86,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "requires",
    "to": 2
  }, {
    "from": 86,
    "label": "initializes",
    "to": 84
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "uri-test",
    "type": "module"
  }, {
    "id": 2,
    "text": "uri",
    "type": "module"
  }, {
    "id": 3,
    "text": "function import(name)\r\n  \r\n  do_assert(is_string(name), \"lunit.import() expects a single string as argument\")\r\n  \r\n  local user_env = getfenv(2)\r\n  \r\n  --------------------------------------------------\r\n  -- Installs a specific function in the user env --\r\n  --------------------------------------------------\r\n  \r\n  local function install(funcname)\r\n    user_env[funcname] = P[funcname]\r\n  end\r\n  \r\n  \r\n  ----------------------------------------------------------\r\n  -- Install functions matching a pattern in the user env --\r\n  ----------------------------------------------------------\r\n  \r\n  local function install_pattern(pattern)\r\n    for funcname, _ in pairs(P) do\r\n      if string.find(funcname, pattern) then\r\n        install(funcname)\r\n      end\r\n    end\r\n  end\r\n  \r\n  ------------------------------------------------------------\r\n  -- Installs assert() and all assert_xxx() in the user env --\r\n  ------------------------------------------------------------\r\n  \r\n  local function install_asserts()\r\n    install_pattern(\"^assert.*\")\r\n  end\r\n  \r\n  -------------------------------------------\r\n  -- Installs all is_xxx() in the user env --\r\n  -------------------------------------------\r\n  \r\n  local function install_tests()\r\n    install_pattern(\"^is_.+\")\r\n  end\r\n  \r\n  if name == \"asserts\" or name == \"assertions\" then\r\n    install_asserts()\r\n  elseif name == \"tests\" or name == \"checks\" then\r\n    install_tests()\r\n  elseif name == \"all\" then\r\n    install_asserts()\r\n    install_tests()\r\n    install(\"TestCase\")\r\n  elseif string.find(name, \"^assert.*\") and P[name] then\r\n    install(name)\r\n  elseif string.find(name, \"^is_.+\") and P[name] then\r\n    install(name)\r\n  elseif name == \"TestCase\" then\r\n    install(\"TestCase\")\r\n  else\r\n    error(\"luniit.import(): invalid function '\"..name..\"' to import\", 2)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function is_one_of (expecteds, actual, msg)\r\n    for _, v in ipairs(expecteds) do\r\n        if actual == v then return end\r\n    end\r\n\r\n    -- Not any of the expected answers matched.  In order to report the error\r\n    -- usefully, we have to list the alternatives in the error message.\r\n    local err = \"expected one of {\"\r\n    for i, v in ipairs(expecteds) do\r\n        if i > 1 then err = err .. \", \" end\r\n        err = err .. \"'\" .. tostring(v) .. \"'\"\r\n    end\r\n    err = err .. \"}, but was '\" .. tostring(actual) .. \"'\"\r\n    if msg then err = err .. \": \" .. msg end\r\n    assert_fail(err)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "for _, v in ipairs(expecteds) do\r\n        if actual == v then return end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "if actual == v then return end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "local err = \"expected one of {\"",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "for i, v in ipairs(expecteds) do\r\n        if i > 1 then err = err .. \", \" end\r\n        err = err .. \"'\" .. tostring(v) .. \"'\"\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "if i > 1 then err = err .. \", \" end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "err = err .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "err = err .. \"'\" .. tostring(v) .. \"'\"",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "err = err .. \"}, but was '\" .. tostring(actual) .. \"'\"",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if msg then err = err .. \": \" .. msg end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "err = err .. \": \" .. msg",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "assert_fail(err)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function assert_isa(actual, class)\r\n    assert_table(actual)\r\n    assert_table(class)\r\n    local mt = actual\r\n    while true do\r\n        mt = getmetatable(mt)\r\n        if not mt then error\"class not found as metatable at any level\" end\r\n        if mt == actual then error\"circular metatables\" end\r\n        if mt == class then return nil end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert_table(actual)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert_table(class)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "local mt = actual",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "while true do\r\n        mt = getmetatable(mt)\r\n        if not mt then error\"class not found as metatable at any level\" end\r\n        if mt == actual then error\"circular metatables\" end\r\n        if mt == class then return nil end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 23,
    "text": "mt = getmetatable(mt)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if not mt then error\"class not found as metatable at any level\" end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "error\"class not found as metatable at any level\"",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "if mt == actual then error\"circular metatables\" end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "error\"circular metatables\"",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "if mt == class then return nil end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function assert_array_shallow_equal (expected, actual, msg)\r\n    if not msg then msg = \"assert_array_shallow_equal\" end\r\n    assert_table(actual, msg .. \", is table\")\r\n    is(#expected, #actual, msg .. \", same size\")\r\n    if #expected == #actual then\r\n        for i = 1, #expected do\r\n            is(expected[i], actual[i], msg .. \", element \" .. i)\r\n        end\r\n    end\r\n    for key in pairs(actual) do\r\n        assert_number(key, msg .. \", non-number key in array\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if not msg then msg = \"assert_array_shallow_equal\" end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "msg = \"assert_array_shallow_equal\"",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "assert_table(actual, msg .. \", is table\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "is(#expected, #actual, msg .. \", same size\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if #expected == #actual then\r\n        for i = 1, #expected do\r\n            is(expected[i], actual[i], msg .. \", element \" .. i)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "for i = 1, #expected do\r\n            is(expected[i], actual[i], msg .. \", element \" .. i)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 37,
    "text": "is(expected[i], actual[i], msg .. \", element \" .. i)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "for key in pairs(actual) do\r\n        assert_number(key, msg .. \", non-number key in array\")\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "assert_number(key, msg .. \", non-number key in array\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function _count_hash_pairs (hash)\r\n    local count = 0\r\n    for _, _ in pairs(hash) do count = count + 1 end\r\n    return count\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "for _, _ in pairs(hash) do count = count + 1 end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function assert_hash_shallow_equal (expected, actual, msg)\r\n    if not msg then msg = \"assert_hash_shallow_equal\" end\r\n    assert_table(actual, msg .. \", is table\")\r\n    local expsize, actualsize = _count_hash_pairs(expected),\r\n                                _count_hash_pairs(actual)\r\n    is(expsize, actualsize, msg .. \", same size\")\r\n    if expsize == actualsize then\r\n        for k, v in pairs(expected) do\r\n            is(expected[k], actual[k], msg .. \", element \" .. tostring(k))\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "if not msg then msg = \"assert_hash_shallow_equal\" end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "msg = \"assert_hash_shallow_equal\"",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "local expsize, actualsize = _count_hash_pairs(expected),\r\n                                _count_hash_pairs(actual)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "is(expsize, actualsize, msg .. \", same size\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "if expsize == actualsize then\r\n        for k, v in pairs(expected) do\r\n            is(expected[k], actual[k], msg .. \", element \" .. tostring(k))\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "for k, v in pairs(expected) do\r\n            is(expected[k], actual[k], msg .. \", element \" .. tostring(k))\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "is(expected[k], actual[k], msg .. \", element \" .. tostring(k))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function is_bad_uri (msg, uri)\r\n    local ok, err = URI:new(uri)\r\n    assert_nil(ok, msg)\r\n    assert_string(err, msg)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local ok, err = URI:new(uri)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "assert_nil(ok, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert_string(err, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function test_norm (expected, input)\r\n    local uri = assert(URI:new(input))\r\n    is(expected, uri:uri())\r\n    is(expected, tostring(uri))\r\n    assert_false(uri:is_relative())\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local uri = assert(URI:new(input))",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "is(expected, uri:uri())",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "is(expected, tostring(uri))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert_false(uri:is_relative())",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function test_norm_already (input)\r\n    test_norm(input, input)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "test_norm(input, input)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "",
    "type": "function container"
  }, {
    "id": 70,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 71,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 72,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 73,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 74,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 75,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 76,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 77,
    "text": "assert_number",
    "type": "global function"
  }, {
    "id": 78,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 79,
    "text": "error",
    "type": "global function"
  }, {
    "id": 80,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 81,
    "text": "assert_fail",
    "type": "global function"
  }, {
    "id": 82,
    "text": "is",
    "type": "global function"
  }, {
    "id": 83,
    "text": "require",
    "type": "global function"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  }, {
    "id": 85,
    "text": "",
    "type": "variable container"
  }, {
    "id": 86,
    "text": "",
    "type": "require container"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  } ]
}