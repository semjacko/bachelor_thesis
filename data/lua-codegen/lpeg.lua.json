{
  "_filename": "lpeg.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-codegen/src/CodeGen/lpeg.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 50
  }, {
    "from": 38,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 38,
    "label": "has",
    "to": 53
  }, {
    "from": 38,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 59
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 60
  }, {
    "from": 38,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 63
  }, {
    "from": 38,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 66
  }, {
    "from": 38,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 52
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 37,
    "label": "has",
    "to": 82
  }, {
    "from": 37,
    "label": "has",
    "to": 83
  }, {
    "from": 37,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 37,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 74
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 80
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 93
  }, {
    "from": 22,
    "label": "has",
    "to": 94
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 26
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 27
  }, {
    "from": 96,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 96,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 50
  }, {
    "from": 38,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 38,
    "label": "has",
    "to": 53
  }, {
    "from": 38,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 59
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 60
  }, {
    "from": 38,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 63
  }, {
    "from": 38,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 66
  }, {
    "from": 38,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 52
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 37,
    "label": "has",
    "to": 82
  }, {
    "from": 37,
    "label": "has",
    "to": 83
  }, {
    "from": 37,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 37,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 74
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 80
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 29
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 31
  }, {
    "from": 100,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 100,
    "label": "has",
    "to": 4
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 50
  }, {
    "from": 38,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 38,
    "label": "has",
    "to": 53
  }, {
    "from": 38,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 59
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 60
  }, {
    "from": 38,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 63
  }, {
    "from": 38,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 66
  }, {
    "from": 38,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 52
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 102,
    "label": "has",
    "to": 82
  }, {
    "from": 102,
    "label": "has",
    "to": 83
  }, {
    "from": 102,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 102,
    "label": "has",
    "to": 4
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 47
  }, {
    "from": 104,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 50
  }, {
    "from": 104,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 104,
    "label": "has",
    "to": 53
  }, {
    "from": 104,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 59
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 60
  }, {
    "from": 104,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 63
  }, {
    "from": 104,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 66
  }, {
    "from": 104,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 52
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 49
  }, {
    "from": 104,
    "label": "has",
    "to": 4
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 106,
    "label": "has",
    "to": 4
  }, {
    "from": 106,
    "label": "has",
    "to": 42
  }, {
    "from": 106,
    "label": "has",
    "to": 43
  }, {
    "from": 106,
    "label": "has",
    "to": 44
  }, {
    "from": 106,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 106,
    "label": "has",
    "to": 4
  }, {
    "from": 106,
    "label": "has",
    "to": 4
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 4
  }, {
    "from": 110,
    "label": "has",
    "to": 4
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 4
  }, {
    "from": 108,
    "label": "has",
    "to": 4
  }, {
    "from": 108,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 4
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 90
  }, {
    "from": 119,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 80
  }, {
    "from": 119,
    "label": "has",
    "to": 92
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 4
  }, {
    "from": 122,
    "label": "has",
    "to": 4
  }, {
    "from": 123,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 123,
    "label": "has",
    "to": 4
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "calls",
    "to": 11
  }, {
    "from": 22,
    "label": "calls",
    "to": 11
  }, {
    "from": 22,
    "label": "calls",
    "to": 11
  }, {
    "from": 22,
    "label": "calls",
    "to": 108
  }, {
    "from": 126,
    "label": "calls",
    "to": 108
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 126,
    "label": "calls",
    "to": 134
  }, {
    "from": 19,
    "label": "calls",
    "to": 135
  }, {
    "from": 19,
    "label": "calls",
    "to": 2
  }, {
    "from": 19,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 19,
    "label": "calls",
    "to": 138
  }, {
    "from": 22,
    "label": "calls",
    "to": 19
  }, {
    "from": 22,
    "label": "calls",
    "to": 19
  }, {
    "from": 11,
    "label": "calls",
    "to": 136
  }, {
    "from": 22,
    "label": "calls",
    "to": 136
  }, {
    "from": 22,
    "label": "calls",
    "to": 136
  }, {
    "from": 22,
    "label": "calls",
    "to": 136
  }, {
    "from": 22,
    "label": "calls",
    "to": 136
  }, {
    "from": 22,
    "label": "calls",
    "to": 6
  }, {
    "from": 22,
    "label": "calls",
    "to": 6
  }, {
    "from": 126,
    "label": "calls",
    "to": 129
  }, {
    "from": 126,
    "label": "calls",
    "to": 129
  }, {
    "from": 126,
    "label": "calls",
    "to": 129
  }, {
    "from": 2,
    "label": "calls",
    "to": 131
  }, {
    "from": 22,
    "label": "calls",
    "to": 102
  }, {
    "from": 22,
    "label": "calls",
    "to": 102
  }, {
    "from": 6,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 126,
    "label": "calls",
    "to": 133
  }, {
    "from": 22,
    "label": "calls",
    "to": 100
  }, {
    "from": 22,
    "label": "calls",
    "to": 100
  }, {
    "from": 22,
    "label": "calls",
    "to": 100
  }, {
    "from": 22,
    "label": "calls",
    "to": 100
  }, {
    "from": 22,
    "label": "calls",
    "to": 100
  }, {
    "from": 22,
    "label": "calls",
    "to": 98
  }, {
    "from": 22,
    "label": "calls",
    "to": 98
  }, {
    "from": 22,
    "label": "calls",
    "to": 98
  }, {
    "from": 22,
    "label": "calls",
    "to": 98
  }, {
    "from": 22,
    "label": "calls",
    "to": 98
  }, {
    "from": 22,
    "label": "calls",
    "to": 98
  }, {
    "from": 22,
    "label": "calls",
    "to": 98
  }, {
    "from": 22,
    "label": "calls",
    "to": 96
  }, {
    "from": 22,
    "label": "calls",
    "to": 96
  }, {
    "from": 22,
    "label": "calls",
    "to": 106
  }, {
    "from": 22,
    "label": "calls",
    "to": 106
  }, {
    "from": 22,
    "label": "calls",
    "to": 106
  }, {
    "from": 22,
    "label": "calls",
    "to": 106
  }, {
    "from": 22,
    "label": "calls",
    "to": 106
  }, {
    "from": 108,
    "label": "calls",
    "to": 140
  }, {
    "from": 126,
    "label": "calls",
    "to": 140
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 128
  }, {
    "from": 126,
    "label": "calls",
    "to": 127
  }, {
    "from": 126,
    "label": "calls",
    "to": 127
  }, {
    "from": 126,
    "label": "calls",
    "to": 127
  }, {
    "from": 126,
    "label": "calls",
    "to": 127
  }, {
    "from": 126,
    "label": "calls",
    "to": 127
  }, {
    "from": 11,
    "label": "calls",
    "to": 141
  }, {
    "from": 22,
    "label": "calls",
    "to": 141
  }, {
    "from": 22,
    "label": "calls",
    "to": 141
  }, {
    "from": 22,
    "label": "calls",
    "to": 141
  }, {
    "from": 22,
    "label": "calls",
    "to": 141
  }, {
    "from": 22,
    "label": "calls",
    "to": 141
  }, {
    "from": 22,
    "label": "calls",
    "to": 141
  }, {
    "from": 126,
    "label": "calls",
    "to": 139
  }, {
    "from": 126,
    "label": "calls",
    "to": 139
  }, {
    "from": 126,
    "label": "calls",
    "to": 139
  }, {
    "from": 108,
    "label": "calls",
    "to": 22
  }, {
    "from": 11,
    "label": "calls",
    "to": 137
  }, {
    "from": 11,
    "label": "calls",
    "to": 137
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 126,
    "label": "declares",
    "to": 2
  }, {
    "from": 126,
    "label": "declares",
    "to": 6
  }, {
    "from": 126,
    "label": "declares",
    "to": 11
  }, {
    "from": 126,
    "label": "declares",
    "to": 19
  }, {
    "from": 126,
    "label": "declares",
    "to": 22
  }, {
    "from": 126,
    "label": "declares",
    "to": 96
  }, {
    "from": 126,
    "label": "declares",
    "to": 98
  }, {
    "from": 126,
    "label": "declares",
    "to": 100
  }, {
    "from": 126,
    "label": "declares",
    "to": 102
  }, {
    "from": 126,
    "label": "declares",
    "to": 104
  }, {
    "from": 126,
    "label": "declares",
    "to": 106
  }, {
    "from": 126,
    "label": "declares",
    "to": 108
  }, {
    "from": 126,
    "label": "declares",
    "to": 115
  }, {
    "from": 126,
    "label": "declares",
    "to": 117
  }, {
    "from": 126,
    "label": "declares",
    "to": 119
  }, {
    "from": 126,
    "label": "declares",
    "to": 121
  }, {
    "from": 126,
    "label": "declares",
    "to": 122
  }, {
    "from": 126,
    "label": "declares",
    "to": 123
  }, {
    "from": 126,
    "label": "declares",
    "to": 125
  }, {
    "from": 1,
    "label": "declares",
    "to": 127
  }, {
    "from": 1,
    "label": "declares",
    "to": 128
  }, {
    "from": 1,
    "label": "declares",
    "to": 129
  }, {
    "from": 1,
    "label": "declares",
    "to": 131
  }, {
    "from": 1,
    "label": "declares",
    "to": 132
  }, {
    "from": 1,
    "label": "declares",
    "to": 133
  }, {
    "from": 1,
    "label": "declares",
    "to": 134
  }, {
    "from": 1,
    "label": "contains",
    "to": 143
  }, {
    "from": 1,
    "label": "contains",
    "to": 144
  }, {
    "from": 143,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 143,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 143,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 143,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 143,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 143,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 143,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 158,
    "label": "assigns",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 158,
    "label": "assigns",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 158,
    "label": "assigns",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 158,
    "label": "assigns",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 158,
    "label": "assigns",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 158,
    "label": "assigns",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 158,
    "label": "assigns",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 158,
    "label": "assigns",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 158,
    "label": "assigns",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 143,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 143,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 143,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 143,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 143,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 143,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 143,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 143,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 143,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 143,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 143,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 143,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 143,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 143,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 143,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 143,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 143,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 143,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 143,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 143,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 143,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 143,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 143,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 143,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 143,
    "label": "initializes",
    "to": 227
  }, {
    "from": 143,
    "label": "initializes",
    "to": 228
  }, {
    "from": 143,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 143,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 143,
    "label": "initializes",
    "to": 233
  }, {
    "from": 143,
    "label": "initializes",
    "to": 234
  }, {
    "from": 143,
    "label": "initializes",
    "to": 235
  }, {
    "from": 143,
    "label": "initializes",
    "to": 236
  }, {
    "from": 144,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "requires",
    "to": 238
  }, {
    "from": 144,
    "label": "initializes",
    "to": 239
  }, {
    "from": 239,
    "label": "requires",
    "to": 130
  }, {
    "from": 144,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "provides",
    "to": 241
  }, {
    "from": 142,
    "label": "represents",
    "to": 242
  }, {
    "from": 241,
    "label": "provides",
    "to": 242
  }, {
    "from": 243,
    "label": "requires",
    "to": 238
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 89,
    "label": "hasArgument",
    "to": 119
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 121
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 122
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 123
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function gsub (s, patt, repl)\r\n    local p = lpeg.Cs((patt / repl + 1)^0)\r\n    return p:match(s)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local p = lpeg.Cs((patt / repl + 1)^0)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function split (s, sep, func)\r\n    local elem = lpeg.C((1 - sep)^0) / func\r\n    local p = elem * (sep * elem)^0\r\n    p:match(s)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local elem = lpeg.C((1 - sep)^0) / func",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local p = elem * (sep * elem)^0",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "p:match(s)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function render (val, sep, formatter)\r\n    formatter = formatter or tostring\r\n    if val == nil then\r\n        return ''\r\n    end\r\n    if type(val) == 'table' then\r\n        local t = {}\r\n        for i = 1, #val do\r\n            t[i] = formatter(val[i])\r\n        end\r\n        return tconcat(t, sep)\r\n    else\r\n        return formatter(val)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "formatter = formatter or tostring",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if val == nil then\r\n        return ''\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "if type(val) == 'table' then\r\n        local t = {}\r\n        for i = 1, #val do\r\n            t[i] = formatter(val[i])\r\n        end\r\n        return tconcat(t, sep)\r\n    else\r\n        return formatter(val)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for i = 1, #val do\r\n            t[i] = formatter(val[i])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "t[i] = formatter(val[i])",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function unescape(str)\r\n    str = gsub(str, escape_digit, function (s)\r\n                                      return char(tonumber(s) % 256)\r\n                                  end)\r\n    return gsub(str, escape_special, special)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "str = gsub(str, escape_digit, function (s)\r\n                                      return char(tonumber(s) % 256)\r\n                                  end)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function eval (self, name)\r\n    local cyclic = {}\r\n    local msg = {}\r\n\r\n    local function interpolate (self, template, tname)\r\n        if type(template) ~= 'string' then\r\n            return nil\r\n        end\r\n        local lineno = 1\r\n\r\n        local function add_message (...)\r\n            msg[#msg+1] = tname .. ':' .. lineno .. ': ' .. tconcat{...}\r\n        end  -- add_message\r\n\r\n        local function get_value (vname)\r\n            local t = self\r\n            split(vname, dot, function (w)\r\n                if type(t) == 'table' then\r\n                    t = t[w]\r\n                else\r\n                    add_message(vname, \" is invalid\")\r\n                    t = nil\r\n                end\r\n            end)\r\n            return t\r\n        end  -- get_value\r\n\r\n        local function interpolate_line (line)\r\n            local function get_repl (capt)\r\n                local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end  -- apply\r\n\r\n                local capt1, pos = vname_capture:match(capt, 1)\r\n                if not capt1 then\r\n                    add_message(capt, \" does not match\")\r\n                    return capt\r\n                end\r\n                local sep, pos_sep = separator_capture:match(capt, pos)\r\n                if sep then\r\n                    sep = unescape(sep)\r\n                end\r\n                local fmt, pos_fmt = format_capture:match(capt, pos_sep or pos)\r\n                if data_end:match(capt, pos_fmt or pos_sep or pos) then\r\n                    if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end\r\n                end\r\n                if include_end:match(capt, pos) then\r\n                    return apply(self, capt1)\r\n                end\r\n                local capt2 = if_capture:match(capt, pos)\r\n                if capt2 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end\r\n                end\r\n                local capt2, capt3 = if_else_capture:match(capt, pos)\r\n                if capt2 and capt3 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end\r\n                end\r\n                local capt2, pos = map_capture:match(capt, pos)\r\n                if capt2 then\r\n                    local sep, pos_sep = separator_capture:match(capt, pos)\r\n                    if sep then\r\n                        sep = unescape(sep)\r\n                    end\r\n                    if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end\r\n                end\r\n                add_message(capt, \" does not match\")\r\n                return capt\r\n            end  -- get_repl\r\n\r\n            local indent = indent_capture:match(line)\r\n            local result = gsub(line, subst, get_repl)\r\n            if indent then\r\n                result = gsub(result, newline_end, '')\r\n                if indent ~= '' then\r\n                    result = gsub(result, indent_needed, \"\\n\" .. indent)\r\n                end\r\n            end\r\n            return result\r\n        end -- interpolate_line\r\n\r\n        if newline_anywhere:match(template) then\r\n            local results = {}\r\n            split(template, newline, function (line)\r\n                local result = interpolate_line(line)\r\n                if result == line or not only_space:match(result) then\r\n                    results[#results+1] = result\r\n                end\r\n                lineno = lineno + 1\r\n            end)\r\n            return tconcat(results, \"\\n\")\r\n        else\r\n            return interpolate_line(template)\r\n        end\r\n    end  -- interpolate\r\n\r\n    local val = self[name]\r\n    if type(val) == 'string' then\r\n        return interpolate(self, val, name),\r\n               (#msg > 0 and tconcat(msg, \"\\n\")) or nil\r\n    else\r\n        return render(val)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local cyclic = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local msg = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local function interpolate (self, template, tname)\r\n        if type(template) ~= 'string' then\r\n            return nil\r\n        end\r\n        local lineno = 1\r\n\r\n        local function add_message (...)\r\n            msg[#msg+1] = tname .. ':' .. lineno .. ': ' .. tconcat{...}\r\n        end  -- add_message\r\n\r\n        local function get_value (vname)\r\n            local t = self\r\n            split(vname, dot, function (w)\r\n                if type(t) == 'table' then\r\n                    t = t[w]\r\n                else\r\n                    add_message(vname, \" is invalid\")\r\n                    t = nil\r\n                end\r\n            end)\r\n            return t\r\n        end  -- get_value\r\n\r\n        local function interpolate_line (line)\r\n            local function get_repl (capt)\r\n                local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end  -- apply\r\n\r\n                local capt1, pos = vname_capture:match(capt, 1)\r\n                if not capt1 then\r\n                    add_message(capt, \" does not match\")\r\n                    return capt\r\n                end\r\n                local sep, pos_sep = separator_capture:match(capt, pos)\r\n                if sep then\r\n                    sep = unescape(sep)\r\n                end\r\n                local fmt, pos_fmt = format_capture:match(capt, pos_sep or pos)\r\n                if data_end:match(capt, pos_fmt or pos_sep or pos) then\r\n                    if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end\r\n                end\r\n                if include_end:match(capt, pos) then\r\n                    return apply(self, capt1)\r\n                end\r\n                local capt2 = if_capture:match(capt, pos)\r\n                if capt2 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end\r\n                end\r\n                local capt2, capt3 = if_else_capture:match(capt, pos)\r\n                if capt2 and capt3 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end\r\n                end\r\n                local capt2, pos = map_capture:match(capt, pos)\r\n                if capt2 then\r\n                    local sep, pos_sep = separator_capture:match(capt, pos)\r\n                    if sep then\r\n                        sep = unescape(sep)\r\n                    end\r\n                    if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end\r\n                end\r\n                add_message(capt, \" does not match\")\r\n                return capt\r\n            end  -- get_repl\r\n\r\n            local indent = indent_capture:match(line)\r\n            local result = gsub(line, subst, get_repl)\r\n            if indent then\r\n                result = gsub(result, newline_end, '')\r\n                if indent ~= '' then\r\n                    result = gsub(result, indent_needed, \"\\n\" .. indent)\r\n                end\r\n            end\r\n            return result\r\n        end -- interpolate_line\r\n\r\n        if newline_anywhere:match(template) then\r\n            local results = {}\r\n            split(template, newline, function (line)\r\n                local result = interpolate_line(line)\r\n                if result == line or not only_space:match(result) then\r\n                    results[#results+1] = result\r\n                end\r\n                lineno = lineno + 1\r\n            end)\r\n            return tconcat(results, \"\\n\")\r\n        else\r\n            return interpolate_line(template)\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 26,
    "text": "if type(template) ~= 'string' then\r\n            return nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local lineno = 1",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local function add_message (...)\r\n            msg[#msg+1] = tname .. ':' .. lineno .. ': ' .. tconcat{...}\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 29,
    "text": "msg[#msg+1] = tname .. ':' .. lineno .. ': ' .. tconcat{...}",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local function get_value (vname)\r\n            local t = self\r\n            split(vname, dot, function (w)\r\n                if type(t) == 'table' then\r\n                    t = t[w]\r\n                else\r\n                    add_message(vname, \" is invalid\")\r\n                    t = nil\r\n                end\r\n            end)\r\n            return t\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 31,
    "text": "local t = self",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "split(vname, dot, function (w)\r\n                if type(t) == 'table' then\r\n                    t = t[w]\r\n                else\r\n                    add_message(vname, \" is invalid\")\r\n                    t = nil\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if type(t) == 'table' then\r\n                    t = t[w]\r\n                else\r\n                    add_message(vname, \" is invalid\")\r\n                    t = nil\r\n                end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "t = t[w]",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "add_message(vname, \" is invalid\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "t = nil",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "local function interpolate_line (line)\r\n            local function get_repl (capt)\r\n                local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end  -- apply\r\n\r\n                local capt1, pos = vname_capture:match(capt, 1)\r\n                if not capt1 then\r\n                    add_message(capt, \" does not match\")\r\n                    return capt\r\n                end\r\n                local sep, pos_sep = separator_capture:match(capt, pos)\r\n                if sep then\r\n                    sep = unescape(sep)\r\n                end\r\n                local fmt, pos_fmt = format_capture:match(capt, pos_sep or pos)\r\n                if data_end:match(capt, pos_fmt or pos_sep or pos) then\r\n                    if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end\r\n                end\r\n                if include_end:match(capt, pos) then\r\n                    return apply(self, capt1)\r\n                end\r\n                local capt2 = if_capture:match(capt, pos)\r\n                if capt2 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end\r\n                end\r\n                local capt2, capt3 = if_else_capture:match(capt, pos)\r\n                if capt2 and capt3 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end\r\n                end\r\n                local capt2, pos = map_capture:match(capt, pos)\r\n                if capt2 then\r\n                    local sep, pos_sep = separator_capture:match(capt, pos)\r\n                    if sep then\r\n                        sep = unescape(sep)\r\n                    end\r\n                    if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end\r\n                end\r\n                add_message(capt, \" does not match\")\r\n                return capt\r\n            end  -- get_repl\r\n\r\n            local indent = indent_capture:match(line)\r\n            local result = gsub(line, subst, get_repl)\r\n            if indent then\r\n                result = gsub(result, newline_end, '')\r\n                if indent ~= '' then\r\n                    result = gsub(result, indent_needed, \"\\n\" .. indent)\r\n                end\r\n            end\r\n            return result\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 38,
    "text": "local function get_repl (capt)\r\n                local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end  -- apply\r\n\r\n                local capt1, pos = vname_capture:match(capt, 1)\r\n                if not capt1 then\r\n                    add_message(capt, \" does not match\")\r\n                    return capt\r\n                end\r\n                local sep, pos_sep = separator_capture:match(capt, pos)\r\n                if sep then\r\n                    sep = unescape(sep)\r\n                end\r\n                local fmt, pos_fmt = format_capture:match(capt, pos_sep or pos)\r\n                if data_end:match(capt, pos_fmt or pos_sep or pos) then\r\n                    if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end\r\n                end\r\n                if include_end:match(capt, pos) then\r\n                    return apply(self, capt1)\r\n                end\r\n                local capt2 = if_capture:match(capt, pos)\r\n                if capt2 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end\r\n                end\r\n                local capt2, capt3 = if_else_capture:match(capt, pos)\r\n                if capt2 and capt3 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end\r\n                end\r\n                local capt2, pos = map_capture:match(capt, pos)\r\n                if capt2 then\r\n                    local sep, pos_sep = separator_capture:match(capt, pos)\r\n                    if sep then\r\n                        sep = unescape(sep)\r\n                    end\r\n                    if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end\r\n                end\r\n                add_message(capt, \" does not match\")\r\n                return capt\r\n            end",
    "type": "statement:localfunction"
  }, {
    "id": 39,
    "text": "local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end",
    "type": "statement:localfunction"
  }, {
    "id": 40,
    "text": "if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "add_message(\"cyclic call of \", tmpl)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "cyclic[tmpl] = true",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "local result = interpolate(self, self[tmpl], tmpl)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "cyclic[tmpl] = nil",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "add_message(tmpl, \" is not a template\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local capt1, pos = vname_capture:match(capt, 1)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if not capt1 then\r\n                    add_message(capt, \" does not match\")\r\n                    return capt\r\n                end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "add_message(capt, \" does not match\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "local sep, pos_sep = separator_capture:match(capt, pos)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if sep then\r\n                    sep = unescape(sep)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "sep = unescape(sep)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "local fmt, pos_fmt = format_capture:match(capt, pos_sep or pos)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if data_end:match(capt, pos_fmt or pos_sep or pos) then\r\n                    if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local formatter = self[fmt]",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "add_message(fmt, \" is not a formatter\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "if include_end:match(capt, pos) then\r\n                    return apply(self, capt1)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "local capt2 = if_capture:match(capt, pos)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if capt2 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local capt2, capt3 = if_else_capture:match(capt, pos)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if capt2 and capt3 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local capt2, pos = map_capture:match(capt, pos)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if capt2 then\r\n                    local sep, pos_sep = separator_capture:match(capt, pos)\r\n                    if sep then\r\n                        sep = unescape(sep)\r\n                    end\r\n                    if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "if sep then\r\n                        sep = unescape(sep)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "local array = get_value(capt1)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if array == nil then\r\n                            return ''\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "add_message(capt1, \" is not a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end",
    "type": "statement:numericfor"
  }, {
    "id": 76,
    "text": "local item = array[i]",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "item = { it = item }",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "local result = apply(new(item, self), capt2)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "results[#results+1] = result",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if result == capt then\r\n                                break\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "local indent = indent_capture:match(line)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local result = gsub(line, subst, get_repl)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if indent then\r\n                result = gsub(result, newline_end, '')\r\n                if indent ~= '' then\r\n                    result = gsub(result, indent_needed, \"\\n\" .. indent)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "result = gsub(result, newline_end, '')",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if indent ~= '' then\r\n                    result = gsub(result, indent_needed, \"\\n\" .. indent)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "result = gsub(result, indent_needed, \"\\n\" .. indent)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "if newline_anywhere:match(template) then\r\n            local results = {}\r\n            split(template, newline, function (line)\r\n                local result = interpolate_line(line)\r\n                if result == line or not only_space:match(result) then\r\n                    results[#results+1] = result\r\n                end\r\n                lineno = lineno + 1\r\n            end)\r\n            return tconcat(results, \"\\n\")\r\n        else\r\n            return interpolate_line(template)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "split(template, newline, function (line)\r\n                local result = interpolate_line(line)\r\n                if result == line or not only_space:match(result) then\r\n                    results[#results+1] = result\r\n                end\r\n                lineno = lineno + 1\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local result = interpolate_line(line)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if result == line or not only_space:match(result) then\r\n                    results[#results+1] = result\r\n                end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "lineno = lineno + 1",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "local val = self[name]",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if type(val) == 'string' then\r\n        return interpolate(self, val, name),\r\n               (#msg > 0 and tconcat(msg, \"\\n\")) or nil\r\n    else\r\n        return render(val)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "local function interpolate (self, template, tname)\r\n        if type(template) ~= 'string' then\r\n            return nil\r\n        end\r\n        local lineno = 1\r\n\r\n        local function add_message (...)\r\n            msg[#msg+1] = tname .. ':' .. lineno .. ': ' .. tconcat{...}\r\n        end  -- add_message\r\n\r\n        local function get_value (vname)\r\n            local t = self\r\n            split(vname, dot, function (w)\r\n                if type(t) == 'table' then\r\n                    t = t[w]\r\n                else\r\n                    add_message(vname, \" is invalid\")\r\n                    t = nil\r\n                end\r\n            end)\r\n            return t\r\n        end  -- get_value\r\n\r\n        local function interpolate_line (line)\r\n            local function get_repl (capt)\r\n                local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end  -- apply\r\n\r\n                local capt1, pos = vname_capture:match(capt, 1)\r\n                if not capt1 then\r\n                    add_message(capt, \" does not match\")\r\n                    return capt\r\n                end\r\n                local sep, pos_sep = separator_capture:match(capt, pos)\r\n                if sep then\r\n                    sep = unescape(sep)\r\n                end\r\n                local fmt, pos_fmt = format_capture:match(capt, pos_sep or pos)\r\n                if data_end:match(capt, pos_fmt or pos_sep or pos) then\r\n                    if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end\r\n                end\r\n                if include_end:match(capt, pos) then\r\n                    return apply(self, capt1)\r\n                end\r\n                local capt2 = if_capture:match(capt, pos)\r\n                if capt2 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end\r\n                end\r\n                local capt2, capt3 = if_else_capture:match(capt, pos)\r\n                if capt2 and capt3 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end\r\n                end\r\n                local capt2, pos = map_capture:match(capt, pos)\r\n                if capt2 then\r\n                    local sep, pos_sep = separator_capture:match(capt, pos)\r\n                    if sep then\r\n                        sep = unescape(sep)\r\n                    end\r\n                    if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end\r\n                end\r\n                add_message(capt, \" does not match\")\r\n                return capt\r\n            end  -- get_repl\r\n\r\n            local indent = indent_capture:match(line)\r\n            local result = gsub(line, subst, get_repl)\r\n            if indent then\r\n                result = gsub(result, newline_end, '')\r\n                if indent ~= '' then\r\n                    result = gsub(result, indent_needed, \"\\n\" .. indent)\r\n                end\r\n            end\r\n            return result\r\n        end -- interpolate_line\r\n\r\n        if newline_anywhere:match(template) then\r\n            local results = {}\r\n            split(template, newline, function (line)\r\n                local result = interpolate_line(line)\r\n                if result == line or not only_space:match(result) then\r\n                    results[#results+1] = result\r\n                end\r\n                lineno = lineno + 1\r\n            end)\r\n            return tconcat(results, \"\\n\")\r\n        else\r\n            return interpolate_line(template)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "local function add_message (...)\r\n            msg[#msg+1] = tname .. ':' .. lineno .. ': ' .. tconcat{...}\r\n        end",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "local function get_value (vname)\r\n            local t = self\r\n            split(vname, dot, function (w)\r\n                if type(t) == 'table' then\r\n                    t = t[w]\r\n                else\r\n                    add_message(vname, \" is invalid\")\r\n                    t = nil\r\n                end\r\n            end)\r\n            return t\r\n        end",
    "type": "function"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "local function interpolate_line (line)\r\n            local function get_repl (capt)\r\n                local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end  -- apply\r\n\r\n                local capt1, pos = vname_capture:match(capt, 1)\r\n                if not capt1 then\r\n                    add_message(capt, \" does not match\")\r\n                    return capt\r\n                end\r\n                local sep, pos_sep = separator_capture:match(capt, pos)\r\n                if sep then\r\n                    sep = unescape(sep)\r\n                end\r\n                local fmt, pos_fmt = format_capture:match(capt, pos_sep or pos)\r\n                if data_end:match(capt, pos_fmt or pos_sep or pos) then\r\n                    if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end\r\n                end\r\n                if include_end:match(capt, pos) then\r\n                    return apply(self, capt1)\r\n                end\r\n                local capt2 = if_capture:match(capt, pos)\r\n                if capt2 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end\r\n                end\r\n                local capt2, capt3 = if_else_capture:match(capt, pos)\r\n                if capt2 and capt3 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end\r\n                end\r\n                local capt2, pos = map_capture:match(capt, pos)\r\n                if capt2 then\r\n                    local sep, pos_sep = separator_capture:match(capt, pos)\r\n                    if sep then\r\n                        sep = unescape(sep)\r\n                    end\r\n                    if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end\r\n                end\r\n                add_message(capt, \" does not match\")\r\n                return capt\r\n            end  -- get_repl\r\n\r\n            local indent = indent_capture:match(line)\r\n            local result = gsub(line, subst, get_repl)\r\n            if indent then\r\n                result = gsub(result, newline_end, '')\r\n                if indent ~= '' then\r\n                    result = gsub(result, indent_needed, \"\\n\" .. indent)\r\n                end\r\n            end\r\n            return result\r\n        end",
    "type": "function"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function get_repl (capt)\r\n                local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end  -- apply\r\n\r\n                local capt1, pos = vname_capture:match(capt, 1)\r\n                if not capt1 then\r\n                    add_message(capt, \" does not match\")\r\n                    return capt\r\n                end\r\n                local sep, pos_sep = separator_capture:match(capt, pos)\r\n                if sep then\r\n                    sep = unescape(sep)\r\n                end\r\n                local fmt, pos_fmt = format_capture:match(capt, pos_sep or pos)\r\n                if data_end:match(capt, pos_fmt or pos_sep or pos) then\r\n                    if fmt then\r\n                        local formatter = self[fmt]\r\n                        if type(formatter) ~= 'function' then\r\n                            add_message(fmt, \" is not a formatter\")\r\n                            return capt\r\n                        end\r\n                        return render(get_value(capt1), sep, formatter)\r\n                    else\r\n                        return render(get_value(capt1), sep)\r\n                    end\r\n                end\r\n                if include_end:match(capt, pos) then\r\n                    return apply(self, capt1)\r\n                end\r\n                local capt2 = if_capture:match(capt, pos)\r\n                if capt2 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return ''\r\n                    end\r\n                end\r\n                local capt2, capt3 = if_else_capture:match(capt, pos)\r\n                if capt2 and capt3 then\r\n                    if get_value(capt1) then\r\n                        return apply(self, capt2)\r\n                    else\r\n                        return apply(self, capt3)\r\n                    end\r\n                end\r\n                local capt2, pos = map_capture:match(capt, pos)\r\n                if capt2 then\r\n                    local sep, pos_sep = separator_capture:match(capt, pos)\r\n                    if sep then\r\n                        sep = unescape(sep)\r\n                    end\r\n                    if map_end:match(capt, pos_sep or pos) then\r\n                        local array = get_value(capt1)\r\n                        if array == nil then\r\n                            return ''\r\n                        end\r\n                        if type(array) ~= 'table' then\r\n                            add_message(capt1, \" is not a table\")\r\n                            return capt\r\n                        end\r\n                        local results = {}\r\n                        for i = 1, #array do\r\n                            local item = array[i]\r\n                            if type(item) ~= 'table' then\r\n                                item = { it = item }\r\n                            end\r\n                            local result = apply(new(item, self), capt2)\r\n                            results[#results+1] = result\r\n                            if result == capt then\r\n                                break\r\n                            end\r\n                        end\r\n                        return tconcat(results, sep)\r\n                    end\r\n                end\r\n                add_message(capt, \" does not match\")\r\n                return capt\r\n            end",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "local function apply (self, tmpl)\r\n                    if cyclic[tmpl] then\r\n                        add_message(\"cyclic call of \", tmpl)\r\n                        return capt\r\n                    end\r\n                    cyclic[tmpl] = true\r\n                    local result = interpolate(self, self[tmpl], tmpl)\r\n                    cyclic[tmpl] = nil\r\n                    if result == nil then\r\n                        add_message(tmpl, \" is not a template\")\r\n                        return capt\r\n                    end\r\n                    return result\r\n                end",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function new (env, ...)\r\n    local obj = { env or {}, ... }\r\n    setmetatable(obj, {\r\n        __tostring = function () return m._NAME end,\r\n        __call  = function (...) return eval(...) end,\r\n        __index = function (t, k)\r\n                      for i = 1, #t do\r\n                          local v = t[i][k]\r\n                          if v ~= nil then\r\n                              return v\r\n                          end\r\n                      end\r\n                  end,\r\n    })\r\n    return obj\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "local obj = { env or {}, ... }",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "setmetatable(obj, {\r\n        __tostring = function () return m._NAME end,\r\n        __call  = function (...) return eval(...) end,\r\n        __index = function (t, k)\r\n                      for i = 1, #t do\r\n                          local v = t[i][k]\r\n                          if v ~= nil then\r\n                              return v\r\n                          end\r\n                      end\r\n                  end,\r\n    })",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "for i = 1, #t do\r\n                          local v = t[i][k]\r\n                          if v ~= nil then\r\n                              return v\r\n                          end\r\n                      end",
    "type": "statement:numericfor"
  }, {
    "id": 112,
    "text": "local v = t[i][k]",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if v ~= nil then\r\n                              return v\r\n                          end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function (s)\r\n                                      return char(tonumber(s) % 256)\r\n                                  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function (w)\r\n                if type(t) == 'table' then\r\n                    t = t[w]\r\n                else\r\n                    add_message(vname, \" is invalid\")\r\n                    t = nil\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function (line)\r\n                local result = interpolate_line(line)\r\n                if result == line or not only_space:match(result) then\r\n                    results[#results+1] = result\r\n                end\r\n                lineno = lineno + 1\r\n            end",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function () return m._NAME end",
    "type": "function"
  }, {
    "id": 122,
    "text": "function (...) return eval(...) end",
    "type": "function"
  }, {
    "id": 123,
    "text": "function (t, k)\r\n                      for i = 1, #t do\r\n                          local v = t[i][k]\r\n                          if v ~= nil then\r\n                              return v\r\n                          end\r\n                      end\r\n                  end",
    "type": "function"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function (func, ...) return new(...) end",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "function container"
  }, {
    "id": 127,
    "text": "R",
    "type": "global function"
  }, {
    "id": 128,
    "text": "Cp",
    "type": "global function"
  }, {
    "id": 129,
    "text": "S",
    "type": "global function"
  }, {
    "id": 130,
    "text": "table",
    "type": "module"
  }, {
    "id": 131,
    "text": "Cs",
    "type": "global function"
  }, {
    "id": 132,
    "text": "V",
    "type": "global function"
  }, {
    "id": 133,
    "text": "C",
    "type": "global function"
  }, {
    "id": 134,
    "text": "P",
    "type": "global function"
  }, {
    "id": 135,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 136,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 137,
    "text": "formatter",
    "type": "global function"
  }, {
    "id": 138,
    "text": "char",
    "type": "global function"
  }, {
    "id": 139,
    "text": "require",
    "type": "global function"
  }, {
    "id": 140,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 141,
    "text": "type",
    "type": "global function"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "variable container"
  }, {
    "id": 144,
    "text": "",
    "type": "require container"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 159,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 160,
    "text": "",
    "type": "string"
  }, {
    "id": 161,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 162,
    "text": "",
    "type": "string"
  }, {
    "id": 163,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 164,
    "text": "",
    "type": "string"
  }, {
    "id": 165,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 166,
    "text": "",
    "type": "string"
  }, {
    "id": 167,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 168,
    "text": "",
    "type": "string"
  }, {
    "id": 169,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 170,
    "text": "",
    "type": "string"
  }, {
    "id": 171,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 172,
    "text": "",
    "type": "string"
  }, {
    "id": 173,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 174,
    "text": "",
    "type": "string"
  }, {
    "id": 175,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 176,
    "text": "",
    "type": "string"
  }, {
    "id": 177,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 178,
    "text": "",
    "type": "string"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "n/a"
  }, {
    "id": 195,
    "text": "",
    "type": "local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "n/a"
  }, {
    "id": 197,
    "text": "",
    "type": "local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "n/a"
  }, {
    "id": 199,
    "text": "",
    "type": "local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "n/a"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "n/a"
  }, {
    "id": 209,
    "text": "",
    "type": "local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "n/a"
  }, {
    "id": 211,
    "text": "",
    "type": "local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "n/a"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "n/a"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "n/a"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "n/a"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "n/a"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "n/a"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "global variable"
  }, {
    "id": 229,
    "text": "",
    "type": "global variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "global variable"
  }, {
    "id": 232,
    "text": "",
    "type": "n/a"
  }, {
    "id": 233,
    "text": "",
    "type": "global variable"
  }, {
    "id": 234,
    "text": "",
    "type": "global variable"
  }, {
    "id": 235,
    "text": "",
    "type": "global variable"
  }, {
    "id": 236,
    "text": "",
    "type": "global variable"
  }, {
    "id": 237,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 238,
    "text": "string",
    "type": "module"
  }, {
    "id": 239,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "interface container"
  }, {
    "id": 242,
    "text": "",
    "type": "interface"
  }, {
    "id": 243,
    "text": "",
    "type": "require local variable"
  } ]
}