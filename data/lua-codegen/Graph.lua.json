{
  "_filename": "Graph.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-codegen/src/CodeGen/Graph.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 3,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 3,
    "label": "has",
    "to": 29
  }, {
    "from": 3,
    "label": "has",
    "to": 30
  }, {
    "from": 3,
    "label": "has",
    "to": 31
  }, {
    "from": 3,
    "label": "has",
    "to": 32
  }, {
    "from": 3,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "calls",
    "to": 39
  }, {
    "from": 3,
    "label": "calls",
    "to": 40
  }, {
    "from": 3,
    "label": "calls",
    "to": 41
  }, {
    "from": 34,
    "label": "calls",
    "to": 38
  }, {
    "from": 34,
    "label": "calls",
    "to": 38
  }, {
    "from": 34,
    "label": "calls",
    "to": 38
  }, {
    "from": 34,
    "label": "calls",
    "to": 38
  }, {
    "from": 34,
    "label": "calls",
    "to": 38
  }, {
    "from": 36,
    "label": "calls",
    "to": 42
  }, {
    "from": 36,
    "label": "calls",
    "to": 42
  }, {
    "from": 34,
    "label": "calls",
    "to": 34
  }, {
    "from": 34,
    "label": "calls",
    "to": 34
  }, {
    "from": 34,
    "label": "calls",
    "to": 34
  }, {
    "from": 34,
    "label": "calls",
    "to": 34
  }, {
    "from": 3,
    "label": "calls",
    "to": 34
  }, {
    "from": 34,
    "label": "calls",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 36,
    "label": "declares",
    "to": 3
  }, {
    "from": 36,
    "label": "declares",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 44,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 44,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 44,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 44,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 44,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 44,
    "label": "initializes",
    "to": 56
  }, {
    "from": 44,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 44,
    "label": "initializes",
    "to": 59
  }, {
    "from": 45,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 37
  }, {
    "from": 45,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 62
  }, {
    "from": 52,
    "label": "represents",
    "to": 63
  }, {
    "from": 62,
    "label": "provides",
    "to": 63
  }, {
    "from": 52,
    "label": "represents",
    "to": 64
  }, {
    "from": 52,
    "label": "represents",
    "to": 65
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Graph",
    "type": "module"
  }, {
    "id": 2,
    "text": "CodeGen",
    "type": "module"
  }, {
    "id": 3,
    "text": "function m:to_dot ()\r\n    local done = {}\r\n    local nodes = {}\r\n    local edges = {}\r\n\r\n    local function parse (key)\r\n        if not done[key] then\r\n            done[key] = true\r\n            local tmpl = self[key]\r\n            if type(tmpl) == 'string' then\r\n                table.insert(nodes, { name = key })\r\n                for capt in tmpl:gmatch \"(%$%b{})\" do\r\n                    local capt1, pos = capt:match(\"^%${([%a_][%w%._]*)()\", 1)\r\n                    if capt1 then\r\n                        if capt:match(\"^%(%)\", pos) then\r\n                            table.insert(edges, { caller = key, callee = capt1 })\r\n                            parse(capt1)\r\n                        else\r\n                            local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)\r\n                            if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end  -- parse\r\n\r\n    for k in pairs(self[1]) do\r\n        parse(k)\r\n    end\r\n    template.nodes = nodes\r\n    template.edges = edges\r\n    local dot = template 'TOP'\r\n    return dot\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local done = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local nodes = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local edges = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local function parse (key)\r\n        if not done[key] then\r\n            done[key] = true\r\n            local tmpl = self[key]\r\n            if type(tmpl) == 'string' then\r\n                table.insert(nodes, { name = key })\r\n                for capt in tmpl:gmatch \"(%$%b{})\" do\r\n                    local capt1, pos = capt:match(\"^%${([%a_][%w%._]*)()\", 1)\r\n                    if capt1 then\r\n                        if capt:match(\"^%(%)\", pos) then\r\n                            table.insert(edges, { caller = key, callee = capt1 })\r\n                            parse(capt1)\r\n                        else\r\n                            local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)\r\n                            if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 8,
    "text": "if not done[key] then\r\n            done[key] = true\r\n            local tmpl = self[key]\r\n            if type(tmpl) == 'string' then\r\n                table.insert(nodes, { name = key })\r\n                for capt in tmpl:gmatch \"(%$%b{})\" do\r\n                    local capt1, pos = capt:match(\"^%${([%a_][%w%._]*)()\", 1)\r\n                    if capt1 then\r\n                        if capt:match(\"^%(%)\", pos) then\r\n                            table.insert(edges, { caller = key, callee = capt1 })\r\n                            parse(capt1)\r\n                        else\r\n                            local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)\r\n                            if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "done[key] = true",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local tmpl = self[key]",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if type(tmpl) == 'string' then\r\n                table.insert(nodes, { name = key })\r\n                for capt in tmpl:gmatch \"(%$%b{})\" do\r\n                    local capt1, pos = capt:match(\"^%${([%a_][%w%._]*)()\", 1)\r\n                    if capt1 then\r\n                        if capt:match(\"^%(%)\", pos) then\r\n                            table.insert(edges, { caller = key, callee = capt1 })\r\n                            parse(capt1)\r\n                        else\r\n                            local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)\r\n                            if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "table.insert(nodes, { name = key })",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "for capt in tmpl:gmatch \"(%$%b{})\" do\r\n                    local capt1, pos = capt:match(\"^%${([%a_][%w%._]*)()\", 1)\r\n                    if capt1 then\r\n                        if capt:match(\"^%(%)\", pos) then\r\n                            table.insert(edges, { caller = key, callee = capt1 })\r\n                            parse(capt1)\r\n                        else\r\n                            local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)\r\n                            if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "local capt1, pos = capt:match(\"^%${([%a_][%w%._]*)()\", 1)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if capt1 then\r\n                        if capt:match(\"^%(%)\", pos) then\r\n                            table.insert(edges, { caller = key, callee = capt1 })\r\n                            parse(capt1)\r\n                        else\r\n                            local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)\r\n                            if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if capt:match(\"^%(%)\", pos) then\r\n                            table.insert(edges, { caller = key, callee = capt1 })\r\n                            parse(capt1)\r\n                        else\r\n                            local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)\r\n                            if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "table.insert(edges, { caller = key, callee = capt1 })",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "parse(capt1)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "table.insert(edges, { caller = key, callee = capt2 })",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "table.insert(edges, { caller = key, callee = capt3 })",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "parse(capt2)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "parse(capt3)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "for k in pairs(self[1]) do\r\n        parse(k)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "parse(k)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "template.nodes = nodes",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "template.edges = edges",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local dot = template 'TOP'",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function parse (key)\r\n        if not done[key] then\r\n            done[key] = true\r\n            local tmpl = self[key]\r\n            if type(tmpl) == 'string' then\r\n                table.insert(nodes, { name = key })\r\n                for capt in tmpl:gmatch \"(%$%b{})\" do\r\n                    local capt1, pos = capt:match(\"^%${([%a_][%w%._]*)()\", 1)\r\n                    if capt1 then\r\n                        if capt:match(\"^%(%)\", pos) then\r\n                            table.insert(edges, { caller = key, callee = capt1 })\r\n                            parse(capt1)\r\n                        else\r\n                            local capt2, capt3 = capt:match(\"^?([%a_][%w_]*)%(%)!([%a_][%w_]*)%(%)\", pos)\r\n                            if capt2 and capt3 then\r\n                                table.insert(edges, { caller = key, callee = capt2 })\r\n                                table.insert(edges, { caller = key, callee = capt3 })\r\n                                parse(capt2)\r\n                                parse(capt3)\r\n                            else\r\n                                local capt2 = capt:match(\"^[?/]([%a_][%w_]*)%(%)\", pos)\r\n                                if capt2 then\r\n                                    table.insert(edges, { caller = key, callee = capt2 })\r\n                                     parse(capt2)\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "",
    "type": "function container"
  }, {
    "id": 37,
    "text": "table",
    "type": "module"
  }, {
    "id": 38,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 39,
    "text": "CodeGen",
    "type": "global function"
  }, {
    "id": 40,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 41,
    "text": "template",
    "type": "global function"
  }, {
    "id": 42,
    "text": "require",
    "type": "global function"
  }, {
    "id": 43,
    "text": "type",
    "type": "global function"
  }, {
    "id": 44,
    "text": "",
    "type": "variable container"
  }, {
    "id": 45,
    "text": "",
    "type": "require container"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "global variable"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "interface container"
  }, {
    "id": 63,
    "text": "",
    "type": "interface"
  }, {
    "id": 64,
    "text": "",
    "type": "interface"
  }, {
    "id": 65,
    "text": "",
    "type": "interface"
  } ]
}