{
  "_filename": "iupxpplot.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/iup-examples/examples/Lua/misc/modules/iupxpplot.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 2,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 25
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 27
  }, {
    "from": 46,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 46,
    "label": "has",
    "to": 34
  }, {
    "from": 46,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 50,
    "label": "calls",
    "to": 57
  }, {
    "from": 50,
    "label": "calls",
    "to": 57
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 50,
    "label": "declares",
    "to": 2
  }, {
    "from": 50,
    "label": "declares",
    "to": 44
  }, {
    "from": 50,
    "label": "declares",
    "to": 46
  }, {
    "from": 50,
    "label": "declares",
    "to": 48
  }, {
    "from": 1,
    "label": "declares",
    "to": 51
  }, {
    "from": 58,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 59,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 60,
    "label": "initializes",
    "to": 58
  }, {
    "from": 60,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "requires",
    "to": 63
  }, {
    "from": 61,
    "label": "contains",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "iupxpplot",
    "type": "module"
  }, {
    "id": 2,
    "text": "function iupxpplot.pplot (tbl)\r\n\r\n\tif tbl.AXS_BOUNDS then\r\n\t\tlocal t = tbl.AXS_BOUNDS\r\n\t\ttbl.AXS_XMIN = t[1]\r\n\t\ttbl.AXS_YMIN = t[2]\r\n\t\ttbl.AXS_XMAX = t[3]\r\n\t\ttbl.AXS_YMAX = t[4]\r\n\tend\r\n\r\n    -- the defaults for these values are too small, at least on my system!\r\n    if not tbl.MARGINLEFT then tbl.MARGINLEFT = 30 end\r\n    if not tbl.MARGINBOTTOM then tbl.MARGINBOTTOM = 35 end\r\n\r\n    -- if we explicitly supply ranges, then auto must be switched off for that direction.\r\n    if tbl.AXS_YMIN then tbl.AXS_YAUTOMIN = \"NO\" end\r\n    if tbl.AXS_YMAX then tbl.AXS_YAUTOMAX = \"NO\" end\r\n    if tbl.AXS_XMIN then tbl.AXS_XAUTOMIN = \"NO\" end\r\n    if tbl.AXS_XMAX then tbl.AXS_XAUTOMAX = \"NO\" end\r\n\r\n    local plot = iup.pplot(tbl)\r\n    plot.End = iup.PPlotEnd\r\n    plot.Add = iup.PPlotAdd\r\n    function plot.Begin ()\r\n        return iup.PPlotBegin(plot,0)\r\n    end\r\n\r\n    function plot:AddSeries(xvalues,yvalues,options)\r\n        plot:Begin()\r\n        if type(xvalues[1]) == \"table\" then\r\n            options = yvalues\r\n            for i,v in ipairs(xvalues) do\r\n                plot:Add(v[1],v[2])\r\n            end\r\n        else\r\n            for i = 1,#xvalues do\r\n                plot:Add(xvalues[i],yvalues[i])\r\n            end\r\n        end\r\n        plot:End()\r\n        -- set any series-specific plot attributes\r\n        if options then\r\n            -- mode must be set before any other attributes!\r\n            if options.DS_MODE then\r\n                plot.DS_MODE = options.DS_MODE\r\n                options.DS_MODE = nil\r\n            end\r\n            for k,v in pairs(options) do\r\n                plot[k] = v\r\n            end\r\n        end\r\n    end\r\n    function plot:Redraw()\r\n        plot.REDRAW='YES'\r\n    end\r\n    return plot\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if tbl.AXS_BOUNDS then\r\n\t\tlocal t = tbl.AXS_BOUNDS\r\n\t\ttbl.AXS_XMIN = t[1]\r\n\t\ttbl.AXS_YMIN = t[2]\r\n\t\ttbl.AXS_XMAX = t[3]\r\n\t\ttbl.AXS_YMAX = t[4]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "local t = tbl.AXS_BOUNDS",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "tbl.AXS_XMIN = t[1]",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "tbl.AXS_YMIN = t[2]",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "tbl.AXS_XMAX = t[3]",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "tbl.AXS_YMAX = t[4]",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if not tbl.MARGINLEFT then tbl.MARGINLEFT = 30 end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "tbl.MARGINLEFT = 30",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if not tbl.MARGINBOTTOM then tbl.MARGINBOTTOM = 35 end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "tbl.MARGINBOTTOM = 35",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if tbl.AXS_YMIN then tbl.AXS_YAUTOMIN = \"NO\" end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "tbl.AXS_YAUTOMIN = \"NO\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if tbl.AXS_YMAX then tbl.AXS_YAUTOMAX = \"NO\" end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "tbl.AXS_YAUTOMAX = \"NO\"",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if tbl.AXS_XMIN then tbl.AXS_XAUTOMIN = \"NO\" end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "tbl.AXS_XAUTOMIN = \"NO\"",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "if tbl.AXS_XMAX then tbl.AXS_XAUTOMAX = \"NO\" end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "tbl.AXS_XAUTOMAX = \"NO\"",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local plot = iup.pplot(tbl)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "plot.End = iup.PPlotEnd",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "plot.Add = iup.PPlotAdd",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "function plot.Begin ()\r\n        return iup.PPlotBegin(plot,0)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 25,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 26,
    "text": "function plot:AddSeries(xvalues,yvalues,options)\r\n        plot:Begin()\r\n        if type(xvalues[1]) == \"table\" then\r\n            options = yvalues\r\n            for i,v in ipairs(xvalues) do\r\n                plot:Add(v[1],v[2])\r\n            end\r\n        else\r\n            for i = 1,#xvalues do\r\n                plot:Add(xvalues[i],yvalues[i])\r\n            end\r\n        end\r\n        plot:End()\r\n        -- set any series-specific plot attributes\r\n        if options then\r\n            -- mode must be set before any other attributes!\r\n            if options.DS_MODE then\r\n                plot.DS_MODE = options.DS_MODE\r\n                options.DS_MODE = nil\r\n            end\r\n            for k,v in pairs(options) do\r\n                plot[k] = v\r\n            end\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 27,
    "text": "plot:Begin()",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "if type(xvalues[1]) == \"table\" then\r\n            options = yvalues\r\n            for i,v in ipairs(xvalues) do\r\n                plot:Add(v[1],v[2])\r\n            end\r\n        else\r\n            for i = 1,#xvalues do\r\n                plot:Add(xvalues[i],yvalues[i])\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "options = yvalues",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "for i,v in ipairs(xvalues) do\r\n                plot:Add(v[1],v[2])\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "plot:Add(v[1],v[2])",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "for i = 1,#xvalues do\r\n                plot:Add(xvalues[i],yvalues[i])\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 33,
    "text": "plot:Add(xvalues[i],yvalues[i])",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "plot:End()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if options then\r\n            -- mode must be set before any other attributes!\r\n            if options.DS_MODE then\r\n                plot.DS_MODE = options.DS_MODE\r\n                options.DS_MODE = nil\r\n            end\r\n            for k,v in pairs(options) do\r\n                plot[k] = v\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if options.DS_MODE then\r\n                plot.DS_MODE = options.DS_MODE\r\n                options.DS_MODE = nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "plot.DS_MODE = options.DS_MODE",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "options.DS_MODE = nil",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "for k,v in pairs(options) do\r\n                plot[k] = v\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 40,
    "text": "plot[k] = v",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "function plot:Redraw()\r\n        plot.REDRAW='YES'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 42,
    "text": "plot.REDRAW='YES'",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function plot.Begin ()\r\n        return iup.PPlotBegin(plot,0)\r\n    end",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function plot:AddSeries(xvalues,yvalues,options)\r\n        plot:Begin()\r\n        if type(xvalues[1]) == \"table\" then\r\n            options = yvalues\r\n            for i,v in ipairs(xvalues) do\r\n                plot:Add(v[1],v[2])\r\n            end\r\n        else\r\n            for i = 1,#xvalues do\r\n                plot:Add(xvalues[i],yvalues[i])\r\n            end\r\n        end\r\n        plot:End()\r\n        -- set any series-specific plot attributes\r\n        if options then\r\n            -- mode must be set before any other attributes!\r\n            if options.DS_MODE then\r\n                plot.DS_MODE = options.DS_MODE\r\n                options.DS_MODE = nil\r\n            end\r\n            for k,v in pairs(options) do\r\n                plot[k] = v\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function plot:Redraw()\r\n        plot.REDRAW='YES'\r\n    end",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "",
    "type": "function container"
  }, {
    "id": 51,
    "text": "pplot",
    "type": "global function"
  }, {
    "id": 52,
    "text": "pplot",
    "type": "global function"
  }, {
    "id": 53,
    "text": "PPlotBegin",
    "type": "global function"
  }, {
    "id": 54,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 55,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 56,
    "text": "type",
    "type": "global function"
  }, {
    "id": 57,
    "text": "require",
    "type": "global function"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "variable container"
  }, {
    "id": 60,
    "text": "",
    "type": "require container"
  }, {
    "id": 61,
    "text": "",
    "type": "global variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "iuplua_pplot",
    "type": "module"
  } ]
}