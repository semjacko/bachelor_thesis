{
  "_filename": "soap.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasoap/soap.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 12
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 45,
    "label": "has",
    "to": 54
  }, {
    "from": 45,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 45,
    "label": "has",
    "to": 12
  }, {
    "from": 45,
    "label": "has",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 60
  }, {
    "from": 3,
    "label": "calls",
    "to": 60
  }, {
    "from": 58,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 20
  }, {
    "from": 37,
    "label": "calls",
    "to": 20
  }, {
    "from": 58,
    "label": "calls",
    "to": 61
  }, {
    "from": 45,
    "label": "calls",
    "to": 61
  }, {
    "from": 45,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "calls",
    "to": 62
  }, {
    "from": 26,
    "label": "calls",
    "to": 62
  }, {
    "from": 26,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 71
  }, {
    "from": 3,
    "label": "calls",
    "to": 64
  }, {
    "from": 14,
    "label": "calls",
    "to": 64
  }, {
    "from": 58,
    "label": "calls",
    "to": 14
  }, {
    "from": 3,
    "label": "calls",
    "to": 65
  }, {
    "from": 37,
    "label": "calls",
    "to": 65
  }, {
    "from": 37,
    "label": "calls",
    "to": 65
  }, {
    "from": 37,
    "label": "calls",
    "to": 30
  }, {
    "from": 37,
    "label": "calls",
    "to": 66
  }, {
    "from": 30,
    "label": "calls",
    "to": 67
  }, {
    "from": 3,
    "label": "calls",
    "to": 68
  }, {
    "from": 14,
    "label": "calls",
    "to": 68
  }, {
    "from": 45,
    "label": "calls",
    "to": 68
  }, {
    "from": 58,
    "label": "calls",
    "to": 3
  }, {
    "from": 58,
    "label": "calls",
    "to": 75
  }, {
    "from": 58,
    "label": "calls",
    "to": 70
  }, {
    "from": 45,
    "label": "calls",
    "to": 72
  }, {
    "from": 58,
    "label": "calls",
    "to": 73
  }, {
    "from": 3,
    "label": "calls",
    "to": 74
  }, {
    "from": 3,
    "label": "calls",
    "to": 74
  }, {
    "from": 30,
    "label": "calls",
    "to": 74
  }, {
    "from": 45,
    "label": "calls",
    "to": 69
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 58,
    "label": "declares",
    "to": 3
  }, {
    "from": 58,
    "label": "declares",
    "to": 14
  }, {
    "from": 58,
    "label": "declares",
    "to": 20
  }, {
    "from": 58,
    "label": "declares",
    "to": 26
  }, {
    "from": 58,
    "label": "declares",
    "to": 30
  }, {
    "from": 58,
    "label": "declares",
    "to": 37
  }, {
    "from": 58,
    "label": "declares",
    "to": 45
  }, {
    "from": 59,
    "label": "calls",
    "to": 37
  }, {
    "from": 76,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 77,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 77,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 77,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 77,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 77,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 77,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 77,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 77,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 77,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 77,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 77,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 77,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 77,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 77,
    "label": "initializes",
    "to": 105
  }, {
    "from": 77,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 77,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 111,
    "label": "assigns",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 111,
    "label": "assigns",
    "to": 116
  }, {
    "from": 77,
    "label": "initializes",
    "to": 117
  }, {
    "from": 77,
    "label": "initializes",
    "to": 118
  }, {
    "from": 77,
    "label": "initializes",
    "to": 119
  }, {
    "from": 77,
    "label": "initializes",
    "to": 120
  }, {
    "from": 77,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 78,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "soap",
    "type": "module"
  }, {
    "id": 2,
    "text": "function soap.http.call (url, namespace, method, entries, headers)\r\n\tlocal body, headers, code, err = post {\r\n\t\turl = url,\r\n\t\tbody = soap.encode (namespace, method, entries, headers),\r\n\t\theaders = {\r\n\t\t\t[\"Content-type\"] = \"text/xml\",\r\n\t\t\t[\"SOAPAction\"] = '\"'..method..'\"',\r\n\t\t},\r\n\t}\r\n\tif tonumber (code) == 200 then\r\n\t\treturn soap.decode (body)\r\n\telse\r\n\t\terror ((err or code)..\"\\n\\n\"..body)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function attrs (a)\r\n\tif not a then\r\n\t\treturn \"\" -- no attributes\r\n\telse\r\n\t\tlocal c = {}\r\n\t\tif a[1] then\r\n\t\t\tfor i, v in ipairs (a) do\r\n\t\t\t\ttinsert (c, format (\"%s=%q\", v, a[v]))\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tfor i, v in pairs (a) do\r\n\t\t\t\ttinsert (c, format (\"%s=%q\", i, v))\r\n\t\t\tend\r\n\t\tend\r\n\t\tif getn (c) > 0 then\r\n\t\t\treturn \" \"..tconcat (c, \" \")\r\n\t\telse\r\n\t\t\treturn \"\"\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if not a then\r\n\t\treturn \"\" -- no attributes\r\n\telse\r\n\t\tlocal c = {}\r\n\t\tif a[1] then\r\n\t\t\tfor i, v in ipairs (a) do\r\n\t\t\t\ttinsert (c, format (\"%s=%q\", v, a[v]))\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tfor i, v in pairs (a) do\r\n\t\t\t\ttinsert (c, format (\"%s=%q\", i, v))\r\n\t\t\tend\r\n\t\tend\r\n\t\tif getn (c) > 0 then\r\n\t\t\treturn \" \"..tconcat (c, \" \")\r\n\t\telse\r\n\t\t\treturn \"\"\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "local c = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if a[1] then\r\n\t\t\tfor i, v in ipairs (a) do\r\n\t\t\t\ttinsert (c, format (\"%s=%q\", v, a[v]))\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tfor i, v in pairs (a) do\r\n\t\t\t\ttinsert (c, format (\"%s=%q\", i, v))\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "for i, v in ipairs (a) do\r\n\t\t\t\ttinsert (c, format (\"%s=%q\", v, a[v]))\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "tinsert (c, format (\"%s=%q\", v, a[v]))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "for i, v in pairs (a) do\r\n\t\t\t\ttinsert (c, format (\"%s=%q\", i, v))\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "tinsert (c, format (\"%s=%q\", i, v))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "if getn (c) > 0 then\r\n\t\t\treturn \" \"..tconcat (c, \" \")\r\n\t\telse\r\n\t\t\treturn \"\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function contents (obj)\r\n\tif not obj[1] then\r\n\t\tcontents = \"\"\r\n\telse\r\n\t\tlocal c = {}\r\n\t\tfor i, v in ipairs (obj) do\r\n\t\t\tc[i] = serialize (v)\r\n\t\tend\r\n\t\treturn tconcat (c)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if not obj[1] then\r\n\t\tcontents = \"\"\r\n\telse\r\n\t\tlocal c = {}\r\n\t\tfor i, v in ipairs (obj) do\r\n\t\t\tc[i] = serialize (v)\r\n\t\tend\r\n\t\treturn tconcat (c)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "contents = \"\"",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "for i, v in ipairs (obj) do\r\n\t\t\tc[i] = serialize (v)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "c[i] = serialize (v)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function (obj)\r\n\tlocal tt = type(obj)\r\n\tif tt == \"string\" or tt == \"number\" then\r\n\t\treturn obj\r\n\telseif tt == \"table\" then\r\n\t\tlocal t = obj.tag\r\n\t\tassert (t, \"Invalid table format (no `tag' field)\")\r\n\t\treturn format (\"<%s%s>%s</%s>\", t, attrs(obj.attr), contents(obj), t)\r\n\telse\r\n\t\treturn \"\"\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local tt = type(obj)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if tt == \"string\" or tt == \"number\" then\r\n\t\treturn obj\r\n\telseif tt == \"table\" then\r\n\t\tlocal t = obj.tag\r\n\t\tassert (t, \"Invalid table format (no `tag' field)\")\r\n\t\treturn format (\"<%s%s>%s</%s>\", t, attrs(obj.attr), contents(obj), t)\r\n\telse\r\n\t\treturn \"\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local t = obj.tag",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "assert (t, \"Invalid table format (no `tag' field)\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function find_xmlns (attr)\r\n\tfor a, v in pairs (attr) do\r\n\t\tif strfind (a, \"xmlns\", 1, 1) then\r\n\t\t\treturn v\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "for a, v in pairs (attr) do\r\n\t\tif strfind (a, \"xmlns\", 1, 1) then\r\n\t\t\treturn v\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "if strfind (a, \"xmlns\", 1, 1) then\r\n\t\t\treturn v\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function insert_header (obj, header)\r\n\t-- removes old header\r\n\tif obj[2] then\r\n\t\ttremove (obj, 1)\r\n\tend\r\n\tif header then\r\n\t\theader_template[1] = header\r\n\t\ttinsert (obj, 1, header_template)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if obj[2] then\r\n\t\ttremove (obj, 1)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "tremove (obj, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if header then\r\n\t\theader_template[1] = header\r\n\t\ttinsert (obj, 1, header_template)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "header_template[1] = header",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "tinsert (obj, 1, header_template)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function encode (namespace, method, entries, header)\r\n\t-- Cleans old header and insert a new one (if it exists).\r\n\tinsert_header (envelope_template, header)\r\n\t-- Sets new body contents (and erase old content).\r\n\tlocal body = (envelope_template[2] and envelope_template[2][1]) or envelope_template[1][1]\r\n\tfor i = 1, max (getn(body), getn(entries)) do\r\n\t\tbody[i] = entries[i]\r\n\tend\r\n\t-- Sets method (actually, the table's tag) and namespace.\r\n\tbody.tag = (namespace and \"m:\" or \"\")..method\r\n\tbody.attr[\"xmlns:m\"] = namespace\r\n\treturn serialize (envelope_template)\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "insert_header (envelope_template, header)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local body = (envelope_template[2] and envelope_template[2][1]) or envelope_template[1][1]",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for i = 1, max (getn(body), getn(entries)) do\r\n\t\tbody[i] = entries[i]\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 41,
    "text": "body[i] = entries[i]",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "body.tag = (namespace and \"m:\" or \"\")..method",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "body.attr[\"xmlns:m\"] = namespace",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function decode (doc)\r\n\tlocal obj = assert (parse (doc))\r\n\tassert (obj.tag == \"SOAP-ENV:Envelope\", \"Not a SOAP Envelope: \"..\r\n\t\ttostring(obj.tag))\r\n\tlocal namespace = find_xmlns (obj.attr)\r\n\tif obj[1].tag == \"SOAP-ENV:Body\" then\r\n\t\tobj = obj[1]\r\n\telseif obj[2].tag == \"SOAP-ENV:Body\" then\r\n\t\tobj = obj[2]\r\n\telse\r\n\t\terror (\"Couldn't find SOAP Body!\")\r\n\tend\r\n\tlocal _, _, method = strfind (obj[1].tag, \"^.*:(.*)$\")\r\n\tlocal entries = {}\r\n\tfor i, el in ipairs (obj[1]) do\r\n\t\tentries[i] = el\r\n\tend\r\n\treturn namespace, method, entries\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local obj = assert (parse (doc))",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "assert (obj.tag == \"SOAP-ENV:Envelope\", \"Not a SOAP Envelope: \"..\r\n\t\ttostring(obj.tag))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local namespace = find_xmlns (obj.attr)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if obj[1].tag == \"SOAP-ENV:Body\" then\r\n\t\tobj = obj[1]\r\n\telseif obj[2].tag == \"SOAP-ENV:Body\" then\r\n\t\tobj = obj[2]\r\n\telse\r\n\t\terror (\"Couldn't find SOAP Body!\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "obj = obj[1]",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "obj = obj[2]",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "error (\"Couldn't find SOAP Body!\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local _, _, method = strfind (obj[1].tag, \"^.*:(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local entries = {}",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "for i, el in ipairs (obj[1]) do\r\n\t\tentries[i] = el\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "entries[i] = el",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "",
    "type": "function container"
  }, {
    "id": 59,
    "text": "",
    "type": "function container"
  }, {
    "id": 60,
    "text": "format",
    "type": "global function"
  }, {
    "id": 61,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 62,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 63,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 64,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 65,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 66,
    "text": "max",
    "type": "global function"
  }, {
    "id": 67,
    "text": "tremove",
    "type": "global function"
  }, {
    "id": 68,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 69,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 70,
    "text": "type",
    "type": "global function"
  }, {
    "id": 71,
    "text": "error",
    "type": "global function"
  }, {
    "id": 72,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 73,
    "text": "require",
    "type": "global function"
  }, {
    "id": 74,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 75,
    "text": "module",
    "type": "global function"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "variable container"
  }, {
    "id": 78,
    "text": "",
    "type": "require container"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 108,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 109,
    "text": "",
    "type": "string"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "string"
  }, {
    "id": 114,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 115,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 116,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "global variable"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "global variable"
  }, {
    "id": 122,
    "text": "",
    "type": "n/a"
  } ]
}