{
  "_filename": "mediator.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/mediator_lua/src/mediator.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 13,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 27
  }, {
    "from": 13,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 13,
    "label": "has",
    "to": 31
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 27
  }, {
    "from": 13,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 21
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 41
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 15
  }, {
    "from": 45,
    "label": "has",
    "to": 16
  }, {
    "from": 45,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 45,
    "label": "has",
    "to": 19
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 23
  }, {
    "from": 47,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 47,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 27
  }, {
    "from": 49,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 31
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 4
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 4
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 27
  }, {
    "from": 57,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 57,
    "label": "has",
    "to": 4
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 21
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 41
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 4
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 4
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 4
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 62
  }, {
    "from": 74,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 13,
    "label": "calls",
    "to": 6
  }, {
    "from": 13,
    "label": "calls",
    "to": 82
  }, {
    "from": 13,
    "label": "calls",
    "to": 82
  }, {
    "from": 13,
    "label": "calls",
    "to": 83
  }, {
    "from": 3,
    "label": "calls",
    "to": 79
  }, {
    "from": 13,
    "label": "calls",
    "to": 13
  }, {
    "from": 76,
    "label": "calls",
    "to": 13
  }, {
    "from": 13,
    "label": "calls",
    "to": 77
  }, {
    "from": 13,
    "label": "calls",
    "to": 77
  }, {
    "from": 13,
    "label": "calls",
    "to": 81
  }, {
    "from": 76,
    "label": "calls",
    "to": 84
  }, {
    "from": 6,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 78
  }, {
    "from": 13,
    "label": "calls",
    "to": 80
  }, {
    "from": 13,
    "label": "calls",
    "to": 80
  }, {
    "from": 13,
    "label": "calls",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 76,
    "label": "declares",
    "to": 3
  }, {
    "from": 76,
    "label": "declares",
    "to": 6
  }, {
    "from": 76,
    "label": "declares",
    "to": 13
  }, {
    "from": 76,
    "label": "declares",
    "to": 43
  }, {
    "from": 76,
    "label": "declares",
    "to": 45
  }, {
    "from": 76,
    "label": "declares",
    "to": 47
  }, {
    "from": 76,
    "label": "declares",
    "to": 49
  }, {
    "from": 76,
    "label": "declares",
    "to": 51
  }, {
    "from": 76,
    "label": "declares",
    "to": 53
  }, {
    "from": 76,
    "label": "declares",
    "to": 55
  }, {
    "from": 76,
    "label": "declares",
    "to": 57
  }, {
    "from": 76,
    "label": "declares",
    "to": 59
  }, {
    "from": 76,
    "label": "declares",
    "to": 61
  }, {
    "from": 76,
    "label": "declares",
    "to": 66
  }, {
    "from": 76,
    "label": "declares",
    "to": 68
  }, {
    "from": 76,
    "label": "declares",
    "to": 70
  }, {
    "from": 76,
    "label": "declares",
    "to": 72
  }, {
    "from": 76,
    "label": "declares",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 85
  }, {
    "from": 1,
    "label": "contains",
    "to": 86
  }, {
    "from": 85,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 1,
    "label": "provides",
    "to": 89
  }, {
    "from": 87,
    "label": "represents",
    "to": 90
  }, {
    "from": 89,
    "label": "provides",
    "to": 90
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mediator",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "local function getUniqueId(obj)\r\n  return tonumber(tostring(obj):match(':%s*[0xX]*(%x+)'), 16)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function Subscriber(fn, options)\r\n  local sub = {\r\n    options = options or {},\r\n    fn = fn,\r\n    channel = nil,\r\n    update = function(self, options)\r\n      if options then\r\n        self.fn = options.fn or self.fn\r\n        self.options = options.options or self.options\r\n      end\r\n    end\r\n  }\r\n  sub.id = getUniqueId(sub)\r\n  return sub\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local sub = {\r\n    options = options or {},\r\n    fn = fn,\r\n    channel = nil,\r\n    update = function(self, options)\r\n      if options then\r\n        self.fn = options.fn or self.fn\r\n        self.options = options.options or self.options\r\n      end\r\n    end\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if options then\r\n        self.fn = options.fn or self.fn\r\n        self.options = options.options or self.options\r\n      end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "self.fn = options.fn or self.fn",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "self.options = options.options or self.options",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "sub.id = getUniqueId(sub)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function Channel(namespace, parent)\r\n  return {\r\n    stopped = false,\r\n    namespace = namespace,\r\n    callbacks = {},\r\n    channels = {},\r\n    parent = parent,\r\n\r\n    addSubscriber = function(self, fn, options)\r\n      local callback = Subscriber(fn, options)\r\n      local priority = (#self.callbacks + 1)\r\n\r\n      options = options or {}\r\n\r\n      if options.priority and\r\n        options.priority >= 0 and\r\n        options.priority < priority\r\n      then\r\n          priority = options.priority\r\n      end\r\n\r\n      table.insert(self.callbacks, priority, callback)\r\n\r\n      return callback\r\n    end,\r\n\r\n    getSubscriber = function(self, id)\r\n      for i=1, #self.callbacks do\r\n        local callback = self.callbacks[i]\r\n        if callback.id == id then return { index = i, value = callback } end\r\n      end\r\n      local sub\r\n      for _, channel in pairs(self.channels) do\r\n        sub = channel:getSubscriber(id)\r\n        if sub then break end\r\n      end\r\n      return sub\r\n    end,\r\n\r\n    setPriority = function(self, id, priority)\r\n      local callback = self:getSubscriber(id)\r\n\r\n      if callback.value then\r\n        table.remove(self.callbacks, callback.index)\r\n        table.insert(self.callbacks, priority, callback.value)\r\n      end\r\n    end,\r\n\r\n    addChannel = function(self, namespace)\r\n      self.channels[namespace] = Channel(namespace, self)\r\n      return self.channels[namespace]\r\n    end,\r\n\r\n    hasChannel = function(self, namespace)\r\n      return namespace and self.channels[namespace] and true\r\n    end,\r\n\r\n    getChannel = function(self, namespace)\r\n      return self.channels[namespace] or self:addChannel(namespace)\r\n    end,\r\n\r\n    removeSubscriber = function(self, id)\r\n      local callback = self:getSubscriber(id)\r\n\r\n      if callback and callback.value then\r\n        for _, channel in pairs(self.channels) do\r\n          channel:removeSubscriber(id)\r\n        end\r\n\r\n        return table.remove(self.callbacks, callback.index)\r\n      end\r\n    end,\r\n\r\n    publish = function(self, result, ...)\r\n      for i = 1, #self.callbacks do\r\n        local callback = self.callbacks[i]\r\n\r\n        -- if it doesn't have a predicate, or it does and it's true then run it\r\n        if not callback.options.predicate or callback.options.predicate(...) then\r\n           -- just take the first result and insert it into the result table\r\n          local value, continue = callback.fn(...)\r\n\r\n          if value then table.insert(result, value) end\r\n          if not continue then return result end\r\n        end\r\n      end\r\n\r\n      if parent then\r\n        return parent:publish(result, ...)\r\n      else\r\n        return result\r\n      end\r\n    end\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local callback = Subscriber(fn, options)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local priority = (#self.callbacks + 1)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "options = options or {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if options.priority and\r\n        options.priority >= 0 and\r\n        options.priority < priority\r\n      then\r\n          priority = options.priority\r\n      end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "priority = options.priority",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "table.insert(self.callbacks, priority, callback)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "for i=1, #self.callbacks do\r\n        local callback = self.callbacks[i]\r\n        if callback.id == id then return { index = i, value = callback } end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 21,
    "text": "local callback = self.callbacks[i]",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if callback.id == id then return { index = i, value = callback } end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local sub",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for _, channel in pairs(self.channels) do\r\n        sub = channel:getSubscriber(id)\r\n        if sub then break end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "sub = channel:getSubscriber(id)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if sub then break end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local callback = self:getSubscriber(id)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if callback.value then\r\n        table.remove(self.callbacks, callback.index)\r\n        table.insert(self.callbacks, priority, callback.value)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "table.remove(self.callbacks, callback.index)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "table.insert(self.callbacks, priority, callback.value)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "self.channels[namespace] = Channel(namespace, self)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if callback and callback.value then\r\n        for _, channel in pairs(self.channels) do\r\n          channel:removeSubscriber(id)\r\n        end\r\n\r\n        return table.remove(self.callbacks, callback.index)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "for _, channel in pairs(self.channels) do\r\n          channel:removeSubscriber(id)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "channel:removeSubscriber(id)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "for i = 1, #self.callbacks do\r\n        local callback = self.callbacks[i]\r\n\r\n        -- if it doesn't have a predicate, or it does and it's true then run it\r\n        if not callback.options.predicate or callback.options.predicate(...) then\r\n           -- just take the first result and insert it into the result table\r\n          local value, continue = callback.fn(...)\r\n\r\n          if value then table.insert(result, value) end\r\n          if not continue then return result end\r\n        end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 36,
    "text": "if not callback.options.predicate or callback.options.predicate(...) then\r\n           -- just take the first result and insert it into the result table\r\n          local value, continue = callback.fn(...)\r\n\r\n          if value then table.insert(result, value) end\r\n          if not continue then return result end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local value, continue = callback.fn(...)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if value then table.insert(result, value) end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "table.insert(result, value)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "if not continue then return result end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "if parent then\r\n        return parent:publish(result, ...)\r\n      else\r\n        return result\r\n      end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function(self, options)\r\n      if options then\r\n        self.fn = options.fn or self.fn\r\n        self.options = options.options or self.options\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function(self, fn, options)\r\n      local callback = Subscriber(fn, options)\r\n      local priority = (#self.callbacks + 1)\r\n\r\n      options = options or {}\r\n\r\n      if options.priority and\r\n        options.priority >= 0 and\r\n        options.priority < priority\r\n      then\r\n          priority = options.priority\r\n      end\r\n\r\n      table.insert(self.callbacks, priority, callback)\r\n\r\n      return callback\r\n    end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function(self, id)\r\n      for i=1, #self.callbacks do\r\n        local callback = self.callbacks[i]\r\n        if callback.id == id then return { index = i, value = callback } end\r\n      end\r\n      local sub\r\n      for _, channel in pairs(self.channels) do\r\n        sub = channel:getSubscriber(id)\r\n        if sub then break end\r\n      end\r\n      return sub\r\n    end",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function(self, id, priority)\r\n      local callback = self:getSubscriber(id)\r\n\r\n      if callback.value then\r\n        table.remove(self.callbacks, callback.index)\r\n        table.insert(self.callbacks, priority, callback.value)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function(self, namespace)\r\n      self.channels[namespace] = Channel(namespace, self)\r\n      return self.channels[namespace]\r\n    end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function(self, namespace)\r\n      return namespace and self.channels[namespace] and true\r\n    end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function(self, namespace)\r\n      return self.channels[namespace] or self:addChannel(namespace)\r\n    end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function(self, id)\r\n      local callback = self:getSubscriber(id)\r\n\r\n      if callback and callback.value then\r\n        for _, channel in pairs(self.channels) do\r\n          channel:removeSubscriber(id)\r\n        end\r\n\r\n        return table.remove(self.callbacks, callback.index)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function(self, result, ...)\r\n      for i = 1, #self.callbacks do\r\n        local callback = self.callbacks[i]\r\n\r\n        -- if it doesn't have a predicate, or it does and it's true then run it\r\n        if not callback.options.predicate or callback.options.predicate(...) then\r\n           -- just take the first result and insert it into the result table\r\n          local value, continue = callback.fn(...)\r\n\r\n          if value then table.insert(result, value) end\r\n          if not continue then return result end\r\n        end\r\n      end\r\n\r\n      if parent then\r\n        return parent:publish(result, ...)\r\n      else\r\n        return result\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function(self, channelNamespace)\r\n        local channel = self.channel\r\n\r\n        for i=1, #channelNamespace do\r\n          channel = channel:getChannel(channelNamespace[i])\r\n        end\r\n\r\n        return channel\r\n      end",
    "type": "function"
  }, {
    "id": 62,
    "text": "local channel = self.channel",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "for i=1, #channelNamespace do\r\n          channel = channel:getChannel(channelNamespace[i])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 64,
    "text": "channel = channel:getChannel(channelNamespace[i])",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function(self, channelNamespace, fn, options)\r\n        return self:getChannel(channelNamespace):addSubscriber(fn, options)\r\n      end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function(self, id, channelNamespace)\r\n        return self:getChannel(channelNamespace):getSubscriber(id)\r\n      end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function(self, id, channelNamespace)\r\n        return self:getChannel(channelNamespace):removeSubscriber(id)\r\n      end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function(self, channelNamespace, ...)\r\n        return self:getChannel(channelNamespace):publish({}, ...)\r\n      end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function (fn, options)\r\n    return {\r\n      channel = Channel('root'),\r\n\r\n      getChannel = function(self, channelNamespace)\r\n        local channel = self.channel\r\n\r\n        for i=1, #channelNamespace do\r\n          channel = channel:getChannel(channelNamespace[i])\r\n        end\r\n\r\n        return channel\r\n      end,\r\n\r\n      subscribe = function(self, channelNamespace, fn, options)\r\n        return self:getChannel(channelNamespace):addSubscriber(fn, options)\r\n      end,\r\n\r\n      getSubscriber = function(self, id, channelNamespace)\r\n        return self:getChannel(channelNamespace):getSubscriber(id)\r\n      end,\r\n\r\n      removeSubscriber = function(self, id, channelNamespace)\r\n        return self:getChannel(channelNamespace):removeSubscriber(id)\r\n      end,\r\n\r\n      publish = function(self, channelNamespace, ...)\r\n        return self:getChannel(channelNamespace):publish({}, ...)\r\n      end\r\n    }\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "",
    "type": "function container"
  }, {
    "id": 77,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 78,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 79,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 80,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 81,
    "text": "callback.options.predicate",
    "type": "global function"
  }, {
    "id": 82,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 83,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 84,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 85,
    "text": "",
    "type": "variable container"
  }, {
    "id": 86,
    "text": "",
    "type": "require container"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "interface container"
  }, {
    "id": 90,
    "text": "",
    "type": "interface"
  } ]
}