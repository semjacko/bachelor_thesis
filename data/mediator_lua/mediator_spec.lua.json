{
  "_filename": "mediator_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/mediator_lua/spec/mediator_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 6
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 27
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 30
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 27
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 53
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 53
  }, {
    "from": 62,
    "label": "has",
    "to": 58
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 53
  }, {
    "from": 66,
    "label": "has",
    "to": 58
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 53
  }, {
    "from": 70,
    "label": "has",
    "to": 58
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 53
  }, {
    "from": 74,
    "label": "has",
    "to": 58
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 79
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 79
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 53
  }, {
    "from": 88,
    "label": "has",
    "to": 58
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 79
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 67
  }, {
    "from": 92,
    "label": "has",
    "to": 68
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 79
  }, {
    "from": 95,
    "label": "has",
    "to": 93
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 99,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 101
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 9
  }, {
    "from": 117,
    "label": "has",
    "to": 103
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 14
  }, {
    "from": 123,
    "label": "has",
    "to": 103
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 123,
    "label": "has",
    "to": 104
  }, {
    "from": 123,
    "label": "has",
    "to": 129
  }, {
    "from": 123,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 100
  }, {
    "from": 131,
    "label": "has",
    "to": 101
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 6
  }, {
    "from": 131,
    "label": "has",
    "to": 79
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 131,
    "label": "has",
    "to": 105
  }, {
    "from": 131,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 6
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 147,
    "label": "has",
    "to": 155
  }, {
    "from": 147,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 6
  }, {
    "from": 157,
    "label": "has",
    "to": 142
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 160,
    "label": "has",
    "to": 142
  }, {
    "from": 160,
    "label": "has",
    "to": 158
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 164,
    "label": "has",
    "to": 142
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 164,
    "label": "has",
    "to": 167
  }, {
    "from": 164,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 165
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 6
  }, {
    "from": 171,
    "label": "has",
    "to": 27
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 30
  }, {
    "from": 172,
    "label": "has",
    "to": 27
  }, {
    "from": 169,
    "label": "has",
    "to": 79
  }, {
    "from": 169,
    "label": "has",
    "to": 173
  }, {
    "from": 169,
    "label": "has",
    "to": 174
  }, {
    "from": 169,
    "label": "has",
    "to": 175
  }, {
    "from": 169,
    "label": "has",
    "to": 176
  }, {
    "from": 169,
    "label": "has",
    "to": 177
  }, {
    "from": 169,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 165
  }, {
    "from": 179,
    "label": "has",
    "to": 170
  }, {
    "from": 179,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 30
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 27
  }, {
    "from": 179,
    "label": "has",
    "to": 79
  }, {
    "from": 179,
    "label": "has",
    "to": 182
  }, {
    "from": 179,
    "label": "has",
    "to": 183
  }, {
    "from": 179,
    "label": "has",
    "to": 184
  }, {
    "from": 179,
    "label": "has",
    "to": 176
  }, {
    "from": 179,
    "label": "has",
    "to": 185
  }, {
    "from": 179,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 39
  }, {
    "from": 190,
    "label": "has",
    "to": 40
  }, {
    "from": 190,
    "label": "has",
    "to": 41
  }, {
    "from": 190,
    "label": "has",
    "to": 42
  }, {
    "from": 190,
    "label": "has",
    "to": 43
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 46
  }, {
    "from": 191,
    "label": "has",
    "to": 47
  }, {
    "from": 191,
    "label": "has",
    "to": 48
  }, {
    "from": 191,
    "label": "has",
    "to": 49
  }, {
    "from": 191,
    "label": "has",
    "to": 50
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 53
  }, {
    "from": 192,
    "label": "has",
    "to": 54
  }, {
    "from": 192,
    "label": "has",
    "to": 55
  }, {
    "from": 187,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 53
  }, {
    "from": 193,
    "label": "has",
    "to": 58
  }, {
    "from": 193,
    "label": "has",
    "to": 59
  }, {
    "from": 193,
    "label": "has",
    "to": 60
  }, {
    "from": 187,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 53
  }, {
    "from": 194,
    "label": "has",
    "to": 58
  }, {
    "from": 194,
    "label": "has",
    "to": 63
  }, {
    "from": 194,
    "label": "has",
    "to": 64
  }, {
    "from": 187,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 53
  }, {
    "from": 195,
    "label": "has",
    "to": 58
  }, {
    "from": 195,
    "label": "has",
    "to": 67
  }, {
    "from": 195,
    "label": "has",
    "to": 68
  }, {
    "from": 187,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 53
  }, {
    "from": 196,
    "label": "has",
    "to": 58
  }, {
    "from": 196,
    "label": "has",
    "to": 71
  }, {
    "from": 196,
    "label": "has",
    "to": 72
  }, {
    "from": 187,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 53
  }, {
    "from": 197,
    "label": "has",
    "to": 58
  }, {
    "from": 197,
    "label": "has",
    "to": 75
  }, {
    "from": 197,
    "label": "has",
    "to": 76
  }, {
    "from": 187,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 79
  }, {
    "from": 198,
    "label": "has",
    "to": 80
  }, {
    "from": 187,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 79
  }, {
    "from": 199,
    "label": "has",
    "to": 83
  }, {
    "from": 187,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 79
  }, {
    "from": 200,
    "label": "has",
    "to": 86
  }, {
    "from": 187,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 53
  }, {
    "from": 201,
    "label": "has",
    "to": 58
  }, {
    "from": 201,
    "label": "has",
    "to": 89
  }, {
    "from": 201,
    "label": "has",
    "to": 90
  }, {
    "from": 187,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 79
  }, {
    "from": 202,
    "label": "has",
    "to": 93
  }, {
    "from": 202,
    "label": "has",
    "to": 67
  }, {
    "from": 202,
    "label": "has",
    "to": 68
  }, {
    "from": 187,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 79
  }, {
    "from": 203,
    "label": "has",
    "to": 93
  }, {
    "from": 203,
    "label": "has",
    "to": 96
  }, {
    "from": 203,
    "label": "has",
    "to": 97
  }, {
    "from": 187,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 100
  }, {
    "from": 204,
    "label": "has",
    "to": 101
  }, {
    "from": 204,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 204,
    "label": "has",
    "to": 103
  }, {
    "from": 204,
    "label": "has",
    "to": 104
  }, {
    "from": 204,
    "label": "has",
    "to": 105
  }, {
    "from": 187,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 108
  }, {
    "from": 187,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 113
  }, {
    "from": 187,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 101
  }, {
    "from": 207,
    "label": "has",
    "to": 118
  }, {
    "from": 207,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 9
  }, {
    "from": 207,
    "label": "has",
    "to": 103
  }, {
    "from": 207,
    "label": "has",
    "to": 120
  }, {
    "from": 207,
    "label": "has",
    "to": 121
  }, {
    "from": 187,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 124
  }, {
    "from": 208,
    "label": "has",
    "to": 125
  }, {
    "from": 208,
    "label": "has",
    "to": 126
  }, {
    "from": 208,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 208,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 14
  }, {
    "from": 208,
    "label": "has",
    "to": 103
  }, {
    "from": 208,
    "label": "has",
    "to": 128
  }, {
    "from": 208,
    "label": "has",
    "to": 104
  }, {
    "from": 208,
    "label": "has",
    "to": 129
  }, {
    "from": 187,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 100
  }, {
    "from": 209,
    "label": "has",
    "to": 101
  }, {
    "from": 209,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 6
  }, {
    "from": 209,
    "label": "has",
    "to": 79
  }, {
    "from": 209,
    "label": "has",
    "to": 133
  }, {
    "from": 209,
    "label": "has",
    "to": 134
  }, {
    "from": 209,
    "label": "has",
    "to": 105
  }, {
    "from": 187,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 137
  }, {
    "from": 210,
    "label": "has",
    "to": 138
  }, {
    "from": 187,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 6
  }, {
    "from": 211,
    "label": "has",
    "to": 142
  }, {
    "from": 211,
    "label": "has",
    "to": 143
  }, {
    "from": 187,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 148
  }, {
    "from": 212,
    "label": "has",
    "to": 149
  }, {
    "from": 212,
    "label": "has",
    "to": 150
  }, {
    "from": 212,
    "label": "has",
    "to": 151
  }, {
    "from": 212,
    "label": "has",
    "to": 152
  }, {
    "from": 212,
    "label": "has",
    "to": 153
  }, {
    "from": 212,
    "label": "has",
    "to": 154
  }, {
    "from": 212,
    "label": "has",
    "to": 155
  }, {
    "from": 187,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 6
  }, {
    "from": 213,
    "label": "has",
    "to": 142
  }, {
    "from": 213,
    "label": "has",
    "to": 158
  }, {
    "from": 187,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 214,
    "label": "has",
    "to": 142
  }, {
    "from": 214,
    "label": "has",
    "to": 158
  }, {
    "from": 214,
    "label": "has",
    "to": 161
  }, {
    "from": 214,
    "label": "has",
    "to": 162
  }, {
    "from": 187,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 165
  }, {
    "from": 215,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 215,
    "label": "has",
    "to": 142
  }, {
    "from": 215,
    "label": "has",
    "to": 166
  }, {
    "from": 215,
    "label": "has",
    "to": 167
  }, {
    "from": 187,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 165
  }, {
    "from": 216,
    "label": "has",
    "to": 170
  }, {
    "from": 216,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 6
  }, {
    "from": 171,
    "label": "has",
    "to": 27
  }, {
    "from": 216,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 30
  }, {
    "from": 172,
    "label": "has",
    "to": 27
  }, {
    "from": 216,
    "label": "has",
    "to": 79
  }, {
    "from": 216,
    "label": "has",
    "to": 173
  }, {
    "from": 216,
    "label": "has",
    "to": 174
  }, {
    "from": 216,
    "label": "has",
    "to": 175
  }, {
    "from": 216,
    "label": "has",
    "to": 176
  }, {
    "from": 216,
    "label": "has",
    "to": 177
  }, {
    "from": 187,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 165
  }, {
    "from": 217,
    "label": "has",
    "to": 170
  }, {
    "from": 217,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 6
  }, {
    "from": 217,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 30
  }, {
    "from": 217,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 27
  }, {
    "from": 217,
    "label": "has",
    "to": 79
  }, {
    "from": 217,
    "label": "has",
    "to": 182
  }, {
    "from": 217,
    "label": "has",
    "to": 183
  }, {
    "from": 217,
    "label": "has",
    "to": 184
  }, {
    "from": 217,
    "label": "has",
    "to": 176
  }, {
    "from": 217,
    "label": "has",
    "to": 185
  }, {
    "from": 187,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "calls",
    "to": 224
  }, {
    "from": 219,
    "label": "calls",
    "to": 224
  }, {
    "from": 219,
    "label": "calls",
    "to": 221
  }, {
    "from": 219,
    "label": "calls",
    "to": 221
  }, {
    "from": 219,
    "label": "calls",
    "to": 226
  }, {
    "from": 219,
    "label": "calls",
    "to": 226
  }, {
    "from": 219,
    "label": "calls",
    "to": 225
  }, {
    "from": 219,
    "label": "calls",
    "to": 225
  }, {
    "from": 219,
    "label": "calls",
    "to": 225
  }, {
    "from": 219,
    "label": "calls",
    "to": 234
  }, {
    "from": 219,
    "label": "calls",
    "to": 234
  }, {
    "from": 219,
    "label": "calls",
    "to": 230
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 227
  }, {
    "from": 219,
    "label": "calls",
    "to": 228
  }, {
    "from": 219,
    "label": "calls",
    "to": 228
  }, {
    "from": 219,
    "label": "calls",
    "to": 228
  }, {
    "from": 219,
    "label": "calls",
    "to": 228
  }, {
    "from": 219,
    "label": "calls",
    "to": 228
  }, {
    "from": 219,
    "label": "calls",
    "to": 222
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 229
  }, {
    "from": 219,
    "label": "calls",
    "to": 220
  }, {
    "from": 219,
    "label": "calls",
    "to": 231
  }, {
    "from": 219,
    "label": "calls",
    "to": 232
  }, {
    "from": 219,
    "label": "calls",
    "to": 233
  }, {
    "from": 219,
    "label": "calls",
    "to": 223
  }, {
    "from": 219,
    "label": "calls",
    "to": 223
  }, {
    "from": 1,
    "label": "contains",
    "to": 219
  }, {
    "from": 219,
    "label": "declares",
    "to": 2
  }, {
    "from": 219,
    "label": "declares",
    "to": 3
  }, {
    "from": 219,
    "label": "declares",
    "to": 4
  }, {
    "from": 219,
    "label": "declares",
    "to": 5
  }, {
    "from": 219,
    "label": "declares",
    "to": 8
  }, {
    "from": 219,
    "label": "declares",
    "to": 11
  }, {
    "from": 219,
    "label": "declares",
    "to": 13
  }, {
    "from": 219,
    "label": "declares",
    "to": 16
  }, {
    "from": 219,
    "label": "declares",
    "to": 18
  }, {
    "from": 219,
    "label": "declares",
    "to": 20
  }, {
    "from": 219,
    "label": "declares",
    "to": 22
  }, {
    "from": 219,
    "label": "declares",
    "to": 24
  }, {
    "from": 219,
    "label": "declares",
    "to": 26
  }, {
    "from": 219,
    "label": "declares",
    "to": 29
  }, {
    "from": 219,
    "label": "declares",
    "to": 32
  }, {
    "from": 219,
    "label": "declares",
    "to": 34
  }, {
    "from": 219,
    "label": "declares",
    "to": 36
  }, {
    "from": 219,
    "label": "declares",
    "to": 38
  }, {
    "from": 219,
    "label": "declares",
    "to": 45
  }, {
    "from": 219,
    "label": "declares",
    "to": 52
  }, {
    "from": 219,
    "label": "declares",
    "to": 57
  }, {
    "from": 219,
    "label": "declares",
    "to": 62
  }, {
    "from": 219,
    "label": "declares",
    "to": 66
  }, {
    "from": 219,
    "label": "declares",
    "to": 70
  }, {
    "from": 219,
    "label": "declares",
    "to": 74
  }, {
    "from": 219,
    "label": "declares",
    "to": 78
  }, {
    "from": 219,
    "label": "declares",
    "to": 82
  }, {
    "from": 219,
    "label": "declares",
    "to": 85
  }, {
    "from": 219,
    "label": "declares",
    "to": 88
  }, {
    "from": 219,
    "label": "declares",
    "to": 92
  }, {
    "from": 219,
    "label": "declares",
    "to": 95
  }, {
    "from": 219,
    "label": "declares",
    "to": 99
  }, {
    "from": 219,
    "label": "declares",
    "to": 107
  }, {
    "from": 219,
    "label": "declares",
    "to": 109
  }, {
    "from": 219,
    "label": "declares",
    "to": 112
  }, {
    "from": 219,
    "label": "declares",
    "to": 114
  }, {
    "from": 219,
    "label": "declares",
    "to": 117
  }, {
    "from": 219,
    "label": "declares",
    "to": 123
  }, {
    "from": 219,
    "label": "declares",
    "to": 131
  }, {
    "from": 219,
    "label": "declares",
    "to": 136
  }, {
    "from": 219,
    "label": "declares",
    "to": 140
  }, {
    "from": 219,
    "label": "declares",
    "to": 145
  }, {
    "from": 219,
    "label": "declares",
    "to": 146
  }, {
    "from": 219,
    "label": "declares",
    "to": 147
  }, {
    "from": 219,
    "label": "declares",
    "to": 157
  }, {
    "from": 219,
    "label": "declares",
    "to": 160
  }, {
    "from": 219,
    "label": "declares",
    "to": 164
  }, {
    "from": 219,
    "label": "declares",
    "to": 169
  }, {
    "from": 219,
    "label": "declares",
    "to": 179
  }, {
    "from": 219,
    "label": "declares",
    "to": 187
  }, {
    "from": 1,
    "label": "contains",
    "to": 235
  }, {
    "from": 1,
    "label": "contains",
    "to": 236
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 191,
    "label": "hasArgument",
    "to": 45
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 193,
    "label": "hasArgument",
    "to": 57
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 203,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 109
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 131
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 136
  }, {
    "from": 211,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 211,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 211,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 147
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 214,
    "label": "hasArgument",
    "to": 160
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 164
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 169
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 179
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mediator_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 4,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function(data)\r\n      olddata = data\r\n    end",
    "type": "function"
  }, {
    "id": 6,
    "text": "olddata = data",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function(data, wat, seven)\r\n      arguments = { data, wat, seven }\r\n    end",
    "type": "function"
  }, {
    "id": 9,
    "text": "arguments = { data, wat, seven }",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function(data)\r\n      olddata = data\r\n    end",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function(data)\r\n      olddata = data2\r\n    end",
    "type": "function"
  }, {
    "id": 14,
    "text": "olddata = data2",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function(...)\r\n      olddata = data\r\n    end",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function(data, channel)\r\n      olddata = data\r\n    end",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function(data, channel)\r\n      olddata = data\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(data)\r\n      olddata = data\r\n    end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(data)\r\n      olddata = data\r\n    end",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function(data)\r\n      olddata = data\r\n      return nil, true\r\n    end",
    "type": "function"
  }, {
    "id": 27,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function(data)\r\n      olddata2 = data\r\n      return nil, true\r\n    end",
    "type": "function"
  }, {
    "id": 30,
    "text": "olddata2 = data",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(data)\r\n      olddata = data\r\n    end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function(data)\r\n      olddata2 = data\r\n    end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function()\r\n      return false\r\n    end",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n    m = Mediator()\r\n    c = Mediator.Channel(\"test\")\r\n    testfn = function() end\r\n    testfn2 = function() end\r\n    testfn3 = function() end\r\n  end",
    "type": "function"
  }, {
    "id": 39,
    "text": "m = Mediator()",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "c = Mediator.Channel(\"test\")",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "testfn = function() end",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "testfn2 = function() end",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "testfn3 = function() end",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function()\r\n    m = nil\r\n    c = nil\r\n    testfn = nil\r\n    testfn2 = nil\r\n    testfn3 = nil\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "m = nil",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "c = nil",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "testfn = nil",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "testfn2 = nil",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "testfn3 = nil",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n\r\n    assert.are.equal(#c.callbacks, 1)\r\n    assert.are.equal(c.callbacks[1].fn, testfn)\r\n  end",
    "type": "function"
  }, {
    "id": 53,
    "text": "local sub1 = c:addSubscriber(testfn)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "assert.are.equal(#c.callbacks, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert.are.equal(c.callbacks[1].fn, testfn)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    assert.are.equal(#c.callbacks, 2)\r\n    assert.are.equal(c.callbacks[2].fn, sub2.fn)\r\n  end",
    "type": "function"
  }, {
    "id": 58,
    "text": "local sub2 = c:addSubscriber(testfn2)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "assert.are.equal(#c.callbacks, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.are.equal(c.callbacks[2].fn, sub2.fn)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n    local sub3 = c:addSubscriber(testfn3, { priority = 1 })\r\n\r\n    assert.are.equal(c.callbacks[1].fn, sub3.fn)\r\n  end",
    "type": "function"
  }, {
    "id": 63,
    "text": "local sub3 = c:addSubscriber(testfn3, { priority = 1 })",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "assert.are.equal(c.callbacks[1].fn, sub3.fn)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    gotten = c:getSubscriber(sub1.id)\r\n\r\n    assert.are.equal(gotten.value, sub1)\r\n  end",
    "type": "function"
  }, {
    "id": 67,
    "text": "gotten = c:getSubscriber(sub1.id)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "assert.are.equal(gotten.value, sub1)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:setPriority(sub2.id, 1)\r\n\r\n    assert.are.equal(c.callbacks[1], sub2)\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "c:setPriority(sub2.id, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert.are.equal(c.callbacks[1], sub2)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:setPriority(sub1.id, 2)\r\n\r\n    assert.are.equal(c.callbacks[2], sub1)\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "c:setPriority(sub1.id, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert.are.equal(c.callbacks[2], sub1)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function()\r\n    c:addChannel(\"level2\")\r\n    assert.are_not.equal(c.channels[\"level2\"], nil)\r\n  end",
    "type": "function"
  }, {
    "id": 79,
    "text": "c:addChannel(\"level2\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert.are_not.equal(c.channels[\"level2\"], nil)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function()\r\n    c:addChannel(\"level2\")\r\n    assert.is.truthy(c:hasChannel(\"level2\"), true)\r\n  end",
    "type": "function"
  }, {
    "id": 83,
    "text": "assert.is.truthy(c:hasChannel(\"level2\"), true)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n    c:addChannel(\"level2\")\r\n    assert.is_not.equal(c:getChannel(\"level2\"), nil)\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "assert.is_not.equal(c:getChannel(\"level2\"), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:removeSubscriber(sub2.id)\r\n\r\n    assert.is.equal(c:getSubscriber(sub2.id), nil)\r\n  end",
    "type": "function"
  }, {
    "id": 89,
    "text": "c:removeSubscriber(sub2.id)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert.is.equal(c:getSubscriber(sub2.id), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(testfn)\r\n\r\n    gotten = c:getSubscriber(sub1.id)\r\n\r\n    assert.are.equal(gotten.value, sub1)\r\n  end",
    "type": "function"
  }, {
    "id": 93,
    "text": "local sub1 = c.channels[\"level2\"]:addSubscriber(testfn)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function()\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(testfn)\r\n\r\n    c:removeSubscriber(sub1.id)\r\n\r\n    assert.is.equal(c.channels[\"level2\"]:getSubscriber(sub1.id), nil)\r\n  end",
    "type": "function"
  }, {
    "id": 96,
    "text": "c:removeSubscriber(sub1.id)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert.is.equal(c.channels[\"level2\"]:getSubscriber(sub1.id), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function()\r\n    local olddata = { test = false }\r\n    local data = { test = true }\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    c:publish({}, data)\r\n\r\n    assert.is.truthy(olddata.test)\r\n  end",
    "type": "function"
  }, {
    "id": 100,
    "text": "local olddata = { test = false }",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local data = { test = true }",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local assertFn = function(data)\r\n      olddata = data\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local sub1 = c:addSubscriber(assertFn)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "c:publish({}, data)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "assert.is.truthy(olddata.test)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function() m:publish({ \"nope\" }, data) end",
    "type": "function"
  }, {
    "id": 108,
    "text": "m:publish({ \"nope\" }, data)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "function()\r\n    assert.is_not.error(function() m:publish({ \"nope\" }, data) end)\r\n  end",
    "type": "function"
  }, {
    "id": 110,
    "text": "assert.is_not.error(function() m:publish({ \"nope\" }, data) end)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function() m:publish({ \"nope\", \"wat\" }, data) end",
    "type": "function"
  }, {
    "id": 113,
    "text": "m:publish({ \"nope\", \"wat\" }, data)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "function()\r\n    assert.is_not.error(function() m:publish({ \"nope\", \"wat\" }, data) end)\r\n  end",
    "type": "function"
  }, {
    "id": 115,
    "text": "assert.is_not.error(function() m:publish({ \"nope\", \"wat\" }, data) end)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function()\r\n    local data = { test = true }\r\n    local arguments\r\n\r\n    local assertFn = function(data, wat, seven)\r\n      arguments = { data, wat, seven }\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    c:publish({}, \"test\", data, \"wat\", \"seven\")\r\n\r\n    assert.are.equal(#arguments, 3)\r\n  end",
    "type": "function"
  }, {
    "id": 118,
    "text": "local arguments",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "local assertFn = function(data, wat, seven)\r\n      arguments = { data, wat, seven }\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "c:publish({}, \"test\", data, \"wat\", \"seven\")",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert.are.equal(#arguments, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function()\r\n    local olddata = { test = 0 }\r\n    local data = { test = 1 }\r\n    local data2 = { test = 2 }\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata = data2\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    local sub2 = c:addSubscriber(assertFn2)\r\n\r\n    c:publish({}, data)\r\n\r\n    assert.are.equal(olddata.test, 1)\r\n  end",
    "type": "function"
  }, {
    "id": 124,
    "text": "local olddata = { test = 0 }",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local data = { test = 1 }",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local data2 = { test = 2 }",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local assertFn2 = function(data)\r\n      olddata = data2\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "local sub2 = c:addSubscriber(assertFn2)",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "assert.are.equal(olddata.test, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function()\r\n    local olddata = { test = false }\r\n    local data = { test = true }\r\n\r\n    local assertFn = function(...)\r\n      olddata = data\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(assertFn)\r\n\r\n    c.channels[\"level2\"]:publish({}, data)\r\n\r\n    assert.is.truthy(olddata.test)\r\n  end",
    "type": "function"
  }, {
    "id": 132,
    "text": "local assertFn = function(...)\r\n      olddata = data\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local sub1 = c.channels[\"level2\"]:addSubscriber(assertFn)",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "c.channels[\"level2\"]:publish({}, data)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function()\r\n    assert.is_not.equal(m:getChannel({\"test\", \"level2\"}), nil)\r\n    assert.are.equal(m:getChannel({\"test\", \"level2\"}), m:getChannel({\"test\"}):getChannel(\"level2\"))\r\n  end",
    "type": "function"
  }, {
    "id": 137,
    "text": "assert.is_not.equal(m:getChannel({\"test\", \"level2\"}), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "assert.are.equal(m:getChannel({\"test\", \"level2\"}), m:getChannel({\"test\"}):getChannel(\"level2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function()\r\n    local assertFn = function(data, channel)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getChannel({ \"test\" }):getSubscriber(s.id), nil)\r\n  end",
    "type": "function"
  }, {
    "id": 141,
    "text": "local assertFn = function(data, channel)\r\n      olddata = data\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "local s = m:subscribe({\"test\"}, assertFn)",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "assert.is_not.equal(m:getChannel({ \"test\" }):getSubscriber(s.id), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 146,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 147,
    "text": "function()\r\n    local a = spy.new(function() end)\r\n    local b = spy.new(function() end)\r\n\r\n    m:subscribe({ \"request\", \"a\" }, a)\r\n    m:subscribe({ \"request\", \"b\" }, b)\r\n\r\n    m:publish({ \"request\", \"a\" })\r\n    m:publish({ \"request\", \"b\" })\r\n\r\n    assert.spy(a).was.called(1)\r\n    assert.spy(b).was.called(1)\r\n  end",
    "type": "function"
  }, {
    "id": 148,
    "text": "local a = spy.new(function() end)",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local b = spy.new(function() end)",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "m:subscribe({ \"request\", \"a\" }, a)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "m:subscribe({ \"request\", \"b\" }, b)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "m:publish({ \"request\", \"a\" })",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "m:publish({ \"request\", \"b\" })",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "assert.spy(a).was.called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "assert.spy(b).was.called(1)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function()\r\n    local assertFn = function(data, channel)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n  end",
    "type": "function"
  }, {
    "id": 158,
    "text": "assert.is_not.equal(m:getSubscriber(s.id, { \"test\" }), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function()\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n\r\n    m:removeSubscriber(s.id, {\"test\"})\r\n\r\n    assert.are.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n  end",
    "type": "function"
  }, {
    "id": 161,
    "text": "m:removeSubscriber(s.id, {\"test\"})",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "assert.are.equal(m:getSubscriber(s.id, { \"test\" }), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function()\r\n    local olddata = \"wat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n    m:publish({ \"test\" }, \"hi\")\r\n\r\n    assert.are.equal(olddata, \"hi\")\r\n  end",
    "type": "function"
  }, {
    "id": 165,
    "text": "local olddata = \"wat\"",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "m:publish({ \"test\" }, \"hi\")",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert.are.equal(olddata, \"hi\")",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function()\r\n    local olddata = \"wat\"\r\n    local olddata2 = \"watwat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n      return nil, true\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata2 = data\r\n      return nil, true\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local s = m:subscribe({ \"test\", \"level2\" }, assertFn)\r\n    local s2 = m:subscribe({ \"test\" }, assertFn2)\r\n\r\n    m:publish({ \"test\", \"level2\" }, \"didn't read lol\")\r\n\r\n    assert.are.equal(olddata, \"didn't read lol\")\r\n    assert.are.equal(olddata2, \"didn't read lol\")\r\n  end",
    "type": "function"
  }, {
    "id": 170,
    "text": "local olddata2 = \"watwat\"",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "local assertFn = function(data)\r\n      olddata = data\r\n      return nil, true\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "local assertFn2 = function(data)\r\n      olddata2 = data\r\n      return nil, true\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "local s = m:subscribe({ \"test\", \"level2\" }, assertFn)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "local s2 = m:subscribe({ \"test\" }, assertFn2)",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "m:publish({ \"test\", \"level2\" }, \"didn't read lol\")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "assert.are.equal(olddata, \"didn't read lol\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "assert.are.equal(olddata2, \"didn't read lol\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function()\r\n    local olddata = \"wat\"\r\n    local olddata2 = \"watwat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata2 = data\r\n    end\r\n\r\n    local predicate = function()\r\n      return false\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local s = m:subscribe({\"test\",\"level2\"}, assertFn)\r\n    local s2 = m:subscribe({\"test\"}, assertFn2, { predicate = predicate })\r\n\r\n    m:publish({\"test\", \"level2\"}, \"didn't read lol\")\r\n\r\n    assert.are.equal(olddata, \"didn't read lol\")\r\n    assert.are_not.equal(olddata2, \"didn't read lol\")\r\n  end",
    "type": "function"
  }, {
    "id": 180,
    "text": "local assertFn2 = function(data)\r\n      olddata2 = data\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "local predicate = function()\r\n      return false\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "local s = m:subscribe({\"test\",\"level2\"}, assertFn)",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "local s2 = m:subscribe({\"test\"}, assertFn2, { predicate = predicate })",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "m:publish({\"test\", \"level2\"}, \"didn't read lol\")",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert.are_not.equal(olddata2, \"didn't read lol\")",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function()\r\n  local Mediator = require 'mediator'\r\n  local c, testfn, testfn2, testfn3\r\n\r\n  before_each(function()\r\n    m = Mediator()\r\n    c = Mediator.Channel(\"test\")\r\n    testfn = function() end\r\n    testfn2 = function() end\r\n    testfn3 = function() end\r\n  end)\r\n\r\n  after_each(function()\r\n    m = nil\r\n    c = nil\r\n    testfn = nil\r\n    testfn2 = nil\r\n    testfn3 = nil\r\n  end)\r\n\r\n  it(\"can register subscribers\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n\r\n    assert.are.equal(#c.callbacks, 1)\r\n    assert.are.equal(c.callbacks[1].fn, testfn)\r\n  end)\r\n\r\n  it(\"can register lots of subscribers\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    assert.are.equal(#c.callbacks, 2)\r\n    assert.are.equal(c.callbacks[2].fn, sub2.fn)\r\n  end)\r\n\r\n  it(\"can register subscribers with specified priorities\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n    local sub3 = c:addSubscriber(testfn3, { priority = 1 })\r\n\r\n    assert.are.equal(c.callbacks[1].fn, sub3.fn)\r\n  end)\r\n\r\n  it(\"can return subscribers\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    gotten = c:getSubscriber(sub1.id)\r\n\r\n    assert.are.equal(gotten.value, sub1)\r\n  end)\r\n\r\n  it(\"can change subscriber priority forward after being added\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:setPriority(sub2.id, 1)\r\n\r\n    assert.are.equal(c.callbacks[1], sub2)\r\n  end)\r\n\r\n  it(\"can change subscriber priority backwards after being added\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:setPriority(sub1.id, 2)\r\n\r\n    assert.are.equal(c.callbacks[2], sub1)\r\n  end)\r\n\r\n  it(\"can add subchannels\", function()\r\n    c:addChannel(\"level2\")\r\n    assert.are_not.equal(c.channels[\"level2\"], nil)\r\n  end)\r\n\r\n  it(\"can check if a subchannel has been added\", function()\r\n    c:addChannel(\"level2\")\r\n    assert.is.truthy(c:hasChannel(\"level2\"), true)\r\n  end)\r\n\r\n  it(\"can return channels\", function()\r\n    c:addChannel(\"level2\")\r\n    assert.is_not.equal(c:getChannel(\"level2\"), nil)\r\n  end)\r\n\r\n  it(\"can remove subscribers by id\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:removeSubscriber(sub2.id)\r\n\r\n    assert.is.equal(c:getSubscriber(sub2.id), nil)\r\n  end)\r\n\r\n  it(\"can return a subscriber registered to a subchannel\", function()\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(testfn)\r\n\r\n    gotten = c:getSubscriber(sub1.id)\r\n\r\n    assert.are.equal(gotten.value, sub1)\r\n  end)\r\n\r\n  it(\"can remove a subscriber registered to a subchannel\", function()\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(testfn)\r\n\r\n    c:removeSubscriber(sub1.id)\r\n\r\n    assert.is.equal(c.channels[\"level2\"]:getSubscriber(sub1.id), nil)\r\n  end)\r\n\r\n  it(\"can publish to a channel\", function()\r\n    local olddata = { test = false }\r\n    local data = { test = true }\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    c:publish({}, data)\r\n\r\n    assert.is.truthy(olddata.test)\r\n  end)\r\n\r\n  it(\"ignores if you publish to a nonexistant subchannel\", function()\r\n    assert.is_not.error(function() m:publish({ \"nope\" }, data) end)\r\n  end)\r\n\r\n  it(\"ignores if you publish to a nonexistant subchannel with subchannels\", function()\r\n    assert.is_not.error(function() m:publish({ \"nope\", \"wat\" }, data) end)\r\n  end)\r\n\r\n  it(\"sends all the publish arguments to subscribers\", function()\r\n    local data = { test = true }\r\n    local arguments\r\n\r\n    local assertFn = function(data, wat, seven)\r\n      arguments = { data, wat, seven }\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    c:publish({}, \"test\", data, \"wat\", \"seven\")\r\n\r\n    assert.are.equal(#arguments, 3)\r\n  end)\r\n\r\n  it(\"can stop propagation\", function()\r\n    local olddata = { test = 0 }\r\n    local data = { test = 1 }\r\n    local data2 = { test = 2 }\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata = data2\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    local sub2 = c:addSubscriber(assertFn2)\r\n\r\n    c:publish({}, data)\r\n\r\n    assert.are.equal(olddata.test, 1)\r\n  end)\r\n\r\n  it(\"publishes to parent channels\", function()\r\n    local olddata = { test = false }\r\n    local data = { test = true }\r\n\r\n    local assertFn = function(...)\r\n      olddata = data\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(assertFn)\r\n\r\n    c.channels[\"level2\"]:publish({}, data)\r\n\r\n    assert.is.truthy(olddata.test)\r\n  end)\r\n\r\n  it(\"can return a channel from the mediator level\", function()\r\n    assert.is_not.equal(m:getChannel({\"test\", \"level2\"}), nil)\r\n    assert.are.equal(m:getChannel({\"test\", \"level2\"}), m:getChannel({\"test\"}):getChannel(\"level2\"))\r\n  end)\r\n\r\n  it(\"can publish to channels from the mediator level\", function()\r\n    local assertFn = function(data, channel)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getChannel({ \"test\" }):getSubscriber(s.id), nil)\r\n  end)\r\n\r\n  it(\"publishes to the proper subchannel\", function()\r\n    local a = spy.new(function() end)\r\n    local b = spy.new(function() end)\r\n\r\n    m:subscribe({ \"request\", \"a\" }, a)\r\n    m:subscribe({ \"request\", \"b\" }, b)\r\n\r\n    m:publish({ \"request\", \"a\" })\r\n    m:publish({ \"request\", \"b\" })\r\n\r\n    assert.spy(a).was.called(1)\r\n    assert.spy(b).was.called(1)\r\n  end)\r\n\r\n  it(\"can return a subscriber at the mediator level\", function()\r\n    local assertFn = function(data, channel)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n  end)\r\n\r\n\r\n  it(\"can remove a subscriber at the mediator level\", function()\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n\r\n    m:removeSubscriber(s.id, {\"test\"})\r\n\r\n    assert.are.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n  end)\r\n\r\n  it(\"can publish to a subscriber at the mediator level\", function()\r\n    local olddata = \"wat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n    m:publish({ \"test\" }, \"hi\")\r\n\r\n    assert.are.equal(olddata, \"hi\")\r\n  end)\r\n\r\n  it(\"can publish a subscriber to all parents at the mediator level\", function()\r\n    local olddata = \"wat\"\r\n    local olddata2 = \"watwat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n      return nil, true\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata2 = data\r\n      return nil, true\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local s = m:subscribe({ \"test\", \"level2\" }, assertFn)\r\n    local s2 = m:subscribe({ \"test\" }, assertFn2)\r\n\r\n    m:publish({ \"test\", \"level2\" }, \"didn't read lol\")\r\n\r\n    assert.are.equal(olddata, \"didn't read lol\")\r\n    assert.are.equal(olddata2, \"didn't read lol\")\r\n  end)\r\n\r\n  it(\"has predicates\", function()\r\n    local olddata = \"wat\"\r\n    local olddata2 = \"watwat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata2 = data\r\n    end\r\n\r\n    local predicate = function()\r\n      return false\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local s = m:subscribe({\"test\",\"level2\"}, assertFn)\r\n    local s2 = m:subscribe({\"test\"}, assertFn2, { predicate = predicate })\r\n\r\n    m:publish({\"test\", \"level2\"}, \"didn't read lol\")\r\n\r\n    assert.are.equal(olddata, \"didn't read lol\")\r\n    assert.are_not.equal(olddata2, \"didn't read lol\")\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "local Mediator = require 'mediator'",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local c, testfn, testfn2, testfn3",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "before_each(function()\r\n    m = Mediator()\r\n    c = Mediator.Channel(\"test\")\r\n    testfn = function() end\r\n    testfn2 = function() end\r\n    testfn3 = function() end\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "after_each(function()\r\n    m = nil\r\n    c = nil\r\n    testfn = nil\r\n    testfn2 = nil\r\n    testfn3 = nil\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "it(\"can register subscribers\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n\r\n    assert.are.equal(#c.callbacks, 1)\r\n    assert.are.equal(c.callbacks[1].fn, testfn)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "it(\"can register lots of subscribers\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    assert.are.equal(#c.callbacks, 2)\r\n    assert.are.equal(c.callbacks[2].fn, sub2.fn)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "it(\"can register subscribers with specified priorities\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n    local sub3 = c:addSubscriber(testfn3, { priority = 1 })\r\n\r\n    assert.are.equal(c.callbacks[1].fn, sub3.fn)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "it(\"can return subscribers\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    gotten = c:getSubscriber(sub1.id)\r\n\r\n    assert.are.equal(gotten.value, sub1)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "it(\"can change subscriber priority forward after being added\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:setPriority(sub2.id, 1)\r\n\r\n    assert.are.equal(c.callbacks[1], sub2)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "it(\"can change subscriber priority backwards after being added\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:setPriority(sub1.id, 2)\r\n\r\n    assert.are.equal(c.callbacks[2], sub1)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "it(\"can add subchannels\", function()\r\n    c:addChannel(\"level2\")\r\n    assert.are_not.equal(c.channels[\"level2\"], nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "it(\"can check if a subchannel has been added\", function()\r\n    c:addChannel(\"level2\")\r\n    assert.is.truthy(c:hasChannel(\"level2\"), true)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "it(\"can return channels\", function()\r\n    c:addChannel(\"level2\")\r\n    assert.is_not.equal(c:getChannel(\"level2\"), nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "it(\"can remove subscribers by id\", function()\r\n    local sub1 = c:addSubscriber(testfn)\r\n    local sub2 = c:addSubscriber(testfn2)\r\n\r\n    c:removeSubscriber(sub2.id)\r\n\r\n    assert.is.equal(c:getSubscriber(sub2.id), nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "it(\"can return a subscriber registered to a subchannel\", function()\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(testfn)\r\n\r\n    gotten = c:getSubscriber(sub1.id)\r\n\r\n    assert.are.equal(gotten.value, sub1)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "it(\"can remove a subscriber registered to a subchannel\", function()\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(testfn)\r\n\r\n    c:removeSubscriber(sub1.id)\r\n\r\n    assert.is.equal(c.channels[\"level2\"]:getSubscriber(sub1.id), nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "it(\"can publish to a channel\", function()\r\n    local olddata = { test = false }\r\n    local data = { test = true }\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    c:publish({}, data)\r\n\r\n    assert.is.truthy(olddata.test)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "it(\"ignores if you publish to a nonexistant subchannel\", function()\r\n    assert.is_not.error(function() m:publish({ \"nope\" }, data) end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "it(\"ignores if you publish to a nonexistant subchannel with subchannels\", function()\r\n    assert.is_not.error(function() m:publish({ \"nope\", \"wat\" }, data) end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "it(\"sends all the publish arguments to subscribers\", function()\r\n    local data = { test = true }\r\n    local arguments\r\n\r\n    local assertFn = function(data, wat, seven)\r\n      arguments = { data, wat, seven }\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    c:publish({}, \"test\", data, \"wat\", \"seven\")\r\n\r\n    assert.are.equal(#arguments, 3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "it(\"can stop propagation\", function()\r\n    local olddata = { test = 0 }\r\n    local data = { test = 1 }\r\n    local data2 = { test = 2 }\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata = data2\r\n    end\r\n\r\n    local sub1 = c:addSubscriber(assertFn)\r\n    local sub2 = c:addSubscriber(assertFn2)\r\n\r\n    c:publish({}, data)\r\n\r\n    assert.are.equal(olddata.test, 1)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "it(\"publishes to parent channels\", function()\r\n    local olddata = { test = false }\r\n    local data = { test = true }\r\n\r\n    local assertFn = function(...)\r\n      olddata = data\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local sub1 = c.channels[\"level2\"]:addSubscriber(assertFn)\r\n\r\n    c.channels[\"level2\"]:publish({}, data)\r\n\r\n    assert.is.truthy(olddata.test)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "it(\"can return a channel from the mediator level\", function()\r\n    assert.is_not.equal(m:getChannel({\"test\", \"level2\"}), nil)\r\n    assert.are.equal(m:getChannel({\"test\", \"level2\"}), m:getChannel({\"test\"}):getChannel(\"level2\"))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "it(\"can publish to channels from the mediator level\", function()\r\n    local assertFn = function(data, channel)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getChannel({ \"test\" }):getSubscriber(s.id), nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "it(\"publishes to the proper subchannel\", function()\r\n    local a = spy.new(function() end)\r\n    local b = spy.new(function() end)\r\n\r\n    m:subscribe({ \"request\", \"a\" }, a)\r\n    m:subscribe({ \"request\", \"b\" }, b)\r\n\r\n    m:publish({ \"request\", \"a\" })\r\n    m:publish({ \"request\", \"b\" })\r\n\r\n    assert.spy(a).was.called(1)\r\n    assert.spy(b).was.called(1)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "it(\"can return a subscriber at the mediator level\", function()\r\n    local assertFn = function(data, channel)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "it(\"can remove a subscriber at the mediator level\", function()\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n\r\n    assert.is_not.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n\r\n    m:removeSubscriber(s.id, {\"test\"})\r\n\r\n    assert.are.equal(m:getSubscriber(s.id, { \"test\" }), nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "it(\"can publish to a subscriber at the mediator level\", function()\r\n    local olddata = \"wat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local s = m:subscribe({\"test\"}, assertFn)\r\n    m:publish({ \"test\" }, \"hi\")\r\n\r\n    assert.are.equal(olddata, \"hi\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "it(\"can publish a subscriber to all parents at the mediator level\", function()\r\n    local olddata = \"wat\"\r\n    local olddata2 = \"watwat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n      return nil, true\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata2 = data\r\n      return nil, true\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local s = m:subscribe({ \"test\", \"level2\" }, assertFn)\r\n    local s2 = m:subscribe({ \"test\" }, assertFn2)\r\n\r\n    m:publish({ \"test\", \"level2\" }, \"didn't read lol\")\r\n\r\n    assert.are.equal(olddata, \"didn't read lol\")\r\n    assert.are.equal(olddata2, \"didn't read lol\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "it(\"has predicates\", function()\r\n    local olddata = \"wat\"\r\n    local olddata2 = \"watwat\"\r\n\r\n    local assertFn = function(data)\r\n      olddata = data\r\n    end\r\n\r\n    local assertFn2 = function(data)\r\n      olddata2 = data\r\n    end\r\n\r\n    local predicate = function()\r\n      return false\r\n    end\r\n\r\n    c:addChannel(\"level2\")\r\n\r\n    local s = m:subscribe({\"test\",\"level2\"}, assertFn)\r\n    local s2 = m:subscribe({\"test\"}, assertFn2, { predicate = predicate })\r\n\r\n    m:publish({\"test\", \"level2\"}, \"didn't read lol\")\r\n\r\n    assert.are.equal(olddata, \"didn't read lol\")\r\n    assert.are_not.equal(olddata2, \"didn't read lol\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "",
    "type": "function container"
  }, {
    "id": 220,
    "text": "local function Channel(namespace, parent)\r\n  return {\r\n    stopped = false,\r\n    namespace = namespace,\r\n    callbacks = {},\r\n    channels = {},\r\n    parent = parent,\r\n\r\n    addSubscriber = function(self, fn, options)\r\n      local callback = Subscriber(fn, options)\r\n      local priority = (#self.callbacks + 1)\r\n\r\n      options = options or {}\r\n\r\n      if options.priority and\r\n        options.priority >= 0 and\r\n        options.priority < priority\r\n      then\r\n          priority = options.priority\r\n      end\r\n\r\n      table.insert(self.callbacks, priority, callback)\r\n\r\n      return callback\r\n    end,\r\n\r\n    getSubscriber = function(self, id)\r\n      for i=1, #self.callbacks do\r\n        local callback = self.callbacks[i]\r\n        if callback.id == id then return { index = i, value = callback } end\r\n      end\r\n      local sub\r\n      for _, channel in pairs(self.channels) do\r\n        sub = channel:getSubscriber(id)\r\n        if sub then break end\r\n      end\r\n      return sub\r\n    end,\r\n\r\n    setPriority = function(self, id, priority)\r\n      local callback = self:getSubscriber(id)\r\n\r\n      if callback.value then\r\n        table.remove(self.callbacks, callback.index)\r\n        table.insert(self.callbacks, priority, callback.value)\r\n      end\r\n    end,\r\n\r\n    addChannel = function(self, namespace)\r\n      self.channels[namespace] = Channel(namespace, self)\r\n      return self.channels[namespace]\r\n    end,\r\n\r\n    hasChannel = function(self, namespace)\r\n      return namespace and self.channels[namespace] and true\r\n    end,\r\n\r\n    getChannel = function(self, namespace)\r\n      return self.channels[namespace] or self:addChannel(namespace)\r\n    end,\r\n\r\n    removeSubscriber = function(self, id)\r\n      local callback = self:getSubscriber(id)\r\n\r\n      if callback and callback.value then\r\n        for _, channel in pairs(self.channels) do\r\n          channel:removeSubscriber(id)\r\n        end\r\n\r\n        return table.remove(self.callbacks, callback.index)\r\n      end\r\n    end,\r\n\r\n    publish = function(self, result, ...)\r\n      for i = 1, #self.callbacks do\r\n        local callback = self.callbacks[i]\r\n\r\n        -- if it doesn't have a predicate, or it does and it's true then run it\r\n        if not callback.options.predicate or callback.options.predicate(...) then\r\n           -- just take the first result and insert it into the result table\r\n          local value, continue = callback.fn(...)\r\n\r\n          if value then table.insert(result, value) end\r\n          if not continue then return result end\r\n        end\r\n      end\r\n\r\n      if parent then\r\n        return parent:publish(result, ...)\r\n      else\r\n        return result\r\n      end\r\n    end\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 221,
    "text": "assert.is_not.error",
    "type": "global function"
  }, {
    "id": 222,
    "text": "Mediator",
    "type": "global function"
  }, {
    "id": 223,
    "text": "assert.is.equal",
    "type": "global function"
  }, {
    "id": 224,
    "text": "assert.are_not.equal",
    "type": "global function"
  }, {
    "id": 225,
    "text": "assert.is.truthy",
    "type": "global function"
  }, {
    "id": 226,
    "text": "new",
    "type": "global function"
  }, {
    "id": 227,
    "text": "it",
    "type": "global function"
  }, {
    "id": 228,
    "text": "assert.is_not.equal",
    "type": "global function"
  }, {
    "id": 229,
    "text": "assert.are.equal",
    "type": "global function"
  }, {
    "id": 230,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 231,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 232,
    "text": "require",
    "type": "global function"
  }, {
    "id": 233,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 234,
    "text": "spy",
    "type": "global function"
  }, {
    "id": 235,
    "text": "",
    "type": "variable container"
  }, {
    "id": 236,
    "text": "",
    "type": "require container"
  } ]
}