{
  "_filename": "metalua-ast.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/leg/examples/metalua-ast.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 9,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 18,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 23,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 25,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 27,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 6
  }, {
    "from": 29,
    "label": "has",
    "to": 6
  }, {
    "from": 30,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 33,
    "label": "has",
    "to": 6
  }, {
    "from": 34,
    "label": "has",
    "to": 6
  }, {
    "from": 35,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 38,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 40,
    "label": "has",
    "to": 6
  }, {
    "from": 41,
    "label": "has",
    "to": 6
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 43,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 6
  }, {
    "from": 49,
    "label": "has",
    "to": 6
  }, {
    "from": 50,
    "label": "has",
    "to": 6
  }, {
    "from": 51,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 53,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 6
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 6
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 74,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 92
  }, {
    "from": 74,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 6
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 6
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 93,
    "label": "has",
    "to": 6
  }, {
    "from": 93,
    "label": "has",
    "to": 99
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 93,
    "label": "has",
    "to": 6
  }, {
    "from": 93,
    "label": "has",
    "to": 101
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 93,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 109,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 109,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 109,
    "label": "has",
    "to": 127
  }, {
    "from": 109,
    "label": "has",
    "to": 6
  }, {
    "from": 109,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 109,
    "label": "has",
    "to": 130
  }, {
    "from": 109,
    "label": "has",
    "to": 6
  }, {
    "from": 109,
    "label": "has",
    "to": 131
  }, {
    "from": 109,
    "label": "has",
    "to": 6
  }, {
    "from": 109,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 132,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 132,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 132,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 132,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 112
  }, {
    "from": 146,
    "label": "has",
    "to": 113
  }, {
    "from": 146,
    "label": "has",
    "to": 114
  }, {
    "from": 146,
    "label": "has",
    "to": 115
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 146,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 154,
    "label": "has",
    "to": 159
  }, {
    "from": 154,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 154,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 154,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 154,
    "label": "has",
    "to": 171
  }, {
    "from": 154,
    "label": "has",
    "to": 120
  }, {
    "from": 146,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 158
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 156
  }, {
    "from": 174,
    "label": "has",
    "to": 157
  }, {
    "from": 172,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 158
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 164
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 172,
    "label": "has",
    "to": 181
  }, {
    "from": 146,
    "label": "has",
    "to": 6
  }, {
    "from": 146,
    "label": "has",
    "to": 6
  }, {
    "from": 146,
    "label": "has",
    "to": 6
  }, {
    "from": 132,
    "label": "has",
    "to": 182
  }, {
    "from": 132,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 74,
    "label": "has",
    "to": 186
  }, {
    "from": 74,
    "label": "has",
    "to": 6
  }, {
    "from": 74,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 84
  }, {
    "from": 188,
    "label": "has",
    "to": 85
  }, {
    "from": 188,
    "label": "has",
    "to": 86
  }, {
    "from": 189,
    "label": "has",
    "to": 6
  }, {
    "from": 190,
    "label": "has",
    "to": 89
  }, {
    "from": 190,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 190,
    "label": "has",
    "to": 6
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 94
  }, {
    "from": 192,
    "label": "has",
    "to": 95
  }, {
    "from": 192,
    "label": "has",
    "to": 6
  }, {
    "from": 192,
    "label": "has",
    "to": 96
  }, {
    "from": 192,
    "label": "has",
    "to": 6
  }, {
    "from": 192,
    "label": "has",
    "to": 97
  }, {
    "from": 192,
    "label": "has",
    "to": 98
  }, {
    "from": 192,
    "label": "has",
    "to": 6
  }, {
    "from": 192,
    "label": "has",
    "to": 99
  }, {
    "from": 192,
    "label": "has",
    "to": 100
  }, {
    "from": 192,
    "label": "has",
    "to": 6
  }, {
    "from": 192,
    "label": "has",
    "to": 101
  }, {
    "from": 192,
    "label": "has",
    "to": 102
  }, {
    "from": 192,
    "label": "has",
    "to": 6
  }, {
    "from": 193,
    "label": "has",
    "to": 6
  }, {
    "from": 194,
    "label": "has",
    "to": 6
  }, {
    "from": 195,
    "label": "has",
    "to": 6
  }, {
    "from": 196,
    "label": "has",
    "to": 6
  }, {
    "from": 197,
    "label": "has",
    "to": 6
  }, {
    "from": 198,
    "label": "has",
    "to": 110
  }, {
    "from": 198,
    "label": "has",
    "to": 111
  }, {
    "from": 198,
    "label": "has",
    "to": 112
  }, {
    "from": 198,
    "label": "has",
    "to": 113
  }, {
    "from": 198,
    "label": "has",
    "to": 114
  }, {
    "from": 198,
    "label": "has",
    "to": 115
  }, {
    "from": 198,
    "label": "has",
    "to": 116
  }, {
    "from": 198,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 198,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 198,
    "label": "has",
    "to": 127
  }, {
    "from": 198,
    "label": "has",
    "to": 6
  }, {
    "from": 198,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 198,
    "label": "has",
    "to": 130
  }, {
    "from": 198,
    "label": "has",
    "to": 6
  }, {
    "from": 198,
    "label": "has",
    "to": 131
  }, {
    "from": 198,
    "label": "has",
    "to": 6
  }, {
    "from": 198,
    "label": "has",
    "to": 6
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 200,
    "label": "has",
    "to": 137
  }, {
    "from": 200,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 200,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 200,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 200,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 200,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 112
  }, {
    "from": 146,
    "label": "has",
    "to": 113
  }, {
    "from": 146,
    "label": "has",
    "to": 114
  }, {
    "from": 146,
    "label": "has",
    "to": 115
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 146,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 154,
    "label": "has",
    "to": 159
  }, {
    "from": 154,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 154,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 154,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 154,
    "label": "has",
    "to": 171
  }, {
    "from": 154,
    "label": "has",
    "to": 120
  }, {
    "from": 146,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 158
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 156
  }, {
    "from": 174,
    "label": "has",
    "to": 157
  }, {
    "from": 172,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 158
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 164
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 172,
    "label": "has",
    "to": 181
  }, {
    "from": 146,
    "label": "has",
    "to": 6
  }, {
    "from": 146,
    "label": "has",
    "to": 6
  }, {
    "from": 146,
    "label": "has",
    "to": 6
  }, {
    "from": 200,
    "label": "has",
    "to": 182
  }, {
    "from": 200,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 202,
    "label": "has",
    "to": 134
  }, {
    "from": 202,
    "label": "has",
    "to": 135
  }, {
    "from": 202,
    "label": "has",
    "to": 136
  }, {
    "from": 203,
    "label": "has",
    "to": 139
  }, {
    "from": 204,
    "label": "has",
    "to": 141
  }, {
    "from": 205,
    "label": "has",
    "to": 143
  }, {
    "from": 206,
    "label": "has",
    "to": 145
  }, {
    "from": 207,
    "label": "has",
    "to": 147
  }, {
    "from": 207,
    "label": "has",
    "to": 112
  }, {
    "from": 207,
    "label": "has",
    "to": 113
  }, {
    "from": 207,
    "label": "has",
    "to": 114
  }, {
    "from": 207,
    "label": "has",
    "to": 115
  }, {
    "from": 207,
    "label": "has",
    "to": 148
  }, {
    "from": 207,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 207,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 154,
    "label": "has",
    "to": 159
  }, {
    "from": 154,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 154,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 154,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 154,
    "label": "has",
    "to": 171
  }, {
    "from": 154,
    "label": "has",
    "to": 120
  }, {
    "from": 207,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 158
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 156
  }, {
    "from": 174,
    "label": "has",
    "to": 157
  }, {
    "from": 172,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 158
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 164
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 172,
    "label": "has",
    "to": 181
  }, {
    "from": 207,
    "label": "has",
    "to": 6
  }, {
    "from": 207,
    "label": "has",
    "to": 6
  }, {
    "from": 207,
    "label": "has",
    "to": 6
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 209,
    "label": "has",
    "to": 6
  }, {
    "from": 209,
    "label": "has",
    "to": 6
  }, {
    "from": 209,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 214,
    "label": "has",
    "to": 217
  }, {
    "from": 213,
    "label": "has",
    "to": 6
  }, {
    "from": 213,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 6
  }, {
    "from": 220,
    "label": "has",
    "to": 6
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 221,
    "label": "has",
    "to": 6
  }, {
    "from": 221,
    "label": "has",
    "to": 6
  }, {
    "from": 221,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 6
  }, {
    "from": 226,
    "label": "has",
    "to": 229
  }, {
    "from": 226,
    "label": "has",
    "to": 55
  }, {
    "from": 226,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 231,
    "label": "has",
    "to": 234
  }, {
    "from": 231,
    "label": "has",
    "to": 235
  }, {
    "from": 231,
    "label": "has",
    "to": 234
  }, {
    "from": 230,
    "label": "has",
    "to": 236
  }, {
    "from": 226,
    "label": "has",
    "to": 6
  }, {
    "from": 226,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 6
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 6
  }, {
    "from": 244,
    "label": "has",
    "to": 6
  }, {
    "from": 245,
    "label": "has",
    "to": 6
  }, {
    "from": 246,
    "label": "has",
    "to": 6
  }, {
    "from": 247,
    "label": "has",
    "to": 6
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 251,
    "label": "has",
    "to": 254
  }, {
    "from": 248,
    "label": "has",
    "to": 6
  }, {
    "from": 248,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 6
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 257,
    "label": "has",
    "to": 6
  }, {
    "from": 257,
    "label": "has",
    "to": 260
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 6
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 261,
    "label": "has",
    "to": 6
  }, {
    "from": 261,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 6
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 268,
    "label": "has",
    "to": 6
  }, {
    "from": 269,
    "label": "has",
    "to": 6
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 270,
    "label": "has",
    "to": 6
  }, {
    "from": 270,
    "label": "has",
    "to": 6
  }, {
    "from": 272,
    "label": "has",
    "to": 6
  }, {
    "from": 273,
    "label": "has",
    "to": 6
  }, {
    "from": 274,
    "label": "has",
    "to": 6
  }, {
    "from": 275,
    "label": "calls",
    "to": 17
  }, {
    "from": 275,
    "label": "calls",
    "to": 68
  }, {
    "from": 53,
    "label": "calls",
    "to": 52
  }, {
    "from": 275,
    "label": "calls",
    "to": 52
  }, {
    "from": 275,
    "label": "calls",
    "to": 281
  }, {
    "from": 275,
    "label": "calls",
    "to": 276
  }, {
    "from": 74,
    "label": "calls",
    "to": 299
  }, {
    "from": 74,
    "label": "calls",
    "to": 299
  }, {
    "from": 74,
    "label": "calls",
    "to": 299
  }, {
    "from": 74,
    "label": "calls",
    "to": 299
  }, {
    "from": 74,
    "label": "calls",
    "to": 299
  }, {
    "from": 51,
    "label": "calls",
    "to": 50
  }, {
    "from": 52,
    "label": "calls",
    "to": 50
  }, {
    "from": 53,
    "label": "calls",
    "to": 51
  }, {
    "from": 275,
    "label": "calls",
    "to": 51
  }, {
    "from": 275,
    "label": "calls",
    "to": 31
  }, {
    "from": 275,
    "label": "calls",
    "to": 31
  }, {
    "from": 275,
    "label": "calls",
    "to": 25
  }, {
    "from": 275,
    "label": "calls",
    "to": 24
  }, {
    "from": 275,
    "label": "calls",
    "to": 24
  }, {
    "from": 275,
    "label": "calls",
    "to": 24
  }, {
    "from": 275,
    "label": "calls",
    "to": 24
  }, {
    "from": 275,
    "label": "calls",
    "to": 24
  }, {
    "from": 275,
    "label": "calls",
    "to": 283
  }, {
    "from": 275,
    "label": "calls",
    "to": 283
  }, {
    "from": 13,
    "label": "calls",
    "to": 291
  }, {
    "from": 74,
    "label": "calls",
    "to": 202
  }, {
    "from": 74,
    "label": "calls",
    "to": 202
  }, {
    "from": 275,
    "label": "calls",
    "to": 29
  }, {
    "from": 275,
    "label": "calls",
    "to": 290
  }, {
    "from": 74,
    "label": "calls",
    "to": 290
  }, {
    "from": 74,
    "label": "calls",
    "to": 290
  }, {
    "from": 74,
    "label": "calls",
    "to": 290
  }, {
    "from": 74,
    "label": "calls",
    "to": 290
  }, {
    "from": 74,
    "label": "calls",
    "to": 290
  }, {
    "from": 74,
    "label": "calls",
    "to": 290
  }, {
    "from": 74,
    "label": "calls",
    "to": 290
  }, {
    "from": 74,
    "label": "calls",
    "to": 290
  }, {
    "from": 275,
    "label": "calls",
    "to": 9
  }, {
    "from": 275,
    "label": "calls",
    "to": 18
  }, {
    "from": 275,
    "label": "calls",
    "to": 7
  }, {
    "from": 74,
    "label": "calls",
    "to": 190
  }, {
    "from": 275,
    "label": "calls",
    "to": 293
  }, {
    "from": 74,
    "label": "calls",
    "to": 293
  }, {
    "from": 74,
    "label": "calls",
    "to": 284
  }, {
    "from": 74,
    "label": "calls",
    "to": 284
  }, {
    "from": 275,
    "label": "calls",
    "to": 30
  }, {
    "from": 74,
    "label": "calls",
    "to": 285
  }, {
    "from": 275,
    "label": "calls",
    "to": 26
  }, {
    "from": 74,
    "label": "calls",
    "to": 296
  }, {
    "from": 74,
    "label": "calls",
    "to": 287
  }, {
    "from": 74,
    "label": "calls",
    "to": 287
  }, {
    "from": 74,
    "label": "calls",
    "to": 287
  }, {
    "from": 275,
    "label": "calls",
    "to": 286
  }, {
    "from": 74,
    "label": "calls",
    "to": 200
  }, {
    "from": 74,
    "label": "calls",
    "to": 200
  }, {
    "from": 74,
    "label": "calls",
    "to": 200
  }, {
    "from": 74,
    "label": "calls",
    "to": 200
  }, {
    "from": 74,
    "label": "calls",
    "to": 200
  }, {
    "from": 74,
    "label": "calls",
    "to": 200
  }, {
    "from": 275,
    "label": "calls",
    "to": 23
  }, {
    "from": 69,
    "label": "calls",
    "to": 288
  }, {
    "from": 53,
    "label": "calls",
    "to": 294
  }, {
    "from": 275,
    "label": "calls",
    "to": 294
  }, {
    "from": 275,
    "label": "calls",
    "to": 294
  }, {
    "from": 275,
    "label": "calls",
    "to": 294
  }, {
    "from": 275,
    "label": "calls",
    "to": 297
  }, {
    "from": 275,
    "label": "calls",
    "to": 278
  }, {
    "from": 275,
    "label": "calls",
    "to": 74
  }, {
    "from": 53,
    "label": "calls",
    "to": 28
  }, {
    "from": 53,
    "label": "calls",
    "to": 282
  }, {
    "from": 275,
    "label": "calls",
    "to": 282
  }, {
    "from": 275,
    "label": "calls",
    "to": 282
  }, {
    "from": 275,
    "label": "calls",
    "to": 282
  }, {
    "from": 74,
    "label": "calls",
    "to": 282
  }, {
    "from": 275,
    "label": "calls",
    "to": 289
  }, {
    "from": 275,
    "label": "calls",
    "to": 289
  }, {
    "from": 275,
    "label": "calls",
    "to": 15
  }, {
    "from": 275,
    "label": "calls",
    "to": 27
  }, {
    "from": 275,
    "label": "calls",
    "to": 69
  }, {
    "from": 275,
    "label": "calls",
    "to": 5
  }, {
    "from": 275,
    "label": "calls",
    "to": 53
  }, {
    "from": 74,
    "label": "calls",
    "to": 292
  }, {
    "from": 74,
    "label": "calls",
    "to": 280
  }, {
    "from": 74,
    "label": "calls",
    "to": 280
  }, {
    "from": 74,
    "label": "calls",
    "to": 192
  }, {
    "from": 74,
    "label": "calls",
    "to": 192
  }, {
    "from": 74,
    "label": "calls",
    "to": 192
  }, {
    "from": 74,
    "label": "calls",
    "to": 192
  }, {
    "from": 74,
    "label": "calls",
    "to": 192
  }, {
    "from": 74,
    "label": "calls",
    "to": 192
  }, {
    "from": 74,
    "label": "calls",
    "to": 192
  }, {
    "from": 74,
    "label": "calls",
    "to": 189
  }, {
    "from": 74,
    "label": "calls",
    "to": 189
  }, {
    "from": 74,
    "label": "calls",
    "to": 189
  }, {
    "from": 74,
    "label": "calls",
    "to": 189
  }, {
    "from": 69,
    "label": "calls",
    "to": 279
  }, {
    "from": 275,
    "label": "calls",
    "to": 298
  }, {
    "from": 74,
    "label": "calls",
    "to": 295
  }, {
    "from": 74,
    "label": "calls",
    "to": 295
  }, {
    "from": 275,
    "label": "calls",
    "to": 300
  }, {
    "from": 275,
    "label": "calls",
    "to": 300
  }, {
    "from": 275,
    "label": "calls",
    "to": 300
  }, {
    "from": 275,
    "label": "calls",
    "to": 300
  }, {
    "from": 275,
    "label": "calls",
    "to": 301
  }, {
    "from": 275,
    "label": "calls",
    "to": 301
  }, {
    "from": 275,
    "label": "calls",
    "to": 301
  }, {
    "from": 275,
    "label": "calls",
    "to": 301
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 275,
    "label": "calls",
    "to": 16
  }, {
    "from": 1,
    "label": "contains",
    "to": 275
  }, {
    "from": 275,
    "label": "declares",
    "to": 5
  }, {
    "from": 275,
    "label": "declares",
    "to": 7
  }, {
    "from": 275,
    "label": "declares",
    "to": 8
  }, {
    "from": 275,
    "label": "declares",
    "to": 9
  }, {
    "from": 275,
    "label": "declares",
    "to": 10
  }, {
    "from": 275,
    "label": "declares",
    "to": 11
  }, {
    "from": 275,
    "label": "declares",
    "to": 12
  }, {
    "from": 275,
    "label": "declares",
    "to": 13
  }, {
    "from": 275,
    "label": "declares",
    "to": 14
  }, {
    "from": 275,
    "label": "declares",
    "to": 15
  }, {
    "from": 275,
    "label": "declares",
    "to": 16
  }, {
    "from": 275,
    "label": "declares",
    "to": 17
  }, {
    "from": 275,
    "label": "declares",
    "to": 18
  }, {
    "from": 275,
    "label": "declares",
    "to": 19
  }, {
    "from": 275,
    "label": "declares",
    "to": 20
  }, {
    "from": 275,
    "label": "declares",
    "to": 21
  }, {
    "from": 275,
    "label": "declares",
    "to": 22
  }, {
    "from": 275,
    "label": "declares",
    "to": 23
  }, {
    "from": 275,
    "label": "declares",
    "to": 24
  }, {
    "from": 275,
    "label": "declares",
    "to": 25
  }, {
    "from": 275,
    "label": "declares",
    "to": 26
  }, {
    "from": 275,
    "label": "declares",
    "to": 27
  }, {
    "from": 275,
    "label": "declares",
    "to": 28
  }, {
    "from": 275,
    "label": "declares",
    "to": 29
  }, {
    "from": 275,
    "label": "declares",
    "to": 30
  }, {
    "from": 275,
    "label": "declares",
    "to": 31
  }, {
    "from": 275,
    "label": "declares",
    "to": 32
  }, {
    "from": 275,
    "label": "declares",
    "to": 33
  }, {
    "from": 275,
    "label": "declares",
    "to": 34
  }, {
    "from": 275,
    "label": "declares",
    "to": 35
  }, {
    "from": 275,
    "label": "declares",
    "to": 36
  }, {
    "from": 275,
    "label": "declares",
    "to": 37
  }, {
    "from": 275,
    "label": "declares",
    "to": 38
  }, {
    "from": 275,
    "label": "declares",
    "to": 39
  }, {
    "from": 275,
    "label": "declares",
    "to": 40
  }, {
    "from": 275,
    "label": "declares",
    "to": 41
  }, {
    "from": 275,
    "label": "declares",
    "to": 42
  }, {
    "from": 275,
    "label": "declares",
    "to": 43
  }, {
    "from": 275,
    "label": "declares",
    "to": 44
  }, {
    "from": 275,
    "label": "declares",
    "to": 45
  }, {
    "from": 275,
    "label": "declares",
    "to": 46
  }, {
    "from": 275,
    "label": "declares",
    "to": 47
  }, {
    "from": 275,
    "label": "declares",
    "to": 48
  }, {
    "from": 275,
    "label": "declares",
    "to": 49
  }, {
    "from": 275,
    "label": "declares",
    "to": 50
  }, {
    "from": 275,
    "label": "declares",
    "to": 51
  }, {
    "from": 275,
    "label": "declares",
    "to": 52
  }, {
    "from": 275,
    "label": "declares",
    "to": 53
  }, {
    "from": 275,
    "label": "declares",
    "to": 68
  }, {
    "from": 275,
    "label": "declares",
    "to": 69
  }, {
    "from": 275,
    "label": "declares",
    "to": 74
  }, {
    "from": 275,
    "label": "declares",
    "to": 188
  }, {
    "from": 275,
    "label": "declares",
    "to": 189
  }, {
    "from": 275,
    "label": "declares",
    "to": 190
  }, {
    "from": 275,
    "label": "declares",
    "to": 192
  }, {
    "from": 275,
    "label": "declares",
    "to": 193
  }, {
    "from": 275,
    "label": "declares",
    "to": 194
  }, {
    "from": 275,
    "label": "declares",
    "to": 195
  }, {
    "from": 275,
    "label": "declares",
    "to": 196
  }, {
    "from": 275,
    "label": "declares",
    "to": 197
  }, {
    "from": 275,
    "label": "declares",
    "to": 198
  }, {
    "from": 275,
    "label": "declares",
    "to": 200
  }, {
    "from": 275,
    "label": "declares",
    "to": 202
  }, {
    "from": 275,
    "label": "declares",
    "to": 203
  }, {
    "from": 275,
    "label": "declares",
    "to": 204
  }, {
    "from": 275,
    "label": "declares",
    "to": 205
  }, {
    "from": 275,
    "label": "declares",
    "to": 206
  }, {
    "from": 275,
    "label": "declares",
    "to": 207
  }, {
    "from": 275,
    "label": "declares",
    "to": 209
  }, {
    "from": 275,
    "label": "declares",
    "to": 213
  }, {
    "from": 275,
    "label": "declares",
    "to": 219
  }, {
    "from": 275,
    "label": "declares",
    "to": 220
  }, {
    "from": 275,
    "label": "declares",
    "to": 221
  }, {
    "from": 275,
    "label": "declares",
    "to": 226
  }, {
    "from": 275,
    "label": "declares",
    "to": 238
  }, {
    "from": 275,
    "label": "declares",
    "to": 243
  }, {
    "from": 275,
    "label": "declares",
    "to": 244
  }, {
    "from": 275,
    "label": "declares",
    "to": 245
  }, {
    "from": 275,
    "label": "declares",
    "to": 246
  }, {
    "from": 275,
    "label": "declares",
    "to": 247
  }, {
    "from": 275,
    "label": "declares",
    "to": 248
  }, {
    "from": 275,
    "label": "declares",
    "to": 256
  }, {
    "from": 275,
    "label": "declares",
    "to": 257
  }, {
    "from": 275,
    "label": "declares",
    "to": 261
  }, {
    "from": 275,
    "label": "declares",
    "to": 265
  }, {
    "from": 275,
    "label": "declares",
    "to": 268
  }, {
    "from": 275,
    "label": "declares",
    "to": 269
  }, {
    "from": 275,
    "label": "declares",
    "to": 270
  }, {
    "from": 275,
    "label": "declares",
    "to": 272
  }, {
    "from": 275,
    "label": "declares",
    "to": 273
  }, {
    "from": 275,
    "label": "declares",
    "to": 274
  }, {
    "from": 1,
    "label": "contains",
    "to": 302
  }, {
    "from": 1,
    "label": "contains",
    "to": 303
  }, {
    "from": 302,
    "label": "initializes",
    "to": 304
  }, {
    "from": 304,
    "label": "assigns",
    "to": 305
  }, {
    "from": 302,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "assigns",
    "to": 307
  }, {
    "from": 302,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 302,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 302,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 302,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 302,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 302,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 302,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 302,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 302,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 302,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 302,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 302,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 302,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 333,
    "label": "assigns",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 333,
    "label": "assigns",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 333,
    "label": "assigns",
    "to": 338
  }, {
    "from": 338,
    "label": "assigns",
    "to": 339
  }, {
    "from": 333,
    "label": "assigns",
    "to": 340
  }, {
    "from": 340,
    "label": "assigns",
    "to": 341
  }, {
    "from": 333,
    "label": "assigns",
    "to": 342
  }, {
    "from": 342,
    "label": "assigns",
    "to": 343
  }, {
    "from": 333,
    "label": "assigns",
    "to": 344
  }, {
    "from": 344,
    "label": "assigns",
    "to": 345
  }, {
    "from": 333,
    "label": "assigns",
    "to": 346
  }, {
    "from": 346,
    "label": "assigns",
    "to": 347
  }, {
    "from": 333,
    "label": "assigns",
    "to": 348
  }, {
    "from": 348,
    "label": "assigns",
    "to": 349
  }, {
    "from": 333,
    "label": "assigns",
    "to": 350
  }, {
    "from": 350,
    "label": "assigns",
    "to": 351
  }, {
    "from": 333,
    "label": "assigns",
    "to": 352
  }, {
    "from": 352,
    "label": "assigns",
    "to": 353
  }, {
    "from": 333,
    "label": "assigns",
    "to": 354
  }, {
    "from": 354,
    "label": "assigns",
    "to": 355
  }, {
    "from": 333,
    "label": "assigns",
    "to": 356
  }, {
    "from": 356,
    "label": "assigns",
    "to": 357
  }, {
    "from": 333,
    "label": "assigns",
    "to": 358
  }, {
    "from": 358,
    "label": "assigns",
    "to": 359
  }, {
    "from": 333,
    "label": "assigns",
    "to": 360
  }, {
    "from": 360,
    "label": "assigns",
    "to": 361
  }, {
    "from": 333,
    "label": "assigns",
    "to": 362
  }, {
    "from": 362,
    "label": "assigns",
    "to": 363
  }, {
    "from": 333,
    "label": "assigns",
    "to": 364
  }, {
    "from": 364,
    "label": "assigns",
    "to": 365
  }, {
    "from": 333,
    "label": "assigns",
    "to": 366
  }, {
    "from": 366,
    "label": "assigns",
    "to": 367
  }, {
    "from": 333,
    "label": "assigns",
    "to": 368
  }, {
    "from": 368,
    "label": "assigns",
    "to": 369
  }, {
    "from": 302,
    "label": "initializes",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 371,
    "label": "assigns",
    "to": 372
  }, {
    "from": 372,
    "label": "assigns",
    "to": 373
  }, {
    "from": 302,
    "label": "initializes",
    "to": 374
  }, {
    "from": 374,
    "label": "assigns",
    "to": 375
  }, {
    "from": 375,
    "label": "assigns",
    "to": 376
  }, {
    "from": 376,
    "label": "assigns",
    "to": 377
  }, {
    "from": 375,
    "label": "assigns",
    "to": 378
  }, {
    "from": 378,
    "label": "assigns",
    "to": 379
  }, {
    "from": 375,
    "label": "assigns",
    "to": 380
  }, {
    "from": 380,
    "label": "assigns",
    "to": 381
  }, {
    "from": 375,
    "label": "assigns",
    "to": 382
  }, {
    "from": 382,
    "label": "assigns",
    "to": 383
  }, {
    "from": 375,
    "label": "assigns",
    "to": 384
  }, {
    "from": 384,
    "label": "assigns",
    "to": 385
  }, {
    "from": 375,
    "label": "assigns",
    "to": 386
  }, {
    "from": 386,
    "label": "assigns",
    "to": 387
  }, {
    "from": 375,
    "label": "assigns",
    "to": 388
  }, {
    "from": 388,
    "label": "assigns",
    "to": 389
  }, {
    "from": 375,
    "label": "assigns",
    "to": 390
  }, {
    "from": 390,
    "label": "assigns",
    "to": 391
  }, {
    "from": 375,
    "label": "assigns",
    "to": 392
  }, {
    "from": 392,
    "label": "assigns",
    "to": 393
  }, {
    "from": 375,
    "label": "assigns",
    "to": 394
  }, {
    "from": 394,
    "label": "assigns",
    "to": 395
  }, {
    "from": 375,
    "label": "assigns",
    "to": 396
  }, {
    "from": 396,
    "label": "assigns",
    "to": 397
  }, {
    "from": 375,
    "label": "assigns",
    "to": 398
  }, {
    "from": 398,
    "label": "assigns",
    "to": 399
  }, {
    "from": 375,
    "label": "assigns",
    "to": 400
  }, {
    "from": 400,
    "label": "assigns",
    "to": 401
  }, {
    "from": 375,
    "label": "assigns",
    "to": 402
  }, {
    "from": 402,
    "label": "assigns",
    "to": 403
  }, {
    "from": 375,
    "label": "assigns",
    "to": 404
  }, {
    "from": 404,
    "label": "assigns",
    "to": 405
  }, {
    "from": 375,
    "label": "assigns",
    "to": 406
  }, {
    "from": 406,
    "label": "assigns",
    "to": 407
  }, {
    "from": 375,
    "label": "assigns",
    "to": 408
  }, {
    "from": 408,
    "label": "assigns",
    "to": 409
  }, {
    "from": 375,
    "label": "assigns",
    "to": 410
  }, {
    "from": 410,
    "label": "assigns",
    "to": 411
  }, {
    "from": 302,
    "label": "initializes",
    "to": 412
  }, {
    "from": 412,
    "label": "assigns",
    "to": 413
  }, {
    "from": 302,
    "label": "initializes",
    "to": 414
  }, {
    "from": 414,
    "label": "assigns",
    "to": 415
  }, {
    "from": 415,
    "label": "assigns",
    "to": 416
  }, {
    "from": 302,
    "label": "initializes",
    "to": 417
  }, {
    "from": 417,
    "label": "assigns",
    "to": 418
  }, {
    "from": 302,
    "label": "initializes",
    "to": 419
  }, {
    "from": 419,
    "label": "assigns",
    "to": 420
  }, {
    "from": 302,
    "label": "initializes",
    "to": 421
  }, {
    "from": 421,
    "label": "assigns",
    "to": 422
  }, {
    "from": 303,
    "label": "initializes",
    "to": 423
  }, {
    "from": 423,
    "label": "requires",
    "to": 3
  }, {
    "from": 303,
    "label": "initializes",
    "to": 424
  }, {
    "from": 424,
    "label": "requires",
    "to": 2
  }, {
    "from": 303,
    "label": "initializes",
    "to": 425
  }, {
    "from": 425,
    "label": "requires",
    "to": 4
  }, {
    "from": 303,
    "label": "initializes",
    "to": 426
  }, {
    "from": 426,
    "label": "requires",
    "to": 277
  }, {
    "from": 417,
    "label": "contains",
    "to": 5
  }, {
    "from": 417,
    "label": "contains",
    "to": 7
  }, {
    "from": 417,
    "label": "contains",
    "to": 8
  }, {
    "from": 417,
    "label": "contains",
    "to": 9
  }, {
    "from": 417,
    "label": "contains",
    "to": 10
  }, {
    "from": 417,
    "label": "contains",
    "to": 11
  }, {
    "from": 417,
    "label": "contains",
    "to": 12
  }, {
    "from": 417,
    "label": "contains",
    "to": 13
  }, {
    "from": 417,
    "label": "contains",
    "to": 14
  }, {
    "from": 417,
    "label": "contains",
    "to": 15
  }, {
    "from": 417,
    "label": "contains",
    "to": 16
  }, {
    "from": 417,
    "label": "contains",
    "to": 17
  }, {
    "from": 417,
    "label": "contains",
    "to": 18
  }, {
    "from": 417,
    "label": "contains",
    "to": 19
  }, {
    "from": 417,
    "label": "contains",
    "to": 20
  }, {
    "from": 417,
    "label": "contains",
    "to": 21
  }, {
    "from": 417,
    "label": "contains",
    "to": 22
  }, {
    "from": 417,
    "label": "contains",
    "to": 23
  }, {
    "from": 417,
    "label": "contains",
    "to": 24
  }, {
    "from": 417,
    "label": "contains",
    "to": 25
  }, {
    "from": 417,
    "label": "contains",
    "to": 26
  }, {
    "from": 417,
    "label": "contains",
    "to": 27
  }, {
    "from": 417,
    "label": "contains",
    "to": 28
  }, {
    "from": 417,
    "label": "contains",
    "to": 29
  }, {
    "from": 417,
    "label": "contains",
    "to": 30
  }, {
    "from": 417,
    "label": "contains",
    "to": 31
  }, {
    "from": 417,
    "label": "contains",
    "to": 32
  }, {
    "from": 417,
    "label": "contains",
    "to": 33
  }, {
    "from": 417,
    "label": "contains",
    "to": 34
  }, {
    "from": 417,
    "label": "contains",
    "to": 35
  }, {
    "from": 417,
    "label": "contains",
    "to": 36
  }, {
    "from": 417,
    "label": "contains",
    "to": 37
  }, {
    "from": 417,
    "label": "contains",
    "to": 38
  }, {
    "from": 417,
    "label": "contains",
    "to": 39
  }, {
    "from": 417,
    "label": "contains",
    "to": 40
  }, {
    "from": 417,
    "label": "contains",
    "to": 41
  }, {
    "from": 417,
    "label": "contains",
    "to": 42
  }, {
    "from": 417,
    "label": "contains",
    "to": 43
  }, {
    "from": 417,
    "label": "contains",
    "to": 44
  }, {
    "from": 417,
    "label": "contains",
    "to": 45
  }, {
    "from": 417,
    "label": "contains",
    "to": 46
  }, {
    "from": 417,
    "label": "contains",
    "to": 47
  }, {
    "from": 417,
    "label": "contains",
    "to": 48
  }, {
    "from": 417,
    "label": "contains",
    "to": 49
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "metalua-ast",
    "type": "module"
  }, {
    "id": 2,
    "text": "grammar",
    "type": "module"
  }, {
    "id": 3,
    "text": "parser",
    "type": "module"
  }, {
    "id": 4,
    "text": "scanner",
    "type": "module"
  }, {
    "id": 5,
    "text": "function builder.Break() return { tag = 'Break' } end",
    "type": "function"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "function builder.Return(...) return { tag = 'Return', ... } end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function builder.Do(block) return { tag = 'Do', block } end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function builder.Let(lhslist, exprlist) \n  return { tag = 'Let', lhslist, exprlist } \nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function builder.While(expr, block) return { tag = 'While', expr, block } end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function builder.Repeat(block, expr) return { tag = 'Repeat', block, expr } end",
    "type": "function"
  }, {
    "id": 12,
    "text": "function builder.If(...) return { tag = 'If', ... } end",
    "type": "function"
  }, {
    "id": 13,
    "text": "function builder.Fornum(var, index, limit, step, block) \n  return { tag = 'Fornum', var, index, limit, step or Number(1), block } \nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function builder.Forin(varlist, exprlist, block) \n  return { tag = 'Forin', varlist, exprlist, block } \nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function builder.Local(varlist, exprlist) \n  return { tag = 'Local', varlist, exprlist } \nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function builder.Localrec(varlist, exprlist) \n  return { tag = 'Localrec', varlist, exprlist }\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function builder.Call(func, ...) return { tag = 'Call', func, ... } end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function builder.Method(table, string, ...) \n  return { tag = 'Method', table, string, ... } \nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function builder.Nil() return { tag = 'Nil' } end",
    "type": "function"
  }, {
    "id": 20,
    "text": "function builder.Dots() return { tag = 'Dots' } end",
    "type": "function"
  }, {
    "id": 21,
    "text": "function builder.True() return { tag = 'True' } end",
    "type": "function"
  }, {
    "id": 22,
    "text": "function builder.False() return { tag = 'False' } end",
    "type": "function"
  }, {
    "id": 23,
    "text": "function builder.Number(number) return { tag = 'Number', number } end",
    "type": "function"
  }, {
    "id": 24,
    "text": "function builder.String(string) return { tag = 'String', string } end",
    "type": "function"
  }, {
    "id": 25,
    "text": "function builder.Function(parlist, block) \n  return { tag = 'Function', parlist, block } \nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function builder.Table(...) return { tag = 'Table', ... } end",
    "type": "function"
  }, {
    "id": 27,
    "text": "function builder.Key(key, value) return { tag = 'Key', key, value } end",
    "type": "function"
  }, {
    "id": 28,
    "text": "function builder.Op(op, value1, value2) \n  return { tag = 'Op', op, value1, value2 } \nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function builder.One(expr) return { tag = 'One', expr } end",
    "type": "function"
  }, {
    "id": 30,
    "text": "function builder.Id(identifier) return { tag = 'Id', identifier } end",
    "type": "function"
  }, {
    "id": 31,
    "text": "function builder.Index(table, index) return { tag = 'Index', table, index } end",
    "type": "function"
  }, {
    "id": 32,
    "text": "function builder.Add()    return { tag = 'Add' } end",
    "type": "function"
  }, {
    "id": 33,
    "text": "function builder.Sub()    return { tag = 'Sub' } end",
    "type": "function"
  }, {
    "id": 34,
    "text": "function builder.Mul()    return { tag = 'Mul' } end",
    "type": "function"
  }, {
    "id": 35,
    "text": "function builder.Div()    return { tag = 'Div' } end",
    "type": "function"
  }, {
    "id": 36,
    "text": "function builder.Mod()    return { tag = 'Mod' } end",
    "type": "function"
  }, {
    "id": 37,
    "text": "function builder.Pow()    return { tag = 'Pow' } end",
    "type": "function"
  }, {
    "id": 38,
    "text": "function builder.Concat() return { tag = 'Concat' } end",
    "type": "function"
  }, {
    "id": 39,
    "text": "function builder.Eq()     return { tag = 'Eq' } end",
    "type": "function"
  }, {
    "id": 40,
    "text": "function builder.Ne()     return { tag = 'Ne' } end",
    "type": "function"
  }, {
    "id": 41,
    "text": "function builder.Gt()     return { tag = 'Gt' } end",
    "type": "function"
  }, {
    "id": 42,
    "text": "function builder.Ge()     return { tag = 'Ge' } end",
    "type": "function"
  }, {
    "id": 43,
    "text": "function builder.Lt()     return { tag = 'Lt' } end",
    "type": "function"
  }, {
    "id": 44,
    "text": "function builder.Le()     return { tag = 'Le' } end",
    "type": "function"
  }, {
    "id": 45,
    "text": "function builder.And()    return { tag = 'And' } end",
    "type": "function"
  }, {
    "id": 46,
    "text": "function builder.Or()     return { tag = 'Or' } end",
    "type": "function"
  }, {
    "id": 47,
    "text": "function builder.Not()    return { tag = 'Not' } end",
    "type": "function"
  }, {
    "id": 48,
    "text": "function builder.Len()    return { tag = 'Len' } end",
    "type": "function"
  }, {
    "id": 49,
    "text": "function builder.Unm()    return { tag = 'Unm' } end",
    "type": "function"
  }, {
    "id": 50,
    "text": "local function isOperator(node)\n  return node and ops[node.tag] \nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local function isUnary(node)\n  return isOperator(node) and ops[node.tag].arity == 1\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local function isBinary(node)\n  return isOperator(node) and ops[node.tag].arity == 2\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local function toRPN(list)\n  local queue = {}\n  local stack = {}\n  \n  for _, v in ipairs(list) do\n    if isBinary(v) or isUnary(v) then\n      local vPrec, topPrec\n      \n      if stack[#stack] then\n        vPrec, topPrec = ops[v.tag].precedence, \n                         ops[stack[#stack][1].tag].precedence\n      end\n      \n      while stack[#stack] and ((ops[v.tag].right and vPrec < topPrec)\n        or (ops[v.tag].left and vPrec <= topPrec)) do\n        \n        queue[#queue + 1] = table.remove(stack)\n      end\n      \n      stack[#stack + 1] = builder.Op(v)\n    else\n      queue[#queue + 1] = v\n    end\n  end\n  \n  -- dumping the stack\n  for i = #stack, 1, -1 do\n    queue[#queue + 1] = stack[i]\n  end\n  \n  return queue\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local queue = {}",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local stack = {}",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for _, v in ipairs(list) do\n    if isBinary(v) or isUnary(v) then\n      local vPrec, topPrec\n      \n      if stack[#stack] then\n        vPrec, topPrec = ops[v.tag].precedence, \n                         ops[stack[#stack][1].tag].precedence\n      end\n      \n      while stack[#stack] and ((ops[v.tag].right and vPrec < topPrec)\n        or (ops[v.tag].left and vPrec <= topPrec)) do\n        \n        queue[#queue + 1] = table.remove(stack)\n      end\n      \n      stack[#stack + 1] = builder.Op(v)\n    else\n      queue[#queue + 1] = v\n    end\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "if isBinary(v) or isUnary(v) then\n      local vPrec, topPrec\n      \n      if stack[#stack] then\n        vPrec, topPrec = ops[v.tag].precedence, \n                         ops[stack[#stack][1].tag].precedence\n      end\n      \n      while stack[#stack] and ((ops[v.tag].right and vPrec < topPrec)\n        or (ops[v.tag].left and vPrec <= topPrec)) do\n        \n        queue[#queue + 1] = table.remove(stack)\n      end\n      \n      stack[#stack + 1] = builder.Op(v)\n    else\n      queue[#queue + 1] = v\n    end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "local vPrec, topPrec",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if stack[#stack] then\n        vPrec, topPrec = ops[v.tag].precedence, \n                         ops[stack[#stack][1].tag].precedence\n      end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "vPrec, topPrec = ops[v.tag].precedence, \n                         ops[stack[#stack][1].tag].precedence",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "while stack[#stack] and ((ops[v.tag].right and vPrec < topPrec)\n        or (ops[v.tag].left and vPrec <= topPrec)) do\n        \n        queue[#queue + 1] = table.remove(stack)\n      end",
    "type": "statement:while"
  }, {
    "id": 62,
    "text": "queue[#queue + 1] = table.remove(stack)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "stack[#stack + 1] = builder.Op(v)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "queue[#queue + 1] = v",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "for i = #stack, 1, -1 do\n    queue[#queue + 1] = stack[i]\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 66,
    "text": "queue[#queue + 1] = stack[i]",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function MethodDecl(Index, Method)\n  return { tag = 'MethodDecl', Index, Method }\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "function build(input)\n  local result, msg = parser.check(input) \r\n  \r\n  if result then return patt:match(input)\r\n  else error(msg) end\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local result, msg = parser.check(input)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if result then return patt:match(input)\r\n  else error(msg) end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "error(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "local function ast2string(t, ...)\n  local LINE_MAX, PRINT_HASH = math.huge, true\n  for _, x in ipairs {...} do\n    if type(x) == \"number\" then LINE_MAX = x\n    elseif x==\"nohash\" then PRINT_HASH = false\n    end\n  end\n\n  local current_offset =  0  -- indentation level\n  local xlen_cache     = { } -- cached results for xlen()\n  local acc_list       = { } -- Generated bits of string\n  local function acc(...)    -- Accumulate a bit of string\n    local x = table.concat{...}\n    current_offset = current_offset + #x\n    table.insert(acc_list, x) \n  end\n  local function valid_id(x)\n    -- FIXME: we should also reject keywords.\n    return type(x) == \"string\" and scanner.IDENTIFIER:match(x)\n  end\n  local function shallowcopy(t)\n    local newt = {}\n    \n    for k, v in pairs(t) do\n      newt[k] = v\n    end\n    \n    return newt\n  end\n\n  -- Compute the number of chars it would require to display the table\n  -- as a single line. Helps to decide whether some carriage returns are\n  -- required. Since the size of each sub-table is required many times,\n  -- it's cached in [xlen_cache].\n  local xlen_type = { }\n  local function xlen(x, tracker)\n    tracker = tracker or { }\n    if x==nil then return #\"nil\" end\n    if tracker[x] then return #_G.tostring(x) end\n    local len = xlen_cache[x]\n    if len then return len end\n    local f = xlen_type[type(x)]\n    if not f then return #_G.tostring(x) end\n    len = f (x, tracker) \n    xlen_cache[x] = len\n    return len\n  end\n\n  -- optim: no need to compute lengths if I'm not going to use them\n  -- anyway.\n  if LINE_MAX == math.huge then xlen = function() return 0 end end\n\n  xlen_type[\"nil\"] = function() return 3 end\n  function xlen_type.number(x)  return #_G.tostring(x) end\n  function xlen_type.boolean(x) return x and 4 or 5 end\n  function xlen_type.string(x)  return #string.format(\"%q\",x) end\n  function xlen_type.table (adt, tracker)\n\n    -- Circular references detection\n    tracker = shallowcopy(tracker)\n    tracker [adt]  = true \n\n    local has_tag  = valid_id(adt.tag)\n    local alen     = #adt\n    local has_arr  = alen>0\n    local has_hash = false\n    local x = 0\n    \n    if PRINT_HASH then\n       -- first pass: count hash-part\n       for k, v in pairs(adt) do\n          if k==\"tag\" and has_tag then \n             -- this is the tag -> do nothing!\n          elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then \n             -- array-part pair -> do nothing!\n          else\n             has_hash = true\n             if valid_id(k) then x=x+#k\n             else x = x + xlen (k, tracker) + 2 end -- count surrounding barckets\n             x = x + xlen (v, tracker) + 5          -- count \" = \" and \", \"\n          end\n       end\n    end\n\n    for i = 1, alen do x = x + xlen (adt[i], tracker) + 2 end -- count \", \"\n    \n    if not (has_tag or has_arr or has_hash) then return 3 end\n    if has_tag then x=x+#adt.tag+1 end\n    if not (has_arr or has_hash) then return x end\n    if not has_hash and alen==1 and type(adt[1])~=\"table\" then\n       return x-2 -- substract extraneous \", \"\n    end\n    return x+2 -- count \"{ \" and \" }\", substract extraneous \", \"\n  end\n\n  -- Recursively print a (sub) table at given indentation level.\n  -- [newline] indicates whether newlines should be inserted.\n  local function rec (adt, indent, tracker)\n    local function acc_newline()\n       acc (\"\\n\"); acc (string.rep (\" \", indent)) \n       current_offset = indent\n    end\n    local x = { }\n    x[\"nil\"] = function() acc \"nil\" end\n    function x.number()   acc (_G.tostring (adt)) end\n    function x.string()   acc (string.format (\"%q\", adt)) end\n    function x.boolean()  acc (adt and \"true\" or \"false\") end\n    function x.table()\n       tracker[adt]   = true\n       local has_tag  = valid_id(adt.tag)\n       local alen     = #adt\n       local has_arr  = alen>0\n       local has_hash = false\n       local new_indent\n       if has_tag then acc(\"`\"); acc(adt.tag) end\n\n       -- First pass: handle hash-part\n       if PRINT_HASH then\n          for k, v in pairs(adt) do\n             if k==\"tag\" and has_tag then -- this is the tag -> do nothing!\n             elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then\n                -- nothing: this an array-part pair, parsed later\n             else  -- hash-part pair\n\n                -- Is it the first time we parse a hash pair?\n                if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end\n\n                -- Determine whether a newline is required\n                local is_id, expected_len = valid_id(k)\n                if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end\n                if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end\n                \n                -- Print the key\n                if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end\n\n                -- Print the value\n                rec (v, current_offset, tracker)\n                has_hash = true\n             end\n          end\n       end\n\n       -- now we know whether there's a hash-part, an array-part, and a tag.\n       -- Tag and hash-part are already printed if they're present.\n       if not has_tag and not has_hash and not has_arr then acc \"{ }\"; return\n       elseif has_tag and not has_hash and not has_arr then return -- nothing!\n       else -- has_hash or has_arr\n          if has_hash and has_arr then acc \", \" \n          elseif has_tag and not has_hash and alen==1 and type(adt[1])~=\"table\" then\n            -- No brace required; don't print \"{\" and return before printing \"}\"\n            acc (\" \"); rec (adt[1], new_indent, tracker); return\n          elseif not has_hash then\n            -- Braces required, but not opened by hash-part handler yet\n            acc \"{ \"; indent = current_offset \n          end\n\n          -- 2nd pass: array-part\n          if has_arr then \n            rec (adt[1], new_indent, tracker)\n            for i=2, alen do \n              acc \", \";                   \n              if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end\n              rec (adt[i], new_indent, tracker) \n            end\n          end\n          acc \" }\"\n       end\n    end\n    local y = x[type(adt)]\n    if y then y() else acc(_G.tostring(adt)) end\n  end\n  rec(t, 0, { })\n  return table.concat (acc_list)\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local LINE_MAX, PRINT_HASH = math.huge, true",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "for _, x in ipairs {...} do\n    if type(x) == \"number\" then LINE_MAX = x\n    elseif x==\"nohash\" then PRINT_HASH = false\n    end\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 77,
    "text": "if type(x) == \"number\" then LINE_MAX = x\n    elseif x==\"nohash\" then PRINT_HASH = false\n    end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "LINE_MAX = x",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "PRINT_HASH = false",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "local current_offset =  0",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local xlen_cache     = { }",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local acc_list       = { }",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local function acc(...)    -- Accumulate a bit of string\n    local x = table.concat{...}\n    current_offset = current_offset + #x\n    table.insert(acc_list, x) \n  end",
    "type": "statement:localfunction"
  }, {
    "id": 84,
    "text": "local x = table.concat{...}",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "current_offset = current_offset + #x",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "table.insert(acc_list, x)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "local function valid_id(x)\n    -- FIXME: we should also reject keywords.\n    return type(x) == \"string\" and scanner.IDENTIFIER:match(x)\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 88,
    "text": "local function shallowcopy(t)\n    local newt = {}\n    \n    for k, v in pairs(t) do\n      newt[k] = v\n    end\n    \n    return newt\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 89,
    "text": "local newt = {}",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "for k, v in pairs(t) do\n      newt[k] = v\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "newt[k] = v",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local xlen_type = { }",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local function xlen(x, tracker)\n    tracker = tracker or { }\n    if x==nil then return #\"nil\" end\n    if tracker[x] then return #_G.tostring(x) end\n    local len = xlen_cache[x]\n    if len then return len end\n    local f = xlen_type[type(x)]\n    if not f then return #_G.tostring(x) end\n    len = f (x, tracker) \n    xlen_cache[x] = len\n    return len\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 94,
    "text": "tracker = tracker or { }",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if x==nil then return #\"nil\" end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "if tracker[x] then return #_G.tostring(x) end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "local len = xlen_cache[x]",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if len then return len end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "local f = xlen_type[type(x)]",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if not f then return #_G.tostring(x) end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "len = f (x, tracker)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "xlen_cache[x] = len",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "if LINE_MAX == math.huge then xlen = function() return 0 end end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "xlen = function() return 0 end",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "xlen_type[\"nil\"] = function() return 3 end",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "function xlen_type.number(x)  return #_G.tostring(x) end",
    "type": "statement:globalfunction"
  }, {
    "id": 107,
    "text": "function xlen_type.boolean(x) return x and 4 or 5 end",
    "type": "statement:globalfunction"
  }, {
    "id": 108,
    "text": "function xlen_type.string(x)  return #string.format(\"%q\",x) end",
    "type": "statement:globalfunction"
  }, {
    "id": 109,
    "text": "function xlen_type.table (adt, tracker)\n\n    -- Circular references detection\n    tracker = shallowcopy(tracker)\n    tracker [adt]  = true \n\n    local has_tag  = valid_id(adt.tag)\n    local alen     = #adt\n    local has_arr  = alen>0\n    local has_hash = false\n    local x = 0\n    \n    if PRINT_HASH then\n       -- first pass: count hash-part\n       for k, v in pairs(adt) do\n          if k==\"tag\" and has_tag then \n             -- this is the tag -> do nothing!\n          elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then \n             -- array-part pair -> do nothing!\n          else\n             has_hash = true\n             if valid_id(k) then x=x+#k\n             else x = x + xlen (k, tracker) + 2 end -- count surrounding barckets\n             x = x + xlen (v, tracker) + 5          -- count \" = \" and \", \"\n          end\n       end\n    end\n\n    for i = 1, alen do x = x + xlen (adt[i], tracker) + 2 end -- count \", \"\n    \n    if not (has_tag or has_arr or has_hash) then return 3 end\n    if has_tag then x=x+#adt.tag+1 end\n    if not (has_arr or has_hash) then return x end\n    if not has_hash and alen==1 and type(adt[1])~=\"table\" then\n       return x-2 -- substract extraneous \", \"\n    end\n    return x+2 -- count \"{ \" and \" }\", substract extraneous \", \"\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 110,
    "text": "tracker = shallowcopy(tracker)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "tracker [adt]  = true",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "local has_tag  = valid_id(adt.tag)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "local alen     = #adt",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local has_arr  = alen>0",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "local has_hash = false",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "local x = 0",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if PRINT_HASH then\n       -- first pass: count hash-part\n       for k, v in pairs(adt) do\n          if k==\"tag\" and has_tag then \n             -- this is the tag -> do nothing!\n          elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then \n             -- array-part pair -> do nothing!\n          else\n             has_hash = true\n             if valid_id(k) then x=x+#k\n             else x = x + xlen (k, tracker) + 2 end -- count surrounding barckets\n             x = x + xlen (v, tracker) + 5          -- count \" = \" and \", \"\n          end\n       end\n    end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "for k, v in pairs(adt) do\n          if k==\"tag\" and has_tag then \n             -- this is the tag -> do nothing!\n          elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then \n             -- array-part pair -> do nothing!\n          else\n             has_hash = true\n             if valid_id(k) then x=x+#k\n             else x = x + xlen (k, tracker) + 2 end -- count surrounding barckets\n             x = x + xlen (v, tracker) + 5          -- count \" = \" and \", \"\n          end\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 119,
    "text": "if k==\"tag\" and has_tag then \n             -- this is the tag -> do nothing!\n          elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then \n             -- array-part pair -> do nothing!\n          else\n             has_hash = true\n             if valid_id(k) then x=x+#k\n             else x = x + xlen (k, tracker) + 2 end -- count surrounding barckets\n             x = x + xlen (v, tracker) + 5          -- count \" = \" and \", \"\n          end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "has_hash = true",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "if valid_id(k) then x=x+#k\n             else x = x + xlen (k, tracker) + 2 end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "x=x+#k",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "x = x + xlen (k, tracker) + 2",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "x = x + xlen (v, tracker) + 5",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "for i = 1, alen do x = x + xlen (adt[i], tracker) + 2 end",
    "type": "statement:numericfor"
  }, {
    "id": 126,
    "text": "x = x + xlen (adt[i], tracker) + 2",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if not (has_tag or has_arr or has_hash) then return 3 end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "if has_tag then x=x+#adt.tag+1 end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "x=x+#adt.tag+1",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "if not (has_arr or has_hash) then return x end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "if not has_hash and alen==1 and type(adt[1])~=\"table\" then\n       return x-2 -- substract extraneous \", \"\n    end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "local function rec (adt, indent, tracker)\n    local function acc_newline()\n       acc (\"\\n\"); acc (string.rep (\" \", indent)) \n       current_offset = indent\n    end\n    local x = { }\n    x[\"nil\"] = function() acc \"nil\" end\n    function x.number()   acc (_G.tostring (adt)) end\n    function x.string()   acc (string.format (\"%q\", adt)) end\n    function x.boolean()  acc (adt and \"true\" or \"false\") end\n    function x.table()\n       tracker[adt]   = true\n       local has_tag  = valid_id(adt.tag)\n       local alen     = #adt\n       local has_arr  = alen>0\n       local has_hash = false\n       local new_indent\n       if has_tag then acc(\"`\"); acc(adt.tag) end\n\n       -- First pass: handle hash-part\n       if PRINT_HASH then\n          for k, v in pairs(adt) do\n             if k==\"tag\" and has_tag then -- this is the tag -> do nothing!\n             elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then\n                -- nothing: this an array-part pair, parsed later\n             else  -- hash-part pair\n\n                -- Is it the first time we parse a hash pair?\n                if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end\n\n                -- Determine whether a newline is required\n                local is_id, expected_len = valid_id(k)\n                if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end\n                if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end\n                \n                -- Print the key\n                if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end\n\n                -- Print the value\n                rec (v, current_offset, tracker)\n                has_hash = true\n             end\n          end\n       end\n\n       -- now we know whether there's a hash-part, an array-part, and a tag.\n       -- Tag and hash-part are already printed if they're present.\n       if not has_tag and not has_hash and not has_arr then acc \"{ }\"; return\n       elseif has_tag and not has_hash and not has_arr then return -- nothing!\n       else -- has_hash or has_arr\n          if has_hash and has_arr then acc \", \" \n          elseif has_tag and not has_hash and alen==1 and type(adt[1])~=\"table\" then\n            -- No brace required; don't print \"{\" and return before printing \"}\"\n            acc (\" \"); rec (adt[1], new_indent, tracker); return\n          elseif not has_hash then\n            -- Braces required, but not opened by hash-part handler yet\n            acc \"{ \"; indent = current_offset \n          end\n\n          -- 2nd pass: array-part\n          if has_arr then \n            rec (adt[1], new_indent, tracker)\n            for i=2, alen do \n              acc \", \";                   \n              if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end\n              rec (adt[i], new_indent, tracker) \n            end\n          end\n          acc \" }\"\n       end\n    end\n    local y = x[type(adt)]\n    if y then y() else acc(_G.tostring(adt)) end\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 133,
    "text": "local function acc_newline()\n       acc (\"\\n\"); acc (string.rep (\" \", indent)) \n       current_offset = indent\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 134,
    "text": "acc (\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "acc (string.rep (\" \", indent))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "current_offset = indent",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "local x = { }",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "x[\"nil\"] = function() acc \"nil\" end",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "acc \"nil\"",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "function x.number()   acc (_G.tostring (adt)) end",
    "type": "statement:globalfunction"
  }, {
    "id": 141,
    "text": "acc (_G.tostring (adt))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "function x.string()   acc (string.format (\"%q\", adt)) end",
    "type": "statement:globalfunction"
  }, {
    "id": 143,
    "text": "acc (string.format (\"%q\", adt))",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "function x.boolean()  acc (adt and \"true\" or \"false\") end",
    "type": "statement:globalfunction"
  }, {
    "id": 145,
    "text": "acc (adt and \"true\" or \"false\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "function x.table()\n       tracker[adt]   = true\n       local has_tag  = valid_id(adt.tag)\n       local alen     = #adt\n       local has_arr  = alen>0\n       local has_hash = false\n       local new_indent\n       if has_tag then acc(\"`\"); acc(adt.tag) end\n\n       -- First pass: handle hash-part\n       if PRINT_HASH then\n          for k, v in pairs(adt) do\n             if k==\"tag\" and has_tag then -- this is the tag -> do nothing!\n             elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then\n                -- nothing: this an array-part pair, parsed later\n             else  -- hash-part pair\n\n                -- Is it the first time we parse a hash pair?\n                if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end\n\n                -- Determine whether a newline is required\n                local is_id, expected_len = valid_id(k)\n                if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end\n                if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end\n                \n                -- Print the key\n                if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end\n\n                -- Print the value\n                rec (v, current_offset, tracker)\n                has_hash = true\n             end\n          end\n       end\n\n       -- now we know whether there's a hash-part, an array-part, and a tag.\n       -- Tag and hash-part are already printed if they're present.\n       if not has_tag and not has_hash and not has_arr then acc \"{ }\"; return\n       elseif has_tag and not has_hash and not has_arr then return -- nothing!\n       else -- has_hash or has_arr\n          if has_hash and has_arr then acc \", \" \n          elseif has_tag and not has_hash and alen==1 and type(adt[1])~=\"table\" then\n            -- No brace required; don't print \"{\" and return before printing \"}\"\n            acc (\" \"); rec (adt[1], new_indent, tracker); return\n          elseif not has_hash then\n            -- Braces required, but not opened by hash-part handler yet\n            acc \"{ \"; indent = current_offset \n          end\n\n          -- 2nd pass: array-part\n          if has_arr then \n            rec (adt[1], new_indent, tracker)\n            for i=2, alen do \n              acc \", \";                   \n              if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end\n              rec (adt[i], new_indent, tracker) \n            end\n          end\n          acc \" }\"\n       end\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 147,
    "text": "tracker[adt]   = true",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "local new_indent",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "if has_tag then acc(\"`\"); acc(adt.tag) end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "acc(\"`\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "acc(adt.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "if PRINT_HASH then\n          for k, v in pairs(adt) do\n             if k==\"tag\" and has_tag then -- this is the tag -> do nothing!\n             elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then\n                -- nothing: this an array-part pair, parsed later\n             else  -- hash-part pair\n\n                -- Is it the first time we parse a hash pair?\n                if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end\n\n                -- Determine whether a newline is required\n                local is_id, expected_len = valid_id(k)\n                if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end\n                if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end\n                \n                -- Print the key\n                if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end\n\n                -- Print the value\n                rec (v, current_offset, tracker)\n                has_hash = true\n             end\n          end\n       end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "for k, v in pairs(adt) do\n             if k==\"tag\" and has_tag then -- this is the tag -> do nothing!\n             elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then\n                -- nothing: this an array-part pair, parsed later\n             else  -- hash-part pair\n\n                -- Is it the first time we parse a hash pair?\n                if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end\n\n                -- Determine whether a newline is required\n                local is_id, expected_len = valid_id(k)\n                if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end\n                if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end\n                \n                -- Print the key\n                if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end\n\n                -- Print the value\n                rec (v, current_offset, tracker)\n                has_hash = true\n             end\n          end",
    "type": "statement:genericfor"
  }, {
    "id": 154,
    "text": "if k==\"tag\" and has_tag then -- this is the tag -> do nothing!\n             elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then\n                -- nothing: this an array-part pair, parsed later\n             else  -- hash-part pair\n\n                -- Is it the first time we parse a hash pair?\n                if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end\n\n                -- Determine whether a newline is required\n                local is_id, expected_len = valid_id(k)\n                if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end\n                if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end\n                \n                -- Print the key\n                if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end\n\n                -- Print the value\n                rec (v, current_offset, tracker)\n                has_hash = true\n             end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "acc \"{ \"",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "indent = current_offset",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "acc \", \"",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "local is_id, expected_len = valid_id(k)",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "expected_len = #k + xlen (v, tracker) + #\" = , \"",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \"",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "acc_newline()",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "acc(k)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "acc \" = \"",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "acc \"[\"",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "rec (k, current_offset, tracker)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "acc \"] = \"",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "rec (v, current_offset, tracker)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "if not has_tag and not has_hash and not has_arr then acc \"{ }\"; return\n       elseif has_tag and not has_hash and not has_arr then return -- nothing!\n       else -- has_hash or has_arr\n          if has_hash and has_arr then acc \", \" \n          elseif has_tag and not has_hash and alen==1 and type(adt[1])~=\"table\" then\n            -- No brace required; don't print \"{\" and return before printing \"}\"\n            acc (\" \"); rec (adt[1], new_indent, tracker); return\n          elseif not has_hash then\n            -- Braces required, but not opened by hash-part handler yet\n            acc \"{ \"; indent = current_offset \n          end\n\n          -- 2nd pass: array-part\n          if has_arr then \n            rec (adt[1], new_indent, tracker)\n            for i=2, alen do \n              acc \", \";                   \n              if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end\n              rec (adt[i], new_indent, tracker) \n            end\n          end\n          acc \" }\"\n       end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "acc \"{ }\"",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "if has_hash and has_arr then acc \", \" \n          elseif has_tag and not has_hash and alen==1 and type(adt[1])~=\"table\" then\n            -- No brace required; don't print \"{\" and return before printing \"}\"\n            acc (\" \"); rec (adt[1], new_indent, tracker); return\n          elseif not has_hash then\n            -- Braces required, but not opened by hash-part handler yet\n            acc \"{ \"; indent = current_offset \n          end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "acc (\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "rec (adt[1], new_indent, tracker)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "if has_arr then \n            rec (adt[1], new_indent, tracker)\n            for i=2, alen do \n              acc \", \";                   \n              if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end\n              rec (adt[i], new_indent, tracker) \n            end\n          end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "for i=2, alen do \n              acc \", \";                   \n              if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end\n              rec (adt[i], new_indent, tracker) \n            end",
    "type": "statement:numericfor"
  }, {
    "id": 179,
    "text": "if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "rec (adt[i], new_indent, tracker)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "acc \" }\"",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "local y = x[type(adt)]",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "if y then y() else acc(_G.tostring(adt)) end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "y()",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "acc(_G.tostring(adt))",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "rec(t, 0, { })",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "local function acc(...)    -- Accumulate a bit of string\n    local x = table.concat{...}\n    current_offset = current_offset + #x\n    table.insert(acc_list, x) \n  end",
    "type": "function"
  }, {
    "id": 189,
    "text": "local function valid_id(x)\n    -- FIXME: we should also reject keywords.\n    return type(x) == \"string\" and scanner.IDENTIFIER:match(x)\n  end",
    "type": "function"
  }, {
    "id": 190,
    "text": "local function shallowcopy(t)\n    local newt = {}\n    \n    for k, v in pairs(t) do\n      newt[k] = v\n    end\n    \n    return newt\n  end",
    "type": "function"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "local function xlen(x, tracker)\n    tracker = tracker or { }\n    if x==nil then return #\"nil\" end\n    if tracker[x] then return #_G.tostring(x) end\n    local len = xlen_cache[x]\n    if len then return len end\n    local f = xlen_type[type(x)]\n    if not f then return #_G.tostring(x) end\n    len = f (x, tracker) \n    xlen_cache[x] = len\n    return len\n  end",
    "type": "function"
  }, {
    "id": 193,
    "text": "function() return 0 end",
    "type": "function"
  }, {
    "id": 194,
    "text": "function() return 3 end",
    "type": "function"
  }, {
    "id": 195,
    "text": "function xlen_type.number(x)  return #_G.tostring(x) end",
    "type": "function"
  }, {
    "id": 196,
    "text": "function xlen_type.boolean(x) return x and 4 or 5 end",
    "type": "function"
  }, {
    "id": 197,
    "text": "function xlen_type.string(x)  return #string.format(\"%q\",x) end",
    "type": "function"
  }, {
    "id": 198,
    "text": "function xlen_type.table (adt, tracker)\n\n    -- Circular references detection\n    tracker = shallowcopy(tracker)\n    tracker [adt]  = true \n\n    local has_tag  = valid_id(adt.tag)\n    local alen     = #adt\n    local has_arr  = alen>0\n    local has_hash = false\n    local x = 0\n    \n    if PRINT_HASH then\n       -- first pass: count hash-part\n       for k, v in pairs(adt) do\n          if k==\"tag\" and has_tag then \n             -- this is the tag -> do nothing!\n          elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then \n             -- array-part pair -> do nothing!\n          else\n             has_hash = true\n             if valid_id(k) then x=x+#k\n             else x = x + xlen (k, tracker) + 2 end -- count surrounding barckets\n             x = x + xlen (v, tracker) + 5          -- count \" = \" and \", \"\n          end\n       end\n    end\n\n    for i = 1, alen do x = x + xlen (adt[i], tracker) + 2 end -- count \", \"\n    \n    if not (has_tag or has_arr or has_hash) then return 3 end\n    if has_tag then x=x+#adt.tag+1 end\n    if not (has_arr or has_hash) then return x end\n    if not has_hash and alen==1 and type(adt[1])~=\"table\" then\n       return x-2 -- substract extraneous \", \"\n    end\n    return x+2 -- count \"{ \" and \" }\", substract extraneous \", \"\n  end",
    "type": "function"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "local function rec (adt, indent, tracker)\n    local function acc_newline()\n       acc (\"\\n\"); acc (string.rep (\" \", indent)) \n       current_offset = indent\n    end\n    local x = { }\n    x[\"nil\"] = function() acc \"nil\" end\n    function x.number()   acc (_G.tostring (adt)) end\n    function x.string()   acc (string.format (\"%q\", adt)) end\n    function x.boolean()  acc (adt and \"true\" or \"false\") end\n    function x.table()\n       tracker[adt]   = true\n       local has_tag  = valid_id(adt.tag)\n       local alen     = #adt\n       local has_arr  = alen>0\n       local has_hash = false\n       local new_indent\n       if has_tag then acc(\"`\"); acc(adt.tag) end\n\n       -- First pass: handle hash-part\n       if PRINT_HASH then\n          for k, v in pairs(adt) do\n             if k==\"tag\" and has_tag then -- this is the tag -> do nothing!\n             elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then\n                -- nothing: this an array-part pair, parsed later\n             else  -- hash-part pair\n\n                -- Is it the first time we parse a hash pair?\n                if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end\n\n                -- Determine whether a newline is required\n                local is_id, expected_len = valid_id(k)\n                if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end\n                if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end\n                \n                -- Print the key\n                if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end\n\n                -- Print the value\n                rec (v, current_offset, tracker)\n                has_hash = true\n             end\n          end\n       end\n\n       -- now we know whether there's a hash-part, an array-part, and a tag.\n       -- Tag and hash-part are already printed if they're present.\n       if not has_tag and not has_hash and not has_arr then acc \"{ }\"; return\n       elseif has_tag and not has_hash and not has_arr then return -- nothing!\n       else -- has_hash or has_arr\n          if has_hash and has_arr then acc \", \" \n          elseif has_tag and not has_hash and alen==1 and type(adt[1])~=\"table\" then\n            -- No brace required; don't print \"{\" and return before printing \"}\"\n            acc (\" \"); rec (adt[1], new_indent, tracker); return\n          elseif not has_hash then\n            -- Braces required, but not opened by hash-part handler yet\n            acc \"{ \"; indent = current_offset \n          end\n\n          -- 2nd pass: array-part\n          if has_arr then \n            rec (adt[1], new_indent, tracker)\n            for i=2, alen do \n              acc \", \";                   \n              if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end\n              rec (adt[i], new_indent, tracker) \n            end\n          end\n          acc \" }\"\n       end\n    end\n    local y = x[type(adt)]\n    if y then y() else acc(_G.tostring(adt)) end\n  end",
    "type": "function"
  }, {
    "id": 201,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 202,
    "text": "local function acc_newline()\n       acc (\"\\n\"); acc (string.rep (\" \", indent)) \n       current_offset = indent\n    end",
    "type": "function"
  }, {
    "id": 203,
    "text": "function() acc \"nil\" end",
    "type": "function"
  }, {
    "id": 204,
    "text": "function x.number()   acc (_G.tostring (adt)) end",
    "type": "function"
  }, {
    "id": 205,
    "text": "function x.string()   acc (string.format (\"%q\", adt)) end",
    "type": "function"
  }, {
    "id": 206,
    "text": "function x.boolean()  acc (adt and \"true\" or \"false\") end",
    "type": "function"
  }, {
    "id": 207,
    "text": "function x.table()\n       tracker[adt]   = true\n       local has_tag  = valid_id(adt.tag)\n       local alen     = #adt\n       local has_arr  = alen>0\n       local has_hash = false\n       local new_indent\n       if has_tag then acc(\"`\"); acc(adt.tag) end\n\n       -- First pass: handle hash-part\n       if PRINT_HASH then\n          for k, v in pairs(adt) do\n             if k==\"tag\" and has_tag then -- this is the tag -> do nothing!\n             elseif type(k)==\"number\" and k<=alen and math.fmod(k,1)==0 then\n                -- nothing: this an array-part pair, parsed later\n             else  -- hash-part pair\n\n                -- Is it the first time we parse a hash pair?\n                if not has_hash then acc \"{ \"; indent = current_offset\n                else acc \", \" end\n\n                -- Determine whether a newline is required\n                local is_id, expected_len = valid_id(k)\n                if is_id then expected_len = #k + xlen (v, tracker) + #\" = , \"\n                else expected_len = xlen (k, tracker) + \n                                    xlen (v, tracker) + #\"[] = , \" end\n                if has_hash and expected_len + current_offset > LINE_MAX\n                then acc_newline() end\n                \n                -- Print the key\n                if is_id then acc(k); acc \" = \" \n                else  acc \"[\"; rec (k, current_offset, tracker); acc \"] = \" end\n\n                -- Print the value\n                rec (v, current_offset, tracker)\n                has_hash = true\n             end\n          end\n       end\n\n       -- now we know whether there's a hash-part, an array-part, and a tag.\n       -- Tag and hash-part are already printed if they're present.\n       if not has_tag and not has_hash and not has_arr then acc \"{ }\"; return\n       elseif has_tag and not has_hash and not has_arr then return -- nothing!\n       else -- has_hash or has_arr\n          if has_hash and has_arr then acc \", \" \n          elseif has_tag and not has_hash and alen==1 and type(adt[1])~=\"table\" then\n            -- No brace required; don't print \"{\" and return before printing \"}\"\n            acc (\" \"); rec (adt[1], new_indent, tracker); return\n          elseif not has_hash then\n            -- Braces required, but not opened by hash-part handler yet\n            acc \"{ \"; indent = current_offset \n          end\n\n          -- 2nd pass: array-part\n          if has_arr then \n            rec (adt[1], new_indent, tracker)\n            for i=2, alen do \n              acc \", \";                   \n              if   current_offset + xlen (adt[i], { }) > LINE_MAX\n              then acc_newline() end\n              rec (adt[i], new_indent, tracker) \n            end\n          end\n          acc \" }\"\n       end\n    end",
    "type": "function"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function (...)\n    local Block = { ... }\n    \n    -- if the captured block has no statements, Block will contain { '' }.\n    -- Detect that and return an empty table in that case\n    if #Block == 1 and Block[1] == '' then\n      return {}\n    end\n    \n    return Block\n  end",
    "type": "function"
  }, {
    "id": 210,
    "text": "local Block = { ... }",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "if #Block == 1 and Block[1] == '' then\n      return {}\n    end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function (FuncName, FuncBody)\n    if FuncName.tag == 'MethodDecl' then -- it's a method declaration\n      -- a method declaration like 'function b:o() <...> end' is equivalent to\n      -- 'b.o = function (self) <...> end'\n    \n      FuncName.tag = 'Index' -- FuncName should be an Index node then\n      \n      local parlist = FuncBody[1]\n      table.insert(parlist, 1, builder.Id 'self')\n    end\n    \n    return builder.Let( { FuncName }, { FuncBody } )\n\tend",
    "type": "function"
  }, {
    "id": 214,
    "text": "if FuncName.tag == 'MethodDecl' then -- it's a method declaration\n      -- a method declaration like 'function b:o() <...> end' is equivalent to\n      -- 'b.o = function (self) <...> end'\n    \n      FuncName.tag = 'Index' -- FuncName should be an Index node then\n      \n      local parlist = FuncBody[1]\n      table.insert(parlist, 1, builder.Id 'self')\n    end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "FuncName.tag = 'Index'",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "local parlist = FuncBody[1]",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "table.insert(parlist, 1, builder.Id 'self')",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function (Name, FuncBody)\n    return builder.Localrec( { Name }, { FuncBody })\n\tend",
    "type": "function"
  }, {
    "id": 220,
    "text": "function (NameList, ExpList)\n    return builder.Local(NameList, ExpList or {})\n  end",
    "type": "function"
  }, {
    "id": 221,
    "text": "function (STAT)\n\t\tif STAT == 'break' then\n\t\t\treturn builder.Break()\n\t\telse\n\t\t\tif STAT == 'return' then\n\t\t\t\tSTAT = {}\n\t\t\tend\n      \n\t\t\treturn builder.Return(unpack(STAT))\n\t\tend\n\tend",
    "type": "function"
  }, {
    "id": 222,
    "text": "if STAT == 'break' then\n\t\t\treturn builder.Break()\n\t\telse\n\t\t\tif STAT == 'return' then\n\t\t\t\tSTAT = {}\n\t\t\tend\n      \n\t\t\treturn builder.Return(unpack(STAT))\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "if STAT == 'return' then\n\t\t\t\tSTAT = {}\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "STAT = {}",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function (...) \n    local list = { ... }\n    \n    if #list == 1 then \n      return list[1] \n    end\n    \n    local listRPN = toRPN(list) -- putting the list in RPN\n    local stack = {}\n    \n    for _, v in ipairs(listRPN) do\n      if v.tag == 'Op' and isUnary(v[1]) and not v[2] then\n        if v[1].tag == 'Unm' then -- replacing Unm with Sub\n          v[1].tag = 'Sub'\n        end\n        \n        v[2] = table.remove(stack)\n      elseif v.tag == 'Op' and isBinary(v[1]) and not v[2] and not v[3] then\n        v[3] = table.remove(stack)\n        v[2] = table.remove(stack)\n      end\n      \n      stack[#stack + 1] = v\n    end\n    \n    return stack[1]\n  end",
    "type": "function"
  }, {
    "id": 227,
    "text": "local list = { ... }",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "if #list == 1 then \n      return list[1] \n    end",
    "type": "statement:if"
  }, {
    "id": 229,
    "text": "local listRPN = toRPN(list)",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "for _, v in ipairs(listRPN) do\n      if v.tag == 'Op' and isUnary(v[1]) and not v[2] then\n        if v[1].tag == 'Unm' then -- replacing Unm with Sub\n          v[1].tag = 'Sub'\n        end\n        \n        v[2] = table.remove(stack)\n      elseif v.tag == 'Op' and isBinary(v[1]) and not v[2] and not v[3] then\n        v[3] = table.remove(stack)\n        v[2] = table.remove(stack)\n      end\n      \n      stack[#stack + 1] = v\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 231,
    "text": "if v.tag == 'Op' and isUnary(v[1]) and not v[2] then\n        if v[1].tag == 'Unm' then -- replacing Unm with Sub\n          v[1].tag = 'Sub'\n        end\n        \n        v[2] = table.remove(stack)\n      elseif v.tag == 'Op' and isBinary(v[1]) and not v[2] and not v[3] then\n        v[3] = table.remove(stack)\n        v[2] = table.remove(stack)\n      end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "if v[1].tag == 'Unm' then -- replacing Unm with Sub\n          v[1].tag = 'Sub'\n        end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "v[1].tag = 'Sub'",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "v[2] = table.remove(stack)",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "v[3] = table.remove(stack)",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "stack[#stack + 1] = v",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "function (base, ...)\n    for _, suffix in ipairs { ... } do\n      -- filling the holes\n      suffix[1] = base\n\t\t\tbase = suffix\n\t\tend\n    \n\t\treturn base\n\tend",
    "type": "function"
  }, {
    "id": 239,
    "text": "for _, suffix in ipairs { ... } do\n      -- filling the holes\n      suffix[1] = base\n\t\t\tbase = suffix\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 240,
    "text": "suffix[1] = base",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "base = suffix",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function (Exp)\n\t\treturn builder.One(Exp)\n\tend",
    "type": "function"
  }, {
    "id": 244,
    "text": "function (ID)\n    -- the hole will be filled in _PrefixExp\n\t\treturn builder.Index(hole, builder.String(ID))\n\tend",
    "type": "function"
  }, {
    "id": 245,
    "text": "function (Exp)\n    -- the hole will be filled in _PrefixExp\n\t\treturn builder.Index(hole, Exp) \n  end",
    "type": "function"
  }, {
    "id": 246,
    "text": "function (ID, _PrefixExpArgs)\n\t\t-- the hole will be filled in _PrefixExp\n    return builder.Method(hole, builder.String(ID), \n      select(2, unpack(_PrefixExpArgs)))\n\tend",
    "type": "function"
  }, {
    "id": 247,
    "text": "function (Args)\n\t\t-- the hole will be filled in _PrefixExp\n\t\treturn builder.Call(hole, unpack(Args))\n\tend",
    "type": "function"
  }, {
    "id": 248,
    "text": "function (Name, ...)\n\t\tlocal base = Name\n\t\t\n    for _, v in ipairs {...} do\n      if type(v) == 'string' then -- it's a method\n        -- using MethodDecl; this will be transformed into an Index node later\n        base = MethodDecl(base, builder.String(v))\n        \n      elseif v.tag == 'Index' then\n        v[1] = base\n        \n        base = v\n      end\n    end\n    \n\t\treturn base\n\tend",
    "type": "function"
  }, {
    "id": 249,
    "text": "local base = Name",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "for _, v in ipairs {...} do\n      if type(v) == 'string' then -- it's a method\n        -- using MethodDecl; this will be transformed into an Index node later\n        base = MethodDecl(base, builder.String(v))\n        \n      elseif v.tag == 'Index' then\n        v[1] = base\n        \n        base = v\n      end\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 251,
    "text": "if type(v) == 'string' then -- it's a method\n        -- using MethodDecl; this will be transformed into an Index node later\n        base = MethodDecl(base, builder.String(v))\n        \n      elseif v.tag == 'Index' then\n        v[1] = base\n        \n        base = v\n      end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "base = MethodDecl(base, builder.String(v))",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "v[1] = base",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "base = v",
    "type": "statement:assign"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function (ParList, Block)\n    return builder.Function(ParList or {}, Block)\n  end",
    "type": "function"
  }, {
    "id": 257,
    "text": "function (arg)\n\t\tif (not arg) or arg.tag then -- there's either one or no arguments\n\t\t\targ = { arg }\n\t\tend\n    \n\t\treturn arg\n\tend",
    "type": "function"
  }, {
    "id": 258,
    "text": "if (not arg) or arg.tag then -- there's either one or no arguments\n\t\t\targ = { arg }\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "arg = { arg }",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "function (NameList, varargs)\n    if NameList.tag == 'Dots' then -- the parameter list is just ...\n      return { NameList }\n    end\n    \n    NameList[#NameList + 1] = varargs\n    return NameList\n  end",
    "type": "function"
  }, {
    "id": 262,
    "text": "if NameList.tag == 'Dots' then -- the parameter list is just ...\n      return { NameList }\n    end",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "NameList[#NameList + 1] = varargs",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function (FieldList)\n    FieldList = FieldList or {}\n\t\t\n    return builder.Table(unpack(FieldList))\n  end",
    "type": "function"
  }, {
    "id": 266,
    "text": "FieldList = FieldList or {}",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 268,
    "text": "function (ID, Exp) \n    return builder.Key(builder.String(ID), Exp) \n  end",
    "type": "function"
  }, {
    "id": 269,
    "text": "function (op) return opToBuilder[op]() end",
    "type": "function"
  }, {
    "id": 270,
    "text": "function (op) \n    if op == '-' then\n      return opToBuilder['unm']() \n    else\n      return opToBuilder[op]() \n    end\n  end",
    "type": "function"
  }, {
    "id": 271,
    "text": "if op == '-' then\n      return opToBuilder['unm']() \n    else\n      return opToBuilder[op]() \n    end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "function (num) return builder.Number(tonumber(num)) end",
    "type": "function"
  }, {
    "id": 273,
    "text": "function (str) return builder.String(scanner.string2text(str)) end",
    "type": "function"
  }, {
    "id": 274,
    "text": "function () return nil end",
    "type": "function"
  }, {
    "id": 275,
    "text": "",
    "type": "function container"
  }, {
    "id": 276,
    "text": "string2text",
    "type": "global function"
  }, {
    "id": 277,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 278,
    "text": "apply",
    "type": "global function"
  }, {
    "id": 279,
    "text": "check",
    "type": "global function"
  }, {
    "id": 280,
    "text": "format",
    "type": "global function"
  }, {
    "id": 281,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 282,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 283,
    "text": "print",
    "type": "global function"
  }, {
    "id": 284,
    "text": "fmod",
    "type": "global function"
  }, {
    "id": 285,
    "text": "f",
    "type": "global function"
  }, {
    "id": 286,
    "text": "opToBuilder['unm']",
    "type": "global function"
  }, {
    "id": 287,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 288,
    "text": "error",
    "type": "global function"
  }, {
    "id": 289,
    "text": "opToBuilder[op]",
    "type": "global function"
  }, {
    "id": 290,
    "text": "type",
    "type": "global function"
  }, {
    "id": 291,
    "text": "Number",
    "type": "global function"
  }, {
    "id": 292,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 293,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 294,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 295,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 296,
    "text": "y",
    "type": "global function"
  }, {
    "id": 297,
    "text": "P",
    "type": "global function"
  }, {
    "id": 298,
    "text": "select",
    "type": "global function"
  }, {
    "id": 299,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 300,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 301,
    "text": "require",
    "type": "global function"
  }, {
    "id": 302,
    "text": "",
    "type": "variable container"
  }, {
    "id": 303,
    "text": "",
    "type": "require container"
  }, {
    "id": 304,
    "text": "",
    "type": "local variable"
  }, {
    "id": 305,
    "text": "",
    "type": "n/a"
  }, {
    "id": 306,
    "text": "",
    "type": "local variable"
  }, {
    "id": 307,
    "text": "",
    "type": "n/a"
  }, {
    "id": 308,
    "text": "",
    "type": "local variable"
  }, {
    "id": 309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "local variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "local variable"
  }, {
    "id": 331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 332,
    "text": "",
    "type": "local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 334,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 335,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 336,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 337,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 338,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 339,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 340,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 341,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 342,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 343,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 344,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 345,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 346,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 347,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 348,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 349,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 350,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 351,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 352,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 353,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 354,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 355,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 356,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 357,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 358,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 359,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 360,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 361,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 362,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 363,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 364,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 365,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 366,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 367,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 368,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 369,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 370,
    "text": "",
    "type": "local variable"
  }, {
    "id": 371,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 372,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 373,
    "text": "",
    "type": "string"
  }, {
    "id": 374,
    "text": "",
    "type": "local variable"
  }, {
    "id": 375,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 376,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 377,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 378,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 379,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 380,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 381,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 382,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 383,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 384,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 385,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 386,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 387,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 388,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 389,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 390,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 391,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 392,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 393,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 394,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 395,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 396,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 397,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 398,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 399,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 400,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 401,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 402,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 403,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 404,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 405,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 406,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 407,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 408,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 409,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 410,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 411,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 412,
    "text": "",
    "type": "local variable"
  }, {
    "id": 413,
    "text": "",
    "type": "n/a"
  }, {
    "id": 414,
    "text": "",
    "type": "local variable"
  }, {
    "id": 415,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 416,
    "text": "",
    "type": "symbol"
  }, {
    "id": 417,
    "text": "",
    "type": "global variable"
  }, {
    "id": 418,
    "text": "",
    "type": "n/a"
  }, {
    "id": 419,
    "text": "",
    "type": "global variable"
  }, {
    "id": 420,
    "text": "",
    "type": "n/a"
  }, {
    "id": 421,
    "text": "",
    "type": "global variable"
  }, {
    "id": 422,
    "text": "",
    "type": "n/a"
  }, {
    "id": 423,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 424,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 425,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 426,
    "text": "",
    "type": "require local variable"
  } ]
}