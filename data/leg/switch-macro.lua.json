{
  "_filename": "switch-macro.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/leg/examples/switch-macro.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "calls",
    "to": 22
  }, {
    "from": 16,
    "label": "calls",
    "to": 22
  }, {
    "from": 16,
    "label": "calls",
    "to": 22
  }, {
    "from": 16,
    "label": "calls",
    "to": 22
  }, {
    "from": 16,
    "label": "calls",
    "to": 22
  }, {
    "from": 16,
    "label": "calls",
    "to": 22
  }, {
    "from": 16,
    "label": "calls",
    "to": 20
  }, {
    "from": 16,
    "label": "calls",
    "to": 24
  }, {
    "from": 16,
    "label": "calls",
    "to": 24
  }, {
    "from": 16,
    "label": "calls",
    "to": 18
  }, {
    "from": 16,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 21
  }, {
    "from": 16,
    "label": "calls",
    "to": 21
  }, {
    "from": 16,
    "label": "calls",
    "to": 25
  }, {
    "from": 16,
    "label": "calls",
    "to": 25
  }, {
    "from": 16,
    "label": "calls",
    "to": 23
  }, {
    "from": 16,
    "label": "calls",
    "to": 23
  }, {
    "from": 16,
    "label": "calls",
    "to": 23
  }, {
    "from": 16,
    "label": "calls",
    "to": 23
  }, {
    "from": 16,
    "label": "calls",
    "to": 23
  }, {
    "from": 16,
    "label": "calls",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 16
  }, {
    "from": 16,
    "label": "declares",
    "to": 3
  }, {
    "from": 16,
    "label": "declares",
    "to": 4
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 27
  }, {
    "from": 26,
    "label": "initializes",
    "to": 28
  }, {
    "from": 28,
    "label": "assigns",
    "to": 29
  }, {
    "from": 26,
    "label": "initializes",
    "to": 30
  }, {
    "from": 30,
    "label": "assigns",
    "to": 31
  }, {
    "from": 26,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "assigns",
    "to": 33
  }, {
    "from": 26,
    "label": "initializes",
    "to": 34
  }, {
    "from": 34,
    "label": "assigns",
    "to": 35
  }, {
    "from": 26,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 26,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 26,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 26,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 26,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 26,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 26,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 26,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 26,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 27,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "requires",
    "to": 17
  }, {
    "from": 27,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "switch-macro",
    "type": "module"
  }, {
    "id": 2,
    "text": "parser",
    "type": "module"
  }, {
    "id": 3,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 4,
    "text": "function (exp, cases, default)\r\n                if #cases == 0 then -- no case clauses\r\n                  if default then -- return the local declaration and the block\r\n                    return 'do local __temp__ = ('..exp..') '..default..' end'\r\n                  else -- generate just the local declaration\r\n                    return 'do local __temp__ = ('..exp..') end'\r\n                  end\r\n                else -- there's at least one clause\r\n                  local str = 'do local __temp__ = ('..exp..') '\r\n                  \r\n                  -- generating a new if or elseif block\r\n                  for i = 1, #cases - 3, 2 do\r\n                    str = str..'if __temp__ == ('..cases[i]..') then '\r\n                      ..cases[i + 1]..' else'\r\n                  end\r\n                  \r\n                  -- the last case clause\r\n                  str = str..'if __temp__ == ('..cases[#cases - 1]..') then '\r\n                    ..cases[#cases]\r\n                    \r\n                  if default then -- generate the else block\r\n                    str = str..' else '..default..' end'\r\n                  else -- no else, just finish it\r\n                    str = str..' end' -- end if-elseif chain\r\n                  end\r\n                  \r\n                  return str..' end' -- end do\r\n                end\r\n              end",
    "type": "function"
  }, {
    "id": 5,
    "text": "if #cases == 0 then -- no case clauses\r\n                  if default then -- return the local declaration and the block\r\n                    return 'do local __temp__ = ('..exp..') '..default..' end'\r\n                  else -- generate just the local declaration\r\n                    return 'do local __temp__ = ('..exp..') end'\r\n                  end\r\n                else -- there's at least one clause\r\n                  local str = 'do local __temp__ = ('..exp..') '\r\n                  \r\n                  -- generating a new if or elseif block\r\n                  for i = 1, #cases - 3, 2 do\r\n                    str = str..'if __temp__ == ('..cases[i]..') then '\r\n                      ..cases[i + 1]..' else'\r\n                  end\r\n                  \r\n                  -- the last case clause\r\n                  str = str..'if __temp__ == ('..cases[#cases - 1]..') then '\r\n                    ..cases[#cases]\r\n                    \r\n                  if default then -- generate the else block\r\n                    str = str..' else '..default..' end'\r\n                  else -- no else, just finish it\r\n                    str = str..' end' -- end if-elseif chain\r\n                  end\r\n                  \r\n                  return str..' end' -- end do\r\n                end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "if default then -- return the local declaration and the block\r\n                    return 'do local __temp__ = ('..exp..') '..default..' end'\r\n                  else -- generate just the local declaration\r\n                    return 'do local __temp__ = ('..exp..') end'\r\n                  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "local str = 'do local __temp__ = ('..exp..') '",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for i = 1, #cases - 3, 2 do\r\n                    str = str..'if __temp__ == ('..cases[i]..') then '\r\n                      ..cases[i + 1]..' else'\r\n                  end",
    "type": "statement:numericfor"
  }, {
    "id": 9,
    "text": "str = str..'if __temp__ == ('..cases[i]..') then '\r\n                      ..cases[i + 1]..' else'",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "str = str..'if __temp__ == ('..cases[#cases - 1]..') then '\r\n                    ..cases[#cases]",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if default then -- generate the else block\r\n                    str = str..' else '..default..' end'\r\n                  else -- no else, just finish it\r\n                    str = str..' end' -- end if-elseif chain\r\n                  end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "str = str..' else '..default..' end'",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "str = str..' end'",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "",
    "type": "function container"
  }, {
    "id": 17,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 18,
    "text": "apply",
    "type": "global function"
  }, {
    "id": 19,
    "text": "Cs",
    "type": "global function"
  }, {
    "id": 20,
    "text": "Ct",
    "type": "global function"
  }, {
    "id": 21,
    "text": "print",
    "type": "global function"
  }, {
    "id": 22,
    "text": "V",
    "type": "global function"
  }, {
    "id": 23,
    "text": "P",
    "type": "global function"
  }, {
    "id": 24,
    "text": "require",
    "type": "global function"
  }, {
    "id": 25,
    "text": "C",
    "type": "global function"
  }, {
    "id": 26,
    "text": "",
    "type": "variable container"
  }, {
    "id": 27,
    "text": "",
    "type": "require container"
  }, {
    "id": 28,
    "text": "",
    "type": "local variable"
  }, {
    "id": 29,
    "text": "",
    "type": "n/a"
  }, {
    "id": 30,
    "text": "",
    "type": "local variable"
  }, {
    "id": 31,
    "text": "",
    "type": "n/a"
  }, {
    "id": 32,
    "text": "",
    "type": "local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "n/a"
  }, {
    "id": 34,
    "text": "",
    "type": "local variable"
  }, {
    "id": 35,
    "text": "",
    "type": "n/a"
  }, {
    "id": 36,
    "text": "",
    "type": "local variable"
  }, {
    "id": 37,
    "text": "",
    "type": "n/a"
  }, {
    "id": 38,
    "text": "",
    "type": "local variable"
  }, {
    "id": 39,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 40,
    "text": "",
    "type": "symbol"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "require local variable"
  } ]
}