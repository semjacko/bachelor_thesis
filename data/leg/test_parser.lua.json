{
  "_filename": "test_parser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/leg/tests/test_parser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 12
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 16
  }, {
    "from": 3,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 27
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 25
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 31
  }, {
    "from": 3,
    "label": "calls",
    "to": 31
  }, {
    "from": 3,
    "label": "calls",
    "to": 29
  }, {
    "from": 3,
    "label": "calls",
    "to": 29
  }, {
    "from": 3,
    "label": "calls",
    "to": 23
  }, {
    "from": 3,
    "label": "calls",
    "to": 32
  }, {
    "from": 3,
    "label": "calls",
    "to": 32
  }, {
    "from": 21,
    "label": "calls",
    "to": 33
  }, {
    "from": 21,
    "label": "calls",
    "to": 33
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "contains",
    "to": 21
  }, {
    "from": 21,
    "label": "declares",
    "to": 3
  }, {
    "from": 21,
    "label": "declares",
    "to": 19
  }, {
    "from": 21,
    "label": "declares",
    "to": 20
  }, {
    "from": 2,
    "label": "contains",
    "to": 34
  }, {
    "from": 2,
    "label": "contains",
    "to": 35
  }, {
    "from": 35,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "requires",
    "to": 22
  }, {
    "from": 35,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "parser",
    "type": "module"
  }, {
    "id": 2,
    "text": "test_parser",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function TEST (rule, tests)\r\n\tio.write(string.format(\"%-26s\", 'Testing '..rule..': ')) io.flush()\r\n\tlocal G = lpeg.P( parser.apply(lpeg.V(rule)) )\r\n\t\r\n\tfor i, subject in ipairs(tests) do\r\n\t\tio.write(i..'... ') io.flush()\r\n\t\t\r\n\t\tif string.sub(subject, 1, 1) == '!' then\r\n\t\t\tsubject = string.sub(subject, 2)\r\n\t\t\t\r\n\t\t\tlocal G = G * function(subject) print() error('\"'..subject..'\": should not match') end\r\n\t\t\tG:match(subject)\r\n\t\telse\r\n\t\t\tlocal G = G + function(subject) print() error('\"'..subject..'\": should match')     end\r\n\t\t\tG:match(subject)\r\n\t\tend\r\n\tend\r\n\t\r\n\tprint'OK!'\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "io.write(string.format(\"%-26s\", 'Testing '..rule..': '))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "io.flush()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local G = lpeg.P( parser.apply(lpeg.V(rule)) )",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for i, subject in ipairs(tests) do\r\n\t\tio.write(i..'... ') io.flush()\r\n\t\t\r\n\t\tif string.sub(subject, 1, 1) == '!' then\r\n\t\t\tsubject = string.sub(subject, 2)\r\n\t\t\t\r\n\t\t\tlocal G = G * function(subject) print() error('\"'..subject..'\": should not match') end\r\n\t\t\tG:match(subject)\r\n\t\telse\r\n\t\t\tlocal G = G + function(subject) print() error('\"'..subject..'\": should match')     end\r\n\t\t\tG:match(subject)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "io.write(i..'... ')",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "if string.sub(subject, 1, 1) == '!' then\r\n\t\t\tsubject = string.sub(subject, 2)\r\n\t\t\t\r\n\t\t\tlocal G = G * function(subject) print() error('\"'..subject..'\": should not match') end\r\n\t\t\tG:match(subject)\r\n\t\telse\r\n\t\t\tlocal G = G + function(subject) print() error('\"'..subject..'\": should match')     end\r\n\t\t\tG:match(subject)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "subject = string.sub(subject, 2)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local G = G * function(subject) print() error('\"'..subject..'\": should not match') end",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "error('\"'..subject..'\": should not match')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "G:match(subject)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local G = G + function(subject) print() error('\"'..subject..'\": should match')     end",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "error('\"'..subject..'\": should match')",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "print'OK!'",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function(subject) print() error('\"'..subject..'\": should not match') end",
    "type": "function"
  }, {
    "id": 20,
    "text": "function(subject) print() error('\"'..subject..'\": should match')     end",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "function container"
  }, {
    "id": 22,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 23,
    "text": "apply",
    "type": "global function"
  }, {
    "id": 24,
    "text": "P",
    "type": "global function"
  }, {
    "id": 25,
    "text": "V",
    "type": "global function"
  }, {
    "id": 26,
    "text": "format",
    "type": "global function"
  }, {
    "id": 27,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 28,
    "text": "print",
    "type": "global function"
  }, {
    "id": 29,
    "text": "flush",
    "type": "global function"
  }, {
    "id": 30,
    "text": "write",
    "type": "global function"
  }, {
    "id": 31,
    "text": "error",
    "type": "global function"
  }, {
    "id": 32,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 33,
    "text": "require",
    "type": "global function"
  }, {
    "id": 34,
    "text": "",
    "type": "variable container"
  }, {
    "id": 35,
    "text": "",
    "type": "require container"
  }, {
    "id": 36,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 37,
    "text": "",
    "type": "require local variable"
  } ]
}