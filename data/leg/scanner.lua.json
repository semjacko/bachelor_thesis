{
  "_filename": "scanner.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/leg/src/scanner.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 4
  }, {
    "from": 53,
    "label": "has",
    "to": 4
  }, {
    "from": 53,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 54
  }, {
    "from": 59,
    "label": "has",
    "to": 55
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 4
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 4
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 9
  }, {
    "from": 82,
    "label": "has",
    "to": 10
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 46
  }, {
    "from": 84,
    "label": "has",
    "to": 47
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 48
  }, {
    "from": 84,
    "label": "has",
    "to": 49
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 4
  }, {
    "from": 87,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "calls",
    "to": 94
  }, {
    "from": 88,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 88,
    "label": "calls",
    "to": 102
  }, {
    "from": 88,
    "label": "calls",
    "to": 61
  }, {
    "from": 88,
    "label": "calls",
    "to": 61
  }, {
    "from": 88,
    "label": "calls",
    "to": 8
  }, {
    "from": 88,
    "label": "calls",
    "to": 8
  }, {
    "from": 88,
    "label": "calls",
    "to": 8
  }, {
    "from": 88,
    "label": "calls",
    "to": 8
  }, {
    "from": 8,
    "label": "calls",
    "to": 103
  }, {
    "from": 88,
    "label": "calls",
    "to": 91
  }, {
    "from": 88,
    "label": "calls",
    "to": 91
  }, {
    "from": 88,
    "label": "calls",
    "to": 110
  }, {
    "from": 8,
    "label": "calls",
    "to": 107
  }, {
    "from": 39,
    "label": "calls",
    "to": 107
  }, {
    "from": 88,
    "label": "calls",
    "to": 108
  }, {
    "from": 24,
    "label": "calls",
    "to": 36
  }, {
    "from": 24,
    "label": "calls",
    "to": 36
  }, {
    "from": 36,
    "label": "calls",
    "to": 97
  }, {
    "from": 88,
    "label": "calls",
    "to": 100
  }, {
    "from": 88,
    "label": "calls",
    "to": 111
  }, {
    "from": 24,
    "label": "calls",
    "to": 109
  }, {
    "from": 39,
    "label": "calls",
    "to": 109
  }, {
    "from": 88,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 92
  }, {
    "from": 2,
    "label": "calls",
    "to": 92
  }, {
    "from": 36,
    "label": "calls",
    "to": 92
  }, {
    "from": 36,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 52,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 92
  }, {
    "from": 88,
    "label": "calls",
    "to": 104
  }, {
    "from": 59,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 39,
    "label": "calls",
    "to": 96
  }, {
    "from": 52,
    "label": "calls",
    "to": 96
  }, {
    "from": 24,
    "label": "calls",
    "to": 98
  }, {
    "from": 24,
    "label": "calls",
    "to": 98
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 39,
    "label": "calls",
    "to": 90
  }, {
    "from": 39,
    "label": "calls",
    "to": 90
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 88,
    "label": "calls",
    "to": 90
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 88,
    "label": "calls",
    "to": 105
  }, {
    "from": 88,
    "label": "calls",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 88
  }, {
    "from": 88,
    "label": "declares",
    "to": 2
  }, {
    "from": 88,
    "label": "declares",
    "to": 7
  }, {
    "from": 88,
    "label": "declares",
    "to": 8
  }, {
    "from": 88,
    "label": "declares",
    "to": 12
  }, {
    "from": 88,
    "label": "declares",
    "to": 24
  }, {
    "from": 88,
    "label": "declares",
    "to": 36
  }, {
    "from": 88,
    "label": "declares",
    "to": 38
  }, {
    "from": 88,
    "label": "declares",
    "to": 39
  }, {
    "from": 88,
    "label": "declares",
    "to": 52
  }, {
    "from": 88,
    "label": "declares",
    "to": 59
  }, {
    "from": 88,
    "label": "declares",
    "to": 61
  }, {
    "from": 88,
    "label": "declares",
    "to": 70
  }, {
    "from": 88,
    "label": "declares",
    "to": 74
  }, {
    "from": 88,
    "label": "declares",
    "to": 78
  }, {
    "from": 88,
    "label": "declares",
    "to": 82
  }, {
    "from": 88,
    "label": "declares",
    "to": 84
  }, {
    "from": 88,
    "label": "declares",
    "to": 86
  }, {
    "from": 88,
    "label": "declares",
    "to": 87
  }, {
    "from": 112,
    "label": "requires",
    "to": 1
  }, {
    "from": 113,
    "label": "requires",
    "to": 1
  }, {
    "from": 114,
    "label": "requires",
    "to": 1
  }, {
    "from": 115,
    "label": "requires",
    "to": 1
  }, {
    "from": 116,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 117
  }, {
    "from": 1,
    "label": "contains",
    "to": 118
  }, {
    "from": 117,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 117,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 117,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 117,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 117,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 117,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 117,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 117,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 117,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 117,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 117,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 117,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 142,
    "label": "assigns",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 142,
    "label": "assigns",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 142,
    "label": "assigns",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 142,
    "label": "assigns",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 142,
    "label": "assigns",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 142,
    "label": "assigns",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 142,
    "label": "assigns",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 142,
    "label": "assigns",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 142,
    "label": "assigns",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 117,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 117,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 117,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 117,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 117,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 117,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 117,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 117,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 117,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 117,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 117,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 117,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 117,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 117,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 117,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 117,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 117,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 117,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 117,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 117,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 117,
    "label": "initializes",
    "to": 203
  }, {
    "from": 117,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 117,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 117,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 117,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 117,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 117,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 117,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 117,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 118,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "requires",
    "to": 89
  }, {
    "from": 221,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "scanner",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function lines (subject)\r\n\tlocal inc = function (acc,arg) return acc + 1 end\r\n\tlocal L = m.Cf( m.Cc(1) * (m.P'\\n' + m.P(1)) ^0, inc )\r\n  \r\n\treturn L:match(subject)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local inc = function (acc,arg) return acc + 1 end",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local L = m.Cf( m.Cc(1) * (m.P'\\n' + m.P(1)) ^0, inc )",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function (acc,arg) return acc + 1 end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function error (msg)\r\n\treturn function (subject, i)\r\n\t\tlocal line = lines(string.sub(subject,1,i))\r\n    \r\n    _G.error('Lexical error in line '..line..', near \"'\r\n      ..(subject:sub(i-10,i)):gsub('\\n','EOL')..'\": '..msg, 0)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local line = lines(string.sub(subject,1,i))",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "_G.error('Lexical error in line '..line..', near \"'\r\n      ..(subject:sub(i-10,i)):gsub('\\n','EOL')..'\": '..msg, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function comment2text (comment) -- TEMP: LPeg could be used here\r\n\tlocal ret, i, brackets = comment:find('^%-%-%[(=*)%[', i)\r\n\t\r\n  if ret then\r\n\t\tcomment = comment:gsub('^%-%-%['..brackets..'%[', '')  -- removes \"--[===[\"\r\n\t\tcomment = comment:gsub('%]'..brackets..'%]$', '')      -- removes \"]===]\"\r\n\t\tcomment = '\\n' .. comment\r\n\t\tcomment = comment:gsub('\\n\\n', '\\n%-%-\\n')             -- adjust empty lines\r\n\t\tcomment = comment:gsub('\\n%s*%-%-+ ?', '\\n' )          -- removes \"--+ \" prefix from lines\r\n\t\tcomment = comment:gsub('^\\n\\n?', '')                   -- removes empty prefix lines\r\n\t\tcomment = comment:gsub('\\n$', '')                      -- removes empty sufix lines\r\n\telse\r\n\t\tcomment = comment:gsub('^%-%-+%s*', '')\r\n\tend\r\n  \r\n\treturn comment\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local ret, i, brackets = comment:find('^%-%-%[(=*)%[', i)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if ret then\r\n\t\tcomment = comment:gsub('^%-%-%['..brackets..'%[', '')  -- removes \"--[===[\"\r\n\t\tcomment = comment:gsub('%]'..brackets..'%]$', '')      -- removes \"]===]\"\r\n\t\tcomment = '\\n' .. comment\r\n\t\tcomment = comment:gsub('\\n\\n', '\\n%-%-\\n')             -- adjust empty lines\r\n\t\tcomment = comment:gsub('\\n%s*%-%-+ ?', '\\n' )          -- removes \"--+ \" prefix from lines\r\n\t\tcomment = comment:gsub('^\\n\\n?', '')                   -- removes empty prefix lines\r\n\t\tcomment = comment:gsub('\\n$', '')                      -- removes empty sufix lines\r\n\telse\r\n\t\tcomment = comment:gsub('^%-%-+%s*', '')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "comment = comment:gsub('^%-%-%['..brackets..'%[', '')",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "comment = comment:gsub('%]'..brackets..'%]$', '')",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "comment = '\\n' .. comment",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "comment = comment:gsub('\\n\\n', '\\n%-%-\\n')",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "comment = comment:gsub('\\n%s*%-%-+ ?', '\\n' )",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "comment = comment:gsub('^\\n\\n?', '')",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "comment = comment:gsub('\\n$', '')",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "comment = comment:gsub('^%-%-+%s*', '')",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function text2comment (text)\r\n\t-- finds a pattern anywhere in the subject, ripped from LPeg's home page\r\n  local function anywhere(patt)\r\n    return m.P { m.P(patt) + 1 * m.V(1) }\r\n  end\r\n  \r\n  -- searching for the largest [(=)*[ in the text\r\n  local max = -1\r\n  \r\n  local updateMax = function (c) if max < #c then max = #c end end\r\n  local openPatt = m.P'[' * m.C((m.P'=')^0) * m.P'[' / updateMax\r\n  local closePatt = m.P']' * m.C((m.P'=')^0) * m.P']' / updateMax\r\n  \r\n  anywhere(openPatt):match(text)\r\n  anywhere(closePatt):match(text)\r\n  \r\n  -- enclosing text with --[(=)^(max+1)[ and --](=)^(max + 1)]\r\n  local equals = string.rep('=', max + 1)\r\n\treturn '--['..equals..'[\\n'..text..'--]'..equals..']'\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local function anywhere(patt)\r\n    return m.P { m.P(patt) + 1 * m.V(1) }\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 26,
    "text": "local max = -1",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local updateMax = function (c) if max < #c then max = #c end end",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if max < #c then max = #c end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "max = #c",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local openPatt = m.P'[' * m.C((m.P'=')^0) * m.P'[' / updateMax",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local closePatt = m.P']' * m.C((m.P'=')^0) * m.P']' / updateMax",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "anywhere(openPatt):match(text)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "anywhere(closePatt):match(text)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local equals = string.rep('=', max + 1)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function anywhere(patt)\r\n    return m.P { m.P(patt) + 1 * m.V(1) }\r\n  end",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function (c) if max < #c then max = #c end end",
    "type": "function"
  }, {
    "id": 39,
    "text": "function string2text(str)\r\n  local escapeNum = m.C(N^-3) / tonumber\r\n  local escapePatt = (\r\n      (m.P'\\\\' * m.S[[ntrvabf'\"\\\\]]) / escapeTable\r\n    + (m.P'\\\\' * escapeNum) / string.char\r\n  )\r\n  \r\n  local openDQuote, openQuote = m.P'\"' / '', m.P\"'\" / ''\r\n  local closeDQuote, closeQuote = openDQuote, openQuote\r\n  \r\n  local start, l = \"[\" * m.P\"=\"^0 * \"[\", nil\r\n  local longstring = #(m.P'[' * m.S'[=') * m.P(function (s, i)\r\n    l = start:match(s, i)\r\n    if not l then return nil end\r\n    \r\n    local p = m.P(\"]\"..string.rep(\"=\", l - i - 2)..\"]\")\r\n    p = (1 - p)^0 * p\r\n    \r\n    return p:match(s, l)\r\n  end)\r\n  \r\n  \r\n\tlocal patt = m.Cs(\r\n      (openDQuote * ((escapePatt + 1) - closeDQuote)^0 * closeDQuote)\r\n    + (openQuote * ((escapePatt + 1) - closeQuote)^0 * closeQuote)\r\n    + longstring / function (c) return string.sub(c, l, -l) end\r\n  )\r\n  \r\n  return patt:match(str)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local escapeNum = m.C(N^-3) / tonumber",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local escapePatt = (\r\n      (m.P'\\\\' * m.S[[ntrvabf'\"\\\\]]) / escapeTable\r\n    + (m.P'\\\\' * escapeNum) / string.char\r\n  )",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local openDQuote, openQuote = m.P'\"' / '', m.P\"'\" / ''",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local closeDQuote, closeQuote = openDQuote, openQuote",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local start, l = \"[\" * m.P\"=\"^0 * \"[\", nil",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local longstring = #(m.P'[' * m.S'[=') * m.P(function (s, i)\r\n    l = start:match(s, i)\r\n    if not l then return nil end\r\n    \r\n    local p = m.P(\"]\"..string.rep(\"=\", l - i - 2)..\"]\")\r\n    p = (1 - p)^0 * p\r\n    \r\n    return p:match(s, l)\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "l = start:match(s, i)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if not l then return nil end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local p = m.P(\"]\"..string.rep(\"=\", l - i - 2)..\"]\")",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "p = (1 - p)^0 * p",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local patt = m.Cs(\r\n      (openDQuote * ((escapePatt + 1) - closeDQuote)^0 * closeDQuote)\r\n    + (openQuote * ((escapePatt + 1) - closeQuote)^0 * closeQuote)\r\n    + longstring / function (c) return string.sub(c, l, -l) end\r\n  )",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function text2string(text)\r\n  local function reverseEscape(char)\r\n    local c = reverseEscapeTable[char]\r\n    \r\n    if c then \r\n      return c\r\n    elseif (AZ + N + SPACE + SYMBOL + PUNCTUATION):match(char) then\r\n      return char\r\n    else\r\n      return '\\\\'..string.byte(char)\r\n    end\r\n  end\r\n  \r\n  local escapePatt = m.P(1) / reverseEscape\r\n  local patt = m.Cs(escapePatt^0)\r\n  \r\n  return '\"'..patt:match(text)..'\"'\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local function reverseEscape(char)\r\n    local c = reverseEscapeTable[char]\r\n    \r\n    if c then \r\n      return c\r\n    elseif (AZ + N + SPACE + SYMBOL + PUNCTUATION):match(char) then\r\n      return char\r\n    else\r\n      return '\\\\'..string.byte(char)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 54,
    "text": "local c = reverseEscapeTable[char]",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if c then \r\n      return c\r\n    elseif (AZ + N + SPACE + SYMBOL + PUNCTUATION):match(char) then\r\n      return char\r\n    else\r\n      return '\\\\'..string.byte(char)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local escapePatt = m.P(1) / reverseEscape",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local patt = m.Cs(escapePatt^0)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function reverseEscape(char)\r\n    local c = reverseEscapeTable[char]\r\n    \r\n    if c then \r\n      return c\r\n    elseif (AZ + N + SPACE + SYMBOL + PUNCTUATION):match(char) then\r\n      return char\r\n    else\r\n      return '\\\\'..string.byte(char)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function (dst, src, minus)\r\n\tlocal ret = m.P(false)\r\n\tfor _, v in _G.ipairs(src) do\r\n\t\tlocal UP = string.upper(v)\r\n\t\tdst[UP] = m.P(v)\r\n\t\tif minus then\r\n\t\t\tdst[UP] = dst[UP] * minus\r\n\t\tend\r\n\t\tret = dst[UP] + ret\r\n\tend\r\n\treturn ret\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local ret = m.P(false)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "for _, v in _G.ipairs(src) do\r\n\t\tlocal UP = string.upper(v)\r\n\t\tdst[UP] = m.P(v)\r\n\t\tif minus then\r\n\t\t\tdst[UP] = dst[UP] * minus\r\n\t\tend\r\n\t\tret = dst[UP] + ret\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 64,
    "text": "local UP = string.upper(v)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "dst[UP] = m.P(v)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if minus then\r\n\t\t\tdst[UP] = dst[UP] * minus\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "dst[UP] = dst[UP] * minus",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "ret = dst[UP] + ret",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function(num)\r\n    if not _G.tonumber(num) then \r\n      error('Malformed number: '.._G.tostring(num))(subject,i) \r\n    end \r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "if not _G.tonumber(num) then \r\n      error('Malformed number: '.._G.tostring(num))(subject,i) \r\n    end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "error('Malformed number: '.._G.tostring(num))(subject,i)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function (subject, i)\r\n\t--               [.\\d]+     .. ( [eE]  ..   [+-]? )?    .. isalnum()*\r\n\tlocal patt = (m.P'.' + N)^1 * (m.S'eE' * m.S'+-'^-1)^-1 * (N+AZ)^0\r\n\tpatt = patt / function(num)\r\n    if not _G.tonumber(num) then \r\n      error('Malformed number: '.._G.tostring(num))(subject,i) \r\n    end \r\n  end\r\n  \r\n\treturn m.match(patt, subject, i)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local patt = (m.P'.' + N)^1 * (m.S'eE' * m.S'+-'^-1)^-1 * (N+AZ)^0",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "patt = patt / function(num)\r\n    if not _G.tonumber(num) then \r\n      error('Malformed number: '.._G.tostring(num))(subject,i) \r\n    end \r\n  end",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function (subject, i1)\r\n\tlocal level = _G.assert( subject:match('^%[(=*)%[', i1) )\r\n\tlocal _, i2 = subject:find(']'..level..']', i1, true)  -- true = plain \"find substring\"\r\n\treturn (i2 and (i2+1)) or error('unfinished long brackets')(subject, i1)\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local level = _G.assert( subject:match('^%[(=*)%[', i1) )",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local _, i2 = subject:find(']'..level..']', i1, true)",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function (subject, i)\r\n\t\tlocal line = lines(string.sub(subject,1,i))\r\n    \r\n    _G.error('Lexical error in line '..line..', near \"'\r\n      ..(subject:sub(i-10,i)):gsub('\\n','EOL')..'\": '..msg, 0)\r\n\tend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function (s, i)\r\n    l = start:match(s, i)\r\n    if not l then return nil end\r\n    \r\n    local p = m.P(\"]\"..string.rep(\"=\", l - i - 2)..\"]\")\r\n    p = (1 - p)^0 * p\r\n    \r\n    return p:match(s, l)\r\n  end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function (c) return string.sub(c, l, -l) end",
    "type": "function"
  }, {
    "id": 87,
    "text": "function(s,i) return (i==1) and i end",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "function container"
  }, {
    "id": 89,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 90,
    "text": "S",
    "type": "global function"
  }, {
    "id": 91,
    "text": "R",
    "type": "global function"
  }, {
    "id": 92,
    "text": "P",
    "type": "global function"
  }, {
    "id": 93,
    "text": "Cc",
    "type": "global function"
  }, {
    "id": 94,
    "text": "match",
    "type": "global function"
  }, {
    "id": 95,
    "text": "Cf",
    "type": "global function"
  }, {
    "id": 96,
    "text": "Cs",
    "type": "global function"
  }, {
    "id": 97,
    "text": "V",
    "type": "global function"
  }, {
    "id": 98,
    "text": "C",
    "type": "global function"
  }, {
    "id": 99,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 100,
    "text": "module",
    "type": "global function"
  }, {
    "id": 101,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 102,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 103,
    "text": "error",
    "type": "global function"
  }, {
    "id": 104,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 105,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 106,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 107,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 108,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 109,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 110,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 111,
    "text": "require",
    "type": "global function"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "global variable"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "variable container"
  }, {
    "id": 118,
    "text": "",
    "type": "require container"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "n/a"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "n/a"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 143,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 144,
    "text": "",
    "type": "string"
  }, {
    "id": 145,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 146,
    "text": "",
    "type": "string"
  }, {
    "id": 147,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 148,
    "text": "",
    "type": "string"
  }, {
    "id": 149,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 150,
    "text": "",
    "type": "string"
  }, {
    "id": 151,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 152,
    "text": "",
    "type": "string"
  }, {
    "id": 153,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 154,
    "text": "",
    "type": "string"
  }, {
    "id": 155,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 156,
    "text": "",
    "type": "string"
  }, {
    "id": 157,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 158,
    "text": "",
    "type": "string"
  }, {
    "id": 159,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 160,
    "text": "",
    "type": "string"
  }, {
    "id": 161,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 162,
    "text": "",
    "type": "string"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "unop"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "n/a"
  }, {
    "id": 175,
    "text": "",
    "type": "global variable"
  }, {
    "id": 176,
    "text": "",
    "type": "n/a"
  }, {
    "id": 177,
    "text": "",
    "type": "global variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "global variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "global variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "global variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "global variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "global variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "global variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "global variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "global variable"
  }, {
    "id": 194,
    "text": "",
    "type": "n/a"
  }, {
    "id": 195,
    "text": "",
    "type": "global variable"
  }, {
    "id": 196,
    "text": "",
    "type": "n/a"
  }, {
    "id": 197,
    "text": "",
    "type": "global variable"
  }, {
    "id": 198,
    "text": "",
    "type": "n/a"
  }, {
    "id": 199,
    "text": "",
    "type": "global variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "global variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "global variable"
  }, {
    "id": 204,
    "text": "",
    "type": "global variable"
  }, {
    "id": 205,
    "text": "",
    "type": "n/a"
  }, {
    "id": 206,
    "text": "",
    "type": "global variable"
  }, {
    "id": 207,
    "text": "",
    "type": "n/a"
  }, {
    "id": 208,
    "text": "",
    "type": "global variable"
  }, {
    "id": 209,
    "text": "",
    "type": "n/a"
  }, {
    "id": 210,
    "text": "",
    "type": "global variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "global variable"
  }, {
    "id": 213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 214,
    "text": "",
    "type": "global variable"
  }, {
    "id": 215,
    "text": "",
    "type": "n/a"
  }, {
    "id": 216,
    "text": "",
    "type": "global variable"
  }, {
    "id": 217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 218,
    "text": "",
    "type": "global variable"
  }, {
    "id": 219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 220,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "require local variable"
  } ]
}