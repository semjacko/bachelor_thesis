{
  "_filename": "declaration.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/toluapp/src/bin/lua/declaration.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 8,
    "label": "has",
    "to": 18
  }, {
    "from": 8,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 8,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 23
  }, {
    "from": 8,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 8,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 8,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 34,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 34,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 30
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 34,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 34,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 55,
    "label": "has",
    "to": 65
  }, {
    "from": 55,
    "label": "has",
    "to": 66
  }, {
    "from": 55,
    "label": "has",
    "to": 67
  }, {
    "from": 55,
    "label": "has",
    "to": 68
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 6
  }, {
    "from": 75,
    "label": "has",
    "to": 6
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 78,
    "label": "has",
    "to": 85
  }, {
    "from": 78,
    "label": "has",
    "to": 86
  }, {
    "from": 78,
    "label": "has",
    "to": 87
  }, {
    "from": 78,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 6
  }, {
    "from": 89,
    "label": "has",
    "to": 6
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 100,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 100,
    "label": "has",
    "to": 6
  }, {
    "from": 100,
    "label": "has",
    "to": 6
  }, {
    "from": 100,
    "label": "has",
    "to": 6
  }, {
    "from": 100,
    "label": "has",
    "to": 6
  }, {
    "from": 100,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 110,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 110,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 110,
    "label": "has",
    "to": 121
  }, {
    "from": 110,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 110,
    "label": "has",
    "to": 124
  }, {
    "from": 110,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 125,
    "label": "has",
    "to": 131
  }, {
    "from": 125,
    "label": "has",
    "to": 132
  }, {
    "from": 125,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 123
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 133,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 123
  }, {
    "from": 133,
    "label": "has",
    "to": 140
  }, {
    "from": 133,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 133,
    "label": "has",
    "to": 143
  }, {
    "from": 133,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 133,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 110,
    "label": "has",
    "to": 6
  }, {
    "from": 110,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 154,
    "label": "has",
    "to": 158
  }, {
    "from": 154,
    "label": "has",
    "to": 159
  }, {
    "from": 154,
    "label": "has",
    "to": 158
  }, {
    "from": 153,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 101
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 162,
    "label": "has",
    "to": 131
  }, {
    "from": 162,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 162,
    "label": "has",
    "to": 172
  }, {
    "from": 162,
    "label": "has",
    "to": 173
  }, {
    "from": 162,
    "label": "has",
    "to": 159
  }, {
    "from": 162,
    "label": "has",
    "to": 174
  }, {
    "from": 162,
    "label": "has",
    "to": 175
  }, {
    "from": 162,
    "label": "has",
    "to": 176
  }, {
    "from": 162,
    "label": "has",
    "to": 131
  }, {
    "from": 162,
    "label": "has",
    "to": 113
  }, {
    "from": 162,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 120
  }, {
    "from": 162,
    "label": "has",
    "to": 178
  }, {
    "from": 162,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 162,
    "label": "has",
    "to": 181
  }, {
    "from": 162,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 180
  }, {
    "from": 162,
    "label": "has",
    "to": 183
  }, {
    "from": 162,
    "label": "has",
    "to": 143
  }, {
    "from": 162,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 145
  }, {
    "from": 162,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 162,
    "label": "has",
    "to": 188
  }, {
    "from": 162,
    "label": "has",
    "to": 189
  }, {
    "from": 161,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 163
  }, {
    "from": 192,
    "label": "has",
    "to": 164
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 174
  }, {
    "from": 198,
    "label": "has",
    "to": 155
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 198,
    "label": "has",
    "to": 157
  }, {
    "from": 198,
    "label": "has",
    "to": 201
  }, {
    "from": 198,
    "label": "has",
    "to": 202
  }, {
    "from": 198,
    "label": "has",
    "to": 159
  }, {
    "from": 198,
    "label": "has",
    "to": 188
  }, {
    "from": 198,
    "label": "has",
    "to": 203
  }, {
    "from": 192,
    "label": "has",
    "to": 189
  }, {
    "from": 191,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 155
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 157
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 206,
    "label": "has",
    "to": 159
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 210,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 216,
    "label": "has",
    "to": 6
  }, {
    "from": 216,
    "label": "has",
    "to": 6
  }, {
    "from": 216,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 224,
    "label": "has",
    "to": 228
  }, {
    "from": 224,
    "label": "has",
    "to": 229
  }, {
    "from": 224,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 224,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 224,
    "label": "has",
    "to": 6
  }, {
    "from": 224,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 235,
    "label": "has",
    "to": 237
  }, {
    "from": 235,
    "label": "has",
    "to": 238
  }, {
    "from": 235,
    "label": "has",
    "to": 239
  }, {
    "from": 235,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 235,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 235,
    "label": "has",
    "to": 6
  }, {
    "from": 235,
    "label": "has",
    "to": 245
  }, {
    "from": 235,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 246,
    "label": "has",
    "to": 249
  }, {
    "from": 235,
    "label": "has",
    "to": 6
  }, {
    "from": 235,
    "label": "has",
    "to": 250
  }, {
    "from": 235,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 251,
    "label": "has",
    "to": 249
  }, {
    "from": 235,
    "label": "has",
    "to": 6
  }, {
    "from": 235,
    "label": "has",
    "to": 252
  }, {
    "from": 235,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 249
  }, {
    "from": 235,
    "label": "has",
    "to": 6
  }, {
    "from": 235,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 6
  }, {
    "from": 235,
    "label": "has",
    "to": 255
  }, {
    "from": 235,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 249
  }, {
    "from": 235,
    "label": "has",
    "to": 6
  }, {
    "from": 235,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 260
  }, {
    "from": 258,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 261,
    "label": "has",
    "to": 264
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 265
  }, {
    "from": 258,
    "label": "has",
    "to": 266
  }, {
    "from": 258,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 235,
    "label": "has",
    "to": 6
  }, {
    "from": 235,
    "label": "has",
    "to": 6
  }, {
    "from": 235,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "calls",
    "to": 75
  }, {
    "from": 52,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 290
  }, {
    "from": 94,
    "label": "calls",
    "to": 290
  }, {
    "from": 191,
    "label": "calls",
    "to": 290
  }, {
    "from": 89,
    "label": "calls",
    "to": 288
  }, {
    "from": 94,
    "label": "calls",
    "to": 288
  }, {
    "from": 110,
    "label": "calls",
    "to": 288
  }, {
    "from": 110,
    "label": "calls",
    "to": 288
  }, {
    "from": 161,
    "label": "calls",
    "to": 288
  }, {
    "from": 191,
    "label": "calls",
    "to": 288
  }, {
    "from": 235,
    "label": "calls",
    "to": 288
  }, {
    "from": 235,
    "label": "calls",
    "to": 288
  }, {
    "from": 235,
    "label": "calls",
    "to": 288
  }, {
    "from": 235,
    "label": "calls",
    "to": 288
  }, {
    "from": 235,
    "label": "calls",
    "to": 288
  }, {
    "from": 34,
    "label": "calls",
    "to": 274
  }, {
    "from": 34,
    "label": "calls",
    "to": 274
  }, {
    "from": 52,
    "label": "calls",
    "to": 274
  }, {
    "from": 52,
    "label": "calls",
    "to": 274
  }, {
    "from": 89,
    "label": "calls",
    "to": 274
  }, {
    "from": 100,
    "label": "calls",
    "to": 274
  }, {
    "from": 110,
    "label": "calls",
    "to": 274
  }, {
    "from": 110,
    "label": "calls",
    "to": 274
  }, {
    "from": 161,
    "label": "calls",
    "to": 274
  }, {
    "from": 161,
    "label": "calls",
    "to": 274
  }, {
    "from": 191,
    "label": "calls",
    "to": 274
  }, {
    "from": 210,
    "label": "calls",
    "to": 274
  }, {
    "from": 216,
    "label": "calls",
    "to": 274
  }, {
    "from": 8,
    "label": "calls",
    "to": 295
  }, {
    "from": 8,
    "label": "calls",
    "to": 295
  }, {
    "from": 153,
    "label": "calls",
    "to": 294
  }, {
    "from": 153,
    "label": "calls",
    "to": 294
  }, {
    "from": 153,
    "label": "calls",
    "to": 294
  }, {
    "from": 153,
    "label": "calls",
    "to": 294
  }, {
    "from": 153,
    "label": "calls",
    "to": 294
  }, {
    "from": 153,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 161,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 191,
    "label": "calls",
    "to": 294
  }, {
    "from": 205,
    "label": "calls",
    "to": 294
  }, {
    "from": 205,
    "label": "calls",
    "to": 294
  }, {
    "from": 205,
    "label": "calls",
    "to": 294
  }, {
    "from": 205,
    "label": "calls",
    "to": 294
  }, {
    "from": 205,
    "label": "calls",
    "to": 294
  }, {
    "from": 210,
    "label": "calls",
    "to": 294
  }, {
    "from": 210,
    "label": "calls",
    "to": 294
  }, {
    "from": 210,
    "label": "calls",
    "to": 294
  }, {
    "from": 216,
    "label": "calls",
    "to": 294
  }, {
    "from": 216,
    "label": "calls",
    "to": 294
  }, {
    "from": 216,
    "label": "calls",
    "to": 280
  }, {
    "from": 34,
    "label": "calls",
    "to": 293
  }, {
    "from": 235,
    "label": "calls",
    "to": 293
  }, {
    "from": 235,
    "label": "calls",
    "to": 293
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 110,
    "label": "calls",
    "to": 282
  }, {
    "from": 52,
    "label": "calls",
    "to": 296
  }, {
    "from": 224,
    "label": "calls",
    "to": 296
  }, {
    "from": 34,
    "label": "calls",
    "to": 287
  }, {
    "from": 52,
    "label": "calls",
    "to": 287
  }, {
    "from": 70,
    "label": "calls",
    "to": 287
  }, {
    "from": 110,
    "label": "calls",
    "to": 287
  }, {
    "from": 224,
    "label": "calls",
    "to": 287
  }, {
    "from": 224,
    "label": "calls",
    "to": 287
  }, {
    "from": 235,
    "label": "calls",
    "to": 287
  }, {
    "from": 8,
    "label": "calls",
    "to": 297
  }, {
    "from": 52,
    "label": "calls",
    "to": 297
  }, {
    "from": 52,
    "label": "calls",
    "to": 297
  }, {
    "from": 70,
    "label": "calls",
    "to": 297
  }, {
    "from": 224,
    "label": "calls",
    "to": 297
  }, {
    "from": 235,
    "label": "calls",
    "to": 297
  }, {
    "from": 272,
    "label": "calls",
    "to": 299
  }, {
    "from": 224,
    "label": "calls",
    "to": 299
  }, {
    "from": 52,
    "label": "calls",
    "to": 277
  }, {
    "from": 75,
    "label": "calls",
    "to": 277
  }, {
    "from": 75,
    "label": "calls",
    "to": 277
  }, {
    "from": 52,
    "label": "calls",
    "to": 298
  }, {
    "from": 110,
    "label": "calls",
    "to": 298
  }, {
    "from": 224,
    "label": "calls",
    "to": 298
  }, {
    "from": 8,
    "label": "calls",
    "to": 289
  }, {
    "from": 8,
    "label": "calls",
    "to": 289
  }, {
    "from": 52,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 235,
    "label": "calls",
    "to": 283
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 235,
    "label": "calls",
    "to": 2
  }, {
    "from": 110,
    "label": "calls",
    "to": 286
  }, {
    "from": 110,
    "label": "calls",
    "to": 286
  }, {
    "from": 153,
    "label": "calls",
    "to": 286
  }, {
    "from": 205,
    "label": "calls",
    "to": 286
  }, {
    "from": 100,
    "label": "calls",
    "to": 273
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 78,
    "label": "calls",
    "to": 276
  }, {
    "from": 8,
    "label": "calls",
    "to": 291
  }, {
    "from": 8,
    "label": "calls",
    "to": 291
  }, {
    "from": 52,
    "label": "calls",
    "to": 291
  }, {
    "from": 224,
    "label": "calls",
    "to": 291
  }, {
    "from": 235,
    "label": "calls",
    "to": 291
  }, {
    "from": 89,
    "label": "calls",
    "to": 281
  }, {
    "from": 94,
    "label": "calls",
    "to": 275
  }, {
    "from": 34,
    "label": "calls",
    "to": 52
  }, {
    "from": 52,
    "label": "calls",
    "to": 52
  }, {
    "from": 52,
    "label": "calls",
    "to": 284
  }, {
    "from": 224,
    "label": "calls",
    "to": 279
  }, {
    "from": 110,
    "label": "calls",
    "to": 285
  }, {
    "from": 235,
    "label": "calls",
    "to": 224
  }, {
    "from": 235,
    "label": "calls",
    "to": 224
  }, {
    "from": 235,
    "label": "calls",
    "to": 224
  }, {
    "from": 235,
    "label": "calls",
    "to": 224
  }, {
    "from": 235,
    "label": "calls",
    "to": 224
  }, {
    "from": 235,
    "label": "calls",
    "to": 224
  }, {
    "from": 235,
    "label": "calls",
    "to": 224
  }, {
    "from": 8,
    "label": "calls",
    "to": 292
  }, {
    "from": 52,
    "label": "calls",
    "to": 292
  }, {
    "from": 235,
    "label": "calls",
    "to": 292
  }, {
    "from": 235,
    "label": "calls",
    "to": 292
  }, {
    "from": 235,
    "label": "calls",
    "to": 292
  }, {
    "from": 235,
    "label": "calls",
    "to": 292
  }, {
    "from": 235,
    "label": "calls",
    "to": 292
  }, {
    "from": 235,
    "label": "calls",
    "to": 292
  }, {
    "from": 8,
    "label": "calls",
    "to": 278
  }, {
    "from": 8,
    "label": "calls",
    "to": 278
  }, {
    "from": 1,
    "label": "contains",
    "to": 272
  }, {
    "from": 272,
    "label": "declares",
    "to": 2
  }, {
    "from": 272,
    "label": "declares",
    "to": 8
  }, {
    "from": 272,
    "label": "declares",
    "to": 34
  }, {
    "from": 272,
    "label": "declares",
    "to": 52
  }, {
    "from": 272,
    "label": "declares",
    "to": 70
  }, {
    "from": 272,
    "label": "declares",
    "to": 75
  }, {
    "from": 272,
    "label": "declares",
    "to": 78
  }, {
    "from": 272,
    "label": "declares",
    "to": 89
  }, {
    "from": 272,
    "label": "declares",
    "to": 94
  }, {
    "from": 272,
    "label": "declares",
    "to": 100
  }, {
    "from": 272,
    "label": "declares",
    "to": 110
  }, {
    "from": 272,
    "label": "declares",
    "to": 153
  }, {
    "from": 272,
    "label": "declares",
    "to": 161
  }, {
    "from": 272,
    "label": "declares",
    "to": 191
  }, {
    "from": 272,
    "label": "declares",
    "to": 205
  }, {
    "from": 272,
    "label": "declares",
    "to": 210
  }, {
    "from": 272,
    "label": "declares",
    "to": 216
  }, {
    "from": 272,
    "label": "declares",
    "to": 224
  }, {
    "from": 272,
    "label": "declares",
    "to": 235
  }, {
    "from": 272,
    "label": "declares",
    "to": 271
  }, {
    "from": 1,
    "label": "contains",
    "to": 300
  }, {
    "from": 1,
    "label": "contains",
    "to": 301
  }, {
    "from": 300,
    "label": "initializes",
    "to": 302
  }, {
    "from": 302,
    "label": "assigns",
    "to": 303
  }, {
    "from": 300,
    "label": "initializes",
    "to": 304
  }, {
    "from": 304,
    "label": "assigns",
    "to": 305
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "declaration",
    "type": "module"
  }, {
    "id": 2,
    "text": "function create_varname ()\r\n if not _varnumber then _varnumber = 0 end\r\n _varnumber = _varnumber + 1\r\n return \"tolua_var_\".._varnumber\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if not _varnumber then _varnumber = 0 end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "_varnumber = 0",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "_varnumber = _varnumber + 1",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function classDeclaration:checkname ()\r\n\r\n if strsub(self.name,1,1) == '[' and not findtype(self.type) then\r\n  self.name = self.type..self.name\r\n  local m = split(self.mod,'%s%s*')\r\n  self.type = m[m.n]\r\n  self.mod = concat(m,1,m.n-1)\r\n end\r\n\r\n local t = split(self.name,'=')\r\n if t.n==2 then\r\n  self.name = t[1]\r\n  self.def = find_enum_var(t[t.n])\r\n end\r\n\r\n local b,e,d = strfind(self.name,\"%[(.-)%]\")\r\n if b then\r\n  self.name = strsub(self.name,1,b-1)\r\n  self.dim = find_enum_var(d)\r\n end\r\n\r\n\r\n if self.type ~= '' and self.type ~= 'void' and self.name == '' then\r\n  self.name = create_varname()\r\n elseif self.kind=='var' then\r\n  if self.type=='' and self.name~='' then\r\n   self.type = self.type..self.name\r\n   self.name = create_varname()\r\n  elseif findtype(self.name) then\r\n   if self.type=='' then self.type = self.name\r\n   else self.type = self.type..' '..self.name end\r\n   self.name = create_varname()\r\n  end\r\n end\r\n\r\n -- adjust type of string\r\n if self.type == 'char' and self.dim ~= '' then\r\n\t self.type = 'char*'\r\n end\r\n\r\n\tif self.kind and self.kind == 'var' then\r\n\t\tself.name = string.gsub(self.name, \":.*$\", \"\") -- ???\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if strsub(self.name,1,1) == '[' and not findtype(self.type) then\r\n  self.name = self.type..self.name\r\n  local m = split(self.mod,'%s%s*')\r\n  self.type = m[m.n]\r\n  self.mod = concat(m,1,m.n-1)\r\n end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "self.name = self.type..self.name",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local m = split(self.mod,'%s%s*')",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "self.type = m[m.n]",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "self.mod = concat(m,1,m.n-1)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local t = split(self.name,'=')",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if t.n==2 then\r\n  self.name = t[1]\r\n  self.def = find_enum_var(t[t.n])\r\n end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "self.name = t[1]",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "self.def = find_enum_var(t[t.n])",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local b,e,d = strfind(self.name,\"%[(.-)%]\")",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if b then\r\n  self.name = strsub(self.name,1,b-1)\r\n  self.dim = find_enum_var(d)\r\n end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "self.name = strsub(self.name,1,b-1)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "self.dim = find_enum_var(d)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if self.type ~= '' and self.type ~= 'void' and self.name == '' then\r\n  self.name = create_varname()\r\n elseif self.kind=='var' then\r\n  if self.type=='' and self.name~='' then\r\n   self.type = self.type..self.name\r\n   self.name = create_varname()\r\n  elseif findtype(self.name) then\r\n   if self.type=='' then self.type = self.name\r\n   else self.type = self.type..' '..self.name end\r\n   self.name = create_varname()\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "self.name = create_varname()",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if self.type=='' and self.name~='' then\r\n   self.type = self.type..self.name\r\n   self.name = create_varname()\r\n  elseif findtype(self.name) then\r\n   if self.type=='' then self.type = self.name\r\n   else self.type = self.type..' '..self.name end\r\n   self.name = create_varname()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "self.type = self.type..self.name",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if self.type=='' then self.type = self.name\r\n   else self.type = self.type..' '..self.name end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "self.type = self.name",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "self.type = self.type..' '..self.name",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if self.type == 'char' and self.dim ~= '' then\r\n\t self.type = 'char*'\r\n end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "self.type = 'char*'",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if self.kind and self.kind == 'var' then\r\n\t\tself.name = string.gsub(self.name, \":.*$\", \"\") -- ???\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "self.name = string.gsub(self.name, \":.*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function classDeclaration:checktype ()\r\n\r\n -- check if there is a pointer to basic type\r\n local basic = isbasic(self.type)\r\n if self.kind == 'func' and basic=='number' and string.find(self.ptr, \"%*\") then\r\n \tself.type = '_userdata'\r\n \tself.ptr = \"\"\r\n end\r\n if basic and self.ptr~='' then\r\n  self.ret = self.ptr\r\n  self.ptr = nil\r\n  if isbasic(self.type) == 'number' then\r\n  \tself.return_userdata = true\r\n  end\r\n end\r\n\r\n -- check if there is array to be returned\r\n if self.dim~='' and self.ret~='' then\r\n   error('#invalid parameter: cannot return an array of values')\r\n end\r\n -- restore 'void*' and 'string*'\r\n if self.type == '_userdata' then self.type = 'void*'\r\n elseif self.type == '_cstring' then self.type = 'char*'\r\n elseif self.type == '_lstate' then self.type = 'lua_State*'\r\n end\r\n\r\n -- resolve types inside the templates\r\n if self.type then\r\n\t self.type = resolve_template_types(self.type)\r\n end\r\n\r\n--\r\n-- -- if returning value, automatically set default value\r\n-- if self.ret ~= '' and self.def == '' then\r\n--  self.def = '0'\r\n-- end\r\n--\r\n\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "local basic = isbasic(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if self.kind == 'func' and basic=='number' and string.find(self.ptr, \"%*\") then\r\n \tself.type = '_userdata'\r\n \tself.ptr = \"\"\r\n end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "self.type = '_userdata'",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "self.ptr = \"\"",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if basic and self.ptr~='' then\r\n  self.ret = self.ptr\r\n  self.ptr = nil\r\n  if isbasic(self.type) == 'number' then\r\n  \tself.return_userdata = true\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "self.ret = self.ptr",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "self.ptr = nil",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if isbasic(self.type) == 'number' then\r\n  \tself.return_userdata = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "self.return_userdata = true",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if self.dim~='' and self.ret~='' then\r\n   error('#invalid parameter: cannot return an array of values')\r\n end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "error('#invalid parameter: cannot return an array of values')",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "if self.type == '_userdata' then self.type = 'void*'\r\n elseif self.type == '_cstring' then self.type = 'char*'\r\n elseif self.type == '_lstate' then self.type = 'lua_State*'\r\n end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "self.type = 'void*'",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "self.type = 'lua_State*'",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if self.type then\r\n\t self.type = resolve_template_types(self.type)\r\n end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "self.type = resolve_template_types(self.type)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function resolve_template_types(type)\r\n\r\n\tif isbasic(type) then\r\n\t\treturn type\r\n\tend\r\n\tlocal b,_,m = string.find(type, \"(%b<>)\")\r\n\tif b then\r\n\r\n\t\tm = split_c_tokens(string.sub(m, 2, -2), \",\")\r\n\t\tfor i=1, table.getn(m) do\r\n\t\t\tm[i] = string.gsub(m[i],\"%s*([%*&])\", \"%1\")\r\n\t\t\tif not isbasic(m[i]) then\r\n\t\t\t\tif not isenum(m[i]) then _, m[i] = applytypedef(\"\", m[i]) end\r\n\t\t\t\tm[i] = findtype(m[i]) or m[i]\r\n\t\t\t\tm[i] = resolve_template_types(m[i])\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tlocal b,i\r\n\t\ttype,b,i = break_template(type)\r\n--print(\"concat is \",concat(m, 1, m.n))\r\n\t\tlocal template_part = \"<\"..concat(m, 1, m.n, \",\")..\">\"\r\n\t\ttype = rebuild_template(type, b, template_part)\r\n\t\ttype = string.gsub(type, \">>\", \"> >\")\r\n\tend\r\n\treturn type\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "if isbasic(type) then\r\n\t\treturn type\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "local b,_,m = string.find(type, \"(%b<>)\")",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if b then\r\n\r\n\t\tm = split_c_tokens(string.sub(m, 2, -2), \",\")\r\n\t\tfor i=1, table.getn(m) do\r\n\t\t\tm[i] = string.gsub(m[i],\"%s*([%*&])\", \"%1\")\r\n\t\t\tif not isbasic(m[i]) then\r\n\t\t\t\tif not isenum(m[i]) then _, m[i] = applytypedef(\"\", m[i]) end\r\n\t\t\t\tm[i] = findtype(m[i]) or m[i]\r\n\t\t\t\tm[i] = resolve_template_types(m[i])\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tlocal b,i\r\n\t\ttype,b,i = break_template(type)\r\n--print(\"concat is \",concat(m, 1, m.n))\r\n\t\tlocal template_part = \"<\"..concat(m, 1, m.n, \",\")..\">\"\r\n\t\ttype = rebuild_template(type, b, template_part)\r\n\t\ttype = string.gsub(type, \">>\", \"> >\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "m = split_c_tokens(string.sub(m, 2, -2), \",\")",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "for i=1, table.getn(m) do\r\n\t\t\tm[i] = string.gsub(m[i],\"%s*([%*&])\", \"%1\")\r\n\t\t\tif not isbasic(m[i]) then\r\n\t\t\t\tif not isenum(m[i]) then _, m[i] = applytypedef(\"\", m[i]) end\r\n\t\t\t\tm[i] = findtype(m[i]) or m[i]\r\n\t\t\t\tm[i] = resolve_template_types(m[i])\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 58,
    "text": "m[i] = string.gsub(m[i],\"%s*([%*&])\", \"%1\")",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if not isbasic(m[i]) then\r\n\t\t\t\tif not isenum(m[i]) then _, m[i] = applytypedef(\"\", m[i]) end\r\n\t\t\t\tm[i] = findtype(m[i]) or m[i]\r\n\t\t\t\tm[i] = resolve_template_types(m[i])\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "if not isenum(m[i]) then _, m[i] = applytypedef(\"\", m[i]) end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "_, m[i] = applytypedef(\"\", m[i])",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "m[i] = findtype(m[i]) or m[i]",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "m[i] = resolve_template_types(m[i])",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local b,i",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "type,b,i = break_template(type)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local template_part = \"<\"..concat(m, 1, m.n, \",\")..\">\"",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "type = rebuild_template(type, b, template_part)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "type = string.gsub(type, \">>\", \"> >\")",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function break_template(s)\r\n\tlocal b,e,timpl = string.find(s, \"(%b<>)\")\r\n\tif timpl then\r\n\t\ts = string.gsub(s, \"%b<>\", \"\")\r\n\t\treturn s, b, timpl\r\n\telse\r\n\t\treturn s, 0, nil\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local b,e,timpl = string.find(s, \"(%b<>)\")",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if timpl then\r\n\t\ts = string.gsub(s, \"%b<>\", \"\")\r\n\t\treturn s, b, timpl\r\n\telse\r\n\t\treturn s, 0, nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "s = string.gsub(s, \"%b<>\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function rebuild_template(s, b, timpl)\r\n\r\n\tif b == 0 then\r\n\t\treturn s\r\n\tend\r\n\r\n\treturn string.sub(s, 1, b-1)..timpl..string.sub(s, b, -1)\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "if b == 0 then\r\n\t\treturn s\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function classDeclaration:print (ident,close)\r\n print(ident..\"Declaration{\")\r\n print(ident..\" mod  = '\"..self.mod..\"',\")\r\n print(ident..\" type = '\"..self.type..\"',\")\r\n print(ident..\" ptr  = '\"..self.ptr..\"',\")\r\n print(ident..\" name = '\"..self.name..\"',\")\r\n print(ident..\" dim  = '\"..self.dim..\"',\")\r\n print(ident..\" def  = '\"..self.def..\"',\")\r\n print(ident..\" ret  = '\"..self.ret..\"',\")\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "print(ident..\"Declaration{\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "print(ident..\" mod  = '\"..self.mod..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "print(ident..\" type = '\"..self.type..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "print(ident..\" ptr  = '\"..self.ptr..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "print(ident..\" name = '\"..self.name..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "print(ident..\" dim  = '\"..self.dim..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "print(ident..\" def  = '\"..self.def..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "print(ident..\" ret  = '\"..self.ret..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function classDeclaration:requirecollection (t)\r\n if self.mod ~= 'const' and\r\n\t    self.dim and self.dim ~= '' and\r\n\t\t\t\t not isbasic(self.type) and\r\n\t\t\t\t self.ptr == '' and self:check_public_access() then\r\n\t\tlocal type = gsub(self.type,\"%s*const%s+\",\"\")\r\n\t\tt[type] = \"tolua_collect_\" .. clean_template(type)\r\n\t\treturn true\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "if self.mod ~= 'const' and\r\n\t    self.dim and self.dim ~= '' and\r\n\t\t\t\t not isbasic(self.type) and\r\n\t\t\t\t self.ptr == '' and self:check_public_access() then\r\n\t\tlocal type = gsub(self.type,\"%s*const%s+\",\"\")\r\n\t\tt[type] = \"tolua_collect_\" .. clean_template(type)\r\n\t\treturn true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "local type = gsub(self.type,\"%s*const%s+\",\"\")",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "t[type] = \"tolua_collect_\" .. clean_template(type)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function classDeclaration:decltype ()\r\n\r\n\tself.type = typevar(self.type)\r\n\tif strfind(self.mod,'const') then\r\n\t\tself.type = 'const '..self.type\r\n\t\tself.mod = gsub(self.mod,'const%s*','')\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "self.type = typevar(self.type)",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if strfind(self.mod,'const') then\r\n\t\tself.type = 'const '..self.type\r\n\t\tself.mod = gsub(self.mod,'const%s*','')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "self.type = 'const '..self.type",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "self.mod = gsub(self.mod,'const%s*','')",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function classDeclaration:outchecktype (narg)\r\n local def\r\n local t = isbasic(self.type)\r\n if self.def~='' then\r\n  def = 1\r\n else\r\n  def = 0\r\n end\r\n if self.dim ~= '' then\r\n\t--if t=='string' then\r\n\t--\treturn 'tolua_isstringarray(tolua_S,'..narg..','..def..',&tolua_err)'\r\n\t--else\r\n\treturn '!tolua_istable(tolua_S,'..narg..',0,&tolua_err)'\r\n \t--end\r\n elseif t then\r\n\treturn '!tolua_is'..t..'(tolua_S,'..narg..','..def..',&tolua_err)'\r\n else\r\n  local is_func = get_is_function(self.type)\r\n  if self.ptr == '&' or self.ptr == '' then\r\n  \treturn '(tolua_isvaluenil(tolua_S,'..narg..',&tolua_err) || !'..is_func..'(tolua_S,'..narg..',\"'..self.type..'\",'..def..',&tolua_err))'\r\n  else\r\n\treturn '!'..is_func..'(tolua_S,'..narg..',\"'..self.type..'\",'..def..',&tolua_err)'\r\n  end\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "local def",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local t = isbasic(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if self.def~='' then\r\n  def = 1\r\n else\r\n  def = 0\r\n end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "def = 1",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "def = 0",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "if self.dim ~= '' then\r\n\t--if t=='string' then\r\n\t--\treturn 'tolua_isstringarray(tolua_S,'..narg..','..def..',&tolua_err)'\r\n\t--else\r\n\treturn '!tolua_istable(tolua_S,'..narg..',0,&tolua_err)'\r\n \t--end\r\n elseif t then\r\n\treturn '!tolua_is'..t..'(tolua_S,'..narg..','..def..',&tolua_err)'\r\n else\r\n  local is_func = get_is_function(self.type)\r\n  if self.ptr == '&' or self.ptr == '' then\r\n  \treturn '(tolua_isvaluenil(tolua_S,'..narg..',&tolua_err) || !'..is_func..'(tolua_S,'..narg..',\"'..self.type..'\",'..def..',&tolua_err))'\r\n  else\r\n\treturn '!'..is_func..'(tolua_S,'..narg..',\"'..self.type..'\",'..def..',&tolua_err)'\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "local is_func = get_is_function(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "if self.ptr == '&' or self.ptr == '' then\r\n  \treturn '(tolua_isvaluenil(tolua_S,'..narg..',&tolua_err) || !'..is_func..'(tolua_S,'..narg..',\"'..self.type..'\",'..def..',&tolua_err))'\r\n  else\r\n\treturn '!'..is_func..'(tolua_S,'..narg..',\"'..self.type..'\",'..def..',&tolua_err)'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function classDeclaration:builddeclaration (narg, cplusplus)\r\n local array = self.dim ~= '' and tonumber(self.dim)==nil\r\n\tlocal line = \"\"\r\n local ptr = ''\r\n local mod\r\n local type = self.type\r\n local nctype = gsub(self.type,'const%s+','')\r\n if self.dim ~= '' then\r\n\t type = gsub(self.type,'const%s+','')  -- eliminates const modifier for arrays\r\n end\r\n if self.ptr~='' and not isbasic(type) then ptr = '*' end\r\n line = concatparam(line,\" \",self.mod,type,ptr)\r\n if array then\r\n  line = concatparam(line,'*')\r\n end\r\n line = concatparam(line,self.name)\r\n if self.dim ~= '' then\r\n  if tonumber(self.dim)~=nil then\r\n   line = concatparam(line,'[',self.dim,'];')\r\n  else\r\n\tif cplusplus then\r\n\t\tline = concatparam(line,' = Mtolua_new_dim(',type,ptr,', '..self.dim..');')\r\n\telse\r\n\t\tline = concatparam(line,' = (',type,ptr,'*)',\r\n\t\t'malloc((',self.dim,')*sizeof(',type,ptr,'));')\r\n\tend\r\n  end\r\n else\r\n  local t = isbasic(type)\r\n  line = concatparam(line,' = ')\r\n  if t == 'state' then\r\n  \tline = concatparam(line, 'tolua_S;')\r\n  else\r\n  \t--print(\"t is \"..tostring(t)..\", ptr is \"..tostring(self.ptr))\r\n  \tif t == 'number' and string.find(self.ptr, \"%*\") then\r\n  \t\tt = 'userdata'\r\n  \tend\r\n\tif not t and ptr=='' then line = concatparam(line,'*') end\r\n\tline = concatparam(line,'((',self.mod,type)\r\n\tif not t then\r\n\t\tline = concatparam(line,'*')\r\n\tend\r\n\tline = concatparam(line,') ')\r\n\tif isenum(nctype) then\r\n\t\tline = concatparam(line,'(int) ')\r\n\tend\r\n\tlocal def = 0\r\n\tif self.def ~= '' then\r\n\t\tdef = self.def\r\n\t\tif (ptr == '' or self.ptr == '&') and not t then\r\n\t\t\tdef = \"(void*)&(const \"..type..\")\"..def\r\n\t\tend\r\n\tend\r\n\tif t then\r\n\t\tline = concatparam(line,'tolua_to'..t,'(tolua_S,',narg,',',def,'));')\r\n\telse\r\n\t\tlocal to_func = get_to_function(type)\r\n\t\tline = concatparam(line,to_func..'(tolua_S,',narg,',',def,'));')\r\n\tend\r\n  end\r\n end\r\n\treturn line\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local array = self.dim ~= '' and tonumber(self.dim)==nil",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local line = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "local ptr = ''",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local mod",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "local type = self.type",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "local nctype = gsub(self.type,'const%s+','')",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if self.dim ~= '' then\r\n\t type = gsub(self.type,'const%s+','')  -- eliminates const modifier for arrays\r\n end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "type = gsub(self.type,'const%s+','')",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if self.ptr~='' and not isbasic(type) then ptr = '*' end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "ptr = '*'",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "line = concatparam(line,\" \",self.mod,type,ptr)",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "if array then\r\n  line = concatparam(line,'*')\r\n end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "line = concatparam(line,'*')",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "line = concatparam(line,self.name)",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if self.dim ~= '' then\r\n  if tonumber(self.dim)~=nil then\r\n   line = concatparam(line,'[',self.dim,'];')\r\n  else\r\n\tif cplusplus then\r\n\t\tline = concatparam(line,' = Mtolua_new_dim(',type,ptr,', '..self.dim..');')\r\n\telse\r\n\t\tline = concatparam(line,' = (',type,ptr,'*)',\r\n\t\t'malloc((',self.dim,')*sizeof(',type,ptr,'));')\r\n\tend\r\n  end\r\n else\r\n  local t = isbasic(type)\r\n  line = concatparam(line,' = ')\r\n  if t == 'state' then\r\n  \tline = concatparam(line, 'tolua_S;')\r\n  else\r\n  \t--print(\"t is \"..tostring(t)..\", ptr is \"..tostring(self.ptr))\r\n  \tif t == 'number' and string.find(self.ptr, \"%*\") then\r\n  \t\tt = 'userdata'\r\n  \tend\r\n\tif not t and ptr=='' then line = concatparam(line,'*') end\r\n\tline = concatparam(line,'((',self.mod,type)\r\n\tif not t then\r\n\t\tline = concatparam(line,'*')\r\n\tend\r\n\tline = concatparam(line,') ')\r\n\tif isenum(nctype) then\r\n\t\tline = concatparam(line,'(int) ')\r\n\tend\r\n\tlocal def = 0\r\n\tif self.def ~= '' then\r\n\t\tdef = self.def\r\n\t\tif (ptr == '' or self.ptr == '&') and not t then\r\n\t\t\tdef = \"(void*)&(const \"..type..\")\"..def\r\n\t\tend\r\n\tend\r\n\tif t then\r\n\t\tline = concatparam(line,'tolua_to'..t,'(tolua_S,',narg,',',def,'));')\r\n\telse\r\n\t\tlocal to_func = get_to_function(type)\r\n\t\tline = concatparam(line,to_func..'(tolua_S,',narg,',',def,'));')\r\n\tend\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "if tonumber(self.dim)~=nil then\r\n   line = concatparam(line,'[',self.dim,'];')\r\n  else\r\n\tif cplusplus then\r\n\t\tline = concatparam(line,' = Mtolua_new_dim(',type,ptr,', '..self.dim..');')\r\n\telse\r\n\t\tline = concatparam(line,' = (',type,ptr,'*)',\r\n\t\t'malloc((',self.dim,')*sizeof(',type,ptr,'));')\r\n\tend\r\n  end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "line = concatparam(line,'[',self.dim,'];')",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "if cplusplus then\r\n\t\tline = concatparam(line,' = Mtolua_new_dim(',type,ptr,', '..self.dim..');')\r\n\telse\r\n\t\tline = concatparam(line,' = (',type,ptr,'*)',\r\n\t\t'malloc((',self.dim,')*sizeof(',type,ptr,'));')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "line = concatparam(line,' = Mtolua_new_dim(',type,ptr,', '..self.dim..');')",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "line = concatparam(line,' = (',type,ptr,'*)',\r\n\t\t'malloc((',self.dim,')*sizeof(',type,ptr,'));')",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "local t = isbasic(type)",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "line = concatparam(line,' = ')",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "if t == 'state' then\r\n  \tline = concatparam(line, 'tolua_S;')\r\n  else\r\n  \t--print(\"t is \"..tostring(t)..\", ptr is \"..tostring(self.ptr))\r\n  \tif t == 'number' and string.find(self.ptr, \"%*\") then\r\n  \t\tt = 'userdata'\r\n  \tend\r\n\tif not t and ptr=='' then line = concatparam(line,'*') end\r\n\tline = concatparam(line,'((',self.mod,type)\r\n\tif not t then\r\n\t\tline = concatparam(line,'*')\r\n\tend\r\n\tline = concatparam(line,') ')\r\n\tif isenum(nctype) then\r\n\t\tline = concatparam(line,'(int) ')\r\n\tend\r\n\tlocal def = 0\r\n\tif self.def ~= '' then\r\n\t\tdef = self.def\r\n\t\tif (ptr == '' or self.ptr == '&') and not t then\r\n\t\t\tdef = \"(void*)&(const \"..type..\")\"..def\r\n\t\tend\r\n\tend\r\n\tif t then\r\n\t\tline = concatparam(line,'tolua_to'..t,'(tolua_S,',narg,',',def,'));')\r\n\telse\r\n\t\tlocal to_func = get_to_function(type)\r\n\t\tline = concatparam(line,to_func..'(tolua_S,',narg,',',def,'));')\r\n\tend\r\n  end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "line = concatparam(line, 'tolua_S;')",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "if t == 'number' and string.find(self.ptr, \"%*\") then\r\n  \t\tt = 'userdata'\r\n  \tend",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "t = 'userdata'",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "if not t and ptr=='' then line = concatparam(line,'*') end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "line = concatparam(line,'((',self.mod,type)",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "if not t then\r\n\t\tline = concatparam(line,'*')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "line = concatparam(line,') ')",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "if isenum(nctype) then\r\n\t\tline = concatparam(line,'(int) ')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "line = concatparam(line,'(int) ')",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "local def = 0",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if self.def ~= '' then\r\n\t\tdef = self.def\r\n\t\tif (ptr == '' or self.ptr == '&') and not t then\r\n\t\t\tdef = \"(void*)&(const \"..type..\")\"..def\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "def = self.def",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "if (ptr == '' or self.ptr == '&') and not t then\r\n\t\t\tdef = \"(void*)&(const \"..type..\")\"..def\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "def = \"(void*)&(const \"..type..\")\"..def",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "if t then\r\n\t\tline = concatparam(line,'tolua_to'..t,'(tolua_S,',narg,',',def,'));')\r\n\telse\r\n\t\tlocal to_func = get_to_function(type)\r\n\t\tline = concatparam(line,to_func..'(tolua_S,',narg,',',def,'));')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "line = concatparam(line,'tolua_to'..t,'(tolua_S,',narg,',',def,'));')",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "local to_func = get_to_function(type)",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "line = concatparam(line,to_func..'(tolua_S,',narg,',',def,'));')",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function classDeclaration:declare (narg)\r\n if self.dim ~= '' and tonumber(self.dim)==nil then\r\n\t output('#ifdef __cplusplus\\n')\r\n\t\toutput(self:builddeclaration(narg,true))\r\n\t\toutput('#else\\n')\r\n\t\toutput(self:builddeclaration(narg,false))\r\n\t output('#endif\\n')\r\n\telse\r\n\t\toutput(self:builddeclaration(narg,false))\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "if self.dim ~= '' and tonumber(self.dim)==nil then\r\n\t output('#ifdef __cplusplus\\n')\r\n\t\toutput(self:builddeclaration(narg,true))\r\n\t\toutput('#else\\n')\r\n\t\toutput(self:builddeclaration(narg,false))\r\n\t output('#endif\\n')\r\n\telse\r\n\t\toutput(self:builddeclaration(narg,false))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "output('#ifdef __cplusplus\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "output(self:builddeclaration(narg,true))",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "output('#else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "output(self:builddeclaration(narg,false))",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "output('#endif\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function classDeclaration:getarray (narg)\r\n if self.dim ~= '' then\r\n\t local type = gsub(self.type,'const ','')\r\n  output('  {')\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n  local def; if self.def~='' then def=1 else def=0 end\r\n\t\tlocal t = isbasic(type)\r\n\t\tif (t) then\r\n\t\t   output('   if (!tolua_is'..t..'array(tolua_S,',narg,',',self.dim,',',def,',&tolua_err))')\r\n\t\telse\r\n\t\t   output('   if (!tolua_isusertypearray(tolua_S,',narg,',\"',type,'\",',self.dim,',',def,',&tolua_err))')\r\n\t\tend\r\n  output('    goto tolua_lerror;')\r\n  output('   else\\n')\r\n\t output('#endif\\n')\r\n  output('   {')\r\n  output('    int i;')\r\n  output('    for(i=0; i<'..self.dim..';i++)')\r\n  local t = isbasic(type)\r\n  local ptr = ''\r\n  if self.ptr~='' then ptr = '*' end\r\n  output('   ',self.name..'[i] = ')\r\n  if not t and ptr=='' then output('*') end\r\n  output('((',type)\r\n  if not t then\r\n   output('*')\r\n  end\r\n  output(') ')\r\n  local def = 0\r\n  if self.def ~= '' then def = self.def end\r\n  if t then\r\n   output('tolua_tofield'..t..'(tolua_S,',narg,',i+1,',def,'));')\r\n  else\r\n   output('tolua_tofieldusertype(tolua_S,',narg,',i+1,',def,'));')\r\n  end\r\n  output('   }')\r\n  output('  }')\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "if self.dim ~= '' then\r\n\t local type = gsub(self.type,'const ','')\r\n  output('  {')\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n  local def; if self.def~='' then def=1 else def=0 end\r\n\t\tlocal t = isbasic(type)\r\n\t\tif (t) then\r\n\t\t   output('   if (!tolua_is'..t..'array(tolua_S,',narg,',',self.dim,',',def,',&tolua_err))')\r\n\t\telse\r\n\t\t   output('   if (!tolua_isusertypearray(tolua_S,',narg,',\"',type,'\",',self.dim,',',def,',&tolua_err))')\r\n\t\tend\r\n  output('    goto tolua_lerror;')\r\n  output('   else\\n')\r\n\t output('#endif\\n')\r\n  output('   {')\r\n  output('    int i;')\r\n  output('    for(i=0; i<'..self.dim..';i++)')\r\n  local t = isbasic(type)\r\n  local ptr = ''\r\n  if self.ptr~='' then ptr = '*' end\r\n  output('   ',self.name..'[i] = ')\r\n  if not t and ptr=='' then output('*') end\r\n  output('((',type)\r\n  if not t then\r\n   output('*')\r\n  end\r\n  output(') ')\r\n  local def = 0\r\n  if self.def ~= '' then def = self.def end\r\n  if t then\r\n   output('tolua_tofield'..t..'(tolua_S,',narg,',i+1,',def,'));')\r\n  else\r\n   output('tolua_tofieldusertype(tolua_S,',narg,',i+1,',def,'));')\r\n  end\r\n  output('   }')\r\n  output('  }')\r\n end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "local type = gsub(self.type,'const ','')",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "output('  {')",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "output('#ifndef TOLUA_RELEASE\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "if self.def~='' then def=1 else def=0 end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "def=1",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "def=0",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "if (t) then\r\n\t\t   output('   if (!tolua_is'..t..'array(tolua_S,',narg,',',self.dim,',',def,',&tolua_err))')\r\n\t\telse\r\n\t\t   output('   if (!tolua_isusertypearray(tolua_S,',narg,',\"',type,'\",',self.dim,',',def,',&tolua_err))')\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "output('   if (!tolua_is'..t..'array(tolua_S,',narg,',',self.dim,',',def,',&tolua_err))')",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "output('   if (!tolua_isusertypearray(tolua_S,',narg,',\"',type,'\",',self.dim,',',def,',&tolua_err))')",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "output('    goto tolua_lerror;')",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "output('   else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "output('   {')",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "output('    int i;')",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "output('    for(i=0; i<'..self.dim..';i++)')",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "if self.ptr~='' then ptr = '*' end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "output('   ',self.name..'[i] = ')",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "if not t and ptr=='' then output('*') end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "output('*')",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "output('((',type)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "if not t then\r\n   output('*')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "output(') ')",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "if self.def ~= '' then def = self.def end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "if t then\r\n   output('tolua_tofield'..t..'(tolua_S,',narg,',i+1,',def,'));')\r\n  else\r\n   output('tolua_tofieldusertype(tolua_S,',narg,',i+1,',def,'));')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "output('tolua_tofield'..t..'(tolua_S,',narg,',i+1,',def,'));')",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "output('tolua_tofieldusertype(tolua_S,',narg,',i+1,',def,'));')",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "output('   }')",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "output('  }')",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function classDeclaration:setarray (narg)\r\n if not strfind(self.type,'const%s+') and self.dim ~= '' then\r\n\t local type = gsub(self.type,'const ','')\r\n  output('  {')\r\n  output('   int i;')\r\n  output('   for(i=0; i<'..self.dim..';i++)')\r\n  local t,ct = isbasic(type)\r\n  if t then\r\n   output('    tolua_pushfield'..t..'(tolua_S,',narg,',i+1,(',ct,')',self.name,'[i]);')\r\n  else\r\n   if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = Mtolua_new((',type,')(',self.name,'[i]));')\r\n     output('    tolua_pushfieldusertype_and_takeownership(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&',self.name,'[i],sizeof(',type,'));')\r\n     output('    tolua_pushfieldusertype(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n   else\r\n    output('   tolua_pushfieldusertype(tolua_S,',narg,',i+1,(void*)',self.name,'[i],\"',type,'\");')\r\n   end\r\n  end\r\n  output('  }')\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "if not strfind(self.type,'const%s+') and self.dim ~= '' then\r\n\t local type = gsub(self.type,'const ','')\r\n  output('  {')\r\n  output('   int i;')\r\n  output('   for(i=0; i<'..self.dim..';i++)')\r\n  local t,ct = isbasic(type)\r\n  if t then\r\n   output('    tolua_pushfield'..t..'(tolua_S,',narg,',i+1,(',ct,')',self.name,'[i]);')\r\n  else\r\n   if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = Mtolua_new((',type,')(',self.name,'[i]));')\r\n     output('    tolua_pushfieldusertype_and_takeownership(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&',self.name,'[i],sizeof(',type,'));')\r\n     output('    tolua_pushfieldusertype(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n   else\r\n    output('   tolua_pushfieldusertype(tolua_S,',narg,',i+1,(void*)',self.name,'[i],\"',type,'\");')\r\n   end\r\n  end\r\n  output('  }')\r\n end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "output('   int i;')",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "output('   for(i=0; i<'..self.dim..';i++)')",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "local t,ct = isbasic(type)",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "if t then\r\n   output('    tolua_pushfield'..t..'(tolua_S,',narg,',i+1,(',ct,')',self.name,'[i]);')\r\n  else\r\n   if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = Mtolua_new((',type,')(',self.name,'[i]));')\r\n     output('    tolua_pushfieldusertype_and_takeownership(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&',self.name,'[i],sizeof(',type,'));')\r\n     output('    tolua_pushfieldusertype(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n   else\r\n    output('   tolua_pushfieldusertype(tolua_S,',narg,',i+1,(void*)',self.name,'[i],\"',type,'\");')\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "output('    tolua_pushfield'..t..'(tolua_S,',narg,',i+1,(',ct,')',self.name,'[i]);')",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "if self.ptr == '' then\r\n     output('   {')\r\n     output('#ifdef __cplusplus\\n')\r\n     output('    void* tolua_obj = Mtolua_new((',type,')(',self.name,'[i]));')\r\n     output('    tolua_pushfieldusertype_and_takeownership(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')\r\n     output('#else\\n')\r\n     output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&',self.name,'[i],sizeof(',type,'));')\r\n     output('    tolua_pushfieldusertype(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')\r\n     output('#endif\\n')\r\n     output('   }')\r\n   else\r\n    output('   tolua_pushfieldusertype(tolua_S,',narg,',i+1,(void*)',self.name,'[i],\"',type,'\");')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "output('    void* tolua_obj = Mtolua_new((',type,')(',self.name,'[i]));')",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "output('    tolua_pushfieldusertype_and_takeownership(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&',self.name,'[i],sizeof(',type,'));')",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "output('    tolua_pushfieldusertype(tolua_S,',narg,',i+1,tolua_obj,\"',type,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "output('   tolua_pushfieldusertype(tolua_S,',narg,',i+1,(void*)',self.name,'[i],\"',type,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "function classDeclaration:freearray ()\r\n if self.dim ~= '' and tonumber(self.dim)==nil then\r\n\t output('#ifdef __cplusplus\\n')\r\n\t\toutput('  Mtolua_delete_dim(',self.name,');')\r\n\t output('#else\\n')\r\n  output('  free(',self.name,');')\r\n\t output('#endif\\n')\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 206,
    "text": "if self.dim ~= '' and tonumber(self.dim)==nil then\r\n\t output('#ifdef __cplusplus\\n')\r\n\t\toutput('  Mtolua_delete_dim(',self.name,');')\r\n\t output('#else\\n')\r\n  output('  free(',self.name,');')\r\n\t output('#endif\\n')\r\n end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "output('  Mtolua_delete_dim(',self.name,');')",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "output('  free(',self.name,');')",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function classDeclaration:passpar ()\r\n if self.ptr=='&' and not isbasic(self.type) then\r\n  output('*'..self.name)\r\n elseif self.ret=='*' then\r\n  output('&'..self.name)\r\n else\r\n  output(self.name)\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "if self.ptr=='&' and not isbasic(self.type) then\r\n  output('*'..self.name)\r\n elseif self.ret=='*' then\r\n  output('&'..self.name)\r\n else\r\n  output(self.name)\r\n end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "output('*'..self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "output('&'..self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "output(self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "function classDeclaration:retvalue ()\r\n if self.ret ~= '' then\r\n  local t,ct = isbasic(self.type)\r\n  if t and t~='' then\r\n   output('   tolua_push'..t..'(tolua_S,(',ct,')'..self.name..');')\r\n  else\r\n   local push_func = get_push_function(self.type)\r\n   output('   ',push_func,'(tolua_S,(void*)'..self.name..',\"',self.type,'\");')\r\n  end\r\n  return 1\r\n end\r\n return 0\r\nend",
    "type": "function"
  }, {
    "id": 217,
    "text": "if self.ret ~= '' then\r\n  local t,ct = isbasic(self.type)\r\n  if t and t~='' then\r\n   output('   tolua_push'..t..'(tolua_S,(',ct,')'..self.name..');')\r\n  else\r\n   local push_func = get_push_function(self.type)\r\n   output('   ',push_func,'(tolua_S,(void*)'..self.name..',\"',self.type,'\");')\r\n  end\r\n  return 1\r\n end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "local t,ct = isbasic(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "if t and t~='' then\r\n   output('   tolua_push'..t..'(tolua_S,(',ct,')'..self.name..');')\r\n  else\r\n   local push_func = get_push_function(self.type)\r\n   output('   ',push_func,'(tolua_S,(void*)'..self.name..',\"',self.type,'\");')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "output('   tolua_push'..t..'(tolua_S,(',ct,')'..self.name..');')",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "local push_func = get_push_function(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "output('   ',push_func,'(tolua_S,(void*)'..self.name..',\"',self.type,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "function _Declaration (t)\r\n\r\n setmetatable(t,classDeclaration)\r\n t:buildnames()\r\n t:checkname()\r\n t:checktype()\r\n local ft = findtype(t.type) or t.type\r\n if not isenum(ft) then\r\n\tt.mod, t.type = applytypedef(t.mod, ft)\r\n end\r\n\r\n if t.kind==\"var\" and (string.find(t.mod, \"tolua_property%s\") or string.find(t.mod, \"tolua_property$\")) then\r\n \tt.mod = string.gsub(t.mod, \"tolua_property\", \"tolua_property__\"..get_property_type())\r\n end\r\n\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "setmetatable(t,classDeclaration)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "t:buildnames()",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "t:checkname()",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "t:checktype()",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "local ft = findtype(t.type) or t.type",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "if not isenum(ft) then\r\n\tt.mod, t.type = applytypedef(t.mod, ft)\r\n end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "t.mod, t.type = applytypedef(t.mod, ft)",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "if t.kind==\"var\" and (string.find(t.mod, \"tolua_property%s\") or string.find(t.mod, \"tolua_property$\")) then\r\n \tt.mod = string.gsub(t.mod, \"tolua_property\", \"tolua_property__\"..get_property_type())\r\n end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "t.mod = string.gsub(t.mod, \"tolua_property\", \"tolua_property__\"..get_property_type())",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function Declaration (s,kind,is_parameter)\r\n\r\n -- eliminate spaces if default value is provided\r\n s = gsub(s,\"%s*=%s*\",\"=\")\r\n s = gsub(s, \"%s*<\", \"<\")\r\n\r\n local defb,tmpdef\r\n defb,_,tmpdef = string.find(s, \"(=.*)$\")\r\n if defb then\r\n \ts = string.gsub(s, \"=.*$\", \"\")\r\n else\r\n \ttmpdef = ''\r\n end\r\n if kind == \"var\" then\r\n  -- check the form: void\r\n  if s == '' or s == 'void' then\r\n   return _Declaration{type = 'void', kind = kind, is_parameter = is_parameter}\r\n  end\r\n end\r\n\r\n -- check the form: mod type*& name\r\n local t = split_c_tokens(s,'%*%s*&')\r\n if t.n == 2 then\r\n  if kind == 'func' then\r\n   error(\"#invalid function return type: \"..s)\r\n  end\r\n  --local m = split(t[1],'%s%s*')\r\n  local m = split_c_tokens(t[1],'%s+')\r\n  return _Declaration{\r\n   name = t[2]..tmpdef,\r\n   ptr = '*',\r\n   ret = '&',\r\n   --type = rebuild_template(m[m.n], tb, timpl),\r\n   type = m[m.n],\r\n   mod = concat(m,1,m.n-1),\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end\r\n\r\n -- check the form: mod type** name\r\n t = split_c_tokens(s,'%*%s*%*')\r\n if t.n == 2 then\r\n  if kind == 'func' then\r\n   error(\"#invalid function return type: \"..s)\r\n  end\r\n  --local m = split(t[1],'%s%s*')\r\n  local m = split_c_tokens(t[1],'%s+')\r\n  return _Declaration{\r\n   name = t[2]..tmpdef,\r\n   ptr = '*',\r\n   ret = '*',\r\n   --type = rebuild_template(m[m.n], tb, timpl),\r\n   type = m[m.n],\r\n   mod = concat(m,1,m.n-1),\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end\r\n\r\n -- check the form: mod type& name\r\n t = split_c_tokens(s,'&')\r\n if t.n == 2 then\r\n  --local m = split(t[1],'%s%s*')\r\n  local m = split_c_tokens(t[1],'%s+')\r\n  return _Declaration{\r\n   name = t[2]..tmpdef,\r\n   ptr = '&',\r\n   --type = rebuild_template(m[m.n], tb, timpl),\r\n   type = m[m.n],\r\n   mod = concat(m,1,m.n-1),\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end\r\n\r\n -- check the form: mod type* name\r\n local s1 = gsub(s,\"(%b\\[\\])\",function (n) return gsub(n,'%*','\\1') end)\r\n t = split_c_tokens(s1,'%*')\r\n if t.n == 2 then\r\n  t[2] = gsub(t[2],'\\1','%*') -- restore * in dimension expression\r\n  --local m = split(t[1],'%s%s*')\r\n  local m = split_c_tokens(t[1],'%s+')\r\n  return _Declaration{\r\n   name = t[2]..tmpdef,\r\n   ptr = '*',\r\n   type = m[m.n],\r\n   --type = rebuild_template(m[m.n], tb, timpl),\r\n   mod = concat(m,1,m.n-1)   ,\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end\r\n\r\n if kind == 'var' then\r\n  -- check the form: mod type name\r\n  --t = split(s,'%s%s*')\r\n  t = split_c_tokens(s,'%s+')\r\n  local v\r\n  if findtype(t[t.n]) then v = create_varname() else v = t[t.n]; t.n = t.n-1 end\r\n  return _Declaration{\r\n   name = v..tmpdef,\r\n   --type = rebuild_template(t[t.n], tb, timpl),\r\n   type = t[t.n],\r\n   mod = concat(t,1,t.n-1),\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n\r\n else -- kind == \"func\"\r\n\r\n  -- check the form: mod type name\r\n  --t = split(s,'%s%s*')\r\n  t = split_c_tokens(s,'%s+')\r\n  local v = t[t.n]  -- last word is the function name\r\n  local tp,md\r\n  if t.n>1 then\r\n   tp = t[t.n-1]\r\n   md = concat(t,1,t.n-2)\r\n  end\r\n  --if tp then tp = rebuild_template(tp, tb, timpl) end\r\n  return _Declaration{\r\n   name = v,\r\n   type = tp,\r\n   mod = md,\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 236,
    "text": "s = gsub(s,\"%s*=%s*\",\"=\")",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "s = gsub(s, \"%s*<\", \"<\")",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "local defb,tmpdef",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "defb,_,tmpdef = string.find(s, \"(=.*)$\")",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "if defb then\r\n \ts = string.gsub(s, \"=.*$\", \"\")\r\n else\r\n \ttmpdef = ''\r\n end",
    "type": "statement:if"
  }, {
    "id": 241,
    "text": "s = string.gsub(s, \"=.*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "tmpdef = ''",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "if kind == \"var\" then\r\n  -- check the form: void\r\n  if s == '' or s == 'void' then\r\n   return _Declaration{type = 'void', kind = kind, is_parameter = is_parameter}\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "if s == '' or s == 'void' then\r\n   return _Declaration{type = 'void', kind = kind, is_parameter = is_parameter}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "local t = split_c_tokens(s,'%*%s*&')",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "if t.n == 2 then\r\n  if kind == 'func' then\r\n   error(\"#invalid function return type: \"..s)\r\n  end\r\n  --local m = split(t[1],'%s%s*')\r\n  local m = split_c_tokens(t[1],'%s+')\r\n  return _Declaration{\r\n   name = t[2]..tmpdef,\r\n   ptr = '*',\r\n   ret = '&',\r\n   --type = rebuild_template(m[m.n], tb, timpl),\r\n   type = m[m.n],\r\n   mod = concat(m,1,m.n-1),\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "if kind == 'func' then\r\n   error(\"#invalid function return type: \"..s)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "error(\"#invalid function return type: \"..s)",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "local m = split_c_tokens(t[1],'%s+')",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "t = split_c_tokens(s,'%*%s*%*')",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "if t.n == 2 then\r\n  if kind == 'func' then\r\n   error(\"#invalid function return type: \"..s)\r\n  end\r\n  --local m = split(t[1],'%s%s*')\r\n  local m = split_c_tokens(t[1],'%s+')\r\n  return _Declaration{\r\n   name = t[2]..tmpdef,\r\n   ptr = '*',\r\n   ret = '*',\r\n   --type = rebuild_template(m[m.n], tb, timpl),\r\n   type = m[m.n],\r\n   mod = concat(m,1,m.n-1),\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "t = split_c_tokens(s,'&')",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "if t.n == 2 then\r\n  --local m = split(t[1],'%s%s*')\r\n  local m = split_c_tokens(t[1],'%s+')\r\n  return _Declaration{\r\n   name = t[2]..tmpdef,\r\n   ptr = '&',\r\n   --type = rebuild_template(m[m.n], tb, timpl),\r\n   type = m[m.n],\r\n   mod = concat(m,1,m.n-1),\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end",
    "type": "statement:if"
  }, {
    "id": 254,
    "text": "local s1 = gsub(s,\"(%b\\[\\])\",function (n) return gsub(n,'%*','\\1') end)",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "t = split_c_tokens(s1,'%*')",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "if t.n == 2 then\r\n  t[2] = gsub(t[2],'\\1','%*') -- restore * in dimension expression\r\n  --local m = split(t[1],'%s%s*')\r\n  local m = split_c_tokens(t[1],'%s+')\r\n  return _Declaration{\r\n   name = t[2]..tmpdef,\r\n   ptr = '*',\r\n   type = m[m.n],\r\n   --type = rebuild_template(m[m.n], tb, timpl),\r\n   mod = concat(m,1,m.n-1)   ,\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "t[2] = gsub(t[2],'\\1','%*')",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "if kind == 'var' then\r\n  -- check the form: mod type name\r\n  --t = split(s,'%s%s*')\r\n  t = split_c_tokens(s,'%s+')\r\n  local v\r\n  if findtype(t[t.n]) then v = create_varname() else v = t[t.n]; t.n = t.n-1 end\r\n  return _Declaration{\r\n   name = v..tmpdef,\r\n   --type = rebuild_template(t[t.n], tb, timpl),\r\n   type = t[t.n],\r\n   mod = concat(t,1,t.n-1),\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n\r\n else -- kind == \"func\"\r\n\r\n  -- check the form: mod type name\r\n  --t = split(s,'%s%s*')\r\n  t = split_c_tokens(s,'%s+')\r\n  local v = t[t.n]  -- last word is the function name\r\n  local tp,md\r\n  if t.n>1 then\r\n   tp = t[t.n-1]\r\n   md = concat(t,1,t.n-2)\r\n  end\r\n  --if tp then tp = rebuild_template(tp, tb, timpl) end\r\n  return _Declaration{\r\n   name = v,\r\n   type = tp,\r\n   mod = md,\r\n   is_parameter = is_parameter,\r\n   kind = kind\r\n  }\r\n end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "t = split_c_tokens(s,'%s+')",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "local v",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "if findtype(t[t.n]) then v = create_varname() else v = t[t.n]; t.n = t.n-1 end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "v = create_varname()",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "v = t[t.n]",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "t.n = t.n-1",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "local v = t[t.n]",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "local tp,md",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "if t.n>1 then\r\n   tp = t[t.n-1]\r\n   md = concat(t,1,t.n-2)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "tp = t[t.n-1]",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "md = concat(t,1,t.n-2)",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function (n) return gsub(n,'%*','\\1') end",
    "type": "function"
  }, {
    "id": 272,
    "text": "",
    "type": "function container"
  }, {
    "id": 273,
    "text": "get_is_function",
    "type": "global function"
  }, {
    "id": 274,
    "text": "isbasic",
    "type": "global function"
  }, {
    "id": 275,
    "text": "typevar",
    "type": "global function"
  }, {
    "id": 276,
    "text": "print",
    "type": "global function"
  }, {
    "id": 277,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 278,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 279,
    "text": "get_property_type",
    "type": "global function"
  }, {
    "id": 280,
    "text": "get_push_function",
    "type": "global function"
  }, {
    "id": 281,
    "text": "clean_template",
    "type": "global function"
  }, {
    "id": 282,
    "text": "concatparam",
    "type": "global function"
  }, {
    "id": 283,
    "text": "split_c_tokens",
    "type": "global function"
  }, {
    "id": 284,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 285,
    "text": "get_to_function",
    "type": "global function"
  }, {
    "id": 286,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 287,
    "text": "find",
    "type": "global function"
  }, {
    "id": 288,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 289,
    "text": "split",
    "type": "global function"
  }, {
    "id": 290,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 291,
    "text": "findtype",
    "type": "global function"
  }, {
    "id": 292,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 293,
    "text": "error",
    "type": "global function"
  }, {
    "id": 294,
    "text": "output",
    "type": "global function"
  }, {
    "id": 295,
    "text": "find_enum_var",
    "type": "global function"
  }, {
    "id": 296,
    "text": "applytypedef",
    "type": "global function"
  }, {
    "id": 297,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 298,
    "text": "isenum",
    "type": "global function"
  }, {
    "id": 299,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 300,
    "text": "",
    "type": "variable container"
  }, {
    "id": 301,
    "text": "",
    "type": "require container"
  }, {
    "id": 302,
    "text": "",
    "type": "global variable"
  }, {
    "id": 303,
    "text": "",
    "type": "n/a"
  }, {
    "id": 304,
    "text": "",
    "type": "global variable"
  }, {
    "id": 305,
    "text": "",
    "type": "n/a"
  } ]
}