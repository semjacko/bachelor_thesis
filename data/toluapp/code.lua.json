{
  "_filename": "code.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/toluapp/src/bin/lua/code.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 2,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 2,
    "label": "has",
    "to": 35
  }, {
    "from": 2,
    "label": "has",
    "to": 36
  }, {
    "from": 2,
    "label": "has",
    "to": 37
  }, {
    "from": 2,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 29
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 24
  }, {
    "from": 50,
    "label": "has",
    "to": 25
  }, {
    "from": 50,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 50,
    "label": "has",
    "to": 29
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 44,
    "label": "calls",
    "to": 63
  }, {
    "from": 39,
    "label": "calls",
    "to": 53
  }, {
    "from": 39,
    "label": "calls",
    "to": 53
  }, {
    "from": 39,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 57
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 44,
    "label": "calls",
    "to": 62
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 60
  }, {
    "from": 2,
    "label": "calls",
    "to": 60
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 48,
    "label": "calls",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 52,
    "label": "declares",
    "to": 2
  }, {
    "from": 52,
    "label": "declares",
    "to": 39
  }, {
    "from": 52,
    "label": "declares",
    "to": 44
  }, {
    "from": 52,
    "label": "declares",
    "to": 48
  }, {
    "from": 52,
    "label": "declares",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 64
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 64,
    "label": "initializes",
    "to": 66
  }, {
    "from": 64,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 64,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "code",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classCode:register (pre)\r\n pre = pre or ''\r\n -- clean Lua code\r\n local s = clean(self.text)\r\n if not s then\r\n  --print(self.text)\r\n  error(\"parser error in embedded code\")\r\n end\r\n\r\n -- get first line\r\n local _, _, first_line=string.find(self.text, \"^([^\\n\\r]*)\")\r\n if string.find(first_line, \"^%s*%-%-\") then\r\n\t if string.find(first_line, \"^%-%-##\") then\r\n\t\tfirst_line = string.gsub(first_line, \"^%-%-##\", \"\")\r\n\t\tif flags['C'] then\r\n\t\t\ts = string.gsub(s, \"^%-%-##[^\\n\\r]*\\n\", \"\")\r\n\t\tend\r\n\t end\r\n else\r\n \tfirst_line = \"\"\r\n end\r\n\r\n -- pad to 16 bytes\r\n local npad = 16 - (#s % 16)\r\n local spad = \"\"\r\n for i=1,npad do\r\n \tspad = spad .. \"-\"\r\n end\r\n s = s..spad\r\n \r\n -- convert to C\r\n output('\\n'..pre..'{ /* begin embedded lua code */\\n')\r\n output(pre..' int top = lua_gettop(tolua_S);')\r\n output(pre..' static const unsigned char B[] = {\\n   ')\r\n local t={n=0}\r\n\r\n local b = gsub(s,'(.)',function (c)\r\n                         local e = ''\r\n                         t.n=t.n+1 if t.n==15 then t.n=0 e='\\n'..pre..'  ' end\r\n                         return format('%3u,%s',strbyte(c),e)\r\n                        end\r\n               )\r\n output(b..strbyte(\" \"))\r\n output('\\n'..pre..' };\\n')\r\n if first_line and first_line ~= \"\" then\r\n \toutput(pre..' tolua_dobuffer(tolua_S,(char*)B,sizeof(B),\"tolua embedded: '..first_line..'\");')\r\n else\r\n \toutput(pre..' tolua_dobuffer(tolua_S,(char*)B,sizeof(B),\"tolua: embedded Lua code '..code_n..'\");')\r\n end\r\n output(pre..' lua_settop(tolua_S, top);')\r\n output(pre..'} /* end of embedded lua code */\\n\\n')\r\n code_n = code_n +1\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "pre = pre or ''",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local s = clean(self.text)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if not s then\r\n  --print(self.text)\r\n  error(\"parser error in embedded code\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "error(\"parser error in embedded code\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local _, _, first_line=string.find(self.text, \"^([^\\n\\r]*)\")",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if string.find(first_line, \"^%s*%-%-\") then\r\n\t if string.find(first_line, \"^%-%-##\") then\r\n\t\tfirst_line = string.gsub(first_line, \"^%-%-##\", \"\")\r\n\t\tif flags['C'] then\r\n\t\t\ts = string.gsub(s, \"^%-%-##[^\\n\\r]*\\n\", \"\")\r\n\t\tend\r\n\t end\r\n else\r\n \tfirst_line = \"\"\r\n end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "if string.find(first_line, \"^%-%-##\") then\r\n\t\tfirst_line = string.gsub(first_line, \"^%-%-##\", \"\")\r\n\t\tif flags['C'] then\r\n\t\t\ts = string.gsub(s, \"^%-%-##[^\\n\\r]*\\n\", \"\")\r\n\t\tend\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "first_line = string.gsub(first_line, \"^%-%-##\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if flags['C'] then\r\n\t\t\ts = string.gsub(s, \"^%-%-##[^\\n\\r]*\\n\", \"\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "s = string.gsub(s, \"^%-%-##[^\\n\\r]*\\n\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "first_line = \"\"",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local npad = 16 - (#s % 16)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local spad = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for i=1,npad do\r\n \tspad = spad .. \"-\"\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "spad = spad .. \"-\"",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "s = s..spad",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "output('\\n'..pre..'{ /* begin embedded lua code */\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "output(pre..' int top = lua_gettop(tolua_S);')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "output(pre..' static const unsigned char B[] = {\\n   ')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local t={n=0}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local b = gsub(s,'(.)',function (c)\r\n                         local e = ''\r\n                         t.n=t.n+1 if t.n==15 then t.n=0 e='\\n'..pre..'  ' end\r\n                         return format('%3u,%s',strbyte(c),e)\r\n                        end\r\n               )",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local e = ''",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "t.n=t.n+1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if t.n==15 then t.n=0 e='\\n'..pre..'  ' end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "t.n=0",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "e='\\n'..pre..'  '",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 30,
    "text": "output(b..strbyte(\" \"))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "output('\\n'..pre..' };\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "if first_line and first_line ~= \"\" then\r\n \toutput(pre..' tolua_dobuffer(tolua_S,(char*)B,sizeof(B),\"tolua embedded: '..first_line..'\");')\r\n else\r\n \toutput(pre..' tolua_dobuffer(tolua_S,(char*)B,sizeof(B),\"tolua: embedded Lua code '..code_n..'\");')\r\n end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "output(pre..' tolua_dobuffer(tolua_S,(char*)B,sizeof(B),\"tolua embedded: '..first_line..'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "output(pre..' tolua_dobuffer(tolua_S,(char*)B,sizeof(B),\"tolua: embedded Lua code '..code_n..'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "output(pre..' lua_settop(tolua_S, top);')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "output(pre..'} /* end of embedded lua code */\\n\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "code_n = code_n +1",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function classCode:print (ident,close)\r\n print(ident..\"Code{\")\r\n print(ident..\" text = [[\"..self.text..\"]],\")\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "print(ident..\"Code{\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "print(ident..\" text = [[\"..self.text..\"]],\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function _Code (t)\r\n setmetatable(t,classCode)\r\n append(t)\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "setmetatable(t,classCode)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "append(t)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Code (l)\r\n return _Code {\r\n  text = l\r\n }\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function (c)\r\n                         local e = ''\r\n                         t.n=t.n+1 if t.n==15 then t.n=0 e='\\n'..pre..'  ' end\r\n                         return format('%3u,%s',strbyte(c),e)\r\n                        end",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "",
    "type": "function container"
  }, {
    "id": 53,
    "text": "print",
    "type": "global function"
  }, {
    "id": 54,
    "text": "strbyte",
    "type": "global function"
  }, {
    "id": 55,
    "text": "find",
    "type": "global function"
  }, {
    "id": 56,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 57,
    "text": "clean",
    "type": "global function"
  }, {
    "id": 58,
    "text": "error",
    "type": "global function"
  }, {
    "id": 59,
    "text": "output",
    "type": "global function"
  }, {
    "id": 60,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 61,
    "text": "format",
    "type": "global function"
  }, {
    "id": 62,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 63,
    "text": "append",
    "type": "global function"
  }, {
    "id": 64,
    "text": "",
    "type": "variable container"
  }, {
    "id": 65,
    "text": "",
    "type": "require container"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  }, {
    "id": 69,
    "text": "",
    "type": "global variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  } ]
}