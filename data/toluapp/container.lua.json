{
  "_filename": "container.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/toluapp/src/bin/lua/container.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 12
  }, {
    "from": 17,
    "label": "has",
    "to": 12
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 21,
    "label": "has",
    "to": 12
  }, {
    "from": 21,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 12
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 12
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 12
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 12
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 12
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 12
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 12
  }, {
    "from": 53,
    "label": "has",
    "to": 12
  }, {
    "from": 53,
    "label": "has",
    "to": 12
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 3
  }, {
    "from": 60,
    "label": "has",
    "to": 4
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 7
  }, {
    "from": 60,
    "label": "has",
    "to": 8
  }, {
    "from": 60,
    "label": "has",
    "to": 12
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 58
  }, {
    "from": 65,
    "label": "has",
    "to": 12
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 66
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 58
  }, {
    "from": 71,
    "label": "has",
    "to": 12
  }, {
    "from": 71,
    "label": "has",
    "to": 12
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 12
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 84,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 84,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 95,
    "label": "has",
    "to": 12
  }, {
    "from": 95,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 85
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 12
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 12
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 114,
    "label": "has",
    "to": 12
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 4
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 12
  }, {
    "from": 120,
    "label": "has",
    "to": 12
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 12
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 131,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 128,
    "label": "has",
    "to": 12
  }, {
    "from": 128,
    "label": "has",
    "to": 12
  }, {
    "from": 128,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 12
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 139,
    "label": "has",
    "to": 143
  }, {
    "from": 139,
    "label": "has",
    "to": 144
  }, {
    "from": 139,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 139,
    "label": "has",
    "to": 12
  }, {
    "from": 139,
    "label": "has",
    "to": 12
  }, {
    "from": 139,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 153,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 153,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 160,
    "label": "has",
    "to": 166
  }, {
    "from": 160,
    "label": "has",
    "to": 167
  }, {
    "from": 160,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 169,
    "label": "has",
    "to": 12
  }, {
    "from": 169,
    "label": "has",
    "to": 12
  }, {
    "from": 169,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 174,
    "label": "has",
    "to": 12
  }, {
    "from": 174,
    "label": "has",
    "to": 12
  }, {
    "from": 174,
    "label": "has",
    "to": 12
  }, {
    "from": 174,
    "label": "has",
    "to": 12
  }, {
    "from": 174,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 12
  }, {
    "from": 183,
    "label": "has",
    "to": 12
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 121
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 4
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 7
  }, {
    "from": 186,
    "label": "has",
    "to": 126
  }, {
    "from": 183,
    "label": "has",
    "to": 12
  }, {
    "from": 183,
    "label": "has",
    "to": 12
  }, {
    "from": 183,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 197
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 216,
    "label": "has",
    "to": 219
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 235,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 238
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 238
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 238
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 252,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 238
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 256,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 238
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 268,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 268,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 274,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 268,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 278,
    "label": "has",
    "to": 238
  }, {
    "from": 278,
    "label": "has",
    "to": 282
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 283,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 238
  }, {
    "from": 287,
    "label": "has",
    "to": 282
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 288,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 291
  }, {
    "from": 288,
    "label": "has",
    "to": 292
  }, {
    "from": 288,
    "label": "has",
    "to": 293
  }, {
    "from": 288,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 294,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 296,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 290
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 296,
    "label": "has",
    "to": 304
  }, {
    "from": 294,
    "label": "has",
    "to": 304
  }, {
    "from": 288,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 306,
    "label": "has",
    "to": 309
  }, {
    "from": 306,
    "label": "has",
    "to": 310
  }, {
    "from": 305,
    "label": "has",
    "to": 238
  }, {
    "from": 305,
    "label": "has",
    "to": 311
  }, {
    "from": 305,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 312,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 238
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 321,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 238
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 326,
    "label": "has",
    "to": 328
  }, {
    "from": 326,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 329,
    "label": "has",
    "to": 331
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 332,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 238
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 336,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 238
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 191,
    "label": "has",
    "to": 12
  }, {
    "from": 191,
    "label": "has",
    "to": 343
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 345,
    "label": "has",
    "to": 347
  }, {
    "from": 344,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 12
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 351,
    "label": "has",
    "to": 353
  }, {
    "from": 351,
    "label": "has",
    "to": 354
  }, {
    "from": 351,
    "label": "has",
    "to": 355
  }, {
    "from": 356,
    "label": "has",
    "to": 12
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 109,
    "label": "calls",
    "to": 385
  }, {
    "from": 191,
    "label": "calls",
    "to": 367
  }, {
    "from": 191,
    "label": "calls",
    "to": 367
  }, {
    "from": 153,
    "label": "calls",
    "to": 160
  }, {
    "from": 128,
    "label": "calls",
    "to": 368
  }, {
    "from": 174,
    "label": "calls",
    "to": 174
  }, {
    "from": 139,
    "label": "calls",
    "to": 369
  }, {
    "from": 169,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 369
  }, {
    "from": 191,
    "label": "calls",
    "to": 370
  }, {
    "from": 191,
    "label": "calls",
    "to": 371
  }, {
    "from": 84,
    "label": "calls",
    "to": 153
  }, {
    "from": 191,
    "label": "calls",
    "to": 374
  }, {
    "from": 191,
    "label": "calls",
    "to": 375
  }, {
    "from": 191,
    "label": "calls",
    "to": 375
  }, {
    "from": 191,
    "label": "calls",
    "to": 375
  }, {
    "from": 191,
    "label": "calls",
    "to": 375
  }, {
    "from": 191,
    "label": "calls",
    "to": 372
  }, {
    "from": 191,
    "label": "calls",
    "to": 378
  }, {
    "from": 191,
    "label": "calls",
    "to": 378
  }, {
    "from": 191,
    "label": "calls",
    "to": 379
  }, {
    "from": 191,
    "label": "calls",
    "to": 360
  }, {
    "from": 191,
    "label": "calls",
    "to": 364
  }, {
    "from": 191,
    "label": "calls",
    "to": 364
  }, {
    "from": 128,
    "label": "calls",
    "to": 381
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 191,
    "label": "calls",
    "to": 377
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 10,
    "label": "calls",
    "to": 33
  }, {
    "from": 60,
    "label": "calls",
    "to": 33
  }, {
    "from": 191,
    "label": "calls",
    "to": 382
  }, {
    "from": 114,
    "label": "calls",
    "to": 46
  }, {
    "from": 191,
    "label": "calls",
    "to": 361
  }, {
    "from": 169,
    "label": "calls",
    "to": 362
  }, {
    "from": 169,
    "label": "calls",
    "to": 362
  }, {
    "from": 169,
    "label": "calls",
    "to": 362
  }, {
    "from": 191,
    "label": "calls",
    "to": 362
  }, {
    "from": 191,
    "label": "calls",
    "to": 362
  }, {
    "from": 36,
    "label": "calls",
    "to": 65
  }, {
    "from": 84,
    "label": "calls",
    "to": 65
  }, {
    "from": 95,
    "label": "calls",
    "to": 65
  }, {
    "from": 104,
    "label": "calls",
    "to": 65
  }, {
    "from": 128,
    "label": "calls",
    "to": 65
  }, {
    "from": 139,
    "label": "calls",
    "to": 65
  }, {
    "from": 191,
    "label": "calls",
    "to": 365
  }, {
    "from": 174,
    "label": "calls",
    "to": 359
  }, {
    "from": 191,
    "label": "calls",
    "to": 380
  }, {
    "from": 169,
    "label": "calls",
    "to": 376
  }, {
    "from": 169,
    "label": "calls",
    "to": 376
  }, {
    "from": 191,
    "label": "calls",
    "to": 366
  }, {
    "from": 84,
    "label": "calls",
    "to": 48
  }, {
    "from": 139,
    "label": "calls",
    "to": 383
  }, {
    "from": 139,
    "label": "calls",
    "to": 383
  }, {
    "from": 191,
    "label": "calls",
    "to": 383
  }, {
    "from": 191,
    "label": "calls",
    "to": 383
  }, {
    "from": 191,
    "label": "calls",
    "to": 383
  }, {
    "from": 351,
    "label": "calls",
    "to": 383
  }, {
    "from": 351,
    "label": "calls",
    "to": 383
  }, {
    "from": 84,
    "label": "calls",
    "to": 77
  }, {
    "from": 358,
    "label": "calls",
    "to": 386
  }, {
    "from": 21,
    "label": "calls",
    "to": 386
  }, {
    "from": 191,
    "label": "calls",
    "to": 387
  }, {
    "from": 128,
    "label": "calls",
    "to": 169
  }, {
    "from": 139,
    "label": "calls",
    "to": 169
  }, {
    "from": 139,
    "label": "calls",
    "to": 384
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 10,
    "label": "calls",
    "to": 29
  }, {
    "from": 60,
    "label": "calls",
    "to": 29
  }, {
    "from": 183,
    "label": "calls",
    "to": 373
  }, {
    "from": 191,
    "label": "calls",
    "to": 373
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 191,
    "label": "calls",
    "to": 363
  }, {
    "from": 1,
    "label": "contains",
    "to": 358
  }, {
    "from": 358,
    "label": "declares",
    "to": 2
  }, {
    "from": 358,
    "label": "declares",
    "to": 10
  }, {
    "from": 358,
    "label": "declares",
    "to": 17
  }, {
    "from": 358,
    "label": "declares",
    "to": 21
  }, {
    "from": 358,
    "label": "declares",
    "to": 29
  }, {
    "from": 358,
    "label": "declares",
    "to": 33
  }, {
    "from": 358,
    "label": "declares",
    "to": 36
  }, {
    "from": 358,
    "label": "declares",
    "to": 38
  }, {
    "from": 358,
    "label": "declares",
    "to": 40
  }, {
    "from": 358,
    "label": "declares",
    "to": 42
  }, {
    "from": 358,
    "label": "declares",
    "to": 44
  }, {
    "from": 358,
    "label": "declares",
    "to": 46
  }, {
    "from": 358,
    "label": "declares",
    "to": 48
  }, {
    "from": 358,
    "label": "declares",
    "to": 51
  }, {
    "from": 358,
    "label": "declares",
    "to": 53
  }, {
    "from": 358,
    "label": "declares",
    "to": 60
  }, {
    "from": 358,
    "label": "declares",
    "to": 65
  }, {
    "from": 358,
    "label": "declares",
    "to": 71
  }, {
    "from": 358,
    "label": "declares",
    "to": 77
  }, {
    "from": 358,
    "label": "declares",
    "to": 79
  }, {
    "from": 358,
    "label": "declares",
    "to": 84
  }, {
    "from": 358,
    "label": "declares",
    "to": 95
  }, {
    "from": 358,
    "label": "declares",
    "to": 104
  }, {
    "from": 358,
    "label": "declares",
    "to": 109
  }, {
    "from": 358,
    "label": "declares",
    "to": 114
  }, {
    "from": 358,
    "label": "declares",
    "to": 120
  }, {
    "from": 358,
    "label": "declares",
    "to": 128
  }, {
    "from": 358,
    "label": "declares",
    "to": 139
  }, {
    "from": 358,
    "label": "declares",
    "to": 153
  }, {
    "from": 358,
    "label": "declares",
    "to": 160
  }, {
    "from": 358,
    "label": "declares",
    "to": 169
  }, {
    "from": 358,
    "label": "declares",
    "to": 174
  }, {
    "from": 358,
    "label": "declares",
    "to": 183
  }, {
    "from": 358,
    "label": "declares",
    "to": 191
  }, {
    "from": 358,
    "label": "declares",
    "to": 344
  }, {
    "from": 358,
    "label": "declares",
    "to": 349
  }, {
    "from": 358,
    "label": "declares",
    "to": 351
  }, {
    "from": 358,
    "label": "declares",
    "to": 356
  }, {
    "from": 1,
    "label": "contains",
    "to": 388
  }, {
    "from": 1,
    "label": "contains",
    "to": 389
  }, {
    "from": 388,
    "label": "initializes",
    "to": 390
  }, {
    "from": 390,
    "label": "assigns",
    "to": 391
  }, {
    "from": 388,
    "label": "initializes",
    "to": 392
  }, {
    "from": 392,
    "label": "assigns",
    "to": 393
  }, {
    "from": 388,
    "label": "initializes",
    "to": 394
  }, {
    "from": 394,
    "label": "assigns",
    "to": 395
  }, {
    "from": 388,
    "label": "initializes",
    "to": 396
  }, {
    "from": 396,
    "label": "assigns",
    "to": 397
  }, {
    "from": 388,
    "label": "initializes",
    "to": 398
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "container",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classContainer:decltype ()\r\n push(self)\r\n local i=1\r\n while self[i] do\r\n  self[i]:decltype()\r\n  i = i+1\r\n end\r\n pop()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "push(self)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "while self[i] do\r\n  self[i]:decltype()\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 6,
    "text": "self[i]:decltype()",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "pop()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function classContainer:supcode ()\r\n\r\n\tif not self:check_public_access() then\r\n\t\treturn\r\n\tend\r\n\r\n push(self)\r\n local i=1\r\n while self[i] do\r\n  if self[i]:check_public_access() then\r\n  \tself[i]:supcode()\r\n  end\r\n  i = i+1\r\n end\r\n pop()\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if not self:check_public_access() then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "while self[i] do\r\n  if self[i]:check_public_access() then\r\n  \tself[i]:supcode()\r\n  end\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 14,
    "text": "if self[i]:check_public_access() then\r\n  \tself[i]:supcode()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "self[i]:supcode()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function classContainer:hasvar ()\r\n local i=1\r\n while self[i] do\r\n  if self[i]:isvariable() then\r\n\t\t return 1\r\n\t\tend\r\n  i = i+1\r\n end\r\n\treturn 0\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "while self[i] do\r\n  if self[i]:isvariable() then\r\n\t\t return 1\r\n\t\tend\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 19,
    "text": "if self[i]:isvariable() then\r\n\t\t return 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function _Container (self)\r\n setmetatable(self,classContainer)\r\n self.n = 0\r\n self.typedefs = {tolua_n=0}\r\n self.usertypes = {}\r\n self.enums = {tolua_n=0}\r\n self.lnames = {}\r\n return self\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "setmetatable(self,classContainer)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "self.n = 0",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "self.typedefs = {tolua_n=0}",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "self.usertypes = {}",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "self.enums = {tolua_n=0}",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "self.lnames = {}",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function push (t)\r\n\tt.prox = classContainer.curr\r\n classContainer.curr = t\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "t.prox = classContainer.curr",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "classContainer.curr = t",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function pop ()\r\n--print(\"name\",classContainer.curr.name)\r\n--foreach(classContainer.curr.usertypes,print)\r\n--print(\"______________\")\r\n classContainer.curr = classContainer.curr.prox\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "classContainer.curr = classContainer.curr.prox",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function getcurrnamespace ()\r\n\treturn getnamespace(classContainer.curr)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function append (t)\r\n return classContainer.curr:append(t)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function appendtypedef (t)\r\n return classContainer.curr:appendtypedef(t)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function appendusertype (t)\r\n return classContainer.curr:appendusertype(t)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function appendenum (t)\r\n return classContainer.curr:appendenum(t)\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function applytypedef (mod,type)\r\n return classContainer.curr:applytypedef(mod,type)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function findtype (type)\r\n local t = classContainer.curr:findtype(type)\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local t = classContainer.curr:findtype(type)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function istypedef (type)\r\n return classContainer.curr:istypedef(type)\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function fulltype (t)\r\n local curr =  classContainer.curr\r\n\twhile curr do\r\n\t if curr then\r\n\t\t if curr.typedefs and curr.typedefs[t] then\r\n\t\t  return curr.typedefs[t]\r\n\t\t elseif curr.usertypes and curr.usertypes[t] then\r\n\t\t  return curr.usertypes[t]\r\n\t\t\tend\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local curr =  classContainer.curr",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "while curr do\r\n\t if curr then\r\n\t\t if curr.typedefs and curr.typedefs[t] then\r\n\t\t  return curr.typedefs[t]\r\n\t\t elseif curr.usertypes and curr.usertypes[t] then\r\n\t\t  return curr.usertypes[t]\r\n\t\t\tend\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 56,
    "text": "if curr then\r\n\t\t if curr.typedefs and curr.typedefs[t] then\r\n\t\t  return curr.typedefs[t]\r\n\t\t elseif curr.usertypes and curr.usertypes[t] then\r\n\t\t  return curr.usertypes[t]\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "if curr.typedefs and curr.typedefs[t] then\r\n\t\t  return curr.typedefs[t]\r\n\t\t elseif curr.usertypes and curr.usertypes[t] then\r\n\t\t  return curr.usertypes[t]\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "curr = curr.prox",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function classContainer:requirecollection (t)\r\n push(self)\r\n local i=1\r\n\tlocal r = false\r\n while self[i] do\r\n  r = self[i]:requirecollection(t) or r\r\n  i = i+1\r\n end\r\n\tpop()\r\n\treturn r\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local r = false",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "while self[i] do\r\n  r = self[i]:requirecollection(t) or r\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 63,
    "text": "r = self[i]:requirecollection(t) or r",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function getnamespace (curr)\r\n\tlocal namespace = ''\r\n\twhile curr do\r\n\t if curr and\r\n\t\t   ( curr.classtype == 'class' or curr.classtype == 'namespace')\r\n\t\tthen\r\n\t\t namespace = (curr.original_name or curr.name) .. '::' .. namespace\r\n\t\t --namespace = curr.name .. '::' .. namespace\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend\r\n\treturn namespace\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local namespace = ''",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "while curr do\r\n\t if curr and\r\n\t\t   ( curr.classtype == 'class' or curr.classtype == 'namespace')\r\n\t\tthen\r\n\t\t namespace = (curr.original_name or curr.name) .. '::' .. namespace\r\n\t\t --namespace = curr.name .. '::' .. namespace\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 68,
    "text": "if curr and\r\n\t\t   ( curr.classtype == 'class' or curr.classtype == 'namespace')\r\n\t\tthen\r\n\t\t namespace = (curr.original_name or curr.name) .. '::' .. namespace\r\n\t\t --namespace = curr.name .. '::' .. namespace\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "namespace = (curr.original_name or curr.name) .. '::' .. namespace",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function getonlynamespace ()\r\n local curr = classContainer.curr\r\n\tlocal namespace = ''\r\n\twhile curr do\r\n\t\tif curr.classtype == 'class' then\r\n\t\t return namespace\r\n\t\telseif curr.classtype == 'namespace' then\r\n\t\t namespace = curr.name .. '::' .. namespace\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend\r\n\treturn namespace\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local curr = classContainer.curr",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "while curr do\r\n\t\tif curr.classtype == 'class' then\r\n\t\t return namespace\r\n\t\telseif curr.classtype == 'namespace' then\r\n\t\t namespace = curr.name .. '::' .. namespace\r\n\t\tend\r\n\t curr = curr.prox\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 74,
    "text": "if curr.classtype == 'class' then\r\n\t\t return namespace\r\n\t\telseif curr.classtype == 'namespace' then\r\n\t\t namespace = curr.name .. '::' .. namespace\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "namespace = curr.name .. '::' .. namespace",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function isenum (type)\r\n return classContainer.curr:isenum(type)\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function classContainer:append (t)\r\n self.n = self.n + 1\r\n self[self.n] = t\r\n t.parent = self\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "self.n = self.n + 1",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "self[self.n] = t",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "t.parent = self",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function classContainer:appendtypedef (t)\r\n local namespace = getnamespace(classContainer.curr)\r\n self.typedefs.tolua_n = self.typedefs.tolua_n + 1\r\n self.typedefs[self.typedefs.tolua_n] = t\r\n\tself.typedefs[t.utype] = namespace .. t.utype\r\n\tglobal_typedefs[namespace..t.utype] = t\r\n\tt.ftype = findtype(t.type) or t.type\r\n\t--print(\"appending typedef \"..t.utype..\" as \"..namespace..t.utype..\" with ftype \"..t.ftype)\r\n\tappend_global_type(namespace..t.utype)\r\n\tif t.ftype and isenum(t.ftype) then\r\n\r\n\t\tglobal_enums[namespace..t.utype] = true\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local namespace = getnamespace(classContainer.curr)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "self.typedefs.tolua_n = self.typedefs.tolua_n + 1",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "self.typedefs[self.typedefs.tolua_n] = t",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "self.typedefs[t.utype] = namespace .. t.utype",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "global_typedefs[namespace..t.utype] = t",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "t.ftype = findtype(t.type) or t.type",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "append_global_type(namespace..t.utype)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "if t.ftype and isenum(t.ftype) then\r\n\r\n\t\tglobal_enums[namespace..t.utype] = true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "global_enums[namespace..t.utype] = true",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function classContainer:appendusertype (t)\r\n\tlocal container\r\n\tif t == (self.original_name or self.name) then\r\n\t\tcontainer = self.prox\r\n\telse\r\n\t\tcontainer = self\r\n\tend\r\n\tlocal ft = getnamespace(container) .. t\r\n\tcontainer.usertypes[t] = ft\r\n\t_usertype[ft] = ft\r\n\treturn ft\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "local container",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "if t == (self.original_name or self.name) then\r\n\t\tcontainer = self.prox\r\n\telse\r\n\t\tcontainer = self\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "container = self.prox",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "container = self",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "local ft = getnamespace(container) .. t",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "container.usertypes[t] = ft",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "_usertype[ft] = ft",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function classContainer:appendenum (t)\r\n local namespace = getnamespace(classContainer.curr)\r\n self.enums.tolua_n = self.enums.tolua_n + 1\r\n self.enums[self.enums.tolua_n] = t\r\n\tglobal_enums[namespace..t.name] = t\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "self.enums.tolua_n = self.enums.tolua_n + 1",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "self.enums[self.enums.tolua_n] = t",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "global_enums[namespace..t.name] = t",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function classContainer:overload (lname)\r\n if not self.lnames[lname] then\r\n  self.lnames[lname] = 0\r\n else\r\n  self.lnames[lname] = self.lnames[lname] + 1\r\n end\r\n return format(\"%02d\",self.lnames[lname])\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "if not self.lnames[lname] then\r\n  self.lnames[lname] = 0\r\n else\r\n  self.lnames[lname] = self.lnames[lname] + 1\r\n end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "self.lnames[lname] = 0",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "self.lnames[lname] = self.lnames[lname] + 1",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function classContainer:applytypedef (mod,type)\r\n\tif global_typedefs[type] then\r\n\t\t--print(\"found typedef \"..global_typedefs[type].type)\r\n\t\tlocal mod1, type1 = global_typedefs[type].mod, global_typedefs[type].ftype\r\n\t\tlocal mod2, type2 = applytypedef(mod..\" \"..mod1, type1)\r\n\t\t--return mod2 .. ' ' .. mod1, type2\r\n\t\treturn mod2, type2\r\n\tend\r\n\tdo return mod,type end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "if global_typedefs[type] then\r\n\t\t--print(\"found typedef \"..global_typedefs[type].type)\r\n\t\tlocal mod1, type1 = global_typedefs[type].mod, global_typedefs[type].ftype\r\n\t\tlocal mod2, type2 = applytypedef(mod..\" \"..mod1, type1)\r\n\t\t--return mod2 .. ' ' .. mod1, type2\r\n\t\treturn mod2, type2\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "local mod1, type1 = global_typedefs[type].mod, global_typedefs[type].ftype",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "local mod2, type2 = applytypedef(mod..\" \"..mod1, type1)",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "do return mod,type end",
    "type": "statement:do"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function classContainer:istypedef (type)\r\n local env = self\r\n while env do\r\n  if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == type then\r\n         return type\r\n        end\r\n        i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end\r\n return nil\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "local env = self",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "while env do\r\n  if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == type then\r\n         return type\r\n        end\r\n        i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end",
    "type": "statement:while"
  }, {
    "id": 123,
    "text": "if env.typedefs then\r\n   local i=1\r\n   while env.typedefs[i] do\r\n    if env.typedefs[i].utype == type then\r\n         return type\r\n        end\r\n        i = i+1\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "while env.typedefs[i] do\r\n    if env.typedefs[i].utype == type then\r\n         return type\r\n        end\r\n        i = i+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 125,
    "text": "if env.typedefs[i].utype == type then\r\n         return type\r\n        end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "env = env.parent",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function find_enum_var(var)\r\n\r\n\tif tonumber(var) then return var end\r\n\r\n\tlocal c = classContainer.curr\r\n\twhile c do\r\n\t\tlocal ns = getnamespace(c)\r\n\t\tfor k,v in pairs(_global_enums) do\r\n\t\t\tif match_type(var, v, ns) then\r\n\t\t\t\treturn v\r\n\t\t\tend\r\n\t\tend\r\n\t\tif c.base and c.base ~= '' then\r\n\t\t\tc = _global_classes[c:findtype(c.base)]\r\n\t\telse\r\n\t\t\tc = nil\r\n\t\tend\r\n\tend\r\n\r\n\treturn var\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "if tonumber(var) then return var end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "local c = classContainer.curr",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "while c do\r\n\t\tlocal ns = getnamespace(c)\r\n\t\tfor k,v in pairs(_global_enums) do\r\n\t\t\tif match_type(var, v, ns) then\r\n\t\t\t\treturn v\r\n\t\t\tend\r\n\t\tend\r\n\t\tif c.base and c.base ~= '' then\r\n\t\t\tc = _global_classes[c:findtype(c.base)]\r\n\t\telse\r\n\t\t\tc = nil\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 132,
    "text": "local ns = getnamespace(c)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "for k,v in pairs(_global_enums) do\r\n\t\t\tif match_type(var, v, ns) then\r\n\t\t\t\treturn v\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "if match_type(var, v, ns) then\r\n\t\t\t\treturn v\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "if c.base and c.base ~= '' then\r\n\t\t\tc = _global_classes[c:findtype(c.base)]\r\n\t\telse\r\n\t\t\tc = nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "c = _global_classes[c:findtype(c.base)]",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "c = nil",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function classContainer:findtype (t)\r\n\r\n\tt = string.gsub(t, \"=.*\", \"\")\r\n\tif _basic[t] then\r\n\t return t\r\n\tend\r\n\r\n\tlocal _,_,em = string.find(t, \"([&%*])%s*$\")\r\n\tt = string.gsub(t, \"%s*([&%*])%s*$\", \"\")\r\n\tp = self\r\n\twhile p and type(p)=='table' do\r\n\t\tlocal st = getnamespace(p)\r\n\r\n\t\tfor i=_global_types.n,1,-1 do -- in reverse order\r\n\r\n\t\t\tif match_type(t, _global_types[i], st) then\r\n\t\t\t\treturn _global_types[i]..(em or \"\")\r\n\t\t\tend\r\n\t\tend\r\n\t\tif p.base and p.base ~= '' and p.base ~= t then\r\n\t\t\t--print(\"type is \"..t..\", p is \"..p.base..\" self.type is \"..self.type..\" self.name is \"..self.name)\r\n\t\t\tp = _global_classes[p:findtype(p.base)]\r\n\t\telse\r\n\t\t\tp = nil\r\n\t\tend\r\n\tend\r\n\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "t = string.gsub(t, \"=.*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "if _basic[t] then\r\n\t return t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "local _,_,em = string.find(t, \"([&%*])%s*$\")",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "t = string.gsub(t, \"%s*([&%*])%s*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "p = self",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "while p and type(p)=='table' do\r\n\t\tlocal st = getnamespace(p)\r\n\r\n\t\tfor i=_global_types.n,1,-1 do -- in reverse order\r\n\r\n\t\t\tif match_type(t, _global_types[i], st) then\r\n\t\t\t\treturn _global_types[i]..(em or \"\")\r\n\t\t\tend\r\n\t\tend\r\n\t\tif p.base and p.base ~= '' and p.base ~= t then\r\n\t\t\t--print(\"type is \"..t..\", p is \"..p.base..\" self.type is \"..self.type..\" self.name is \"..self.name)\r\n\t\t\tp = _global_classes[p:findtype(p.base)]\r\n\t\telse\r\n\t\t\tp = nil\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 146,
    "text": "local st = getnamespace(p)",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "for i=_global_types.n,1,-1 do -- in reverse order\r\n\r\n\t\t\tif match_type(t, _global_types[i], st) then\r\n\t\t\t\treturn _global_types[i]..(em or \"\")\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 148,
    "text": "if match_type(t, _global_types[i], st) then\r\n\t\t\t\treturn _global_types[i]..(em or \"\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "if p.base and p.base ~= '' and p.base ~= t then\r\n\t\t\t--print(\"type is \"..t..\", p is \"..p.base..\" self.type is \"..self.type..\" self.name is \"..self.name)\r\n\t\t\tp = _global_classes[p:findtype(p.base)]\r\n\t\telse\r\n\t\t\tp = nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "p = _global_classes[p:findtype(p.base)]",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "p = nil",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function append_global_type(t, class)\r\n\t_global_types.n = _global_types.n +1\r\n\t_global_types[_global_types.n] = t\r\n\t_global_types_hash[t] = 1\r\n\tif class then append_class_type(t, class) end\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "_global_types.n = _global_types.n +1",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "_global_types[_global_types.n] = t",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "_global_types_hash[t] = 1",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "if class then append_class_type(t, class) end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "append_class_type(t, class)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function append_class_type(t,class)\r\n\tif _global_classes[t] then\r\n\t\tclass.flags = _global_classes[t].flags\r\n\t\tclass.lnames = _global_classes[t].lnames\r\n\t\tif _global_classes[t].base and (_global_classes[t].base ~= '') then\r\n\t\t\tclass.base = _global_classes[t].base or class.base\r\n\t\tend\r\n\tend\r\n\t_global_classes[t] = class\r\n\tclass.flags = class.flags or {}\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "if _global_classes[t] then\r\n\t\tclass.flags = _global_classes[t].flags\r\n\t\tclass.lnames = _global_classes[t].lnames\r\n\t\tif _global_classes[t].base and (_global_classes[t].base ~= '') then\r\n\t\t\tclass.base = _global_classes[t].base or class.base\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "class.flags = _global_classes[t].flags",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "class.lnames = _global_classes[t].lnames",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "if _global_classes[t].base and (_global_classes[t].base ~= '') then\r\n\t\t\tclass.base = _global_classes[t].base or class.base\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "class.base = _global_classes[t].base or class.base",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "_global_classes[t] = class",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "class.flags = class.flags or {}",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function match_type(childtype, regtype, st)\r\n--print(\"findtype \"..childtype..\", \"..regtype..\", \"..st)\r\n\tlocal b,e = string.find(regtype, childtype, -string.len(childtype), true)\r\n\tif b then\r\n\r\n\t\tif e == string.len(regtype) and\r\n\t\t\t\t(b == 1 or (string.sub(regtype, b-1, b-1) == ':' and\r\n\t\t\t\tstring.sub(regtype, 1, b-1) == string.sub(st, 1, b-1))) then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend\r\n\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "local b,e = string.find(regtype, childtype, -string.len(childtype), true)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "if b then\r\n\r\n\t\tif e == string.len(regtype) and\r\n\t\t\t\t(b == 1 or (string.sub(regtype, b-1, b-1) == ':' and\r\n\t\t\t\tstring.sub(regtype, 1, b-1) == string.sub(st, 1, b-1))) then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "if e == string.len(regtype) and\r\n\t\t\t\t(b == 1 or (string.sub(regtype, b-1, b-1) == ':' and\r\n\t\t\t\tstring.sub(regtype, 1, b-1) == string.sub(st, 1, b-1))) then\r\n\t\t\treturn true\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function findtype_on_childs(self, t)\r\n\r\n\tlocal tchild\r\n\tif self.classtype == 'class' or self.classtype == 'namespace' then\r\n\t\tfor k,v in ipairs(self) do\r\n\t\t\tif v.classtype == 'class' or v.classtype == 'namespace' then\r\n\t\t\t\tif v.typedefs and v.typedefs[t] then\r\n\t\t\t\t return v.typedefs[t]\r\n\t\t\t\telseif v.usertypes and v.usertypes[t] then\r\n\t\t\t\t return v.usertypes[t]\r\n\t\t\t\tend\r\n\t\t\t\ttchild = findtype_on_childs(v, t)\r\n\t\t\t\tif tchild then return tchild end\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn nil\r\n\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "local tchild",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "if self.classtype == 'class' or self.classtype == 'namespace' then\r\n\t\tfor k,v in ipairs(self) do\r\n\t\t\tif v.classtype == 'class' or v.classtype == 'namespace' then\r\n\t\t\t\tif v.typedefs and v.typedefs[t] then\r\n\t\t\t\t return v.typedefs[t]\r\n\t\t\t\telseif v.usertypes and v.usertypes[t] then\r\n\t\t\t\t return v.usertypes[t]\r\n\t\t\t\tend\r\n\t\t\t\ttchild = findtype_on_childs(v, t)\r\n\t\t\t\tif tchild then return tchild end\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "for k,v in ipairs(self) do\r\n\t\t\tif v.classtype == 'class' or v.classtype == 'namespace' then\r\n\t\t\t\tif v.typedefs and v.typedefs[t] then\r\n\t\t\t\t return v.typedefs[t]\r\n\t\t\t\telseif v.usertypes and v.usertypes[t] then\r\n\t\t\t\t return v.usertypes[t]\r\n\t\t\t\tend\r\n\t\t\t\ttchild = findtype_on_childs(v, t)\r\n\t\t\t\tif tchild then return tchild end\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 178,
    "text": "if v.classtype == 'class' or v.classtype == 'namespace' then\r\n\t\t\t\tif v.typedefs and v.typedefs[t] then\r\n\t\t\t\t return v.typedefs[t]\r\n\t\t\t\telseif v.usertypes and v.usertypes[t] then\r\n\t\t\t\t return v.usertypes[t]\r\n\t\t\t\tend\r\n\t\t\t\ttchild = findtype_on_childs(v, t)\r\n\t\t\t\tif tchild then return tchild end\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "if v.typedefs and v.typedefs[t] then\r\n\t\t\t\t return v.typedefs[t]\r\n\t\t\t\telseif v.usertypes and v.usertypes[t] then\r\n\t\t\t\t return v.usertypes[t]\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "tchild = findtype_on_childs(v, t)",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "if tchild then return tchild end",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function classContainer:isenum (type)\r\n if global_enums[type] then\r\n\treturn type\r\n else\r\n \treturn false\r\n end\r\n\r\n local basetype = gsub(type,\"^.*::\",\"\")\r\n local env = self\r\n while env do\r\n  if env.enums then\r\n   local i=1\r\n   while env.enums[i] do\r\n    if env.enums[i].name == basetype then\r\n         return true\r\n        end\r\n        i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end\r\n return false\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "if global_enums[type] then\r\n\treturn type\r\n else\r\n \treturn false\r\n end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "local basetype = gsub(type,\"^.*::\",\"\")",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "while env do\r\n  if env.enums then\r\n   local i=1\r\n   while env.enums[i] do\r\n    if env.enums[i].name == basetype then\r\n         return true\r\n        end\r\n        i = i+1\r\n   end\r\n  end\r\n  env = env.parent\r\n end",
    "type": "statement:while"
  }, {
    "id": 187,
    "text": "if env.enums then\r\n   local i=1\r\n   while env.enums[i] do\r\n    if env.enums[i].name == basetype then\r\n         return true\r\n        end\r\n        i = i+1\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "while env.enums[i] do\r\n    if env.enums[i].name == basetype then\r\n         return true\r\n        end\r\n        i = i+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 189,
    "text": "if env.enums[i].name == basetype then\r\n         return true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function classContainer:doparse (s)\r\n--print (\"parse \"..s)\r\n\r\n -- try the parser hook\r\n do\r\n \tlocal sub = parser_hook(s)\r\n \tif sub then\r\n \t\treturn sub\r\n \tend\r\n end\r\n\r\n -- try the null statement\r\n do\r\n \tlocal b,e,code = string.find(s, \"^%s*;\")\r\n \tif b then\r\n \t\treturn strsub(s,e+1)\r\n \tend\r\n end\r\n\r\n -- try empty verbatim line\r\n do\r\n \tlocal b,e,code = string.find(s, \"^%s*$\\n\")\r\n \tif b then\r\n \t\treturn strsub(s,e+1)\r\n \tend\r\n end\r\n\r\n -- try Lua code\r\n do\r\n  local b,e,code = strfind(s,\"^%s*(%b\\1\\2)\")\r\n  if b then\r\n   Code(strsub(code,2,-2))\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try C code\r\n do\r\n  local b,e,code = strfind(s,\"^%s*(%b\\3\\4)\")\r\n  if b then\r\n\tcode = '{'..strsub(code,2,-2)..'\\n}\\n'\r\n\tVerbatim(code,'r')        -- verbatim code for 'r'egister fragment\r\n\treturn strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try C code for preamble section\r\n do\r\n \tlocal b,e,code = string.find(s, \"^%s*(%b\\5\\6)\")\r\n \tif b then\r\n \t\tcode = string.sub(code, 2, -2)..\"\\n\"\r\n\t\tVerbatim(code, '')\r\n\t\treturn string.sub(s, e+1)\r\n \tend\r\n end\r\n\r\n -- try default_property directive\r\n do\r\n \tlocal b,e,ptype = strfind(s, \"^%s*TOLUA_PROPERTY_TYPE%s*%(+%s*([^%)%s]*)%s*%)+%s*;?\")\r\n \tif b then\r\n \t\tif not ptype or ptype == \"\" then\r\n \t\t\tptype = \"default\"\r\n \t\tend\r\n \t\tself:set_property_type(ptype)\r\n\t \treturn strsub(s, e+1)\r\n \tend\r\n end\r\n\r\n -- try protected_destructor directive\r\n do\r\n \tlocal b,e = string.find(s, \"^%s*TOLUA_PROTECTED_DESTRUCTOR%s*;?\")\r\n\tif b then\r\n\t\tif self.set_protected_destructor then\r\n\t \t\tself:set_protected_destructor(true)\r\n\t \tend\r\n \t\treturn strsub(s, e+1)\r\n \tend\r\n end\r\n\r\n -- try 'extern' keyword\r\n do\r\n \tlocal b,e = string.find(s, \"^%s*extern%s+\")\r\n \tif b then\r\n\t\t-- do nothing\r\n \t\treturn strsub(s, e+1)\r\n \tend\r\n end\r\n\r\n -- try 'virtual' keyworkd\r\n do\r\n \tlocal b,e = string.find(s, \"^%s*virtual%s+\")\r\n \tif b then\r\n \t\tmethodisvirtual = true\r\n \t\treturn strsub(s, e+1)\r\n \tend\r\n end\r\n\r\n -- try labels (public, private, etc)\r\n do\r\n \tlocal b,e = string.find(s, \"^%s*%w*%s*:[^:]\")\r\n \tif b then\r\n \t\treturn strsub(s, e) -- preserve the [^:]\r\n \tend\r\n end\r\n\r\n -- try module\r\n do\r\n  local b,e,name,body = strfind(s,\"^%s*module%s%s*([_%w][_%w]*)%s*(%b{})%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Module(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try namesapce\r\n do\r\n  local b,e,name,body = strfind(s,\"^%s*namespace%s%s*([_%w][_%w]*)%s*(%b{})%s*;?\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Namespace(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try define\r\n do\r\n  local b,e,name = strfind(s,\"^%s*#define%s%s*([^%s]*)[^\\n]*\\n%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Define(name)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try enumerates\r\n\r\n do\r\n  local b,e,name,body,varname = strfind(s,\"^%s*enum%s+(%S*)%s*(%b{})%s*([^%s;]*)%s*;?%s*\")\r\n  if b then\r\n   --error(\"#Sorry, declaration of enums and variables on the same statement is not supported.\\nDeclare your variable separately (example: '\"..name..\" \"..varname..\";')\")\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body,varname)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n-- do\r\n--  local b,e,name,body = strfind(s,\"^%s*enum%s+(%S*)%s*(%b{})%s*;?%s*\")\r\n--  if b then\r\n--   _curr_code = strsub(s,b,e)\r\n--   Enumerate(name,body)\r\n--  return strsub(s,e+1)\r\n--  end\r\n-- end\r\n\r\n do\r\n  local b,e,body,name = strfind(s,\"^%s*typedef%s+enum[^{]*(%b{})%s*([%w_][^%s]*)%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try operator\r\n do\r\n  local b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:<>,]-%s+operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  if not b then\r\n\t\t -- try inline\r\n   b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:<>,]-%s+operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)[%s\\n]*%b{}%s*;?%s*\")\r\n  end\r\n  if not b then\r\n  \t-- try cast operator\r\n  \tb,e,decl,kind,arg,const = strfind(s, \"^%s*(operator)%s+([%w_:%d<>%*%&%s]+)%s*(%b())%s*(c?o?n?s?t?)\");\r\n  \tif b then\r\n  \t\tlocal _,ie = string.find(s, \"^%s*%b{}\", e+1)\r\n  \t\tif ie then\r\n  \t\t\te = ie\r\n  \t\tend\r\n  \tend\r\n  end\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Operator(decl,kind,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try function\r\n do\r\n  --local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:<>]*[_%w])%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")\r\n  local b,e,decl,arg,const,virt = strfind(s,\"^%s*([^%(\\n]+)%s*(%b())%s*(c?o?n?s?t?)%s*(=?%s*0?)%s*;%s*\")\r\n  if not b then\r\n  \t-- try function with template\r\n  \tb,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:<>]*[_%w]%b<>)%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")\r\n  end\r\n  if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  end\r\n  if not b then\r\n   -- try function pointer\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([^%(;\\n]+%b())%s*(%b())%s*;%s*\")\r\n   if b then\r\n    decl = string.gsub(decl, \"%(%s*%*([^%)]*)%s*%)\", \" %1 \")\r\n   end\r\n  end\r\n  if b then\r\n  \tif virt and string.find(virt, \"[=0]\") then\r\n  \t\tif self.flags then\r\n  \t\t\tself.flags.pure_virtual = true\r\n  \t\tend\r\n  \tend\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try inline function\r\n do\r\n  local b,e,decl,arg,const = strfind(s,\"^%s*([^%(\\n]+)%s*(%b())%s*(c?o?n?s?t?)[^;{]*%b{}%s*;?%s*\")\r\n  --local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:<>]*[_%w>])%s*(%b())%s*(c?o?n?s?t?)[^;]*%b{}%s*;?%s*\")\r\n  if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")\r\n  end\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try class\r\n do\r\n\t local b,e,name,base,body\r\n\t\tbase = '' body = ''\r\n\t\tb,e,name = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*;\")  -- dummy class\r\n\t\tlocal dummy = false\r\n\t\tif not b then\r\n\t\t\tb,e,name = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*;\")    -- dummy struct\r\n\t\t\tif not b then\r\n\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\tif not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s+([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telse dummy = 1 end\r\n\t\telse dummy = 1 end\r\n\t\tif b then\r\n\t\t\tif base ~= '' then\r\n\t\t\t\tbase = string.gsub(base, \"^%s*:%s*\", \"\")\r\n\t\t\t\tbase = string.gsub(base, \"%s*public%s*\", \"\")\r\n\t\t\t\tbase = split(base, \",\")\r\n\t\t\t\t--local b,e\r\n\t\t\t\t--b,e,base = strfind(base,\".-([_%w][_%w<>,:]*)$\")\r\n\t\t\telse\r\n\t\t\t\tbase = {}\r\n\t\t\tend\r\n\t\t\t_curr_code = strsub(s,b,e)\r\n\t\t\tClass(name,base,body)\r\n\t\t\tif not dummy then\r\n\t\t\t\tvarb,vare,varname = string.find(s, \"^%s*([_%w]+)%s*;\", e+1)\r\n\t\t\t\tif varb then\r\n\t\t\t\t\tVariable(name..\" \"..varname)\r\n\t\t\t\t\te = vare\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn strsub(s,e+1)\r\n\t\tend\r\n\tend\r\n\r\n -- try typedef\r\n do\r\n  local b,e,types = strfind(s,\"^%s*typedef%s%s*(.-)%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Typedef(types)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try variable\r\n do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w][_@%s%w%d%*&:<>,]*[_%w%d])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n\r\n\tlocal list = split_c_tokens(decl, \",\")\r\n\tVariable(list[1])\r\n\tif list.n > 1 then\r\n\t\tlocal _,_,type = strfind(list[1], \"(.-)%s+([^%s]*)$\");\r\n\r\n\t\tlocal i =2;\r\n\t\twhile list[i] do\r\n\t\t\tVariable(type..\" \"..list[i])\r\n\t\t\ti=i+1\r\n\t\tend\r\n\tend\r\n   --Variable(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n\t-- try string\r\n do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w]?[_%s%w%d]-char%s+[_@%w%d]*%s*%[%s*%S+%s*%])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Variable(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- try array\r\n do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w][][_@%s%w%d%*&:<>]*[]_%w%d])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Array(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end\r\n\r\n -- no matching\r\n if gsub(s,\"%s%s*\",\"\") ~= \"\" then\r\n  _curr_code = s\r\n  error(\"#parse error\")\r\n else\r\n  return \"\"\r\n end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "do\r\n \tlocal sub = parser_hook(s)\r\n \tif sub then\r\n \t\treturn sub\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 193,
    "text": "local sub = parser_hook(s)",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "if sub then\r\n \t\treturn sub\r\n \tend",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "do\r\n \tlocal b,e,code = string.find(s, \"^%s*;\")\r\n \tif b then\r\n \t\treturn strsub(s,e+1)\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 196,
    "text": "local b,e,code = string.find(s, \"^%s*;\")",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "if b then\r\n \t\treturn strsub(s,e+1)\r\n \tend",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "do\r\n \tlocal b,e,code = string.find(s, \"^%s*$\\n\")\r\n \tif b then\r\n \t\treturn strsub(s,e+1)\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 199,
    "text": "local b,e,code = string.find(s, \"^%s*$\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "do\r\n  local b,e,code = strfind(s,\"^%s*(%b\\1\\2)\")\r\n  if b then\r\n   Code(strsub(code,2,-2))\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 201,
    "text": "local b,e,code = strfind(s,\"^%s*(%b\\1\\2)\")",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if b then\r\n   Code(strsub(code,2,-2))\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "Code(strsub(code,2,-2))",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "do\r\n  local b,e,code = strfind(s,\"^%s*(%b\\3\\4)\")\r\n  if b then\r\n\tcode = '{'..strsub(code,2,-2)..'\\n}\\n'\r\n\tVerbatim(code,'r')        -- verbatim code for 'r'egister fragment\r\n\treturn strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 205,
    "text": "local b,e,code = strfind(s,\"^%s*(%b\\3\\4)\")",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "if b then\r\n\tcode = '{'..strsub(code,2,-2)..'\\n}\\n'\r\n\tVerbatim(code,'r')        -- verbatim code for 'r'egister fragment\r\n\treturn strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "code = '{'..strsub(code,2,-2)..'\\n}\\n'",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "Verbatim(code,'r')",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "do\r\n \tlocal b,e,code = string.find(s, \"^%s*(%b\\5\\6)\")\r\n \tif b then\r\n \t\tcode = string.sub(code, 2, -2)..\"\\n\"\r\n\t\tVerbatim(code, '')\r\n\t\treturn string.sub(s, e+1)\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 210,
    "text": "local b,e,code = string.find(s, \"^%s*(%b\\5\\6)\")",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "if b then\r\n \t\tcode = string.sub(code, 2, -2)..\"\\n\"\r\n\t\tVerbatim(code, '')\r\n\t\treturn string.sub(s, e+1)\r\n \tend",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "code = string.sub(code, 2, -2)..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "Verbatim(code, '')",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "do\r\n \tlocal b,e,ptype = strfind(s, \"^%s*TOLUA_PROPERTY_TYPE%s*%(+%s*([^%)%s]*)%s*%)+%s*;?\")\r\n \tif b then\r\n \t\tif not ptype or ptype == \"\" then\r\n \t\t\tptype = \"default\"\r\n \t\tend\r\n \t\tself:set_property_type(ptype)\r\n\t \treturn strsub(s, e+1)\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 215,
    "text": "local b,e,ptype = strfind(s, \"^%s*TOLUA_PROPERTY_TYPE%s*%(+%s*([^%)%s]*)%s*%)+%s*;?\")",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "if b then\r\n \t\tif not ptype or ptype == \"\" then\r\n \t\t\tptype = \"default\"\r\n \t\tend\r\n \t\tself:set_property_type(ptype)\r\n\t \treturn strsub(s, e+1)\r\n \tend",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "if not ptype or ptype == \"\" then\r\n \t\t\tptype = \"default\"\r\n \t\tend",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "ptype = \"default\"",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "self:set_property_type(ptype)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "do\r\n \tlocal b,e = string.find(s, \"^%s*TOLUA_PROTECTED_DESTRUCTOR%s*;?\")\r\n\tif b then\r\n\t\tif self.set_protected_destructor then\r\n\t \t\tself:set_protected_destructor(true)\r\n\t \tend\r\n \t\treturn strsub(s, e+1)\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 221,
    "text": "local b,e = string.find(s, \"^%s*TOLUA_PROTECTED_DESTRUCTOR%s*;?\")",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "if b then\r\n\t\tif self.set_protected_destructor then\r\n\t \t\tself:set_protected_destructor(true)\r\n\t \tend\r\n \t\treturn strsub(s, e+1)\r\n \tend",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "if self.set_protected_destructor then\r\n\t \t\tself:set_protected_destructor(true)\r\n\t \tend",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "self:set_protected_destructor(true)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "do\r\n \tlocal b,e = string.find(s, \"^%s*extern%s+\")\r\n \tif b then\r\n\t\t-- do nothing\r\n \t\treturn strsub(s, e+1)\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 226,
    "text": "local b,e = string.find(s, \"^%s*extern%s+\")",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "if b then\r\n\t\t-- do nothing\r\n \t\treturn strsub(s, e+1)\r\n \tend",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "do\r\n \tlocal b,e = string.find(s, \"^%s*virtual%s+\")\r\n \tif b then\r\n \t\tmethodisvirtual = true\r\n \t\treturn strsub(s, e+1)\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 229,
    "text": "local b,e = string.find(s, \"^%s*virtual%s+\")",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "if b then\r\n \t\tmethodisvirtual = true\r\n \t\treturn strsub(s, e+1)\r\n \tend",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "methodisvirtual = true",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "do\r\n \tlocal b,e = string.find(s, \"^%s*%w*%s*:[^:]\")\r\n \tif b then\r\n \t\treturn strsub(s, e) -- preserve the [^:]\r\n \tend\r\n end",
    "type": "statement:do"
  }, {
    "id": 233,
    "text": "local b,e = string.find(s, \"^%s*%w*%s*:[^:]\")",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "if b then\r\n \t\treturn strsub(s, e) -- preserve the [^:]\r\n \tend",
    "type": "statement:if"
  }, {
    "id": 235,
    "text": "do\r\n  local b,e,name,body = strfind(s,\"^%s*module%s%s*([_%w][_%w]*)%s*(%b{})%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Module(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 236,
    "text": "local b,e,name,body = strfind(s,\"^%s*module%s%s*([_%w][_%w]*)%s*(%b{})%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Module(name,body)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "_curr_code = strsub(s,b,e)",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "Module(name,body)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "do\r\n  local b,e,name,body = strfind(s,\"^%s*namespace%s%s*([_%w][_%w]*)%s*(%b{})%s*;?\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Namespace(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 241,
    "text": "local b,e,name,body = strfind(s,\"^%s*namespace%s%s*([_%w][_%w]*)%s*(%b{})%s*;?\")",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Namespace(name,body)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "Namespace(name,body)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "do\r\n  local b,e,name = strfind(s,\"^%s*#define%s%s*([^%s]*)[^\\n]*\\n%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Define(name)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 245,
    "text": "local b,e,name = strfind(s,\"^%s*#define%s%s*([^%s]*)[^\\n]*\\n%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Define(name)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "Define(name)",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "do\r\n  local b,e,name,body,varname = strfind(s,\"^%s*enum%s+(%S*)%s*(%b{})%s*([^%s;]*)%s*;?%s*\")\r\n  if b then\r\n   --error(\"#Sorry, declaration of enums and variables on the same statement is not supported.\\nDeclare your variable separately (example: '\"..name..\" \"..varname..\";')\")\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body,varname)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 249,
    "text": "local b,e,name,body,varname = strfind(s,\"^%s*enum%s+(%S*)%s*(%b{})%s*([^%s;]*)%s*;?%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "if b then\r\n   --error(\"#Sorry, declaration of enums and variables on the same statement is not supported.\\nDeclare your variable separately (example: '\"..name..\" \"..varname..\";')\")\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body,varname)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "Enumerate(name,body,varname)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "do\r\n  local b,e,body,name = strfind(s,\"^%s*typedef%s+enum[^{]*(%b{})%s*([%w_][^%s]*)%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 253,
    "text": "local b,e,body,name = strfind(s,\"^%s*typedef%s+enum[^{]*(%b{})%s*([%w_][^%s]*)%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Enumerate(name,body)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "Enumerate(name,body)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "do\r\n  local b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:<>,]-%s+operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  if not b then\r\n\t\t -- try inline\r\n   b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:<>,]-%s+operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)[%s\\n]*%b{}%s*;?%s*\")\r\n  end\r\n  if not b then\r\n  \t-- try cast operator\r\n  \tb,e,decl,kind,arg,const = strfind(s, \"^%s*(operator)%s+([%w_:%d<>%*%&%s]+)%s*(%b())%s*(c?o?n?s?t?)\");\r\n  \tif b then\r\n  \t\tlocal _,ie = string.find(s, \"^%s*%b{}\", e+1)\r\n  \t\tif ie then\r\n  \t\t\te = ie\r\n  \t\tend\r\n  \tend\r\n  end\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Operator(decl,kind,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 257,
    "text": "local b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:<>,]-%s+operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "if not b then\r\n\t\t -- try inline\r\n   b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:<>,]-%s+operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)[%s\\n]*%b{}%s*;?%s*\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "b,e,decl,kind,arg,const = strfind(s,\"^%s*([_%w][_%w%s%*&:<>,]-%s+operator)%s*([^%s][^%s]*)%s*(%b())%s*(c?o?n?s?t?)[%s\\n]*%b{}%s*;?%s*\")",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "if not b then\r\n  \t-- try cast operator\r\n  \tb,e,decl,kind,arg,const = strfind(s, \"^%s*(operator)%s+([%w_:%d<>%*%&%s]+)%s*(%b())%s*(c?o?n?s?t?)\");\r\n  \tif b then\r\n  \t\tlocal _,ie = string.find(s, \"^%s*%b{}\", e+1)\r\n  \t\tif ie then\r\n  \t\t\te = ie\r\n  \t\tend\r\n  \tend\r\n  end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "b,e,decl,kind,arg,const = strfind(s, \"^%s*(operator)%s+([%w_:%d<>%*%&%s]+)%s*(%b())%s*(c?o?n?s?t?)\")",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "if b then\r\n  \t\tlocal _,ie = string.find(s, \"^%s*%b{}\", e+1)\r\n  \t\tif ie then\r\n  \t\t\te = ie\r\n  \t\tend\r\n  \tend",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "local _,ie = string.find(s, \"^%s*%b{}\", e+1)",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "if ie then\r\n  \t\t\te = ie\r\n  \t\tend",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "e = ie",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Operator(decl,kind,arg,const)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "Operator(decl,kind,arg,const)",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "do\r\n  --local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:<>]*[_%w])%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")\r\n  local b,e,decl,arg,const,virt = strfind(s,\"^%s*([^%(\\n]+)%s*(%b())%s*(c?o?n?s?t?)%s*(=?%s*0?)%s*;%s*\")\r\n  if not b then\r\n  \t-- try function with template\r\n  \tb,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:<>]*[_%w]%b<>)%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")\r\n  end\r\n  if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  end\r\n  if not b then\r\n   -- try function pointer\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([^%(;\\n]+%b())%s*(%b())%s*;%s*\")\r\n   if b then\r\n    decl = string.gsub(decl, \"%(%s*%*([^%)]*)%s*%)\", \" %1 \")\r\n   end\r\n  end\r\n  if b then\r\n  \tif virt and string.find(virt, \"[=0]\") then\r\n  \t\tif self.flags then\r\n  \t\t\tself.flags.pure_virtual = true\r\n  \t\tend\r\n  \tend\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 269,
    "text": "local b,e,decl,arg,const,virt = strfind(s,\"^%s*([^%(\\n]+)%s*(%b())%s*(c?o?n?s?t?)%s*(=?%s*0?)%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "if not b then\r\n  \t-- try function with template\r\n  \tb,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:<>]*[_%w]%b<>)%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:<>]*[_%w]%b<>)%s*(%b())%s*(c?o?n?s?t?)%s*=?%s*0?%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?)%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "if not b then\r\n   -- try function pointer\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([^%(;\\n]+%b())%s*(%b())%s*;%s*\")\r\n   if b then\r\n    decl = string.gsub(decl, \"%(%s*%*([^%)]*)%s*%)\", \" %1 \")\r\n   end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 275,
    "text": "b,e,decl,arg,const = strfind(s,\"^%s*([^%(;\\n]+%b())%s*(%b())%s*;%s*\")",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "if b then\r\n    decl = string.gsub(decl, \"%(%s*%*([^%)]*)%s*%)\", \" %1 \")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 277,
    "text": "decl = string.gsub(decl, \"%(%s*%*([^%)]*)%s*%)\", \" %1 \")",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "if b then\r\n  \tif virt and string.find(virt, \"[=0]\") then\r\n  \t\tif self.flags then\r\n  \t\t\tself.flags.pure_virtual = true\r\n  \t\tend\r\n  \tend\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "if virt and string.find(virt, \"[=0]\") then\r\n  \t\tif self.flags then\r\n  \t\t\tself.flags.pure_virtual = true\r\n  \t\tend\r\n  \tend",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "if self.flags then\r\n  \t\t\tself.flags.pure_virtual = true\r\n  \t\tend",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "self.flags.pure_virtual = true",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "Function(decl,arg,const)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "do\r\n  local b,e,decl,arg,const = strfind(s,\"^%s*([^%(\\n]+)%s*(%b())%s*(c?o?n?s?t?)[^;{]*%b{}%s*;?%s*\")\r\n  --local b,e,decl,arg,const = strfind(s,\"^%s*([~_%w][_@%w%s%*&:<>]*[_%w>])%s*(%b())%s*(c?o?n?s?t?)[^;]*%b{}%s*;?%s*\")\r\n  if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")\r\n  end\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 284,
    "text": "local b,e,decl,arg,const = strfind(s,\"^%s*([^%(\\n]+)%s*(%b())%s*(c?o?n?s?t?)[^;{]*%b{}%s*;?%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "if not b then\r\n   -- try a single letter function name\r\n   b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "b,e,decl,arg,const = strfind(s,\"^%s*([_%w])%s*(%b())%s*(c?o?n?s?t?).-%b{}%s*;?%s*\")",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Function(decl,arg,const)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "do\r\n\t local b,e,name,base,body\r\n\t\tbase = '' body = ''\r\n\t\tb,e,name = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*;\")  -- dummy class\r\n\t\tlocal dummy = false\r\n\t\tif not b then\r\n\t\t\tb,e,name = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*;\")    -- dummy struct\r\n\t\t\tif not b then\r\n\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\tif not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s+([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telse dummy = 1 end\r\n\t\telse dummy = 1 end\r\n\t\tif b then\r\n\t\t\tif base ~= '' then\r\n\t\t\t\tbase = string.gsub(base, \"^%s*:%s*\", \"\")\r\n\t\t\t\tbase = string.gsub(base, \"%s*public%s*\", \"\")\r\n\t\t\t\tbase = split(base, \",\")\r\n\t\t\t\t--local b,e\r\n\t\t\t\t--b,e,base = strfind(base,\".-([_%w][_%w<>,:]*)$\")\r\n\t\t\telse\r\n\t\t\t\tbase = {}\r\n\t\t\tend\r\n\t\t\t_curr_code = strsub(s,b,e)\r\n\t\t\tClass(name,base,body)\r\n\t\t\tif not dummy then\r\n\t\t\t\tvarb,vare,varname = string.find(s, \"^%s*([_%w]+)%s*;\", e+1)\r\n\t\t\t\tif varb then\r\n\t\t\t\t\tVariable(name..\" \"..varname)\r\n\t\t\t\t\te = vare\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn strsub(s,e+1)\r\n\t\tend\r\n\tend",
    "type": "statement:do"
  }, {
    "id": 289,
    "text": "local b,e,name,base,body",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "base = ''",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "body = ''",
    "type": "statement:assign"
  }, {
    "id": 292,
    "text": "b,e,name = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*;\")",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "local dummy = false",
    "type": "statement:localassign"
  }, {
    "id": 294,
    "text": "if not b then\r\n\t\t\tb,e,name = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*;\")    -- dummy struct\r\n\t\t\tif not b then\r\n\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\tif not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s+([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telse dummy = 1 end\r\n\t\telse dummy = 1 end",
    "type": "statement:if"
  }, {
    "id": 295,
    "text": "b,e,name = strfind(s,\"^%s*struct%s*([_%w][_%w@]*)%s*;\")",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "if not b then\r\n\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\tif not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s+([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telse dummy = 1 end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "b,e,name,base,body = strfind(s,\"^%s*class%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "if not b then\r\n\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*struct%s+([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\tif not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 299,
    "text": "b,e,name,base,body = strfind(s,\"^%s*struct%s+([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "if not b then\r\n\t\t\t\t\t\tb,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")\r\n\t\t\t\t\t\tif not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "b,e,name,base,body = strfind(s,\"^%s*union%s*([_%w][_%w@]*)%s*([^{]-)%s*(%b{})%s*\")",
    "type": "statement:assign"
  }, {
    "id": 302,
    "text": "if not b then\r\n\t\t\t\t\t\t\tbase = ''\r\n\t\t\t\t\t\t\tb,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;\")\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 303,
    "text": "b,e,body,name = strfind(s,\"^%s*typedef%s%s*struct%s%s*[_%w]*%s*(%b{})%s*([_%w][_%w@]*)%s*;\")",
    "type": "statement:assign"
  }, {
    "id": 304,
    "text": "dummy = 1",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "if b then\r\n\t\t\tif base ~= '' then\r\n\t\t\t\tbase = string.gsub(base, \"^%s*:%s*\", \"\")\r\n\t\t\t\tbase = string.gsub(base, \"%s*public%s*\", \"\")\r\n\t\t\t\tbase = split(base, \",\")\r\n\t\t\t\t--local b,e\r\n\t\t\t\t--b,e,base = strfind(base,\".-([_%w][_%w<>,:]*)$\")\r\n\t\t\telse\r\n\t\t\t\tbase = {}\r\n\t\t\tend\r\n\t\t\t_curr_code = strsub(s,b,e)\r\n\t\t\tClass(name,base,body)\r\n\t\t\tif not dummy then\r\n\t\t\t\tvarb,vare,varname = string.find(s, \"^%s*([_%w]+)%s*;\", e+1)\r\n\t\t\t\tif varb then\r\n\t\t\t\t\tVariable(name..\" \"..varname)\r\n\t\t\t\t\te = vare\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn strsub(s,e+1)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "if base ~= '' then\r\n\t\t\t\tbase = string.gsub(base, \"^%s*:%s*\", \"\")\r\n\t\t\t\tbase = string.gsub(base, \"%s*public%s*\", \"\")\r\n\t\t\t\tbase = split(base, \",\")\r\n\t\t\t\t--local b,e\r\n\t\t\t\t--b,e,base = strfind(base,\".-([_%w][_%w<>,:]*)$\")\r\n\t\t\telse\r\n\t\t\t\tbase = {}\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 307,
    "text": "base = string.gsub(base, \"^%s*:%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 308,
    "text": "base = string.gsub(base, \"%s*public%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "base = split(base, \",\")",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "base = {}",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "Class(name,base,body)",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "if not dummy then\r\n\t\t\t\tvarb,vare,varname = string.find(s, \"^%s*([_%w]+)%s*;\", e+1)\r\n\t\t\t\tif varb then\r\n\t\t\t\t\tVariable(name..\" \"..varname)\r\n\t\t\t\t\te = vare\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 313,
    "text": "varb,vare,varname = string.find(s, \"^%s*([_%w]+)%s*;\", e+1)",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "if varb then\r\n\t\t\t\t\tVariable(name..\" \"..varname)\r\n\t\t\t\t\te = vare\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "Variable(name..\" \"..varname)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "e = vare",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "do\r\n  local b,e,types = strfind(s,\"^%s*typedef%s%s*(.-)%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Typedef(types)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 318,
    "text": "local b,e,types = strfind(s,\"^%s*typedef%s%s*(.-)%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 319,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Typedef(types)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 320,
    "text": "Typedef(types)",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w][_@%s%w%d%*&:<>,]*[_%w%d])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n\r\n\tlocal list = split_c_tokens(decl, \",\")\r\n\tVariable(list[1])\r\n\tif list.n > 1 then\r\n\t\tlocal _,_,type = strfind(list[1], \"(.-)%s+([^%s]*)$\");\r\n\r\n\t\tlocal i =2;\r\n\t\twhile list[i] do\r\n\t\t\tVariable(type..\" \"..list[i])\r\n\t\t\ti=i+1\r\n\t\tend\r\n\tend\r\n   --Variable(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 322,
    "text": "local b,e,decl = strfind(s,\"^%s*([_%w][_@%s%w%d%*&:<>,]*[_%w%d])%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 323,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n\r\n\tlocal list = split_c_tokens(decl, \",\")\r\n\tVariable(list[1])\r\n\tif list.n > 1 then\r\n\t\tlocal _,_,type = strfind(list[1], \"(.-)%s+([^%s]*)$\");\r\n\r\n\t\tlocal i =2;\r\n\t\twhile list[i] do\r\n\t\t\tVariable(type..\" \"..list[i])\r\n\t\t\ti=i+1\r\n\t\tend\r\n\tend\r\n   --Variable(decl)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 324,
    "text": "local list = split_c_tokens(decl, \",\")",
    "type": "statement:localassign"
  }, {
    "id": 325,
    "text": "Variable(list[1])",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "if list.n > 1 then\r\n\t\tlocal _,_,type = strfind(list[1], \"(.-)%s+([^%s]*)$\");\r\n\r\n\t\tlocal i =2;\r\n\t\twhile list[i] do\r\n\t\t\tVariable(type..\" \"..list[i])\r\n\t\t\ti=i+1\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 327,
    "text": "local _,_,type = strfind(list[1], \"(.-)%s+([^%s]*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "local i =2",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "while list[i] do\r\n\t\t\tVariable(type..\" \"..list[i])\r\n\t\t\ti=i+1\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 330,
    "text": "Variable(type..\" \"..list[i])",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "i=i+1",
    "type": "statement:assign"
  }, {
    "id": 332,
    "text": "do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w]?[_%s%w%d]-char%s+[_@%w%d]*%s*%[%s*%S+%s*%])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Variable(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 333,
    "text": "local b,e,decl = strfind(s,\"^%s*([_%w]?[_%s%w%d]-char%s+[_@%w%d]*%s*%[%s*%S+%s*%])%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 334,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Variable(decl)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "Variable(decl)",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "do\r\n  local b,e,decl = strfind(s,\"^%s*([_%w][][_@%s%w%d%*&:<>]*[]_%w%d])%s*;%s*\")\r\n  if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Array(decl)\r\n   return strsub(s,e+1)\r\n  end\r\n end",
    "type": "statement:do"
  }, {
    "id": 337,
    "text": "local b,e,decl = strfind(s,\"^%s*([_%w][][_@%s%w%d%*&:<>]*[]_%w%d])%s*;%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "if b then\r\n   _curr_code = strsub(s,b,e)\r\n   Array(decl)\r\n   return strsub(s,e+1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 339,
    "text": "Array(decl)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "if gsub(s,\"%s%s*\",\"\") ~= \"\" then\r\n  _curr_code = s\r\n  error(\"#parse error\")\r\n else\r\n  return \"\"\r\n end",
    "type": "statement:if"
  }, {
    "id": 341,
    "text": "_curr_code = s",
    "type": "statement:assign"
  }, {
    "id": 342,
    "text": "error(\"#parse error\")",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 344,
    "text": "function classContainer:parse (s)\r\n\r\n\t--self.curr_member_access = nil\r\n\r\n while s ~= '' do\r\n  s = self:doparse(s)\r\n  methodisvirtual = false\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 345,
    "text": "while s ~= '' do\r\n  s = self:doparse(s)\r\n  methodisvirtual = false\r\n end",
    "type": "statement:while"
  }, {
    "id": 346,
    "text": "s = self:doparse(s)",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "methodisvirtual = false",
    "type": "statement:assign"
  }, {
    "id": 348,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 349,
    "text": "function get_property_type()\r\n\r\n\treturn classContainer.curr:get_property_type()\r\nend",
    "type": "function"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "function classContainer:set_property_type(ptype)\r\n\tptype = string.gsub(ptype, \"^%s*\", \"\")\r\n\tptype = string.gsub(ptype, \"%s*$\", \"\")\r\n\r\n\tself.property_type = ptype\r\nend",
    "type": "function"
  }, {
    "id": 352,
    "text": "ptype = string.gsub(ptype, \"^%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 353,
    "text": "ptype = string.gsub(ptype, \"%s*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 354,
    "text": "self.property_type = ptype",
    "type": "statement:assign"
  }, {
    "id": 355,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 356,
    "text": "function classContainer:get_property_type()\r\n\treturn self.property_type or (self.parent and self.parent:get_property_type()) or \"default\"\r\nend",
    "type": "function"
  }, {
    "id": 357,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 358,
    "text": "",
    "type": "function container"
  }, {
    "id": 359,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 360,
    "text": "Operator",
    "type": "global function"
  }, {
    "id": 361,
    "text": "Class",
    "type": "global function"
  }, {
    "id": 362,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 363,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 364,
    "text": "Function",
    "type": "global function"
  }, {
    "id": 365,
    "text": "split_c_tokens",
    "type": "global function"
  }, {
    "id": 366,
    "text": "parser_hook",
    "type": "global function"
  }, {
    "id": 367,
    "text": "Verbatim",
    "type": "global function"
  }, {
    "id": 368,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 369,
    "text": "find",
    "type": "global function"
  }, {
    "id": 370,
    "text": "Typedef",
    "type": "global function"
  }, {
    "id": 371,
    "text": "Define",
    "type": "global function"
  }, {
    "id": 372,
    "text": "Array",
    "type": "global function"
  }, {
    "id": 373,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 374,
    "text": "split",
    "type": "global function"
  }, {
    "id": 375,
    "text": "Variable",
    "type": "global function"
  }, {
    "id": 376,
    "text": "len",
    "type": "global function"
  }, {
    "id": 377,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 378,
    "text": "Enumerate",
    "type": "global function"
  }, {
    "id": 379,
    "text": "Module",
    "type": "global function"
  }, {
    "id": 380,
    "text": "Namespace",
    "type": "global function"
  }, {
    "id": 381,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 382,
    "text": "error",
    "type": "global function"
  }, {
    "id": 383,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 384,
    "text": "type",
    "type": "global function"
  }, {
    "id": 385,
    "text": "format",
    "type": "global function"
  }, {
    "id": 386,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 387,
    "text": "Code",
    "type": "global function"
  }, {
    "id": 388,
    "text": "",
    "type": "variable container"
  }, {
    "id": 389,
    "text": "",
    "type": "require container"
  }, {
    "id": 390,
    "text": "",
    "type": "global variable"
  }, {
    "id": 391,
    "text": "",
    "type": "n/a"
  }, {
    "id": 392,
    "text": "",
    "type": "global variable"
  }, {
    "id": 393,
    "text": "",
    "type": "n/a"
  }, {
    "id": 394,
    "text": "",
    "type": "global variable"
  }, {
    "id": 395,
    "text": "",
    "type": "n/a"
  }, {
    "id": 396,
    "text": "",
    "type": "global variable"
  }, {
    "id": 397,
    "text": "",
    "type": "n/a"
  }, {
    "id": 398,
    "text": "",
    "type": "global variable"
  } ]
}