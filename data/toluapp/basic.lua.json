{
  "_filename": "basic.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/toluapp/src/bin/lua/basic.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 20,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 33
  }, {
    "from": 14,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 12
  }, {
    "from": 35,
    "label": "has",
    "to": 18
  }, {
    "from": 35,
    "label": "has",
    "to": 19
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 33
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 12
  }, {
    "from": 39,
    "label": "has",
    "to": 12
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 12
  }, {
    "from": 43,
    "label": "has",
    "to": 12
  }, {
    "from": 43,
    "label": "has",
    "to": 12
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 12
  }, {
    "from": 49,
    "label": "has",
    "to": 12
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 12
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 55,
    "label": "has",
    "to": 12
  }, {
    "from": 55,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 58
  }, {
    "from": 66,
    "label": "has",
    "to": 59
  }, {
    "from": 66,
    "label": "has",
    "to": 12
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 68,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 89,
    "label": "has",
    "to": 95
  }, {
    "from": 89,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 89,
    "label": "has",
    "to": 97
  }, {
    "from": 68,
    "label": "has",
    "to": 99
  }, {
    "from": 68,
    "label": "has",
    "to": 12
  }, {
    "from": 68,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 76
  }, {
    "from": 101,
    "label": "has",
    "to": 77
  }, {
    "from": 101,
    "label": "has",
    "to": 78
  }, {
    "from": 101,
    "label": "has",
    "to": 79
  }, {
    "from": 101,
    "label": "has",
    "to": 80
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 103,
    "label": "has",
    "to": 12
  }, {
    "from": 103,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 115,
    "label": "has",
    "to": 109
  }, {
    "from": 113,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 113,
    "label": "has",
    "to": 12
  }, {
    "from": 113,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 114
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 126,
    "label": "has",
    "to": 109
  }, {
    "from": 125,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 122
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 125,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 12
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 12
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 12
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 133,
    "label": "has",
    "to": 12
  }, {
    "from": 133,
    "label": "has",
    "to": 12
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 12
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 12
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 12
  }, {
    "from": 161,
    "label": "has",
    "to": 12
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 12
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 12
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 12
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 133,
    "label": "calls",
    "to": 149
  }, {
    "from": 14,
    "label": "calls",
    "to": 183
  }, {
    "from": 14,
    "label": "calls",
    "to": 183
  }, {
    "from": 35,
    "label": "calls",
    "to": 183
  }, {
    "from": 125,
    "label": "calls",
    "to": 183
  }, {
    "from": 125,
    "label": "calls",
    "to": 183
  }, {
    "from": 125,
    "label": "calls",
    "to": 183
  }, {
    "from": 39,
    "label": "calls",
    "to": 175
  }, {
    "from": 14,
    "label": "calls",
    "to": 176
  }, {
    "from": 2,
    "label": "calls",
    "to": 190
  }, {
    "from": 8,
    "label": "calls",
    "to": 184
  }, {
    "from": 14,
    "label": "calls",
    "to": 184
  }, {
    "from": 14,
    "label": "calls",
    "to": 184
  }, {
    "from": 14,
    "label": "calls",
    "to": 184
  }, {
    "from": 49,
    "label": "calls",
    "to": 184
  }, {
    "from": 55,
    "label": "calls",
    "to": 184
  }, {
    "from": 55,
    "label": "calls",
    "to": 184
  }, {
    "from": 55,
    "label": "calls",
    "to": 184
  }, {
    "from": 55,
    "label": "calls",
    "to": 184
  }, {
    "from": 49,
    "label": "calls",
    "to": 191
  }, {
    "from": 68,
    "label": "calls",
    "to": 182
  }, {
    "from": 68,
    "label": "calls",
    "to": 182
  }, {
    "from": 8,
    "label": "calls",
    "to": 185
  }, {
    "from": 68,
    "label": "calls",
    "to": 178
  }, {
    "from": 68,
    "label": "calls",
    "to": 178
  }, {
    "from": 68,
    "label": "calls",
    "to": 178
  }, {
    "from": 133,
    "label": "calls",
    "to": 178
  }, {
    "from": 133,
    "label": "calls",
    "to": 178
  }, {
    "from": 133,
    "label": "calls",
    "to": 174
  }, {
    "from": 14,
    "label": "calls",
    "to": 177
  }, {
    "from": 14,
    "label": "calls",
    "to": 177
  }, {
    "from": 14,
    "label": "calls",
    "to": 177
  }, {
    "from": 39,
    "label": "calls",
    "to": 188
  }, {
    "from": 43,
    "label": "calls",
    "to": 188
  }, {
    "from": 2,
    "label": "calls",
    "to": 187
  }, {
    "from": 14,
    "label": "calls",
    "to": 187
  }, {
    "from": 113,
    "label": "calls",
    "to": 187
  }, {
    "from": 113,
    "label": "calls",
    "to": 187
  }, {
    "from": 113,
    "label": "calls",
    "to": 187
  }, {
    "from": 125,
    "label": "calls",
    "to": 187
  }, {
    "from": 125,
    "label": "calls",
    "to": 187
  }, {
    "from": 125,
    "label": "calls",
    "to": 187
  }, {
    "from": 159,
    "label": "calls",
    "to": 189
  }, {
    "from": 68,
    "label": "calls",
    "to": 186
  }, {
    "from": 68,
    "label": "calls",
    "to": 101
  }, {
    "from": 68,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 180
  }, {
    "from": 167,
    "label": "calls",
    "to": 161
  }, {
    "from": 169,
    "label": "calls",
    "to": 161
  }, {
    "from": 171,
    "label": "calls",
    "to": 161
  }, {
    "from": 68,
    "label": "calls",
    "to": 192
  }, {
    "from": 68,
    "label": "calls",
    "to": 192
  }, {
    "from": 68,
    "label": "calls",
    "to": 192
  }, {
    "from": 68,
    "label": "calls",
    "to": 192
  }, {
    "from": 2,
    "label": "calls",
    "to": 181
  }, {
    "from": 14,
    "label": "calls",
    "to": 179
  }, {
    "from": 14,
    "label": "calls",
    "to": 179
  }, {
    "from": 113,
    "label": "calls",
    "to": 179
  }, {
    "from": 125,
    "label": "calls",
    "to": 179
  }, {
    "from": 1,
    "label": "contains",
    "to": 173
  }, {
    "from": 173,
    "label": "declares",
    "to": 2
  }, {
    "from": 173,
    "label": "declares",
    "to": 8
  }, {
    "from": 173,
    "label": "declares",
    "to": 14
  }, {
    "from": 173,
    "label": "declares",
    "to": 35
  }, {
    "from": 173,
    "label": "declares",
    "to": 39
  }, {
    "from": 173,
    "label": "declares",
    "to": 43
  }, {
    "from": 173,
    "label": "declares",
    "to": 49
  }, {
    "from": 173,
    "label": "declares",
    "to": 55
  }, {
    "from": 173,
    "label": "declares",
    "to": 66
  }, {
    "from": 173,
    "label": "declares",
    "to": 68
  }, {
    "from": 173,
    "label": "declares",
    "to": 101
  }, {
    "from": 173,
    "label": "declares",
    "to": 103
  }, {
    "from": 173,
    "label": "declares",
    "to": 113
  }, {
    "from": 173,
    "label": "declares",
    "to": 125
  }, {
    "from": 173,
    "label": "declares",
    "to": 133
  }, {
    "from": 173,
    "label": "declares",
    "to": 139
  }, {
    "from": 173,
    "label": "declares",
    "to": 141
  }, {
    "from": 173,
    "label": "declares",
    "to": 143
  }, {
    "from": 173,
    "label": "declares",
    "to": 145
  }, {
    "from": 173,
    "label": "declares",
    "to": 147
  }, {
    "from": 173,
    "label": "declares",
    "to": 149
  }, {
    "from": 173,
    "label": "declares",
    "to": 151
  }, {
    "from": 173,
    "label": "declares",
    "to": 153
  }, {
    "from": 173,
    "label": "declares",
    "to": 155
  }, {
    "from": 173,
    "label": "declares",
    "to": 157
  }, {
    "from": 173,
    "label": "declares",
    "to": 159
  }, {
    "from": 173,
    "label": "declares",
    "to": 161
  }, {
    "from": 173,
    "label": "declares",
    "to": 167
  }, {
    "from": 173,
    "label": "declares",
    "to": 169
  }, {
    "from": 173,
    "label": "declares",
    "to": 171
  }, {
    "from": 1,
    "label": "contains",
    "to": 193
  }, {
    "from": 1,
    "label": "contains",
    "to": 194
  }, {
    "from": 193,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 193,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 193,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 193,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 193,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 193,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 193,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 193,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 193,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 193,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 193,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 193,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 193,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 193,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 193,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 193,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "basic",
    "type": "module"
  }, {
    "id": 2,
    "text": "function appendrenaming (s)\r\n local b,e,old,new = strfind(s,\"%s*(.-)%s*@%s*(.-)%s*$\")\r\n\tif not b then\r\n\t error(\"#Invalid renaming syntax; it should be of the form: pattern@pattern\")\r\n\tend\r\n\ttinsert(_renaming,{old=old, new=new})\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local b,e,old,new = strfind(s,\"%s*(.-)%s*@%s*(.-)%s*$\")",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if not b then\r\n\t error(\"#Invalid renaming syntax; it should be of the form: pattern@pattern\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "error(\"#Invalid renaming syntax; it should be of the form: pattern@pattern\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "tinsert(_renaming,{old=old, new=new})",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function applyrenaming (s)\r\n\tfor i=1,getn(_renaming) do\r\n\t local m,n = gsub(s,_renaming[i].old,_renaming[i].new)\r\n\t\tif n ~= 0 then\r\n\t\t return m\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "for i=1,getn(_renaming) do\r\n\t local m,n = gsub(s,_renaming[i].old,_renaming[i].new)\r\n\t\tif n ~= 0 then\r\n\t\t return m\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 10,
    "text": "local m,n = gsub(s,_renaming[i].old,_renaming[i].new)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if n ~= 0 then\r\n\t\t return m\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function tolua_error (s,f)\r\nif _curr_code then\r\n\tprint(\"***curr code for error is \"..tostring(_curr_code))\r\n\tprint(debug.traceback())\r\nend\r\n local out = _OUTPUT\r\n _OUTPUT = _STDERR\r\n if strsub(s,1,1) == '#' then\r\n  write(\"\\n** tolua: \"..strsub(s,2)..\".\\n\\n\")\r\n  if _curr_code then\r\n   local _,_,s = strfind(_curr_code,\"^%s*(.-\\n)\") -- extract first line\r\n   if s==nil then s = _curr_code end\r\n   s = gsub(s,\"_userdata\",\"void*\") -- return with 'void*'\r\n   s = gsub(s,\"_cstring\",\"char*\")  -- return with 'char*'\r\n   s = gsub(s,\"_lstate\",\"lua_State*\")  -- return with 'lua_State*'\r\n   write(\"Code being processed:\\n\"..s..\"\\n\")\r\n  end\r\n else\r\n if not f then f = \"(f is nil)\" end\r\n  print(\"\\n** tolua internal error: \"..f..s..\".\\n\\n\")\r\n  return\r\n end\r\n _OUTPUT = out\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if _curr_code then\r\n\tprint(\"***curr code for error is \"..tostring(_curr_code))\r\n\tprint(debug.traceback())\r\nend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "print(\"***curr code for error is \"..tostring(_curr_code))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "print(debug.traceback())",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local out = _OUTPUT",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "_OUTPUT = _STDERR",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if strsub(s,1,1) == '#' then\r\n  write(\"\\n** tolua: \"..strsub(s,2)..\".\\n\\n\")\r\n  if _curr_code then\r\n   local _,_,s = strfind(_curr_code,\"^%s*(.-\\n)\") -- extract first line\r\n   if s==nil then s = _curr_code end\r\n   s = gsub(s,\"_userdata\",\"void*\") -- return with 'void*'\r\n   s = gsub(s,\"_cstring\",\"char*\")  -- return with 'char*'\r\n   s = gsub(s,\"_lstate\",\"lua_State*\")  -- return with 'lua_State*'\r\n   write(\"Code being processed:\\n\"..s..\"\\n\")\r\n  end\r\n else\r\n if not f then f = \"(f is nil)\" end\r\n  print(\"\\n** tolua internal error: \"..f..s..\".\\n\\n\")\r\n  return\r\n end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "write(\"\\n** tolua: \"..strsub(s,2)..\".\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if _curr_code then\r\n   local _,_,s = strfind(_curr_code,\"^%s*(.-\\n)\") -- extract first line\r\n   if s==nil then s = _curr_code end\r\n   s = gsub(s,\"_userdata\",\"void*\") -- return with 'void*'\r\n   s = gsub(s,\"_cstring\",\"char*\")  -- return with 'char*'\r\n   s = gsub(s,\"_lstate\",\"lua_State*\")  -- return with 'lua_State*'\r\n   write(\"Code being processed:\\n\"..s..\"\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local _,_,s = strfind(_curr_code,\"^%s*(.-\\n)\")",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if s==nil then s = _curr_code end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "s = _curr_code",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "s = gsub(s,\"_userdata\",\"void*\")",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "s = gsub(s,\"_cstring\",\"char*\")",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "s = gsub(s,\"_lstate\",\"lua_State*\")",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "write(\"Code being processed:\\n\"..s..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "if not f then f = \"(f is nil)\" end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "f = \"(f is nil)\"",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "print(\"\\n** tolua internal error: \"..f..s..\".\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "_OUTPUT = out",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function warning (msg)\r\n if flags.q then return end\r\n local out = _OUTPUT\r\n _OUTPUT = _STDERR\r\n write(\"\\n** tolua warning: \"..msg..\".\\n\\n\")\r\n _OUTPUT = out\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "if flags.q then return end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "write(\"\\n** tolua warning: \"..msg..\".\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function regtype (t)\r\n\t--if isbasic(t) then\r\n\t--\treturn t\r\n\t--end\r\n\tlocal ft = findtype(t)\r\n\r\n\tif not _usertype[ft] then\r\n\t\treturn appendusertype(t)\r\n\tend\r\n\treturn ft\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local ft = findtype(t)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if not _usertype[ft] then\r\n\t\treturn appendusertype(t)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function typevar(type)\r\n\tif type == '' or type == 'void' then\r\n\t\treturn type\r\n\telse\r\n\t\tlocal ft = findtype(type)\r\n\t\tif ft then\r\n\t\t\treturn ft\r\n\t\tend\r\n\t\t_usertype[type] = type\r\n\t\treturn type\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "if type == '' or type == 'void' then\r\n\t\treturn type\r\n\telse\r\n\t\tlocal ft = findtype(type)\r\n\t\tif ft then\r\n\t\t\treturn ft\r\n\t\tend\r\n\t\t_usertype[type] = type\r\n\t\treturn type\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local ft = findtype(type)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if ft then\r\n\t\t\treturn ft\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "_usertype[type] = type",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function isbasic (type)\r\n local t = gsub(type,'const ','')\r\n local m,t = applytypedef('', t)\r\n local b = _basic[t]\r\n if b then\r\n  return b,_basic_ctype[b]\r\n end\r\n return nil\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local t = gsub(type,'const ','')",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local m,t = applytypedef('', t)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local b = _basic[t]",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if b then\r\n  return b,_basic_ctype[b]\r\n end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function split (s,t)\r\n local l = {n=0}\r\n local f = function (s)\r\n  l.n = l.n + 1\r\n  l[l.n] = s\r\n  return \"\"\r\n end\r\n local p = \"%s*(.-)%s*\"..t..\"%s*\"\r\n s = gsub(s,\"^%s+\",\"\")\r\n s = gsub(s,\"%s+$\",\"\")\r\n s = gsub(s,p,f)\r\n l.n = l.n + 1\r\n l[l.n] = gsub(s,\"(%s%s*)$\",\"\")\r\n return l\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local l = {n=0}",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local f = function (s)\r\n  l.n = l.n + 1\r\n  l[l.n] = s\r\n  return \"\"\r\n end",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "l.n = l.n + 1",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "l[l.n] = s",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "local p = \"%s*(.-)%s*\"..t..\"%s*\"",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "s = gsub(s,\"^%s+\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "s = gsub(s,\"%s+$\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "s = gsub(s,p,f)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "l[l.n] = gsub(s,\"(%s%s*)$\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function (s)\r\n  l.n = l.n + 1\r\n  l[l.n] = s\r\n  return \"\"\r\n end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function split_c_tokens(s, pat)\r\n\r\n\ts = string.gsub(s, \"^%s*\", \"\")\r\n\ts = string.gsub(s, \"%s*$\", \"\")\r\n\r\n\tlocal token_begin = 1\r\n\tlocal token_end = 1\r\n\tlocal ofs = 1\r\n\tlocal ret = {n=0}\r\n\r\n\tfunction add_token(ofs)\r\n\r\n\t\tlocal t = string.sub(s, token_begin, ofs)\r\n\t\tt = string.gsub(t, \"^%s*\", \"\")\r\n\t\tt = string.gsub(t, \"%s*$\", \"\")\r\n\t\tret.n = ret.n + 1\r\n\t\tret[ret.n] = t\r\n\tend\r\n\r\n\twhile ofs <= string.len(s) do\r\n\r\n\t\tlocal sub = string.sub(s, ofs, -1)\r\n\t\tlocal b,e = string.find(sub, \"^\"..pat)\r\n\t\tif b then\r\n\t\t\tadd_token(ofs-1)\r\n\t\t\tofs = ofs+e\r\n\t\t\ttoken_begin = ofs\r\n\t\telse\r\n\t\t\tlocal char = string.sub(s, ofs, ofs)\r\n\t\t\tif char == \"(\" or char == \"<\" then\r\n\r\n\t\t\t\tlocal block\r\n\t\t\t\tif char == \"(\" then block = \"^%b()\" end\r\n\t\t\t\tif char == \"<\" then block = \"^%b<>\" end\r\n\r\n\t\t\t\tb,e = string.find(sub, block)\r\n\t\t\t\tif not b then\r\n\t\t\t\t\t-- unterminated block?\r\n\t\t\t\t\tofs = ofs+1\r\n\t\t\t\telse\r\n\t\t\t\t\tofs = ofs + e\r\n\t\t\t\tend\r\n\r\n\t\t\telse\r\n\t\t\t\tofs = ofs+1\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend\r\n\tadd_token(ofs)\r\n\t--if ret.n == 0 then\r\n\r\n\t--\tret.n=1\r\n\t--\tret[1] = \"\"\r\n\t--end\r\n\r\n\treturn ret\r\n\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "s = string.gsub(s, \"^%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "s = string.gsub(s, \"%s*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "local token_begin = 1",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local token_end = 1",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local ofs = 1",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local ret = {n=0}",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "function add_token(ofs)\r\n\r\n\t\tlocal t = string.sub(s, token_begin, ofs)\r\n\t\tt = string.gsub(t, \"^%s*\", \"\")\r\n\t\tt = string.gsub(t, \"%s*$\", \"\")\r\n\t\tret.n = ret.n + 1\r\n\t\tret[ret.n] = t\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 76,
    "text": "local t = string.sub(s, token_begin, ofs)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "t = string.gsub(t, \"^%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "t = string.gsub(t, \"%s*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "ret.n = ret.n + 1",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "ret[ret.n] = t",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "while ofs <= string.len(s) do\r\n\r\n\t\tlocal sub = string.sub(s, ofs, -1)\r\n\t\tlocal b,e = string.find(sub, \"^\"..pat)\r\n\t\tif b then\r\n\t\t\tadd_token(ofs-1)\r\n\t\t\tofs = ofs+e\r\n\t\t\ttoken_begin = ofs\r\n\t\telse\r\n\t\t\tlocal char = string.sub(s, ofs, ofs)\r\n\t\t\tif char == \"(\" or char == \"<\" then\r\n\r\n\t\t\t\tlocal block\r\n\t\t\t\tif char == \"(\" then block = \"^%b()\" end\r\n\t\t\t\tif char == \"<\" then block = \"^%b<>\" end\r\n\r\n\t\t\t\tb,e = string.find(sub, block)\r\n\t\t\t\tif not b then\r\n\t\t\t\t\t-- unterminated block?\r\n\t\t\t\t\tofs = ofs+1\r\n\t\t\t\telse\r\n\t\t\t\t\tofs = ofs + e\r\n\t\t\t\tend\r\n\r\n\t\t\telse\r\n\t\t\t\tofs = ofs+1\r\n\t\t\tend\r\n\t\tend\r\n\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 82,
    "text": "local sub = string.sub(s, ofs, -1)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local b,e = string.find(sub, \"^\"..pat)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if b then\r\n\t\t\tadd_token(ofs-1)\r\n\t\t\tofs = ofs+e\r\n\t\t\ttoken_begin = ofs\r\n\t\telse\r\n\t\t\tlocal char = string.sub(s, ofs, ofs)\r\n\t\t\tif char == \"(\" or char == \"<\" then\r\n\r\n\t\t\t\tlocal block\r\n\t\t\t\tif char == \"(\" then block = \"^%b()\" end\r\n\t\t\t\tif char == \"<\" then block = \"^%b<>\" end\r\n\r\n\t\t\t\tb,e = string.find(sub, block)\r\n\t\t\t\tif not b then\r\n\t\t\t\t\t-- unterminated block?\r\n\t\t\t\t\tofs = ofs+1\r\n\t\t\t\telse\r\n\t\t\t\t\tofs = ofs + e\r\n\t\t\t\tend\r\n\r\n\t\t\telse\r\n\t\t\t\tofs = ofs+1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "add_token(ofs-1)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "ofs = ofs+e",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "token_begin = ofs",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "local char = string.sub(s, ofs, ofs)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if char == \"(\" or char == \"<\" then\r\n\r\n\t\t\t\tlocal block\r\n\t\t\t\tif char == \"(\" then block = \"^%b()\" end\r\n\t\t\t\tif char == \"<\" then block = \"^%b<>\" end\r\n\r\n\t\t\t\tb,e = string.find(sub, block)\r\n\t\t\t\tif not b then\r\n\t\t\t\t\t-- unterminated block?\r\n\t\t\t\t\tofs = ofs+1\r\n\t\t\t\telse\r\n\t\t\t\t\tofs = ofs + e\r\n\t\t\t\tend\r\n\r\n\t\t\telse\r\n\t\t\t\tofs = ofs+1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "local block",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if char == \"(\" then block = \"^%b()\" end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "block = \"^%b()\"",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "if char == \"<\" then block = \"^%b<>\" end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "block = \"^%b<>\"",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "b,e = string.find(sub, block)",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if not b then\r\n\t\t\t\t\t-- unterminated block?\r\n\t\t\t\t\tofs = ofs+1\r\n\t\t\t\telse\r\n\t\t\t\t\tofs = ofs + e\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "ofs = ofs+1",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "ofs = ofs + e",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "add_token(ofs)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function add_token(ofs)\r\n\r\n\t\tlocal t = string.sub(s, token_begin, ofs)\r\n\t\tt = string.gsub(t, \"^%s*\", \"\")\r\n\t\tt = string.gsub(t, \"%s*$\", \"\")\r\n\t\tret.n = ret.n + 1\r\n\t\tret[ret.n] = t\r\n\tend",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function concat (t,f,l,jstr)\r\n\tjstr = jstr or \" \"\r\n local s = ''\r\n local i=f\r\n while i<=l do\r\n  s = s..t[i]\r\n  i = i+1\r\n  if i <= l then s = s..jstr end\r\n end\r\n return s\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "jstr = jstr or \" \"",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "local s = ''",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local i=f",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "while i<=l do\r\n  s = s..t[i]\r\n  i = i+1\r\n  if i <= l then s = s..jstr end\r\n end",
    "type": "statement:while"
  }, {
    "id": 108,
    "text": "s = s..t[i]",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "if i <= l then s = s..jstr end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "s = s..jstr",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function concatparam (line, ...)\r\n local i=1\r\n while i<=arg.n do\r\n  if _cont and not strfind(_cont,'[%(,\"]') and\r\n     strfind(arg[i],\"^[%a_~]\") then\r\n\t    line = line .. ' '\r\n  end\r\n  line = line .. arg[i]\r\n  if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end\r\n  i = i+1\r\n end\r\n if strfind(arg[arg.n],\"[%/%)%;%{%}]$\") then\r\n  _cont=nil line = line .. '\\n'\r\n end\r\n\treturn line\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "while i<=arg.n do\r\n  if _cont and not strfind(_cont,'[%(,\"]') and\r\n     strfind(arg[i],\"^[%a_~]\") then\r\n\t    line = line .. ' '\r\n  end\r\n  line = line .. arg[i]\r\n  if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 116,
    "text": "if _cont and not strfind(_cont,'[%(,\"]') and\r\n     strfind(arg[i],\"^[%a_~]\") then\r\n\t    line = line .. ' '\r\n  end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "line = line .. ' '",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "line = line .. arg[i]",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "_cont = strsub(arg[i],-1,-1)",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "if strfind(arg[arg.n],\"[%/%)%;%{%}]$\") then\r\n  _cont=nil line = line .. '\\n'\r\n end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "_cont=nil",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "line = line .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function output (...)\r\n local i=1\r\n while i<=arg.n do\r\n  if _cont and not strfind(_cont,'[%(,\"]') and\r\n     strfind(arg[i],\"^[%a_~]\") then\r\n\t    write(' ')\r\n  end\r\n  write(arg[i])\r\n  if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end\r\n  i = i+1\r\n end\r\n if strfind(arg[arg.n],\"[%/%)%;%{%}]$\") then\r\n  _cont=nil write('\\n')\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "while i<=arg.n do\r\n  if _cont and not strfind(_cont,'[%(,\"]') and\r\n     strfind(arg[i],\"^[%a_~]\") then\r\n\t    write(' ')\r\n  end\r\n  write(arg[i])\r\n  if arg[i] ~= '' then\r\n   _cont = strsub(arg[i],-1,-1)\r\n  end\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 127,
    "text": "if _cont and not strfind(_cont,'[%(,\"]') and\r\n     strfind(arg[i],\"^[%a_~]\") then\r\n\t    write(' ')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "write(' ')",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "write(arg[i])",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "if strfind(arg[arg.n],\"[%/%)%;%{%}]$\") then\r\n  _cont=nil write('\\n')\r\n end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "write('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function get_property_methods(ptype, name)\r\n\r\n\tif get_property_methods_hook and get_property_methods_hook(ptype,name) then\r\n\t\treturn get_property_methods_hook(ptype, name)\r\n\tend\r\n\r\n\tif ptype == \"default\" then -- get_name, set_name\r\n\t\treturn \"get_\"..name, \"set_\"..name\r\n\tend\r\n\r\n\tif ptype == \"qt\" then -- name, setName\r\n\t\treturn name, \"set\"..string.upper(string.sub(name, 1, 1))..string.sub(name, 2, -1)\r\n\tend\r\n\r\n\tif ptype == \"overload\" then -- name, name\r\n\t\treturn name,name\r\n\tend\r\n\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "if get_property_methods_hook and get_property_methods_hook(ptype,name) then\r\n\t\treturn get_property_methods_hook(ptype, name)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "if ptype == \"default\" then -- get_name, set_name\r\n\t\treturn \"get_\"..name, \"set_\"..name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "if ptype == \"qt\" then -- name, setName\r\n\t\treturn name, \"set\"..string.upper(string.sub(name, 1, 1))..string.sub(name, 2, -1)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "if ptype == \"overload\" then -- name, name\r\n\t\treturn name,name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function preprocess_hook(p)\r\n\t-- p.code has all the input code from the pkg\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function include_file_hook(t, filename, ...)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function preparse_hook(package)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function pre_output_hook(package)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function post_output_hook(package)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function get_property_methods_hook(property_type, name)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function parser_hook(s)\r\n\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function pre_call_hook(f)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function post_call_hook(f)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function pre_register_hook(package)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function output_error_hook(...)\r\n\treturn string.format(...)\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "local function search_base(t, funcs)\r\n\r\n\tlocal class = _global_classes[t]\r\n\r\n\twhile class do\r\n\t\tif funcs[class.type] then\r\n\t\t\treturn funcs[class.type]\r\n\t\tend\r\n\t\tclass = _global_classes[class.btype]\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local class = _global_classes[t]",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "while class do\r\n\t\tif funcs[class.type] then\r\n\t\t\treturn funcs[class.type]\r\n\t\tend\r\n\t\tclass = _global_classes[class.btype]\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 164,
    "text": "if funcs[class.type] then\r\n\t\t\treturn funcs[class.type]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "class = _global_classes[class.btype]",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function get_push_function(t)\r\n\treturn _push_functions[t] or search_base(t, _base_push_functions) or \"tolua_pushusertype\"\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function get_to_function(t)\r\n\treturn _to_functions[t] or search_base(t, _base_to_functions) or \"tolua_tousertype\"\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function get_is_function(t)\r\n\treturn _is_functions[t] or search_base(t, _base_is_functions) or \"tolua_isusertype\"\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "",
    "type": "function container"
  }, {
    "id": 174,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 175,
    "text": "appendusertype",
    "type": "global function"
  }, {
    "id": 176,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 177,
    "text": "print",
    "type": "global function"
  }, {
    "id": 178,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 179,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 180,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 181,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 182,
    "text": "find",
    "type": "global function"
  }, {
    "id": 183,
    "text": "write",
    "type": "global function"
  }, {
    "id": 184,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 185,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 186,
    "text": "len",
    "type": "global function"
  }, {
    "id": 187,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 188,
    "text": "findtype",
    "type": "global function"
  }, {
    "id": 189,
    "text": "format",
    "type": "global function"
  }, {
    "id": 190,
    "text": "error",
    "type": "global function"
  }, {
    "id": 191,
    "text": "applytypedef",
    "type": "global function"
  }, {
    "id": 192,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 193,
    "text": "",
    "type": "variable container"
  }, {
    "id": 194,
    "text": "",
    "type": "require container"
  }, {
    "id": 195,
    "text": "",
    "type": "global variable"
  }, {
    "id": 196,
    "text": "",
    "type": "n/a"
  }, {
    "id": 197,
    "text": "",
    "type": "global variable"
  }, {
    "id": 198,
    "text": "",
    "type": "n/a"
  }, {
    "id": 199,
    "text": "",
    "type": "global variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "global variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "global variable"
  }, {
    "id": 204,
    "text": "",
    "type": "n/a"
  }, {
    "id": 205,
    "text": "",
    "type": "global variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "global variable"
  }, {
    "id": 208,
    "text": "",
    "type": "n/a"
  }, {
    "id": 209,
    "text": "",
    "type": "global variable"
  }, {
    "id": 210,
    "text": "",
    "type": "n/a"
  }, {
    "id": 211,
    "text": "",
    "type": "global variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "global variable"
  }, {
    "id": 214,
    "text": "",
    "type": "n/a"
  }, {
    "id": 215,
    "text": "",
    "type": "global variable"
  }, {
    "id": 216,
    "text": "",
    "type": "n/a"
  }, {
    "id": 217,
    "text": "",
    "type": "global variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "global variable"
  }, {
    "id": 220,
    "text": "",
    "type": "n/a"
  }, {
    "id": 221,
    "text": "",
    "type": "global variable"
  }, {
    "id": 222,
    "text": "",
    "type": "n/a"
  }, {
    "id": 223,
    "text": "",
    "type": "global variable"
  }, {
    "id": 224,
    "text": "",
    "type": "n/a"
  }, {
    "id": 225,
    "text": "",
    "type": "global variable"
  }, {
    "id": 226,
    "text": "",
    "type": "n/a"
  } ]
}