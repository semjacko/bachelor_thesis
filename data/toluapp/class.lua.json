{
  "_filename": "class.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/toluapp/src/bin/lua/class.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 6
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 16
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 16
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 32,
    "label": "has",
    "to": 21
  }, {
    "from": 32,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 16
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 19
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 42,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 4
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 62,
    "label": "has",
    "to": 69
  }, {
    "from": 62,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 78
  }, {
    "from": 62,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 62,
    "label": "has",
    "to": 83
  }, {
    "from": 62,
    "label": "has",
    "to": 84
  }, {
    "from": 62,
    "label": "has",
    "to": 85
  }, {
    "from": 62,
    "label": "has",
    "to": 86
  }, {
    "from": 62,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 62,
    "label": "has",
    "to": 94
  }, {
    "from": 62,
    "label": "has",
    "to": 95
  }, {
    "from": 62,
    "label": "has",
    "to": 21
  }, {
    "from": 62,
    "label": "has",
    "to": 96
  }, {
    "from": 62,
    "label": "calls",
    "to": 119
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 23,
    "label": "calls",
    "to": 101
  }, {
    "from": 32,
    "label": "calls",
    "to": 101
  }, {
    "from": 62,
    "label": "calls",
    "to": 101
  }, {
    "from": 32,
    "label": "calls",
    "to": 98
  }, {
    "from": 32,
    "label": "calls",
    "to": 98
  }, {
    "from": 62,
    "label": "calls",
    "to": 112
  }, {
    "from": 62,
    "label": "calls",
    "to": 103
  }, {
    "from": 62,
    "label": "calls",
    "to": 105
  }, {
    "from": 62,
    "label": "calls",
    "to": 105
  }, {
    "from": 62,
    "label": "calls",
    "to": 106
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 42,
    "label": "calls",
    "to": 100
  }, {
    "from": 62,
    "label": "calls",
    "to": 114
  }, {
    "from": 62,
    "label": "calls",
    "to": 109
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 57,
    "label": "calls",
    "to": 121
  }, {
    "from": 62,
    "label": "calls",
    "to": 110
  }, {
    "from": 23,
    "label": "calls",
    "to": 107
  }, {
    "from": 32,
    "label": "calls",
    "to": 113
  }, {
    "from": 62,
    "label": "calls",
    "to": 57
  }, {
    "from": 62,
    "label": "calls",
    "to": 116
  }, {
    "from": 97,
    "label": "calls",
    "to": 120
  }, {
    "from": 57,
    "label": "calls",
    "to": 120
  }, {
    "from": 32,
    "label": "calls",
    "to": 111
  }, {
    "from": 62,
    "label": "calls",
    "to": 111
  }, {
    "from": 62,
    "label": "calls",
    "to": 111
  }, {
    "from": 62,
    "label": "calls",
    "to": 108
  }, {
    "from": 2,
    "label": "calls",
    "to": 115
  }, {
    "from": 23,
    "label": "calls",
    "to": 115
  }, {
    "from": 32,
    "label": "calls",
    "to": 115
  }, {
    "from": 62,
    "label": "calls",
    "to": 115
  }, {
    "from": 62,
    "label": "calls",
    "to": 118
  }, {
    "from": 62,
    "label": "calls",
    "to": 118
  }, {
    "from": 62,
    "label": "calls",
    "to": 118
  }, {
    "from": 62,
    "label": "calls",
    "to": 118
  }, {
    "from": 62,
    "label": "calls",
    "to": 118
  }, {
    "from": 62,
    "label": "calls",
    "to": 102
  }, {
    "from": 62,
    "label": "calls",
    "to": 104
  }, {
    "from": 1,
    "label": "contains",
    "to": 97
  }, {
    "from": 97,
    "label": "declares",
    "to": 2
  }, {
    "from": 97,
    "label": "declares",
    "to": 23
  }, {
    "from": 97,
    "label": "declares",
    "to": 32
  }, {
    "from": 97,
    "label": "declares",
    "to": 42
  }, {
    "from": 97,
    "label": "declares",
    "to": 54
  }, {
    "from": 97,
    "label": "declares",
    "to": 57
  }, {
    "from": 97,
    "label": "declares",
    "to": 62
  }, {
    "from": 1,
    "label": "contains",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 122,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 122,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "class",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classClass:register (pre)\r\n\r\n\tif not self:check_public_access() then\r\n\t\treturn\r\n\tend\r\n\r\n pre = pre or ''\r\n push(self)\r\n\tif _collect[self.type] then\r\n\t\toutput(pre,'#ifdef __cplusplus\\n')\r\n  output(pre..'tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",'.._collect[self.type]..');')\r\n\t\toutput(pre,'#else\\n')\r\n  output(pre..'tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')\r\n\t\toutput(pre,'#endif\\n')\r\n\telse\r\n  output(pre..'tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')\r\n\tend\r\n\tif self.extra_bases then\r\n\t\tfor k,base in ipairs(self.extra_bases) do\r\n\t\t\t-- not now\r\n   --output(pre..' tolua_addbase(tolua_S, \"'..self.type..'\", \"'..base..'\");')\r\n\t\tend\r\n\tend\r\n output(pre..'tolua_beginmodule(tolua_S,\"'..self.lname..'\");')\r\n local i=1\r\n while self[i] do\r\n  self[i]:register(pre..' ')\r\n  i = i+1\r\n end\r\n output(pre..'tolua_endmodule(tolua_S);')\r\n\tpop()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if not self:check_public_access() then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "pre = pre or ''",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "push(self)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "if _collect[self.type] then\r\n\t\toutput(pre,'#ifdef __cplusplus\\n')\r\n  output(pre..'tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",'.._collect[self.type]..');')\r\n\t\toutput(pre,'#else\\n')\r\n  output(pre..'tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')\r\n\t\toutput(pre,'#endif\\n')\r\n\telse\r\n  output(pre..'tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "output(pre,'#ifdef __cplusplus\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "output(pre..'tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",'.._collect[self.type]..');')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "output(pre,'#else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "output(pre..'tolua_cclass(tolua_S,\"'..self.lname..'\",\"'..self.type..'\",\"'..self.btype..'\",NULL);')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "output(pre,'#endif\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if self.extra_bases then\r\n\t\tfor k,base in ipairs(self.extra_bases) do\r\n\t\t\t-- not now\r\n   --output(pre..' tolua_addbase(tolua_S, \"'..self.type..'\", \"'..base..'\");')\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "for k,base in ipairs(self.extra_bases) do\r\n\t\t\t-- not now\r\n   --output(pre..' tolua_addbase(tolua_S, \"'..self.type..'\", \"'..base..'\");')\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "output(pre..'tolua_beginmodule(tolua_S,\"'..self.lname..'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "while self[i] do\r\n  self[i]:register(pre..' ')\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 18,
    "text": "self[i]:register(pre..' ')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "output(pre..'tolua_endmodule(tolua_S);')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "pop()",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function classClass:requirecollection (t)\r\n\tif self.flags.protected_destructor or (not self:check_public_access()) then\r\n\t\treturn false\r\n\tend\r\n push(self)\r\n\tlocal r = false\r\n local i=1\r\n while self[i] do\r\n  r = self[i]:requirecollection(t) or r\r\n  i = i+1\r\n end\r\n\tpop()\r\n\t-- only class that exports destructor can be appropriately collected\r\n\t-- classes that export constructors need to have a collector (overrided by -D flag on command line)\r\n\tif self._delete or ((not flags['D']) and self._new) then\r\n\t\t--t[self.type] = \"tolua_collect_\" .. gsub(self.type,\"::\",\"_\")\r\n\t\tt[self.type] = \"tolua_collect_\" .. clean_template(self.type)\r\n\t\tr = true\r\n\tend\r\n return r\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if self.flags.protected_destructor or (not self:check_public_access()) then\r\n\t\treturn false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local r = false",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "while self[i] do\r\n  r = self[i]:requirecollection(t) or r\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 27,
    "text": "r = self[i]:requirecollection(t) or r",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if self._delete or ((not flags['D']) and self._new) then\r\n\t\t--t[self.type] = \"tolua_collect_\" .. gsub(self.type,\"::\",\"_\")\r\n\t\tt[self.type] = \"tolua_collect_\" .. clean_template(self.type)\r\n\t\tr = true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "t[self.type] = \"tolua_collect_\" .. clean_template(self.type)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "r = true",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function classClass:decltype ()\r\n push(self)\r\n\tself.type = regtype(self.original_name or self.name)\r\n\tself.btype = typevar(self.base)\r\n\tself.ctype = 'const '..self.type\r\n\tif self.extra_bases then\r\n\t\tfor i=1,table.getn(self.extra_bases) do\r\n\t\t\tself.extra_bases[i] = typevar(self.extra_bases[i])\r\n\t\tend\r\n\tend\r\n local i=1\r\n while self[i] do\r\n  self[i]:decltype()\r\n  i = i+1\r\n end\r\n\tpop()\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "self.type = regtype(self.original_name or self.name)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "self.btype = typevar(self.base)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "self.ctype = 'const '..self.type",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if self.extra_bases then\r\n\t\tfor i=1,table.getn(self.extra_bases) do\r\n\t\t\tself.extra_bases[i] = typevar(self.extra_bases[i])\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "for i=1,table.getn(self.extra_bases) do\r\n\t\t\tself.extra_bases[i] = typevar(self.extra_bases[i])\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 38,
    "text": "self.extra_bases[i] = typevar(self.extra_bases[i])",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "while self[i] do\r\n  self[i]:decltype()\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 40,
    "text": "self[i]:decltype()",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function classClass:print (ident,close)\r\n print(ident..\"Class{\")\r\n print(ident..\" name = '\"..self.name..\"',\")\r\n print(ident..\" base = '\"..self.base..\"';\")\r\n print(ident..\" lname = '\"..self.lname..\"',\")\r\n print(ident..\" type = '\"..self.type..\"',\")\r\n print(ident..\" btype = '\"..self.btype..\"',\")\r\n print(ident..\" ctype = '\"..self.ctype..\"',\")\r\n local i=1\r\n while self[i] do\r\n  self[i]:print(ident..\" \",\",\")\r\n  i = i+1\r\n end\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "print(ident..\"Class{\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "print(ident..\" name = '\"..self.name..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "print(ident..\" base = '\"..self.base..\"';\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "print(ident..\" lname = '\"..self.lname..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "print(ident..\" type = '\"..self.type..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "print(ident..\" btype = '\"..self.btype..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "print(ident..\" ctype = '\"..self.ctype..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "while self[i] do\r\n  self[i]:print(ident..\" \",\",\")\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 51,
    "text": "self[i]:print(ident..\" \",\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function classClass:set_protected_destructor(p)\r\n\tself.flags.protected_destructor = self.flags.protected_destructor or p\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "self.flags.protected_destructor = self.flags.protected_destructor or p",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function _Class (t)\r\n setmetatable(t,classClass)\r\n t:buildnames()\r\n append(t)\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "setmetatable(t,classClass)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "t:buildnames()",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "append(t)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function Class (n,p,b)\r\n\r\n\tif table.getn(p) > 1 then\r\n\t\tb = string.sub(b, 1, -2)\r\n\t\tfor i=2,table.getn(p),1 do\r\n\t\t\tb = b..\"\\n tolua_inherits \"..p[i]..\" __\"..p[i]..\"__;\\n\"\r\n\t\tend\r\n\t\tb = b..\"\\n}\"\r\n\tend\r\n\r\n\t-- check for template\r\n\tb = string.gsub(b, \"^{%s*TEMPLATE_BIND\", \"{\\nTOLUA_TEMPLATE_BIND\")\r\n\tlocal t,_,T,I = string.find(b, '^{%s*TOLUA_TEMPLATE_BIND%s*%(+%s*\\\"?([^\\\",]*)\\\"?%s*,%s*([^%)]*)%s*%)+')\r\n\tif t then\r\n\r\n\t\t-- remove quotes\r\n\t\tI = string.gsub(I, \"\\\"\", \"\")\r\n\t\tT = string.gsub(T, \"\\\"\", \"\")\r\n\t\t-- get type list\r\n\t\tlocal types = split_c_tokens(I, \",\")\r\n\t\t-- remove TEMPLATE_BIND line\r\n\t\tlocal bs = string.gsub(b, \"^{%s*TOLUA_TEMPLATE_BIND[^\\n]*\\n\", \"{\\n\")\r\n\t\t\t\r\n\t\tlocal Tl = split(T, \" \")\r\n\t\tlocal tc = TemplateClass(n, p, bs, Tl)\r\n\r\n\t\t\r\n\t\ttc:throw(types, true)\r\n\t\t--for i=1,types.n do\r\n\t\t--\ttc:throw(split_c_tokens(types[i], \" \"), true)\r\n\t\t--end\r\n\t\treturn\r\n\tend\r\n\t\r\n\tlocal mbase\r\n\r\n\tif p then\r\n\t\tmbase = table.remove(p, 1)\r\n\t\tif not p[1] then p = nil end\r\n\tend\r\n\r\n\tmbase = mbase and resolve_template_types(mbase)\r\n\r\n\tlocal c\r\n\tlocal oname = string.gsub(n, \"@.*$\", \"\")\r\n\toname = getnamespace(classContainer.curr)..oname\r\n\r\n\tif _global_classes[oname] then\r\n\t\tc = _global_classes[oname]\r\n\t\tif mbase and ((not c.base) or c.base == \"\") then\r\n\t\t\tc.base = mbase\r\n\t\tend\r\n\telse\r\n\t\tc = _Class(_Container{name=n, base=mbase, extra_bases=p})\r\n\r\n\t\tlocal ft = getnamespace(c.parent)..c.original_name\r\n\t\tappend_global_type(ft, c)\r\n\tend\r\n\r\n\tpush(c)\r\n\tc:parse(strsub(b,2,strlen(b)-1)) -- eliminate braces\r\n\tpop()\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "if table.getn(p) > 1 then\r\n\t\tb = string.sub(b, 1, -2)\r\n\t\tfor i=2,table.getn(p),1 do\r\n\t\t\tb = b..\"\\n tolua_inherits \"..p[i]..\" __\"..p[i]..\"__;\\n\"\r\n\t\tend\r\n\t\tb = b..\"\\n}\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "b = string.sub(b, 1, -2)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "for i=2,table.getn(p),1 do\r\n\t\t\tb = b..\"\\n tolua_inherits \"..p[i]..\" __\"..p[i]..\"__;\\n\"\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 66,
    "text": "b = b..\"\\n tolua_inherits \"..p[i]..\" __\"..p[i]..\"__;\\n\"",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "b = b..\"\\n}\"",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "b = string.gsub(b, \"^{%s*TEMPLATE_BIND\", \"{\\nTOLUA_TEMPLATE_BIND\")",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "local t,_,T,I = string.find(b, '^{%s*TOLUA_TEMPLATE_BIND%s*%(+%s*\\\"?([^\\\",]*)\\\"?%s*,%s*([^%)]*)%s*%)+')",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if t then\r\n\r\n\t\t-- remove quotes\r\n\t\tI = string.gsub(I, \"\\\"\", \"\")\r\n\t\tT = string.gsub(T, \"\\\"\", \"\")\r\n\t\t-- get type list\r\n\t\tlocal types = split_c_tokens(I, \",\")\r\n\t\t-- remove TEMPLATE_BIND line\r\n\t\tlocal bs = string.gsub(b, \"^{%s*TOLUA_TEMPLATE_BIND[^\\n]*\\n\", \"{\\n\")\r\n\t\t\t\r\n\t\tlocal Tl = split(T, \" \")\r\n\t\tlocal tc = TemplateClass(n, p, bs, Tl)\r\n\r\n\t\t\r\n\t\ttc:throw(types, true)\r\n\t\t--for i=1,types.n do\r\n\t\t--\ttc:throw(split_c_tokens(types[i], \" \"), true)\r\n\t\t--end\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "I = string.gsub(I, \"\\\"\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "T = string.gsub(T, \"\\\"\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local types = split_c_tokens(I, \",\")",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local bs = string.gsub(b, \"^{%s*TOLUA_TEMPLATE_BIND[^\\n]*\\n\", \"{\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local Tl = split(T, \" \")",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local tc = TemplateClass(n, p, bs, Tl)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "tc:throw(types, true)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "local mbase",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if p then\r\n\t\tmbase = table.remove(p, 1)\r\n\t\tif not p[1] then p = nil end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "mbase = table.remove(p, 1)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if not p[1] then p = nil end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "p = nil",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "mbase = mbase and resolve_template_types(mbase)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "local c",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local oname = string.gsub(n, \"@.*$\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "oname = getnamespace(classContainer.curr)..oname",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if _global_classes[oname] then\r\n\t\tc = _global_classes[oname]\r\n\t\tif mbase and ((not c.base) or c.base == \"\") then\r\n\t\t\tc.base = mbase\r\n\t\tend\r\n\telse\r\n\t\tc = _Class(_Container{name=n, base=mbase, extra_bases=p})\r\n\r\n\t\tlocal ft = getnamespace(c.parent)..c.original_name\r\n\t\tappend_global_type(ft, c)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "c = _global_classes[oname]",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if mbase and ((not c.base) or c.base == \"\") then\r\n\t\t\tc.base = mbase\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "c.base = mbase",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "c = _Class(_Container{name=n, base=mbase, extra_bases=p})",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local ft = getnamespace(c.parent)..c.original_name",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "append_global_type(ft, c)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "push(c)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "c:parse(strsub(b,2,strlen(b)-1))",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "",
    "type": "function container"
  }, {
    "id": 98,
    "text": "typevar",
    "type": "global function"
  }, {
    "id": 99,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 100,
    "text": "print",
    "type": "global function"
  }, {
    "id": 101,
    "text": "pop",
    "type": "global function"
  }, {
    "id": 102,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 103,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 104,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 105,
    "text": "getnamespace",
    "type": "global function"
  }, {
    "id": 106,
    "text": "append_global_type",
    "type": "global function"
  }, {
    "id": 107,
    "text": "clean_template",
    "type": "global function"
  }, {
    "id": 108,
    "text": "resolve_template_types",
    "type": "global function"
  }, {
    "id": 109,
    "text": "split_c_tokens",
    "type": "global function"
  }, {
    "id": 110,
    "text": "TemplateClass",
    "type": "global function"
  }, {
    "id": 111,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 112,
    "text": "find",
    "type": "global function"
  }, {
    "id": 113,
    "text": "regtype",
    "type": "global function"
  }, {
    "id": 114,
    "text": "split",
    "type": "global function"
  }, {
    "id": 115,
    "text": "push",
    "type": "global function"
  }, {
    "id": 116,
    "text": "_Container",
    "type": "global function"
  }, {
    "id": 117,
    "text": "output",
    "type": "global function"
  }, {
    "id": 118,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 119,
    "text": "strlen",
    "type": "global function"
  }, {
    "id": 120,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 121,
    "text": "append",
    "type": "global function"
  }, {
    "id": 122,
    "text": "",
    "type": "variable container"
  }, {
    "id": 123,
    "text": "",
    "type": "require container"
  }, {
    "id": 124,
    "text": "",
    "type": "global variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  }, {
    "id": 126,
    "text": "",
    "type": "global variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  } ]
}