{
  "_filename": "variable.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/toluapp/src/bin/lua/variable.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 14,
    "label": "has",
    "to": 28
  }, {
    "from": 14,
    "label": "has",
    "to": 29
  }, {
    "from": 14,
    "label": "has",
    "to": 30
  }, {
    "from": 14,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 30
  }, {
    "from": 34,
    "label": "has",
    "to": 30
  }, {
    "from": 34,
    "label": "has",
    "to": 30
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 30
  }, {
    "from": 41,
    "label": "has",
    "to": 30
  }, {
    "from": 41,
    "label": "has",
    "to": 30
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 44,
    "label": "has",
    "to": 55
  }, {
    "from": 44,
    "label": "has",
    "to": 56
  }, {
    "from": 44,
    "label": "has",
    "to": 57
  }, {
    "from": 44,
    "label": "has",
    "to": 58
  }, {
    "from": 44,
    "label": "has",
    "to": 59
  }, {
    "from": 44,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 44,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 44,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 71
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 44,
    "label": "has",
    "to": 83
  }, {
    "from": 44,
    "label": "has",
    "to": 84
  }, {
    "from": 44,
    "label": "has",
    "to": 85
  }, {
    "from": 44,
    "label": "has",
    "to": 86
  }, {
    "from": 44,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 87,
    "label": "has",
    "to": 58
  }, {
    "from": 87,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 61
  }, {
    "from": 94,
    "label": "has",
    "to": 62
  }, {
    "from": 94,
    "label": "has",
    "to": 63
  }, {
    "from": 94,
    "label": "has",
    "to": 64
  }, {
    "from": 87,
    "label": "has",
    "to": 67
  }, {
    "from": 87,
    "label": "has",
    "to": 95
  }, {
    "from": 87,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 68
  }, {
    "from": 96,
    "label": "has",
    "to": 65
  }, {
    "from": 87,
    "label": "has",
    "to": 97
  }, {
    "from": 87,
    "label": "has",
    "to": 98
  }, {
    "from": 87,
    "label": "has",
    "to": 69
  }, {
    "from": 87,
    "label": "has",
    "to": 99
  }, {
    "from": 87,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 87,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 102,
    "label": "has",
    "to": 108
  }, {
    "from": 102,
    "label": "has",
    "to": 109
  }, {
    "from": 102,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 102,
    "label": "has",
    "to": 112
  }, {
    "from": 102,
    "label": "has",
    "to": 113
  }, {
    "from": 102,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 102,
    "label": "has",
    "to": 118
  }, {
    "from": 102,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 102,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 102,
    "label": "has",
    "to": 124
  }, {
    "from": 102,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 123
  }, {
    "from": 102,
    "label": "has",
    "to": 126
  }, {
    "from": 102,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 102,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 102,
    "label": "has",
    "to": 135
  }, {
    "from": 87,
    "label": "has",
    "to": 136
  }, {
    "from": 87,
    "label": "has",
    "to": 84
  }, {
    "from": 87,
    "label": "has",
    "to": 85
  }, {
    "from": 87,
    "label": "has",
    "to": 86
  }, {
    "from": 44,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 30
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 138,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 138,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 150,
    "label": "has",
    "to": 30
  }, {
    "from": 150,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 30
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 44,
    "label": "calls",
    "to": 164
  }, {
    "from": 44,
    "label": "calls",
    "to": 164
  }, {
    "from": 44,
    "label": "calls",
    "to": 164
  }, {
    "from": 44,
    "label": "calls",
    "to": 157
  }, {
    "from": 44,
    "label": "calls",
    "to": 157
  }, {
    "from": 14,
    "label": "calls",
    "to": 168
  }, {
    "from": 44,
    "label": "calls",
    "to": 168
  }, {
    "from": 44,
    "label": "calls",
    "to": 168
  }, {
    "from": 44,
    "label": "calls",
    "to": 168
  }, {
    "from": 44,
    "label": "calls",
    "to": 168
  }, {
    "from": 44,
    "label": "calls",
    "to": 161
  }, {
    "from": 44,
    "label": "calls",
    "to": 161
  }, {
    "from": 14,
    "label": "calls",
    "to": 167
  }, {
    "from": 44,
    "label": "calls",
    "to": 165
  }, {
    "from": 44,
    "label": "calls",
    "to": 165
  }, {
    "from": 44,
    "label": "calls",
    "to": 165
  }, {
    "from": 44,
    "label": "calls",
    "to": 165
  }, {
    "from": 44,
    "label": "calls",
    "to": 165
  }, {
    "from": 150,
    "label": "calls",
    "to": 173
  }, {
    "from": 14,
    "label": "calls",
    "to": 162
  }, {
    "from": 154,
    "label": "calls",
    "to": 160
  }, {
    "from": 44,
    "label": "calls",
    "to": 171
  }, {
    "from": 138,
    "label": "calls",
    "to": 163
  }, {
    "from": 156,
    "label": "calls",
    "to": 172
  }, {
    "from": 150,
    "label": "calls",
    "to": 172
  }, {
    "from": 44,
    "label": "calls",
    "to": 158
  }, {
    "from": 154,
    "label": "calls",
    "to": 150
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 44,
    "label": "calls",
    "to": 170
  }, {
    "from": 44,
    "label": "calls",
    "to": 166
  }, {
    "from": 44,
    "label": "calls",
    "to": 166
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 138,
    "label": "calls",
    "to": 169
  }, {
    "from": 138,
    "label": "calls",
    "to": 169
  }, {
    "from": 1,
    "label": "contains",
    "to": 156
  }, {
    "from": 156,
    "label": "declares",
    "to": 2
  }, {
    "from": 156,
    "label": "declares",
    "to": 14
  }, {
    "from": 156,
    "label": "declares",
    "to": 32
  }, {
    "from": 156,
    "label": "declares",
    "to": 34
  }, {
    "from": 156,
    "label": "declares",
    "to": 41
  }, {
    "from": 156,
    "label": "declares",
    "to": 44
  }, {
    "from": 156,
    "label": "declares",
    "to": 138
  }, {
    "from": 156,
    "label": "declares",
    "to": 150
  }, {
    "from": 156,
    "label": "declares",
    "to": 154
  }, {
    "from": 1,
    "label": "contains",
    "to": 174
  }, {
    "from": 1,
    "label": "contains",
    "to": 175
  }, {
    "from": 174,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 174,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "variable",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classVariable:print (ident,close)\r\n print(ident..\"Variable{\")\r\n print(ident..\" mod  = '\"..self.mod..\"',\")\r\n print(ident..\" type = '\"..self.type..\"',\")\r\n print(ident..\" ptr  = '\"..self.ptr..\"',\")\r\n print(ident..\" name = '\"..self.name..\"',\")\r\n if self.dim then print(ident..\" dim = '\"..self.dim..\"',\") end\r\n print(ident..\" def  = '\"..self.def..\"',\")\r\n print(ident..\" ret  = '\"..self.ret..\"',\")\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(ident..\"Variable{\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "print(ident..\" mod  = '\"..self.mod..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "print(ident..\" type = '\"..self.type..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "print(ident..\" ptr  = '\"..self.ptr..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "print(ident..\" name = '\"..self.name..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "if self.dim then print(ident..\" dim = '\"..self.dim..\"',\") end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "print(ident..\" dim = '\"..self.dim..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "print(ident..\" def  = '\"..self.def..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "print(ident..\" ret  = '\"..self.ret..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function classVariable:cfuncname (prefix)\r\n local parent = \"\"\r\n local unsigned = \"\"\r\n local ptr = \"\"\r\n\r\n local p = self:inmodule() or self:innamespace() or self:inclass()\r\n\r\n if p then\r\n \tif self.parent.classtype == 'class' then\r\n\t\tparent = \"_\" .. self.parent.type\r\n\telse\r\n\t  parent = \"_\" .. p\r\n\tend\r\n end\r\n\r\n if strfind(self.mod,\"(unsigned)\") then\r\n  unsigned = \"_unsigned\"\r\n end\r\n\r\n if self.ptr == \"*\" then ptr = \"_ptr\"\r\n elseif self.ptr == \"&\" then ptr = \"_ref\"\r\n end\r\n\r\n local name =  prefix .. parent .. unsigned .. \"_\" .. gsub(self.lname or self.name,\".*::\",\"\") .. ptr\r\n\r\n\tname = clean_template(name)\r\n return name\r\n\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local parent = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local unsigned = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local ptr = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local p = self:inmodule() or self:innamespace() or self:inclass()",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if p then\r\n \tif self.parent.classtype == 'class' then\r\n\t\tparent = \"_\" .. self.parent.type\r\n\telse\r\n\t  parent = \"_\" .. p\r\n\tend\r\n end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "if self.parent.classtype == 'class' then\r\n\t\tparent = \"_\" .. self.parent.type\r\n\telse\r\n\t  parent = \"_\" .. p\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "parent = \"_\" .. self.parent.type",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "parent = \"_\" .. p",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if strfind(self.mod,\"(unsigned)\") then\r\n  unsigned = \"_unsigned\"\r\n end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "unsigned = \"_unsigned\"",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if self.ptr == \"*\" then ptr = \"_ptr\"\r\n elseif self.ptr == \"&\" then ptr = \"_ref\"\r\n end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "ptr = \"_ptr\"",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "ptr = \"_ref\"",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local name =  prefix .. parent .. unsigned .. \"_\" .. gsub(self.lname or self.name,\".*::\",\"\") .. ptr",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "name = clean_template(name)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function classVariable:isvariable ()\r\n return true\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function classVariable:getvalue (class,static, prop_get)\r\n\r\n\tlocal name\r\n\tif prop_get then\r\n\r\n\t\tname = prop_get..\"()\"\r\n\telse\r\n\t\tname = self.name\r\n\tend\r\n\r\n\tif class and static then\r\n\t return self.parent.type..'::'..name\r\n\telseif class then\r\n\t return 'self->'..name\r\n\telse\r\n\t return name\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if prop_get then\r\n\r\n\t\tname = prop_get..\"()\"\r\n\telse\r\n\t\tname = self.name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "name = prop_get..\"()\"",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "name = self.name",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if class and static then\r\n\t return self.parent.type..'::'..name\r\n\telseif class then\r\n\t return 'self->'..name\r\n\telse\r\n\t return name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function classVariable:getpointervalue (class,static)\r\n if class and static then\r\n  return class..'::p'\r\n elseif class then\r\n  return 'self->p'\r\n else\r\n  return 'p'\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if class and static then\r\n  return class..'::p'\r\n elseif class then\r\n  return 'self->p'\r\n else\r\n  return 'p'\r\n end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function classVariable:supcode ()\r\n\r\n local class = self:inclass()\r\n\r\n\tlocal prop_get,prop_set\r\n\tif string.find(self.mod, 'tolua_property') then\r\n\r\n\t\tlocal _,_,type = string.find(self.mod, \"tolua_property__([^%s]*)\")\r\n\t\ttype = type or \"default\"\r\n\t\tprop_get,prop_set = get_property_methods(type, self.name)\r\n\t\tself.mod = string.gsub(self.mod, \"tolua_property[^%s]*\", \"\")\r\n\tend\r\n\r\n -- get function ------------------------------------------------\r\n if class then\r\n  output(\"/* get function:\",self.name,\" of class \",class,\" */\")\r\n else\r\n  output(\"/* get function:\",self.name,\" */\")\r\n end\r\n self.cgetname = self:cfuncname(\"tolua_get\")\r\n output(\"#ifndef TOLUA_DISABLE_\"..self.cgetname)\r\n output(\"\\nstatic int\",self.cgetname,\"(lua_State* tolua_S)\")\r\n output(\"{\")\r\n\r\n -- declare self, if the case\r\n local _,_,static = strfind(self.mod,'^%s*(static)')\r\n if class and static==nil then\r\n  output(' ',self.parent.type,'*','self = ')\r\n  output('(',self.parent.type,'*) ')\r\n  local to_func = get_to_function(self.parent.type)\r\n  output(to_func,'(tolua_S,1,0);')\r\n elseif static then\r\n  _,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')\r\n end\r\n\r\n\r\n -- check self value\r\n if class and static==nil then\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n  output('  if (!self) tolua_error(tolua_S,\"'..output_error_hook(\"invalid \\'self\\' in accessing variable \\'%s\\'\", self.name)..'\",NULL);');\r\n\t\toutput('#endif\\n')\r\n end\r\n\r\n -- return value\r\n if string.find(self.mod, 'tolua_inherits') then\r\n\tlocal push_func = get_push_function(self.type)\r\n \toutput('#ifdef __cplusplus\\n')\r\n\toutput('  ',push_func,'(tolua_S,(void*)static_cast<'..self.type..'*>(self), \"',self.type,'\");')\r\n\toutput('#else\\n')\r\n\toutput('  ',push_func,'(tolua_S,(void*)(('..self.type..'*)self), \"',self.type,'\");')\r\n\toutput('#endif\\n')\r\n else\r\n\tlocal t,ct = isbasic(self.type)\r\n\tif t then\r\n\t\toutput('  tolua_push'..t..'(tolua_S,(',ct,')'..self:getvalue(class,static,prop_get)..');')\r\n\telse\r\n\t\tlocal push_func = get_push_function(self.type)\r\n\t\tt = self.type\r\n\t\tif self.ptr == '&' or self.ptr == '' then\r\n\t\t\toutput('  ',push_func,'(tolua_S,(void*)&'..self:getvalue(class,static,prop_get)..',\"',t,'\");')\r\n\t\telse\r\n\t\t\toutput('  ',push_func,'(tolua_S,(void*)'..self:getvalue(class,static,prop_get)..',\"',t,'\");')\r\n\t\tend\r\n\tend\r\n end\r\n output(' return 1;')\r\n output('}')\r\n output('#endif //#ifndef TOLUA_DISABLE\\n')\r\n output('\\n')\r\n\r\n -- set function ------------------------------------------------\r\n if not (strfind(self.type,'const%s+') or string.find(self.mod, 'tolua_readonly') or string.find(self.mod, 'tolua_inherits'))  then\r\n  if class then\r\n   output(\"/* set function:\",self.name,\" of class \",class,\" */\")\r\n  else\r\n   output(\"/* set function:\",self.name,\" */\")\r\n  end\r\n  self.csetname = self:cfuncname(\"tolua_set\")\r\n  output(\"#ifndef TOLUA_DISABLE_\"..self.csetname)\r\n  output(\"\\nstatic int\",self.csetname,\"(lua_State* tolua_S)\")\r\n  output(\"{\")\r\n\r\n  -- declare self, if the case\r\n  if class and static==nil then\r\n   output(' ',self.parent.type,'*','self = ')\r\n   output('(',self.parent.type,'*) ')\r\n   local to_func = get_to_function(self.parent.type)\r\n   output(to_func,'(tolua_S,1,0);')\r\n   -- check self value\r\n\t\tend\r\n  -- check types\r\n\t\toutput('#ifndef TOLUA_RELEASE\\n')\r\n\t\toutput('  tolua_Error tolua_err;')\r\n  if class and static==nil then\r\n   output('  if (!self) tolua_error(tolua_S,\"'..output_error_hook(\"invalid \\'self\\' in accessing variable \\'%s\\'\", self.name)..'\",NULL);');\r\n  elseif static then\r\n   _,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')\r\n  end\r\n\r\n  -- check variable type\r\n  output('  if ('..self:outchecktype(2)..')')\r\n  output('   tolua_error(tolua_S,\"#vinvalid type in variable assignment.\",&tolua_err);')\r\n\t\toutput('#endif\\n')\r\n\r\n  -- assign value\r\n\t\tlocal def = 0\r\n\t\tif self.def ~= '' then def = self.def end\r\n\t\tif self.type == 'char*' and self.dim ~= '' then -- is string\r\n\t\t\toutput(' strncpy((char*)')\r\n\t\t\tif class and static then\r\n\t\t\t\toutput(self.parent.type..'::'..self.name)\r\n\t\t\telseif class then\r\n\t\t\t\toutput('self->'..self.name)\r\n\t\t\telse\r\n\t\t\t\toutput(self.name)\r\n\t\t\tend\r\n\t\t\toutput(',(const char*)tolua_tostring(tolua_S,2,',def,'),',self.dim,'-1);')\r\n\t\telse\r\n\t\t\tlocal ptr = ''\r\n\t\t\tif self.ptr~='' then ptr = '*' end\r\n\t\t\toutput(' ')\r\n\t\t\tlocal name = prop_set or self.name\r\n\t\t\tif class and static then\r\n\t\t\t\toutput(self.parent.type..'::'..name)\r\n\t\t\telseif class then\r\n\t\t\t\toutput('self->'..name)\r\n\t\t\telse\r\n\t\t\t\toutput(name)\r\n\t\t\tend\r\n\t\t\tlocal t = isbasic(self.type)\r\n\t\t\tif prop_set then\r\n\t\t\t\toutput('(')\r\n\t\t\telse\r\n\t\t\t\toutput(' = ')\r\n\t\t\tend\r\n\t\t\tif not t and ptr=='' then output('*') end\r\n\t\t\toutput('((',self.mod,self.type)\r\n\t\t\tif not t then\r\n\t\t\t\toutput('*')\r\n\t\t\tend\r\n\t\t\toutput(') ')\r\n\t\t\tif t then\r\n\t\t\t\tif isenum(self.type) then\r\n\t\t\t\t\toutput('(int) ')\r\n\t\t\t\tend\r\n\t\t\t\toutput('tolua_to'..t,'(tolua_S,2,',def,'))')\r\n\t\t\telse\r\n\t\t\t\tlocal to_func = get_to_function(self.type)\r\n\t\t\t\toutput(to_func,'(tolua_S,2,',def,'))')\r\n\t\t\tend\r\n\t\t\tif prop_set then\r\n\t\t\t\toutput(\")\")\r\n\t\t\tend\r\n\t\t\toutput(\";\")\r\n\t\tend\r\n  output(' return 0;')\r\n  output('}')\r\n  output('#endif //#ifndef TOLUA_DISABLE\\n')\r\n  output('\\n')\r\n end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local class = self:inclass()",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local prop_get,prop_set",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if string.find(self.mod, 'tolua_property') then\r\n\r\n\t\tlocal _,_,type = string.find(self.mod, \"tolua_property__([^%s]*)\")\r\n\t\ttype = type or \"default\"\r\n\t\tprop_get,prop_set = get_property_methods(type, self.name)\r\n\t\tself.mod = string.gsub(self.mod, \"tolua_property[^%s]*\", \"\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local _,_,type = string.find(self.mod, \"tolua_property__([^%s]*)\")",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "type = type or \"default\"",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "prop_get,prop_set = get_property_methods(type, self.name)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "self.mod = string.gsub(self.mod, \"tolua_property[^%s]*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if class then\r\n  output(\"/* get function:\",self.name,\" of class \",class,\" */\")\r\n else\r\n  output(\"/* get function:\",self.name,\" */\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "output(\"/* get function:\",self.name,\" of class \",class,\" */\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "output(\"/* get function:\",self.name,\" */\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "self.cgetname = self:cfuncname(\"tolua_get\")",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "output(\"#ifndef TOLUA_DISABLE_\"..self.cgetname)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "output(\"\\nstatic int\",self.cgetname,\"(lua_State* tolua_S)\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "output(\"{\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local _,_,static = strfind(self.mod,'^%s*(static)')",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if class and static==nil then\r\n  output(' ',self.parent.type,'*','self = ')\r\n  output('(',self.parent.type,'*) ')\r\n  local to_func = get_to_function(self.parent.type)\r\n  output(to_func,'(tolua_S,1,0);')\r\n elseif static then\r\n  _,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')\r\n end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "output(' ',self.parent.type,'*','self = ')",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "output('(',self.parent.type,'*) ')",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "local to_func = get_to_function(self.parent.type)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "output(to_func,'(tolua_S,1,0);')",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "_,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if class and static==nil then\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n  output('  if (!self) tolua_error(tolua_S,\"'..output_error_hook(\"invalid \\'self\\' in accessing variable \\'%s\\'\", self.name)..'\",NULL);');\r\n\t\toutput('#endif\\n')\r\n end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "output('#ifndef TOLUA_RELEASE\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "output('  if (!self) tolua_error(tolua_S,\"'..output_error_hook(\"invalid \\'self\\' in accessing variable \\'%s\\'\", self.name)..'\",NULL);')",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "output('#endif\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if string.find(self.mod, 'tolua_inherits') then\r\n\tlocal push_func = get_push_function(self.type)\r\n \toutput('#ifdef __cplusplus\\n')\r\n\toutput('  ',push_func,'(tolua_S,(void*)static_cast<'..self.type..'*>(self), \"',self.type,'\");')\r\n\toutput('#else\\n')\r\n\toutput('  ',push_func,'(tolua_S,(void*)(('..self.type..'*)self), \"',self.type,'\");')\r\n\toutput('#endif\\n')\r\n else\r\n\tlocal t,ct = isbasic(self.type)\r\n\tif t then\r\n\t\toutput('  tolua_push'..t..'(tolua_S,(',ct,')'..self:getvalue(class,static,prop_get)..');')\r\n\telse\r\n\t\tlocal push_func = get_push_function(self.type)\r\n\t\tt = self.type\r\n\t\tif self.ptr == '&' or self.ptr == '' then\r\n\t\t\toutput('  ',push_func,'(tolua_S,(void*)&'..self:getvalue(class,static,prop_get)..',\"',t,'\");')\r\n\t\telse\r\n\t\t\toutput('  ',push_func,'(tolua_S,(void*)'..self:getvalue(class,static,prop_get)..',\"',t,'\");')\r\n\t\tend\r\n\tend\r\n end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "local push_func = get_push_function(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "output('#ifdef __cplusplus\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "output('  ',push_func,'(tolua_S,(void*)static_cast<'..self.type..'*>(self), \"',self.type,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "output('#else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "output('  ',push_func,'(tolua_S,(void*)(('..self.type..'*)self), \"',self.type,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local t,ct = isbasic(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if t then\r\n\t\toutput('  tolua_push'..t..'(tolua_S,(',ct,')'..self:getvalue(class,static,prop_get)..');')\r\n\telse\r\n\t\tlocal push_func = get_push_function(self.type)\r\n\t\tt = self.type\r\n\t\tif self.ptr == '&' or self.ptr == '' then\r\n\t\t\toutput('  ',push_func,'(tolua_S,(void*)&'..self:getvalue(class,static,prop_get)..',\"',t,'\");')\r\n\t\telse\r\n\t\t\toutput('  ',push_func,'(tolua_S,(void*)'..self:getvalue(class,static,prop_get)..',\"',t,'\");')\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "output('  tolua_push'..t..'(tolua_S,(',ct,')'..self:getvalue(class,static,prop_get)..');')",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "t = self.type",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if self.ptr == '&' or self.ptr == '' then\r\n\t\t\toutput('  ',push_func,'(tolua_S,(void*)&'..self:getvalue(class,static,prop_get)..',\"',t,'\");')\r\n\t\telse\r\n\t\t\toutput('  ',push_func,'(tolua_S,(void*)'..self:getvalue(class,static,prop_get)..',\"',t,'\");')\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "output('  ',push_func,'(tolua_S,(void*)&'..self:getvalue(class,static,prop_get)..',\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "output('  ',push_func,'(tolua_S,(void*)'..self:getvalue(class,static,prop_get)..',\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "output(' return 1;')",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "output('}')",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "output('#endif //#ifndef TOLUA_DISABLE\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "output('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "if not (strfind(self.type,'const%s+') or string.find(self.mod, 'tolua_readonly') or string.find(self.mod, 'tolua_inherits'))  then\r\n  if class then\r\n   output(\"/* set function:\",self.name,\" of class \",class,\" */\")\r\n  else\r\n   output(\"/* set function:\",self.name,\" */\")\r\n  end\r\n  self.csetname = self:cfuncname(\"tolua_set\")\r\n  output(\"#ifndef TOLUA_DISABLE_\"..self.csetname)\r\n  output(\"\\nstatic int\",self.csetname,\"(lua_State* tolua_S)\")\r\n  output(\"{\")\r\n\r\n  -- declare self, if the case\r\n  if class and static==nil then\r\n   output(' ',self.parent.type,'*','self = ')\r\n   output('(',self.parent.type,'*) ')\r\n   local to_func = get_to_function(self.parent.type)\r\n   output(to_func,'(tolua_S,1,0);')\r\n   -- check self value\r\n\t\tend\r\n  -- check types\r\n\t\toutput('#ifndef TOLUA_RELEASE\\n')\r\n\t\toutput('  tolua_Error tolua_err;')\r\n  if class and static==nil then\r\n   output('  if (!self) tolua_error(tolua_S,\"'..output_error_hook(\"invalid \\'self\\' in accessing variable \\'%s\\'\", self.name)..'\",NULL);');\r\n  elseif static then\r\n   _,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')\r\n  end\r\n\r\n  -- check variable type\r\n  output('  if ('..self:outchecktype(2)..')')\r\n  output('   tolua_error(tolua_S,\"#vinvalid type in variable assignment.\",&tolua_err);')\r\n\t\toutput('#endif\\n')\r\n\r\n  -- assign value\r\n\t\tlocal def = 0\r\n\t\tif self.def ~= '' then def = self.def end\r\n\t\tif self.type == 'char*' and self.dim ~= '' then -- is string\r\n\t\t\toutput(' strncpy((char*)')\r\n\t\t\tif class and static then\r\n\t\t\t\toutput(self.parent.type..'::'..self.name)\r\n\t\t\telseif class then\r\n\t\t\t\toutput('self->'..self.name)\r\n\t\t\telse\r\n\t\t\t\toutput(self.name)\r\n\t\t\tend\r\n\t\t\toutput(',(const char*)tolua_tostring(tolua_S,2,',def,'),',self.dim,'-1);')\r\n\t\telse\r\n\t\t\tlocal ptr = ''\r\n\t\t\tif self.ptr~='' then ptr = '*' end\r\n\t\t\toutput(' ')\r\n\t\t\tlocal name = prop_set or self.name\r\n\t\t\tif class and static then\r\n\t\t\t\toutput(self.parent.type..'::'..name)\r\n\t\t\telseif class then\r\n\t\t\t\toutput('self->'..name)\r\n\t\t\telse\r\n\t\t\t\toutput(name)\r\n\t\t\tend\r\n\t\t\tlocal t = isbasic(self.type)\r\n\t\t\tif prop_set then\r\n\t\t\t\toutput('(')\r\n\t\t\telse\r\n\t\t\t\toutput(' = ')\r\n\t\t\tend\r\n\t\t\tif not t and ptr=='' then output('*') end\r\n\t\t\toutput('((',self.mod,self.type)\r\n\t\t\tif not t then\r\n\t\t\t\toutput('*')\r\n\t\t\tend\r\n\t\t\toutput(') ')\r\n\t\t\tif t then\r\n\t\t\t\tif isenum(self.type) then\r\n\t\t\t\t\toutput('(int) ')\r\n\t\t\t\tend\r\n\t\t\t\toutput('tolua_to'..t,'(tolua_S,2,',def,'))')\r\n\t\t\telse\r\n\t\t\t\tlocal to_func = get_to_function(self.type)\r\n\t\t\t\toutput(to_func,'(tolua_S,2,',def,'))')\r\n\t\t\tend\r\n\t\t\tif prop_set then\r\n\t\t\t\toutput(\")\")\r\n\t\t\tend\r\n\t\t\toutput(\";\")\r\n\t\tend\r\n  output(' return 0;')\r\n  output('}')\r\n  output('#endif //#ifndef TOLUA_DISABLE\\n')\r\n  output('\\n')\r\n end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "if class then\r\n   output(\"/* set function:\",self.name,\" of class \",class,\" */\")\r\n  else\r\n   output(\"/* set function:\",self.name,\" */\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "output(\"/* set function:\",self.name,\" of class \",class,\" */\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "output(\"/* set function:\",self.name,\" */\")",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "self.csetname = self:cfuncname(\"tolua_set\")",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "output(\"#ifndef TOLUA_DISABLE_\"..self.csetname)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "output(\"\\nstatic int\",self.csetname,\"(lua_State* tolua_S)\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "if class and static==nil then\r\n   output(' ',self.parent.type,'*','self = ')\r\n   output('(',self.parent.type,'*) ')\r\n   local to_func = get_to_function(self.parent.type)\r\n   output(to_func,'(tolua_S,1,0);')\r\n   -- check self value\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "output('  tolua_Error tolua_err;')",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "if class and static==nil then\r\n   output('  if (!self) tolua_error(tolua_S,\"'..output_error_hook(\"invalid \\'self\\' in accessing variable \\'%s\\'\", self.name)..'\",NULL);');\r\n  elseif static then\r\n   _,_,self.mod = strfind(self.mod,'^%s*static%s%s*(.*)')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "output('  if ('..self:outchecktype(2)..')')",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "output('   tolua_error(tolua_S,\"#vinvalid type in variable assignment.\",&tolua_err);')",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "local def = 0",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if self.def ~= '' then def = self.def end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "def = self.def",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "if self.type == 'char*' and self.dim ~= '' then -- is string\r\n\t\t\toutput(' strncpy((char*)')\r\n\t\t\tif class and static then\r\n\t\t\t\toutput(self.parent.type..'::'..self.name)\r\n\t\t\telseif class then\r\n\t\t\t\toutput('self->'..self.name)\r\n\t\t\telse\r\n\t\t\t\toutput(self.name)\r\n\t\t\tend\r\n\t\t\toutput(',(const char*)tolua_tostring(tolua_S,2,',def,'),',self.dim,'-1);')\r\n\t\telse\r\n\t\t\tlocal ptr = ''\r\n\t\t\tif self.ptr~='' then ptr = '*' end\r\n\t\t\toutput(' ')\r\n\t\t\tlocal name = prop_set or self.name\r\n\t\t\tif class and static then\r\n\t\t\t\toutput(self.parent.type..'::'..name)\r\n\t\t\telseif class then\r\n\t\t\t\toutput('self->'..name)\r\n\t\t\telse\r\n\t\t\t\toutput(name)\r\n\t\t\tend\r\n\t\t\tlocal t = isbasic(self.type)\r\n\t\t\tif prop_set then\r\n\t\t\t\toutput('(')\r\n\t\t\telse\r\n\t\t\t\toutput(' = ')\r\n\t\t\tend\r\n\t\t\tif not t and ptr=='' then output('*') end\r\n\t\t\toutput('((',self.mod,self.type)\r\n\t\t\tif not t then\r\n\t\t\t\toutput('*')\r\n\t\t\tend\r\n\t\t\toutput(') ')\r\n\t\t\tif t then\r\n\t\t\t\tif isenum(self.type) then\r\n\t\t\t\t\toutput('(int) ')\r\n\t\t\t\tend\r\n\t\t\t\toutput('tolua_to'..t,'(tolua_S,2,',def,'))')\r\n\t\t\telse\r\n\t\t\t\tlocal to_func = get_to_function(self.type)\r\n\t\t\t\toutput(to_func,'(tolua_S,2,',def,'))')\r\n\t\t\tend\r\n\t\t\tif prop_set then\r\n\t\t\t\toutput(\")\")\r\n\t\t\tend\r\n\t\t\toutput(\";\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "output(' strncpy((char*)')",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "if class and static then\r\n\t\t\t\toutput(self.parent.type..'::'..self.name)\r\n\t\t\telseif class then\r\n\t\t\t\toutput('self->'..self.name)\r\n\t\t\telse\r\n\t\t\t\toutput(self.name)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "output(self.parent.type..'::'..self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "output('self->'..self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "output(self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "output(',(const char*)tolua_tostring(tolua_S,2,',def,'),',self.dim,'-1);')",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "local ptr = ''",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "if self.ptr~='' then ptr = '*' end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "ptr = '*'",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "output(' ')",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "local name = prop_set or self.name",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "if class and static then\r\n\t\t\t\toutput(self.parent.type..'::'..name)\r\n\t\t\telseif class then\r\n\t\t\t\toutput('self->'..name)\r\n\t\t\telse\r\n\t\t\t\toutput(name)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "output(self.parent.type..'::'..name)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "output('self->'..name)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "output(name)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "local t = isbasic(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if prop_set then\r\n\t\t\t\toutput('(')\r\n\t\t\telse\r\n\t\t\t\toutput(' = ')\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "output('(')",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "output(' = ')",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "if not t and ptr=='' then output('*') end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "output('*')",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "output('((',self.mod,self.type)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "if not t then\r\n\t\t\t\toutput('*')\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "output(') ')",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "if t then\r\n\t\t\t\tif isenum(self.type) then\r\n\t\t\t\t\toutput('(int) ')\r\n\t\t\t\tend\r\n\t\t\t\toutput('tolua_to'..t,'(tolua_S,2,',def,'))')\r\n\t\t\telse\r\n\t\t\t\tlocal to_func = get_to_function(self.type)\r\n\t\t\t\toutput(to_func,'(tolua_S,2,',def,'))')\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "if isenum(self.type) then\r\n\t\t\t\t\toutput('(int) ')\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "output('(int) ')",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "output('tolua_to'..t,'(tolua_S,2,',def,'))')",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "local to_func = get_to_function(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "output(to_func,'(tolua_S,2,',def,'))')",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "if prop_set then\r\n\t\t\t\toutput(\")\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "output(\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "output(\";\")",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "output(' return 0;')",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function classVariable:register (pre)\r\n\r\n\tif not self:check_public_access() then\r\n\t\treturn\r\n\tend\r\n pre = pre or ''\r\n local parent = self:inmodule() or self:innamespace() or self:inclass()\r\n if not parent then\r\n  if classVariable._warning==nil then\r\n   warning(\"Mapping variable to global may degrade performance\")\r\n   classVariable._warning = 1\r\n  end\r\n end\r\n if self.csetname then\r\n  output(pre..'tolua_variable(tolua_S,\"'..self.lname..'\",'..self.cgetname..','..self.csetname..');')\r\n else\r\n  output(pre..'tolua_variable(tolua_S,\"'..self.lname..'\",'..self.cgetname..',NULL);')\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "if not self:check_public_access() then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "pre = pre or ''",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "local parent = self:inmodule() or self:innamespace() or self:inclass()",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "if not parent then\r\n  if classVariable._warning==nil then\r\n   warning(\"Mapping variable to global may degrade performance\")\r\n   classVariable._warning = 1\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "if classVariable._warning==nil then\r\n   warning(\"Mapping variable to global may degrade performance\")\r\n   classVariable._warning = 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "warning(\"Mapping variable to global may degrade performance\")",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "classVariable._warning = 1",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "if self.csetname then\r\n  output(pre..'tolua_variable(tolua_S,\"'..self.lname..'\",'..self.cgetname..','..self.csetname..');')\r\n else\r\n  output(pre..'tolua_variable(tolua_S,\"'..self.lname..'\",'..self.cgetname..',NULL);')\r\n end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "output(pre..'tolua_variable(tolua_S,\"'..self.lname..'\",'..self.cgetname..','..self.csetname..');')",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "output(pre..'tolua_variable(tolua_S,\"'..self.lname..'\",'..self.cgetname..',NULL);')",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function _Variable (t)\r\n setmetatable(t,classVariable)\r\n append(t)\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "setmetatable(t,classVariable)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "append(t)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function Variable (s)\r\n return _Variable (Declaration(s,'var'))\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "",
    "type": "function container"
  }, {
    "id": 157,
    "text": "isbasic",
    "type": "global function"
  }, {
    "id": 158,
    "text": "get_property_methods",
    "type": "global function"
  }, {
    "id": 159,
    "text": "print",
    "type": "global function"
  }, {
    "id": 160,
    "text": "Declaration",
    "type": "global function"
  }, {
    "id": 161,
    "text": "get_push_function",
    "type": "global function"
  }, {
    "id": 162,
    "text": "clean_template",
    "type": "global function"
  }, {
    "id": 163,
    "text": "warning",
    "type": "global function"
  }, {
    "id": 164,
    "text": "get_to_function",
    "type": "global function"
  }, {
    "id": 165,
    "text": "find",
    "type": "global function"
  }, {
    "id": 166,
    "text": "output_error_hook",
    "type": "global function"
  }, {
    "id": 167,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 168,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 169,
    "text": "output",
    "type": "global function"
  }, {
    "id": 170,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 171,
    "text": "isenum",
    "type": "global function"
  }, {
    "id": 172,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 173,
    "text": "append",
    "type": "global function"
  }, {
    "id": 174,
    "text": "",
    "type": "variable container"
  }, {
    "id": 175,
    "text": "",
    "type": "require container"
  }, {
    "id": 176,
    "text": "",
    "type": "global variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  }, {
    "id": 178,
    "text": "",
    "type": "global variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  } ]
}