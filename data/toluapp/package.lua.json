{
  "_filename": "package.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/toluapp/src/bin/lua/package.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 9,
    "label": "has",
    "to": 17
  }, {
    "from": 9,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 21
  }, {
    "from": 9,
    "label": "has",
    "to": 22
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 20
  }, {
    "from": 23,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 24
  }, {
    "from": 9,
    "label": "has",
    "to": 25
  }, {
    "from": 9,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 28
  }, {
    "from": 9,
    "label": "has",
    "to": 29
  }, {
    "from": 9,
    "label": "has",
    "to": 30
  }, {
    "from": 9,
    "label": "has",
    "to": 31
  }, {
    "from": 9,
    "label": "has",
    "to": 32
  }, {
    "from": 9,
    "label": "has",
    "to": 33
  }, {
    "from": 9,
    "label": "has",
    "to": 34
  }, {
    "from": 9,
    "label": "has",
    "to": 35
  }, {
    "from": 9,
    "label": "has",
    "to": 36
  }, {
    "from": 9,
    "label": "has",
    "to": 36
  }, {
    "from": 9,
    "label": "has",
    "to": 37
  }, {
    "from": 9,
    "label": "has",
    "to": 38
  }, {
    "from": 9,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 45,
    "label": "has",
    "to": 54
  }, {
    "from": 45,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 58
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 45,
    "label": "has",
    "to": 58
  }, {
    "from": 45,
    "label": "has",
    "to": 72
  }, {
    "from": 45,
    "label": "has",
    "to": 73
  }, {
    "from": 45,
    "label": "has",
    "to": 66
  }, {
    "from": 45,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 45,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 45,
    "label": "has",
    "to": 70
  }, {
    "from": 45,
    "label": "has",
    "to": 58
  }, {
    "from": 45,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 82,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 4
  }, {
    "from": 82,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 7
  }, {
    "from": 82,
    "label": "has",
    "to": 94
  }, {
    "from": 82,
    "label": "has",
    "to": 95
  }, {
    "from": 82,
    "label": "has",
    "to": 96
  }, {
    "from": 82,
    "label": "has",
    "to": 97
  }, {
    "from": 82,
    "label": "has",
    "to": 98
  }, {
    "from": 82,
    "label": "has",
    "to": 99
  }, {
    "from": 82,
    "label": "has",
    "to": 100
  }, {
    "from": 82,
    "label": "has",
    "to": 101
  }, {
    "from": 82,
    "label": "has",
    "to": 102
  }, {
    "from": 82,
    "label": "has",
    "to": 103
  }, {
    "from": 82,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 46
  }, {
    "from": 105,
    "label": "has",
    "to": 47
  }, {
    "from": 105,
    "label": "has",
    "to": 48
  }, {
    "from": 105,
    "label": "has",
    "to": 49
  }, {
    "from": 105,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 15
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 121
  }, {
    "from": 110,
    "label": "has",
    "to": 15
  }, {
    "from": 110,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 126,
    "label": "has",
    "to": 131
  }, {
    "from": 123,
    "label": "has",
    "to": 132
  }, {
    "from": 123,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 123,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 123,
    "label": "has",
    "to": 140
  }, {
    "from": 123,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 142,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 142,
    "label": "has",
    "to": 15
  }, {
    "from": 142,
    "label": "has",
    "to": 150
  }, {
    "from": 142,
    "label": "has",
    "to": 149
  }, {
    "from": 142,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 151,
    "label": "has",
    "to": 155
  }, {
    "from": 151,
    "label": "has",
    "to": 156
  }, {
    "from": 142,
    "label": "has",
    "to": 15
  }, {
    "from": 142,
    "label": "has",
    "to": 15
  }, {
    "from": 142,
    "label": "has",
    "to": 15
  }, {
    "from": 123,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 15
  }, {
    "from": 123,
    "label": "has",
    "to": 160
  }, {
    "from": 123,
    "label": "has",
    "to": 161
  }, {
    "from": 123,
    "label": "has",
    "to": 162
  }, {
    "from": 123,
    "label": "has",
    "to": 163
  }, {
    "from": 123,
    "label": "has",
    "to": 164
  }, {
    "from": 123,
    "label": "has",
    "to": 165
  }, {
    "from": 123,
    "label": "has",
    "to": 103
  }, {
    "from": 123,
    "label": "has",
    "to": 15
  }, {
    "from": 123,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 170,
    "label": "has",
    "to": 178
  }, {
    "from": 167,
    "label": "has",
    "to": 179
  }, {
    "from": 167,
    "label": "has",
    "to": 180
  }, {
    "from": 167,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 167,
    "label": "has",
    "to": 183
  }, {
    "from": 167,
    "label": "has",
    "to": 15
  }, {
    "from": 167,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 14
  }, {
    "from": 185,
    "label": "has",
    "to": 15
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 20
  }, {
    "from": 187,
    "label": "has",
    "to": 15
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 20
  }, {
    "from": 189,
    "label": "has",
    "to": 15
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 27
  }, {
    "from": 191,
    "label": "has",
    "to": 15
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 15
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 15
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 15
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 43
  }, {
    "from": 199,
    "label": "has",
    "to": 15
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 143
  }, {
    "from": 203,
    "label": "has",
    "to": 144
  }, {
    "from": 203,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 203,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 203,
    "label": "has",
    "to": 15
  }, {
    "from": 203,
    "label": "has",
    "to": 150
  }, {
    "from": 203,
    "label": "has",
    "to": 149
  }, {
    "from": 203,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 151,
    "label": "has",
    "to": 155
  }, {
    "from": 151,
    "label": "has",
    "to": 156
  }, {
    "from": 203,
    "label": "has",
    "to": 15
  }, {
    "from": 203,
    "label": "has",
    "to": 15
  }, {
    "from": 203,
    "label": "has",
    "to": 15
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 159
  }, {
    "from": 205,
    "label": "has",
    "to": 15
  }, {
    "from": 167,
    "label": "calls",
    "to": 236
  }, {
    "from": 167,
    "label": "calls",
    "to": 236
  }, {
    "from": 167,
    "label": "calls",
    "to": 236
  }, {
    "from": 123,
    "label": "calls",
    "to": 227
  }, {
    "from": 123,
    "label": "calls",
    "to": 227
  }, {
    "from": 123,
    "label": "calls",
    "to": 216
  }, {
    "from": 45,
    "label": "calls",
    "to": 217
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 9,
    "label": "calls",
    "to": 229
  }, {
    "from": 123,
    "label": "calls",
    "to": 229
  }, {
    "from": 123,
    "label": "calls",
    "to": 229
  }, {
    "from": 167,
    "label": "calls",
    "to": 225
  }, {
    "from": 9,
    "label": "calls",
    "to": 230
  }, {
    "from": 9,
    "label": "calls",
    "to": 230
  }, {
    "from": 9,
    "label": "calls",
    "to": 230
  }, {
    "from": 9,
    "label": "calls",
    "to": 230
  }, {
    "from": 123,
    "label": "calls",
    "to": 243
  }, {
    "from": 2,
    "label": "calls",
    "to": 207
  }, {
    "from": 123,
    "label": "calls",
    "to": 167
  }, {
    "from": 123,
    "label": "calls",
    "to": 167
  }, {
    "from": 110,
    "label": "calls",
    "to": 233
  }, {
    "from": 9,
    "label": "calls",
    "to": 241
  }, {
    "from": 123,
    "label": "calls",
    "to": 241
  }, {
    "from": 167,
    "label": "calls",
    "to": 219
  }, {
    "from": 167,
    "label": "calls",
    "to": 237
  }, {
    "from": 45,
    "label": "calls",
    "to": 238
  }, {
    "from": 110,
    "label": "calls",
    "to": 231
  }, {
    "from": 110,
    "label": "calls",
    "to": 231
  }, {
    "from": 110,
    "label": "calls",
    "to": 231
  }, {
    "from": 123,
    "label": "calls",
    "to": 231
  }, {
    "from": 123,
    "label": "calls",
    "to": 231
  }, {
    "from": 82,
    "label": "calls",
    "to": 209
  }, {
    "from": 123,
    "label": "calls",
    "to": 209
  }, {
    "from": 123,
    "label": "calls",
    "to": 239
  }, {
    "from": 123,
    "label": "calls",
    "to": 239
  }, {
    "from": 123,
    "label": "calls",
    "to": 239
  }, {
    "from": 167,
    "label": "calls",
    "to": 239
  }, {
    "from": 123,
    "label": "calls",
    "to": 244
  }, {
    "from": 123,
    "label": "calls",
    "to": 244
  }, {
    "from": 110,
    "label": "calls",
    "to": 226
  }, {
    "from": 167,
    "label": "calls",
    "to": 215
  }, {
    "from": 167,
    "label": "calls",
    "to": 218
  }, {
    "from": 123,
    "label": "calls",
    "to": 210
  }, {
    "from": 167,
    "label": "calls",
    "to": 211
  }, {
    "from": 167,
    "label": "calls",
    "to": 211
  }, {
    "from": 123,
    "label": "calls",
    "to": 221
  }, {
    "from": 123,
    "label": "calls",
    "to": 220
  }, {
    "from": 123,
    "label": "calls",
    "to": 235
  }, {
    "from": 123,
    "label": "calls",
    "to": 228
  }, {
    "from": 123,
    "label": "calls",
    "to": 208
  }, {
    "from": 167,
    "label": "calls",
    "to": 212
  }, {
    "from": 167,
    "label": "calls",
    "to": 212
  }, {
    "from": 167,
    "label": "calls",
    "to": 212
  }, {
    "from": 167,
    "label": "calls",
    "to": 212
  }, {
    "from": 167,
    "label": "calls",
    "to": 212
  }, {
    "from": 9,
    "label": "calls",
    "to": 224
  }, {
    "from": 9,
    "label": "calls",
    "to": 224
  }, {
    "from": 9,
    "label": "calls",
    "to": 224
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 45,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 82,
    "label": "calls",
    "to": 240
  }, {
    "from": 105,
    "label": "calls",
    "to": 240
  }, {
    "from": 105,
    "label": "calls",
    "to": 240
  }, {
    "from": 105,
    "label": "calls",
    "to": 240
  }, {
    "from": 105,
    "label": "calls",
    "to": 240
  }, {
    "from": 105,
    "label": "calls",
    "to": 240
  }, {
    "from": 105,
    "label": "calls",
    "to": 240
  }, {
    "from": 105,
    "label": "calls",
    "to": 240
  }, {
    "from": 9,
    "label": "calls",
    "to": 223
  }, {
    "from": 123,
    "label": "calls",
    "to": 110
  }, {
    "from": 123,
    "label": "calls",
    "to": 110
  }, {
    "from": 206,
    "label": "calls",
    "to": 242
  }, {
    "from": 107,
    "label": "calls",
    "to": 242
  }, {
    "from": 206,
    "label": "calls",
    "to": 242
  }, {
    "from": 123,
    "label": "calls",
    "to": 107
  }, {
    "from": 167,
    "label": "calls",
    "to": 234
  }, {
    "from": 45,
    "label": "calls",
    "to": 213
  }, {
    "from": 105,
    "label": "calls",
    "to": 213
  }, {
    "from": 123,
    "label": "calls",
    "to": 214
  }, {
    "from": 123,
    "label": "calls",
    "to": 214
  }, {
    "from": 9,
    "label": "calls",
    "to": 222
  }, {
    "from": 9,
    "label": "calls",
    "to": 222
  }, {
    "from": 9,
    "label": "calls",
    "to": 222
  }, {
    "from": 9,
    "label": "calls",
    "to": 222
  }, {
    "from": 82,
    "label": "calls",
    "to": 232
  }, {
    "from": 123,
    "label": "calls",
    "to": 232
  }, {
    "from": 1,
    "label": "contains",
    "to": 206
  }, {
    "from": 206,
    "label": "declares",
    "to": 2
  }, {
    "from": 206,
    "label": "declares",
    "to": 9
  }, {
    "from": 206,
    "label": "declares",
    "to": 45
  }, {
    "from": 206,
    "label": "declares",
    "to": 82
  }, {
    "from": 206,
    "label": "declares",
    "to": 105
  }, {
    "from": 206,
    "label": "declares",
    "to": 107
  }, {
    "from": 206,
    "label": "declares",
    "to": 110
  }, {
    "from": 206,
    "label": "declares",
    "to": 123
  }, {
    "from": 206,
    "label": "declares",
    "to": 167
  }, {
    "from": 206,
    "label": "declares",
    "to": 185
  }, {
    "from": 206,
    "label": "declares",
    "to": 187
  }, {
    "from": 206,
    "label": "declares",
    "to": 189
  }, {
    "from": 206,
    "label": "declares",
    "to": 191
  }, {
    "from": 206,
    "label": "declares",
    "to": 193
  }, {
    "from": 206,
    "label": "declares",
    "to": 195
  }, {
    "from": 206,
    "label": "declares",
    "to": 197
  }, {
    "from": 206,
    "label": "declares",
    "to": 199
  }, {
    "from": 206,
    "label": "declares",
    "to": 201
  }, {
    "from": 206,
    "label": "declares",
    "to": 203
  }, {
    "from": 206,
    "label": "declares",
    "to": 205
  }, {
    "from": 1,
    "label": "contains",
    "to": 245
  }, {
    "from": 1,
    "label": "contains",
    "to": 246
  }, {
    "from": 245,
    "label": "initializes",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 245,
    "label": "initializes",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 201
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "package",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classPackage:print ()\r\n print(\"Package: \"..self.name)\r\n local i=1\r\n while self[i] do\r\n  self[i]:print(\"\",\"\")\r\n  i = i+1\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(\"Package: \"..self.name)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "while self[i] do\r\n  self[i]:print(\"\",\"\")\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 6,
    "text": "self[i]:print(\"\",\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function classPackage:preprocess ()\r\n\r\n -- avoid preprocessing embedded Lua code\r\n local L = {}\r\n self.code = gsub(self.code,\"\\n%s*%$%[\",\"\\1\") -- deal with embedded lua code\r\n self.code = gsub(self.code,\"\\n%s*%$%]\",\"\\2\")\r\n self.code = gsub(self.code,\"(%b\\1\\2)\",       function (c)\r\n                                               tinsert(L,c)\r\n                                               return \"\\n#[\"..getn(L)..\"]#\"\r\n                                              end)\r\n -- avoid preprocessing embedded C code\r\n local C = {}\r\n self.code = gsub(self.code,\"\\n%s*%$%<\",\"\\3\") -- deal with embedded C code\r\n self.code = gsub(self.code,\"\\n%s*%$%>\",\"\\4\")\r\n self.code = gsub(self.code,\"(%b\\3\\4)\",       function (c)\r\n                                               tinsert(C,c)\r\n                                               return \"\\n#<\"..getn(C)..\">#\"\r\n                                              end)\r\n -- avoid preprocessing embedded C code\r\n self.code = gsub(self.code,\"\\n%s*%$%{\",\"\\5\") -- deal with embedded C code\r\n self.code = gsub(self.code,\"\\n%s*%$%}\",\"\\6\")\r\n self.code = gsub(self.code,\"(%b\\5\\6)\",       function (c)\r\n                                               tinsert(C,c)\r\n                                               return \"\\n#<\"..getn(C)..\">#\"\r\n                                              end)\r\n\r\n --self.code = gsub(self.code,\"\\n%s*#[^d][^\\n]*\\n\", \"\\n\\n\") -- eliminate preprocessor directives that don't start with 'd'\r\n self.code = gsub(self.code,\"\\n[ \\t]*#[ \\t]*[^d%<%[]\", \"\\n//\") -- eliminate preprocessor directives that don't start with 'd'\r\n\r\n -- avoid preprocessing verbatim lines\r\n local V = {}\r\n self.code = gsub(self.code,\"\\n(%s*%$[^%[%]][^\\n]*)\",function (v)\r\n                                               tinsert(V,v)\r\n                                               return \"\\n#\"..getn(V)..\"#\"\r\n                                              end)\r\n\r\n -- perform global substitution\r\n\r\n self.code = gsub(self.code,\"(//[^\\n]*)\",\"\")     -- eliminate C++ comments\r\n self.code = gsub(self.code,\"/%*\",\"\\1\")\r\n self.code = gsub(self.code,\"%*/\",\"\\2\")\r\n self.code = gsub(self.code,\"%b\\1\\2\",\"\")\r\n self.code = gsub(self.code,\"\\1\",\"/%*\")\r\n self.code = gsub(self.code,\"\\2\",\"%*/\")\r\n self.code = gsub(self.code,\"%s*@%s*\",\"@\") -- eliminate spaces beside @\r\n self.code = gsub(self.code,\"%s?inline(%s)\",\"%1\") -- eliminate 'inline' keyword\r\n --self.code = gsub(self.code,\"%s?extern(%s)\",\"%1\") -- eliminate 'extern' keyword\r\n --self.code = gsub(self.code,\"%s?virtual(%s)\",\"%1\") -- eliminate 'virtual' keyword\r\n --self.code = gsub(self.code,\"public:\",\"\") -- eliminate 'public:' keyword\r\n self.code = gsub(self.code,\"([^%w_])void%s*%*\",\"%1_userdata \") -- substitute 'void*'\r\n self.code = gsub(self.code,\"([^%w_])void%s*%*\",\"%1_userdata \") -- substitute 'void*'\r\n self.code = gsub(self.code,\"([^%w_])char%s*%*\",\"%1_cstring \")  -- substitute 'char*'\r\n self.code = gsub(self.code,\"([^%w_])lua_State%s*%*\",\"%1_lstate \")  -- substitute 'lua_State*'\r\n\r\n -- restore embedded Lua code\r\n self.code = gsub(self.code,\"%#%[(%d+)%]%#\",function (n)\r\n                                              return L[tonumber(n)]\r\n                                            end)\r\n -- restore embedded C code\r\n self.code = gsub(self.code,\"%#%<(%d+)%>%#\",function (n)\r\n                                             return C[tonumber(n)]\r\n                                            end)\r\n -- restore verbatim lines\r\n self.code = gsub(self.code,\"%#(%d+)%#\",function (n)\r\n                                         return V[tonumber(n)]\r\n                                        end)\r\n\r\n self.code = string.gsub(self.code, \"\\n%s*%$([^\\n]+)\", function (l)\r\n\t\t\t\t\t\t\t\t\t\t\tVerbatim(l..\"\\n\")\r\n\t\t\t\t\t\t\t\t\t\t\treturn \"\\n\"\r\n\t\t\t\t\t\t\t\t\t\t  end)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local L = {}",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "self.code = gsub(self.code,\"\\n%s*%$%[\",\"\\1\")",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "self.code = gsub(self.code,\"\\n%s*%$%]\",\"\\2\")",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "self.code = gsub(self.code,\"(%b\\1\\2)\",       function (c)\r\n                                               tinsert(L,c)\r\n                                               return \"\\n#[\"..getn(L)..\"]#\"\r\n                                              end)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "tinsert(L,c)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "local C = {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "self.code = gsub(self.code,\"\\n%s*%$%<\",\"\\3\")",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "self.code = gsub(self.code,\"\\n%s*%$%>\",\"\\4\")",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "self.code = gsub(self.code,\"(%b\\3\\4)\",       function (c)\r\n                                               tinsert(C,c)\r\n                                               return \"\\n#<\"..getn(C)..\">#\"\r\n                                              end)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "tinsert(C,c)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "self.code = gsub(self.code,\"\\n%s*%$%{\",\"\\5\")",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "self.code = gsub(self.code,\"\\n%s*%$%}\",\"\\6\")",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "self.code = gsub(self.code,\"(%b\\5\\6)\",       function (c)\r\n                                               tinsert(C,c)\r\n                                               return \"\\n#<\"..getn(C)..\">#\"\r\n                                              end)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "self.code = gsub(self.code,\"\\n[ \\t]*#[ \\t]*[^d%<%[]\", \"\\n//\")",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local V = {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "self.code = gsub(self.code,\"\\n(%s*%$[^%[%]][^\\n]*)\",function (v)\r\n                                               tinsert(V,v)\r\n                                               return \"\\n#\"..getn(V)..\"#\"\r\n                                              end)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "tinsert(V,v)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "self.code = gsub(self.code,\"(//[^\\n]*)\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "self.code = gsub(self.code,\"/%*\",\"\\1\")",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "self.code = gsub(self.code,\"%*/\",\"\\2\")",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "self.code = gsub(self.code,\"%b\\1\\2\",\"\")",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "self.code = gsub(self.code,\"\\1\",\"/%*\")",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "self.code = gsub(self.code,\"\\2\",\"%*/\")",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "self.code = gsub(self.code,\"%s*@%s*\",\"@\")",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "self.code = gsub(self.code,\"%s?inline(%s)\",\"%1\")",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "self.code = gsub(self.code,\"([^%w_])void%s*%*\",\"%1_userdata \")",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "self.code = gsub(self.code,\"([^%w_])char%s*%*\",\"%1_cstring \")",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "self.code = gsub(self.code,\"([^%w_])lua_State%s*%*\",\"%1_lstate \")",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "self.code = gsub(self.code,\"%#%[(%d+)%]%#\",function (n)\r\n                                              return L[tonumber(n)]\r\n                                            end)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "self.code = gsub(self.code,\"%#%<(%d+)%>%#\",function (n)\r\n                                             return C[tonumber(n)]\r\n                                            end)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "self.code = gsub(self.code,\"%#(%d+)%#\",function (n)\r\n                                         return V[tonumber(n)]\r\n                                        end)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "self.code = string.gsub(self.code, \"\\n%s*%$([^\\n]+)\", function (l)\r\n\t\t\t\t\t\t\t\t\t\t\tVerbatim(l..\"\\n\")\r\n\t\t\t\t\t\t\t\t\t\t\treturn \"\\n\"\r\n\t\t\t\t\t\t\t\t\t\t  end)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "Verbatim(l..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function classPackage:preamble ()\r\n output('/*\\n')\r\n output('** Lua binding: '..self.name..'\\n')\r\n output('** Generated automatically by '..TOLUA_VERSION..' on '..date()..'.\\n')\r\n output('*/\\n\\n')\r\n\r\n\toutput('#ifndef __cplusplus\\n')\r\n\toutput('#include \"stdlib.h\"\\n')\r\n\toutput('#endif\\n')\r\n\toutput('#include \"string.h\"\\n\\n')\r\n output('#include \"tolua++.h\"\\n\\n')\r\n\r\n if not flags.h then\r\n  output('/* Exported function */')\r\n  output('TOLUA_API int  tolua_'..self.name..'_open (lua_State* tolua_S);')\r\n  output('\\n')\r\n end\r\n\r\n local i=1\r\n while self[i] do\r\n  self[i]:preamble()\r\n  i = i+1\r\n end\r\n\r\n\tif self:requirecollection(_collect) then\r\n\t\toutput('\\n')\r\n\t\toutput('/* function to release collected object via destructor */')\r\n\t\toutput('#ifdef __cplusplus\\n')\r\n\t\tfor i,v in pairs(_collect) do\r\n\t\t output('\\nstatic int '..v..' (lua_State* tolua_S)')\r\n\t\t\toutput('{')\r\n\t\t\toutput(' '..i..'* self = ('..i..'*) tolua_tousertype(tolua_S,1,0);')\r\n\t\t\toutput('\tMtolua_delete(self);')\r\n\t\t\toutput('\treturn 0;')\r\n\t\t\toutput('}')\r\n\t\tend\r\n\t\toutput('#endif\\n\\n')\r\n\tend\r\n\r\n output('\\n')\r\n output('/* function to register type */')\r\n output('static void tolua_reg_types (lua_State* tolua_S)')\r\n output('{')\r\n\r\n\tif flags.t then\r\n\t\toutput(\"#ifndef Mtolua_typeid\\n#define Mtolua_typeid(L,TI,T)\\n#endif\\n\")\r\n\tend\r\n\tforeach(_usertype,function(n,v)\r\n\t\tif (not _global_classes[v]) or _global_classes[v]:check_public_access() then\r\n\t\t\toutput(' tolua_usertype(tolua_S,\"',v,'\");')\r\n\t\t\tif flags.t then\r\n\t\t\t\toutput(' Mtolua_typeid(tolua_S,typeid(',v,'), \"',v,'\");')\r\n\t\t\tend\r\n\t\tend\r\n\t end)\r\n output('}')\r\n output('\\n')\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "output('/*\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "output('** Lua binding: '..self.name..'\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "output('** Generated automatically by '..TOLUA_VERSION..' on '..date()..'.\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "output('*/\\n\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "output('#ifndef __cplusplus\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "output('#include \"stdlib.h\"\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "output('#endif\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "output('#include \"string.h\"\\n\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "output('#include \"tolua++.h\"\\n\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if not flags.h then\r\n  output('/* Exported function */')\r\n  output('TOLUA_API int  tolua_'..self.name..'_open (lua_State* tolua_S);')\r\n  output('\\n')\r\n end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "output('/* Exported function */')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "output('TOLUA_API int  tolua_'..self.name..'_open (lua_State* tolua_S);')",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "output('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "while self[i] do\r\n  self[i]:preamble()\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 60,
    "text": "self[i]:preamble()",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "if self:requirecollection(_collect) then\r\n\t\toutput('\\n')\r\n\t\toutput('/* function to release collected object via destructor */')\r\n\t\toutput('#ifdef __cplusplus\\n')\r\n\t\tfor i,v in pairs(_collect) do\r\n\t\t output('\\nstatic int '..v..' (lua_State* tolua_S)')\r\n\t\t\toutput('{')\r\n\t\t\toutput(' '..i..'* self = ('..i..'*) tolua_tousertype(tolua_S,1,0);')\r\n\t\t\toutput('\tMtolua_delete(self);')\r\n\t\t\toutput('\treturn 0;')\r\n\t\t\toutput('}')\r\n\t\tend\r\n\t\toutput('#endif\\n\\n')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "output('/* function to release collected object via destructor */')",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "output('#ifdef __cplusplus\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "for i,v in pairs(_collect) do\r\n\t\t output('\\nstatic int '..v..' (lua_State* tolua_S)')\r\n\t\t\toutput('{')\r\n\t\t\toutput(' '..i..'* self = ('..i..'*) tolua_tousertype(tolua_S,1,0);')\r\n\t\t\toutput('\tMtolua_delete(self);')\r\n\t\t\toutput('\treturn 0;')\r\n\t\t\toutput('}')\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 65,
    "text": "output('\\nstatic int '..v..' (lua_State* tolua_S)')",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "output('{')",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "output(' '..i..'* self = ('..i..'*) tolua_tousertype(tolua_S,1,0);')",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "output('\tMtolua_delete(self);')",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "output('\treturn 0;')",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "output('}')",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "output('#endif\\n\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "output('/* function to register type */')",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "output('static void tolua_reg_types (lua_State* tolua_S)')",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if flags.t then\r\n\t\toutput(\"#ifndef Mtolua_typeid\\n#define Mtolua_typeid(L,TI,T)\\n#endif\\n\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "output(\"#ifndef Mtolua_typeid\\n#define Mtolua_typeid(L,TI,T)\\n#endif\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "foreach(_usertype,function(n,v)\r\n\t\tif (not _global_classes[v]) or _global_classes[v]:check_public_access() then\r\n\t\t\toutput(' tolua_usertype(tolua_S,\"',v,'\");')\r\n\t\t\tif flags.t then\r\n\t\t\t\toutput(' Mtolua_typeid(tolua_S,typeid(',v,'), \"',v,'\");')\r\n\t\t\tend\r\n\t\tend\r\n\t end)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "if (not _global_classes[v]) or _global_classes[v]:check_public_access() then\r\n\t\t\toutput(' tolua_usertype(tolua_S,\"',v,'\");')\r\n\t\t\tif flags.t then\r\n\t\t\t\toutput(' Mtolua_typeid(tolua_S,typeid(',v,'), \"',v,'\");')\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "output(' tolua_usertype(tolua_S,\"',v,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "if flags.t then\r\n\t\t\t\toutput(' Mtolua_typeid(tolua_S,typeid(',v,'), \"',v,'\");')\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "output(' Mtolua_typeid(tolua_S,typeid(',v,'), \"',v,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function classPackage:register (pre)\r\n pre = pre or ''\r\n push(self)\r\n output(pre..\"/* Open function */\")\r\n output(pre..\"TOLUA_API int tolua_\"..self.name..\"_open (lua_State* tolua_S)\")\r\n output(pre..\"{\")\r\n output(pre..\" tolua_open(tolua_S);\")\r\n output(pre..\" tolua_reg_types(tolua_S);\")\r\n output(pre..\" tolua_module(tolua_S,NULL,\",self:hasvar(),\");\")\r\n output(pre..\" tolua_beginmodule(tolua_S,NULL);\")\r\n local i=1\r\n while self[i] do\r\n  self[i]:register(pre..\"  \")\r\n  i = i+1\r\n end\r\n output(pre..\" tolua_endmodule(tolua_S);\")\r\n output(pre..\" return 1;\")\r\n output(pre..\"}\")\r\n\r\n output(\"\\n\\n\")\r\n output(\"#if defined(LUA_VERSION_NUM) && LUA_VERSION_NUM >= 501\\n\");\r\n output(pre..\"TOLUA_API int luaopen_\"..self.name..\" (lua_State* tolua_S) {\")\r\n output(pre..\" return tolua_\"..self.name..\"_open(tolua_S);\")\r\n output(pre..\"};\")\r\n output(\"#endif\\n\\n\")\r\n\r\n\tpop()\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "pre = pre or ''",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "push(self)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "output(pre..\"/* Open function */\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "output(pre..\"TOLUA_API int tolua_\"..self.name..\"_open (lua_State* tolua_S)\")",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "output(pre..\"{\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "output(pre..\" tolua_open(tolua_S);\")",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "output(pre..\" tolua_reg_types(tolua_S);\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "output(pre..\" tolua_module(tolua_S,NULL,\",self:hasvar(),\");\")",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "output(pre..\" tolua_beginmodule(tolua_S,NULL);\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "while self[i] do\r\n  self[i]:register(pre..\"  \")\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 93,
    "text": "self[i]:register(pre..\"  \")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "output(pre..\" tolua_endmodule(tolua_S);\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "output(pre..\" return 1;\")",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "output(pre..\"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "output(\"\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "output(\"#if defined(LUA_VERSION_NUM) && LUA_VERSION_NUM >= 501\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "output(pre..\"TOLUA_API int luaopen_\"..self.name..\" (lua_State* tolua_S) {\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "output(pre..\" return tolua_\"..self.name..\"_open(tolua_S);\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "output(pre..\"};\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "output(\"#endif\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "pop()",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function classPackage:header ()\r\n output('/*\\n') output('** Lua binding: '..self.name..'\\n')\r\n output('** Generated automatically by '..TOLUA_VERSION..' on '..date()..'.\\n')\r\n output('*/\\n\\n')\r\n\r\n if not flags.h then\r\n  output('/* Exported function */')\r\n  output('TOLUA_API int  tolua_'..self.name..'_open (lua_State* tolua_S);')\r\n  output('\\n')\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function _Package (self)\r\n setmetatable(self,classPackage)\r\n return self\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "setmetatable(self,classPackage)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function extract_code(fn,s)\r\n\tlocal code = '\\n$#include \"'..fn..'\"\\n'\r\n\ts= \"\\n\" .. s .. \"\\n\" -- add blank lines as sentinels\r\n\tlocal _,e,c,t = strfind(s, \"\\n([^\\n]-)[Tt][Oo][Ll][Uu][Aa]_([^%s]*)[^\\n]*\\n\")\r\n\twhile e do\r\n\t\tt = strlower(t)\r\n\t\tif t == \"begin\" then\r\n\t\t\t_,e,c = strfind(s,\"(.-)\\n[^\\n]*[Tt][Oo][Ll][Uu][Aa]_[Ee][Nn][Dd][^\\n]*\\n\",e)\r\n\t\t\tif not e then\r\n\t\t\t tolua_error(\"Unbalanced 'tolua_begin' directive in header file\")\r\n\t\t\tend\r\n\t\tend\r\n\t\tcode = code .. c .. \"\\n\"\r\n\t _,e,c,t = strfind(s, \"\\n([^\\n]-)[Tt][Oo][Ll][Uu][Aa]_([^%s]*)[^\\n]*\\n\",e)\r\n\tend\r\n\treturn code\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local code = '\\n$#include \"'..fn..'\"\\n'",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "s= \"\\n\" .. s .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "local _,e,c,t = strfind(s, \"\\n([^\\n]-)[Tt][Oo][Ll][Uu][Aa]_([^%s]*)[^\\n]*\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "while e do\r\n\t\tt = strlower(t)\r\n\t\tif t == \"begin\" then\r\n\t\t\t_,e,c = strfind(s,\"(.-)\\n[^\\n]*[Tt][Oo][Ll][Uu][Aa]_[Ee][Nn][Dd][^\\n]*\\n\",e)\r\n\t\t\tif not e then\r\n\t\t\t tolua_error(\"Unbalanced 'tolua_begin' directive in header file\")\r\n\t\t\tend\r\n\t\tend\r\n\t\tcode = code .. c .. \"\\n\"\r\n\t _,e,c,t = strfind(s, \"\\n([^\\n]-)[Tt][Oo][Ll][Uu][Aa]_([^%s]*)[^\\n]*\\n\",e)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 115,
    "text": "t = strlower(t)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "if t == \"begin\" then\r\n\t\t\t_,e,c = strfind(s,\"(.-)\\n[^\\n]*[Tt][Oo][Ll][Uu][Aa]_[Ee][Nn][Dd][^\\n]*\\n\",e)\r\n\t\t\tif not e then\r\n\t\t\t tolua_error(\"Unbalanced 'tolua_begin' directive in header file\")\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "_,e,c = strfind(s,\"(.-)\\n[^\\n]*[Tt][Oo][Ll][Uu][Aa]_[Ee][Nn][Dd][^\\n]*\\n\",e)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "if not e then\r\n\t\t\t tolua_error(\"Unbalanced 'tolua_begin' directive in header file\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "tolua_error(\"Unbalanced 'tolua_begin' directive in header file\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "code = code .. c .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "_,e,c,t = strfind(s, \"\\n([^\\n]-)[Tt][Oo][Ll][Uu][Aa]_([^%s]*)[^\\n]*\\n\",e)",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function Package (name,fn)\r\n local ext = \"pkg\"\r\n\r\n -- open input file, if any\r\n local st,msg\r\n if fn then\r\n  st, msg = readfrom(flags.f)\r\n  if not st then\r\n   error('#'..msg)\r\n  end\r\n  local _; _, _, ext = strfind(fn,\".*%.(.*)$\")\r\n end\r\n local code\r\n if ext == 'pkg' then\r\n  code = prep(st)\r\n else\r\n  code = \"\\n\" .. read('*a')\r\n  if ext == 'h' or ext == 'hpp' then\r\n   code = extract_code(fn,code)\r\n  end\r\n end\r\n\r\n -- close file\r\n if fn then\r\n  readfrom()\r\n end\r\n\r\n -- deal with include directive\r\n local nsubst\r\n repeat\r\n  code,nsubst = gsub(code,'\\n%s*%$(.)file%s*\"(.-)\"([^\\n]*)\\n',\r\n\t\tfunction (kind,fn,extra)\r\n\t\t\tlocal _, _, ext = strfind(fn,\".*%.(.*)$\")\r\n\t\t\tlocal fp,msg = openfile(fn,'r')\r\n\t\t\tif not fp then\r\n\t\t\t\terror('#'..msg..': '..fn)\r\n\t\t\tend\r\n\t\t\tif kind == 'p' then\r\n\t\t\t\tlocal s = prep(fp)\r\n\t\t\t\tclosefile(fp)\r\n\t\t\t\treturn s\r\n\t\t\tend\r\n\t\t\tlocal s = read(fp,'*a')\r\n\t\t\tclosefile(fp)\r\n\t\t\tif kind == 'c' or kind == 'h' then\r\n\t\t\t\treturn extract_code(fn,s)\r\n\t\t\telseif kind == 'l' then\r\n\t\t\t\treturn \"\\n$[--##\"..fn..\"\\n\" .. s .. \"\\n$]\\n\"\r\n\t\t\telseif kind == 'i' then\r\n\t\t\t\tlocal t = {code=s}\r\n\t\t\t\textra = string.gsub(extra, \"^%s*,%s*\", \"\")\r\n\t\t\t\tlocal pars = split_c_tokens(extra, \",\")\r\n\t\t\t\tinclude_file_hook(t, fn, unpack(pars))\r\n\t\t\t\treturn \"\\n\\n\" .. t.code\r\n\t\t\telse\r\n\t\t\t\terror('#Invalid include directive (use $cfile, $pfile, $lfile or $ifile)')\r\n\t\t\tend\r\n\t\tend)\r\n until nsubst==0\r\n\r\n -- deal with renaming directive\r\n repeat -- I don't know why this is necesary\r\n\tcode,nsubst = gsub(code,'\\n%s*%$renaming%s*(.-)%s*\\n', function (r) appendrenaming(r) return \"\\n\" end)\r\n until nsubst == 0\r\n\r\n local t = _Package(_Container{name=name, code=code})\r\n push(t)\r\n preprocess_hook(t)\r\n t:preprocess()\r\n preparse_hook(t)\r\n t:parse(t.code)\r\n pop()\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "local ext = \"pkg\"",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local st,msg",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if fn then\r\n  st, msg = readfrom(flags.f)\r\n  if not st then\r\n   error('#'..msg)\r\n  end\r\n  local _; _, _, ext = strfind(fn,\".*%.(.*)$\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "st, msg = readfrom(flags.f)",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "if not st then\r\n   error('#'..msg)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "error('#'..msg)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local _",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "_, _, ext = strfind(fn,\".*%.(.*)$\")",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "local code",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "if ext == 'pkg' then\r\n  code = prep(st)\r\n else\r\n  code = \"\\n\" .. read('*a')\r\n  if ext == 'h' or ext == 'hpp' then\r\n   code = extract_code(fn,code)\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "code = prep(st)",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "code = \"\\n\" .. read('*a')",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "if ext == 'h' or ext == 'hpp' then\r\n   code = extract_code(fn,code)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "code = extract_code(fn,code)",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "if fn then\r\n  readfrom()\r\n end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "readfrom()",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "local nsubst",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "repeat\r\n  code,nsubst = gsub(code,'\\n%s*%$(.)file%s*\"(.-)\"([^\\n]*)\\n',\r\n\t\tfunction (kind,fn,extra)\r\n\t\t\tlocal _, _, ext = strfind(fn,\".*%.(.*)$\")\r\n\t\t\tlocal fp,msg = openfile(fn,'r')\r\n\t\t\tif not fp then\r\n\t\t\t\terror('#'..msg..': '..fn)\r\n\t\t\tend\r\n\t\t\tif kind == 'p' then\r\n\t\t\t\tlocal s = prep(fp)\r\n\t\t\t\tclosefile(fp)\r\n\t\t\t\treturn s\r\n\t\t\tend\r\n\t\t\tlocal s = read(fp,'*a')\r\n\t\t\tclosefile(fp)\r\n\t\t\tif kind == 'c' or kind == 'h' then\r\n\t\t\t\treturn extract_code(fn,s)\r\n\t\t\telseif kind == 'l' then\r\n\t\t\t\treturn \"\\n$[--##\"..fn..\"\\n\" .. s .. \"\\n$]\\n\"\r\n\t\t\telseif kind == 'i' then\r\n\t\t\t\tlocal t = {code=s}\r\n\t\t\t\textra = string.gsub(extra, \"^%s*,%s*\", \"\")\r\n\t\t\t\tlocal pars = split_c_tokens(extra, \",\")\r\n\t\t\t\tinclude_file_hook(t, fn, unpack(pars))\r\n\t\t\t\treturn \"\\n\\n\" .. t.code\r\n\t\t\telse\r\n\t\t\t\terror('#Invalid include directive (use $cfile, $pfile, $lfile or $ifile)')\r\n\t\t\tend\r\n\t\tend)\r\n until nsubst==0",
    "type": "statement:repeat"
  }, {
    "id": 142,
    "text": "code,nsubst = gsub(code,'\\n%s*%$(.)file%s*\"(.-)\"([^\\n]*)\\n',\r\n\t\tfunction (kind,fn,extra)\r\n\t\t\tlocal _, _, ext = strfind(fn,\".*%.(.*)$\")\r\n\t\t\tlocal fp,msg = openfile(fn,'r')\r\n\t\t\tif not fp then\r\n\t\t\t\terror('#'..msg..': '..fn)\r\n\t\t\tend\r\n\t\t\tif kind == 'p' then\r\n\t\t\t\tlocal s = prep(fp)\r\n\t\t\t\tclosefile(fp)\r\n\t\t\t\treturn s\r\n\t\t\tend\r\n\t\t\tlocal s = read(fp,'*a')\r\n\t\t\tclosefile(fp)\r\n\t\t\tif kind == 'c' or kind == 'h' then\r\n\t\t\t\treturn extract_code(fn,s)\r\n\t\t\telseif kind == 'l' then\r\n\t\t\t\treturn \"\\n$[--##\"..fn..\"\\n\" .. s .. \"\\n$]\\n\"\r\n\t\t\telseif kind == 'i' then\r\n\t\t\t\tlocal t = {code=s}\r\n\t\t\t\textra = string.gsub(extra, \"^%s*,%s*\", \"\")\r\n\t\t\t\tlocal pars = split_c_tokens(extra, \",\")\r\n\t\t\t\tinclude_file_hook(t, fn, unpack(pars))\r\n\t\t\t\treturn \"\\n\\n\" .. t.code\r\n\t\t\telse\r\n\t\t\t\terror('#Invalid include directive (use $cfile, $pfile, $lfile or $ifile)')\r\n\t\t\tend\r\n\t\tend)",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "local _, _, ext = strfind(fn,\".*%.(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local fp,msg = openfile(fn,'r')",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "if not fp then\r\n\t\t\t\terror('#'..msg..': '..fn)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "error('#'..msg..': '..fn)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "if kind == 'p' then\r\n\t\t\t\tlocal s = prep(fp)\r\n\t\t\t\tclosefile(fp)\r\n\t\t\t\treturn s\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "local s = prep(fp)",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "closefile(fp)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "local s = read(fp,'*a')",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "if kind == 'c' or kind == 'h' then\r\n\t\t\t\treturn extract_code(fn,s)\r\n\t\t\telseif kind == 'l' then\r\n\t\t\t\treturn \"\\n$[--##\"..fn..\"\\n\" .. s .. \"\\n$]\\n\"\r\n\t\t\telseif kind == 'i' then\r\n\t\t\t\tlocal t = {code=s}\r\n\t\t\t\textra = string.gsub(extra, \"^%s*,%s*\", \"\")\r\n\t\t\t\tlocal pars = split_c_tokens(extra, \",\")\r\n\t\t\t\tinclude_file_hook(t, fn, unpack(pars))\r\n\t\t\t\treturn \"\\n\\n\" .. t.code\r\n\t\t\telse\r\n\t\t\t\terror('#Invalid include directive (use $cfile, $pfile, $lfile or $ifile)')\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "local t = {code=s}",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "extra = string.gsub(extra, \"^%s*,%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "local pars = split_c_tokens(extra, \",\")",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "include_file_hook(t, fn, unpack(pars))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "error('#Invalid include directive (use $cfile, $pfile, $lfile or $ifile)')",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "repeat -- I don't know why this is necesary\r\n\tcode,nsubst = gsub(code,'\\n%s*%$renaming%s*(.-)%s*\\n', function (r) appendrenaming(r) return \"\\n\" end)\r\n until nsubst == 0",
    "type": "statement:repeat"
  }, {
    "id": 158,
    "text": "code,nsubst = gsub(code,'\\n%s*%$renaming%s*(.-)%s*\\n', function (r) appendrenaming(r) return \"\\n\" end)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "appendrenaming(r)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "local t = _Package(_Container{name=name, code=code})",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "push(t)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "preprocess_hook(t)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "t:preprocess()",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "preparse_hook(t)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "t:parse(t.code)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function prep(file)\r\n\r\n  local chunk = {'local __ret = {\"\\\\n\"}\\n'}\r\n  for line in file:lines() do\r\n     if string.find(line, \"^##\") then\r\n      table.insert(chunk, string.sub(line, 3) .. \"\\n\")\r\n     else\r\n      local last = 1\r\n      for text, expr, index in string.gfind(line, \"(.-)$(%b())()\") do \r\n        last = index\r\n        if text ~= \"\" then\r\n          table.insert(chunk, string.format('table.insert(__ret, %q )', text))\r\n        end\r\n        table.insert(chunk, string.format('table.insert(__ret, %s )', expr))\r\n      end\r\n      table.insert(chunk, string.format('table.insert(__ret, %q)\\n',\r\n                                         string.sub(line, last)..\"\\n\"))\r\n    end\r\n  end\r\n  table.insert(chunk, '\\nreturn table.concat(__ret)\\n')\r\n  local f,e = loadstring(table.concat(chunk))\r\n  if e then\r\n  \terror(\"#\"..e)\r\n  end\r\n  setfenv(f, _extra_parameters)\r\n  return f()\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "local chunk = {'local __ret = {\"\\\\n\"}\\n'}",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "for line in file:lines() do\r\n     if string.find(line, \"^##\") then\r\n      table.insert(chunk, string.sub(line, 3) .. \"\\n\")\r\n     else\r\n      local last = 1\r\n      for text, expr, index in string.gfind(line, \"(.-)$(%b())()\") do \r\n        last = index\r\n        if text ~= \"\" then\r\n          table.insert(chunk, string.format('table.insert(__ret, %q )', text))\r\n        end\r\n        table.insert(chunk, string.format('table.insert(__ret, %s )', expr))\r\n      end\r\n      table.insert(chunk, string.format('table.insert(__ret, %q)\\n',\r\n                                         string.sub(line, last)..\"\\n\"))\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 170,
    "text": "if string.find(line, \"^##\") then\r\n      table.insert(chunk, string.sub(line, 3) .. \"\\n\")\r\n     else\r\n      local last = 1\r\n      for text, expr, index in string.gfind(line, \"(.-)$(%b())()\") do \r\n        last = index\r\n        if text ~= \"\" then\r\n          table.insert(chunk, string.format('table.insert(__ret, %q )', text))\r\n        end\r\n        table.insert(chunk, string.format('table.insert(__ret, %s )', expr))\r\n      end\r\n      table.insert(chunk, string.format('table.insert(__ret, %q)\\n',\r\n                                         string.sub(line, last)..\"\\n\"))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "table.insert(chunk, string.sub(line, 3) .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "local last = 1",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "for text, expr, index in string.gfind(line, \"(.-)$(%b())()\") do \r\n        last = index\r\n        if text ~= \"\" then\r\n          table.insert(chunk, string.format('table.insert(__ret, %q )', text))\r\n        end\r\n        table.insert(chunk, string.format('table.insert(__ret, %s )', expr))\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 174,
    "text": "last = index",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "if text ~= \"\" then\r\n          table.insert(chunk, string.format('table.insert(__ret, %q )', text))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "table.insert(chunk, string.format('table.insert(__ret, %q )', text))",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "table.insert(chunk, string.format('table.insert(__ret, %s )', expr))",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "table.insert(chunk, string.format('table.insert(__ret, %q)\\n',\r\n                                         string.sub(line, last)..\"\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "table.insert(chunk, '\\nreturn table.concat(__ret)\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "local f,e = loadstring(table.concat(chunk))",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "if e then\r\n  \terror(\"#\"..e)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "error(\"#\"..e)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "setfenv(f, _extra_parameters)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function (c)\r\n                                               tinsert(L,c)\r\n                                               return \"\\n#[\"..getn(L)..\"]#\"\r\n                                              end",
    "type": "function"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function (c)\r\n                                               tinsert(C,c)\r\n                                               return \"\\n#<\"..getn(C)..\">#\"\r\n                                              end",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function (c)\r\n                                               tinsert(C,c)\r\n                                               return \"\\n#<\"..getn(C)..\">#\"\r\n                                              end",
    "type": "function"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function (v)\r\n                                               tinsert(V,v)\r\n                                               return \"\\n#\"..getn(V)..\"#\"\r\n                                              end",
    "type": "function"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function (n)\r\n                                              return L[tonumber(n)]\r\n                                            end",
    "type": "function"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function (n)\r\n                                             return C[tonumber(n)]\r\n                                            end",
    "type": "function"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function (n)\r\n                                         return V[tonumber(n)]\r\n                                        end",
    "type": "function"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function (l)\r\n\t\t\t\t\t\t\t\t\t\t\tVerbatim(l..\"\\n\")\r\n\t\t\t\t\t\t\t\t\t\t\treturn \"\\n\"\r\n\t\t\t\t\t\t\t\t\t\t  end",
    "type": "function"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function(n,v)\r\n\t\tif (not _global_classes[v]) or _global_classes[v]:check_public_access() then\r\n\t\t\toutput(' tolua_usertype(tolua_S,\"',v,'\");')\r\n\t\t\tif flags.t then\r\n\t\t\t\toutput(' Mtolua_typeid(tolua_S,typeid(',v,'), \"',v,'\");')\r\n\t\t\tend\r\n\t\tend\r\n\t end",
    "type": "function"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function (kind,fn,extra)\r\n\t\t\tlocal _, _, ext = strfind(fn,\".*%.(.*)$\")\r\n\t\t\tlocal fp,msg = openfile(fn,'r')\r\n\t\t\tif not fp then\r\n\t\t\t\terror('#'..msg..': '..fn)\r\n\t\t\tend\r\n\t\t\tif kind == 'p' then\r\n\t\t\t\tlocal s = prep(fp)\r\n\t\t\t\tclosefile(fp)\r\n\t\t\t\treturn s\r\n\t\t\tend\r\n\t\t\tlocal s = read(fp,'*a')\r\n\t\t\tclosefile(fp)\r\n\t\t\tif kind == 'c' or kind == 'h' then\r\n\t\t\t\treturn extract_code(fn,s)\r\n\t\t\telseif kind == 'l' then\r\n\t\t\t\treturn \"\\n$[--##\"..fn..\"\\n\" .. s .. \"\\n$]\\n\"\r\n\t\t\telseif kind == 'i' then\r\n\t\t\t\tlocal t = {code=s}\r\n\t\t\t\textra = string.gsub(extra, \"^%s*,%s*\", \"\")\r\n\t\t\t\tlocal pars = split_c_tokens(extra, \",\")\r\n\t\t\t\tinclude_file_hook(t, fn, unpack(pars))\r\n\t\t\t\treturn \"\\n\\n\" .. t.code\r\n\t\t\telse\r\n\t\t\t\terror('#Invalid include directive (use $cfile, $pfile, $lfile or $ifile)')\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "function (r) appendrenaming(r) return \"\\n\" end",
    "type": "function"
  }, {
    "id": 206,
    "text": "",
    "type": "function container"
  }, {
    "id": 207,
    "text": "print",
    "type": "global function"
  }, {
    "id": 208,
    "text": "openfile",
    "type": "global function"
  }, {
    "id": 209,
    "text": "pop",
    "type": "global function"
  }, {
    "id": 210,
    "text": "preparse_hook",
    "type": "global function"
  }, {
    "id": 211,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 212,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 213,
    "text": "date",
    "type": "global function"
  }, {
    "id": 214,
    "text": "closefile",
    "type": "global function"
  }, {
    "id": 215,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 216,
    "text": "include_file_hook",
    "type": "global function"
  }, {
    "id": 217,
    "text": "foreach",
    "type": "global function"
  }, {
    "id": 218,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 219,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 220,
    "text": "split_c_tokens",
    "type": "global function"
  }, {
    "id": 221,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 222,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 223,
    "text": "Verbatim",
    "type": "global function"
  }, {
    "id": 224,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 225,
    "text": "find",
    "type": "global function"
  }, {
    "id": 226,
    "text": "tolua_error",
    "type": "global function"
  }, {
    "id": 227,
    "text": "read",
    "type": "global function"
  }, {
    "id": 228,
    "text": "appendrenaming",
    "type": "global function"
  }, {
    "id": 229,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 230,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 231,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 232,
    "text": "push",
    "type": "global function"
  }, {
    "id": 233,
    "text": "strlower",
    "type": "global function"
  }, {
    "id": 234,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 235,
    "text": "_Container",
    "type": "global function"
  }, {
    "id": 236,
    "text": "format",
    "type": "global function"
  }, {
    "id": 237,
    "text": "f",
    "type": "global function"
  }, {
    "id": 238,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 239,
    "text": "error",
    "type": "global function"
  }, {
    "id": 240,
    "text": "output",
    "type": "global function"
  }, {
    "id": 241,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 242,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 243,
    "text": "preprocess_hook",
    "type": "global function"
  }, {
    "id": 244,
    "text": "readfrom",
    "type": "global function"
  }, {
    "id": 245,
    "text": "",
    "type": "variable container"
  }, {
    "id": 246,
    "text": "",
    "type": "require container"
  }, {
    "id": 247,
    "text": "",
    "type": "global variable"
  }, {
    "id": 248,
    "text": "",
    "type": "n/a"
  }, {
    "id": 249,
    "text": "",
    "type": "global variable"
  }, {
    "id": 250,
    "text": "",
    "type": "n/a"
  } ]
}