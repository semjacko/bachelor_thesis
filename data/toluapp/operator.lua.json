{
  "_filename": "operator.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/toluapp/src/bin/lua/operator.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 20,
    "label": "has",
    "to": 30
  }, {
    "from": 20,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 20,
    "label": "has",
    "to": 33
  }, {
    "from": 20,
    "label": "has",
    "to": 34
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 20,
    "label": "has",
    "to": 36
  }, {
    "from": 20,
    "label": "has",
    "to": 37
  }, {
    "from": 20,
    "label": "has",
    "to": 38
  }, {
    "from": 20,
    "label": "has",
    "to": 39
  }, {
    "from": 20,
    "label": "has",
    "to": 40
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 41
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 20,
    "label": "has",
    "to": 42
  }, {
    "from": 20,
    "label": "has",
    "to": 43
  }, {
    "from": 20,
    "label": "has",
    "to": 44
  }, {
    "from": 20,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 35
  }, {
    "from": 50,
    "label": "has",
    "to": 58
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 50,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 55
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 20,
    "label": "has",
    "to": 63
  }, {
    "from": 20,
    "label": "has",
    "to": 64
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 65
  }, {
    "from": 20,
    "label": "has",
    "to": 66
  }, {
    "from": 20,
    "label": "has",
    "to": 67
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 20,
    "label": "has",
    "to": 68
  }, {
    "from": 20,
    "label": "has",
    "to": 69
  }, {
    "from": 20,
    "label": "has",
    "to": 70
  }, {
    "from": 20,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 72,
    "label": "has",
    "to": 80
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 72,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 82,
    "label": "has",
    "to": 22
  }, {
    "from": 82,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 13
  }, {
    "from": 82,
    "label": "has",
    "to": 92
  }, {
    "from": 82,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 16
  }, {
    "from": 82,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 94
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 82,
    "label": "has",
    "to": 102
  }, {
    "from": 82,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 82,
    "label": "has",
    "to": 105
  }, {
    "from": 82,
    "label": "has",
    "to": 106
  }, {
    "from": 82,
    "label": "has",
    "to": 107
  }, {
    "from": 82,
    "label": "has",
    "to": 108
  }, {
    "from": 82,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 82,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 82,
    "label": "has",
    "to": 22
  }, {
    "from": 82,
    "label": "has",
    "to": 113
  }, {
    "from": 20,
    "label": "calls",
    "to": 115
  }, {
    "from": 20,
    "label": "calls",
    "to": 122
  }, {
    "from": 20,
    "label": "calls",
    "to": 116
  }, {
    "from": 82,
    "label": "calls",
    "to": 116
  }, {
    "from": 82,
    "label": "calls",
    "to": 127
  }, {
    "from": 20,
    "label": "calls",
    "to": 120
  }, {
    "from": 72,
    "label": "calls",
    "to": 128
  }, {
    "from": 72,
    "label": "calls",
    "to": 128
  }, {
    "from": 82,
    "label": "calls",
    "to": 128
  }, {
    "from": 82,
    "label": "calls",
    "to": 128
  }, {
    "from": 82,
    "label": "calls",
    "to": 125
  }, {
    "from": 82,
    "label": "calls",
    "to": 72
  }, {
    "from": 82,
    "label": "calls",
    "to": 123
  }, {
    "from": 72,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 82,
    "label": "calls",
    "to": 118
  }, {
    "from": 82,
    "label": "calls",
    "to": 118
  }, {
    "from": 82,
    "label": "calls",
    "to": 118
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 82,
    "label": "calls",
    "to": 121
  }, {
    "from": 114,
    "label": "calls",
    "to": 132
  }, {
    "from": 72,
    "label": "calls",
    "to": 132
  }, {
    "from": 20,
    "label": "calls",
    "to": 126
  }, {
    "from": 20,
    "label": "calls",
    "to": 130
  }, {
    "from": 82,
    "label": "calls",
    "to": 130
  }, {
    "from": 82,
    "label": "calls",
    "to": 130
  }, {
    "from": 82,
    "label": "calls",
    "to": 131
  }, {
    "from": 82,
    "label": "calls",
    "to": 82
  }, {
    "from": 20,
    "label": "calls",
    "to": 124
  }, {
    "from": 20,
    "label": "calls",
    "to": 124
  }, {
    "from": 82,
    "label": "calls",
    "to": 119
  }, {
    "from": 1,
    "label": "contains",
    "to": 114
  }, {
    "from": 114,
    "label": "declares",
    "to": 2
  }, {
    "from": 114,
    "label": "declares",
    "to": 20
  }, {
    "from": 114,
    "label": "declares",
    "to": 72
  }, {
    "from": 114,
    "label": "declares",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 134
  }, {
    "from": 1,
    "label": "contains",
    "to": 135
  }, {
    "from": 134,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 134,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 134,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "operator",
    "type": "module"
  }, {
    "id": 2,
    "text": "function classOperator:print (ident,close)\r\n print(ident..\"Operator{\")\r\n print(ident..\" kind  = '\"..self.kind..\"',\")\r\n print(ident..\" mod  = '\"..self.mod..\"',\")\r\n print(ident..\" type = '\"..self.type..\"',\")\r\n print(ident..\" ptr  = '\"..self.ptr..\"',\")\r\n print(ident..\" name = '\"..self.name..\"',\")\r\n print(ident..\" const = '\"..self.const..\"',\")\r\n print(ident..\" cname = '\"..self.cname..\"',\")\r\n print(ident..\" lname = '\"..self.lname..\"',\")\r\n print(ident..\" args = {\")\r\n local i=1\r\n while self.args[i] do\r\n  self.args[i]:print(ident..\"  \",\",\")\r\n  i = i+1\r\n end\r\n print(ident..\" }\")\r\n print(ident..\"}\"..close)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(ident..\"Operator{\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "print(ident..\" kind  = '\"..self.kind..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "print(ident..\" mod  = '\"..self.mod..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "print(ident..\" type = '\"..self.type..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "print(ident..\" ptr  = '\"..self.ptr..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "print(ident..\" name = '\"..self.name..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "print(ident..\" const = '\"..self.const..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "print(ident..\" cname = '\"..self.cname..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "print(ident..\" lname = '\"..self.lname..\"',\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "print(ident..\" args = {\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local i=1",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "while self.args[i] do\r\n  self.args[i]:print(ident..\"  \",\",\")\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 15,
    "text": "self.args[i]:print(ident..\"  \",\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "print(ident..\" }\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "print(ident..\"}\"..close)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function classOperator:supcode_tmp()\r\n\r\n\tif not _TM[self.kind] then\r\n\t\treturn classFunction.supcode(self)\r\n\tend\r\n\r\n\t-- no overload, no parameters, always inclass\r\n\toutput(\"/* method:\",self.name,\" of class \",self:inclass(),\" */\")\r\n\r\n\toutput(\"#ifndef TOLUA_DISABLE_\"..self.cname)\r\n\toutput(\"\\nstatic int\",self.cname,\"(lua_State* tolua_S)\")\r\n\r\n\tif overload < 0 then\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n\tend\r\n\toutput(' tolua_Error tolua_err;')\r\n\toutput(' if (\\n')\r\n\t-- check self\r\n\tlocal is_func = get_is_function(self.parent.type)\r\n\toutput('     !'..is_func..'(tolua_S,1,\"'..self.parent.type..'\",0,&tolua_err) ||\\n')\r\n\toutput('     !tolua_isnoobj(tolua_S,2,&tolua_err)\\n )')\r\n\toutput('  goto tolua_lerror;')\r\n\r\n\toutput(' else\\n')\r\n\toutput('#endif\\n') -- tolua_release\r\n\toutput(' {')\r\n\r\n\t-- declare self\r\n\toutput(' ',self.const,self.parent.type,'*','self = ')\r\n\toutput('(',self.const,self.parent.type,'*) ')\r\n\tlocal to_func = get_to_func(self.parent.type)\r\n\toutput(to_func,'(tolua_S,1,0);')\r\n\r\n\t-- check self\r\n\toutput('#ifndef TOLUA_RELEASE\\n')\r\n\toutput('  if (!self) tolua_error(tolua_S,\"'..output_error_hook(\"invalid \\'self\\' in function \\'%s\\'\", self.name)..'\",NULL);');\r\n\toutput('#endif\\n')\r\n\r\n\t-- cast self\r\n\toutput('  ',self.mod,self.type,self.ptr,'tolua_ret = ')\r\n\toutput('(',self.mod,self.type,self.ptr,')(*self);')\r\n\r\n\t-- return value\r\n\tlocal t,ct = isbasic(self.type)\r\n\tif t then\r\n\t\toutput('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')\r\n\telse\r\n\t\tt = self.type\r\n\t\tlocal push_func = get_push_function(t)\r\n\t\tnew_t = string.gsub(t, \"const%s+\", \"\")\r\n\t\tif self.ptr == '' then\r\n\t\t\toutput('   {')\r\n\t\t\toutput('#ifdef __cplusplus\\n')\r\n\t\t\toutput('    void* tolua_obj = Mtolua_new((',new_t,')(tolua_ret));')\r\n\t\t\toutput('    ',push_func,'(tolua_S,tolua_obj,\"',t,'\");')\r\n\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\toutput('#else\\n')\r\n\t\t\toutput('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')\r\n\t\t\toutput('    ',push_func,'(tolua_S,tolua_obj,\"',t,'\");')\r\n\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\toutput('#endif\\n')\r\n\t\t\toutput('   }')\r\n\t\telseif self.ptr == '&' then\r\n\t\t\toutput('   ',push_func,'(tolua_S,(void*)&tolua_ret,\"',t,'\");')\r\n\t\telse\r\n\t\t\tif local_constructor then\r\n\t\t\t\toutput('   ',push_func,'(tolua_S,(void *)tolua_ret,\"',t,'\");')\r\n\t\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\telse\r\n\t\t\t\toutput('   ',push_func,'(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\toutput('  }')\r\n\toutput(' return 1;')\r\n\r\n\toutput('#ifndef TOLUA_RELEASE\\n')\r\n\toutput('tolua_lerror:\\n')\r\n\toutput(' tolua_error(tolua_S,\"'..output_error_hook(\"#ferror in function \\'%s\\'.\", self.lname)..'\",&tolua_err);')\r\n\toutput(' return 0;')\r\n\toutput('#endif\\n')\r\n\r\n\r\n\toutput('}')\r\n\toutput('#endif //#ifndef TOLUA_DISABLE\\n')\r\n\toutput('\\n')\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if not _TM[self.kind] then\r\n\t\treturn classFunction.supcode(self)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 23,
    "text": "output(\"/* method:\",self.name,\" of class \",self:inclass(),\" */\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "output(\"#ifndef TOLUA_DISABLE_\"..self.cname)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "output(\"\\nstatic int\",self.cname,\"(lua_State* tolua_S)\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "if overload < 0 then\r\n\t output('#ifndef TOLUA_RELEASE\\n')\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "output('#ifndef TOLUA_RELEASE\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "output(' tolua_Error tolua_err;')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "output(' if (\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local is_func = get_is_function(self.parent.type)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "output('     !'..is_func..'(tolua_S,1,\"'..self.parent.type..'\",0,&tolua_err) ||\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "output('     !tolua_isnoobj(tolua_S,2,&tolua_err)\\n )')",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "output('  goto tolua_lerror;')",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "output(' else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "output('#endif\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "output(' {')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "output(' ',self.const,self.parent.type,'*','self = ')",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "output('(',self.const,self.parent.type,'*) ')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local to_func = get_to_func(self.parent.type)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "output(to_func,'(tolua_S,1,0);')",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "output('  if (!self) tolua_error(tolua_S,\"'..output_error_hook(\"invalid \\'self\\' in function \\'%s\\'\", self.name)..'\",NULL);')",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "output('  ',self.mod,self.type,self.ptr,'tolua_ret = ')",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "output('(',self.mod,self.type,self.ptr,')(*self);')",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local t,ct = isbasic(self.type)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if t then\r\n\t\toutput('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')\r\n\telse\r\n\t\tt = self.type\r\n\t\tlocal push_func = get_push_function(t)\r\n\t\tnew_t = string.gsub(t, \"const%s+\", \"\")\r\n\t\tif self.ptr == '' then\r\n\t\t\toutput('   {')\r\n\t\t\toutput('#ifdef __cplusplus\\n')\r\n\t\t\toutput('    void* tolua_obj = Mtolua_new((',new_t,')(tolua_ret));')\r\n\t\t\toutput('    ',push_func,'(tolua_S,tolua_obj,\"',t,'\");')\r\n\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\toutput('#else\\n')\r\n\t\t\toutput('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')\r\n\t\t\toutput('    ',push_func,'(tolua_S,tolua_obj,\"',t,'\");')\r\n\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\toutput('#endif\\n')\r\n\t\t\toutput('   }')\r\n\t\telseif self.ptr == '&' then\r\n\t\t\toutput('   ',push_func,'(tolua_S,(void*)&tolua_ret,\"',t,'\");')\r\n\t\telse\r\n\t\t\tif local_constructor then\r\n\t\t\t\toutput('   ',push_func,'(tolua_S,(void *)tolua_ret,\"',t,'\");')\r\n\t\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\telse\r\n\t\t\t\toutput('   ',push_func,'(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "output('   tolua_push'..t..'(tolua_S,(',ct,')tolua_ret);')",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "t = self.type",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local push_func = get_push_function(t)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "new_t = string.gsub(t, \"const%s+\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "if self.ptr == '' then\r\n\t\t\toutput('   {')\r\n\t\t\toutput('#ifdef __cplusplus\\n')\r\n\t\t\toutput('    void* tolua_obj = Mtolua_new((',new_t,')(tolua_ret));')\r\n\t\t\toutput('    ',push_func,'(tolua_S,tolua_obj,\"',t,'\");')\r\n\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\toutput('#else\\n')\r\n\t\t\toutput('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')\r\n\t\t\toutput('    ',push_func,'(tolua_S,tolua_obj,\"',t,'\");')\r\n\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\toutput('#endif\\n')\r\n\t\t\toutput('   }')\r\n\t\telseif self.ptr == '&' then\r\n\t\t\toutput('   ',push_func,'(tolua_S,(void*)&tolua_ret,\"',t,'\");')\r\n\t\telse\r\n\t\t\tif local_constructor then\r\n\t\t\t\toutput('   ',push_func,'(tolua_S,(void *)tolua_ret,\"',t,'\");')\r\n\t\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\telse\r\n\t\t\t\toutput('   ',push_func,'(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "output('   {')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "output('#ifdef __cplusplus\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "output('    void* tolua_obj = Mtolua_new((',new_t,')(tolua_ret));')",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "output('    ',push_func,'(tolua_S,tolua_obj,\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "output('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "output('#else\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof(',t,'));')",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "output('   }')",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "output('   ',push_func,'(tolua_S,(void*)&tolua_ret,\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "if local_constructor then\r\n\t\t\t\toutput('   ',push_func,'(tolua_S,(void *)tolua_ret,\"',t,'\");')\r\n\t\t\t\toutput('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));')\r\n\t\t\telse\r\n\t\t\t\toutput('   ',push_func,'(tolua_S,(void*)tolua_ret,\"',t,'\");')\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "output('   ',push_func,'(tolua_S,(void *)tolua_ret,\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "output('   ',push_func,'(tolua_S,(void*)tolua_ret,\"',t,'\");')",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "output('  }')",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "output(' return 1;')",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "output('tolua_lerror:\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "output(' tolua_error(tolua_S,\"'..output_error_hook(\"#ferror in function \\'%s\\'.\", self.lname)..'\",&tolua_err);')",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "output(' return 0;')",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "output('}')",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "output('#endif //#ifndef TOLUA_DISABLE\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "output('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function _Operator (t)\r\n setmetatable(t,classOperator)\r\n\r\n if t.const ~= 'const' and t.const ~= '' then\r\n  error(\"#invalid 'const' specification\")\r\n end\r\n\r\n append(t)\r\n if not t:inclass() then\r\n  error(\"#operator can only be defined as class member\")\r\n end\r\n\r\n --t.name = t.name .. \"_\" .. (_TM[t.kind] or t.kind)\r\n t.cname = t:cfuncname(\"tolua\")..t:overload(t)\r\n t.name = \"operator\" .. t.kind  -- set appropriate calling name\r\n return t\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "setmetatable(t,classOperator)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if t.const ~= 'const' and t.const ~= '' then\r\n  error(\"#invalid 'const' specification\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "error(\"#invalid 'const' specification\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "append(t)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "if not t:inclass() then\r\n  error(\"#operator can only be defined as class member\")\r\n end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "error(\"#operator can only be defined as class member\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "t.cname = t:cfuncname(\"tolua\")..t:overload(t)",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "t.name = \"operator\" .. t.kind",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function Operator (d,k,a,c)\r\n\r\n\tlocal op_k = string.gsub(k, \"^%s*\", \"\")\r\n\top_k = string.gsub(k, \"%s*$\", \"\")\r\n\t--if string.find(k, \"^[%w_:%d<>%*%&]+$\") then\r\n\tif d == \"operator\" and k ~= '' then\r\n\r\n\t\td = k..\" operator\"\r\n\telseif not _TM[op_k] then\r\n\r\n\t\tif flags['W'] then\r\n\t\t\terror(\"tolua: no support for operator\" .. f.kind)\r\n\t\telse\r\n\t\t\twarning(\"No support for operator \"..op_k..\", ignoring\")\r\n\t\t\treturn nil\r\n\t\tend\r\n\tend\r\n\r\n\tlocal ref = ''\r\n local t = split_c_tokens(strsub(a,2,strlen(a)-1),',') -- eliminate braces\r\n local i=1\r\n local l = {n=0}\r\n while t[i] do\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(t[i],'var')\r\n  i = i+1\r\n end\r\n if k == '[]' then\r\n\t local _\r\n\t _, _, ref = strfind(d,'(&)')\r\n  d = gsub(d,'&','')\r\n elseif k=='&[]' then\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(d,'var')\r\n  l[l.n].name = 'tolua_value'\r\n end\r\n local f = Declaration(d,'func')\r\n if k == '[]' and (l[1]==nil or isbasic(l[1].type)~='number') then\r\n  error('operator[] can only be defined for numeric index.')\r\n end\r\n f.args = l\r\n f.const = c\r\n f.kind = op_k\r\n f.lname = \".\"..(_TM[f.kind] or f.kind)\r\n if not _TM[f.kind] then\r\n \tf.cast_operator = true\r\n end\r\n if f.kind == '[]' and ref=='&' and f.const~='const' then\r\n  Operator(d,'&'..k,a,c) \t-- create correspoding set operator\r\n end\r\n return _Operator(f)\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local op_k = string.gsub(k, \"^%s*\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "op_k = string.gsub(k, \"%s*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if d == \"operator\" and k ~= '' then\r\n\r\n\t\td = k..\" operator\"\r\n\telseif not _TM[op_k] then\r\n\r\n\t\tif flags['W'] then\r\n\t\t\terror(\"tolua: no support for operator\" .. f.kind)\r\n\t\telse\r\n\t\t\twarning(\"No support for operator \"..op_k..\", ignoring\")\r\n\t\t\treturn nil\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "d = k..\" operator\"",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if flags['W'] then\r\n\t\t\terror(\"tolua: no support for operator\" .. f.kind)\r\n\t\telse\r\n\t\t\twarning(\"No support for operator \"..op_k..\", ignoring\")\r\n\t\t\treturn nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "error(\"tolua: no support for operator\" .. f.kind)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "warning(\"No support for operator \"..op_k..\", ignoring\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local ref = ''",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local t = split_c_tokens(strsub(a,2,strlen(a)-1),',')",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local l = {n=0}",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "while t[i] do\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(t[i],'var')\r\n  i = i+1\r\n end",
    "type": "statement:while"
  }, {
    "id": 94,
    "text": "l.n = l.n+1",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "l[l.n] = Declaration(t[i],'var')",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if k == '[]' then\r\n\t local _\r\n\t _, _, ref = strfind(d,'(&)')\r\n  d = gsub(d,'&','')\r\n elseif k=='&[]' then\r\n  l.n = l.n+1\r\n  l[l.n] = Declaration(d,'var')\r\n  l[l.n].name = 'tolua_value'\r\n end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "local _",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "_, _, ref = strfind(d,'(&)')",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "d = gsub(d,'&','')",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "l[l.n] = Declaration(d,'var')",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "l[l.n].name = 'tolua_value'",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "local f = Declaration(d,'func')",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if k == '[]' and (l[1]==nil or isbasic(l[1].type)~='number') then\r\n  error('operator[] can only be defined for numeric index.')\r\n end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "error('operator[] can only be defined for numeric index.')",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "f.args = l",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "f.const = c",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "f.kind = op_k",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "f.lname = \".\"..(_TM[f.kind] or f.kind)",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if not _TM[f.kind] then\r\n \tf.cast_operator = true\r\n end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "f.cast_operator = true",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "if f.kind == '[]' and ref=='&' and f.const~='const' then\r\n  Operator(d,'&'..k,a,c) \t-- create correspoding set operator\r\n end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "Operator(d,'&'..k,a,c)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "",
    "type": "function container"
  }, {
    "id": 115,
    "text": "get_is_function",
    "type": "global function"
  }, {
    "id": 116,
    "text": "isbasic",
    "type": "global function"
  }, {
    "id": 117,
    "text": "print",
    "type": "global function"
  }, {
    "id": 118,
    "text": "Declaration",
    "type": "global function"
  }, {
    "id": 119,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 120,
    "text": "get_push_function",
    "type": "global function"
  }, {
    "id": 121,
    "text": "warning",
    "type": "global function"
  }, {
    "id": 122,
    "text": "get_to_func",
    "type": "global function"
  }, {
    "id": 123,
    "text": "split_c_tokens",
    "type": "global function"
  }, {
    "id": 124,
    "text": "output_error_hook",
    "type": "global function"
  }, {
    "id": 125,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 126,
    "text": "supcode",
    "type": "global function"
  }, {
    "id": 127,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 128,
    "text": "error",
    "type": "global function"
  }, {
    "id": 129,
    "text": "output",
    "type": "global function"
  }, {
    "id": 130,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 131,
    "text": "strlen",
    "type": "global function"
  }, {
    "id": 132,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 133,
    "text": "append",
    "type": "global function"
  }, {
    "id": 134,
    "text": "",
    "type": "variable container"
  }, {
    "id": 135,
    "text": "",
    "type": "require container"
  }, {
    "id": 136,
    "text": "",
    "type": "global variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "global variable"
  }, {
    "id": 139,
    "text": "",
    "type": "n/a"
  }, {
    "id": 140,
    "text": "",
    "type": "global variable"
  }, {
    "id": 141,
    "text": "",
    "type": "n/a"
  } ]
}