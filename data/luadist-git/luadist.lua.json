{
  "_filename": "luadist.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadist-git/luadist.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 42
  }, {
    "from": 24,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 42
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 42
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 60
  }, {
    "from": 52,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 63
  }, {
    "from": 52,
    "label": "has",
    "to": 64
  }, {
    "from": 52,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 67
  }, {
    "from": 49,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 25
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 29
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 42
  }, {
    "from": 69,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 25
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 79,
    "label": "has",
    "to": 29
  }, {
    "from": 79,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 79,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 79,
    "label": "has",
    "to": 42
  }, {
    "from": 79,
    "label": "has",
    "to": 90
  }, {
    "from": 79,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 54
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 79,
    "label": "has",
    "to": 42
  }, {
    "from": 79,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 25
  }, {
    "from": 95,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 95,
    "label": "has",
    "to": 82
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 29
  }, {
    "from": 95,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 42
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 92
  }, {
    "from": 102,
    "label": "has",
    "to": 54
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 95,
    "label": "has",
    "to": 42
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 25
  }, {
    "from": 105,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 29
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 92
  }, {
    "from": 109,
    "label": "has",
    "to": 54
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 42
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 25
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 29
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 112,
    "label": "has",
    "to": 119
  }, {
    "from": 112,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 92
  }, {
    "from": 120,
    "label": "has",
    "to": 54
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 112,
    "label": "has",
    "to": 42
  }, {
    "from": 112,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 25
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 82
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 29
  }, {
    "from": 123,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 123,
    "label": "has",
    "to": 42
  }, {
    "from": 123,
    "label": "has",
    "to": 130
  }, {
    "from": 123,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 92
  }, {
    "from": 131,
    "label": "has",
    "to": 54
  }, {
    "from": 123,
    "label": "has",
    "to": 132
  }, {
    "from": 123,
    "label": "has",
    "to": 42
  }, {
    "from": 123,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 134,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 134,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 134,
    "label": "has",
    "to": 42
  }, {
    "from": 134,
    "label": "has",
    "to": 144
  }, {
    "from": 134,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 92
  }, {
    "from": 145,
    "label": "has",
    "to": 54
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 134,
    "label": "has",
    "to": 42
  }, {
    "from": 134,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 54
  }, {
    "from": 148,
    "label": "has",
    "to": 25
  }, {
    "from": 148,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 148,
    "label": "has",
    "to": 29
  }, {
    "from": 148,
    "label": "has",
    "to": 153
  }, {
    "from": 148,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 92
  }, {
    "from": 154,
    "label": "has",
    "to": 54
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 148,
    "label": "has",
    "to": 42
  }, {
    "from": 148,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 25
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 29
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 157,
    "label": "has",
    "to": 162
  }, {
    "from": 157,
    "label": "has",
    "to": 163
  }, {
    "from": 157,
    "label": "has",
    "to": 164
  }, {
    "from": 157,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 157,
    "label": "has",
    "to": 167
  }, {
    "from": 157,
    "label": "has",
    "to": 42
  }, {
    "from": 157,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 25
  }, {
    "from": 169,
    "label": "has",
    "to": 158
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 29
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 169,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 92
  }, {
    "from": 173,
    "label": "has",
    "to": 54
  }, {
    "from": 169,
    "label": "has",
    "to": 174
  }, {
    "from": 169,
    "label": "has",
    "to": 175
  }, {
    "from": 169,
    "label": "has",
    "to": 176
  }, {
    "from": 169,
    "label": "has",
    "to": 177
  }, {
    "from": 169,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 169,
    "label": "has",
    "to": 167
  }, {
    "from": 169,
    "label": "has",
    "to": 42
  }, {
    "from": 169,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 25
  }, {
    "from": 181,
    "label": "has",
    "to": 136
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 29
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 92
  }, {
    "from": 185,
    "label": "has",
    "to": 54
  }, {
    "from": 181,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 161
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 179
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 167
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 186,
    "label": "has",
    "to": 161
  }, {
    "from": 186,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 92
  }, {
    "from": 196,
    "label": "has",
    "to": 54
  }, {
    "from": 186,
    "label": "has",
    "to": 197
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 198,
    "label": "has",
    "to": 201
  }, {
    "from": 198,
    "label": "has",
    "to": 202
  }, {
    "from": 198,
    "label": "has",
    "to": 203
  }, {
    "from": 198,
    "label": "has",
    "to": 191
  }, {
    "from": 198,
    "label": "has",
    "to": 204
  }, {
    "from": 198,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 198,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 198,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 198,
    "label": "has",
    "to": 211
  }, {
    "from": 198,
    "label": "has",
    "to": 167
  }, {
    "from": 181,
    "label": "has",
    "to": 42
  }, {
    "from": 181,
    "label": "has",
    "to": 42
  }, {
    "from": 181,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 25
  }, {
    "from": 213,
    "label": "has",
    "to": 136
  }, {
    "from": 213,
    "label": "has",
    "to": 182
  }, {
    "from": 213,
    "label": "has",
    "to": 183
  }, {
    "from": 213,
    "label": "has",
    "to": 29
  }, {
    "from": 213,
    "label": "has",
    "to": 184
  }, {
    "from": 213,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 92
  }, {
    "from": 185,
    "label": "has",
    "to": 54
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 217,
    "label": "has",
    "to": 220
  }, {
    "from": 217,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 92
  }, {
    "from": 221,
    "label": "has",
    "to": 54
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 221,
    "label": "has",
    "to": 224
  }, {
    "from": 221,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 225,
    "label": "has",
    "to": 229
  }, {
    "from": 225,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 54
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 225,
    "label": "has",
    "to": 167
  }, {
    "from": 213,
    "label": "has",
    "to": 42
  }, {
    "from": 213,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 238,
    "label": "has",
    "to": 244
  }, {
    "from": 238,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 54
  }, {
    "from": 238,
    "label": "has",
    "to": 247
  }, {
    "from": 238,
    "label": "has",
    "to": 248
  }, {
    "from": 238,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 167
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 238,
    "label": "has",
    "to": 167
  }, {
    "from": 238,
    "label": "has",
    "to": 42
  }, {
    "from": 238,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 49,
    "label": "calls",
    "to": 267
  }, {
    "from": 49,
    "label": "calls",
    "to": 267
  }, {
    "from": 49,
    "label": "calls",
    "to": 267
  }, {
    "from": 49,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 267
  }, {
    "from": 255,
    "label": "calls",
    "to": 265
  }, {
    "from": 24,
    "label": "calls",
    "to": 49
  }, {
    "from": 24,
    "label": "calls",
    "to": 49
  }, {
    "from": 49,
    "label": "calls",
    "to": 269
  }, {
    "from": 255,
    "label": "calls",
    "to": 13
  }, {
    "from": 255,
    "label": "calls",
    "to": 44
  }, {
    "from": 255,
    "label": "calls",
    "to": 264
  }, {
    "from": 255,
    "label": "calls",
    "to": 264
  }, {
    "from": 255,
    "label": "calls",
    "to": 264
  }, {
    "from": 255,
    "label": "calls",
    "to": 15
  }, {
    "from": 47,
    "label": "calls",
    "to": 24
  }, {
    "from": 255,
    "label": "calls",
    "to": 24
  }, {
    "from": 255,
    "label": "calls",
    "to": 24
  }, {
    "from": 255,
    "label": "calls",
    "to": 11
  }, {
    "from": 255,
    "label": "calls",
    "to": 11
  }, {
    "from": 255,
    "label": "calls",
    "to": 11
  }, {
    "from": 255,
    "label": "calls",
    "to": 11
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 44,
    "label": "calls",
    "to": 270
  }, {
    "from": 49,
    "label": "calls",
    "to": 270
  }, {
    "from": 49,
    "label": "calls",
    "to": 270
  }, {
    "from": 49,
    "label": "calls",
    "to": 270
  }, {
    "from": 49,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 270
  }, {
    "from": 255,
    "label": "calls",
    "to": 47
  }, {
    "from": 255,
    "label": "calls",
    "to": 47
  }, {
    "from": 255,
    "label": "calls",
    "to": 10
  }, {
    "from": 255,
    "label": "calls",
    "to": 17
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 24,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 263
  }, {
    "from": 255,
    "label": "calls",
    "to": 7
  }, {
    "from": 255,
    "label": "calls",
    "to": 7
  }, {
    "from": 255,
    "label": "calls",
    "to": 259
  }, {
    "from": 255,
    "label": "calls",
    "to": 257
  }, {
    "from": 255,
    "label": "calls",
    "to": 271
  }, {
    "from": 255,
    "label": "calls",
    "to": 271
  }, {
    "from": 255,
    "label": "calls",
    "to": 271
  }, {
    "from": 255,
    "label": "calls",
    "to": 271
  }, {
    "from": 255,
    "label": "calls",
    "to": 271
  }, {
    "from": 255,
    "label": "calls",
    "to": 271
  }, {
    "from": 255,
    "label": "calls",
    "to": 271
  }, {
    "from": 255,
    "label": "calls",
    "to": 271
  }, {
    "from": 255,
    "label": "calls",
    "to": 8
  }, {
    "from": 255,
    "label": "calls",
    "to": 20
  }, {
    "from": 255,
    "label": "calls",
    "to": 266
  }, {
    "from": 255,
    "label": "calls",
    "to": 274
  }, {
    "from": 255,
    "label": "calls",
    "to": 16
  }, {
    "from": 255,
    "label": "calls",
    "to": 16
  }, {
    "from": 255,
    "label": "calls",
    "to": 18
  }, {
    "from": 255,
    "label": "calls",
    "to": 18
  }, {
    "from": 255,
    "label": "calls",
    "to": 18
  }, {
    "from": 255,
    "label": "calls",
    "to": 18
  }, {
    "from": 255,
    "label": "calls",
    "to": 258
  }, {
    "from": 255,
    "label": "calls",
    "to": 261
  }, {
    "from": 255,
    "label": "calls",
    "to": 12
  }, {
    "from": 255,
    "label": "calls",
    "to": 12
  }, {
    "from": 255,
    "label": "calls",
    "to": 12
  }, {
    "from": 255,
    "label": "calls",
    "to": 260
  }, {
    "from": 255,
    "label": "calls",
    "to": 14
  }, {
    "from": 24,
    "label": "calls",
    "to": 275
  }, {
    "from": 255,
    "label": "calls",
    "to": 273
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 19
  }, {
    "from": 24,
    "label": "calls",
    "to": 19
  }, {
    "from": 24,
    "label": "calls",
    "to": 19
  }, {
    "from": 255,
    "label": "calls",
    "to": 21
  }, {
    "from": 255,
    "label": "calls",
    "to": 21
  }, {
    "from": 255,
    "label": "calls",
    "to": 21
  }, {
    "from": 255,
    "label": "calls",
    "to": 262
  }, {
    "from": 49,
    "label": "calls",
    "to": 22
  }, {
    "from": 255,
    "label": "calls",
    "to": 9
  }, {
    "from": 255,
    "label": "calls",
    "to": 9
  }, {
    "from": 24,
    "label": "calls",
    "to": 272
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 276
  }, {
    "from": 24,
    "label": "calls",
    "to": 276
  }, {
    "from": 24,
    "label": "calls",
    "to": 276
  }, {
    "from": 24,
    "label": "calls",
    "to": 276
  }, {
    "from": 49,
    "label": "calls",
    "to": 276
  }, {
    "from": 49,
    "label": "calls",
    "to": 276
  }, {
    "from": 49,
    "label": "calls",
    "to": 276
  }, {
    "from": 49,
    "label": "calls",
    "to": 276
  }, {
    "from": 49,
    "label": "calls",
    "to": 276
  }, {
    "from": 255,
    "label": "calls",
    "to": 277
  }, {
    "from": 255,
    "label": "calls",
    "to": 277
  }, {
    "from": 255,
    "label": "calls",
    "to": 277
  }, {
    "from": 255,
    "label": "calls",
    "to": 277
  }, {
    "from": 255,
    "label": "calls",
    "to": 277
  }, {
    "from": 255,
    "label": "calls",
    "to": 277
  }, {
    "from": 255,
    "label": "calls",
    "to": 277
  }, {
    "from": 255,
    "label": "calls",
    "to": 23
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 255,
    "label": "calls",
    "to": 268
  }, {
    "from": 24,
    "label": "calls",
    "to": 268
  }, {
    "from": 24,
    "label": "calls",
    "to": 268
  }, {
    "from": 24,
    "label": "calls",
    "to": 268
  }, {
    "from": 49,
    "label": "calls",
    "to": 268
  }, {
    "from": 49,
    "label": "calls",
    "to": 268
  }, {
    "from": 6,
    "label": "contains",
    "to": 255
  }, {
    "from": 255,
    "label": "declares",
    "to": 24
  }, {
    "from": 255,
    "label": "declares",
    "to": 44
  }, {
    "from": 255,
    "label": "declares",
    "to": 47
  }, {
    "from": 255,
    "label": "declares",
    "to": 49
  }, {
    "from": 255,
    "label": "declares",
    "to": 69
  }, {
    "from": 255,
    "label": "declares",
    "to": 79
  }, {
    "from": 255,
    "label": "declares",
    "to": 95
  }, {
    "from": 255,
    "label": "declares",
    "to": 105
  }, {
    "from": 255,
    "label": "declares",
    "to": 112
  }, {
    "from": 255,
    "label": "declares",
    "to": 123
  }, {
    "from": 255,
    "label": "declares",
    "to": 134
  }, {
    "from": 255,
    "label": "declares",
    "to": 148
  }, {
    "from": 255,
    "label": "declares",
    "to": 157
  }, {
    "from": 255,
    "label": "declares",
    "to": 169
  }, {
    "from": 255,
    "label": "declares",
    "to": 181
  }, {
    "from": 255,
    "label": "declares",
    "to": 213
  }, {
    "from": 255,
    "label": "declares",
    "to": 238
  }, {
    "from": 6,
    "label": "contains",
    "to": 279
  }, {
    "from": 6,
    "label": "contains",
    "to": 280
  }, {
    "from": 280,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "requires",
    "to": 256
  }, {
    "from": 280,
    "label": "initializes",
    "to": 282
  }, {
    "from": 282,
    "label": "requires",
    "to": 5
  }, {
    "from": 280,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "requires",
    "to": 1
  }, {
    "from": 280,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "requires",
    "to": 3
  }, {
    "from": 280,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "requires",
    "to": 2
  }, {
    "from": 280,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "requires",
    "to": 278
  }, {
    "from": 280,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "requires",
    "to": 4
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "depends",
    "type": "module"
  }, {
    "id": 2,
    "text": "manifest",
    "type": "module"
  }, {
    "id": 3,
    "text": "package",
    "type": "module"
  }, {
    "id": 4,
    "text": "sys",
    "type": "module"
  }, {
    "id": 5,
    "text": "utils",
    "type": "module"
  }, {
    "id": 6,
    "text": "luadist",
    "type": "module"
  }, {
    "id": 7,
    "text": "function find_packages(package_names, manifest)\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n    manifest = manifest or mf.get_manifest()\r\n    assert(type(package_names) == \"table\", \"depends.find_packages: Argument 'package_names' is not a table or string.\")\r\n    assert(type(manifest) == \"table\", \"depends.find_packages: Argument 'manifest' is not a table.\")\r\n\r\n    local packages_found = {}\r\n    -- find matching packages in manifest\r\n    for _, pkg_to_find in pairs(package_names) do\r\n        local pkg_name, pkg_constraint = split_name_constraint(pkg_to_find)\r\n        pkg_name = utils.escape_magic(pkg_name):gsub(\"%%%*\",\".*\")\r\n        for _, repo_pkg in pairs(manifest) do\r\n            if string.match(repo_pkg.name, \"^\" .. pkg_name .. \"$\") and (not pkg_constraint or satisfies_constraint(repo_pkg.version, pkg_constraint)) then\r\n                table.insert(packages_found, repo_pkg)\r\n            end\r\n        end\r\n    end\r\n    return packages_found\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function is_installed(package_name, installed_pkgs, version_wanted)\r\n    assert(type(package_name) == \"string\", \"depends.is_installed: Argument 'package_name' is not a string.\")\r\n    assert(type(installed_pkgs) == \"table\", \"depends.is_installed: Argument 'installed_pkgs' is not a table.\")\r\n    assert(type(version_wanted) == \"string\" or type(version_wanted) == \"nil\", \"depends.is_installed: Argument 'version_wanted' is not a string or nil.\")\r\n\r\n    local pkg_is_installed, err = false, nil\r\n\r\n    for _, installed_pkg in pairs(installed_pkgs) do\r\n\r\n        -- check if package_name is in installed\r\n        if package_name == installed_pkg.name then\r\n\r\n            -- check if package is installed in satisfying version\r\n            if not version_wanted or satisfies_constraint(installed_pkg.version, version_wanted) then\r\n                pkg_is_installed = true\r\n                break\r\n            else\r\n                err = \"Package '\" .. package_name .. (version_wanted and \" \" .. version_wanted or \"\") .. \"' needed, but \" .. selected_or_installed(installed_pkg) .. \" at version '\" .. installed_pkg.version .. \"'.\"\r\n                break\r\n            end\r\n        end\r\n\r\n    end\r\n    return pkg_is_installed, err\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function filter_packages_by_strings(packages, strings, search_in_desc)\r\n    if type(strings) == \"string\" then strings = {strings} end\r\n    assert(type(packages) == \"table\", \"depends.filter_packages_by_strings: Argument 'packages' is not a table.\")\r\n    assert(type(strings) == \"table\", \"depends.filter_packages_by_strings: Argument 'strings' is not a string or table.\")\r\n\r\n    if #strings ~= 0 then\r\n        return utils.filter(packages,\r\n                            function (pkg)\r\n                                    for _,str in pairs(strings) do\r\n                                        local name = pkg.name .. \"-\" .. pkg.version\r\n                                        if search_in_desc then\r\n                                            name = name .. \" \" .. (pkg.desc or \"\")\r\n                                        end\r\n                                        if string.find(string.lower(name), string.lower(str), 1 ,true) ~= nil then return true end\r\n                                    end\r\n                                end)\r\n    else\r\n        return packages\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function sort_by_versions(packages)\r\n    assert(type(packages) == \"table\", \"depends.sort_by_versions: Argument 'packages' is not a table.\")\r\n    return utils.sort(packages, function (a, b) return compare_versions(a.version, b.version) end)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function sort_by_names(packages)\r\n    assert(type(packages) == \"table\", \"depends.sort_by_names: Argument 'packages' is not a table.\")\r\n    return utils.sort(packages, function (a, b)\r\n                        if a.name == b.name then\r\n                            return compare_versions(a.version, b.version)\r\n                        else\r\n                            return a.name < b.name\r\n                        end\r\n                     end)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function get_manifest(manifest_file, force_no_cache)\r\n    manifest_file = manifest_file or sys.make_path(cfg.root_dir, cfg.manifest_file)\r\n    force_no_cache = force_no_cache or false\r\n\r\n    assert(type(manifest_file) == \"string\", \"manifest.get_manifest: Argument 'manifest_file' is not a string.\")\r\n    assert(type(force_no_cache) == \"boolean\", \"manifest.get_manifest: Argument 'force_no_cache' is not a boolean.\")\r\n    manifest_file = sys.abs_path(manifest_file)\r\n\r\n    -- download new manifest to the cache if not present or cache not used or cache expired\r\n    if not sys.exists(manifest_file) or force_no_cache or not cfg.cache or utils.cache_timeout_expired(cfg.cache_timeout, manifest_file) then\r\n        local manifest_dest = sys.parent_dir(manifest_file) or sys.current_dir()\r\n        local ok, err = download_manifest(manifest_dest, cfg.repos)\r\n        if not ok then return nil, \"Error when downloading manifest: \" .. err end\r\n    end\r\n\r\n    -- load manifest from cache\r\n    local status, ret = load_manifest(manifest_file)\r\n    if not status then return nil, \"Error when loading manifest: \" .. ret end\r\n\r\n    return ret\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function get_versions_info(pkg, manifest, deploy_dir, installed)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(pkg) == \"string\", \"package.get_versions_info: Argument 'pkg' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.get_versions_info: Argument 'manifest' is not a table.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.get_versions_info: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find all available versions of package\r\n    local versions, err = retrieve_versions(pkg, manifest)\r\n    if not versions then return nil, err end\r\n\r\n    -- collect info about all retrieved versions\r\n    local infos = {}\r\n    for _, version in pairs(versions) do\r\n\r\n        local info, path_or_err\r\n        local installed_version = {}\r\n\r\n        -- find out whether this 'version' is installed so we can use it's dist.info\r\n        if type(installed) == \"table\" then installed_version = depends.find_packages(version.name .. \"-\" .. version.version, installed) end\r\n\r\n        -- get info\r\n        if #installed_version > 0 then\r\n            print(\"Using dist.info from installed \" .. version.name .. \"-\" .. version.version)\r\n            info = installed_version[1]\r\n            info.path = version.path\r\n            info.from_installed = true  -- flag that dist.info of installed package was used\r\n        else\r\n            info, path_or_err = retrieve_pkg_info(version, deploy_dir)\r\n            if not info then return nil, path_or_err end\r\n            sys.delete(path_or_err)\r\n        end\r\n        table.insert(infos, info)\r\n    end\r\n\r\n    -- found and add an implicit 'scm' version\r\n    local pkg_name = depends.split_name_constraint(pkg)\r\n    local found = depends.find_packages(pkg_name, manifest)\r\n    if #found == 0 then return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\" end\r\n    local scm_info, path_or_err = retrieve_pkg_info({name = pkg_name, version = \"scm\", path = found[1].path})\r\n    if not scm_info then return nil, path_or_err end\r\n    sys.delete(path_or_err)\r\n    scm_info.version = \"scm\"\r\n    table.insert(infos, scm_info)\r\n\r\n    local tmp_manifest = utils.deepcopy(manifest)\r\n\r\n    -- add collected info to the temp. manifest, replacing existing tables\r\n    for _, info in pairs(infos) do\r\n        local already_in_manifest = false\r\n        -- find if this version is already in manifest\r\n        for idx, pkg in ipairs(tmp_manifest) do\r\n            -- if yes, replace it\r\n            if pkg.name == info.name and pkg.version == info.version then\r\n                tmp_manifest[idx] = info\r\n                already_in_manifest = true\r\n                break\r\n            end\r\n        end\r\n        -- if not, just normally add to the manifest\r\n        if not already_in_manifest then\r\n            table.insert(tmp_manifest, info)\r\n        end\r\n    end\r\n\r\n    return tmp_manifest\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function exists(path)\r\n    assert(type(path) == \"string\", \"sys.exists: Argument 'path' is not a string.\")\r\n    local attr, err = lfs.attributes(path)\r\n    return utils.to_boolean(attr), err\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function is_file(file)\r\n    assert(type(file) == \"string\", \"sys.is_file: Argument 'file' is not a string.\")\r\n    return lfs.attributes(file, \"mode\") == \"file\"\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function get_directory(dir)\r\n    dir = dir or current_dir()\r\n    assert(type(dir) == \"string\", \"sys.get_directory: Argument 'dir' is not a string.\")\r\n    if is_dir(dir) then\r\n        return lfs.dir(dir)\r\n    else\r\n        return nil, \"Error: '\".. dir .. \"' is not a directory.\"\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function extract_name(path)\r\n    assert(type(path) == \"string\", \"sys.extract_name: Argument 'path' is not a string.\")\r\n    if is_root(path) then return path end\r\n\r\n    path = remove_trailing(path)\r\n    path = path:gsub(\"^.*\" .. path_separator(), \"\")\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function make_path(...)\r\n    -- arg is deprecated in lua 5.2 in favor of table.pack we mimic here\r\n    local arg = {n=select('#',...),...}\r\n    local parts = arg\r\n    assert(type(parts) == \"table\", \"sys.make_path: Argument 'parts' is not a table.\")\r\n\r\n    local path, err\r\n    if parts.n == 0 then\r\n        path, err = current_dir()\r\n    else\r\n        path, err = table.concat(parts, path_separator())\r\n    end\r\n    if not path then return nil, err end\r\n\r\n    -- squeeze repeated occurences of a file separator\r\n    path = path:gsub(path_separator() .. \"+\", path_separator())\r\n\r\n    -- remove unnecessary trailing path separator\r\n    path = remove_trailing(path)\r\n\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function abs_path(path)\r\n    assert(type(path) == \"string\", \"sys.get_abs_path: Argument 'path' is not a string.\")\r\n    if is_abs(path) then return path end\r\n\r\n    local cur_dir, err = current_dir()\r\n    if not cur_dir then return nil, err end\r\n\r\n    return make_path(cur_dir, path)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function delete(path)\r\n    assert(type(path) == \"string\", \"sys.delete: Argument 'path' is not a string.\")\r\n    assert(is_abs(path), \"sys.delete: Argument 'path' is not an absolute path.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if not exists(path) then\r\n            return true\r\n        elseif is_file(path) then\r\n            return os.remove(path)\r\n        else\r\n            --return exec(\"rd /S /Q \" .. quote(path))\r\n            return exec(\"move /y \" .. quote(path) .. \" \" .. quote(tmp_dir()))\r\n        end\r\n    else\r\n        return exec(\"rm -rf \" .. quote(path))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function table_tostring(tbl, label)\r\n    assert(type(tbl) == \"table\", \"utils.table_tostring: Argument 'tbl' is not a table.\")\r\n    local str = \"\"\r\n    for k,v in pairs(tbl) do\r\n        if type(v) == \"table\" then\r\n            str = str .. table_tostring(v, k)\r\n        else\r\n            if label ~= nil then\r\n                str = str .. tostring(v) .. \" [\" .. tostring(label) .. \"]\" .. \", \"\r\n            else\r\n                str = str .. tostring(v) .. \", \"\r\n            end\r\n        end\r\n    end\r\n    return str\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function make_table(str, separator)\r\n    assert(type(str) == \"string\", \"utils.make_table: Argument 'str' is not a string.\")\r\n    assert(type(separator) == \"string\", \"utils.make_table: Argument 'separator' is not a string.\")\r\n\r\n    local tbl = {}\r\n    for val in str:gmatch(\"(.-)\" .. separator) do\r\n        table.insert(tbl, val)\r\n    end\r\n    local last_val = str:gsub(\".-\" .. separator, \"\")\r\n    if last_val and last_val ~= \"\" then\r\n        table.insert(tbl, last_val)\r\n    end\r\n    return tbl\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function system_dependency_available(name, command)\r\n    assert(type(name) == \"string\", \"utils.system_dependency_available: Argument 'name' is not a string.\")\r\n    assert(type(command) == \"string\", \"utils.system_dependency_available: Argument 'command' is not a string.\")\r\n\r\n    if not sys.exec(command) then\r\n        print(\"Error: command '\" .. name .. \"' not found on system. See installation instructions at\\nhttps://github.com/LuaDist/Repository/wiki/Installation-of-System-Dependencies\")\r\n        return false\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local function run_command(deploy_dir, command, other_idx)\r\n    deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n    assert(type(deploy_dir) == \"string\", \"luadist.run_command: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(command) == \"string\", \"luadist.run_command: Argument 'command' is not a string.\")\r\n    assert(not other_idx or type(other_idx) == \"number\", \"luadist.run_command: Argument 'other_idx' is not a number.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local items = {}\r\n    local cmake_variables = {}\r\n\r\n    -- parse items after the command (and LuaDist or CMake variables)\r\n    if other_idx then\r\n        for i = other_idx, #arg do\r\n\r\n            -- CMake variable\r\n            if arg[i]:match(\"^%-D(.-)=(.*)$\") then\r\n                local variable, value = arg[i]:match(\"^%-D(.-)=(.*)$\")\r\n                cmake_variables[variable] = value\r\n\r\n            -- LuaDist variable\r\n            elseif arg[i]:match(\"^%-(.-)=(.*)$\") then\r\n                local variable, value = arg[i]:match(\"^%-(.-)=(.*)$\")\r\n                apply_settings(variable, value)\r\n\r\n            -- LuaDist boolean variable with implicit 'true' value\r\n            elseif arg[i]:match(\"^%-(.-)$\") then\r\n                local variable, value = arg[i]:match(\"^%-(.-)$\")\r\n                apply_settings(variable, \"true\")\r\n\r\n            -- not a LuaDist or CMake variable\r\n            else\r\n                table.insert(items, arg[i])\r\n            end\r\n        end\r\n    end\r\n\r\n    -- run the required LuaDist functionality\r\n    return commands[command].run(sys.abs_path(deploy_dir), items, cmake_variables)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "deploy_dir = deploy_dir or dist.get_deploy_dir()",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.run_command: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert(type(command) == \"string\", \"luadist.run_command: Argument 'command' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert(not other_idx or type(other_idx) == \"number\", \"luadist.run_command: Argument 'other_idx' is not a number.\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "deploy_dir = sys.abs_path(deploy_dir)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local items = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local cmake_variables = {}",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if other_idx then\r\n        for i = other_idx, #arg do\r\n\r\n            -- CMake variable\r\n            if arg[i]:match(\"^%-D(.-)=(.*)$\") then\r\n                local variable, value = arg[i]:match(\"^%-D(.-)=(.*)$\")\r\n                cmake_variables[variable] = value\r\n\r\n            -- LuaDist variable\r\n            elseif arg[i]:match(\"^%-(.-)=(.*)$\") then\r\n                local variable, value = arg[i]:match(\"^%-(.-)=(.*)$\")\r\n                apply_settings(variable, value)\r\n\r\n            -- LuaDist boolean variable with implicit 'true' value\r\n            elseif arg[i]:match(\"^%-(.-)$\") then\r\n                local variable, value = arg[i]:match(\"^%-(.-)$\")\r\n                apply_settings(variable, \"true\")\r\n\r\n            -- not a LuaDist or CMake variable\r\n            else\r\n                table.insert(items, arg[i])\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "for i = other_idx, #arg do\r\n\r\n            -- CMake variable\r\n            if arg[i]:match(\"^%-D(.-)=(.*)$\") then\r\n                local variable, value = arg[i]:match(\"^%-D(.-)=(.*)$\")\r\n                cmake_variables[variable] = value\r\n\r\n            -- LuaDist variable\r\n            elseif arg[i]:match(\"^%-(.-)=(.*)$\") then\r\n                local variable, value = arg[i]:match(\"^%-(.-)=(.*)$\")\r\n                apply_settings(variable, value)\r\n\r\n            -- LuaDist boolean variable with implicit 'true' value\r\n            elseif arg[i]:match(\"^%-(.-)$\") then\r\n                local variable, value = arg[i]:match(\"^%-(.-)$\")\r\n                apply_settings(variable, \"true\")\r\n\r\n            -- not a LuaDist or CMake variable\r\n            else\r\n                table.insert(items, arg[i])\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 34,
    "text": "if arg[i]:match(\"^%-D(.-)=(.*)$\") then\r\n                local variable, value = arg[i]:match(\"^%-D(.-)=(.*)$\")\r\n                cmake_variables[variable] = value\r\n\r\n            -- LuaDist variable\r\n            elseif arg[i]:match(\"^%-(.-)=(.*)$\") then\r\n                local variable, value = arg[i]:match(\"^%-(.-)=(.*)$\")\r\n                apply_settings(variable, value)\r\n\r\n            -- LuaDist boolean variable with implicit 'true' value\r\n            elseif arg[i]:match(\"^%-(.-)$\") then\r\n                local variable, value = arg[i]:match(\"^%-(.-)$\")\r\n                apply_settings(variable, \"true\")\r\n\r\n            -- not a LuaDist or CMake variable\r\n            else\r\n                table.insert(items, arg[i])\r\n            end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "local variable, value = arg[i]:match(\"^%-D(.-)=(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "cmake_variables[variable] = value",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "local variable, value = arg[i]:match(\"^%-(.-)=(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "apply_settings(variable, value)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local variable, value = arg[i]:match(\"^%-(.-)$\")",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "apply_settings(variable, \"true\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "table.insert(items, arg[i])",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function print_info()\r\n    print([[\r\nLuaDist-git ]].. cfg.version .. [[ - Lua package manager for the LuaDist deployment system.\r\nReleased under the MIT License. See https://github.com/luadist/luadist-git\r\n          ]])\r\n    return 0\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "print([[\r\nLuaDist-git ]].. cfg.version .. [[ - Lua package manager for the LuaDist deployment system.\r\nReleased under the MIT License. See https://github.com/luadist/luadist-git\r\n          ]])",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function print_help()\r\n    return run_command(nil, \"help\")\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function apply_settings(variable, value)\r\n    assert(type(variable) == \"string\", \"luadist.apply_settings: Argument 'variable' is not a string.\")\r\n    assert(type(value) == \"string\", \"luadist.apply_settings: Argument 'value' is not a string.\")\r\n\r\n    -- check whether the settings variable exists\r\n    if cfg[variable] == nil then\r\n        print(\"Unknown LuaDist configuration option: '\" .. variable .. \"'.\")\r\n        os.exit(1)\r\n\r\n    -- ensure the right type\r\n\r\n    elseif type(cfg[variable]) == \"boolean\" then\r\n        value = value:lower()\r\n        if value == \"true\" or value == \"yes\" or value == \"on\" or value == \"1\" then\r\n            value = true\r\n        elseif value == \"false\" or value == \"no\" or value == \"off\" or value == \"0\" then\r\n            value = false\r\n        else\r\n            print(\"Value of LuaDist option '\" .. variable .. \"' must be a boolean.\")\r\n            os.exit(1)\r\n        end\r\n\r\n    elseif type(cfg[variable]) == \"number\" then\r\n        value = tonumber(value)\r\n        if not value then\r\n            print(\"Value of LuaDist option '\" .. variable .. \"' must be a number.\")\r\n            os.exit(1)\r\n        end\r\n\r\n    elseif type(cfg[variable]) == \"table\" then\r\n        local err\r\n        value, err = utils.make_table(value, \",\")\r\n        if not value then\r\n            print(\"Error when parsing the LuaDist variable '\" .. variable .. \"': \" .. err)\r\n            os.exit(1)\r\n        end\r\n    end\r\n\r\n    -- set the LuaDist variable\r\n    cfg[variable] = value\r\n\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "assert(type(variable) == \"string\", \"luadist.apply_settings: Argument 'variable' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert(type(value) == \"string\", \"luadist.apply_settings: Argument 'value' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "if cfg[variable] == nil then\r\n        print(\"Unknown LuaDist configuration option: '\" .. variable .. \"'.\")\r\n        os.exit(1)\r\n\r\n    -- ensure the right type\r\n\r\n    elseif type(cfg[variable]) == \"boolean\" then\r\n        value = value:lower()\r\n        if value == \"true\" or value == \"yes\" or value == \"on\" or value == \"1\" then\r\n            value = true\r\n        elseif value == \"false\" or value == \"no\" or value == \"off\" or value == \"0\" then\r\n            value = false\r\n        else\r\n            print(\"Value of LuaDist option '\" .. variable .. \"' must be a boolean.\")\r\n            os.exit(1)\r\n        end\r\n\r\n    elseif type(cfg[variable]) == \"number\" then\r\n        value = tonumber(value)\r\n        if not value then\r\n            print(\"Value of LuaDist option '\" .. variable .. \"' must be a number.\")\r\n            os.exit(1)\r\n        end\r\n\r\n    elseif type(cfg[variable]) == \"table\" then\r\n        local err\r\n        value, err = utils.make_table(value, \",\")\r\n        if not value then\r\n            print(\"Error when parsing the LuaDist variable '\" .. variable .. \"': \" .. err)\r\n            os.exit(1)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "print(\"Unknown LuaDist configuration option: '\" .. variable .. \"'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "value = value:lower()",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if value == \"true\" or value == \"yes\" or value == \"on\" or value == \"1\" then\r\n            value = true\r\n        elseif value == \"false\" or value == \"no\" or value == \"off\" or value == \"0\" then\r\n            value = false\r\n        else\r\n            print(\"Value of LuaDist option '\" .. variable .. \"' must be a boolean.\")\r\n            os.exit(1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "value = true",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "value = false",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "print(\"Value of LuaDist option '\" .. variable .. \"' must be a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "value = tonumber(value)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if not value then\r\n            print(\"Value of LuaDist option '\" .. variable .. \"' must be a number.\")\r\n            os.exit(1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "print(\"Value of LuaDist option '\" .. variable .. \"' must be a number.\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "value, err = utils.make_table(value, \",\")",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if not value then\r\n            print(\"Error when parsing the LuaDist variable '\" .. variable .. \"': \" .. err)\r\n            os.exit(1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "print(\"Error when parsing the LuaDist variable '\" .. variable .. \"': \" .. err)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "cfg[variable] = value",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function (deploy_dir, help_item)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            help_item = help_item or {}\r\n            assert(type(deploy_dir) == \"string\", \"luadist.help: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(help_item) == \"table\", \"luadist.help: Argument 'help_item' is not a table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            if not help_item or not commands[help_item[1]] then\r\n                help_item = \"help\"\r\n            else\r\n                help_item = help_item[1]\r\n            end\r\n\r\n            print_info()\r\n            print(commands[help_item].help)\r\n            return 0\r\n        end",
    "type": "function"
  }, {
    "id": 70,
    "text": "help_item = help_item or {}",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.help: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert(type(help_item) == \"table\", \"luadist.help: Argument 'help_item' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if not help_item or not commands[help_item[1]] then\r\n                help_item = \"help\"\r\n            else\r\n                help_item = help_item[1]\r\n            end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "help_item = \"help\"",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "help_item = help_item[1]",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "print_info()",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "print(commands[help_item].help)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function (deploy_dir, modules, cmake_variables)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            if type(modules) == \"string\" then modules = {modules} end\r\n            cmake_variables = cmake_variables or {}\r\n            assert(type(deploy_dir) == \"string\", \"luadist.install: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(modules) == \"table\", \"luadist.install: Argument 'modules' is not a string or table.\")\r\n            assert(type(cmake_variables) == \"table\", \"luadist.install: Argument 'cmake_variables' is not a table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            if cfg.simulate then\r\n                print(\"NOTE: this is just simulation.\")\r\n            end\r\n\r\n            if #modules == 0 then\r\n                print(\"No modules to install specified.\")\r\n                return 0\r\n            end\r\n\r\n            local ok, err = dist.install(modules, deploy_dir, cmake_variables)\r\n            if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print((cfg.simulate and \"Simulated installation\" or \"Installation\") .. \" successful.\")\r\n               return 0\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 80,
    "text": "if type(modules) == \"string\" then modules = {modules} end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "modules = {modules}",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "cmake_variables = cmake_variables or {}",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.install: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "assert(type(modules) == \"table\", \"luadist.install: Argument 'modules' is not a string or table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert(type(cmake_variables) == \"table\", \"luadist.install: Argument 'cmake_variables' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "if cfg.simulate then\r\n                print(\"NOTE: this is just simulation.\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "print(\"NOTE: this is just simulation.\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "if #modules == 0 then\r\n                print(\"No modules to install specified.\")\r\n                return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "print(\"No modules to install specified.\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local ok, err = dist.install(modules, deploy_dir, cmake_variables)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print((cfg.simulate and \"Simulated installation\" or \"Installation\") .. \" successful.\")\r\n               return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "print(err)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "print((cfg.simulate and \"Simulated installation\" or \"Installation\") .. \" successful.\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function (deploy_dir, modules, cmake_variables)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            if type(modules) == \"string\" then modules = {modules} end\r\n            cmake_variables = cmake_variables or {}\r\n            assert(type(deploy_dir) == \"string\", \"luadist.update: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(modules) == \"table\", \"luadist.update: Argument 'modules' is not a string or table.\")\r\n            assert(type(cmake_variables) == \"table\", \"luadist.update: Argument 'cmake_variables' is not a table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            if cfg.simulate then\r\n                print(\"NOTE: this is just simulation.\")\r\n            end\r\n\r\n            if #modules == 0 then\r\n                print(\"No modules to update specified.\")\r\n                return 0\r\n            end\r\n\r\n            local ok, err = dist.update(modules, deploy_dir, cmake_variables)\r\n            if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print((cfg.simulate and \"Simulated update\" or \"Update\") .. \" successful.\")\r\n               return 0\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 96,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.update: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert(type(modules) == \"table\", \"luadist.update: Argument 'modules' is not a string or table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert(type(cmake_variables) == \"table\", \"luadist.update: Argument 'cmake_variables' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "if #modules == 0 then\r\n                print(\"No modules to update specified.\")\r\n                return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "print(\"No modules to update specified.\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local ok, err = dist.update(modules, deploy_dir, cmake_variables)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print((cfg.simulate and \"Simulated update\" or \"Update\") .. \" successful.\")\r\n               return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "print((cfg.simulate and \"Simulated update\" or \"Update\") .. \" successful.\")",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function (deploy_dir, modules)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            if type(modules) == \"string\" then modules = {modules} end\r\n            assert(type(deploy_dir) == \"string\", \"luadist.remove: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(modules) == \"table\", \"luadist.remove: Argument 'modules' is not a string or table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            local num, err = dist.remove(modules, deploy_dir)\r\n            if not num then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print(\"Removed modules: \" .. num)\r\n               return 0\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 106,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.remove: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert(type(modules) == \"table\", \"luadist.remove: Argument 'modules' is not a string or table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "local num, err = dist.remove(modules, deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if not num then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print(\"Removed modules: \" .. num)\r\n               return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "print(\"Removed modules: \" .. num)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function (deploy_dir)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            assert(type(deploy_dir) == \"string\", \"luadist.refresh: Argument 'deploy_dir' is not a string.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            -- TODO: should be deleting the dep_manifest decoupled from refreshing the repository info?\r\n            -- delete cached dependency manifest\r\n            local dep_manifest_file = sys.abs_path(sys.make_path(deploy_dir, cfg.dep_cache_file))\r\n            local dep_mf_deleted = false\r\n            if sys.exists(dep_manifest_file) then\r\n                sys.delete(dep_manifest_file)\r\n                dep_mf_deleted = true\r\n            end\r\n\r\n            -- refresh repository information\r\n            local ok, err = dist.update_manifest(deploy_dir)\r\n            if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print(\"Repositories successfuly updated\" .. (dep_mf_deleted and \" and dependency cache deleted\" or \"\") .. \".\")\r\n               return 0\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 113,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.refresh: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "local dep_manifest_file = sys.abs_path(sys.make_path(deploy_dir, cfg.dep_cache_file))",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "local dep_mf_deleted = false",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if sys.exists(dep_manifest_file) then\r\n                sys.delete(dep_manifest_file)\r\n                dep_mf_deleted = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "sys.delete(dep_manifest_file)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "dep_mf_deleted = true",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "local ok, err = dist.update_manifest(deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print(\"Repositories successfuly updated\" .. (dep_mf_deleted and \" and dependency cache deleted\" or \"\") .. \".\")\r\n               return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "print(\"Repositories successfuly updated\" .. (dep_mf_deleted and \" and dependency cache deleted\" or \"\") .. \".\")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function (deploy_dir, module_paths, cmake_variables)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            module_paths = module_paths or {}\r\n            cmake_variables = cmake_variables or {}\r\n            assert(type(deploy_dir) == \"string\", \"luadist.make: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(module_paths) == \"table\", \"luadist.make: Argument 'module_paths' is not a table.\")\r\n            assert(type(cmake_variables) == \"table\", \"luadist.make: Argument 'cmake_variables' is not a table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            if cfg.simulate then\r\n                print(\"NOTE: this is just simulation.\")\r\n            end\r\n\r\n            if #module_paths == 0 then\r\n                print(\"No module paths to deploy specified.\")\r\n                return 0\r\n            end\r\n\r\n            local ok, err = dist.make(deploy_dir, module_paths, cmake_variables)\r\n            if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            end\r\n            print((cfg.simulate and \"Simulated deployment\" or \"Deployment\") .. \" successful.\")\r\n            return 0\r\n        end",
    "type": "function"
  }, {
    "id": 124,
    "text": "module_paths = module_paths or {}",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.make: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert(type(module_paths) == \"table\", \"luadist.make: Argument 'module_paths' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "assert(type(cmake_variables) == \"table\", \"luadist.make: Argument 'cmake_variables' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "if #module_paths == 0 then\r\n                print(\"No module paths to deploy specified.\")\r\n                return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "print(\"No module paths to deploy specified.\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local ok, err = dist.make(deploy_dir, module_paths, cmake_variables)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "print((cfg.simulate and \"Simulated deployment\" or \"Deployment\") .. \" successful.\")",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function (fetch_dir, modules)\r\n            fetch_dir = fetch_dir or dist.get_deploy_dir()\r\n            modules = modules or {}\r\n            assert(type(fetch_dir) == \"string\", \"luadist.fetch: Argument 'fetch_dir' is not a string.\")\r\n            assert(type(modules) == \"table\", \"luadist.fetch: Argument 'modules' is not a table.\")\r\n            fetch_dir = sys.abs_path(fetch_dir)\r\n\r\n            -- if the default parameter (i.e. deploy_dir) is passed, use the default temp_dir\r\n            if fetch_dir == dist.get_deploy_dir() then\r\n                fetch_dir = sys.make_path(fetch_dir, cfg.temp_dir)\r\n            end\r\n\r\n            if #modules == 0 then\r\n                print(\"No modules to download specified.\")\r\n                return 0\r\n            end\r\n\r\n            local ok, err = dist.fetch(modules, fetch_dir)\r\n            if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n                print(\"Modules successfuly downloaded to '\" .. fetch_dir .. \"'.\")\r\n                return 0\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 135,
    "text": "fetch_dir = fetch_dir or dist.get_deploy_dir()",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "modules = modules or {}",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "assert(type(fetch_dir) == \"string\", \"luadist.fetch: Argument 'fetch_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "assert(type(modules) == \"table\", \"luadist.fetch: Argument 'modules' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "fetch_dir = sys.abs_path(fetch_dir)",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "if fetch_dir == dist.get_deploy_dir() then\r\n                fetch_dir = sys.make_path(fetch_dir, cfg.temp_dir)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "fetch_dir = sys.make_path(fetch_dir, cfg.temp_dir)",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "if #modules == 0 then\r\n                print(\"No modules to download specified.\")\r\n                return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "print(\"No modules to download specified.\")",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "local ok, err = dist.fetch(modules, fetch_dir)",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "if not ok then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n                print(\"Modules successfuly downloaded to '\" .. fetch_dir .. \"'.\")\r\n                return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "print(\"Modules successfuly downloaded to '\" .. fetch_dir .. \"'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function (deploy_dir, modules)\r\n            -- check if we have git\r\n            local ok = utils.system_dependency_available(\"git\", \"git --version\")\r\n            if not ok then os.exit(1) end\r\n\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            if type(modules) == \"string\" then modules = {modules} end\r\n            assert(type(deploy_dir) == \"string\", \"luadist.upload: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(modules) == \"table\", \"luadist.upload: Argument 'modules' is not a string or table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            local num, err = dist.upload_modules(deploy_dir, modules, cfg.upload_url)\r\n            if not num then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print(\"Uploaded modules: \" .. num)\r\n               return 0\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 149,
    "text": "local ok = utils.system_dependency_available(\"git\", \"git --version\")",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "if not ok then os.exit(1) end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.upload: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "assert(type(modules) == \"table\", \"luadist.upload: Argument 'modules' is not a string or table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "local num, err = dist.upload_modules(deploy_dir, modules, cfg.upload_url)",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if not num then\r\n                print(err)\r\n                os.exit(1)\r\n            else\r\n               print(\"Uploaded modules: \" .. num)\r\n               return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "print(\"Uploaded modules: \" .. num)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function (deploy_dir, strings)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            strings = strings or {}\r\n            assert(type(deploy_dir) == \"string\", \"luadist.list: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(strings) == \"table\", \"luadist.list: Argument 'strings' is not a table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            local deployed = dist.get_deployed(deploy_dir)\r\n            deployed  = depends.filter_packages_by_strings(deployed, strings)\r\n\r\n            print(\"\\nInstalled modules:\")\r\n            print(\"==================\\n\")\r\n            for _, pkg in pairs(deployed) do\r\n                print(\"  \" .. pkg.name .. \"-\" .. pkg.version .. \"\\t(\" .. pkg.arch .. \"-\" .. pkg.type .. \")\" .. (pkg.provided_by and \"\\t [provided by \" .. pkg.provided_by .. \"]\" or \"\"))\r\n            end\r\n            print()\r\n            return 0\r\n        end",
    "type": "function"
  }, {
    "id": 158,
    "text": "strings = strings or {}",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.list: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "assert(type(strings) == \"table\", \"luadist.list: Argument 'strings' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "local deployed = dist.get_deployed(deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "deployed  = depends.filter_packages_by_strings(deployed, strings)",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "print(\"\\nInstalled modules:\")",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "print(\"==================\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "for _, pkg in pairs(deployed) do\r\n                print(\"  \" .. pkg.name .. \"-\" .. pkg.version .. \"\\t(\" .. pkg.arch .. \"-\" .. pkg.type .. \")\" .. (pkg.provided_by and \"\\t [provided by \" .. pkg.provided_by .. \"]\" or \"\"))\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 166,
    "text": "print(\"  \" .. pkg.name .. \"-\" .. pkg.version .. \"\\t(\" .. pkg.arch .. \"-\" .. pkg.type .. \")\" .. (pkg.provided_by and \"\\t [provided by \" .. pkg.provided_by .. \"]\" or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function (deploy_dir, strings)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            strings = strings or {}\r\n            assert(type(deploy_dir) == \"string\", \"luadist.search: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(strings) == \"table\", \"luadist.search: Argument 'strings' is not a table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            local available, err = mf.get_manifest()\r\n            if not available then\r\n                print(err)\r\n                os.exit(1)\r\n            end\r\n\r\n            available = depends.filter_packages_by_strings(available, strings)\r\n            available = depends.sort_by_names(available)\r\n\r\n            print(\"\\nModules found:\")\r\n            print(\"==============\\n\")\r\n            for _, pkg in pairs(available) do\r\n                print(\"  \" .. pkg.name)\r\n            end\r\n            print()\r\n            return 0\r\n        end",
    "type": "function"
  }, {
    "id": 170,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.search: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "assert(type(strings) == \"table\", \"luadist.search: Argument 'strings' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "local available, err = mf.get_manifest()",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "if not available then\r\n                print(err)\r\n                os.exit(1)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "available = depends.filter_packages_by_strings(available, strings)",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "available = depends.sort_by_names(available)",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "print(\"\\nModules found:\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "print(\"==============\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "for _, pkg in pairs(available) do\r\n                print(\"  \" .. pkg.name)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 179,
    "text": "print(\"  \" .. pkg.name)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function (deploy_dir, modules)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            modules = modules or {}\r\n            assert(type(deploy_dir) == \"string\", \"luadist.info: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(modules) == \"table\", \"luadist.info: Argument 'modules' is not a table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            local manifest, err = mf.get_manifest()\r\n            if not manifest then\r\n                print(err)\r\n                os.exit(1)\r\n            end\r\n\r\n            -- if no packages specified explicitly, show just info from .gitmodules for all packages available\r\n            if #modules == 0 then\r\n\r\n                modules = manifest\r\n                modules = depends.sort_by_names(modules)\r\n                local deployed = dist.get_deployed(deploy_dir)\r\n\r\n                print(\"\")\r\n                for _, pkg in pairs(modules) do\r\n                    print(\"  \" .. pkg.name)\r\n                    print(\"  Repository url: \" .. (pkg.path or \"N/A\"))\r\n                    print()\r\n                end\r\n                return 0\r\n\r\n            -- if some packages explicitly specified, retrieve and show detailed info about them\r\n            else\r\n\r\n                if #modules > 5 then\r\n                    print(\"NOTE: More than 5 modules specified - operation may take a longer time.\")\r\n                end\r\n\r\n                local deployed = dist.get_deployed(deploy_dir)\r\n\r\n                for _, module in pairs(modules) do\r\n                    manifest, err = package.get_versions_info(module, manifest, deploy_dir, deployed)\r\n                    if not manifest then\r\n                        print(err)\r\n                        os.exit(1)\r\n                    end\r\n                end\r\n\r\n                modules = depends.find_packages(modules, manifest)\r\n                modules = depends.sort_by_names(modules)\r\n\r\n                print(\"\")\r\n                for _, pkg in pairs(modules) do\r\n                    print(\"  \" .. pkg.name .. \"-\" .. pkg.version .. \"  (\" .. pkg.arch .. \"-\" .. pkg.type ..\")\" .. (pkg.from_installed and \"  [info taken from installed version]\" or \"\"))\r\n                    print(\"  Description: \" .. (pkg.desc or \"N/A\"))\r\n                    print(\"  Author: \" .. (pkg.author or \"N/A\"))\r\n                    print(\"  Homepage: \" .. (pkg.url or \"N/A\"))\r\n                    print(\"  License: \" .. (pkg.license or \"N/A\"))\r\n                    print(\"  Repository url: \" .. (pkg.path or \"N/A\"))\r\n                    print(\"  Maintainer: \" .. (pkg.maintainer or \"N/A\"))\r\n                    if pkg.provides then print(\"  Provides: \" .. utils.table_tostring(pkg.provides)) end\r\n                    if pkg.depends then print(\"  Depends: \" .. utils.table_tostring(pkg.depends)) end\r\n                    if pkg.conflicts then print(\"  Conflicts: \" .. utils.table_tostring(pkg.conflicts)) end\r\n                    print(\"  State: \" .. (depends.is_installed(pkg.name, deployed, pkg.version) and \"installed\" or \"not installed\"))\r\n                    print()\r\n                end\r\n                return 0\r\n            end\r\n\r\n        end",
    "type": "function"
  }, {
    "id": 182,
    "text": "assert(type(deploy_dir) == \"string\", \"luadist.info: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "assert(type(modules) == \"table\", \"luadist.info: Argument 'modules' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "local manifest, err = mf.get_manifest()",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "if not manifest then\r\n                print(err)\r\n                os.exit(1)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "if #modules == 0 then\r\n\r\n                modules = manifest\r\n                modules = depends.sort_by_names(modules)\r\n                local deployed = dist.get_deployed(deploy_dir)\r\n\r\n                print(\"\")\r\n                for _, pkg in pairs(modules) do\r\n                    print(\"  \" .. pkg.name)\r\n                    print(\"  Repository url: \" .. (pkg.path or \"N/A\"))\r\n                    print()\r\n                end\r\n                return 0\r\n\r\n            -- if some packages explicitly specified, retrieve and show detailed info about them\r\n            else\r\n\r\n                if #modules > 5 then\r\n                    print(\"NOTE: More than 5 modules specified - operation may take a longer time.\")\r\n                end\r\n\r\n                local deployed = dist.get_deployed(deploy_dir)\r\n\r\n                for _, module in pairs(modules) do\r\n                    manifest, err = package.get_versions_info(module, manifest, deploy_dir, deployed)\r\n                    if not manifest then\r\n                        print(err)\r\n                        os.exit(1)\r\n                    end\r\n                end\r\n\r\n                modules = depends.find_packages(modules, manifest)\r\n                modules = depends.sort_by_names(modules)\r\n\r\n                print(\"\")\r\n                for _, pkg in pairs(modules) do\r\n                    print(\"  \" .. pkg.name .. \"-\" .. pkg.version .. \"  (\" .. pkg.arch .. \"-\" .. pkg.type ..\")\" .. (pkg.from_installed and \"  [info taken from installed version]\" or \"\"))\r\n                    print(\"  Description: \" .. (pkg.desc or \"N/A\"))\r\n                    print(\"  Author: \" .. (pkg.author or \"N/A\"))\r\n                    print(\"  Homepage: \" .. (pkg.url or \"N/A\"))\r\n                    print(\"  License: \" .. (pkg.license or \"N/A\"))\r\n                    print(\"  Repository url: \" .. (pkg.path or \"N/A\"))\r\n                    print(\"  Maintainer: \" .. (pkg.maintainer or \"N/A\"))\r\n                    if pkg.provides then print(\"  Provides: \" .. utils.table_tostring(pkg.provides)) end\r\n                    if pkg.depends then print(\"  Depends: \" .. utils.table_tostring(pkg.depends)) end\r\n                    if pkg.conflicts then print(\"  Conflicts: \" .. utils.table_tostring(pkg.conflicts)) end\r\n                    print(\"  State: \" .. (depends.is_installed(pkg.name, deployed, pkg.version) and \"installed\" or \"not installed\"))\r\n                    print()\r\n                end\r\n                return 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "modules = manifest",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "modules = depends.sort_by_names(modules)",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "print(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "for _, pkg in pairs(modules) do\r\n                    print(\"  \" .. pkg.name)\r\n                    print(\"  Repository url: \" .. (pkg.path or \"N/A\"))\r\n                    print()\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 191,
    "text": "print(\"  Repository url: \" .. (pkg.path or \"N/A\"))",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "if #modules > 5 then\r\n                    print(\"NOTE: More than 5 modules specified - operation may take a longer time.\")\r\n                end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "print(\"NOTE: More than 5 modules specified - operation may take a longer time.\")",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "for _, module in pairs(modules) do\r\n                    manifest, err = package.get_versions_info(module, manifest, deploy_dir, deployed)\r\n                    if not manifest then\r\n                        print(err)\r\n                        os.exit(1)\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 195,
    "text": "manifest, err = package.get_versions_info(module, manifest, deploy_dir, deployed)",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "if not manifest then\r\n                        print(err)\r\n                        os.exit(1)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "modules = depends.find_packages(modules, manifest)",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "for _, pkg in pairs(modules) do\r\n                    print(\"  \" .. pkg.name .. \"-\" .. pkg.version .. \"  (\" .. pkg.arch .. \"-\" .. pkg.type ..\")\" .. (pkg.from_installed and \"  [info taken from installed version]\" or \"\"))\r\n                    print(\"  Description: \" .. (pkg.desc or \"N/A\"))\r\n                    print(\"  Author: \" .. (pkg.author or \"N/A\"))\r\n                    print(\"  Homepage: \" .. (pkg.url or \"N/A\"))\r\n                    print(\"  License: \" .. (pkg.license or \"N/A\"))\r\n                    print(\"  Repository url: \" .. (pkg.path or \"N/A\"))\r\n                    print(\"  Maintainer: \" .. (pkg.maintainer or \"N/A\"))\r\n                    if pkg.provides then print(\"  Provides: \" .. utils.table_tostring(pkg.provides)) end\r\n                    if pkg.depends then print(\"  Depends: \" .. utils.table_tostring(pkg.depends)) end\r\n                    if pkg.conflicts then print(\"  Conflicts: \" .. utils.table_tostring(pkg.conflicts)) end\r\n                    print(\"  State: \" .. (depends.is_installed(pkg.name, deployed, pkg.version) and \"installed\" or \"not installed\"))\r\n                    print()\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 199,
    "text": "print(\"  \" .. pkg.name .. \"-\" .. pkg.version .. \"  (\" .. pkg.arch .. \"-\" .. pkg.type ..\")\" .. (pkg.from_installed and \"  [info taken from installed version]\" or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "print(\"  Description: \" .. (pkg.desc or \"N/A\"))",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "print(\"  Author: \" .. (pkg.author or \"N/A\"))",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "print(\"  Homepage: \" .. (pkg.url or \"N/A\"))",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "print(\"  License: \" .. (pkg.license or \"N/A\"))",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "print(\"  Maintainer: \" .. (pkg.maintainer or \"N/A\"))",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "if pkg.provides then print(\"  Provides: \" .. utils.table_tostring(pkg.provides)) end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "print(\"  Provides: \" .. utils.table_tostring(pkg.provides))",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "if pkg.depends then print(\"  Depends: \" .. utils.table_tostring(pkg.depends)) end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "print(\"  Depends: \" .. utils.table_tostring(pkg.depends))",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "if pkg.conflicts then print(\"  Conflicts: \" .. utils.table_tostring(pkg.conflicts)) end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "print(\"  Conflicts: \" .. utils.table_tostring(pkg.conflicts))",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "print(\"  State: \" .. (depends.is_installed(pkg.name, deployed, pkg.version) and \"installed\" or \"not installed\"))",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function (deploy_dir, modules)\r\n            deploy_dir = deploy_dir or dist.get_deploy_dir()\r\n            modules = modules or {}\r\n            assert(type(deploy_dir) == \"string\", \"luadist.info: Argument 'deploy_dir' is not a string.\")\r\n            assert(type(modules) == \"table\", \"luadist.info: Argument 'modules' is not a table.\")\r\n            deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n            local manifest, err = mf.get_manifest()\r\n            if not manifest then\r\n                print(err)\r\n                os.exit(1)\r\n            end\r\n\r\n            -- if no modules specified explicitly, assume all modules\r\n            if #modules == 0 then modules = depends.sort_by_names(manifest) end\r\n            print(\"Getting dependency information... (this may take a lot of time)\")\r\n\r\n            for _, module in pairs(modules) do\r\n\r\n                -- if all modules are being queried, extract the name\r\n                if type(module) == \"table\" then module = module.name end\r\n\r\n                local dep_manifest, err = dist.dependency_info(module, deploy_dir)\r\n                if not dep_manifest then\r\n                    print(err)\r\n                    os.exit(1)\r\n                else\r\n\r\n                    -- print the dependency tree\r\n                    local heading = \"Dependency tree for '\" .. module .. \"' (on \" .. cfg.arch .. \"-\" .. cfg.type .. \"):\"\r\n                    print(\"\\n\" .. heading .. \"\")\r\n                    print(string.rep(\"=\", #heading) .. \"\\n\")\r\n\r\n                    for _, pkg in pairs(dep_manifest) do\r\n\r\n                        local pkg_version, pkg_tag = pkg.version, pkg.version\r\n                        if pkg.was_scm_version then\r\n                            pkg_version, pkg_tag = \"scm\", \"HEAD\"\r\n                        end\r\n                        print(\"  \" .. pkg.name .. \"-\" .. pkg_version .. \" (\" .. pkg.path .. \", \" .. pkg_tag .. \")\")\r\n                        if pkg.depends then\r\n                            for _, dep in pairs(pkg.depends) do\r\n                                if type(dep) ~= \"table\" then\r\n                                    local found = depends.sort_by_versions(depends.find_packages(dep, dep_manifest))[1]\r\n                                    if not found then\r\n                                        print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")\r\n                                        os.exit(1)\r\n                                    end\r\n                                    print(\"    * \" .. found.name .. \"-\" .. found.version .. \" (\" .. found.path .. \", \" .. found.version .. \")\")\r\n                                end\r\n                            end\r\n                        end\r\n                        print()\r\n                    end\r\n\r\n                end\r\n            end\r\n            return 0\r\n\r\n        end",
    "type": "function"
  }, {
    "id": 214,
    "text": "if #modules == 0 then modules = depends.sort_by_names(manifest) end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "modules = depends.sort_by_names(manifest)",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "print(\"Getting dependency information... (this may take a lot of time)\")",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "for _, module in pairs(modules) do\r\n\r\n                -- if all modules are being queried, extract the name\r\n                if type(module) == \"table\" then module = module.name end\r\n\r\n                local dep_manifest, err = dist.dependency_info(module, deploy_dir)\r\n                if not dep_manifest then\r\n                    print(err)\r\n                    os.exit(1)\r\n                else\r\n\r\n                    -- print the dependency tree\r\n                    local heading = \"Dependency tree for '\" .. module .. \"' (on \" .. cfg.arch .. \"-\" .. cfg.type .. \"):\"\r\n                    print(\"\\n\" .. heading .. \"\")\r\n                    print(string.rep(\"=\", #heading) .. \"\\n\")\r\n\r\n                    for _, pkg in pairs(dep_manifest) do\r\n\r\n                        local pkg_version, pkg_tag = pkg.version, pkg.version\r\n                        if pkg.was_scm_version then\r\n                            pkg_version, pkg_tag = \"scm\", \"HEAD\"\r\n                        end\r\n                        print(\"  \" .. pkg.name .. \"-\" .. pkg_version .. \" (\" .. pkg.path .. \", \" .. pkg_tag .. \")\")\r\n                        if pkg.depends then\r\n                            for _, dep in pairs(pkg.depends) do\r\n                                if type(dep) ~= \"table\" then\r\n                                    local found = depends.sort_by_versions(depends.find_packages(dep, dep_manifest))[1]\r\n                                    if not found then\r\n                                        print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")\r\n                                        os.exit(1)\r\n                                    end\r\n                                    print(\"    * \" .. found.name .. \"-\" .. found.version .. \" (\" .. found.path .. \", \" .. found.version .. \")\")\r\n                                end\r\n                            end\r\n                        end\r\n                        print()\r\n                    end\r\n\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 218,
    "text": "if type(module) == \"table\" then module = module.name end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "module = module.name",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "local dep_manifest, err = dist.dependency_info(module, deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "if not dep_manifest then\r\n                    print(err)\r\n                    os.exit(1)\r\n                else\r\n\r\n                    -- print the dependency tree\r\n                    local heading = \"Dependency tree for '\" .. module .. \"' (on \" .. cfg.arch .. \"-\" .. cfg.type .. \"):\"\r\n                    print(\"\\n\" .. heading .. \"\")\r\n                    print(string.rep(\"=\", #heading) .. \"\\n\")\r\n\r\n                    for _, pkg in pairs(dep_manifest) do\r\n\r\n                        local pkg_version, pkg_tag = pkg.version, pkg.version\r\n                        if pkg.was_scm_version then\r\n                            pkg_version, pkg_tag = \"scm\", \"HEAD\"\r\n                        end\r\n                        print(\"  \" .. pkg.name .. \"-\" .. pkg_version .. \" (\" .. pkg.path .. \", \" .. pkg_tag .. \")\")\r\n                        if pkg.depends then\r\n                            for _, dep in pairs(pkg.depends) do\r\n                                if type(dep) ~= \"table\" then\r\n                                    local found = depends.sort_by_versions(depends.find_packages(dep, dep_manifest))[1]\r\n                                    if not found then\r\n                                        print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")\r\n                                        os.exit(1)\r\n                                    end\r\n                                    print(\"    * \" .. found.name .. \"-\" .. found.version .. \" (\" .. found.path .. \", \" .. found.version .. \")\")\r\n                                end\r\n                            end\r\n                        end\r\n                        print()\r\n                    end\r\n\r\n                end",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "local heading = \"Dependency tree for '\" .. module .. \"' (on \" .. cfg.arch .. \"-\" .. cfg.type .. \"):\"",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "print(\"\\n\" .. heading .. \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "print(string.rep(\"=\", #heading) .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "for _, pkg in pairs(dep_manifest) do\r\n\r\n                        local pkg_version, pkg_tag = pkg.version, pkg.version\r\n                        if pkg.was_scm_version then\r\n                            pkg_version, pkg_tag = \"scm\", \"HEAD\"\r\n                        end\r\n                        print(\"  \" .. pkg.name .. \"-\" .. pkg_version .. \" (\" .. pkg.path .. \", \" .. pkg_tag .. \")\")\r\n                        if pkg.depends then\r\n                            for _, dep in pairs(pkg.depends) do\r\n                                if type(dep) ~= \"table\" then\r\n                                    local found = depends.sort_by_versions(depends.find_packages(dep, dep_manifest))[1]\r\n                                    if not found then\r\n                                        print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")\r\n                                        os.exit(1)\r\n                                    end\r\n                                    print(\"    * \" .. found.name .. \"-\" .. found.version .. \" (\" .. found.path .. \", \" .. found.version .. \")\")\r\n                                end\r\n                            end\r\n                        end\r\n                        print()\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 226,
    "text": "local pkg_version, pkg_tag = pkg.version, pkg.version",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "if pkg.was_scm_version then\r\n                            pkg_version, pkg_tag = \"scm\", \"HEAD\"\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "pkg_version, pkg_tag = \"scm\", \"HEAD\"",
    "type": "statement:assign"
  }, {
    "id": 229,
    "text": "print(\"  \" .. pkg.name .. \"-\" .. pkg_version .. \" (\" .. pkg.path .. \", \" .. pkg_tag .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "if pkg.depends then\r\n                            for _, dep in pairs(pkg.depends) do\r\n                                if type(dep) ~= \"table\" then\r\n                                    local found = depends.sort_by_versions(depends.find_packages(dep, dep_manifest))[1]\r\n                                    if not found then\r\n                                        print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")\r\n                                        os.exit(1)\r\n                                    end\r\n                                    print(\"    * \" .. found.name .. \"-\" .. found.version .. \" (\" .. found.path .. \", \" .. found.version .. \")\")\r\n                                end\r\n                            end\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "for _, dep in pairs(pkg.depends) do\r\n                                if type(dep) ~= \"table\" then\r\n                                    local found = depends.sort_by_versions(depends.find_packages(dep, dep_manifest))[1]\r\n                                    if not found then\r\n                                        print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")\r\n                                        os.exit(1)\r\n                                    end\r\n                                    print(\"    * \" .. found.name .. \"-\" .. found.version .. \" (\" .. found.path .. \", \" .. found.version .. \")\")\r\n                                end\r\n                            end",
    "type": "statement:genericfor"
  }, {
    "id": 232,
    "text": "if type(dep) ~= \"table\" then\r\n                                    local found = depends.sort_by_versions(depends.find_packages(dep, dep_manifest))[1]\r\n                                    if not found then\r\n                                        print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")\r\n                                        os.exit(1)\r\n                                    end\r\n                                    print(\"    * \" .. found.name .. \"-\" .. found.version .. \" (\" .. found.path .. \", \" .. found.version .. \")\")\r\n                                end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "local found = depends.sort_by_versions(depends.find_packages(dep, dep_manifest))[1]",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "if not found then\r\n                                        print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")\r\n                                        os.exit(1)\r\n                                    end",
    "type": "statement:if"
  }, {
    "id": 235,
    "text": "print(\"Could not find the dependency '\" .. dep .. \"' in the dependency manifest.\")",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "print(\"    * \" .. found.name .. \"-\" .. found.version .. \" (\" .. found.path .. \", \" .. found.version .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "function (test_dir)\r\n            test_dir = test_dir or dist.get_deploy_dir()\r\n            assert(type(test_dir) == \"string\", \"luadist.selftest: Argument 'deploy_dir' is not a string.\")\r\n            test_dir = sys.abs_path(test_dir)\r\n\r\n            -- if the default parameter (i.e. deploy_dir) is passed, use the default test_dir\r\n            if test_dir == dist.get_deploy_dir() then\r\n                test_dir = sys.make_path(test_dir, cfg.test_dir)\r\n            end\r\n\r\n            -- try to get an iterator over test files and check it\r\n            local test_iterator, err = sys.get_directory(test_dir)\r\n            if not test_iterator then\r\n                print(\"Running tests from '\" .. test_dir .. \"' failed: \" .. err)\r\n                os.exit(1)\r\n            end\r\n\r\n            -- run the tests\r\n            print(\"\\nRunning tests:\")\r\n            print(\"==============\")\r\n            for test_file in sys.get_directory(test_dir) do\r\n                test_file = sys.make_path(test_dir, test_file)\r\n                if sys.is_file(test_file) then\r\n                    print()\r\n                    print(sys.extract_name(test_file) .. \":\")\r\n                    dofile(test_file)\r\n                end\r\n            end\r\n            print()\r\n            return 0\r\n        end",
    "type": "function"
  }, {
    "id": 239,
    "text": "test_dir = test_dir or dist.get_deploy_dir()",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "assert(type(test_dir) == \"string\", \"luadist.selftest: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "test_dir = sys.abs_path(test_dir)",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "if test_dir == dist.get_deploy_dir() then\r\n                test_dir = sys.make_path(test_dir, cfg.test_dir)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "test_dir = sys.make_path(test_dir, cfg.test_dir)",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "local test_iterator, err = sys.get_directory(test_dir)",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "if not test_iterator then\r\n                print(\"Running tests from '\" .. test_dir .. \"' failed: \" .. err)\r\n                os.exit(1)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "print(\"Running tests from '\" .. test_dir .. \"' failed: \" .. err)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "print(\"\\nRunning tests:\")",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "print(\"==============\")",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "for test_file in sys.get_directory(test_dir) do\r\n                test_file = sys.make_path(test_dir, test_file)\r\n                if sys.is_file(test_file) then\r\n                    print()\r\n                    print(sys.extract_name(test_file) .. \":\")\r\n                    dofile(test_file)\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 250,
    "text": "test_file = sys.make_path(test_dir, test_file)",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "if sys.is_file(test_file) then\r\n                    print()\r\n                    print(sys.extract_name(test_file) .. \":\")\r\n                    dofile(test_file)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "print(sys.extract_name(test_file) .. \":\")",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "dofile(test_file)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "",
    "type": "function container"
  }, {
    "id": 256,
    "text": "dist",
    "type": "module"
  }, {
    "id": 257,
    "text": "dependency_info",
    "type": "global function"
  }, {
    "id": 258,
    "text": "upload_modules",
    "type": "global function"
  }, {
    "id": 259,
    "text": "update_manifest",
    "type": "global function"
  }, {
    "id": 260,
    "text": "fetch",
    "type": "global function"
  }, {
    "id": 261,
    "text": "install",
    "type": "global function"
  }, {
    "id": 262,
    "text": "update",
    "type": "global function"
  }, {
    "id": 263,
    "text": "get_deploy_dir",
    "type": "global function"
  }, {
    "id": 264,
    "text": "get_deployed",
    "type": "global function"
  }, {
    "id": 265,
    "text": "make",
    "type": "global function"
  }, {
    "id": 266,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 267,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 268,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 269,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 270,
    "text": "print",
    "type": "global function"
  }, {
    "id": 271,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 272,
    "text": "run",
    "type": "global function"
  }, {
    "id": 273,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 274,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 275,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 276,
    "text": "type",
    "type": "global function"
  }, {
    "id": 277,
    "text": "require",
    "type": "global function"
  }, {
    "id": 278,
    "text": "config",
    "type": "module"
  }, {
    "id": 279,
    "text": "",
    "type": "variable container"
  }, {
    "id": 280,
    "text": "",
    "type": "require container"
  }, {
    "id": 281,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 283,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 285,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 286,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 287,
    "text": "",
    "type": "require local variable"
  } ]
}