{
  "_filename": "logger.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadist-git/dist/logger.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 27,
    "label": "has",
    "to": 10
  }, {
    "from": 28,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "calls",
    "to": 34
  }, {
    "from": 3,
    "label": "calls",
    "to": 31
  }, {
    "from": 3,
    "label": "calls",
    "to": 35
  }, {
    "from": 12,
    "label": "calls",
    "to": 35
  }, {
    "from": 12,
    "label": "calls",
    "to": 35
  }, {
    "from": 12,
    "label": "calls",
    "to": 35
  }, {
    "from": 12,
    "label": "calls",
    "to": 36
  }, {
    "from": 3,
    "label": "calls",
    "to": 37
  }, {
    "from": 12,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 3
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 3,
    "label": "calls",
    "to": 32
  }, {
    "from": 3,
    "label": "calls",
    "to": 40
  }, {
    "from": 12,
    "label": "calls",
    "to": 40
  }, {
    "from": 12,
    "label": "calls",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 3,
    "label": "calls",
    "to": 33
  }, {
    "from": 24,
    "label": "calls",
    "to": 12
  }, {
    "from": 25,
    "label": "calls",
    "to": 12
  }, {
    "from": 26,
    "label": "calls",
    "to": 12
  }, {
    "from": 27,
    "label": "calls",
    "to": 12
  }, {
    "from": 28,
    "label": "calls",
    "to": 12
  }, {
    "from": 29,
    "label": "calls",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 3
  }, {
    "from": 30,
    "label": "declares",
    "to": 12
  }, {
    "from": 30,
    "label": "declares",
    "to": 24
  }, {
    "from": 30,
    "label": "declares",
    "to": 25
  }, {
    "from": 30,
    "label": "declares",
    "to": 26
  }, {
    "from": 30,
    "label": "declares",
    "to": 27
  }, {
    "from": 30,
    "label": "declares",
    "to": 28
  }, {
    "from": 30,
    "label": "declares",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 43,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 43,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 48,
    "label": "assigns",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 48,
    "label": "assigns",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 48,
    "label": "assigns",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 48,
    "label": "assigns",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 44,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "requires",
    "to": 42
  }, {
    "from": 44,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "logger",
    "type": "module"
  }, {
    "id": 2,
    "text": "sys",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function get_log(log_file)\r\n    log_file = log_file or cfg.log_file\r\n    assert(type(log_file) == \"string\", \"log.get_log: Argument 'log_file' is not a string.\")\r\n    log_file = sys.abs_path(log_file)\r\n\r\n    sys.make_dir(sys.parent_dir(log_file))\r\n    local log, err = io.open(log_file, \"a\")\r\n    if not log then\r\n        return nil, \"Error: can't open a logfile '\" .. log_file .. \"': \" .. err\r\n    else\r\n        return log\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "log_file = log_file or cfg.log_file",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "assert(type(log_file) == \"string\", \"log.get_log: Argument 'log_file' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "log_file = sys.abs_path(log_file)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "sys.make_dir(sys.parent_dir(log_file))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local log, err = io.open(log_file, \"a\")",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if not log then\r\n        return nil, \"Error: can't open a logfile '\" .. log_file .. \"': \" .. err\r\n    else\r\n        return log\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function write(level, ...)\r\n    assert(type(level) == \"string\", \"log.write: Argument 'level' is not a string.\")\r\n    assert(#arg > 0, \"log.write: No message arguments provided.\")\r\n    assert(type(log_levels[level]) == \"number\", \"log.write: Unknown log level used: '\" .. level .. \"'.\")\r\n\r\n    level = level:upper()\r\n    local message = table.concat(arg, \" \")\r\n\r\n    -- Check if writing for this log level is enabled.\r\n    if cfg.write_log_level and log_levels[level] >= log_levels[cfg.write_log_level] then\r\n        log_file:write(os.date(\"%Y-%m-%d %H:%M:%S\") .. \" [\" .. level .. \"]\\t\" .. message .. \"\\n\")\r\n        log_file:flush()\r\n    end\r\n\r\n    -- Check if printing for this log level is enabled.\r\n    if cfg.print_log_level and log_levels[level] >= log_levels[cfg.print_log_level] then\r\n        print(message)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert(type(level) == \"string\", \"log.write: Argument 'level' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert(#arg > 0, \"log.write: No message arguments provided.\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert(type(log_levels[level]) == \"number\", \"log.write: Unknown log level used: '\" .. level .. \"'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "level = level:upper()",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local message = table.concat(arg, \" \")",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if cfg.write_log_level and log_levels[level] >= log_levels[cfg.write_log_level] then\r\n        log_file:write(os.date(\"%Y-%m-%d %H:%M:%S\") .. \" [\" .. level .. \"]\\t\" .. message .. \"\\n\")\r\n        log_file:flush()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "log_file:write(os.date(\"%Y-%m-%d %H:%M:%S\") .. \" [\" .. level .. \"]\\t\" .. message .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "log_file:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "if cfg.print_log_level and log_levels[level] >= log_levels[cfg.print_log_level] then\r\n        print(message)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "print(message)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function debug(...) return write(\"DEBUG\", ...) end",
    "type": "function"
  }, {
    "id": 25,
    "text": "function info(...) return write(\"INFO\", ...) end",
    "type": "function"
  }, {
    "id": 26,
    "text": "function warn(...) return write(\"WARN\", ...) end",
    "type": "function"
  }, {
    "id": 27,
    "text": "function error(...) return write(\"ERROR\", ...) end",
    "type": "function"
  }, {
    "id": 28,
    "text": "function fatal(...) return write(\"FATAL\", ...) end",
    "type": "function"
  }, {
    "id": 29,
    "text": "function log(level, ...) return write(level, ...) end",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "function parent_dir(path)\r\n    assert(type(path) == \"string\", \"sys.parent_dir: Argument 'path' is not a string.\")\r\n    path = remove_curr_dir_dots(path)\r\n    path = remove_trailing(path)\r\n\r\n    local dir = path:gsub(utils.escape_magic(extract_name(path)) .. \"$\", \"\")\r\n    if dir == \"\" then\r\n        return nil\r\n    else\r\n        return make_path(dir)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function abs_path(path)\r\n    assert(type(path) == \"string\", \"sys.get_abs_path: Argument 'path' is not a string.\")\r\n    if is_abs(path) then return path end\r\n\r\n    local cur_dir, err = current_dir()\r\n    if not cur_dir then return nil, err end\r\n\r\n    return make_path(cur_dir, path)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function make_dir(dir_name)\r\n    assert(type(dir_name) == \"string\", \"sys.make_dir: Argument 'dir_name' is not a string.\")\r\n    if exists(dir_name) then\r\n        return true\r\n    else\r\n        local par_dir = parent_dir(dir_name)\r\n        if par_dir then\r\n            local ok, err = make_dir(par_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n        return lfs.mkdir(dir_name)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 35,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 36,
    "text": "print",
    "type": "global function"
  }, {
    "id": 37,
    "text": "open",
    "type": "global function"
  }, {
    "id": 38,
    "text": "date",
    "type": "global function"
  }, {
    "id": 39,
    "text": "module",
    "type": "global function"
  }, {
    "id": 40,
    "text": "type",
    "type": "global function"
  }, {
    "id": 41,
    "text": "require",
    "type": "global function"
  }, {
    "id": 42,
    "text": "config",
    "type": "module"
  }, {
    "id": 43,
    "text": "",
    "type": "variable container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 49,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 50,
    "text": "",
    "type": "number"
  }, {
    "id": 51,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 52,
    "text": "",
    "type": "number"
  }, {
    "id": 53,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 54,
    "text": "",
    "type": "number"
  }, {
    "id": 55,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 56,
    "text": "",
    "type": "number"
  }, {
    "id": 57,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 58,
    "text": "",
    "type": "number"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  } ]
}