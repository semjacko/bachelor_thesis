{
  "_filename": "git.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadist-git/dist/git.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 3,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 3,
    "label": "has",
    "to": 22
  }, {
    "from": 3,
    "label": "has",
    "to": 23
  }, {
    "from": 3,
    "label": "has",
    "to": 24
  }, {
    "from": 3,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 24
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 24
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 18
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 23
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 41,
    "label": "has",
    "to": 24
  }, {
    "from": 41,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 42
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 47
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 54
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 57,
    "label": "has",
    "to": 65
  }, {
    "from": 57,
    "label": "has",
    "to": 24
  }, {
    "from": 57,
    "label": "has",
    "to": 66
  }, {
    "from": 57,
    "label": "has",
    "to": 67
  }, {
    "from": 57,
    "label": "has",
    "to": 68
  }, {
    "from": 57,
    "label": "has",
    "to": 24
  }, {
    "from": 57,
    "label": "has",
    "to": 69
  }, {
    "from": 57,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 23
  }, {
    "from": 57,
    "label": "has",
    "to": 24
  }, {
    "from": 57,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 24
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 72,
    "label": "has",
    "to": 24
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 77
  }, {
    "from": 80,
    "label": "has",
    "to": 24
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 80,
    "label": "has",
    "to": 24
  }, {
    "from": 80,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 81
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 83
  }, {
    "from": 89,
    "label": "has",
    "to": 84
  }, {
    "from": 89,
    "label": "has",
    "to": 85
  }, {
    "from": 89,
    "label": "has",
    "to": 77
  }, {
    "from": 89,
    "label": "has",
    "to": 24
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 89,
    "label": "has",
    "to": 87
  }, {
    "from": 89,
    "label": "has",
    "to": 24
  }, {
    "from": 89,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 81
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 83
  }, {
    "from": 96,
    "label": "has",
    "to": 84
  }, {
    "from": 96,
    "label": "has",
    "to": 85
  }, {
    "from": 96,
    "label": "has",
    "to": 77
  }, {
    "from": 96,
    "label": "has",
    "to": 24
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 96,
    "label": "has",
    "to": 24
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 81
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 102,
    "label": "has",
    "to": 107
  }, {
    "from": 102,
    "label": "has",
    "to": 108
  }, {
    "from": 102,
    "label": "has",
    "to": 109
  }, {
    "from": 102,
    "label": "has",
    "to": 83
  }, {
    "from": 102,
    "label": "has",
    "to": 84
  }, {
    "from": 102,
    "label": "has",
    "to": 85
  }, {
    "from": 102,
    "label": "has",
    "to": 77
  }, {
    "from": 102,
    "label": "has",
    "to": 24
  }, {
    "from": 102,
    "label": "has",
    "to": 110
  }, {
    "from": 102,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 102,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 102,
    "label": "has",
    "to": 115
  }, {
    "from": 102,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 102,
    "label": "has",
    "to": 94
  }, {
    "from": 102,
    "label": "has",
    "to": 87
  }, {
    "from": 102,
    "label": "has",
    "to": 24
  }, {
    "from": 102,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 81
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 83
  }, {
    "from": 117,
    "label": "has",
    "to": 84
  }, {
    "from": 117,
    "label": "has",
    "to": 85
  }, {
    "from": 117,
    "label": "has",
    "to": 77
  }, {
    "from": 117,
    "label": "has",
    "to": 24
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 87
  }, {
    "from": 117,
    "label": "has",
    "to": 24
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 81
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 122,
    "label": "has",
    "to": 83
  }, {
    "from": 122,
    "label": "has",
    "to": 128
  }, {
    "from": 122,
    "label": "has",
    "to": 129
  }, {
    "from": 122,
    "label": "has",
    "to": 130
  }, {
    "from": 122,
    "label": "has",
    "to": 131
  }, {
    "from": 122,
    "label": "has",
    "to": 24
  }, {
    "from": 122,
    "label": "has",
    "to": 132
  }, {
    "from": 122,
    "label": "has",
    "to": 133
  }, {
    "from": 122,
    "label": "has",
    "to": 24
  }, {
    "from": 122,
    "label": "has",
    "to": 69
  }, {
    "from": 122,
    "label": "has",
    "to": 134
  }, {
    "from": 122,
    "label": "has",
    "to": 24
  }, {
    "from": 122,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 24
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 24
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 145
  }, {
    "from": 140,
    "label": "has",
    "to": 24
  }, {
    "from": 140,
    "label": "has",
    "to": 69
  }, {
    "from": 140,
    "label": "has",
    "to": 24
  }, {
    "from": 140,
    "label": "has",
    "to": 146
  }, {
    "from": 3,
    "label": "calls",
    "to": 160
  }, {
    "from": 3,
    "label": "calls",
    "to": 160
  }, {
    "from": 3,
    "label": "calls",
    "to": 160
  }, {
    "from": 3,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 41,
    "label": "calls",
    "to": 160
  }, {
    "from": 41,
    "label": "calls",
    "to": 160
  }, {
    "from": 41,
    "label": "calls",
    "to": 160
  }, {
    "from": 57,
    "label": "calls",
    "to": 160
  }, {
    "from": 57,
    "label": "calls",
    "to": 160
  }, {
    "from": 72,
    "label": "calls",
    "to": 160
  }, {
    "from": 80,
    "label": "calls",
    "to": 160
  }, {
    "from": 89,
    "label": "calls",
    "to": 160
  }, {
    "from": 89,
    "label": "calls",
    "to": 160
  }, {
    "from": 96,
    "label": "calls",
    "to": 160
  }, {
    "from": 96,
    "label": "calls",
    "to": 160
  }, {
    "from": 96,
    "label": "calls",
    "to": 160
  }, {
    "from": 102,
    "label": "calls",
    "to": 160
  }, {
    "from": 102,
    "label": "calls",
    "to": 160
  }, {
    "from": 102,
    "label": "calls",
    "to": 160
  }, {
    "from": 102,
    "label": "calls",
    "to": 160
  }, {
    "from": 102,
    "label": "calls",
    "to": 160
  }, {
    "from": 117,
    "label": "calls",
    "to": 160
  }, {
    "from": 117,
    "label": "calls",
    "to": 160
  }, {
    "from": 122,
    "label": "calls",
    "to": 160
  }, {
    "from": 122,
    "label": "calls",
    "to": 160
  }, {
    "from": 122,
    "label": "calls",
    "to": 160
  }, {
    "from": 122,
    "label": "calls",
    "to": 160
  }, {
    "from": 122,
    "label": "calls",
    "to": 160
  }, {
    "from": 140,
    "label": "calls",
    "to": 160
  }, {
    "from": 3,
    "label": "calls",
    "to": 155
  }, {
    "from": 41,
    "label": "calls",
    "to": 155
  }, {
    "from": 41,
    "label": "calls",
    "to": 155
  }, {
    "from": 41,
    "label": "calls",
    "to": 155
  }, {
    "from": 57,
    "label": "calls",
    "to": 155
  }, {
    "from": 57,
    "label": "calls",
    "to": 155
  }, {
    "from": 57,
    "label": "calls",
    "to": 155
  }, {
    "from": 72,
    "label": "calls",
    "to": 155
  }, {
    "from": 80,
    "label": "calls",
    "to": 155
  }, {
    "from": 89,
    "label": "calls",
    "to": 155
  }, {
    "from": 96,
    "label": "calls",
    "to": 155
  }, {
    "from": 102,
    "label": "calls",
    "to": 155
  }, {
    "from": 117,
    "label": "calls",
    "to": 155
  }, {
    "from": 122,
    "label": "calls",
    "to": 155
  }, {
    "from": 3,
    "label": "calls",
    "to": 153
  }, {
    "from": 41,
    "label": "calls",
    "to": 153
  }, {
    "from": 41,
    "label": "calls",
    "to": 153
  }, {
    "from": 72,
    "label": "calls",
    "to": 153
  }, {
    "from": 80,
    "label": "calls",
    "to": 153
  }, {
    "from": 89,
    "label": "calls",
    "to": 153
  }, {
    "from": 96,
    "label": "calls",
    "to": 153
  }, {
    "from": 102,
    "label": "calls",
    "to": 153
  }, {
    "from": 117,
    "label": "calls",
    "to": 153
  }, {
    "from": 3,
    "label": "calls",
    "to": 159
  }, {
    "from": 140,
    "label": "calls",
    "to": 159
  }, {
    "from": 3,
    "label": "calls",
    "to": 157
  }, {
    "from": 3,
    "label": "calls",
    "to": 157
  }, {
    "from": 41,
    "label": "calls",
    "to": 157
  }, {
    "from": 41,
    "label": "calls",
    "to": 157
  }, {
    "from": 57,
    "label": "calls",
    "to": 157
  }, {
    "from": 57,
    "label": "calls",
    "to": 157
  }, {
    "from": 80,
    "label": "calls",
    "to": 157
  }, {
    "from": 80,
    "label": "calls",
    "to": 157
  }, {
    "from": 89,
    "label": "calls",
    "to": 157
  }, {
    "from": 89,
    "label": "calls",
    "to": 157
  }, {
    "from": 96,
    "label": "calls",
    "to": 157
  }, {
    "from": 96,
    "label": "calls",
    "to": 157
  }, {
    "from": 102,
    "label": "calls",
    "to": 157
  }, {
    "from": 102,
    "label": "calls",
    "to": 157
  }, {
    "from": 117,
    "label": "calls",
    "to": 157
  }, {
    "from": 117,
    "label": "calls",
    "to": 157
  }, {
    "from": 3,
    "label": "calls",
    "to": 158
  }, {
    "from": 72,
    "label": "calls",
    "to": 158
  }, {
    "from": 37,
    "label": "calls",
    "to": 26
  }, {
    "from": 39,
    "label": "calls",
    "to": 26
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 3,
    "label": "calls",
    "to": 152
  }, {
    "from": 72,
    "label": "calls",
    "to": 152
  }, {
    "from": 80,
    "label": "calls",
    "to": 152
  }, {
    "from": 89,
    "label": "calls",
    "to": 152
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 57,
    "label": "calls",
    "to": 161
  }, {
    "from": 57,
    "label": "calls",
    "to": 161
  }, {
    "from": 122,
    "label": "calls",
    "to": 161
  }, {
    "from": 122,
    "label": "calls",
    "to": 161
  }, {
    "from": 140,
    "label": "calls",
    "to": 161
  }, {
    "from": 3,
    "label": "calls",
    "to": 154
  }, {
    "from": 140,
    "label": "calls",
    "to": 154
  }, {
    "from": 147,
    "label": "calls",
    "to": 164
  }, {
    "from": 3,
    "label": "calls",
    "to": 156
  }, {
    "from": 41,
    "label": "calls",
    "to": 156
  }, {
    "from": 57,
    "label": "calls",
    "to": 156
  }, {
    "from": 72,
    "label": "calls",
    "to": 156
  }, {
    "from": 80,
    "label": "calls",
    "to": 156
  }, {
    "from": 89,
    "label": "calls",
    "to": 156
  }, {
    "from": 96,
    "label": "calls",
    "to": 156
  }, {
    "from": 102,
    "label": "calls",
    "to": 156
  }, {
    "from": 117,
    "label": "calls",
    "to": 156
  }, {
    "from": 122,
    "label": "calls",
    "to": 156
  }, {
    "from": 3,
    "label": "calls",
    "to": 165
  }, {
    "from": 3,
    "label": "calls",
    "to": 165
  }, {
    "from": 3,
    "label": "calls",
    "to": 165
  }, {
    "from": 3,
    "label": "calls",
    "to": 165
  }, {
    "from": 26,
    "label": "calls",
    "to": 165
  }, {
    "from": 26,
    "label": "calls",
    "to": 165
  }, {
    "from": 41,
    "label": "calls",
    "to": 165
  }, {
    "from": 41,
    "label": "calls",
    "to": 165
  }, {
    "from": 41,
    "label": "calls",
    "to": 165
  }, {
    "from": 57,
    "label": "calls",
    "to": 165
  }, {
    "from": 57,
    "label": "calls",
    "to": 165
  }, {
    "from": 72,
    "label": "calls",
    "to": 165
  }, {
    "from": 80,
    "label": "calls",
    "to": 165
  }, {
    "from": 89,
    "label": "calls",
    "to": 165
  }, {
    "from": 89,
    "label": "calls",
    "to": 165
  }, {
    "from": 96,
    "label": "calls",
    "to": 165
  }, {
    "from": 96,
    "label": "calls",
    "to": 165
  }, {
    "from": 96,
    "label": "calls",
    "to": 165
  }, {
    "from": 102,
    "label": "calls",
    "to": 165
  }, {
    "from": 102,
    "label": "calls",
    "to": 165
  }, {
    "from": 102,
    "label": "calls",
    "to": 165
  }, {
    "from": 102,
    "label": "calls",
    "to": 165
  }, {
    "from": 102,
    "label": "calls",
    "to": 165
  }, {
    "from": 117,
    "label": "calls",
    "to": 165
  }, {
    "from": 117,
    "label": "calls",
    "to": 165
  }, {
    "from": 122,
    "label": "calls",
    "to": 165
  }, {
    "from": 122,
    "label": "calls",
    "to": 165
  }, {
    "from": 122,
    "label": "calls",
    "to": 165
  }, {
    "from": 122,
    "label": "calls",
    "to": 165
  }, {
    "from": 140,
    "label": "calls",
    "to": 165
  }, {
    "from": 147,
    "label": "calls",
    "to": 166
  }, {
    "from": 147,
    "label": "calls",
    "to": 166
  }, {
    "from": 147,
    "label": "calls",
    "to": 166
  }, {
    "from": 26,
    "label": "calls",
    "to": 162
  }, {
    "from": 136,
    "label": "calls",
    "to": 122
  }, {
    "from": 138,
    "label": "calls",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 147
  }, {
    "from": 147,
    "label": "declares",
    "to": 3
  }, {
    "from": 147,
    "label": "declares",
    "to": 26
  }, {
    "from": 147,
    "label": "declares",
    "to": 37
  }, {
    "from": 147,
    "label": "declares",
    "to": 39
  }, {
    "from": 147,
    "label": "declares",
    "to": 41
  }, {
    "from": 147,
    "label": "declares",
    "to": 57
  }, {
    "from": 147,
    "label": "declares",
    "to": 72
  }, {
    "from": 147,
    "label": "declares",
    "to": 80
  }, {
    "from": 147,
    "label": "declares",
    "to": 89
  }, {
    "from": 147,
    "label": "declares",
    "to": 96
  }, {
    "from": 147,
    "label": "declares",
    "to": 102
  }, {
    "from": 147,
    "label": "declares",
    "to": 117
  }, {
    "from": 147,
    "label": "declares",
    "to": 122
  }, {
    "from": 147,
    "label": "declares",
    "to": 136
  }, {
    "from": 147,
    "label": "declares",
    "to": 138
  }, {
    "from": 147,
    "label": "declares",
    "to": 140
  }, {
    "from": 148,
    "label": "calls",
    "to": 102
  }, {
    "from": 148,
    "label": "calls",
    "to": 80
  }, {
    "from": 148,
    "label": "calls",
    "to": 89
  }, {
    "from": 148,
    "label": "calls",
    "to": 96
  }, {
    "from": 148,
    "label": "calls",
    "to": 72
  }, {
    "from": 148,
    "label": "calls",
    "to": 117
  }, {
    "from": 149,
    "label": "calls",
    "to": 57
  }, {
    "from": 149,
    "label": "calls",
    "to": 138
  }, {
    "from": 149,
    "label": "calls",
    "to": 140
  }, {
    "from": 150,
    "label": "calls",
    "to": 136
  }, {
    "from": 150,
    "label": "calls",
    "to": 136
  }, {
    "from": 150,
    "label": "calls",
    "to": 138
  }, {
    "from": 150,
    "label": "calls",
    "to": 57
  }, {
    "from": 150,
    "label": "calls",
    "to": 57
  }, {
    "from": 150,
    "label": "calls",
    "to": 57
  }, {
    "from": 150,
    "label": "calls",
    "to": 140
  }, {
    "from": 150,
    "label": "calls",
    "to": 37
  }, {
    "from": 151,
    "label": "calls",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 168
  }, {
    "from": 1,
    "label": "contains",
    "to": 169
  }, {
    "from": 169,
    "label": "initializes",
    "to": 170
  }, {
    "from": 170,
    "label": "requires",
    "to": 2
  }, {
    "from": 169,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "requires",
    "to": 167
  }, {
    "from": 169,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "requires",
    "to": 1
  }, {
    "from": 173,
    "label": "requires",
    "to": 1
  }, {
    "from": 174,
    "label": "requires",
    "to": 1
  }, {
    "from": 175,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "git",
    "type": "module"
  }, {
    "id": 2,
    "text": "sys",
    "type": "module"
  }, {
    "id": 3,
    "text": "function clone(repository_url, dest_dir, depth, branch)\r\n    assert(type(repository_url) == \"string\", \"git.clone: Argument 'repository_url' is not a string.\")\r\n    assert(type(dest_dir) == \"string\", \"git.clone: Argument 'dest_dir' is not a string.\")\r\n    dest_dir = sys.abs_path(dest_dir)\r\n\r\n    local command = \"git clone \" .. repository_url\r\n\r\n    if depth then\r\n        assert(type(depth) == \"number\", \"git.clone: Argument 'depth' is not a number.\")\r\n        command = command .. \" --depth \" .. depth\r\n    end\r\n\r\n    if branch then\r\n        assert(type(branch) == \"string\", \"git.clone: Argument 'branch' is not a string.\")\r\n        command = command .. \" -b \" .. branch\r\n    end\r\n\r\n    command = command .. \" \" .. sys.quote(dest_dir)\r\n    if sys.exists(dest_dir) then sys.delete(dest_dir) end\r\n    sys.make_dir(dest_dir)\r\n\r\n    -- change the current working directory to dest_dir\r\n    local prev_current_dir = sys.current_dir()\r\n    sys.change_dir(dest_dir)\r\n\r\n    -- execute git clone\r\n    if not cfg.debug then command = command .. \" -q \" end\r\n    local ok, err = sys.exec(command)\r\n\r\n    -- change the current working directory back\r\n    sys.change_dir(prev_current_dir)\r\n\r\n    return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert(type(repository_url) == \"string\", \"git.clone: Argument 'repository_url' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "assert(type(dest_dir) == \"string\", \"git.clone: Argument 'dest_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "dest_dir = sys.abs_path(dest_dir)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "local command = \"git clone \" .. repository_url",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if depth then\r\n        assert(type(depth) == \"number\", \"git.clone: Argument 'depth' is not a number.\")\r\n        command = command .. \" --depth \" .. depth\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "assert(type(depth) == \"number\", \"git.clone: Argument 'depth' is not a number.\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "command = command .. \" --depth \" .. depth",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if branch then\r\n        assert(type(branch) == \"string\", \"git.clone: Argument 'branch' is not a string.\")\r\n        command = command .. \" -b \" .. branch\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "assert(type(branch) == \"string\", \"git.clone: Argument 'branch' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "command = command .. \" -b \" .. branch",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "command = command .. \" \" .. sys.quote(dest_dir)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if sys.exists(dest_dir) then sys.delete(dest_dir) end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "sys.delete(dest_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "sys.make_dir(dest_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local prev_current_dir = sys.current_dir()",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "sys.change_dir(dest_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "if not cfg.debug then command = command .. \" -q \" end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "command = command .. \" -q \"",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local ok, err = sys.exec(command)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "sys.change_dir(prev_current_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function get_remote_refs(git_url, ref_type)\r\n    assert(type(git_url) == \"string\", \"git.get_remote_refs: Argument 'git_url' is not a string.\")\r\n    assert(type(ref_type) == \"string\", \"git.get_remote_refs: Argument 'ref_type' is not a string.\")\r\n    assert(ref_type == \"tags\" or ref_type == \"heads\", \"git.get_remote_refs: Argument 'ref_type' is not \\\"tags\\\" or \\\"heads\\\".\")\r\n\r\n    local refs = {}\r\n\r\n    local ok, refs_or_err = pcall(git.protocol.remotes, git_url)\r\n    if not ok then return nil, \"Error getting refs of the remote repository '\" .. git_url .. \"': \" .. refs_or_err end\r\n\r\n    for ref, sha in pairs(refs_or_err) do\r\n        if ref:match(\"%S+/\" .. ref_type .. \"/%S+\") and not ref:match(\"%^{}\") then\r\n            table.insert(refs, ref:match(\"%S+/\" .. ref_type .. \"/(%S+)\"))\r\n        end\r\n    end\r\n\r\n    return refs\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "assert(type(git_url) == \"string\", \"git.get_remote_refs: Argument 'git_url' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert(type(ref_type) == \"string\", \"git.get_remote_refs: Argument 'ref_type' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert(ref_type == \"tags\" or ref_type == \"heads\", \"git.get_remote_refs: Argument 'ref_type' is not \\\"tags\\\" or \\\"heads\\\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local refs = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local ok, refs_or_err = pcall(git.protocol.remotes, git_url)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if not ok then return nil, \"Error getting refs of the remote repository '\" .. git_url .. \"': \" .. refs_or_err end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "for ref, sha in pairs(refs_or_err) do\r\n        if ref:match(\"%S+/\" .. ref_type .. \"/%S+\") and not ref:match(\"%^{}\") then\r\n            table.insert(refs, ref:match(\"%S+/\" .. ref_type .. \"/(%S+)\"))\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "if ref:match(\"%S+/\" .. ref_type .. \"/%S+\") and not ref:match(\"%^{}\") then\r\n            table.insert(refs, ref:match(\"%S+/\" .. ref_type .. \"/(%S+)\"))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "table.insert(refs, ref:match(\"%S+/\" .. ref_type .. \"/(%S+)\"))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function get_remote_tags(git_url)\r\n    return get_remote_refs(git_url, \"tags\")\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function get_remote_branches(git_url)\r\n    return get_remote_refs(git_url, \"heads\")\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function checkout_ref(ref, git_repo_dir, orphaned)\r\n    git_repo_dir = git_repo_dir or sys.current_dir()\r\n    orphaned = orphaned or false\r\n    assert(type(ref) == \"string\", \"git.checkout_ref: Argument 'ref' is not a string.\")\r\n    assert(type(git_repo_dir) == \"string\", \"git.checkout_ref: Argument 'git_repo_dir' is not a string.\")\r\n    assert(type(orphaned) == \"boolean\", \"git.checkout_ref: Argument 'orphaned' is not a boolean.\")\r\n    git_repo_dir = sys.abs_path(git_repo_dir)\r\n\r\n    local command = \"git checkout \"\r\n    if orphaned then command = command .. \" --orphan \" end\r\n    command = command .. \" \" .. ref .. \" -f\"\r\n    if not cfg.debug then command = command .. \" -q \" end\r\n\r\n    local ok, err\r\n    if git_repo_dir ~= sys.current_dir() then\r\n        local prev_current_dir = sys.current_dir()\r\n        sys.change_dir(git_repo_dir)\r\n        ok, err = sys.exec(command)\r\n        sys.change_dir(prev_current_dir)\r\n    else\r\n        ok, err = sys.exec(command)\r\n    end\r\n\r\n    return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "git_repo_dir = git_repo_dir or sys.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "orphaned = orphaned or false",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "assert(type(ref) == \"string\", \"git.checkout_ref: Argument 'ref' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert(type(git_repo_dir) == \"string\", \"git.checkout_ref: Argument 'git_repo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert(type(orphaned) == \"boolean\", \"git.checkout_ref: Argument 'orphaned' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "git_repo_dir = sys.abs_path(git_repo_dir)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local command = \"git checkout \"",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if orphaned then command = command .. \" --orphan \" end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "command = command .. \" --orphan \"",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "command = command .. \" \" .. ref .. \" -f\"",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if git_repo_dir ~= sys.current_dir() then\r\n        local prev_current_dir = sys.current_dir()\r\n        sys.change_dir(git_repo_dir)\r\n        ok, err = sys.exec(command)\r\n        sys.change_dir(prev_current_dir)\r\n    else\r\n        ok, err = sys.exec(command)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "sys.change_dir(git_repo_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "ok, err = sys.exec(command)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function checkout_sha(sha, git_repo_dir)\r\n    git_repo_dir = git_repo_dir or sys.current_dir()\r\n    assert(type(sha) == \"string\", \"git.checkout_sha: Argument 'sha' is not a string.\")\r\n    assert(type(git_repo_dir) == \"string\", \"git.checkout_sha: Argument 'git_repo_dir' is not a string.\")\r\n    git_repo_dir = sys.abs_path(git_repo_dir)\r\n\r\n    local dir_changed, prev_current_dir\r\n\r\n    if git_repo_dir ~= sys.current_dir() then\r\n        prev_current_dir = sys.current_dir()\r\n        sys.change_dir(git_repo_dir)\r\n        dir_changed = true\r\n    end\r\n\r\n    local ok, repo_or_err = pcall(git.repo.open, git_repo_dir)\r\n    if not ok then return nil, \"Error when opening the git repository '\" .. git_repo_dir .. \"': \" .. repo_or_err end\r\n\r\n    local err\r\n    ok, err = pcall(repo_or_err.checkout, repo_or_err, sha, git_repo_dir)\r\n    if not ok then return nil, \"Error when checking out the sha '\" .. sha .. \"' in the git repository '\" .. git_repo_dir .. \"': \" .. err end\r\n\r\n    repo_or_err:close()\r\n    if dir_changed then sys.change_dir(prev_current_dir) end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "assert(type(sha) == \"string\", \"git.checkout_sha: Argument 'sha' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert(type(git_repo_dir) == \"string\", \"git.checkout_sha: Argument 'git_repo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local dir_changed, prev_current_dir",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if git_repo_dir ~= sys.current_dir() then\r\n        prev_current_dir = sys.current_dir()\r\n        sys.change_dir(git_repo_dir)\r\n        dir_changed = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "prev_current_dir = sys.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "dir_changed = true",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local ok, repo_or_err = pcall(git.repo.open, git_repo_dir)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if not ok then return nil, \"Error when opening the git repository '\" .. git_repo_dir .. \"': \" .. repo_or_err end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "ok, err = pcall(repo_or_err.checkout, repo_or_err, sha, git_repo_dir)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if not ok then return nil, \"Error when checking out the sha '\" .. sha .. \"' in the git repository '\" .. git_repo_dir .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "repo_or_err:close()",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if dir_changed then sys.change_dir(prev_current_dir) end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function init(dir)\r\n    dir = dir or sys.current_dir()\r\n    assert(type(dir) == \"string\", \"git.init: Argument 'dir' is not a string.\")\r\n    dir = sys.abs_path(dir)\r\n\r\n    -- create the 'dir' first, since it causes 'git init' to fail on Windows\r\n    -- when the parent directory of 'dir' doesn't exist\r\n    local ok, err = sys.make_dir(dir)\r\n    if not ok then return nil, err end\r\n\r\n    local command = \"git init \" .. sys.quote(dir)\r\n    if not cfg.debug then command = command .. \" -q \" end\r\n    return sys.exec(command)\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "dir = dir or sys.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "assert(type(dir) == \"string\", \"git.init: Argument 'dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "dir = sys.abs_path(dir)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local ok, err = sys.make_dir(dir)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "local command = \"git init \" .. sys.quote(dir)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function add_all(repo_dir)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    assert(type(repo_dir) == \"string\", \"git.add_all: Argument 'repo_dir' is not a string.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    ok, msg = sys.exec(\"git add -A -f \" .. sys.quote(repo_dir))\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "repo_dir = repo_dir or sys.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "assert(type(repo_dir) == \"string\", \"git.add_all: Argument 'repo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "repo_dir = sys.abs_path(repo_dir)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "local ok, prev_dir, msg",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "ok, prev_dir = sys.change_dir(repo_dir)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "ok, msg = sys.exec(\"git add -A -f \" .. sys.quote(repo_dir))",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "sys.change_dir(prev_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function commit(message, repo_dir)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    message = message or \"commit by luadist-git\"\r\n    assert(type(message) == \"string\", \"git.commit: Argument 'message' is not a string.\")\r\n    assert(type(repo_dir) == \"string\", \"git.commit: Argument 'repo_dir' is not a string.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    local command = \"git commit -m \" .. sys.quote(message)\r\n    if not cfg.debug then command = command .. \" -q \" end\r\n    ok, msg = sys.exec(command)\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "message = message or \"commit by luadist-git\"",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "assert(type(message) == \"string\", \"git.commit: Argument 'message' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert(type(repo_dir) == \"string\", \"git.commit: Argument 'repo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "local command = \"git commit -m \" .. sys.quote(message)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "ok, msg = sys.exec(command)",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function rename_branch(old_name, new_name, repo_dir)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    assert(type(old_name) == \"string\", \"git.rename_branch: Argument 'old_name' is not a string.\")\r\n    assert(type(new_name) == \"string\", \"git.rename_branch: Argument 'new_name' is not a string.\")\r\n    assert(type(repo_dir) == \"string\", \"git.rename_branch: Argument 'repo_dir' is not a string.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    ok, msg = sys.exec(\"git branch -m \" .. old_name .. \" \" .. new_name)\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "assert(type(old_name) == \"string\", \"git.rename_branch: Argument 'old_name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert(type(new_name) == \"string\", \"git.rename_branch: Argument 'new_name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert(type(repo_dir) == \"string\", \"git.rename_branch: Argument 'repo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "ok, msg = sys.exec(\"git branch -m \" .. old_name .. \" \" .. new_name)",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function push_ref(repo_dir, ref_name, git_repo_url, all_tags, delete)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    all_tags = all_tags or false\r\n    delete = delete or false\r\n    assert(type(repo_dir) == \"string\", \"git.push_ref: Argument 'repo_dir' is not a string.\")\r\n    assert(type(git_repo_url) == \"string\", \"git.push_ref: Argument 'git_repo_url' is not a string.\")\r\n    assert(type(ref_name) == \"string\", \"git.push_ref: Argument 'ref_name' is not a string.\")\r\n    assert(type(all_tags) == \"boolean\", \"git.push_ref: Argument 'all_tags' is not a boolean.\")\r\n    assert(type(delete) == \"boolean\", \"git.push_ref: Argument 'delete' is not a boolean.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    local command = \"git push \" .. git_repo_url\r\n    if all_tags then command = command .. \" --tags \" end\r\n    if delete then command = command .. \" --delete \" end\r\n    command = command .. \" \" .. ref_name .. \" -f \"\r\n    if not cfg.debug then command = command .. \" -q \" end\r\n\r\n    ok, msg = sys.exec(command)\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "all_tags = all_tags or false",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "delete = delete or false",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "assert(type(repo_dir) == \"string\", \"git.push_ref: Argument 'repo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert(type(git_repo_url) == \"string\", \"git.push_ref: Argument 'git_repo_url' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert(type(ref_name) == \"string\", \"git.push_ref: Argument 'ref_name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert(type(all_tags) == \"boolean\", \"git.push_ref: Argument 'all_tags' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert(type(delete) == \"boolean\", \"git.push_ref: Argument 'delete' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "local command = \"git push \" .. git_repo_url",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if all_tags then command = command .. \" --tags \" end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "command = command .. \" --tags \"",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if delete then command = command .. \" --delete \" end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "command = command .. \" --delete \"",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "command = command .. \" \" .. ref_name .. \" -f \"",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function create_tag(repo_dir, tag_name)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    assert(type(repo_dir) == \"string\", \"git.create_tag: Argument 'repo_dir' is not a string.\")\r\n    assert(type(tag_name) == \"string\", \"git.create_tag: Argument 'tag_name' is not a string.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    ok, msg = sys.exec(\"git tag \" .. tag_name .. \" -f \")\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "assert(type(repo_dir) == \"string\", \"git.create_tag: Argument 'repo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert(type(tag_name) == \"string\", \"git.create_tag: Argument 'tag_name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "ok, msg = sys.exec(\"git tag \" .. tag_name .. \" -f \")",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function fetch_ref(repo_dir, git_repo_url, ref_name, ref_type)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    assert(type(repo_dir) == \"string\", \"git.fetch_ref: Argument 'repo_dir' is not a string.\")\r\n    assert(type(git_repo_url) == \"string\", \"git.fetch_ref: Argument 'git_repo_url' is not a string.\")\r\n    assert(type(ref_name) == \"string\", \"git.fetch_ref: Argument 'ref_name' is not a string.\")\r\n    assert(type(ref_type) == \"string\", \"git.fetch_ref: Argument 'ref_type' is not a string.\")\r\n    assert(ref_type == \"tag\" or ref_type == \"head\", \"git.get_remote_refs: Argument 'ref_type' is not \\\"tag\\\" or \\\"head\\\".\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local refstring = \"refs/\" .. ref_type .. \"s/\" .. ref_name\r\n\r\n    local suppress_fetch_progress = not cfg.debug\r\n    local ok, repo_or_err = pcall(git.repo.open, repo_dir)\r\n    if not ok then return nil, \"Error when opening the git repository '\" .. repo_dir .. \"': \" .. repo_or_err end\r\n\r\n    local ok, pack_or_err, sha = pcall(git.protocol.fetch, git_repo_url, repo_or_err, refstring, suppress_fetch_progress)\r\n    if not ok then return nil, \"Error when fetching ref '\" .. refstring .. \"' from git repository '\" .. git_repo_url .. \"': \" .. pack_or_err end\r\n\r\n    repo_or_err:close()\r\n    pack_or_err:close()\r\n\r\n    return sha\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "assert(type(repo_dir) == \"string\", \"git.fetch_ref: Argument 'repo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert(type(git_repo_url) == \"string\", \"git.fetch_ref: Argument 'git_repo_url' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "assert(type(ref_name) == \"string\", \"git.fetch_ref: Argument 'ref_name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert(type(ref_type) == \"string\", \"git.fetch_ref: Argument 'ref_type' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "assert(ref_type == \"tag\" or ref_type == \"head\", \"git.get_remote_refs: Argument 'ref_type' is not \\\"tag\\\" or \\\"head\\\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "local refstring = \"refs/\" .. ref_type .. \"s/\" .. ref_name",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "local suppress_fetch_progress = not cfg.debug",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local ok, repo_or_err = pcall(git.repo.open, repo_dir)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if not ok then return nil, \"Error when opening the git repository '\" .. repo_dir .. \"': \" .. repo_or_err end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "local ok, pack_or_err, sha = pcall(git.protocol.fetch, git_repo_url, repo_or_err, refstring, suppress_fetch_progress)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "if not ok then return nil, \"Error when fetching ref '\" .. refstring .. \"' from git repository '\" .. git_repo_url .. \"': \" .. pack_or_err end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "pack_or_err:close()",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function fetch_tag(repo_dir, git_repo_url, tag_name)\r\n    return fetch_ref(repo_dir, git_repo_url, tag_name, \"tag\")\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function fetch_branch(repo_dir, git_repo_url, branch_name)\r\n    return fetch_ref(repo_dir, git_repo_url, branch_name, \"head\")\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function create_repo(dir)\r\n    assert(type(dir) == \"string\", \"git.create_repo: Argument 'dir' is not a string.\")\r\n\r\n    if sys.exists(dir) then sys.delete(dir) end\r\n\r\n    local ok, repo_or_err = pcall(git.repo.create, dir)\r\n    if not ok then return nil, \"Error when creating the git repository '\" .. dir .. \"': \" .. repo_or_err end\r\n\r\n    repo_or_err:close()\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "assert(type(dir) == \"string\", \"git.create_repo: Argument 'dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "if sys.exists(dir) then sys.delete(dir) end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "sys.delete(dir)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "local ok, repo_or_err = pcall(git.repo.create, dir)",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "if not ok then return nil, \"Error when creating the git repository '\" .. dir .. \"': \" .. repo_or_err end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "",
    "type": "function container"
  }, {
    "id": 148,
    "text": "function upload_modules(deploy_dir, module_names, dest_git_base_url)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(module_names) == \"string\" then module_names = {module_names} end\r\n    assert(type(deploy_dir) == \"string\", \"dist.upload_module: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(module_names) == \"table\", \"dist.upload_module: Argument 'module_name' is not a string or table.\")\r\n    assert(type(dest_git_base_url) == \"string\", \"dist.upload_module: Argument 'dest_git_base_url' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local modules_to_upload = {}\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- find modules to upload\r\n    if #module_names == 0 then\r\n        modules_to_upload = installed\r\n    else\r\n        modules_to_upload = depends.find_packages(module_names, installed)\r\n    end\r\n\r\n    for _, installed_module in pairs(modules_to_upload) do\r\n\r\n        -- set names\r\n        local branch_name = cfg.arch .. \"-\" .. cfg.type\r\n        local tag_name = installed_module.version .. \"-\" .. branch_name\r\n        local full_name = installed_module.name .. \"-\" .. tag_name\r\n        local tmp_dir = sys.make_path(deploy_dir, cfg.temp_dir, full_name .. \"-to-upload\")\r\n        local dest_git_url = dest_git_base_url .. \"/\" .. installed_module.name .. \".git\"\r\n        local distinfo_file = sys.make_path(deploy_dir, cfg.distinfos_dir, installed_module.name .. \"-\" .. installed_module.version, \"dist.info\")\r\n\r\n        -- create temporary directory (delete previous if already exists)\r\n        if sys.exists(tmp_dir) then sys.delete(tmp_dir) end\r\n        local ok, err = sys.make_dir(tmp_dir)\r\n        if not ok then return nil, err end\r\n\r\n        -- copy the module files for all enabled components\r\n        for _, component in ipairs(cfg.components) do\r\n            if installed_module.files[component] then\r\n                for _, file in ipairs(installed_module.files[component]) do\r\n                    local file_path = sys.make_path(deploy_dir, file)\r\n                    local dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file))\r\n                    if sys.is_file(file_path) then\r\n                        sys.make_dir(dest_dir)\r\n                        sys.copy(file_path, dest_dir)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- add module's dist.info file\r\n        sys.copy(distinfo_file, tmp_dir)\r\n\r\n        -- create git repo\r\n        ok, err = git.init(tmp_dir)\r\n        if not ok then return nil, \"Error initializing empty git repository in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- add all files\r\n        ok, err = git.add_all(tmp_dir)\r\n        if not ok then return nil, \"Error adding all files to the git index in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- create commit\r\n        ok, err = git.commit(\"[luadist-git] add \" .. full_name .. \" [ci skip]\", tmp_dir)\r\n        if not ok then return nil, \"Error commiting changes in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- rename branch\r\n        ok, err = git.rename_branch(\"master\", branch_name, tmp_dir)\r\n        if not ok then return nil, \"Error renaming branch 'master' to '\" .. branch_name .. \"' in '\" .. tmp_dir .. \"': \" .. err  end\r\n\r\n        -- create tag\r\n        ok, err = git.create_tag(tmp_dir, tag_name)\r\n        if not ok then return nil, \"Error creating tag '\" .. tag_name .. \"' in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        print(\"Uploading \" .. full_name .. \" to \" .. dest_git_url .. \"...\")\r\n\r\n        -- push to the repository\r\n        ok, err = git.push_ref(tmp_dir, branch_name, dest_git_url, true)\r\n        if not ok then return nil, \"Error when pushing branch '\" .. branch_name .. \"' and tag '\" .. tag_name .. \"' to '\" .. dest_git_url .. \"': \" .. err end\r\n\r\n        -- delete temporary directory (if not in debug mode)\r\n        if not cfg.debug then sys.delete(tmp_dir) end\r\n    end\r\n\r\n    return #modules_to_upload\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "function download_manifest(dest_dir, repository_urls)\r\n    dest_dir = dest_dir or sys.make_path(cfg.root_dir, cfg.cache_dir)\r\n    repository_urls = repository_urls or cfg.repos\r\n    if type(repository_urls) == \"string\" then repository_urls = {repository_urls} end\r\n\r\n    assert(type(dest_dir) == \"string\", \"manifest.download_manifest: Argument 'dest_dir' is not a string.\")\r\n    assert(type(repository_urls) == \"table\", \"manifest.download_manifest: Argument 'repository_urls' is not a table or string.\")\r\n    dest_dir = sys.abs_path(dest_dir)\r\n\r\n    -- define used files and directories\r\n    local manifest_filename = sys.extract_name(cfg.manifest_file)\r\n    local manifest_file = sys.make_path(dest_dir, manifest_filename)\r\n    local temp_dir = sys.make_path(cfg.root_dir, cfg.temp_dir)\r\n\r\n    -- ensure that destination directory exists\r\n    local ok, err = sys.make_dir(dest_dir)\r\n    if not ok then return nil, err end\r\n\r\n    -- retrieve manifests from repositories and collect them into one manifest table\r\n    local manifest = {}\r\n\r\n    if #repository_urls == 0 then return nil, \"No repository url specified.\" end\r\n\r\n    print(\"Downloading repository information...\")\r\n    for k, repo in pairs(repository_urls) do\r\n        local clone_dir = sys.make_path(temp_dir, \"repository_\" .. tostring(k))\r\n\r\n        -- clone the repo and add its '.gitmodules' file to the manifest table\r\n\r\n        ok, err = git.create_repo(clone_dir)\r\n\r\n        local sha\r\n        if ok then sha, err = git.fetch_branch(clone_dir, repo, \"master\") end\r\n        if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n\r\n        if not (ok and sha) then\r\n            if not cfg.debug then sys.delete(clone_dir) end\r\n            return nil, \"Error when downloading the manifest from repository with url: '\" .. repo .. \"': \" .. err\r\n        else\r\n            for _, pkg in pairs(load_gitmodules(sys.make_path(clone_dir, \".gitmodules\"))) do\r\n                table.insert(manifest, pkg)\r\n            end\r\n        end\r\n        if not cfg.debug then sys.delete(clone_dir) end\r\n    end\r\n\r\n    -- save the new manifest table to the file\r\n    ok, err = save_manifest(manifest, manifest_file)\r\n    if not ok then return nil, err end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "function fetch_pkg(pkg, download_dir, suppress_printing)\r\n    download_dir = download_dir or sys.current_dir()\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(pkg) == \"table\", \"package.fetch_pkg: Argument 'pkg' is not a table.\")\r\n    assert(type(download_dir) == \"string\", \"package.fetch_pkg: Argument 'download_dir' is not a string.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.fetch_pkg: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(pkg.name) == \"string\", \"package.fetch_pkg: Argument 'pkg.name' is not a string.\")\r\n    assert(type(pkg.version) == \"string\", \"package.fetch_pkg: Argument 'pkg.version' is not a string.\")\r\n    assert(type(pkg.path) == \"string\", \"package.fetch_pkg: Argument 'pkg.path' is not a string.\")\r\n    download_dir = sys.abs_path(download_dir)\r\n\r\n    local pkg_full_name = pkg.name .. \"-\" .. pkg.version\r\n    local repo_url = pkg.path\r\n    local clone_dir = sys.abs_path(sys.make_path(download_dir, pkg_full_name))\r\n\r\n    -- check if download_dir already exists, assuming the package was already downloaded\r\n    if sys.exists(sys.make_path(clone_dir, \"dist.info\")) then\r\n        if cfg.cache and not utils.cache_timeout_expired(cfg.cache_timeout, clone_dir) then\r\n            if not suppress_printing then print(\"'\" .. pkg_full_name .. \"' already in cache, skipping downloading (use '-cache=false' to force download).\") end\r\n            return clone_dir\r\n        else\r\n            sys.delete(sys.make_path(clone_dir))\r\n        end\r\n    end\r\n\r\n    local bin_tag = pkg.version .. \"-\" .. cfg.arch .. \"-\" .. cfg.type\r\n    local use_binary = false\r\n\r\n    if cfg.binary then\r\n        -- check if binary version of the module for this arch & type available\r\n        local avail_tags, err = git.get_remote_tags(repo_url)\r\n        if not avail_tags then return nil, err end\r\n\r\n        if utils.contains(avail_tags, bin_tag) then\r\n            use_binary = true\r\n        end\r\n    end\r\n\r\n    -- init the git repository\r\n    local ok, err = git.create_repo(clone_dir)\r\n    if not ok then return nil, err end\r\n\r\n    -- Fetch the desired ref (from the pkg's remote repo) and checkout into it.\r\n\r\n    if use_binary then\r\n\r\n        if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (binary)...\") end\r\n\r\n        -- We fetch the binary tag.\r\n        local sha\r\n        if ok then sha, err = git.fetch_tag(clone_dir, repo_url, bin_tag) end\r\n        if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n\r\n    elseif cfg.source then\r\n\r\n        if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (source)...\") end\r\n\r\n        -- If we want the 'scm' version, we fetch the 'master' branch, otherwise\r\n        -- we fetch the tag, matching the desired package version.\r\n        if ok and pkg.version ~= \"scm\" then\r\n            local sha\r\n            sha, err = git.fetch_tag(clone_dir, repo_url, pkg.version)\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        elseif ok then\r\n            local sha\r\n            sha, err = git.fetch_branch(clone_dir, repo_url, \"master\")\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        end\r\n\r\n    else\r\n        ok = false\r\n        if cfg.binary then\r\n            err = \"Binary version of module not available and using source modules disabled.\"\r\n        else\r\n            err = \"Using both binary and source modules disabled.\"\r\n        end\r\n    end\r\n\r\n    if not ok then\r\n        -- clean up\r\n        if not cfg.debug then sys.delete(clone_dir) end\r\n        return nil, \"Error fetching package '\" .. pkg_full_name .. \"' from '\" .. pkg.path .. \"' to '\" .. download_dir .. \"': \" .. err\r\n    end\r\n\r\n    -- delete '.git' directory\r\n    if not cfg.debug then sys.delete(sys.make_path(clone_dir, \".git\")) end\r\n\r\n    return clone_dir\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "function retrieve_versions(package, manifest, suppress_printing)\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(package) == \"string\", \"package.retrieve_versions: Argument 'string' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.retrieve_versions: Argument 'manifest' is not a table.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.retrieve_versions: Argument 'suppress_printing' is not a boolean.\")\r\n\r\n    -- get package table\r\n    local pkg_name = depends.split_name_constraint(package)\r\n    local tmp_packages = depends.find_packages(pkg_name, manifest)\r\n\r\n    if #tmp_packages == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. package .. \"' found.\"\r\n    else\r\n        package = tmp_packages[1]\r\n    end\r\n\r\n    if not suppress_printing then print(\"Finding out available versions of \" .. package.name .. \"...\") end\r\n\r\n    -- get available versions\r\n    local tags, err = git.get_remote_tags(package.path)\r\n    if not tags then return nil, \"Error when retrieving versions of package '\" .. package.name .. \"': \" .. err end\r\n\r\n    -- filter out tags of binary packages\r\n    local versions = utils.filter(tags, function (tag) return tag:match(\"^[^%-]+%-?[^%-]*$\") and true end)\r\n\r\n    packages = {}\r\n\r\n    -- create package information\r\n    for _, version in pairs(versions) do\r\n        pkg = {}\r\n        pkg.name = package.name\r\n        pkg.version = version\r\n        pkg.path = package.path\r\n        table.insert(packages, pkg)\r\n    end\r\n\r\n    return packages\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "function quote(argument)\r\n    assert(type(argument) == \"string\", \"sys.quote: Argument 'argument' is not a string.\")\r\n\r\n    -- replace '/' path separators for '\\' on Windows\r\n    if cfg.arch == \"Windows\" and argument:match(\"^[%u%U.]?:?[/\\\\].*\") then\r\n        argument = argument:gsub(\"//\",\"\\\\\"):gsub(\"/\",\"\\\\\")\r\n    end\r\n\r\n    -- Windows doesn't recognize paths starting with two slashes or backslashes\r\n    -- so we double every backslash except for the first one\r\n    if cfg.arch == \"Windows\" and argument:match(\"^[/\\\\].*\") then\r\n        local prefix = argument:sub(1,1)\r\n        argument = argument:sub(2):gsub(\"\\\\\",  \"\\\\\\\\\")\r\n        argument = prefix .. argument\r\n    else\r\n        argument = argument:gsub(\"\\\\\",  \"\\\\\\\\\")\r\n    end\r\n    argument = argument:gsub('\"',  '\\\\\"')\r\n\r\n    return '\"' .. argument .. '\"'\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "function exec(command, force_verbose)\r\n    force_verbose = force_verbose or false\r\n    assert(type(command) == \"string\", \"sys.exec: Argument 'command' is not a string.\")\r\n    assert(type(force_verbose) == \"boolean\", \"sys.exec: Argument 'force_verbose' is not a boolean.\")\r\n\r\n    if not (cfg.verbose or cfg.debug or force_verbose) then\r\n        if cfg.arch == \"Windows\" then\r\n            command = command .. \" > NUL 2>&1\"\r\n        else\r\n            command = command .. \" > /dev/null 2>&1\"\r\n        end\r\n    end\r\n\r\n    if cfg.debug then print(\"Executing the command: \" .. command) end\r\n    local ok, str, status  = os.execute(command)\r\n\r\n    -- os.execute returned values on failure are:\r\n    --  nil or true, \"exit\", n or true, \"signal\", n for lua >= 5.2\r\n    --  status ~= 0 for lua 5.x < 5.2\r\n    if ok == nil or (str == \"exit\" and status ~= 0) or str == \"signal\" or (ok ~= 0 and ok ~= true) then\r\n        return nil, \"Error when running the command: \" .. command\r\n    else\r\n        return true, \"Sucessfully executed the command: \" .. command\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "function exists(path)\r\n    assert(type(path) == \"string\", \"sys.exists: Argument 'path' is not a string.\")\r\n    local attr, err = lfs.attributes(path)\r\n    return utils.to_boolean(attr), err\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "function current_dir()\r\n    local dir, err = lfs.currentdir()\r\n    if not dir then return nil, err end\r\n    return dir\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "function abs_path(path)\r\n    assert(type(path) == \"string\", \"sys.get_abs_path: Argument 'path' is not a string.\")\r\n    if is_abs(path) then return path end\r\n\r\n    local cur_dir, err = current_dir()\r\n    if not cur_dir then return nil, err end\r\n\r\n    return make_path(cur_dir, path)\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "function change_dir(dir_name)\r\n    assert(type(dir_name) == \"string\", \"sys.change_dir: Argument 'dir_name' is not a string.\")\r\n    local prev_dir = current_dir()\r\n    local ok, err = lfs.chdir(dir_name)\r\n    if ok then\r\n        return ok, prev_dir\r\n    else\r\n        return nil, err\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "function make_dir(dir_name)\r\n    assert(type(dir_name) == \"string\", \"sys.make_dir: Argument 'dir_name' is not a string.\")\r\n    if exists(dir_name) then\r\n        return true\r\n    else\r\n        local par_dir = parent_dir(dir_name)\r\n        if par_dir then\r\n            local ok, err = make_dir(par_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n        return lfs.mkdir(dir_name)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "function delete(path)\r\n    assert(type(path) == \"string\", \"sys.delete: Argument 'path' is not a string.\")\r\n    assert(is_abs(path), \"sys.delete: Argument 'path' is not an absolute path.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if not exists(path) then\r\n            return true\r\n        elseif is_file(path) then\r\n            return os.remove(path)\r\n        else\r\n            --return exec(\"rd /S /Q \" .. quote(path))\r\n            return exec(\"move /y \" .. quote(path) .. \" \" .. quote(tmp_dir()))\r\n        end\r\n    else\r\n        return exec(\"rm -rf \" .. quote(path))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 161,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 162,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 163,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 164,
    "text": "module",
    "type": "global function"
  }, {
    "id": 165,
    "text": "type",
    "type": "global function"
  }, {
    "id": 166,
    "text": "require",
    "type": "global function"
  }, {
    "id": 167,
    "text": "config",
    "type": "module"
  }, {
    "id": 168,
    "text": "",
    "type": "variable container"
  }, {
    "id": 169,
    "text": "",
    "type": "require container"
  }, {
    "id": 170,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "global variable"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "require local variable"
  } ]
}