{
  "_filename": "package.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadist-git/dist/package.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 5
  }, {
    "from": 11,
    "label": "calls",
    "to": 263
  }, {
    "from": 13,
    "label": "calls",
    "to": 263
  }, {
    "from": 14,
    "label": "calls",
    "to": 263
  }, {
    "from": 13,
    "label": "calls",
    "to": 250
  }, {
    "from": 11,
    "label": "calls",
    "to": 284
  }, {
    "from": 14,
    "label": "calls",
    "to": 284
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 23,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 65
  }, {
    "from": 21,
    "label": "calls",
    "to": 65
  }, {
    "from": 22,
    "label": "calls",
    "to": 65
  }, {
    "from": 24,
    "label": "calls",
    "to": 263
  }, {
    "from": 20,
    "label": "calls",
    "to": 250
  }, {
    "from": 21,
    "label": "calls",
    "to": 250
  }, {
    "from": 24,
    "label": "calls",
    "to": 250
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 47
  }, {
    "from": 39,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 45
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 27,
    "label": "has",
    "to": 55
  }, {
    "from": 27,
    "label": "has",
    "to": 56
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 57
  }, {
    "from": 27,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 27,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 28
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 31
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 65,
    "label": "has",
    "to": 35
  }, {
    "from": 65,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 65,
    "label": "has",
    "to": 78
  }, {
    "from": 65,
    "label": "has",
    "to": 35
  }, {
    "from": 65,
    "label": "has",
    "to": 79
  }, {
    "from": 65,
    "label": "has",
    "to": 35
  }, {
    "from": 65,
    "label": "has",
    "to": 80
  }, {
    "from": 65,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 81,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 87
  }, {
    "from": 81,
    "label": "has",
    "to": 89
  }, {
    "from": 81,
    "label": "has",
    "to": 90
  }, {
    "from": 81,
    "label": "has",
    "to": 91
  }, {
    "from": 81,
    "label": "has",
    "to": 92
  }, {
    "from": 81,
    "label": "has",
    "to": 93
  }, {
    "from": 65,
    "label": "has",
    "to": 35
  }, {
    "from": 65,
    "label": "has",
    "to": 35
  }, {
    "from": 65,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 65,
    "label": "has",
    "to": 35
  }, {
    "from": 65,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 28
  }, {
    "from": 97,
    "label": "has",
    "to": 66
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 31
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 97,
    "label": "has",
    "to": 106
  }, {
    "from": 97,
    "label": "has",
    "to": 107
  }, {
    "from": 97,
    "label": "has",
    "to": 108
  }, {
    "from": 97,
    "label": "has",
    "to": 109
  }, {
    "from": 97,
    "label": "has",
    "to": 110
  }, {
    "from": 97,
    "label": "has",
    "to": 111
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 97,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 97,
    "label": "has",
    "to": 119
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 120
  }, {
    "from": 97,
    "label": "has",
    "to": 121
  }, {
    "from": 97,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 97,
    "label": "has",
    "to": 124
  }, {
    "from": 97,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 97,
    "label": "has",
    "to": 127
  }, {
    "from": 97,
    "label": "has",
    "to": 128
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 129
  }, {
    "from": 97,
    "label": "has",
    "to": 130
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 131
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 132
  }, {
    "from": 97,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 133,
    "label": "has",
    "to": 139
  }, {
    "from": 133,
    "label": "has",
    "to": 140
  }, {
    "from": 133,
    "label": "has",
    "to": 141
  }, {
    "from": 133,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 142,
    "label": "has",
    "to": 149
  }, {
    "from": 142,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 156,
    "label": "has",
    "to": 164
  }, {
    "from": 156,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 165,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 156,
    "label": "has",
    "to": 179
  }, {
    "from": 97,
    "label": "has",
    "to": 180
  }, {
    "from": 97,
    "label": "has",
    "to": 181
  }, {
    "from": 97,
    "label": "has",
    "to": 182
  }, {
    "from": 97,
    "label": "has",
    "to": 183
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 97,
    "label": "has",
    "to": 35
  }, {
    "from": 97,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 28
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 72
  }, {
    "from": 187,
    "label": "has",
    "to": 31
  }, {
    "from": 187,
    "label": "has",
    "to": 73
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 35
  }, {
    "from": 187,
    "label": "has",
    "to": 104
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 187,
    "label": "has",
    "to": 35
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 194,
    "label": "has",
    "to": 198
  }, {
    "from": 194,
    "label": "has",
    "to": 199
  }, {
    "from": 187,
    "label": "has",
    "to": 35
  }, {
    "from": 187,
    "label": "has",
    "to": 35
  }, {
    "from": 187,
    "label": "has",
    "to": 180
  }, {
    "from": 187,
    "label": "has",
    "to": 181
  }, {
    "from": 187,
    "label": "has",
    "to": 182
  }, {
    "from": 187,
    "label": "has",
    "to": 183
  }, {
    "from": 187,
    "label": "has",
    "to": 35
  }, {
    "from": 187,
    "label": "has",
    "to": 35
  }, {
    "from": 187,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 201,
    "label": "has",
    "to": 205
  }, {
    "from": 201,
    "label": "has",
    "to": 206
  }, {
    "from": 201,
    "label": "has",
    "to": 207
  }, {
    "from": 201,
    "label": "has",
    "to": 208
  }, {
    "from": 201,
    "label": "has",
    "to": 209
  }, {
    "from": 201,
    "label": "has",
    "to": 210
  }, {
    "from": 201,
    "label": "has",
    "to": 211
  }, {
    "from": 201,
    "label": "has",
    "to": 212
  }, {
    "from": 201,
    "label": "has",
    "to": 213
  }, {
    "from": 201,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 201,
    "label": "has",
    "to": 35
  }, {
    "from": 201,
    "label": "has",
    "to": 219
  }, {
    "from": 201,
    "label": "has",
    "to": 220
  }, {
    "from": 201,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 221,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 201,
    "label": "has",
    "to": 35
  }, {
    "from": 201,
    "label": "has",
    "to": 226
  }, {
    "from": 201,
    "label": "has",
    "to": 183
  }, {
    "from": 201,
    "label": "has",
    "to": 35
  }, {
    "from": 201,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 227,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 227,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 227,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 230
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 237,
    "label": "has",
    "to": 230
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 237,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 227,
    "label": "has",
    "to": 240
  }, {
    "from": 227,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 201,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 201,
    "label": "has",
    "to": 35
  }, {
    "from": 201,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 201,
    "label": "has",
    "to": 35
  }, {
    "from": 201,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 202
  }, {
    "from": 250,
    "label": "has",
    "to": 203
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 250,
    "label": "has",
    "to": 253
  }, {
    "from": 250,
    "label": "has",
    "to": 210
  }, {
    "from": 250,
    "label": "has",
    "to": 254
  }, {
    "from": 250,
    "label": "has",
    "to": 255
  }, {
    "from": 250,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 250,
    "label": "has",
    "to": 35
  }, {
    "from": 250,
    "label": "has",
    "to": 35
  }, {
    "from": 250,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 203
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 263,
    "label": "has",
    "to": 267
  }, {
    "from": 263,
    "label": "has",
    "to": 268
  }, {
    "from": 263,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 263,
    "label": "has",
    "to": 35
  }, {
    "from": 263,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 263,
    "label": "has",
    "to": 273
  }, {
    "from": 263,
    "label": "has",
    "to": 274
  }, {
    "from": 263,
    "label": "has",
    "to": 35
  }, {
    "from": 263,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 35
  }, {
    "from": 263,
    "label": "has",
    "to": 276
  }, {
    "from": 263,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 277,
    "label": "has",
    "to": 279
  }, {
    "from": 277,
    "label": "has",
    "to": 280
  }, {
    "from": 277,
    "label": "has",
    "to": 281
  }, {
    "from": 277,
    "label": "has",
    "to": 282
  }, {
    "from": 263,
    "label": "has",
    "to": 35
  }, {
    "from": 263,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 28
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 31
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 284,
    "label": "has",
    "to": 288
  }, {
    "from": 284,
    "label": "has",
    "to": 289
  }, {
    "from": 284,
    "label": "has",
    "to": 35
  }, {
    "from": 284,
    "label": "has",
    "to": 73
  }, {
    "from": 284,
    "label": "has",
    "to": 290
  }, {
    "from": 284,
    "label": "has",
    "to": 35
  }, {
    "from": 284,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 284,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 76
  }, {
    "from": 293,
    "label": "has",
    "to": 77
  }, {
    "from": 284,
    "label": "has",
    "to": 35
  }, {
    "from": 284,
    "label": "has",
    "to": 35
  }, {
    "from": 284,
    "label": "has",
    "to": 294
  }, {
    "from": 295,
    "label": "has",
    "to": 28
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 295,
    "label": "has",
    "to": 298
  }, {
    "from": 295,
    "label": "has",
    "to": 31
  }, {
    "from": 295,
    "label": "has",
    "to": 299
  }, {
    "from": 295,
    "label": "has",
    "to": 300
  }, {
    "from": 295,
    "label": "has",
    "to": 35
  }, {
    "from": 295,
    "label": "has",
    "to": 301
  }, {
    "from": 295,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 302,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 302,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 307,
    "label": "has",
    "to": 310
  }, {
    "from": 307,
    "label": "has",
    "to": 311
  }, {
    "from": 307,
    "label": "has",
    "to": 312
  }, {
    "from": 307,
    "label": "has",
    "to": 313
  }, {
    "from": 307,
    "label": "has",
    "to": 314
  }, {
    "from": 302,
    "label": "has",
    "to": 315
  }, {
    "from": 295,
    "label": "has",
    "to": 35
  }, {
    "from": 295,
    "label": "has",
    "to": 316
  }, {
    "from": 295,
    "label": "has",
    "to": 317
  }, {
    "from": 295,
    "label": "has",
    "to": 318
  }, {
    "from": 295,
    "label": "has",
    "to": 35
  }, {
    "from": 295,
    "label": "has",
    "to": 319
  }, {
    "from": 295,
    "label": "has",
    "to": 320
  }, {
    "from": 295,
    "label": "has",
    "to": 35
  }, {
    "from": 295,
    "label": "has",
    "to": 314
  }, {
    "from": 295,
    "label": "has",
    "to": 321
  }, {
    "from": 295,
    "label": "has",
    "to": 322
  }, {
    "from": 295,
    "label": "has",
    "to": 323
  }, {
    "from": 295,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 324,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 324,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 295,
    "label": "has",
    "to": 35
  }, {
    "from": 295,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "calls",
    "to": 345
  }, {
    "from": 27,
    "label": "calls",
    "to": 360
  }, {
    "from": 27,
    "label": "calls",
    "to": 360
  }, {
    "from": 65,
    "label": "calls",
    "to": 360
  }, {
    "from": 65,
    "label": "calls",
    "to": 360
  }, {
    "from": 65,
    "label": "calls",
    "to": 360
  }, {
    "from": 65,
    "label": "calls",
    "to": 360
  }, {
    "from": 97,
    "label": "calls",
    "to": 360
  }, {
    "from": 97,
    "label": "calls",
    "to": 360
  }, {
    "from": 97,
    "label": "calls",
    "to": 360
  }, {
    "from": 187,
    "label": "calls",
    "to": 360
  }, {
    "from": 187,
    "label": "calls",
    "to": 360
  }, {
    "from": 201,
    "label": "calls",
    "to": 360
  }, {
    "from": 201,
    "label": "calls",
    "to": 360
  }, {
    "from": 201,
    "label": "calls",
    "to": 360
  }, {
    "from": 201,
    "label": "calls",
    "to": 360
  }, {
    "from": 201,
    "label": "calls",
    "to": 360
  }, {
    "from": 201,
    "label": "calls",
    "to": 360
  }, {
    "from": 250,
    "label": "calls",
    "to": 360
  }, {
    "from": 250,
    "label": "calls",
    "to": 360
  }, {
    "from": 250,
    "label": "calls",
    "to": 360
  }, {
    "from": 263,
    "label": "calls",
    "to": 360
  }, {
    "from": 263,
    "label": "calls",
    "to": 360
  }, {
    "from": 263,
    "label": "calls",
    "to": 360
  }, {
    "from": 284,
    "label": "calls",
    "to": 360
  }, {
    "from": 284,
    "label": "calls",
    "to": 360
  }, {
    "from": 295,
    "label": "calls",
    "to": 360
  }, {
    "from": 295,
    "label": "calls",
    "to": 360
  }, {
    "from": 295,
    "label": "calls",
    "to": 360
  }, {
    "from": 201,
    "label": "calls",
    "to": 17
  }, {
    "from": 201,
    "label": "calls",
    "to": 17
  }, {
    "from": 97,
    "label": "calls",
    "to": 336
  }, {
    "from": 27,
    "label": "calls",
    "to": 349
  }, {
    "from": 97,
    "label": "calls",
    "to": 349
  }, {
    "from": 97,
    "label": "calls",
    "to": 349
  }, {
    "from": 187,
    "label": "calls",
    "to": 349
  }, {
    "from": 187,
    "label": "calls",
    "to": 349
  }, {
    "from": 65,
    "label": "calls",
    "to": 97
  }, {
    "from": 187,
    "label": "calls",
    "to": 344
  }, {
    "from": 65,
    "label": "calls",
    "to": 339
  }, {
    "from": 97,
    "label": "calls",
    "to": 339
  }, {
    "from": 201,
    "label": "calls",
    "to": 339
  }, {
    "from": 284,
    "label": "calls",
    "to": 339
  }, {
    "from": 97,
    "label": "calls",
    "to": 361
  }, {
    "from": 97,
    "label": "calls",
    "to": 361
  }, {
    "from": 201,
    "label": "calls",
    "to": 361
  }, {
    "from": 201,
    "label": "calls",
    "to": 361
  }, {
    "from": 201,
    "label": "calls",
    "to": 361
  }, {
    "from": 263,
    "label": "calls",
    "to": 361
  }, {
    "from": 295,
    "label": "calls",
    "to": 361
  }, {
    "from": 250,
    "label": "calls",
    "to": 201
  }, {
    "from": 284,
    "label": "calls",
    "to": 201
  }, {
    "from": 97,
    "label": "calls",
    "to": 343
  }, {
    "from": 97,
    "label": "calls",
    "to": 343
  }, {
    "from": 334,
    "label": "calls",
    "to": 365
  }, {
    "from": 295,
    "label": "calls",
    "to": 352
  }, {
    "from": 201,
    "label": "calls",
    "to": 18
  }, {
    "from": 65,
    "label": "calls",
    "to": 359
  }, {
    "from": 65,
    "label": "calls",
    "to": 359
  }, {
    "from": 65,
    "label": "calls",
    "to": 359
  }, {
    "from": 65,
    "label": "calls",
    "to": 357
  }, {
    "from": 334,
    "label": "calls",
    "to": 368
  }, {
    "from": 334,
    "label": "calls",
    "to": 368
  }, {
    "from": 334,
    "label": "calls",
    "to": 368
  }, {
    "from": 334,
    "label": "calls",
    "to": 368
  }, {
    "from": 334,
    "label": "calls",
    "to": 368
  }, {
    "from": 334,
    "label": "calls",
    "to": 368
  }, {
    "from": 334,
    "label": "calls",
    "to": 368
  }, {
    "from": 97,
    "label": "calls",
    "to": 363
  }, {
    "from": 97,
    "label": "calls",
    "to": 363
  }, {
    "from": 97,
    "label": "calls",
    "to": 363
  }, {
    "from": 97,
    "label": "calls",
    "to": 12
  }, {
    "from": 263,
    "label": "calls",
    "to": 12
  }, {
    "from": 295,
    "label": "calls",
    "to": 12
  }, {
    "from": 97,
    "label": "calls",
    "to": 335
  }, {
    "from": 27,
    "label": "calls",
    "to": 26
  }, {
    "from": 97,
    "label": "calls",
    "to": 26
  }, {
    "from": 187,
    "label": "calls",
    "to": 26
  }, {
    "from": 27,
    "label": "calls",
    "to": 362
  }, {
    "from": 65,
    "label": "calls",
    "to": 362
  }, {
    "from": 65,
    "label": "calls",
    "to": 362
  }, {
    "from": 97,
    "label": "calls",
    "to": 362
  }, {
    "from": 97,
    "label": "calls",
    "to": 362
  }, {
    "from": 97,
    "label": "calls",
    "to": 362
  }, {
    "from": 97,
    "label": "calls",
    "to": 362
  }, {
    "from": 97,
    "label": "calls",
    "to": 362
  }, {
    "from": 250,
    "label": "calls",
    "to": 362
  }, {
    "from": 263,
    "label": "calls",
    "to": 362
  }, {
    "from": 295,
    "label": "calls",
    "to": 362
  }, {
    "from": 295,
    "label": "calls",
    "to": 362
  }, {
    "from": 27,
    "label": "calls",
    "to": 366
  }, {
    "from": 27,
    "label": "calls",
    "to": 366
  }, {
    "from": 27,
    "label": "calls",
    "to": 366
  }, {
    "from": 97,
    "label": "calls",
    "to": 366
  }, {
    "from": 187,
    "label": "calls",
    "to": 366
  }, {
    "from": 187,
    "label": "calls",
    "to": 366
  }, {
    "from": 295,
    "label": "calls",
    "to": 366
  }, {
    "from": 97,
    "label": "calls",
    "to": 338
  }, {
    "from": 97,
    "label": "calls",
    "to": 338
  }, {
    "from": 97,
    "label": "calls",
    "to": 338
  }, {
    "from": 97,
    "label": "calls",
    "to": 338
  }, {
    "from": 27,
    "label": "calls",
    "to": 351
  }, {
    "from": 27,
    "label": "calls",
    "to": 351
  }, {
    "from": 27,
    "label": "calls",
    "to": 351
  }, {
    "from": 27,
    "label": "calls",
    "to": 351
  }, {
    "from": 65,
    "label": "calls",
    "to": 351
  }, {
    "from": 97,
    "label": "calls",
    "to": 351
  }, {
    "from": 201,
    "label": "calls",
    "to": 351
  }, {
    "from": 201,
    "label": "calls",
    "to": 351
  }, {
    "from": 201,
    "label": "calls",
    "to": 351
  }, {
    "from": 295,
    "label": "calls",
    "to": 351
  }, {
    "from": 295,
    "label": "calls",
    "to": 351
  }, {
    "from": 201,
    "label": "calls",
    "to": 354
  }, {
    "from": 201,
    "label": "calls",
    "to": 16
  }, {
    "from": 201,
    "label": "calls",
    "to": 16
  }, {
    "from": 201,
    "label": "calls",
    "to": 16
  }, {
    "from": 201,
    "label": "calls",
    "to": 19
  }, {
    "from": 97,
    "label": "calls",
    "to": 8
  }, {
    "from": 201,
    "label": "calls",
    "to": 15
  }, {
    "from": 263,
    "label": "calls",
    "to": 15
  }, {
    "from": 27,
    "label": "calls",
    "to": 346
  }, {
    "from": 27,
    "label": "calls",
    "to": 346
  }, {
    "from": 27,
    "label": "calls",
    "to": 346
  }, {
    "from": 27,
    "label": "calls",
    "to": 346
  }, {
    "from": 27,
    "label": "calls",
    "to": 346
  }, {
    "from": 65,
    "label": "calls",
    "to": 346
  }, {
    "from": 65,
    "label": "calls",
    "to": 346
  }, {
    "from": 65,
    "label": "calls",
    "to": 346
  }, {
    "from": 65,
    "label": "calls",
    "to": 346
  }, {
    "from": 65,
    "label": "calls",
    "to": 346
  }, {
    "from": 65,
    "label": "calls",
    "to": 346
  }, {
    "from": 97,
    "label": "calls",
    "to": 346
  }, {
    "from": 97,
    "label": "calls",
    "to": 346
  }, {
    "from": 97,
    "label": "calls",
    "to": 346
  }, {
    "from": 97,
    "label": "calls",
    "to": 346
  }, {
    "from": 97,
    "label": "calls",
    "to": 346
  }, {
    "from": 97,
    "label": "calls",
    "to": 346
  }, {
    "from": 97,
    "label": "calls",
    "to": 346
  }, {
    "from": 187,
    "label": "calls",
    "to": 346
  }, {
    "from": 187,
    "label": "calls",
    "to": 346
  }, {
    "from": 187,
    "label": "calls",
    "to": 346
  }, {
    "from": 187,
    "label": "calls",
    "to": 346
  }, {
    "from": 187,
    "label": "calls",
    "to": 346
  }, {
    "from": 201,
    "label": "calls",
    "to": 346
  }, {
    "from": 201,
    "label": "calls",
    "to": 346
  }, {
    "from": 201,
    "label": "calls",
    "to": 346
  }, {
    "from": 201,
    "label": "calls",
    "to": 346
  }, {
    "from": 284,
    "label": "calls",
    "to": 346
  }, {
    "from": 284,
    "label": "calls",
    "to": 346
  }, {
    "from": 284,
    "label": "calls",
    "to": 346
  }, {
    "from": 65,
    "label": "calls",
    "to": 187
  }, {
    "from": 295,
    "label": "calls",
    "to": 284
  }, {
    "from": 295,
    "label": "calls",
    "to": 284
  }, {
    "from": 187,
    "label": "calls",
    "to": 350
  }, {
    "from": 27,
    "label": "calls",
    "to": 25
  }, {
    "from": 65,
    "label": "calls",
    "to": 25
  }, {
    "from": 97,
    "label": "calls",
    "to": 25
  }, {
    "from": 187,
    "label": "calls",
    "to": 25
  }, {
    "from": 284,
    "label": "calls",
    "to": 25
  }, {
    "from": 97,
    "label": "calls",
    "to": 10
  }, {
    "from": 27,
    "label": "calls",
    "to": 341
  }, {
    "from": 27,
    "label": "calls",
    "to": 341
  }, {
    "from": 97,
    "label": "calls",
    "to": 364
  }, {
    "from": 97,
    "label": "calls",
    "to": 364
  }, {
    "from": 97,
    "label": "calls",
    "to": 364
  }, {
    "from": 250,
    "label": "calls",
    "to": 364
  }, {
    "from": 263,
    "label": "calls",
    "to": 364
  }, {
    "from": 295,
    "label": "calls",
    "to": 364
  }, {
    "from": 295,
    "label": "calls",
    "to": 364
  }, {
    "from": 295,
    "label": "calls",
    "to": 364
  }, {
    "from": 27,
    "label": "calls",
    "to": 340
  }, {
    "from": 263,
    "label": "calls",
    "to": 353
  }, {
    "from": 97,
    "label": "calls",
    "to": 337
  }, {
    "from": 97,
    "label": "calls",
    "to": 337
  }, {
    "from": 97,
    "label": "calls",
    "to": 337
  }, {
    "from": 97,
    "label": "calls",
    "to": 337
  }, {
    "from": 97,
    "label": "calls",
    "to": 337
  }, {
    "from": 97,
    "label": "calls",
    "to": 337
  }, {
    "from": 263,
    "label": "calls",
    "to": 9
  }, {
    "from": 295,
    "label": "calls",
    "to": 9
  }, {
    "from": 295,
    "label": "calls",
    "to": 9
  }, {
    "from": 201,
    "label": "calls",
    "to": 355
  }, {
    "from": 27,
    "label": "calls",
    "to": 348
  }, {
    "from": 27,
    "label": "calls",
    "to": 348
  }, {
    "from": 27,
    "label": "calls",
    "to": 347
  }, {
    "from": 65,
    "label": "calls",
    "to": 347
  }, {
    "from": 65,
    "label": "calls",
    "to": 347
  }, {
    "from": 97,
    "label": "calls",
    "to": 347
  }, {
    "from": 97,
    "label": "calls",
    "to": 347
  }, {
    "from": 97,
    "label": "calls",
    "to": 347
  }, {
    "from": 97,
    "label": "calls",
    "to": 347
  }, {
    "from": 97,
    "label": "calls",
    "to": 347
  }, {
    "from": 187,
    "label": "calls",
    "to": 347
  }, {
    "from": 187,
    "label": "calls",
    "to": 347
  }, {
    "from": 201,
    "label": "calls",
    "to": 347
  }, {
    "from": 201,
    "label": "calls",
    "to": 347
  }, {
    "from": 250,
    "label": "calls",
    "to": 347
  }, {
    "from": 284,
    "label": "calls",
    "to": 347
  }, {
    "from": 284,
    "label": "calls",
    "to": 347
  }, {
    "from": 295,
    "label": "calls",
    "to": 347
  }, {
    "from": 27,
    "label": "calls",
    "to": 367
  }, {
    "from": 27,
    "label": "calls",
    "to": 367
  }, {
    "from": 65,
    "label": "calls",
    "to": 367
  }, {
    "from": 65,
    "label": "calls",
    "to": 367
  }, {
    "from": 65,
    "label": "calls",
    "to": 367
  }, {
    "from": 65,
    "label": "calls",
    "to": 367
  }, {
    "from": 97,
    "label": "calls",
    "to": 367
  }, {
    "from": 97,
    "label": "calls",
    "to": 367
  }, {
    "from": 97,
    "label": "calls",
    "to": 367
  }, {
    "from": 97,
    "label": "calls",
    "to": 367
  }, {
    "from": 97,
    "label": "calls",
    "to": 367
  }, {
    "from": 187,
    "label": "calls",
    "to": 367
  }, {
    "from": 187,
    "label": "calls",
    "to": 367
  }, {
    "from": 201,
    "label": "calls",
    "to": 367
  }, {
    "from": 201,
    "label": "calls",
    "to": 367
  }, {
    "from": 201,
    "label": "calls",
    "to": 367
  }, {
    "from": 201,
    "label": "calls",
    "to": 367
  }, {
    "from": 201,
    "label": "calls",
    "to": 367
  }, {
    "from": 201,
    "label": "calls",
    "to": 367
  }, {
    "from": 250,
    "label": "calls",
    "to": 367
  }, {
    "from": 250,
    "label": "calls",
    "to": 367
  }, {
    "from": 250,
    "label": "calls",
    "to": 367
  }, {
    "from": 263,
    "label": "calls",
    "to": 367
  }, {
    "from": 263,
    "label": "calls",
    "to": 367
  }, {
    "from": 263,
    "label": "calls",
    "to": 367
  }, {
    "from": 284,
    "label": "calls",
    "to": 367
  }, {
    "from": 284,
    "label": "calls",
    "to": 367
  }, {
    "from": 295,
    "label": "calls",
    "to": 367
  }, {
    "from": 295,
    "label": "calls",
    "to": 367
  }, {
    "from": 295,
    "label": "calls",
    "to": 367
  }, {
    "from": 295,
    "label": "calls",
    "to": 367
  }, {
    "from": 295,
    "label": "calls",
    "to": 263
  }, {
    "from": 97,
    "label": "calls",
    "to": 356
  }, {
    "from": 201,
    "label": "calls",
    "to": 342
  }, {
    "from": 250,
    "label": "calls",
    "to": 342
  }, {
    "from": 5,
    "label": "contains",
    "to": 334
  }, {
    "from": 334,
    "label": "declares",
    "to": 27
  }, {
    "from": 334,
    "label": "declares",
    "to": 65
  }, {
    "from": 334,
    "label": "declares",
    "to": 97
  }, {
    "from": 334,
    "label": "declares",
    "to": 187
  }, {
    "from": 334,
    "label": "declares",
    "to": 201
  }, {
    "from": 334,
    "label": "declares",
    "to": 250
  }, {
    "from": 334,
    "label": "declares",
    "to": 263
  }, {
    "from": 334,
    "label": "declares",
    "to": 284
  }, {
    "from": 334,
    "label": "declares",
    "to": 295
  }, {
    "from": 334,
    "label": "declares",
    "to": 333
  }, {
    "from": 358,
    "label": "calls",
    "to": 295
  }, {
    "from": 370,
    "label": "requires",
    "to": 5
  }, {
    "from": 371,
    "label": "requires",
    "to": 5
  }, {
    "from": 5,
    "label": "contains",
    "to": 372
  }, {
    "from": 5,
    "label": "contains",
    "to": 373
  }, {
    "from": 373,
    "label": "initializes",
    "to": 374
  }, {
    "from": 374,
    "label": "requires",
    "to": 369
  }, {
    "from": 373,
    "label": "initializes",
    "to": 375
  }, {
    "from": 375,
    "label": "requires",
    "to": 3
  }, {
    "from": 373,
    "label": "initializes",
    "to": 376
  }, {
    "from": 376,
    "label": "requires",
    "to": 6
  }, {
    "from": 373,
    "label": "initializes",
    "to": 377
  }, {
    "from": 377,
    "label": "requires",
    "to": 4
  }, {
    "from": 373,
    "label": "initializes",
    "to": 378
  }, {
    "from": 378,
    "label": "requires",
    "to": 7
  }, {
    "from": 373,
    "label": "initializes",
    "to": 379
  }, {
    "from": 379,
    "label": "requires",
    "to": 2
  }, {
    "from": 373,
    "label": "initializes",
    "to": 380
  }, {
    "from": 380,
    "label": "requires",
    "to": 1
  }, {
    "from": 381,
    "label": "requires",
    "to": 5
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "constraints",
    "type": "module"
  }, {
    "id": 2,
    "text": "depends",
    "type": "module"
  }, {
    "id": 3,
    "text": "git",
    "type": "module"
  }, {
    "id": 4,
    "text": "manifest",
    "type": "module"
  }, {
    "id": 5,
    "text": "package",
    "type": "module"
  }, {
    "id": 6,
    "text": "sys",
    "type": "module"
  }, {
    "id": 7,
    "text": "utils",
    "type": "module"
  }, {
    "id": 8,
    "text": "function parseVersion(vstring)\r\n  if not vstring then return nil end\r\n  assert(type(vstring) == \"string\")\r\n\r\n  -- function that actually parse the version string\r\n  local function parse(vstring)\r\n\r\n    local version = {}\r\n    setmetatable(version, version_mt)\r\n    local add_table = function()\r\n       local t = {}\r\n       table.insert(version, t)\r\n       return t\r\n    end\r\n    local t = add_table()\r\n    -- trim leading and trailing spaces\r\n    vstring = vstring:match(\"^%s*(.*)%s*$\")\r\n    version.string = vstring\r\n    -- store revision separately if any\r\n    local main, revision = vstring:match(\"(.*)%-(%d+)$\")\r\n    if revision then\r\n      vstring = main\r\n      version.revision = tonumber(revision)\r\n    end\r\n    local number\r\n    while #vstring > 0 do\r\n      -- extract a number\r\n      local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")\r\n      if token then\r\n        if number == false then\r\n          t = add_table()\r\n        end\r\n        table.insert(t, tonumber(token))\r\n        number = true\r\n      else\r\n        -- extract a word\r\n        token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n        if token then\r\n          if number == true then\r\n             t = add_table()\r\n          end\r\n          table.insert(t, precedence[token:lower()] or precedence.other)\r\n          number = false\r\n        end\r\n      end\r\n      vstring = rest\r\n    end\r\n    return version\r\n  end\r\n\r\n  -- return the cached version, if any\r\n  local version = version_cache[vstring]\r\n  if version == nil then\r\n    -- or parse the version and add it to the cache beforehand\r\n    version = parse(vstring)\r\n    version_cache[vstring] = version\r\n  end\r\n\r\n  return version\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function find_packages(package_names, manifest)\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n    manifest = manifest or mf.get_manifest()\r\n    assert(type(package_names) == \"table\", \"depends.find_packages: Argument 'package_names' is not a table or string.\")\r\n    assert(type(manifest) == \"table\", \"depends.find_packages: Argument 'manifest' is not a table.\")\r\n\r\n    local packages_found = {}\r\n    -- find matching packages in manifest\r\n    for _, pkg_to_find in pairs(package_names) do\r\n        local pkg_name, pkg_constraint = split_name_constraint(pkg_to_find)\r\n        pkg_name = utils.escape_magic(pkg_name):gsub(\"%%%*\",\".*\")\r\n        for _, repo_pkg in pairs(manifest) do\r\n            if string.match(repo_pkg.name, \"^\" .. pkg_name .. \"$\") and (not pkg_constraint or satisfies_constraint(repo_pkg.version, pkg_constraint)) then\r\n                table.insert(packages_found, repo_pkg)\r\n            end\r\n        end\r\n    end\r\n    return packages_found\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function get_installed(deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_installed: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local distinfos_path = sys.make_path(deploy_dir, cfg.distinfos_dir)\r\n    local manifest = {}\r\n\r\n    if not sys.is_dir(distinfos_path) then return {} end\r\n\r\n    -- from all directories of packages installed in deploy_dir\r\n    for dir in sys.get_directory(distinfos_path) do\r\n\r\n        if dir ~= \".\" and dir ~= \"..\" and sys.is_dir(sys.make_path(distinfos_path, dir)) then\r\n            local pkg_dist_dir = sys.make_path(distinfos_path, dir)\r\n\r\n            -- load the dist.info file\r\n            for file in sys.get_directory(pkg_dist_dir) do\r\n                local pkg_dist_file = sys.make_path(pkg_dist_dir, file)\r\n\r\n                if sys.is_file(pkg_dist_file) then\r\n                    table.insert(manifest, mf.load_distinfo(pkg_dist_file))\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n    end\r\n    return manifest\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function get_packages_to_install(pkg, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    dependency_parents = dependency_parents or {}\r\n\r\n    -- set helper table 'tmp_installed'\r\n    tmp_installed = tmp_installed or utils.deepcopy(installed)\r\n\r\n    assert(type(pkg) == \"string\", \"depends.get_packages_to_install: Argument 'pkg' is not a string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_packages_to_install: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_packages_to_install: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_packages_to_install: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_packages_to_install: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_packages_to_install: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(dependency_parents) == \"table\", \"depends.get_packages_to_install: Argument 'dependency_parents' is not a table.\")\r\n    assert(type(tmp_installed) == \"table\", \"depends.get_packages_to_install: Argument 'tmp_installed' is not a table.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    --[[ for future debugging:\r\n    print('resolving: '.. pkg)\r\n    print('    installed: ', utils.table_tostring(installed))\r\n    print('    tmp_installed: ', utils.table_tostring(tmp_installed))\r\n    --]]\r\n\r\n    -- check if package is already installed\r\n    local pkg_name, pkg_constraint = split_name_constraint(pkg)\r\n    local pkg_is_installed, err = is_installed(pkg_name, tmp_installed, pkg_constraint)\r\n    if pkg_is_installed then return {} end\r\n    if err then return nil, err end\r\n\r\n    -- table of packages needed to be installed (will be returned)\r\n    local to_install = {}\r\n\r\n    -- find out available versions of 'pkg'\r\n    if not force_no_download then\r\n        local versions, err = package.retrieve_versions(pkg, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n    end\r\n\r\n    -- find candidates & sort them\r\n    local candidates_to_install = find_packages(pkg, manifest)\r\n    if #candidates_to_install == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\"\r\n    end\r\n    candidates_to_install = sort_by_versions(candidates_to_install)\r\n\r\n    for _, pkg in pairs(candidates_to_install) do\r\n\r\n        --for future debugging:\r\n        -- print('  candidate: '.. pkg.name..'-'..pkg.version)\r\n        -- print('      installed: ', utils.table_tostring(installed))\r\n        -- print('      tmp_installed: ', utils.table_tostring(tmp_installed))\r\n        -- print('      to_install: ', utils.table_tostring(to_install))\r\n        -- print('  -is installed: ', is_installed(pkg.name, tmp_installed, pkg_constraint))\r\n        \r\n\r\n        -- if there's an error from previous candidate, print the reason for trying another one\r\n        if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end\r\n\r\n        -- clear the state from previous candidate\r\n        pkg_is_installed, err = false, nil\r\n\r\n        -- check whether this package has already been added to 'tmp_installed' by another of its candidates\r\n        pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)\r\n        if pkg_is_installed then break end\r\n\r\n        local was_scm_version = false\r\n        if pkg.version == \"scm\" then was_scm_version = true end\r\n\r\n        -- download info about the package\r\n        if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path to downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end\r\n\r\n        -- check arch & type\r\n        if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end\r\n\r\n        -- checks for conflicts with other installed (or previously selected) packages\r\n        if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end\r\n\r\n        -- if pkg passed all of the above tests\r\n        if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end\r\n    end\r\n\r\n    -- if package is not installed and no suitable candidates were found, return the last error\r\n    if #to_install == 0 and not pkg_is_installed then\r\n        return nil, err\r\n    else\r\n        return to_install\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function split_name_constraint(version_constraint)\r\n    assert(type(version_constraint) == \"string\", \"depends.split_name_constraint: Argument 'version_constraint' is not a string.\")\r\n\r\n    local split = version_constraint:find(\"[%s=~<>-]+%d\") or version_constraint:find(\"[%s=~<>-]+scm\")\r\n\r\n    if split then\r\n        return version_constraint:sub(1, split - 1), version_constraint:sub(split):gsub(\"[%s-]\", \"\")\r\n    else\r\n        return version_constraint, nil\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function dependency_manifest(module, dep_manifest, dep_cache)\r\n    dep_manifest = dep_manifest or {}\r\n    dep_cache = dep_cache or {}\r\n    assert(type(module) == \"string\", \"depends.dependency_manifest: Argument 'module' is not a string.\")\r\n    assert(type(dep_cache) == \"table\", \"depends.dependency_manifest: Argument 'dep_cache' is not a table.\")\r\n    assert(type(dep_manifest) == \"table\", \"depends.dependency_manifest: Argument 'dep_manifest' is not a table.\")\r\n\r\n    local dep_manifest = utils.deepcopy(dep_manifest)\r\n    local dep_cache = utils.deepcopy(dep_cache)\r\n    local name, constraint = split_name_constraint(module)\r\n    local name_ver = name .. (constraint and \"-\" .. constraint or \"\")\r\n\r\n    -- if info about the module is in cache and cache not disabled, use it\r\n    if constraint and dep_cache[name_ver] and cfg.dep_cache then\r\n        dep_manifest[name_ver] = dep_cache[name_ver]\r\n    else\r\n        local manifest, err = mf.get_manifest()\r\n        if not manifest then return nil, \"Error when getting manifest: \" .. err end\r\n\r\n        -- find out available versions of package\r\n        local versions, err = package.retrieve_versions(name, manifest, not cfg.debug)\r\n        if not versions then return nil, err end\r\n\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        -- find the module's package\r\n        local candidates = find_packages(name_ver, manifest)\r\n        if #candidates == 0 then return nil, \"Package '\" .. name_ver .. \"' not found.\" end\r\n\r\n        candidates = sort_by_versions(candidates)\r\n        name_ver = candidates[1].name .. \"-\" .. candidates[1].version\r\n\r\n        -- if info about the module isn't in cache or cache disabled, download it\r\n        if dep_cache[name_ver] and cfg.dep_cache then\r\n             dep_manifest[name_ver] = dep_cache[name_ver]\r\n        else\r\n            -- download the dependency info\r\n            local download_dir = sys.abs_path(sys.make_path(cfg.root_dir, cfg.temp_dir))\r\n            local downloaded_path, err = package.fetch_pkgs({candidates[1]}, download_dir, not cfg.debug)\r\n            if not downloaded_path then return nil, err end\r\n\r\n            local distinfo = sys.make_path(downloaded_path[1], \"dist.info\")\r\n            local dist_info, err = mf.load_distinfo(distinfo)\r\n            if not dist_info then return nil, \"Error when loading dist.info file '\" .. distinfo .. \"': \" .. err end\r\n\r\n            -- add information about this package to the cache\r\n            if not dep_manifest[name_ver] then dep_manifest[name_ver] = {} end\r\n            dep_manifest[name_ver].name = dist_info.name\r\n            dep_manifest[name_ver].version = dist_info.version\r\n            dep_manifest[name_ver].path = candidates[1].path\r\n            dep_manifest[name_ver].depends = dist_info.depends\r\n\r\n            -- add also to cache\r\n            dep_cache[name_ver] = dep_manifest[name_ver]\r\n        end\r\n    end\r\n\r\n    -- resolve dependencies\r\n    if dep_manifest[name_ver].depends then\r\n\r\n        if not dep_manifest[name_ver].satisfied_by then\r\n            dep_manifest[name_ver].satisfied_by = {}\r\n        end\r\n\r\n        -- collect all OS specific dependencies of pkg\r\n        for k, dep in pairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) == \"table\" then\r\n                if k == cfg.arch then\r\n                    for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- get dependency information of this module's dependencies\r\n        for _, dep in ipairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) ~= \"table\" then\r\n                local satisfying = dep_manifest[name_ver].satisfied_by[dep]\r\n                if satisfying then dep = satisfying end\r\n\r\n                dep_manifest, dep_cache_or_err, satisfying = dependency_manifest(dep, dep_manifest, dep_cache)\r\n                if not dep_manifest then return nil, dep_cache_or_err end\r\n                dep_cache = dep_cache_or_err\r\n\r\n                -- add 'satisfied-by' info\r\n                dep_manifest[name_ver].satisfied_by[dep] = satisfying\r\n                dep_cache[name_ver].satisfied_by[dep] = satisfying\r\n            end\r\n        end\r\n    end\r\n\r\n    return dep_manifest, dep_cache, name_ver\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local function get_packages_to_install_1(pkg, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    dependency_parents = dependency_parents or {}\r\n\r\n    -- set helper table 'tmp_installed'\r\n    tmp_installed = tmp_installed or utils.deepcopy(installed)\r\n\r\n    assert(type(pkg) == \"string\", \"depends.get_packages_to_install: Argument 'pkg' is not a string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_packages_to_install: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_packages_to_install: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_packages_to_install: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_packages_to_install: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_packages_to_install: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(dependency_parents) == \"table\", \"depends.get_packages_to_install: Argument 'dependency_parents' is not a table.\")\r\n    assert(type(tmp_installed) == \"table\", \"depends.get_packages_to_install: Argument 'tmp_installed' is not a table.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    --[[ for future debugging:\r\n    print('resolving: '.. pkg)\r\n    print('    installed: ', utils.table_tostring(installed))\r\n    print('    tmp_installed: ', utils.table_tostring(tmp_installed))\r\n    --]]\r\n\r\n    -- check if package is already installed\r\n    local pkg_name, pkg_constraint = split_name_constraint(pkg)\r\n    local pkg_is_installed, err = is_installed(pkg_name, tmp_installed, pkg_constraint)\r\n    if not pkg_is_installed then return {} end\r\n    if err then return nil, err end\r\n\r\n    local pkg_to_update = find_packages(pkg, installed)\r\n\r\n    -- table of packages needed to be installed (will be returned)\r\n    local to_install = {}\r\n\r\n    -- find out available versions of 'pkg'\r\n    if not force_no_download then\r\n        local versions, err = package.retrieve_versions(pkg, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n    end\r\n    --print(utils.table_tostring(manifest))\r\n\r\n    -- find candidates & sort them\r\n    local candidate_to_update = find_packages(pkg, manifest)\r\n    if #candidate_to_update == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\"\r\n    end\r\n    \r\n    candidate_to_update = newest_version(pkg_to_update[1], sort_by_versions(candidate_to_update))\r\n\r\n    for _, pkg in pairs(candidate_to_update) do\r\n\r\n        --for future debugging:\r\n        --print('  candidate: '.. pkg.name..'-'..pkg.version)\r\n        --print('      installed: ', utils.table_tostring(installed))\r\n        --print('      tmp_installed: ', utils.table_tostring(tmp_installed))\r\n        --print('      to_install: ', utils.table_tostring(to_install))\r\n        --print('  -is installed: ', is_installed(pkg.name, tmp_installed, pkg_constraint))\r\n        \r\n\r\n        -- if there's an error from previous candidate, print the reason for trying another one\r\n        if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end\r\n\r\n        -- clear the state from previous candidate\r\n        pkg_is_installed, err = false, nil\r\n\r\n        -- check whether this package has already been added to 'tmp_installed' by another of its candidates\r\n        --pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)\r\n        --if pkg_is_installed then break end\r\n\r\n        local was_scm_version = false\r\n        if pkg.version == \"scm\" then was_scm_version = true end\r\n\r\n        -- download info about the package\r\n        if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path ot downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end\r\n\r\n        -- check arch & type\r\n        if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end\r\n\r\n        -- checks for conflicts with other installed (or previously selected) packages\r\n        if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end\r\n\r\n        -- if pkg passed all of the above tests\r\n        if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n                break\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end\r\n    end\r\n\r\n    -- if package is not installed and no suitable candidates were found, return the last error\r\n    if #to_install == 0 and not pkg_is_installed then\r\n        return nil, err\r\n    else\r\n        return to_install\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function get_remote_tags(git_url)\r\n    return get_remote_refs(git_url, \"tags\")\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function checkout_sha(sha, git_repo_dir)\r\n    git_repo_dir = git_repo_dir or sys.current_dir()\r\n    assert(type(sha) == \"string\", \"git.checkout_sha: Argument 'sha' is not a string.\")\r\n    assert(type(git_repo_dir) == \"string\", \"git.checkout_sha: Argument 'git_repo_dir' is not a string.\")\r\n    git_repo_dir = sys.abs_path(git_repo_dir)\r\n\r\n    local dir_changed, prev_current_dir\r\n\r\n    if git_repo_dir ~= sys.current_dir() then\r\n        prev_current_dir = sys.current_dir()\r\n        sys.change_dir(git_repo_dir)\r\n        dir_changed = true\r\n    end\r\n\r\n    local ok, repo_or_err = pcall(git.repo.open, git_repo_dir)\r\n    if not ok then return nil, \"Error when opening the git repository '\" .. git_repo_dir .. \"': \" .. repo_or_err end\r\n\r\n    local err\r\n    ok, err = pcall(repo_or_err.checkout, repo_or_err, sha, git_repo_dir)\r\n    if not ok then return nil, \"Error when checking out the sha '\" .. sha .. \"' in the git repository '\" .. git_repo_dir .. \"': \" .. err end\r\n\r\n    repo_or_err:close()\r\n    if dir_changed then sys.change_dir(prev_current_dir) end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function fetch_tag(repo_dir, git_repo_url, tag_name)\r\n    return fetch_ref(repo_dir, git_repo_url, tag_name, \"tag\")\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function fetch_branch(repo_dir, git_repo_url, branch_name)\r\n    return fetch_ref(repo_dir, git_repo_url, branch_name, \"head\")\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function create_repo(dir)\r\n    assert(type(dir) == \"string\", \"git.create_repo: Argument 'dir' is not a string.\")\r\n\r\n    if sys.exists(dir) then sys.delete(dir) end\r\n\r\n    local ok, repo_or_err = pcall(git.repo.create, dir)\r\n    if not ok then return nil, \"Error when creating the git repository '\" .. dir .. \"': \" .. repo_or_err end\r\n\r\n    repo_or_err:close()\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function install(package_names, deploy_dir, variables)\r\n    if not package_names then return true end\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.install: Argument 'package_names' is not a table or string.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.install: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find installed packages\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- get manifest\r\n    local manifest, err = mf.get_manifest()\r\n    if not manifest then return nil, \"Error getting manifest: \" .. err, 101 end\r\n\r\n    -- resolve dependencies\r\n    local dependencies, err = depends.get_depends(package_names, installed, manifest, false, false, deploy_dir)\r\n    if err then return nil, err, 102 end\r\n    if #dependencies == 0 then return nil, \"No packages to install.\", 102 end\r\n\r\n    -- fetch the packages from repository\r\n    local dirs, err = package.fetch_pkgs(dependencies, sys.make_path(deploy_dir, cfg.temp_dir))\r\n    if not dirs then return nil, err end\r\n\r\n    -- install fetched packages\r\n    for _, dir in pairs(dirs) do\r\n        ok, err = package.install_pkg(dir, deploy_dir, variables, false)\r\n        if not ok then return nil, err, 103 end\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function update(package_names, deploy_dir, variables)\r\n    if not package_names then return true end\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n\r\n     if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.install: Argument 'package_names' is not a table or string.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.install: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find installed packages\r\n\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- get manifest\r\n    local manifest, err = mf.get_manifest()\r\n    if not manifest then return nil, \"Error getting manifest: \" .. err end\r\n\r\n    -- resolve dependencies\r\n    local dependencies, err = depends.get_depends_1(package_names, installed, manifest, false, false, deploy_dir)\r\n    if err then return nil, err end\r\n    if #dependencies == 0 then return nil, \"No packages to update.\"\r\n    else\r\n        pkgs_to_remove = depends.find_packages(package_names, installed)\r\n        -- delete installed packages\r\n        for _, pkg in pairs(pkgs_to_remove) do\r\n            local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n            local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n    end\r\n\r\n    -- fetch the packages from repository\r\n    local dirs, err = package.fetch_pkgs(dependencies, sys.make_path(deploy_dir, cfg.temp_dir))\r\n    if not dirs then return nil, err end\r\n\r\n    -- install fetched packages\r\n    for _, dir in pairs(dirs) do\r\n        ok, err, status = package.install_pkg(dir, deploy_dir, variables, false)\r\n        if not ok then return nil, err, status end\r\n    end\r\n\r\n    return true\r\n\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function make(deploy_dir, package_paths, variables)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    package_paths = package_paths or {}\r\n\r\n    assert(type(deploy_dir) == \"string\", \"dist.make: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(package_paths) == \"table\", \"dist.make: Argument 'package_paths' is not a table.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local ok, err\r\n    for _, path in pairs(package_paths) do\r\n        ok, err = package.install_pkg(sys.abs_path(path), deploy_dir, variables, true)\r\n        if not ok then return nil, err end\r\n    end\r\n    return ok\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function remove(package_names, deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.remove: Argument 'package_names' is not a string or table.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.remove: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local pkgs_to_remove = {}\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- find packages to remove\r\n    if #package_names == 0 then\r\n        pkgs_to_remove = installed\r\n    else\r\n        pkgs_to_remove = depends.find_packages(package_names, installed)\r\n    end\r\n\r\n    if #package_names == 0 then\r\n        print(\"Are you sure that you want to remove ALL modules (y/n)?\")\r\n    else\r\n        print(\"Are you sure that you want to remove these modules (y/n)?\")\r\n    end\r\n\r\n    for i, pkg_name in pairs(package_names) do\r\n            io.write(pkg_name)\r\n            if i == #pkg_name then\r\n                io.write(', ')\r\n            end\r\n    end\r\n    print()\r\n    repeat\r\n        --io.write(\"continue with this operation (y/n)? \")\r\n        io.flush()\r\n        answer=io.read()\r\n    until answer==\"y\" or answer==\"n\"\r\n\r\n    if answer == \"n\" then\r\n        return 0\r\n    end\r\n\r\n    -- remove them\r\n    for _, pkg in pairs(pkgs_to_remove) do\r\n        local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n        local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n        if not ok then return nil, err end\r\n    end\r\n\r\n    return #pkgs_to_remove\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function fetch(pkg_names, fetch_dir)\r\n    fetch_dir = fetch_dir or sys.current_dir()\r\n    assert(type(pkg_names) == \"table\", \"dist.fetch: Argument 'pkg_names' is not a string or table.\")\r\n    assert(type(fetch_dir) == \"string\", \"dist.fetch: Argument 'fetch_dir' is not a string.\")\r\n    fetch_dir = sys.abs_path(fetch_dir)\r\n\r\n    local manifest = mf.get_manifest()\r\n\r\n    local pkgs_to_fetch = {}\r\n\r\n    for _, pkg_name in pairs(pkg_names) do\r\n\r\n        -- retrieve available versions\r\n        local versions, err = package.retrieve_versions(pkg_name, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        local packages = depends.find_packages(pkg_name, manifest)\r\n        if #packages == 0 then return nil, \"No packages found for '\" .. pkg_name .. \"'.\" end\r\n\r\n        packages = depends.sort_by_versions(packages)\r\n        table.insert(pkgs_to_fetch, packages[1])\r\n    end\r\n\r\n    local ok, err = package.fetch_pkgs(pkgs_to_fetch, fetch_dir)\r\n\r\n    if not ok then\r\n        return nil, err\r\n    else\r\n        return ok\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function load_distinfo(distinfo_file)\r\n    assert(type(distinfo_file) == \"string\", \"manifest.load_distinfo: Argument 'distinfo_file' is not a string.\")\r\n    distinfo_file = sys.abs_path(distinfo_file)\r\n\r\n    -- load the distinfo file\r\n    local distinfo_env = {}\r\n    local status, ret = secure_loadfile(distinfo_file, distinfo_env)\r\n    if not status then return nil, \"Error when loading package info: \" .. ret end\r\n\r\n    return distinfo_env\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function save_distinfo(distinfo_table, file)\r\n    assert(type(distinfo_table) == \"table\", \"manifest.save_distinfo: Argument 'distinfo_table' is not a table.\")\r\n    assert(type(file) == \"string\", \"manifest.save_distinfo: Argument 'file' is not a string.\")\r\n    file = sys.abs_path(file)\r\n\r\n    -- Print table 'tbl' to io stream 'file'.\r\n    local function print_table(file, tbl, in_nested_table)\r\n        for k, v in pairs(tbl) do\r\n            -- print key\r\n            if type(k) ~= \"number\" then\r\n                file:write(k .. \" = \")\r\n            end\r\n            -- print value\r\n            if type(v) == \"table\" then\r\n                file:write(\"{\\n\")\r\n                print_table(file, v, true)\r\n                file:write(\"}\\n\")\r\n            elseif type(v) == \"string\" then\r\n                if in_nested_table then\r\n                    file:write('[[' .. v .. ']]')\r\n                else\r\n                    file:write('\"' .. v .. '\"')\r\n                end\r\n            else\r\n                file:write(v)\r\n            end\r\n            if in_nested_table then\r\n                file:write(\",\")\r\n            end\r\n            file:write(\"\\n\")\r\n        end\r\n    end\r\n\r\n    local distinfo_file = io.open(file, \"w\")\r\n    if not distinfo_file then return nil, \"Error when saving dist-info table: cannot open the file '\" .. file .. \"'.\" end\r\n\r\n    print_table(distinfo_file, distinfo_table)\r\n    distinfo_file:close()\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(pkg_distinfo_dir) == \"string\", \"package.remove_pkg: Argument 'pkg_distinfo_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.remove_pkg: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local abs_pkg_distinfo_dir = sys.make_path(deploy_dir, pkg_distinfo_dir)\r\n\r\n    -- check for 'dist.info'\r\n    local info, err = mf.load_distinfo(sys.make_path(abs_pkg_distinfo_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error removing package from '\" .. pkg_distinfo_dir .. \"' - it doesn't contain valid 'dist.info' file.\" end\r\n    if not info.files then return nil, \"File '\" .. sys.make_path(pkg_distinfo_dir, \"dist.info\") ..\"' doesn't contain list of installed files.\" end\r\n\r\n    -- remove files installed as components of this package\r\n    for _, component in ipairs(cfg.components) do\r\n        if info.files[component] then\r\n            for i = #info.files[component], 1, -1 do\r\n                local f = info.files[component][i]\r\n                f = sys.make_path(deploy_dir,f)\r\n                if sys.is_file(f) then\r\n                    sys.delete(f)\r\n                elseif sys.is_dir(f) then\r\n                    local dir_files, err = sys.get_file_list(f)\r\n                    if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                    if #dir_files == 0 then sys.delete(f) end\r\n                end\r\n                -- delete also all parent directories if empty\r\n                local parents = sys.parents_up_to(f, deploy_dir)\r\n                for _, parent in ipairs(parents) do\r\n                    if sys.is_dir(parent) then\r\n                        local dir_files, err = sys.get_file_list(parent)\r\n                        if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                        if #dir_files == 0 then\r\n                            sys.delete(parent)\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    -- remove removed components also from 'dist.info'\r\n    for _, component in ipairs(cfg.components) do\r\n        info.files[component] = nil\r\n    end\r\n\r\n    -- delete the package information from deploy_dir\r\n    local ok = sys.delete(abs_pkg_distinfo_dir)\r\n    if not ok then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"'.\" end\r\n\r\n    -- if the package was not completely removed (e.g. some components remain),\r\n    -- save the new version of its 'dist.info'\r\n    local comp_num = 0\r\n    for _, _ in pairs(info.files) do comp_num  = comp_num + 1 end\r\n    if comp_num ~= 0 then\r\n        sys.make_dir(abs_pkg_distinfo_dir)\r\n        local ok, err = mf.save_distinfo(info, sys.make_path(abs_pkg_distinfo_dir, \"dist.info\"))\r\n        if not ok then return nil, \"Error resaving the 'dist.info': \" .. err end\r\n    end\r\n\r\n    return ok\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "deploy_dir = deploy_dir or cfg.root_dir",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "assert(type(pkg_distinfo_dir) == \"string\", \"package.remove_pkg: Argument 'pkg_distinfo_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert(type(deploy_dir) == \"string\", \"package.remove_pkg: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "deploy_dir = sys.abs_path(deploy_dir)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local abs_pkg_distinfo_dir = sys.make_path(deploy_dir, pkg_distinfo_dir)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local info, err = mf.load_distinfo(sys.make_path(abs_pkg_distinfo_dir, \"dist.info\"))",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if not info then return nil, \"Error removing package from '\" .. pkg_distinfo_dir .. \"' - it doesn't contain valid 'dist.info' file.\" end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 36,
    "text": "if not info.files then return nil, \"File '\" .. sys.make_path(pkg_distinfo_dir, \"dist.info\") ..\"' doesn't contain list of installed files.\" end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "for _, component in ipairs(cfg.components) do\r\n        if info.files[component] then\r\n            for i = #info.files[component], 1, -1 do\r\n                local f = info.files[component][i]\r\n                f = sys.make_path(deploy_dir,f)\r\n                if sys.is_file(f) then\r\n                    sys.delete(f)\r\n                elseif sys.is_dir(f) then\r\n                    local dir_files, err = sys.get_file_list(f)\r\n                    if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                    if #dir_files == 0 then sys.delete(f) end\r\n                end\r\n                -- delete also all parent directories if empty\r\n                local parents = sys.parents_up_to(f, deploy_dir)\r\n                for _, parent in ipairs(parents) do\r\n                    if sys.is_dir(parent) then\r\n                        local dir_files, err = sys.get_file_list(parent)\r\n                        if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                        if #dir_files == 0 then\r\n                            sys.delete(parent)\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "if info.files[component] then\r\n            for i = #info.files[component], 1, -1 do\r\n                local f = info.files[component][i]\r\n                f = sys.make_path(deploy_dir,f)\r\n                if sys.is_file(f) then\r\n                    sys.delete(f)\r\n                elseif sys.is_dir(f) then\r\n                    local dir_files, err = sys.get_file_list(f)\r\n                    if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                    if #dir_files == 0 then sys.delete(f) end\r\n                end\r\n                -- delete also all parent directories if empty\r\n                local parents = sys.parents_up_to(f, deploy_dir)\r\n                for _, parent in ipairs(parents) do\r\n                    if sys.is_dir(parent) then\r\n                        local dir_files, err = sys.get_file_list(parent)\r\n                        if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                        if #dir_files == 0 then\r\n                            sys.delete(parent)\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "for i = #info.files[component], 1, -1 do\r\n                local f = info.files[component][i]\r\n                f = sys.make_path(deploy_dir,f)\r\n                if sys.is_file(f) then\r\n                    sys.delete(f)\r\n                elseif sys.is_dir(f) then\r\n                    local dir_files, err = sys.get_file_list(f)\r\n                    if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                    if #dir_files == 0 then sys.delete(f) end\r\n                end\r\n                -- delete also all parent directories if empty\r\n                local parents = sys.parents_up_to(f, deploy_dir)\r\n                for _, parent in ipairs(parents) do\r\n                    if sys.is_dir(parent) then\r\n                        local dir_files, err = sys.get_file_list(parent)\r\n                        if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                        if #dir_files == 0 then\r\n                            sys.delete(parent)\r\n                        end\r\n                    end\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 40,
    "text": "local f = info.files[component][i]",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "f = sys.make_path(deploy_dir,f)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if sys.is_file(f) then\r\n                    sys.delete(f)\r\n                elseif sys.is_dir(f) then\r\n                    local dir_files, err = sys.get_file_list(f)\r\n                    if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                    if #dir_files == 0 then sys.delete(f) end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "sys.delete(f)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local dir_files, err = sys.get_file_list(f)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "if #dir_files == 0 then sys.delete(f) end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "local parents = sys.parents_up_to(f, deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "for _, parent in ipairs(parents) do\r\n                    if sys.is_dir(parent) then\r\n                        local dir_files, err = sys.get_file_list(parent)\r\n                        if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                        if #dir_files == 0 then\r\n                            sys.delete(parent)\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "if sys.is_dir(parent) then\r\n                        local dir_files, err = sys.get_file_list(parent)\r\n                        if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                        if #dir_files == 0 then\r\n                            sys.delete(parent)\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local dir_files, err = sys.get_file_list(parent)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if #dir_files == 0 then\r\n                            sys.delete(parent)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "sys.delete(parent)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "for _, component in ipairs(cfg.components) do\r\n        info.files[component] = nil\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "info.files[component] = nil",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local ok = sys.delete(abs_pkg_distinfo_dir)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if not ok then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"'.\" end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "local comp_num = 0",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "for _, _ in pairs(info.files) do comp_num  = comp_num + 1 end",
    "type": "statement:genericfor"
  }, {
    "id": 59,
    "text": "comp_num  = comp_num + 1",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if comp_num ~= 0 then\r\n        sys.make_dir(abs_pkg_distinfo_dir)\r\n        local ok, err = mf.save_distinfo(info, sys.make_path(abs_pkg_distinfo_dir, \"dist.info\"))\r\n        if not ok then return nil, \"Error resaving the 'dist.info': \" .. err end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "sys.make_dir(abs_pkg_distinfo_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "local ok, err = mf.save_distinfo(info, sys.make_path(abs_pkg_distinfo_dir, \"dist.info\"))",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if not ok then return nil, \"Error resaving the 'dist.info': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function install_pkg(pkg_dir, deploy_dir, variables, preserve_pkg_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    variables = variables or {}\r\n    preserve_pkg_dir = preserve_pkg_dir or false\r\n\r\n    assert(type(pkg_dir) == \"string\", \"package.install_pkg: Argument 'pkg_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.install_pkg: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(variables) == \"table\", \"package.install_pkg: Argument 'variables' is not a table.\")\r\n    assert(type(preserve_pkg_dir) == \"boolean\", \"package.install_pkg: Argument 'preserve_pkg_dir' is not a boolean.\")\r\n\r\n    pkg_dir = sys.abs_path(pkg_dir)\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- check for dist.info\r\n    local info, err = mf.load_distinfo(sys.make_path(pkg_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error installing: the directory '\" .. pkg_dir .. \"' doesn't exist or doesn't contain valid 'dist.info' file.\", 501 end\r\n\r\n    -- check if the package is source\r\n    if sys.exists(sys.make_path(pkg_dir, \"CMakeLists.txt\")) then\r\n        info.arch = info.arch or \"Universal\"\r\n        info.type = info.type or \"source\"\r\n    end\r\n\r\n    -- check package's architecture\r\n    if not (info.arch == \"Universal\" or info.arch == cfg.arch) then\r\n        return nil, \"Error installing '\" .. info.name .. \"-\" .. info.version .. \"': architecture '\" .. info.arch .. \"' is not suitable for this machine.\", 502\r\n    end\r\n\r\n    -- check package's type\r\n    if not (info.type == \"all\" or info.type == \"source\" or info.type == cfg.type) then\r\n        return nil, \"Error installing '\" .. info.name .. \"-\" .. info.version .. \"': architecture type '\" .. info.type .. \"' is not suitable for this machine.\", 502\r\n    end\r\n\r\n    local ok, err\r\n\r\n    -- if package is of binary type, just deploy it\r\n    if info.type ~= \"source\" then\r\n        ok, err = deploy_binary_pkg(pkg_dir, deploy_dir)\r\n\r\n    -- else build and then deploy\r\n    else\r\n\r\n        -- check if we have cmake\r\n        ok = utils.system_dependency_available(\"cmake\", \"cmake --version\")\r\n        if not ok then return nil, \"Error when installing: Command 'cmake' not available on the system.\", 503 end\r\n\r\n        -- set cmake variables\r\n        local cmake_variables = {}\r\n\r\n        -- set variables from config file\r\n        for k, v in pairs(cfg.variables) do\r\n            cmake_variables[k] = v\r\n        end\r\n\r\n        -- set variables specified as argument\r\n        for k, v in pairs(variables) do\r\n            cmake_variables[k] = v\r\n        end\r\n\r\n        cmake_variables.CMAKE_INCLUDE_PATH = table.concat({cmake_variables.CMAKE_INCLUDE_PATH or \"\", sys.make_path(deploy_dir, \"include\")}, \";\")\r\n        cmake_variables.CMAKE_LIBRARY_PATH = table.concat({cmake_variables.CMAKE_LIBRARY_PATH or \"\", sys.make_path(deploy_dir, \"lib\"), sys.make_path(deploy_dir, \"bin\")}, \";\")\r\n        cmake_variables.CMAKE_PROGRAM_PATH = table.concat({cmake_variables.CMAKE_PROGRAM_PATH or \"\", sys.make_path(deploy_dir, \"bin\")}, \";\")\r\n\r\n        -- build the package and deploy it\r\n        ok, err,status = build_pkg(pkg_dir, deploy_dir, cmake_variables)\r\n        if not ok then return nil, err, status end\r\n\r\n    end\r\n\r\n    -- delete directory of fetched package\r\n    if not (cfg.debug or preserve_pkg_dir) then sys.delete(pkg_dir) end\r\n\r\n    return ok, err, status\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "variables = variables or {}",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "preserve_pkg_dir = preserve_pkg_dir or false",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "assert(type(pkg_dir) == \"string\", \"package.install_pkg: Argument 'pkg_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert(type(deploy_dir) == \"string\", \"package.install_pkg: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert(type(variables) == \"table\", \"package.install_pkg: Argument 'variables' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert(type(preserve_pkg_dir) == \"boolean\", \"package.install_pkg: Argument 'preserve_pkg_dir' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "pkg_dir = sys.abs_path(pkg_dir)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local info, err = mf.load_distinfo(sys.make_path(pkg_dir, \"dist.info\"))",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if not info then return nil, \"Error installing: the directory '\" .. pkg_dir .. \"' doesn't exist or doesn't contain valid 'dist.info' file.\", 501 end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "if sys.exists(sys.make_path(pkg_dir, \"CMakeLists.txt\")) then\r\n        info.arch = info.arch or \"Universal\"\r\n        info.type = info.type or \"source\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "info.arch = info.arch or \"Universal\"",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "info.type = info.type or \"source\"",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if not (info.arch == \"Universal\" or info.arch == cfg.arch) then\r\n        return nil, \"Error installing '\" .. info.name .. \"-\" .. info.version .. \"': architecture '\" .. info.arch .. \"' is not suitable for this machine.\", 502\r\n    end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "if not (info.type == \"all\" or info.type == \"source\" or info.type == cfg.type) then\r\n        return nil, \"Error installing '\" .. info.name .. \"-\" .. info.version .. \"': architecture type '\" .. info.type .. \"' is not suitable for this machine.\", 502\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "if info.type ~= \"source\" then\r\n        ok, err = deploy_binary_pkg(pkg_dir, deploy_dir)\r\n\r\n    -- else build and then deploy\r\n    else\r\n\r\n        -- check if we have cmake\r\n        ok = utils.system_dependency_available(\"cmake\", \"cmake --version\")\r\n        if not ok then return nil, \"Error when installing: Command 'cmake' not available on the system.\", 503 end\r\n\r\n        -- set cmake variables\r\n        local cmake_variables = {}\r\n\r\n        -- set variables from config file\r\n        for k, v in pairs(cfg.variables) do\r\n            cmake_variables[k] = v\r\n        end\r\n\r\n        -- set variables specified as argument\r\n        for k, v in pairs(variables) do\r\n            cmake_variables[k] = v\r\n        end\r\n\r\n        cmake_variables.CMAKE_INCLUDE_PATH = table.concat({cmake_variables.CMAKE_INCLUDE_PATH or \"\", sys.make_path(deploy_dir, \"include\")}, \";\")\r\n        cmake_variables.CMAKE_LIBRARY_PATH = table.concat({cmake_variables.CMAKE_LIBRARY_PATH or \"\", sys.make_path(deploy_dir, \"lib\"), sys.make_path(deploy_dir, \"bin\")}, \";\")\r\n        cmake_variables.CMAKE_PROGRAM_PATH = table.concat({cmake_variables.CMAKE_PROGRAM_PATH or \"\", sys.make_path(deploy_dir, \"bin\")}, \";\")\r\n\r\n        -- build the package and deploy it\r\n        ok, err,status = build_pkg(pkg_dir, deploy_dir, cmake_variables)\r\n        if not ok then return nil, err, status end\r\n\r\n    end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "ok, err = deploy_binary_pkg(pkg_dir, deploy_dir)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "ok = utils.system_dependency_available(\"cmake\", \"cmake --version\")",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "if not ok then return nil, \"Error when installing: Command 'cmake' not available on the system.\", 503 end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "local cmake_variables = {}",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "for k, v in pairs(cfg.variables) do\r\n            cmake_variables[k] = v\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "cmake_variables[k] = v",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "for k, v in pairs(variables) do\r\n            cmake_variables[k] = v\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 89,
    "text": "cmake_variables.CMAKE_INCLUDE_PATH = table.concat({cmake_variables.CMAKE_INCLUDE_PATH or \"\", sys.make_path(deploy_dir, \"include\")}, \";\")",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "cmake_variables.CMAKE_LIBRARY_PATH = table.concat({cmake_variables.CMAKE_LIBRARY_PATH or \"\", sys.make_path(deploy_dir, \"lib\"), sys.make_path(deploy_dir, \"bin\")}, \";\")",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "cmake_variables.CMAKE_PROGRAM_PATH = table.concat({cmake_variables.CMAKE_PROGRAM_PATH or \"\", sys.make_path(deploy_dir, \"bin\")}, \";\")",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "ok, err,status = build_pkg(pkg_dir, deploy_dir, cmake_variables)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "if not ok then return nil, err, status end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "if not (cfg.debug or preserve_pkg_dir) then sys.delete(pkg_dir) end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "sys.delete(pkg_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function build_pkg(src_dir, deploy_dir, variables)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    variables = variables or {}\r\n\r\n    assert(type(src_dir) == \"string\", \"package.build_pkg: Argument 'src_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.build_pkg: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(variables) == \"table\", \"package.build_pkg: Argument 'variables' is not a table.\")\r\n\r\n    src_dir = sys.abs_path(src_dir)\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- check for dist.info\r\n    local info, err = mf.load_distinfo(sys.make_path(src_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error building package from '\" .. src_dir .. \"': it doesn't contain valid 'dist.info' file.\", 501 end\r\n    local pkg_name = info.name .. \"-\" .. info.version\r\n\r\n    -- set machine information\r\n    info.arch = cfg.arch\r\n    info.type = cfg.type\r\n\r\n    -- create CMake build dir\r\n    local cmake_build_dir = sys.abs_path(sys.make_path(deploy_dir, cfg.temp_dir, pkg_name .. \"-CMake-build\"))\r\n    sys.make_dir(cmake_build_dir)\r\n\r\n    -- create cmake cache\r\n    variables[\"CMAKE_INSTALL_PREFIX\"] = deploy_dir\r\n    local cache_file = io.open(sys.make_path(cmake_build_dir, \"cache.cmake\"), \"w\")\r\n    if not cache_file then return nil, \"Error creating CMake cache file in '\" .. cmake_build_dir .. \"'\", 401 end\r\n\r\n    -- Fill in cache variables\r\n    for k,v in pairs(variables) do\r\n        cache_file:write(\"SET(\" .. k .. \" \" .. sys.quote(v):gsub(\"\\\\+\", \"/\") .. \" CACHE STRING \\\"\\\" FORCE)\\n\")\r\n    end\r\n\r\n    -- If user cache file is provided then append it\r\n    if cfg.cache_file ~= \"\" then\r\n        local user_cache = io.open(sys.abs_path(cfg.cache_file), \"r\")\r\n        if user_cache then\r\n            cache_file:write(user_cache:read(\"*all\")..\"\\n\")\r\n            user_cache:close()\r\n        end\r\n    end\r\n    cache_file:close()\r\n\r\n    src_dir = sys.abs_path(src_dir)\r\n    print(\"Building \" .. sys.extract_name(src_dir) .. \"...\")\r\n\r\n    -- set cmake cache command\r\n    local cache_command = cfg.cache_command\r\n    if cfg.debug then cache_command = cache_command .. \" \" .. cfg.cache_debug_options end\r\n\r\n    -- set cmake build command\r\n    local build_command = cfg.build_command\r\n    if cfg.debug then build_command = build_command .. \" \" .. cfg.build_debug_options end\r\n\r\n    -- set the cmake cache\r\n    local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cache_command .. \" \" .. sys.quote(src_dir))\r\n    if not ok then return nil, \"Error preloading the CMake cache script '\" .. sys.make_path(cmake_build_dir, \"cmake.cache\") .. \"'\", 402 end\r\n\r\n    -- build with cmake\r\n    ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. build_command)\r\n    if not ok then return nil, \"Error building with CMake in directory '\" .. cmake_build_dir .. \"'\",403 end\r\n\r\n    -- if this is only simulation, exit sucessfully, skipping the next actions\r\n    if cfg.simulate then\r\n        return true, \"Simulated build and deployment of package '\" .. pkg_name .. \"' sucessfull.\"\r\n    end\r\n\r\n    -- table to collect files installed in the components\r\n    info.files = {}\r\n\r\n    -- install the components\r\n    for _, component in ipairs(cfg.components) do\r\n        local strip_option = \"\"\r\n        if not cfg.debug and component ~= \"Library\" then strip_option = cfg.strip_option end\r\n\r\n        local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cfg.cmake .. \" \" .. strip_option .. \" \" ..cfg.install_component_command:gsub(\"#COMPONENT#\", component))\r\n\r\n        if not ok then return nil, \"Error when installing the component '\" .. component .. \"' with CMake in directory '\" .. cmake_build_dir .. \"'\", 301 end\r\n\r\n        local install_mf = sys.make_path(cmake_build_dir, \"install_manifest_\" .. component .. \".txt\")\r\n        local mf, err\r\n        local component_files = {}\r\n\r\n        -- collect files installed in this component\r\n        if sys.exists(install_mf) then\r\n            mf, err = io.open(install_mf, \"r\")\r\n            if not mf then return nil, \"Error when opening the CMake installation manifest '\" .. install_mf .. \"': \" .. err, 302 end\r\n            for line in mf:lines() do\r\n                line = sys.check_separators(line)\r\n                local file = line:gsub(utils.escape_magic(deploy_dir .. sys.path_separator()), \"\")\r\n                table.insert(component_files, file)\r\n            end\r\n            mf:close()\r\n\r\n            -- add list of component files to the 'dist.info'\r\n            if #component_files > 0 then info.files[component] = component_files end\r\n        end\r\n    end\r\n--    if bookmark == 0 then return nil, \"Package did not install any files!\" end\r\n\r\n    -- test with ctest\r\n    if cfg.test then\r\n        print(\"Testing \" .. sys.extract_name(src_dir) .. \" ...\")\r\n        ok = sys.exec(\"cd \" .. sys.quote(deploy_dir) .. \" && \" .. cfg.test_command)\r\n        if not ok then return nil, \"Error when testing the module '\" .. pkg_name .. \"' with CTest.\", 201 end\r\n    end\r\n\r\n    -- Rewrite dependencies for binary package\r\n    if info.depends then\r\n       local dependencies = {}\r\n       -- collect all dependencies in single table\r\n       for k, dep in pairs(info.depends) do\r\n           -- if 'depend' is a table of OS specific dependencies for\r\n           -- this arch, add them to the normal dependencies of pkg\r\n           if type(dep) == \"table\" then\r\n               if k == cfg.arch then\r\n                   for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end\r\n               end\r\n           elseif type(dep) == \"string\" then\r\n               table.insert(dependencies, dep)\r\n           end\r\n       end\r\n\r\n       -- Search for installed dependencies\r\n       local installed = depends.get_installed(deploy_dir)\r\n       for k, dep in pairs(dependencies) do\r\n           local version\r\n           local name = depends.split_name_constraint(dep)\r\n           for i, package in pairs(installed) do\r\n               if (package.name == name) then\r\n                   version = package.version\r\n               end\r\n           end\r\n           dependencies[k] = name\r\n\r\n           -- Convert version to major/minor only, assuming semantic versioning\r\n           if version then\r\n               local ver = constraints.parseVersion(version)\r\n               if ver and ver[1] then\r\n                   local major = ver[1][1] or \"0\"\r\n                   local minor = ver[1][2] or \"0\"\r\n                   version = major..\".\"..minor\r\n                   dependencies[k] = name..\"~=\"..version\r\n               end\r\n           end\r\n       end\r\n       -- Store the dependencies\r\n       info.depends = dependencies\r\n    end\r\n\r\n    -- save modified 'dist.info' file\r\n    local pkg_distinfo_dir = sys.make_path(deploy_dir, cfg.distinfos_dir, pkg_name)\r\n    sys.make_dir(pkg_distinfo_dir)\r\n    ok, err = mf.save_distinfo(info, sys.make_path(pkg_distinfo_dir, \"dist.info\"))\r\n    if not ok then return nil, err end\r\n\r\n    -- clean up\r\n    if not cfg.debug then sys.delete(cmake_build_dir) end\r\n\r\n    return true, \"Package '\" .. pkg_name .. \"' successfully builded and deployed to '\" .. deploy_dir .. \"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "assert(type(src_dir) == \"string\", \"package.build_pkg: Argument 'src_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert(type(deploy_dir) == \"string\", \"package.build_pkg: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert(type(variables) == \"table\", \"package.build_pkg: Argument 'variables' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "src_dir = sys.abs_path(src_dir)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "local info, err = mf.load_distinfo(sys.make_path(src_dir, \"dist.info\"))",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if not info then return nil, \"Error building package from '\" .. src_dir .. \"': it doesn't contain valid 'dist.info' file.\", 501 end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "local pkg_name = info.name .. \"-\" .. info.version",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "info.arch = cfg.arch",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "info.type = cfg.type",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "local cmake_build_dir = sys.abs_path(sys.make_path(deploy_dir, cfg.temp_dir, pkg_name .. \"-CMake-build\"))",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "sys.make_dir(cmake_build_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "variables[\"CMAKE_INSTALL_PREFIX\"] = deploy_dir",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "local cache_file = io.open(sys.make_path(cmake_build_dir, \"cache.cmake\"), \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if not cache_file then return nil, \"Error creating CMake cache file in '\" .. cmake_build_dir .. \"'\", 401 end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "for k,v in pairs(variables) do\r\n        cache_file:write(\"SET(\" .. k .. \" \" .. sys.quote(v):gsub(\"\\\\+\", \"/\") .. \" CACHE STRING \\\"\\\" FORCE)\\n\")\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 113,
    "text": "cache_file:write(\"SET(\" .. k .. \" \" .. sys.quote(v):gsub(\"\\\\+\", \"/\") .. \" CACHE STRING \\\"\\\" FORCE)\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "if cfg.cache_file ~= \"\" then\r\n        local user_cache = io.open(sys.abs_path(cfg.cache_file), \"r\")\r\n        if user_cache then\r\n            cache_file:write(user_cache:read(\"*all\")..\"\\n\")\r\n            user_cache:close()\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "local user_cache = io.open(sys.abs_path(cfg.cache_file), \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if user_cache then\r\n            cache_file:write(user_cache:read(\"*all\")..\"\\n\")\r\n            user_cache:close()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "cache_file:write(user_cache:read(\"*all\")..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "user_cache:close()",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "cache_file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "print(\"Building \" .. sys.extract_name(src_dir) .. \"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "local cache_command = cfg.cache_command",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if cfg.debug then cache_command = cache_command .. \" \" .. cfg.cache_debug_options end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "cache_command = cache_command .. \" \" .. cfg.cache_debug_options",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "local build_command = cfg.build_command",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "if cfg.debug then build_command = build_command .. \" \" .. cfg.build_debug_options end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "build_command = build_command .. \" \" .. cfg.build_debug_options",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cache_command .. \" \" .. sys.quote(src_dir))",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "if not ok then return nil, \"Error preloading the CMake cache script '\" .. sys.make_path(cmake_build_dir, \"cmake.cache\") .. \"'\", 402 end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. build_command)",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "if not ok then return nil, \"Error building with CMake in directory '\" .. cmake_build_dir .. \"'\",403 end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "if cfg.simulate then\r\n        return true, \"Simulated build and deployment of package '\" .. pkg_name .. \"' sucessfull.\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "info.files = {}",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "for _, component in ipairs(cfg.components) do\r\n        local strip_option = \"\"\r\n        if not cfg.debug and component ~= \"Library\" then strip_option = cfg.strip_option end\r\n\r\n        local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cfg.cmake .. \" \" .. strip_option .. \" \" ..cfg.install_component_command:gsub(\"#COMPONENT#\", component))\r\n\r\n        if not ok then return nil, \"Error when installing the component '\" .. component .. \"' with CMake in directory '\" .. cmake_build_dir .. \"'\", 301 end\r\n\r\n        local install_mf = sys.make_path(cmake_build_dir, \"install_manifest_\" .. component .. \".txt\")\r\n        local mf, err\r\n        local component_files = {}\r\n\r\n        -- collect files installed in this component\r\n        if sys.exists(install_mf) then\r\n            mf, err = io.open(install_mf, \"r\")\r\n            if not mf then return nil, \"Error when opening the CMake installation manifest '\" .. install_mf .. \"': \" .. err, 302 end\r\n            for line in mf:lines() do\r\n                line = sys.check_separators(line)\r\n                local file = line:gsub(utils.escape_magic(deploy_dir .. sys.path_separator()), \"\")\r\n                table.insert(component_files, file)\r\n            end\r\n            mf:close()\r\n\r\n            -- add list of component files to the 'dist.info'\r\n            if #component_files > 0 then info.files[component] = component_files end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "local strip_option = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "if not cfg.debug and component ~= \"Library\" then strip_option = cfg.strip_option end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "strip_option = cfg.strip_option",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cfg.cmake .. \" \" .. strip_option .. \" \" ..cfg.install_component_command:gsub(\"#COMPONENT#\", component))",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if not ok then return nil, \"Error when installing the component '\" .. component .. \"' with CMake in directory '\" .. cmake_build_dir .. \"'\", 301 end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "local install_mf = sys.make_path(cmake_build_dir, \"install_manifest_\" .. component .. \".txt\")",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "local mf, err",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "local component_files = {}",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "if sys.exists(install_mf) then\r\n            mf, err = io.open(install_mf, \"r\")\r\n            if not mf then return nil, \"Error when opening the CMake installation manifest '\" .. install_mf .. \"': \" .. err, 302 end\r\n            for line in mf:lines() do\r\n                line = sys.check_separators(line)\r\n                local file = line:gsub(utils.escape_magic(deploy_dir .. sys.path_separator()), \"\")\r\n                table.insert(component_files, file)\r\n            end\r\n            mf:close()\r\n\r\n            -- add list of component files to the 'dist.info'\r\n            if #component_files > 0 then info.files[component] = component_files end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "mf, err = io.open(install_mf, \"r\")",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "if not mf then return nil, \"Error when opening the CMake installation manifest '\" .. install_mf .. \"': \" .. err, 302 end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "for line in mf:lines() do\r\n                line = sys.check_separators(line)\r\n                local file = line:gsub(utils.escape_magic(deploy_dir .. sys.path_separator()), \"\")\r\n                table.insert(component_files, file)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 146,
    "text": "line = sys.check_separators(line)",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "local file = line:gsub(utils.escape_magic(deploy_dir .. sys.path_separator()), \"\")",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "table.insert(component_files, file)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "mf:close()",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "if #component_files > 0 then info.files[component] = component_files end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "info.files[component] = component_files",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if cfg.test then\r\n        print(\"Testing \" .. sys.extract_name(src_dir) .. \" ...\")\r\n        ok = sys.exec(\"cd \" .. sys.quote(deploy_dir) .. \" && \" .. cfg.test_command)\r\n        if not ok then return nil, \"Error when testing the module '\" .. pkg_name .. \"' with CTest.\", 201 end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "print(\"Testing \" .. sys.extract_name(src_dir) .. \" ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "ok = sys.exec(\"cd \" .. sys.quote(deploy_dir) .. \" && \" .. cfg.test_command)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "if not ok then return nil, \"Error when testing the module '\" .. pkg_name .. \"' with CTest.\", 201 end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "if info.depends then\r\n       local dependencies = {}\r\n       -- collect all dependencies in single table\r\n       for k, dep in pairs(info.depends) do\r\n           -- if 'depend' is a table of OS specific dependencies for\r\n           -- this arch, add them to the normal dependencies of pkg\r\n           if type(dep) == \"table\" then\r\n               if k == cfg.arch then\r\n                   for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end\r\n               end\r\n           elseif type(dep) == \"string\" then\r\n               table.insert(dependencies, dep)\r\n           end\r\n       end\r\n\r\n       -- Search for installed dependencies\r\n       local installed = depends.get_installed(deploy_dir)\r\n       for k, dep in pairs(dependencies) do\r\n           local version\r\n           local name = depends.split_name_constraint(dep)\r\n           for i, package in pairs(installed) do\r\n               if (package.name == name) then\r\n                   version = package.version\r\n               end\r\n           end\r\n           dependencies[k] = name\r\n\r\n           -- Convert version to major/minor only, assuming semantic versioning\r\n           if version then\r\n               local ver = constraints.parseVersion(version)\r\n               if ver and ver[1] then\r\n                   local major = ver[1][1] or \"0\"\r\n                   local minor = ver[1][2] or \"0\"\r\n                   version = major..\".\"..minor\r\n                   dependencies[k] = name..\"~=\"..version\r\n               end\r\n           end\r\n       end\r\n       -- Store the dependencies\r\n       info.depends = dependencies\r\n    end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "local dependencies = {}",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "for k, dep in pairs(info.depends) do\r\n           -- if 'depend' is a table of OS specific dependencies for\r\n           -- this arch, add them to the normal dependencies of pkg\r\n           if type(dep) == \"table\" then\r\n               if k == cfg.arch then\r\n                   for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end\r\n               end\r\n           elseif type(dep) == \"string\" then\r\n               table.insert(dependencies, dep)\r\n           end\r\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 159,
    "text": "if type(dep) == \"table\" then\r\n               if k == cfg.arch then\r\n                   for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end\r\n               end\r\n           elseif type(dep) == \"string\" then\r\n               table.insert(dependencies, dep)\r\n           end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "if k == cfg.arch then\r\n                   for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end\r\n               end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end",
    "type": "statement:genericfor"
  }, {
    "id": 162,
    "text": "table.insert(dependencies, os_specific_depend)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "table.insert(dependencies, dep)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "local installed = depends.get_installed(deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "for k, dep in pairs(dependencies) do\r\n           local version\r\n           local name = depends.split_name_constraint(dep)\r\n           for i, package in pairs(installed) do\r\n               if (package.name == name) then\r\n                   version = package.version\r\n               end\r\n           end\r\n           dependencies[k] = name\r\n\r\n           -- Convert version to major/minor only, assuming semantic versioning\r\n           if version then\r\n               local ver = constraints.parseVersion(version)\r\n               if ver and ver[1] then\r\n                   local major = ver[1][1] or \"0\"\r\n                   local minor = ver[1][2] or \"0\"\r\n                   version = major..\".\"..minor\r\n                   dependencies[k] = name..\"~=\"..version\r\n               end\r\n           end\r\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 166,
    "text": "local version",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "local name = depends.split_name_constraint(dep)",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "for i, package in pairs(installed) do\r\n               if (package.name == name) then\r\n                   version = package.version\r\n               end\r\n           end",
    "type": "statement:genericfor"
  }, {
    "id": 169,
    "text": "if (package.name == name) then\r\n                   version = package.version\r\n               end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "version = package.version",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "dependencies[k] = name",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if version then\r\n               local ver = constraints.parseVersion(version)\r\n               if ver and ver[1] then\r\n                   local major = ver[1][1] or \"0\"\r\n                   local minor = ver[1][2] or \"0\"\r\n                   version = major..\".\"..minor\r\n                   dependencies[k] = name..\"~=\"..version\r\n               end\r\n           end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "local ver = constraints.parseVersion(version)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "if ver and ver[1] then\r\n                   local major = ver[1][1] or \"0\"\r\n                   local minor = ver[1][2] or \"0\"\r\n                   version = major..\".\"..minor\r\n                   dependencies[k] = name..\"~=\"..version\r\n               end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "local major = ver[1][1] or \"0\"",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "local minor = ver[1][2] or \"0\"",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "version = major..\".\"..minor",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "dependencies[k] = name..\"~=\"..version",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "info.depends = dependencies",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "local pkg_distinfo_dir = sys.make_path(deploy_dir, cfg.distinfos_dir, pkg_name)",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "sys.make_dir(pkg_distinfo_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "ok, err = mf.save_distinfo(info, sys.make_path(pkg_distinfo_dir, \"dist.info\"))",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "if not cfg.debug then sys.delete(cmake_build_dir) end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "sys.delete(cmake_build_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function deploy_binary_pkg(pkg_dir, deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n\r\n    assert(type(pkg_dir) == \"string\", \"package.deploy_binary_pkg: Argument 'pkg_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.deploy_binary_pkg: Argument 'deploy_dir' is not a string.\")\r\n\r\n    pkg_dir = sys.abs_path(pkg_dir)\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- check for dist.info\r\n    local info, err = mf.load_distinfo(sys.make_path(pkg_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error deploying package from '\" .. pkg_dir .. \"': it doesn't contain valid 'dist.info' file.\" end\r\n    local pkg_name = info.name .. \"-\" .. info.version\r\n\r\n    -- if this is only simulation, exit sucessfully, skipping the next actions\r\n    if cfg.simulate then\r\n        return true, \"Simulated deployment of package '\" .. pkg_name .. \"' sucessfull.\"\r\n    end\r\n\r\n    -- copy all components of the module to the deploy_dir\r\n    for _, component in ipairs(cfg.components) do\r\n        if info.files[component] then\r\n            for _, file in ipairs(info.files[component]) do\r\n                local dest_dir = sys.make_path(deploy_dir, sys.parent_dir(file))\r\n\r\n                local ok, err = sys.make_dir(dest_dir)\r\n                if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot create directory '\" .. dest_dir .. \"': \" .. err end\r\n\r\n                ok, err = sys.copy(sys.make_path(pkg_dir, file), dest_dir)\r\n                if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot copy file '\" .. file .. \"' to the directory '\" .. dest_dir .. \"': \" .. err end\r\n            end\r\n        end\r\n    end\r\n\r\n    -- copy dist.info to register the module as installed\r\n    local pkg_distinfo_dir = sys.make_path(deploy_dir, cfg.distinfos_dir, pkg_name)\r\n    sys.make_dir(pkg_distinfo_dir)\r\n    ok, err = mf.save_distinfo(info, sys.make_path(pkg_distinfo_dir, \"dist.info\"))\r\n    if not ok then return nil, err end\r\n\r\n    return true, \"Package '\" .. pkg_name .. \"' successfully deployed to '\" .. deploy_dir .. \"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "assert(type(pkg_dir) == \"string\", \"package.deploy_binary_pkg: Argument 'pkg_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert(type(deploy_dir) == \"string\", \"package.deploy_binary_pkg: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "if not info then return nil, \"Error deploying package from '\" .. pkg_dir .. \"': it doesn't contain valid 'dist.info' file.\" end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "if cfg.simulate then\r\n        return true, \"Simulated deployment of package '\" .. pkg_name .. \"' sucessfull.\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "for _, component in ipairs(cfg.components) do\r\n        if info.files[component] then\r\n            for _, file in ipairs(info.files[component]) do\r\n                local dest_dir = sys.make_path(deploy_dir, sys.parent_dir(file))\r\n\r\n                local ok, err = sys.make_dir(dest_dir)\r\n                if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot create directory '\" .. dest_dir .. \"': \" .. err end\r\n\r\n                ok, err = sys.copy(sys.make_path(pkg_dir, file), dest_dir)\r\n                if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot copy file '\" .. file .. \"' to the directory '\" .. dest_dir .. \"': \" .. err end\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 193,
    "text": "if info.files[component] then\r\n            for _, file in ipairs(info.files[component]) do\r\n                local dest_dir = sys.make_path(deploy_dir, sys.parent_dir(file))\r\n\r\n                local ok, err = sys.make_dir(dest_dir)\r\n                if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot create directory '\" .. dest_dir .. \"': \" .. err end\r\n\r\n                ok, err = sys.copy(sys.make_path(pkg_dir, file), dest_dir)\r\n                if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot copy file '\" .. file .. \"' to the directory '\" .. dest_dir .. \"': \" .. err end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "for _, file in ipairs(info.files[component]) do\r\n                local dest_dir = sys.make_path(deploy_dir, sys.parent_dir(file))\r\n\r\n                local ok, err = sys.make_dir(dest_dir)\r\n                if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot create directory '\" .. dest_dir .. \"': \" .. err end\r\n\r\n                ok, err = sys.copy(sys.make_path(pkg_dir, file), dest_dir)\r\n                if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot copy file '\" .. file .. \"' to the directory '\" .. dest_dir .. \"': \" .. err end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 195,
    "text": "local dest_dir = sys.make_path(deploy_dir, sys.parent_dir(file))",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "local ok, err = sys.make_dir(dest_dir)",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot create directory '\" .. dest_dir .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "ok, err = sys.copy(sys.make_path(pkg_dir, file), dest_dir)",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "if not ok then return nil, \"Error when deploying package '\" .. pkg_name .. \"': cannot copy file '\" .. file .. \"' to the directory '\" .. dest_dir .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function fetch_pkg(pkg, download_dir, suppress_printing)\r\n    download_dir = download_dir or sys.current_dir()\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(pkg) == \"table\", \"package.fetch_pkg: Argument 'pkg' is not a table.\")\r\n    assert(type(download_dir) == \"string\", \"package.fetch_pkg: Argument 'download_dir' is not a string.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.fetch_pkg: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(pkg.name) == \"string\", \"package.fetch_pkg: Argument 'pkg.name' is not a string.\")\r\n    assert(type(pkg.version) == \"string\", \"package.fetch_pkg: Argument 'pkg.version' is not a string.\")\r\n    assert(type(pkg.path) == \"string\", \"package.fetch_pkg: Argument 'pkg.path' is not a string.\")\r\n    download_dir = sys.abs_path(download_dir)\r\n\r\n    local pkg_full_name = pkg.name .. \"-\" .. pkg.version\r\n    local repo_url = pkg.path\r\n    local clone_dir = sys.abs_path(sys.make_path(download_dir, pkg_full_name))\r\n\r\n    -- check if download_dir already exists, assuming the package was already downloaded\r\n    if sys.exists(sys.make_path(clone_dir, \"dist.info\")) then\r\n        if cfg.cache and not utils.cache_timeout_expired(cfg.cache_timeout, clone_dir) then\r\n            if not suppress_printing then print(\"'\" .. pkg_full_name .. \"' already in cache, skipping downloading (use '-cache=false' to force download).\") end\r\n            return clone_dir\r\n        else\r\n            sys.delete(sys.make_path(clone_dir))\r\n        end\r\n    end\r\n\r\n    local bin_tag = pkg.version .. \"-\" .. cfg.arch .. \"-\" .. cfg.type\r\n    local use_binary = false\r\n\r\n    if cfg.binary then\r\n        -- check if binary version of the module for this arch & type available\r\n        local avail_tags, err = git.get_remote_tags(repo_url)\r\n        if not avail_tags then return nil, err end\r\n\r\n        if utils.contains(avail_tags, bin_tag) then\r\n            use_binary = true\r\n        end\r\n    end\r\n\r\n    -- init the git repository\r\n    local ok, err = git.create_repo(clone_dir)\r\n    if not ok then return nil, err end\r\n\r\n    -- Fetch the desired ref (from the pkg's remote repo) and checkout into it.\r\n\r\n    if use_binary then\r\n\r\n        if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (binary)...\") end\r\n\r\n        -- We fetch the binary tag.\r\n        local sha\r\n        if ok then sha, err = git.fetch_tag(clone_dir, repo_url, bin_tag) end\r\n        if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n\r\n    elseif cfg.source then\r\n\r\n        if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (source)...\") end\r\n\r\n        -- If we want the 'scm' version, we fetch the 'master' branch, otherwise\r\n        -- we fetch the tag, matching the desired package version.\r\n        if ok and pkg.version ~= \"scm\" then\r\n            local sha\r\n            sha, err = git.fetch_tag(clone_dir, repo_url, pkg.version)\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        elseif ok then\r\n            local sha\r\n            sha, err = git.fetch_branch(clone_dir, repo_url, \"master\")\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        end\r\n\r\n    else\r\n        ok = false\r\n        if cfg.binary then\r\n            err = \"Binary version of module not available and using source modules disabled.\"\r\n        else\r\n            err = \"Using both binary and source modules disabled.\"\r\n        end\r\n    end\r\n\r\n    if not ok then\r\n        -- clean up\r\n        if not cfg.debug then sys.delete(clone_dir) end\r\n        return nil, \"Error fetching package '\" .. pkg_full_name .. \"' from '\" .. pkg.path .. \"' to '\" .. download_dir .. \"': \" .. err\r\n    end\r\n\r\n    -- delete '.git' directory\r\n    if not cfg.debug then sys.delete(sys.make_path(clone_dir, \".git\")) end\r\n\r\n    return clone_dir\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "download_dir = download_dir or sys.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "suppress_printing = suppress_printing or false",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "assert(type(pkg) == \"table\", \"package.fetch_pkg: Argument 'pkg' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "assert(type(download_dir) == \"string\", \"package.fetch_pkg: Argument 'download_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "assert(type(suppress_printing) == \"boolean\", \"package.fetch_pkg: Argument 'suppress_printing' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "assert(type(pkg.name) == \"string\", \"package.fetch_pkg: Argument 'pkg.name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "assert(type(pkg.version) == \"string\", \"package.fetch_pkg: Argument 'pkg.version' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "assert(type(pkg.path) == \"string\", \"package.fetch_pkg: Argument 'pkg.path' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "download_dir = sys.abs_path(download_dir)",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "local pkg_full_name = pkg.name .. \"-\" .. pkg.version",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "local repo_url = pkg.path",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "local clone_dir = sys.abs_path(sys.make_path(download_dir, pkg_full_name))",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "if sys.exists(sys.make_path(clone_dir, \"dist.info\")) then\r\n        if cfg.cache and not utils.cache_timeout_expired(cfg.cache_timeout, clone_dir) then\r\n            if not suppress_printing then print(\"'\" .. pkg_full_name .. \"' already in cache, skipping downloading (use '-cache=false' to force download).\") end\r\n            return clone_dir\r\n        else\r\n            sys.delete(sys.make_path(clone_dir))\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "if cfg.cache and not utils.cache_timeout_expired(cfg.cache_timeout, clone_dir) then\r\n            if not suppress_printing then print(\"'\" .. pkg_full_name .. \"' already in cache, skipping downloading (use '-cache=false' to force download).\") end\r\n            return clone_dir\r\n        else\r\n            sys.delete(sys.make_path(clone_dir))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 216,
    "text": "if not suppress_printing then print(\"'\" .. pkg_full_name .. \"' already in cache, skipping downloading (use '-cache=false' to force download).\") end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "print(\"'\" .. pkg_full_name .. \"' already in cache, skipping downloading (use '-cache=false' to force download).\")",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "sys.delete(sys.make_path(clone_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "local bin_tag = pkg.version .. \"-\" .. cfg.arch .. \"-\" .. cfg.type",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "local use_binary = false",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "if cfg.binary then\r\n        -- check if binary version of the module for this arch & type available\r\n        local avail_tags, err = git.get_remote_tags(repo_url)\r\n        if not avail_tags then return nil, err end\r\n\r\n        if utils.contains(avail_tags, bin_tag) then\r\n            use_binary = true\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "local avail_tags, err = git.get_remote_tags(repo_url)",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "if not avail_tags then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "if utils.contains(avail_tags, bin_tag) then\r\n            use_binary = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "use_binary = true",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "local ok, err = git.create_repo(clone_dir)",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "if use_binary then\r\n\r\n        if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (binary)...\") end\r\n\r\n        -- We fetch the binary tag.\r\n        local sha\r\n        if ok then sha, err = git.fetch_tag(clone_dir, repo_url, bin_tag) end\r\n        if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n\r\n    elseif cfg.source then\r\n\r\n        if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (source)...\") end\r\n\r\n        -- If we want the 'scm' version, we fetch the 'master' branch, otherwise\r\n        -- we fetch the tag, matching the desired package version.\r\n        if ok and pkg.version ~= \"scm\" then\r\n            local sha\r\n            sha, err = git.fetch_tag(clone_dir, repo_url, pkg.version)\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        elseif ok then\r\n            local sha\r\n            sha, err = git.fetch_branch(clone_dir, repo_url, \"master\")\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        end\r\n\r\n    else\r\n        ok = false\r\n        if cfg.binary then\r\n            err = \"Binary version of module not available and using source modules disabled.\"\r\n        else\r\n            err = \"Using both binary and source modules disabled.\"\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (binary)...\") end",
    "type": "statement:if"
  }, {
    "id": 229,
    "text": "print(\"Getting \" .. pkg_full_name .. \" (binary)...\")",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "local sha",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "if ok then sha, err = git.fetch_tag(clone_dir, repo_url, bin_tag) end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "sha, err = git.fetch_tag(clone_dir, repo_url, bin_tag)",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "if sha then ok, err = git.checkout_sha(sha, clone_dir) end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "ok, err = git.checkout_sha(sha, clone_dir)",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (source)...\") end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "print(\"Getting \" .. pkg_full_name .. \" (source)...\")",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "if ok and pkg.version ~= \"scm\" then\r\n            local sha\r\n            sha, err = git.fetch_tag(clone_dir, repo_url, pkg.version)\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        elseif ok then\r\n            local sha\r\n            sha, err = git.fetch_branch(clone_dir, repo_url, \"master\")\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "sha, err = git.fetch_tag(clone_dir, repo_url, pkg.version)",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "sha, err = git.fetch_branch(clone_dir, repo_url, \"master\")",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "ok = false",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "if cfg.binary then\r\n            err = \"Binary version of module not available and using source modules disabled.\"\r\n        else\r\n            err = \"Using both binary and source modules disabled.\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "err = \"Binary version of module not available and using source modules disabled.\"",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "err = \"Using both binary and source modules disabled.\"",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "if not ok then\r\n        -- clean up\r\n        if not cfg.debug then sys.delete(clone_dir) end\r\n        return nil, \"Error fetching package '\" .. pkg_full_name .. \"' from '\" .. pkg.path .. \"' to '\" .. download_dir .. \"': \" .. err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "if not cfg.debug then sys.delete(clone_dir) end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "sys.delete(clone_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "if not cfg.debug then sys.delete(sys.make_path(clone_dir, \".git\")) end",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "sys.delete(sys.make_path(clone_dir, \".git\"))",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function fetch_pkgs(packages, download_dir, suppress_printing)\r\n    download_dir = download_dir or sys.current_dir()\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(packages) == \"table\", \"package.fetch_pkgs: Argument 'packages' is not a table.\")\r\n    assert(type(download_dir) == \"string\", \"package.fetch_pkgs: Argument 'download_dir' is not a string.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.fetch_pkgs: Argument 'suppress_printing' is not a boolean.\")\r\n    download_dir = sys.abs_path(download_dir)\r\n\r\n    local fetched_dirs = {}\r\n    local dir, err\r\n\r\n    for _, pkg in pairs(packages) do\r\n        -- if package was downloaded by dependency resolving function, do not download it again.\r\n        if pkg.download_dir then\r\n            dir, err = pkg.download_dir, nil\r\n        -- else download it.\r\n        else\r\n            dir, err = fetch_pkg(pkg, download_dir, suppress_printing)\r\n        end\r\n        if not dir then\r\n            return nil, err\r\n        else\r\n            table.insert(fetched_dirs, dir)\r\n        end\r\n    end\r\n\r\n    return fetched_dirs\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "assert(type(packages) == \"table\", \"package.fetch_pkgs: Argument 'packages' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "assert(type(download_dir) == \"string\", \"package.fetch_pkgs: Argument 'download_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "assert(type(suppress_printing) == \"boolean\", \"package.fetch_pkgs: Argument 'suppress_printing' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "local fetched_dirs = {}",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "local dir, err",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "for _, pkg in pairs(packages) do\r\n        -- if package was downloaded by dependency resolving function, do not download it again.\r\n        if pkg.download_dir then\r\n            dir, err = pkg.download_dir, nil\r\n        -- else download it.\r\n        else\r\n            dir, err = fetch_pkg(pkg, download_dir, suppress_printing)\r\n        end\r\n        if not dir then\r\n            return nil, err\r\n        else\r\n            table.insert(fetched_dirs, dir)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 257,
    "text": "if pkg.download_dir then\r\n            dir, err = pkg.download_dir, nil\r\n        -- else download it.\r\n        else\r\n            dir, err = fetch_pkg(pkg, download_dir, suppress_printing)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "dir, err = pkg.download_dir, nil",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "dir, err = fetch_pkg(pkg, download_dir, suppress_printing)",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "if not dir then\r\n            return nil, err\r\n        else\r\n            table.insert(fetched_dirs, dir)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "table.insert(fetched_dirs, dir)",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function retrieve_versions(package, manifest, suppress_printing)\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(package) == \"string\", \"package.retrieve_versions: Argument 'string' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.retrieve_versions: Argument 'manifest' is not a table.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.retrieve_versions: Argument 'suppress_printing' is not a boolean.\")\r\n\r\n    -- get package table\r\n    local pkg_name = depends.split_name_constraint(package)\r\n    local tmp_packages = depends.find_packages(pkg_name, manifest)\r\n\r\n    if #tmp_packages == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. package .. \"' found.\"\r\n    else\r\n        package = tmp_packages[1]\r\n    end\r\n\r\n    if not suppress_printing then print(\"Finding out available versions of \" .. package.name .. \"...\") end\r\n\r\n    -- get available versions\r\n    local tags, err = git.get_remote_tags(package.path)\r\n    if not tags then return nil, \"Error when retrieving versions of package '\" .. package.name .. \"': \" .. err end\r\n\r\n    -- filter out tags of binary packages\r\n    local versions = utils.filter(tags, function (tag) return tag:match(\"^[^%-]+%-?[^%-]*$\") and true end)\r\n\r\n    packages = {}\r\n\r\n    -- create package information\r\n    for _, version in pairs(versions) do\r\n        pkg = {}\r\n        pkg.name = package.name\r\n        pkg.version = version\r\n        pkg.path = package.path\r\n        table.insert(packages, pkg)\r\n    end\r\n\r\n    return packages\r\nend",
    "type": "function"
  }, {
    "id": 264,
    "text": "assert(type(package) == \"string\", \"package.retrieve_versions: Argument 'string' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "assert(type(manifest) == \"table\", \"package.retrieve_versions: Argument 'manifest' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "assert(type(suppress_printing) == \"boolean\", \"package.retrieve_versions: Argument 'suppress_printing' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "local pkg_name = depends.split_name_constraint(package)",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "local tmp_packages = depends.find_packages(pkg_name, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "if #tmp_packages == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. package .. \"' found.\"\r\n    else\r\n        package = tmp_packages[1]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "package = tmp_packages[1]",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "if not suppress_printing then print(\"Finding out available versions of \" .. package.name .. \"...\") end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "print(\"Finding out available versions of \" .. package.name .. \"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "local tags, err = git.get_remote_tags(package.path)",
    "type": "statement:localassign"
  }, {
    "id": 274,
    "text": "if not tags then return nil, \"Error when retrieving versions of package '\" .. package.name .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 275,
    "text": "local versions = utils.filter(tags, function (tag) return tag:match(\"^[^%-]+%-?[^%-]*$\") and true end)",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "packages = {}",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "for _, version in pairs(versions) do\r\n        pkg = {}\r\n        pkg.name = package.name\r\n        pkg.version = version\r\n        pkg.path = package.path\r\n        table.insert(packages, pkg)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 278,
    "text": "pkg = {}",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "pkg.name = package.name",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "pkg.version = version",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "pkg.path = package.path",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "table.insert(packages, pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function retrieve_pkg_info(package, deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(package) == \"table\", \"package.retrieve_pkg_info: Argument 'package' is not a table.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.retrieve_pkg_info: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local tmp_dir = sys.abs_path(sys.make_path(deploy_dir, cfg.temp_dir))\r\n\r\n    -- download the package\r\n    local pkg_dir, err = fetch_pkg(package, tmp_dir)\r\n    if not pkg_dir then return nil, \"Error when retrieving the info about '\" .. package.name .. \"': \" .. err end\r\n\r\n    -- load information from 'dist.info'\r\n    local info, err = mf.load_distinfo(sys.make_path(pkg_dir, \"dist.info\"))\r\n    if not info then return nil, err end\r\n\r\n    -- add 'path' attribute\r\n    if package.path then info.path = package.path end\r\n\r\n    -- set default arch/type if not explicitly stated and package is of source type\r\n    if sys.exists(sys.make_path(pkg_dir, \"CMakeLists.txt\")) then\r\n        info.arch = info.arch or \"Universal\"\r\n        info.type = info.type or \"source\"\r\n    elseif not (info.arch and info.type) then\r\n        return nil, pkg_dir .. \": binary package missing arch or type in 'dist.info'.\"\r\n    end\r\n\r\n    return info, pkg_dir\r\nend",
    "type": "function"
  }, {
    "id": 285,
    "text": "assert(type(package) == \"table\", \"package.retrieve_pkg_info: Argument 'package' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "assert(type(deploy_dir) == \"string\", \"package.retrieve_pkg_info: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "local tmp_dir = sys.abs_path(sys.make_path(deploy_dir, cfg.temp_dir))",
    "type": "statement:localassign"
  }, {
    "id": 288,
    "text": "local pkg_dir, err = fetch_pkg(package, tmp_dir)",
    "type": "statement:localassign"
  }, {
    "id": 289,
    "text": "if not pkg_dir then return nil, \"Error when retrieving the info about '\" .. package.name .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 290,
    "text": "if not info then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 291,
    "text": "if package.path then info.path = package.path end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "info.path = package.path",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "if sys.exists(sys.make_path(pkg_dir, \"CMakeLists.txt\")) then\r\n        info.arch = info.arch or \"Universal\"\r\n        info.type = info.type or \"source\"\r\n    elseif not (info.arch and info.type) then\r\n        return nil, pkg_dir .. \": binary package missing arch or type in 'dist.info'.\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 294,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 295,
    "text": "function get_versions_info(pkg, manifest, deploy_dir, installed)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(pkg) == \"string\", \"package.get_versions_info: Argument 'pkg' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.get_versions_info: Argument 'manifest' is not a table.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.get_versions_info: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find all available versions of package\r\n    local versions, err = retrieve_versions(pkg, manifest)\r\n    if not versions then return nil, err end\r\n\r\n    -- collect info about all retrieved versions\r\n    local infos = {}\r\n    for _, version in pairs(versions) do\r\n\r\n        local info, path_or_err\r\n        local installed_version = {}\r\n\r\n        -- find out whether this 'version' is installed so we can use it's dist.info\r\n        if type(installed) == \"table\" then installed_version = depends.find_packages(version.name .. \"-\" .. version.version, installed) end\r\n\r\n        -- get info\r\n        if #installed_version > 0 then\r\n            print(\"Using dist.info from installed \" .. version.name .. \"-\" .. version.version)\r\n            info = installed_version[1]\r\n            info.path = version.path\r\n            info.from_installed = true  -- flag that dist.info of installed package was used\r\n        else\r\n            info, path_or_err = retrieve_pkg_info(version, deploy_dir)\r\n            if not info then return nil, path_or_err end\r\n            sys.delete(path_or_err)\r\n        end\r\n        table.insert(infos, info)\r\n    end\r\n\r\n    -- found and add an implicit 'scm' version\r\n    local pkg_name = depends.split_name_constraint(pkg)\r\n    local found = depends.find_packages(pkg_name, manifest)\r\n    if #found == 0 then return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\" end\r\n    local scm_info, path_or_err = retrieve_pkg_info({name = pkg_name, version = \"scm\", path = found[1].path})\r\n    if not scm_info then return nil, path_or_err end\r\n    sys.delete(path_or_err)\r\n    scm_info.version = \"scm\"\r\n    table.insert(infos, scm_info)\r\n\r\n    local tmp_manifest = utils.deepcopy(manifest)\r\n\r\n    -- add collected info to the temp. manifest, replacing existing tables\r\n    for _, info in pairs(infos) do\r\n        local already_in_manifest = false\r\n        -- find if this version is already in manifest\r\n        for idx, pkg in ipairs(tmp_manifest) do\r\n            -- if yes, replace it\r\n            if pkg.name == info.name and pkg.version == info.version then\r\n                tmp_manifest[idx] = info\r\n                already_in_manifest = true\r\n                break\r\n            end\r\n        end\r\n        -- if not, just normally add to the manifest\r\n        if not already_in_manifest then\r\n            table.insert(tmp_manifest, info)\r\n        end\r\n    end\r\n\r\n    return tmp_manifest\r\nend",
    "type": "function"
  }, {
    "id": 296,
    "text": "assert(type(pkg) == \"string\", \"package.get_versions_info: Argument 'pkg' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "assert(type(manifest) == \"table\", \"package.get_versions_info: Argument 'manifest' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "assert(type(deploy_dir) == \"string\", \"package.get_versions_info: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "local versions, err = retrieve_versions(pkg, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "if not versions then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "local infos = {}",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "for _, version in pairs(versions) do\r\n\r\n        local info, path_or_err\r\n        local installed_version = {}\r\n\r\n        -- find out whether this 'version' is installed so we can use it's dist.info\r\n        if type(installed) == \"table\" then installed_version = depends.find_packages(version.name .. \"-\" .. version.version, installed) end\r\n\r\n        -- get info\r\n        if #installed_version > 0 then\r\n            print(\"Using dist.info from installed \" .. version.name .. \"-\" .. version.version)\r\n            info = installed_version[1]\r\n            info.path = version.path\r\n            info.from_installed = true  -- flag that dist.info of installed package was used\r\n        else\r\n            info, path_or_err = retrieve_pkg_info(version, deploy_dir)\r\n            if not info then return nil, path_or_err end\r\n            sys.delete(path_or_err)\r\n        end\r\n        table.insert(infos, info)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 303,
    "text": "local info, path_or_err",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "local installed_version = {}",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "if type(installed) == \"table\" then installed_version = depends.find_packages(version.name .. \"-\" .. version.version, installed) end",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "installed_version = depends.find_packages(version.name .. \"-\" .. version.version, installed)",
    "type": "statement:assign"
  }, {
    "id": 307,
    "text": "if #installed_version > 0 then\r\n            print(\"Using dist.info from installed \" .. version.name .. \"-\" .. version.version)\r\n            info = installed_version[1]\r\n            info.path = version.path\r\n            info.from_installed = true  -- flag that dist.info of installed package was used\r\n        else\r\n            info, path_or_err = retrieve_pkg_info(version, deploy_dir)\r\n            if not info then return nil, path_or_err end\r\n            sys.delete(path_or_err)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "print(\"Using dist.info from installed \" .. version.name .. \"-\" .. version.version)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "info = installed_version[1]",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "info.path = version.path",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "info.from_installed = true",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "info, path_or_err = retrieve_pkg_info(version, deploy_dir)",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "if not info then return nil, path_or_err end",
    "type": "statement:if"
  }, {
    "id": 314,
    "text": "sys.delete(path_or_err)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "table.insert(infos, info)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "local pkg_name = depends.split_name_constraint(pkg)",
    "type": "statement:localassign"
  }, {
    "id": 317,
    "text": "local found = depends.find_packages(pkg_name, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "if #found == 0 then return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\" end",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "local scm_info, path_or_err = retrieve_pkg_info({name = pkg_name, version = \"scm\", path = found[1].path})",
    "type": "statement:localassign"
  }, {
    "id": 320,
    "text": "if not scm_info then return nil, path_or_err end",
    "type": "statement:if"
  }, {
    "id": 321,
    "text": "scm_info.version = \"scm\"",
    "type": "statement:assign"
  }, {
    "id": 322,
    "text": "table.insert(infos, scm_info)",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "local tmp_manifest = utils.deepcopy(manifest)",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "for _, info in pairs(infos) do\r\n        local already_in_manifest = false\r\n        -- find if this version is already in manifest\r\n        for idx, pkg in ipairs(tmp_manifest) do\r\n            -- if yes, replace it\r\n            if pkg.name == info.name and pkg.version == info.version then\r\n                tmp_manifest[idx] = info\r\n                already_in_manifest = true\r\n                break\r\n            end\r\n        end\r\n        -- if not, just normally add to the manifest\r\n        if not already_in_manifest then\r\n            table.insert(tmp_manifest, info)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 325,
    "text": "local already_in_manifest = false",
    "type": "statement:localassign"
  }, {
    "id": 326,
    "text": "for idx, pkg in ipairs(tmp_manifest) do\r\n            -- if yes, replace it\r\n            if pkg.name == info.name and pkg.version == info.version then\r\n                tmp_manifest[idx] = info\r\n                already_in_manifest = true\r\n                break\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 327,
    "text": "if pkg.name == info.name and pkg.version == info.version then\r\n                tmp_manifest[idx] = info\r\n                already_in_manifest = true\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 328,
    "text": "tmp_manifest[idx] = info",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "already_in_manifest = true",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "if not already_in_manifest then\r\n            table.insert(tmp_manifest, info)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "table.insert(tmp_manifest, info)",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function (tag) return tag:match(\"^[^%-]+%-?[^%-]*$\") and true end",
    "type": "function"
  }, {
    "id": 334,
    "text": "",
    "type": "function container"
  }, {
    "id": 335,
    "text": "function path_separator()\r\n    if cfg.arch == \"Windows\" then\r\n        return \"\\\\\"\r\n    else\r\n        return \"/\"\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 336,
    "text": "function check_separators(path)\r\n    assert(type(path) == \"string\", \"sys.check_separators: Argument 'path' is not a string.\")\r\n    if cfg.arch == \"Windows\" then\r\n        return path:gsub(\"/\", \"\\\\\")\r\n    else\r\n        return path\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 337,
    "text": "function quote(argument)\r\n    assert(type(argument) == \"string\", \"sys.quote: Argument 'argument' is not a string.\")\r\n\r\n    -- replace '/' path separators for '\\' on Windows\r\n    if cfg.arch == \"Windows\" and argument:match(\"^[%u%U.]?:?[/\\\\].*\") then\r\n        argument = argument:gsub(\"//\",\"\\\\\"):gsub(\"/\",\"\\\\\")\r\n    end\r\n\r\n    -- Windows doesn't recognize paths starting with two slashes or backslashes\r\n    -- so we double every backslash except for the first one\r\n    if cfg.arch == \"Windows\" and argument:match(\"^[/\\\\].*\") then\r\n        local prefix = argument:sub(1,1)\r\n        argument = argument:sub(2):gsub(\"\\\\\",  \"\\\\\\\\\")\r\n        argument = prefix .. argument\r\n    else\r\n        argument = argument:gsub(\"\\\\\",  \"\\\\\\\\\")\r\n    end\r\n    argument = argument:gsub('\"',  '\\\\\"')\r\n\r\n    return '\"' .. argument .. '\"'\r\nend",
    "type": "function"
  }, {
    "id": 338,
    "text": "function exec(command, force_verbose)\r\n    force_verbose = force_verbose or false\r\n    assert(type(command) == \"string\", \"sys.exec: Argument 'command' is not a string.\")\r\n    assert(type(force_verbose) == \"boolean\", \"sys.exec: Argument 'force_verbose' is not a boolean.\")\r\n\r\n    if not (cfg.verbose or cfg.debug or force_verbose) then\r\n        if cfg.arch == \"Windows\" then\r\n            command = command .. \" > NUL 2>&1\"\r\n        else\r\n            command = command .. \" > /dev/null 2>&1\"\r\n        end\r\n    end\r\n\r\n    if cfg.debug then print(\"Executing the command: \" .. command) end\r\n    local ok, str, status  = os.execute(command)\r\n\r\n    -- os.execute returned values on failure are:\r\n    --  nil or true, \"exit\", n or true, \"signal\", n for lua >= 5.2\r\n    --  status ~= 0 for lua 5.x < 5.2\r\n    if ok == nil or (str == \"exit\" and status ~= 0) or str == \"signal\" or (ok ~= 0 and ok ~= true) then\r\n        return nil, \"Error when running the command: \" .. command\r\n    else\r\n        return true, \"Sucessfully executed the command: \" .. command\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 339,
    "text": "function exists(path)\r\n    assert(type(path) == \"string\", \"sys.exists: Argument 'path' is not a string.\")\r\n    local attr, err = lfs.attributes(path)\r\n    return utils.to_boolean(attr), err\r\nend",
    "type": "function"
  }, {
    "id": 340,
    "text": "function is_file(file)\r\n    assert(type(file) == \"string\", \"sys.is_file: Argument 'file' is not a string.\")\r\n    return lfs.attributes(file, \"mode\") == \"file\"\r\nend",
    "type": "function"
  }, {
    "id": 341,
    "text": "function is_dir(dir)\r\n    assert(type(dir) == \"string\", \"sys.is_dir: Argument 'dir' is not a string.\")\r\n    return lfs.attributes(dir, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 342,
    "text": "function current_dir()\r\n    local dir, err = lfs.currentdir()\r\n    if not dir then return nil, err end\r\n    return dir\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "function extract_name(path)\r\n    assert(type(path) == \"string\", \"sys.extract_name: Argument 'path' is not a string.\")\r\n    if is_root(path) then return path end\r\n\r\n    path = remove_trailing(path)\r\n    path = path:gsub(\"^.*\" .. path_separator(), \"\")\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 344,
    "text": "function parent_dir(path)\r\n    assert(type(path) == \"string\", \"sys.parent_dir: Argument 'path' is not a string.\")\r\n    path = remove_curr_dir_dots(path)\r\n    path = remove_trailing(path)\r\n\r\n    local dir = path:gsub(utils.escape_magic(extract_name(path)) .. \"$\", \"\")\r\n    if dir == \"\" then\r\n        return nil\r\n    else\r\n        return make_path(dir)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 345,
    "text": "function parents_up_to(path, boundary_path)\r\n    assert(type(path) == \"string\", \"sys.parents_up_to: Argument 'path' is not a string.\")\r\n    assert(type(boundary_path) == \"string\", \"sys.parents_up_to: Argument 'boundary_path' is not a string.\")\r\n    boundary_path = remove_trailing(boundary_path)\r\n\r\n    -- helper function to recursively collect the parent directories\r\n    local function collect_parents(_path, _parents)\r\n        local _parent = parent_dir(_path)\r\n        if _parent and _parent ~= boundary_path then\r\n            table.insert(_parents, _parent)\r\n            return collect_parents(_parent, _parents)\r\n        else\r\n            return _parents\r\n        end\r\n    end\r\n\r\n    return collect_parents(path, {})\r\nend",
    "type": "function"
  }, {
    "id": 346,
    "text": "function make_path(...)\r\n    -- arg is deprecated in lua 5.2 in favor of table.pack we mimic here\r\n    local arg = {n=select('#',...),...}\r\n    local parts = arg\r\n    assert(type(parts) == \"table\", \"sys.make_path: Argument 'parts' is not a table.\")\r\n\r\n    local path, err\r\n    if parts.n == 0 then\r\n        path, err = current_dir()\r\n    else\r\n        path, err = table.concat(parts, path_separator())\r\n    end\r\n    if not path then return nil, err end\r\n\r\n    -- squeeze repeated occurences of a file separator\r\n    path = path:gsub(path_separator() .. \"+\", path_separator())\r\n\r\n    -- remove unnecessary trailing path separator\r\n    path = remove_trailing(path)\r\n\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 347,
    "text": "function abs_path(path)\r\n    assert(type(path) == \"string\", \"sys.get_abs_path: Argument 'path' is not a string.\")\r\n    if is_abs(path) then return path end\r\n\r\n    local cur_dir, err = current_dir()\r\n    if not cur_dir then return nil, err end\r\n\r\n    return make_path(cur_dir, path)\r\nend",
    "type": "function"
  }, {
    "id": 348,
    "text": "function get_file_list(dir)\r\n    dir = dir or current_dir()\r\n    assert(type(dir) == \"string\", \"sys.get_directory: Argument 'dir' is not a string.\")\r\n    if not exists(dir) then return nil, \"Error getting file list of '\" .. dir .. \"': directory doesn't exist.\" end\r\n\r\n    local function collect(path, all_paths)\r\n        for item in get_directory(path) do\r\n\r\n            local item_path = make_path(path, item)\r\n            local _, last = item_path:find(dir .. path_separator(), 1, true)\r\n            local path_to_insert = item_path:sub(last + 1)\r\n\r\n            if is_file(item_path) then\r\n                table.insert(all_paths, path_to_insert)\r\n            elseif is_dir(item_path) and item ~= \".\" and item ~= \"..\" then\r\n                table.insert(all_paths, path_to_insert)\r\n                collect(item_path, all_paths)\r\n            end\r\n        end\r\n    end\r\n\r\n    local all_paths = {}\r\n    collect(dir, all_paths)\r\n\r\n    return all_paths\r\nend",
    "type": "function"
  }, {
    "id": 349,
    "text": "function make_dir(dir_name)\r\n    assert(type(dir_name) == \"string\", \"sys.make_dir: Argument 'dir_name' is not a string.\")\r\n    if exists(dir_name) then\r\n        return true\r\n    else\r\n        local par_dir = parent_dir(dir_name)\r\n        if par_dir then\r\n            local ok, err = make_dir(par_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n        return lfs.mkdir(dir_name)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 350,
    "text": "function copy(source, dest_dir)\r\n    assert(type(source) == \"string\", \"sys.copy: Argument 'file_or_dir' is not a string.\")\r\n    assert(type(dest_dir) == \"string\", \"sys.copy: Argument 'dest_dir' is not a string.\")\r\n    assert(is_dir(dest_dir), \"sys.copy: destination '\" .. dest_dir ..\"' is not a directory.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if is_dir(source) then\r\n            make_dir(make_path(dest_dir, extract_name(source)))\r\n            return exec(\"xcopy /E /I /Y /Q \" .. quote(source) .. \" \" .. quote(dest_dir .. \"\\\\\" .. extract_name(source)))\r\n        else\r\n            return exec(\"copy /Y \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        end\r\n    else\r\n        if is_dir(source) then\r\n            return exec(\"cp -fRH \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        else\r\n            return exec(\"cp -fH \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 351,
    "text": "function delete(path)\r\n    assert(type(path) == \"string\", \"sys.delete: Argument 'path' is not a string.\")\r\n    assert(is_abs(path), \"sys.delete: Argument 'path' is not an absolute path.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if not exists(path) then\r\n            return true\r\n        elseif is_file(path) then\r\n            return os.remove(path)\r\n        else\r\n            --return exec(\"rd /S /Q \" .. quote(path))\r\n            return exec(\"move /y \" .. quote(path) .. \" \" .. quote(tmp_dir()))\r\n        end\r\n    else\r\n        return exec(\"rm -rf \" .. quote(path))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 352,
    "text": "function deepcopy(object)\r\n    local lookup_table = {}\r\n    local function _copy(object)\r\n        if type(object) ~= \"table\" then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {}\r\n        lookup_table[object] = new_table\r\n        for index, value in pairs(object) do\r\n            new_table[_copy(index)] = _copy(value)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end\r\n    return _copy(object)\r\nend",
    "type": "function"
  }, {
    "id": 353,
    "text": "function filter(array, predicate_fn)\r\n    assert(type(array) == \"table\", \"utils.filter: Argument 'array' is not a table.\")\r\n    assert(type(predicate_fn) == \"function\", \"utils.filter: Argument 'predicate_fn' is not a function.\")\r\n    local filtered = {}\r\n    for _,v in pairs(array) do\r\n        if predicate_fn(v) == true then table.insert(filtered, deepcopy(v)) end\r\n    end\r\n    return filtered\r\nend",
    "type": "function"
  }, {
    "id": 354,
    "text": "function contains(tbl, value)\r\n    assert(type(tbl) == \"table\", \"utils.contains: Argument 'tbl' is not a table.\")\r\n    for _,v in pairs(tbl) do\r\n        if v == value then return true end\r\n    end\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 355,
    "text": "function cache_timeout_expired(cache_timeout, file)\r\n    assert(type(cache_timeout) == \"number\", \"utils.cache_timeout_expired: Argument 'cache_timeout' is not a number.\")\r\n    assert(type(file) == \"string\", \"utils.cache_timeout_expired: Argument 'file' is not a string.\")\r\n    return sys.last_modification_time(file) + cache_timeout < sys.current_time()\r\nend",
    "type": "function"
  }, {
    "id": 356,
    "text": "function escape_magic(str)\r\n    assert(type(str) == \"string\", \"utils.escape: Argument 'str' is not a string.\")\r\n    local escaped = str:gsub('[%-%.%+%[%]%(%)%^%%%?%*%^%$]','%%%1')\r\n    return escaped\r\nend",
    "type": "function"
  }, {
    "id": 357,
    "text": "function system_dependency_available(name, command)\r\n    assert(type(name) == \"string\", \"utils.system_dependency_available: Argument 'name' is not a string.\")\r\n    assert(type(command) == \"string\", \"utils.system_dependency_available: Argument 'command' is not a string.\")\r\n\r\n    if not sys.exec(command) then\r\n        print(\"Error: command '\" .. name .. \"' not found on system. See installation instructions at\\nhttps://github.com/LuaDist/Repository/wiki/Installation-of-System-Dependencies\")\r\n        return false\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 358,
    "text": "",
    "type": "function container"
  }, {
    "id": 359,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 360,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 361,
    "text": "print",
    "type": "global function"
  }, {
    "id": 362,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 363,
    "text": "open",
    "type": "global function"
  }, {
    "id": 364,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 365,
    "text": "module",
    "type": "global function"
  }, {
    "id": 366,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 367,
    "text": "type",
    "type": "global function"
  }, {
    "id": 368,
    "text": "require",
    "type": "global function"
  }, {
    "id": 369,
    "text": "config",
    "type": "module"
  }, {
    "id": 370,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 371,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 372,
    "text": "",
    "type": "variable container"
  }, {
    "id": 373,
    "text": "",
    "type": "require container"
  }, {
    "id": 374,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 375,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 376,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 377,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 378,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 379,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 380,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 381,
    "text": "",
    "type": "require local variable"
  } ]
}