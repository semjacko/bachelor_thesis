{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadist-git/dist/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 25,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 25,
    "label": "has",
    "to": 37
  }, {
    "from": 25,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 26
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 28
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 23
  }, {
    "from": 39,
    "label": "has",
    "to": 23
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 26
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 50
  }, {
    "from": 44,
    "label": "has",
    "to": 51
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 53
  }, {
    "from": 44,
    "label": "has",
    "to": 54
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 55
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 56
  }, {
    "from": 44,
    "label": "has",
    "to": 57
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 45
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 26
  }, {
    "from": 62,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 62,
    "label": "has",
    "to": 48
  }, {
    "from": 62,
    "label": "has",
    "to": 49
  }, {
    "from": 62,
    "label": "has",
    "to": 28
  }, {
    "from": 62,
    "label": "has",
    "to": 50
  }, {
    "from": 62,
    "label": "has",
    "to": 51
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 56
  }, {
    "from": 62,
    "label": "has",
    "to": 57
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 26
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 28
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 71
  }, {
    "from": 76,
    "label": "has",
    "to": 23
  }, {
    "from": 76,
    "label": "has",
    "to": 23
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 26
  }, {
    "from": 84,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 28
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 50
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 67
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 84,
    "label": "has",
    "to": 97
  }, {
    "from": 84,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 84,
    "label": "has",
    "to": 101
  }, {
    "from": 84,
    "label": "has",
    "to": 23
  }, {
    "from": 84,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 69
  }, {
    "from": 102,
    "label": "has",
    "to": 70
  }, {
    "from": 102,
    "label": "has",
    "to": 71
  }, {
    "from": 84,
    "label": "has",
    "to": 23
  }, {
    "from": 84,
    "label": "has",
    "to": 23
  }, {
    "from": 84,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 104,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 111,
    "label": "has",
    "to": 118
  }, {
    "from": 111,
    "label": "has",
    "to": 119
  }, {
    "from": 104,
    "label": "has",
    "to": 23
  }, {
    "from": 104,
    "label": "has",
    "to": 23
  }, {
    "from": 104,
    "label": "has",
    "to": 120
  }, {
    "from": 104,
    "label": "has",
    "to": 121
  }, {
    "from": 104,
    "label": "has",
    "to": 23
  }, {
    "from": 104,
    "label": "has",
    "to": 23
  }, {
    "from": 104,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 26
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 123,
    "label": "has",
    "to": 28
  }, {
    "from": 123,
    "label": "has",
    "to": 129
  }, {
    "from": 123,
    "label": "has",
    "to": 50
  }, {
    "from": 123,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 123,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 133,
    "label": "has",
    "to": 139
  }, {
    "from": 133,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 133,
    "label": "has",
    "to": 142
  }, {
    "from": 133,
    "label": "has",
    "to": 71
  }, {
    "from": 133,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 133,
    "label": "has",
    "to": 151
  }, {
    "from": 133,
    "label": "has",
    "to": 152
  }, {
    "from": 133,
    "label": "has",
    "to": 153
  }, {
    "from": 133,
    "label": "has",
    "to": 154
  }, {
    "from": 133,
    "label": "has",
    "to": 155
  }, {
    "from": 133,
    "label": "has",
    "to": 156
  }, {
    "from": 133,
    "label": "has",
    "to": 157
  }, {
    "from": 133,
    "label": "has",
    "to": 158
  }, {
    "from": 133,
    "label": "has",
    "to": 159
  }, {
    "from": 133,
    "label": "has",
    "to": 160
  }, {
    "from": 133,
    "label": "has",
    "to": 161
  }, {
    "from": 133,
    "label": "has",
    "to": 162
  }, {
    "from": 133,
    "label": "has",
    "to": 163
  }, {
    "from": 133,
    "label": "has",
    "to": 164
  }, {
    "from": 133,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 141
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 123,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 171
  }, {
    "from": 167,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 167,
    "label": "has",
    "to": 23
  }, {
    "from": 167,
    "label": "has",
    "to": 175
  }, {
    "from": 167,
    "label": "has",
    "to": 176
  }, {
    "from": 167,
    "label": "has",
    "to": 177
  }, {
    "from": 167,
    "label": "has",
    "to": 23
  }, {
    "from": 167,
    "label": "has",
    "to": 178
  }, {
    "from": 167,
    "label": "has",
    "to": 179
  }, {
    "from": 167,
    "label": "has",
    "to": 71
  }, {
    "from": 167,
    "label": "has",
    "to": 23
  }, {
    "from": 167,
    "label": "has",
    "to": 23
  }, {
    "from": 167,
    "label": "has",
    "to": 180
  }, {
    "from": 62,
    "label": "calls",
    "to": 15
  }, {
    "from": 84,
    "label": "calls",
    "to": 208
  }, {
    "from": 84,
    "label": "calls",
    "to": 208
  }, {
    "from": 62,
    "label": "calls",
    "to": 185
  }, {
    "from": 84,
    "label": "calls",
    "to": 185
  }, {
    "from": 25,
    "label": "calls",
    "to": 198
  }, {
    "from": 39,
    "label": "calls",
    "to": 198
  }, {
    "from": 44,
    "label": "calls",
    "to": 198
  }, {
    "from": 44,
    "label": "calls",
    "to": 198
  }, {
    "from": 62,
    "label": "calls",
    "to": 198
  }, {
    "from": 62,
    "label": "calls",
    "to": 198
  }, {
    "from": 76,
    "label": "calls",
    "to": 198
  }, {
    "from": 76,
    "label": "calls",
    "to": 198
  }, {
    "from": 84,
    "label": "calls",
    "to": 198
  }, {
    "from": 84,
    "label": "calls",
    "to": 198
  }, {
    "from": 104,
    "label": "calls",
    "to": 198
  }, {
    "from": 104,
    "label": "calls",
    "to": 198
  }, {
    "from": 123,
    "label": "calls",
    "to": 198
  }, {
    "from": 123,
    "label": "calls",
    "to": 198
  }, {
    "from": 123,
    "label": "calls",
    "to": 198
  }, {
    "from": 167,
    "label": "calls",
    "to": 198
  }, {
    "from": 167,
    "label": "calls",
    "to": 198
  }, {
    "from": 44,
    "label": "calls",
    "to": 10
  }, {
    "from": 123,
    "label": "calls",
    "to": 20
  }, {
    "from": 167,
    "label": "calls",
    "to": 14
  }, {
    "from": 84,
    "label": "calls",
    "to": 199
  }, {
    "from": 123,
    "label": "calls",
    "to": 195
  }, {
    "from": 123,
    "label": "calls",
    "to": 195
  }, {
    "from": 84,
    "label": "calls",
    "to": 205
  }, {
    "from": 123,
    "label": "calls",
    "to": 192
  }, {
    "from": 25,
    "label": "calls",
    "to": 13
  }, {
    "from": 84,
    "label": "calls",
    "to": 200
  }, {
    "from": 84,
    "label": "calls",
    "to": 200
  }, {
    "from": 84,
    "label": "calls",
    "to": 200
  }, {
    "from": 123,
    "label": "calls",
    "to": 200
  }, {
    "from": 44,
    "label": "calls",
    "to": 186
  }, {
    "from": 62,
    "label": "calls",
    "to": 186
  }, {
    "from": 76,
    "label": "calls",
    "to": 186
  }, {
    "from": 104,
    "label": "calls",
    "to": 12
  }, {
    "from": 104,
    "label": "calls",
    "to": 188
  }, {
    "from": 181,
    "label": "calls",
    "to": 203
  }, {
    "from": 62,
    "label": "calls",
    "to": 8
  }, {
    "from": 84,
    "label": "calls",
    "to": 8
  }, {
    "from": 104,
    "label": "calls",
    "to": 8
  }, {
    "from": 123,
    "label": "calls",
    "to": 8
  }, {
    "from": 123,
    "label": "calls",
    "to": 17
  }, {
    "from": 104,
    "label": "calls",
    "to": 191
  }, {
    "from": 123,
    "label": "calls",
    "to": 197
  }, {
    "from": 123,
    "label": "calls",
    "to": 197
  }, {
    "from": 123,
    "label": "calls",
    "to": 18
  }, {
    "from": 44,
    "label": "calls",
    "to": 193
  }, {
    "from": 62,
    "label": "calls",
    "to": 193
  }, {
    "from": 62,
    "label": "calls",
    "to": 193
  }, {
    "from": 84,
    "label": "calls",
    "to": 193
  }, {
    "from": 123,
    "label": "calls",
    "to": 193
  }, {
    "from": 123,
    "label": "calls",
    "to": 193
  }, {
    "from": 123,
    "label": "calls",
    "to": 193
  }, {
    "from": 123,
    "label": "calls",
    "to": 193
  }, {
    "from": 167,
    "label": "calls",
    "to": 193
  }, {
    "from": 44,
    "label": "calls",
    "to": 187
  }, {
    "from": 62,
    "label": "calls",
    "to": 187
  }, {
    "from": 104,
    "label": "calls",
    "to": 187
  }, {
    "from": 123,
    "label": "calls",
    "to": 19
  }, {
    "from": 123,
    "label": "calls",
    "to": 196
  }, {
    "from": 123,
    "label": "calls",
    "to": 196
  }, {
    "from": 25,
    "label": "calls",
    "to": 201
  }, {
    "from": 25,
    "label": "calls",
    "to": 201
  }, {
    "from": 25,
    "label": "calls",
    "to": 201
  }, {
    "from": 44,
    "label": "calls",
    "to": 201
  }, {
    "from": 62,
    "label": "calls",
    "to": 201
  }, {
    "from": 62,
    "label": "calls",
    "to": 201
  }, {
    "from": 76,
    "label": "calls",
    "to": 201
  }, {
    "from": 84,
    "label": "calls",
    "to": 201
  }, {
    "from": 84,
    "label": "calls",
    "to": 201
  }, {
    "from": 104,
    "label": "calls",
    "to": 201
  }, {
    "from": 104,
    "label": "calls",
    "to": 201
  }, {
    "from": 123,
    "label": "calls",
    "to": 201
  }, {
    "from": 25,
    "label": "calls",
    "to": 9
  }, {
    "from": 44,
    "label": "calls",
    "to": 9
  }, {
    "from": 62,
    "label": "calls",
    "to": 9
  }, {
    "from": 84,
    "label": "calls",
    "to": 9
  }, {
    "from": 123,
    "label": "calls",
    "to": 9
  }, {
    "from": 167,
    "label": "calls",
    "to": 184
  }, {
    "from": 25,
    "label": "calls",
    "to": 202
  }, {
    "from": 25,
    "label": "calls",
    "to": 202
  }, {
    "from": 104,
    "label": "calls",
    "to": 202
  }, {
    "from": 104,
    "label": "calls",
    "to": 202
  }, {
    "from": 39,
    "label": "calls",
    "to": 182
  }, {
    "from": 44,
    "label": "calls",
    "to": 182
  }, {
    "from": 62,
    "label": "calls",
    "to": 182
  }, {
    "from": 104,
    "label": "calls",
    "to": 182
  }, {
    "from": 123,
    "label": "calls",
    "to": 16
  }, {
    "from": 123,
    "label": "calls",
    "to": 21
  }, {
    "from": 167,
    "label": "calls",
    "to": 183
  }, {
    "from": 25,
    "label": "calls",
    "to": 11
  }, {
    "from": 123,
    "label": "calls",
    "to": 189
  }, {
    "from": 167,
    "label": "calls",
    "to": 189
  }, {
    "from": 22,
    "label": "calls",
    "to": 194
  }, {
    "from": 25,
    "label": "calls",
    "to": 194
  }, {
    "from": 39,
    "label": "calls",
    "to": 194
  }, {
    "from": 44,
    "label": "calls",
    "to": 194
  }, {
    "from": 62,
    "label": "calls",
    "to": 194
  }, {
    "from": 76,
    "label": "calls",
    "to": 194
  }, {
    "from": 76,
    "label": "calls",
    "to": 194
  }, {
    "from": 84,
    "label": "calls",
    "to": 194
  }, {
    "from": 104,
    "label": "calls",
    "to": 194
  }, {
    "from": 123,
    "label": "calls",
    "to": 194
  }, {
    "from": 167,
    "label": "calls",
    "to": 194
  }, {
    "from": 25,
    "label": "calls",
    "to": 206
  }, {
    "from": 39,
    "label": "calls",
    "to": 206
  }, {
    "from": 44,
    "label": "calls",
    "to": 206
  }, {
    "from": 44,
    "label": "calls",
    "to": 206
  }, {
    "from": 44,
    "label": "calls",
    "to": 206
  }, {
    "from": 62,
    "label": "calls",
    "to": 206
  }, {
    "from": 62,
    "label": "calls",
    "to": 206
  }, {
    "from": 62,
    "label": "calls",
    "to": 206
  }, {
    "from": 76,
    "label": "calls",
    "to": 206
  }, {
    "from": 76,
    "label": "calls",
    "to": 206
  }, {
    "from": 84,
    "label": "calls",
    "to": 206
  }, {
    "from": 84,
    "label": "calls",
    "to": 206
  }, {
    "from": 84,
    "label": "calls",
    "to": 206
  }, {
    "from": 104,
    "label": "calls",
    "to": 206
  }, {
    "from": 104,
    "label": "calls",
    "to": 206
  }, {
    "from": 123,
    "label": "calls",
    "to": 206
  }, {
    "from": 123,
    "label": "calls",
    "to": 206
  }, {
    "from": 123,
    "label": "calls",
    "to": 206
  }, {
    "from": 123,
    "label": "calls",
    "to": 206
  }, {
    "from": 167,
    "label": "calls",
    "to": 206
  }, {
    "from": 167,
    "label": "calls",
    "to": 206
  }, {
    "from": 181,
    "label": "calls",
    "to": 207
  }, {
    "from": 181,
    "label": "calls",
    "to": 207
  }, {
    "from": 181,
    "label": "calls",
    "to": 207
  }, {
    "from": 181,
    "label": "calls",
    "to": 207
  }, {
    "from": 181,
    "label": "calls",
    "to": 207
  }, {
    "from": 181,
    "label": "calls",
    "to": 207
  }, {
    "from": 181,
    "label": "calls",
    "to": 207
  }, {
    "from": 123,
    "label": "calls",
    "to": 190
  }, {
    "from": 123,
    "label": "calls",
    "to": 204
  }, {
    "from": 123,
    "label": "calls",
    "to": 204
  }, {
    "from": 3,
    "label": "contains",
    "to": 181
  }, {
    "from": 181,
    "label": "declares",
    "to": 22
  }, {
    "from": 181,
    "label": "declares",
    "to": 25
  }, {
    "from": 181,
    "label": "declares",
    "to": 39
  }, {
    "from": 181,
    "label": "declares",
    "to": 44
  }, {
    "from": 181,
    "label": "declares",
    "to": 62
  }, {
    "from": 181,
    "label": "declares",
    "to": 76
  }, {
    "from": 181,
    "label": "declares",
    "to": 84
  }, {
    "from": 181,
    "label": "declares",
    "to": 104
  }, {
    "from": 181,
    "label": "declares",
    "to": 123
  }, {
    "from": 181,
    "label": "declares",
    "to": 167
  }, {
    "from": 3,
    "label": "contains",
    "to": 210
  }, {
    "from": 3,
    "label": "contains",
    "to": 211
  }, {
    "from": 211,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "requires",
    "to": 209
  }, {
    "from": 211,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "requires",
    "to": 1
  }, {
    "from": 211,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "requires",
    "to": 2
  }, {
    "from": 211,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "requires",
    "to": 6
  }, {
    "from": 211,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "requires",
    "to": 5
  }, {
    "from": 211,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "requires",
    "to": 4
  }, {
    "from": 211,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "requires",
    "to": 7
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "depends",
    "type": "module"
  }, {
    "id": 2,
    "text": "git",
    "type": "module"
  }, {
    "id": 3,
    "text": "init",
    "type": "module"
  }, {
    "id": 4,
    "text": "manifest",
    "type": "module"
  }, {
    "id": 5,
    "text": "package",
    "type": "module"
  }, {
    "id": 6,
    "text": "sys",
    "type": "module"
  }, {
    "id": 7,
    "text": "utils",
    "type": "module"
  }, {
    "id": 8,
    "text": "function find_packages(package_names, manifest)\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n    manifest = manifest or mf.get_manifest()\r\n    assert(type(package_names) == \"table\", \"depends.find_packages: Argument 'package_names' is not a table or string.\")\r\n    assert(type(manifest) == \"table\", \"depends.find_packages: Argument 'manifest' is not a table.\")\r\n\r\n    local packages_found = {}\r\n    -- find matching packages in manifest\r\n    for _, pkg_to_find in pairs(package_names) do\r\n        local pkg_name, pkg_constraint = split_name_constraint(pkg_to_find)\r\n        pkg_name = utils.escape_magic(pkg_name):gsub(\"%%%*\",\".*\")\r\n        for _, repo_pkg in pairs(manifest) do\r\n            if string.match(repo_pkg.name, \"^\" .. pkg_name .. \"$\") and (not pkg_constraint or satisfies_constraint(repo_pkg.version, pkg_constraint)) then\r\n                table.insert(packages_found, repo_pkg)\r\n            end\r\n        end\r\n    end\r\n    return packages_found\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function get_installed(deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_installed: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local distinfos_path = sys.make_path(deploy_dir, cfg.distinfos_dir)\r\n    local manifest = {}\r\n\r\n    if not sys.is_dir(distinfos_path) then return {} end\r\n\r\n    -- from all directories of packages installed in deploy_dir\r\n    for dir in sys.get_directory(distinfos_path) do\r\n\r\n        if dir ~= \".\" and dir ~= \"..\" and sys.is_dir(sys.make_path(distinfos_path, dir)) then\r\n            local pkg_dist_dir = sys.make_path(distinfos_path, dir)\r\n\r\n            -- load the dist.info file\r\n            for file in sys.get_directory(pkg_dist_dir) do\r\n                local pkg_dist_file = sys.make_path(pkg_dist_dir, file)\r\n\r\n                if sys.is_file(pkg_dist_file) then\r\n                    table.insert(manifest, mf.load_distinfo(pkg_dist_file))\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n    end\r\n    return manifest\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function get_depends(packages, installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n    if not packages then return {} end\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(packages) == \"string\" then packages = {packages} end\r\n\r\n    assert(type(packages) == \"table\", \"depends.get_depends: Argument 'packages' is not a table or string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_depends: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_depends: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_depends: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_depends: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_depends: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local tmp_installed = utils.deepcopy(installed)\r\n\r\n    -- print(utils.table_tostring(tmp_installed))\r\n\r\n    -- add provided packages to installed ones\r\n    for _, installed_pkg in pairs(tmp_installed) do\r\n        for _, pkg in pairs(get_provides(installed_pkg)) do\r\n            table.insert(tmp_installed, pkg)\r\n        end\r\n    end\r\n\r\n    -- print(utils.table_tostring(tmp_installed))\r\n\r\n    local to_install = {}\r\n\r\n    -- get packages needed to to satisfy dependencies\r\n    for _, pkg in pairs(packages) do\r\n\r\n        local needed_to_install, err = get_packages_to_install(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n        --print(utils.table_tostring(needed_to_install))\r\n        if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot install package '\" .. pkg .. \"': \".. err\r\n        end\r\n    end\r\n    \r\n    return to_install\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function get_provides(package)\r\n    assert(type(package) == \"table\", \"depends.get_provides: Argument 'package' is not a table.\")\r\n    if not package.provides then return {} end\r\n\r\n    local provided = {}\r\n    for _, provided_name in pairs(package.provides) do\r\n        local pkg = {}\r\n        pkg.name, pkg.version = split_name_constraint(provided_name)\r\n        pkg.type = package.type\r\n        pkg.arch = package.arch\r\n        pkg.provided = package.name .. \"-\" .. package.version\r\n        table.insert(provided, pkg)\r\n    end\r\n    return provided\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function sort_by_versions(packages)\r\n    assert(type(packages) == \"table\", \"depends.sort_by_versions: Argument 'packages' is not a table.\")\r\n    return utils.sort(packages, function (a, b) return compare_versions(a.version, b.version) end)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function sort_by_names(packages)\r\n    assert(type(packages) == \"table\", \"depends.sort_by_names: Argument 'packages' is not a table.\")\r\n    return utils.sort(packages, function (a, b)\r\n                        if a.name == b.name then\r\n                            return compare_versions(a.version, b.version)\r\n                        else\r\n                            return a.name < b.name\r\n                        end\r\n                     end)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function dependency_manifest(module, dep_manifest, dep_cache)\r\n    dep_manifest = dep_manifest or {}\r\n    dep_cache = dep_cache or {}\r\n    assert(type(module) == \"string\", \"depends.dependency_manifest: Argument 'module' is not a string.\")\r\n    assert(type(dep_cache) == \"table\", \"depends.dependency_manifest: Argument 'dep_cache' is not a table.\")\r\n    assert(type(dep_manifest) == \"table\", \"depends.dependency_manifest: Argument 'dep_manifest' is not a table.\")\r\n\r\n    local dep_manifest = utils.deepcopy(dep_manifest)\r\n    local dep_cache = utils.deepcopy(dep_cache)\r\n    local name, constraint = split_name_constraint(module)\r\n    local name_ver = name .. (constraint and \"-\" .. constraint or \"\")\r\n\r\n    -- if info about the module is in cache and cache not disabled, use it\r\n    if constraint and dep_cache[name_ver] and cfg.dep_cache then\r\n        dep_manifest[name_ver] = dep_cache[name_ver]\r\n    else\r\n        local manifest, err = mf.get_manifest()\r\n        if not manifest then return nil, \"Error when getting manifest: \" .. err end\r\n\r\n        -- find out available versions of package\r\n        local versions, err = package.retrieve_versions(name, manifest, not cfg.debug)\r\n        if not versions then return nil, err end\r\n\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        -- find the module's package\r\n        local candidates = find_packages(name_ver, manifest)\r\n        if #candidates == 0 then return nil, \"Package '\" .. name_ver .. \"' not found.\" end\r\n\r\n        candidates = sort_by_versions(candidates)\r\n        name_ver = candidates[1].name .. \"-\" .. candidates[1].version\r\n\r\n        -- if info about the module isn't in cache or cache disabled, download it\r\n        if dep_cache[name_ver] and cfg.dep_cache then\r\n             dep_manifest[name_ver] = dep_cache[name_ver]\r\n        else\r\n            -- download the dependency info\r\n            local download_dir = sys.abs_path(sys.make_path(cfg.root_dir, cfg.temp_dir))\r\n            local downloaded_path, err = package.fetch_pkgs({candidates[1]}, download_dir, not cfg.debug)\r\n            if not downloaded_path then return nil, err end\r\n\r\n            local distinfo = sys.make_path(downloaded_path[1], \"dist.info\")\r\n            local dist_info, err = mf.load_distinfo(distinfo)\r\n            if not dist_info then return nil, \"Error when loading dist.info file '\" .. distinfo .. \"': \" .. err end\r\n\r\n            -- add information about this package to the cache\r\n            if not dep_manifest[name_ver] then dep_manifest[name_ver] = {} end\r\n            dep_manifest[name_ver].name = dist_info.name\r\n            dep_manifest[name_ver].version = dist_info.version\r\n            dep_manifest[name_ver].path = candidates[1].path\r\n            dep_manifest[name_ver].depends = dist_info.depends\r\n\r\n            -- add also to cache\r\n            dep_cache[name_ver] = dep_manifest[name_ver]\r\n        end\r\n    end\r\n\r\n    -- resolve dependencies\r\n    if dep_manifest[name_ver].depends then\r\n\r\n        if not dep_manifest[name_ver].satisfied_by then\r\n            dep_manifest[name_ver].satisfied_by = {}\r\n        end\r\n\r\n        -- collect all OS specific dependencies of pkg\r\n        for k, dep in pairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) == \"table\" then\r\n                if k == cfg.arch then\r\n                    for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- get dependency information of this module's dependencies\r\n        for _, dep in ipairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) ~= \"table\" then\r\n                local satisfying = dep_manifest[name_ver].satisfied_by[dep]\r\n                if satisfying then dep = satisfying end\r\n\r\n                dep_manifest, dep_cache_or_err, satisfying = dependency_manifest(dep, dep_manifest, dep_cache)\r\n                if not dep_manifest then return nil, dep_cache_or_err end\r\n                dep_cache = dep_cache_or_err\r\n\r\n                -- add 'satisfied-by' info\r\n                dep_manifest[name_ver].satisfied_by[dep] = satisfying\r\n                dep_cache[name_ver].satisfied_by[dep] = satisfying\r\n            end\r\n        end\r\n    end\r\n\r\n    return dep_manifest, dep_cache, name_ver\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function get_depends_1(packages, installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n    if not packages then return {} end\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(packages) == \"string\" then packages = {packages} end\r\n\r\n    assert(type(packages) == \"table\", \"depends.get_depends: Argument 'packages' is not a table or string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_depends: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_depends: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_depends: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_depends: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_depends: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local tmp_installed = utils.deepcopy(installed)\r\n\r\n\r\n    -- add provided packages to installed ones\r\n    for _, installed_pkg in pairs(tmp_installed) do\r\n        for _, pkg in pairs(get_provides(installed_pkg)) do\r\n            table.insert(tmp_installed, pkg)\r\n        end\r\n    end\r\n\r\n    local to_install = {}\r\n\r\n    -- get packages needed to to satisfy dependencies\r\n    for _, pkg in pairs(packages) do\r\n\r\n        local needed_to_install, err = get_packages_to_install_1(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n        if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot update package '\" .. pkg .. \"': \".. err\r\n        end\r\n    end\r\n    \r\n    return to_install\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function init(dir)\r\n    dir = dir or sys.current_dir()\r\n    assert(type(dir) == \"string\", \"git.init: Argument 'dir' is not a string.\")\r\n    dir = sys.abs_path(dir)\r\n\r\n    -- create the 'dir' first, since it causes 'git init' to fail on Windows\r\n    -- when the parent directory of 'dir' doesn't exist\r\n    local ok, err = sys.make_dir(dir)\r\n    if not ok then return nil, err end\r\n\r\n    local command = \"git init \" .. sys.quote(dir)\r\n    if not cfg.debug then command = command .. \" -q \" end\r\n    return sys.exec(command)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function add_all(repo_dir)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    assert(type(repo_dir) == \"string\", \"git.add_all: Argument 'repo_dir' is not a string.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    ok, msg = sys.exec(\"git add -A -f \" .. sys.quote(repo_dir))\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function commit(message, repo_dir)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    message = message or \"commit by luadist-git\"\r\n    assert(type(message) == \"string\", \"git.commit: Argument 'message' is not a string.\")\r\n    assert(type(repo_dir) == \"string\", \"git.commit: Argument 'repo_dir' is not a string.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    local command = \"git commit -m \" .. sys.quote(message)\r\n    if not cfg.debug then command = command .. \" -q \" end\r\n    ok, msg = sys.exec(command)\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function rename_branch(old_name, new_name, repo_dir)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    assert(type(old_name) == \"string\", \"git.rename_branch: Argument 'old_name' is not a string.\")\r\n    assert(type(new_name) == \"string\", \"git.rename_branch: Argument 'new_name' is not a string.\")\r\n    assert(type(repo_dir) == \"string\", \"git.rename_branch: Argument 'repo_dir' is not a string.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    ok, msg = sys.exec(\"git branch -m \" .. old_name .. \" \" .. new_name)\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function push_ref(repo_dir, ref_name, git_repo_url, all_tags, delete)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    all_tags = all_tags or false\r\n    delete = delete or false\r\n    assert(type(repo_dir) == \"string\", \"git.push_ref: Argument 'repo_dir' is not a string.\")\r\n    assert(type(git_repo_url) == \"string\", \"git.push_ref: Argument 'git_repo_url' is not a string.\")\r\n    assert(type(ref_name) == \"string\", \"git.push_ref: Argument 'ref_name' is not a string.\")\r\n    assert(type(all_tags) == \"boolean\", \"git.push_ref: Argument 'all_tags' is not a boolean.\")\r\n    assert(type(delete) == \"boolean\", \"git.push_ref: Argument 'delete' is not a boolean.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    local command = \"git push \" .. git_repo_url\r\n    if all_tags then command = command .. \" --tags \" end\r\n    if delete then command = command .. \" --delete \" end\r\n    command = command .. \" \" .. ref_name .. \" -f \"\r\n    if not cfg.debug then command = command .. \" -q \" end\r\n\r\n    ok, msg = sys.exec(command)\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function create_tag(repo_dir, tag_name)\r\n    repo_dir = repo_dir or sys.current_dir()\r\n    assert(type(repo_dir) == \"string\", \"git.create_tag: Argument 'repo_dir' is not a string.\")\r\n    assert(type(tag_name) == \"string\", \"git.create_tag: Argument 'tag_name' is not a string.\")\r\n    repo_dir = sys.abs_path(repo_dir)\r\n\r\n    local ok, prev_dir, msg\r\n    ok, prev_dir = sys.change_dir(repo_dir);\r\n    if not ok then return nil, err end\r\n\r\n    ok, msg = sys.exec(\"git tag \" .. tag_name .. \" -f \")\r\n    sys.change_dir(prev_dir)\r\n\r\n    return ok, msg\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function get_deploy_dir()\r\n    return sys.abs_path(cfg.root_dir)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function get_deployed(deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(deploy_dir) == \"string\", \"dist.get_deployed: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local deployed = depends.get_installed(deploy_dir)\r\n    local provided = {}\r\n\r\n    for _, pkg in pairs(deployed) do\r\n        for _, provided_pkg in pairs(depends.get_provides(pkg)) do\r\n            provided_pkg.provided_by = pkg.name .. \"-\" .. pkg.version\r\n            table.insert(provided, provided_pkg)\r\n        end\r\n    end\r\n\r\n    for _, provided_pkg in pairs(provided) do\r\n        table.insert(deployed, provided_pkg)\r\n    end\r\n\r\n    deployed = depends.sort_by_names(deployed)\r\n    return deployed\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "deploy_dir = deploy_dir or cfg.root_dir",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "assert(type(deploy_dir) == \"string\", \"dist.get_deployed: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "deploy_dir = sys.abs_path(deploy_dir)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local deployed = depends.get_installed(deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local provided = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for _, pkg in pairs(deployed) do\r\n        for _, provided_pkg in pairs(depends.get_provides(pkg)) do\r\n            provided_pkg.provided_by = pkg.name .. \"-\" .. pkg.version\r\n            table.insert(provided, provided_pkg)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "for _, provided_pkg in pairs(depends.get_provides(pkg)) do\r\n            provided_pkg.provided_by = pkg.name .. \"-\" .. pkg.version\r\n            table.insert(provided, provided_pkg)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "provided_pkg.provided_by = pkg.name .. \"-\" .. pkg.version",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "table.insert(provided, provided_pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "for _, provided_pkg in pairs(provided) do\r\n        table.insert(deployed, provided_pkg)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "table.insert(deployed, provided_pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "deployed = depends.sort_by_names(deployed)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function update_manifest(deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(deploy_dir) == \"string\", \"dist.update_manifest: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- TODO: use 'deploy_dir' argument in manifest functions\r\n\r\n    -- retrieve the new manifest (forcing no cache use)\r\n    local manifest, err = mf.get_manifest(nil, true)\r\n\r\n    if manifest then\r\n        return manifest\r\n    else\r\n        return nil, err\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "assert(type(deploy_dir) == \"string\", \"dist.update_manifest: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local manifest, err = mf.get_manifest(nil, true)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if manifest then\r\n        return manifest\r\n    else\r\n        return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function install(package_names, deploy_dir, variables)\r\n    if not package_names then return true end\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.install: Argument 'package_names' is not a table or string.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.install: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find installed packages\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- get manifest\r\n    local manifest, err = mf.get_manifest()\r\n    if not manifest then return nil, \"Error getting manifest: \" .. err, 101 end\r\n\r\n    -- resolve dependencies\r\n    local dependencies, err = depends.get_depends(package_names, installed, manifest, false, false, deploy_dir)\r\n    if err then return nil, err, 102 end\r\n    if #dependencies == 0 then return nil, \"No packages to install.\", 102 end\r\n\r\n    -- fetch the packages from repository\r\n    local dirs, err = package.fetch_pkgs(dependencies, sys.make_path(deploy_dir, cfg.temp_dir))\r\n    if not dirs then return nil, err end\r\n\r\n    -- install fetched packages\r\n    for _, dir in pairs(dirs) do\r\n        ok, err = package.install_pkg(dir, deploy_dir, variables, false)\r\n        if not ok then return nil, err, 103 end\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "if not package_names then return true end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "if type(package_names) == \"string\" then package_names = {package_names} end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "package_names = {package_names}",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "assert(type(package_names) == \"table\", \"dist.install: Argument 'package_names' is not a table or string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert(type(deploy_dir) == \"string\", \"dist.install: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "local installed = depends.get_installed(deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local manifest, err = mf.get_manifest()",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if not manifest then return nil, \"Error getting manifest: \" .. err, 101 end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local dependencies, err = depends.get_depends(package_names, installed, manifest, false, false, deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if err then return nil, err, 102 end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if #dependencies == 0 then return nil, \"No packages to install.\", 102 end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local dirs, err = package.fetch_pkgs(dependencies, sys.make_path(deploy_dir, cfg.temp_dir))",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if not dirs then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "for _, dir in pairs(dirs) do\r\n        ok, err = package.install_pkg(dir, deploy_dir, variables, false)\r\n        if not ok then return nil, err, 103 end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 59,
    "text": "ok, err = package.install_pkg(dir, deploy_dir, variables, false)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if not ok then return nil, err, 103 end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function update(package_names, deploy_dir, variables)\r\n    if not package_names then return true end\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n\r\n     if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.install: Argument 'package_names' is not a table or string.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.install: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find installed packages\r\n\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- get manifest\r\n    local manifest, err = mf.get_manifest()\r\n    if not manifest then return nil, \"Error getting manifest: \" .. err end\r\n\r\n    -- resolve dependencies\r\n    local dependencies, err = depends.get_depends_1(package_names, installed, manifest, false, false, deploy_dir)\r\n    if err then return nil, err end\r\n    if #dependencies == 0 then return nil, \"No packages to update.\"\r\n    else\r\n        pkgs_to_remove = depends.find_packages(package_names, installed)\r\n        -- delete installed packages\r\n        for _, pkg in pairs(pkgs_to_remove) do\r\n            local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n            local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n    end\r\n\r\n    -- fetch the packages from repository\r\n    local dirs, err = package.fetch_pkgs(dependencies, sys.make_path(deploy_dir, cfg.temp_dir))\r\n    if not dirs then return nil, err end\r\n\r\n    -- install fetched packages\r\n    for _, dir in pairs(dirs) do\r\n        ok, err, status = package.install_pkg(dir, deploy_dir, variables, false)\r\n        if not ok then return nil, err, status end\r\n    end\r\n\r\n    return true\r\n\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "if not manifest then return nil, \"Error getting manifest: \" .. err end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local dependencies, err = depends.get_depends_1(package_names, installed, manifest, false, false, deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "if #dependencies == 0 then return nil, \"No packages to update.\"\r\n    else\r\n        pkgs_to_remove = depends.find_packages(package_names, installed)\r\n        -- delete installed packages\r\n        for _, pkg in pairs(pkgs_to_remove) do\r\n            local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n            local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "pkgs_to_remove = depends.find_packages(package_names, installed)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "for _, pkg in pairs(pkgs_to_remove) do\r\n            local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n            local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n            if not ok then return nil, err end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 69,
    "text": "local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "for _, dir in pairs(dirs) do\r\n        ok, err, status = package.install_pkg(dir, deploy_dir, variables, false)\r\n        if not ok then return nil, err, status end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "ok, err, status = package.install_pkg(dir, deploy_dir, variables, false)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if not ok then return nil, err, status end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function make(deploy_dir, package_paths, variables)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    package_paths = package_paths or {}\r\n\r\n    assert(type(deploy_dir) == \"string\", \"dist.make: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(package_paths) == \"table\", \"dist.make: Argument 'package_paths' is not a table.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local ok, err\r\n    for _, path in pairs(package_paths) do\r\n        ok, err = package.install_pkg(sys.abs_path(path), deploy_dir, variables, true)\r\n        if not ok then return nil, err end\r\n    end\r\n    return ok\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "package_paths = package_paths or {}",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "assert(type(deploy_dir) == \"string\", \"dist.make: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert(type(package_paths) == \"table\", \"dist.make: Argument 'package_paths' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "for _, path in pairs(package_paths) do\r\n        ok, err = package.install_pkg(sys.abs_path(path), deploy_dir, variables, true)\r\n        if not ok then return nil, err end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "ok, err = package.install_pkg(sys.abs_path(path), deploy_dir, variables, true)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function remove(package_names, deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.remove: Argument 'package_names' is not a string or table.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.remove: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local pkgs_to_remove = {}\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- find packages to remove\r\n    if #package_names == 0 then\r\n        pkgs_to_remove = installed\r\n    else\r\n        pkgs_to_remove = depends.find_packages(package_names, installed)\r\n    end\r\n\r\n    if #package_names == 0 then\r\n        print(\"Are you sure that you want to remove ALL modules (y/n)?\")\r\n    else\r\n        print(\"Are you sure that you want to remove these modules (y/n)?\")\r\n    end\r\n\r\n    for i, pkg_name in pairs(package_names) do\r\n            io.write(pkg_name)\r\n            if i == #pkg_name then\r\n                io.write(', ')\r\n            end\r\n    end\r\n    print()\r\n    repeat\r\n        --io.write(\"continue with this operation (y/n)? \")\r\n        io.flush()\r\n        answer=io.read()\r\n    until answer==\"y\" or answer==\"n\"\r\n\r\n    if answer == \"n\" then\r\n        return 0\r\n    end\r\n\r\n    -- remove them\r\n    for _, pkg in pairs(pkgs_to_remove) do\r\n        local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n        local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n        if not ok then return nil, err end\r\n    end\r\n\r\n    return #pkgs_to_remove\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "assert(type(package_names) == \"table\", \"dist.remove: Argument 'package_names' is not a string or table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "assert(type(deploy_dir) == \"string\", \"dist.remove: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "local pkgs_to_remove = {}",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if #package_names == 0 then\r\n        pkgs_to_remove = installed\r\n    else\r\n        pkgs_to_remove = depends.find_packages(package_names, installed)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "pkgs_to_remove = installed",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "if #package_names == 0 then\r\n        print(\"Are you sure that you want to remove ALL modules (y/n)?\")\r\n    else\r\n        print(\"Are you sure that you want to remove these modules (y/n)?\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "print(\"Are you sure that you want to remove ALL modules (y/n)?\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "print(\"Are you sure that you want to remove these modules (y/n)?\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "for i, pkg_name in pairs(package_names) do\r\n            io.write(pkg_name)\r\n            if i == #pkg_name then\r\n                io.write(', ')\r\n            end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "io.write(pkg_name)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "if i == #pkg_name then\r\n                io.write(', ')\r\n            end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "io.write(', ')",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "repeat\r\n        --io.write(\"continue with this operation (y/n)? \")\r\n        io.flush()\r\n        answer=io.read()\r\n    until answer==\"y\" or answer==\"n\"",
    "type": "statement:repeat"
  }, {
    "id": 99,
    "text": "io.flush()",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "answer=io.read()",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "if answer == \"n\" then\r\n        return 0\r\n    end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "for _, pkg in pairs(pkgs_to_remove) do\r\n        local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n        local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n        if not ok then return nil, err end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function fetch(pkg_names, fetch_dir)\r\n    fetch_dir = fetch_dir or sys.current_dir()\r\n    assert(type(pkg_names) == \"table\", \"dist.fetch: Argument 'pkg_names' is not a string or table.\")\r\n    assert(type(fetch_dir) == \"string\", \"dist.fetch: Argument 'fetch_dir' is not a string.\")\r\n    fetch_dir = sys.abs_path(fetch_dir)\r\n\r\n    local manifest = mf.get_manifest()\r\n\r\n    local pkgs_to_fetch = {}\r\n\r\n    for _, pkg_name in pairs(pkg_names) do\r\n\r\n        -- retrieve available versions\r\n        local versions, err = package.retrieve_versions(pkg_name, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        local packages = depends.find_packages(pkg_name, manifest)\r\n        if #packages == 0 then return nil, \"No packages found for '\" .. pkg_name .. \"'.\" end\r\n\r\n        packages = depends.sort_by_versions(packages)\r\n        table.insert(pkgs_to_fetch, packages[1])\r\n    end\r\n\r\n    local ok, err = package.fetch_pkgs(pkgs_to_fetch, fetch_dir)\r\n\r\n    if not ok then\r\n        return nil, err\r\n    else\r\n        return ok\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "fetch_dir = fetch_dir or sys.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "assert(type(pkg_names) == \"table\", \"dist.fetch: Argument 'pkg_names' is not a string or table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert(type(fetch_dir) == \"string\", \"dist.fetch: Argument 'fetch_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "fetch_dir = sys.abs_path(fetch_dir)",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "local manifest = mf.get_manifest()",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local pkgs_to_fetch = {}",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "for _, pkg_name in pairs(pkg_names) do\r\n\r\n        -- retrieve available versions\r\n        local versions, err = package.retrieve_versions(pkg_name, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        local packages = depends.find_packages(pkg_name, manifest)\r\n        if #packages == 0 then return nil, \"No packages found for '\" .. pkg_name .. \"'.\" end\r\n\r\n        packages = depends.sort_by_versions(packages)\r\n        table.insert(pkgs_to_fetch, packages[1])\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 112,
    "text": "local versions, err = package.retrieve_versions(pkg_name, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if not versions then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 115,
    "text": "table.insert(manifest, version)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "local packages = depends.find_packages(pkg_name, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if #packages == 0 then return nil, \"No packages found for '\" .. pkg_name .. \"'.\" end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "packages = depends.sort_by_versions(packages)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "table.insert(pkgs_to_fetch, packages[1])",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "local ok, err = package.fetch_pkgs(pkgs_to_fetch, fetch_dir)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "if not ok then\r\n        return nil, err\r\n    else\r\n        return ok\r\n    end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function upload_modules(deploy_dir, module_names, dest_git_base_url)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(module_names) == \"string\" then module_names = {module_names} end\r\n    assert(type(deploy_dir) == \"string\", \"dist.upload_module: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(module_names) == \"table\", \"dist.upload_module: Argument 'module_name' is not a string or table.\")\r\n    assert(type(dest_git_base_url) == \"string\", \"dist.upload_module: Argument 'dest_git_base_url' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local modules_to_upload = {}\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- find modules to upload\r\n    if #module_names == 0 then\r\n        modules_to_upload = installed\r\n    else\r\n        modules_to_upload = depends.find_packages(module_names, installed)\r\n    end\r\n\r\n    for _, installed_module in pairs(modules_to_upload) do\r\n\r\n        -- set names\r\n        local branch_name = cfg.arch .. \"-\" .. cfg.type\r\n        local tag_name = installed_module.version .. \"-\" .. branch_name\r\n        local full_name = installed_module.name .. \"-\" .. tag_name\r\n        local tmp_dir = sys.make_path(deploy_dir, cfg.temp_dir, full_name .. \"-to-upload\")\r\n        local dest_git_url = dest_git_base_url .. \"/\" .. installed_module.name .. \".git\"\r\n        local distinfo_file = sys.make_path(deploy_dir, cfg.distinfos_dir, installed_module.name .. \"-\" .. installed_module.version, \"dist.info\")\r\n\r\n        -- create temporary directory (delete previous if already exists)\r\n        if sys.exists(tmp_dir) then sys.delete(tmp_dir) end\r\n        local ok, err = sys.make_dir(tmp_dir)\r\n        if not ok then return nil, err end\r\n\r\n        -- copy the module files for all enabled components\r\n        for _, component in ipairs(cfg.components) do\r\n            if installed_module.files[component] then\r\n                for _, file in ipairs(installed_module.files[component]) do\r\n                    local file_path = sys.make_path(deploy_dir, file)\r\n                    local dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file))\r\n                    if sys.is_file(file_path) then\r\n                        sys.make_dir(dest_dir)\r\n                        sys.copy(file_path, dest_dir)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- add module's dist.info file\r\n        sys.copy(distinfo_file, tmp_dir)\r\n\r\n        -- create git repo\r\n        ok, err = git.init(tmp_dir)\r\n        if not ok then return nil, \"Error initializing empty git repository in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- add all files\r\n        ok, err = git.add_all(tmp_dir)\r\n        if not ok then return nil, \"Error adding all files to the git index in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- create commit\r\n        ok, err = git.commit(\"[luadist-git] add \" .. full_name .. \" [ci skip]\", tmp_dir)\r\n        if not ok then return nil, \"Error commiting changes in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- rename branch\r\n        ok, err = git.rename_branch(\"master\", branch_name, tmp_dir)\r\n        if not ok then return nil, \"Error renaming branch 'master' to '\" .. branch_name .. \"' in '\" .. tmp_dir .. \"': \" .. err  end\r\n\r\n        -- create tag\r\n        ok, err = git.create_tag(tmp_dir, tag_name)\r\n        if not ok then return nil, \"Error creating tag '\" .. tag_name .. \"' in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        print(\"Uploading \" .. full_name .. \" to \" .. dest_git_url .. \"...\")\r\n\r\n        -- push to the repository\r\n        ok, err = git.push_ref(tmp_dir, branch_name, dest_git_url, true)\r\n        if not ok then return nil, \"Error when pushing branch '\" .. branch_name .. \"' and tag '\" .. tag_name .. \"' to '\" .. dest_git_url .. \"': \" .. err end\r\n\r\n        -- delete temporary directory (if not in debug mode)\r\n        if not cfg.debug then sys.delete(tmp_dir) end\r\n    end\r\n\r\n    return #modules_to_upload\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "if type(module_names) == \"string\" then module_names = {module_names} end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "module_names = {module_names}",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "assert(type(deploy_dir) == \"string\", \"dist.upload_module: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "assert(type(module_names) == \"table\", \"dist.upload_module: Argument 'module_name' is not a string or table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "assert(type(dest_git_base_url) == \"string\", \"dist.upload_module: Argument 'dest_git_base_url' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "local modules_to_upload = {}",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "if #module_names == 0 then\r\n        modules_to_upload = installed\r\n    else\r\n        modules_to_upload = depends.find_packages(module_names, installed)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "modules_to_upload = installed",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "modules_to_upload = depends.find_packages(module_names, installed)",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "for _, installed_module in pairs(modules_to_upload) do\r\n\r\n        -- set names\r\n        local branch_name = cfg.arch .. \"-\" .. cfg.type\r\n        local tag_name = installed_module.version .. \"-\" .. branch_name\r\n        local full_name = installed_module.name .. \"-\" .. tag_name\r\n        local tmp_dir = sys.make_path(deploy_dir, cfg.temp_dir, full_name .. \"-to-upload\")\r\n        local dest_git_url = dest_git_base_url .. \"/\" .. installed_module.name .. \".git\"\r\n        local distinfo_file = sys.make_path(deploy_dir, cfg.distinfos_dir, installed_module.name .. \"-\" .. installed_module.version, \"dist.info\")\r\n\r\n        -- create temporary directory (delete previous if already exists)\r\n        if sys.exists(tmp_dir) then sys.delete(tmp_dir) end\r\n        local ok, err = sys.make_dir(tmp_dir)\r\n        if not ok then return nil, err end\r\n\r\n        -- copy the module files for all enabled components\r\n        for _, component in ipairs(cfg.components) do\r\n            if installed_module.files[component] then\r\n                for _, file in ipairs(installed_module.files[component]) do\r\n                    local file_path = sys.make_path(deploy_dir, file)\r\n                    local dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file))\r\n                    if sys.is_file(file_path) then\r\n                        sys.make_dir(dest_dir)\r\n                        sys.copy(file_path, dest_dir)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- add module's dist.info file\r\n        sys.copy(distinfo_file, tmp_dir)\r\n\r\n        -- create git repo\r\n        ok, err = git.init(tmp_dir)\r\n        if not ok then return nil, \"Error initializing empty git repository in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- add all files\r\n        ok, err = git.add_all(tmp_dir)\r\n        if not ok then return nil, \"Error adding all files to the git index in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- create commit\r\n        ok, err = git.commit(\"[luadist-git] add \" .. full_name .. \" [ci skip]\", tmp_dir)\r\n        if not ok then return nil, \"Error commiting changes in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- rename branch\r\n        ok, err = git.rename_branch(\"master\", branch_name, tmp_dir)\r\n        if not ok then return nil, \"Error renaming branch 'master' to '\" .. branch_name .. \"' in '\" .. tmp_dir .. \"': \" .. err  end\r\n\r\n        -- create tag\r\n        ok, err = git.create_tag(tmp_dir, tag_name)\r\n        if not ok then return nil, \"Error creating tag '\" .. tag_name .. \"' in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        print(\"Uploading \" .. full_name .. \" to \" .. dest_git_url .. \"...\")\r\n\r\n        -- push to the repository\r\n        ok, err = git.push_ref(tmp_dir, branch_name, dest_git_url, true)\r\n        if not ok then return nil, \"Error when pushing branch '\" .. branch_name .. \"' and tag '\" .. tag_name .. \"' to '\" .. dest_git_url .. \"': \" .. err end\r\n\r\n        -- delete temporary directory (if not in debug mode)\r\n        if not cfg.debug then sys.delete(tmp_dir) end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "local branch_name = cfg.arch .. \"-\" .. cfg.type",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local tag_name = installed_module.version .. \"-\" .. branch_name",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "local full_name = installed_module.name .. \"-\" .. tag_name",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local tmp_dir = sys.make_path(deploy_dir, cfg.temp_dir, full_name .. \"-to-upload\")",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "local dest_git_url = dest_git_base_url .. \"/\" .. installed_module.name .. \".git\"",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "local distinfo_file = sys.make_path(deploy_dir, cfg.distinfos_dir, installed_module.name .. \"-\" .. installed_module.version, \"dist.info\")",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if sys.exists(tmp_dir) then sys.delete(tmp_dir) end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "sys.delete(tmp_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "local ok, err = sys.make_dir(tmp_dir)",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "for _, component in ipairs(cfg.components) do\r\n            if installed_module.files[component] then\r\n                for _, file in ipairs(installed_module.files[component]) do\r\n                    local file_path = sys.make_path(deploy_dir, file)\r\n                    local dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file))\r\n                    if sys.is_file(file_path) then\r\n                        sys.make_dir(dest_dir)\r\n                        sys.copy(file_path, dest_dir)\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 144,
    "text": "if installed_module.files[component] then\r\n                for _, file in ipairs(installed_module.files[component]) do\r\n                    local file_path = sys.make_path(deploy_dir, file)\r\n                    local dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file))\r\n                    if sys.is_file(file_path) then\r\n                        sys.make_dir(dest_dir)\r\n                        sys.copy(file_path, dest_dir)\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "for _, file in ipairs(installed_module.files[component]) do\r\n                    local file_path = sys.make_path(deploy_dir, file)\r\n                    local dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file))\r\n                    if sys.is_file(file_path) then\r\n                        sys.make_dir(dest_dir)\r\n                        sys.copy(file_path, dest_dir)\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 146,
    "text": "local file_path = sys.make_path(deploy_dir, file)",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "local dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file))",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if sys.is_file(file_path) then\r\n                        sys.make_dir(dest_dir)\r\n                        sys.copy(file_path, dest_dir)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "sys.make_dir(dest_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "sys.copy(file_path, dest_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "sys.copy(distinfo_file, tmp_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "ok, err = git.init(tmp_dir)",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "if not ok then return nil, \"Error initializing empty git repository in '\" .. tmp_dir .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "ok, err = git.add_all(tmp_dir)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "if not ok then return nil, \"Error adding all files to the git index in '\" .. tmp_dir .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "ok, err = git.commit(\"[luadist-git] add \" .. full_name .. \" [ci skip]\", tmp_dir)",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "if not ok then return nil, \"Error commiting changes in '\" .. tmp_dir .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "ok, err = git.rename_branch(\"master\", branch_name, tmp_dir)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "if not ok then return nil, \"Error renaming branch 'master' to '\" .. branch_name .. \"' in '\" .. tmp_dir .. \"': \" .. err  end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "ok, err = git.create_tag(tmp_dir, tag_name)",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "if not ok then return nil, \"Error creating tag '\" .. tag_name .. \"' in '\" .. tmp_dir .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "print(\"Uploading \" .. full_name .. \" to \" .. dest_git_url .. \"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "ok, err = git.push_ref(tmp_dir, branch_name, dest_git_url, true)",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "if not ok then return nil, \"Error when pushing branch '\" .. branch_name .. \"' and tag '\" .. tag_name .. \"' to '\" .. dest_git_url .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "if not cfg.debug then sys.delete(tmp_dir) end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function dependency_info(module, cache_file)\r\n    cache_file = cache_file or sys.abs_path(sys.make_path(cfg.root_dir, cfg.dep_cache_file))\r\n    assert(type(module) == \"string\", \"dist.dep_info: Argument 'module' is not a string.\")\r\n    assert(type(cache_file) == \"string\", \"dist.dep_info: Argument 'cache_file' is not a string.\")\r\n\r\n    local dep_cache, err = {}\r\n    if sys.exists(cache_file) then\r\n        -- TODO: use current 'deploy_dir' for cache file, or 'root_dir'?\r\n        dep_cache, err = mf.load_manifest(cache_file)\r\n        if not dep_cache then return nil, err end\r\n    end\r\n\r\n    -- get dependency information and updated cache\r\n    local dep_manifest = {}\r\n    dep_manifest, dep_cache_or_err = depends.dependency_manifest(module, dep_manifest, dep_cache)\r\n    if not dep_manifest then return nil, dep_cache_or_err end\r\n    dep_cache = dep_cache_or_err\r\n\r\n    -- save updated cache\r\n    local ok, err = mf.save_manifest(dep_cache, cache_file)\r\n    if not ok then return nil, err end\r\n\r\n    return dep_manifest\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "cache_file = cache_file or sys.abs_path(sys.make_path(cfg.root_dir, cfg.dep_cache_file))",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "assert(type(module) == \"string\", \"dist.dep_info: Argument 'module' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "assert(type(cache_file) == \"string\", \"dist.dep_info: Argument 'cache_file' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "local dep_cache, err = {}",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "if sys.exists(cache_file) then\r\n        -- TODO: use current 'deploy_dir' for cache file, or 'root_dir'?\r\n        dep_cache, err = mf.load_manifest(cache_file)\r\n        if not dep_cache then return nil, err end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "dep_cache, err = mf.load_manifest(cache_file)",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "if not dep_cache then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "local dep_manifest = {}",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "dep_manifest, dep_cache_or_err = depends.dependency_manifest(module, dep_manifest, dep_cache)",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "if not dep_manifest then return nil, dep_cache_or_err end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "dep_cache = dep_cache_or_err",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "local ok, err = mf.save_manifest(dep_cache, cache_file)",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "",
    "type": "function container"
  }, {
    "id": 182,
    "text": "function get_manifest(manifest_file, force_no_cache)\r\n    manifest_file = manifest_file or sys.make_path(cfg.root_dir, cfg.manifest_file)\r\n    force_no_cache = force_no_cache or false\r\n\r\n    assert(type(manifest_file) == \"string\", \"manifest.get_manifest: Argument 'manifest_file' is not a string.\")\r\n    assert(type(force_no_cache) == \"boolean\", \"manifest.get_manifest: Argument 'force_no_cache' is not a boolean.\")\r\n    manifest_file = sys.abs_path(manifest_file)\r\n\r\n    -- download new manifest to the cache if not present or cache not used or cache expired\r\n    if not sys.exists(manifest_file) or force_no_cache or not cfg.cache or utils.cache_timeout_expired(cfg.cache_timeout, manifest_file) then\r\n        local manifest_dest = sys.parent_dir(manifest_file) or sys.current_dir()\r\n        local ok, err = download_manifest(manifest_dest, cfg.repos)\r\n        if not ok then return nil, \"Error when downloading manifest: \" .. err end\r\n    end\r\n\r\n    -- load manifest from cache\r\n    local status, ret = load_manifest(manifest_file)\r\n    if not status then return nil, \"Error when loading manifest: \" .. ret end\r\n\r\n    return ret\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "function load_manifest(manifest_file)\r\n    manifest_file = manifest_file or sys.make_path(cfg.root_dir, cfg.manifest_file)\r\n\r\n    return secure_loadfile(sys.abs_path(manifest_file))\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "function save_manifest(manifest_table, file)\r\n    assert(type(manifest_table) == \"table\", \"manifest.save_distinfo: Argument 'manifest_table' is not a table.\")\r\n    assert(type(file) == \"string\", \"manifest.save_distinfo: Argument 'file' is not a string.\")\r\n    file = sys.abs_path(file)\r\n\r\n    -- Print table 'tbl' to io stream 'file'.\r\n    local function print_table(file, tbl, in_nested_table)\r\n        for k, v in pairs(tbl) do\r\n            -- print key\r\n            if in_nested_table then file:write(\"\\t\\t\") end\r\n            if type(k) ~= \"number\" then\r\n                file:write(\"['\" .. k .. \"']\" .. \" = \")\r\n            end\r\n            -- print value\r\n            if type(v) == \"table\" then\r\n                file:write(\"{\\n\")\r\n                print_table(file, v, true)\r\n                if in_nested_table then file:write(\"\\t\") end\r\n                file:write(\"\\t}\")\r\n            else\r\n                if in_nested_table then file:write(\"\\t\") end\r\n                if type(v) == \"string\" then\r\n                    file:write('[[' .. v .. ']]')\r\n                else\r\n                    file:write(tostring(v))\r\n                end\r\n            end\r\n            file:write(\",\\n\")\r\n        end\r\n    end\r\n\r\n    local manifest_file = io.open(file, \"w\")\r\n    if not manifest_file then return nil, \"Error when saving manifest: cannot open the file '\" .. file .. \"'.\" end\r\n\r\n    manifest_file:write('return {\\n')\r\n    print_table(manifest_file, manifest_table)\r\n    manifest_file:write('},\\ntrue')\r\n    manifest_file:close()\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 185,
    "text": "function remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(pkg_distinfo_dir) == \"string\", \"package.remove_pkg: Argument 'pkg_distinfo_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.remove_pkg: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local abs_pkg_distinfo_dir = sys.make_path(deploy_dir, pkg_distinfo_dir)\r\n\r\n    -- check for 'dist.info'\r\n    local info, err = mf.load_distinfo(sys.make_path(abs_pkg_distinfo_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error removing package from '\" .. pkg_distinfo_dir .. \"' - it doesn't contain valid 'dist.info' file.\" end\r\n    if not info.files then return nil, \"File '\" .. sys.make_path(pkg_distinfo_dir, \"dist.info\") ..\"' doesn't contain list of installed files.\" end\r\n\r\n    -- remove files installed as components of this package\r\n    for _, component in ipairs(cfg.components) do\r\n        if info.files[component] then\r\n            for i = #info.files[component], 1, -1 do\r\n                local f = info.files[component][i]\r\n                f = sys.make_path(deploy_dir,f)\r\n                if sys.is_file(f) then\r\n                    sys.delete(f)\r\n                elseif sys.is_dir(f) then\r\n                    local dir_files, err = sys.get_file_list(f)\r\n                    if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                    if #dir_files == 0 then sys.delete(f) end\r\n                end\r\n                -- delete also all parent directories if empty\r\n                local parents = sys.parents_up_to(f, deploy_dir)\r\n                for _, parent in ipairs(parents) do\r\n                    if sys.is_dir(parent) then\r\n                        local dir_files, err = sys.get_file_list(parent)\r\n                        if not dir_files then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"': \" .. err end\r\n                        if #dir_files == 0 then\r\n                            sys.delete(parent)\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    -- remove removed components also from 'dist.info'\r\n    for _, component in ipairs(cfg.components) do\r\n        info.files[component] = nil\r\n    end\r\n\r\n    -- delete the package information from deploy_dir\r\n    local ok = sys.delete(abs_pkg_distinfo_dir)\r\n    if not ok then return nil, \"Error removing package in '\" .. abs_pkg_distinfo_dir .. \"'.\" end\r\n\r\n    -- if the package was not completely removed (e.g. some components remain),\r\n    -- save the new version of its 'dist.info'\r\n    local comp_num = 0\r\n    for _, _ in pairs(info.files) do comp_num  = comp_num + 1 end\r\n    if comp_num ~= 0 then\r\n        sys.make_dir(abs_pkg_distinfo_dir)\r\n        local ok, err = mf.save_distinfo(info, sys.make_path(abs_pkg_distinfo_dir, \"dist.info\"))\r\n        if not ok then return nil, \"Error resaving the 'dist.info': \" .. err end\r\n    end\r\n\r\n    return ok\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "function install_pkg(pkg_dir, deploy_dir, variables, preserve_pkg_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    variables = variables or {}\r\n    preserve_pkg_dir = preserve_pkg_dir or false\r\n\r\n    assert(type(pkg_dir) == \"string\", \"package.install_pkg: Argument 'pkg_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.install_pkg: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(variables) == \"table\", \"package.install_pkg: Argument 'variables' is not a table.\")\r\n    assert(type(preserve_pkg_dir) == \"boolean\", \"package.install_pkg: Argument 'preserve_pkg_dir' is not a boolean.\")\r\n\r\n    pkg_dir = sys.abs_path(pkg_dir)\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- check for dist.info\r\n    local info, err = mf.load_distinfo(sys.make_path(pkg_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error installing: the directory '\" .. pkg_dir .. \"' doesn't exist or doesn't contain valid 'dist.info' file.\", 501 end\r\n\r\n    -- check if the package is source\r\n    if sys.exists(sys.make_path(pkg_dir, \"CMakeLists.txt\")) then\r\n        info.arch = info.arch or \"Universal\"\r\n        info.type = info.type or \"source\"\r\n    end\r\n\r\n    -- check package's architecture\r\n    if not (info.arch == \"Universal\" or info.arch == cfg.arch) then\r\n        return nil, \"Error installing '\" .. info.name .. \"-\" .. info.version .. \"': architecture '\" .. info.arch .. \"' is not suitable for this machine.\", 502\r\n    end\r\n\r\n    -- check package's type\r\n    if not (info.type == \"all\" or info.type == \"source\" or info.type == cfg.type) then\r\n        return nil, \"Error installing '\" .. info.name .. \"-\" .. info.version .. \"': architecture type '\" .. info.type .. \"' is not suitable for this machine.\", 502\r\n    end\r\n\r\n    local ok, err\r\n\r\n    -- if package is of binary type, just deploy it\r\n    if info.type ~= \"source\" then\r\n        ok, err = deploy_binary_pkg(pkg_dir, deploy_dir)\r\n\r\n    -- else build and then deploy\r\n    else\r\n\r\n        -- check if we have cmake\r\n        ok = utils.system_dependency_available(\"cmake\", \"cmake --version\")\r\n        if not ok then return nil, \"Error when installing: Command 'cmake' not available on the system.\", 503 end\r\n\r\n        -- set cmake variables\r\n        local cmake_variables = {}\r\n\r\n        -- set variables from config file\r\n        for k, v in pairs(cfg.variables) do\r\n            cmake_variables[k] = v\r\n        end\r\n\r\n        -- set variables specified as argument\r\n        for k, v in pairs(variables) do\r\n            cmake_variables[k] = v\r\n        end\r\n\r\n        cmake_variables.CMAKE_INCLUDE_PATH = table.concat({cmake_variables.CMAKE_INCLUDE_PATH or \"\", sys.make_path(deploy_dir, \"include\")}, \";\")\r\n        cmake_variables.CMAKE_LIBRARY_PATH = table.concat({cmake_variables.CMAKE_LIBRARY_PATH or \"\", sys.make_path(deploy_dir, \"lib\"), sys.make_path(deploy_dir, \"bin\")}, \";\")\r\n        cmake_variables.CMAKE_PROGRAM_PATH = table.concat({cmake_variables.CMAKE_PROGRAM_PATH or \"\", sys.make_path(deploy_dir, \"bin\")}, \";\")\r\n\r\n        -- build the package and deploy it\r\n        ok, err,status = build_pkg(pkg_dir, deploy_dir, cmake_variables)\r\n        if not ok then return nil, err, status end\r\n\r\n    end\r\n\r\n    -- delete directory of fetched package\r\n    if not (cfg.debug or preserve_pkg_dir) then sys.delete(pkg_dir) end\r\n\r\n    return ok, err, status\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "function fetch_pkgs(packages, download_dir, suppress_printing)\r\n    download_dir = download_dir or sys.current_dir()\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(packages) == \"table\", \"package.fetch_pkgs: Argument 'packages' is not a table.\")\r\n    assert(type(download_dir) == \"string\", \"package.fetch_pkgs: Argument 'download_dir' is not a string.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.fetch_pkgs: Argument 'suppress_printing' is not a boolean.\")\r\n    download_dir = sys.abs_path(download_dir)\r\n\r\n    local fetched_dirs = {}\r\n    local dir, err\r\n\r\n    for _, pkg in pairs(packages) do\r\n        -- if package was downloaded by dependency resolving function, do not download it again.\r\n        if pkg.download_dir then\r\n            dir, err = pkg.download_dir, nil\r\n        -- else download it.\r\n        else\r\n            dir, err = fetch_pkg(pkg, download_dir, suppress_printing)\r\n        end\r\n        if not dir then\r\n            return nil, err\r\n        else\r\n            table.insert(fetched_dirs, dir)\r\n        end\r\n    end\r\n\r\n    return fetched_dirs\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "function retrieve_versions(package, manifest, suppress_printing)\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(package) == \"string\", \"package.retrieve_versions: Argument 'string' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.retrieve_versions: Argument 'manifest' is not a table.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.retrieve_versions: Argument 'suppress_printing' is not a boolean.\")\r\n\r\n    -- get package table\r\n    local pkg_name = depends.split_name_constraint(package)\r\n    local tmp_packages = depends.find_packages(pkg_name, manifest)\r\n\r\n    if #tmp_packages == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. package .. \"' found.\"\r\n    else\r\n        package = tmp_packages[1]\r\n    end\r\n\r\n    if not suppress_printing then print(\"Finding out available versions of \" .. package.name .. \"...\") end\r\n\r\n    -- get available versions\r\n    local tags, err = git.get_remote_tags(package.path)\r\n    if not tags then return nil, \"Error when retrieving versions of package '\" .. package.name .. \"': \" .. err end\r\n\r\n    -- filter out tags of binary packages\r\n    local versions = utils.filter(tags, function (tag) return tag:match(\"^[^%-]+%-?[^%-]*$\") and true end)\r\n\r\n    packages = {}\r\n\r\n    -- create package information\r\n    for _, version in pairs(versions) do\r\n        pkg = {}\r\n        pkg.name = package.name\r\n        pkg.version = version\r\n        pkg.path = package.path\r\n        table.insert(packages, pkg)\r\n    end\r\n\r\n    return packages\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "function exists(path)\r\n    assert(type(path) == \"string\", \"sys.exists: Argument 'path' is not a string.\")\r\n    local attr, err = lfs.attributes(path)\r\n    return utils.to_boolean(attr), err\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "function is_file(file)\r\n    assert(type(file) == \"string\", \"sys.is_file: Argument 'file' is not a string.\")\r\n    return lfs.attributes(file, \"mode\") == \"file\"\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "function current_dir()\r\n    local dir, err = lfs.currentdir()\r\n    if not dir then return nil, err end\r\n    return dir\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "function parent_dir(path)\r\n    assert(type(path) == \"string\", \"sys.parent_dir: Argument 'path' is not a string.\")\r\n    path = remove_curr_dir_dots(path)\r\n    path = remove_trailing(path)\r\n\r\n    local dir = path:gsub(utils.escape_magic(extract_name(path)) .. \"$\", \"\")\r\n    if dir == \"\" then\r\n        return nil\r\n    else\r\n        return make_path(dir)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 193,
    "text": "function make_path(...)\r\n    -- arg is deprecated in lua 5.2 in favor of table.pack we mimic here\r\n    local arg = {n=select('#',...),...}\r\n    local parts = arg\r\n    assert(type(parts) == \"table\", \"sys.make_path: Argument 'parts' is not a table.\")\r\n\r\n    local path, err\r\n    if parts.n == 0 then\r\n        path, err = current_dir()\r\n    else\r\n        path, err = table.concat(parts, path_separator())\r\n    end\r\n    if not path then return nil, err end\r\n\r\n    -- squeeze repeated occurences of a file separator\r\n    path = path:gsub(path_separator() .. \"+\", path_separator())\r\n\r\n    -- remove unnecessary trailing path separator\r\n    path = remove_trailing(path)\r\n\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "function abs_path(path)\r\n    assert(type(path) == \"string\", \"sys.get_abs_path: Argument 'path' is not a string.\")\r\n    if is_abs(path) then return path end\r\n\r\n    local cur_dir, err = current_dir()\r\n    if not cur_dir then return nil, err end\r\n\r\n    return make_path(cur_dir, path)\r\nend",
    "type": "function"
  }, {
    "id": 195,
    "text": "function make_dir(dir_name)\r\n    assert(type(dir_name) == \"string\", \"sys.make_dir: Argument 'dir_name' is not a string.\")\r\n    if exists(dir_name) then\r\n        return true\r\n    else\r\n        local par_dir = parent_dir(dir_name)\r\n        if par_dir then\r\n            local ok, err = make_dir(par_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n        return lfs.mkdir(dir_name)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "function copy(source, dest_dir)\r\n    assert(type(source) == \"string\", \"sys.copy: Argument 'file_or_dir' is not a string.\")\r\n    assert(type(dest_dir) == \"string\", \"sys.copy: Argument 'dest_dir' is not a string.\")\r\n    assert(is_dir(dest_dir), \"sys.copy: destination '\" .. dest_dir ..\"' is not a directory.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if is_dir(source) then\r\n            make_dir(make_path(dest_dir, extract_name(source)))\r\n            return exec(\"xcopy /E /I /Y /Q \" .. quote(source) .. \" \" .. quote(dest_dir .. \"\\\\\" .. extract_name(source)))\r\n        else\r\n            return exec(\"copy /Y \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        end\r\n    else\r\n        if is_dir(source) then\r\n            return exec(\"cp -fRH \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        else\r\n            return exec(\"cp -fH \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 197,
    "text": "function delete(path)\r\n    assert(type(path) == \"string\", \"sys.delete: Argument 'path' is not a string.\")\r\n    assert(is_abs(path), \"sys.delete: Argument 'path' is not an absolute path.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if not exists(path) then\r\n            return true\r\n        elseif is_file(path) then\r\n            return os.remove(path)\r\n        else\r\n            --return exec(\"rd /S /Q \" .. quote(path))\r\n            return exec(\"move /y \" .. quote(path) .. \" \" .. quote(tmp_dir()))\r\n        end\r\n    else\r\n        return exec(\"rm -rf \" .. quote(path))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 199,
    "text": "read",
    "type": "global function"
  }, {
    "id": 200,
    "text": "print",
    "type": "global function"
  }, {
    "id": 201,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 202,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 203,
    "text": "module",
    "type": "global function"
  }, {
    "id": 204,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 205,
    "text": "flush",
    "type": "global function"
  }, {
    "id": 206,
    "text": "type",
    "type": "global function"
  }, {
    "id": 207,
    "text": "require",
    "type": "global function"
  }, {
    "id": 208,
    "text": "write",
    "type": "global function"
  }, {
    "id": 209,
    "text": "config",
    "type": "module"
  }, {
    "id": 210,
    "text": "",
    "type": "variable container"
  }, {
    "id": 211,
    "text": "",
    "type": "require container"
  }, {
    "id": 212,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "require local variable"
  } ]
}