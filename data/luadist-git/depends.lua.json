{
  "_filename": "depends.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadist-git/dist/depends.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 9,
    "label": "has",
    "to": 22
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 24,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 22
  }, {
    "from": 39,
    "label": "has",
    "to": 22
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 43,
    "label": "has",
    "to": 22
  }, {
    "from": 43,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 22
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 54,
    "label": "has",
    "to": 22
  }, {
    "from": 54,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 54,
    "label": "has",
    "to": 22
  }, {
    "from": 54,
    "label": "has",
    "to": 22
  }, {
    "from": 54,
    "label": "has",
    "to": 22
  }, {
    "from": 54,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 12
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 25
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 72,
    "label": "has",
    "to": 80
  }, {
    "from": 72,
    "label": "has",
    "to": 81
  }, {
    "from": 72,
    "label": "has",
    "to": 82
  }, {
    "from": 72,
    "label": "has",
    "to": 83
  }, {
    "from": 72,
    "label": "has",
    "to": 84
  }, {
    "from": 72,
    "label": "has",
    "to": 27
  }, {
    "from": 72,
    "label": "has",
    "to": 85
  }, {
    "from": 72,
    "label": "has",
    "to": 86
  }, {
    "from": 72,
    "label": "has",
    "to": 87
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 72,
    "label": "has",
    "to": 88
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 72,
    "label": "has",
    "to": 89
  }, {
    "from": 72,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 72,
    "label": "has",
    "to": 95
  }, {
    "from": 72,
    "label": "has",
    "to": 96
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 72,
    "label": "has",
    "to": 97
  }, {
    "from": 72,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 98,
    "label": "has",
    "to": 103
  }, {
    "from": 98,
    "label": "has",
    "to": 104
  }, {
    "from": 98,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 98,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 98,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 98,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 98,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 121,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 129,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 137,
    "label": "has",
    "to": 142
  }, {
    "from": 135,
    "label": "has",
    "to": 143
  }, {
    "from": 121,
    "label": "has",
    "to": 144
  }, {
    "from": 120,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 145,
    "label": "has",
    "to": 152
  }, {
    "from": 145,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 145,
    "label": "has",
    "to": 155
  }, {
    "from": 145,
    "label": "has",
    "to": 156
  }, {
    "from": 145,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 147
  }, {
    "from": 120,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 154
  }, {
    "from": 120,
    "label": "has",
    "to": 103
  }, {
    "from": 72,
    "label": "has",
    "to": 160
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 72,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 22
  }, {
    "from": 162,
    "label": "has",
    "to": 12
  }, {
    "from": 162,
    "label": "has",
    "to": 73
  }, {
    "from": 162,
    "label": "has",
    "to": 74
  }, {
    "from": 162,
    "label": "has",
    "to": 25
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 162,
    "label": "has",
    "to": 168
  }, {
    "from": 162,
    "label": "has",
    "to": 169
  }, {
    "from": 162,
    "label": "has",
    "to": 170
  }, {
    "from": 162,
    "label": "has",
    "to": 171
  }, {
    "from": 162,
    "label": "has",
    "to": 27
  }, {
    "from": 162,
    "label": "has",
    "to": 172
  }, {
    "from": 162,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 147
  }, {
    "from": 162,
    "label": "has",
    "to": 89
  }, {
    "from": 162,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 151
  }, {
    "from": 177,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 162,
    "label": "has",
    "to": 22
  }, {
    "from": 162,
    "label": "has",
    "to": 22
  }, {
    "from": 162,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 22
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 192
  }, {
    "from": 189,
    "label": "has",
    "to": 193
  }, {
    "from": 189,
    "label": "has",
    "to": 194
  }, {
    "from": 189,
    "label": "has",
    "to": 195
  }, {
    "from": 185,
    "label": "has",
    "to": 22
  }, {
    "from": 185,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 197,
    "label": "has",
    "to": 200
  }, {
    "from": 197,
    "label": "has",
    "to": 22
  }, {
    "from": 197,
    "label": "has",
    "to": 22
  }, {
    "from": 197,
    "label": "has",
    "to": 201
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 22
  }, {
    "from": 202,
    "label": "has",
    "to": 22
  }, {
    "from": 202,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 207,
    "label": "has",
    "to": 211
  }, {
    "from": 207,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 212,
    "label": "has",
    "to": 22
  }, {
    "from": 207,
    "label": "has",
    "to": 22
  }, {
    "from": 207,
    "label": "has",
    "to": 22
  }, {
    "from": 207,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 219,
    "label": "has",
    "to": 224
  }, {
    "from": 219,
    "label": "has",
    "to": 225
  }, {
    "from": 219,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 219,
    "label": "has",
    "to": 228
  }, {
    "from": 219,
    "label": "has",
    "to": 22
  }, {
    "from": 219,
    "label": "has",
    "to": 22
  }, {
    "from": 219,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 22
  }, {
    "from": 230,
    "label": "has",
    "to": 22
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 22
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 22
  }, {
    "from": 233,
    "label": "has",
    "to": 22
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 237,
    "label": "has",
    "to": 22
  }, {
    "from": 237,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 22
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 245,
    "label": "has",
    "to": 248
  }, {
    "from": 245,
    "label": "has",
    "to": 249
  }, {
    "from": 245,
    "label": "has",
    "to": 250
  }, {
    "from": 245,
    "label": "has",
    "to": 251
  }, {
    "from": 245,
    "label": "has",
    "to": 252
  }, {
    "from": 245,
    "label": "has",
    "to": 253
  }, {
    "from": 245,
    "label": "has",
    "to": 254
  }, {
    "from": 245,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 255,
    "label": "has",
    "to": 258
  }, {
    "from": 255,
    "label": "has",
    "to": 259
  }, {
    "from": 255,
    "label": "has",
    "to": 92
  }, {
    "from": 255,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 255,
    "label": "has",
    "to": 260
  }, {
    "from": 255,
    "label": "has",
    "to": 261
  }, {
    "from": 255,
    "label": "has",
    "to": 262
  }, {
    "from": 255,
    "label": "has",
    "to": 263
  }, {
    "from": 255,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 256
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 264,
    "label": "has",
    "to": 266
  }, {
    "from": 264,
    "label": "has",
    "to": 267
  }, {
    "from": 264,
    "label": "has",
    "to": 268
  }, {
    "from": 264,
    "label": "has",
    "to": 269
  }, {
    "from": 264,
    "label": "has",
    "to": 270
  }, {
    "from": 264,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 264,
    "label": "has",
    "to": 273
  }, {
    "from": 264,
    "label": "has",
    "to": 274
  }, {
    "from": 264,
    "label": "has",
    "to": 275
  }, {
    "from": 264,
    "label": "has",
    "to": 276
  }, {
    "from": 264,
    "label": "has",
    "to": 277
  }, {
    "from": 245,
    "label": "has",
    "to": 22
  }, {
    "from": 245,
    "label": "has",
    "to": 22
  }, {
    "from": 245,
    "label": "has",
    "to": 22
  }, {
    "from": 245,
    "label": "has",
    "to": 22
  }, {
    "from": 245,
    "label": "has",
    "to": 22
  }, {
    "from": 245,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 278,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 278,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 287,
    "label": "has",
    "to": 291
  }, {
    "from": 287,
    "label": "has",
    "to": 292
  }, {
    "from": 287,
    "label": "has",
    "to": 293
  }, {
    "from": 287,
    "label": "has",
    "to": 294
  }, {
    "from": 287,
    "label": "has",
    "to": 295
  }, {
    "from": 245,
    "label": "has",
    "to": 22
  }, {
    "from": 245,
    "label": "has",
    "to": 22
  }, {
    "from": 245,
    "label": "has",
    "to": 296
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 297,
    "label": "has",
    "to": 300
  }, {
    "from": 297,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 297,
    "label": "has",
    "to": 22
  }, {
    "from": 297,
    "label": "has",
    "to": 304
  }, {
    "from": 305,
    "label": "has",
    "to": 12
  }, {
    "from": 305,
    "label": "has",
    "to": 73
  }, {
    "from": 305,
    "label": "has",
    "to": 74
  }, {
    "from": 305,
    "label": "has",
    "to": 25
  }, {
    "from": 305,
    "label": "has",
    "to": 75
  }, {
    "from": 305,
    "label": "has",
    "to": 76
  }, {
    "from": 305,
    "label": "has",
    "to": 77
  }, {
    "from": 305,
    "label": "has",
    "to": 78
  }, {
    "from": 305,
    "label": "has",
    "to": 79
  }, {
    "from": 305,
    "label": "has",
    "to": 80
  }, {
    "from": 305,
    "label": "has",
    "to": 81
  }, {
    "from": 305,
    "label": "has",
    "to": 82
  }, {
    "from": 305,
    "label": "has",
    "to": 83
  }, {
    "from": 305,
    "label": "has",
    "to": 84
  }, {
    "from": 305,
    "label": "has",
    "to": 27
  }, {
    "from": 305,
    "label": "has",
    "to": 85
  }, {
    "from": 305,
    "label": "has",
    "to": 86
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 22
  }, {
    "from": 305,
    "label": "has",
    "to": 88
  }, {
    "from": 305,
    "label": "has",
    "to": 22
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 305,
    "label": "has",
    "to": 89
  }, {
    "from": 305,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 305,
    "label": "has",
    "to": 22
  }, {
    "from": 305,
    "label": "has",
    "to": 308
  }, {
    "from": 305,
    "label": "has",
    "to": 309
  }, {
    "from": 305,
    "label": "has",
    "to": 22
  }, {
    "from": 305,
    "label": "has",
    "to": 310
  }, {
    "from": 305,
    "label": "has",
    "to": 311
  }, {
    "from": 311,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 311,
    "label": "has",
    "to": 101
  }, {
    "from": 311,
    "label": "has",
    "to": 104
  }, {
    "from": 311,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 108
  }, {
    "from": 312,
    "label": "has",
    "to": 109
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 111
  }, {
    "from": 313,
    "label": "has",
    "to": 112
  }, {
    "from": 311,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 311,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 311,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 121,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 129,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 137,
    "label": "has",
    "to": 142
  }, {
    "from": 135,
    "label": "has",
    "to": 143
  }, {
    "from": 121,
    "label": "has",
    "to": 144
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 146
  }, {
    "from": 315,
    "label": "has",
    "to": 147
  }, {
    "from": 315,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 315,
    "label": "has",
    "to": 152
  }, {
    "from": 315,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 315,
    "label": "has",
    "to": 155
  }, {
    "from": 315,
    "label": "has",
    "to": 156
  }, {
    "from": 315,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 147
  }, {
    "from": 314,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 154
  }, {
    "from": 314,
    "label": "has",
    "to": 103
  }, {
    "from": 305,
    "label": "has",
    "to": 160
  }, {
    "from": 305,
    "label": "has",
    "to": 22
  }, {
    "from": 305,
    "label": "has",
    "to": 22
  }, {
    "from": 305,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 163
  }, {
    "from": 317,
    "label": "has",
    "to": 22
  }, {
    "from": 317,
    "label": "has",
    "to": 12
  }, {
    "from": 317,
    "label": "has",
    "to": 73
  }, {
    "from": 317,
    "label": "has",
    "to": 74
  }, {
    "from": 317,
    "label": "has",
    "to": 25
  }, {
    "from": 317,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 317,
    "label": "has",
    "to": 166
  }, {
    "from": 317,
    "label": "has",
    "to": 167
  }, {
    "from": 317,
    "label": "has",
    "to": 168
  }, {
    "from": 317,
    "label": "has",
    "to": 169
  }, {
    "from": 317,
    "label": "has",
    "to": 170
  }, {
    "from": 317,
    "label": "has",
    "to": 171
  }, {
    "from": 317,
    "label": "has",
    "to": 27
  }, {
    "from": 317,
    "label": "has",
    "to": 172
  }, {
    "from": 317,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 147
  }, {
    "from": 317,
    "label": "has",
    "to": 89
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 318,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 151
  }, {
    "from": 320,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 317,
    "label": "has",
    "to": 22
  }, {
    "from": 317,
    "label": "has",
    "to": 22
  }, {
    "from": 317,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 22
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 324,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 324,
    "label": "has",
    "to": 22
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 22
  }, {
    "from": 327,
    "label": "has",
    "to": 235
  }, {
    "from": 327,
    "label": "has",
    "to": 22
  }, {
    "from": 327,
    "label": "has",
    "to": 22
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 9,
    "label": "calls",
    "to": 356
  }, {
    "from": 9,
    "label": "calls",
    "to": 356
  }, {
    "from": 24,
    "label": "calls",
    "to": 356
  }, {
    "from": 39,
    "label": "calls",
    "to": 356
  }, {
    "from": 43,
    "label": "calls",
    "to": 356
  }, {
    "from": 43,
    "label": "calls",
    "to": 356
  }, {
    "from": 43,
    "label": "calls",
    "to": 356
  }, {
    "from": 54,
    "label": "calls",
    "to": 356
  }, {
    "from": 54,
    "label": "calls",
    "to": 356
  }, {
    "from": 54,
    "label": "calls",
    "to": 356
  }, {
    "from": 72,
    "label": "calls",
    "to": 356
  }, {
    "from": 72,
    "label": "calls",
    "to": 356
  }, {
    "from": 72,
    "label": "calls",
    "to": 356
  }, {
    "from": 72,
    "label": "calls",
    "to": 356
  }, {
    "from": 72,
    "label": "calls",
    "to": 356
  }, {
    "from": 72,
    "label": "calls",
    "to": 356
  }, {
    "from": 72,
    "label": "calls",
    "to": 356
  }, {
    "from": 72,
    "label": "calls",
    "to": 356
  }, {
    "from": 162,
    "label": "calls",
    "to": 356
  }, {
    "from": 162,
    "label": "calls",
    "to": 356
  }, {
    "from": 162,
    "label": "calls",
    "to": 356
  }, {
    "from": 162,
    "label": "calls",
    "to": 356
  }, {
    "from": 162,
    "label": "calls",
    "to": 356
  }, {
    "from": 162,
    "label": "calls",
    "to": 356
  }, {
    "from": 185,
    "label": "calls",
    "to": 356
  }, {
    "from": 197,
    "label": "calls",
    "to": 356
  }, {
    "from": 202,
    "label": "calls",
    "to": 356
  }, {
    "from": 202,
    "label": "calls",
    "to": 356
  }, {
    "from": 202,
    "label": "calls",
    "to": 356
  }, {
    "from": 207,
    "label": "calls",
    "to": 356
  }, {
    "from": 207,
    "label": "calls",
    "to": 356
  }, {
    "from": 219,
    "label": "calls",
    "to": 356
  }, {
    "from": 219,
    "label": "calls",
    "to": 356
  }, {
    "from": 230,
    "label": "calls",
    "to": 356
  }, {
    "from": 233,
    "label": "calls",
    "to": 356
  }, {
    "from": 237,
    "label": "calls",
    "to": 356
  }, {
    "from": 237,
    "label": "calls",
    "to": 356
  }, {
    "from": 241,
    "label": "calls",
    "to": 356
  }, {
    "from": 241,
    "label": "calls",
    "to": 356
  }, {
    "from": 245,
    "label": "calls",
    "to": 356
  }, {
    "from": 245,
    "label": "calls",
    "to": 356
  }, {
    "from": 245,
    "label": "calls",
    "to": 356
  }, {
    "from": 297,
    "label": "calls",
    "to": 356
  }, {
    "from": 297,
    "label": "calls",
    "to": 356
  }, {
    "from": 305,
    "label": "calls",
    "to": 356
  }, {
    "from": 305,
    "label": "calls",
    "to": 356
  }, {
    "from": 305,
    "label": "calls",
    "to": 356
  }, {
    "from": 305,
    "label": "calls",
    "to": 356
  }, {
    "from": 305,
    "label": "calls",
    "to": 356
  }, {
    "from": 305,
    "label": "calls",
    "to": 356
  }, {
    "from": 305,
    "label": "calls",
    "to": 356
  }, {
    "from": 305,
    "label": "calls",
    "to": 356
  }, {
    "from": 317,
    "label": "calls",
    "to": 356
  }, {
    "from": 317,
    "label": "calls",
    "to": 356
  }, {
    "from": 317,
    "label": "calls",
    "to": 356
  }, {
    "from": 317,
    "label": "calls",
    "to": 356
  }, {
    "from": 317,
    "label": "calls",
    "to": 356
  }, {
    "from": 317,
    "label": "calls",
    "to": 356
  }, {
    "from": 219,
    "label": "calls",
    "to": 357
  }, {
    "from": 317,
    "label": "calls",
    "to": 305
  }, {
    "from": 72,
    "label": "calls",
    "to": 54
  }, {
    "from": 305,
    "label": "calls",
    "to": 54
  }, {
    "from": 9,
    "label": "calls",
    "to": 237
  }, {
    "from": 43,
    "label": "calls",
    "to": 237
  }, {
    "from": 241,
    "label": "calls",
    "to": 7
  }, {
    "from": 297,
    "label": "calls",
    "to": 7
  }, {
    "from": 207,
    "label": "calls",
    "to": 359
  }, {
    "from": 207,
    "label": "calls",
    "to": 359
  }, {
    "from": 24,
    "label": "calls",
    "to": 344
  }, {
    "from": 72,
    "label": "calls",
    "to": 360
  }, {
    "from": 305,
    "label": "calls",
    "to": 360
  }, {
    "from": 72,
    "label": "calls",
    "to": 9
  }, {
    "from": 245,
    "label": "calls",
    "to": 9
  }, {
    "from": 305,
    "label": "calls",
    "to": 9
  }, {
    "from": 305,
    "label": "calls",
    "to": 9
  }, {
    "from": 72,
    "label": "calls",
    "to": 341
  }, {
    "from": 245,
    "label": "calls",
    "to": 341
  }, {
    "from": 305,
    "label": "calls",
    "to": 341
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 54,
    "label": "calls",
    "to": 219
  }, {
    "from": 72,
    "label": "calls",
    "to": 219
  }, {
    "from": 72,
    "label": "calls",
    "to": 219
  }, {
    "from": 72,
    "label": "calls",
    "to": 219
  }, {
    "from": 305,
    "label": "calls",
    "to": 219
  }, {
    "from": 305,
    "label": "calls",
    "to": 219
  }, {
    "from": 305,
    "label": "calls",
    "to": 219
  }, {
    "from": 72,
    "label": "calls",
    "to": 350
  }, {
    "from": 72,
    "label": "calls",
    "to": 350
  }, {
    "from": 162,
    "label": "calls",
    "to": 350
  }, {
    "from": 245,
    "label": "calls",
    "to": 350
  }, {
    "from": 245,
    "label": "calls",
    "to": 350
  }, {
    "from": 305,
    "label": "calls",
    "to": 350
  }, {
    "from": 305,
    "label": "calls",
    "to": 350
  }, {
    "from": 317,
    "label": "calls",
    "to": 350
  }, {
    "from": 230,
    "label": "calls",
    "to": 352
  }, {
    "from": 233,
    "label": "calls",
    "to": 352
  }, {
    "from": 54,
    "label": "calls",
    "to": 185
  }, {
    "from": 54,
    "label": "calls",
    "to": 185
  }, {
    "from": 72,
    "label": "calls",
    "to": 185
  }, {
    "from": 72,
    "label": "calls",
    "to": 185
  }, {
    "from": 162,
    "label": "calls",
    "to": 185
  }, {
    "from": 162,
    "label": "calls",
    "to": 185
  }, {
    "from": 305,
    "label": "calls",
    "to": 185
  }, {
    "from": 305,
    "label": "calls",
    "to": 185
  }, {
    "from": 317,
    "label": "calls",
    "to": 185
  }, {
    "from": 317,
    "label": "calls",
    "to": 185
  }, {
    "from": 72,
    "label": "calls",
    "to": 72
  }, {
    "from": 162,
    "label": "calls",
    "to": 72
  }, {
    "from": 305,
    "label": "calls",
    "to": 72
  }, {
    "from": 9,
    "label": "calls",
    "to": 361
  }, {
    "from": 9,
    "label": "calls",
    "to": 361
  }, {
    "from": 43,
    "label": "calls",
    "to": 361
  }, {
    "from": 54,
    "label": "calls",
    "to": 361
  }, {
    "from": 54,
    "label": "calls",
    "to": 361
  }, {
    "from": 54,
    "label": "calls",
    "to": 361
  }, {
    "from": 54,
    "label": "calls",
    "to": 361
  }, {
    "from": 54,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 72,
    "label": "calls",
    "to": 361
  }, {
    "from": 162,
    "label": "calls",
    "to": 361
  }, {
    "from": 162,
    "label": "calls",
    "to": 361
  }, {
    "from": 162,
    "label": "calls",
    "to": 361
  }, {
    "from": 162,
    "label": "calls",
    "to": 361
  }, {
    "from": 162,
    "label": "calls",
    "to": 361
  }, {
    "from": 162,
    "label": "calls",
    "to": 361
  }, {
    "from": 185,
    "label": "calls",
    "to": 361
  }, {
    "from": 207,
    "label": "calls",
    "to": 361
  }, {
    "from": 245,
    "label": "calls",
    "to": 361
  }, {
    "from": 245,
    "label": "calls",
    "to": 361
  }, {
    "from": 245,
    "label": "calls",
    "to": 361
  }, {
    "from": 297,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 305,
    "label": "calls",
    "to": 361
  }, {
    "from": 317,
    "label": "calls",
    "to": 361
  }, {
    "from": 317,
    "label": "calls",
    "to": 361
  }, {
    "from": 317,
    "label": "calls",
    "to": 361
  }, {
    "from": 317,
    "label": "calls",
    "to": 361
  }, {
    "from": 317,
    "label": "calls",
    "to": 361
  }, {
    "from": 317,
    "label": "calls",
    "to": 361
  }, {
    "from": 237,
    "label": "calls",
    "to": 8
  }, {
    "from": 72,
    "label": "calls",
    "to": 230
  }, {
    "from": 245,
    "label": "calls",
    "to": 230
  }, {
    "from": 305,
    "label": "calls",
    "to": 230
  }, {
    "from": 72,
    "label": "calls",
    "to": 349
  }, {
    "from": 72,
    "label": "calls",
    "to": 349
  }, {
    "from": 162,
    "label": "calls",
    "to": 349
  }, {
    "from": 305,
    "label": "calls",
    "to": 349
  }, {
    "from": 305,
    "label": "calls",
    "to": 349
  }, {
    "from": 317,
    "label": "calls",
    "to": 349
  }, {
    "from": 245,
    "label": "calls",
    "to": 245
  }, {
    "from": 245,
    "label": "calls",
    "to": 365
  }, {
    "from": 24,
    "label": "calls",
    "to": 348
  }, {
    "from": 72,
    "label": "calls",
    "to": 348
  }, {
    "from": 162,
    "label": "calls",
    "to": 348
  }, {
    "from": 245,
    "label": "calls",
    "to": 348
  }, {
    "from": 305,
    "label": "calls",
    "to": 348
  }, {
    "from": 317,
    "label": "calls",
    "to": 348
  }, {
    "from": 9,
    "label": "calls",
    "to": 337
  }, {
    "from": 72,
    "label": "calls",
    "to": 337
  }, {
    "from": 162,
    "label": "calls",
    "to": 337
  }, {
    "from": 245,
    "label": "calls",
    "to": 337
  }, {
    "from": 305,
    "label": "calls",
    "to": 337
  }, {
    "from": 317,
    "label": "calls",
    "to": 337
  }, {
    "from": 24,
    "label": "calls",
    "to": 346
  }, {
    "from": 24,
    "label": "calls",
    "to": 346
  }, {
    "from": 24,
    "label": "calls",
    "to": 347
  }, {
    "from": 24,
    "label": "calls",
    "to": 347
  }, {
    "from": 24,
    "label": "calls",
    "to": 347
  }, {
    "from": 24,
    "label": "calls",
    "to": 347
  }, {
    "from": 245,
    "label": "calls",
    "to": 347
  }, {
    "from": 245,
    "label": "calls",
    "to": 347
  }, {
    "from": 9,
    "label": "calls",
    "to": 197
  }, {
    "from": 72,
    "label": "calls",
    "to": 197
  }, {
    "from": 72,
    "label": "calls",
    "to": 197
  }, {
    "from": 185,
    "label": "calls",
    "to": 197
  }, {
    "from": 245,
    "label": "calls",
    "to": 197
  }, {
    "from": 305,
    "label": "calls",
    "to": 197
  }, {
    "from": 305,
    "label": "calls",
    "to": 197
  }, {
    "from": 245,
    "label": "calls",
    "to": 340
  }, {
    "from": 329,
    "label": "calls",
    "to": 364
  }, {
    "from": 24,
    "label": "calls",
    "to": 338
  }, {
    "from": 245,
    "label": "calls",
    "to": 338
  }, {
    "from": 24,
    "label": "calls",
    "to": 345
  }, {
    "from": 24,
    "label": "calls",
    "to": 345
  }, {
    "from": 72,
    "label": "calls",
    "to": 342
  }, {
    "from": 305,
    "label": "calls",
    "to": 342
  }, {
    "from": 9,
    "label": "calls",
    "to": 362
  }, {
    "from": 24,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 362
  }, {
    "from": 162,
    "label": "calls",
    "to": 362
  }, {
    "from": 162,
    "label": "calls",
    "to": 362
  }, {
    "from": 162,
    "label": "calls",
    "to": 362
  }, {
    "from": 162,
    "label": "calls",
    "to": 362
  }, {
    "from": 185,
    "label": "calls",
    "to": 362
  }, {
    "from": 245,
    "label": "calls",
    "to": 362
  }, {
    "from": 245,
    "label": "calls",
    "to": 362
  }, {
    "from": 297,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 305,
    "label": "calls",
    "to": 362
  }, {
    "from": 317,
    "label": "calls",
    "to": 362
  }, {
    "from": 317,
    "label": "calls",
    "to": 362
  }, {
    "from": 317,
    "label": "calls",
    "to": 362
  }, {
    "from": 317,
    "label": "calls",
    "to": 362
  }, {
    "from": 72,
    "label": "calls",
    "to": 363
  }, {
    "from": 305,
    "label": "calls",
    "to": 363
  }, {
    "from": 230,
    "label": "calls",
    "to": 241
  }, {
    "from": 233,
    "label": "calls",
    "to": 241
  }, {
    "from": 202,
    "label": "calls",
    "to": 351
  }, {
    "from": 207,
    "label": "calls",
    "to": 351
  }, {
    "from": 207,
    "label": "calls",
    "to": 358
  }, {
    "from": 305,
    "label": "calls",
    "to": 297
  }, {
    "from": 72,
    "label": "calls",
    "to": 43
  }, {
    "from": 72,
    "label": "calls",
    "to": 43
  }, {
    "from": 305,
    "label": "calls",
    "to": 43
  }, {
    "from": 9,
    "label": "calls",
    "to": 366
  }, {
    "from": 9,
    "label": "calls",
    "to": 367
  }, {
    "from": 9,
    "label": "calls",
    "to": 367
  }, {
    "from": 9,
    "label": "calls",
    "to": 367
  }, {
    "from": 24,
    "label": "calls",
    "to": 367
  }, {
    "from": 39,
    "label": "calls",
    "to": 367
  }, {
    "from": 43,
    "label": "calls",
    "to": 367
  }, {
    "from": 43,
    "label": "calls",
    "to": 367
  }, {
    "from": 43,
    "label": "calls",
    "to": 367
  }, {
    "from": 43,
    "label": "calls",
    "to": 367
  }, {
    "from": 54,
    "label": "calls",
    "to": 367
  }, {
    "from": 54,
    "label": "calls",
    "to": 367
  }, {
    "from": 54,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 72,
    "label": "calls",
    "to": 367
  }, {
    "from": 162,
    "label": "calls",
    "to": 367
  }, {
    "from": 162,
    "label": "calls",
    "to": 367
  }, {
    "from": 162,
    "label": "calls",
    "to": 367
  }, {
    "from": 162,
    "label": "calls",
    "to": 367
  }, {
    "from": 162,
    "label": "calls",
    "to": 367
  }, {
    "from": 162,
    "label": "calls",
    "to": 367
  }, {
    "from": 162,
    "label": "calls",
    "to": 367
  }, {
    "from": 185,
    "label": "calls",
    "to": 367
  }, {
    "from": 197,
    "label": "calls",
    "to": 367
  }, {
    "from": 202,
    "label": "calls",
    "to": 367
  }, {
    "from": 202,
    "label": "calls",
    "to": 367
  }, {
    "from": 202,
    "label": "calls",
    "to": 367
  }, {
    "from": 207,
    "label": "calls",
    "to": 367
  }, {
    "from": 207,
    "label": "calls",
    "to": 367
  }, {
    "from": 207,
    "label": "calls",
    "to": 367
  }, {
    "from": 219,
    "label": "calls",
    "to": 367
  }, {
    "from": 219,
    "label": "calls",
    "to": 367
  }, {
    "from": 219,
    "label": "calls",
    "to": 367
  }, {
    "from": 230,
    "label": "calls",
    "to": 367
  }, {
    "from": 233,
    "label": "calls",
    "to": 367
  }, {
    "from": 237,
    "label": "calls",
    "to": 367
  }, {
    "from": 237,
    "label": "calls",
    "to": 367
  }, {
    "from": 241,
    "label": "calls",
    "to": 367
  }, {
    "from": 241,
    "label": "calls",
    "to": 367
  }, {
    "from": 245,
    "label": "calls",
    "to": 367
  }, {
    "from": 245,
    "label": "calls",
    "to": 367
  }, {
    "from": 245,
    "label": "calls",
    "to": 367
  }, {
    "from": 245,
    "label": "calls",
    "to": 367
  }, {
    "from": 245,
    "label": "calls",
    "to": 367
  }, {
    "from": 297,
    "label": "calls",
    "to": 367
  }, {
    "from": 297,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 305,
    "label": "calls",
    "to": 367
  }, {
    "from": 317,
    "label": "calls",
    "to": 367
  }, {
    "from": 317,
    "label": "calls",
    "to": 367
  }, {
    "from": 317,
    "label": "calls",
    "to": 367
  }, {
    "from": 317,
    "label": "calls",
    "to": 367
  }, {
    "from": 317,
    "label": "calls",
    "to": 367
  }, {
    "from": 317,
    "label": "calls",
    "to": 367
  }, {
    "from": 317,
    "label": "calls",
    "to": 367
  }, {
    "from": 329,
    "label": "calls",
    "to": 368
  }, {
    "from": 329,
    "label": "calls",
    "to": 368
  }, {
    "from": 329,
    "label": "calls",
    "to": 368
  }, {
    "from": 329,
    "label": "calls",
    "to": 368
  }, {
    "from": 329,
    "label": "calls",
    "to": 368
  }, {
    "from": 329,
    "label": "calls",
    "to": 368
  }, {
    "from": 9,
    "label": "calls",
    "to": 353
  }, {
    "from": 43,
    "label": "calls",
    "to": 39
  }, {
    "from": 54,
    "label": "calls",
    "to": 39
  }, {
    "from": 54,
    "label": "calls",
    "to": 39
  }, {
    "from": 54,
    "label": "calls",
    "to": 39
  }, {
    "from": 54,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "contains",
    "to": 329
  }, {
    "from": 329,
    "label": "declares",
    "to": 9
  }, {
    "from": 329,
    "label": "declares",
    "to": 24
  }, {
    "from": 329,
    "label": "declares",
    "to": 39
  }, {
    "from": 329,
    "label": "declares",
    "to": 43
  }, {
    "from": 329,
    "label": "declares",
    "to": 54
  }, {
    "from": 329,
    "label": "declares",
    "to": 72
  }, {
    "from": 329,
    "label": "declares",
    "to": 162
  }, {
    "from": 329,
    "label": "declares",
    "to": 185
  }, {
    "from": 329,
    "label": "declares",
    "to": 197
  }, {
    "from": 329,
    "label": "declares",
    "to": 202
  }, {
    "from": 329,
    "label": "declares",
    "to": 207
  }, {
    "from": 329,
    "label": "declares",
    "to": 219
  }, {
    "from": 329,
    "label": "declares",
    "to": 230
  }, {
    "from": 329,
    "label": "declares",
    "to": 233
  }, {
    "from": 329,
    "label": "declares",
    "to": 237
  }, {
    "from": 329,
    "label": "declares",
    "to": 241
  }, {
    "from": 329,
    "label": "declares",
    "to": 245
  }, {
    "from": 329,
    "label": "declares",
    "to": 297
  }, {
    "from": 329,
    "label": "declares",
    "to": 305
  }, {
    "from": 329,
    "label": "declares",
    "to": 317
  }, {
    "from": 329,
    "label": "declares",
    "to": 322
  }, {
    "from": 329,
    "label": "declares",
    "to": 324
  }, {
    "from": 329,
    "label": "declares",
    "to": 326
  }, {
    "from": 329,
    "label": "declares",
    "to": 327
  }, {
    "from": 332,
    "label": "calls",
    "to": 317
  }, {
    "from": 331,
    "label": "calls",
    "to": 162
  }, {
    "from": 336,
    "label": "calls",
    "to": 245
  }, {
    "from": 330,
    "label": "calls",
    "to": 233
  }, {
    "from": 334,
    "label": "calls",
    "to": 230
  }, {
    "from": 332,
    "label": "calls",
    "to": 9
  }, {
    "from": 333,
    "label": "calls",
    "to": 9
  }, {
    "from": 334,
    "label": "calls",
    "to": 9
  }, {
    "from": 335,
    "label": "calls",
    "to": 9
  }, {
    "from": 330,
    "label": "calls",
    "to": 24
  }, {
    "from": 331,
    "label": "calls",
    "to": 24
  }, {
    "from": 332,
    "label": "calls",
    "to": 24
  }, {
    "from": 333,
    "label": "calls",
    "to": 24
  }, {
    "from": 335,
    "label": "calls",
    "to": 24
  }, {
    "from": 330,
    "label": "calls",
    "to": 185
  }, {
    "from": 339,
    "label": "calls",
    "to": 197
  }, {
    "from": 341,
    "label": "calls",
    "to": 197
  }, {
    "from": 343,
    "label": "calls",
    "to": 197
  }, {
    "from": 339,
    "label": "calls",
    "to": 24
  }, {
    "from": 341,
    "label": "calls",
    "to": 9
  }, {
    "from": 343,
    "label": "calls",
    "to": 9
  }, {
    "from": 343,
    "label": "calls",
    "to": 9
  }, {
    "from": 354,
    "label": "calls",
    "to": 233
  }, {
    "from": 354,
    "label": "calls",
    "to": 233
  }, {
    "from": 354,
    "label": "calls",
    "to": 233
  }, {
    "from": 354,
    "label": "calls",
    "to": 233
  }, {
    "from": 354,
    "label": "calls",
    "to": 230
  }, {
    "from": 354,
    "label": "calls",
    "to": 9
  }, {
    "from": 354,
    "label": "calls",
    "to": 9
  }, {
    "from": 354,
    "label": "calls",
    "to": 43
  }, {
    "from": 354,
    "label": "calls",
    "to": 207
  }, {
    "from": 354,
    "label": "calls",
    "to": 207
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 162
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 355,
    "label": "calls",
    "to": 317
  }, {
    "from": 2,
    "label": "contains",
    "to": 369
  }, {
    "from": 2,
    "label": "contains",
    "to": 370
  }, {
    "from": 370,
    "label": "initializes",
    "to": 371
  }, {
    "from": 371,
    "label": "requires",
    "to": 372
  }, {
    "from": 370,
    "label": "initializes",
    "to": 373
  }, {
    "from": 373,
    "label": "requires",
    "to": 3
  }, {
    "from": 370,
    "label": "initializes",
    "to": 374
  }, {
    "from": 374,
    "label": "requires",
    "to": 5
  }, {
    "from": 370,
    "label": "initializes",
    "to": 375
  }, {
    "from": 375,
    "label": "requires",
    "to": 1
  }, {
    "from": 370,
    "label": "initializes",
    "to": 376
  }, {
    "from": 376,
    "label": "requires",
    "to": 6
  }, {
    "from": 370,
    "label": "initializes",
    "to": 377
  }, {
    "from": 377,
    "label": "requires",
    "to": 4
  }, {
    "from": 378,
    "label": "requires",
    "to": 372
  }, {
    "from": 379,
    "label": "requires",
    "to": 372
  }, {
    "from": 380,
    "label": "requires",
    "to": 2
  }, {
    "from": 381,
    "label": "requires",
    "to": 372
  }, {
    "from": 382,
    "label": "requires",
    "to": 372
  }, {
    "from": 383,
    "label": "requires",
    "to": 372
  }, {
    "from": 384,
    "label": "requires",
    "to": 2
  }, {
    "from": 385,
    "label": "requires",
    "to": 372
  }, {
    "from": 386,
    "label": "requires",
    "to": 2
  }, {
    "from": 387,
    "label": "requires",
    "to": 372
  }, {
    "from": 388,
    "label": "requires",
    "to": 372
  }, {
    "from": 389,
    "label": "requires",
    "to": 2
  }, {
    "from": 390,
    "label": "requires",
    "to": 372
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "constraints",
    "type": "module"
  }, {
    "id": 2,
    "text": "depends",
    "type": "module"
  }, {
    "id": 3,
    "text": "manifest",
    "type": "module"
  }, {
    "id": 4,
    "text": "package",
    "type": "module"
  }, {
    "id": 5,
    "text": "sys",
    "type": "module"
  }, {
    "id": 6,
    "text": "utils",
    "type": "module"
  }, {
    "id": 7,
    "text": "function compareVersions(a, b)\r\n  return parseVersion(a) > parseVersion(b)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function constraint_satisfied(version, constraints)\r\n  local const = parseConstraints(constraints)\r\n  local ver = parseVersion(version)\r\n  if const and ver then\r\n    return matchConstraints(ver, const)\r\n  end\r\n  return nil, \"Error parsing versions.\"\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function find_packages(package_names, manifest)\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n    manifest = manifest or mf.get_manifest()\r\n    assert(type(package_names) == \"table\", \"depends.find_packages: Argument 'package_names' is not a table or string.\")\r\n    assert(type(manifest) == \"table\", \"depends.find_packages: Argument 'manifest' is not a table.\")\r\n\r\n    local packages_found = {}\r\n    -- find matching packages in manifest\r\n    for _, pkg_to_find in pairs(package_names) do\r\n        local pkg_name, pkg_constraint = split_name_constraint(pkg_to_find)\r\n        pkg_name = utils.escape_magic(pkg_name):gsub(\"%%%*\",\".*\")\r\n        for _, repo_pkg in pairs(manifest) do\r\n            if string.match(repo_pkg.name, \"^\" .. pkg_name .. \"$\") and (not pkg_constraint or satisfies_constraint(repo_pkg.version, pkg_constraint)) then\r\n                table.insert(packages_found, repo_pkg)\r\n            end\r\n        end\r\n    end\r\n    return packages_found\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "if type(package_names) == \"string\" then package_names = {package_names} end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "package_names = {package_names}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "manifest = manifest or mf.get_manifest()",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "assert(type(package_names) == \"table\", \"depends.find_packages: Argument 'package_names' is not a table or string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert(type(manifest) == \"table\", \"depends.find_packages: Argument 'manifest' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local packages_found = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for _, pkg_to_find in pairs(package_names) do\r\n        local pkg_name, pkg_constraint = split_name_constraint(pkg_to_find)\r\n        pkg_name = utils.escape_magic(pkg_name):gsub(\"%%%*\",\".*\")\r\n        for _, repo_pkg in pairs(manifest) do\r\n            if string.match(repo_pkg.name, \"^\" .. pkg_name .. \"$\") and (not pkg_constraint or satisfies_constraint(repo_pkg.version, pkg_constraint)) then\r\n                table.insert(packages_found, repo_pkg)\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "local pkg_name, pkg_constraint = split_name_constraint(pkg_to_find)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "pkg_name = utils.escape_magic(pkg_name):gsub(\"%%%*\",\".*\")",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "for _, repo_pkg in pairs(manifest) do\r\n            if string.match(repo_pkg.name, \"^\" .. pkg_name .. \"$\") and (not pkg_constraint or satisfies_constraint(repo_pkg.version, pkg_constraint)) then\r\n                table.insert(packages_found, repo_pkg)\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "if string.match(repo_pkg.name, \"^\" .. pkg_name .. \"$\") and (not pkg_constraint or satisfies_constraint(repo_pkg.version, pkg_constraint)) then\r\n                table.insert(packages_found, repo_pkg)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "table.insert(packages_found, repo_pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function get_installed(deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_installed: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local distinfos_path = sys.make_path(deploy_dir, cfg.distinfos_dir)\r\n    local manifest = {}\r\n\r\n    if not sys.is_dir(distinfos_path) then return {} end\r\n\r\n    -- from all directories of packages installed in deploy_dir\r\n    for dir in sys.get_directory(distinfos_path) do\r\n\r\n        if dir ~= \".\" and dir ~= \"..\" and sys.is_dir(sys.make_path(distinfos_path, dir)) then\r\n            local pkg_dist_dir = sys.make_path(distinfos_path, dir)\r\n\r\n            -- load the dist.info file\r\n            for file in sys.get_directory(pkg_dist_dir) do\r\n                local pkg_dist_file = sys.make_path(pkg_dist_dir, file)\r\n\r\n                if sys.is_file(pkg_dist_file) then\r\n                    table.insert(manifest, mf.load_distinfo(pkg_dist_file))\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n    end\r\n    return manifest\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "deploy_dir = deploy_dir or cfg.root_dir",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "assert(type(deploy_dir) == \"string\", \"depends.get_installed: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "deploy_dir = sys.abs_path(deploy_dir)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local distinfos_path = sys.make_path(deploy_dir, cfg.distinfos_dir)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local manifest = {}",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not sys.is_dir(distinfos_path) then return {} end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "for dir in sys.get_directory(distinfos_path) do\r\n\r\n        if dir ~= \".\" and dir ~= \"..\" and sys.is_dir(sys.make_path(distinfos_path, dir)) then\r\n            local pkg_dist_dir = sys.make_path(distinfos_path, dir)\r\n\r\n            -- load the dist.info file\r\n            for file in sys.get_directory(pkg_dist_dir) do\r\n                local pkg_dist_file = sys.make_path(pkg_dist_dir, file)\r\n\r\n                if sys.is_file(pkg_dist_file) then\r\n                    table.insert(manifest, mf.load_distinfo(pkg_dist_file))\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "if dir ~= \".\" and dir ~= \"..\" and sys.is_dir(sys.make_path(distinfos_path, dir)) then\r\n            local pkg_dist_dir = sys.make_path(distinfos_path, dir)\r\n\r\n            -- load the dist.info file\r\n            for file in sys.get_directory(pkg_dist_dir) do\r\n                local pkg_dist_file = sys.make_path(pkg_dist_dir, file)\r\n\r\n                if sys.is_file(pkg_dist_file) then\r\n                    table.insert(manifest, mf.load_distinfo(pkg_dist_file))\r\n                end\r\n            end\r\n\r\n        end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local pkg_dist_dir = sys.make_path(distinfos_path, dir)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "for file in sys.get_directory(pkg_dist_dir) do\r\n                local pkg_dist_file = sys.make_path(pkg_dist_dir, file)\r\n\r\n                if sys.is_file(pkg_dist_file) then\r\n                    table.insert(manifest, mf.load_distinfo(pkg_dist_file))\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "local pkg_dist_file = sys.make_path(pkg_dist_dir, file)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if sys.is_file(pkg_dist_file) then\r\n                    table.insert(manifest, mf.load_distinfo(pkg_dist_file))\r\n                end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "table.insert(manifest, mf.load_distinfo(pkg_dist_file))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function selected_or_installed(pkg)\r\n    assert(type(pkg) == \"table\", \"depends.selected_or_installed: Argument 'pkg' is not a table.\")\r\n    if pkg.selected == true then\r\n        return \"selected\"\r\n    else\r\n        return \"installed\"\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "assert(type(pkg) == \"table\", \"depends.selected_or_installed: Argument 'pkg' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if pkg.selected == true then\r\n        return \"selected\"\r\n    else\r\n        return \"installed\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function is_installed(package_name, installed_pkgs, version_wanted)\r\n    assert(type(package_name) == \"string\", \"depends.is_installed: Argument 'package_name' is not a string.\")\r\n    assert(type(installed_pkgs) == \"table\", \"depends.is_installed: Argument 'installed_pkgs' is not a table.\")\r\n    assert(type(version_wanted) == \"string\" or type(version_wanted) == \"nil\", \"depends.is_installed: Argument 'version_wanted' is not a string or nil.\")\r\n\r\n    local pkg_is_installed, err = false, nil\r\n\r\n    for _, installed_pkg in pairs(installed_pkgs) do\r\n\r\n        -- check if package_name is in installed\r\n        if package_name == installed_pkg.name then\r\n\r\n            -- check if package is installed in satisfying version\r\n            if not version_wanted or satisfies_constraint(installed_pkg.version, version_wanted) then\r\n                pkg_is_installed = true\r\n                break\r\n            else\r\n                err = \"Package '\" .. package_name .. (version_wanted and \" \" .. version_wanted or \"\") .. \"' needed, but \" .. selected_or_installed(installed_pkg) .. \" at version '\" .. installed_pkg.version .. \"'.\"\r\n                break\r\n            end\r\n        end\r\n\r\n    end\r\n    return pkg_is_installed, err\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert(type(package_name) == \"string\", \"depends.is_installed: Argument 'package_name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert(type(installed_pkgs) == \"table\", \"depends.is_installed: Argument 'installed_pkgs' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert(type(version_wanted) == \"string\" or type(version_wanted) == \"nil\", \"depends.is_installed: Argument 'version_wanted' is not a string or nil.\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local pkg_is_installed, err = false, nil",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "for _, installed_pkg in pairs(installed_pkgs) do\r\n\r\n        -- check if package_name is in installed\r\n        if package_name == installed_pkg.name then\r\n\r\n            -- check if package is installed in satisfying version\r\n            if not version_wanted or satisfies_constraint(installed_pkg.version, version_wanted) then\r\n                pkg_is_installed = true\r\n                break\r\n            else\r\n                err = \"Package '\" .. package_name .. (version_wanted and \" \" .. version_wanted or \"\") .. \"' needed, but \" .. selected_or_installed(installed_pkg) .. \" at version '\" .. installed_pkg.version .. \"'.\"\r\n                break\r\n            end\r\n        end\r\n\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "if package_name == installed_pkg.name then\r\n\r\n            -- check if package is installed in satisfying version\r\n            if not version_wanted or satisfies_constraint(installed_pkg.version, version_wanted) then\r\n                pkg_is_installed = true\r\n                break\r\n            else\r\n                err = \"Package '\" .. package_name .. (version_wanted and \" \" .. version_wanted or \"\") .. \"' needed, but \" .. selected_or_installed(installed_pkg) .. \" at version '\" .. installed_pkg.version .. \"'.\"\r\n                break\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "if not version_wanted or satisfies_constraint(installed_pkg.version, version_wanted) then\r\n                pkg_is_installed = true\r\n                break\r\n            else\r\n                err = \"Package '\" .. package_name .. (version_wanted and \" \" .. version_wanted or \"\") .. \"' needed, but \" .. selected_or_installed(installed_pkg) .. \" at version '\" .. installed_pkg.version .. \"'.\"\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "pkg_is_installed = true",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "err = \"Package '\" .. package_name .. (version_wanted and \" \" .. version_wanted or \"\") .. \"' needed, but \" .. selected_or_installed(installed_pkg) .. \" at version '\" .. installed_pkg.version .. \"'.\"",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n    assert(type(pkg) == \"table\", \"depends.packages_conflicts: Argument 'pkg' is not a table.\")\r\n    assert(type(installed_pkg) == \"table\", \"depends.packages_conflicts: Argument 'installed_pkg' is not a table.\")\r\n    assert(type(was_scm_version) == \"boolean\", \"depends.packages_conflicts: Argument 'was_scm_version' is not a boolean.\")\r\n\r\n    -- check if pkg doesn't provide an already installed_pkg\r\n    if pkg.provides then\r\n        -- for all of pkg's provides\r\n        for _, provided_pkg in pairs(get_provides(pkg)) do\r\n            if provided_pkg.name == installed_pkg.name then\r\n                return \"Package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"' provides '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' but package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' is already \" .. selected_or_installed(installed_pkg) .. \".\"\r\n            end\r\n        end\r\n    end\r\n\r\n    -- check for conflicts of package to install with installed package\r\n    if pkg.conflicts then\r\n        for _, conflict in pairs (pkg.conflicts) do\r\n            if conflict == installed_pkg.name then\r\n                return \"Package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"' conflicts with already \" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"'.\"\r\n            end\r\n        end\r\n    end\r\n\r\n    -- check for conflicts of installed package with package to install\r\n    if installed_pkg.conflicts then\r\n\r\n        -- direct conflicts with 'pkg'\r\n        for _, conflict in pairs (installed_pkg.conflicts) do\r\n            if conflict == pkg.name then\r\n                return \"Already \" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n            end\r\n        end\r\n\r\n        -- conflicts with 'provides' of 'pkg' (packages provided by package to install)\r\n        if pkg.provides then\r\n            for _, conflict in pairs (installed_pkg.conflicts) do\r\n                -- for all of pkg's provides\r\n                for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                    if conflict == provided_pkg.name then\r\n                        return \"Already '\" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' provided by '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    -- no conflicts found\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "assert(type(pkg) == \"table\", \"depends.packages_conflicts: Argument 'pkg' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert(type(installed_pkg) == \"table\", \"depends.packages_conflicts: Argument 'installed_pkg' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert(type(was_scm_version) == \"boolean\", \"depends.packages_conflicts: Argument 'was_scm_version' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if pkg.provides then\r\n        -- for all of pkg's provides\r\n        for _, provided_pkg in pairs(get_provides(pkg)) do\r\n            if provided_pkg.name == installed_pkg.name then\r\n                return \"Package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"' provides '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' but package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' is already \" .. selected_or_installed(installed_pkg) .. \".\"\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "for _, provided_pkg in pairs(get_provides(pkg)) do\r\n            if provided_pkg.name == installed_pkg.name then\r\n                return \"Package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"' provides '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' but package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' is already \" .. selected_or_installed(installed_pkg) .. \".\"\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "if provided_pkg.name == installed_pkg.name then\r\n                return \"Package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"' provides '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' but package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' is already \" .. selected_or_installed(installed_pkg) .. \".\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "if pkg.conflicts then\r\n        for _, conflict in pairs (pkg.conflicts) do\r\n            if conflict == installed_pkg.name then\r\n                return \"Package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"' conflicts with already \" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"'.\"\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "for _, conflict in pairs (pkg.conflicts) do\r\n            if conflict == installed_pkg.name then\r\n                return \"Package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"' conflicts with already \" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"'.\"\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "if conflict == installed_pkg.name then\r\n                return \"Package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"' conflicts with already \" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"'.\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "if installed_pkg.conflicts then\r\n\r\n        -- direct conflicts with 'pkg'\r\n        for _, conflict in pairs (installed_pkg.conflicts) do\r\n            if conflict == pkg.name then\r\n                return \"Already \" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n            end\r\n        end\r\n\r\n        -- conflicts with 'provides' of 'pkg' (packages provided by package to install)\r\n        if pkg.provides then\r\n            for _, conflict in pairs (installed_pkg.conflicts) do\r\n                -- for all of pkg's provides\r\n                for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                    if conflict == provided_pkg.name then\r\n                        return \"Already '\" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' provided by '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "for _, conflict in pairs (installed_pkg.conflicts) do\r\n            if conflict == pkg.name then\r\n                return \"Already \" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 66,
    "text": "if conflict == pkg.name then\r\n                return \"Already \" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "if pkg.provides then\r\n            for _, conflict in pairs (installed_pkg.conflicts) do\r\n                -- for all of pkg's provides\r\n                for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                    if conflict == provided_pkg.name then\r\n                        return \"Already '\" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' provided by '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "for _, conflict in pairs (installed_pkg.conflicts) do\r\n                -- for all of pkg's provides\r\n                for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                    if conflict == provided_pkg.name then\r\n                        return \"Already '\" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' provided by '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n                    end\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 69,
    "text": "for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                    if conflict == provided_pkg.name then\r\n                        return \"Already '\" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' provided by '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 70,
    "text": "if conflict == provided_pkg.name then\r\n                        return \"Already '\" .. selected_or_installed(installed_pkg) .. \" package '\" .. pkg_full_name(installed_pkg.name, installed_pkg.version) .. \"' conflicts with package '\" .. pkg_full_name(provided_pkg.name, provided_pkg.version) .. \"' provided by '\" .. pkg_full_name(pkg.name, pkg.version, was_scm_version) .. \"'.\"\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "local function get_packages_to_install(pkg, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    dependency_parents = dependency_parents or {}\r\n\r\n    -- set helper table 'tmp_installed'\r\n    tmp_installed = tmp_installed or utils.deepcopy(installed)\r\n\r\n    assert(type(pkg) == \"string\", \"depends.get_packages_to_install: Argument 'pkg' is not a string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_packages_to_install: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_packages_to_install: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_packages_to_install: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_packages_to_install: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_packages_to_install: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(dependency_parents) == \"table\", \"depends.get_packages_to_install: Argument 'dependency_parents' is not a table.\")\r\n    assert(type(tmp_installed) == \"table\", \"depends.get_packages_to_install: Argument 'tmp_installed' is not a table.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    --[[ for future debugging:\r\n    print('resolving: '.. pkg)\r\n    print('    installed: ', utils.table_tostring(installed))\r\n    print('    tmp_installed: ', utils.table_tostring(tmp_installed))\r\n    --]]\r\n\r\n    -- check if package is already installed\r\n    local pkg_name, pkg_constraint = split_name_constraint(pkg)\r\n    local pkg_is_installed, err = is_installed(pkg_name, tmp_installed, pkg_constraint)\r\n    if pkg_is_installed then return {} end\r\n    if err then return nil, err end\r\n\r\n    -- table of packages needed to be installed (will be returned)\r\n    local to_install = {}\r\n\r\n    -- find out available versions of 'pkg'\r\n    if not force_no_download then\r\n        local versions, err = package.retrieve_versions(pkg, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n    end\r\n\r\n    -- find candidates & sort them\r\n    local candidates_to_install = find_packages(pkg, manifest)\r\n    if #candidates_to_install == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\"\r\n    end\r\n    candidates_to_install = sort_by_versions(candidates_to_install)\r\n\r\n    for _, pkg in pairs(candidates_to_install) do\r\n\r\n        --for future debugging:\r\n        -- print('  candidate: '.. pkg.name..'-'..pkg.version)\r\n        -- print('      installed: ', utils.table_tostring(installed))\r\n        -- print('      tmp_installed: ', utils.table_tostring(tmp_installed))\r\n        -- print('      to_install: ', utils.table_tostring(to_install))\r\n        -- print('  -is installed: ', is_installed(pkg.name, tmp_installed, pkg_constraint))\r\n        \r\n\r\n        -- if there's an error from previous candidate, print the reason for trying another one\r\n        if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end\r\n\r\n        -- clear the state from previous candidate\r\n        pkg_is_installed, err = false, nil\r\n\r\n        -- check whether this package has already been added to 'tmp_installed' by another of its candidates\r\n        pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)\r\n        if pkg_is_installed then break end\r\n\r\n        local was_scm_version = false\r\n        if pkg.version == \"scm\" then was_scm_version = true end\r\n\r\n        -- download info about the package\r\n        if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path to downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end\r\n\r\n        -- check arch & type\r\n        if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end\r\n\r\n        -- checks for conflicts with other installed (or previously selected) packages\r\n        if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end\r\n\r\n        -- if pkg passed all of the above tests\r\n        if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end\r\n    end\r\n\r\n    -- if package is not installed and no suitable candidates were found, return the last error\r\n    if #to_install == 0 and not pkg_is_installed then\r\n        return nil, err\r\n    else\r\n        return to_install\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "force_no_download = force_no_download or false",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "suppress_printing = suppress_printing or false",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "dependency_parents = dependency_parents or {}",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "tmp_installed = tmp_installed or utils.deepcopy(installed)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "assert(type(pkg) == \"string\", \"depends.get_packages_to_install: Argument 'pkg' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert(type(installed) == \"table\", \"depends.get_packages_to_install: Argument 'installed' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert(type(manifest) == \"table\", \"depends.get_packages_to_install: Argument 'manifest' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert(type(force_no_download) == \"boolean\", \"depends.get_packages_to_install: Argument 'force_no_download' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert(type(suppress_printing) == \"boolean\", \"depends.get_packages_to_install: Argument 'suppress_printing' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert(type(deploy_dir) == \"string\", \"depends.get_packages_to_install: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert(type(dependency_parents) == \"table\", \"depends.get_packages_to_install: Argument 'dependency_parents' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "assert(type(tmp_installed) == \"table\", \"depends.get_packages_to_install: Argument 'tmp_installed' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "local pkg_name, pkg_constraint = split_name_constraint(pkg)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local pkg_is_installed, err = is_installed(pkg_name, tmp_installed, pkg_constraint)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "if pkg_is_installed then return {} end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "local to_install = {}",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if not force_no_download then\r\n        local versions, err = package.retrieve_versions(pkg, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "local versions, err = package.retrieve_versions(pkg, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if not versions then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "table.insert(manifest, version)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "local candidates_to_install = find_packages(pkg, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if #candidates_to_install == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "candidates_to_install = sort_by_versions(candidates_to_install)",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "for _, pkg in pairs(candidates_to_install) do\r\n\r\n        --for future debugging:\r\n        -- print('  candidate: '.. pkg.name..'-'..pkg.version)\r\n        -- print('      installed: ', utils.table_tostring(installed))\r\n        -- print('      tmp_installed: ', utils.table_tostring(tmp_installed))\r\n        -- print('      to_install: ', utils.table_tostring(to_install))\r\n        -- print('  -is installed: ', is_installed(pkg.name, tmp_installed, pkg_constraint))\r\n        \r\n\r\n        -- if there's an error from previous candidate, print the reason for trying another one\r\n        if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end\r\n\r\n        -- clear the state from previous candidate\r\n        pkg_is_installed, err = false, nil\r\n\r\n        -- check whether this package has already been added to 'tmp_installed' by another of its candidates\r\n        pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)\r\n        if pkg_is_installed then break end\r\n\r\n        local was_scm_version = false\r\n        if pkg.version == \"scm\" then was_scm_version = true end\r\n\r\n        -- download info about the package\r\n        if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path to downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end\r\n\r\n        -- check arch & type\r\n        if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end\r\n\r\n        -- checks for conflicts with other installed (or previously selected) packages\r\n        if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end\r\n\r\n        -- if pkg passed all of the above tests\r\n        if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 99,
    "text": "if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "print(\" - trying another candidate due to: \" .. err)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "pkg_is_installed, err = false, nil",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "if pkg_is_installed then break end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "local was_scm_version = false",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if pkg.version == \"scm\" then was_scm_version = true end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "was_scm_version = true",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path to downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "local path_or_err",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path to downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "err = \"Error when resolving dependencies: \" .. path_or_err",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "pkg.download_dir = path_or_err",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "err = packages_conflicts(pkg, installed_pkg, was_scm_version)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if err then break end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "table.insert(dependency_parents, pkg.name)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 124,
    "text": "if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end",
    "type": "statement:genericfor"
  }, {
    "id": 127,
    "text": "table.insert(pkg.depends, os_specific_depend)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 129,
    "text": "if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "local dep_name = split_name_constraint(depend)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local is_circular_dependency = false",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end",
    "type": "statement:genericfor"
  }, {
    "id": 133,
    "text": "if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "is_circular_dependency = true",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end",
    "type": "statement:genericfor"
  }, {
    "id": 139,
    "text": "table.insert(to_install, depend_to_install)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "table.insert(tmp_installed, depend_to_install)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "table.insert(installed, depend_to_install)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "table.remove(dependency_parents)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "pkg.selected = true",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "table.insert(tmp_installed, pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 150,
    "text": "provided_pkg.selected = true",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "table.insert(tmp_installed, provided_pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "table.insert(to_install, pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "sys.delete(pkg.download_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "to_install = {}",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "tmp_installed = utils.deepcopy(installed)",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 158,
    "text": "for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 159,
    "text": "if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "if #to_install == 0 and not pkg_is_installed then\r\n        return nil, err\r\n    else\r\n        return to_install\r\n    end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function get_depends(packages, installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n    if not packages then return {} end\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(packages) == \"string\" then packages = {packages} end\r\n\r\n    assert(type(packages) == \"table\", \"depends.get_depends: Argument 'packages' is not a table or string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_depends: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_depends: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_depends: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_depends: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_depends: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local tmp_installed = utils.deepcopy(installed)\r\n\r\n    -- print(utils.table_tostring(tmp_installed))\r\n\r\n    -- add provided packages to installed ones\r\n    for _, installed_pkg in pairs(tmp_installed) do\r\n        for _, pkg in pairs(get_provides(installed_pkg)) do\r\n            table.insert(tmp_installed, pkg)\r\n        end\r\n    end\r\n\r\n    -- print(utils.table_tostring(tmp_installed))\r\n\r\n    local to_install = {}\r\n\r\n    -- get packages needed to to satisfy dependencies\r\n    for _, pkg in pairs(packages) do\r\n\r\n        local needed_to_install, err = get_packages_to_install(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n        --print(utils.table_tostring(needed_to_install))\r\n        if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot install package '\" .. pkg .. \"': \".. err\r\n        end\r\n    end\r\n    \r\n    return to_install\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "if not packages then return {} end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "if type(packages) == \"string\" then packages = {packages} end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "packages = {packages}",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "assert(type(packages) == \"table\", \"depends.get_depends: Argument 'packages' is not a table or string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert(type(installed) == \"table\", \"depends.get_depends: Argument 'installed' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "assert(type(manifest) == \"table\", \"depends.get_depends: Argument 'manifest' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "assert(type(force_no_download) == \"boolean\", \"depends.get_depends: Argument 'force_no_download' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "assert(type(suppress_printing) == \"boolean\", \"depends.get_depends: Argument 'suppress_printing' is not a boolean.\")",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "assert(type(deploy_dir) == \"string\", \"depends.get_depends: Argument 'deploy_dir' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "local tmp_installed = utils.deepcopy(installed)",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "for _, installed_pkg in pairs(tmp_installed) do\r\n        for _, pkg in pairs(get_provides(installed_pkg)) do\r\n            table.insert(tmp_installed, pkg)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 174,
    "text": "for _, pkg in pairs(get_provides(installed_pkg)) do\r\n            table.insert(tmp_installed, pkg)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 175,
    "text": "for _, pkg in pairs(packages) do\r\n\r\n        local needed_to_install, err = get_packages_to_install(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n        --print(utils.table_tostring(needed_to_install))\r\n        if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot install package '\" .. pkg .. \"': \".. err\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 176,
    "text": "local needed_to_install, err = get_packages_to_install(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot install package '\" .. pkg .. \"': \".. err\r\n        end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 179,
    "text": "table.insert(to_install, needed_pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "table.insert(tmp_installed, needed_pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 182,
    "text": "provided_pkg.selected = needed_pkg.selected",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function get_provides(package)\r\n    assert(type(package) == \"table\", \"depends.get_provides: Argument 'package' is not a table.\")\r\n    if not package.provides then return {} end\r\n\r\n    local provided = {}\r\n    for _, provided_name in pairs(package.provides) do\r\n        local pkg = {}\r\n        pkg.name, pkg.version = split_name_constraint(provided_name)\r\n        pkg.type = package.type\r\n        pkg.arch = package.arch\r\n        pkg.provided = package.name .. \"-\" .. package.version\r\n        table.insert(provided, pkg)\r\n    end\r\n    return provided\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "assert(type(package) == \"table\", \"depends.get_provides: Argument 'package' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "if not package.provides then return {} end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "local provided = {}",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "for _, provided_name in pairs(package.provides) do\r\n        local pkg = {}\r\n        pkg.name, pkg.version = split_name_constraint(provided_name)\r\n        pkg.type = package.type\r\n        pkg.arch = package.arch\r\n        pkg.provided = package.name .. \"-\" .. package.version\r\n        table.insert(provided, pkg)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 190,
    "text": "local pkg = {}",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "pkg.name, pkg.version = split_name_constraint(provided_name)",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "pkg.type = package.type",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "pkg.arch = package.arch",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "pkg.provided = package.name .. \"-\" .. package.version",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "table.insert(provided, pkg)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function split_name_constraint(version_constraint)\r\n    assert(type(version_constraint) == \"string\", \"depends.split_name_constraint: Argument 'version_constraint' is not a string.\")\r\n\r\n    local split = version_constraint:find(\"[%s=~<>-]+%d\") or version_constraint:find(\"[%s=~<>-]+scm\")\r\n\r\n    if split then\r\n        return version_constraint:sub(1, split - 1), version_constraint:sub(split):gsub(\"[%s-]\", \"\")\r\n    else\r\n        return version_constraint, nil\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "assert(type(version_constraint) == \"string\", \"depends.split_name_constraint: Argument 'version_constraint' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "local split = version_constraint:find(\"[%s=~<>-]+%d\") or version_constraint:find(\"[%s=~<>-]+scm\")",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "if split then\r\n        return version_constraint:sub(1, split - 1), version_constraint:sub(split):gsub(\"[%s-]\", \"\")\r\n    else\r\n        return version_constraint, nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 202,
    "text": "function filter_packages_by_arch_and_type(packages, req_arch, req_type)\r\n    assert(type(packages) == \"table\", \"depends.filter_packages_by_arch_and_type: Argument 'packages' is not a table.\")\r\n    assert(type(req_arch) == \"string\", \"depends.filter_packages_by_arch_and_type: Argument 'req_arch' is not a string.\")\r\n    assert(type(req_type) == \"string\", \"depends.filter_packages_by_arch_and_type: Argument 'pkg_type' is not a string.\")\r\n\r\n    return utils.filter(packages,\r\n                        function (pkg)\r\n                                return (pkg.arch == \"Universal\" or pkg.arch == req_arch) and\r\n                                        (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == req_type)\r\n                                end)\r\nend",
    "type": "function"
  }, {
    "id": 203,
    "text": "assert(type(packages) == \"table\", \"depends.filter_packages_by_arch_and_type: Argument 'packages' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "assert(type(req_arch) == \"string\", \"depends.filter_packages_by_arch_and_type: Argument 'req_arch' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "assert(type(req_type) == \"string\", \"depends.filter_packages_by_arch_and_type: Argument 'pkg_type' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function filter_packages_by_strings(packages, strings, search_in_desc)\r\n    if type(strings) == \"string\" then strings = {strings} end\r\n    assert(type(packages) == \"table\", \"depends.filter_packages_by_strings: Argument 'packages' is not a table.\")\r\n    assert(type(strings) == \"table\", \"depends.filter_packages_by_strings: Argument 'strings' is not a string or table.\")\r\n\r\n    if #strings ~= 0 then\r\n        return utils.filter(packages,\r\n                            function (pkg)\r\n                                    for _,str in pairs(strings) do\r\n                                        local name = pkg.name .. \"-\" .. pkg.version\r\n                                        if search_in_desc then\r\n                                            name = name .. \" \" .. (pkg.desc or \"\")\r\n                                        end\r\n                                        if string.find(string.lower(name), string.lower(str), 1 ,true) ~= nil then return true end\r\n                                    end\r\n                                end)\r\n    else\r\n        return packages\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "if type(strings) == \"string\" then strings = {strings} end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "strings = {strings}",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "assert(type(packages) == \"table\", \"depends.filter_packages_by_strings: Argument 'packages' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "assert(type(strings) == \"table\", \"depends.filter_packages_by_strings: Argument 'strings' is not a string or table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "if #strings ~= 0 then\r\n        return utils.filter(packages,\r\n                            function (pkg)\r\n                                    for _,str in pairs(strings) do\r\n                                        local name = pkg.name .. \"-\" .. pkg.version\r\n                                        if search_in_desc then\r\n                                            name = name .. \" \" .. (pkg.desc or \"\")\r\n                                        end\r\n                                        if string.find(string.lower(name), string.lower(str), 1 ,true) ~= nil then return true end\r\n                                    end\r\n                                end)\r\n    else\r\n        return packages\r\n    end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "for _,str in pairs(strings) do\r\n                                        local name = pkg.name .. \"-\" .. pkg.version\r\n                                        if search_in_desc then\r\n                                            name = name .. \" \" .. (pkg.desc or \"\")\r\n                                        end\r\n                                        if string.find(string.lower(name), string.lower(str), 1 ,true) ~= nil then return true end\r\n                                    end",
    "type": "statement:genericfor"
  }, {
    "id": 214,
    "text": "local name = pkg.name .. \"-\" .. pkg.version",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "if search_in_desc then\r\n                                            name = name .. \" \" .. (pkg.desc or \"\")\r\n                                        end",
    "type": "statement:if"
  }, {
    "id": 216,
    "text": "name = name .. \" \" .. (pkg.desc or \"\")",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "if string.find(string.lower(name), string.lower(str), 1 ,true) ~= nil then return true end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function pkg_full_name(name, version, was_scm_version)\r\n    name = name or \"\"\r\n    version = version or \"\"\r\n    if type(version) == \"number\" then version = tostring(version) end\r\n\r\n    assert(type(name) == \"string\", \"depends.pkg_full_name: Argument 'name' is not a string.\")\r\n    assert(type(version) == \"string\", \"depends.pkg_full_name: Argument 'version' is not a string.\")\r\n\r\n    if was_scm_version then version = version .. \" [scm version]\" end\r\n\r\n    if name == \"\" then\r\n        return \"<unknown>\"\r\n    else\r\n        return name .. ((version ~= \"\") and \"-\" .. version or \"\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 220,
    "text": "name = name or \"\"",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "version = version or \"\"",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "if type(version) == \"number\" then version = tostring(version) end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "version = tostring(version)",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "assert(type(name) == \"string\", \"depends.pkg_full_name: Argument 'name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "assert(type(version) == \"string\", \"depends.pkg_full_name: Argument 'version' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "if was_scm_version then version = version .. \" [scm version]\" end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "version = version .. \" [scm version]\"",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "if name == \"\" then\r\n        return \"<unknown>\"\r\n    else\r\n        return name .. ((version ~= \"\") and \"-\" .. version or \"\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function sort_by_versions(packages)\r\n    assert(type(packages) == \"table\", \"depends.sort_by_versions: Argument 'packages' is not a table.\")\r\n    return utils.sort(packages, function (a, b) return compare_versions(a.version, b.version) end)\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "assert(type(packages) == \"table\", \"depends.sort_by_versions: Argument 'packages' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function sort_by_names(packages)\r\n    assert(type(packages) == \"table\", \"depends.sort_by_names: Argument 'packages' is not a table.\")\r\n    return utils.sort(packages, function (a, b)\r\n                        if a.name == b.name then\r\n                            return compare_versions(a.version, b.version)\r\n                        else\r\n                            return a.name < b.name\r\n                        end\r\n                     end)\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "assert(type(packages) == \"table\", \"depends.sort_by_names: Argument 'packages' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "if a.name == b.name then\r\n                            return compare_versions(a.version, b.version)\r\n                        else\r\n                            return a.name < b.name\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function satisfies_constraint(version, constraint)\r\n    assert(type(version) == \"string\", \"depends.satisfies_constraint: Argument 'version' is not a string.\")\r\n    assert(type(constraint) == \"string\", \"depends.satisfies_constraint: Argument 'constraint' is not a string.\")\r\n    return const.constraint_satisfied(version, constraint)\r\nend",
    "type": "function"
  }, {
    "id": 238,
    "text": "assert(type(version) == \"string\", \"depends.satisfies_constraint: Argument 'version' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "assert(type(constraint) == \"string\", \"depends.satisfies_constraint: Argument 'constraint' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "function compare_versions(version_a, version_b)\r\n    assert(type(version_a) == \"string\", \"depends.compare_versions: Argument 'version_a' is not a string.\")\r\n    assert(type(version_b) == \"string\", \"depends.compare_versions: Argument 'version_b' is not a string.\")\r\n    return const.compareVersions(version_a, version_b)\r\nend",
    "type": "function"
  }, {
    "id": 242,
    "text": "assert(type(version_a) == \"string\", \"depends.compare_versions: Argument 'version_a' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "assert(type(version_b) == \"string\", \"depends.compare_versions: Argument 'version_b' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function dependency_manifest(module, dep_manifest, dep_cache)\r\n    dep_manifest = dep_manifest or {}\r\n    dep_cache = dep_cache or {}\r\n    assert(type(module) == \"string\", \"depends.dependency_manifest: Argument 'module' is not a string.\")\r\n    assert(type(dep_cache) == \"table\", \"depends.dependency_manifest: Argument 'dep_cache' is not a table.\")\r\n    assert(type(dep_manifest) == \"table\", \"depends.dependency_manifest: Argument 'dep_manifest' is not a table.\")\r\n\r\n    local dep_manifest = utils.deepcopy(dep_manifest)\r\n    local dep_cache = utils.deepcopy(dep_cache)\r\n    local name, constraint = split_name_constraint(module)\r\n    local name_ver = name .. (constraint and \"-\" .. constraint or \"\")\r\n\r\n    -- if info about the module is in cache and cache not disabled, use it\r\n    if constraint and dep_cache[name_ver] and cfg.dep_cache then\r\n        dep_manifest[name_ver] = dep_cache[name_ver]\r\n    else\r\n        local manifest, err = mf.get_manifest()\r\n        if not manifest then return nil, \"Error when getting manifest: \" .. err end\r\n\r\n        -- find out available versions of package\r\n        local versions, err = package.retrieve_versions(name, manifest, not cfg.debug)\r\n        if not versions then return nil, err end\r\n\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        -- find the module's package\r\n        local candidates = find_packages(name_ver, manifest)\r\n        if #candidates == 0 then return nil, \"Package '\" .. name_ver .. \"' not found.\" end\r\n\r\n        candidates = sort_by_versions(candidates)\r\n        name_ver = candidates[1].name .. \"-\" .. candidates[1].version\r\n\r\n        -- if info about the module isn't in cache or cache disabled, download it\r\n        if dep_cache[name_ver] and cfg.dep_cache then\r\n             dep_manifest[name_ver] = dep_cache[name_ver]\r\n        else\r\n            -- download the dependency info\r\n            local download_dir = sys.abs_path(sys.make_path(cfg.root_dir, cfg.temp_dir))\r\n            local downloaded_path, err = package.fetch_pkgs({candidates[1]}, download_dir, not cfg.debug)\r\n            if not downloaded_path then return nil, err end\r\n\r\n            local distinfo = sys.make_path(downloaded_path[1], \"dist.info\")\r\n            local dist_info, err = mf.load_distinfo(distinfo)\r\n            if not dist_info then return nil, \"Error when loading dist.info file '\" .. distinfo .. \"': \" .. err end\r\n\r\n            -- add information about this package to the cache\r\n            if not dep_manifest[name_ver] then dep_manifest[name_ver] = {} end\r\n            dep_manifest[name_ver].name = dist_info.name\r\n            dep_manifest[name_ver].version = dist_info.version\r\n            dep_manifest[name_ver].path = candidates[1].path\r\n            dep_manifest[name_ver].depends = dist_info.depends\r\n\r\n            -- add also to cache\r\n            dep_cache[name_ver] = dep_manifest[name_ver]\r\n        end\r\n    end\r\n\r\n    -- resolve dependencies\r\n    if dep_manifest[name_ver].depends then\r\n\r\n        if not dep_manifest[name_ver].satisfied_by then\r\n            dep_manifest[name_ver].satisfied_by = {}\r\n        end\r\n\r\n        -- collect all OS specific dependencies of pkg\r\n        for k, dep in pairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) == \"table\" then\r\n                if k == cfg.arch then\r\n                    for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- get dependency information of this module's dependencies\r\n        for _, dep in ipairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) ~= \"table\" then\r\n                local satisfying = dep_manifest[name_ver].satisfied_by[dep]\r\n                if satisfying then dep = satisfying end\r\n\r\n                dep_manifest, dep_cache_or_err, satisfying = dependency_manifest(dep, dep_manifest, dep_cache)\r\n                if not dep_manifest then return nil, dep_cache_or_err end\r\n                dep_cache = dep_cache_or_err\r\n\r\n                -- add 'satisfied-by' info\r\n                dep_manifest[name_ver].satisfied_by[dep] = satisfying\r\n                dep_cache[name_ver].satisfied_by[dep] = satisfying\r\n            end\r\n        end\r\n    end\r\n\r\n    return dep_manifest, dep_cache, name_ver\r\nend",
    "type": "function"
  }, {
    "id": 246,
    "text": "dep_manifest = dep_manifest or {}",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "dep_cache = dep_cache or {}",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "assert(type(module) == \"string\", \"depends.dependency_manifest: Argument 'module' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "assert(type(dep_cache) == \"table\", \"depends.dependency_manifest: Argument 'dep_cache' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "assert(type(dep_manifest) == \"table\", \"depends.dependency_manifest: Argument 'dep_manifest' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "local dep_manifest = utils.deepcopy(dep_manifest)",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "local dep_cache = utils.deepcopy(dep_cache)",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "local name, constraint = split_name_constraint(module)",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "local name_ver = name .. (constraint and \"-\" .. constraint or \"\")",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "if constraint and dep_cache[name_ver] and cfg.dep_cache then\r\n        dep_manifest[name_ver] = dep_cache[name_ver]\r\n    else\r\n        local manifest, err = mf.get_manifest()\r\n        if not manifest then return nil, \"Error when getting manifest: \" .. err end\r\n\r\n        -- find out available versions of package\r\n        local versions, err = package.retrieve_versions(name, manifest, not cfg.debug)\r\n        if not versions then return nil, err end\r\n\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        -- find the module's package\r\n        local candidates = find_packages(name_ver, manifest)\r\n        if #candidates == 0 then return nil, \"Package '\" .. name_ver .. \"' not found.\" end\r\n\r\n        candidates = sort_by_versions(candidates)\r\n        name_ver = candidates[1].name .. \"-\" .. candidates[1].version\r\n\r\n        -- if info about the module isn't in cache or cache disabled, download it\r\n        if dep_cache[name_ver] and cfg.dep_cache then\r\n             dep_manifest[name_ver] = dep_cache[name_ver]\r\n        else\r\n            -- download the dependency info\r\n            local download_dir = sys.abs_path(sys.make_path(cfg.root_dir, cfg.temp_dir))\r\n            local downloaded_path, err = package.fetch_pkgs({candidates[1]}, download_dir, not cfg.debug)\r\n            if not downloaded_path then return nil, err end\r\n\r\n            local distinfo = sys.make_path(downloaded_path[1], \"dist.info\")\r\n            local dist_info, err = mf.load_distinfo(distinfo)\r\n            if not dist_info then return nil, \"Error when loading dist.info file '\" .. distinfo .. \"': \" .. err end\r\n\r\n            -- add information about this package to the cache\r\n            if not dep_manifest[name_ver] then dep_manifest[name_ver] = {} end\r\n            dep_manifest[name_ver].name = dist_info.name\r\n            dep_manifest[name_ver].version = dist_info.version\r\n            dep_manifest[name_ver].path = candidates[1].path\r\n            dep_manifest[name_ver].depends = dist_info.depends\r\n\r\n            -- add also to cache\r\n            dep_cache[name_ver] = dep_manifest[name_ver]\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "dep_manifest[name_ver] = dep_cache[name_ver]",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "local manifest, err = mf.get_manifest()",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "if not manifest then return nil, \"Error when getting manifest: \" .. err end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "local versions, err = package.retrieve_versions(name, manifest, not cfg.debug)",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "local candidates = find_packages(name_ver, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "if #candidates == 0 then return nil, \"Package '\" .. name_ver .. \"' not found.\" end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "candidates = sort_by_versions(candidates)",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "name_ver = candidates[1].name .. \"-\" .. candidates[1].version",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "if dep_cache[name_ver] and cfg.dep_cache then\r\n             dep_manifest[name_ver] = dep_cache[name_ver]\r\n        else\r\n            -- download the dependency info\r\n            local download_dir = sys.abs_path(sys.make_path(cfg.root_dir, cfg.temp_dir))\r\n            local downloaded_path, err = package.fetch_pkgs({candidates[1]}, download_dir, not cfg.debug)\r\n            if not downloaded_path then return nil, err end\r\n\r\n            local distinfo = sys.make_path(downloaded_path[1], \"dist.info\")\r\n            local dist_info, err = mf.load_distinfo(distinfo)\r\n            if not dist_info then return nil, \"Error when loading dist.info file '\" .. distinfo .. \"': \" .. err end\r\n\r\n            -- add information about this package to the cache\r\n            if not dep_manifest[name_ver] then dep_manifest[name_ver] = {} end\r\n            dep_manifest[name_ver].name = dist_info.name\r\n            dep_manifest[name_ver].version = dist_info.version\r\n            dep_manifest[name_ver].path = candidates[1].path\r\n            dep_manifest[name_ver].depends = dist_info.depends\r\n\r\n            -- add also to cache\r\n            dep_cache[name_ver] = dep_manifest[name_ver]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "local download_dir = sys.abs_path(sys.make_path(cfg.root_dir, cfg.temp_dir))",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "local downloaded_path, err = package.fetch_pkgs({candidates[1]}, download_dir, not cfg.debug)",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "if not downloaded_path then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "local distinfo = sys.make_path(downloaded_path[1], \"dist.info\")",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "local dist_info, err = mf.load_distinfo(distinfo)",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "if not dist_info then return nil, \"Error when loading dist.info file '\" .. distinfo .. \"': \" .. err end",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "if not dep_manifest[name_ver] then dep_manifest[name_ver] = {} end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "dep_manifest[name_ver] = {}",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "dep_manifest[name_ver].name = dist_info.name",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "dep_manifest[name_ver].version = dist_info.version",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "dep_manifest[name_ver].path = candidates[1].path",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "dep_manifest[name_ver].depends = dist_info.depends",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "dep_cache[name_ver] = dep_manifest[name_ver]",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "if dep_manifest[name_ver].depends then\r\n\r\n        if not dep_manifest[name_ver].satisfied_by then\r\n            dep_manifest[name_ver].satisfied_by = {}\r\n        end\r\n\r\n        -- collect all OS specific dependencies of pkg\r\n        for k, dep in pairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) == \"table\" then\r\n                if k == cfg.arch then\r\n                    for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- get dependency information of this module's dependencies\r\n        for _, dep in ipairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) ~= \"table\" then\r\n                local satisfying = dep_manifest[name_ver].satisfied_by[dep]\r\n                if satisfying then dep = satisfying end\r\n\r\n                dep_manifest, dep_cache_or_err, satisfying = dependency_manifest(dep, dep_manifest, dep_cache)\r\n                if not dep_manifest then return nil, dep_cache_or_err end\r\n                dep_cache = dep_cache_or_err\r\n\r\n                -- add 'satisfied-by' info\r\n                dep_manifest[name_ver].satisfied_by[dep] = satisfying\r\n                dep_cache[name_ver].satisfied_by[dep] = satisfying\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "if not dep_manifest[name_ver].satisfied_by then\r\n            dep_manifest[name_ver].satisfied_by = {}\r\n        end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "dep_manifest[name_ver].satisfied_by = {}",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "for k, dep in pairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) == \"table\" then\r\n                if k == cfg.arch then\r\n                    for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 282,
    "text": "if type(dep) == \"table\" then\r\n                if k == cfg.arch then\r\n                    for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "if k == cfg.arch then\r\n                    for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 285,
    "text": "table.insert(dep_manifest[name_ver].depends, os_specific_depend)",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "for _, dep in ipairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) ~= \"table\" then\r\n                local satisfying = dep_manifest[name_ver].satisfied_by[dep]\r\n                if satisfying then dep = satisfying end\r\n\r\n                dep_manifest, dep_cache_or_err, satisfying = dependency_manifest(dep, dep_manifest, dep_cache)\r\n                if not dep_manifest then return nil, dep_cache_or_err end\r\n                dep_cache = dep_cache_or_err\r\n\r\n                -- add 'satisfied-by' info\r\n                dep_manifest[name_ver].satisfied_by[dep] = satisfying\r\n                dep_cache[name_ver].satisfied_by[dep] = satisfying\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 287,
    "text": "if type(dep) ~= \"table\" then\r\n                local satisfying = dep_manifest[name_ver].satisfied_by[dep]\r\n                if satisfying then dep = satisfying end\r\n\r\n                dep_manifest, dep_cache_or_err, satisfying = dependency_manifest(dep, dep_manifest, dep_cache)\r\n                if not dep_manifest then return nil, dep_cache_or_err end\r\n                dep_cache = dep_cache_or_err\r\n\r\n                -- add 'satisfied-by' info\r\n                dep_manifest[name_ver].satisfied_by[dep] = satisfying\r\n                dep_cache[name_ver].satisfied_by[dep] = satisfying\r\n            end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "local satisfying = dep_manifest[name_ver].satisfied_by[dep]",
    "type": "statement:localassign"
  }, {
    "id": 289,
    "text": "if satisfying then dep = satisfying end",
    "type": "statement:if"
  }, {
    "id": 290,
    "text": "dep = satisfying",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "dep_manifest, dep_cache_or_err, satisfying = dependency_manifest(dep, dep_manifest, dep_cache)",
    "type": "statement:assign"
  }, {
    "id": 292,
    "text": "if not dep_manifest then return nil, dep_cache_or_err end",
    "type": "statement:if"
  }, {
    "id": 293,
    "text": "dep_cache = dep_cache_or_err",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "dep_manifest[name_ver].satisfied_by[dep] = satisfying",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "dep_cache[name_ver].satisfied_by[dep] = satisfying",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 297,
    "text": "function newest_version(package, versions)\r\n    assert(type(package) == \"table\", \"depends.newest_version: Argument 'packages' is not a table or string.\")\r\n    assert(type(versions) == \"table\", \"depends.newest_version: Argument 'versions' is not a table or string.\")\r\n\r\n    local new = {}\r\n\r\n    for _, ver in pairs(versions) do\r\n        if const.compareVersions(ver.version, package.version) then\r\n            table.insert(new, ver)\r\n        end\r\n    end\r\n\r\n    return new\r\nend",
    "type": "function"
  }, {
    "id": 298,
    "text": "assert(type(package) == \"table\", \"depends.newest_version: Argument 'packages' is not a table or string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "assert(type(versions) == \"table\", \"depends.newest_version: Argument 'versions' is not a table or string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "local new = {}",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "for _, ver in pairs(versions) do\r\n        if const.compareVersions(ver.version, package.version) then\r\n            table.insert(new, ver)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 302,
    "text": "if const.compareVersions(ver.version, package.version) then\r\n            table.insert(new, ver)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 303,
    "text": "table.insert(new, ver)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 305,
    "text": "local function get_packages_to_install_1(pkg, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    dependency_parents = dependency_parents or {}\r\n\r\n    -- set helper table 'tmp_installed'\r\n    tmp_installed = tmp_installed or utils.deepcopy(installed)\r\n\r\n    assert(type(pkg) == \"string\", \"depends.get_packages_to_install: Argument 'pkg' is not a string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_packages_to_install: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_packages_to_install: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_packages_to_install: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_packages_to_install: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_packages_to_install: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(dependency_parents) == \"table\", \"depends.get_packages_to_install: Argument 'dependency_parents' is not a table.\")\r\n    assert(type(tmp_installed) == \"table\", \"depends.get_packages_to_install: Argument 'tmp_installed' is not a table.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    --[[ for future debugging:\r\n    print('resolving: '.. pkg)\r\n    print('    installed: ', utils.table_tostring(installed))\r\n    print('    tmp_installed: ', utils.table_tostring(tmp_installed))\r\n    --]]\r\n\r\n    -- check if package is already installed\r\n    local pkg_name, pkg_constraint = split_name_constraint(pkg)\r\n    local pkg_is_installed, err = is_installed(pkg_name, tmp_installed, pkg_constraint)\r\n    if not pkg_is_installed then return {} end\r\n    if err then return nil, err end\r\n\r\n    local pkg_to_update = find_packages(pkg, installed)\r\n\r\n    -- table of packages needed to be installed (will be returned)\r\n    local to_install = {}\r\n\r\n    -- find out available versions of 'pkg'\r\n    if not force_no_download then\r\n        local versions, err = package.retrieve_versions(pkg, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n    end\r\n    --print(utils.table_tostring(manifest))\r\n\r\n    -- find candidates & sort them\r\n    local candidate_to_update = find_packages(pkg, manifest)\r\n    if #candidate_to_update == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\"\r\n    end\r\n    \r\n    candidate_to_update = newest_version(pkg_to_update[1], sort_by_versions(candidate_to_update))\r\n\r\n    for _, pkg in pairs(candidate_to_update) do\r\n\r\n        --for future debugging:\r\n        --print('  candidate: '.. pkg.name..'-'..pkg.version)\r\n        --print('      installed: ', utils.table_tostring(installed))\r\n        --print('      tmp_installed: ', utils.table_tostring(tmp_installed))\r\n        --print('      to_install: ', utils.table_tostring(to_install))\r\n        --print('  -is installed: ', is_installed(pkg.name, tmp_installed, pkg_constraint))\r\n        \r\n\r\n        -- if there's an error from previous candidate, print the reason for trying another one\r\n        if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end\r\n\r\n        -- clear the state from previous candidate\r\n        pkg_is_installed, err = false, nil\r\n\r\n        -- check whether this package has already been added to 'tmp_installed' by another of its candidates\r\n        --pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)\r\n        --if pkg_is_installed then break end\r\n\r\n        local was_scm_version = false\r\n        if pkg.version == \"scm\" then was_scm_version = true end\r\n\r\n        -- download info about the package\r\n        if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path ot downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end\r\n\r\n        -- check arch & type\r\n        if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end\r\n\r\n        -- checks for conflicts with other installed (or previously selected) packages\r\n        if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end\r\n\r\n        -- if pkg passed all of the above tests\r\n        if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n                break\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end\r\n    end\r\n\r\n    -- if package is not installed and no suitable candidates were found, return the last error\r\n    if #to_install == 0 and not pkg_is_installed then\r\n        return nil, err\r\n    else\r\n        return to_install\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 306,
    "text": "if not pkg_is_installed then return {} end",
    "type": "statement:if"
  }, {
    "id": 307,
    "text": "local pkg_to_update = find_packages(pkg, installed)",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "local candidate_to_update = find_packages(pkg, manifest)",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "if #candidate_to_update == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 310,
    "text": "candidate_to_update = newest_version(pkg_to_update[1], sort_by_versions(candidate_to_update))",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "for _, pkg in pairs(candidate_to_update) do\r\n\r\n        --for future debugging:\r\n        --print('  candidate: '.. pkg.name..'-'..pkg.version)\r\n        --print('      installed: ', utils.table_tostring(installed))\r\n        --print('      tmp_installed: ', utils.table_tostring(tmp_installed))\r\n        --print('      to_install: ', utils.table_tostring(to_install))\r\n        --print('  -is installed: ', is_installed(pkg.name, tmp_installed, pkg_constraint))\r\n        \r\n\r\n        -- if there's an error from previous candidate, print the reason for trying another one\r\n        if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end\r\n\r\n        -- clear the state from previous candidate\r\n        pkg_is_installed, err = false, nil\r\n\r\n        -- check whether this package has already been added to 'tmp_installed' by another of its candidates\r\n        --pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)\r\n        --if pkg_is_installed then break end\r\n\r\n        local was_scm_version = false\r\n        if pkg.version == \"scm\" then was_scm_version = true end\r\n\r\n        -- download info about the package\r\n        if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path ot downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end\r\n\r\n        -- check arch & type\r\n        if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end\r\n\r\n        -- checks for conflicts with other installed (or previously selected) packages\r\n        if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end\r\n\r\n        -- if pkg passed all of the above tests\r\n        if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n                break\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 312,
    "text": "if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path ot downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 313,
    "text": "if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path ot downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end",
    "type": "statement:if"
  }, {
    "id": 314,
    "text": "if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n                break\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n                break\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function get_depends_1(packages, installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n    if not packages then return {} end\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(packages) == \"string\" then packages = {packages} end\r\n\r\n    assert(type(packages) == \"table\", \"depends.get_depends: Argument 'packages' is not a table or string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_depends: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_depends: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_depends: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_depends: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_depends: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local tmp_installed = utils.deepcopy(installed)\r\n\r\n\r\n    -- add provided packages to installed ones\r\n    for _, installed_pkg in pairs(tmp_installed) do\r\n        for _, pkg in pairs(get_provides(installed_pkg)) do\r\n            table.insert(tmp_installed, pkg)\r\n        end\r\n    end\r\n\r\n    local to_install = {}\r\n\r\n    -- get packages needed to to satisfy dependencies\r\n    for _, pkg in pairs(packages) do\r\n\r\n        local needed_to_install, err = get_packages_to_install_1(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n        if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot update package '\" .. pkg .. \"': \".. err\r\n        end\r\n    end\r\n    \r\n    return to_install\r\nend",
    "type": "function"
  }, {
    "id": 318,
    "text": "for _, pkg in pairs(packages) do\r\n\r\n        local needed_to_install, err = get_packages_to_install_1(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n        if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot update package '\" .. pkg .. \"': \".. err\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 319,
    "text": "local needed_to_install, err = get_packages_to_install_1(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 320,
    "text": "if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot update package '\" .. pkg .. \"': \".. err\r\n        end",
    "type": "statement:if"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function (pkg)\r\n                                return (pkg.arch == \"Universal\" or pkg.arch == req_arch) and\r\n                                        (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == req_type)\r\n                                end",
    "type": "function"
  }, {
    "id": 323,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 324,
    "text": "function (pkg)\r\n                                    for _,str in pairs(strings) do\r\n                                        local name = pkg.name .. \"-\" .. pkg.version\r\n                                        if search_in_desc then\r\n                                            name = name .. \" \" .. (pkg.desc or \"\")\r\n                                        end\r\n                                        if string.find(string.lower(name), string.lower(str), 1 ,true) ~= nil then return true end\r\n                                    end\r\n                                end",
    "type": "function"
  }, {
    "id": 325,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 326,
    "text": "function (a, b) return compare_versions(a.version, b.version) end",
    "type": "function"
  }, {
    "id": 327,
    "text": "function (a, b)\r\n                        if a.name == b.name then\r\n                            return compare_versions(a.version, b.version)\r\n                        else\r\n                            return a.name < b.name\r\n                        end\r\n                     end",
    "type": "function"
  }, {
    "id": 328,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 329,
    "text": "",
    "type": "function container"
  }, {
    "id": 330,
    "text": "function get_deployed(deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(deploy_dir) == \"string\", \"dist.get_deployed: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local deployed = depends.get_installed(deploy_dir)\r\n    local provided = {}\r\n\r\n    for _, pkg in pairs(deployed) do\r\n        for _, provided_pkg in pairs(depends.get_provides(pkg)) do\r\n            provided_pkg.provided_by = pkg.name .. \"-\" .. pkg.version\r\n            table.insert(provided, provided_pkg)\r\n        end\r\n    end\r\n\r\n    for _, provided_pkg in pairs(provided) do\r\n        table.insert(deployed, provided_pkg)\r\n    end\r\n\r\n    deployed = depends.sort_by_names(deployed)\r\n    return deployed\r\nend",
    "type": "function"
  }, {
    "id": 331,
    "text": "function install(package_names, deploy_dir, variables)\r\n    if not package_names then return true end\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.install: Argument 'package_names' is not a table or string.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.install: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find installed packages\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- get manifest\r\n    local manifest, err = mf.get_manifest()\r\n    if not manifest then return nil, \"Error getting manifest: \" .. err, 101 end\r\n\r\n    -- resolve dependencies\r\n    local dependencies, err = depends.get_depends(package_names, installed, manifest, false, false, deploy_dir)\r\n    if err then return nil, err, 102 end\r\n    if #dependencies == 0 then return nil, \"No packages to install.\", 102 end\r\n\r\n    -- fetch the packages from repository\r\n    local dirs, err = package.fetch_pkgs(dependencies, sys.make_path(deploy_dir, cfg.temp_dir))\r\n    if not dirs then return nil, err end\r\n\r\n    -- install fetched packages\r\n    for _, dir in pairs(dirs) do\r\n        ok, err = package.install_pkg(dir, deploy_dir, variables, false)\r\n        if not ok then return nil, err, 103 end\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 332,
    "text": "function update(package_names, deploy_dir, variables)\r\n    if not package_names then return true end\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n\r\n     if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.install: Argument 'package_names' is not a table or string.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.install: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find installed packages\r\n\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- get manifest\r\n    local manifest, err = mf.get_manifest()\r\n    if not manifest then return nil, \"Error getting manifest: \" .. err end\r\n\r\n    -- resolve dependencies\r\n    local dependencies, err = depends.get_depends_1(package_names, installed, manifest, false, false, deploy_dir)\r\n    if err then return nil, err end\r\n    if #dependencies == 0 then return nil, \"No packages to update.\"\r\n    else\r\n        pkgs_to_remove = depends.find_packages(package_names, installed)\r\n        -- delete installed packages\r\n        for _, pkg in pairs(pkgs_to_remove) do\r\n            local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n            local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n    end\r\n\r\n    -- fetch the packages from repository\r\n    local dirs, err = package.fetch_pkgs(dependencies, sys.make_path(deploy_dir, cfg.temp_dir))\r\n    if not dirs then return nil, err end\r\n\r\n    -- install fetched packages\r\n    for _, dir in pairs(dirs) do\r\n        ok, err, status = package.install_pkg(dir, deploy_dir, variables, false)\r\n        if not ok then return nil, err, status end\r\n    end\r\n\r\n    return true\r\n\r\nend",
    "type": "function"
  }, {
    "id": 333,
    "text": "function remove(package_names, deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n\r\n    assert(type(package_names) == \"table\", \"dist.remove: Argument 'package_names' is not a string or table.\")\r\n    assert(type(deploy_dir) == \"string\", \"dist.remove: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local pkgs_to_remove = {}\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- find packages to remove\r\n    if #package_names == 0 then\r\n        pkgs_to_remove = installed\r\n    else\r\n        pkgs_to_remove = depends.find_packages(package_names, installed)\r\n    end\r\n\r\n    if #package_names == 0 then\r\n        print(\"Are you sure that you want to remove ALL modules (y/n)?\")\r\n    else\r\n        print(\"Are you sure that you want to remove these modules (y/n)?\")\r\n    end\r\n\r\n    for i, pkg_name in pairs(package_names) do\r\n            io.write(pkg_name)\r\n            if i == #pkg_name then\r\n                io.write(', ')\r\n            end\r\n    end\r\n    print()\r\n    repeat\r\n        --io.write(\"continue with this operation (y/n)? \")\r\n        io.flush()\r\n        answer=io.read()\r\n    until answer==\"y\" or answer==\"n\"\r\n\r\n    if answer == \"n\" then\r\n        return 0\r\n    end\r\n\r\n    -- remove them\r\n    for _, pkg in pairs(pkgs_to_remove) do\r\n        local pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. \"-\" .. pkg.version)\r\n        local ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir)\r\n        if not ok then return nil, err end\r\n    end\r\n\r\n    return #pkgs_to_remove\r\nend",
    "type": "function"
  }, {
    "id": 334,
    "text": "function fetch(pkg_names, fetch_dir)\r\n    fetch_dir = fetch_dir or sys.current_dir()\r\n    assert(type(pkg_names) == \"table\", \"dist.fetch: Argument 'pkg_names' is not a string or table.\")\r\n    assert(type(fetch_dir) == \"string\", \"dist.fetch: Argument 'fetch_dir' is not a string.\")\r\n    fetch_dir = sys.abs_path(fetch_dir)\r\n\r\n    local manifest = mf.get_manifest()\r\n\r\n    local pkgs_to_fetch = {}\r\n\r\n    for _, pkg_name in pairs(pkg_names) do\r\n\r\n        -- retrieve available versions\r\n        local versions, err = package.retrieve_versions(pkg_name, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        local packages = depends.find_packages(pkg_name, manifest)\r\n        if #packages == 0 then return nil, \"No packages found for '\" .. pkg_name .. \"'.\" end\r\n\r\n        packages = depends.sort_by_versions(packages)\r\n        table.insert(pkgs_to_fetch, packages[1])\r\n    end\r\n\r\n    local ok, err = package.fetch_pkgs(pkgs_to_fetch, fetch_dir)\r\n\r\n    if not ok then\r\n        return nil, err\r\n    else\r\n        return ok\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 335,
    "text": "function upload_modules(deploy_dir, module_names, dest_git_base_url)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(module_names) == \"string\" then module_names = {module_names} end\r\n    assert(type(deploy_dir) == \"string\", \"dist.upload_module: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(module_names) == \"table\", \"dist.upload_module: Argument 'module_name' is not a string or table.\")\r\n    assert(type(dest_git_base_url) == \"string\", \"dist.upload_module: Argument 'dest_git_base_url' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local modules_to_upload = {}\r\n    local installed = depends.get_installed(deploy_dir)\r\n\r\n    -- find modules to upload\r\n    if #module_names == 0 then\r\n        modules_to_upload = installed\r\n    else\r\n        modules_to_upload = depends.find_packages(module_names, installed)\r\n    end\r\n\r\n    for _, installed_module in pairs(modules_to_upload) do\r\n\r\n        -- set names\r\n        local branch_name = cfg.arch .. \"-\" .. cfg.type\r\n        local tag_name = installed_module.version .. \"-\" .. branch_name\r\n        local full_name = installed_module.name .. \"-\" .. tag_name\r\n        local tmp_dir = sys.make_path(deploy_dir, cfg.temp_dir, full_name .. \"-to-upload\")\r\n        local dest_git_url = dest_git_base_url .. \"/\" .. installed_module.name .. \".git\"\r\n        local distinfo_file = sys.make_path(deploy_dir, cfg.distinfos_dir, installed_module.name .. \"-\" .. installed_module.version, \"dist.info\")\r\n\r\n        -- create temporary directory (delete previous if already exists)\r\n        if sys.exists(tmp_dir) then sys.delete(tmp_dir) end\r\n        local ok, err = sys.make_dir(tmp_dir)\r\n        if not ok then return nil, err end\r\n\r\n        -- copy the module files for all enabled components\r\n        for _, component in ipairs(cfg.components) do\r\n            if installed_module.files[component] then\r\n                for _, file in ipairs(installed_module.files[component]) do\r\n                    local file_path = sys.make_path(deploy_dir, file)\r\n                    local dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file))\r\n                    if sys.is_file(file_path) then\r\n                        sys.make_dir(dest_dir)\r\n                        sys.copy(file_path, dest_dir)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- add module's dist.info file\r\n        sys.copy(distinfo_file, tmp_dir)\r\n\r\n        -- create git repo\r\n        ok, err = git.init(tmp_dir)\r\n        if not ok then return nil, \"Error initializing empty git repository in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- add all files\r\n        ok, err = git.add_all(tmp_dir)\r\n        if not ok then return nil, \"Error adding all files to the git index in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- create commit\r\n        ok, err = git.commit(\"[luadist-git] add \" .. full_name .. \" [ci skip]\", tmp_dir)\r\n        if not ok then return nil, \"Error commiting changes in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        -- rename branch\r\n        ok, err = git.rename_branch(\"master\", branch_name, tmp_dir)\r\n        if not ok then return nil, \"Error renaming branch 'master' to '\" .. branch_name .. \"' in '\" .. tmp_dir .. \"': \" .. err  end\r\n\r\n        -- create tag\r\n        ok, err = git.create_tag(tmp_dir, tag_name)\r\n        if not ok then return nil, \"Error creating tag '\" .. tag_name .. \"' in '\" .. tmp_dir .. \"': \" .. err end\r\n\r\n        print(\"Uploading \" .. full_name .. \" to \" .. dest_git_url .. \"...\")\r\n\r\n        -- push to the repository\r\n        ok, err = git.push_ref(tmp_dir, branch_name, dest_git_url, true)\r\n        if not ok then return nil, \"Error when pushing branch '\" .. branch_name .. \"' and tag '\" .. tag_name .. \"' to '\" .. dest_git_url .. \"': \" .. err end\r\n\r\n        -- delete temporary directory (if not in debug mode)\r\n        if not cfg.debug then sys.delete(tmp_dir) end\r\n    end\r\n\r\n    return #modules_to_upload\r\nend",
    "type": "function"
  }, {
    "id": 336,
    "text": "function dependency_info(module, cache_file)\r\n    cache_file = cache_file or sys.abs_path(sys.make_path(cfg.root_dir, cfg.dep_cache_file))\r\n    assert(type(module) == \"string\", \"dist.dep_info: Argument 'module' is not a string.\")\r\n    assert(type(cache_file) == \"string\", \"dist.dep_info: Argument 'cache_file' is not a string.\")\r\n\r\n    local dep_cache, err = {}\r\n    if sys.exists(cache_file) then\r\n        -- TODO: use current 'deploy_dir' for cache file, or 'root_dir'?\r\n        dep_cache, err = mf.load_manifest(cache_file)\r\n        if not dep_cache then return nil, err end\r\n    end\r\n\r\n    -- get dependency information and updated cache\r\n    local dep_manifest = {}\r\n    dep_manifest, dep_cache_or_err = depends.dependency_manifest(module, dep_manifest, dep_cache)\r\n    if not dep_manifest then return nil, dep_cache_or_err end\r\n    dep_cache = dep_cache_or_err\r\n\r\n    -- save updated cache\r\n    local ok, err = mf.save_manifest(dep_cache, cache_file)\r\n    if not ok then return nil, err end\r\n\r\n    return dep_manifest\r\nend",
    "type": "function"
  }, {
    "id": 337,
    "text": "function get_manifest(manifest_file, force_no_cache)\r\n    manifest_file = manifest_file or sys.make_path(cfg.root_dir, cfg.manifest_file)\r\n    force_no_cache = force_no_cache or false\r\n\r\n    assert(type(manifest_file) == \"string\", \"manifest.get_manifest: Argument 'manifest_file' is not a string.\")\r\n    assert(type(force_no_cache) == \"boolean\", \"manifest.get_manifest: Argument 'force_no_cache' is not a boolean.\")\r\n    manifest_file = sys.abs_path(manifest_file)\r\n\r\n    -- download new manifest to the cache if not present or cache not used or cache expired\r\n    if not sys.exists(manifest_file) or force_no_cache or not cfg.cache or utils.cache_timeout_expired(cfg.cache_timeout, manifest_file) then\r\n        local manifest_dest = sys.parent_dir(manifest_file) or sys.current_dir()\r\n        local ok, err = download_manifest(manifest_dest, cfg.repos)\r\n        if not ok then return nil, \"Error when downloading manifest: \" .. err end\r\n    end\r\n\r\n    -- load manifest from cache\r\n    local status, ret = load_manifest(manifest_file)\r\n    if not status then return nil, \"Error when loading manifest: \" .. ret end\r\n\r\n    return ret\r\nend",
    "type": "function"
  }, {
    "id": 338,
    "text": "function load_distinfo(distinfo_file)\r\n    assert(type(distinfo_file) == \"string\", \"manifest.load_distinfo: Argument 'distinfo_file' is not a string.\")\r\n    distinfo_file = sys.abs_path(distinfo_file)\r\n\r\n    -- load the distinfo file\r\n    local distinfo_env = {}\r\n    local status, ret = secure_loadfile(distinfo_file, distinfo_env)\r\n    if not status then return nil, \"Error when loading package info: \" .. ret end\r\n\r\n    return distinfo_env\r\nend",
    "type": "function"
  }, {
    "id": 339,
    "text": "function build_pkg(src_dir, deploy_dir, variables)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    variables = variables or {}\r\n\r\n    assert(type(src_dir) == \"string\", \"package.build_pkg: Argument 'src_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.build_pkg: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(variables) == \"table\", \"package.build_pkg: Argument 'variables' is not a table.\")\r\n\r\n    src_dir = sys.abs_path(src_dir)\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- check for dist.info\r\n    local info, err = mf.load_distinfo(sys.make_path(src_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error building package from '\" .. src_dir .. \"': it doesn't contain valid 'dist.info' file.\", 501 end\r\n    local pkg_name = info.name .. \"-\" .. info.version\r\n\r\n    -- set machine information\r\n    info.arch = cfg.arch\r\n    info.type = cfg.type\r\n\r\n    -- create CMake build dir\r\n    local cmake_build_dir = sys.abs_path(sys.make_path(deploy_dir, cfg.temp_dir, pkg_name .. \"-CMake-build\"))\r\n    sys.make_dir(cmake_build_dir)\r\n\r\n    -- create cmake cache\r\n    variables[\"CMAKE_INSTALL_PREFIX\"] = deploy_dir\r\n    local cache_file = io.open(sys.make_path(cmake_build_dir, \"cache.cmake\"), \"w\")\r\n    if not cache_file then return nil, \"Error creating CMake cache file in '\" .. cmake_build_dir .. \"'\", 401 end\r\n\r\n    -- Fill in cache variables\r\n    for k,v in pairs(variables) do\r\n        cache_file:write(\"SET(\" .. k .. \" \" .. sys.quote(v):gsub(\"\\\\+\", \"/\") .. \" CACHE STRING \\\"\\\" FORCE)\\n\")\r\n    end\r\n\r\n    -- If user cache file is provided then append it\r\n    if cfg.cache_file ~= \"\" then\r\n        local user_cache = io.open(sys.abs_path(cfg.cache_file), \"r\")\r\n        if user_cache then\r\n            cache_file:write(user_cache:read(\"*all\")..\"\\n\")\r\n            user_cache:close()\r\n        end\r\n    end\r\n    cache_file:close()\r\n\r\n    src_dir = sys.abs_path(src_dir)\r\n    print(\"Building \" .. sys.extract_name(src_dir) .. \"...\")\r\n\r\n    -- set cmake cache command\r\n    local cache_command = cfg.cache_command\r\n    if cfg.debug then cache_command = cache_command .. \" \" .. cfg.cache_debug_options end\r\n\r\n    -- set cmake build command\r\n    local build_command = cfg.build_command\r\n    if cfg.debug then build_command = build_command .. \" \" .. cfg.build_debug_options end\r\n\r\n    -- set the cmake cache\r\n    local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cache_command .. \" \" .. sys.quote(src_dir))\r\n    if not ok then return nil, \"Error preloading the CMake cache script '\" .. sys.make_path(cmake_build_dir, \"cmake.cache\") .. \"'\", 402 end\r\n\r\n    -- build with cmake\r\n    ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. build_command)\r\n    if not ok then return nil, \"Error building with CMake in directory '\" .. cmake_build_dir .. \"'\",403 end\r\n\r\n    -- if this is only simulation, exit sucessfully, skipping the next actions\r\n    if cfg.simulate then\r\n        return true, \"Simulated build and deployment of package '\" .. pkg_name .. \"' sucessfull.\"\r\n    end\r\n\r\n    -- table to collect files installed in the components\r\n    info.files = {}\r\n\r\n    -- install the components\r\n    for _, component in ipairs(cfg.components) do\r\n        local strip_option = \"\"\r\n        if not cfg.debug and component ~= \"Library\" then strip_option = cfg.strip_option end\r\n\r\n        local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cfg.cmake .. \" \" .. strip_option .. \" \" ..cfg.install_component_command:gsub(\"#COMPONENT#\", component))\r\n\r\n        if not ok then return nil, \"Error when installing the component '\" .. component .. \"' with CMake in directory '\" .. cmake_build_dir .. \"'\", 301 end\r\n\r\n        local install_mf = sys.make_path(cmake_build_dir, \"install_manifest_\" .. component .. \".txt\")\r\n        local mf, err\r\n        local component_files = {}\r\n\r\n        -- collect files installed in this component\r\n        if sys.exists(install_mf) then\r\n            mf, err = io.open(install_mf, \"r\")\r\n            if not mf then return nil, \"Error when opening the CMake installation manifest '\" .. install_mf .. \"': \" .. err, 302 end\r\n            for line in mf:lines() do\r\n                line = sys.check_separators(line)\r\n                local file = line:gsub(utils.escape_magic(deploy_dir .. sys.path_separator()), \"\")\r\n                table.insert(component_files, file)\r\n            end\r\n            mf:close()\r\n\r\n            -- add list of component files to the 'dist.info'\r\n            if #component_files > 0 then info.files[component] = component_files end\r\n        end\r\n    end\r\n--    if bookmark == 0 then return nil, \"Package did not install any files!\" end\r\n\r\n    -- test with ctest\r\n    if cfg.test then\r\n        print(\"Testing \" .. sys.extract_name(src_dir) .. \" ...\")\r\n        ok = sys.exec(\"cd \" .. sys.quote(deploy_dir) .. \" && \" .. cfg.test_command)\r\n        if not ok then return nil, \"Error when testing the module '\" .. pkg_name .. \"' with CTest.\", 201 end\r\n    end\r\n\r\n    -- Rewrite dependencies for binary package\r\n    if info.depends then\r\n       local dependencies = {}\r\n       -- collect all dependencies in single table\r\n       for k, dep in pairs(info.depends) do\r\n           -- if 'depend' is a table of OS specific dependencies for\r\n           -- this arch, add them to the normal dependencies of pkg\r\n           if type(dep) == \"table\" then\r\n               if k == cfg.arch then\r\n                   for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end\r\n               end\r\n           elseif type(dep) == \"string\" then\r\n               table.insert(dependencies, dep)\r\n           end\r\n       end\r\n\r\n       -- Search for installed dependencies\r\n       local installed = depends.get_installed(deploy_dir)\r\n       for k, dep in pairs(dependencies) do\r\n           local version\r\n           local name = depends.split_name_constraint(dep)\r\n           for i, package in pairs(installed) do\r\n               if (package.name == name) then\r\n                   version = package.version\r\n               end\r\n           end\r\n           dependencies[k] = name\r\n\r\n           -- Convert version to major/minor only, assuming semantic versioning\r\n           if version then\r\n               local ver = constraints.parseVersion(version)\r\n               if ver and ver[1] then\r\n                   local major = ver[1][1] or \"0\"\r\n                   local minor = ver[1][2] or \"0\"\r\n                   version = major..\".\"..minor\r\n                   dependencies[k] = name..\"~=\"..version\r\n               end\r\n           end\r\n       end\r\n       -- Store the dependencies\r\n       info.depends = dependencies\r\n    end\r\n\r\n    -- save modified 'dist.info' file\r\n    local pkg_distinfo_dir = sys.make_path(deploy_dir, cfg.distinfos_dir, pkg_name)\r\n    sys.make_dir(pkg_distinfo_dir)\r\n    ok, err = mf.save_distinfo(info, sys.make_path(pkg_distinfo_dir, \"dist.info\"))\r\n    if not ok then return nil, err end\r\n\r\n    -- clean up\r\n    if not cfg.debug then sys.delete(cmake_build_dir) end\r\n\r\n    return true, \"Package '\" .. pkg_name .. \"' successfully builded and deployed to '\" .. deploy_dir .. \"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 340,
    "text": "function fetch_pkgs(packages, download_dir, suppress_printing)\r\n    download_dir = download_dir or sys.current_dir()\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(packages) == \"table\", \"package.fetch_pkgs: Argument 'packages' is not a table.\")\r\n    assert(type(download_dir) == \"string\", \"package.fetch_pkgs: Argument 'download_dir' is not a string.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.fetch_pkgs: Argument 'suppress_printing' is not a boolean.\")\r\n    download_dir = sys.abs_path(download_dir)\r\n\r\n    local fetched_dirs = {}\r\n    local dir, err\r\n\r\n    for _, pkg in pairs(packages) do\r\n        -- if package was downloaded by dependency resolving function, do not download it again.\r\n        if pkg.download_dir then\r\n            dir, err = pkg.download_dir, nil\r\n        -- else download it.\r\n        else\r\n            dir, err = fetch_pkg(pkg, download_dir, suppress_printing)\r\n        end\r\n        if not dir then\r\n            return nil, err\r\n        else\r\n            table.insert(fetched_dirs, dir)\r\n        end\r\n    end\r\n\r\n    return fetched_dirs\r\nend",
    "type": "function"
  }, {
    "id": 341,
    "text": "function retrieve_versions(package, manifest, suppress_printing)\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(package) == \"string\", \"package.retrieve_versions: Argument 'string' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.retrieve_versions: Argument 'manifest' is not a table.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.retrieve_versions: Argument 'suppress_printing' is not a boolean.\")\r\n\r\n    -- get package table\r\n    local pkg_name = depends.split_name_constraint(package)\r\n    local tmp_packages = depends.find_packages(pkg_name, manifest)\r\n\r\n    if #tmp_packages == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. package .. \"' found.\"\r\n    else\r\n        package = tmp_packages[1]\r\n    end\r\n\r\n    if not suppress_printing then print(\"Finding out available versions of \" .. package.name .. \"...\") end\r\n\r\n    -- get available versions\r\n    local tags, err = git.get_remote_tags(package.path)\r\n    if not tags then return nil, \"Error when retrieving versions of package '\" .. package.name .. \"': \" .. err end\r\n\r\n    -- filter out tags of binary packages\r\n    local versions = utils.filter(tags, function (tag) return tag:match(\"^[^%-]+%-?[^%-]*$\") and true end)\r\n\r\n    packages = {}\r\n\r\n    -- create package information\r\n    for _, version in pairs(versions) do\r\n        pkg = {}\r\n        pkg.name = package.name\r\n        pkg.version = version\r\n        pkg.path = package.path\r\n        table.insert(packages, pkg)\r\n    end\r\n\r\n    return packages\r\nend",
    "type": "function"
  }, {
    "id": 342,
    "text": "function retrieve_pkg_info(package, deploy_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(package) == \"table\", \"package.retrieve_pkg_info: Argument 'package' is not a table.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.retrieve_pkg_info: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local tmp_dir = sys.abs_path(sys.make_path(deploy_dir, cfg.temp_dir))\r\n\r\n    -- download the package\r\n    local pkg_dir, err = fetch_pkg(package, tmp_dir)\r\n    if not pkg_dir then return nil, \"Error when retrieving the info about '\" .. package.name .. \"': \" .. err end\r\n\r\n    -- load information from 'dist.info'\r\n    local info, err = mf.load_distinfo(sys.make_path(pkg_dir, \"dist.info\"))\r\n    if not info then return nil, err end\r\n\r\n    -- add 'path' attribute\r\n    if package.path then info.path = package.path end\r\n\r\n    -- set default arch/type if not explicitly stated and package is of source type\r\n    if sys.exists(sys.make_path(pkg_dir, \"CMakeLists.txt\")) then\r\n        info.arch = info.arch or \"Universal\"\r\n        info.type = info.type or \"source\"\r\n    elseif not (info.arch and info.type) then\r\n        return nil, pkg_dir .. \": binary package missing arch or type in 'dist.info'.\"\r\n    end\r\n\r\n    return info, pkg_dir\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "function get_versions_info(pkg, manifest, deploy_dir, installed)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(pkg) == \"string\", \"package.get_versions_info: Argument 'pkg' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.get_versions_info: Argument 'manifest' is not a table.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.get_versions_info: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find all available versions of package\r\n    local versions, err = retrieve_versions(pkg, manifest)\r\n    if not versions then return nil, err end\r\n\r\n    -- collect info about all retrieved versions\r\n    local infos = {}\r\n    for _, version in pairs(versions) do\r\n\r\n        local info, path_or_err\r\n        local installed_version = {}\r\n\r\n        -- find out whether this 'version' is installed so we can use it's dist.info\r\n        if type(installed) == \"table\" then installed_version = depends.find_packages(version.name .. \"-\" .. version.version, installed) end\r\n\r\n        -- get info\r\n        if #installed_version > 0 then\r\n            print(\"Using dist.info from installed \" .. version.name .. \"-\" .. version.version)\r\n            info = installed_version[1]\r\n            info.path = version.path\r\n            info.from_installed = true  -- flag that dist.info of installed package was used\r\n        else\r\n            info, path_or_err = retrieve_pkg_info(version, deploy_dir)\r\n            if not info then return nil, path_or_err end\r\n            sys.delete(path_or_err)\r\n        end\r\n        table.insert(infos, info)\r\n    end\r\n\r\n    -- found and add an implicit 'scm' version\r\n    local pkg_name = depends.split_name_constraint(pkg)\r\n    local found = depends.find_packages(pkg_name, manifest)\r\n    if #found == 0 then return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\" end\r\n    local scm_info, path_or_err = retrieve_pkg_info({name = pkg_name, version = \"scm\", path = found[1].path})\r\n    if not scm_info then return nil, path_or_err end\r\n    sys.delete(path_or_err)\r\n    scm_info.version = \"scm\"\r\n    table.insert(infos, scm_info)\r\n\r\n    local tmp_manifest = utils.deepcopy(manifest)\r\n\r\n    -- add collected info to the temp. manifest, replacing existing tables\r\n    for _, info in pairs(infos) do\r\n        local already_in_manifest = false\r\n        -- find if this version is already in manifest\r\n        for idx, pkg in ipairs(tmp_manifest) do\r\n            -- if yes, replace it\r\n            if pkg.name == info.name and pkg.version == info.version then\r\n                tmp_manifest[idx] = info\r\n                already_in_manifest = true\r\n                break\r\n            end\r\n        end\r\n        -- if not, just normally add to the manifest\r\n        if not already_in_manifest then\r\n            table.insert(tmp_manifest, info)\r\n        end\r\n    end\r\n\r\n    return tmp_manifest\r\nend",
    "type": "function"
  }, {
    "id": 344,
    "text": "function is_file(file)\r\n    assert(type(file) == \"string\", \"sys.is_file: Argument 'file' is not a string.\")\r\n    return lfs.attributes(file, \"mode\") == \"file\"\r\nend",
    "type": "function"
  }, {
    "id": 345,
    "text": "function is_dir(dir)\r\n    assert(type(dir) == \"string\", \"sys.is_dir: Argument 'dir' is not a string.\")\r\n    return lfs.attributes(dir, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 346,
    "text": "function get_directory(dir)\r\n    dir = dir or current_dir()\r\n    assert(type(dir) == \"string\", \"sys.get_directory: Argument 'dir' is not a string.\")\r\n    if is_dir(dir) then\r\n        return lfs.dir(dir)\r\n    else\r\n        return nil, \"Error: '\".. dir .. \"' is not a directory.\"\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 347,
    "text": "function make_path(...)\r\n    -- arg is deprecated in lua 5.2 in favor of table.pack we mimic here\r\n    local arg = {n=select('#',...),...}\r\n    local parts = arg\r\n    assert(type(parts) == \"table\", \"sys.make_path: Argument 'parts' is not a table.\")\r\n\r\n    local path, err\r\n    if parts.n == 0 then\r\n        path, err = current_dir()\r\n    else\r\n        path, err = table.concat(parts, path_separator())\r\n    end\r\n    if not path then return nil, err end\r\n\r\n    -- squeeze repeated occurences of a file separator\r\n    path = path:gsub(path_separator() .. \"+\", path_separator())\r\n\r\n    -- remove unnecessary trailing path separator\r\n    path = remove_trailing(path)\r\n\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 348,
    "text": "function abs_path(path)\r\n    assert(type(path) == \"string\", \"sys.get_abs_path: Argument 'path' is not a string.\")\r\n    if is_abs(path) then return path end\r\n\r\n    local cur_dir, err = current_dir()\r\n    if not cur_dir then return nil, err end\r\n\r\n    return make_path(cur_dir, path)\r\nend",
    "type": "function"
  }, {
    "id": 349,
    "text": "function delete(path)\r\n    assert(type(path) == \"string\", \"sys.delete: Argument 'path' is not a string.\")\r\n    assert(is_abs(path), \"sys.delete: Argument 'path' is not an absolute path.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if not exists(path) then\r\n            return true\r\n        elseif is_file(path) then\r\n            return os.remove(path)\r\n        else\r\n            --return exec(\"rd /S /Q \" .. quote(path))\r\n            return exec(\"move /y \" .. quote(path) .. \" \" .. quote(tmp_dir()))\r\n        end\r\n    else\r\n        return exec(\"rm -rf \" .. quote(path))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 350,
    "text": "function deepcopy(object)\r\n    local lookup_table = {}\r\n    local function _copy(object)\r\n        if type(object) ~= \"table\" then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {}\r\n        lookup_table[object] = new_table\r\n        for index, value in pairs(object) do\r\n            new_table[_copy(index)] = _copy(value)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end\r\n    return _copy(object)\r\nend",
    "type": "function"
  }, {
    "id": 351,
    "text": "function filter(array, predicate_fn)\r\n    assert(type(array) == \"table\", \"utils.filter: Argument 'array' is not a table.\")\r\n    assert(type(predicate_fn) == \"function\", \"utils.filter: Argument 'predicate_fn' is not a function.\")\r\n    local filtered = {}\r\n    for _,v in pairs(array) do\r\n        if predicate_fn(v) == true then table.insert(filtered, deepcopy(v)) end\r\n    end\r\n    return filtered\r\nend",
    "type": "function"
  }, {
    "id": 352,
    "text": "function sort(array, compare_fn)\r\n    assert(type(array) == \"table\", \"utils.sort: Argument 'array' is not a table.\")\r\n    assert(type(compare_fn) == \"function\", \"utils.sort: Argument 'compare_fn' is not a function.\")\r\n    local sorted = deepcopy(array)\r\n    table.sort(sorted, compare_fn)\r\n    return sorted\r\nend",
    "type": "function"
  }, {
    "id": 353,
    "text": "function escape_magic(str)\r\n    assert(type(str) == \"string\", \"utils.escape: Argument 'str' is not a string.\")\r\n    local escaped = str:gsub('[%-%.%+%[%]%(%)%^%%%?%*%^%$]','%%%1')\r\n    return escaped\r\nend",
    "type": "function"
  }, {
    "id": 354,
    "text": "",
    "type": "function container"
  }, {
    "id": 355,
    "text": "",
    "type": "function container"
  }, {
    "id": 356,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 357,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 358,
    "text": "find",
    "type": "global function"
  }, {
    "id": 359,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 360,
    "text": "print",
    "type": "global function"
  }, {
    "id": 361,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 362,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 363,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 364,
    "text": "module",
    "type": "global function"
  }, {
    "id": 365,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 366,
    "text": "match",
    "type": "global function"
  }, {
    "id": 367,
    "text": "type",
    "type": "global function"
  }, {
    "id": 368,
    "text": "require",
    "type": "global function"
  }, {
    "id": 369,
    "text": "",
    "type": "variable container"
  }, {
    "id": 370,
    "text": "",
    "type": "require container"
  }, {
    "id": 371,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 372,
    "text": "config",
    "type": "module"
  }, {
    "id": 373,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 374,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 375,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 376,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 377,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 378,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 379,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 380,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 381,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 382,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 383,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 384,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 385,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 386,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 387,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 389,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 390,
    "text": "",
    "type": "require local variable"
  } ]
}