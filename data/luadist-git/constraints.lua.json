{
  "_filename": "constraints.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadist-git/dist/constraints.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 6,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 24
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 7
  }, {
    "from": 38,
    "label": "has",
    "to": 8
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 15
  }, {
    "from": 38,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 38,
    "label": "has",
    "to": 19
  }, {
    "from": 38,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 24
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 10
  }, {
    "from": 40,
    "label": "has",
    "to": 11
  }, {
    "from": 40,
    "label": "has",
    "to": 4
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 44,
    "label": "has",
    "to": 4
  }, {
    "from": 44,
    "label": "has",
    "to": 4
  }, {
    "from": 44,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 45
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 48
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 8
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 70,
    "label": "has",
    "to": 81
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 91
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 93
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 2,
    "label": "calls",
    "to": 124
  }, {
    "from": 44,
    "label": "calls",
    "to": 124
  }, {
    "from": 51,
    "label": "calls",
    "to": 124
  }, {
    "from": 58,
    "label": "calls",
    "to": 124
  }, {
    "from": 58,
    "label": "calls",
    "to": 124
  }, {
    "from": 58,
    "label": "calls",
    "to": 124
  }, {
    "from": 58,
    "label": "calls",
    "to": 124
  }, {
    "from": 58,
    "label": "calls",
    "to": 124
  }, {
    "from": 58,
    "label": "calls",
    "to": 124
  }, {
    "from": 66,
    "label": "calls",
    "to": 124
  }, {
    "from": 66,
    "label": "calls",
    "to": 124
  }, {
    "from": 38,
    "label": "calls",
    "to": 121
  }, {
    "from": 38,
    "label": "calls",
    "to": 121
  }, {
    "from": 38,
    "label": "calls",
    "to": 121
  }, {
    "from": 51,
    "label": "calls",
    "to": 121
  }, {
    "from": 42,
    "label": "calls",
    "to": 2
  }, {
    "from": 42,
    "label": "calls",
    "to": 2
  }, {
    "from": 44,
    "label": "calls",
    "to": 2
  }, {
    "from": 58,
    "label": "calls",
    "to": 2
  }, {
    "from": 58,
    "label": "calls",
    "to": 2
  }, {
    "from": 83,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 116
  }, {
    "from": 44,
    "label": "calls",
    "to": 116
  }, {
    "from": 51,
    "label": "calls",
    "to": 116
  }, {
    "from": 58,
    "label": "calls",
    "to": 116
  }, {
    "from": 58,
    "label": "calls",
    "to": 116
  }, {
    "from": 66,
    "label": "calls",
    "to": 116
  }, {
    "from": 66,
    "label": "calls",
    "to": 116
  }, {
    "from": 66,
    "label": "calls",
    "to": 120
  }, {
    "from": 111,
    "label": "calls",
    "to": 119
  }, {
    "from": 111,
    "label": "calls",
    "to": 122
  }, {
    "from": 111,
    "label": "calls",
    "to": 117
  }, {
    "from": 111,
    "label": "calls",
    "to": 117
  }, {
    "from": 111,
    "label": "calls",
    "to": 117
  }, {
    "from": 111,
    "label": "calls",
    "to": 117
  }, {
    "from": 38,
    "label": "calls",
    "to": 118
  }, {
    "from": 38,
    "label": "calls",
    "to": 118
  }, {
    "from": 111,
    "label": "calls",
    "to": 123
  }, {
    "from": 38,
    "label": "calls",
    "to": 123
  }, {
    "from": 66,
    "label": "calls",
    "to": 123
  }, {
    "from": 66,
    "label": "calls",
    "to": 123
  }, {
    "from": 83,
    "label": "calls",
    "to": 51
  }, {
    "from": 38,
    "label": "calls",
    "to": 40
  }, {
    "from": 38,
    "label": "calls",
    "to": 40
  }, {
    "from": 38,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 83,
    "label": "calls",
    "to": 66
  }, {
    "from": 51,
    "label": "calls",
    "to": 44
  }, {
    "from": 66,
    "label": "calls",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 111
  }, {
    "from": 111,
    "label": "declares",
    "to": 2
  }, {
    "from": 111,
    "label": "declares",
    "to": 38
  }, {
    "from": 111,
    "label": "declares",
    "to": 40
  }, {
    "from": 111,
    "label": "declares",
    "to": 42
  }, {
    "from": 111,
    "label": "declares",
    "to": 44
  }, {
    "from": 111,
    "label": "declares",
    "to": 51
  }, {
    "from": 111,
    "label": "declares",
    "to": 58
  }, {
    "from": 111,
    "label": "declares",
    "to": 66
  }, {
    "from": 111,
    "label": "declares",
    "to": 83
  }, {
    "from": 111,
    "label": "declares",
    "to": 88
  }, {
    "from": 111,
    "label": "declares",
    "to": 97
  }, {
    "from": 111,
    "label": "declares",
    "to": 103
  }, {
    "from": 113,
    "label": "calls",
    "to": 42
  }, {
    "from": 114,
    "label": "calls",
    "to": 42
  }, {
    "from": 112,
    "label": "calls",
    "to": 83
  }, {
    "from": 115,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 125
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 125,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 128,
    "label": "assigns",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 128,
    "label": "assigns",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 128,
    "label": "assigns",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 128,
    "label": "assigns",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 128,
    "label": "assigns",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 128,
    "label": "assigns",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 128,
    "label": "assigns",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 128,
    "label": "assigns",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 128,
    "label": "assigns",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 128,
    "label": "assigns",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 125,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 152,
    "label": "assigns",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 152,
    "label": "assigns",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 152,
    "label": "assigns",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 152,
    "label": "assigns",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 152,
    "label": "assigns",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 152,
    "label": "assigns",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 152,
    "label": "assigns",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 125,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 170,
    "label": "assigns",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 170,
    "label": "assigns",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 125,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 179,
    "label": "requires",
    "to": 1
  }, {
    "from": 180,
    "label": "requires",
    "to": 1
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 176
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 176
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "constraints",
    "type": "module"
  }, {
    "id": 2,
    "text": "function parseVersion(vstring)\r\n  if not vstring then return nil end\r\n  assert(type(vstring) == \"string\")\r\n\r\n  -- function that actually parse the version string\r\n  local function parse(vstring)\r\n\r\n    local version = {}\r\n    setmetatable(version, version_mt)\r\n    local add_table = function()\r\n       local t = {}\r\n       table.insert(version, t)\r\n       return t\r\n    end\r\n    local t = add_table()\r\n    -- trim leading and trailing spaces\r\n    vstring = vstring:match(\"^%s*(.*)%s*$\")\r\n    version.string = vstring\r\n    -- store revision separately if any\r\n    local main, revision = vstring:match(\"(.*)%-(%d+)$\")\r\n    if revision then\r\n      vstring = main\r\n      version.revision = tonumber(revision)\r\n    end\r\n    local number\r\n    while #vstring > 0 do\r\n      -- extract a number\r\n      local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")\r\n      if token then\r\n        if number == false then\r\n          t = add_table()\r\n        end\r\n        table.insert(t, tonumber(token))\r\n        number = true\r\n      else\r\n        -- extract a word\r\n        token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n        if token then\r\n          if number == true then\r\n             t = add_table()\r\n          end\r\n          table.insert(t, precedence[token:lower()] or precedence.other)\r\n          number = false\r\n        end\r\n      end\r\n      vstring = rest\r\n    end\r\n    return version\r\n  end\r\n\r\n  -- return the cached version, if any\r\n  local version = version_cache[vstring]\r\n  if version == nil then\r\n    -- or parse the version and add it to the cache beforehand\r\n    version = parse(vstring)\r\n    version_cache[vstring] = version\r\n  end\r\n\r\n  return version\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if not vstring then return nil end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "assert(type(vstring) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local function parse(vstring)\r\n\r\n    local version = {}\r\n    setmetatable(version, version_mt)\r\n    local add_table = function()\r\n       local t = {}\r\n       table.insert(version, t)\r\n       return t\r\n    end\r\n    local t = add_table()\r\n    -- trim leading and trailing spaces\r\n    vstring = vstring:match(\"^%s*(.*)%s*$\")\r\n    version.string = vstring\r\n    -- store revision separately if any\r\n    local main, revision = vstring:match(\"(.*)%-(%d+)$\")\r\n    if revision then\r\n      vstring = main\r\n      version.revision = tonumber(revision)\r\n    end\r\n    local number\r\n    while #vstring > 0 do\r\n      -- extract a number\r\n      local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")\r\n      if token then\r\n        if number == false then\r\n          t = add_table()\r\n        end\r\n        table.insert(t, tonumber(token))\r\n        number = true\r\n      else\r\n        -- extract a word\r\n        token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n        if token then\r\n          if number == true then\r\n             t = add_table()\r\n          end\r\n          table.insert(t, precedence[token:lower()] or precedence.other)\r\n          number = false\r\n        end\r\n      end\r\n      vstring = rest\r\n    end\r\n    return version\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 7,
    "text": "local version = {}",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "setmetatable(version, version_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "local add_table = function()\r\n       local t = {}\r\n       table.insert(version, t)\r\n       return t\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "table.insert(version, t)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local t = add_table()",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "vstring = vstring:match(\"^%s*(.*)%s*$\")",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "version.string = vstring",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local main, revision = vstring:match(\"(.*)%-(%d+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if revision then\r\n      vstring = main\r\n      version.revision = tonumber(revision)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "vstring = main",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "version.revision = tonumber(revision)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local number",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "while #vstring > 0 do\r\n      -- extract a number\r\n      local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")\r\n      if token then\r\n        if number == false then\r\n          t = add_table()\r\n        end\r\n        table.insert(t, tonumber(token))\r\n        number = true\r\n      else\r\n        -- extract a word\r\n        token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n        if token then\r\n          if number == true then\r\n             t = add_table()\r\n          end\r\n          table.insert(t, precedence[token:lower()] or precedence.other)\r\n          number = false\r\n        end\r\n      end\r\n      vstring = rest\r\n    end",
    "type": "statement:while"
  }, {
    "id": 21,
    "text": "local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if token then\r\n        if number == false then\r\n          t = add_table()\r\n        end\r\n        table.insert(t, tonumber(token))\r\n        number = true\r\n      else\r\n        -- extract a word\r\n        token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n        if token then\r\n          if number == true then\r\n             t = add_table()\r\n          end\r\n          table.insert(t, precedence[token:lower()] or precedence.other)\r\n          number = false\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if number == false then\r\n          t = add_table()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "t = add_table()",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "table.insert(t, tonumber(token))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "number = true",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if token then\r\n          if number == true then\r\n             t = add_table()\r\n          end\r\n          table.insert(t, precedence[token:lower()] or precedence.other)\r\n          number = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "if number == true then\r\n             t = add_table()\r\n          end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "table.insert(t, precedence[token:lower()] or precedence.other)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "number = false",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "vstring = rest",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "local version = version_cache[vstring]",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if version == nil then\r\n    -- or parse the version and add it to the cache beforehand\r\n    version = parse(vstring)\r\n    version_cache[vstring] = version\r\n  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "version = parse(vstring)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "version_cache[vstring] = version",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function parse(vstring)\r\n\r\n    local version = {}\r\n    setmetatable(version, version_mt)\r\n    local add_table = function()\r\n       local t = {}\r\n       table.insert(version, t)\r\n       return t\r\n    end\r\n    local t = add_table()\r\n    -- trim leading and trailing spaces\r\n    vstring = vstring:match(\"^%s*(.*)%s*$\")\r\n    version.string = vstring\r\n    -- store revision separately if any\r\n    local main, revision = vstring:match(\"(.*)%-(%d+)$\")\r\n    if revision then\r\n      vstring = main\r\n      version.revision = tonumber(revision)\r\n    end\r\n    local number\r\n    while #vstring > 0 do\r\n      -- extract a number\r\n      local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")\r\n      if token then\r\n        if number == false then\r\n          t = add_table()\r\n        end\r\n        table.insert(t, tonumber(token))\r\n        number = true\r\n      else\r\n        -- extract a word\r\n        token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n        if token then\r\n          if number == true then\r\n             t = add_table()\r\n          end\r\n          table.insert(t, precedence[token:lower()] or precedence.other)\r\n          number = false\r\n        end\r\n      end\r\n      vstring = rest\r\n    end\r\n    return version\r\n  end",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n       local t = {}\r\n       table.insert(version, t)\r\n       return t\r\n    end",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function compareVersions(a, b)\r\n  return parseVersion(a) > parseVersion(b)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function parseConstraint(input)\r\n  assert(type(input) == \"string\")\r\n\r\n  local op, version, rest = input:match(\"^([<>=~!]*)%s*([%w%.%_%-]+)[%s,]*(.*)\")\r\n  op = operators[op]\r\n  version = parseVersion(version)\r\n  if not op or not version then return nil end\r\n  return { op = op, version = version }, rest\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "assert(type(input) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "local op, version, rest = input:match(\"^([<>=~!]*)%s*([%w%.%_%-]+)[%s,]*(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "op = operators[op]",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "version = parseVersion(version)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if not op or not version then return nil end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function parseConstraints(input)\r\n  assert(type(input) == \"string\")\r\n\r\n  local constraints, constraint = {}, nil\r\n  while #input > 0 do\r\n    constraint, input = parseConstraint(input)\r\n    if constraint then\r\n      table.insert(constraints, constraint)\r\n      else\r\n      return nil\r\n    end\r\n  end\r\n  return constraints\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local constraints, constraint = {}, nil",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "while #input > 0 do\r\n    constraint, input = parseConstraint(input)\r\n    if constraint then\r\n      table.insert(constraints, constraint)\r\n      else\r\n      return nil\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 54,
    "text": "constraint, input = parseConstraint(input)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if constraint then\r\n      table.insert(constraints, constraint)\r\n      else\r\n      return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "table.insert(constraints, constraint)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function partialMatch(version, requested)\r\n  assert(type(version) == \"string\" or type(version) == \"table\")\r\n  assert(type(requested) == \"string\" or type(version) == \"table\")\r\n\r\n  if type(version) ~= \"table\" then version = parseVersion(version) end\r\n  if type(requested) ~= \"table\" then requested = parseVersion(requested) end\r\n  if not version or not requested then return false end\r\n\r\n  return requested % version\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "assert(type(version) == \"string\" or type(version) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert(type(requested) == \"string\" or type(version) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "if type(version) ~= \"table\" then version = parseVersion(version) end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "if type(requested) ~= \"table\" then requested = parseVersion(requested) end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "requested = parseVersion(requested)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if not version or not requested then return false end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function matchConstraints(version, constraints)\r\n  assert(type(version) == \"table\")\r\n  assert(type(constraints) == \"table\")\r\n  local ok = true\r\n  setmetatable(version, version_mt)\r\n  for _, constr in pairs(constraints) do\r\n    local constr_version = constr.version\r\n          setmetatable(constr.version, version_mt)\r\n    if     constr.op == \"==\" then ok = version == constr_version\r\n    elseif constr.op == \"~=\" then ok = version ~= constr_version\r\n    elseif constr.op == \">\"  then ok = version >  constr_version\r\n    elseif constr.op == \"<\"  then ok = version <  constr_version\r\n    elseif constr.op == \">=\" then ok = version >= constr_version\r\n    elseif constr.op == \"<=\" then ok = version <= constr_version\r\n    elseif constr.op == \"~>\" then ok = partialMatch(version, constr_version)\r\n    end\r\n    if not ok then break end\r\n  end\r\n  return ok\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "assert(type(version) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert(type(constraints) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local ok = true",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "for _, constr in pairs(constraints) do\r\n    local constr_version = constr.version\r\n          setmetatable(constr.version, version_mt)\r\n    if     constr.op == \"==\" then ok = version == constr_version\r\n    elseif constr.op == \"~=\" then ok = version ~= constr_version\r\n    elseif constr.op == \">\"  then ok = version >  constr_version\r\n    elseif constr.op == \"<\"  then ok = version <  constr_version\r\n    elseif constr.op == \">=\" then ok = version >= constr_version\r\n    elseif constr.op == \"<=\" then ok = version <= constr_version\r\n    elseif constr.op == \"~>\" then ok = partialMatch(version, constr_version)\r\n    end\r\n    if not ok then break end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 71,
    "text": "local constr_version = constr.version",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "setmetatable(constr.version, version_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if     constr.op == \"==\" then ok = version == constr_version\r\n    elseif constr.op == \"~=\" then ok = version ~= constr_version\r\n    elseif constr.op == \">\"  then ok = version >  constr_version\r\n    elseif constr.op == \"<\"  then ok = version <  constr_version\r\n    elseif constr.op == \">=\" then ok = version >= constr_version\r\n    elseif constr.op == \"<=\" then ok = version <= constr_version\r\n    elseif constr.op == \"~>\" then ok = partialMatch(version, constr_version)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "ok = version == constr_version",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "ok = version ~= constr_version",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "ok = version >  constr_version",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "ok = version <  constr_version",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "ok = version >= constr_version",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "ok = version <= constr_version",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "ok = partialMatch(version, constr_version)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if not ok then break end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function constraint_satisfied(version, constraints)\r\n  local const = parseConstraints(constraints)\r\n  local ver = parseVersion(version)\r\n  if const and ver then\r\n    return matchConstraints(ver, const)\r\n  end\r\n  return nil, \"Error parsing versions.\"\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local const = parseConstraints(constraints)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local ver = parseVersion(version)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if const and ver then\r\n    return matchConstraints(ver, const)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(v1, v2)\r\n      if #v1 ~= #v2 then\r\n         return false\r\n      end\r\n      for i = 1, math.max(#v1, #v2) do\r\n         local v1i, v2i = v1[i] or {}, v2[i] or {}\r\n         for j = 1, math.max(#v1i, #v2i) do\r\n            local v1ij, v2ij = v1i[j] or 0, v2i[j] or 0\r\n            if v1ij ~= v2ij then\r\n               return false\r\n            end\r\n         end\r\n      end\r\n      if v1.revision and v2.revision then\r\n         return (v1.revision == v2.revision)\r\n      end\r\n      return true\r\n   end",
    "type": "function"
  }, {
    "id": 89,
    "text": "if #v1 ~= #v2 then\r\n         return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "for i = 1, math.max(#v1, #v2) do\r\n         local v1i, v2i = v1[i] or {}, v2[i] or {}\r\n         for j = 1, math.max(#v1i, #v2i) do\r\n            local v1ij, v2ij = v1i[j] or 0, v2i[j] or 0\r\n            if v1ij ~= v2ij then\r\n               return false\r\n            end\r\n         end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 91,
    "text": "local v1i, v2i = v1[i] or {}, v2[i] or {}",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "for j = 1, math.max(#v1i, #v2i) do\r\n            local v1ij, v2ij = v1i[j] or 0, v2i[j] or 0\r\n            if v1ij ~= v2ij then\r\n               return false\r\n            end\r\n         end",
    "type": "statement:numericfor"
  }, {
    "id": 93,
    "text": "local v1ij, v2ij = v1i[j] or 0, v2i[j] or 0",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if v1ij ~= v2ij then\r\n               return false\r\n            end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "if v1.revision and v2.revision then\r\n         return (v1.revision == v2.revision)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function(v1, v2)\r\n      for i = 1, math.max(#v1, #v2) do\r\n         local v1i, v2i = v1[i] or {}, v2[i] or {}\r\n         for j = 1, math.max(#v1i, #v2i) do\r\n            local v1ij, v2ij = v1i[j] or 0, v2i[j] or 0\r\n            if v1ij ~= v2ij then\r\n               return (v1ij < v2ij)\r\n            end\r\n         end\r\n      end\r\n      if v1.revision and v2.revision then\r\n         return (v1.revision < v2.revision)\r\n      end\r\n      return false\r\n   end",
    "type": "function"
  }, {
    "id": 98,
    "text": "for i = 1, math.max(#v1, #v2) do\r\n         local v1i, v2i = v1[i] or {}, v2[i] or {}\r\n         for j = 1, math.max(#v1i, #v2i) do\r\n            local v1ij, v2ij = v1i[j] or 0, v2i[j] or 0\r\n            if v1ij ~= v2ij then\r\n               return (v1ij < v2ij)\r\n            end\r\n         end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 99,
    "text": "for j = 1, math.max(#v1i, #v2i) do\r\n            local v1ij, v2ij = v1i[j] or 0, v2i[j] or 0\r\n            if v1ij ~= v2ij then\r\n               return (v1ij < v2ij)\r\n            end\r\n         end",
    "type": "statement:numericfor"
  }, {
    "id": 100,
    "text": "if v1ij ~= v2ij then\r\n               return (v1ij < v2ij)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "if v1.revision and v2.revision then\r\n         return (v1.revision < v2.revision)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function(self, version)\r\n      if #self ~= #version then\r\n         return false\r\n      end\r\n      for i = 1, #self do\r\n         local v1i, v2i = self[i], version[i]\r\n         for j = 1, math.min(#v1i, #v2i) do\r\n            if v1i[j] ~= v2i[j] then\r\n               return false\r\n            end\r\n         end\r\n      end\r\n      if self.revision then\r\n         return self.revision == version.revision\r\n      end\r\n      return true\r\n   end",
    "type": "function"
  }, {
    "id": 104,
    "text": "if #self ~= #version then\r\n         return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "for i = 1, #self do\r\n         local v1i, v2i = self[i], version[i]\r\n         for j = 1, math.min(#v1i, #v2i) do\r\n            if v1i[j] ~= v2i[j] then\r\n               return false\r\n            end\r\n         end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 106,
    "text": "local v1i, v2i = self[i], version[i]",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "for j = 1, math.min(#v1i, #v2i) do\r\n            if v1i[j] ~= v2i[j] then\r\n               return false\r\n            end\r\n         end",
    "type": "statement:numericfor"
  }, {
    "id": 108,
    "text": "if v1i[j] ~= v2i[j] then\r\n               return false\r\n            end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "if self.revision then\r\n         return self.revision == version.revision\r\n      end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "",
    "type": "function container"
  }, {
    "id": 112,
    "text": "function satisfies_constraint(version, constraint)\r\n    assert(type(version) == \"string\", \"depends.satisfies_constraint: Argument 'version' is not a string.\")\r\n    assert(type(constraint) == \"string\", \"depends.satisfies_constraint: Argument 'constraint' is not a string.\")\r\n    return const.constraint_satisfied(version, constraint)\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "function compare_versions(version_a, version_b)\r\n    assert(type(version_a) == \"string\", \"depends.compare_versions: Argument 'version_a' is not a string.\")\r\n    assert(type(version_b) == \"string\", \"depends.compare_versions: Argument 'version_b' is not a string.\")\r\n    return const.compareVersions(version_a, version_b)\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "function newest_version(package, versions)\r\n    assert(type(package) == \"table\", \"depends.newest_version: Argument 'packages' is not a table or string.\")\r\n    assert(type(versions) == \"table\", \"depends.newest_version: Argument 'versions' is not a table or string.\")\r\n\r\n    local new = {}\r\n\r\n    for _, ver in pairs(versions) do\r\n        if const.compareVersions(ver.version, package.version) then\r\n            table.insert(new, ver)\r\n        end\r\n    end\r\n\r\n    return new\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "function build_pkg(src_dir, deploy_dir, variables)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    variables = variables or {}\r\n\r\n    assert(type(src_dir) == \"string\", \"package.build_pkg: Argument 'src_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.build_pkg: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(variables) == \"table\", \"package.build_pkg: Argument 'variables' is not a table.\")\r\n\r\n    src_dir = sys.abs_path(src_dir)\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- check for dist.info\r\n    local info, err = mf.load_distinfo(sys.make_path(src_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error building package from '\" .. src_dir .. \"': it doesn't contain valid 'dist.info' file.\", 501 end\r\n    local pkg_name = info.name .. \"-\" .. info.version\r\n\r\n    -- set machine information\r\n    info.arch = cfg.arch\r\n    info.type = cfg.type\r\n\r\n    -- create CMake build dir\r\n    local cmake_build_dir = sys.abs_path(sys.make_path(deploy_dir, cfg.temp_dir, pkg_name .. \"-CMake-build\"))\r\n    sys.make_dir(cmake_build_dir)\r\n\r\n    -- create cmake cache\r\n    variables[\"CMAKE_INSTALL_PREFIX\"] = deploy_dir\r\n    local cache_file = io.open(sys.make_path(cmake_build_dir, \"cache.cmake\"), \"w\")\r\n    if not cache_file then return nil, \"Error creating CMake cache file in '\" .. cmake_build_dir .. \"'\", 401 end\r\n\r\n    -- Fill in cache variables\r\n    for k,v in pairs(variables) do\r\n        cache_file:write(\"SET(\" .. k .. \" \" .. sys.quote(v):gsub(\"\\\\+\", \"/\") .. \" CACHE STRING \\\"\\\" FORCE)\\n\")\r\n    end\r\n\r\n    -- If user cache file is provided then append it\r\n    if cfg.cache_file ~= \"\" then\r\n        local user_cache = io.open(sys.abs_path(cfg.cache_file), \"r\")\r\n        if user_cache then\r\n            cache_file:write(user_cache:read(\"*all\")..\"\\n\")\r\n            user_cache:close()\r\n        end\r\n    end\r\n    cache_file:close()\r\n\r\n    src_dir = sys.abs_path(src_dir)\r\n    print(\"Building \" .. sys.extract_name(src_dir) .. \"...\")\r\n\r\n    -- set cmake cache command\r\n    local cache_command = cfg.cache_command\r\n    if cfg.debug then cache_command = cache_command .. \" \" .. cfg.cache_debug_options end\r\n\r\n    -- set cmake build command\r\n    local build_command = cfg.build_command\r\n    if cfg.debug then build_command = build_command .. \" \" .. cfg.build_debug_options end\r\n\r\n    -- set the cmake cache\r\n    local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cache_command .. \" \" .. sys.quote(src_dir))\r\n    if not ok then return nil, \"Error preloading the CMake cache script '\" .. sys.make_path(cmake_build_dir, \"cmake.cache\") .. \"'\", 402 end\r\n\r\n    -- build with cmake\r\n    ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. build_command)\r\n    if not ok then return nil, \"Error building with CMake in directory '\" .. cmake_build_dir .. \"'\",403 end\r\n\r\n    -- if this is only simulation, exit sucessfully, skipping the next actions\r\n    if cfg.simulate then\r\n        return true, \"Simulated build and deployment of package '\" .. pkg_name .. \"' sucessfull.\"\r\n    end\r\n\r\n    -- table to collect files installed in the components\r\n    info.files = {}\r\n\r\n    -- install the components\r\n    for _, component in ipairs(cfg.components) do\r\n        local strip_option = \"\"\r\n        if not cfg.debug and component ~= \"Library\" then strip_option = cfg.strip_option end\r\n\r\n        local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cfg.cmake .. \" \" .. strip_option .. \" \" ..cfg.install_component_command:gsub(\"#COMPONENT#\", component))\r\n\r\n        if not ok then return nil, \"Error when installing the component '\" .. component .. \"' with CMake in directory '\" .. cmake_build_dir .. \"'\", 301 end\r\n\r\n        local install_mf = sys.make_path(cmake_build_dir, \"install_manifest_\" .. component .. \".txt\")\r\n        local mf, err\r\n        local component_files = {}\r\n\r\n        -- collect files installed in this component\r\n        if sys.exists(install_mf) then\r\n            mf, err = io.open(install_mf, \"r\")\r\n            if not mf then return nil, \"Error when opening the CMake installation manifest '\" .. install_mf .. \"': \" .. err, 302 end\r\n            for line in mf:lines() do\r\n                line = sys.check_separators(line)\r\n                local file = line:gsub(utils.escape_magic(deploy_dir .. sys.path_separator()), \"\")\r\n                table.insert(component_files, file)\r\n            end\r\n            mf:close()\r\n\r\n            -- add list of component files to the 'dist.info'\r\n            if #component_files > 0 then info.files[component] = component_files end\r\n        end\r\n    end\r\n--    if bookmark == 0 then return nil, \"Package did not install any files!\" end\r\n\r\n    -- test with ctest\r\n    if cfg.test then\r\n        print(\"Testing \" .. sys.extract_name(src_dir) .. \" ...\")\r\n        ok = sys.exec(\"cd \" .. sys.quote(deploy_dir) .. \" && \" .. cfg.test_command)\r\n        if not ok then return nil, \"Error when testing the module '\" .. pkg_name .. \"' with CTest.\", 201 end\r\n    end\r\n\r\n    -- Rewrite dependencies for binary package\r\n    if info.depends then\r\n       local dependencies = {}\r\n       -- collect all dependencies in single table\r\n       for k, dep in pairs(info.depends) do\r\n           -- if 'depend' is a table of OS specific dependencies for\r\n           -- this arch, add them to the normal dependencies of pkg\r\n           if type(dep) == \"table\" then\r\n               if k == cfg.arch then\r\n                   for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end\r\n               end\r\n           elseif type(dep) == \"string\" then\r\n               table.insert(dependencies, dep)\r\n           end\r\n       end\r\n\r\n       -- Search for installed dependencies\r\n       local installed = depends.get_installed(deploy_dir)\r\n       for k, dep in pairs(dependencies) do\r\n           local version\r\n           local name = depends.split_name_constraint(dep)\r\n           for i, package in pairs(installed) do\r\n               if (package.name == name) then\r\n                   version = package.version\r\n               end\r\n           end\r\n           dependencies[k] = name\r\n\r\n           -- Convert version to major/minor only, assuming semantic versioning\r\n           if version then\r\n               local ver = constraints.parseVersion(version)\r\n               if ver and ver[1] then\r\n                   local major = ver[1][1] or \"0\"\r\n                   local minor = ver[1][2] or \"0\"\r\n                   version = major..\".\"..minor\r\n                   dependencies[k] = name..\"~=\"..version\r\n               end\r\n           end\r\n       end\r\n       -- Store the dependencies\r\n       info.depends = dependencies\r\n    end\r\n\r\n    -- save modified 'dist.info' file\r\n    local pkg_distinfo_dir = sys.make_path(deploy_dir, cfg.distinfos_dir, pkg_name)\r\n    sys.make_dir(pkg_distinfo_dir)\r\n    ok, err = mf.save_distinfo(info, sys.make_path(pkg_distinfo_dir, \"dist.info\"))\r\n    if not ok then return nil, err end\r\n\r\n    -- clean up\r\n    if not cfg.debug then sys.delete(cmake_build_dir) end\r\n\r\n    return true, \"Package '\" .. pkg_name .. \"' successfully builded and deployed to '\" .. deploy_dir .. \"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 117,
    "text": "max",
    "type": "global function"
  }, {
    "id": 118,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 119,
    "text": "min",
    "type": "global function"
  }, {
    "id": 120,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 121,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 122,
    "text": "module",
    "type": "global function"
  }, {
    "id": 123,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 124,
    "text": "type",
    "type": "global function"
  }, {
    "id": 125,
    "text": "",
    "type": "variable container"
  }, {
    "id": 126,
    "text": "",
    "type": "require container"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 129,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 130,
    "text": "",
    "type": "string"
  }, {
    "id": 131,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 132,
    "text": "",
    "type": "string"
  }, {
    "id": 133,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 134,
    "text": "",
    "type": "string"
  }, {
    "id": 135,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 136,
    "text": "",
    "type": "string"
  }, {
    "id": 137,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 138,
    "text": "",
    "type": "string"
  }, {
    "id": 139,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 140,
    "text": "",
    "type": "string"
  }, {
    "id": 141,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 142,
    "text": "",
    "type": "string"
  }, {
    "id": 143,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 144,
    "text": "",
    "type": "string"
  }, {
    "id": 145,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 146,
    "text": "",
    "type": "string"
  }, {
    "id": 147,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 148,
    "text": "",
    "type": "string"
  }, {
    "id": 149,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 150,
    "text": "",
    "type": "string"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 153,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 154,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 155,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 156,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 157,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 158,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 159,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 160,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 161,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 162,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 163,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 164,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 165,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 166,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 167,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 168,
    "text": "",
    "type": "_simpleexp"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 171,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 172,
    "text": "",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 174,
    "text": "",
    "type": "function"
  }, {
    "id": 175,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 176,
    "text": "",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 179,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "require local variable"
  } ]
}