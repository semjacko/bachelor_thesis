{
  "_filename": "test_sys.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luadist-git/test/test_sys.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 135,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 135,
    "label": "has",
    "to": 146
  }, {
    "from": 135,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 150
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 149
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 149
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 154
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 154
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 167
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 149
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 154
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 149
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 151
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 154
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 154
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 155
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 149
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 174
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 154
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 178
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 196,
    "label": "has",
    "to": 149
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 196,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 154
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 200,
    "label": "has",
    "to": 203
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 204,
    "label": "has",
    "to": 207
  }, {
    "from": 204,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 205
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 209,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 149
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 154
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 215
  }, {
    "from": 217,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 154
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 215
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 149
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 149
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 225
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 154
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 225
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 154
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 225
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 236,
    "label": "has",
    "to": 154
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 225
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 149
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 215
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 242,
    "label": "has",
    "to": 154
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 215
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 154
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 215
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 149
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 225
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 149
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 225
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 154
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 225
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 154
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 225
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 205
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 260,
    "label": "has",
    "to": 215
  }, {
    "from": 260,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 205
  }, {
    "from": 266,
    "label": "has",
    "to": 261
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 266,
    "label": "has",
    "to": 215
  }, {
    "from": 266,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 149
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 215
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 154
  }, {
    "from": 274,
    "label": "has",
    "to": 272
  }, {
    "from": 274,
    "label": "has",
    "to": 215
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 149
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 280,
    "label": "has",
    "to": 154
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 278
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 283,
    "label": "has",
    "to": 205
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 283,
    "label": "has",
    "to": 286
  }, {
    "from": 283,
    "label": "has",
    "to": 287
  }, {
    "from": 283,
    "label": "has",
    "to": 215
  }, {
    "from": 283,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 149
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 225
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 292,
    "label": "has",
    "to": 154
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 292,
    "label": "has",
    "to": 225
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 295,
    "label": "has",
    "to": 149
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 215
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 154
  }, {
    "from": 298,
    "label": "has",
    "to": 296
  }, {
    "from": 298,
    "label": "has",
    "to": 215
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 300,
    "label": "has",
    "to": 149
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 225
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 303,
    "label": "has",
    "to": 154
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 225
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 306,
    "label": "has",
    "to": 205
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 306,
    "label": "has",
    "to": 309
  }, {
    "from": 310,
    "label": "has",
    "to": 149
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 310,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 154
  }, {
    "from": 314,
    "label": "has",
    "to": 311
  }, {
    "from": 314,
    "label": "has",
    "to": 312
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 149
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 316,
    "label": "has",
    "to": 319
  }, {
    "from": 320,
    "label": "has",
    "to": 154
  }, {
    "from": 320,
    "label": "has",
    "to": 317
  }, {
    "from": 320,
    "label": "has",
    "to": 318
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 149
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 322,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 154
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 326,
    "label": "has",
    "to": 328
  }, {
    "from": 326,
    "label": "has",
    "to": 329
  }, {
    "from": 330,
    "label": "has",
    "to": 154
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 328
  }, {
    "from": 330,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 149
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 333,
    "label": "has",
    "to": 335
  }, {
    "from": 333,
    "label": "has",
    "to": 336
  }, {
    "from": 337,
    "label": "has",
    "to": 154
  }, {
    "from": 337,
    "label": "has",
    "to": 338
  }, {
    "from": 337,
    "label": "has",
    "to": 335
  }, {
    "from": 337,
    "label": "has",
    "to": 339
  }, {
    "from": 340,
    "label": "has",
    "to": 154
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 335
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 343,
    "label": "has",
    "to": 149
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 151
  }, {
    "from": 343,
    "label": "has",
    "to": 345
  }, {
    "from": 346,
    "label": "has",
    "to": 154
  }, {
    "from": 346,
    "label": "has",
    "to": 347
  }, {
    "from": 346,
    "label": "has",
    "to": 185
  }, {
    "from": 346,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 154
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 349,
    "label": "has",
    "to": 155
  }, {
    "from": 349,
    "label": "has",
    "to": 351
  }, {
    "from": 352,
    "label": "has",
    "to": 149
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 352,
    "label": "has",
    "to": 354
  }, {
    "from": 352,
    "label": "has",
    "to": 355
  }, {
    "from": 356,
    "label": "has",
    "to": 154
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 356,
    "label": "has",
    "to": 359
  }, {
    "from": 360,
    "label": "has",
    "to": 149
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 354
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 363,
    "label": "has",
    "to": 154
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 358
  }, {
    "from": 363,
    "label": "has",
    "to": 365
  }, {
    "from": 366,
    "label": "has",
    "to": 149
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 366,
    "label": "has",
    "to": 368
  }, {
    "from": 366,
    "label": "has",
    "to": 369
  }, {
    "from": 370,
    "label": "has",
    "to": 154
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 370,
    "label": "has",
    "to": 368
  }, {
    "from": 370,
    "label": "has",
    "to": 372
  }, {
    "from": 373,
    "label": "has",
    "to": 149
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 373,
    "label": "has",
    "to": 354
  }, {
    "from": 373,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 154
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 358
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 379,
    "label": "has",
    "to": 154
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 379,
    "label": "has",
    "to": 381
  }, {
    "from": 379,
    "label": "has",
    "to": 382
  }, {
    "from": 383,
    "label": "has",
    "to": 149
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 383,
    "label": "has",
    "to": 354
  }, {
    "from": 383,
    "label": "has",
    "to": 385
  }, {
    "from": 386,
    "label": "has",
    "to": 154
  }, {
    "from": 386,
    "label": "has",
    "to": 387
  }, {
    "from": 386,
    "label": "has",
    "to": 358
  }, {
    "from": 386,
    "label": "has",
    "to": 388
  }, {
    "from": 389,
    "label": "has",
    "to": 154
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 389,
    "label": "has",
    "to": 381
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 392,
    "label": "has",
    "to": 149
  }, {
    "from": 392,
    "label": "has",
    "to": 393
  }, {
    "from": 392,
    "label": "has",
    "to": 394
  }, {
    "from": 392,
    "label": "has",
    "to": 395
  }, {
    "from": 396,
    "label": "has",
    "to": 154
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 396,
    "label": "has",
    "to": 398
  }, {
    "from": 396,
    "label": "has",
    "to": 399
  }, {
    "from": 400,
    "label": "has",
    "to": 149
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 400,
    "label": "has",
    "to": 402
  }, {
    "from": 400,
    "label": "has",
    "to": 403
  }, {
    "from": 404,
    "label": "has",
    "to": 154
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 404,
    "label": "has",
    "to": 406
  }, {
    "from": 404,
    "label": "has",
    "to": 407
  }, {
    "from": 408,
    "label": "has",
    "to": 149
  }, {
    "from": 408,
    "label": "has",
    "to": 409
  }, {
    "from": 408,
    "label": "has",
    "to": 402
  }, {
    "from": 408,
    "label": "has",
    "to": 410
  }, {
    "from": 411,
    "label": "has",
    "to": 154
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 411,
    "label": "has",
    "to": 406
  }, {
    "from": 411,
    "label": "has",
    "to": 413
  }, {
    "from": 414,
    "label": "has",
    "to": 149
  }, {
    "from": 414,
    "label": "has",
    "to": 415
  }, {
    "from": 414,
    "label": "has",
    "to": 402
  }, {
    "from": 414,
    "label": "has",
    "to": 416
  }, {
    "from": 417,
    "label": "has",
    "to": 154
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 417,
    "label": "has",
    "to": 406
  }, {
    "from": 417,
    "label": "has",
    "to": 419
  }, {
    "from": 420,
    "label": "has",
    "to": 149
  }, {
    "from": 420,
    "label": "has",
    "to": 421
  }, {
    "from": 420,
    "label": "has",
    "to": 422
  }, {
    "from": 420,
    "label": "has",
    "to": 423
  }, {
    "from": 424,
    "label": "has",
    "to": 154
  }, {
    "from": 424,
    "label": "has",
    "to": 425
  }, {
    "from": 424,
    "label": "has",
    "to": 426
  }, {
    "from": 424,
    "label": "has",
    "to": 427
  }, {
    "from": 428,
    "label": "has",
    "to": 149
  }, {
    "from": 428,
    "label": "has",
    "to": 429
  }, {
    "from": 428,
    "label": "has",
    "to": 422
  }, {
    "from": 428,
    "label": "has",
    "to": 430
  }, {
    "from": 431,
    "label": "has",
    "to": 154
  }, {
    "from": 431,
    "label": "has",
    "to": 432
  }, {
    "from": 431,
    "label": "has",
    "to": 426
  }, {
    "from": 431,
    "label": "has",
    "to": 433
  }, {
    "from": 434,
    "label": "has",
    "to": 149
  }, {
    "from": 434,
    "label": "has",
    "to": 435
  }, {
    "from": 434,
    "label": "has",
    "to": 422
  }, {
    "from": 434,
    "label": "has",
    "to": 436
  }, {
    "from": 437,
    "label": "has",
    "to": 154
  }, {
    "from": 437,
    "label": "has",
    "to": 438
  }, {
    "from": 437,
    "label": "has",
    "to": 426
  }, {
    "from": 437,
    "label": "has",
    "to": 439
  }, {
    "from": 440,
    "label": "has",
    "to": 149
  }, {
    "from": 440,
    "label": "has",
    "to": 441
  }, {
    "from": 440,
    "label": "has",
    "to": 442
  }, {
    "from": 440,
    "label": "has",
    "to": 443
  }, {
    "from": 444,
    "label": "has",
    "to": 154
  }, {
    "from": 444,
    "label": "has",
    "to": 445
  }, {
    "from": 444,
    "label": "has",
    "to": 446
  }, {
    "from": 444,
    "label": "has",
    "to": 447
  }, {
    "from": 448,
    "label": "has",
    "to": 149
  }, {
    "from": 448,
    "label": "has",
    "to": 449
  }, {
    "from": 448,
    "label": "has",
    "to": 151
  }, {
    "from": 448,
    "label": "has",
    "to": 450
  }, {
    "from": 451,
    "label": "has",
    "to": 154
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 451,
    "label": "has",
    "to": 185
  }, {
    "from": 451,
    "label": "has",
    "to": 453
  }, {
    "from": 454,
    "label": "has",
    "to": 154
  }, {
    "from": 454,
    "label": "has",
    "to": 455
  }, {
    "from": 454,
    "label": "has",
    "to": 155
  }, {
    "from": 454,
    "label": "has",
    "to": 456
  }, {
    "from": 457,
    "label": "has",
    "to": 149
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 457,
    "label": "has",
    "to": 442
  }, {
    "from": 457,
    "label": "has",
    "to": 459
  }, {
    "from": 460,
    "label": "has",
    "to": 154
  }, {
    "from": 460,
    "label": "has",
    "to": 461
  }, {
    "from": 460,
    "label": "has",
    "to": 446
  }, {
    "from": 460,
    "label": "has",
    "to": 462
  }, {
    "from": 463,
    "label": "has",
    "to": 205
  }, {
    "from": 463,
    "label": "has",
    "to": 464
  }, {
    "from": 463,
    "label": "has",
    "to": 308
  }, {
    "from": 463,
    "label": "has",
    "to": 465
  }, {
    "from": 466,
    "label": "has",
    "to": 149
  }, {
    "from": 466,
    "label": "has",
    "to": 467
  }, {
    "from": 466,
    "label": "has",
    "to": 468
  }, {
    "from": 466,
    "label": "has",
    "to": 469
  }, {
    "from": 470,
    "label": "has",
    "to": 154
  }, {
    "from": 470,
    "label": "has",
    "to": 471
  }, {
    "from": 470,
    "label": "has",
    "to": 472
  }, {
    "from": 470,
    "label": "has",
    "to": 473
  }, {
    "from": 474,
    "label": "has",
    "to": 149
  }, {
    "from": 474,
    "label": "has",
    "to": 475
  }, {
    "from": 474,
    "label": "has",
    "to": 442
  }, {
    "from": 474,
    "label": "has",
    "to": 476
  }, {
    "from": 477,
    "label": "has",
    "to": 154
  }, {
    "from": 477,
    "label": "has",
    "to": 478
  }, {
    "from": 477,
    "label": "has",
    "to": 446
  }, {
    "from": 477,
    "label": "has",
    "to": 479
  }, {
    "from": 480,
    "label": "has",
    "to": 154
  }, {
    "from": 480,
    "label": "has",
    "to": 481
  }, {
    "from": 480,
    "label": "has",
    "to": 482
  }, {
    "from": 480,
    "label": "has",
    "to": 483
  }, {
    "from": 484,
    "label": "has",
    "to": 205
  }, {
    "from": 484,
    "label": "has",
    "to": 485
  }, {
    "from": 484,
    "label": "has",
    "to": 486
  }, {
    "from": 484,
    "label": "has",
    "to": 487
  }, {
    "from": 488,
    "label": "has",
    "to": 205
  }, {
    "from": 488,
    "label": "has",
    "to": 489
  }, {
    "from": 488,
    "label": "has",
    "to": 490
  }, {
    "from": 488,
    "label": "has",
    "to": 491
  }, {
    "from": 492,
    "label": "has",
    "to": 205
  }, {
    "from": 492,
    "label": "has",
    "to": 493
  }, {
    "from": 492,
    "label": "has",
    "to": 494
  }, {
    "from": 492,
    "label": "has",
    "to": 495
  }, {
    "from": 492,
    "label": "has",
    "to": 496
  }, {
    "from": 492,
    "label": "has",
    "to": 497
  }, {
    "from": 492,
    "label": "has",
    "to": 498
  }, {
    "from": 492,
    "label": "has",
    "to": 499
  }, {
    "from": 492,
    "label": "has",
    "to": 500
  }, {
    "from": 492,
    "label": "has",
    "to": 501
  }, {
    "from": 492,
    "label": "has",
    "to": 502
  }, {
    "from": 492,
    "label": "has",
    "to": 503
  }, {
    "from": 492,
    "label": "has",
    "to": 504
  }, {
    "from": 505,
    "label": "has",
    "to": 205
  }, {
    "from": 505,
    "label": "has",
    "to": 506
  }, {
    "from": 505,
    "label": "has",
    "to": 496
  }, {
    "from": 505,
    "label": "has",
    "to": 499
  }, {
    "from": 505,
    "label": "has",
    "to": 502
  }, {
    "from": 505,
    "label": "has",
    "to": 507
  }, {
    "from": 505,
    "label": "has",
    "to": 508
  }, {
    "from": 509,
    "label": "has",
    "to": 205
  }, {
    "from": 509,
    "label": "has",
    "to": 510
  }, {
    "from": 509,
    "label": "has",
    "to": 511
  }, {
    "from": 509,
    "label": "has",
    "to": 512
  }, {
    "from": 509,
    "label": "has",
    "to": 513
  }, {
    "from": 509,
    "label": "has",
    "to": 514
  }, {
    "from": 509,
    "label": "has",
    "to": 515
  }, {
    "from": 509,
    "label": "has",
    "to": 516
  }, {
    "from": 509,
    "label": "has",
    "to": 517
  }, {
    "from": 518,
    "label": "has",
    "to": 205
  }, {
    "from": 518,
    "label": "has",
    "to": 519
  }, {
    "from": 518,
    "label": "has",
    "to": 520
  }, {
    "from": 518,
    "label": "has",
    "to": 521
  }, {
    "from": 518,
    "label": "has",
    "to": 502
  }, {
    "from": 518,
    "label": "has",
    "to": 522
  }, {
    "from": 523,
    "label": "has",
    "to": 205
  }, {
    "from": 523,
    "label": "has",
    "to": 524
  }, {
    "from": 523,
    "label": "has",
    "to": 525
  }, {
    "from": 523,
    "label": "has",
    "to": 519
  }, {
    "from": 523,
    "label": "has",
    "to": 526
  }, {
    "from": 523,
    "label": "has",
    "to": 527
  }, {
    "from": 523,
    "label": "has",
    "to": 528
  }, {
    "from": 523,
    "label": "has",
    "to": 529
  }, {
    "from": 523,
    "label": "has",
    "to": 530
  }, {
    "from": 523,
    "label": "has",
    "to": 502
  }, {
    "from": 523,
    "label": "has",
    "to": 531
  }, {
    "from": 532,
    "label": "has",
    "to": 205
  }, {
    "from": 532,
    "label": "has",
    "to": 533
  }, {
    "from": 532,
    "label": "has",
    "to": 534
  }, {
    "from": 532,
    "label": "has",
    "to": 535
  }, {
    "from": 532,
    "label": "has",
    "to": 525
  }, {
    "from": 532,
    "label": "has",
    "to": 536
  }, {
    "from": 532,
    "label": "has",
    "to": 537
  }, {
    "from": 532,
    "label": "has",
    "to": 538
  }, {
    "from": 532,
    "label": "has",
    "to": 539
  }, {
    "from": 532,
    "label": "has",
    "to": 540
  }, {
    "from": 532,
    "label": "has",
    "to": 541
  }, {
    "from": 532,
    "label": "has",
    "to": 530
  }, {
    "from": 532,
    "label": "has",
    "to": 542
  }, {
    "from": 532,
    "label": "has",
    "to": 543
  }, {
    "from": 532,
    "label": "has",
    "to": 544
  }, {
    "from": 545,
    "label": "has",
    "to": 205
  }, {
    "from": 545,
    "label": "has",
    "to": 546
  }, {
    "from": 545,
    "label": "has",
    "to": 525
  }, {
    "from": 545,
    "label": "has",
    "to": 547
  }, {
    "from": 545,
    "label": "has",
    "to": 548
  }, {
    "from": 545,
    "label": "has",
    "to": 549
  }, {
    "from": 545,
    "label": "has",
    "to": 550
  }, {
    "from": 545,
    "label": "has",
    "to": 551
  }, {
    "from": 552,
    "label": "has",
    "to": 205
  }, {
    "from": 552,
    "label": "has",
    "to": 553
  }, {
    "from": 552,
    "label": "has",
    "to": 526
  }, {
    "from": 552,
    "label": "has",
    "to": 554
  }, {
    "from": 552,
    "label": "has",
    "to": 525
  }, {
    "from": 552,
    "label": "has",
    "to": 555
  }, {
    "from": 552,
    "label": "has",
    "to": 556
  }, {
    "from": 552,
    "label": "has",
    "to": 557
  }, {
    "from": 552,
    "label": "has",
    "to": 558
  }, {
    "from": 552,
    "label": "has",
    "to": 550
  }, {
    "from": 552,
    "label": "has",
    "to": 559
  }, {
    "from": 552,
    "label": "has",
    "to": 560
  }, {
    "from": 561,
    "label": "has",
    "to": 205
  }, {
    "from": 561,
    "label": "has",
    "to": 562
  }, {
    "from": 561,
    "label": "has",
    "to": 525
  }, {
    "from": 561,
    "label": "has",
    "to": 563
  }, {
    "from": 561,
    "label": "has",
    "to": 526
  }, {
    "from": 561,
    "label": "has",
    "to": 564
  }, {
    "from": 561,
    "label": "has",
    "to": 565
  }, {
    "from": 561,
    "label": "has",
    "to": 566
  }, {
    "from": 561,
    "label": "has",
    "to": 567
  }, {
    "from": 561,
    "label": "has",
    "to": 568
  }, {
    "from": 561,
    "label": "has",
    "to": 502
  }, {
    "from": 561,
    "label": "has",
    "to": 569
  }, {
    "from": 570,
    "label": "has",
    "to": 205
  }, {
    "from": 570,
    "label": "has",
    "to": 571
  }, {
    "from": 570,
    "label": "has",
    "to": 534
  }, {
    "from": 570,
    "label": "has",
    "to": 535
  }, {
    "from": 570,
    "label": "has",
    "to": 525
  }, {
    "from": 570,
    "label": "has",
    "to": 572
  }, {
    "from": 570,
    "label": "has",
    "to": 537
  }, {
    "from": 570,
    "label": "has",
    "to": 573
  }, {
    "from": 570,
    "label": "has",
    "to": 574
  }, {
    "from": 570,
    "label": "has",
    "to": 575
  }, {
    "from": 570,
    "label": "has",
    "to": 576
  }, {
    "from": 570,
    "label": "has",
    "to": 567
  }, {
    "from": 570,
    "label": "has",
    "to": 577
  }, {
    "from": 570,
    "label": "has",
    "to": 568
  }, {
    "from": 570,
    "label": "has",
    "to": 578
  }, {
    "from": 570,
    "label": "has",
    "to": 543
  }, {
    "from": 570,
    "label": "has",
    "to": 579
  }, {
    "from": 580,
    "label": "has",
    "to": 205
  }, {
    "from": 580,
    "label": "has",
    "to": 581
  }, {
    "from": 580,
    "label": "has",
    "to": 525
  }, {
    "from": 580,
    "label": "has",
    "to": 582
  }, {
    "from": 580,
    "label": "has",
    "to": 583
  }, {
    "from": 580,
    "label": "has",
    "to": 584
  }, {
    "from": 585,
    "label": "has",
    "to": 205
  }, {
    "from": 585,
    "label": "has",
    "to": 586
  }, {
    "from": 585,
    "label": "has",
    "to": 526
  }, {
    "from": 585,
    "label": "has",
    "to": 587
  }, {
    "from": 585,
    "label": "has",
    "to": 588
  }, {
    "from": 585,
    "label": "has",
    "to": 589
  }, {
    "from": 590,
    "label": "has",
    "to": 205
  }, {
    "from": 590,
    "label": "has",
    "to": 591
  }, {
    "from": 590,
    "label": "has",
    "to": 526
  }, {
    "from": 590,
    "label": "has",
    "to": 554
  }, {
    "from": 590,
    "label": "has",
    "to": 525
  }, {
    "from": 590,
    "label": "has",
    "to": 587
  }, {
    "from": 590,
    "label": "has",
    "to": 592
  }, {
    "from": 590,
    "label": "has",
    "to": 593
  }, {
    "from": 594,
    "label": "has",
    "to": 205
  }, {
    "from": 594,
    "label": "has",
    "to": 595
  }, {
    "from": 594,
    "label": "has",
    "to": 596
  }, {
    "from": 594,
    "label": "has",
    "to": 597
  }, {
    "from": 594,
    "label": "has",
    "to": 598
  }, {
    "from": 594,
    "label": "has",
    "to": 599
  }, {
    "from": 600,
    "label": "has",
    "to": 205
  }, {
    "from": 600,
    "label": "has",
    "to": 601
  }, {
    "from": 600,
    "label": "has",
    "to": 602
  }, {
    "from": 600,
    "label": "has",
    "to": 603
  }, {
    "from": 600,
    "label": "has",
    "to": 604
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 18
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 605,
    "label": "calls",
    "to": 612
  }, {
    "from": 132,
    "label": "calls",
    "to": 613
  }, {
    "from": 132,
    "label": "calls",
    "to": 613
  }, {
    "from": 605,
    "label": "calls",
    "to": 5
  }, {
    "from": 605,
    "label": "calls",
    "to": 5
  }, {
    "from": 605,
    "label": "calls",
    "to": 5
  }, {
    "from": 605,
    "label": "calls",
    "to": 5
  }, {
    "from": 605,
    "label": "calls",
    "to": 24
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 25
  }, {
    "from": 605,
    "label": "calls",
    "to": 610
  }, {
    "from": 605,
    "label": "calls",
    "to": 12
  }, {
    "from": 605,
    "label": "calls",
    "to": 12
  }, {
    "from": 605,
    "label": "calls",
    "to": 12
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 605,
    "label": "calls",
    "to": 11
  }, {
    "from": 135,
    "label": "calls",
    "to": 614
  }, {
    "from": 135,
    "label": "calls",
    "to": 614
  }, {
    "from": 135,
    "label": "calls",
    "to": 614
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 22
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 16
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 10
  }, {
    "from": 605,
    "label": "calls",
    "to": 4
  }, {
    "from": 605,
    "label": "calls",
    "to": 4
  }, {
    "from": 605,
    "label": "calls",
    "to": 14
  }, {
    "from": 135,
    "label": "calls",
    "to": 617
  }, {
    "from": 605,
    "label": "calls",
    "to": 6
  }, {
    "from": 605,
    "label": "calls",
    "to": 6
  }, {
    "from": 605,
    "label": "calls",
    "to": 6
  }, {
    "from": 605,
    "label": "calls",
    "to": 6
  }, {
    "from": 605,
    "label": "calls",
    "to": 6
  }, {
    "from": 605,
    "label": "calls",
    "to": 6
  }, {
    "from": 605,
    "label": "calls",
    "to": 6
  }, {
    "from": 605,
    "label": "calls",
    "to": 8
  }, {
    "from": 605,
    "label": "calls",
    "to": 8
  }, {
    "from": 605,
    "label": "calls",
    "to": 29
  }, {
    "from": 605,
    "label": "calls",
    "to": 29
  }, {
    "from": 605,
    "label": "calls",
    "to": 29
  }, {
    "from": 605,
    "label": "calls",
    "to": 29
  }, {
    "from": 605,
    "label": "calls",
    "to": 607
  }, {
    "from": 605,
    "label": "calls",
    "to": 607
  }, {
    "from": 605,
    "label": "calls",
    "to": 607
  }, {
    "from": 605,
    "label": "calls",
    "to": 607
  }, {
    "from": 605,
    "label": "calls",
    "to": 607
  }, {
    "from": 605,
    "label": "calls",
    "to": 607
  }, {
    "from": 605,
    "label": "calls",
    "to": 607
  }, {
    "from": 605,
    "label": "calls",
    "to": 607
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 615
  }, {
    "from": 605,
    "label": "calls",
    "to": 26
  }, {
    "from": 605,
    "label": "calls",
    "to": 26
  }, {
    "from": 605,
    "label": "calls",
    "to": 27
  }, {
    "from": 605,
    "label": "calls",
    "to": 27
  }, {
    "from": 605,
    "label": "calls",
    "to": 15
  }, {
    "from": 605,
    "label": "calls",
    "to": 15
  }, {
    "from": 605,
    "label": "calls",
    "to": 15
  }, {
    "from": 605,
    "label": "calls",
    "to": 15
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 19
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 17
  }, {
    "from": 605,
    "label": "calls",
    "to": 7
  }, {
    "from": 605,
    "label": "calls",
    "to": 7
  }, {
    "from": 605,
    "label": "calls",
    "to": 28
  }, {
    "from": 605,
    "label": "calls",
    "to": 28
  }, {
    "from": 135,
    "label": "calls",
    "to": 616
  }, {
    "from": 605,
    "label": "calls",
    "to": 616
  }, {
    "from": 605,
    "label": "calls",
    "to": 135
  }, {
    "from": 605,
    "label": "calls",
    "to": 13
  }, {
    "from": 605,
    "label": "calls",
    "to": 13
  }, {
    "from": 605,
    "label": "calls",
    "to": 13
  }, {
    "from": 605,
    "label": "calls",
    "to": 13
  }, {
    "from": 605,
    "label": "calls",
    "to": 13
  }, {
    "from": 132,
    "label": "calls",
    "to": 30
  }, {
    "from": 605,
    "label": "calls",
    "to": 611
  }, {
    "from": 605,
    "label": "calls",
    "to": 611
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 132
  }, {
    "from": 605,
    "label": "calls",
    "to": 21
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 618
  }, {
    "from": 605,
    "label": "calls",
    "to": 31
  }, {
    "from": 605,
    "label": "calls",
    "to": 23
  }, {
    "from": 605,
    "label": "calls",
    "to": 23
  }, {
    "from": 605,
    "label": "calls",
    "to": 20
  }, {
    "from": 605,
    "label": "calls",
    "to": 20
  }, {
    "from": 605,
    "label": "calls",
    "to": 20
  }, {
    "from": 605,
    "label": "calls",
    "to": 20
  }, {
    "from": 605,
    "label": "calls",
    "to": 20
  }, {
    "from": 132,
    "label": "calls",
    "to": 619
  }, {
    "from": 605,
    "label": "calls",
    "to": 619
  }, {
    "from": 605,
    "label": "calls",
    "to": 619
  }, {
    "from": 605,
    "label": "calls",
    "to": 619
  }, {
    "from": 605,
    "label": "calls",
    "to": 619
  }, {
    "from": 605,
    "label": "calls",
    "to": 619
  }, {
    "from": 605,
    "label": "calls",
    "to": 620
  }, {
    "from": 605,
    "label": "calls",
    "to": 620
  }, {
    "from": 605,
    "label": "calls",
    "to": 620
  }, {
    "from": 605,
    "label": "calls",
    "to": 620
  }, {
    "from": 605,
    "label": "calls",
    "to": 620
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 609
  }, {
    "from": 605,
    "label": "calls",
    "to": 9
  }, {
    "from": 605,
    "label": "calls",
    "to": 9
  }, {
    "from": 605,
    "label": "calls",
    "to": 9
  }, {
    "from": 605,
    "label": "calls",
    "to": 9
  }, {
    "from": 605,
    "label": "calls",
    "to": 9
  }, {
    "from": 605,
    "label": "calls",
    "to": 9
  }, {
    "from": 605,
    "label": "calls",
    "to": 9
  }, {
    "from": 605,
    "label": "calls",
    "to": 9
  }, {
    "from": 3,
    "label": "contains",
    "to": 605
  }, {
    "from": 605,
    "label": "declares",
    "to": 132
  }, {
    "from": 605,
    "label": "declares",
    "to": 135
  }, {
    "from": 605,
    "label": "declares",
    "to": 148
  }, {
    "from": 605,
    "label": "declares",
    "to": 153
  }, {
    "from": 605,
    "label": "declares",
    "to": 157
  }, {
    "from": 605,
    "label": "declares",
    "to": 161
  }, {
    "from": 605,
    "label": "declares",
    "to": 165
  }, {
    "from": 605,
    "label": "declares",
    "to": 169
  }, {
    "from": 605,
    "label": "declares",
    "to": 172
  }, {
    "from": 605,
    "label": "declares",
    "to": 176
  }, {
    "from": 605,
    "label": "declares",
    "to": 180
  }, {
    "from": 605,
    "label": "declares",
    "to": 183
  }, {
    "from": 605,
    "label": "declares",
    "to": 187
  }, {
    "from": 605,
    "label": "declares",
    "to": 190
  }, {
    "from": 605,
    "label": "declares",
    "to": 193
  }, {
    "from": 605,
    "label": "declares",
    "to": 196
  }, {
    "from": 605,
    "label": "declares",
    "to": 200
  }, {
    "from": 605,
    "label": "declares",
    "to": 204
  }, {
    "from": 605,
    "label": "declares",
    "to": 209
  }, {
    "from": 605,
    "label": "declares",
    "to": 213
  }, {
    "from": 605,
    "label": "declares",
    "to": 217
  }, {
    "from": 605,
    "label": "declares",
    "to": 220
  }, {
    "from": 605,
    "label": "declares",
    "to": 223
  }, {
    "from": 605,
    "label": "declares",
    "to": 227
  }, {
    "from": 605,
    "label": "declares",
    "to": 230
  }, {
    "from": 605,
    "label": "declares",
    "to": 233
  }, {
    "from": 605,
    "label": "declares",
    "to": 236
  }, {
    "from": 605,
    "label": "declares",
    "to": 239
  }, {
    "from": 605,
    "label": "declares",
    "to": 242
  }, {
    "from": 605,
    "label": "declares",
    "to": 245
  }, {
    "from": 605,
    "label": "declares",
    "to": 248
  }, {
    "from": 605,
    "label": "declares",
    "to": 251
  }, {
    "from": 605,
    "label": "declares",
    "to": 254
  }, {
    "from": 605,
    "label": "declares",
    "to": 257
  }, {
    "from": 605,
    "label": "declares",
    "to": 260
  }, {
    "from": 605,
    "label": "declares",
    "to": 266
  }, {
    "from": 605,
    "label": "declares",
    "to": 271
  }, {
    "from": 605,
    "label": "declares",
    "to": 274
  }, {
    "from": 605,
    "label": "declares",
    "to": 276
  }, {
    "from": 605,
    "label": "declares",
    "to": 280
  }, {
    "from": 605,
    "label": "declares",
    "to": 283
  }, {
    "from": 605,
    "label": "declares",
    "to": 289
  }, {
    "from": 605,
    "label": "declares",
    "to": 292
  }, {
    "from": 605,
    "label": "declares",
    "to": 295
  }, {
    "from": 605,
    "label": "declares",
    "to": 298
  }, {
    "from": 605,
    "label": "declares",
    "to": 300
  }, {
    "from": 605,
    "label": "declares",
    "to": 303
  }, {
    "from": 605,
    "label": "declares",
    "to": 306
  }, {
    "from": 605,
    "label": "declares",
    "to": 310
  }, {
    "from": 605,
    "label": "declares",
    "to": 314
  }, {
    "from": 605,
    "label": "declares",
    "to": 316
  }, {
    "from": 605,
    "label": "declares",
    "to": 320
  }, {
    "from": 605,
    "label": "declares",
    "to": 322
  }, {
    "from": 605,
    "label": "declares",
    "to": 326
  }, {
    "from": 605,
    "label": "declares",
    "to": 330
  }, {
    "from": 605,
    "label": "declares",
    "to": 333
  }, {
    "from": 605,
    "label": "declares",
    "to": 337
  }, {
    "from": 605,
    "label": "declares",
    "to": 340
  }, {
    "from": 605,
    "label": "declares",
    "to": 343
  }, {
    "from": 605,
    "label": "declares",
    "to": 346
  }, {
    "from": 605,
    "label": "declares",
    "to": 349
  }, {
    "from": 605,
    "label": "declares",
    "to": 352
  }, {
    "from": 605,
    "label": "declares",
    "to": 356
  }, {
    "from": 605,
    "label": "declares",
    "to": 360
  }, {
    "from": 605,
    "label": "declares",
    "to": 363
  }, {
    "from": 605,
    "label": "declares",
    "to": 366
  }, {
    "from": 605,
    "label": "declares",
    "to": 370
  }, {
    "from": 605,
    "label": "declares",
    "to": 373
  }, {
    "from": 605,
    "label": "declares",
    "to": 376
  }, {
    "from": 605,
    "label": "declares",
    "to": 379
  }, {
    "from": 605,
    "label": "declares",
    "to": 383
  }, {
    "from": 605,
    "label": "declares",
    "to": 386
  }, {
    "from": 605,
    "label": "declares",
    "to": 389
  }, {
    "from": 605,
    "label": "declares",
    "to": 392
  }, {
    "from": 605,
    "label": "declares",
    "to": 396
  }, {
    "from": 605,
    "label": "declares",
    "to": 400
  }, {
    "from": 605,
    "label": "declares",
    "to": 404
  }, {
    "from": 605,
    "label": "declares",
    "to": 408
  }, {
    "from": 605,
    "label": "declares",
    "to": 411
  }, {
    "from": 605,
    "label": "declares",
    "to": 414
  }, {
    "from": 605,
    "label": "declares",
    "to": 417
  }, {
    "from": 605,
    "label": "declares",
    "to": 420
  }, {
    "from": 605,
    "label": "declares",
    "to": 424
  }, {
    "from": 605,
    "label": "declares",
    "to": 428
  }, {
    "from": 605,
    "label": "declares",
    "to": 431
  }, {
    "from": 605,
    "label": "declares",
    "to": 434
  }, {
    "from": 605,
    "label": "declares",
    "to": 437
  }, {
    "from": 605,
    "label": "declares",
    "to": 440
  }, {
    "from": 605,
    "label": "declares",
    "to": 444
  }, {
    "from": 605,
    "label": "declares",
    "to": 448
  }, {
    "from": 605,
    "label": "declares",
    "to": 451
  }, {
    "from": 605,
    "label": "declares",
    "to": 454
  }, {
    "from": 605,
    "label": "declares",
    "to": 457
  }, {
    "from": 605,
    "label": "declares",
    "to": 460
  }, {
    "from": 605,
    "label": "declares",
    "to": 463
  }, {
    "from": 605,
    "label": "declares",
    "to": 466
  }, {
    "from": 605,
    "label": "declares",
    "to": 470
  }, {
    "from": 605,
    "label": "declares",
    "to": 474
  }, {
    "from": 605,
    "label": "declares",
    "to": 477
  }, {
    "from": 605,
    "label": "declares",
    "to": 480
  }, {
    "from": 605,
    "label": "declares",
    "to": 484
  }, {
    "from": 605,
    "label": "declares",
    "to": 488
  }, {
    "from": 605,
    "label": "declares",
    "to": 492
  }, {
    "from": 605,
    "label": "declares",
    "to": 505
  }, {
    "from": 605,
    "label": "declares",
    "to": 509
  }, {
    "from": 605,
    "label": "declares",
    "to": 518
  }, {
    "from": 605,
    "label": "declares",
    "to": 523
  }, {
    "from": 605,
    "label": "declares",
    "to": 532
  }, {
    "from": 605,
    "label": "declares",
    "to": 545
  }, {
    "from": 605,
    "label": "declares",
    "to": 552
  }, {
    "from": 605,
    "label": "declares",
    "to": 561
  }, {
    "from": 605,
    "label": "declares",
    "to": 570
  }, {
    "from": 605,
    "label": "declares",
    "to": 580
  }, {
    "from": 605,
    "label": "declares",
    "to": 585
  }, {
    "from": 605,
    "label": "declares",
    "to": 590
  }, {
    "from": 605,
    "label": "declares",
    "to": 594
  }, {
    "from": 605,
    "label": "declares",
    "to": 600
  }, {
    "from": 3,
    "label": "contains",
    "to": 623
  }, {
    "from": 3,
    "label": "contains",
    "to": 624
  }, {
    "from": 623,
    "label": "initializes",
    "to": 625
  }, {
    "from": 625,
    "label": "assigns",
    "to": 626
  }, {
    "from": 623,
    "label": "initializes",
    "to": 627
  }, {
    "from": 627,
    "label": "assigns",
    "to": 628
  }, {
    "from": 623,
    "label": "initializes",
    "to": 629
  }, {
    "from": 629,
    "label": "assigns",
    "to": 630
  }, {
    "from": 623,
    "label": "initializes",
    "to": 631
  }, {
    "from": 631,
    "label": "assigns",
    "to": 632
  }, {
    "from": 623,
    "label": "initializes",
    "to": 633
  }, {
    "from": 633,
    "label": "assigns",
    "to": 634
  }, {
    "from": 623,
    "label": "initializes",
    "to": 635
  }, {
    "from": 635,
    "label": "assigns",
    "to": 636
  }, {
    "from": 623,
    "label": "initializes",
    "to": 637
  }, {
    "from": 637,
    "label": "assigns",
    "to": 638
  }, {
    "from": 623,
    "label": "initializes",
    "to": 639
  }, {
    "from": 639,
    "label": "assigns",
    "to": 640
  }, {
    "from": 623,
    "label": "initializes",
    "to": 641
  }, {
    "from": 641,
    "label": "assigns",
    "to": 642
  }, {
    "from": 623,
    "label": "initializes",
    "to": 643
  }, {
    "from": 643,
    "label": "assigns",
    "to": 644
  }, {
    "from": 623,
    "label": "initializes",
    "to": 645
  }, {
    "from": 645,
    "label": "assigns",
    "to": 646
  }, {
    "from": 623,
    "label": "initializes",
    "to": 647
  }, {
    "from": 647,
    "label": "assigns",
    "to": 648
  }, {
    "from": 623,
    "label": "initializes",
    "to": 649
  }, {
    "from": 649,
    "label": "assigns",
    "to": 650
  }, {
    "from": 623,
    "label": "initializes",
    "to": 651
  }, {
    "from": 651,
    "label": "assigns",
    "to": 652
  }, {
    "from": 623,
    "label": "initializes",
    "to": 653
  }, {
    "from": 653,
    "label": "assigns",
    "to": 654
  }, {
    "from": 623,
    "label": "initializes",
    "to": 655
  }, {
    "from": 655,
    "label": "assigns",
    "to": 656
  }, {
    "from": 623,
    "label": "initializes",
    "to": 657
  }, {
    "from": 657,
    "label": "assigns",
    "to": 658
  }, {
    "from": 623,
    "label": "initializes",
    "to": 659
  }, {
    "from": 659,
    "label": "assigns",
    "to": 660
  }, {
    "from": 623,
    "label": "initializes",
    "to": 661
  }, {
    "from": 661,
    "label": "assigns",
    "to": 662
  }, {
    "from": 623,
    "label": "initializes",
    "to": 663
  }, {
    "from": 663,
    "label": "assigns",
    "to": 664
  }, {
    "from": 623,
    "label": "initializes",
    "to": 665
  }, {
    "from": 665,
    "label": "assigns",
    "to": 666
  }, {
    "from": 623,
    "label": "initializes",
    "to": 667
  }, {
    "from": 667,
    "label": "assigns",
    "to": 668
  }, {
    "from": 623,
    "label": "initializes",
    "to": 669
  }, {
    "from": 669,
    "label": "assigns",
    "to": 670
  }, {
    "from": 623,
    "label": "initializes",
    "to": 671
  }, {
    "from": 671,
    "label": "assigns",
    "to": 672
  }, {
    "from": 623,
    "label": "initializes",
    "to": 673
  }, {
    "from": 673,
    "label": "assigns",
    "to": 674
  }, {
    "from": 623,
    "label": "initializes",
    "to": 675
  }, {
    "from": 675,
    "label": "assigns",
    "to": 676
  }, {
    "from": 623,
    "label": "initializes",
    "to": 677
  }, {
    "from": 677,
    "label": "assigns",
    "to": 678
  }, {
    "from": 623,
    "label": "initializes",
    "to": 679
  }, {
    "from": 679,
    "label": "assigns",
    "to": 680
  }, {
    "from": 623,
    "label": "initializes",
    "to": 681
  }, {
    "from": 681,
    "label": "assigns",
    "to": 682
  }, {
    "from": 623,
    "label": "initializes",
    "to": 683
  }, {
    "from": 683,
    "label": "assigns",
    "to": 684
  }, {
    "from": 623,
    "label": "initializes",
    "to": 685
  }, {
    "from": 685,
    "label": "assigns",
    "to": 686
  }, {
    "from": 623,
    "label": "initializes",
    "to": 687
  }, {
    "from": 687,
    "label": "assigns",
    "to": 688
  }, {
    "from": 623,
    "label": "initializes",
    "to": 689
  }, {
    "from": 689,
    "label": "assigns",
    "to": 690
  }, {
    "from": 623,
    "label": "initializes",
    "to": 691
  }, {
    "from": 691,
    "label": "assigns",
    "to": 692
  }, {
    "from": 623,
    "label": "initializes",
    "to": 693
  }, {
    "from": 693,
    "label": "assigns",
    "to": 694
  }, {
    "from": 623,
    "label": "initializes",
    "to": 695
  }, {
    "from": 695,
    "label": "assigns",
    "to": 696
  }, {
    "from": 623,
    "label": "initializes",
    "to": 697
  }, {
    "from": 697,
    "label": "assigns",
    "to": 698
  }, {
    "from": 623,
    "label": "initializes",
    "to": 699
  }, {
    "from": 699,
    "label": "assigns",
    "to": 700
  }, {
    "from": 623,
    "label": "initializes",
    "to": 701
  }, {
    "from": 701,
    "label": "assigns",
    "to": 702
  }, {
    "from": 623,
    "label": "initializes",
    "to": 703
  }, {
    "from": 703,
    "label": "assigns",
    "to": 704
  }, {
    "from": 623,
    "label": "initializes",
    "to": 705
  }, {
    "from": 705,
    "label": "assigns",
    "to": 706
  }, {
    "from": 623,
    "label": "initializes",
    "to": 707
  }, {
    "from": 707,
    "label": "assigns",
    "to": 708
  }, {
    "from": 623,
    "label": "initializes",
    "to": 709
  }, {
    "from": 709,
    "label": "assigns",
    "to": 710
  }, {
    "from": 623,
    "label": "initializes",
    "to": 711
  }, {
    "from": 711,
    "label": "assigns",
    "to": 712
  }, {
    "from": 623,
    "label": "initializes",
    "to": 713
  }, {
    "from": 713,
    "label": "assigns",
    "to": 714
  }, {
    "from": 623,
    "label": "initializes",
    "to": 715
  }, {
    "from": 715,
    "label": "assigns",
    "to": 716
  }, {
    "from": 623,
    "label": "initializes",
    "to": 717
  }, {
    "from": 717,
    "label": "assigns",
    "to": 718
  }, {
    "from": 623,
    "label": "initializes",
    "to": 719
  }, {
    "from": 719,
    "label": "assigns",
    "to": 720
  }, {
    "from": 623,
    "label": "initializes",
    "to": 721
  }, {
    "from": 721,
    "label": "assigns",
    "to": 722
  }, {
    "from": 623,
    "label": "initializes",
    "to": 723
  }, {
    "from": 723,
    "label": "assigns",
    "to": 724
  }, {
    "from": 623,
    "label": "initializes",
    "to": 725
  }, {
    "from": 725,
    "label": "assigns",
    "to": 726
  }, {
    "from": 623,
    "label": "initializes",
    "to": 727
  }, {
    "from": 727,
    "label": "assigns",
    "to": 728
  }, {
    "from": 623,
    "label": "initializes",
    "to": 729
  }, {
    "from": 729,
    "label": "assigns",
    "to": 730
  }, {
    "from": 623,
    "label": "initializes",
    "to": 731
  }, {
    "from": 731,
    "label": "assigns",
    "to": 732
  }, {
    "from": 623,
    "label": "initializes",
    "to": 733
  }, {
    "from": 733,
    "label": "assigns",
    "to": 734
  }, {
    "from": 623,
    "label": "initializes",
    "to": 735
  }, {
    "from": 735,
    "label": "assigns",
    "to": 736
  }, {
    "from": 623,
    "label": "initializes",
    "to": 737
  }, {
    "from": 737,
    "label": "assigns",
    "to": 738
  }, {
    "from": 623,
    "label": "initializes",
    "to": 739
  }, {
    "from": 739,
    "label": "assigns",
    "to": 740
  }, {
    "from": 623,
    "label": "initializes",
    "to": 741
  }, {
    "from": 741,
    "label": "assigns",
    "to": 742
  }, {
    "from": 623,
    "label": "initializes",
    "to": 743
  }, {
    "from": 743,
    "label": "assigns",
    "to": 744
  }, {
    "from": 623,
    "label": "initializes",
    "to": 745
  }, {
    "from": 745,
    "label": "assigns",
    "to": 746
  }, {
    "from": 623,
    "label": "initializes",
    "to": 747
  }, {
    "from": 747,
    "label": "assigns",
    "to": 748
  }, {
    "from": 623,
    "label": "initializes",
    "to": 749
  }, {
    "from": 749,
    "label": "assigns",
    "to": 750
  }, {
    "from": 623,
    "label": "initializes",
    "to": 751
  }, {
    "from": 751,
    "label": "assigns",
    "to": 752
  }, {
    "from": 623,
    "label": "initializes",
    "to": 753
  }, {
    "from": 753,
    "label": "assigns",
    "to": 754
  }, {
    "from": 623,
    "label": "initializes",
    "to": 755
  }, {
    "from": 755,
    "label": "assigns",
    "to": 756
  }, {
    "from": 623,
    "label": "initializes",
    "to": 757
  }, {
    "from": 757,
    "label": "assigns",
    "to": 758
  }, {
    "from": 623,
    "label": "initializes",
    "to": 759
  }, {
    "from": 759,
    "label": "assigns",
    "to": 760
  }, {
    "from": 623,
    "label": "initializes",
    "to": 761
  }, {
    "from": 761,
    "label": "assigns",
    "to": 762
  }, {
    "from": 623,
    "label": "initializes",
    "to": 763
  }, {
    "from": 763,
    "label": "assigns",
    "to": 764
  }, {
    "from": 623,
    "label": "initializes",
    "to": 765
  }, {
    "from": 765,
    "label": "assigns",
    "to": 766
  }, {
    "from": 623,
    "label": "initializes",
    "to": 767
  }, {
    "from": 767,
    "label": "assigns",
    "to": 768
  }, {
    "from": 623,
    "label": "initializes",
    "to": 769
  }, {
    "from": 769,
    "label": "assigns",
    "to": 770
  }, {
    "from": 623,
    "label": "initializes",
    "to": 771
  }, {
    "from": 771,
    "label": "assigns",
    "to": 772
  }, {
    "from": 623,
    "label": "initializes",
    "to": 773
  }, {
    "from": 773,
    "label": "assigns",
    "to": 774
  }, {
    "from": 623,
    "label": "initializes",
    "to": 775
  }, {
    "from": 775,
    "label": "assigns",
    "to": 776
  }, {
    "from": 623,
    "label": "initializes",
    "to": 777
  }, {
    "from": 777,
    "label": "assigns",
    "to": 778
  }, {
    "from": 623,
    "label": "initializes",
    "to": 779
  }, {
    "from": 779,
    "label": "assigns",
    "to": 780
  }, {
    "from": 623,
    "label": "initializes",
    "to": 781
  }, {
    "from": 781,
    "label": "assigns",
    "to": 782
  }, {
    "from": 623,
    "label": "initializes",
    "to": 783
  }, {
    "from": 783,
    "label": "assigns",
    "to": 784
  }, {
    "from": 623,
    "label": "initializes",
    "to": 785
  }, {
    "from": 785,
    "label": "assigns",
    "to": 786
  }, {
    "from": 623,
    "label": "initializes",
    "to": 787
  }, {
    "from": 787,
    "label": "assigns",
    "to": 788
  }, {
    "from": 623,
    "label": "initializes",
    "to": 789
  }, {
    "from": 789,
    "label": "assigns",
    "to": 790
  }, {
    "from": 623,
    "label": "initializes",
    "to": 791
  }, {
    "from": 791,
    "label": "assigns",
    "to": 792
  }, {
    "from": 623,
    "label": "initializes",
    "to": 793
  }, {
    "from": 793,
    "label": "assigns",
    "to": 794
  }, {
    "from": 623,
    "label": "initializes",
    "to": 795
  }, {
    "from": 795,
    "label": "assigns",
    "to": 796
  }, {
    "from": 623,
    "label": "initializes",
    "to": 797
  }, {
    "from": 797,
    "label": "assigns",
    "to": 798
  }, {
    "from": 623,
    "label": "initializes",
    "to": 799
  }, {
    "from": 799,
    "label": "assigns",
    "to": 800
  }, {
    "from": 623,
    "label": "initializes",
    "to": 801
  }, {
    "from": 801,
    "label": "assigns",
    "to": 802
  }, {
    "from": 623,
    "label": "initializes",
    "to": 803
  }, {
    "from": 803,
    "label": "assigns",
    "to": 804
  }, {
    "from": 623,
    "label": "initializes",
    "to": 805
  }, {
    "from": 805,
    "label": "assigns",
    "to": 806
  }, {
    "from": 623,
    "label": "initializes",
    "to": 807
  }, {
    "from": 807,
    "label": "assigns",
    "to": 808
  }, {
    "from": 623,
    "label": "initializes",
    "to": 809
  }, {
    "from": 809,
    "label": "assigns",
    "to": 810
  }, {
    "from": 623,
    "label": "initializes",
    "to": 811
  }, {
    "from": 811,
    "label": "assigns",
    "to": 812
  }, {
    "from": 623,
    "label": "initializes",
    "to": 813
  }, {
    "from": 813,
    "label": "assigns",
    "to": 814
  }, {
    "from": 623,
    "label": "initializes",
    "to": 815
  }, {
    "from": 815,
    "label": "assigns",
    "to": 816
  }, {
    "from": 623,
    "label": "initializes",
    "to": 817
  }, {
    "from": 817,
    "label": "assigns",
    "to": 818
  }, {
    "from": 623,
    "label": "initializes",
    "to": 819
  }, {
    "from": 819,
    "label": "assigns",
    "to": 820
  }, {
    "from": 623,
    "label": "initializes",
    "to": 821
  }, {
    "from": 821,
    "label": "assigns",
    "to": 822
  }, {
    "from": 623,
    "label": "initializes",
    "to": 823
  }, {
    "from": 823,
    "label": "assigns",
    "to": 824
  }, {
    "from": 623,
    "label": "initializes",
    "to": 825
  }, {
    "from": 825,
    "label": "assigns",
    "to": 826
  }, {
    "from": 623,
    "label": "initializes",
    "to": 827
  }, {
    "from": 827,
    "label": "assigns",
    "to": 828
  }, {
    "from": 623,
    "label": "initializes",
    "to": 829
  }, {
    "from": 829,
    "label": "assigns",
    "to": 830
  }, {
    "from": 623,
    "label": "initializes",
    "to": 831
  }, {
    "from": 831,
    "label": "assigns",
    "to": 832
  }, {
    "from": 623,
    "label": "initializes",
    "to": 833
  }, {
    "from": 833,
    "label": "assigns",
    "to": 834
  }, {
    "from": 623,
    "label": "initializes",
    "to": 835
  }, {
    "from": 835,
    "label": "assigns",
    "to": 836
  }, {
    "from": 623,
    "label": "initializes",
    "to": 837
  }, {
    "from": 837,
    "label": "assigns",
    "to": 838
  }, {
    "from": 623,
    "label": "initializes",
    "to": 839
  }, {
    "from": 839,
    "label": "assigns",
    "to": 840
  }, {
    "from": 623,
    "label": "initializes",
    "to": 841
  }, {
    "from": 841,
    "label": "assigns",
    "to": 842
  }, {
    "from": 623,
    "label": "initializes",
    "to": 843
  }, {
    "from": 843,
    "label": "assigns",
    "to": 844
  }, {
    "from": 623,
    "label": "initializes",
    "to": 845
  }, {
    "from": 845,
    "label": "assigns",
    "to": 846
  }, {
    "from": 623,
    "label": "initializes",
    "to": 847
  }, {
    "from": 847,
    "label": "assigns",
    "to": 848
  }, {
    "from": 623,
    "label": "initializes",
    "to": 849
  }, {
    "from": 849,
    "label": "assigns",
    "to": 850
  }, {
    "from": 623,
    "label": "initializes",
    "to": 851
  }, {
    "from": 851,
    "label": "assigns",
    "to": 852
  }, {
    "from": 623,
    "label": "initializes",
    "to": 853
  }, {
    "from": 853,
    "label": "assigns",
    "to": 854
  }, {
    "from": 623,
    "label": "initializes",
    "to": 855
  }, {
    "from": 855,
    "label": "assigns",
    "to": 856
  }, {
    "from": 623,
    "label": "initializes",
    "to": 857
  }, {
    "from": 857,
    "label": "assigns",
    "to": 858
  }, {
    "from": 623,
    "label": "initializes",
    "to": 859
  }, {
    "from": 859,
    "label": "assigns",
    "to": 860
  }, {
    "from": 624,
    "label": "initializes",
    "to": 861
  }, {
    "from": 861,
    "label": "requires",
    "to": 608
  }, {
    "from": 624,
    "label": "initializes",
    "to": 862
  }, {
    "from": 862,
    "label": "requires",
    "to": 621
  }, {
    "from": 624,
    "label": "initializes",
    "to": 863
  }, {
    "from": 863,
    "label": "requires",
    "to": 1
  }, {
    "from": 624,
    "label": "initializes",
    "to": 864
  }, {
    "from": 864,
    "label": "requires",
    "to": 2
  }, {
    "from": 624,
    "label": "initializes",
    "to": 865
  }, {
    "from": 865,
    "label": "requires",
    "to": 606
  }, {
    "from": 625,
    "label": "contains",
    "to": 32
  }, {
    "from": 625,
    "label": "contains",
    "to": 33
  }, {
    "from": 625,
    "label": "contains",
    "to": 34
  }, {
    "from": 625,
    "label": "contains",
    "to": 35
  }, {
    "from": 625,
    "label": "contains",
    "to": 36
  }, {
    "from": 625,
    "label": "contains",
    "to": 37
  }, {
    "from": 625,
    "label": "contains",
    "to": 38
  }, {
    "from": 625,
    "label": "contains",
    "to": 39
  }, {
    "from": 625,
    "label": "contains",
    "to": 40
  }, {
    "from": 625,
    "label": "contains",
    "to": 41
  }, {
    "from": 625,
    "label": "contains",
    "to": 42
  }, {
    "from": 625,
    "label": "contains",
    "to": 43
  }, {
    "from": 625,
    "label": "contains",
    "to": 44
  }, {
    "from": 625,
    "label": "contains",
    "to": 45
  }, {
    "from": 625,
    "label": "contains",
    "to": 46
  }, {
    "from": 625,
    "label": "contains",
    "to": 47
  }, {
    "from": 625,
    "label": "contains",
    "to": 48
  }, {
    "from": 625,
    "label": "contains",
    "to": 49
  }, {
    "from": 625,
    "label": "contains",
    "to": 50
  }, {
    "from": 625,
    "label": "contains",
    "to": 51
  }, {
    "from": 625,
    "label": "contains",
    "to": 52
  }, {
    "from": 625,
    "label": "contains",
    "to": 53
  }, {
    "from": 625,
    "label": "contains",
    "to": 54
  }, {
    "from": 625,
    "label": "contains",
    "to": 55
  }, {
    "from": 625,
    "label": "contains",
    "to": 56
  }, {
    "from": 625,
    "label": "contains",
    "to": 57
  }, {
    "from": 625,
    "label": "contains",
    "to": 58
  }, {
    "from": 625,
    "label": "contains",
    "to": 59
  }, {
    "from": 625,
    "label": "contains",
    "to": 60
  }, {
    "from": 625,
    "label": "contains",
    "to": 61
  }, {
    "from": 625,
    "label": "contains",
    "to": 62
  }, {
    "from": 625,
    "label": "contains",
    "to": 63
  }, {
    "from": 625,
    "label": "contains",
    "to": 64
  }, {
    "from": 625,
    "label": "contains",
    "to": 65
  }, {
    "from": 625,
    "label": "contains",
    "to": 66
  }, {
    "from": 625,
    "label": "contains",
    "to": 67
  }, {
    "from": 625,
    "label": "contains",
    "to": 68
  }, {
    "from": 625,
    "label": "contains",
    "to": 69
  }, {
    "from": 625,
    "label": "contains",
    "to": 70
  }, {
    "from": 625,
    "label": "contains",
    "to": 71
  }, {
    "from": 625,
    "label": "contains",
    "to": 72
  }, {
    "from": 625,
    "label": "contains",
    "to": 73
  }, {
    "from": 625,
    "label": "contains",
    "to": 74
  }, {
    "from": 625,
    "label": "contains",
    "to": 75
  }, {
    "from": 625,
    "label": "contains",
    "to": 76
  }, {
    "from": 625,
    "label": "contains",
    "to": 77
  }, {
    "from": 625,
    "label": "contains",
    "to": 78
  }, {
    "from": 625,
    "label": "contains",
    "to": 79
  }, {
    "from": 625,
    "label": "contains",
    "to": 80
  }, {
    "from": 625,
    "label": "contains",
    "to": 81
  }, {
    "from": 625,
    "label": "contains",
    "to": 82
  }, {
    "from": 625,
    "label": "contains",
    "to": 83
  }, {
    "from": 625,
    "label": "contains",
    "to": 84
  }, {
    "from": 625,
    "label": "contains",
    "to": 85
  }, {
    "from": 625,
    "label": "contains",
    "to": 86
  }, {
    "from": 625,
    "label": "contains",
    "to": 87
  }, {
    "from": 625,
    "label": "contains",
    "to": 88
  }, {
    "from": 625,
    "label": "contains",
    "to": 89
  }, {
    "from": 625,
    "label": "contains",
    "to": 90
  }, {
    "from": 625,
    "label": "contains",
    "to": 91
  }, {
    "from": 625,
    "label": "contains",
    "to": 92
  }, {
    "from": 625,
    "label": "contains",
    "to": 93
  }, {
    "from": 625,
    "label": "contains",
    "to": 94
  }, {
    "from": 625,
    "label": "contains",
    "to": 95
  }, {
    "from": 625,
    "label": "contains",
    "to": 96
  }, {
    "from": 625,
    "label": "contains",
    "to": 97
  }, {
    "from": 625,
    "label": "contains",
    "to": 98
  }, {
    "from": 625,
    "label": "contains",
    "to": 99
  }, {
    "from": 625,
    "label": "contains",
    "to": 100
  }, {
    "from": 625,
    "label": "contains",
    "to": 101
  }, {
    "from": 625,
    "label": "contains",
    "to": 102
  }, {
    "from": 625,
    "label": "contains",
    "to": 103
  }, {
    "from": 625,
    "label": "contains",
    "to": 104
  }, {
    "from": 625,
    "label": "contains",
    "to": 105
  }, {
    "from": 625,
    "label": "contains",
    "to": 106
  }, {
    "from": 625,
    "label": "contains",
    "to": 107
  }, {
    "from": 625,
    "label": "contains",
    "to": 108
  }, {
    "from": 625,
    "label": "contains",
    "to": 109
  }, {
    "from": 625,
    "label": "contains",
    "to": 110
  }, {
    "from": 625,
    "label": "contains",
    "to": 111
  }, {
    "from": 625,
    "label": "contains",
    "to": 112
  }, {
    "from": 625,
    "label": "contains",
    "to": 113
  }, {
    "from": 625,
    "label": "contains",
    "to": 114
  }, {
    "from": 625,
    "label": "contains",
    "to": 115
  }, {
    "from": 625,
    "label": "contains",
    "to": 116
  }, {
    "from": 625,
    "label": "contains",
    "to": 117
  }, {
    "from": 625,
    "label": "contains",
    "to": 118
  }, {
    "from": 625,
    "label": "contains",
    "to": 119
  }, {
    "from": 625,
    "label": "contains",
    "to": 120
  }, {
    "from": 625,
    "label": "contains",
    "to": 121
  }, {
    "from": 625,
    "label": "contains",
    "to": 122
  }, {
    "from": 625,
    "label": "contains",
    "to": 123
  }, {
    "from": 625,
    "label": "contains",
    "to": 124
  }, {
    "from": 625,
    "label": "contains",
    "to": 125
  }, {
    "from": 625,
    "label": "contains",
    "to": 126
  }, {
    "from": 625,
    "label": "contains",
    "to": 127
  }, {
    "from": 625,
    "label": "contains",
    "to": 128
  }, {
    "from": 625,
    "label": "contains",
    "to": 129
  }, {
    "from": 625,
    "label": "contains",
    "to": 130
  }, {
    "from": 625,
    "label": "contains",
    "to": 131
  }, {
    "from": 622,
    "label": "contains",
    "to": 148
  }, {
    "from": 625,
    "label": "contains",
    "to": 148
  }, {
    "from": 622,
    "label": "contains",
    "to": 153
  }, {
    "from": 625,
    "label": "contains",
    "to": 153
  }, {
    "from": 622,
    "label": "contains",
    "to": 157
  }, {
    "from": 625,
    "label": "contains",
    "to": 157
  }, {
    "from": 622,
    "label": "contains",
    "to": 161
  }, {
    "from": 625,
    "label": "contains",
    "to": 161
  }, {
    "from": 622,
    "label": "contains",
    "to": 165
  }, {
    "from": 625,
    "label": "contains",
    "to": 165
  }, {
    "from": 622,
    "label": "contains",
    "to": 169
  }, {
    "from": 625,
    "label": "contains",
    "to": 169
  }, {
    "from": 622,
    "label": "contains",
    "to": 172
  }, {
    "from": 625,
    "label": "contains",
    "to": 172
  }, {
    "from": 622,
    "label": "contains",
    "to": 176
  }, {
    "from": 625,
    "label": "contains",
    "to": 176
  }, {
    "from": 622,
    "label": "contains",
    "to": 180
  }, {
    "from": 625,
    "label": "contains",
    "to": 180
  }, {
    "from": 622,
    "label": "contains",
    "to": 183
  }, {
    "from": 625,
    "label": "contains",
    "to": 183
  }, {
    "from": 622,
    "label": "contains",
    "to": 187
  }, {
    "from": 625,
    "label": "contains",
    "to": 187
  }, {
    "from": 622,
    "label": "contains",
    "to": 190
  }, {
    "from": 625,
    "label": "contains",
    "to": 190
  }, {
    "from": 622,
    "label": "contains",
    "to": 193
  }, {
    "from": 625,
    "label": "contains",
    "to": 193
  }, {
    "from": 622,
    "label": "contains",
    "to": 196
  }, {
    "from": 625,
    "label": "contains",
    "to": 196
  }, {
    "from": 622,
    "label": "contains",
    "to": 200
  }, {
    "from": 625,
    "label": "contains",
    "to": 200
  }, {
    "from": 622,
    "label": "contains",
    "to": 204
  }, {
    "from": 625,
    "label": "contains",
    "to": 204
  }, {
    "from": 622,
    "label": "contains",
    "to": 209
  }, {
    "from": 625,
    "label": "contains",
    "to": 209
  }, {
    "from": 622,
    "label": "contains",
    "to": 213
  }, {
    "from": 625,
    "label": "contains",
    "to": 213
  }, {
    "from": 622,
    "label": "contains",
    "to": 217
  }, {
    "from": 625,
    "label": "contains",
    "to": 217
  }, {
    "from": 622,
    "label": "contains",
    "to": 220
  }, {
    "from": 625,
    "label": "contains",
    "to": 220
  }, {
    "from": 622,
    "label": "contains",
    "to": 223
  }, {
    "from": 625,
    "label": "contains",
    "to": 223
  }, {
    "from": 622,
    "label": "contains",
    "to": 227
  }, {
    "from": 625,
    "label": "contains",
    "to": 227
  }, {
    "from": 622,
    "label": "contains",
    "to": 230
  }, {
    "from": 625,
    "label": "contains",
    "to": 230
  }, {
    "from": 622,
    "label": "contains",
    "to": 233
  }, {
    "from": 625,
    "label": "contains",
    "to": 233
  }, {
    "from": 622,
    "label": "contains",
    "to": 236
  }, {
    "from": 625,
    "label": "contains",
    "to": 236
  }, {
    "from": 622,
    "label": "contains",
    "to": 239
  }, {
    "from": 625,
    "label": "contains",
    "to": 239
  }, {
    "from": 622,
    "label": "contains",
    "to": 242
  }, {
    "from": 625,
    "label": "contains",
    "to": 242
  }, {
    "from": 622,
    "label": "contains",
    "to": 245
  }, {
    "from": 625,
    "label": "contains",
    "to": 245
  }, {
    "from": 622,
    "label": "contains",
    "to": 248
  }, {
    "from": 625,
    "label": "contains",
    "to": 248
  }, {
    "from": 622,
    "label": "contains",
    "to": 251
  }, {
    "from": 625,
    "label": "contains",
    "to": 251
  }, {
    "from": 622,
    "label": "contains",
    "to": 254
  }, {
    "from": 625,
    "label": "contains",
    "to": 254
  }, {
    "from": 622,
    "label": "contains",
    "to": 257
  }, {
    "from": 625,
    "label": "contains",
    "to": 257
  }, {
    "from": 622,
    "label": "contains",
    "to": 260
  }, {
    "from": 625,
    "label": "contains",
    "to": 260
  }, {
    "from": 622,
    "label": "contains",
    "to": 266
  }, {
    "from": 625,
    "label": "contains",
    "to": 266
  }, {
    "from": 622,
    "label": "contains",
    "to": 271
  }, {
    "from": 625,
    "label": "contains",
    "to": 271
  }, {
    "from": 622,
    "label": "contains",
    "to": 274
  }, {
    "from": 625,
    "label": "contains",
    "to": 274
  }, {
    "from": 622,
    "label": "contains",
    "to": 276
  }, {
    "from": 625,
    "label": "contains",
    "to": 276
  }, {
    "from": 622,
    "label": "contains",
    "to": 280
  }, {
    "from": 625,
    "label": "contains",
    "to": 280
  }, {
    "from": 622,
    "label": "contains",
    "to": 283
  }, {
    "from": 625,
    "label": "contains",
    "to": 283
  }, {
    "from": 622,
    "label": "contains",
    "to": 289
  }, {
    "from": 625,
    "label": "contains",
    "to": 289
  }, {
    "from": 622,
    "label": "contains",
    "to": 292
  }, {
    "from": 625,
    "label": "contains",
    "to": 292
  }, {
    "from": 622,
    "label": "contains",
    "to": 295
  }, {
    "from": 625,
    "label": "contains",
    "to": 295
  }, {
    "from": 622,
    "label": "contains",
    "to": 298
  }, {
    "from": 625,
    "label": "contains",
    "to": 298
  }, {
    "from": 622,
    "label": "contains",
    "to": 300
  }, {
    "from": 625,
    "label": "contains",
    "to": 300
  }, {
    "from": 622,
    "label": "contains",
    "to": 303
  }, {
    "from": 625,
    "label": "contains",
    "to": 303
  }, {
    "from": 622,
    "label": "contains",
    "to": 306
  }, {
    "from": 625,
    "label": "contains",
    "to": 306
  }, {
    "from": 622,
    "label": "contains",
    "to": 310
  }, {
    "from": 625,
    "label": "contains",
    "to": 310
  }, {
    "from": 622,
    "label": "contains",
    "to": 314
  }, {
    "from": 625,
    "label": "contains",
    "to": 314
  }, {
    "from": 622,
    "label": "contains",
    "to": 316
  }, {
    "from": 625,
    "label": "contains",
    "to": 316
  }, {
    "from": 622,
    "label": "contains",
    "to": 320
  }, {
    "from": 625,
    "label": "contains",
    "to": 320
  }, {
    "from": 622,
    "label": "contains",
    "to": 322
  }, {
    "from": 625,
    "label": "contains",
    "to": 322
  }, {
    "from": 622,
    "label": "contains",
    "to": 326
  }, {
    "from": 625,
    "label": "contains",
    "to": 326
  }, {
    "from": 622,
    "label": "contains",
    "to": 330
  }, {
    "from": 625,
    "label": "contains",
    "to": 330
  }, {
    "from": 622,
    "label": "contains",
    "to": 333
  }, {
    "from": 625,
    "label": "contains",
    "to": 333
  }, {
    "from": 622,
    "label": "contains",
    "to": 337
  }, {
    "from": 625,
    "label": "contains",
    "to": 337
  }, {
    "from": 622,
    "label": "contains",
    "to": 340
  }, {
    "from": 625,
    "label": "contains",
    "to": 340
  }, {
    "from": 622,
    "label": "contains",
    "to": 343
  }, {
    "from": 625,
    "label": "contains",
    "to": 343
  }, {
    "from": 622,
    "label": "contains",
    "to": 346
  }, {
    "from": 625,
    "label": "contains",
    "to": 346
  }, {
    "from": 622,
    "label": "contains",
    "to": 349
  }, {
    "from": 625,
    "label": "contains",
    "to": 349
  }, {
    "from": 622,
    "label": "contains",
    "to": 352
  }, {
    "from": 625,
    "label": "contains",
    "to": 352
  }, {
    "from": 622,
    "label": "contains",
    "to": 356
  }, {
    "from": 625,
    "label": "contains",
    "to": 356
  }, {
    "from": 622,
    "label": "contains",
    "to": 360
  }, {
    "from": 625,
    "label": "contains",
    "to": 360
  }, {
    "from": 622,
    "label": "contains",
    "to": 363
  }, {
    "from": 625,
    "label": "contains",
    "to": 363
  }, {
    "from": 622,
    "label": "contains",
    "to": 366
  }, {
    "from": 625,
    "label": "contains",
    "to": 366
  }, {
    "from": 622,
    "label": "contains",
    "to": 370
  }, {
    "from": 625,
    "label": "contains",
    "to": 370
  }, {
    "from": 622,
    "label": "contains",
    "to": 373
  }, {
    "from": 625,
    "label": "contains",
    "to": 373
  }, {
    "from": 622,
    "label": "contains",
    "to": 376
  }, {
    "from": 625,
    "label": "contains",
    "to": 376
  }, {
    "from": 622,
    "label": "contains",
    "to": 379
  }, {
    "from": 625,
    "label": "contains",
    "to": 379
  }, {
    "from": 622,
    "label": "contains",
    "to": 383
  }, {
    "from": 625,
    "label": "contains",
    "to": 383
  }, {
    "from": 622,
    "label": "contains",
    "to": 386
  }, {
    "from": 625,
    "label": "contains",
    "to": 386
  }, {
    "from": 622,
    "label": "contains",
    "to": 389
  }, {
    "from": 625,
    "label": "contains",
    "to": 389
  }, {
    "from": 622,
    "label": "contains",
    "to": 392
  }, {
    "from": 625,
    "label": "contains",
    "to": 392
  }, {
    "from": 622,
    "label": "contains",
    "to": 396
  }, {
    "from": 625,
    "label": "contains",
    "to": 396
  }, {
    "from": 622,
    "label": "contains",
    "to": 400
  }, {
    "from": 625,
    "label": "contains",
    "to": 400
  }, {
    "from": 622,
    "label": "contains",
    "to": 404
  }, {
    "from": 625,
    "label": "contains",
    "to": 404
  }, {
    "from": 622,
    "label": "contains",
    "to": 408
  }, {
    "from": 625,
    "label": "contains",
    "to": 408
  }, {
    "from": 622,
    "label": "contains",
    "to": 411
  }, {
    "from": 625,
    "label": "contains",
    "to": 411
  }, {
    "from": 622,
    "label": "contains",
    "to": 414
  }, {
    "from": 625,
    "label": "contains",
    "to": 414
  }, {
    "from": 622,
    "label": "contains",
    "to": 417
  }, {
    "from": 625,
    "label": "contains",
    "to": 417
  }, {
    "from": 622,
    "label": "contains",
    "to": 420
  }, {
    "from": 625,
    "label": "contains",
    "to": 420
  }, {
    "from": 622,
    "label": "contains",
    "to": 424
  }, {
    "from": 625,
    "label": "contains",
    "to": 424
  }, {
    "from": 622,
    "label": "contains",
    "to": 428
  }, {
    "from": 625,
    "label": "contains",
    "to": 428
  }, {
    "from": 622,
    "label": "contains",
    "to": 431
  }, {
    "from": 625,
    "label": "contains",
    "to": 431
  }, {
    "from": 622,
    "label": "contains",
    "to": 434
  }, {
    "from": 625,
    "label": "contains",
    "to": 434
  }, {
    "from": 622,
    "label": "contains",
    "to": 437
  }, {
    "from": 625,
    "label": "contains",
    "to": 437
  }, {
    "from": 622,
    "label": "contains",
    "to": 440
  }, {
    "from": 625,
    "label": "contains",
    "to": 440
  }, {
    "from": 622,
    "label": "contains",
    "to": 444
  }, {
    "from": 625,
    "label": "contains",
    "to": 444
  }, {
    "from": 622,
    "label": "contains",
    "to": 448
  }, {
    "from": 625,
    "label": "contains",
    "to": 448
  }, {
    "from": 622,
    "label": "contains",
    "to": 451
  }, {
    "from": 625,
    "label": "contains",
    "to": 451
  }, {
    "from": 622,
    "label": "contains",
    "to": 454
  }, {
    "from": 625,
    "label": "contains",
    "to": 454
  }, {
    "from": 622,
    "label": "contains",
    "to": 457
  }, {
    "from": 625,
    "label": "contains",
    "to": 457
  }, {
    "from": 622,
    "label": "contains",
    "to": 460
  }, {
    "from": 625,
    "label": "contains",
    "to": 460
  }, {
    "from": 622,
    "label": "contains",
    "to": 463
  }, {
    "from": 625,
    "label": "contains",
    "to": 463
  }, {
    "from": 622,
    "label": "contains",
    "to": 466
  }, {
    "from": 625,
    "label": "contains",
    "to": 466
  }, {
    "from": 622,
    "label": "contains",
    "to": 470
  }, {
    "from": 625,
    "label": "contains",
    "to": 470
  }, {
    "from": 622,
    "label": "contains",
    "to": 474
  }, {
    "from": 625,
    "label": "contains",
    "to": 474
  }, {
    "from": 622,
    "label": "contains",
    "to": 477
  }, {
    "from": 625,
    "label": "contains",
    "to": 477
  }, {
    "from": 622,
    "label": "contains",
    "to": 480
  }, {
    "from": 625,
    "label": "contains",
    "to": 480
  }, {
    "from": 622,
    "label": "contains",
    "to": 484
  }, {
    "from": 625,
    "label": "contains",
    "to": 484
  }, {
    "from": 622,
    "label": "contains",
    "to": 488
  }, {
    "from": 625,
    "label": "contains",
    "to": 488
  }, {
    "from": 622,
    "label": "contains",
    "to": 492
  }, {
    "from": 625,
    "label": "contains",
    "to": 492
  }, {
    "from": 622,
    "label": "contains",
    "to": 505
  }, {
    "from": 625,
    "label": "contains",
    "to": 505
  }, {
    "from": 622,
    "label": "contains",
    "to": 509
  }, {
    "from": 625,
    "label": "contains",
    "to": 509
  }, {
    "from": 622,
    "label": "contains",
    "to": 518
  }, {
    "from": 625,
    "label": "contains",
    "to": 518
  }, {
    "from": 622,
    "label": "contains",
    "to": 523
  }, {
    "from": 625,
    "label": "contains",
    "to": 523
  }, {
    "from": 622,
    "label": "contains",
    "to": 532
  }, {
    "from": 625,
    "label": "contains",
    "to": 532
  }, {
    "from": 622,
    "label": "contains",
    "to": 545
  }, {
    "from": 625,
    "label": "contains",
    "to": 545
  }, {
    "from": 622,
    "label": "contains",
    "to": 552
  }, {
    "from": 625,
    "label": "contains",
    "to": 552
  }, {
    "from": 622,
    "label": "contains",
    "to": 561
  }, {
    "from": 625,
    "label": "contains",
    "to": 561
  }, {
    "from": 622,
    "label": "contains",
    "to": 570
  }, {
    "from": 625,
    "label": "contains",
    "to": 570
  }, {
    "from": 622,
    "label": "contains",
    "to": 580
  }, {
    "from": 625,
    "label": "contains",
    "to": 580
  }, {
    "from": 622,
    "label": "contains",
    "to": 585
  }, {
    "from": 625,
    "label": "contains",
    "to": 585
  }, {
    "from": 622,
    "label": "contains",
    "to": 590
  }, {
    "from": 625,
    "label": "contains",
    "to": 590
  }, {
    "from": 622,
    "label": "contains",
    "to": 594
  }, {
    "from": 625,
    "label": "contains",
    "to": 594
  }, {
    "from": 622,
    "label": "contains",
    "to": 600
  }, {
    "from": 625,
    "label": "contains",
    "to": 600
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sys",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "test_sys",
    "type": "module"
  }, {
    "id": 4,
    "text": "function path_separator()\r\n    if cfg.arch == \"Windows\" then\r\n        return \"\\\\\"\r\n    else\r\n        return \"/\"\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function check_separators(path)\r\n    assert(type(path) == \"string\", \"sys.check_separators: Argument 'path' is not a string.\")\r\n    if cfg.arch == \"Windows\" then\r\n        return path:gsub(\"/\", \"\\\\\")\r\n    else\r\n        return path\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function remove_trailing(path)\r\n    assert(type(path) == \"string\", \"sys.remove_trailing: Argument 'path' is not a string.\")\r\n    if path:sub(-1) == path_separator() and not is_root(path) then path = path:sub(1,-2) end\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function quote(argument)\r\n    assert(type(argument) == \"string\", \"sys.quote: Argument 'argument' is not a string.\")\r\n\r\n    -- replace '/' path separators for '\\' on Windows\r\n    if cfg.arch == \"Windows\" and argument:match(\"^[%u%U.]?:?[/\\\\].*\") then\r\n        argument = argument:gsub(\"//\",\"\\\\\"):gsub(\"/\",\"\\\\\")\r\n    end\r\n\r\n    -- Windows doesn't recognize paths starting with two slashes or backslashes\r\n    -- so we double every backslash except for the first one\r\n    if cfg.arch == \"Windows\" and argument:match(\"^[/\\\\].*\") then\r\n        local prefix = argument:sub(1,1)\r\n        argument = argument:sub(2):gsub(\"\\\\\",  \"\\\\\\\\\")\r\n        argument = prefix .. argument\r\n    else\r\n        argument = argument:gsub(\"\\\\\",  \"\\\\\\\\\")\r\n    end\r\n    argument = argument:gsub('\"',  '\\\\\"')\r\n\r\n    return '\"' .. argument .. '\"'\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function exec(command, force_verbose)\r\n    force_verbose = force_verbose or false\r\n    assert(type(command) == \"string\", \"sys.exec: Argument 'command' is not a string.\")\r\n    assert(type(force_verbose) == \"boolean\", \"sys.exec: Argument 'force_verbose' is not a boolean.\")\r\n\r\n    if not (cfg.verbose or cfg.debug or force_verbose) then\r\n        if cfg.arch == \"Windows\" then\r\n            command = command .. \" > NUL 2>&1\"\r\n        else\r\n            command = command .. \" > /dev/null 2>&1\"\r\n        end\r\n    end\r\n\r\n    if cfg.debug then print(\"Executing the command: \" .. command) end\r\n    local ok, str, status  = os.execute(command)\r\n\r\n    -- os.execute returned values on failure are:\r\n    --  nil or true, \"exit\", n or true, \"signal\", n for lua >= 5.2\r\n    --  status ~= 0 for lua 5.x < 5.2\r\n    if ok == nil or (str == \"exit\" and status ~= 0) or str == \"signal\" or (ok ~= 0 and ok ~= true) then\r\n        return nil, \"Error when running the command: \" .. command\r\n    else\r\n        return true, \"Sucessfully executed the command: \" .. command\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function is_root(path)\r\n    assert(type(path) == \"string\", \"sys.is_root: Argument 'path' is not a string.\")\r\n    return utils.to_boolean(path:find(\"^[%u%U.]?:?[/\\\\]$\"))\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function is_abs(path)\r\n    assert(type(path) == \"string\", \"sys.is_abs: Argument 'path' is not a string.\")\r\n    return utils.to_boolean(path:find(\"^[%u%U.]?:?[/\\\\].*$\"))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function exists(path)\r\n    assert(type(path) == \"string\", \"sys.exists: Argument 'path' is not a string.\")\r\n    local attr, err = lfs.attributes(path)\r\n    return utils.to_boolean(attr), err\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function is_file(file)\r\n    assert(type(file) == \"string\", \"sys.is_file: Argument 'file' is not a string.\")\r\n    return lfs.attributes(file, \"mode\") == \"file\"\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function is_dir(dir)\r\n    assert(type(dir) == \"string\", \"sys.is_dir: Argument 'dir' is not a string.\")\r\n    return lfs.attributes(dir, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function current_dir()\r\n    local dir, err = lfs.currentdir()\r\n    if not dir then return nil, err end\r\n    return dir\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function get_directory(dir)\r\n    dir = dir or current_dir()\r\n    assert(type(dir) == \"string\", \"sys.get_directory: Argument 'dir' is not a string.\")\r\n    if is_dir(dir) then\r\n        return lfs.dir(dir)\r\n    else\r\n        return nil, \"Error: '\".. dir .. \"' is not a directory.\"\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function extract_name(path)\r\n    assert(type(path) == \"string\", \"sys.extract_name: Argument 'path' is not a string.\")\r\n    if is_root(path) then return path end\r\n\r\n    path = remove_trailing(path)\r\n    path = path:gsub(\"^.*\" .. path_separator(), \"\")\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function parent_dir(path)\r\n    assert(type(path) == \"string\", \"sys.parent_dir: Argument 'path' is not a string.\")\r\n    path = remove_curr_dir_dots(path)\r\n    path = remove_trailing(path)\r\n\r\n    local dir = path:gsub(utils.escape_magic(extract_name(path)) .. \"$\", \"\")\r\n    if dir == \"\" then\r\n        return nil\r\n    else\r\n        return make_path(dir)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function parents_up_to(path, boundary_path)\r\n    assert(type(path) == \"string\", \"sys.parents_up_to: Argument 'path' is not a string.\")\r\n    assert(type(boundary_path) == \"string\", \"sys.parents_up_to: Argument 'boundary_path' is not a string.\")\r\n    boundary_path = remove_trailing(boundary_path)\r\n\r\n    -- helper function to recursively collect the parent directories\r\n    local function collect_parents(_path, _parents)\r\n        local _parent = parent_dir(_path)\r\n        if _parent and _parent ~= boundary_path then\r\n            table.insert(_parents, _parent)\r\n            return collect_parents(_parent, _parents)\r\n        else\r\n            return _parents\r\n        end\r\n    end\r\n\r\n    return collect_parents(path, {})\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function make_path(...)\r\n    -- arg is deprecated in lua 5.2 in favor of table.pack we mimic here\r\n    local arg = {n=select('#',...),...}\r\n    local parts = arg\r\n    assert(type(parts) == \"table\", \"sys.make_path: Argument 'parts' is not a table.\")\r\n\r\n    local path, err\r\n    if parts.n == 0 then\r\n        path, err = current_dir()\r\n    else\r\n        path, err = table.concat(parts, path_separator())\r\n    end\r\n    if not path then return nil, err end\r\n\r\n    -- squeeze repeated occurences of a file separator\r\n    path = path:gsub(path_separator() .. \"+\", path_separator())\r\n\r\n    -- remove unnecessary trailing path separator\r\n    path = remove_trailing(path)\r\n\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function abs_path(path)\r\n    assert(type(path) == \"string\", \"sys.get_abs_path: Argument 'path' is not a string.\")\r\n    if is_abs(path) then return path end\r\n\r\n    local cur_dir, err = current_dir()\r\n    if not cur_dir then return nil, err end\r\n\r\n    return make_path(cur_dir, path)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function tmp_dir()\r\n    return os.getenv(\"TMPDIR\") or os.getenv(\"TEMP\") or os.getenv(\"TMP\") or \"/tmp\"\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function tmp_name(prefix)\r\n    prefix = prefix or \"\"\r\n    assert(type(prefix) == \"string\", \"sys.tmp_name: Argument 'prefix' is not a string.\")\r\n    return make_path(tmp_dir(), prefix .. \"luadist_\" .. utils.rand(10000000000))\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function get_file_list(dir)\r\n    dir = dir or current_dir()\r\n    assert(type(dir) == \"string\", \"sys.get_directory: Argument 'dir' is not a string.\")\r\n    if not exists(dir) then return nil, \"Error getting file list of '\" .. dir .. \"': directory doesn't exist.\" end\r\n\r\n    local function collect(path, all_paths)\r\n        for item in get_directory(path) do\r\n\r\n            local item_path = make_path(path, item)\r\n            local _, last = item_path:find(dir .. path_separator(), 1, true)\r\n            local path_to_insert = item_path:sub(last + 1)\r\n\r\n            if is_file(item_path) then\r\n                table.insert(all_paths, path_to_insert)\r\n            elseif is_dir(item_path) and item ~= \".\" and item ~= \"..\" then\r\n                table.insert(all_paths, path_to_insert)\r\n                collect(item_path, all_paths)\r\n            end\r\n        end\r\n    end\r\n\r\n    local all_paths = {}\r\n    collect(dir, all_paths)\r\n\r\n    return all_paths\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function change_dir(dir_name)\r\n    assert(type(dir_name) == \"string\", \"sys.change_dir: Argument 'dir_name' is not a string.\")\r\n    local prev_dir = current_dir()\r\n    local ok, err = lfs.chdir(dir_name)\r\n    if ok then\r\n        return ok, prev_dir\r\n    else\r\n        return nil, err\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function make_dir(dir_name)\r\n    assert(type(dir_name) == \"string\", \"sys.make_dir: Argument 'dir_name' is not a string.\")\r\n    if exists(dir_name) then\r\n        return true\r\n    else\r\n        local par_dir = parent_dir(dir_name)\r\n        if par_dir then\r\n            local ok, err = make_dir(par_dir)\r\n            if not ok then return nil, err end\r\n        end\r\n        return lfs.mkdir(dir_name)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function move_to(file_or_dir, dest_dir)\r\n    assert(type(file_or_dir) == \"string\", \"sys.move_to: Argument 'file_or_dir' is not a string.\")\r\n    assert(type(dest_dir) == \"string\", \"sys.move_to: Argument 'dest_dir' is not a string.\")\r\n    assert(is_dir(dest_dir), \"sys.move_to: destination '\" .. dest_dir ..\"' is not a directory.\")\r\n\r\n    -- Extract file/dir name from its path\r\n    local file_or_dir_name = extract_name(file_or_dir)\r\n\r\n    return os.rename(file_or_dir, make_path(dest_dir, file_or_dir_name))\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function rename(file, new_name)\r\n    assert(type(file) == \"string\", \"sys.rename: Argument 'file' is not a string.\")\r\n    assert(type(new_name) == \"string\", \"sys.rename: Argument 'new_name' is not a string.\")\r\n    assert(not exists(new_name), \"sys.rename: desired filename already exists.\")\r\n\r\n    return os.rename(file, new_name)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function copy(source, dest_dir)\r\n    assert(type(source) == \"string\", \"sys.copy: Argument 'file_or_dir' is not a string.\")\r\n    assert(type(dest_dir) == \"string\", \"sys.copy: Argument 'dest_dir' is not a string.\")\r\n    assert(is_dir(dest_dir), \"sys.copy: destination '\" .. dest_dir ..\"' is not a directory.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if is_dir(source) then\r\n            make_dir(make_path(dest_dir, extract_name(source)))\r\n            return exec(\"xcopy /E /I /Y /Q \" .. quote(source) .. \" \" .. quote(dest_dir .. \"\\\\\" .. extract_name(source)))\r\n        else\r\n            return exec(\"copy /Y \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        end\r\n    else\r\n        if is_dir(source) then\r\n            return exec(\"cp -fRH \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        else\r\n            return exec(\"cp -fH \" .. quote(source) .. \" \" .. quote(dest_dir))\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function delete(path)\r\n    assert(type(path) == \"string\", \"sys.delete: Argument 'path' is not a string.\")\r\n    assert(is_abs(path), \"sys.delete: Argument 'path' is not an absolute path.\")\r\n\r\n    if cfg.arch == \"Windows\" then\r\n        if not exists(path) then\r\n            return true\r\n        elseif is_file(path) then\r\n            return os.remove(path)\r\n        else\r\n            --return exec(\"rd /S /Q \" .. quote(path))\r\n            return exec(\"move /y \" .. quote(path) .. \" \" .. quote(tmp_dir()))\r\n        end\r\n    else\r\n        return exec(\"rm -rf \" .. quote(path))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function table_tostring(tbl, label)\r\n    assert(type(tbl) == \"table\", \"utils.table_tostring: Argument 'tbl' is not a table.\")\r\n    local str = \"\"\r\n    for k,v in pairs(tbl) do\r\n        if type(v) == \"table\" then\r\n            str = str .. table_tostring(v, k)\r\n        else\r\n            if label ~= nil then\r\n                str = str .. tostring(v) .. \" [\" .. tostring(label) .. \"]\" .. \", \"\r\n            else\r\n                str = str .. tostring(v) .. \", \"\r\n            end\r\n        end\r\n    end\r\n    return str\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "function rand(...)\r\n    return math.random(...)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-scm a-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"c-scm b-scm a-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\", \"c\", \"d\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"f\", \"g\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\", \"e\", \"j\"}}\r\n    manifest.e = {name=\"e\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"h\", \"i\"}}\r\n    manifest.f = {name=\"f\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.g = {name=\"g\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"l\"}}\r\n    manifest.h = {name=\"h\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.i = {name=\"i\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.j = {name=\"j\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"k\"}}\r\n    manifest.k = {name=\"k\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.l = {name=\"l\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-scm f-scm l-scm g-scm c-scm h-scm i-scm e-scm k-scm j-scm d-scm a-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"a-scm\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"circular\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"a\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"circular\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"a\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"circular\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"d\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"e\"}}\r\n    manifest.e = {name=\"e\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"circular\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"a\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"a\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"a\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"a\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"c\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"a\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"b\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-scm\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already installed\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-scm\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already selected\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already installed\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already selected\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-scm\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already installed\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-scm b-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"d-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"d-scm\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already installed\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"d-scm\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"d-scm\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already selected\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"d-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"d-scm\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already selected\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"e-scm\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"d\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"e-scm\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"already selected\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-scm c-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'c', 'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"c-scm a-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"b\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"b\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'c', 'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"c-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"b\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"d-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"d\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"d\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"d-scm\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"d\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"a\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}, conflicts={\"d\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"d\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"c\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"c-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"d\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"a\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-scm b-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}, conflicts={\"d\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"d\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-scm b-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"e-scm\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"d\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"e\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"e\"}}\r\n    manifest.e = {name=\"e\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"f-scm\"}}\r\n    manifest.f = {name=\"f\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"c\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'd'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-scm a-scm e-scm d-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"c-scm\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"f\"}}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"e\"}}\r\n    manifest.e = {name=\"e\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"f-scm\"}}\r\n    manifest.f = {name=\"f\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'd'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-scm a-scm e-scm d-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2\"}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-2\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1\"}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"2\"}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-2 a-scm\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"b\"}}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1\", depends={\"b\"}}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.99\", depends={\"c\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"c\"}}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2alpha\", depends={\"d\"}}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2beta\", depends={\"d\"}}\r\n\r\n    manifest.d1 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"1rc2\", depends={\"e\"}}\r\n    manifest.d2 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"1rc3\", depends={\"e\"}}\r\n\r\n    manifest.e1 = {name=\"e\", arch=\"Universal\", type=\"all\", version=\"3.1beta\", depends={\"f\"}}\r\n    manifest.e2 = {name=\"e\", arch=\"Universal\", type=\"all\", version=\"3.1pre\", depends={\"f\"}}\r\n\r\n    manifest.f1 = {name=\"f\", arch=\"Universal\", type=\"all\", version=\"3.1pre\", depends={\"g\"}}\r\n    manifest.f2 = {name=\"f\", arch=\"Universal\", type=\"all\", version=\"3.1rc\", depends={\"g\"}}\r\n\r\n    manifest.g1 = {name=\"g\", arch=\"Universal\", type=\"all\", version=\"1rc\", depends={\"h\"}}\r\n    manifest.g2 = {name=\"g\", arch=\"Universal\", type=\"all\", version=\"1scm\", depends={\"h\"}}\r\n\r\n    manifest.h1 = {name=\"h\", arch=\"Universal\", type=\"all\", version=\"1alpha2\",}\r\n    manifest.h2 = {name=\"h\", arch=\"Universal\", type=\"all\", version=\"1work2\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"h-1alpha2 g-1scm f-3.1rc e-3.1pre d-1rc3 c-2beta b-2.0 a-1\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"b\"}}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2alpha\", depends={\"b\"}}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.2\", depends={\"c\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.2beta\", depends={\"c\"}}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1rc3\", depends={\"d\"}}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.1rc2\", depends={\"d\"}}\r\n\r\n    manifest.d1 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"2.1beta3\",}\r\n    manifest.d2 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"2.2alpha2\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"d-2.2alpha2 c-1.1rc2 b-1.2 a-2alpha\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b<=1\"}}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"c>=2\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"c>=2\"}}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.9\", depends={\"d~>3.3\"}}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"d~>3.3\"}}\r\n    manifest.c3 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.1\", depends={\"d~>3.3\"}}\r\n\r\n    manifest.d1 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.2\",}\r\n    manifest.d2 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.3\",}\r\n    manifest.d3 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.3.1\",}\r\n    manifest.d4 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.3.2\",}\r\n    manifest.d5 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.4\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"d-3.3.2 c-2.1 b-1.0 a-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b~=1.0\"}}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"c<2.1\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\", depends={\"c<2.1\"}}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.0.9\", depends={\"d==4.4alpha\"}}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.1.0\", depends={\"d==4.4alpha\"}}\r\n    manifest.c3 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.1.1\", depends={\"d==4.4alpha\"}}\r\n\r\n    manifest.d1 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"4.0\",}\r\n    manifest.d2 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"4.5\",}\r\n    manifest.d3 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"4.4beta\",}\r\n    manifest.d4 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"4.4alpha\",}\r\n    manifest.d5 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"4.4\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"d-4.4alpha c-2.0.9 b-0.9 a-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b>1.2\"}}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.2\", depends={\"c~=2.1.1\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.2alpha\", depends={\"c~=2.1.1\"}}\r\n    manifest.b3 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.2beta\", depends={\"c~=2.1.1\"}}\r\n    manifest.b5 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.3rc\", depends={\"c~=2.1.1\"}}\r\n    manifest.b4 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.3\", depends={\"c~=2.1.1\"}}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.0.9\"}\r\n    manifest.c3 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.1.1\"}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.1.0\"}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"c-2.1.0 b-1.3 a-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\"}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.0\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"a>=2.0\"}}\r\n\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a~>1.0\",\"b>=1.0\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.0 b-1.0 c-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"x\"}}\r\n\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a==1.0\"}}\r\n\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.0\",\"b>=1.0\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.0 b-1.0 c-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.2\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a12 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\",}\r\n    manifest.a13 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.3\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.2\"}}\r\n    installed.a12 = manifest.a12\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.4\"}}\r\n    installed.a = manifest.a\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"but installed at version\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a12 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\",}\r\n    manifest.a13 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.3\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.3\"}}\r\n    installed.a12 = manifest.a12\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"but installed at version\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-1.2\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.2\"}}\r\n    installed.x = manifest.x\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-1.2\"}}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.3\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.2\"}}\r\n    installed.x = manifest.x\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-1.2\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.4\"}}\r\n    installed.x = manifest.x\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"but installed at version\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-1.2\"}}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.3\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.3\"}}\r\n    installed.x = manifest.x\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"but installed at version\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n\r\n    local pkgs, err = depends.get_depends({'x'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"No suitable candidate\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"x\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"No suitable candidate\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b>1.0\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"No suitable candidate\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\",}\r\n    installed.a = manifest.a\r\n    installed.b = manifest.b\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\", depends={\"a\"}}\r\n    installed.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-0.9\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\", depends={\"a\"}}\r\n    installed.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"1.0\", provides={\"a-1.0\"}}\r\n\r\n    local pkgs, err = depends.get_depends({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-0.9\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"notUniversal\", type=\"all\", version=\"1.0\",}\r\n    manifest.b = {name=\"b\", arch=\"notUniversal\", type=\"all\", version=\"0.9\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"arch and type\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"not_all\", version=\"1.0\",}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"not_all\", version=\"0.9\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"arch and type\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"notUniversal\", type=\"all\", version=\"1.1\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.b1 = {name=\"b\", arch=\"notUniversal\", type=\"all\", version=\"1.9\",}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.8\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.0 b-0.8\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"not_all\", version=\"1.1\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"not_all\", version=\"1.9\",}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.8\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.0 b-0.8\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"notUniversal\", type=\"all\", version=\"1.1\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"not_all\", version=\"1.0\",}\r\n    manifest.a3 = {name=\"a\", arch=\"notUniversal\", type=\"not_all\", version=\"0.9\",}\r\n    manifest.a4 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"0.8\",}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"notUniversal\", type=\"all\", version=\"1.9\",}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"not_all\", version=\"1.8\",}\r\n    manifest.b3 = {name=\"b\", arch=\"notUniversal\", type=\"not_all\", version=\"1.7\",}\r\n    manifest.b4 = {name=\"b\", arch=\"Universal\", type=\"source\", version=\"1.5\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-0.8 b-1.5\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={[cfg.arch] = {\"b\", \"c\"}}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\",}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.9\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-0.9 c-0.9 a-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={['other'] = {\"b\"}}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"c\", [cfg.arch] = {\"b\"}, \"d\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\",}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.9\",}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"0.9\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"c-0.9 d-0.9 b-0.9 a-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a-1.0'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a<2.0'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a<=2.0'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-2.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\",}\r\n\r\n    local pkgs, err = depends.get_depends({'a>=3.0'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"No suitable candidate\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\",}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.5\", conflicts={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    installed.b = manifest.b\r\n\r\n    local pkgs, err = depends.get_depends({'a>=2.0'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-2.0\" , pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\",}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.5\", conflicts={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\",}\r\n    installed.b = manifest.b\r\n\r\n    local pkgs, err = depends.get_depends({'a>2.0'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.1\"}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\"}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.1\", depends={\"c\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.2\", depends={\"c\"}}\r\n    manifest.b3 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.3\", conflicts={\"c\"}}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.0\"}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"3.0\"}\r\n\r\n    installed.a = manifest.a1\r\n    installed.b = manifest.b1\r\n    installed.c = manifest.c1\r\n\r\n    local pkgs, err = depends.get_depends_1({'a', 'b', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.2 b-0.2 c-3.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.1\"}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\"}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.1\"}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.2\"}\r\n    manifest.b3 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.3\", conflicts={\"c\"}}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.0\"}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"3.0\", depends={\"d~>1.0\"}}\r\n\r\n    manifest.d1 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"0.8\"}\r\n    manifest.d2 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"0.9\"}\r\n    manifest.d3 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.d4 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"1.3\"}\r\n\r\n    installed.a = manifest.a1\r\n    installed.b = manifest.b1\r\n    installed.c = manifest.c1\r\n\r\n    local pkgs, err = depends.get_depends_1({'a', 'b', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.2 b-0.2 d-1.0 c-3.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b\"}}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"b\"}}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\", conflicts={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a1\r\n    installed.b = manifest.b\r\n    installed.c = manifest.c\r\n\r\n    local pkgs, err = depends.get_depends_1({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.1\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b\"}}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"b\", \"c>0.4\"}}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\", conflicts={\"b\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.4\",}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.5\",}\r\n    installed.a = manifest.a1\r\n\r\n    local pkgs, err = depends.get_depends_1({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"a-1.2\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"b\", \"c>0.4\"}}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\", conflicts={\"d\"}}\r\n    manifest.a4 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.3\", conflicts={\"d\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"c\"}}\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.4\"}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.5\"}\r\n    manifest.c3 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.6\"}\r\n    manifest.d = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"scm\",}\r\n    installed.a = manifest.a1\r\n    installed.d = manifest.d\r\n\r\n    local pkgs, err = depends.get_depends_1({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"c-0.6 b-scm a-1.1\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\", provides={\"b-scm\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"scm\", conflicts={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.1\"}\r\n    installed.a = manifest.a1\r\n    installed.c = manifest.c\r\n\r\n    local pkgs, err = depends.get_depends_1({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == 'a-2.0', pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\", provides={\"b-1.0\"}}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.5\", provides={\"b-scm\"}}\r\n    manifest.a4 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"3.0\", conflicts={\"c\"}}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", conflicts={\"c\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.1\", conflicts={\"c\"}}\r\n    manifest.b3 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.2\"}\r\n\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"0.1\"}\r\n    installed.a = manifest.a1\r\n    installed.c = manifest.c\r\n\r\n    local pkgs, err = depends.get_depends_1({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == 'a-2.5', pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\", provides={\"x-1.2\"}}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a>=1.2\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"a>=1.3\"}}\r\n    installed.a = manifest.a\r\n    installed.b = manifest.b1\r\n\r\n    local pkgs, err = depends.get_depends_1({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil, pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-1.2\"}}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.3\",}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"a>=1.3\"}}\r\n    installed.x = manifest.x\r\n    installed.b = manifest.b1\r\n\r\n    local pkgs, err = depends.get_depends_1({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"but installed at version\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"scm\", provides={\"a-1.2\"}}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.3\",}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0.8\", depends={\"a-1.2\"}}\r\n    manifest.b3 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"a>=1.3\"}}\r\n    installed.x = manifest.x\r\n    installed.b = manifest.b1\r\n\r\n    local pkgs, err = depends.get_depends_1({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == 'b-1.0.8', pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b<=1.0\"}}\r\n\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"c>=2.0\"}}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.9\", depends={\"d~>3.3\"}}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"d~>3.3\"}}\r\n    manifest.c3 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.1\", depends={\"d~>3.3\"}}\r\n\r\n    manifest.d1 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.2\",}\r\n    manifest.d2 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.3\",}\r\n    manifest.d3 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.3.1\",}\r\n    manifest.d4 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.3.2\",}\r\n    manifest.d5 = {name=\"d\", arch=\"Universal\", type=\"all\", version=\"3.4\",}\r\n\r\n    installed.a = manifest.a\r\n    installed.b = manifest.b1\r\n\r\n    local pkgs, err = depends.get_depends_1({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"d-3.3.2 c-2.1 b-2.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"x\"}}\r\n\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b>=1.0\"}}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"a>=2.0\",\"b>=1.0\"}}\r\n\r\n    manifest.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n\r\n    installed.b = manifest.b\r\n    installed.c = manifest.c1\r\n\r\n    local pkgs, err = depends.get_depends_1({'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"x-1.0 a-2.0 c-2.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"b==1.0\"}}\r\n    manifest.b = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"c\"}}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"scm\", depends={\"a>=1.0\"}}\r\n    installed.a = manifest.a1\r\n\r\n    local pkgs, err = depends.get_depends_1({'a'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"circular\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"b\"}}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"2.0\", depends={\"b\", \"c\"}}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", conflicts={\"c\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"2.0\"}\r\n    manifest.c = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    installed.a = manifest.a1\r\n    installed.c = manifest.c\r\n\r\n    local pkgs, err = depends.get_depends_1({'a', 'c'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-2.0 a-2.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\"}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a==1.0\"}}\r\n    manifest.b3 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"a>1.0\"}}\r\n    installed.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"1.0\", provides={\"a-1.0\"}}\r\n    installed.b = manifest.b1\r\n\r\n    local pkgs, err = depends.get_depends_1({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == \"b-1.0\", pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"0.9\"}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a==1.0\"}}\r\n    manifest.b3 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"a>1.0\"}}\r\n    installed.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"1.0\", provides={\"a-1.0\"}}\r\n    installed.b = manifest.b2\r\n\r\n    local pkgs, err = depends.get_depends_1({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil, pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a==1.0\"}}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"a>1.0\"}}\r\n    manifest.c1 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.0\", depends={\"a\"}}\r\n    manifest.c2 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.1\", depends={\"b\"}}\r\n    manifest.c3 = {name=\"c\", arch=\"Universal\", type=\"all\", version=\"1.2\", depends={\"b>1.0\"}}\r\n    installed.x = {name=\"x\", arch=\"Universal\", type=\"all\", version=\"1.0\", provides={\"a-1.0\"}}\r\n    installed.b = manifest.b1\r\n    installed.c = manifest.c1\r\n\r\n    local pkgs, err = depends.get_depends_1({'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil, pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "function()\r\n    local manifest, installed = {}, {}\r\n    manifest.a1 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.a2 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.1\", conflicts={\"b\"}}\r\n    manifest.a3 = {name=\"a\", arch=\"Universal\", type=\"all\", version=\"1.2\", conflicts={\"b\"}}\r\n    manifest.b1 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"1.0\"}\r\n    manifest.b2 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"2.0\", conflicts={\"a\"}} \r\n    manifest.b3 = {name=\"b\", arch=\"Universal\", type=\"all\", version=\"3.0\", conflicts={\"a\", \"x\"}}\r\n    installed.a = manifest.a1\r\n    installed.b = manifest.b1\r\n\r\n    local pkgs, err = depends.get_depends_1({'a', 'b'}, installed, manifest, true, true)\r\n    assert(describe_packages(pkgs) == nil and err:find(\"conflicts\"), pkgs_fail_msg(pkgs, err))\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "local function fail_msg(val, err)\r\n    return \"TEST FAILED!!! - Returned value was: '\" .. (type(val) == \"table\" and utils.table_tostring(val) or tostring(val)) .. \"' \\n    Error was: \\\"\" .. (tostring(err) or \"nil\") .. \"\\\"\"\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "local function run_tests(tests)\r\n    local passed = 0\r\n    local failed = 0\r\n\r\n    for name, test in pairs(tests) do\r\n        local ok, err = pcall(test)\r\n        if ok then\r\n            passed = passed + 1\r\n        else\r\n            failed = failed + 1\r\n            print(\"In '\" .. name .. \"()': \" .. err)\r\n        end\r\n    end\r\n    if failed > 0 then print(\"----------------------------------\") end\r\n    print(\"Passed \" .. passed .. \"/\" .. passed + failed .. \" tests (\" .. failed .. \" failed).\")\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local passed = 0",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local failed = 0",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "for name, test in pairs(tests) do\r\n        local ok, err = pcall(test)\r\n        if ok then\r\n            passed = passed + 1\r\n        else\r\n            failed = failed + 1\r\n            print(\"In '\" .. name .. \"()': \" .. err)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 139,
    "text": "local ok, err = pcall(test)",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if ok then\r\n            passed = passed + 1\r\n        else\r\n            failed = failed + 1\r\n            print(\"In '\" .. name .. \"()': \" .. err)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "passed = passed + 1",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "failed = failed + 1",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "print(\"In '\" .. name .. \"()': \" .. err)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "if failed > 0 then print(\"----------------------------------\") end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "print(\"----------------------------------\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "print(\"Passed \" .. passed .. \"/\" .. passed + failed .. \" tests (\" .. failed .. \" failed).\")",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.path_separator()\r\n    assert(val == \"/\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "cfg.arch = \"Linux\"",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "local val, err = sys.path_separator()",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "assert(val == \"/\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.path_separator()\r\n    assert(val == \"\\\\\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "cfg.arch = \"Windows\"",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "assert(val == \"\\\\\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.check_separators(\"/dir1/dir2/file\")\r\n    assert(val == \"/dir1/dir2/file\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "local val, err = sys.check_separators(\"/dir1/dir2/file\")",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "assert(val == \"/dir1/dir2/file\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.check_separators(\"\\\\very\\\\long\\\\filename\")\r\n    assert(val == \"\\\\very\\\\long\\\\filename\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local val, err = sys.check_separators(\"\\\\very\\\\long\\\\filename\")",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "assert(val == \"\\\\very\\\\long\\\\filename\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.check_separators(\"C:/dir1/dir2/file.ext\")\r\n    assert(val == \"C:\\\\dir1\\\\dir2\\\\file.ext\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "local val, err = sys.check_separators(\"C:/dir1/dir2/file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "assert(val == \"C:\\\\dir1\\\\dir2\\\\file.ext\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.check_separators(\"C:\\\\dir1\\\\dir2\\\\file.ext\")\r\n    assert(val == \"C:\\\\dir1\\\\dir2\\\\file.ext\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "local val, err = sys.check_separators(\"C:\\\\dir1\\\\dir2\\\\file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.remove_trailing(\"/dir1/dir2/dir3/\")\r\n    assert(val == \"/dir1/dir2/dir3\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "local val, err = sys.remove_trailing(\"/dir1/dir2/dir3/\")",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "assert(val == \"/dir1/dir2/dir3\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.remove_trailing(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\\")\r\n    assert(val == \"C:\\\\dir1\\\\dir2\\\\dir3\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "local val, err = sys.remove_trailing(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "assert(val == \"C:\\\\dir1\\\\dir2\\\\dir3\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.remove_trailing(\"/\")\r\n    assert(val == \"/\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "local val, err = sys.remove_trailing(\"/\")",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.remove_trailing(\"C:\\\\\")\r\n    assert(val == \"C:\\\\\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "local val, err = sys.remove_trailing(\"C:\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "assert(val == \"C:\\\\\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.remove_trailing(\"\\\\\")\r\n    assert(val == \"\\\\\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "local val, err = sys.remove_trailing(\"\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.remove_trailing(\"/dir1/dir2/dir3\")\r\n    assert(val == \"/dir1/dir2/dir3\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "local val, err = sys.remove_trailing(\"/dir1/dir2/dir3\")",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.remove_trailing(\"C:\\\\dir1\\\\dir2\\\\dir3\")\r\n    assert(val == \"C:\\\\dir1\\\\dir2\\\\dir3\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "local val, err = sys.remove_trailing(\"C:\\\\dir1\\\\dir2\\\\dir3\")",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 196,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.quote(\"/home/user\")\r\n    assert(val == \"\\\"/home/user\\\"\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 197,
    "text": "local val, err = sys.quote(\"/home/user\")",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "assert(val == \"\\\"/home/user\\\"\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.quote(\"C:\\\\WINDOWS\\\\system32/bad_slash_type\")\r\n    assert(val == \"\\\"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\bad_slash_type\\\"\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "local val, err = sys.quote(\"C:\\\\WINDOWS\\\\system32/bad_slash_type\")",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "assert(val == \"\\\"C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\bad_slash_type\\\"\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 204,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local val, err = sys.exec(\"cd\")\r\n    assert(val == true and err:find(\"Sucessfully executed\"), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 205,
    "text": "cfg.arch = original_arch",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "local val, err = sys.exec(\"cd\")",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "assert(val == true and err:find(\"Sucessfully executed\"), fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local val, err = sys.exec(\"nonexistent\")\r\n    assert(val == nil and err:find(\"Error when running\"), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "local val, err = sys.exec(\"nonexistent\")",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "assert(val == nil and err:find(\"Error when running\"), fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_root(\"/\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 214,
    "text": "local val, err = sys.is_root(\"/\")",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "assert(val == true, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_root(\"C:\\\\\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 218,
    "text": "local val, err = sys.is_root(\"C:\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_root(\"\\\\\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 221,
    "text": "local val, err = sys.is_root(\"\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_root(\"/dir/\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "local val, err = sys.is_root(\"/dir/\")",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "assert(val == false, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_root(\"./\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "local val, err = sys.is_root(\"./\")",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_root(\"C:\\\\dir\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "local val, err = sys.is_root(\"C:\\\\dir\")",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_root(\"\\\\dir\\\\\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "local val, err = sys.is_root(\"\\\\dir\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 236,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_root(\".\\\\\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 237,
    "text": "local val, err = sys.is_root(\".\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_abs(\"/dir1/dir2/file\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 240,
    "text": "local val, err = sys.is_abs(\"/dir1/dir2/file\")",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 242,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_abs(\"C:\\\\dir1\\\\dir2\\\\file.ext\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 243,
    "text": "local val, err = sys.is_abs(\"C:\\\\dir1\\\\dir2\\\\file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_abs(\"\\\\dir1\\\\dir2\\\\file.ext\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 246,
    "text": "local val, err = sys.is_abs(\"\\\\dir1\\\\dir2\\\\file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_abs(\"dir1/dir2/file\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "local val, err = sys.is_abs(\"dir1/dir2/file\")",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_abs(\"./dir1/dir2/file\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 252,
    "text": "local val, err = sys.is_abs(\"./dir1/dir2/file\")",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_abs(\"dir1\\\\dir2\\\\file.ext\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 255,
    "text": "local val, err = sys.is_abs(\"dir1\\\\dir2\\\\file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_abs(\".\\\\dir1\\\\dir2\\\\file.ext\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 258,
    "text": "local val, err = sys.is_abs(\".\\\\dir1\\\\dir2\\\\file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local val, err\r\n    if cfg.arch == \"Windows\" then\r\n        val, err = sys.exists(\"C:\\\\WINDOWS\")\r\n    else\r\n        val, err = sys.exists(\"/bin\")\r\n    end\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 261,
    "text": "local val, err",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "if cfg.arch == \"Windows\" then\r\n        val, err = sys.exists(\"C:\\\\WINDOWS\")\r\n    else\r\n        val, err = sys.exists(\"/bin\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "val, err = sys.exists(\"C:\\\\WINDOWS\")",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "val, err = sys.exists(\"/bin\")",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local val, err\r\n    if cfg.arch == \"Windows\" then\r\n        val, err = sys.exists(\"C:\\\\\")\r\n    else\r\n        val, err = sys.exists(\"/\")\r\n    end\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 267,
    "text": "if cfg.arch == \"Windows\" then\r\n        val, err = sys.exists(\"C:\\\\\")\r\n    else\r\n        val, err = sys.exists(\"/\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "val, err = sys.exists(\"C:\\\\\")",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "val, err = sys.exists(\"/\")",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.exists(\".\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 272,
    "text": "local val, err = sys.exists(\".\")",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.exists(\".\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.exists(\"hopefully_totally_nonexistent_345678\")\r\n    assert(val == false and err:find(\"cannot obtain information from file\"), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 277,
    "text": "local val, err = sys.exists(\"hopefully_totally_nonexistent_345678\")",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "assert(val == false and err:find(\"cannot obtain information from file\"), fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 280,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.exists(\"hopefully_totally_nonexistent_345679\")\r\n    assert(val == false and err:find(\"cannot obtain information from file\"), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 281,
    "text": "local val, err = sys.exists(\"hopefully_totally_nonexistent_345679\")",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 283,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local filename = sys.tmp_name(\"is_file_os_specific--file--\")\r\n    assert(io.open(filename, \"w\"):close())\r\n    local val, err = sys.is_file(filename)\r\n    assert(os.remove(filename))\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 284,
    "text": "local filename = sys.tmp_name(\"is_file_os_specific--file--\")",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "assert(io.open(filename, \"w\"):close())",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "local val, err = sys.is_file(filename)",
    "type": "statement:localassign"
  }, {
    "id": 287,
    "text": "assert(os.remove(filename))",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_file(\"hopefully_totally_nonexistent_345688\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 290,
    "text": "local val, err = sys.is_file(\"hopefully_totally_nonexistent_345688\")",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 292,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_file(\"hopefully_totally_nonexistent_345689\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 293,
    "text": "local val, err = sys.is_file(\"hopefully_totally_nonexistent_345689\")",
    "type": "statement:localassign"
  }, {
    "id": 294,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 295,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_dir(\".\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 296,
    "text": "local val, err = sys.is_dir(\".\")",
    "type": "statement:localassign"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_dir(\".\")\r\n    assert(val == true, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 299,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 300,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.is_dir(\"hopefully_totally_nonexistent_345698\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 301,
    "text": "local val, err = sys.is_dir(\"hopefully_totally_nonexistent_345698\")",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 303,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.is_dir(\"hopefully_totally_nonexistent_345699\")\r\n    assert(val == false, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 304,
    "text": "local val, err = sys.is_dir(\"hopefully_totally_nonexistent_345699\")",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 306,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local val, err = sys.current_dir()\r\n    assert(val == assert(lfs.currentdir()), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 307,
    "text": "local val, err = sys.current_dir()",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "assert(val == assert(lfs.currentdir()), fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 310,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.get_directory(\".\")\r\n    assert(type(val) == \"function\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 311,
    "text": "local val, err = sys.get_directory(\".\")",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "assert(type(val) == \"function\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.get_directory(\".\")\r\n    assert(type(val) == \"function\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.get_directory(\"hopefully_totally_nonexistent_245699\")\r\n    assert(val == nil and err:find(\"not a directory\"), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 317,
    "text": "local val, err = sys.get_directory(\"hopefully_totally_nonexistent_245699\")",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "assert(val == nil and err:find(\"not a directory\"), fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 320,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.get_directory(\"hopefully_totally_nonexistent_245699\")\r\n    assert(val == nil and err:find(\"not a directory\"), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.extract_name(\"/dir1/dir2/dir3/file\")\r\n    assert(val == \"file\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 323,
    "text": "local val, err = sys.extract_name(\"/dir1/dir2/dir3/file\")",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "assert(val == \"file\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 326,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.extract_name(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\file.ext\")\r\n    assert(val == \"file.ext\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 327,
    "text": "local val, err = sys.extract_name(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "assert(val == \"file.ext\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 330,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.extract_name(\"\\\\dir1\\\\dir2\\\\dir3\\\\file.ext\")\r\n    assert(val == \"file.ext\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 331,
    "text": "local val, err = sys.extract_name(\"\\\\dir1\\\\dir2\\\\dir3\\\\file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.extract_name(\"/dir1/dir2/dir3/\")\r\n    assert(val == \"dir3\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 334,
    "text": "local val, err = sys.extract_name(\"/dir1/dir2/dir3/\")",
    "type": "statement:localassign"
  }, {
    "id": 335,
    "text": "assert(val == \"dir3\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 337,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.extract_name(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\\")\r\n    assert(val == \"dir3\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 338,
    "text": "local val, err = sys.extract_name(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 339,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 340,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.extract_name(\"\\\\dir1\\\\dir2\\\\dir3\\\\\")\r\n    assert(val == \"dir3\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 341,
    "text": "local val, err = sys.extract_name(\"\\\\dir1\\\\dir2\\\\dir3\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 342,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 343,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.extract_name(\"/\")\r\n    assert(val == \"/\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 344,
    "text": "local val, err = sys.extract_name(\"/\")",
    "type": "statement:localassign"
  }, {
    "id": 345,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 346,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.extract_name(\"C:\\\\\")\r\n    assert(val == \"C:\\\\\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 347,
    "text": "local val, err = sys.extract_name(\"C:\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 349,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.extract_name(\"\\\\\")\r\n    assert(val == \"\\\\\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 350,
    "text": "local val, err = sys.extract_name(\"\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 351,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 352,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parent_dir(\"/dir1/dir2/file\")\r\n    assert(val == \"/dir1/dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 353,
    "text": "local val, err = sys.parent_dir(\"/dir1/dir2/file\")",
    "type": "statement:localassign"
  }, {
    "id": 354,
    "text": "assert(val == \"/dir1/dir2\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 356,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parent_dir(\"C:\\\\dir1\\\\dir2\\\\file.ext\")\r\n    assert(val == \"C:\\\\dir1\\\\dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 357,
    "text": "local val, err = sys.parent_dir(\"C:\\\\dir1\\\\dir2\\\\file.ext\")",
    "type": "statement:localassign"
  }, {
    "id": 358,
    "text": "assert(val == \"C:\\\\dir1\\\\dir2\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 360,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parent_dir(\"/dir1/dir2/dir3/\")\r\n    assert(val == \"/dir1/dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 361,
    "text": "local val, err = sys.parent_dir(\"/dir1/dir2/dir3/\")",
    "type": "statement:localassign"
  }, {
    "id": 362,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 363,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parent_dir(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\\")\r\n    assert(val == \"C:\\\\dir1\\\\dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 364,
    "text": "local val, err = sys.parent_dir(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 366,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parent_dir(\"/\")\r\n    assert(val == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 367,
    "text": "local val, err = sys.parent_dir(\"/\")",
    "type": "statement:localassign"
  }, {
    "id": 368,
    "text": "assert(val == nil, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 370,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parent_dir(\"C:\\\\\")\r\n    assert(val == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 371,
    "text": "local val, err = sys.parent_dir(\"C:\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 372,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 373,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parent_dir(\"/dir1/dir2/dir3/.\")\r\n    assert(val == \"/dir1/dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 374,
    "text": "local val, err = sys.parent_dir(\"/dir1/dir2/dir3/.\")",
    "type": "statement:localassign"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parent_dir(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\.\")\r\n    assert(val == \"C:\\\\dir1\\\\dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 377,
    "text": "local val, err = sys.parent_dir(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\.\")",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 379,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parent_dir(\"\\\\dir1\\\\dir2\\\\dir3\\\\.\")\r\n    assert(val == \"\\\\dir1\\\\dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 380,
    "text": "local val, err = sys.parent_dir(\"\\\\dir1\\\\dir2\\\\dir3\\\\.\")",
    "type": "statement:localassign"
  }, {
    "id": 381,
    "text": "assert(val == \"\\\\dir1\\\\dir2\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 383,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parent_dir(\"/dir1/./dir2/dir3/././.\")\r\n    assert(val == \"/dir1/dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 384,
    "text": "local val, err = sys.parent_dir(\"/dir1/./dir2/dir3/././.\")",
    "type": "statement:localassign"
  }, {
    "id": 385,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 386,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parent_dir(\"C:\\\\dir1\\\\.\\\\dir2\\\\dir3\\\\.\\\\.\\\\.\")\r\n    assert(val == \"C:\\\\dir1\\\\dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 387,
    "text": "local val, err = sys.parent_dir(\"C:\\\\dir1\\\\.\\\\dir2\\\\dir3\\\\.\\\\.\\\\.\")",
    "type": "statement:localassign"
  }, {
    "id": 388,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 389,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parent_dir(\"\\\\dir1\\\\.\\\\dir2\\\\dir3\\\\.\\\\.\\\\.\")\r\n    assert(val == \"\\\\dir1\\\\dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 390,
    "text": "local val, err = sys.parent_dir(\"\\\\dir1\\\\.\\\\dir2\\\\dir3\\\\.\\\\.\\\\.\")",
    "type": "statement:localassign"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parent_dir(\"./dir1/dir2/dir3/\")\r\n    assert(val == \"./dir1/dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 393,
    "text": "local val, err = sys.parent_dir(\"./dir1/dir2/dir3/\")",
    "type": "statement:localassign"
  }, {
    "id": 394,
    "text": "assert(val == \"./dir1/dir2\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 396,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parent_dir(\".\\\\dir1\\\\dir2\\\\dir3\\\\\")\r\n    assert(val == \".\\\\dir1\\\\dir2\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 397,
    "text": "local val, err = sys.parent_dir(\".\\\\dir1\\\\dir2\\\\dir3\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 398,
    "text": "assert(val == \".\\\\dir1\\\\dir2\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 400,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parents_up_to(\"/dir1/dir2/dir3/file\",\"/dir1\")\r\n    assert(val[1] == \"/dir1/dir2/dir3\" and val[2] == \"/dir1/dir2\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 401,
    "text": "local val, err = sys.parents_up_to(\"/dir1/dir2/dir3/file\",\"/dir1\")",
    "type": "statement:localassign"
  }, {
    "id": 402,
    "text": "assert(val[1] == \"/dir1/dir2/dir3\" and val[2] == \"/dir1/dir2\" and val[3] == nil, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\file\",\"C:\\\\dir1\")\r\n    assert(val[1] == \"C:\\\\dir1\\\\dir2\\\\dir3\" and val[2] == \"C:\\\\dir1\\\\dir2\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 405,
    "text": "local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\file\",\"C:\\\\dir1\")",
    "type": "statement:localassign"
  }, {
    "id": 406,
    "text": "assert(val[1] == \"C:\\\\dir1\\\\dir2\\\\dir3\" and val[2] == \"C:\\\\dir1\\\\dir2\" and val[3] == nil, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 407,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 408,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parents_up_to(\"/dir1/dir2/dir3/file\",\"/dir1/\")\r\n    assert(val[1] == \"/dir1/dir2/dir3\" and val[2] == \"/dir1/dir2\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 409,
    "text": "local val, err = sys.parents_up_to(\"/dir1/dir2/dir3/file\",\"/dir1/\")",
    "type": "statement:localassign"
  }, {
    "id": 410,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 411,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\file\",\"C:\\\\dir1\\\\\")\r\n    assert(val[1] == \"C:\\\\dir1\\\\dir2\\\\dir3\" and val[2] == \"C:\\\\dir1\\\\dir2\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 412,
    "text": "local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\file\",\"C:\\\\dir1\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 413,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 414,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parents_up_to(\"/dir1/dir2/dir3/dir4/\",\"/dir1\")\r\n    assert(val[1] == \"/dir1/dir2/dir3\" and val[2] == \"/dir1/dir2\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 415,
    "text": "local val, err = sys.parents_up_to(\"/dir1/dir2/dir3/dir4/\",\"/dir1\")",
    "type": "statement:localassign"
  }, {
    "id": 416,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 417,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\\",\"C:\\\\dir1\")\r\n    assert(val[1] == \"C:\\\\dir1\\\\dir2\\\\dir3\" and val[2] == \"C:\\\\dir1\\\\dir2\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 418,
    "text": "local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\\",\"C:\\\\dir1\")",
    "type": "statement:localassign"
  }, {
    "id": 419,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 420,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parents_up_to(\"/dir1/dir2/file\",\"/\")\r\n    assert(val[1] == \"/dir1/dir2\" and val[2] == \"/dir1\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 421,
    "text": "local val, err = sys.parents_up_to(\"/dir1/dir2/file\",\"/\")",
    "type": "statement:localassign"
  }, {
    "id": 422,
    "text": "assert(val[1] == \"/dir1/dir2\" and val[2] == \"/dir1\" and val[3] == nil, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 423,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 424,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\file\",\"C:\\\\\")\r\n    assert(val[1] == \"C:\\\\dir1\\\\dir2\" and val[2] == \"C:\\\\dir1\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 425,
    "text": "local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\file\",\"C:\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 426,
    "text": "assert(val[1] == \"C:\\\\dir1\\\\dir2\" and val[2] == \"C:\\\\dir1\" and val[3] == nil, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 427,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 428,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parents_up_to(\"/dir1/dir2/dir3/\",\"/\")\r\n    assert(val[1] == \"/dir1/dir2\" and val[2] == \"/dir1\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 429,
    "text": "local val, err = sys.parents_up_to(\"/dir1/dir2/dir3/\",\"/\")",
    "type": "statement:localassign"
  }, {
    "id": 430,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 431,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\\",\"C:\\\\\")\r\n    assert(val[1] == \"C:\\\\dir1\\\\dir2\" and val[2] == \"C:\\\\dir1\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 432,
    "text": "local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\dir3\\\\\",\"C:\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 433,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 434,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.parents_up_to(\"/dir1/dir2/./dir3/\",\"/\")\r\n    assert(val[1] == \"/dir1/dir2\" and val[2] == \"/dir1\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 435,
    "text": "local val, err = sys.parents_up_to(\"/dir1/dir2/./dir3/\",\"/\")",
    "type": "statement:localassign"
  }, {
    "id": 436,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 437,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\.\\\\dir3\\\\\",\"C:\\\\\")\r\n    assert(val[1] == \"C:\\\\dir1\\\\dir2\" and val[2] == \"C:\\\\dir1\" and val[3] == nil, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 438,
    "text": "local val, err = sys.parents_up_to(\"C:\\\\dir1\\\\dir2\\\\.\\\\dir3\\\\\",\"C:\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 439,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 440,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.make_path(\"/this/is\",\"/my/\",\"/little/path\")\r\n    assert(val == \"/this/is/my/little/path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 441,
    "text": "local val, err = sys.make_path(\"/this/is\",\"/my/\",\"/little/path\")",
    "type": "statement:localassign"
  }, {
    "id": 442,
    "text": "assert(val == \"/this/is/my/little/path\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 444,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.make_path(\"C:\\\\this\\\\is\",\"\\\\my\\\\\",\"\\\\little\\\\path\")\r\n    assert(val == \"C:\\\\this\\\\is\\\\my\\\\little\\\\path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 445,
    "text": "local val, err = sys.make_path(\"C:\\\\this\\\\is\",\"\\\\my\\\\\",\"\\\\little\\\\path\")",
    "type": "statement:localassign"
  }, {
    "id": 446,
    "text": "assert(val == \"C:\\\\this\\\\is\\\\my\\\\little\\\\path\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 447,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 448,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.make_path(\"/\")\r\n    assert(val == \"/\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 449,
    "text": "local val, err = sys.make_path(\"/\")",
    "type": "statement:localassign"
  }, {
    "id": 450,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 451,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.make_path(\"C:\\\\\")\r\n    assert(val == \"C:\\\\\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 452,
    "text": "local val, err = sys.make_path(\"C:\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 453,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 454,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.make_path(\"\\\\\")\r\n    assert(val == \"\\\\\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 455,
    "text": "local val, err = sys.make_path(\"\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 456,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 457,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.make_path(\"/this/is\",\"/my/\",\"/little/path/\")\r\n    assert(val == \"/this/is/my/little/path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 458,
    "text": "local val, err = sys.make_path(\"/this/is\",\"/my/\",\"/little/path/\")",
    "type": "statement:localassign"
  }, {
    "id": 459,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 460,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.make_path(\"C:\\\\this\\\\is\",\"\\\\my\\\\\",\"\\\\little\\\\path\\\\\")\r\n    assert(val == \"C:\\\\this\\\\is\\\\my\\\\little\\\\path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 461,
    "text": "local val, err = sys.make_path(\"C:\\\\this\\\\is\",\"\\\\my\\\\\",\"\\\\little\\\\path\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 462,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 463,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local val, err = sys.make_path()\r\n    assert(val == assert(lfs.currentdir()), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 464,
    "text": "local val, err = sys.make_path()",
    "type": "statement:localassign"
  }, {
    "id": 465,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 466,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.abs_path(\"this/is/my/little/path\")\r\n    assert(val == assert(lfs.currentdir()) .. \"/this/is/my/little/path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 467,
    "text": "local val, err = sys.abs_path(\"this/is/my/little/path\")",
    "type": "statement:localassign"
  }, {
    "id": 468,
    "text": "assert(val == assert(lfs.currentdir()) .. \"/this/is/my/little/path\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 469,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 470,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.abs_path(\"this\\\\is\\\\my\\\\little\\\\path\")\r\n    assert(val == assert(lfs.currentdir()) .. \"\\\\this\\\\is\\\\my\\\\little\\\\path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 471,
    "text": "local val, err = sys.abs_path(\"this\\\\is\\\\my\\\\little\\\\path\")",
    "type": "statement:localassign"
  }, {
    "id": 472,
    "text": "assert(val == assert(lfs.currentdir()) .. \"\\\\this\\\\is\\\\my\\\\little\\\\path\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 473,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 474,
    "text": "function()\r\n    cfg.arch = \"Linux\"\r\n    local val, err = sys.abs_path(\"/this/is/my/little/path\")\r\n    assert(val == \"/this/is/my/little/path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 475,
    "text": "local val, err = sys.abs_path(\"/this/is/my/little/path\")",
    "type": "statement:localassign"
  }, {
    "id": 476,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 477,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.abs_path(\"C:\\\\this\\\\is\\\\my\\\\little\\\\path\")\r\n    assert(val == \"C:\\\\this\\\\is\\\\my\\\\little\\\\path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 478,
    "text": "local val, err = sys.abs_path(\"C:\\\\this\\\\is\\\\my\\\\little\\\\path\")",
    "type": "statement:localassign"
  }, {
    "id": 479,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 480,
    "text": "function()\r\n    cfg.arch = \"Windows\"\r\n    local val, err = sys.abs_path(\"\\\\this\\\\is\\\\my\\\\little\\\\path\")\r\n    assert(val == \"\\\\this\\\\is\\\\my\\\\little\\\\path\", fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 481,
    "text": "local val, err = sys.abs_path(\"\\\\this\\\\is\\\\my\\\\little\\\\path\")",
    "type": "statement:localassign"
  }, {
    "id": 482,
    "text": "assert(val == \"\\\\this\\\\is\\\\my\\\\little\\\\path\", fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 483,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 484,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local val, err = sys.tmp_dir()\r\n    assert(type(val) == \"string\" and val ~= \"\" and sys.is_abs(val) and sys.exists(val) and sys.is_dir(val) , fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 485,
    "text": "local val, err = sys.tmp_dir()",
    "type": "statement:localassign"
  }, {
    "id": 486,
    "text": "assert(type(val) == \"string\" and val ~= \"\" and sys.is_abs(val) and sys.exists(val) and sys.is_dir(val) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 487,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 488,
    "text": "function()\r\n    cfg.arch = original_arch\r\n    local val, err = sys.tmp_name()\r\n    assert(type(val) == \"string\" and val ~= \"\" and sys.is_abs(val) and not sys.exists(val) , fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 489,
    "text": "local val, err = sys.tmp_name()",
    "type": "statement:localassign"
  }, {
    "id": 490,
    "text": "assert(type(val) == \"string\" and val ~= \"\" and sys.is_abs(val) and not sys.exists(val) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 491,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 492,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create directory and files within\r\n    local dir = sys.tmp_name(\"get_file_list_os_specific--dir--\")\r\n    local file1 = sys.make_path(dir, \"file1\")\r\n    local file2 = sys.make_path(dir, \"file2\")\r\n    assert(lfs.mkdir(dir))\r\n    assert(io.open(file1, \"w\"):close())\r\n    assert(io.open(file2, \"w\"):close())\r\n\r\n    -- get the file list\r\n    local val, err = sys.get_file_list(dir)\r\n\r\n    -- clean\r\n    assert(os.remove(file1))\r\n    assert(os.remove(file2))\r\n    assert(lfs.rmdir(dir))\r\n\r\n    -- verify\r\n    assert(val[1] == sys.extract_name(file1) and val[2] == sys.extract_name(file2) or\r\n           val[1] == sys.extract_name(file2) and val[2] == sys.extract_name(file1), fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 493,
    "text": "local dir = sys.tmp_name(\"get_file_list_os_specific--dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 494,
    "text": "local file1 = sys.make_path(dir, \"file1\")",
    "type": "statement:localassign"
  }, {
    "id": 495,
    "text": "local file2 = sys.make_path(dir, \"file2\")",
    "type": "statement:localassign"
  }, {
    "id": 496,
    "text": "assert(lfs.mkdir(dir))",
    "type": "statement:functioncall"
  }, {
    "id": 497,
    "text": "assert(io.open(file1, \"w\"):close())",
    "type": "statement:functioncall"
  }, {
    "id": 498,
    "text": "assert(io.open(file2, \"w\"):close())",
    "type": "statement:functioncall"
  }, {
    "id": 499,
    "text": "local val, err = sys.get_file_list(dir)",
    "type": "statement:localassign"
  }, {
    "id": 500,
    "text": "assert(os.remove(file1))",
    "type": "statement:functioncall"
  }, {
    "id": 501,
    "text": "assert(os.remove(file2))",
    "type": "statement:functioncall"
  }, {
    "id": 502,
    "text": "assert(lfs.rmdir(dir))",
    "type": "statement:functioncall"
  }, {
    "id": 503,
    "text": "assert(val[1] == sys.extract_name(file1) and val[2] == sys.extract_name(file2) or\r\n           val[1] == sys.extract_name(file2) and val[2] == sys.extract_name(file1), fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 504,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 505,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a directory\r\n    local dir = sys.tmp_name(\"get_file_list__with_empty_dir_os_specific--dir--\")\r\n    assert(lfs.mkdir(dir))\r\n\r\n    -- get the file list\r\n    local val, err = sys.get_file_list(dir)\r\n\r\n    -- clean\r\n    assert(lfs.rmdir(dir))\r\n\r\n    -- verify\r\n    assert(type(val) == \"table\" and #val == 0, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 506,
    "text": "local dir = sys.tmp_name(\"get_file_list__with_empty_dir_os_specific--dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 507,
    "text": "assert(type(val) == \"table\" and #val == 0, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 508,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 509,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- set and remember the directories\r\n    local orig = assert(lfs.currentdir())\r\n    local future = assert(sys.parent_dir(assert(lfs.currentdir())))\r\n\r\n    -- change the directory and record the change\r\n    local val, err = sys.change_dir(future)\r\n    local new = assert(lfs.currentdir())\r\n\r\n    -- change back to the original directory\r\n    assert(lfs.chdir(orig))\r\n    assert(lfs.currentdir() == orig)\r\n\r\n    -- verify\r\n    assert(val == true and err == orig and new == future, fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 510,
    "text": "local orig = assert(lfs.currentdir())",
    "type": "statement:localassign"
  }, {
    "id": 511,
    "text": "local future = assert(sys.parent_dir(assert(lfs.currentdir())))",
    "type": "statement:localassign"
  }, {
    "id": 512,
    "text": "local val, err = sys.change_dir(future)",
    "type": "statement:localassign"
  }, {
    "id": 513,
    "text": "local new = assert(lfs.currentdir())",
    "type": "statement:localassign"
  }, {
    "id": 514,
    "text": "assert(lfs.chdir(orig))",
    "type": "statement:functioncall"
  }, {
    "id": 515,
    "text": "assert(lfs.currentdir() == orig)",
    "type": "statement:functioncall"
  }, {
    "id": 516,
    "text": "assert(val == true and err == orig and new == future, fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 517,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 518,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create the dir\r\n    local dir = sys.tmp_name(\"make_dir_os_specific--dir--\")\r\n    local val, err = sys.make_dir(dir)\r\n\r\n    -- verify\r\n    assert(val == true and sys.exists(dir) , fail_msg(val, err))\r\n\r\n    -- clean\r\n    assert(lfs.rmdir(dir))\r\nend",
    "type": "function"
  }, {
    "id": 519,
    "text": "local dir = sys.tmp_name(\"make_dir_os_specific--dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 520,
    "text": "local val, err = sys.make_dir(dir)",
    "type": "statement:localassign"
  }, {
    "id": 521,
    "text": "assert(val == true and sys.exists(dir) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 522,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 523,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a file\r\n    local file = sys.tmp_name(\"make_dir_os_specific--file--\")\r\n    assert(io.open(file, \"w\"):close())\r\n\r\n    -- create a dir\r\n    local dir = sys.tmp_name(\"make_dir_os_specific--dir--\")\r\n    assert(sys.make_dir(dir))\r\n\r\n    -- move the file to the dir\r\n    local val, err = sys.move_to(file, dir)\r\n\r\n    -- verify\r\n    local moved_file = sys.make_path(dir, sys.extract_name(file))\r\n    assert(val == true and not sys.exists(file) and sys.exists(moved_file) , fail_msg(val, err))\r\n\r\n    -- clean\r\n    assert(os.remove(moved_file))\r\n    assert(lfs.rmdir(dir))\r\nend",
    "type": "function"
  }, {
    "id": 524,
    "text": "local file = sys.tmp_name(\"make_dir_os_specific--file--\")",
    "type": "statement:localassign"
  }, {
    "id": 525,
    "text": "assert(io.open(file, \"w\"):close())",
    "type": "statement:functioncall"
  }, {
    "id": 526,
    "text": "assert(sys.make_dir(dir))",
    "type": "statement:functioncall"
  }, {
    "id": 527,
    "text": "local val, err = sys.move_to(file, dir)",
    "type": "statement:localassign"
  }, {
    "id": 528,
    "text": "local moved_file = sys.make_path(dir, sys.extract_name(file))",
    "type": "statement:localassign"
  }, {
    "id": 529,
    "text": "assert(val == true and not sys.exists(file) and sys.exists(moved_file) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 530,
    "text": "assert(os.remove(moved_file))",
    "type": "statement:functioncall"
  }, {
    "id": 531,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 532,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a source dir\r\n    local src_dir = sys.tmp_name(\"move_to_with_dir_os_specific--src-dir--\")\r\n    assert(sys.make_dir(src_dir))\r\n\r\n    -- create a file within\r\n    local file = sys.make_path(src_dir, \"file\")\r\n    assert(io.open(file, \"w\"):close())\r\n\r\n    -- create a destination dir\r\n    local dest_dir = sys.tmp_name(\"move_to_with_dir_os_specific--dest-dir--\")\r\n    assert(sys.make_dir(dest_dir))\r\n\r\n    -- move the source directory to the destination directory (should be recursive)\r\n    local val, err = sys.move_to(src_dir, dest_dir)\r\n\r\n    -- verify\r\n    local moved_dir = sys.make_path(dest_dir, sys.extract_name(src_dir))\r\n    local moved_file = sys.make_path(moved_dir, sys.extract_name(file))\r\n    assert(val == true and not sys.exists(src_dir)\r\n                       and not sys.exists(file)\r\n                       and sys.exists(moved_dir)\r\n                       and sys.exists(moved_file) , fail_msg(val, err))\r\n\r\n    -- clean\r\n    assert(os.remove(moved_file))\r\n    assert(lfs.rmdir(moved_dir))\r\n    assert(lfs.rmdir(dest_dir))\r\nend",
    "type": "function"
  }, {
    "id": 533,
    "text": "local src_dir = sys.tmp_name(\"move_to_with_dir_os_specific--src-dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 534,
    "text": "assert(sys.make_dir(src_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 535,
    "text": "local file = sys.make_path(src_dir, \"file\")",
    "type": "statement:localassign"
  }, {
    "id": 536,
    "text": "local dest_dir = sys.tmp_name(\"move_to_with_dir_os_specific--dest-dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 537,
    "text": "assert(sys.make_dir(dest_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 538,
    "text": "local val, err = sys.move_to(src_dir, dest_dir)",
    "type": "statement:localassign"
  }, {
    "id": 539,
    "text": "local moved_dir = sys.make_path(dest_dir, sys.extract_name(src_dir))",
    "type": "statement:localassign"
  }, {
    "id": 540,
    "text": "local moved_file = sys.make_path(moved_dir, sys.extract_name(file))",
    "type": "statement:localassign"
  }, {
    "id": 541,
    "text": "assert(val == true and not sys.exists(src_dir)\r\n                       and not sys.exists(file)\r\n                       and sys.exists(moved_dir)\r\n                       and sys.exists(moved_file) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 542,
    "text": "assert(lfs.rmdir(moved_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 543,
    "text": "assert(lfs.rmdir(dest_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 544,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 545,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a file\r\n    local file = sys.tmp_name(\"rename_with_file_os_specific--file-original--\")\r\n    assert(io.open(file, \"w\"):close())\r\n\r\n    -- rename the file\r\n    local renamed_file = sys.tmp_name(\"rename_with_file_os_specific--file-renamed--\")\r\n    local val, err = sys.rename(file, renamed_file)\r\n\r\n    -- verify\r\n    assert(val == true and not sys.exists(file) and sys.exists(renamed_file) , fail_msg(val, err))\r\n\r\n    -- clean\r\n    assert(os.remove(renamed_file))\r\nend",
    "type": "function"
  }, {
    "id": 546,
    "text": "local file = sys.tmp_name(\"rename_with_file_os_specific--file-original--\")",
    "type": "statement:localassign"
  }, {
    "id": 547,
    "text": "local renamed_file = sys.tmp_name(\"rename_with_file_os_specific--file-renamed--\")",
    "type": "statement:localassign"
  }, {
    "id": 548,
    "text": "local val, err = sys.rename(file, renamed_file)",
    "type": "statement:localassign"
  }, {
    "id": 549,
    "text": "assert(val == true and not sys.exists(file) and sys.exists(renamed_file) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 550,
    "text": "assert(os.remove(renamed_file))",
    "type": "statement:functioncall"
  }, {
    "id": 551,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 552,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a dir\r\n    local dir = sys.tmp_name(\"rename_with_dir_os_specific--dir-original--\")\r\n    assert(sys.make_dir(dir))\r\n\r\n    -- create a file within\r\n    local file = sys.make_path(dir, \"file\")\r\n    assert(io.open(file, \"w\"):close())\r\n\r\n    -- rename the directory\r\n    local renamed_dir = sys.tmp_name(\"rename_with_dir_os_specific--dir-renamed--\")\r\n    local val, err = sys.rename(dir, renamed_dir)\r\n\r\n    -- verify\r\n    local renamed_file = sys.make_path(renamed_dir, sys.extract_name(file))\r\n    assert(val == true and not sys.exists(dir)\r\n                       and not sys.exists(file)\r\n                       and sys.exists(renamed_dir)\r\n                       and sys.exists(renamed_file) , fail_msg(val, err))\r\n\r\n    -- clean\r\n    assert(os.remove(renamed_file))\r\n    assert(lfs.rmdir(renamed_dir))\r\nend",
    "type": "function"
  }, {
    "id": 553,
    "text": "local dir = sys.tmp_name(\"rename_with_dir_os_specific--dir-original--\")",
    "type": "statement:localassign"
  }, {
    "id": 554,
    "text": "local file = sys.make_path(dir, \"file\")",
    "type": "statement:localassign"
  }, {
    "id": 555,
    "text": "local renamed_dir = sys.tmp_name(\"rename_with_dir_os_specific--dir-renamed--\")",
    "type": "statement:localassign"
  }, {
    "id": 556,
    "text": "local val, err = sys.rename(dir, renamed_dir)",
    "type": "statement:localassign"
  }, {
    "id": 557,
    "text": "local renamed_file = sys.make_path(renamed_dir, sys.extract_name(file))",
    "type": "statement:localassign"
  }, {
    "id": 558,
    "text": "assert(val == true and not sys.exists(dir)\r\n                       and not sys.exists(file)\r\n                       and sys.exists(renamed_dir)\r\n                       and sys.exists(renamed_file) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 559,
    "text": "assert(lfs.rmdir(renamed_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 560,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 561,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a file\r\n    local file = sys.tmp_name(\"copy_with_file_os_specific--file--\")\r\n    assert(io.open(file, \"w\"):close())\r\n\r\n    -- create a dir\r\n    local dir = sys.tmp_name(\"copy_with_file_os_specific--src-dir--\")\r\n    assert(sys.make_dir(dir))\r\n\r\n    -- copy the file to the dir\r\n    local val, err = sys.copy(file, dir)\r\n\r\n    -- verify\r\n    local copied_file = sys.make_path(dir, sys.extract_name(file))\r\n    assert(val == true and sys.exists(file) and sys.exists(copied_file) , fail_msg(val, err))\r\n\r\n    -- clean\r\n    assert(os.remove(file))\r\n    assert(os.remove(copied_file))\r\n    assert(lfs.rmdir(dir))\r\nend",
    "type": "function"
  }, {
    "id": 562,
    "text": "local file = sys.tmp_name(\"copy_with_file_os_specific--file--\")",
    "type": "statement:localassign"
  }, {
    "id": 563,
    "text": "local dir = sys.tmp_name(\"copy_with_file_os_specific--src-dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 564,
    "text": "local val, err = sys.copy(file, dir)",
    "type": "statement:localassign"
  }, {
    "id": 565,
    "text": "local copied_file = sys.make_path(dir, sys.extract_name(file))",
    "type": "statement:localassign"
  }, {
    "id": 566,
    "text": "assert(val == true and sys.exists(file) and sys.exists(copied_file) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 567,
    "text": "assert(os.remove(file))",
    "type": "statement:functioncall"
  }, {
    "id": 568,
    "text": "assert(os.remove(copied_file))",
    "type": "statement:functioncall"
  }, {
    "id": 569,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 570,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a source dir\r\n    local src_dir = sys.tmp_name(\"copy_with_dir_os_specific--src-dir--\")\r\n    assert(sys.make_dir(src_dir))\r\n\r\n    -- create a file within\r\n    local file = sys.make_path(src_dir, \"file\")\r\n    assert(io.open(file, \"w\"):close())\r\n\r\n    -- create a destination dir\r\n    local dest_dir = sys.tmp_name(\"copy_with_dir_os_specific--dest-dir--\")\r\n    assert(sys.make_dir(dest_dir))\r\n\r\n    -- copy the source directory to the destination directory (should be recursive)\r\n    local val, err = sys.copy(src_dir, dest_dir)\r\n\r\n    -- verify\r\n    local copied_dir = sys.make_path(dest_dir, sys.extract_name(src_dir))\r\n    local copied_file = sys.make_path(copied_dir, sys.extract_name(file))\r\n    assert(val == true and sys.exists(src_dir)\r\n                       and sys.exists(file)\r\n                       and sys.exists(copied_dir)\r\n                       and sys.exists(copied_file) , fail_msg(val, err))\r\n\r\n    -- clean\r\n    assert(os.remove(file))\r\n    assert(lfs.rmdir(src_dir))\r\n    assert(os.remove(copied_file))\r\n    assert(lfs.rmdir(copied_dir))\r\n    assert(lfs.rmdir(dest_dir))\r\nend",
    "type": "function"
  }, {
    "id": 571,
    "text": "local src_dir = sys.tmp_name(\"copy_with_dir_os_specific--src-dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 572,
    "text": "local dest_dir = sys.tmp_name(\"copy_with_dir_os_specific--dest-dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 573,
    "text": "local val, err = sys.copy(src_dir, dest_dir)",
    "type": "statement:localassign"
  }, {
    "id": 574,
    "text": "local copied_dir = sys.make_path(dest_dir, sys.extract_name(src_dir))",
    "type": "statement:localassign"
  }, {
    "id": 575,
    "text": "local copied_file = sys.make_path(copied_dir, sys.extract_name(file))",
    "type": "statement:localassign"
  }, {
    "id": 576,
    "text": "assert(val == true and sys.exists(src_dir)\r\n                       and sys.exists(file)\r\n                       and sys.exists(copied_dir)\r\n                       and sys.exists(copied_file) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 577,
    "text": "assert(lfs.rmdir(src_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 578,
    "text": "assert(lfs.rmdir(copied_dir))",
    "type": "statement:functioncall"
  }, {
    "id": 579,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 580,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a file\r\n    local file = sys.tmp_name(\"delete_with_file_os_specific--file--\")\r\n    assert(io.open(file, \"w\"):close())\r\n\r\n    -- delete the file\r\n    local val, err = sys.delete(file)\r\n\r\n    -- verify\r\n    assert(val == true and not sys.exists(file) , fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 581,
    "text": "local file = sys.tmp_name(\"delete_with_file_os_specific--file--\")",
    "type": "statement:localassign"
  }, {
    "id": 582,
    "text": "local val, err = sys.delete(file)",
    "type": "statement:localassign"
  }, {
    "id": 583,
    "text": "assert(val == true and not sys.exists(file) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 584,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 585,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a dir\r\n    local dir = sys.tmp_name(\"delete_with_empty_dir_os_specific--dir--\")\r\n    assert(sys.make_dir(dir))\r\n\r\n    -- delete the dir\r\n    local val, err = sys.delete(dir)\r\n\r\n    -- verify\r\n    assert(val == true and not sys.exists(dir) , fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 586,
    "text": "local dir = sys.tmp_name(\"delete_with_empty_dir_os_specific--dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 587,
    "text": "local val, err = sys.delete(dir)",
    "type": "statement:localassign"
  }, {
    "id": 588,
    "text": "assert(val == true and not sys.exists(dir) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 589,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 590,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- create a dir\r\n    local dir = sys.tmp_name(\"delete_with_nonempty_dir_os_specific--dir--\")\r\n    assert(sys.make_dir(dir))\r\n\r\n    -- create a file within\r\n    local file = sys.make_path(dir, \"file\")\r\n    assert(io.open(file, \"w\"):close())\r\n\r\n    -- delete the dir\r\n    local val, err = sys.delete(dir)\r\n\r\n    -- verify\r\n    assert(val == true and not sys.exists(file) and not sys.exists(dir) , fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 591,
    "text": "local dir = sys.tmp_name(\"delete_with_nonempty_dir_os_specific--dir--\")",
    "type": "statement:localassign"
  }, {
    "id": 592,
    "text": "assert(val == true and not sys.exists(file) and not sys.exists(dir) , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 593,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 594,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- construct a nonexistent path\r\n    local nonexistent_path = sys.tmp_name(\"delete_with_nonexistent_path_os_specific--nonexistent-path\")\r\n    assert(not sys.exists(nonexistent_path))\r\n\r\n    -- attempt to delete the path (should just return true)\r\n    local val, err = sys.delete(nonexistent_path)\r\n\r\n    -- verify\r\n    assert(val == true , fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 595,
    "text": "local nonexistent_path = sys.tmp_name(\"delete_with_nonexistent_path_os_specific--nonexistent-path\")",
    "type": "statement:localassign"
  }, {
    "id": 596,
    "text": "assert(not sys.exists(nonexistent_path))",
    "type": "statement:functioncall"
  }, {
    "id": 597,
    "text": "local val, err = sys.delete(nonexistent_path)",
    "type": "statement:localassign"
  }, {
    "id": 598,
    "text": "assert(val == true , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 599,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 600,
    "text": "function()\r\n    cfg.arch = original_arch\r\n\r\n    -- construct a non absolute path\r\n    local nonabs_path = \"not-abs-895454-\" .. utils.rand(1000000)\r\n\r\n    -- attempt to delete the path (should throw an assertion error)\r\n    local val, err = pcall(sys.delete, nonabs_path)\r\n\r\n    -- verify\r\n    assert(val == false and err:find(\"not an absolute path\") , fail_msg(val, err))\r\nend",
    "type": "function"
  }, {
    "id": 601,
    "text": "local nonabs_path = \"not-abs-895454-\" .. utils.rand(1000000)",
    "type": "statement:localassign"
  }, {
    "id": 602,
    "text": "local val, err = pcall(sys.delete, nonabs_path)",
    "type": "statement:localassign"
  }, {
    "id": 603,
    "text": "assert(val == false and err:find(\"not an absolute path\") , fail_msg(val, err))",
    "type": "statement:functioncall"
  }, {
    "id": 604,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 605,
    "text": "",
    "type": "function container"
  }, {
    "id": 606,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 607,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 608,
    "text": "dist",
    "type": "module"
  }, {
    "id": 609,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 610,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 611,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 612,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 613,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 614,
    "text": "print",
    "type": "global function"
  }, {
    "id": 615,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 616,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 617,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 618,
    "text": "open",
    "type": "global function"
  }, {
    "id": 619,
    "text": "type",
    "type": "global function"
  }, {
    "id": 620,
    "text": "require",
    "type": "global function"
  }, {
    "id": 621,
    "text": "config",
    "type": "module"
  }, {
    "id": 622,
    "text": "",
    "type": "local variable"
  }, {
    "id": 623,
    "text": "",
    "type": "variable container"
  }, {
    "id": 624,
    "text": "",
    "type": "require container"
  }, {
    "id": 625,
    "text": "",
    "type": "local variable"
  }, {
    "id": 626,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 627,
    "text": "",
    "type": "local variable"
  }, {
    "id": 628,
    "text": "",
    "type": "n/a"
  }, {
    "id": 629,
    "text": "",
    "type": "global variable"
  }, {
    "id": 630,
    "text": "",
    "type": "n/a"
  }, {
    "id": 631,
    "text": "",
    "type": "global variable"
  }, {
    "id": 632,
    "text": "",
    "type": "n/a"
  }, {
    "id": 633,
    "text": "",
    "type": "global variable"
  }, {
    "id": 634,
    "text": "",
    "type": "n/a"
  }, {
    "id": 635,
    "text": "",
    "type": "global variable"
  }, {
    "id": 636,
    "text": "",
    "type": "n/a"
  }, {
    "id": 637,
    "text": "",
    "type": "global variable"
  }, {
    "id": 638,
    "text": "",
    "type": "n/a"
  }, {
    "id": 639,
    "text": "",
    "type": "global variable"
  }, {
    "id": 640,
    "text": "",
    "type": "n/a"
  }, {
    "id": 641,
    "text": "",
    "type": "global variable"
  }, {
    "id": 642,
    "text": "",
    "type": "n/a"
  }, {
    "id": 643,
    "text": "",
    "type": "global variable"
  }, {
    "id": 644,
    "text": "",
    "type": "n/a"
  }, {
    "id": 645,
    "text": "",
    "type": "global variable"
  }, {
    "id": 646,
    "text": "",
    "type": "n/a"
  }, {
    "id": 647,
    "text": "",
    "type": "global variable"
  }, {
    "id": 648,
    "text": "",
    "type": "n/a"
  }, {
    "id": 649,
    "text": "",
    "type": "global variable"
  }, {
    "id": 650,
    "text": "",
    "type": "n/a"
  }, {
    "id": 651,
    "text": "",
    "type": "global variable"
  }, {
    "id": 652,
    "text": "",
    "type": "n/a"
  }, {
    "id": 653,
    "text": "",
    "type": "global variable"
  }, {
    "id": 654,
    "text": "",
    "type": "n/a"
  }, {
    "id": 655,
    "text": "",
    "type": "global variable"
  }, {
    "id": 656,
    "text": "",
    "type": "n/a"
  }, {
    "id": 657,
    "text": "",
    "type": "global variable"
  }, {
    "id": 658,
    "text": "",
    "type": "n/a"
  }, {
    "id": 659,
    "text": "",
    "type": "global variable"
  }, {
    "id": 660,
    "text": "",
    "type": "n/a"
  }, {
    "id": 661,
    "text": "",
    "type": "global variable"
  }, {
    "id": 662,
    "text": "",
    "type": "n/a"
  }, {
    "id": 663,
    "text": "",
    "type": "global variable"
  }, {
    "id": 664,
    "text": "",
    "type": "n/a"
  }, {
    "id": 665,
    "text": "",
    "type": "global variable"
  }, {
    "id": 666,
    "text": "",
    "type": "n/a"
  }, {
    "id": 667,
    "text": "",
    "type": "global variable"
  }, {
    "id": 668,
    "text": "",
    "type": "n/a"
  }, {
    "id": 669,
    "text": "",
    "type": "global variable"
  }, {
    "id": 670,
    "text": "",
    "type": "n/a"
  }, {
    "id": 671,
    "text": "",
    "type": "global variable"
  }, {
    "id": 672,
    "text": "",
    "type": "n/a"
  }, {
    "id": 673,
    "text": "",
    "type": "global variable"
  }, {
    "id": 674,
    "text": "",
    "type": "n/a"
  }, {
    "id": 675,
    "text": "",
    "type": "global variable"
  }, {
    "id": 676,
    "text": "",
    "type": "n/a"
  }, {
    "id": 677,
    "text": "",
    "type": "global variable"
  }, {
    "id": 678,
    "text": "",
    "type": "n/a"
  }, {
    "id": 679,
    "text": "",
    "type": "global variable"
  }, {
    "id": 680,
    "text": "",
    "type": "n/a"
  }, {
    "id": 681,
    "text": "",
    "type": "global variable"
  }, {
    "id": 682,
    "text": "",
    "type": "n/a"
  }, {
    "id": 683,
    "text": "",
    "type": "global variable"
  }, {
    "id": 684,
    "text": "",
    "type": "n/a"
  }, {
    "id": 685,
    "text": "",
    "type": "global variable"
  }, {
    "id": 686,
    "text": "",
    "type": "n/a"
  }, {
    "id": 687,
    "text": "",
    "type": "global variable"
  }, {
    "id": 688,
    "text": "",
    "type": "n/a"
  }, {
    "id": 689,
    "text": "",
    "type": "global variable"
  }, {
    "id": 690,
    "text": "",
    "type": "n/a"
  }, {
    "id": 691,
    "text": "",
    "type": "global variable"
  }, {
    "id": 692,
    "text": "",
    "type": "n/a"
  }, {
    "id": 693,
    "text": "",
    "type": "global variable"
  }, {
    "id": 694,
    "text": "",
    "type": "n/a"
  }, {
    "id": 695,
    "text": "",
    "type": "global variable"
  }, {
    "id": 696,
    "text": "",
    "type": "n/a"
  }, {
    "id": 697,
    "text": "",
    "type": "global variable"
  }, {
    "id": 698,
    "text": "",
    "type": "n/a"
  }, {
    "id": 699,
    "text": "",
    "type": "global variable"
  }, {
    "id": 700,
    "text": "",
    "type": "n/a"
  }, {
    "id": 701,
    "text": "",
    "type": "global variable"
  }, {
    "id": 702,
    "text": "",
    "type": "n/a"
  }, {
    "id": 703,
    "text": "",
    "type": "global variable"
  }, {
    "id": 704,
    "text": "",
    "type": "n/a"
  }, {
    "id": 705,
    "text": "",
    "type": "global variable"
  }, {
    "id": 706,
    "text": "",
    "type": "n/a"
  }, {
    "id": 707,
    "text": "",
    "type": "global variable"
  }, {
    "id": 708,
    "text": "",
    "type": "n/a"
  }, {
    "id": 709,
    "text": "",
    "type": "global variable"
  }, {
    "id": 710,
    "text": "",
    "type": "n/a"
  }, {
    "id": 711,
    "text": "",
    "type": "global variable"
  }, {
    "id": 712,
    "text": "",
    "type": "n/a"
  }, {
    "id": 713,
    "text": "",
    "type": "global variable"
  }, {
    "id": 714,
    "text": "",
    "type": "n/a"
  }, {
    "id": 715,
    "text": "",
    "type": "global variable"
  }, {
    "id": 716,
    "text": "",
    "type": "n/a"
  }, {
    "id": 717,
    "text": "",
    "type": "global variable"
  }, {
    "id": 718,
    "text": "",
    "type": "n/a"
  }, {
    "id": 719,
    "text": "",
    "type": "global variable"
  }, {
    "id": 720,
    "text": "",
    "type": "n/a"
  }, {
    "id": 721,
    "text": "",
    "type": "global variable"
  }, {
    "id": 722,
    "text": "",
    "type": "n/a"
  }, {
    "id": 723,
    "text": "",
    "type": "global variable"
  }, {
    "id": 724,
    "text": "",
    "type": "n/a"
  }, {
    "id": 725,
    "text": "",
    "type": "global variable"
  }, {
    "id": 726,
    "text": "",
    "type": "n/a"
  }, {
    "id": 727,
    "text": "",
    "type": "global variable"
  }, {
    "id": 728,
    "text": "",
    "type": "n/a"
  }, {
    "id": 729,
    "text": "",
    "type": "global variable"
  }, {
    "id": 730,
    "text": "",
    "type": "n/a"
  }, {
    "id": 731,
    "text": "",
    "type": "global variable"
  }, {
    "id": 732,
    "text": "",
    "type": "n/a"
  }, {
    "id": 733,
    "text": "",
    "type": "global variable"
  }, {
    "id": 734,
    "text": "",
    "type": "n/a"
  }, {
    "id": 735,
    "text": "",
    "type": "global variable"
  }, {
    "id": 736,
    "text": "",
    "type": "n/a"
  }, {
    "id": 737,
    "text": "",
    "type": "global variable"
  }, {
    "id": 738,
    "text": "",
    "type": "n/a"
  }, {
    "id": 739,
    "text": "",
    "type": "global variable"
  }, {
    "id": 740,
    "text": "",
    "type": "n/a"
  }, {
    "id": 741,
    "text": "",
    "type": "global variable"
  }, {
    "id": 742,
    "text": "",
    "type": "n/a"
  }, {
    "id": 743,
    "text": "",
    "type": "global variable"
  }, {
    "id": 744,
    "text": "",
    "type": "n/a"
  }, {
    "id": 745,
    "text": "",
    "type": "global variable"
  }, {
    "id": 746,
    "text": "",
    "type": "n/a"
  }, {
    "id": 747,
    "text": "",
    "type": "global variable"
  }, {
    "id": 748,
    "text": "",
    "type": "n/a"
  }, {
    "id": 749,
    "text": "",
    "type": "global variable"
  }, {
    "id": 750,
    "text": "",
    "type": "n/a"
  }, {
    "id": 751,
    "text": "",
    "type": "global variable"
  }, {
    "id": 752,
    "text": "",
    "type": "n/a"
  }, {
    "id": 753,
    "text": "",
    "type": "global variable"
  }, {
    "id": 754,
    "text": "",
    "type": "n/a"
  }, {
    "id": 755,
    "text": "",
    "type": "global variable"
  }, {
    "id": 756,
    "text": "",
    "type": "n/a"
  }, {
    "id": 757,
    "text": "",
    "type": "global variable"
  }, {
    "id": 758,
    "text": "",
    "type": "n/a"
  }, {
    "id": 759,
    "text": "",
    "type": "global variable"
  }, {
    "id": 760,
    "text": "",
    "type": "n/a"
  }, {
    "id": 761,
    "text": "",
    "type": "global variable"
  }, {
    "id": 762,
    "text": "",
    "type": "n/a"
  }, {
    "id": 763,
    "text": "",
    "type": "global variable"
  }, {
    "id": 764,
    "text": "",
    "type": "n/a"
  }, {
    "id": 765,
    "text": "",
    "type": "global variable"
  }, {
    "id": 766,
    "text": "",
    "type": "n/a"
  }, {
    "id": 767,
    "text": "",
    "type": "global variable"
  }, {
    "id": 768,
    "text": "",
    "type": "n/a"
  }, {
    "id": 769,
    "text": "",
    "type": "global variable"
  }, {
    "id": 770,
    "text": "",
    "type": "n/a"
  }, {
    "id": 771,
    "text": "",
    "type": "global variable"
  }, {
    "id": 772,
    "text": "",
    "type": "n/a"
  }, {
    "id": 773,
    "text": "",
    "type": "global variable"
  }, {
    "id": 774,
    "text": "",
    "type": "n/a"
  }, {
    "id": 775,
    "text": "",
    "type": "global variable"
  }, {
    "id": 776,
    "text": "",
    "type": "n/a"
  }, {
    "id": 777,
    "text": "",
    "type": "global variable"
  }, {
    "id": 778,
    "text": "",
    "type": "n/a"
  }, {
    "id": 779,
    "text": "",
    "type": "global variable"
  }, {
    "id": 780,
    "text": "",
    "type": "n/a"
  }, {
    "id": 781,
    "text": "",
    "type": "global variable"
  }, {
    "id": 782,
    "text": "",
    "type": "n/a"
  }, {
    "id": 783,
    "text": "",
    "type": "global variable"
  }, {
    "id": 784,
    "text": "",
    "type": "n/a"
  }, {
    "id": 785,
    "text": "",
    "type": "global variable"
  }, {
    "id": 786,
    "text": "",
    "type": "n/a"
  }, {
    "id": 787,
    "text": "",
    "type": "global variable"
  }, {
    "id": 788,
    "text": "",
    "type": "n/a"
  }, {
    "id": 789,
    "text": "",
    "type": "global variable"
  }, {
    "id": 790,
    "text": "",
    "type": "n/a"
  }, {
    "id": 791,
    "text": "",
    "type": "global variable"
  }, {
    "id": 792,
    "text": "",
    "type": "n/a"
  }, {
    "id": 793,
    "text": "",
    "type": "global variable"
  }, {
    "id": 794,
    "text": "",
    "type": "n/a"
  }, {
    "id": 795,
    "text": "",
    "type": "global variable"
  }, {
    "id": 796,
    "text": "",
    "type": "n/a"
  }, {
    "id": 797,
    "text": "",
    "type": "global variable"
  }, {
    "id": 798,
    "text": "",
    "type": "n/a"
  }, {
    "id": 799,
    "text": "",
    "type": "global variable"
  }, {
    "id": 800,
    "text": "",
    "type": "n/a"
  }, {
    "id": 801,
    "text": "",
    "type": "global variable"
  }, {
    "id": 802,
    "text": "",
    "type": "n/a"
  }, {
    "id": 803,
    "text": "",
    "type": "global variable"
  }, {
    "id": 804,
    "text": "",
    "type": "n/a"
  }, {
    "id": 805,
    "text": "",
    "type": "global variable"
  }, {
    "id": 806,
    "text": "",
    "type": "n/a"
  }, {
    "id": 807,
    "text": "",
    "type": "global variable"
  }, {
    "id": 808,
    "text": "",
    "type": "n/a"
  }, {
    "id": 809,
    "text": "",
    "type": "global variable"
  }, {
    "id": 810,
    "text": "",
    "type": "n/a"
  }, {
    "id": 811,
    "text": "",
    "type": "global variable"
  }, {
    "id": 812,
    "text": "",
    "type": "n/a"
  }, {
    "id": 813,
    "text": "",
    "type": "global variable"
  }, {
    "id": 814,
    "text": "",
    "type": "n/a"
  }, {
    "id": 815,
    "text": "",
    "type": "global variable"
  }, {
    "id": 816,
    "text": "",
    "type": "n/a"
  }, {
    "id": 817,
    "text": "",
    "type": "global variable"
  }, {
    "id": 818,
    "text": "",
    "type": "n/a"
  }, {
    "id": 819,
    "text": "",
    "type": "global variable"
  }, {
    "id": 820,
    "text": "",
    "type": "n/a"
  }, {
    "id": 821,
    "text": "",
    "type": "global variable"
  }, {
    "id": 822,
    "text": "",
    "type": "n/a"
  }, {
    "id": 823,
    "text": "",
    "type": "global variable"
  }, {
    "id": 824,
    "text": "",
    "type": "n/a"
  }, {
    "id": 825,
    "text": "",
    "type": "global variable"
  }, {
    "id": 826,
    "text": "",
    "type": "n/a"
  }, {
    "id": 827,
    "text": "",
    "type": "global variable"
  }, {
    "id": 828,
    "text": "",
    "type": "n/a"
  }, {
    "id": 829,
    "text": "",
    "type": "global variable"
  }, {
    "id": 830,
    "text": "",
    "type": "n/a"
  }, {
    "id": 831,
    "text": "",
    "type": "global variable"
  }, {
    "id": 832,
    "text": "",
    "type": "n/a"
  }, {
    "id": 833,
    "text": "",
    "type": "global variable"
  }, {
    "id": 834,
    "text": "",
    "type": "n/a"
  }, {
    "id": 835,
    "text": "",
    "type": "global variable"
  }, {
    "id": 836,
    "text": "",
    "type": "n/a"
  }, {
    "id": 837,
    "text": "",
    "type": "global variable"
  }, {
    "id": 838,
    "text": "",
    "type": "n/a"
  }, {
    "id": 839,
    "text": "",
    "type": "global variable"
  }, {
    "id": 840,
    "text": "",
    "type": "n/a"
  }, {
    "id": 841,
    "text": "",
    "type": "global variable"
  }, {
    "id": 842,
    "text": "",
    "type": "n/a"
  }, {
    "id": 843,
    "text": "",
    "type": "global variable"
  }, {
    "id": 844,
    "text": "",
    "type": "n/a"
  }, {
    "id": 845,
    "text": "",
    "type": "global variable"
  }, {
    "id": 846,
    "text": "",
    "type": "n/a"
  }, {
    "id": 847,
    "text": "",
    "type": "global variable"
  }, {
    "id": 848,
    "text": "",
    "type": "n/a"
  }, {
    "id": 849,
    "text": "",
    "type": "global variable"
  }, {
    "id": 850,
    "text": "",
    "type": "n/a"
  }, {
    "id": 851,
    "text": "",
    "type": "global variable"
  }, {
    "id": 852,
    "text": "",
    "type": "n/a"
  }, {
    "id": 853,
    "text": "",
    "type": "global variable"
  }, {
    "id": 854,
    "text": "",
    "type": "n/a"
  }, {
    "id": 855,
    "text": "",
    "type": "global variable"
  }, {
    "id": 856,
    "text": "",
    "type": "n/a"
  }, {
    "id": 857,
    "text": "",
    "type": "global variable"
  }, {
    "id": 858,
    "text": "",
    "type": "n/a"
  }, {
    "id": 859,
    "text": "",
    "type": "global variable"
  }, {
    "id": 860,
    "text": "",
    "type": "n/a"
  }, {
    "id": 861,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 862,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 863,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 864,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 865,
    "text": "",
    "type": "require local variable"
  } ]
}