{
  "_filename": "utils.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadist-git/dist/utils.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 5,
    "label": "calls",
    "to": 27
  }, {
    "from": 10,
    "label": "calls",
    "to": 27
  }, {
    "from": 10,
    "label": "calls",
    "to": 27
  }, {
    "from": 11,
    "label": "calls",
    "to": 27
  }, {
    "from": 11,
    "label": "calls",
    "to": 27
  }, {
    "from": 12,
    "label": "calls",
    "to": 27
  }, {
    "from": 8,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 47
  }, {
    "from": 6,
    "label": "calls",
    "to": 39
  }, {
    "from": 7,
    "label": "calls",
    "to": 39
  }, {
    "from": 3,
    "label": "calls",
    "to": 82
  }, {
    "from": 13,
    "label": "calls",
    "to": 78
  }, {
    "from": 18,
    "label": "calls",
    "to": 27
  }, {
    "from": 14,
    "label": "calls",
    "to": 90
  }, {
    "from": 16,
    "label": "calls",
    "to": 53
  }, {
    "from": 17,
    "label": "calls",
    "to": 39
  }, {
    "from": 16,
    "label": "calls",
    "to": 78
  }, {
    "from": 15,
    "label": "calls",
    "to": 82
  }, {
    "from": 24,
    "label": "calls",
    "to": 88
  }, {
    "from": 20,
    "label": "calls",
    "to": 86
  }, {
    "from": 21,
    "label": "calls",
    "to": 86
  }, {
    "from": 22,
    "label": "calls",
    "to": 86
  }, {
    "from": 23,
    "label": "calls",
    "to": 82
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 30
  }, {
    "from": 37,
    "label": "has",
    "to": 31
  }, {
    "from": 37,
    "label": "has",
    "to": 31
  }, {
    "from": 37,
    "label": "has",
    "to": 32
  }, {
    "from": 37,
    "label": "has",
    "to": 33
  }, {
    "from": 37,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 37,
    "label": "has",
    "to": 31
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 39,
    "label": "has",
    "to": 31
  }, {
    "from": 39,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 31
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 31
  }, {
    "from": 53,
    "label": "has",
    "to": 31
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 58,
    "label": "has",
    "to": 31
  }, {
    "from": 58,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 68,
    "label": "has",
    "to": 31
  }, {
    "from": 68,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 31
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 31
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 31
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 31
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 31
  }, {
    "from": 90,
    "label": "has",
    "to": 31
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 31
  }, {
    "from": 96,
    "label": "has",
    "to": 31
  }, {
    "from": 96,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 99
  }, {
    "from": 39,
    "label": "calls",
    "to": 121
  }, {
    "from": 39,
    "label": "calls",
    "to": 112
  }, {
    "from": 39,
    "label": "calls",
    "to": 112
  }, {
    "from": 47,
    "label": "calls",
    "to": 112
  }, {
    "from": 47,
    "label": "calls",
    "to": 112
  }, {
    "from": 53,
    "label": "calls",
    "to": 112
  }, {
    "from": 58,
    "label": "calls",
    "to": 112
  }, {
    "from": 68,
    "label": "calls",
    "to": 112
  }, {
    "from": 68,
    "label": "calls",
    "to": 112
  }, {
    "from": 78,
    "label": "calls",
    "to": 112
  }, {
    "from": 78,
    "label": "calls",
    "to": 112
  }, {
    "from": 82,
    "label": "calls",
    "to": 112
  }, {
    "from": 90,
    "label": "calls",
    "to": 112
  }, {
    "from": 90,
    "label": "calls",
    "to": 112
  }, {
    "from": 37,
    "label": "calls",
    "to": 116
  }, {
    "from": 39,
    "label": "calls",
    "to": 116
  }, {
    "from": 53,
    "label": "calls",
    "to": 116
  }, {
    "from": 58,
    "label": "calls",
    "to": 116
  }, {
    "from": 96,
    "label": "calls",
    "to": 116
  }, {
    "from": 88,
    "label": "calls",
    "to": 117
  }, {
    "from": 90,
    "label": "calls",
    "to": 19
  }, {
    "from": 47,
    "label": "calls",
    "to": 118
  }, {
    "from": 107,
    "label": "calls",
    "to": 119
  }, {
    "from": 78,
    "label": "calls",
    "to": 25
  }, {
    "from": 58,
    "label": "calls",
    "to": 58
  }, {
    "from": 37,
    "label": "calls",
    "to": 124
  }, {
    "from": 37,
    "label": "calls",
    "to": 37
  }, {
    "from": 37,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 90,
    "label": "calls",
    "to": 115
  }, {
    "from": 37,
    "label": "calls",
    "to": 125
  }, {
    "from": 39,
    "label": "calls",
    "to": 125
  }, {
    "from": 39,
    "label": "calls",
    "to": 125
  }, {
    "from": 47,
    "label": "calls",
    "to": 125
  }, {
    "from": 47,
    "label": "calls",
    "to": 125
  }, {
    "from": 53,
    "label": "calls",
    "to": 125
  }, {
    "from": 58,
    "label": "calls",
    "to": 125
  }, {
    "from": 58,
    "label": "calls",
    "to": 125
  }, {
    "from": 68,
    "label": "calls",
    "to": 125
  }, {
    "from": 68,
    "label": "calls",
    "to": 125
  }, {
    "from": 78,
    "label": "calls",
    "to": 125
  }, {
    "from": 78,
    "label": "calls",
    "to": 125
  }, {
    "from": 82,
    "label": "calls",
    "to": 125
  }, {
    "from": 90,
    "label": "calls",
    "to": 125
  }, {
    "from": 90,
    "label": "calls",
    "to": 125
  }, {
    "from": 107,
    "label": "calls",
    "to": 126
  }, {
    "from": 39,
    "label": "calls",
    "to": 27
  }, {
    "from": 47,
    "label": "calls",
    "to": 27
  }, {
    "from": 78,
    "label": "calls",
    "to": 26
  }, {
    "from": 107,
    "label": "calls",
    "to": 123
  }, {
    "from": 39,
    "label": "calls",
    "to": 122
  }, {
    "from": 68,
    "label": "calls",
    "to": 122
  }, {
    "from": 68,
    "label": "calls",
    "to": 122
  }, {
    "from": 96,
    "label": "calls",
    "to": 122
  }, {
    "from": 96,
    "label": "calls",
    "to": 21
  }, {
    "from": 37,
    "label": "calls",
    "to": 120
  }, {
    "from": 107,
    "label": "calls",
    "to": 114
  }, {
    "from": 58,
    "label": "calls",
    "to": 113
  }, {
    "from": 58,
    "label": "calls",
    "to": 113
  }, {
    "from": 58,
    "label": "calls",
    "to": 113
  }, {
    "from": 2,
    "label": "contains",
    "to": 107
  }, {
    "from": 107,
    "label": "declares",
    "to": 27
  }, {
    "from": 107,
    "label": "declares",
    "to": 37
  }, {
    "from": 107,
    "label": "declares",
    "to": 39
  }, {
    "from": 107,
    "label": "declares",
    "to": 47
  }, {
    "from": 107,
    "label": "declares",
    "to": 53
  }, {
    "from": 107,
    "label": "declares",
    "to": 58
  }, {
    "from": 107,
    "label": "declares",
    "to": 68
  }, {
    "from": 107,
    "label": "declares",
    "to": 78
  }, {
    "from": 107,
    "label": "declares",
    "to": 82
  }, {
    "from": 107,
    "label": "declares",
    "to": 86
  }, {
    "from": 107,
    "label": "declares",
    "to": 88
  }, {
    "from": 107,
    "label": "declares",
    "to": 90
  }, {
    "from": 107,
    "label": "declares",
    "to": 96
  }, {
    "from": 107,
    "label": "declares",
    "to": 106
  }, {
    "from": 109,
    "label": "calls",
    "to": 58
  }, {
    "from": 109,
    "label": "calls",
    "to": 58
  }, {
    "from": 109,
    "label": "calls",
    "to": 58
  }, {
    "from": 108,
    "label": "calls",
    "to": 68
  }, {
    "from": 109,
    "label": "calls",
    "to": 90
  }, {
    "from": 110,
    "label": "calls",
    "to": 58
  }, {
    "from": 111,
    "label": "calls",
    "to": 88
  }, {
    "from": 127,
    "label": "requires",
    "to": 2
  }, {
    "from": 128,
    "label": "requires",
    "to": 2
  }, {
    "from": 129,
    "label": "requires",
    "to": 2
  }, {
    "from": 130,
    "label": "requires",
    "to": 2
  }, {
    "from": 131,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 132
  }, {
    "from": 2,
    "label": "contains",
    "to": 133
  }, {
    "from": 133,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  }, {
    "from": 135,
    "label": "requires",
    "to": 2
  }, {
    "from": 136,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sys",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "function find_packages(package_names, manifest)\r\n    if type(package_names) == \"string\" then package_names = {package_names} end\r\n    manifest = manifest or mf.get_manifest()\r\n    assert(type(package_names) == \"table\", \"depends.find_packages: Argument 'package_names' is not a table or string.\")\r\n    assert(type(manifest) == \"table\", \"depends.find_packages: Argument 'manifest' is not a table.\")\r\n\r\n    local packages_found = {}\r\n    -- find matching packages in manifest\r\n    for _, pkg_to_find in pairs(package_names) do\r\n        local pkg_name, pkg_constraint = split_name_constraint(pkg_to_find)\r\n        pkg_name = utils.escape_magic(pkg_name):gsub(\"%%%*\",\".*\")\r\n        for _, repo_pkg in pairs(manifest) do\r\n            if string.match(repo_pkg.name, \"^\" .. pkg_name .. \"$\") and (not pkg_constraint or satisfies_constraint(repo_pkg.version, pkg_constraint)) then\r\n                table.insert(packages_found, repo_pkg)\r\n            end\r\n        end\r\n    end\r\n    return packages_found\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function get_packages_to_install(pkg, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    dependency_parents = dependency_parents or {}\r\n\r\n    -- set helper table 'tmp_installed'\r\n    tmp_installed = tmp_installed or utils.deepcopy(installed)\r\n\r\n    assert(type(pkg) == \"string\", \"depends.get_packages_to_install: Argument 'pkg' is not a string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_packages_to_install: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_packages_to_install: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_packages_to_install: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_packages_to_install: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_packages_to_install: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(dependency_parents) == \"table\", \"depends.get_packages_to_install: Argument 'dependency_parents' is not a table.\")\r\n    assert(type(tmp_installed) == \"table\", \"depends.get_packages_to_install: Argument 'tmp_installed' is not a table.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    --[[ for future debugging:\r\n    print('resolving: '.. pkg)\r\n    print('    installed: ', utils.table_tostring(installed))\r\n    print('    tmp_installed: ', utils.table_tostring(tmp_installed))\r\n    --]]\r\n\r\n    -- check if package is already installed\r\n    local pkg_name, pkg_constraint = split_name_constraint(pkg)\r\n    local pkg_is_installed, err = is_installed(pkg_name, tmp_installed, pkg_constraint)\r\n    if pkg_is_installed then return {} end\r\n    if err then return nil, err end\r\n\r\n    -- table of packages needed to be installed (will be returned)\r\n    local to_install = {}\r\n\r\n    -- find out available versions of 'pkg'\r\n    if not force_no_download then\r\n        local versions, err = package.retrieve_versions(pkg, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n    end\r\n\r\n    -- find candidates & sort them\r\n    local candidates_to_install = find_packages(pkg, manifest)\r\n    if #candidates_to_install == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\"\r\n    end\r\n    candidates_to_install = sort_by_versions(candidates_to_install)\r\n\r\n    for _, pkg in pairs(candidates_to_install) do\r\n\r\n        --for future debugging:\r\n        -- print('  candidate: '.. pkg.name..'-'..pkg.version)\r\n        -- print('      installed: ', utils.table_tostring(installed))\r\n        -- print('      tmp_installed: ', utils.table_tostring(tmp_installed))\r\n        -- print('      to_install: ', utils.table_tostring(to_install))\r\n        -- print('  -is installed: ', is_installed(pkg.name, tmp_installed, pkg_constraint))\r\n        \r\n\r\n        -- if there's an error from previous candidate, print the reason for trying another one\r\n        if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end\r\n\r\n        -- clear the state from previous candidate\r\n        pkg_is_installed, err = false, nil\r\n\r\n        -- check whether this package has already been added to 'tmp_installed' by another of its candidates\r\n        pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)\r\n        if pkg_is_installed then break end\r\n\r\n        local was_scm_version = false\r\n        if pkg.version == \"scm\" then was_scm_version = true end\r\n\r\n        -- download info about the package\r\n        if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path to downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end\r\n\r\n        -- check arch & type\r\n        if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end\r\n\r\n        -- checks for conflicts with other installed (or previously selected) packages\r\n        if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end\r\n\r\n        -- if pkg passed all of the above tests\r\n        if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end\r\n    end\r\n\r\n    -- if package is not installed and no suitable candidates were found, return the last error\r\n    if #to_install == 0 and not pkg_is_installed then\r\n        return nil, err\r\n    else\r\n        return to_install\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function get_depends(packages, installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n    if not packages then return {} end\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(packages) == \"string\" then packages = {packages} end\r\n\r\n    assert(type(packages) == \"table\", \"depends.get_depends: Argument 'packages' is not a table or string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_depends: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_depends: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_depends: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_depends: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_depends: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local tmp_installed = utils.deepcopy(installed)\r\n\r\n    -- print(utils.table_tostring(tmp_installed))\r\n\r\n    -- add provided packages to installed ones\r\n    for _, installed_pkg in pairs(tmp_installed) do\r\n        for _, pkg in pairs(get_provides(installed_pkg)) do\r\n            table.insert(tmp_installed, pkg)\r\n        end\r\n    end\r\n\r\n    -- print(utils.table_tostring(tmp_installed))\r\n\r\n    local to_install = {}\r\n\r\n    -- get packages needed to to satisfy dependencies\r\n    for _, pkg in pairs(packages) do\r\n\r\n        local needed_to_install, err = get_packages_to_install(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n        --print(utils.table_tostring(needed_to_install))\r\n        if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot install package '\" .. pkg .. \"': \".. err\r\n        end\r\n    end\r\n    \r\n    return to_install\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function filter_packages_by_arch_and_type(packages, req_arch, req_type)\r\n    assert(type(packages) == \"table\", \"depends.filter_packages_by_arch_and_type: Argument 'packages' is not a table.\")\r\n    assert(type(req_arch) == \"string\", \"depends.filter_packages_by_arch_and_type: Argument 'req_arch' is not a string.\")\r\n    assert(type(req_type) == \"string\", \"depends.filter_packages_by_arch_and_type: Argument 'pkg_type' is not a string.\")\r\n\r\n    return utils.filter(packages,\r\n                        function (pkg)\r\n                                return (pkg.arch == \"Universal\" or pkg.arch == req_arch) and\r\n                                        (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == req_type)\r\n                                end)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function filter_packages_by_strings(packages, strings, search_in_desc)\r\n    if type(strings) == \"string\" then strings = {strings} end\r\n    assert(type(packages) == \"table\", \"depends.filter_packages_by_strings: Argument 'packages' is not a table.\")\r\n    assert(type(strings) == \"table\", \"depends.filter_packages_by_strings: Argument 'strings' is not a string or table.\")\r\n\r\n    if #strings ~= 0 then\r\n        return utils.filter(packages,\r\n                            function (pkg)\r\n                                    for _,str in pairs(strings) do\r\n                                        local name = pkg.name .. \"-\" .. pkg.version\r\n                                        if search_in_desc then\r\n                                            name = name .. \" \" .. (pkg.desc or \"\")\r\n                                        end\r\n                                        if string.find(string.lower(name), string.lower(str), 1 ,true) ~= nil then return true end\r\n                                    end\r\n                                end)\r\n    else\r\n        return packages\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function sort_by_versions(packages)\r\n    assert(type(packages) == \"table\", \"depends.sort_by_versions: Argument 'packages' is not a table.\")\r\n    return utils.sort(packages, function (a, b) return compare_versions(a.version, b.version) end)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function sort_by_names(packages)\r\n    assert(type(packages) == \"table\", \"depends.sort_by_names: Argument 'packages' is not a table.\")\r\n    return utils.sort(packages, function (a, b)\r\n                        if a.name == b.name then\r\n                            return compare_versions(a.version, b.version)\r\n                        else\r\n                            return a.name < b.name\r\n                        end\r\n                     end)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function dependency_manifest(module, dep_manifest, dep_cache)\r\n    dep_manifest = dep_manifest or {}\r\n    dep_cache = dep_cache or {}\r\n    assert(type(module) == \"string\", \"depends.dependency_manifest: Argument 'module' is not a string.\")\r\n    assert(type(dep_cache) == \"table\", \"depends.dependency_manifest: Argument 'dep_cache' is not a table.\")\r\n    assert(type(dep_manifest) == \"table\", \"depends.dependency_manifest: Argument 'dep_manifest' is not a table.\")\r\n\r\n    local dep_manifest = utils.deepcopy(dep_manifest)\r\n    local dep_cache = utils.deepcopy(dep_cache)\r\n    local name, constraint = split_name_constraint(module)\r\n    local name_ver = name .. (constraint and \"-\" .. constraint or \"\")\r\n\r\n    -- if info about the module is in cache and cache not disabled, use it\r\n    if constraint and dep_cache[name_ver] and cfg.dep_cache then\r\n        dep_manifest[name_ver] = dep_cache[name_ver]\r\n    else\r\n        local manifest, err = mf.get_manifest()\r\n        if not manifest then return nil, \"Error when getting manifest: \" .. err end\r\n\r\n        -- find out available versions of package\r\n        local versions, err = package.retrieve_versions(name, manifest, not cfg.debug)\r\n        if not versions then return nil, err end\r\n\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n\r\n        -- find the module's package\r\n        local candidates = find_packages(name_ver, manifest)\r\n        if #candidates == 0 then return nil, \"Package '\" .. name_ver .. \"' not found.\" end\r\n\r\n        candidates = sort_by_versions(candidates)\r\n        name_ver = candidates[1].name .. \"-\" .. candidates[1].version\r\n\r\n        -- if info about the module isn't in cache or cache disabled, download it\r\n        if dep_cache[name_ver] and cfg.dep_cache then\r\n             dep_manifest[name_ver] = dep_cache[name_ver]\r\n        else\r\n            -- download the dependency info\r\n            local download_dir = sys.abs_path(sys.make_path(cfg.root_dir, cfg.temp_dir))\r\n            local downloaded_path, err = package.fetch_pkgs({candidates[1]}, download_dir, not cfg.debug)\r\n            if not downloaded_path then return nil, err end\r\n\r\n            local distinfo = sys.make_path(downloaded_path[1], \"dist.info\")\r\n            local dist_info, err = mf.load_distinfo(distinfo)\r\n            if not dist_info then return nil, \"Error when loading dist.info file '\" .. distinfo .. \"': \" .. err end\r\n\r\n            -- add information about this package to the cache\r\n            if not dep_manifest[name_ver] then dep_manifest[name_ver] = {} end\r\n            dep_manifest[name_ver].name = dist_info.name\r\n            dep_manifest[name_ver].version = dist_info.version\r\n            dep_manifest[name_ver].path = candidates[1].path\r\n            dep_manifest[name_ver].depends = dist_info.depends\r\n\r\n            -- add also to cache\r\n            dep_cache[name_ver] = dep_manifest[name_ver]\r\n        end\r\n    end\r\n\r\n    -- resolve dependencies\r\n    if dep_manifest[name_ver].depends then\r\n\r\n        if not dep_manifest[name_ver].satisfied_by then\r\n            dep_manifest[name_ver].satisfied_by = {}\r\n        end\r\n\r\n        -- collect all OS specific dependencies of pkg\r\n        for k, dep in pairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) == \"table\" then\r\n                if k == cfg.arch then\r\n                    for _, os_specific_depend in pairs(dep) do\r\n                        table.insert(dep_manifest[name_ver].depends, os_specific_depend)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- get dependency information of this module's dependencies\r\n        for _, dep in ipairs(dep_manifest[name_ver].depends) do\r\n            if type(dep) ~= \"table\" then\r\n                local satisfying = dep_manifest[name_ver].satisfied_by[dep]\r\n                if satisfying then dep = satisfying end\r\n\r\n                dep_manifest, dep_cache_or_err, satisfying = dependency_manifest(dep, dep_manifest, dep_cache)\r\n                if not dep_manifest then return nil, dep_cache_or_err end\r\n                dep_cache = dep_cache_or_err\r\n\r\n                -- add 'satisfied-by' info\r\n                dep_manifest[name_ver].satisfied_by[dep] = satisfying\r\n                dep_cache[name_ver].satisfied_by[dep] = satisfying\r\n            end\r\n        end\r\n    end\r\n\r\n    return dep_manifest, dep_cache, name_ver\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function get_packages_to_install_1(pkg, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    dependency_parents = dependency_parents or {}\r\n\r\n    -- set helper table 'tmp_installed'\r\n    tmp_installed = tmp_installed or utils.deepcopy(installed)\r\n\r\n    assert(type(pkg) == \"string\", \"depends.get_packages_to_install: Argument 'pkg' is not a string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_packages_to_install: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_packages_to_install: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_packages_to_install: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_packages_to_install: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_packages_to_install: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(dependency_parents) == \"table\", \"depends.get_packages_to_install: Argument 'dependency_parents' is not a table.\")\r\n    assert(type(tmp_installed) == \"table\", \"depends.get_packages_to_install: Argument 'tmp_installed' is not a table.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    --[[ for future debugging:\r\n    print('resolving: '.. pkg)\r\n    print('    installed: ', utils.table_tostring(installed))\r\n    print('    tmp_installed: ', utils.table_tostring(tmp_installed))\r\n    --]]\r\n\r\n    -- check if package is already installed\r\n    local pkg_name, pkg_constraint = split_name_constraint(pkg)\r\n    local pkg_is_installed, err = is_installed(pkg_name, tmp_installed, pkg_constraint)\r\n    if not pkg_is_installed then return {} end\r\n    if err then return nil, err end\r\n\r\n    local pkg_to_update = find_packages(pkg, installed)\r\n\r\n    -- table of packages needed to be installed (will be returned)\r\n    local to_install = {}\r\n\r\n    -- find out available versions of 'pkg'\r\n    if not force_no_download then\r\n        local versions, err = package.retrieve_versions(pkg, manifest)\r\n        if not versions then return nil, err end\r\n        for _, version in pairs(versions) do\r\n            table.insert(manifest, version)\r\n        end\r\n    end\r\n    --print(utils.table_tostring(manifest))\r\n\r\n    -- find candidates & sort them\r\n    local candidate_to_update = find_packages(pkg, manifest)\r\n    if #candidate_to_update == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\"\r\n    end\r\n    \r\n    candidate_to_update = newest_version(pkg_to_update[1], sort_by_versions(candidate_to_update))\r\n\r\n    for _, pkg in pairs(candidate_to_update) do\r\n\r\n        --for future debugging:\r\n        --print('  candidate: '.. pkg.name..'-'..pkg.version)\r\n        --print('      installed: ', utils.table_tostring(installed))\r\n        --print('      tmp_installed: ', utils.table_tostring(tmp_installed))\r\n        --print('      to_install: ', utils.table_tostring(to_install))\r\n        --print('  -is installed: ', is_installed(pkg.name, tmp_installed, pkg_constraint))\r\n        \r\n\r\n        -- if there's an error from previous candidate, print the reason for trying another one\r\n        if not suppress_printing and err then print(\" - trying another candidate due to: \" .. err) end\r\n\r\n        -- clear the state from previous candidate\r\n        pkg_is_installed, err = false, nil\r\n\r\n        -- check whether this package has already been added to 'tmp_installed' by another of its candidates\r\n        --pkg_is_installed, err = is_installed(pkg.name, tmp_installed, pkg_constraint)\r\n        --if pkg_is_installed then break end\r\n\r\n        local was_scm_version = false\r\n        if pkg.version == \"scm\" then was_scm_version = true end\r\n\r\n        -- download info about the package\r\n        if not force_no_download then\r\n            local path_or_err\r\n            pkg, path_or_err = package.retrieve_pkg_info(pkg, deploy_dir)\r\n            if not pkg then\r\n                err = \"Error when resolving dependencies: \" .. path_or_err\r\n            else\r\n                -- set path ot downloaded package - used to delete unused but downloaded\r\n                -- packages and also to install packages selected to install\r\n                pkg.download_dir = path_or_err\r\n            end\r\n        end\r\n\r\n        -- check arch & type\r\n        if not err then\r\n            if not (pkg.arch == \"Universal\" or pkg.arch == cfg.arch) or\r\n               not (pkg.type == \"all\" or pkg.type == \"source\" or pkg.type == cfg.type) then\r\n                err = \"Package '\" .. pkg_full_name(pkg.name, pkg.version) .. \"' doesn't have required arch and type.\"\r\n            end\r\n        end\r\n\r\n        -- checks for conflicts with other installed (or previously selected) packages\r\n        if not err then\r\n            for _, installed_pkg in pairs(tmp_installed) do\r\n                err = packages_conflicts(pkg, installed_pkg, was_scm_version)\r\n                if err then break end\r\n            end\r\n        end\r\n\r\n        -- if pkg passed all of the above tests\r\n        if not err then\r\n\r\n            -- check if pkg's dependencies are satisfied\r\n            if pkg.depends then\r\n\r\n                -- insert pkg into the stack of circular dependencies detection\r\n                table.insert(dependency_parents, pkg.name)\r\n\r\n                -- collect all OS specific dependencies of pkg\r\n                for k, depend in pairs(pkg.depends) do\r\n\r\n                    -- if 'depend' is a table of OS specific dependencies for\r\n                    -- this arch, add them to the normal dependencies of pkg\r\n                    if type(depend) == \"table\" then\r\n                        if k == cfg.arch then\r\n                            for _, os_specific_depend in pairs(depend) do\r\n                                table.insert(pkg.depends, os_specific_depend)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n\r\n                -- for all dependencies of pkg\r\n                for _, depend in pairs(pkg.depends) do\r\n\r\n                    -- skip tables of OS specific dependencies\r\n                    if type(depend) ~= \"table\" then\r\n                        local dep_name = split_name_constraint(depend)\r\n\r\n                        -- detect circular dependencies using 'dependency_parents'\r\n                        local is_circular_dependency = false\r\n                        for _, parent in pairs(dependency_parents) do\r\n                            if dep_name == parent then\r\n                                is_circular_dependency = true\r\n                                break\r\n                            end\r\n                        end\r\n\r\n                        -- if circular dependencies not detected\r\n                        if not is_circular_dependency then\r\n\r\n                            -- recursively call this function on the candidates of this pkg's dependency\r\n                            local depends_to_install, dep_err = get_packages_to_install(depend, installed, manifest, force_no_download, suppress_printing, deploy_dir, dependency_parents, tmp_installed)\r\n\r\n                            -- if any suitable dependency packages were found, insert them to the 'to_install' table\r\n                            if depends_to_install then\r\n                                for _, depend_to_install in pairs(depends_to_install) do\r\n                                    table.insert(to_install, depend_to_install)\r\n                                    table.insert(tmp_installed, depend_to_install)\r\n                                    table.insert(installed, depend_to_install)\r\n                                end\r\n                            else\r\n                                err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': \" .. dep_err\r\n                                break\r\n                            end\r\n\r\n                        -- if circular dependencies detected\r\n                        else\r\n                            err = \"Error getting dependency of '\" .. pkg_full_name(pkg.name, pkg.version) .. \"': '\" .. dep_name .. \"' is a circular dependency.\"\r\n                            break\r\n                        end\r\n\r\n                    end\r\n                end\r\n\r\n                -- remove last package from the stack of circular dependencies detection\r\n                table.remove(dependency_parents)\r\n            end\r\n\r\n            -- if no error occured\r\n            if not err then\r\n                -- add pkg and it's provides to the fake table of installed packages, with\r\n                -- property 'selected' set, indicating that the package isn't\r\n                -- really installed in the system, just selected to be installed (this is used e.g. in error messages)\r\n                pkg.selected = true\r\n                table.insert(tmp_installed, pkg)\r\n                if pkg.provides then\r\n                    for _, provided_pkg in pairs(get_provides(pkg)) do\r\n                        provided_pkg.selected = true\r\n                        table.insert(tmp_installed, provided_pkg)\r\n                    end\r\n                end\r\n                -- add pkg to the table of packages to install\r\n                table.insert(to_install, pkg)\r\n                break\r\n\r\n            -- if some error occured\r\n            else\r\n                -- delete the downloaded package\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n                -- set tables of 'packages to install' and 'installed packages' to their original state\r\n                to_install = {}\r\n                tmp_installed = utils.deepcopy(installed)\r\n\r\n                -- add provided packages to installed ones\r\n                for _, installed_pkg in pairs(tmp_installed) do\r\n                    for _, pkg in pairs(get_provides(installed_pkg)) do\r\n                        table.insert(tmp_installed, pkg)\r\n                    end\r\n                end\r\n            end\r\n\r\n        -- if error occured\r\n        else\r\n            -- delete the downloaded package\r\n            if pkg and pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n\r\n            -- if pkg is already installed, skip checking its other candidates\r\n            if pkg_is_installed then break end\r\n        end\r\n    end\r\n\r\n    -- if package is not installed and no suitable candidates were found, return the last error\r\n    if #to_install == 0 and not pkg_is_installed then\r\n        return nil, err\r\n    else\r\n        return to_install\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function get_depends_1(packages, installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n    if not packages then return {} end\r\n    manifest = manifest or mf.get_manifest()\r\n    force_no_download = force_no_download or false\r\n    suppress_printing = suppress_printing or false\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    if type(packages) == \"string\" then packages = {packages} end\r\n\r\n    assert(type(packages) == \"table\", \"depends.get_depends: Argument 'packages' is not a table or string.\")\r\n    assert(type(installed) == \"table\", \"depends.get_depends: Argument 'installed' is not a table.\")\r\n    assert(type(manifest) == \"table\", \"depends.get_depends: Argument 'manifest' is not a table.\")\r\n    assert(type(force_no_download) == \"boolean\", \"depends.get_depends: Argument 'force_no_download' is not a boolean.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"depends.get_depends: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(deploy_dir) == \"string\", \"depends.get_depends: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    local tmp_installed = utils.deepcopy(installed)\r\n\r\n\r\n    -- add provided packages to installed ones\r\n    for _, installed_pkg in pairs(tmp_installed) do\r\n        for _, pkg in pairs(get_provides(installed_pkg)) do\r\n            table.insert(tmp_installed, pkg)\r\n        end\r\n    end\r\n\r\n    local to_install = {}\r\n\r\n    -- get packages needed to to satisfy dependencies\r\n    for _, pkg in pairs(packages) do\r\n\r\n        local needed_to_install, err = get_packages_to_install_1(pkg, tmp_installed, manifest, force_no_download, suppress_printing, deploy_dir)\r\n        if needed_to_install then\r\n            for _, needed_pkg in pairs(needed_to_install) do\r\n                table.insert(to_install, needed_pkg)\r\n                table.insert(tmp_installed, needed_pkg)\r\n                -- add provides of needed_pkg to installed ones\r\n                for _, provided_pkg in pairs(get_provides(needed_pkg)) do\r\n                    -- copy 'selected' property\r\n                    provided_pkg.selected = needed_pkg.selected\r\n                    table.insert(tmp_installed, provided_pkg)\r\n                end\r\n            end\r\n        else\r\n            -- delete already downloaded packages\r\n            for _, pkg in pairs(to_install) do\r\n                if pkg.download_dir and not cfg.debug then sys.delete(pkg.download_dir) end\r\n            end\r\n            return nil, \"Cannot update package '\" .. pkg .. \"': \".. err\r\n        end\r\n    end\r\n    \r\n    return to_install\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function get_manifest(manifest_file, force_no_cache)\r\n    manifest_file = manifest_file or sys.make_path(cfg.root_dir, cfg.manifest_file)\r\n    force_no_cache = force_no_cache or false\r\n\r\n    assert(type(manifest_file) == \"string\", \"manifest.get_manifest: Argument 'manifest_file' is not a string.\")\r\n    assert(type(force_no_cache) == \"boolean\", \"manifest.get_manifest: Argument 'force_no_cache' is not a boolean.\")\r\n    manifest_file = sys.abs_path(manifest_file)\r\n\r\n    -- download new manifest to the cache if not present or cache not used or cache expired\r\n    if not sys.exists(manifest_file) or force_no_cache or not cfg.cache or utils.cache_timeout_expired(cfg.cache_timeout, manifest_file) then\r\n        local manifest_dest = sys.parent_dir(manifest_file) or sys.current_dir()\r\n        local ok, err = download_manifest(manifest_dest, cfg.repos)\r\n        if not ok then return nil, \"Error when downloading manifest: \" .. err end\r\n    end\r\n\r\n    -- load manifest from cache\r\n    local status, ret = load_manifest(manifest_file)\r\n    if not status then return nil, \"Error when loading manifest: \" .. ret end\r\n\r\n    return ret\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function install_pkg(pkg_dir, deploy_dir, variables, preserve_pkg_dir)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    variables = variables or {}\r\n    preserve_pkg_dir = preserve_pkg_dir or false\r\n\r\n    assert(type(pkg_dir) == \"string\", \"package.install_pkg: Argument 'pkg_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.install_pkg: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(variables) == \"table\", \"package.install_pkg: Argument 'variables' is not a table.\")\r\n    assert(type(preserve_pkg_dir) == \"boolean\", \"package.install_pkg: Argument 'preserve_pkg_dir' is not a boolean.\")\r\n\r\n    pkg_dir = sys.abs_path(pkg_dir)\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- check for dist.info\r\n    local info, err = mf.load_distinfo(sys.make_path(pkg_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error installing: the directory '\" .. pkg_dir .. \"' doesn't exist or doesn't contain valid 'dist.info' file.\", 501 end\r\n\r\n    -- check if the package is source\r\n    if sys.exists(sys.make_path(pkg_dir, \"CMakeLists.txt\")) then\r\n        info.arch = info.arch or \"Universal\"\r\n        info.type = info.type or \"source\"\r\n    end\r\n\r\n    -- check package's architecture\r\n    if not (info.arch == \"Universal\" or info.arch == cfg.arch) then\r\n        return nil, \"Error installing '\" .. info.name .. \"-\" .. info.version .. \"': architecture '\" .. info.arch .. \"' is not suitable for this machine.\", 502\r\n    end\r\n\r\n    -- check package's type\r\n    if not (info.type == \"all\" or info.type == \"source\" or info.type == cfg.type) then\r\n        return nil, \"Error installing '\" .. info.name .. \"-\" .. info.version .. \"': architecture type '\" .. info.type .. \"' is not suitable for this machine.\", 502\r\n    end\r\n\r\n    local ok, err\r\n\r\n    -- if package is of binary type, just deploy it\r\n    if info.type ~= \"source\" then\r\n        ok, err = deploy_binary_pkg(pkg_dir, deploy_dir)\r\n\r\n    -- else build and then deploy\r\n    else\r\n\r\n        -- check if we have cmake\r\n        ok = utils.system_dependency_available(\"cmake\", \"cmake --version\")\r\n        if not ok then return nil, \"Error when installing: Command 'cmake' not available on the system.\", 503 end\r\n\r\n        -- set cmake variables\r\n        local cmake_variables = {}\r\n\r\n        -- set variables from config file\r\n        for k, v in pairs(cfg.variables) do\r\n            cmake_variables[k] = v\r\n        end\r\n\r\n        -- set variables specified as argument\r\n        for k, v in pairs(variables) do\r\n            cmake_variables[k] = v\r\n        end\r\n\r\n        cmake_variables.CMAKE_INCLUDE_PATH = table.concat({cmake_variables.CMAKE_INCLUDE_PATH or \"\", sys.make_path(deploy_dir, \"include\")}, \";\")\r\n        cmake_variables.CMAKE_LIBRARY_PATH = table.concat({cmake_variables.CMAKE_LIBRARY_PATH or \"\", sys.make_path(deploy_dir, \"lib\"), sys.make_path(deploy_dir, \"bin\")}, \";\")\r\n        cmake_variables.CMAKE_PROGRAM_PATH = table.concat({cmake_variables.CMAKE_PROGRAM_PATH or \"\", sys.make_path(deploy_dir, \"bin\")}, \";\")\r\n\r\n        -- build the package and deploy it\r\n        ok, err,status = build_pkg(pkg_dir, deploy_dir, cmake_variables)\r\n        if not ok then return nil, err, status end\r\n\r\n    end\r\n\r\n    -- delete directory of fetched package\r\n    if not (cfg.debug or preserve_pkg_dir) then sys.delete(pkg_dir) end\r\n\r\n    return ok, err, status\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function build_pkg(src_dir, deploy_dir, variables)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    variables = variables or {}\r\n\r\n    assert(type(src_dir) == \"string\", \"package.build_pkg: Argument 'src_dir' is not a string.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.build_pkg: Argument 'deploy_dir' is not a string.\")\r\n    assert(type(variables) == \"table\", \"package.build_pkg: Argument 'variables' is not a table.\")\r\n\r\n    src_dir = sys.abs_path(src_dir)\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- check for dist.info\r\n    local info, err = mf.load_distinfo(sys.make_path(src_dir, \"dist.info\"))\r\n    if not info then return nil, \"Error building package from '\" .. src_dir .. \"': it doesn't contain valid 'dist.info' file.\", 501 end\r\n    local pkg_name = info.name .. \"-\" .. info.version\r\n\r\n    -- set machine information\r\n    info.arch = cfg.arch\r\n    info.type = cfg.type\r\n\r\n    -- create CMake build dir\r\n    local cmake_build_dir = sys.abs_path(sys.make_path(deploy_dir, cfg.temp_dir, pkg_name .. \"-CMake-build\"))\r\n    sys.make_dir(cmake_build_dir)\r\n\r\n    -- create cmake cache\r\n    variables[\"CMAKE_INSTALL_PREFIX\"] = deploy_dir\r\n    local cache_file = io.open(sys.make_path(cmake_build_dir, \"cache.cmake\"), \"w\")\r\n    if not cache_file then return nil, \"Error creating CMake cache file in '\" .. cmake_build_dir .. \"'\", 401 end\r\n\r\n    -- Fill in cache variables\r\n    for k,v in pairs(variables) do\r\n        cache_file:write(\"SET(\" .. k .. \" \" .. sys.quote(v):gsub(\"\\\\+\", \"/\") .. \" CACHE STRING \\\"\\\" FORCE)\\n\")\r\n    end\r\n\r\n    -- If user cache file is provided then append it\r\n    if cfg.cache_file ~= \"\" then\r\n        local user_cache = io.open(sys.abs_path(cfg.cache_file), \"r\")\r\n        if user_cache then\r\n            cache_file:write(user_cache:read(\"*all\")..\"\\n\")\r\n            user_cache:close()\r\n        end\r\n    end\r\n    cache_file:close()\r\n\r\n    src_dir = sys.abs_path(src_dir)\r\n    print(\"Building \" .. sys.extract_name(src_dir) .. \"...\")\r\n\r\n    -- set cmake cache command\r\n    local cache_command = cfg.cache_command\r\n    if cfg.debug then cache_command = cache_command .. \" \" .. cfg.cache_debug_options end\r\n\r\n    -- set cmake build command\r\n    local build_command = cfg.build_command\r\n    if cfg.debug then build_command = build_command .. \" \" .. cfg.build_debug_options end\r\n\r\n    -- set the cmake cache\r\n    local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cache_command .. \" \" .. sys.quote(src_dir))\r\n    if not ok then return nil, \"Error preloading the CMake cache script '\" .. sys.make_path(cmake_build_dir, \"cmake.cache\") .. \"'\", 402 end\r\n\r\n    -- build with cmake\r\n    ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. build_command)\r\n    if not ok then return nil, \"Error building with CMake in directory '\" .. cmake_build_dir .. \"'\",403 end\r\n\r\n    -- if this is only simulation, exit sucessfully, skipping the next actions\r\n    if cfg.simulate then\r\n        return true, \"Simulated build and deployment of package '\" .. pkg_name .. \"' sucessfull.\"\r\n    end\r\n\r\n    -- table to collect files installed in the components\r\n    info.files = {}\r\n\r\n    -- install the components\r\n    for _, component in ipairs(cfg.components) do\r\n        local strip_option = \"\"\r\n        if not cfg.debug and component ~= \"Library\" then strip_option = cfg.strip_option end\r\n\r\n        local ok = sys.exec(\"cd \" .. sys.quote(cmake_build_dir) .. \" && \" .. cfg.cmake .. \" \" .. strip_option .. \" \" ..cfg.install_component_command:gsub(\"#COMPONENT#\", component))\r\n\r\n        if not ok then return nil, \"Error when installing the component '\" .. component .. \"' with CMake in directory '\" .. cmake_build_dir .. \"'\", 301 end\r\n\r\n        local install_mf = sys.make_path(cmake_build_dir, \"install_manifest_\" .. component .. \".txt\")\r\n        local mf, err\r\n        local component_files = {}\r\n\r\n        -- collect files installed in this component\r\n        if sys.exists(install_mf) then\r\n            mf, err = io.open(install_mf, \"r\")\r\n            if not mf then return nil, \"Error when opening the CMake installation manifest '\" .. install_mf .. \"': \" .. err, 302 end\r\n            for line in mf:lines() do\r\n                line = sys.check_separators(line)\r\n                local file = line:gsub(utils.escape_magic(deploy_dir .. sys.path_separator()), \"\")\r\n                table.insert(component_files, file)\r\n            end\r\n            mf:close()\r\n\r\n            -- add list of component files to the 'dist.info'\r\n            if #component_files > 0 then info.files[component] = component_files end\r\n        end\r\n    end\r\n--    if bookmark == 0 then return nil, \"Package did not install any files!\" end\r\n\r\n    -- test with ctest\r\n    if cfg.test then\r\n        print(\"Testing \" .. sys.extract_name(src_dir) .. \" ...\")\r\n        ok = sys.exec(\"cd \" .. sys.quote(deploy_dir) .. \" && \" .. cfg.test_command)\r\n        if not ok then return nil, \"Error when testing the module '\" .. pkg_name .. \"' with CTest.\", 201 end\r\n    end\r\n\r\n    -- Rewrite dependencies for binary package\r\n    if info.depends then\r\n       local dependencies = {}\r\n       -- collect all dependencies in single table\r\n       for k, dep in pairs(info.depends) do\r\n           -- if 'depend' is a table of OS specific dependencies for\r\n           -- this arch, add them to the normal dependencies of pkg\r\n           if type(dep) == \"table\" then\r\n               if k == cfg.arch then\r\n                   for _, os_specific_depend in pairs(dep) do\r\n                       table.insert(dependencies, os_specific_depend)\r\n                   end\r\n               end\r\n           elseif type(dep) == \"string\" then\r\n               table.insert(dependencies, dep)\r\n           end\r\n       end\r\n\r\n       -- Search for installed dependencies\r\n       local installed = depends.get_installed(deploy_dir)\r\n       for k, dep in pairs(dependencies) do\r\n           local version\r\n           local name = depends.split_name_constraint(dep)\r\n           for i, package in pairs(installed) do\r\n               if (package.name == name) then\r\n                   version = package.version\r\n               end\r\n           end\r\n           dependencies[k] = name\r\n\r\n           -- Convert version to major/minor only, assuming semantic versioning\r\n           if version then\r\n               local ver = constraints.parseVersion(version)\r\n               if ver and ver[1] then\r\n                   local major = ver[1][1] or \"0\"\r\n                   local minor = ver[1][2] or \"0\"\r\n                   version = major..\".\"..minor\r\n                   dependencies[k] = name..\"~=\"..version\r\n               end\r\n           end\r\n       end\r\n       -- Store the dependencies\r\n       info.depends = dependencies\r\n    end\r\n\r\n    -- save modified 'dist.info' file\r\n    local pkg_distinfo_dir = sys.make_path(deploy_dir, cfg.distinfos_dir, pkg_name)\r\n    sys.make_dir(pkg_distinfo_dir)\r\n    ok, err = mf.save_distinfo(info, sys.make_path(pkg_distinfo_dir, \"dist.info\"))\r\n    if not ok then return nil, err end\r\n\r\n    -- clean up\r\n    if not cfg.debug then sys.delete(cmake_build_dir) end\r\n\r\n    return true, \"Package '\" .. pkg_name .. \"' successfully builded and deployed to '\" .. deploy_dir .. \"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function fetch_pkg(pkg, download_dir, suppress_printing)\r\n    download_dir = download_dir or sys.current_dir()\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(pkg) == \"table\", \"package.fetch_pkg: Argument 'pkg' is not a table.\")\r\n    assert(type(download_dir) == \"string\", \"package.fetch_pkg: Argument 'download_dir' is not a string.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.fetch_pkg: Argument 'suppress_printing' is not a boolean.\")\r\n    assert(type(pkg.name) == \"string\", \"package.fetch_pkg: Argument 'pkg.name' is not a string.\")\r\n    assert(type(pkg.version) == \"string\", \"package.fetch_pkg: Argument 'pkg.version' is not a string.\")\r\n    assert(type(pkg.path) == \"string\", \"package.fetch_pkg: Argument 'pkg.path' is not a string.\")\r\n    download_dir = sys.abs_path(download_dir)\r\n\r\n    local pkg_full_name = pkg.name .. \"-\" .. pkg.version\r\n    local repo_url = pkg.path\r\n    local clone_dir = sys.abs_path(sys.make_path(download_dir, pkg_full_name))\r\n\r\n    -- check if download_dir already exists, assuming the package was already downloaded\r\n    if sys.exists(sys.make_path(clone_dir, \"dist.info\")) then\r\n        if cfg.cache and not utils.cache_timeout_expired(cfg.cache_timeout, clone_dir) then\r\n            if not suppress_printing then print(\"'\" .. pkg_full_name .. \"' already in cache, skipping downloading (use '-cache=false' to force download).\") end\r\n            return clone_dir\r\n        else\r\n            sys.delete(sys.make_path(clone_dir))\r\n        end\r\n    end\r\n\r\n    local bin_tag = pkg.version .. \"-\" .. cfg.arch .. \"-\" .. cfg.type\r\n    local use_binary = false\r\n\r\n    if cfg.binary then\r\n        -- check if binary version of the module for this arch & type available\r\n        local avail_tags, err = git.get_remote_tags(repo_url)\r\n        if not avail_tags then return nil, err end\r\n\r\n        if utils.contains(avail_tags, bin_tag) then\r\n            use_binary = true\r\n        end\r\n    end\r\n\r\n    -- init the git repository\r\n    local ok, err = git.create_repo(clone_dir)\r\n    if not ok then return nil, err end\r\n\r\n    -- Fetch the desired ref (from the pkg's remote repo) and checkout into it.\r\n\r\n    if use_binary then\r\n\r\n        if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (binary)...\") end\r\n\r\n        -- We fetch the binary tag.\r\n        local sha\r\n        if ok then sha, err = git.fetch_tag(clone_dir, repo_url, bin_tag) end\r\n        if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n\r\n    elseif cfg.source then\r\n\r\n        if not suppress_printing then print(\"Getting \" .. pkg_full_name .. \" (source)...\") end\r\n\r\n        -- If we want the 'scm' version, we fetch the 'master' branch, otherwise\r\n        -- we fetch the tag, matching the desired package version.\r\n        if ok and pkg.version ~= \"scm\" then\r\n            local sha\r\n            sha, err = git.fetch_tag(clone_dir, repo_url, pkg.version)\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        elseif ok then\r\n            local sha\r\n            sha, err = git.fetch_branch(clone_dir, repo_url, \"master\")\r\n            if sha then ok, err = git.checkout_sha(sha, clone_dir) end\r\n        end\r\n\r\n    else\r\n        ok = false\r\n        if cfg.binary then\r\n            err = \"Binary version of module not available and using source modules disabled.\"\r\n        else\r\n            err = \"Using both binary and source modules disabled.\"\r\n        end\r\n    end\r\n\r\n    if not ok then\r\n        -- clean up\r\n        if not cfg.debug then sys.delete(clone_dir) end\r\n        return nil, \"Error fetching package '\" .. pkg_full_name .. \"' from '\" .. pkg.path .. \"' to '\" .. download_dir .. \"': \" .. err\r\n    end\r\n\r\n    -- delete '.git' directory\r\n    if not cfg.debug then sys.delete(sys.make_path(clone_dir, \".git\")) end\r\n\r\n    return clone_dir\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function retrieve_versions(package, manifest, suppress_printing)\r\n    suppress_printing = suppress_printing or false\r\n    assert(type(package) == \"string\", \"package.retrieve_versions: Argument 'string' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.retrieve_versions: Argument 'manifest' is not a table.\")\r\n    assert(type(suppress_printing) == \"boolean\", \"package.retrieve_versions: Argument 'suppress_printing' is not a boolean.\")\r\n\r\n    -- get package table\r\n    local pkg_name = depends.split_name_constraint(package)\r\n    local tmp_packages = depends.find_packages(pkg_name, manifest)\r\n\r\n    if #tmp_packages == 0 then\r\n        return nil, \"No suitable candidate for package '\" .. package .. \"' found.\"\r\n    else\r\n        package = tmp_packages[1]\r\n    end\r\n\r\n    if not suppress_printing then print(\"Finding out available versions of \" .. package.name .. \"...\") end\r\n\r\n    -- get available versions\r\n    local tags, err = git.get_remote_tags(package.path)\r\n    if not tags then return nil, \"Error when retrieving versions of package '\" .. package.name .. \"': \" .. err end\r\n\r\n    -- filter out tags of binary packages\r\n    local versions = utils.filter(tags, function (tag) return tag:match(\"^[^%-]+%-?[^%-]*$\") and true end)\r\n\r\n    packages = {}\r\n\r\n    -- create package information\r\n    for _, version in pairs(versions) do\r\n        pkg = {}\r\n        pkg.name = package.name\r\n        pkg.version = version\r\n        pkg.path = package.path\r\n        table.insert(packages, pkg)\r\n    end\r\n\r\n    return packages\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function get_versions_info(pkg, manifest, deploy_dir, installed)\r\n    deploy_dir = deploy_dir or cfg.root_dir\r\n    assert(type(pkg) == \"string\", \"package.get_versions_info: Argument 'pkg' is not a string.\")\r\n    assert(type(manifest) == \"table\", \"package.get_versions_info: Argument 'manifest' is not a table.\")\r\n    assert(type(deploy_dir) == \"string\", \"package.get_versions_info: Argument 'deploy_dir' is not a string.\")\r\n    deploy_dir = sys.abs_path(deploy_dir)\r\n\r\n    -- find all available versions of package\r\n    local versions, err = retrieve_versions(pkg, manifest)\r\n    if not versions then return nil, err end\r\n\r\n    -- collect info about all retrieved versions\r\n    local infos = {}\r\n    for _, version in pairs(versions) do\r\n\r\n        local info, path_or_err\r\n        local installed_version = {}\r\n\r\n        -- find out whether this 'version' is installed so we can use it's dist.info\r\n        if type(installed) == \"table\" then installed_version = depends.find_packages(version.name .. \"-\" .. version.version, installed) end\r\n\r\n        -- get info\r\n        if #installed_version > 0 then\r\n            print(\"Using dist.info from installed \" .. version.name .. \"-\" .. version.version)\r\n            info = installed_version[1]\r\n            info.path = version.path\r\n            info.from_installed = true  -- flag that dist.info of installed package was used\r\n        else\r\n            info, path_or_err = retrieve_pkg_info(version, deploy_dir)\r\n            if not info then return nil, path_or_err end\r\n            sys.delete(path_or_err)\r\n        end\r\n        table.insert(infos, info)\r\n    end\r\n\r\n    -- found and add an implicit 'scm' version\r\n    local pkg_name = depends.split_name_constraint(pkg)\r\n    local found = depends.find_packages(pkg_name, manifest)\r\n    if #found == 0 then return nil, \"No suitable candidate for package '\" .. pkg .. \"' found.\" end\r\n    local scm_info, path_or_err = retrieve_pkg_info({name = pkg_name, version = \"scm\", path = found[1].path})\r\n    if not scm_info then return nil, path_or_err end\r\n    sys.delete(path_or_err)\r\n    scm_info.version = \"scm\"\r\n    table.insert(infos, scm_info)\r\n\r\n    local tmp_manifest = utils.deepcopy(manifest)\r\n\r\n    -- add collected info to the temp. manifest, replacing existing tables\r\n    for _, info in pairs(infos) do\r\n        local already_in_manifest = false\r\n        -- find if this version is already in manifest\r\n        for idx, pkg in ipairs(tmp_manifest) do\r\n            -- if yes, replace it\r\n            if pkg.name == info.name and pkg.version == info.version then\r\n                tmp_manifest[idx] = info\r\n                already_in_manifest = true\r\n                break\r\n            end\r\n        end\r\n        -- if not, just normally add to the manifest\r\n        if not already_in_manifest then\r\n            table.insert(tmp_manifest, info)\r\n        end\r\n    end\r\n\r\n    return tmp_manifest\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function exec(command, force_verbose)\r\n    force_verbose = force_verbose or false\r\n    assert(type(command) == \"string\", \"sys.exec: Argument 'command' is not a string.\")\r\n    assert(type(force_verbose) == \"boolean\", \"sys.exec: Argument 'force_verbose' is not a boolean.\")\r\n\r\n    if not (cfg.verbose or cfg.debug or force_verbose) then\r\n        if cfg.arch == \"Windows\" then\r\n            command = command .. \" > NUL 2>&1\"\r\n        else\r\n            command = command .. \" > /dev/null 2>&1\"\r\n        end\r\n    end\r\n\r\n    if cfg.debug then print(\"Executing the command: \" .. command) end\r\n    local ok, str, status  = os.execute(command)\r\n\r\n    -- os.execute returned values on failure are:\r\n    --  nil or true, \"exit\", n or true, \"signal\", n for lua >= 5.2\r\n    --  status ~= 0 for lua 5.x < 5.2\r\n    if ok == nil or (str == \"exit\" and status ~= 0) or str == \"signal\" or (ok ~= 0 and ok ~= true) then\r\n        return nil, \"Error when running the command: \" .. command\r\n    else\r\n        return true, \"Sucessfully executed the command: \" .. command\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function is_root(path)\r\n    assert(type(path) == \"string\", \"sys.is_root: Argument 'path' is not a string.\")\r\n    return utils.to_boolean(path:find(\"^[%u%U.]?:?[/\\\\]$\"))\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function is_abs(path)\r\n    assert(type(path) == \"string\", \"sys.is_abs: Argument 'path' is not a string.\")\r\n    return utils.to_boolean(path:find(\"^[%u%U.]?:?[/\\\\].*$\"))\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function exists(path)\r\n    assert(type(path) == \"string\", \"sys.exists: Argument 'path' is not a string.\")\r\n    local attr, err = lfs.attributes(path)\r\n    return utils.to_boolean(attr), err\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function parent_dir(path)\r\n    assert(type(path) == \"string\", \"sys.parent_dir: Argument 'path' is not a string.\")\r\n    path = remove_curr_dir_dots(path)\r\n    path = remove_trailing(path)\r\n\r\n    local dir = path:gsub(utils.escape_magic(extract_name(path)) .. \"$\", \"\")\r\n    if dir == \"\" then\r\n        return nil\r\n    else\r\n        return make_path(dir)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function tmp_name(prefix)\r\n    prefix = prefix or \"\"\r\n    assert(type(prefix) == \"string\", \"sys.tmp_name: Argument 'prefix' is not a string.\")\r\n    return make_path(tmp_dir(), prefix .. \"luadist_\" .. utils.rand(10000000000))\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function last_modification_time(file)\r\n    assert(type(file) == \"string\", \"sys.last_modification_time: Argument 'file' is not a string.\")\r\n    return lfs.attributes(file, \"modification\")\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function current_time()\r\n    return os.time()\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function deepcopy(object)\r\n    local lookup_table = {}\r\n    local function _copy(object)\r\n        if type(object) ~= \"table\" then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {}\r\n        lookup_table[object] = new_table\r\n        for index, value in pairs(object) do\r\n            new_table[_copy(index)] = _copy(value)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end\r\n    return _copy(object)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local lookup_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local function _copy(object)\r\n        if type(object) ~= \"table\" then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {}\r\n        lookup_table[object] = new_table\r\n        for index, value in pairs(object) do\r\n            new_table[_copy(index)] = _copy(value)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 30,
    "text": "if type(object) ~= \"table\" then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 32,
    "text": "local new_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "lookup_table[object] = new_table",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "for index, value in pairs(object) do\r\n            new_table[_copy(index)] = _copy(value)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "new_table[_copy(index)] = _copy(value)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function _copy(object)\r\n        if type(object) ~= \"table\" then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {}\r\n        lookup_table[object] = new_table\r\n        for index, value in pairs(object) do\r\n            new_table[_copy(index)] = _copy(value)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function filter(array, predicate_fn)\r\n    assert(type(array) == \"table\", \"utils.filter: Argument 'array' is not a table.\")\r\n    assert(type(predicate_fn) == \"function\", \"utils.filter: Argument 'predicate_fn' is not a function.\")\r\n    local filtered = {}\r\n    for _,v in pairs(array) do\r\n        if predicate_fn(v) == true then table.insert(filtered, deepcopy(v)) end\r\n    end\r\n    return filtered\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "assert(type(array) == \"table\", \"utils.filter: Argument 'array' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert(type(predicate_fn) == \"function\", \"utils.filter: Argument 'predicate_fn' is not a function.\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local filtered = {}",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "for _,v in pairs(array) do\r\n        if predicate_fn(v) == true then table.insert(filtered, deepcopy(v)) end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "if predicate_fn(v) == true then table.insert(filtered, deepcopy(v)) end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "table.insert(filtered, deepcopy(v))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function sort(array, compare_fn)\r\n    assert(type(array) == \"table\", \"utils.sort: Argument 'array' is not a table.\")\r\n    assert(type(compare_fn) == \"function\", \"utils.sort: Argument 'compare_fn' is not a function.\")\r\n    local sorted = deepcopy(array)\r\n    table.sort(sorted, compare_fn)\r\n    return sorted\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "assert(type(array) == \"table\", \"utils.sort: Argument 'array' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert(type(compare_fn) == \"function\", \"utils.sort: Argument 'compare_fn' is not a function.\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "local sorted = deepcopy(array)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "table.sort(sorted, compare_fn)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function contains(tbl, value)\r\n    assert(type(tbl) == \"table\", \"utils.contains: Argument 'tbl' is not a table.\")\r\n    for _,v in pairs(tbl) do\r\n        if v == value then return true end\r\n    end\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "assert(type(tbl) == \"table\", \"utils.contains: Argument 'tbl' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "for _,v in pairs(tbl) do\r\n        if v == value then return true end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "if v == value then return true end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function table_tostring(tbl, label)\r\n    assert(type(tbl) == \"table\", \"utils.table_tostring: Argument 'tbl' is not a table.\")\r\n    local str = \"\"\r\n    for k,v in pairs(tbl) do\r\n        if type(v) == \"table\" then\r\n            str = str .. table_tostring(v, k)\r\n        else\r\n            if label ~= nil then\r\n                str = str .. tostring(v) .. \" [\" .. tostring(label) .. \"]\" .. \", \"\r\n            else\r\n                str = str .. tostring(v) .. \", \"\r\n            end\r\n        end\r\n    end\r\n    return str\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "assert(type(tbl) == \"table\", \"utils.table_tostring: Argument 'tbl' is not a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local str = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "for k,v in pairs(tbl) do\r\n        if type(v) == \"table\" then\r\n            str = str .. table_tostring(v, k)\r\n        else\r\n            if label ~= nil then\r\n                str = str .. tostring(v) .. \" [\" .. tostring(label) .. \"]\" .. \", \"\r\n            else\r\n                str = str .. tostring(v) .. \", \"\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "if type(v) == \"table\" then\r\n            str = str .. table_tostring(v, k)\r\n        else\r\n            if label ~= nil then\r\n                str = str .. tostring(v) .. \" [\" .. tostring(label) .. \"]\" .. \", \"\r\n            else\r\n                str = str .. tostring(v) .. \", \"\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "str = str .. table_tostring(v, k)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if label ~= nil then\r\n                str = str .. tostring(v) .. \" [\" .. tostring(label) .. \"]\" .. \", \"\r\n            else\r\n                str = str .. tostring(v) .. \", \"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "str = str .. tostring(v) .. \" [\" .. tostring(label) .. \"]\" .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "str = str .. tostring(v) .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function make_table(str, separator)\r\n    assert(type(str) == \"string\", \"utils.make_table: Argument 'str' is not a string.\")\r\n    assert(type(separator) == \"string\", \"utils.make_table: Argument 'separator' is not a string.\")\r\n\r\n    local tbl = {}\r\n    for val in str:gmatch(\"(.-)\" .. separator) do\r\n        table.insert(tbl, val)\r\n    end\r\n    local last_val = str:gsub(\".-\" .. separator, \"\")\r\n    if last_val and last_val ~= \"\" then\r\n        table.insert(tbl, last_val)\r\n    end\r\n    return tbl\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "assert(type(str) == \"string\", \"utils.make_table: Argument 'str' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert(type(separator) == \"string\", \"utils.make_table: Argument 'separator' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "local tbl = {}",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "for val in str:gmatch(\"(.-)\" .. separator) do\r\n        table.insert(tbl, val)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "table.insert(tbl, val)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "local last_val = str:gsub(\".-\" .. separator, \"\")",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if last_val and last_val ~= \"\" then\r\n        table.insert(tbl, last_val)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "table.insert(tbl, last_val)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function cache_timeout_expired(cache_timeout, file)\r\n    assert(type(cache_timeout) == \"number\", \"utils.cache_timeout_expired: Argument 'cache_timeout' is not a number.\")\r\n    assert(type(file) == \"string\", \"utils.cache_timeout_expired: Argument 'file' is not a string.\")\r\n    return sys.last_modification_time(file) + cache_timeout < sys.current_time()\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "assert(type(cache_timeout) == \"number\", \"utils.cache_timeout_expired: Argument 'cache_timeout' is not a number.\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert(type(file) == \"string\", \"utils.cache_timeout_expired: Argument 'file' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function escape_magic(str)\r\n    assert(type(str) == \"string\", \"utils.escape: Argument 'str' is not a string.\")\r\n    local escaped = str:gsub('[%-%.%+%[%]%(%)%^%%%?%*%^%$]','%%%1')\r\n    return escaped\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "assert(type(str) == \"string\", \"utils.escape: Argument 'str' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "local escaped = str:gsub('[%-%.%+%[%]%(%)%^%%%?%*%^%$]','%%%1')",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function to_boolean(arg)\r\n    return not not arg\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function rand(...)\r\n    return math.random(...)\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function system_dependency_available(name, command)\r\n    assert(type(name) == \"string\", \"utils.system_dependency_available: Argument 'name' is not a string.\")\r\n    assert(type(command) == \"string\", \"utils.system_dependency_available: Argument 'command' is not a string.\")\r\n\r\n    if not sys.exec(command) then\r\n        print(\"Error: command '\" .. name .. \"' not found on system. See installation instructions at\\nhttps://github.com/LuaDist/Repository/wiki/Installation-of-System-Dependencies\")\r\n        return false\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "assert(type(name) == \"string\", \"utils.system_dependency_available: Argument 'name' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert(type(command) == \"string\", \"utils.system_dependency_available: Argument 'command' is not a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "if not sys.exec(command) then\r\n        print(\"Error: command '\" .. name .. \"' not found on system. See installation instructions at\\nhttps://github.com/LuaDist/Repository/wiki/Installation-of-System-Dependencies\")\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "print(\"Error: command '\" .. name .. \"' not found on system. See installation instructions at\\nhttps://github.com/LuaDist/Repository/wiki/Installation-of-System-Dependencies\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function get_luadist_location()\r\n  local paths = {}\r\n  local path = package.path:gsub(\"([^;]+)\", function(c) table.insert(paths, c) end)\r\n\r\n  for _, path in pairs(paths) do\r\n    if (sys.is_abs(path) and path:find(\"[/\\\\]lib[/\\\\]lua[/\\\\]%?.lua$\")) then\r\n      -- Remove path to lib/lua\r\n      path = path:gsub(\"[/\\\\]lib[/\\\\]lua[/\\\\]%?.lua$\", \"\")\r\n      -- Clean the path up a bit\r\n      path = path:gsub(\"[/\\\\]bin[/\\\\]%.[/\\\\]%.%.\", \"\")\r\n      path = path:gsub(\"[/\\\\]bin[/\\\\]%.%.\", \"\")\r\n      return path\r\n    end\r\n  end\r\n  return nil\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local paths = {}",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local path = package.path:gsub(\"([^;]+)\", function(c) table.insert(paths, c) end)",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "table.insert(paths, c)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "for _, path in pairs(paths) do\r\n    if (sys.is_abs(path) and path:find(\"[/\\\\]lib[/\\\\]lua[/\\\\]%?.lua$\")) then\r\n      -- Remove path to lib/lua\r\n      path = path:gsub(\"[/\\\\]lib[/\\\\]lua[/\\\\]%?.lua$\", \"\")\r\n      -- Clean the path up a bit\r\n      path = path:gsub(\"[/\\\\]bin[/\\\\]%.[/\\\\]%.%.\", \"\")\r\n      path = path:gsub(\"[/\\\\]bin[/\\\\]%.%.\", \"\")\r\n      return path\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 101,
    "text": "if (sys.is_abs(path) and path:find(\"[/\\\\]lib[/\\\\]lua[/\\\\]%?.lua$\")) then\r\n      -- Remove path to lib/lua\r\n      path = path:gsub(\"[/\\\\]lib[/\\\\]lua[/\\\\]%?.lua$\", \"\")\r\n      -- Clean the path up a bit\r\n      path = path:gsub(\"[/\\\\]bin[/\\\\]%.[/\\\\]%.%.\", \"\")\r\n      path = path:gsub(\"[/\\\\]bin[/\\\\]%.%.\", \"\")\r\n      return path\r\n    end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "path = path:gsub(\"[/\\\\]lib[/\\\\]lua[/\\\\]%?.lua$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "path = path:gsub(\"[/\\\\]bin[/\\\\]%.[/\\\\]%.%.\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "path = path:gsub(\"[/\\\\]bin[/\\\\]%.%.\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function(c) table.insert(paths, c) end",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "function container"
  }, {
    "id": 108,
    "text": "function apply_settings(variable, value)\r\n    assert(type(variable) == \"string\", \"luadist.apply_settings: Argument 'variable' is not a string.\")\r\n    assert(type(value) == \"string\", \"luadist.apply_settings: Argument 'value' is not a string.\")\r\n\r\n    -- check whether the settings variable exists\r\n    if cfg[variable] == nil then\r\n        print(\"Unknown LuaDist configuration option: '\" .. variable .. \"'.\")\r\n        os.exit(1)\r\n\r\n    -- ensure the right type\r\n\r\n    elseif type(cfg[variable]) == \"boolean\" then\r\n        value = value:lower()\r\n        if value == \"true\" or value == \"yes\" or value == \"on\" or value == \"1\" then\r\n            value = true\r\n        elseif value == \"false\" or value == \"no\" or value == \"off\" or value == \"0\" then\r\n            value = false\r\n        else\r\n            print(\"Value of LuaDist option '\" .. variable .. \"' must be a boolean.\")\r\n            os.exit(1)\r\n        end\r\n\r\n    elseif type(cfg[variable]) == \"number\" then\r\n        value = tonumber(value)\r\n        if not value then\r\n            print(\"Value of LuaDist option '\" .. variable .. \"' must be a number.\")\r\n            os.exit(1)\r\n        end\r\n\r\n    elseif type(cfg[variable]) == \"table\" then\r\n        local err\r\n        value, err = utils.make_table(value, \",\")\r\n        if not value then\r\n            print(\"Error when parsing the LuaDist variable '\" .. variable .. \"': \" .. err)\r\n            os.exit(1)\r\n        end\r\n    end\r\n\r\n    -- set the LuaDist variable\r\n    cfg[variable] = value\r\n\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "function container"
  }, {
    "id": 110,
    "text": "local function fail_msg(val, err)\r\n    return \"TEST FAILED!!! - Returned value was: '\" .. (type(val) == \"table\" and utils.table_tostring(val) or tostring(val)) .. \"' \\n    Error was: \\\"\" .. (tostring(err) or \"nil\") .. \"\\\"\"\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "function container"
  }, {
    "id": 112,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 113,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 114,
    "text": "time",
    "type": "global function"
  }, {
    "id": 115,
    "text": "print",
    "type": "global function"
  }, {
    "id": 116,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 117,
    "text": "random",
    "type": "global function"
  }, {
    "id": 118,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 119,
    "text": "randomseed",
    "type": "global function"
  }, {
    "id": 120,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 121,
    "text": "predicate_fn",
    "type": "global function"
  }, {
    "id": 122,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 123,
    "text": "module",
    "type": "global function"
  }, {
    "id": 124,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 125,
    "text": "type",
    "type": "global function"
  }, {
    "id": 126,
    "text": "require",
    "type": "global function"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "variable container"
  }, {
    "id": 133,
    "text": "",
    "type": "require container"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  } ]
}