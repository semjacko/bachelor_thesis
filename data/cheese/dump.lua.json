{
  "_filename": "dump.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cheese/src/luap/dump.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 5
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 5
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 8
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 25,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 25,
    "label": "has",
    "to": 18
  }, {
    "from": 25,
    "label": "has",
    "to": 5
  }, {
    "from": 25,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 3
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 18
  }, {
    "from": 37,
    "label": "has",
    "to": 5
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 8
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 18
  }, {
    "from": 41,
    "label": "has",
    "to": 5
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 8
  }, {
    "from": 48,
    "label": "has",
    "to": 3
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 18
  }, {
    "from": 48,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 8
  }, {
    "from": 52,
    "label": "has",
    "to": 3
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 52,
    "label": "has",
    "to": 18
  }, {
    "from": 52,
    "label": "has",
    "to": 5
  }, {
    "from": 52,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 5
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 5
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 3
  }, {
    "from": 70,
    "label": "has",
    "to": 5
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 8
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 5
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 8
  }, {
    "from": 79,
    "label": "has",
    "to": 3
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 8
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 5
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 3
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 3
  }, {
    "from": 93,
    "label": "has",
    "to": 5
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 5
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 5
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 3
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 3
  }, {
    "from": 105,
    "label": "has",
    "to": 5
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 3
  }, {
    "from": 107,
    "label": "has",
    "to": 5
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 3
  }, {
    "from": 109,
    "label": "has",
    "to": 5
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 3
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 111,
    "label": "has",
    "to": 5
  }, {
    "from": 111,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 3
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 5
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 3
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 5
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 7,
    "label": "calls",
    "to": 135
  }, {
    "from": 15,
    "label": "calls",
    "to": 135
  }, {
    "from": 20,
    "label": "calls",
    "to": 135
  }, {
    "from": 25,
    "label": "calls",
    "to": 135
  }, {
    "from": 37,
    "label": "calls",
    "to": 135
  }, {
    "from": 41,
    "label": "calls",
    "to": 135
  }, {
    "from": 48,
    "label": "calls",
    "to": 135
  }, {
    "from": 52,
    "label": "calls",
    "to": 135
  }, {
    "from": 72,
    "label": "calls",
    "to": 135
  }, {
    "from": 79,
    "label": "calls",
    "to": 135
  }, {
    "from": 111,
    "label": "calls",
    "to": 135
  }, {
    "from": 7,
    "label": "calls",
    "to": 131
  }, {
    "from": 25,
    "label": "calls",
    "to": 131
  }, {
    "from": 72,
    "label": "calls",
    "to": 131
  }, {
    "from": 79,
    "label": "calls",
    "to": 131
  }, {
    "from": 7,
    "label": "calls",
    "to": 133
  }, {
    "from": 15,
    "label": "calls",
    "to": 133
  }, {
    "from": 15,
    "label": "calls",
    "to": 133
  }, {
    "from": 15,
    "label": "calls",
    "to": 133
  }, {
    "from": 20,
    "label": "calls",
    "to": 133
  }, {
    "from": 20,
    "label": "calls",
    "to": 133
  }, {
    "from": 20,
    "label": "calls",
    "to": 133
  }, {
    "from": 25,
    "label": "calls",
    "to": 133
  }, {
    "from": 25,
    "label": "calls",
    "to": 133
  }, {
    "from": 25,
    "label": "calls",
    "to": 133
  }, {
    "from": 25,
    "label": "calls",
    "to": 133
  }, {
    "from": 25,
    "label": "calls",
    "to": 133
  }, {
    "from": 37,
    "label": "calls",
    "to": 133
  }, {
    "from": 37,
    "label": "calls",
    "to": 133
  }, {
    "from": 37,
    "label": "calls",
    "to": 133
  }, {
    "from": 41,
    "label": "calls",
    "to": 133
  }, {
    "from": 41,
    "label": "calls",
    "to": 133
  }, {
    "from": 41,
    "label": "calls",
    "to": 133
  }, {
    "from": 48,
    "label": "calls",
    "to": 133
  }, {
    "from": 48,
    "label": "calls",
    "to": 133
  }, {
    "from": 48,
    "label": "calls",
    "to": 133
  }, {
    "from": 52,
    "label": "calls",
    "to": 133
  }, {
    "from": 52,
    "label": "calls",
    "to": 133
  }, {
    "from": 52,
    "label": "calls",
    "to": 133
  }, {
    "from": 72,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 138
  }, {
    "from": 15,
    "label": "calls",
    "to": 138
  }, {
    "from": 15,
    "label": "calls",
    "to": 138
  }, {
    "from": 20,
    "label": "calls",
    "to": 138
  }, {
    "from": 20,
    "label": "calls",
    "to": 138
  }, {
    "from": 25,
    "label": "calls",
    "to": 138
  }, {
    "from": 25,
    "label": "calls",
    "to": 138
  }, {
    "from": 25,
    "label": "calls",
    "to": 138
  }, {
    "from": 37,
    "label": "calls",
    "to": 138
  }, {
    "from": 37,
    "label": "calls",
    "to": 138
  }, {
    "from": 41,
    "label": "calls",
    "to": 138
  }, {
    "from": 41,
    "label": "calls",
    "to": 138
  }, {
    "from": 48,
    "label": "calls",
    "to": 138
  }, {
    "from": 48,
    "label": "calls",
    "to": 138
  }, {
    "from": 52,
    "label": "calls",
    "to": 138
  }, {
    "from": 52,
    "label": "calls",
    "to": 138
  }, {
    "from": 61,
    "label": "calls",
    "to": 138
  }, {
    "from": 66,
    "label": "calls",
    "to": 138
  }, {
    "from": 68,
    "label": "calls",
    "to": 138
  }, {
    "from": 70,
    "label": "calls",
    "to": 138
  }, {
    "from": 72,
    "label": "calls",
    "to": 138
  }, {
    "from": 86,
    "label": "calls",
    "to": 138
  }, {
    "from": 93,
    "label": "calls",
    "to": 138
  }, {
    "from": 2,
    "label": "calls",
    "to": 130
  }, {
    "from": 99,
    "label": "calls",
    "to": 130
  }, {
    "from": 48,
    "label": "calls",
    "to": 72
  }, {
    "from": 48,
    "label": "calls",
    "to": 72
  }, {
    "from": 52,
    "label": "calls",
    "to": 72
  }, {
    "from": 61,
    "label": "calls",
    "to": 72
  }, {
    "from": 61,
    "label": "calls",
    "to": 72
  }, {
    "from": 66,
    "label": "calls",
    "to": 72
  }, {
    "from": 66,
    "label": "calls",
    "to": 72
  }, {
    "from": 70,
    "label": "calls",
    "to": 72
  }, {
    "from": 79,
    "label": "calls",
    "to": 72
  }, {
    "from": 86,
    "label": "calls",
    "to": 72
  }, {
    "from": 93,
    "label": "calls",
    "to": 72
  }, {
    "from": 105,
    "label": "calls",
    "to": 72
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 20,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 72,
    "label": "calls",
    "to": 2
  }, {
    "from": 79,
    "label": "calls",
    "to": 2
  }, {
    "from": 79,
    "label": "calls",
    "to": 2
  }, {
    "from": 101,
    "label": "calls",
    "to": 2
  }, {
    "from": 107,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 119,
    "label": "calls",
    "to": 2
  }, {
    "from": 119,
    "label": "calls",
    "to": 2
  }, {
    "from": 124,
    "label": "calls",
    "to": 2
  }, {
    "from": 86,
    "label": "calls",
    "to": 79
  }, {
    "from": 91,
    "label": "calls",
    "to": 79
  }, {
    "from": 129,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 134
  }, {
    "from": 2,
    "label": "calls",
    "to": 136
  }, {
    "from": 13,
    "label": "calls",
    "to": 7
  }, {
    "from": 15,
    "label": "calls",
    "to": 7
  }, {
    "from": 20,
    "label": "calls",
    "to": 7
  }, {
    "from": 25,
    "label": "calls",
    "to": 7
  }, {
    "from": 25,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 41,
    "label": "calls",
    "to": 7
  }, {
    "from": 48,
    "label": "calls",
    "to": 7
  }, {
    "from": 52,
    "label": "calls",
    "to": 7
  }, {
    "from": 97,
    "label": "calls",
    "to": 137
  }, {
    "from": 1,
    "label": "contains",
    "to": 129
  }, {
    "from": 129,
    "label": "declares",
    "to": 2
  }, {
    "from": 129,
    "label": "declares",
    "to": 7
  }, {
    "from": 129,
    "label": "declares",
    "to": 13
  }, {
    "from": 129,
    "label": "declares",
    "to": 15
  }, {
    "from": 129,
    "label": "declares",
    "to": 20
  }, {
    "from": 129,
    "label": "declares",
    "to": 25
  }, {
    "from": 129,
    "label": "declares",
    "to": 37
  }, {
    "from": 129,
    "label": "declares",
    "to": 41
  }, {
    "from": 129,
    "label": "declares",
    "to": 48
  }, {
    "from": 129,
    "label": "declares",
    "to": 52
  }, {
    "from": 129,
    "label": "declares",
    "to": 61
  }, {
    "from": 129,
    "label": "declares",
    "to": 66
  }, {
    "from": 129,
    "label": "declares",
    "to": 68
  }, {
    "from": 129,
    "label": "declares",
    "to": 70
  }, {
    "from": 129,
    "label": "declares",
    "to": 72
  }, {
    "from": 129,
    "label": "declares",
    "to": 79
  }, {
    "from": 129,
    "label": "declares",
    "to": 86
  }, {
    "from": 129,
    "label": "declares",
    "to": 91
  }, {
    "from": 129,
    "label": "declares",
    "to": 93
  }, {
    "from": 129,
    "label": "declares",
    "to": 95
  }, {
    "from": 129,
    "label": "declares",
    "to": 97
  }, {
    "from": 129,
    "label": "declares",
    "to": 99
  }, {
    "from": 129,
    "label": "declares",
    "to": 101
  }, {
    "from": 129,
    "label": "declares",
    "to": 103
  }, {
    "from": 129,
    "label": "declares",
    "to": 105
  }, {
    "from": 129,
    "label": "declares",
    "to": 107
  }, {
    "from": 129,
    "label": "declares",
    "to": 109
  }, {
    "from": 129,
    "label": "declares",
    "to": 111
  }, {
    "from": 129,
    "label": "declares",
    "to": 119
  }, {
    "from": 129,
    "label": "declares",
    "to": 124
  }, {
    "from": 1,
    "label": "contains",
    "to": 139
  }, {
    "from": 1,
    "label": "contains",
    "to": 140
  }, {
    "from": 141,
    "label": "requires",
    "to": 1
  }, {
    "from": 142,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dump",
    "type": "module"
  }, {
    "id": 2,
    "text": "function dump(tree, level)\r\n  level = level or 0\r\n  if type(tree) == \"table\" and tree.tag then\r\n    return _M[\"dump_\" .. tree.tag](tree, level)\r\n  else\r\n    return string.rep(\" \", level) .. tostring(tree)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "level = level or 0",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "if type(tree) == \"table\" and tree.tag then\r\n    return _M[\"dump_\" .. tree.tag](tree, level)\r\n  else\r\n    return string.rep(\" \", level) .. tostring(tree)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function dump_block(block, level)\r\n  local out = {}\r\n  local level = level or 0\r\n  for _, stat in ipairs(block) do\r\n    table.insert(out, dump(stat, level))\r\n  end\r\n  return table.concat(out, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local level = level or 0",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for _, stat in ipairs(block) do\r\n    table.insert(out, dump(stat, level))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "table.insert(out, dump(stat, level))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function dump_chunk(chunk)\r\n  return dump_block(chunk.block)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function dump_while(swhile, level)\r\n  local out = {}\r\n  level = level or 0\r\n  table.insert(out, string.rep(\" \", level) .. \r\n\t\t\t       \"while \" .. dump(swhile.exp) .. \" do\")\r\n  table.insert(out, dump_block(swhile.block, level + 2))\r\n  table.insert(out, string.rep(\" \", level) .. \"end\")\r\n  return table.concat(out, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "table.insert(out, string.rep(\" \", level) .. \r\n\t\t\t       \"while \" .. dump(swhile.exp) .. \" do\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "table.insert(out, dump_block(swhile.block, level + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "table.insert(out, string.rep(\" \", level) .. \"end\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function dump_repeat(srepeat, level)\r\n  local out = {}\r\n  level = level or 0\r\n  table.insert(out, string.rep(\" \", level) ..\r\n\t       \"repeat \")\r\n  table.insert(out, dump_block(srepeat.block, level + 2))\r\n  table.insert(out, string.rep(\" \", level) .. \"until \" ..\r\n\t       dump(srepeat.exp))\r\n  return table.concat(out, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "table.insert(out, string.rep(\" \", level) ..\r\n\t       \"repeat \")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "table.insert(out, dump_block(srepeat.block, level + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "table.insert(out, string.rep(\" \", level) .. \"until \" ..\r\n\t       dump(srepeat.exp))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function dump_if(sif, level)\r\n  local out = {}\r\n  level = level or 0\r\n  for i, clause in ipairs(sif.clauses) do\r\n    local name\r\n    if i == 1 then name = \"if \" else name = \"elseif \" end\r\n    table.insert(out, string.rep(\" \", level) ..\r\n\t\t \t       name .. dump(clause.cond) .. \" then \")\r\n    table.insert(out, dump_block(clause.block, level + 2))\r\n  end\r\n  if sif.block_else then\r\n    table.insert(out, string.rep(\" \", level) .. \"else\")\r\n    table.insert(out, dump_block(sif.block_else, level + 2))\r\n  end\r\n  table.insert(out, string.rep(\" \", level) .. \"end\")\r\n  return table.concat(out, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "for i, clause in ipairs(sif.clauses) do\r\n    local name\r\n    if i == 1 then name = \"if \" else name = \"elseif \" end\r\n    table.insert(out, string.rep(\" \", level) ..\r\n\t\t \t       name .. dump(clause.cond) .. \" then \")\r\n    table.insert(out, dump_block(clause.block, level + 2))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if i == 1 then name = \"if \" else name = \"elseif \" end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "name = \"if \"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "name = \"elseif \"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "table.insert(out, string.rep(\" \", level) ..\r\n\t\t \t       name .. dump(clause.cond) .. \" then \")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "table.insert(out, dump_block(clause.block, level + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if sif.block_else then\r\n    table.insert(out, string.rep(\" \", level) .. \"else\")\r\n    table.insert(out, dump_block(sif.block_else, level + 2))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "table.insert(out, string.rep(\" \", level) .. \"else\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "table.insert(out, dump_block(sif.block_else, level + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function dump_do(sdo, level)\r\n  local out = {}\r\n  level = level or 0\r\n  table.insert(out, string.rep(\" \", level) .. \"do\")\r\n  table.insert(out, dump_block(sdo.block, level + 2))\r\n  table.insert(out, string.rep(\" \", level) .. \"end\")\r\n  return table.concat(out, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "table.insert(out, string.rep(\" \", level) .. \"do\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "table.insert(out, dump_block(sdo.block, level + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function dump_nfor(snfor, level)\r\n  local out = {}\r\n  level = level or 0\r\n  local step = \"\"\r\n  if snfor.step then\r\n    step = \",\" .. dump(snfor.step)\r\n  end\r\n  table.insert(out, string.rep(\" \", level) .. \"for \" ..\r\n\t       dump(snfor.var) .. \"=\" .. dump(snfor.start) ..\r\n\t\t \",\" .. dump(snfor.finish) .. step .. \" do\")\r\n  table.insert(out, dump_block(snfor.block, level + 2))\r\n  table.insert(out, string.rep(\" \", level) .. \"end\")\r\n  return table.concat(out, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local step = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if snfor.step then\r\n    step = \",\" .. dump(snfor.step)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "step = \",\" .. dump(snfor.step)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "table.insert(out, string.rep(\" \", level) .. \"for \" ..\r\n\t       dump(snfor.var) .. \"=\" .. dump(snfor.start) ..\r\n\t\t \",\" .. dump(snfor.finish) .. step .. \" do\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "table.insert(out, dump_block(snfor.block, level + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function dump_gfor(sgfor, level)\r\n  local out = {}\r\n  level = level or 0\r\n  table.insert(out, string.rep(\" \", level) .. \"for \" ..\r\n\t       dump_list(sgfor.vars) .. \" in \" ..\r\n\t\t dump_list(sgfor.exps) .. \" do\")\r\n  table.insert(out, dump_block(sgfor.block, level + 2))\r\n  table.insert(out, string.rep(\" \", level) .. \"end\")\r\n  return table.concat(out, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "table.insert(out, string.rep(\" \", level) .. \"for \" ..\r\n\t       dump_list(sgfor.vars) .. \" in \" ..\r\n\t\t dump_list(sgfor.exps) .. \" do\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "table.insert(out, dump_block(sgfor.block, level + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function dump_function(sfunction, level)\r\n  local out = {}\r\n  level = level or 0\r\n  local islocal, name = \"\", \"\"\r\n  if sfunction.islocal then islocal = \"local \" end\r\n  if sfunction.name then name = dump(sfunction.name) end\r\n  table.insert(out, string.rep(\" \", level) .. islocal .. \"function \" ..\r\n\t       name .. \" (\" .. dump_list(sfunction.parlist) .. \")\")\r\n  table.insert(out, dump_block(sfunction.block, level + 2))\r\n  table.insert(out, string.rep(\" \", level) .. \"end\")\r\n  return table.concat(out, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local islocal, name = \"\", \"\"",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if sfunction.islocal then islocal = \"local \" end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "islocal = \"local \"",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if sfunction.name then name = dump(sfunction.name) end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "name = dump(sfunction.name)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "table.insert(out, string.rep(\" \", level) .. islocal .. \"function \" ..\r\n\t       name .. \" (\" .. dump_list(sfunction.parlist) .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "table.insert(out, dump_block(sfunction.block, level + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function dump_local(slocal, level)\r\n  level = level or 0\r\n  local exps = \"\"\r\n  if slocal.exps then exps = \" = \" .. dump_list(slocal.exps) end\r\n  return string.rep(\" \", level) .. \"local \" .. \r\n    dump_list(slocal.names) .. exps\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local exps = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if slocal.exps then exps = \" = \" .. dump_list(slocal.exps) end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "exps = \" = \" .. dump_list(slocal.exps)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function dump_assign(sassign, level)\r\n  level = level or 0\r\n  return string.rep(\" \", level) ..  \r\n    dump_list(sassign.vars) .. \" = \" .. dump_list(sassign.exps)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function dump_break(sbreak, level)\r\n  return string.rep(\" \", level) .. \"break\"\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function dump_return(sreturn, level)\r\n  level = level or 0\r\n  return string.rep(\" \", level) .. \"return \" .. dump_list(sreturn.exps)\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function dump_list(list, level, break_n)\r\n  local out = {}\r\n  level = level or 0\r\n  for i, item in ipairs(list) do\r\n    local br = \"\"\r\n    if break_n and (i % break_n) == 0 then\r\n      br = \"\\n\" .. string.rep(\" \", level)\r\n    end\r\n    table.insert(out, br .. dump(item, level))\r\n  end\r\n  return table.concat(out, \",\")\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "for i, item in ipairs(list) do\r\n    local br = \"\"\r\n    if break_n and (i % break_n) == 0 then\r\n      br = \"\\n\" .. string.rep(\" \", level)\r\n    end\r\n    table.insert(out, br .. dump(item, level))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 74,
    "text": "local br = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if break_n and (i % break_n) == 0 then\r\n      br = \"\\n\" .. string.rep(\" \", level)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "br = \"\\n\" .. string.rep(\" \", level)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "table.insert(out, br .. dump(item, level))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function dump_var(svar, level)\r\n  local out = {}\r\n  level = level or 0\r\n  table.insert(out, dump(svar.prefix, level))\r\n  for _, item in ipairs(svar.indexes) do\r\n    if item.tag then\r\n      table.insert(out, dump(item, level))\r\n    else\r\n      table.insert(out,\"(\" .. dump_list(item, level) .. \")\") \r\n    end\r\n  end\r\n  return table.concat(out)\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "table.insert(out, dump(svar.prefix, level))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "for _, item in ipairs(svar.indexes) do\r\n    if item.tag then\r\n      table.insert(out, dump(item, level))\r\n    else\r\n      table.insert(out,\"(\" .. dump_list(item, level) .. \")\") \r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "if item.tag then\r\n      table.insert(out, dump(item, level))\r\n    else\r\n      table.insert(out,\"(\" .. dump_list(item, level) .. \")\") \r\n    end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "table.insert(out, dump(item, level))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "table.insert(out,\"(\" .. dump_list(item, level) .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function dump_call(scall, level)\r\n  local out = {}\r\n  level = level or 0\r\n  local method = \"\"\r\n  if scall.method then method = \":\" .. scall.method end\r\n  return string.rep(\" \", level) .. dump_var(scall, level) ..\r\n    method .. \"(\" .. dump_list(scall.args, level) .. \")\"\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local method = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if scall.method then method = \":\" .. scall.method end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "method = \":\" .. scall.method",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function dump_primaryexp(pexp, level)\r\n  level = level or 0\r\n  return dump_var(pexp, level)\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function dump_method(mcall, level)\r\n  level = level or 0\r\n  return string.rep(\" \", level) .. \":\" .. mcall.method .. \"(\" ..\r\n    dump_list(mcall.args, level) .. \")\"\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function dump_name(name, level)\r\n  return name.val\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function dump_string(s, level)\r\n  return string.format(\"%q\", s.val)\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function dump_number(n, level)\r\n  return tostring(n.val)\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function dump_expindex(expindex, level)\r\n  level = level or 0\r\n  return \"[\" .. dump(expindex.exp, level) .. \"]\"\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function dump_nameindex(nameindex, level)\r\n  return \".\" .. nameindex.name\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function dump_constructor(cons, level)\r\n  level = level or 0\r\n  return \"{ \" .. dump_list(cons.fields, level+2, 4) .. \" }\" \r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function dump_namefield(namefield, level)\r\n  level = level or 0\r\n  return namefield.name .. \"=\" .. dump(namefield.exp, level)\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function dump_indexfield(indexfield, level)\r\n  level = level or 0\r\n  return \"[\" .. dump(indexfield.name, level) .. \"]=\" .. \r\n    dump(indexfield.exp, level)\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function dump_funcname(funcname, level)\r\n  level = level or 0\r\n  local indexes = table.concat(funcname.indexes, \".\")\r\n  if #funcname.indexes>0 then indexes = \".\" .. indexes end\r\n  local self = \"\"\r\n  if funcname.self then self = \":\" .. funcname.self end\r\n  return funcname.var.val .. indexes .. self\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local indexes = table.concat(funcname.indexes, \".\")",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if #funcname.indexes>0 then indexes = \".\" .. indexes end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "indexes = \".\" .. indexes",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "local self = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if funcname.self then self = \":\" .. funcname.self end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "self = \":\" .. funcname.self",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function dump_binop(binop, level)\r\n  level = level or 0\r\n  local op = binop.op\r\n  if op == \"and\" or op == \"or\" then op = \" \" .. op .. \" \" end\r\n  return \"(\" .. dump(binop.left, level) .. op .. \r\n    dump(binop.right, level) .. \")\"\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local op = binop.op",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "if op == \"and\" or op == \"or\" then op = \" \" .. op .. \" \" end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "op = \" \" .. op .. \" \"",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function dump_unop(unop, level)\r\n  level = level or 0\r\n  local op = unop.op\r\n  if op == \"not\" then op = \"not \" end\r\n  return op .. dump(unop.operand, level)\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local op = unop.op",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if op == \"not\" then op = \"not \" end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "op = \"not \"",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "",
    "type": "function container"
  }, {
    "id": 130,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 131,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 132,
    "text": "module",
    "type": "global function"
  }, {
    "id": 133,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 134,
    "text": "type",
    "type": "global function"
  }, {
    "id": 135,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 136,
    "text": "_M[\"dump_\" .. tree.tag]",
    "type": "global function"
  }, {
    "id": 137,
    "text": "format",
    "type": "global function"
  }, {
    "id": 138,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 139,
    "text": "",
    "type": "variable container"
  }, {
    "id": 140,
    "text": "",
    "type": "require container"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  } ]
}