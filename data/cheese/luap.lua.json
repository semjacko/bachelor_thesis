{
  "_filename": "luap.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cheese/src/luap/luap.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 33,
    "label": "has",
    "to": 24
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 24
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 24
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 48,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 51
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 51
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 47,
    "label": "has",
    "to": 24
  }, {
    "from": 47,
    "label": "has",
    "to": 24
  }, {
    "from": 41,
    "label": "has",
    "to": 72
  }, {
    "from": 40,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 48,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 51
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 51
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 74,
    "label": "has",
    "to": 24
  }, {
    "from": 74,
    "label": "has",
    "to": 24
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 24
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 24
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 24
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 24
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 24
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 24
  }, {
    "from": 95,
    "label": "has",
    "to": 24
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 24
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 24
  }, {
    "from": 101,
    "label": "has",
    "to": 24
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 24
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 24
  }, {
    "from": 106,
    "label": "has",
    "to": 24
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 60
  }, {
    "from": 109,
    "label": "has",
    "to": 24
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 24
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 116,
    "label": "has",
    "to": 122
  }, {
    "from": 114,
    "label": "has",
    "to": 24
  }, {
    "from": 114,
    "label": "has",
    "to": 24
  }, {
    "from": 114,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 24
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 24
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 128,
    "label": "has",
    "to": 24
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 24
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 24
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 24
  }, {
    "from": 138,
    "label": "has",
    "to": 24
  }, {
    "from": 138,
    "label": "has",
    "to": 24
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 142,
    "label": "has",
    "to": 24
  }, {
    "from": 142,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 24
  }, {
    "from": 147,
    "label": "has",
    "to": 24
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 150,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 150,
    "label": "has",
    "to": 24
  }, {
    "from": 150,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 24
  }, {
    "from": 158,
    "label": "has",
    "to": 24
  }, {
    "from": 159,
    "label": "has",
    "to": 24
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 24
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 163,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 163,
    "label": "has",
    "to": 24
  }, {
    "from": 163,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 171,
    "label": "has",
    "to": 24
  }, {
    "from": 171,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 24
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 24
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 24
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 182,
    "label": "has",
    "to": 24
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 24
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 192
  }, {
    "from": 189,
    "label": "has",
    "to": 24
  }, {
    "from": 189,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 24
  }, {
    "from": 198,
    "label": "has",
    "to": 24
  }, {
    "from": 199,
    "label": "has",
    "to": 24
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 190
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 201,
    "label": "has",
    "to": 205
  }, {
    "from": 201,
    "label": "has",
    "to": 206
  }, {
    "from": 201,
    "label": "has",
    "to": 207
  }, {
    "from": 201,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 201,
    "label": "has",
    "to": 212
  }, {
    "from": 201,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 201,
    "label": "has",
    "to": 24
  }, {
    "from": 201,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 49
  }, {
    "from": 219,
    "label": "has",
    "to": 24
  }, {
    "from": 219,
    "label": "has",
    "to": 50
  }, {
    "from": 219,
    "label": "has",
    "to": 51
  }, {
    "from": 219,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 219,
    "label": "has",
    "to": 55
  }, {
    "from": 219,
    "label": "has",
    "to": 24
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 60
  }, {
    "from": 221,
    "label": "has",
    "to": 24
  }, {
    "from": 221,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 51
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 51
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 221,
    "label": "has",
    "to": 24
  }, {
    "from": 221,
    "label": "has",
    "to": 24
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 6,
    "label": "calls",
    "to": 244
  }, {
    "from": 14,
    "label": "calls",
    "to": 244
  }, {
    "from": 14,
    "label": "calls",
    "to": 244
  }, {
    "from": 9,
    "label": "calls",
    "to": 6
  }, {
    "from": 26,
    "label": "calls",
    "to": 224
  }, {
    "from": 74,
    "label": "calls",
    "to": 224
  }, {
    "from": 74,
    "label": "calls",
    "to": 224
  }, {
    "from": 223,
    "label": "calls",
    "to": 225
  }, {
    "from": 223,
    "label": "calls",
    "to": 225
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 14,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 237
  }, {
    "from": 223,
    "label": "calls",
    "to": 238
  }, {
    "from": 9,
    "label": "calls",
    "to": 226
  }, {
    "from": 40,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 226
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 6,
    "label": "calls",
    "to": 239
  }, {
    "from": 14,
    "label": "calls",
    "to": 239
  }, {
    "from": 23,
    "label": "calls",
    "to": 239
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 223,
    "label": "calls",
    "to": 239
  }, {
    "from": 40,
    "label": "calls",
    "to": 240
  }, {
    "from": 40,
    "label": "calls",
    "to": 40
  }, {
    "from": 223,
    "label": "calls",
    "to": 40
  }, {
    "from": 223,
    "label": "calls",
    "to": 9
  }, {
    "from": 223,
    "label": "calls",
    "to": 251
  }, {
    "from": 223,
    "label": "calls",
    "to": 251
  }, {
    "from": 223,
    "label": "calls",
    "to": 229
  }, {
    "from": 223,
    "label": "calls",
    "to": 229
  }, {
    "from": 223,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 241
  }, {
    "from": 26,
    "label": "calls",
    "to": 241
  }, {
    "from": 223,
    "label": "calls",
    "to": 242
  }, {
    "from": 223,
    "label": "calls",
    "to": 242
  }, {
    "from": 223,
    "label": "calls",
    "to": 243
  }, {
    "from": 223,
    "label": "calls",
    "to": 243
  }, {
    "from": 223,
    "label": "calls",
    "to": 243
  }, {
    "from": 223,
    "label": "calls",
    "to": 236
  }, {
    "from": 223,
    "label": "calls",
    "to": 4
  }, {
    "from": 223,
    "label": "calls",
    "to": 4
  }, {
    "from": 223,
    "label": "calls",
    "to": 4
  }, {
    "from": 223,
    "label": "calls",
    "to": 26
  }, {
    "from": 26,
    "label": "calls",
    "to": 246
  }, {
    "from": 74,
    "label": "calls",
    "to": 246
  }, {
    "from": 74,
    "label": "calls",
    "to": 246
  }, {
    "from": 223,
    "label": "calls",
    "to": 230
  }, {
    "from": 223,
    "label": "calls",
    "to": 227
  }, {
    "from": 223,
    "label": "calls",
    "to": 231
  }, {
    "from": 223,
    "label": "calls",
    "to": 231
  }, {
    "from": 223,
    "label": "calls",
    "to": 231
  }, {
    "from": 6,
    "label": "calls",
    "to": 231
  }, {
    "from": 223,
    "label": "calls",
    "to": 231
  }, {
    "from": 223,
    "label": "calls",
    "to": 231
  }, {
    "from": 223,
    "label": "calls",
    "to": 231
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 74,
    "label": "calls",
    "to": 232
  }, {
    "from": 74,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 232
  }, {
    "from": 223,
    "label": "calls",
    "to": 248
  }, {
    "from": 223,
    "label": "calls",
    "to": 228
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 23
  }, {
    "from": 223,
    "label": "calls",
    "to": 19
  }, {
    "from": 19,
    "label": "calls",
    "to": 14
  }, {
    "from": 40,
    "label": "calls",
    "to": 74
  }, {
    "from": 223,
    "label": "calls",
    "to": 235
  }, {
    "from": 223,
    "label": "calls",
    "to": 247
  }, {
    "from": 223,
    "label": "calls",
    "to": 247
  }, {
    "from": 74,
    "label": "calls",
    "to": 3
  }, {
    "from": 74,
    "label": "calls",
    "to": 3
  }, {
    "from": 74,
    "label": "calls",
    "to": 3
  }, {
    "from": 74,
    "label": "calls",
    "to": 3
  }, {
    "from": 74,
    "label": "calls",
    "to": 3
  }, {
    "from": 74,
    "label": "calls",
    "to": 3
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 249
  }, {
    "from": 223,
    "label": "calls",
    "to": 250
  }, {
    "from": 14,
    "label": "calls",
    "to": 250
  }, {
    "from": 223,
    "label": "calls",
    "to": 250
  }, {
    "from": 223,
    "label": "calls",
    "to": 245
  }, {
    "from": 223,
    "label": "calls",
    "to": 234
  }, {
    "from": 223,
    "label": "calls",
    "to": 234
  }, {
    "from": 223,
    "label": "calls",
    "to": 234
  }, {
    "from": 223,
    "label": "calls",
    "to": 234
  }, {
    "from": 26,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 40,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 223,
    "label": "calls",
    "to": 233
  }, {
    "from": 2,
    "label": "contains",
    "to": 223
  }, {
    "from": 223,
    "label": "declares",
    "to": 6
  }, {
    "from": 223,
    "label": "declares",
    "to": 9
  }, {
    "from": 223,
    "label": "declares",
    "to": 14
  }, {
    "from": 223,
    "label": "declares",
    "to": 19
  }, {
    "from": 223,
    "label": "declares",
    "to": 23
  }, {
    "from": 223,
    "label": "declares",
    "to": 26
  }, {
    "from": 223,
    "label": "declares",
    "to": 32
  }, {
    "from": 223,
    "label": "declares",
    "to": 33
  }, {
    "from": 223,
    "label": "declares",
    "to": 35
  }, {
    "from": 223,
    "label": "declares",
    "to": 36
  }, {
    "from": 223,
    "label": "declares",
    "to": 40
  }, {
    "from": 223,
    "label": "declares",
    "to": 74
  }, {
    "from": 223,
    "label": "declares",
    "to": 76
  }, {
    "from": 223,
    "label": "declares",
    "to": 83
  }, {
    "from": 223,
    "label": "declares",
    "to": 85
  }, {
    "from": 223,
    "label": "declares",
    "to": 87
  }, {
    "from": 223,
    "label": "declares",
    "to": 92
  }, {
    "from": 223,
    "label": "declares",
    "to": 94
  }, {
    "from": 223,
    "label": "declares",
    "to": 95
  }, {
    "from": 223,
    "label": "declares",
    "to": 96
  }, {
    "from": 223,
    "label": "declares",
    "to": 101
  }, {
    "from": 223,
    "label": "declares",
    "to": 104
  }, {
    "from": 223,
    "label": "declares",
    "to": 106
  }, {
    "from": 223,
    "label": "declares",
    "to": 109
  }, {
    "from": 223,
    "label": "declares",
    "to": 114
  }, {
    "from": 223,
    "label": "declares",
    "to": 124
  }, {
    "from": 223,
    "label": "declares",
    "to": 126
  }, {
    "from": 223,
    "label": "declares",
    "to": 128
  }, {
    "from": 223,
    "label": "declares",
    "to": 133
  }, {
    "from": 223,
    "label": "declares",
    "to": 138
  }, {
    "from": 223,
    "label": "declares",
    "to": 142
  }, {
    "from": 223,
    "label": "declares",
    "to": 147
  }, {
    "from": 223,
    "label": "declares",
    "to": 150
  }, {
    "from": 223,
    "label": "declares",
    "to": 157
  }, {
    "from": 223,
    "label": "declares",
    "to": 158
  }, {
    "from": 223,
    "label": "declares",
    "to": 159
  }, {
    "from": 223,
    "label": "declares",
    "to": 161
  }, {
    "from": 223,
    "label": "declares",
    "to": 163
  }, {
    "from": 223,
    "label": "declares",
    "to": 171
  }, {
    "from": 223,
    "label": "declares",
    "to": 176
  }, {
    "from": 223,
    "label": "declares",
    "to": 178
  }, {
    "from": 223,
    "label": "declares",
    "to": 180
  }, {
    "from": 223,
    "label": "declares",
    "to": 182
  }, {
    "from": 223,
    "label": "declares",
    "to": 187
  }, {
    "from": 223,
    "label": "declares",
    "to": 189
  }, {
    "from": 223,
    "label": "declares",
    "to": 194
  }, {
    "from": 223,
    "label": "declares",
    "to": 197
  }, {
    "from": 223,
    "label": "declares",
    "to": 198
  }, {
    "from": 223,
    "label": "declares",
    "to": 199
  }, {
    "from": 223,
    "label": "declares",
    "to": 201
  }, {
    "from": 223,
    "label": "declares",
    "to": 216
  }, {
    "from": 223,
    "label": "declares",
    "to": 219
  }, {
    "from": 223,
    "label": "declares",
    "to": 221
  }, {
    "from": 2,
    "label": "contains",
    "to": 252
  }, {
    "from": 2,
    "label": "contains",
    "to": 253
  }, {
    "from": 252,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 252,
    "label": "initializes",
    "to": 256
  }, {
    "from": 256,
    "label": "assigns",
    "to": 257
  }, {
    "from": 252,
    "label": "initializes",
    "to": 258
  }, {
    "from": 258,
    "label": "assigns",
    "to": 259
  }, {
    "from": 252,
    "label": "initializes",
    "to": 260
  }, {
    "from": 260,
    "label": "assigns",
    "to": 261
  }, {
    "from": 252,
    "label": "initializes",
    "to": 262
  }, {
    "from": 262,
    "label": "assigns",
    "to": 263
  }, {
    "from": 252,
    "label": "initializes",
    "to": 264
  }, {
    "from": 264,
    "label": "assigns",
    "to": 265
  }, {
    "from": 252,
    "label": "initializes",
    "to": 266
  }, {
    "from": 266,
    "label": "assigns",
    "to": 267
  }, {
    "from": 252,
    "label": "initializes",
    "to": 268
  }, {
    "from": 268,
    "label": "assigns",
    "to": 269
  }, {
    "from": 252,
    "label": "initializes",
    "to": 270
  }, {
    "from": 270,
    "label": "assigns",
    "to": 271
  }, {
    "from": 252,
    "label": "initializes",
    "to": 272
  }, {
    "from": 272,
    "label": "assigns",
    "to": 273
  }, {
    "from": 252,
    "label": "initializes",
    "to": 274
  }, {
    "from": 274,
    "label": "assigns",
    "to": 275
  }, {
    "from": 252,
    "label": "initializes",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 252,
    "label": "initializes",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 252,
    "label": "initializes",
    "to": 280
  }, {
    "from": 280,
    "label": "assigns",
    "to": 281
  }, {
    "from": 252,
    "label": "initializes",
    "to": 282
  }, {
    "from": 282,
    "label": "assigns",
    "to": 283
  }, {
    "from": 252,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 252,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 252,
    "label": "initializes",
    "to": 288
  }, {
    "from": 288,
    "label": "assigns",
    "to": 289
  }, {
    "from": 252,
    "label": "initializes",
    "to": 290
  }, {
    "from": 290,
    "label": "assigns",
    "to": 291
  }, {
    "from": 252,
    "label": "initializes",
    "to": 292
  }, {
    "from": 292,
    "label": "assigns",
    "to": 293
  }, {
    "from": 252,
    "label": "initializes",
    "to": 294
  }, {
    "from": 294,
    "label": "assigns",
    "to": 295
  }, {
    "from": 252,
    "label": "initializes",
    "to": 296
  }, {
    "from": 296,
    "label": "assigns",
    "to": 297
  }, {
    "from": 252,
    "label": "initializes",
    "to": 298
  }, {
    "from": 298,
    "label": "assigns",
    "to": 299
  }, {
    "from": 252,
    "label": "initializes",
    "to": 300
  }, {
    "from": 300,
    "label": "assigns",
    "to": 301
  }, {
    "from": 252,
    "label": "initializes",
    "to": 302
  }, {
    "from": 302,
    "label": "assigns",
    "to": 303
  }, {
    "from": 252,
    "label": "initializes",
    "to": 304
  }, {
    "from": 304,
    "label": "assigns",
    "to": 305
  }, {
    "from": 252,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "assigns",
    "to": 307
  }, {
    "from": 252,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 252,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 252,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 252,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 252,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 252,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 252,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 252,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 252,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 252,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 252,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 252,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 252,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 252,
    "label": "initializes",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 252,
    "label": "initializes",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 252,
    "label": "initializes",
    "to": 338
  }, {
    "from": 338,
    "label": "assigns",
    "to": 339
  }, {
    "from": 252,
    "label": "initializes",
    "to": 340
  }, {
    "from": 340,
    "label": "assigns",
    "to": 341
  }, {
    "from": 252,
    "label": "initializes",
    "to": 342
  }, {
    "from": 342,
    "label": "assigns",
    "to": 343
  }, {
    "from": 252,
    "label": "initializes",
    "to": 344
  }, {
    "from": 344,
    "label": "assigns",
    "to": 345
  }, {
    "from": 252,
    "label": "initializes",
    "to": 346
  }, {
    "from": 346,
    "label": "assigns",
    "to": 347
  }, {
    "from": 252,
    "label": "initializes",
    "to": 348
  }, {
    "from": 348,
    "label": "assigns",
    "to": 349
  }, {
    "from": 252,
    "label": "initializes",
    "to": 350
  }, {
    "from": 350,
    "label": "assigns",
    "to": 351
  }, {
    "from": 252,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "assigns",
    "to": 353
  }, {
    "from": 252,
    "label": "initializes",
    "to": 354
  }, {
    "from": 354,
    "label": "assigns",
    "to": 355
  }, {
    "from": 252,
    "label": "initializes",
    "to": 356
  }, {
    "from": 356,
    "label": "assigns",
    "to": 357
  }, {
    "from": 252,
    "label": "initializes",
    "to": 358
  }, {
    "from": 358,
    "label": "assigns",
    "to": 359
  }, {
    "from": 252,
    "label": "initializes",
    "to": 360
  }, {
    "from": 360,
    "label": "assigns",
    "to": 361
  }, {
    "from": 252,
    "label": "initializes",
    "to": 362
  }, {
    "from": 362,
    "label": "assigns",
    "to": 363
  }, {
    "from": 252,
    "label": "initializes",
    "to": 364
  }, {
    "from": 364,
    "label": "assigns",
    "to": 365
  }, {
    "from": 252,
    "label": "initializes",
    "to": 366
  }, {
    "from": 366,
    "label": "assigns",
    "to": 367
  }, {
    "from": 252,
    "label": "initializes",
    "to": 368
  }, {
    "from": 368,
    "label": "assigns",
    "to": 369
  }, {
    "from": 252,
    "label": "initializes",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 252,
    "label": "initializes",
    "to": 372
  }, {
    "from": 372,
    "label": "assigns",
    "to": 373
  }, {
    "from": 252,
    "label": "initializes",
    "to": 374
  }, {
    "from": 374,
    "label": "assigns",
    "to": 375
  }, {
    "from": 252,
    "label": "initializes",
    "to": 376
  }, {
    "from": 376,
    "label": "assigns",
    "to": 377
  }, {
    "from": 252,
    "label": "initializes",
    "to": 378
  }, {
    "from": 378,
    "label": "assigns",
    "to": 379
  }, {
    "from": 252,
    "label": "initializes",
    "to": 380
  }, {
    "from": 380,
    "label": "assigns",
    "to": 381
  }, {
    "from": 252,
    "label": "initializes",
    "to": 382
  }, {
    "from": 382,
    "label": "assigns",
    "to": 383
  }, {
    "from": 252,
    "label": "initializes",
    "to": 384
  }, {
    "from": 384,
    "label": "assigns",
    "to": 385
  }, {
    "from": 252,
    "label": "initializes",
    "to": 386
  }, {
    "from": 386,
    "label": "assigns",
    "to": 387
  }, {
    "from": 252,
    "label": "initializes",
    "to": 388
  }, {
    "from": 388,
    "label": "assigns",
    "to": 389
  }, {
    "from": 252,
    "label": "initializes",
    "to": 390
  }, {
    "from": 390,
    "label": "assigns",
    "to": 391
  }, {
    "from": 252,
    "label": "initializes",
    "to": 392
  }, {
    "from": 392,
    "label": "assigns",
    "to": 393
  }, {
    "from": 252,
    "label": "initializes",
    "to": 394
  }, {
    "from": 394,
    "label": "assigns",
    "to": 395
  }, {
    "from": 253,
    "label": "initializes",
    "to": 396
  }, {
    "from": 396,
    "label": "requires",
    "to": 1
  }, {
    "from": 397,
    "label": "requires",
    "to": 2
  }, {
    "from": 398,
    "label": "requires",
    "to": 2
  }, {
    "from": 399,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cheese",
    "type": "module"
  }, {
    "id": 2,
    "text": "luap",
    "type": "module"
  }, {
    "id": 3,
    "text": "function concat (tab)\r\n  if type(tab) == \"table\" then\r\n    local res = {}\r\n    for i, l in ipairs(tab) do\r\n      res[i] = concat(l)\r\n    end\r\n    return table.concat(res)\r\n  else\r\n    return tostring(tab)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function compile(rules)\r\n  if getmetatable(rules) == rule_mt then\r\n    return compile_rule(rules, {}, {})\r\n  else\r\n    local parsers = {}\r\n    for name, rule in pairs(rules) do\r\n      compile_named(name, rules, parsers)\r\n    end\r\n    return parsers\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function open_grammar(grammar_table)\r\n  local env = getfenv(2)\r\n  local old_mt = getmetatable(env)\r\n  if type(grammar_table) == \"string\" then\r\n    env[grammar_table] = env[grammar_table] or {}\r\n    grammar_table = env[grammar_table]\r\n  end\r\n  local grammar_env = {\r\n    char = char, class = class, digit = digit, any = any,\r\n    plus = plus, star = star, opt = opt, pand = pand, pnot = pnot,\r\n    seq = seq, choice = choice, bind = bind, handle = handle,\r\n    concat = concat, skip = skip, ext = ext, close = close_grammar,\r\n    str = str, ref = ref\r\n  }\r\n  local mt_grammar = { grammar = grammar_table, old_mt = old_mt }\r\n  function mt_grammar.__index(t, k)\r\n    if grammar_env[k] then\r\n      return grammar_env[k]\r\n    elseif old_mt and type(old_mt.__index) == \"table\" and old_mt.__index[k] then\r\n      return old_mt.__index[k]\r\n    elseif old_mt and type(old_mt.__index) == \"function\" and old_mt.__index(t, k) then\r\n      return old_mt.__index(t, k)\r\n    elseif type(k) == \"string\" then\r\n      return ref(k)\r\n    else\r\n      return nil\r\n    end\r\n  end\r\n  function mt_grammar.__newindex(t, k, v)\r\n    if getmetatable(v) == rule_mt then\r\n      mt_grammar.grammar[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"table\" then\r\n      old_mt.__newindex[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"function\" then\r\n      old_mt.__newindex(t, k, v)\r\n    else\r\n      rawset(t, k, v)\r\n    end\r\n  end\r\n  setmetatable(env, mt_grammar)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function keyword(token)\r\n  _M[string.upper(token)] = str(token) .. pnot(NAME_CHARS) .. SPACING\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "_M[string.upper(token)] = str(token) .. pnot(NAME_CHARS) .. SPACING",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function define_keywords()\r\n  for i, token in ipairs(keywords) do\r\n    keyword_tab[token] = true\r\n    keyword(token)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "for i, token in ipairs(keywords) do\r\n    keyword_tab[token] = true\r\n    keyword(token)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "keyword_tab[token] = true",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "keyword(token)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function op(name, token)\r\n  if string.len(token) == 1 then\r\n    _M[string.upper(name)] = char(token) .. SPACING\r\n  else\r\n    _M[string.upper(name)] = str(token) .. SPACING\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if string.len(token) == 1 then\r\n    _M[string.upper(name)] = char(token) .. SPACING\r\n  else\r\n    _M[string.upper(name)] = str(token) .. SPACING\r\n  end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "_M[string.upper(name)] = char(token) .. SPACING",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "_M[string.upper(name)] = str(token) .. SPACING",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function define_ops()\r\n  for name, sop in pairs(ops) do\r\n    op(name, sop)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "for name, sop in pairs(ops) do\r\n    op(name, sop)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "op(name, sop)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function escape(token, code)\r\n  return str(token) % function () return code end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function define_escapes()\r\n  local escs = {}\r\n  for name, esc in pairs(escapes) do\r\n    table.insert(escs, esc)\r\n  end\r\n  ESCAPE = choice(unpack(escs))\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local escs = {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "for name, esc in pairs(escapes) do\r\n    table.insert(escs, esc)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 29,
    "text": "table.insert(escs, esc)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "ESCAPE = choice(unpack(escs))",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function (str) return { tag = \"string\", val = str } end",
    "type": "function"
  }, {
    "id": 33,
    "text": "function (str)\r\n\t\t\t    return { tag = \"string\", val = str } end",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function (str) return { tag = \"number\", val = tonumber(str) } end",
    "type": "function"
  }, {
    "id": 36,
    "text": "function (str)\r\n\t\t     if keyword_tab[str] then\r\n\t\t       error(str .. \" is a reserved word\")\r\n\t\t     else\r\n\t\t       return { tag = \"name\", val = str }\r\n\t\t     end\r\n\t\t   end",
    "type": "function"
  }, {
    "id": 37,
    "text": "if keyword_tab[str] then\r\n\t\t       error(str .. \" is a reserved word\")\r\n\t\t     else\r\n\t\t       return { tag = \"name\", val = str }\r\n\t\t     end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "error(str .. \" is a reserved word\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function gen_expr(prec)\r\n  if prec > #prec_classes then\r\n    _M[\"Exp_\" .. prec] = SimpleExp\r\n  else\r\n    gen_expr(prec + 1)\r\n    local this_class = {}\r\n    for _, op in ipairs(prec_classes[prec]) do\r\n      table.insert(this_class, ref(op))\r\n    end\r\n    local function expr()\r\n      if prec_classes[prec].unary then\r\n\treturn (star(choice(unpack(this_class))) .. _M[\"Exp_\" .. (prec + 1)]) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[1] == 0 then return tree[2] end\r\n\t\t\t     local node = { tag = \"unop\", op = cheese.concat(tree[1][1]) }\r\n\t\t\t     local res = node\r\n\t\t\t     for i = 2, #tree[1] do\r\n\t\t\t       node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }\r\n\t\t\t       node = node.operand\r\n\t\t\t     end\r\n\t\t\t     node.operand = tree[2]\t\t\t\t\t\t\r\n\t\t\t     return res\t\t\t\t\t\t   \t\r\n\t\t\t   end\r\n      else\r\n\tlocal operator\r\n\tif #this_class == 1 then\r\n\t  operator = this_class[1]\r\n\telse\r\n\t  operator = choice(unpack(this_class)) \r\n        end\r\n\treturn (_M[\"Exp_\" .. (prec + 1)] .. star(operator .. _M[\"Exp_\" .. (prec + 1)])) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[2] == 0 then return tree[1] end\r\n\t\t\t     if prec_classes[prec].right then\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end\r\n\t\t\t       node.right = tree[2][#tree[2]][2]\t     \r\n\t\t\t       return res\r\n\t\t\t     else\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end\r\n\t\t\t       node.left = tree[1]\r\n\t\t\t       return res\r\n\t\t\t     end\r\n\t\t\t   end\r\n      end\r\n    end\r\n    _M[\"Exp_\" .. prec] = expr()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if prec > #prec_classes then\r\n    _M[\"Exp_\" .. prec] = SimpleExp\r\n  else\r\n    gen_expr(prec + 1)\r\n    local this_class = {}\r\n    for _, op in ipairs(prec_classes[prec]) do\r\n      table.insert(this_class, ref(op))\r\n    end\r\n    local function expr()\r\n      if prec_classes[prec].unary then\r\n\treturn (star(choice(unpack(this_class))) .. _M[\"Exp_\" .. (prec + 1)]) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[1] == 0 then return tree[2] end\r\n\t\t\t     local node = { tag = \"unop\", op = cheese.concat(tree[1][1]) }\r\n\t\t\t     local res = node\r\n\t\t\t     for i = 2, #tree[1] do\r\n\t\t\t       node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }\r\n\t\t\t       node = node.operand\r\n\t\t\t     end\r\n\t\t\t     node.operand = tree[2]\t\t\t\t\t\t\r\n\t\t\t     return res\t\t\t\t\t\t   \t\r\n\t\t\t   end\r\n      else\r\n\tlocal operator\r\n\tif #this_class == 1 then\r\n\t  operator = this_class[1]\r\n\telse\r\n\t  operator = choice(unpack(this_class)) \r\n        end\r\n\treturn (_M[\"Exp_\" .. (prec + 1)] .. star(operator .. _M[\"Exp_\" .. (prec + 1)])) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[2] == 0 then return tree[1] end\r\n\t\t\t     if prec_classes[prec].right then\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end\r\n\t\t\t       node.right = tree[2][#tree[2]][2]\t     \r\n\t\t\t       return res\r\n\t\t\t     else\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end\r\n\t\t\t       node.left = tree[1]\r\n\t\t\t       return res\r\n\t\t\t     end\r\n\t\t\t   end\r\n      end\r\n    end\r\n    _M[\"Exp_\" .. prec] = expr()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "_M[\"Exp_\" .. prec] = SimpleExp",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "gen_expr(prec + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local this_class = {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "for _, op in ipairs(prec_classes[prec]) do\r\n      table.insert(this_class, ref(op))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "table.insert(this_class, ref(op))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local function expr()\r\n      if prec_classes[prec].unary then\r\n\treturn (star(choice(unpack(this_class))) .. _M[\"Exp_\" .. (prec + 1)]) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[1] == 0 then return tree[2] end\r\n\t\t\t     local node = { tag = \"unop\", op = cheese.concat(tree[1][1]) }\r\n\t\t\t     local res = node\r\n\t\t\t     for i = 2, #tree[1] do\r\n\t\t\t       node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }\r\n\t\t\t       node = node.operand\r\n\t\t\t     end\r\n\t\t\t     node.operand = tree[2]\t\t\t\t\t\t\r\n\t\t\t     return res\t\t\t\t\t\t   \t\r\n\t\t\t   end\r\n      else\r\n\tlocal operator\r\n\tif #this_class == 1 then\r\n\t  operator = this_class[1]\r\n\telse\r\n\t  operator = choice(unpack(this_class)) \r\n        end\r\n\treturn (_M[\"Exp_\" .. (prec + 1)] .. star(operator .. _M[\"Exp_\" .. (prec + 1)])) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[2] == 0 then return tree[1] end\r\n\t\t\t     if prec_classes[prec].right then\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end\r\n\t\t\t       node.right = tree[2][#tree[2]][2]\t     \r\n\t\t\t       return res\r\n\t\t\t     else\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end\r\n\t\t\t       node.left = tree[1]\r\n\t\t\t       return res\r\n\t\t\t     end\r\n\t\t\t   end\r\n      end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 48,
    "text": "if prec_classes[prec].unary then\r\n\treturn (star(choice(unpack(this_class))) .. _M[\"Exp_\" .. (prec + 1)]) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[1] == 0 then return tree[2] end\r\n\t\t\t     local node = { tag = \"unop\", op = cheese.concat(tree[1][1]) }\r\n\t\t\t     local res = node\r\n\t\t\t     for i = 2, #tree[1] do\r\n\t\t\t       node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }\r\n\t\t\t       node = node.operand\r\n\t\t\t     end\r\n\t\t\t     node.operand = tree[2]\t\t\t\t\t\t\r\n\t\t\t     return res\t\t\t\t\t\t   \t\r\n\t\t\t   end\r\n      else\r\n\tlocal operator\r\n\tif #this_class == 1 then\r\n\t  operator = this_class[1]\r\n\telse\r\n\t  operator = choice(unpack(this_class)) \r\n        end\r\n\treturn (_M[\"Exp_\" .. (prec + 1)] .. star(operator .. _M[\"Exp_\" .. (prec + 1)])) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[2] == 0 then return tree[1] end\r\n\t\t\t     if prec_classes[prec].right then\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end\r\n\t\t\t       node.right = tree[2][#tree[2]][2]\t     \r\n\t\t\t       return res\r\n\t\t\t     else\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end\r\n\t\t\t       node.left = tree[1]\r\n\t\t\t       return res\r\n\t\t\t     end\r\n\t\t\t   end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "if #tree[1] == 0 then return tree[2] end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local node = { tag = \"unop\", op = cheese.concat(tree[1][1]) }",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local res = node",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "for i = 2, #tree[1] do\r\n\t\t\t       node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }\r\n\t\t\t       node = node.operand\r\n\t\t\t     end",
    "type": "statement:numericfor"
  }, {
    "id": 53,
    "text": "node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "node = node.operand",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "node.operand = tree[2]",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local operator",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if #this_class == 1 then\r\n\t  operator = this_class[1]\r\n\telse\r\n\t  operator = choice(unpack(this_class)) \r\n        end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "operator = this_class[1]",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "operator = choice(unpack(this_class))",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if #tree[2] == 0 then return tree[1] end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "if prec_classes[prec].right then\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end\r\n\t\t\t       node.right = tree[2][#tree[2]][2]\t     \r\n\t\t\t       return res\r\n\t\t\t     else\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end\r\n\t\t\t       node.left = tree[1]\r\n\t\t\t       return res\r\n\t\t\t     end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end",
    "type": "statement:numericfor"
  }, {
    "id": 64,
    "text": "node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "node = node.right",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "node.right = tree[2][#tree[2]][2]",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end",
    "type": "statement:numericfor"
  }, {
    "id": 69,
    "text": "node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "node = node.left",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "node.left = tree[1]",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "_M[\"Exp_\" .. prec] = expr()",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "local function expr()\r\n      if prec_classes[prec].unary then\r\n\treturn (star(choice(unpack(this_class))) .. _M[\"Exp_\" .. (prec + 1)]) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[1] == 0 then return tree[2] end\r\n\t\t\t     local node = { tag = \"unop\", op = cheese.concat(tree[1][1]) }\r\n\t\t\t     local res = node\r\n\t\t\t     for i = 2, #tree[1] do\r\n\t\t\t       node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }\r\n\t\t\t       node = node.operand\r\n\t\t\t     end\r\n\t\t\t     node.operand = tree[2]\t\t\t\t\t\t\r\n\t\t\t     return res\t\t\t\t\t\t   \t\r\n\t\t\t   end\r\n      else\r\n\tlocal operator\r\n\tif #this_class == 1 then\r\n\t  operator = this_class[1]\r\n\telse\r\n\t  operator = choice(unpack(this_class)) \r\n        end\r\n\treturn (_M[\"Exp_\" .. (prec + 1)] .. star(operator .. _M[\"Exp_\" .. (prec + 1)])) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[2] == 0 then return tree[1] end\r\n\t\t\t     if prec_classes[prec].right then\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end\r\n\t\t\t       node.right = tree[2][#tree[2]][2]\t     \r\n\t\t\t       return res\r\n\t\t\t     else\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end\r\n\t\t\t       node.left = tree[1]\r\n\t\t\t       return res\r\n\t\t\t     end\r\n\t\t\t   end\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function (tree)\r\n\t\t\t local funcname_node = { tag = \"funcname\", var = tree[1], indexes = {} }\r\n\t\t\t for _, v in ipairs(tree[2]) do\r\n\t\t\t   table.insert(funcname_node.indexes, v[2].val)\r\n\t\t\t end\r\n\t\t       \t if #tree[3]>0 then funcname_node.self = tree[3][1][2].val end\r\n\t\t\t return funcname_node\r\n\t\t       end",
    "type": "function"
  }, {
    "id": 77,
    "text": "local funcname_node = { tag = \"funcname\", var = tree[1], indexes = {} }",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "for _, v in ipairs(tree[2]) do\r\n\t\t\t   table.insert(funcname_node.indexes, v[2].val)\r\n\t\t\t end",
    "type": "statement:genericfor"
  }, {
    "id": 79,
    "text": "table.insert(funcname_node.indexes, v[2].val)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "if #tree[3]>0 then funcname_node.self = tree[3][1][2].val end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "funcname_node.self = tree[3][1][2].val",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function (tree)\r\n\t\t\t  return { tag = \"namefield\", name = tree[1].val, exp = tree[3] }\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function (tree)\r\n\t\t\t   return { tag = \"indexfield\", name = tree[2], exp = tree[5] }\r\n\t\t\t end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function (tree)\r\n\t\t\t  local fieldlist_node = { tree[1] }\r\n\t\t\t  for _, v in ipairs(tree[2]) do table.insert(fieldlist_node, v[2]) end\r\n\t\t\t  return fieldlist_node\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 88,
    "text": "local fieldlist_node = { tree[1] }",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for _, v in ipairs(tree[2]) do table.insert(fieldlist_node, v[2]) end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "table.insert(fieldlist_node, v[2])",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function (tree)\r\n\t\t\t    return { tag = \"constructor\", fields = tree[2] }    \r\n\t\t\t  end",
    "type": "function"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function (tree) return { tag = \"nameindex\", name = tree[2].val } end",
    "type": "function"
  }, {
    "id": 95,
    "text": "function (tree) return { tag = \"expindex\", exp = tree[2] } end",
    "type": "function"
  }, {
    "id": 96,
    "text": "function (tree)\r\n\t\t\t --if #tree[2] == 0 then return tree[1] end\r\n\t\t\t local explist_node = { tree[1] }\r\n\t\t\t for _, v in ipairs(tree[2]) do\r\n\t\t\t   table.insert(explist_node, v[2])\r\n\t\t\t end\r\n\t\t         return explist_node\r\n\t\t       end",
    "type": "function"
  }, {
    "id": 97,
    "text": "local explist_node = { tree[1] }",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "for _, v in ipairs(tree[2]) do\r\n\t\t\t   table.insert(explist_node, v[2])\r\n\t\t\t end",
    "type": "statement:genericfor"
  }, {
    "id": 99,
    "text": "table.insert(explist_node, v[2])",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function (tree)\r\n\t\t\t if tree.tag then\r\n\t\t\t   return { tree }\r\n\t\t\t else\r\n\t\t\t   return tree[2]\r\n\t\t\t end\r\n\t\t       end",
    "type": "function"
  }, {
    "id": 102,
    "text": "if tree.tag then\r\n\t\t\t   return { tree }\r\n\t\t\t else\r\n\t\t\t   return tree[2]\r\n\t\t\t end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function (tree) return { tag = \"method\",\r\n\t\t\t\t\t\t\t\tname = tree[2].val, args = tree[3] } end",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function (tree)\r\n\t\t\t  if tree.tag == \"name\" then return tree else return tree[2] end\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 107,
    "text": "if tree.tag == \"name\" then return tree else return tree[2] end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function (tree)\r\n\t\t\t   if #tree[2] == 0 then return tree[1] end\r\n\t\t\t   local pexp_node = { tag = \"primaryexp\", prefix = tree[1], indexes = {} }\r\n\t\t\t   for _, v in ipairs(tree[2]) do\r\n\t\t\t     table.insert(pexp_node.indexes, v)\r\n\t\t\t   end\r\n\t\t\t   return pexp_node\r\n\t\t         end",
    "type": "function"
  }, {
    "id": 110,
    "text": "local pexp_node = { tag = \"primaryexp\", prefix = tree[1], indexes = {} }",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "for _, v in ipairs(tree[2]) do\r\n\t\t\t     table.insert(pexp_node.indexes, v)\r\n\t\t\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 112,
    "text": "table.insert(pexp_node.indexes, v)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function (pexp)\r\n\t\t\t     local indexes = pexp.indexes\r\n\t\t\t     if (not indexes) or (indexes[#indexes].tag and \r\n\t\t\t        indexes[#indexes].tag ~= \"method\") then\r\n\t\t\t       return error(\"not a function call\")\r\n       \t\t\t     else\r\n\t\t\t       pexp.tag = \"call\"\r\n\t\t\t       if indexes[#indexes].tag then\r\n\t\t\t\t pexp.method = indexes[#indexes].name\r\n\t\t\t\t pexp.args = indexes[#indexes].args\r\n\t\t\t       else pexp.args = indexes[#indexes] end\r\n\t\t\t       table.remove(indexes, #indexes)\r\n\t\t\t       return pexp\r\n\t\t\t     end\r\n\t\t\t   end",
    "type": "function"
  }, {
    "id": 115,
    "text": "local indexes = pexp.indexes",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if (not indexes) or (indexes[#indexes].tag and \r\n\t\t\t        indexes[#indexes].tag ~= \"method\") then\r\n\t\t\t       return error(\"not a function call\")\r\n       \t\t\t     else\r\n\t\t\t       pexp.tag = \"call\"\r\n\t\t\t       if indexes[#indexes].tag then\r\n\t\t\t\t pexp.method = indexes[#indexes].name\r\n\t\t\t\t pexp.args = indexes[#indexes].args\r\n\t\t\t       else pexp.args = indexes[#indexes] end\r\n\t\t\t       table.remove(indexes, #indexes)\r\n\t\t\t       return pexp\r\n\t\t\t     end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "pexp.tag = \"call\"",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "if indexes[#indexes].tag then\r\n\t\t\t\t pexp.method = indexes[#indexes].name\r\n\t\t\t\t pexp.args = indexes[#indexes].args\r\n\t\t\t       else pexp.args = indexes[#indexes] end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "pexp.method = indexes[#indexes].name",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "pexp.args = indexes[#indexes].args",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "pexp.args = indexes[#indexes]",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "table.remove(indexes, #indexes)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function (tree)\r\n\t\t\t\t\t      return { tag = \"body\", parlist = tree[2],\r\n\t\t\t\t\t\tblock = tree[4] }\r\n\t\t\t\t\t    end",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function (tree)\r\n\t\t\t     return { tag = \"function\", parlist = tree[2].parlist, block = tree[2].block }\r\n\t\t\t   end",
    "type": "function"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function (tree)\r\n\t\t\t --if #tree[2] == 0 then return tree[1] end\r\n\t\t\t local namelist_node = { tree[1] }\r\n\t\t\t for _, v in ipairs(tree[2]) do\r\n\t\t\t   table.insert(namelist_node, v[2])\r\n\t\t\t end\r\n\t\t         return namelist_node\r\n\t\t       end",
    "type": "function"
  }, {
    "id": 129,
    "text": "local namelist_node = { tree[1] }",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "for _, v in ipairs(tree[2]) do\r\n\t\t\t   table.insert(namelist_node, v[2])\r\n\t\t\t end",
    "type": "statement:genericfor"
  }, {
    "id": 131,
    "text": "table.insert(namelist_node, v[2])",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function (tree)\r\n\t\t\t if tree == \"...\" then return { varargs = true } end\r\n\t\t\t if #tree[2] > 0 then\r\n\t\t\t   tree[1].varargs = true\r\n\t\t\t end\r\n\t\t\t return tree[1]\r\n\t\t       end",
    "type": "function"
  }, {
    "id": 134,
    "text": "if tree == \"...\" then return { varargs = true } end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "if #tree[2] > 0 then\r\n\t\t\t   tree[1].varargs = true\r\n\t\t\t end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "tree[1].varargs = true",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function (pexp)\r\n\t\t    if (not pexp.indexes and pexp.tag == \"name\") then\r\n\t\t      return { tag = \"var\", prefix = pexp, indexes = {} }\r\n\t\t    elseif (pexp.indexes and pexp.indexes[#pexp.indexes].tag ~= \"method\") then\r\n\t\t      pexp.tag = \"var\"\t\t  \r\n\t\t      return pexp \r\n      \t\t    else\r\n\t\t      return error(\"invalid lvalue\")\r\n\t\t    end\r\n\t\t  end",
    "type": "function"
  }, {
    "id": 139,
    "text": "if (not pexp.indexes and pexp.tag == \"name\") then\r\n\t\t      return { tag = \"var\", prefix = pexp, indexes = {} }\r\n\t\t    elseif (pexp.indexes and pexp.indexes[#pexp.indexes].tag ~= \"method\") then\r\n\t\t      pexp.tag = \"var\"\t\t  \r\n\t\t      return pexp \r\n      \t\t    else\r\n\t\t      return error(\"invalid lvalue\")\r\n\t\t    end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "pexp.tag = \"var\"",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function (tree)\r\n\t\t\t local varlist_node = { tree[1] }\r\n\t\t\t for _, v in ipairs(tree[2]) do\r\n\t\t\t   table.insert(varlist_node, v[2])\r\n\t\t\t end\r\n\t\t         return varlist_node\r\n\t\t     end",
    "type": "function"
  }, {
    "id": 143,
    "text": "local varlist_node = { tree[1] }",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "for _, v in ipairs(tree[2]) do\r\n\t\t\t   table.insert(varlist_node, v[2])\r\n\t\t\t end",
    "type": "statement:genericfor"
  }, {
    "id": 145,
    "text": "table.insert(varlist_node, v[2])",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function (tree)\r\n\t\t\t if tree == \"break\" then\r\n\t\t\t   return { tag = \"break\" }\r\n\t\t\t else\r\n\t\t\t   return { tag = \"return\", exps = tree[2] }\r\n\t\t\t end\r\n\t\t       end",
    "type": "function"
  }, {
    "id": 148,
    "text": "if tree == \"break\" then\r\n\t\t\t   return { tag = \"break\" }\r\n\t\t\t else\r\n\t\t\t   return { tag = \"return\", exps = tree[2] }\r\n\t\t\t end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function (tree)\r\n\t\t      local chunk_node = {}\r\n\t\t      for _, v in ipairs(tree[1]) do\r\n\t\t\ttable.insert(chunk_node, v[1])\r\n\t\t      end\r\n\t\t      if #tree[2] > 0 then\r\n\t\t\ttable.insert(chunk_node, tree[2][1])\r\n\t\t      end\r\n\t\t      return chunk_node\r\n\t\t    end",
    "type": "function"
  }, {
    "id": 151,
    "text": "local chunk_node = {}",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "for _, v in ipairs(tree[1]) do\r\n\t\t\ttable.insert(chunk_node, v[1])\r\n\t\t      end",
    "type": "statement:genericfor"
  }, {
    "id": 153,
    "text": "table.insert(chunk_node, v[1])",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "if #tree[2] > 0 then\r\n\t\t\ttable.insert(chunk_node, tree[2][1])\r\n\t\t      end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "table.insert(chunk_node, tree[2][1])",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function (tree) return { tag = \"chunk\", block = tree[2] } end",
    "type": "function"
  }, {
    "id": 158,
    "text": "function (tree) return { tag = \"do\", block = tree[2] } end",
    "type": "function"
  }, {
    "id": 159,
    "text": "function (tree)\r\n\t\t      return { tag = \"while\", exp = tree[2], block = tree[4] }\r\n\t\t    end",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function (tree)\r\n\t\t       return { tag = \"repeat\", exp = tree[4], block = tree[2] }\r\n\t\t     end",
    "type": "function"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function (tree)\r\n\t\t   local if_node = { tag = \"if\", clauses = {}}\r\n\t\t   table.insert(if_node.clauses, { cond = tree[2], block = tree[4] })\r\n\t\t   for _, v in ipairs(tree[5]) do\r\n\t\t     table.insert(if_node.clauses, { cond = v[2], block = v[4] })\r\n\t\t   end\r\n\t\t   if #tree[6] > 0 then\r\n\t\t     if_node.block_else = tree[6][2]\r\n\t\t   end\r\n\t\t   return if_node\r\n\t         end",
    "type": "function"
  }, {
    "id": 164,
    "text": "local if_node = { tag = \"if\", clauses = {}}",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "table.insert(if_node.clauses, { cond = tree[2], block = tree[4] })",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "for _, v in ipairs(tree[5]) do\r\n\t\t     table.insert(if_node.clauses, { cond = v[2], block = v[4] })\r\n\t\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 167,
    "text": "table.insert(if_node.clauses, { cond = v[2], block = v[4] })",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "if #tree[6] > 0 then\r\n\t\t     if_node.block_else = tree[6][2]\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "if_node.block_else = tree[6][2]",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function (tree)\r\n\t\t       local for_node = { tag = \"nfor\", var = tree[2].val, start = tree[4],\r\n\t\t\t finish = tree[6], block = tree[9] }\r\n\t\t       if #tree[7] > 0 then for_node.step = tree[7][2] end\r\n\t\t       return for_node\r\n\t\t     end",
    "type": "function"
  }, {
    "id": 172,
    "text": "local for_node = { tag = \"nfor\", var = tree[2].val, start = tree[4],\r\n\t\t\t finish = tree[6], block = tree[9] }",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "if #tree[7] > 0 then for_node.step = tree[7][2] end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "for_node.step = tree[7][2]",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function (tree)\r\n\t\t       return { tag = \"gfor\", vars = tree[2], exps = tree[4], block = tree[6] }\r\n\t\t     end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function (tree)\r\n\t\t\treturn { tag = \"function\", name = tree[2], parlist = tree[3].parlist, block = tree[3].block }\r\n\t\t      end",
    "type": "function"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function (tree)\r\n\t\t\t     return { tag = \"function\", islocal = true, \r\n\t\t\t       name = tree[3], parlist = tree[4].parlist, block = tree[4].block }\r\n\t\t\t   end",
    "type": "function"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "function (tree)\r\n\t\t\t local locdef_node = { tag = \"local\", names = tree[2] }\r\n\t\t\t if #tree[3] > 0 then locdef_node.exps = tree[3][2] end\r\n\t\t\t return locdef_node\r\n\t\t       end",
    "type": "function"
  }, {
    "id": 183,
    "text": "local locdef_node = { tag = \"local\", names = tree[2] }",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "if #tree[3] > 0 then locdef_node.exps = tree[3][2] end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "locdef_node.exps = tree[3][2]",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function (tree)\r\n\t\t\t   return { tag = \"assign\", vars = tree[1], exps = tree[3] }\r\n\t\t\t end",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function (strm)\r\n\t\t\t    local level = strm.bracket_level\r\n\t\t\t    local close_bracket = char(\"]\") .. str(string.rep(\"=\", level)) .. char(\"]\")\r\n\t\t\t    local eat_comment = (star(pnot(close_bracket) .. any) .. opt(close_bracket)) % skip\r\n\t\t\t    return cheese.compile({ comment = eat_comment }).comment(strm)\r\n\t\t\t  end",
    "type": "function"
  }, {
    "id": 190,
    "text": "local level = strm.bracket_level",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "local close_bracket = char(\"]\") .. str(string.rep(\"=\", level)) .. char(\"]\")",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "local eat_comment = (star(pnot(close_bracket) .. any) .. opt(close_bracket)) % skip",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function (bracket)\r\n\t\t\t    strm.bracket_level = string.len(bracket) - 4\r\n\t\t\t  end",
    "type": "function"
  }, {
    "id": 195,
    "text": "strm.bracket_level = string.len(bracket) - 4",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function () return code end",
    "type": "function"
  }, {
    "id": 198,
    "text": "function () return \"\\n\" end",
    "type": "function"
  }, {
    "id": 199,
    "text": "function (esc)\r\n\t\t      return string.char(tonumber(string.sub(esc, 2, -1)))\r\n\t\t    end",
    "type": "function"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function (strm)\r\n\t\t\t    local level = strm.bracket_level\r\n\t\t\t    local bracket = char(\"]\") .. str(string.rep(\"=\", level)) .. char(\"]\")\r\n\t\t\t    local not_bracket = pnot(bracket)\r\n\t\t\t    local brackets = cheese.compile({ bracket = bracket, not_bracket = not_bracket })\r\n\t\t\t    bracket, not_bracket = brackets.bracket, brackets.not_bracket\r\n\t\t\t    local ischar\r\n\t\t\t    local rest_string = {}\r\n\t\t\t    repeat\r\n\t\t\t      ischar = pcall(not_bracket, strm)\r\n\t\t\t      if ischar then table.insert(rest_string, strm:getc()) end\r\n\t\t\t    until not ischar\r\n\t\t\t    bracket(strm)\r\n\t\t\t    if rest_string[1] == \"\\n\" then rest_string[1] = \"\" end\r\n\t\t\t    return table.concat(rest_string) \r\n\t\t\t  end",
    "type": "function"
  }, {
    "id": 202,
    "text": "local bracket = char(\"]\") .. str(string.rep(\"=\", level)) .. char(\"]\")",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "local not_bracket = pnot(bracket)",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "local brackets = cheese.compile({ bracket = bracket, not_bracket = not_bracket })",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "bracket, not_bracket = brackets.bracket, brackets.not_bracket",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "local ischar",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "local rest_string = {}",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "repeat\r\n\t\t\t      ischar = pcall(not_bracket, strm)\r\n\t\t\t      if ischar then table.insert(rest_string, strm:getc()) end\r\n\t\t\t    until not ischar",
    "type": "statement:repeat"
  }, {
    "id": 209,
    "text": "ischar = pcall(not_bracket, strm)",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "if ischar then table.insert(rest_string, strm:getc()) end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "table.insert(rest_string, strm:getc())",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "bracket(strm)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "if rest_string[1] == \"\\n\" then rest_string[1] = \"\" end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "rest_string[1] = \"\"",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "function (bracket)\r\n\t\t\t    strm.bracket_level = string.len(bracket) - 2\r\n\t\t\t  end",
    "type": "function"
  }, {
    "id": 217,
    "text": "strm.bracket_level = string.len(bracket) - 2",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function (tree)\r\n\t\t\t     if #tree[1] == 0 then return tree[2] end\r\n\t\t\t     local node = { tag = \"unop\", op = cheese.concat(tree[1][1]) }\r\n\t\t\t     local res = node\r\n\t\t\t     for i = 2, #tree[1] do\r\n\t\t\t       node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }\r\n\t\t\t       node = node.operand\r\n\t\t\t     end\r\n\t\t\t     node.operand = tree[2]\t\t\t\t\t\t\r\n\t\t\t     return res\t\t\t\t\t\t   \t\r\n\t\t\t   end",
    "type": "function"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function (tree)\r\n\t\t\t     if #tree[2] == 0 then return tree[1] end\r\n\t\t\t     if prec_classes[prec].right then\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end\r\n\t\t\t       node.right = tree[2][#tree[2]][2]\t     \r\n\t\t\t       return res\r\n\t\t\t     else\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end\r\n\t\t\t       node.left = tree[1]\r\n\t\t\t       return res\r\n\t\t\t     end\r\n\t\t\t   end",
    "type": "function"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "",
    "type": "function container"
  }, {
    "id": 224,
    "text": "choice",
    "type": "global function"
  }, {
    "id": 225,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 226,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 227,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 228,
    "text": "module",
    "type": "global function"
  }, {
    "id": 229,
    "text": "ext",
    "type": "global function"
  }, {
    "id": 230,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 231,
    "text": "pnot",
    "type": "global function"
  }, {
    "id": 232,
    "text": "star",
    "type": "global function"
  }, {
    "id": 233,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 234,
    "text": "class",
    "type": "global function"
  }, {
    "id": 235,
    "text": "close",
    "type": "global function"
  }, {
    "id": 236,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 237,
    "text": "char",
    "type": "global function"
  }, {
    "id": 238,
    "text": "bracket",
    "type": "global function"
  }, {
    "id": 239,
    "text": "str",
    "type": "global function"
  }, {
    "id": 240,
    "text": "ref",
    "type": "global function"
  }, {
    "id": 241,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 242,
    "text": "plus",
    "type": "global function"
  }, {
    "id": 243,
    "text": "error",
    "type": "global function"
  }, {
    "id": 244,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 245,
    "text": "require",
    "type": "global function"
  }, {
    "id": 246,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 247,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 248,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 249,
    "text": "opt",
    "type": "global function"
  }, {
    "id": 250,
    "text": "len",
    "type": "global function"
  }, {
    "id": 251,
    "text": "char",
    "type": "global function"
  }, {
    "id": 252,
    "text": "",
    "type": "variable container"
  }, {
    "id": 253,
    "text": "",
    "type": "require container"
  }, {
    "id": 254,
    "text": "",
    "type": "local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "n/a"
  }, {
    "id": 256,
    "text": "",
    "type": "local variable"
  }, {
    "id": 257,
    "text": "",
    "type": "n/a"
  }, {
    "id": 258,
    "text": "",
    "type": "local variable"
  }, {
    "id": 259,
    "text": "",
    "type": "n/a"
  }, {
    "id": 260,
    "text": "",
    "type": "local variable"
  }, {
    "id": 261,
    "text": "",
    "type": "n/a"
  }, {
    "id": 262,
    "text": "",
    "type": "local variable"
  }, {
    "id": 263,
    "text": "",
    "type": "n/a"
  }, {
    "id": 264,
    "text": "",
    "type": "local variable"
  }, {
    "id": 265,
    "text": "",
    "type": "n/a"
  }, {
    "id": 266,
    "text": "",
    "type": "local variable"
  }, {
    "id": 267,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 268,
    "text": "",
    "type": "local variable"
  }, {
    "id": 269,
    "text": "",
    "type": "n/a"
  }, {
    "id": 270,
    "text": "",
    "type": "local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "n/a"
  }, {
    "id": 272,
    "text": "",
    "type": "local variable"
  }, {
    "id": 273,
    "text": "",
    "type": "n/a"
  }, {
    "id": 274,
    "text": "",
    "type": "local variable"
  }, {
    "id": 275,
    "text": "",
    "type": "n/a"
  }, {
    "id": 276,
    "text": "",
    "type": "local variable"
  }, {
    "id": 277,
    "text": "",
    "type": "n/a"
  }, {
    "id": 278,
    "text": "",
    "type": "local variable"
  }, {
    "id": 279,
    "text": "",
    "type": "n/a"
  }, {
    "id": 280,
    "text": "",
    "type": "local variable"
  }, {
    "id": 281,
    "text": "",
    "type": "n/a"
  }, {
    "id": 282,
    "text": "",
    "type": "local variable"
  }, {
    "id": 283,
    "text": "",
    "type": "n/a"
  }, {
    "id": 284,
    "text": "",
    "type": "local variable"
  }, {
    "id": 285,
    "text": "",
    "type": "n/a"
  }, {
    "id": 286,
    "text": "",
    "type": "local variable"
  }, {
    "id": 287,
    "text": "",
    "type": "n/a"
  }, {
    "id": 288,
    "text": "",
    "type": "local variable"
  }, {
    "id": 289,
    "text": "",
    "type": "n/a"
  }, {
    "id": 290,
    "text": "",
    "type": "local variable"
  }, {
    "id": 291,
    "text": "",
    "type": "n/a"
  }, {
    "id": 292,
    "text": "",
    "type": "local variable"
  }, {
    "id": 293,
    "text": "",
    "type": "n/a"
  }, {
    "id": 294,
    "text": "",
    "type": "local variable"
  }, {
    "id": 295,
    "text": "",
    "type": "n/a"
  }, {
    "id": 296,
    "text": "",
    "type": "local variable"
  }, {
    "id": 297,
    "text": "",
    "type": "n/a"
  }, {
    "id": 298,
    "text": "",
    "type": "global variable"
  }, {
    "id": 299,
    "text": "",
    "type": "n/a"
  }, {
    "id": 300,
    "text": "",
    "type": "global variable"
  }, {
    "id": 301,
    "text": "",
    "type": "n/a"
  }, {
    "id": 302,
    "text": "",
    "type": "global variable"
  }, {
    "id": 303,
    "text": "",
    "type": "n/a"
  }, {
    "id": 304,
    "text": "",
    "type": "global variable"
  }, {
    "id": 305,
    "text": "",
    "type": "n/a"
  }, {
    "id": 306,
    "text": "",
    "type": "global variable"
  }, {
    "id": 307,
    "text": "",
    "type": "n/a"
  }, {
    "id": 308,
    "text": "",
    "type": "global variable"
  }, {
    "id": 309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 310,
    "text": "",
    "type": "global variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "global variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "global variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "global variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "global variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "global variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "global variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "global variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "global variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "global variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "global variable"
  }, {
    "id": 331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 332,
    "text": "",
    "type": "global variable"
  }, {
    "id": 333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 334,
    "text": "",
    "type": "global variable"
  }, {
    "id": 335,
    "text": "",
    "type": "n/a"
  }, {
    "id": 336,
    "text": "",
    "type": "global variable"
  }, {
    "id": 337,
    "text": "",
    "type": "n/a"
  }, {
    "id": 338,
    "text": "",
    "type": "global variable"
  }, {
    "id": 339,
    "text": "",
    "type": "n/a"
  }, {
    "id": 340,
    "text": "",
    "type": "global variable"
  }, {
    "id": 341,
    "text": "",
    "type": "n/a"
  }, {
    "id": 342,
    "text": "",
    "type": "global variable"
  }, {
    "id": 343,
    "text": "",
    "type": "n/a"
  }, {
    "id": 344,
    "text": "",
    "type": "global variable"
  }, {
    "id": 345,
    "text": "",
    "type": "n/a"
  }, {
    "id": 346,
    "text": "",
    "type": "global variable"
  }, {
    "id": 347,
    "text": "",
    "type": "n/a"
  }, {
    "id": 348,
    "text": "",
    "type": "global variable"
  }, {
    "id": 349,
    "text": "",
    "type": "n/a"
  }, {
    "id": 350,
    "text": "",
    "type": "global variable"
  }, {
    "id": 351,
    "text": "",
    "type": "n/a"
  }, {
    "id": 352,
    "text": "",
    "type": "global variable"
  }, {
    "id": 353,
    "text": "",
    "type": "n/a"
  }, {
    "id": 354,
    "text": "",
    "type": "global variable"
  }, {
    "id": 355,
    "text": "",
    "type": "n/a"
  }, {
    "id": 356,
    "text": "",
    "type": "global variable"
  }, {
    "id": 357,
    "text": "",
    "type": "n/a"
  }, {
    "id": 358,
    "text": "",
    "type": "global variable"
  }, {
    "id": 359,
    "text": "",
    "type": "n/a"
  }, {
    "id": 360,
    "text": "",
    "type": "global variable"
  }, {
    "id": 361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 362,
    "text": "",
    "type": "global variable"
  }, {
    "id": 363,
    "text": "",
    "type": "n/a"
  }, {
    "id": 364,
    "text": "",
    "type": "global variable"
  }, {
    "id": 365,
    "text": "",
    "type": "n/a"
  }, {
    "id": 366,
    "text": "",
    "type": "global variable"
  }, {
    "id": 367,
    "text": "",
    "type": "n/a"
  }, {
    "id": 368,
    "text": "",
    "type": "global variable"
  }, {
    "id": 369,
    "text": "",
    "type": "n/a"
  }, {
    "id": 370,
    "text": "",
    "type": "global variable"
  }, {
    "id": 371,
    "text": "",
    "type": "n/a"
  }, {
    "id": 372,
    "text": "",
    "type": "global variable"
  }, {
    "id": 373,
    "text": "",
    "type": "n/a"
  }, {
    "id": 374,
    "text": "",
    "type": "global variable"
  }, {
    "id": 375,
    "text": "",
    "type": "n/a"
  }, {
    "id": 376,
    "text": "",
    "type": "global variable"
  }, {
    "id": 377,
    "text": "",
    "type": "n/a"
  }, {
    "id": 378,
    "text": "",
    "type": "global variable"
  }, {
    "id": 379,
    "text": "",
    "type": "n/a"
  }, {
    "id": 380,
    "text": "",
    "type": "global variable"
  }, {
    "id": 381,
    "text": "",
    "type": "n/a"
  }, {
    "id": 382,
    "text": "",
    "type": "global variable"
  }, {
    "id": 383,
    "text": "",
    "type": "n/a"
  }, {
    "id": 384,
    "text": "",
    "type": "global variable"
  }, {
    "id": 385,
    "text": "",
    "type": "n/a"
  }, {
    "id": 386,
    "text": "",
    "type": "global variable"
  }, {
    "id": 387,
    "text": "",
    "type": "n/a"
  }, {
    "id": 388,
    "text": "",
    "type": "global variable"
  }, {
    "id": 389,
    "text": "",
    "type": "n/a"
  }, {
    "id": 390,
    "text": "",
    "type": "global variable"
  }, {
    "id": 391,
    "text": "",
    "type": "n/a"
  }, {
    "id": 392,
    "text": "",
    "type": "global variable"
  }, {
    "id": 393,
    "text": "",
    "type": "n/a"
  }, {
    "id": 394,
    "text": "",
    "type": "global variable"
  }, {
    "id": 395,
    "text": "",
    "type": "n/a"
  }, {
    "id": 396,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 397,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 398,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 399,
    "text": "",
    "type": "require local variable"
  } ]
}