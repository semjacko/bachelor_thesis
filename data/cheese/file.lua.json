{
  "_filename": "file.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cheese/src/stream/file.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 23
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 8
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 20,
    "label": "calls",
    "to": 47
  }, {
    "from": 27,
    "label": "calls",
    "to": 47
  }, {
    "from": 12,
    "label": "calls",
    "to": 43
  }, {
    "from": 41,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 12,
    "label": "calls",
    "to": 45
  }, {
    "from": 27,
    "label": "calls",
    "to": 2
  }, {
    "from": 27,
    "label": "calls",
    "to": 48
  }, {
    "from": 27,
    "label": "calls",
    "to": 46
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 41,
    "label": "declares",
    "to": 2
  }, {
    "from": 41,
    "label": "declares",
    "to": 10
  }, {
    "from": 41,
    "label": "declares",
    "to": 12
  }, {
    "from": 41,
    "label": "declares",
    "to": 20
  }, {
    "from": 41,
    "label": "declares",
    "to": 27
  }, {
    "from": 41,
    "label": "declares",
    "to": 32
  }, {
    "from": 41,
    "label": "declares",
    "to": 34
  }, {
    "from": 41,
    "label": "declares",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 51,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "file",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function count(str, char)\r\n      local c = 0\r\n      local byte = string.byte\r\n      for i = 1, #str do\r\n      \t  if byte(str, i) == char then c = c + 1 end\r\n      end\r\n      return c\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local c = 0",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local byte = string.byte",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for i = 1, #str do\r\n      \t  if byte(str, i) == char then c = c + 1 end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 6,
    "text": "if byte(str, i) == char then c = c + 1 end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "c = c + 1",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function new(file)\r\n\t return { file = file, line = 1, getc = getc, backtrack = backtrack,\r\n\t   gets = gets, state = state, log_error = log_error, errors = {},\r\n\t   close = close }\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function log_error(strm, err)\r\n  local err_data\r\n  if type(err) == \"table\" then\r\n    local position, line = err.state[1], err.state[2]\r\n    err_data = { msg = err.msg, position = position, line = line }\r\n  else\r\n    err_data = { msg = err, position = strm.file:seek(), line = strm.line }\r\n  end\r\n  table.insert(strm.errors, err_data)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local err_data",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if type(err) == \"table\" then\r\n    local position, line = err.state[1], err.state[2]\r\n    err_data = { msg = err.msg, position = position, line = line }\r\n  else\r\n    err_data = { msg = err, position = strm.file:seek(), line = strm.line }\r\n  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "local position, line = err.state[1], err.state[2]",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "err_data = { msg = err.msg, position = position, line = line }",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "err_data = { msg = err, position = strm.file:seek(), line = strm.line }",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "table.insert(strm.errors, err_data)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function getc(strm)\r\n\t local c = strm.file:read(1)\r\n \t if not c then error(\"end of stream\") end\r\n\t if c == \"\\n\" then strm.line = strm.line + 1 end\r\n\t return c\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local c = strm.file:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if not c then error(\"end of stream\") end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "error(\"end of stream\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "if c == \"\\n\" then strm.line = strm.line + 1 end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "strm.line = strm.line + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function gets(strm, l)\r\n\t local s = strm.file:read(l)\r\n\t if not s or string.len(s) < l then\r\n   \t    error(\"end of stream\")\r\n\t else\r\n\t    strm.line = strm.line + count(s, string.byte(\"\\n\"))\r\n\t    return s\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local s = strm.file:read(l)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if not s or string.len(s) < l then\r\n   \t    error(\"end of stream\")\r\n\t else\r\n\t    strm.line = strm.line + count(s, string.byte(\"\\n\"))\r\n\t    return s\r\n\t end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "strm.line = strm.line + count(s, string.byte(\"\\n\"))",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function state(strm)\r\n\t return { strm.file:seek(), strm.line }\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function backtrack(strm, st)\r\n\t strm.file:seek(\"set\", st[1])\r\n\t strm.line = st[2]\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "strm.file:seek(\"set\", st[1])",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "strm.line = st[2]",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function close(strm)\r\n  strm.file:close()\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "strm.file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "",
    "type": "function container"
  }, {
    "id": 42,
    "text": "module",
    "type": "global function"
  }, {
    "id": 43,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 44,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 45,
    "text": "type",
    "type": "global function"
  }, {
    "id": 46,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 47,
    "text": "error",
    "type": "global function"
  }, {
    "id": 48,
    "text": "len",
    "type": "global function"
  }, {
    "id": 49,
    "text": "",
    "type": "variable container"
  }, {
    "id": 50,
    "text": "",
    "type": "require container"
  }, {
    "id": 51,
    "text": "",
    "type": "global variable"
  } ]
}