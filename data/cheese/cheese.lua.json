{
  "_filename": "cheese.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cheese/src/cheese.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 5
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 5
  }, {
    "from": 24,
    "label": "has",
    "to": 5
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 5
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 37
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 5
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 5
  }, {
    "from": 45,
    "label": "has",
    "to": 5
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 5
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 5
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 5
  }, {
    "from": 55,
    "label": "has",
    "to": 5
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 5
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 5
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 5
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 5
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 5
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 5
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 5
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 5
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 5
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 88
  }, {
    "from": 92,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 92,
    "label": "has",
    "to": 5
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 5
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 5
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 100,
    "label": "has",
    "to": 5
  }, {
    "from": 100,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 5
  }, {
    "from": 106,
    "label": "has",
    "to": 5
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 112,
    "label": "has",
    "to": 118
  }, {
    "from": 112,
    "label": "has",
    "to": 119
  }, {
    "from": 112,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 5
  }, {
    "from": 120,
    "label": "has",
    "to": 5
  }, {
    "from": 120,
    "label": "has",
    "to": 5
  }, {
    "from": 120,
    "label": "has",
    "to": 5
  }, {
    "from": 120,
    "label": "has",
    "to": 5
  }, {
    "from": 112,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 112,
    "label": "has",
    "to": 128
  }, {
    "from": 112,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 121
  }, {
    "from": 130,
    "label": "has",
    "to": 5
  }, {
    "from": 130,
    "label": "has",
    "to": 5
  }, {
    "from": 130,
    "label": "has",
    "to": 5
  }, {
    "from": 130,
    "label": "has",
    "to": 5
  }, {
    "from": 130,
    "label": "has",
    "to": 5
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 113
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 5
  }, {
    "from": 112,
    "label": "calls",
    "to": 156
  }, {
    "from": 112,
    "label": "calls",
    "to": 156
  }, {
    "from": 7,
    "label": "calls",
    "to": 164
  }, {
    "from": 92,
    "label": "calls",
    "to": 152
  }, {
    "from": 7,
    "label": "calls",
    "to": 157
  }, {
    "from": 100,
    "label": "calls",
    "to": 145
  }, {
    "from": 112,
    "label": "calls",
    "to": 158
  }, {
    "from": 7,
    "label": "calls",
    "to": 159
  }, {
    "from": 30,
    "label": "calls",
    "to": 159
  }, {
    "from": 55,
    "label": "calls",
    "to": 159
  }, {
    "from": 87,
    "label": "calls",
    "to": 159
  }, {
    "from": 92,
    "label": "calls",
    "to": 159
  }, {
    "from": 112,
    "label": "calls",
    "to": 51
  }, {
    "from": 96,
    "label": "calls",
    "to": 154
  }, {
    "from": 87,
    "label": "calls",
    "to": 144
  }, {
    "from": 139,
    "label": "calls",
    "to": 160
  }, {
    "from": 75,
    "label": "calls",
    "to": 149
  }, {
    "from": 73,
    "label": "calls",
    "to": 151
  }, {
    "from": 98,
    "label": "calls",
    "to": 143
  }, {
    "from": 106,
    "label": "calls",
    "to": 165
  }, {
    "from": 77,
    "label": "calls",
    "to": 153
  }, {
    "from": 83,
    "label": "calls",
    "to": 150
  }, {
    "from": 85,
    "label": "calls",
    "to": 147
  }, {
    "from": 65,
    "label": "calls",
    "to": 166
  }, {
    "from": 106,
    "label": "calls",
    "to": 172
  }, {
    "from": 112,
    "label": "calls",
    "to": 172
  }, {
    "from": 112,
    "label": "calls",
    "to": 172
  }, {
    "from": 134,
    "label": "calls",
    "to": 172
  }, {
    "from": 81,
    "label": "calls",
    "to": 155
  }, {
    "from": 112,
    "label": "calls",
    "to": 170
  }, {
    "from": 134,
    "label": "calls",
    "to": 170
  }, {
    "from": 73,
    "label": "calls",
    "to": 168
  }, {
    "from": 87,
    "label": "calls",
    "to": 168
  }, {
    "from": 92,
    "label": "calls",
    "to": 168
  }, {
    "from": 71,
    "label": "calls",
    "to": 146
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 55,
    "label": "calls",
    "to": 162
  }, {
    "from": 55,
    "label": "calls",
    "to": 162
  }, {
    "from": 87,
    "label": "calls",
    "to": 162
  }, {
    "from": 92,
    "label": "calls",
    "to": 162
  }, {
    "from": 7,
    "label": "calls",
    "to": 7
  }, {
    "from": 77,
    "label": "calls",
    "to": 65
  }, {
    "from": 79,
    "label": "calls",
    "to": 65
  }, {
    "from": 81,
    "label": "calls",
    "to": 65
  }, {
    "from": 83,
    "label": "calls",
    "to": 65
  }, {
    "from": 85,
    "label": "calls",
    "to": 65
  }, {
    "from": 87,
    "label": "calls",
    "to": 65
  }, {
    "from": 92,
    "label": "calls",
    "to": 65
  }, {
    "from": 96,
    "label": "calls",
    "to": 65
  }, {
    "from": 98,
    "label": "calls",
    "to": 65
  }, {
    "from": 100,
    "label": "calls",
    "to": 65
  }, {
    "from": 106,
    "label": "calls",
    "to": 65
  }, {
    "from": 67,
    "label": "calls",
    "to": 100
  }, {
    "from": 106,
    "label": "calls",
    "to": 100
  }, {
    "from": 36,
    "label": "calls",
    "to": 30
  }, {
    "from": 41,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 171
  }, {
    "from": 112,
    "label": "calls",
    "to": 171
  }, {
    "from": 134,
    "label": "calls",
    "to": 171
  }, {
    "from": 36,
    "label": "calls",
    "to": 169
  }, {
    "from": 36,
    "label": "calls",
    "to": 169
  }, {
    "from": 41,
    "label": "calls",
    "to": 169
  }, {
    "from": 41,
    "label": "calls",
    "to": 169
  }, {
    "from": 55,
    "label": "calls",
    "to": 169
  }, {
    "from": 55,
    "label": "calls",
    "to": 169
  }, {
    "from": 112,
    "label": "calls",
    "to": 161
  }, {
    "from": 7,
    "label": "calls",
    "to": 163
  }, {
    "from": 112,
    "label": "calls",
    "to": 163
  }, {
    "from": 112,
    "label": "calls",
    "to": 163
  }, {
    "from": 112,
    "label": "calls",
    "to": 163
  }, {
    "from": 112,
    "label": "calls",
    "to": 163
  }, {
    "from": 112,
    "label": "calls",
    "to": 163
  }, {
    "from": 112,
    "label": "calls",
    "to": 163
  }, {
    "from": 139,
    "label": "calls",
    "to": 167
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 19,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 24,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 36,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 51,
    "label": "calls",
    "to": 3
  }, {
    "from": 53,
    "label": "calls",
    "to": 3
  }, {
    "from": 55,
    "label": "calls",
    "to": 3
  }, {
    "from": 55,
    "label": "calls",
    "to": 3
  }, {
    "from": 139,
    "label": "calls",
    "to": 3
  }, {
    "from": 139,
    "label": "calls",
    "to": 3
  }, {
    "from": 79,
    "label": "calls",
    "to": 148
  }, {
    "from": 1,
    "label": "contains",
    "to": 139
  }, {
    "from": 139,
    "label": "declares",
    "to": 3
  }, {
    "from": 139,
    "label": "declares",
    "to": 7
  }, {
    "from": 139,
    "label": "declares",
    "to": 13
  }, {
    "from": 139,
    "label": "declares",
    "to": 15
  }, {
    "from": 139,
    "label": "declares",
    "to": 17
  }, {
    "from": 139,
    "label": "declares",
    "to": 19
  }, {
    "from": 139,
    "label": "declares",
    "to": 21
  }, {
    "from": 139,
    "label": "declares",
    "to": 24
  }, {
    "from": 139,
    "label": "declares",
    "to": 27
  }, {
    "from": 139,
    "label": "declares",
    "to": 30
  }, {
    "from": 139,
    "label": "declares",
    "to": 36
  }, {
    "from": 139,
    "label": "declares",
    "to": 41
  }, {
    "from": 139,
    "label": "declares",
    "to": 45
  }, {
    "from": 139,
    "label": "declares",
    "to": 48
  }, {
    "from": 139,
    "label": "declares",
    "to": 51
  }, {
    "from": 139,
    "label": "declares",
    "to": 53
  }, {
    "from": 139,
    "label": "declares",
    "to": 55
  }, {
    "from": 139,
    "label": "declares",
    "to": 63
  }, {
    "from": 139,
    "label": "declares",
    "to": 65
  }, {
    "from": 139,
    "label": "declares",
    "to": 67
  }, {
    "from": 139,
    "label": "declares",
    "to": 69
  }, {
    "from": 139,
    "label": "declares",
    "to": 71
  }, {
    "from": 139,
    "label": "declares",
    "to": 73
  }, {
    "from": 139,
    "label": "declares",
    "to": 75
  }, {
    "from": 139,
    "label": "declares",
    "to": 77
  }, {
    "from": 139,
    "label": "declares",
    "to": 79
  }, {
    "from": 139,
    "label": "declares",
    "to": 81
  }, {
    "from": 139,
    "label": "declares",
    "to": 83
  }, {
    "from": 139,
    "label": "declares",
    "to": 85
  }, {
    "from": 139,
    "label": "declares",
    "to": 87
  }, {
    "from": 139,
    "label": "declares",
    "to": 92
  }, {
    "from": 139,
    "label": "declares",
    "to": 94
  }, {
    "from": 139,
    "label": "declares",
    "to": 96
  }, {
    "from": 139,
    "label": "declares",
    "to": 98
  }, {
    "from": 139,
    "label": "declares",
    "to": 100
  }, {
    "from": 139,
    "label": "declares",
    "to": 106
  }, {
    "from": 139,
    "label": "declares",
    "to": 112
  }, {
    "from": 139,
    "label": "declares",
    "to": 130
  }, {
    "from": 139,
    "label": "declares",
    "to": 132
  }, {
    "from": 139,
    "label": "declares",
    "to": 134
  }, {
    "from": 139,
    "label": "declares",
    "to": 138
  }, {
    "from": 141,
    "label": "calls",
    "to": 112
  }, {
    "from": 141,
    "label": "calls",
    "to": 106
  }, {
    "from": 141,
    "label": "calls",
    "to": 106
  }, {
    "from": 141,
    "label": "calls",
    "to": 106
  }, {
    "from": 140,
    "label": "calls",
    "to": 7
  }, {
    "from": 140,
    "label": "calls",
    "to": 7
  }, {
    "from": 140,
    "label": "calls",
    "to": 7
  }, {
    "from": 140,
    "label": "calls",
    "to": 7
  }, {
    "from": 140,
    "label": "calls",
    "to": 7
  }, {
    "from": 140,
    "label": "calls",
    "to": 7
  }, {
    "from": 142,
    "label": "calls",
    "to": 112
  }, {
    "from": 142,
    "label": "calls",
    "to": 106
  }, {
    "from": 1,
    "label": "contains",
    "to": 173
  }, {
    "from": 1,
    "label": "contains",
    "to": 174
  }, {
    "from": 173,
    "label": "initializes",
    "to": 175
  }, {
    "from": 173,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 173,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 173,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 173,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 174,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "requires",
    "to": 2
  }, {
    "from": 185,
    "label": "requires",
    "to": 1
  }, {
    "from": 186,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cheese",
    "type": "module"
  }, {
    "id": 2,
    "text": "parsers",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function make_rule(tab)\r\n  setmetatable(tab, rule_mt)\r\n  return tab\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "setmetatable(tab, rule_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function concat (tab)\r\n  if type(tab) == \"table\" then\r\n    local res = {}\r\n    for i, l in ipairs(tab) do\r\n      res[i] = concat(l)\r\n    end\r\n    return table.concat(res)\r\n  else\r\n    return tostring(tab)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if type(tab) == \"table\" then\r\n    local res = {}\r\n    for i, l in ipairs(tab) do\r\n      res[i] = concat(l)\r\n    end\r\n    return table.concat(res)\r\n  else\r\n    return tostring(tab)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for i, l in ipairs(tab) do\r\n      res[i] = concat(l)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "res[i] = concat(l)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function skip(exp)\r\n  return {}\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function char(c)\r\n  return make_rule{ tag = \"char\", char = c }\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function class(...)\r\n  return make_rule{ tag = \"class\", ranges = {...} }\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function str(s)\r\n  return make_rule{ tag = \"string\", str = s }\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function opt(rule)\r\n  if rule.tag == \"opt\" then return rule end\r\n  return make_rule{ tag = \"opt\", rule = rule }\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "if rule.tag == \"opt\" then return rule end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function pand(rule)\r\n  if rule.tag == \"and\" then return rule end\r\n  return make_rule{ tag = \"and\", rule = rule }\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "if rule.tag == \"and\" then return rule end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function pnot(rule)\r\n  if rule.tag == \"not\" then\r\n    return make_rule{ tag = \"and\", rule = rule.rule }\r\n  end\r\n  return make_rule{ tag = \"not\", rule = rule }\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "if rule.tag == \"not\" then\r\n    return make_rule{ tag = \"and\", rule = rule.rule }\r\n  end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function include_rule(tag, rules, rule)\r\n  if rule.tag == tag then\r\n    for _, r in ipairs(rule.rules) do\r\n      table.insert(rules, r)\r\n    end\r\n  else\r\n    table.insert(rules, rule)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if rule.tag == tag then\r\n    for _, r in ipairs(rule.rules) do\r\n      table.insert(rules, r)\r\n    end\r\n  else\r\n    table.insert(rules, rule)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "for _, r in ipairs(rule.rules) do\r\n      table.insert(rules, r)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "table.insert(rules, r)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "table.insert(rules, rule)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function seq(...)\r\n  local rules = {}\r\n  for i = 1, select(\"#\", ...) do\r\n    include_rule(\"seq\", rules, select(i, ...))\r\n  end\r\n  return make_rule{ tag = \"seq\", rules = rules }\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local rules = {}",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "for i = 1, select(\"#\", ...) do\r\n    include_rule(\"seq\", rules, select(i, ...))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 39,
    "text": "include_rule(\"seq\", rules, select(i, ...))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function choice(...)\r\n  local rules = {}\r\n  for i = 1, select(\"#\", ...) do\r\n    include_rule(\"choice\", rules, select(i, ...))\r\n  end\r\n  return make_rule{ tag = \"choice\", rules = rules }\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "for i = 1, select(\"#\", ...) do\r\n    include_rule(\"choice\", rules, select(i, ...))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 43,
    "text": "include_rule(\"choice\", rules, select(i, ...))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function star(rule)\r\n  if rule.tag == \"star\" then return rule end\r\n  return make_rule{ tag = \"star\", rule = rule }\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if rule.tag == \"star\" then return rule end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function plus(rule)\r\n  if rule.tag == \"plus\" then return rule end\r\n  return make_rule{ tag = \"plus\", rule = rule }\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if rule.tag == \"plus\" then return rule end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function ref(name)\r\n  return make_rule{ tag = \"ref\", name = name }\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function ext(parser)\r\n  return make_rule{ tag = \"ext\", parser = parser }\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function bind(rule, ...)\r\n  if rule.tag == \"bind\" then\r\n    local funcs = {}\r\n    for _, f in ipairs(rule.funcs) do\r\n      table.insert(funcs, f)\r\n    end\r\n    for i = 1, select(\"#\", ...) do\r\n      table.insert(funcs, select(i, ...))\r\n    end\r\n    return make_rule{ tag = \"bind\", rule = rule.rule, funcs = funcs }\r\n  else\r\n    return make_rule{ tag = \"bind\", rule = rule, funcs = {...} }\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "if rule.tag == \"bind\" then\r\n    local funcs = {}\r\n    for _, f in ipairs(rule.funcs) do\r\n      table.insert(funcs, f)\r\n    end\r\n    for i = 1, select(\"#\", ...) do\r\n      table.insert(funcs, select(i, ...))\r\n    end\r\n    return make_rule{ tag = \"bind\", rule = rule.rule, funcs = funcs }\r\n  else\r\n    return make_rule{ tag = \"bind\", rule = rule, funcs = {...} }\r\n  end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "local funcs = {}",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "for _, f in ipairs(rule.funcs) do\r\n      table.insert(funcs, f)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 59,
    "text": "table.insert(funcs, f)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "for i = 1, select(\"#\", ...) do\r\n      table.insert(funcs, select(i, ...))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 61,
    "text": "table.insert(funcs, select(i, ...))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function handle(rule, func)\r\n  return { tag = \"handle\", rule = rule, func = func }\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function compile_rule(rule, rules, parsers)\r\n  return _M[\"compile_\" .. rule.tag](rule, rules, parsers)\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function compile_ref(rule, rules, parsers)\r\n  return compile_named(rule.name, rules, parsers)\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function compile_any()\r\n  return cheese_parsers.any\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function compile_char(rule)\r\n  return cheese_parsers.char(rule.char)\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function compile_class(rule)\r\n  return cheese_parsers.class(unpack(rule.ranges))\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function compile_string(rule)\r\n  return cheese_parsers.str(rule.str)\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function compile_opt(rule, rules, parsers)\r\n  return cheese_parsers.opt(compile_rule(rule.rule, rules, parsers))\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function compile_star(rule, rules, parsers)\r\n  return cheese_parsers.star(compile_rule(rule.rule, rules, parsers))\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function compile_plus(rule, rules, parsers)\r\n  return cheese_parsers.plus(compile_rule(rule.rule, rules, parsers))\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function compile_and(rule, rules, parsers)\r\n  return cheese_parsers.pand(compile_rule(rule.rule, rules, parsers))\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function compile_not(rule, rules, parsers)\r\n  return cheese_parsers.pnot(compile_rule(rule.rule, rules, parsers))\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function compile_seq(rule, rules, parsers)\r\n  local ps = {}\r\n  for _, r in ipairs(rule.rules) do\r\n    table.insert(ps, compile_rule(r, rules, parsers))\r\n  end\r\n  return cheese_parsers.seq(unpack(ps))\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "local ps = {}",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for _, r in ipairs(rule.rules) do\r\n    table.insert(ps, compile_rule(r, rules, parsers))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "table.insert(ps, compile_rule(r, rules, parsers))",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function compile_choice(rule, rules, parsers)\r\n  local ps = {}\r\n  for _, r in ipairs(rule.rules) do\r\n    table.insert(ps, compile_rule(r, rules, parsers))\r\n  end\r\n  return cheese_parsers.choice(unpack(ps))\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function compile_ext(rule, rules, parsers)\r\n  return rule.parser\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function compile_bind(rule, rules, parsers)\r\n  return cheese_parsers.bind(compile_rule(rule.rule, rules, parsers), rule.funcs)\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function compile_handle(rule, rules, parsers)\r\n  return cheese_parsers.handle(compile_rule(rule.rule, rules, parsers), rule.func)\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function compile_named(name, rules, parsers)\r\n  -- Found a recursive definition, returns a thunk\r\n  if parsers[name] == true then\r\n    parsers[name] = cheese_parsers.lazy(function () return parsers[name] end)\r\n  elseif not parsers[name] then\r\n    -- Marker to avoid infinite recursion\r\n    parsers[name] = true\r\n    parsers[name] = compile_rule(rules[name], rules, parsers)\r\n  end\r\n    return parsers[name]\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "if parsers[name] == true then\r\n    parsers[name] = cheese_parsers.lazy(function () return parsers[name] end)\r\n  elseif not parsers[name] then\r\n    -- Marker to avoid infinite recursion\r\n    parsers[name] = true\r\n    parsers[name] = compile_rule(rules[name], rules, parsers)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "parsers[name] = cheese_parsers.lazy(function () return parsers[name] end)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "parsers[name] = true",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "parsers[name] = compile_rule(rules[name], rules, parsers)",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function compile(rules)\r\n  if getmetatable(rules) == rule_mt then\r\n    return compile_rule(rules, {}, {})\r\n  else\r\n    local parsers = {}\r\n    for name, rule in pairs(rules) do\r\n      compile_named(name, rules, parsers)\r\n    end\r\n    return parsers\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "if getmetatable(rules) == rule_mt then\r\n    return compile_rule(rules, {}, {})\r\n  else\r\n    local parsers = {}\r\n    for name, rule in pairs(rules) do\r\n      compile_named(name, rules, parsers)\r\n    end\r\n    return parsers\r\n  end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "local parsers = {}",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "for name, rule in pairs(rules) do\r\n      compile_named(name, rules, parsers)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "compile_named(name, rules, parsers)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function open_grammar(grammar_table)\r\n  local env = getfenv(2)\r\n  local old_mt = getmetatable(env)\r\n  if type(grammar_table) == \"string\" then\r\n    env[grammar_table] = env[grammar_table] or {}\r\n    grammar_table = env[grammar_table]\r\n  end\r\n  local grammar_env = {\r\n    char = char, class = class, digit = digit, any = any,\r\n    plus = plus, star = star, opt = opt, pand = pand, pnot = pnot,\r\n    seq = seq, choice = choice, bind = bind, handle = handle,\r\n    concat = concat, skip = skip, ext = ext, close = close_grammar,\r\n    str = str, ref = ref\r\n  }\r\n  local mt_grammar = { grammar = grammar_table, old_mt = old_mt }\r\n  function mt_grammar.__index(t, k)\r\n    if grammar_env[k] then\r\n      return grammar_env[k]\r\n    elseif old_mt and type(old_mt.__index) == \"table\" and old_mt.__index[k] then\r\n      return old_mt.__index[k]\r\n    elseif old_mt and type(old_mt.__index) == \"function\" and old_mt.__index(t, k) then\r\n      return old_mt.__index(t, k)\r\n    elseif type(k) == \"string\" then\r\n      return ref(k)\r\n    else\r\n      return nil\r\n    end\r\n  end\r\n  function mt_grammar.__newindex(t, k, v)\r\n    if getmetatable(v) == rule_mt then\r\n      mt_grammar.grammar[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"table\" then\r\n      old_mt.__newindex[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"function\" then\r\n      old_mt.__newindex(t, k, v)\r\n    else\r\n      rawset(t, k, v)\r\n    end\r\n  end\r\n  setmetatable(env, mt_grammar)\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local env = getfenv(2)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local old_mt = getmetatable(env)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if type(grammar_table) == \"string\" then\r\n    env[grammar_table] = env[grammar_table] or {}\r\n    grammar_table = env[grammar_table]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "env[grammar_table] = env[grammar_table] or {}",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "grammar_table = env[grammar_table]",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "local grammar_env = {\r\n    char = char, class = class, digit = digit, any = any,\r\n    plus = plus, star = star, opt = opt, pand = pand, pnot = pnot,\r\n    seq = seq, choice = choice, bind = bind, handle = handle,\r\n    concat = concat, skip = skip, ext = ext, close = close_grammar,\r\n    str = str, ref = ref\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "local mt_grammar = { grammar = grammar_table, old_mt = old_mt }",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "function mt_grammar.__index(t, k)\r\n    if grammar_env[k] then\r\n      return grammar_env[k]\r\n    elseif old_mt and type(old_mt.__index) == \"table\" and old_mt.__index[k] then\r\n      return old_mt.__index[k]\r\n    elseif old_mt and type(old_mt.__index) == \"function\" and old_mt.__index(t, k) then\r\n      return old_mt.__index(t, k)\r\n    elseif type(k) == \"string\" then\r\n      return ref(k)\r\n    else\r\n      return nil\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 121,
    "text": "if grammar_env[k] then\r\n      return grammar_env[k]\r\n    elseif old_mt and type(old_mt.__index) == \"table\" and old_mt.__index[k] then\r\n      return old_mt.__index[k]\r\n    elseif old_mt and type(old_mt.__index) == \"function\" and old_mt.__index(t, k) then\r\n      return old_mt.__index(t, k)\r\n    elseif type(k) == \"string\" then\r\n      return ref(k)\r\n    else\r\n      return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "function mt_grammar.__newindex(t, k, v)\r\n    if getmetatable(v) == rule_mt then\r\n      mt_grammar.grammar[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"table\" then\r\n      old_mt.__newindex[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"function\" then\r\n      old_mt.__newindex(t, k, v)\r\n    else\r\n      rawset(t, k, v)\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 123,
    "text": "if getmetatable(v) == rule_mt then\r\n      mt_grammar.grammar[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"table\" then\r\n      old_mt.__newindex[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"function\" then\r\n      old_mt.__newindex(t, k, v)\r\n    else\r\n      rawset(t, k, v)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "mt_grammar.grammar[k] = v",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "old_mt.__newindex[k] = v",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "old_mt.__newindex(t, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "rawset(t, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "setmetatable(env, mt_grammar)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function mt_grammar.__index(t, k)\r\n    if grammar_env[k] then\r\n      return grammar_env[k]\r\n    elseif old_mt and type(old_mt.__index) == \"table\" and old_mt.__index[k] then\r\n      return old_mt.__index[k]\r\n    elseif old_mt and type(old_mt.__index) == \"function\" and old_mt.__index(t, k) then\r\n      return old_mt.__index(t, k)\r\n    elseif type(k) == \"string\" then\r\n      return ref(k)\r\n    else\r\n      return nil\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function mt_grammar.__newindex(t, k, v)\r\n    if getmetatable(v) == rule_mt then\r\n      mt_grammar.grammar[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"table\" then\r\n      old_mt.__newindex[k] = v\r\n    elseif old_mt and type(old_mt.__newindex) == \"function\" then\r\n      old_mt.__newindex(t, k, v)\r\n    else\r\n      rawset(t, k, v)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function close_grammar()\r\n  local env = getfenv(2)\r\n  local mt_grammar = getmetatable(env)\r\n  setmetatable(env, mt_grammar.old_mt)\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "local mt_grammar = getmetatable(env)",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "setmetatable(env, mt_grammar.old_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function () return parsers[name] end",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "function container"
  }, {
    "id": 140,
    "text": "local function expr()\r\n      if prec_classes[prec].unary then\r\n\treturn (star(choice(unpack(this_class))) .. _M[\"Exp_\" .. (prec + 1)]) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[1] == 0 then return tree[2] end\r\n\t\t\t     local node = { tag = \"unop\", op = cheese.concat(tree[1][1]) }\r\n\t\t\t     local res = node\r\n\t\t\t     for i = 2, #tree[1] do\r\n\t\t\t       node.operand = { tag = \"unop\", op = cheese.concat(tree[1][i]) }\r\n\t\t\t       node = node.operand\r\n\t\t\t     end\r\n\t\t\t     node.operand = tree[2]\t\t\t\t\t\t\r\n\t\t\t     return res\t\t\t\t\t\t   \t\r\n\t\t\t   end\r\n      else\r\n\tlocal operator\r\n\tif #this_class == 1 then\r\n\t  operator = this_class[1]\r\n\telse\r\n\t  operator = choice(unpack(this_class)) \r\n        end\r\n\treturn (_M[\"Exp_\" .. (prec + 1)] .. star(operator .. _M[\"Exp_\" .. (prec + 1)])) %\r\n\t\t\t   function (tree)\r\n\t\t\t     if #tree[2] == 0 then return tree[1] end\r\n\t\t\t     if prec_classes[prec].right then\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][1][1]),\r\n\t\t\t\t left = tree[1] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = 1, #tree[2]-1 do\r\n\t\t\t\t node.right = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   left = tree[2][i][2] }\r\n\t\t\t\t node = node.right\r\n\t\t\t       end\r\n\t\t\t       node.right = tree[2][#tree[2]][2]\t     \r\n\t\t\t       return res\r\n\t\t\t     else\r\n\t\t\t       local node = { tag = \"binop\", op = cheese.concat(tree[2][#tree[2]][1]),\r\n\t\t\t\t right = tree[2][#tree[2]][2] }\r\n\t\t\t       local res = node\r\n\t\t\t       for i = #tree[2]-1, 1, -1 do\r\n\t\t\t\t node.left = { tag = \"binop\", op = cheese.concat(tree[2][i][1]),\r\n\t\t\t\t   right = tree[2][i][2] }\r\n\t\t\t\t node = node.left\r\n\t\t\t       end\r\n\t\t\t       node.left = tree[1]\r\n\t\t\t       return res\r\n\t\t\t     end\r\n\t\t\t   end\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "function container"
  }, {
    "id": 142,
    "text": "",
    "type": "function container"
  }, {
    "id": 143,
    "text": "handle",
    "type": "global function"
  }, {
    "id": 144,
    "text": "seq",
    "type": "global function"
  }, {
    "id": 145,
    "text": "lazy",
    "type": "global function"
  }, {
    "id": 146,
    "text": "char",
    "type": "global function"
  }, {
    "id": 147,
    "text": "pnot",
    "type": "global function"
  }, {
    "id": 148,
    "text": "star",
    "type": "global function"
  }, {
    "id": 149,
    "text": "str",
    "type": "global function"
  }, {
    "id": 150,
    "text": "pand",
    "type": "global function"
  }, {
    "id": 151,
    "text": "class",
    "type": "global function"
  }, {
    "id": 152,
    "text": "choice",
    "type": "global function"
  }, {
    "id": 153,
    "text": "opt",
    "type": "global function"
  }, {
    "id": 154,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 155,
    "text": "plus",
    "type": "global function"
  }, {
    "id": 156,
    "text": "__index",
    "type": "global function"
  }, {
    "id": 157,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 158,
    "text": "__newindex",
    "type": "global function"
  }, {
    "id": 159,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 160,
    "text": "module",
    "type": "global function"
  }, {
    "id": 161,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 162,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 163,
    "text": "type",
    "type": "global function"
  }, {
    "id": 164,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 165,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 166,
    "text": "_M[\"compile_\" .. rule.tag]",
    "type": "global function"
  }, {
    "id": 167,
    "text": "require",
    "type": "global function"
  }, {
    "id": 168,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 169,
    "text": "select",
    "type": "global function"
  }, {
    "id": 170,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 171,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 172,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 173,
    "text": "",
    "type": "variable container"
  }, {
    "id": 174,
    "text": "",
    "type": "require container"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "global variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  }, {
    "id": 178,
    "text": "",
    "type": "global variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "global variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "require local variable"
  } ]
}