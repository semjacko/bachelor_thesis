{
  "_filename": "parsers.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cheese/src/parsers.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 31
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 32
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 34
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 43,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 37
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 40
  }, {
    "from": 46,
    "label": "has",
    "to": 41
  }, {
    "from": 43,
    "label": "has",
    "to": 34
  }, {
    "from": 43,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 31
  }, {
    "from": 48,
    "label": "has",
    "to": 32
  }, {
    "from": 48,
    "label": "has",
    "to": 34
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 31
  }, {
    "from": 51,
    "label": "has",
    "to": 32
  }, {
    "from": 51,
    "label": "has",
    "to": 34
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 30
  }, {
    "from": 54,
    "label": "has",
    "to": 8
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 37
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 32
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 39
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 62,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 30
  }, {
    "from": 62,
    "label": "has",
    "to": 8
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 31
  }, {
    "from": 63,
    "label": "has",
    "to": 32
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 34
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 32
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 76
  }, {
    "from": 80,
    "label": "has",
    "to": 77
  }, {
    "from": 81,
    "label": "has",
    "to": 9
  }, {
    "from": 81,
    "label": "has",
    "to": 4
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 12
  }, {
    "from": 83,
    "label": "has",
    "to": 13
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 16
  }, {
    "from": 85,
    "label": "has",
    "to": 17
  }, {
    "from": 85,
    "label": "has",
    "to": 4
  }, {
    "from": 85,
    "label": "has",
    "to": 4
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 20
  }, {
    "from": 87,
    "label": "has",
    "to": 21
  }, {
    "from": 87,
    "label": "has",
    "to": 4
  }, {
    "from": 87,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 87,
    "label": "has",
    "to": 4
  }, {
    "from": 87,
    "label": "has",
    "to": 4
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 31
  }, {
    "from": 89,
    "label": "has",
    "to": 32
  }, {
    "from": 89,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 89,
    "label": "has",
    "to": 4
  }, {
    "from": 89,
    "label": "has",
    "to": 4
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 31
  }, {
    "from": 91,
    "label": "has",
    "to": 37
  }, {
    "from": 91,
    "label": "has",
    "to": 32
  }, {
    "from": 91,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 91,
    "label": "has",
    "to": 34
  }, {
    "from": 91,
    "label": "has",
    "to": 4
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 44
  }, {
    "from": 93,
    "label": "has",
    "to": 37
  }, {
    "from": 93,
    "label": "has",
    "to": 45
  }, {
    "from": 93,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 40
  }, {
    "from": 46,
    "label": "has",
    "to": 41
  }, {
    "from": 93,
    "label": "has",
    "to": 34
  }, {
    "from": 93,
    "label": "has",
    "to": 4
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 31
  }, {
    "from": 95,
    "label": "has",
    "to": 32
  }, {
    "from": 95,
    "label": "has",
    "to": 34
  }, {
    "from": 95,
    "label": "has",
    "to": 49
  }, {
    "from": 95,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 31
  }, {
    "from": 97,
    "label": "has",
    "to": 32
  }, {
    "from": 97,
    "label": "has",
    "to": 34
  }, {
    "from": 97,
    "label": "has",
    "to": 52
  }, {
    "from": 97,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 37
  }, {
    "from": 99,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 32
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 39
  }, {
    "from": 99,
    "label": "has",
    "to": 4
  }, {
    "from": 99,
    "label": "has",
    "to": 4
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 31
  }, {
    "from": 63,
    "label": "has",
    "to": 32
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 34
  }, {
    "from": 101,
    "label": "has",
    "to": 4
  }, {
    "from": 101,
    "label": "has",
    "to": 4
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 70
  }, {
    "from": 103,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 32
  }, {
    "from": 105,
    "label": "has",
    "to": 78
  }, {
    "from": 105,
    "label": "has",
    "to": 4
  }, {
    "from": 105,
    "label": "has",
    "to": 4
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 66,
    "label": "calls",
    "to": 115
  }, {
    "from": 19,
    "label": "calls",
    "to": 108
  }, {
    "from": 54,
    "label": "calls",
    "to": 108
  }, {
    "from": 62,
    "label": "calls",
    "to": 108
  }, {
    "from": 66,
    "label": "calls",
    "to": 108
  }, {
    "from": 36,
    "label": "calls",
    "to": 111
  }, {
    "from": 43,
    "label": "calls",
    "to": 111
  }, {
    "from": 54,
    "label": "calls",
    "to": 111
  }, {
    "from": 6,
    "label": "calls",
    "to": 118
  }, {
    "from": 15,
    "label": "calls",
    "to": 120
  }, {
    "from": 11,
    "label": "calls",
    "to": 2
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 19,
    "label": "calls",
    "to": 2
  }, {
    "from": 19,
    "label": "calls",
    "to": 2
  }, {
    "from": 51,
    "label": "calls",
    "to": 2
  }, {
    "from": 62,
    "label": "calls",
    "to": 2
  }, {
    "from": 28,
    "label": "calls",
    "to": 109
  }, {
    "from": 36,
    "label": "calls",
    "to": 109
  }, {
    "from": 36,
    "label": "calls",
    "to": 109
  }, {
    "from": 43,
    "label": "calls",
    "to": 109
  }, {
    "from": 48,
    "label": "calls",
    "to": 109
  }, {
    "from": 51,
    "label": "calls",
    "to": 109
  }, {
    "from": 54,
    "label": "calls",
    "to": 109
  }, {
    "from": 62,
    "label": "calls",
    "to": 109
  }, {
    "from": 74,
    "label": "calls",
    "to": 109
  }, {
    "from": 6,
    "label": "calls",
    "to": 117
  }, {
    "from": 66,
    "label": "calls",
    "to": 117
  }, {
    "from": 54,
    "label": "calls",
    "to": 119
  }, {
    "from": 54,
    "label": "calls",
    "to": 119
  }, {
    "from": 54,
    "label": "calls",
    "to": 119
  }, {
    "from": 62,
    "label": "calls",
    "to": 119
  }, {
    "from": 62,
    "label": "calls",
    "to": 119
  }, {
    "from": 62,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 114
  }, {
    "from": 43,
    "label": "calls",
    "to": 114
  }, {
    "from": 19,
    "label": "calls",
    "to": 112
  }, {
    "from": 66,
    "label": "calls",
    "to": 112
  }, {
    "from": 107,
    "label": "calls",
    "to": 110
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 116
  }, {
    "from": 28,
    "label": "calls",
    "to": 116
  }, {
    "from": 36,
    "label": "calls",
    "to": 116
  }, {
    "from": 43,
    "label": "calls",
    "to": 116
  }, {
    "from": 48,
    "label": "calls",
    "to": 116
  }, {
    "from": 48,
    "label": "calls",
    "to": 116
  }, {
    "from": 51,
    "label": "calls",
    "to": 116
  }, {
    "from": 54,
    "label": "calls",
    "to": 116
  }, {
    "from": 54,
    "label": "calls",
    "to": 116
  }, {
    "from": 54,
    "label": "calls",
    "to": 116
  }, {
    "from": 62,
    "label": "calls",
    "to": 116
  }, {
    "from": 62,
    "label": "calls",
    "to": 116
  }, {
    "from": 66,
    "label": "calls",
    "to": 116
  }, {
    "from": 74,
    "label": "calls",
    "to": 116
  }, {
    "from": 74,
    "label": "calls",
    "to": 116
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 107,
    "label": "declares",
    "to": 2
  }, {
    "from": 107,
    "label": "declares",
    "to": 6
  }, {
    "from": 107,
    "label": "declares",
    "to": 11
  }, {
    "from": 107,
    "label": "declares",
    "to": 15
  }, {
    "from": 107,
    "label": "declares",
    "to": 19
  }, {
    "from": 107,
    "label": "declares",
    "to": 26
  }, {
    "from": 107,
    "label": "declares",
    "to": 28
  }, {
    "from": 107,
    "label": "declares",
    "to": 36
  }, {
    "from": 107,
    "label": "declares",
    "to": 43
  }, {
    "from": 107,
    "label": "declares",
    "to": 48
  }, {
    "from": 107,
    "label": "declares",
    "to": 51
  }, {
    "from": 107,
    "label": "declares",
    "to": 54
  }, {
    "from": 107,
    "label": "declares",
    "to": 62
  }, {
    "from": 107,
    "label": "declares",
    "to": 66
  }, {
    "from": 107,
    "label": "declares",
    "to": 74
  }, {
    "from": 107,
    "label": "declares",
    "to": 80
  }, {
    "from": 107,
    "label": "declares",
    "to": 81
  }, {
    "from": 107,
    "label": "declares",
    "to": 83
  }, {
    "from": 107,
    "label": "declares",
    "to": 85
  }, {
    "from": 107,
    "label": "declares",
    "to": 87
  }, {
    "from": 107,
    "label": "declares",
    "to": 89
  }, {
    "from": 107,
    "label": "declares",
    "to": 91
  }, {
    "from": 107,
    "label": "declares",
    "to": 93
  }, {
    "from": 107,
    "label": "declares",
    "to": 95
  }, {
    "from": 107,
    "label": "declares",
    "to": 97
  }, {
    "from": 107,
    "label": "declares",
    "to": 99
  }, {
    "from": 107,
    "label": "declares",
    "to": 101
  }, {
    "from": 107,
    "label": "declares",
    "to": 103
  }, {
    "from": 107,
    "label": "declares",
    "to": 105
  }, {
    "from": 1,
    "label": "declares",
    "to": 113
  }, {
    "from": 121,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 122,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "parsers",
    "type": "module"
  }, {
    "id": 2,
    "text": "function parse_error(message, strm)\r\n  local err_data = { msg = message, state = strm:state() }\r\n  return error(err_data)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local err_data = { msg = message, state = strm:state() }",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function lazy(thunk, ...)\r\n  local exp\r\n  local args = {...}\r\n  return function (strm, clear)\r\n\t   exp = (not clear and exp) or thunk(unpack(args))\r\n\t   return exp(strm)\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local exp",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "exp = (not clear and exp) or thunk(unpack(args))",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function char(c)\r\n  return function (strm)\r\n\t\t   local cc = strm:getc()\r\n\t\t   if cc == c then\r\n\t\t     return cc\r\n\t\t   else\r\n\t\t     return parse_error(\"character match\", strm)\r\n\t\t   end\r\n\t\t end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local cc = strm:getc()",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if cc == c then\r\n\t\t     return cc\r\n\t\t   else\r\n\t\t     return parse_error(\"character match\", strm)\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function str(s)\r\n  return function (strm)\r\n\t\t   local ss = strm:gets(string.len(s))\r\n\t\t   if (not ss) or (s ~= ss) then\r\n\t\t     return parse_error(\"string match\", strm)\r\n\t\t   end\r\n\t\t   return ss\r\n\t\t \t         end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local ss = strm:gets(string.len(s))",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if (not ss) or (s ~= ss) then\r\n\t\t     return parse_error(\"string match\", strm)\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function class(...)\r\n  local args = {...}\r\n  return function (strm)\r\n\t\t   local c = strm:getc()\r\n\t\t   if not c then\r\n\t\t     return parse_error(\"character match\", strm)\r\n\t\t   end\r\n\t\t   for _, class in ipairs(args) do\r\n\t\t     local type_class = type(class)\r\n\t\t     if (type_class == \"string\" and\r\n\t\t\t c == class) or\r\n\t\t        (type_class == \"table\" and\r\n\t\t         c >= class[1] and c <= class[2]) then\r\n\t\t       return c\r\n\t\t     end\r\n\t\t   end\r\n\t\t   return parse_error(\"character match\", strm)\r\n\t\t end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local c = strm:getc()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not c then\r\n\t\t     return parse_error(\"character match\", strm)\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "for _, class in ipairs(args) do\r\n\t\t     local type_class = type(class)\r\n\t\t     if (type_class == \"string\" and\r\n\t\t\t c == class) or\r\n\t\t        (type_class == \"table\" and\r\n\t\t         c >= class[1] and c <= class[2]) then\r\n\t\t       return c\r\n\t\t     end\r\n\t\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "local type_class = type(class)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if (type_class == \"string\" and\r\n\t\t\t c == class) or\r\n\t\t        (type_class == \"table\" and\r\n\t\t         c >= class[1] and c <= class[2]) then\r\n\t\t       return c\r\n\t\t     end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function (strm)\r\n\treturn strm:getc()\r\n      end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function opt(exp)\r\n  if not exp then error(\"nil expression\") end\r\n  return (function (strm)\r\n\t\t   local state = strm:state()\r\n\t\t   local ok, res = pcall(exp, strm)\r\n\t\t   if ok then\r\n\t\t     return res\r\n\t\t   else\r\n\t\t     strm:backtrack(state)\r\n\t\t     return {}\r\n\t\t   end\r\n\t         end)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if not exp then error(\"nil expression\") end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "error(\"nil expression\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "local state = strm:state()",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local ok, res = pcall(exp, strm)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if ok then\r\n\t\t     return res\r\n\t\t   else\r\n\t\t     strm:backtrack(state)\r\n\t\t     return {}\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "strm:backtrack(state)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function star(exp)\r\n  if not exp then error(\"nil expression\") end\r\n  return (function (strm)\r\n\t\t   local state = strm:state()\r\n\t\t   local list = {}\r\n\t\t   local ok, res = pcall(exp, strm)\r\n\t\t   while ok do\r\n\t\t     table.insert(list, res)\r\n\t\t     state = strm:state()\r\n\t\t     ok, res = pcall(exp, strm)\r\n\t\t   end\r\n\t\t   strm:backtrack(state)\r\n\t\t   return list\r\n\t\t end)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "while ok do\r\n\t\t     table.insert(list, res)\r\n\t\t     state = strm:state()\r\n\t\t     ok, res = pcall(exp, strm)\r\n\t\t   end",
    "type": "statement:while"
  }, {
    "id": 39,
    "text": "table.insert(list, res)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "state = strm:state()",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "ok, res = pcall(exp, strm)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function plus(exp)\r\n  if not exp then error(\"nil expression\") end\r\n  return function (strm)\r\n\t\t   local state, ok\r\n\t\t   local list = {}\r\n\t\t   local res = exp(strm)\r\n\t\t   repeat\r\n\t\t     table.insert(list, res)\r\n\t\t     state = strm:state()\r\n\t\t     ok, res = pcall(exp, strm)\r\n\t\t   until not ok\r\n\t\t   strm:backtrack(state)\r\n\t\t   return list\r\n\t\t end\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local state, ok",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local res = exp(strm)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "repeat\r\n\t\t     table.insert(list, res)\r\n\t\t     state = strm:state()\r\n\t\t     ok, res = pcall(exp, strm)\r\n\t\t   until not ok",
    "type": "statement:repeat"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function pand(exp)\r\n  if not exp then error(\"nil expression\") end\r\n  return (function (strm)\r\n\t\t   local state = strm:state()\r\n\t\t   local ok, res = pcall(exp, strm)\r\n\t\t   strm:backtrack(state)\r\n\t\t   if ok then\r\n\t\t     return {}\r\n\t\t   else\r\n\t\t     return error(res)\r\n\t\t   end\r\n\t         end)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if ok then\r\n\t\t     return {}\r\n\t\t   else\r\n\t\t     return error(res)\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function pnot(exp)\r\n  if not exp then error(\"nil expression\") end\r\n  return (function (strm)\r\n\t\t   local state = strm:state()\r\n\t\t   local ok, res = pcall(exp, strm)\r\n\t\t   strm:backtrack(state)\r\n\t\t   if ok then\r\n\t\t     return parse_error(\"predicate not\", strm)\r\n\t\t   else\r\n\t\t     return {}\r\n\t\t   end\r\n\t         end)\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "if ok then\r\n\t\t     return parse_error(\"predicate not\", strm)\r\n\t\t   else\r\n\t\t     return {}\r\n\t\t   end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function seq(...)\r\n  if select(\"#\", ...) < 2 then error(\"sequence with too few elements\") end\r\n  for i = 1, select(\"#\", ...) do\r\n    if not select(i, ...) then error(\"nil expression\") end\r\n  end\r\n  local args = {...}\r\n  return (function (strm)\r\n\t\t   local list = {}\r\n\t\t   for i, exp in ipairs(args) do\r\n\t\t     local ok, res = pcall(exp, strm)\r\n\t\t     if ok then\r\n\t\t       table.insert(list, res)\r\n\t\t     else\r\n\t\t       return error(res)\r\n\t\t     end\r\n\t\t   end\r\n\t\t   return list\r\n\t         end)\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "if select(\"#\", ...) < 2 then error(\"sequence with too few elements\") end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "error(\"sequence with too few elements\")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "for i = 1, select(\"#\", ...) do\r\n    if not select(i, ...) then error(\"nil expression\") end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 58,
    "text": "if not select(i, ...) then error(\"nil expression\") end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "for i, exp in ipairs(args) do\r\n\t\t     local ok, res = pcall(exp, strm)\r\n\t\t     if ok then\r\n\t\t       table.insert(list, res)\r\n\t\t     else\r\n\t\t       return error(res)\r\n\t\t     end\r\n\t\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "if ok then\r\n\t\t       table.insert(list, res)\r\n\t\t     else\r\n\t\t       return error(res)\r\n\t\t     end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function choice(...)\r\n  if select(\"#\", ...) < 2 then error(\"sequence with too few elements\") end\r\n  for i = 1, select(\"#\", ...) do\r\n    if not select(i, ...) then error(\"nil expression\") end\r\n  end\r\n  local args = {...}\r\n  return (function (strm)\r\n\t\t   for i, exp in ipairs(args) do\r\n\t\t     local state = strm:state()\r\n\t\t     local ok, res = pcall(exp, strm)\r\n\t\t     if ok then\r\n\t\t       return res\r\n\t\t     end\r\n\t\t     strm:backtrack(state)\r\n\t\t   end\r\n\t           return parse_error(\"no valid alternatives\", strm)\r\n\t\t end)\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "for i, exp in ipairs(args) do\r\n\t\t     local state = strm:state()\r\n\t\t     local ok, res = pcall(exp, strm)\r\n\t\t     if ok then\r\n\t\t       return res\r\n\t\t     end\r\n\t\t     strm:backtrack(state)\r\n\t\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 64,
    "text": "if ok then\r\n\t\t       return res\r\n\t\t     end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function bind(exp, func)\r\n  if not exp then error(\"nil expression\") end\r\n  if type(func) == \"function\" then func = { func } end\r\n  local funcs = { exp, unpack(func) }\r\n  return function (strm)\r\n\t   local tree = strm\r\n\t   for _, f in ipairs(funcs) do\r\n\t     tree = f(tree)\r\n\t   end\r\n\t   return tree\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "if type(func) == \"function\" then func = { func } end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "func = { func }",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "local funcs = { exp, unpack(func) }",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local tree = strm",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "for _, f in ipairs(funcs) do\r\n\t     tree = f(tree)\r\n\t   end",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "tree = f(tree)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function handle(exp, func)\r\n  if not exp then error(\"nil expression\") end\r\n  func = func or function (strm, err) strm:log_error(err); error(err) end\r\n  return function (strm)\r\n\t   local ok, res = pcall(exp, strm)\r\n   \t   if ok then return res else return func(strm, res) end\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "func = func or function (strm, err) strm:log_error(err); error(err) end",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "strm:log_error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if ok then return res else return func(strm, res) end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function (strm, err) strm:log_error(err); error(err) end",
    "type": "function"
  }, {
    "id": 81,
    "text": "function (strm, clear)\r\n\t   exp = (not clear and exp) or thunk(unpack(args))\r\n\t   return exp(strm)\r\n\t end",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function (strm)\r\n\t\t   local cc = strm:getc()\r\n\t\t   if cc == c then\r\n\t\t     return cc\r\n\t\t   else\r\n\t\t     return parse_error(\"character match\", strm)\r\n\t\t   end\r\n\t\t end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function (strm)\r\n\t\t   local ss = strm:gets(string.len(s))\r\n\t\t   if (not ss) or (s ~= ss) then\r\n\t\t     return parse_error(\"string match\", strm)\r\n\t\t   end\r\n\t\t   return ss\r\n\t\t \t         end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function (strm)\r\n\t\t   local c = strm:getc()\r\n\t\t   if not c then\r\n\t\t     return parse_error(\"character match\", strm)\r\n\t\t   end\r\n\t\t   for _, class in ipairs(args) do\r\n\t\t     local type_class = type(class)\r\n\t\t     if (type_class == \"string\" and\r\n\t\t\t c == class) or\r\n\t\t        (type_class == \"table\" and\r\n\t\t         c >= class[1] and c <= class[2]) then\r\n\t\t       return c\r\n\t\t     end\r\n\t\t   end\r\n\t\t   return parse_error(\"character match\", strm)\r\n\t\t end",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function (strm)\r\n\t\t   local state = strm:state()\r\n\t\t   local ok, res = pcall(exp, strm)\r\n\t\t   if ok then\r\n\t\t     return res\r\n\t\t   else\r\n\t\t     strm:backtrack(state)\r\n\t\t     return {}\r\n\t\t   end\r\n\t         end",
    "type": "function"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function (strm)\r\n\t\t   local state = strm:state()\r\n\t\t   local list = {}\r\n\t\t   local ok, res = pcall(exp, strm)\r\n\t\t   while ok do\r\n\t\t     table.insert(list, res)\r\n\t\t     state = strm:state()\r\n\t\t     ok, res = pcall(exp, strm)\r\n\t\t   end\r\n\t\t   strm:backtrack(state)\r\n\t\t   return list\r\n\t\t end",
    "type": "function"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function (strm)\r\n\t\t   local state, ok\r\n\t\t   local list = {}\r\n\t\t   local res = exp(strm)\r\n\t\t   repeat\r\n\t\t     table.insert(list, res)\r\n\t\t     state = strm:state()\r\n\t\t     ok, res = pcall(exp, strm)\r\n\t\t   until not ok\r\n\t\t   strm:backtrack(state)\r\n\t\t   return list\r\n\t\t end",
    "type": "function"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function (strm)\r\n\t\t   local state = strm:state()\r\n\t\t   local ok, res = pcall(exp, strm)\r\n\t\t   strm:backtrack(state)\r\n\t\t   if ok then\r\n\t\t     return {}\r\n\t\t   else\r\n\t\t     return error(res)\r\n\t\t   end\r\n\t         end",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function (strm)\r\n\t\t   local state = strm:state()\r\n\t\t   local ok, res = pcall(exp, strm)\r\n\t\t   strm:backtrack(state)\r\n\t\t   if ok then\r\n\t\t     return parse_error(\"predicate not\", strm)\r\n\t\t   else\r\n\t\t     return {}\r\n\t\t   end\r\n\t         end",
    "type": "function"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function (strm)\r\n\t\t   local list = {}\r\n\t\t   for i, exp in ipairs(args) do\r\n\t\t     local ok, res = pcall(exp, strm)\r\n\t\t     if ok then\r\n\t\t       table.insert(list, res)\r\n\t\t     else\r\n\t\t       return error(res)\r\n\t\t     end\r\n\t\t   end\r\n\t\t   return list\r\n\t         end",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function (strm)\r\n\t\t   for i, exp in ipairs(args) do\r\n\t\t     local state = strm:state()\r\n\t\t     local ok, res = pcall(exp, strm)\r\n\t\t     if ok then\r\n\t\t       return res\r\n\t\t     end\r\n\t\t     strm:backtrack(state)\r\n\t\t   end\r\n\t           return parse_error(\"no valid alternatives\", strm)\r\n\t\t end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function (strm)\r\n\t   local tree = strm\r\n\t   for _, f in ipairs(funcs) do\r\n\t     tree = f(tree)\r\n\t   end\r\n\t   return tree\r\n\t end",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function (strm)\r\n\t   local ok, res = pcall(exp, strm)\r\n   \t   if ok then return res else return func(strm, res) end\r\n\t end",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "",
    "type": "function container"
  }, {
    "id": 108,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 109,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 110,
    "text": "module",
    "type": "global function"
  }, {
    "id": 111,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 112,
    "text": "type",
    "type": "global function"
  }, {
    "id": 113,
    "text": "join",
    "type": "global function"
  }, {
    "id": 114,
    "text": "exp",
    "type": "global function"
  }, {
    "id": 115,
    "text": "f",
    "type": "global function"
  }, {
    "id": 116,
    "text": "error",
    "type": "global function"
  }, {
    "id": 117,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 118,
    "text": "thunk",
    "type": "global function"
  }, {
    "id": 119,
    "text": "select",
    "type": "global function"
  }, {
    "id": 120,
    "text": "len",
    "type": "global function"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "variable container"
  }, {
    "id": 123,
    "text": "",
    "type": "require container"
  }, {
    "id": 124,
    "text": "",
    "type": "global variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  } ]
}