{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/StackTracePlus/unittest/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 72
  }, {
    "from": 5,
    "label": "calls",
    "to": 72
  }, {
    "from": 2,
    "label": "contains",
    "to": 5
  }, {
    "from": 5,
    "label": "declares",
    "to": 3
  }, {
    "from": 5,
    "label": "declares",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 32,
    "label": "has",
    "to": 41
  }, {
    "from": 32,
    "label": "has",
    "to": 42
  }, {
    "from": 32,
    "label": "has",
    "to": 43
  }, {
    "from": 32,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 35
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 10
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 9
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 37
  }, {
    "from": 54,
    "label": "has",
    "to": 38
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 49
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 15,
    "label": "calls",
    "to": 61
  }, {
    "from": 5,
    "label": "calls",
    "to": 71
  }, {
    "from": 32,
    "label": "calls",
    "to": 67
  }, {
    "from": 32,
    "label": "calls",
    "to": 66
  }, {
    "from": 32,
    "label": "calls",
    "to": 63
  }, {
    "from": 6,
    "label": "calls",
    "to": 69
  }, {
    "from": 15,
    "label": "calls",
    "to": 69
  }, {
    "from": 25,
    "label": "calls",
    "to": 69
  }, {
    "from": 47,
    "label": "calls",
    "to": 69
  }, {
    "from": 5,
    "label": "calls",
    "to": 72
  }, {
    "from": 5,
    "label": "calls",
    "to": 72
  }, {
    "from": 6,
    "label": "calls",
    "to": 64
  }, {
    "from": 15,
    "label": "calls",
    "to": 64
  }, {
    "from": 25,
    "label": "calls",
    "to": 64
  }, {
    "from": 45,
    "label": "calls",
    "to": 64
  }, {
    "from": 47,
    "label": "calls",
    "to": 64
  }, {
    "from": 47,
    "label": "calls",
    "to": 64
  }, {
    "from": 47,
    "label": "calls",
    "to": 70
  }, {
    "from": 5,
    "label": "calls",
    "to": 59
  }, {
    "from": 25,
    "label": "calls",
    "to": 60
  }, {
    "from": 6,
    "label": "calls",
    "to": 65
  }, {
    "from": 15,
    "label": "calls",
    "to": 65
  }, {
    "from": 25,
    "label": "calls",
    "to": 65
  }, {
    "from": 32,
    "label": "calls",
    "to": 65
  }, {
    "from": 32,
    "label": "calls",
    "to": 65
  }, {
    "from": 32,
    "label": "calls",
    "to": 62
  }, {
    "from": 32,
    "label": "calls",
    "to": 45
  }, {
    "from": 47,
    "label": "calls",
    "to": 68
  }, {
    "from": 5,
    "label": "declares",
    "to": 6
  }, {
    "from": 5,
    "label": "declares",
    "to": 13
  }, {
    "from": 5,
    "label": "declares",
    "to": 15
  }, {
    "from": 5,
    "label": "declares",
    "to": 21
  }, {
    "from": 5,
    "label": "declares",
    "to": 23
  }, {
    "from": 5,
    "label": "declares",
    "to": 25
  }, {
    "from": 5,
    "label": "declares",
    "to": 30
  }, {
    "from": 5,
    "label": "declares",
    "to": 32
  }, {
    "from": 5,
    "label": "declares",
    "to": 45
  }, {
    "from": 5,
    "label": "declares",
    "to": 47
  }, {
    "from": 5,
    "label": "declares",
    "to": 52
  }, {
    "from": 5,
    "label": "declares",
    "to": 54
  }, {
    "from": 5,
    "label": "declares",
    "to": 56
  }, {
    "from": 2,
    "label": "contains",
    "to": 73
  }, {
    "from": 2,
    "label": "contains",
    "to": 74
  }, {
    "from": 73,
    "label": "initializes",
    "to": 75
  }, {
    "from": 74,
    "label": "initializes",
    "to": 76
  }, {
    "from": 74,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 78
  }, {
    "from": 2,
    "label": "contains",
    "to": 79
  }, {
    "from": 79,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "requires",
    "to": 1
  }, {
    "from": 79,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 58
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "StackTracePlus",
    "type": "module"
  }, {
    "id": 2,
    "text": "test",
    "type": "module"
  }, {
    "id": 3,
    "text": "function f(str, tb, ...)\r\n\tlocal g = function(fun)\r\n\t\tlocal str = str\r\n\t\tlocal tb = tb\r\n\t\tlocal a = nil .. \"text\"\r\n\tend\r\n\treturn g(table)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function(fun)\r\n\t\tlocal str = str\r\n\t\tlocal tb = tb\r\n\t\tlocal a = nil .. \"text\"\r\n\tend",
    "type": "function"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "function testLuaModule()\r\n\tlocal f = function()\r\n\t\tlocal t = table\r\n\t\terror(\"an error\")\r\n\tend\r\n\r\n\tlocal ok, err = xpcall(f, STP.stacktrace)\r\n\tassert_match( [[t = table module]], err, \"\" )\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local f = function()\r\n\t\tlocal t = table\r\n\t\terror(\"an error\")\r\n\tend",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local t = table",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "error(\"an error\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local ok, err = xpcall(f, STP.stacktrace)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "assert_match( [[t = table module]], err, \"\" )",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function()\r\n\t\tlocal t = table\r\n\t\terror(\"an error\")\r\n\tend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function testKnownFunction()\r\n\tlocal my_function = function()\r\n\tend\r\n\tlocal f = function()\r\n\t\terror(\"an error\")\r\n\tend\r\n\tSTP.add_known_function(my_function, \"this is my function\")\r\n\r\n\tlocal ok, err = xpcall(f, STP.stacktrace)\r\n\tassert_match( [['this is my function']], err, \"\" )\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local my_function = function()\r\n\tend",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local f = function()\r\n\t\terror(\"an error\")\r\n\tend",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "STP.add_known_function(my_function, \"this is my function\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert_match( [['this is my function']], err, \"\" )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function()\r\n\tend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n\t\terror(\"an error\")\r\n\tend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function testKnownTable()\r\n\tlocal my_table = {}\r\n\tlocal f = function()\r\n\t\terror(\"an error\")\r\n\tend\r\n\tSTP.add_known_table(my_table, \"this is my table\")\r\n\r\n\tlocal ok, err = xpcall(f, STP.stacktrace)\r\n\tassert_match( [[ = this is my table]], err, \"\" )\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local my_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "STP.add_known_table(my_table, \"this is my table\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert_match( [[ = this is my table]], err, \"\" )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function()\r\n\t\terror(\"an error\")\r\n\tend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function testCoroutine()\r\n\tlocal var_outside_co = {}\r\n\r\n\tlocal function helper()\r\n\t\tlocal arg_helper = \"hi there!\"\r\n\t\terror(\"an error\")\r\n\tend\r\n\r\n\tlocal co = coroutine.create(function()\r\n\t\tlocal arg_inside_co = \"arg1\"\r\n\t\thelper()\r\n\tend)\r\n\r\n\tlocal status, err_msg = coroutine.resume(co)\r\n\tassert_false(status)\r\n\r\n\tlocal trace = STP.stacktrace(co)\r\n\tassert_match(\"arg_inside_co\", trace)\r\n\tassert_match(\"arg_helper\", trace)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local var_outside_co = {}",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local function helper()\r\n\t\tlocal arg_helper = \"hi there!\"\r\n\t\terror(\"an error\")\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 35,
    "text": "local arg_helper = \"hi there!\"",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local co = coroutine.create(function()\r\n\t\tlocal arg_inside_co = \"arg1\"\r\n\t\thelper()\r\n\tend)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local arg_inside_co = \"arg1\"",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "helper()",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local status, err_msg = coroutine.resume(co)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "assert_false(status)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local trace = STP.stacktrace(co)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "assert_match(\"arg_inside_co\", trace)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert_match(\"arg_helper\", trace)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function helper()\r\n\t\tlocal arg_helper = \"hi there!\"\r\n\t\terror(\"an error\")\r\n\tend",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function test_error_in_tostring()\r\n\tlocal t = setmetatable({}, {\r\n\t\t__tostring = function()\r\n\t\t\terror(\"Error in tostring\")\r\n\t\tend\r\n\t})\r\n\r\n\tlocal f = function()\r\n\t\terror(\"an error\")\r\n\tend\r\n\r\n\tlocal ok, err = xpcall(f, STP.stacktrace)\r\n\tassert_not_equal(\"error in error handling\", err)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local t = setmetatable({}, {\r\n\t\t__tostring = function()\r\n\t\t\terror(\"Error in tostring\")\r\n\t\tend\r\n\t})",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "error(\"Error in tostring\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert_not_equal(\"error in error handling\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function()\r\n\t\terror(\"an error\")\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function()\r\n\t\tlocal arg_inside_co = \"arg1\"\r\n\t\thelper()\r\n\tend",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n\t\t\terror(\"Error in tostring\")\r\n\t\tend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "lunitx",
    "type": "module"
  }, {
    "id": 59,
    "text": "module",
    "type": "global function"
  }, {
    "id": 60,
    "text": "add_known_table",
    "type": "global function"
  }, {
    "id": 61,
    "text": "add_known_function",
    "type": "global function"
  }, {
    "id": 62,
    "text": "stacktrace",
    "type": "global function"
  }, {
    "id": 63,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 64,
    "text": "error",
    "type": "global function"
  }, {
    "id": 65,
    "text": "assert_match",
    "type": "global function"
  }, {
    "id": 66,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 67,
    "text": "create",
    "type": "global function"
  }, {
    "id": 68,
    "text": "assert_not_equal",
    "type": "global function"
  }, {
    "id": 69,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 70,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 71,
    "text": "module",
    "type": "global function"
  }, {
    "id": 72,
    "text": "require",
    "type": "global function"
  }, {
    "id": 73,
    "text": "",
    "type": "variable container"
  }, {
    "id": 74,
    "text": "",
    "type": "require container"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "variable container"
  }, {
    "id": 79,
    "text": "",
    "type": "require container"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  } ]
}