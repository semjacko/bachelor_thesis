{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-cmsgpack/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 21,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 34
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 34
  }, {
    "from": 45,
    "label": "has",
    "to": 35
  }, {
    "from": 45,
    "label": "has",
    "to": 36
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 48,
    "label": "calls",
    "to": 38
  }, {
    "from": 52,
    "label": "calls",
    "to": 38
  }, {
    "from": 9,
    "label": "calls",
    "to": 59
  }, {
    "from": 20,
    "label": "calls",
    "to": 20
  }, {
    "from": 30,
    "label": "calls",
    "to": 20
  }, {
    "from": 43,
    "label": "calls",
    "to": 20
  }, {
    "from": 30,
    "label": "calls",
    "to": 54
  }, {
    "from": 30,
    "label": "calls",
    "to": 54
  }, {
    "from": 43,
    "label": "calls",
    "to": 54
  }, {
    "from": 43,
    "label": "calls",
    "to": 54
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 52,
    "label": "calls",
    "to": 30
  }, {
    "from": 30,
    "label": "calls",
    "to": 63
  }, {
    "from": 38,
    "label": "calls",
    "to": 63
  }, {
    "from": 43,
    "label": "calls",
    "to": 63
  }, {
    "from": 48,
    "label": "calls",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "calls",
    "to": 60
  }, {
    "from": 13,
    "label": "calls",
    "to": 60
  }, {
    "from": 13,
    "label": "calls",
    "to": 60
  }, {
    "from": 38,
    "label": "calls",
    "to": 2
  }, {
    "from": 38,
    "label": "calls",
    "to": 2
  }, {
    "from": 30,
    "label": "calls",
    "to": 55
  }, {
    "from": 30,
    "label": "calls",
    "to": 55
  }, {
    "from": 38,
    "label": "calls",
    "to": 55
  }, {
    "from": 38,
    "label": "calls",
    "to": 55
  }, {
    "from": 52,
    "label": "calls",
    "to": 55
  }, {
    "from": 13,
    "label": "calls",
    "to": 9
  }, {
    "from": 13,
    "label": "calls",
    "to": 9
  }, {
    "from": 13,
    "label": "calls",
    "to": 64
  }, {
    "from": 20,
    "label": "calls",
    "to": 57
  }, {
    "from": 20,
    "label": "calls",
    "to": 57
  }, {
    "from": 20,
    "label": "calls",
    "to": 61
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 30,
    "label": "calls",
    "to": 58
  }, {
    "from": 30,
    "label": "calls",
    "to": 58
  }, {
    "from": 38,
    "label": "calls",
    "to": 58
  }, {
    "from": 38,
    "label": "calls",
    "to": 58
  }, {
    "from": 43,
    "label": "calls",
    "to": 58
  }, {
    "from": 43,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 58
  }, {
    "from": 43,
    "label": "calls",
    "to": 13
  }, {
    "from": 43,
    "label": "calls",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 52,
    "label": "declares",
    "to": 2
  }, {
    "from": 52,
    "label": "declares",
    "to": 9
  }, {
    "from": 52,
    "label": "declares",
    "to": 13
  }, {
    "from": 52,
    "label": "declares",
    "to": 20
  }, {
    "from": 52,
    "label": "declares",
    "to": 30
  }, {
    "from": 52,
    "label": "declares",
    "to": 38
  }, {
    "from": 52,
    "label": "declares",
    "to": 43
  }, {
    "from": 52,
    "label": "declares",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 65,
    "label": "initializes",
    "to": 67
  }, {
    "from": 65,
    "label": "initializes",
    "to": 68
  }, {
    "from": 65,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 65,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 65,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 65,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 66,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "requires",
    "to": 53
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function hex(s)\r\n    local i\r\n    local h = \"\"\r\n\r\n    for i = 1, #s do\r\n        h = h .. string.format(\"%02x\",string.byte(s,i))\r\n    end\r\n    return h\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local i",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local h = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for i = 1, #s do\r\n        h = h .. string.format(\"%02x\",string.byte(s,i))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 6,
    "text": "h = h .. string.format(\"%02x\",string.byte(s,i))",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function ascii_to_num(c)\r\n    if (c >= string.byte(\"0\") and c <= string.byte(\"9\")) then\r\n        return c - string.byte(\"0\")\r\n    elseif (c >= string.byte(\"A\") and c <= string.byte(\"F\")) then\r\n        return (c - string.byte(\"A\"))+10\r\n    elseif (c >= string.byte(\"a\") and c <= string.byte(\"f\")) then\r\n        return (c - string.byte(\"a\"))+10\r\n    else\r\n        error \"Wrong input for ascii to num convertion.\"\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "if (c >= string.byte(\"0\") and c <= string.byte(\"9\")) then\r\n        return c - string.byte(\"0\")\r\n    elseif (c >= string.byte(\"A\") and c <= string.byte(\"F\")) then\r\n        return (c - string.byte(\"A\"))+10\r\n    elseif (c >= string.byte(\"a\") and c <= string.byte(\"f\")) then\r\n        return (c - string.byte(\"a\"))+10\r\n    else\r\n        error \"Wrong input for ascii to num convertion.\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "error \"Wrong input for ascii to num convertion.\"",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function unhex(h)\r\n    local i\r\n    local s = \"\"\r\n    for i = 1, #h, 2 do\r\n        high = ascii_to_num(string.byte(h,i))\r\n        low = ascii_to_num(string.byte(h,i+1))\r\n        s = s .. string.char((high*16)+low)\r\n    end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "for i = 1, #h, 2 do\r\n        high = ascii_to_num(string.byte(h,i))\r\n        low = ascii_to_num(string.byte(h,i+1))\r\n        s = s .. string.char((high*16)+low)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 16,
    "text": "high = ascii_to_num(string.byte(h,i))",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "low = ascii_to_num(string.byte(h,i+1))",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "s = s .. string.char((high*16)+low)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function compare_objects(a,b)\r\n    if (type(a) == \"table\") then\r\n        local count = 0\r\n        for k,v in pairs(a) do\r\n            if not compare_objects(b[k],v) then return false end\r\n            count = count + 1\r\n        end\r\n        -- All the 'a' keys are equal to their 'b' equivalents.\r\n        -- Now we can check if there are extra fields in 'b'.\r\n        for k,v in pairs(b) do count = count - 1 end\r\n        if count == 0 then return true else return false end\r\n    else\r\n        return a == b\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if (type(a) == \"table\") then\r\n        local count = 0\r\n        for k,v in pairs(a) do\r\n            if not compare_objects(b[k],v) then return false end\r\n            count = count + 1\r\n        end\r\n        -- All the 'a' keys are equal to their 'b' equivalents.\r\n        -- Now we can check if there are extra fields in 'b'.\r\n        for k,v in pairs(b) do count = count - 1 end\r\n        if count == 0 then return true else return false end\r\n    else\r\n        return a == b\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for k,v in pairs(a) do\r\n            if not compare_objects(b[k],v) then return false end\r\n            count = count + 1\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "if not compare_objects(b[k],v) then return false end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "for k,v in pairs(b) do count = count - 1 end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "count = count - 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if count == 0 then return true else return false end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function test_circular(name,obj)\r\n    io.write(\"Circular test '\",name,\"' ...\")\r\n    if not compare_objects(obj,cmsgpack.unpack(cmsgpack.pack(obj))) then\r\n        print(\"ERROR:\", obj, cmsgpack.unpack(cmsgpack.pack(obj)))\r\n        failed = failed+1\r\n    else\r\n        print(\"ok\")\r\n        passed = passed+1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "io.write(\"Circular test '\",name,\"' ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "if not compare_objects(obj,cmsgpack.unpack(cmsgpack.pack(obj))) then\r\n        print(\"ERROR:\", obj, cmsgpack.unpack(cmsgpack.pack(obj)))\r\n        failed = failed+1\r\n    else\r\n        print(\"ok\")\r\n        passed = passed+1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "print(\"ERROR:\", obj, cmsgpack.unpack(cmsgpack.pack(obj)))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "failed = failed+1",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "print(\"ok\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "passed = passed+1",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function test_pack(name,obj,raw)\r\n    io.write(\"Testing encoder '\",name,\"' ...\")\r\n    if hex(cmsgpack.pack(obj)) ~= raw then\r\n        print(\"ERROR:\", obj, hex(cmsgpack.pack(obj)), raw)\r\n        failed = failed+1\r\n    else\r\n        print(\"ok\")\r\n        passed = passed+1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "io.write(\"Testing encoder '\",name,\"' ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "if hex(cmsgpack.pack(obj)) ~= raw then\r\n        print(\"ERROR:\", obj, hex(cmsgpack.pack(obj)), raw)\r\n        failed = failed+1\r\n    else\r\n        print(\"ok\")\r\n        passed = passed+1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "print(\"ERROR:\", obj, hex(cmsgpack.pack(obj)), raw)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function test_unpack(name,raw,obj)\r\n    io.write(\"Testing decoder '\",name,\"' ...\")\r\n    if not compare_objects(cmsgpack.unpack(unhex(raw)),obj) then\r\n        print(\"ERROR:\", obj, raw, cmsgpack.unpack(unhex(raw)))\r\n        failed = failed+1\r\n    else\r\n        print(\"ok\")\r\n        passed = passed+1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "io.write(\"Testing decoder '\",name,\"' ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "if not compare_objects(cmsgpack.unpack(unhex(raw)),obj) then\r\n        print(\"ERROR:\", obj, raw, cmsgpack.unpack(unhex(raw)))\r\n        failed = failed+1\r\n    else\r\n        print(\"ok\")\r\n        passed = passed+1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "print(\"ERROR:\", obj, raw, cmsgpack.unpack(unhex(raw)))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function test_pack_and_unpack(name,obj,raw)\r\n    test_pack(name,obj,raw)\r\n    test_unpack(name,raw,obj)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "test_pack(name,obj,raw)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "test_unpack(name,raw,obj)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "",
    "type": "function container"
  }, {
    "id": 53,
    "text": "cmsgpack",
    "type": "module"
  }, {
    "id": 54,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 55,
    "text": "pack",
    "type": "global function"
  }, {
    "id": 56,
    "text": "format",
    "type": "global function"
  }, {
    "id": 57,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 58,
    "text": "print",
    "type": "global function"
  }, {
    "id": 59,
    "text": "error",
    "type": "global function"
  }, {
    "id": 60,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 61,
    "text": "type",
    "type": "global function"
  }, {
    "id": 62,
    "text": "require",
    "type": "global function"
  }, {
    "id": 63,
    "text": "write",
    "type": "global function"
  }, {
    "id": 64,
    "text": "char",
    "type": "global function"
  }, {
    "id": 65,
    "text": "",
    "type": "variable container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "global variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "require local variable"
  } ]
}