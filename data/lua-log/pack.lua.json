{
  "_filename": "pack.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-log/lua/log/logformat/proxy/pack.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "calls",
    "to": 47
  }, {
    "from": 7,
    "label": "calls",
    "to": 45
  }, {
    "from": 22,
    "label": "calls",
    "to": 51
  }, {
    "from": 22,
    "label": "calls",
    "to": 51
  }, {
    "from": 22,
    "label": "calls",
    "to": 51
  }, {
    "from": 13,
    "label": "calls",
    "to": 48
  }, {
    "from": 7,
    "label": "calls",
    "to": 46
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 50
  }, {
    "from": 13,
    "label": "calls",
    "to": 49
  }, {
    "from": 13,
    "label": "calls",
    "to": 49
  }, {
    "from": 13,
    "label": "calls",
    "to": 49
  }, {
    "from": 13,
    "label": "calls",
    "to": 49
  }, {
    "from": 13,
    "label": "calls",
    "to": 49
  }, {
    "from": 13,
    "label": "calls",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 22
  }, {
    "from": 22,
    "label": "declares",
    "to": 7
  }, {
    "from": 22,
    "label": "declares",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 56,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 56,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 56,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 56,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 56,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 56,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 57,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "requires",
    "to": 2
  }, {
    "from": 57,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "requires",
    "to": 72
  }, {
    "from": 57,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "requires",
    "to": 44
  }, {
    "from": 1,
    "label": "provides",
    "to": 74
  }, {
    "from": 52,
    "label": "represents",
    "to": 75
  }, {
    "from": 74,
    "label": "provides",
    "to": 75
  }, {
    "from": 77,
    "label": "requires",
    "to": 1
  }, {
    "from": 80,
    "label": "requires",
    "to": 1
  }, {
    "from": 82,
    "label": "requires",
    "to": 1
  }, {
    "from": 83,
    "label": "requires",
    "to": 1
  }, {
    "from": 91,
    "label": "requires",
    "to": 72
  }, {
    "from": 98,
    "label": "requires",
    "to": 1
  }, {
    "from": 99,
    "label": "requires",
    "to": 1
  }, {
    "from": 105,
    "label": "requires",
    "to": 72
  }, {
    "from": 106,
    "label": "requires",
    "to": 1
  }, {
    "from": 68,
    "label": "contains",
    "to": 3
  }, {
    "from": 68,
    "label": "contains",
    "to": 4
  }, {
    "from": 68,
    "label": "contains",
    "to": 5
  }, {
    "from": 68,
    "label": "contains",
    "to": 6
  }, {
    "from": 52,
    "label": "contains",
    "to": 7
  }, {
    "from": 53,
    "label": "contains",
    "to": 7
  }, {
    "from": 54,
    "label": "contains",
    "to": 7
  }, {
    "from": 55,
    "label": "contains",
    "to": 7
  }, {
    "from": 68,
    "label": "contains",
    "to": 7
  }, {
    "from": 76,
    "label": "contains",
    "to": 7
  }, {
    "from": 78,
    "label": "contains",
    "to": 7
  }, {
    "from": 79,
    "label": "contains",
    "to": 7
  }, {
    "from": 81,
    "label": "contains",
    "to": 7
  }, {
    "from": 84,
    "label": "contains",
    "to": 7
  }, {
    "from": 85,
    "label": "contains",
    "to": 7
  }, {
    "from": 86,
    "label": "contains",
    "to": 7
  }, {
    "from": 87,
    "label": "contains",
    "to": 7
  }, {
    "from": 88,
    "label": "contains",
    "to": 7
  }, {
    "from": 89,
    "label": "contains",
    "to": 7
  }, {
    "from": 90,
    "label": "contains",
    "to": 7
  }, {
    "from": 92,
    "label": "contains",
    "to": 7
  }, {
    "from": 93,
    "label": "contains",
    "to": 7
  }, {
    "from": 94,
    "label": "contains",
    "to": 7
  }, {
    "from": 95,
    "label": "contains",
    "to": 7
  }, {
    "from": 96,
    "label": "contains",
    "to": 7
  }, {
    "from": 97,
    "label": "contains",
    "to": 7
  }, {
    "from": 100,
    "label": "contains",
    "to": 7
  }, {
    "from": 101,
    "label": "contains",
    "to": 7
  }, {
    "from": 102,
    "label": "contains",
    "to": 7
  }, {
    "from": 103,
    "label": "contains",
    "to": 7
  }, {
    "from": 104,
    "label": "contains",
    "to": 7
  }, {
    "from": 52,
    "label": "contains",
    "to": 13
  }, {
    "from": 53,
    "label": "contains",
    "to": 13
  }, {
    "from": 54,
    "label": "contains",
    "to": 13
  }, {
    "from": 55,
    "label": "contains",
    "to": 13
  }, {
    "from": 68,
    "label": "contains",
    "to": 13
  }, {
    "from": 76,
    "label": "contains",
    "to": 13
  }, {
    "from": 78,
    "label": "contains",
    "to": 13
  }, {
    "from": 79,
    "label": "contains",
    "to": 13
  }, {
    "from": 81,
    "label": "contains",
    "to": 13
  }, {
    "from": 84,
    "label": "contains",
    "to": 13
  }, {
    "from": 85,
    "label": "contains",
    "to": 13
  }, {
    "from": 86,
    "label": "contains",
    "to": 13
  }, {
    "from": 87,
    "label": "contains",
    "to": 13
  }, {
    "from": 88,
    "label": "contains",
    "to": 13
  }, {
    "from": 89,
    "label": "contains",
    "to": 13
  }, {
    "from": 90,
    "label": "contains",
    "to": 13
  }, {
    "from": 92,
    "label": "contains",
    "to": 13
  }, {
    "from": 93,
    "label": "contains",
    "to": 13
  }, {
    "from": 94,
    "label": "contains",
    "to": 13
  }, {
    "from": 95,
    "label": "contains",
    "to": 13
  }, {
    "from": 96,
    "label": "contains",
    "to": 13
  }, {
    "from": 97,
    "label": "contains",
    "to": 13
  }, {
    "from": 100,
    "label": "contains",
    "to": 13
  }, {
    "from": 101,
    "label": "contains",
    "to": 13
  }, {
    "from": 102,
    "label": "contains",
    "to": 13
  }, {
    "from": 103,
    "label": "contains",
    "to": 13
  }, {
    "from": 104,
    "label": "contains",
    "to": 13
  }, {
    "from": 68,
    "label": "contains",
    "to": 23
  }, {
    "from": 68,
    "label": "contains",
    "to": 24
  }, {
    "from": 68,
    "label": "contains",
    "to": 25
  }, {
    "from": 68,
    "label": "contains",
    "to": 26
  }, {
    "from": 68,
    "label": "contains",
    "to": 27
  }, {
    "from": 68,
    "label": "contains",
    "to": 28
  }, {
    "from": 68,
    "label": "contains",
    "to": 29
  }, {
    "from": 68,
    "label": "contains",
    "to": 30
  }, {
    "from": 68,
    "label": "contains",
    "to": 31
  }, {
    "from": 68,
    "label": "contains",
    "to": 32
  }, {
    "from": 68,
    "label": "contains",
    "to": 33
  }, {
    "from": 68,
    "label": "contains",
    "to": 34
  }, {
    "from": 68,
    "label": "contains",
    "to": 35
  }, {
    "from": 68,
    "label": "contains",
    "to": 36
  }, {
    "from": 68,
    "label": "contains",
    "to": 37
  }, {
    "from": 68,
    "label": "contains",
    "to": 38
  }, {
    "from": 68,
    "label": "contains",
    "to": 39
  }, {
    "from": 68,
    "label": "contains",
    "to": 40
  }, {
    "from": 68,
    "label": "contains",
    "to": 41
  }, {
    "from": 68,
    "label": "contains",
    "to": 42
  }, {
    "from": 68,
    "label": "contains",
    "to": 43
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pack",
    "type": "module"
  }, {
    "id": 2,
    "text": "log",
    "type": "module"
  }, {
    "id": 3,
    "text": "function M.new(sep)\r\n  sep = sep or ' '\r\n\r\n  return function (...)\r\n    local argc,argv = select('#', ...), {...}\r\n    for i = 1, argc do argv[i] = tostring(argv[i]) end\r\n    return (table.concat(argv, sep))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function M.new() return string.format end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function M.new(default)\r\n  if not default then\r\n    default = require \"log.formatter.format\".new()\r\n  end\r\n\r\n  return function(...)\r\n    if type((...)) == 'function' then\r\n      return (...)(select(2, ...))\r\n    end\r\n\r\n    if select('#', ...) < 2 then\r\n      return tostring((...))\r\n    end\r\n\r\n    return default(...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function M.new()\r\n  return function (msg, lvl, now)\r\n    return date_fmt(now) .. ' [' .. Log.LVL_NAMES[lvl] .. '] ' .. msg\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function M.pack(msg, lvl, now)\r\n  local Y, M, D = now:getdate()\r\n  local h, m, s = now:gettime()\r\n  local now_s = sformat(\"%.4d-%.2d-%.2d %.2d:%.2d:%.2d\", Y, M, D, h, m, s)\r\n\r\n  return schar(lvl) .. now_s .. msg\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local Y, M, D = now:getdate()",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local h, m, s = now:gettime()",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local now_s = sformat(\"%.4d-%.2d-%.2d %.2d:%.2d:%.2d\", Y, M, D, h, m, s)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function M.unpack(str)\r\n  local lvl = sbyte( ssub(str, 1, 1) )\r\n  if not Log.LVL_NAMES[lvl] then return end\r\n  local now_s = ssub(str, 2, 20 )\r\n  local Y, M, D = ssub(str, 2, 5 ), ssub(str, 7, 8 ), ssub(str, 10, 11 )\r\n  local h, m, s = ssub(str, 13, 14 ), ssub(str, 16, 17 ), ssub(str, 19, 20 )\r\n  Y, M, D, h, m, s = tn(Y), tn(M), tn(D), tn(h), tn(m), tn(s)\r\n  if not (Y and M and D and h and m and s) then return end\r\n\r\n  return ssub(str, 21), lvl, date(Y, M, D, h, m, s)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local lvl = sbyte( ssub(str, 1, 1) )",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if not Log.LVL_NAMES[lvl] then return end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local now_s = ssub(str, 2, 20 )",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local Y, M, D = ssub(str, 2, 5 ), ssub(str, 7, 8 ), ssub(str, 10, 11 )",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local h, m, s = ssub(str, 13, 14 ), ssub(str, 16, 17 ), ssub(str, 19, 20 )",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "Y, M, D, h, m, s = tn(Y), tn(M), tn(D), tn(h), tn(m), tn(s)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if not (Y and M and D and h and m and s) then return end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "",
    "type": "function container"
  }, {
    "id": 23,
    "text": "function M.new()\r\n  return function (now, lvl, msg)\r\n    return packer.pack(now, lvl, msg)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function M.new(facility, host_name, app_name, procid, msgid)\r\n  if not facility then facility = FACILITY.USER\r\n  else facility = FACILITY[facility:upper()] end\r\n  host_name = host_name or '-'\r\n  app_name  = app_name  or '-'\r\n  procid    = procid    or '-'\r\n  msgid     = msgid     or '-'\r\n\r\n  -- HOSTNAME APP-NAME PROCID MSGID\r\n  local header =host_name .. ' ' .. app_name .. ' ' .. procid .. ' ' .. msgid \r\n\r\n  return function (msg, lvl, now)\r\n    local slvl = assert(LVL2SYSLOG[lvl])\r\n    return \r\n    -- HEADER\r\n      -- PRI VERSION TIMESTAMP\r\n      '<' .. slvl + facility .. '> 1 ' .. Date2SysLog(now) .. ' ' ..\r\n      -- HEADER STRUCTURED-DATA MSG\r\n      header .. ' - ' ..  msg\r\n    \r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function(channel, maker, logformat)\r\n  logformat = logformat or \"log.logformat.default\"\r\n  context() -- init context\r\n  local child_thread = start_log_thread(maker, logformat, channel)\r\n  LOG.add_cleanup(function() child_thread:cancel(60) end)\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function(host, port, maker, logformat)\r\n  logformat = logformat or \"log.logformat.default\"\r\n  server.run(\"log.writer.net.server.udp\", maker, logformat, host, port)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function M.new() return console_writer end",
    "type": "function"
  }, {
    "id": 28,
    "text": "function M.new(log_dir, log_name, max_rows)\r\n  return file.new{\r\n    log_dir        = log_dir, \r\n    log_name       = log_name,\r\n    max_rows       = max_rows,\r\n    by_day         = true,\r\n    close_file     = false,\r\n    flush_interval = 1,\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function M.new(log_dir, log_name, roll_count, max_size)\r\n  return file.new{\r\n    log_dir        = log_dir, \r\n    log_name       = log_name,\r\n    max_size       = max_size or 10 * 1024 * 1024,\r\n    roll_count     = assert(roll_count),\r\n    close_file     = false,\r\n    flush_interval = 1,\r\n    reuse          = true,\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function M.new(opt)\r\n  local logger = file_logger:new(opt)\r\n  LOG.add_cleanup(function() logger:close() end)\r\n\r\n  return function(fmt, msg, lvl, now)\r\n    logger:write((fmt(msg, lvl, now)))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "function M.new(max_lvl, writer)\r\n  max_lvl = assert(Log.lvl2number(max_lvl))\r\n  return function(fmt, msg, lvl, now)\r\n    if lvl == max_lvl then writer(fmt, msg, lvl, now) end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function M.new(max_lvl, writer)\r\n  max_lvl = assert(Log.lvl2number(max_lvl))\r\n  return function(fmt, msg, lvl, now)\r\n    if lvl <= max_lvl then writer(fmt, msg, lvl, now) end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function M.new(newfmt, writer)\r\n  return function(oldfmt, msg, lvl, now)\r\n    writer(newfmt, msg, lvl, now)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function M.new(...)\r\n  local writers = {...}\r\n  return function(...)\r\n    for i = 1, #writers do\r\n      writers[i](...)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function M.new(from, to, server, subject)\r\n  assert(to,     \"'to' parameter is required\")\r\n  assert(from,   \"'from' parameter is required\")\r\n  assert(server, \"'server' parameter is required\")\r\n\r\n  subject = subject or ''\r\n\r\n  return function(fmt, msg, lvl, now)\r\n    msg = fmt(msg, lvl, now)\r\n    sendmail(from, to, server, {\r\n      subject = now:fmt(\"%F %T\") .. ' [' .. Log.LVL_NAMES[lvl] .. '] ' .. subject;\r\n      file    = {\r\n        name = 'message.txt';\r\n        data = msg;\r\n      };\r\n      text = msg;\r\n    })\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function M.new(host, port, timeout) \r\n  local skt = create_socket(host, port, timeout)\r\n  return function(fmt, ...) skt:send((fmt( ... ))) end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function M.new(ctx, addr, timeout) \r\n    if ctx and not Z.is_ctx(ctx) then\r\n      ctx, addr, timeout = nil, ctx, addr\r\n    end\r\n\r\n    local skt = socket(ctx, stype, is_srv, addr, timeout)\r\n    return function(fmt, ...) skt:send((fmt(...))) end\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "function M.new() \r\n  return function(fmt, ...) io.stderr:write(fmt(...),'\\n') end\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "function M.new()\r\n  return function (fmt,...) io.stdout:write(fmt(...),'\\n') end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function M.new(max_lvl, writer, formatter, logformat)\r\n  if max_lvl and type(max_lvl) ~= 'number' and type(max_lvl) ~= 'string' then\r\n    max_lvl, writer, formatter, logformat = nil, max_lvl, writer, formatter\r\n  end\r\n\r\n  max_lvl = assert(lvl2number ( max_lvl or LOG_LVL.INFO ) )\r\n\r\n  formatter = formatter or function(msg) return msg end\r\n  if not logformat then\r\n    logformat = require\"log.logformat.default\".new()\r\n  end\r\n\r\n  local write = function (lvl, ... )\r\n    local now = date()\r\n    writer( logformat, formatter(...), lvl, now )\r\n  end;\r\n\r\n  local dump  = function(lvl, fn, ...)\r\n    local now = date()\r\n    writer( logformat, (fn(...) or ''), lvl, now )\r\n  end\r\n\r\n  local logger = {}\r\n\r\n  function logger.writer() return writer end\r\n\r\n  function logger.format() return logformat end\r\n\r\n  function logger.log(lvl, ...)\r\n    local err lvl, err = lvl2number(lvl)\r\n    if not lvl then return nil, err end\r\n    return write(lvl, ...)\r\n  end\r\n\r\n  function logger.dump(lvl, ...)\r\n    local err lvl, err = lvl2number(lvl)\r\n    if not lvl then return nil, err end\r\n    return dump(lvl, ...)\r\n  end\r\n\r\n  function logger.set_lvl(lvl)\r\n    local err lvl, err = lvl2number(lvl)\r\n    if not lvl then return nil, err end \r\n    max_lvl = lvl\r\n    for i = 1, max_lvl do logger[ writer_names[i]           ] = function(...) write(i, ...) end end\r\n    for i = 1, max_lvl do logger[ writer_names[i] .. '_dump'] = function(...) dump(i, ...)  end end\r\n    for i = max_lvl+1, LOG_LVL_COUNT  do logger[ writer_names[i]           ] = emptyfn end\r\n    for i = max_lvl+1, LOG_LVL_COUNT  do logger[ writer_names[i] .. '_dump'] = emptyfn end\r\n    return true\r\n  end\r\n\r\n  function logger.lvl() return max_lvl end\r\n\r\n  assert(logger.set_lvl(max_lvl))\r\n\r\n  loggers_list[logger] = true;\r\n\r\n  return logger\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function M.add_cleanup(fn)\r\n  assert(type(fn)=='function')\r\n  for k,v in ipairs(destroy_list) do\r\n    if v == fn then return end\r\n  end\r\n  table.insert(destroy_list, 1, fn)\r\n  return fn\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "function M.remove_cleanup(fn)\r\n  for k,v in ipairs(destroy_list) do\r\n    if v == fn then \r\n      table.remove(destroy_list, k)\r\n      break\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "function M.close()\r\n  for k,fn in ipairs(destroy_list) do pcall(fn) end\r\n  for logger in pairs(loggers_list) do\r\n    logger.fotal   = emptyfn;\r\n    logger.error   = emptyfn;\r\n    logger.warning = emptyfn;\r\n    logger.info    = emptyfn;\r\n    logger.notice  = emptyfn;\r\n    logger.debug   = emptyfn;\r\n    logger.closed  = true;\r\n    loggers_list[logger] =  nil\r\n  end\r\n  destroy_list = {}\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "string",
    "type": "module"
  }, {
    "id": 45,
    "text": "schar",
    "type": "global function"
  }, {
    "id": 46,
    "text": "sformat",
    "type": "global function"
  }, {
    "id": 47,
    "text": "sbyte",
    "type": "global function"
  }, {
    "id": 48,
    "text": "date",
    "type": "global function"
  }, {
    "id": 49,
    "text": "tn",
    "type": "global function"
  }, {
    "id": 50,
    "text": "ssub",
    "type": "global function"
  }, {
    "id": 51,
    "text": "require",
    "type": "global function"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "variable container"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 72,
    "text": "date",
    "type": "module"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "interface container"
  }, {
    "id": 75,
    "text": "",
    "type": "interface"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "require local variable"
  } ]
}