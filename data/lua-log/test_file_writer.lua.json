{
  "_filename": "test_file_writer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-log/test/test_file_writer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 36
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 42
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 55
  }, {
    "from": 60,
    "label": "has",
    "to": 56
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 60,
    "label": "has",
    "to": 42
  }, {
    "from": 60,
    "label": "has",
    "to": 55
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 51
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 23
  }, {
    "from": 68,
    "label": "has",
    "to": 23
  }, {
    "from": 68,
    "label": "has",
    "to": 24
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 29
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 31,
    "label": "calls",
    "to": 83
  }, {
    "from": 72,
    "label": "calls",
    "to": 86
  }, {
    "from": 4,
    "label": "calls",
    "to": 86
  }, {
    "from": 35,
    "label": "calls",
    "to": 86
  }, {
    "from": 44,
    "label": "calls",
    "to": 86
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 49,
    "label": "calls",
    "to": 89
  }, {
    "from": 54,
    "label": "calls",
    "to": 89
  }, {
    "from": 54,
    "label": "calls",
    "to": 89
  }, {
    "from": 60,
    "label": "calls",
    "to": 89
  }, {
    "from": 60,
    "label": "calls",
    "to": 89
  }, {
    "from": 64,
    "label": "calls",
    "to": 89
  }, {
    "from": 35,
    "label": "calls",
    "to": 19
  }, {
    "from": 40,
    "label": "calls",
    "to": 19
  }, {
    "from": 4,
    "label": "calls",
    "to": 82
  }, {
    "from": 35,
    "label": "calls",
    "to": 81
  }, {
    "from": 44,
    "label": "calls",
    "to": 81
  }, {
    "from": 49,
    "label": "calls",
    "to": 26
  }, {
    "from": 54,
    "label": "calls",
    "to": 26
  }, {
    "from": 54,
    "label": "calls",
    "to": 26
  }, {
    "from": 60,
    "label": "calls",
    "to": 26
  }, {
    "from": 60,
    "label": "calls",
    "to": 26
  }, {
    "from": 64,
    "label": "calls",
    "to": 26
  }, {
    "from": 19,
    "label": "calls",
    "to": 78
  }, {
    "from": 19,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 19,
    "label": "calls",
    "to": 88
  }, {
    "from": 19,
    "label": "calls",
    "to": 88
  }, {
    "from": 19,
    "label": "calls",
    "to": 88
  }, {
    "from": 19,
    "label": "calls",
    "to": 88
  }, {
    "from": 19,
    "label": "calls",
    "to": 79
  }, {
    "from": 4,
    "label": "calls",
    "to": 77
  }, {
    "from": 35,
    "label": "calls",
    "to": 77
  }, {
    "from": 4,
    "label": "calls",
    "to": 80
  }, {
    "from": 14,
    "label": "calls",
    "to": 80
  }, {
    "from": 72,
    "label": "calls",
    "to": 87
  }, {
    "from": 26,
    "label": "calls",
    "to": 74
  }, {
    "from": 44,
    "label": "calls",
    "to": 74
  }, {
    "from": 49,
    "label": "calls",
    "to": 31
  }, {
    "from": 54,
    "label": "calls",
    "to": 31
  }, {
    "from": 54,
    "label": "calls",
    "to": 31
  }, {
    "from": 60,
    "label": "calls",
    "to": 31
  }, {
    "from": 60,
    "label": "calls",
    "to": 31
  }, {
    "from": 64,
    "label": "calls",
    "to": 31
  }, {
    "from": 72,
    "label": "calls",
    "to": 90
  }, {
    "from": 72,
    "label": "calls",
    "to": 90
  }, {
    "from": 72,
    "label": "calls",
    "to": 90
  }, {
    "from": 19,
    "label": "calls",
    "to": 84
  }, {
    "from": 19,
    "label": "calls",
    "to": 84
  }, {
    "from": 72,
    "label": "calls",
    "to": 85
  }, {
    "from": 2,
    "label": "contains",
    "to": 72
  }, {
    "from": 72,
    "label": "declares",
    "to": 3
  }, {
    "from": 72,
    "label": "declares",
    "to": 4
  }, {
    "from": 72,
    "label": "declares",
    "to": 14
  }, {
    "from": 72,
    "label": "declares",
    "to": 19
  }, {
    "from": 72,
    "label": "declares",
    "to": 26
  }, {
    "from": 72,
    "label": "declares",
    "to": 31
  }, {
    "from": 72,
    "label": "declares",
    "to": 35
  }, {
    "from": 72,
    "label": "declares",
    "to": 40
  }, {
    "from": 72,
    "label": "declares",
    "to": 44
  }, {
    "from": 72,
    "label": "declares",
    "to": 49
  }, {
    "from": 72,
    "label": "declares",
    "to": 54
  }, {
    "from": 72,
    "label": "declares",
    "to": 60
  }, {
    "from": 72,
    "label": "declares",
    "to": 64
  }, {
    "from": 72,
    "label": "declares",
    "to": 68
  }, {
    "from": 72,
    "label": "declares",
    "to": 70
  }, {
    "from": 2,
    "label": "contains",
    "to": 91
  }, {
    "from": 2,
    "label": "contains",
    "to": 92
  }, {
    "from": 91,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 91,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 91,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 91,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 91,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 92,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "requires",
    "to": 104
  }, {
    "from": 92,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "requires",
    "to": 73
  }, {
    "from": 92,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "requires",
    "to": 1
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 70
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "impl",
    "type": "module"
  }, {
    "id": 2,
    "text": "test_file_writer",
    "type": "module"
  }, {
    "id": 3,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function mkfile(P, data)\r\n  P = path.fullpath(P)\r\n  path.mkdir(path.dirname(P))\r\n  local f, e = io.open(P, \"w+b\")\r\n  if not f then return nil, err end\r\n  if data then assert(f:write(data)) end\r\n  f:close()\r\n  return P\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "P = path.fullpath(P)",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "path.mkdir(path.dirname(P))",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local f, e = io.open(P, \"w+b\")",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not f then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "if data then assert(f:write(data)) end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "assert(f:write(data))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function read_file(P)\r\n  local f, err = io.open(P, \"rb\")\r\n  if not f then return nil, err end\r\n  local data, err = f:read(\"*all\")\r\n  f:close()\r\n  if data then return data end\r\n  return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local f, err = io.open(P, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local data, err = f:read(\"*all\")",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if data then return data end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function remove_dir(f)\r\n  if not path.exists(f) then return end\r\n  local mask = path.ensure_dir_end(f)\r\n  path.each(mask, function(f)\r\n    collectgarbage(\"collect\") collectgarbage(\"collect\")\r\n    path.remove(f)\r\n  end, {recurse = true, delay = true, reverse = true})\r\n  collectgarbage(\"collect\") collectgarbage(\"collect\")\r\n  path.remove(f)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "if not path.exists(f) then return end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "local mask = path.ensure_dir_end(f)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "path.each(mask, function(f)\r\n    collectgarbage(\"collect\") collectgarbage(\"collect\")\r\n    path.remove(f)\r\n  end, {recurse = true, delay = true, reverse = true})",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "path.remove(f)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function count_logs(f)\r\n  local counter = 0\r\n  path.each(path.join(f,\"*.log\"), function()\r\n    counter = counter + 1\r\n  end)\r\n  return counter\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local counter = 0",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "path.each(path.join(f,\"*.log\"), function()\r\n    counter = counter + 1\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "counter = counter + 1",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function write_logs(N)\r\n  for i = 1, N do\r\n    logger:write(\r\n      string.format(\"%5d\", i)\r\n    )\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "for i = 1, N do\r\n    logger:write(\r\n      string.format(\"%5d\", i)\r\n    )\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 33,
    "text": "logger:write(\r\n      string.format(\"%5d\", i)\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function setup()\r\n  remove_dir(TESTDIR)\r\n  path.mkdir(TESTDIR)\r\n  assert(path.isdir(TESTDIR))\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "remove_dir(TESTDIR)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "path.mkdir(TESTDIR)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert(path.isdir(TESTDIR))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function teardown()\r\n  if logger then logger:close() end\r\n  remove_dir(TESTDIR)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if logger then logger:close() end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "logger:close()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function test_create_dir()\r\n  local p = path.join(TESTDIR, \"some\", \"inner\", \"path\")\r\n  logger = file_logger:new{ log_dir = p; log_name = \"events.log\"; }\r\n  assert(path.isdir(p))\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local p = path.join(TESTDIR, \"some\", \"inner\", \"path\")",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "logger = file_logger:new{ log_dir = p; log_name = \"events.log\"; }",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "assert(path.isdir(p))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function test_rows()\r\n  logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\"; max_rows = 10;\r\n  }\r\n\r\n  write_logs(100)\r\n\r\n  assert_equal(10, count_logs(TESTDIR))\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\"; max_rows = 10;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "write_logs(100)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert_equal(10, count_logs(TESTDIR))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function test_reuse_rows()\r\n  logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\"; max_rows = 100;\r\n  }\r\n\r\n  write_logs(50)\r\n\r\n  assert_equal(1, count_logs(TESTDIR))\r\n\r\n  logger:close()\r\n  \r\n  logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\"; max_rows = 100;\r\n    reuse = true;\r\n  }\r\n\r\n  write_logs(50)\r\n\r\n  assert_equal(1, count_logs(TESTDIR))\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\"; max_rows = 100;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "write_logs(50)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert_equal(1, count_logs(TESTDIR))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\"; max_rows = 100;\r\n    reuse = true;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function test_reset_rows()\r\n  logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\"; max_rows = 100;\r\n  }\r\n\r\n  write_logs(50)\r\n\r\n  assert_equal(1, count_logs(TESTDIR))\r\n\r\n  logger:close()\r\n  \r\n  logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\"; max_rows = 100;\r\n  }\r\n\r\n  write_logs(1)\r\n\r\n  assert_equal(2, count_logs(TESTDIR))\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "write_logs(1)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_equal(2, count_logs(TESTDIR))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function test_roll_count()\r\n  logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\";\r\n    max_rows = 10; roll_count = 5;\r\n  }\r\n\r\n  write_logs(100)\r\n\r\n  -- active log + archive logs\r\n  assert_equal(6, count_logs(TESTDIR))\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "logger = file_logger:new{\r\n    log_dir = TESTDIR; log_name = \"events.log\";\r\n    max_rows = 10; roll_count = 5;\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "assert_equal(6, count_logs(TESTDIR))",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function(f)\r\n    collectgarbage(\"collect\") collectgarbage(\"collect\")\r\n    path.remove(f)\r\n  end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n    counter = counter + 1\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "",
    "type": "function container"
  }, {
    "id": 73,
    "text": "path",
    "type": "module"
  }, {
    "id": 74,
    "text": "join",
    "type": "global function"
  }, {
    "id": 75,
    "text": "each",
    "type": "global function"
  }, {
    "id": 76,
    "text": "fullpath",
    "type": "global function"
  }, {
    "id": 77,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 78,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 79,
    "text": "ensure_dir_end",
    "type": "global function"
  }, {
    "id": 80,
    "text": "open",
    "type": "global function"
  }, {
    "id": 81,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 82,
    "text": "dirname",
    "type": "global function"
  }, {
    "id": 83,
    "text": "format",
    "type": "global function"
  }, {
    "id": 84,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 85,
    "text": "run",
    "type": "global function"
  }, {
    "id": 86,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 87,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 88,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 89,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 90,
    "text": "require",
    "type": "global function"
  }, {
    "id": 91,
    "text": "",
    "type": "variable container"
  }, {
    "id": 92,
    "text": "",
    "type": "require container"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "unop"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "string"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 104,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 105,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "require local variable"
  } ]
}