{
  "_filename": "compat.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-log/lua/log/writer/net/zmq/_private/compat.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 16
  }, {
    "from": 3,
    "label": "calls",
    "to": 16
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 6
  }, {
    "from": 29,
    "label": "has",
    "to": 6
  }, {
    "from": 30,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 6
  }, {
    "from": 41,
    "label": "has",
    "to": 6
  }, {
    "from": 41,
    "label": "has",
    "to": 6
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 45
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 57,
    "label": "has",
    "to": 6
  }, {
    "from": 57,
    "label": "has",
    "to": 6
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 6
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 8,
    "label": "calls",
    "to": 65
  }, {
    "from": 61,
    "label": "calls",
    "to": 65
  }, {
    "from": 61,
    "label": "calls",
    "to": 65
  }, {
    "from": 61,
    "label": "calls",
    "to": 64
  }, {
    "from": 61,
    "label": "calls",
    "to": 64
  }, {
    "from": 4,
    "label": "calls",
    "to": 66
  }, {
    "from": 8,
    "label": "calls",
    "to": 66
  }, {
    "from": 8,
    "label": "calls",
    "to": 66
  }, {
    "from": 61,
    "label": "calls",
    "to": 4
  }, {
    "from": 61,
    "label": "calls",
    "to": 4
  }, {
    "from": 61,
    "label": "calls",
    "to": 4
  }, {
    "from": 61,
    "label": "calls",
    "to": 4
  }, {
    "from": 8,
    "label": "calls",
    "to": 67
  }, {
    "from": 16,
    "label": "calls",
    "to": 67
  }, {
    "from": 61,
    "label": "calls",
    "to": 67
  }, {
    "from": 61,
    "label": "calls",
    "to": 67
  }, {
    "from": 61,
    "label": "calls",
    "to": 67
  }, {
    "from": 61,
    "label": "calls",
    "to": 67
  }, {
    "from": 61,
    "label": "calls",
    "to": 67
  }, {
    "from": 61,
    "label": "calls",
    "to": 67
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 61,
    "label": "calls",
    "to": 69
  }, {
    "from": 61,
    "label": "calls",
    "to": 69
  }, {
    "from": 61,
    "label": "calls",
    "to": 63
  }, {
    "from": 61,
    "label": "calls",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 61,
    "label": "declares",
    "to": 4
  }, {
    "from": 61,
    "label": "declares",
    "to": 8
  }, {
    "from": 61,
    "label": "declares",
    "to": 16
  }, {
    "from": 61,
    "label": "declares",
    "to": 20
  }, {
    "from": 61,
    "label": "declares",
    "to": 24
  }, {
    "from": 61,
    "label": "declares",
    "to": 27
  }, {
    "from": 61,
    "label": "declares",
    "to": 28
  }, {
    "from": 61,
    "label": "declares",
    "to": 29
  }, {
    "from": 61,
    "label": "declares",
    "to": 30
  }, {
    "from": 61,
    "label": "declares",
    "to": 31
  }, {
    "from": 61,
    "label": "declares",
    "to": 32
  }, {
    "from": 61,
    "label": "declares",
    "to": 41
  }, {
    "from": 61,
    "label": "declares",
    "to": 47
  }, {
    "from": 61,
    "label": "declares",
    "to": 52
  }, {
    "from": 61,
    "label": "declares",
    "to": 57
  }, {
    "from": 61,
    "label": "declares",
    "to": 59
  }, {
    "from": 62,
    "label": "calls",
    "to": 16
  }, {
    "from": 75,
    "label": "requires",
    "to": 1
  }, {
    "from": 76,
    "label": "requires",
    "to": 1
  }, {
    "from": 78,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 79,
    "label": "initializes",
    "to": 81
  }, {
    "from": 79,
    "label": "initializes",
    "to": 82
  }, {
    "from": 79,
    "label": "initializes",
    "to": 83
  }, {
    "from": 79,
    "label": "initializes",
    "to": 84
  }, {
    "from": 79,
    "label": "initializes",
    "to": 85
  }, {
    "from": 79,
    "label": "initializes",
    "to": 86
  }, {
    "from": 79,
    "label": "initializes",
    "to": 87
  }, {
    "from": 79,
    "label": "initializes",
    "to": 88
  }, {
    "from": 79,
    "label": "initializes",
    "to": 89
  }, {
    "from": 79,
    "label": "initializes",
    "to": 90
  }, {
    "from": 79,
    "label": "initializes",
    "to": 91
  }, {
    "from": 79,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 79,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 1,
    "label": "provides",
    "to": 96
  }, {
    "from": 71,
    "label": "represents",
    "to": 97
  }, {
    "from": 96,
    "label": "provides",
    "to": 97
  }, {
    "from": 70,
    "label": "represents",
    "to": 98
  }, {
    "from": 96,
    "label": "provides",
    "to": 98
  }, {
    "from": 83,
    "label": "represents",
    "to": 99
  }, {
    "from": 96,
    "label": "provides",
    "to": 99
  }, {
    "from": 87,
    "label": "represents",
    "to": 100
  }, {
    "from": 96,
    "label": "provides",
    "to": 100
  }, {
    "from": 88,
    "label": "represents",
    "to": 101
  }, {
    "from": 96,
    "label": "provides",
    "to": 101
  }, {
    "from": 89,
    "label": "represents",
    "to": 102
  }, {
    "from": 96,
    "label": "provides",
    "to": 102
  }, {
    "from": 94,
    "label": "represents",
    "to": 103
  }, {
    "from": 96,
    "label": "provides",
    "to": 103
  }, {
    "from": 73,
    "label": "represents",
    "to": 104
  }, {
    "from": 96,
    "label": "provides",
    "to": 104
  }, {
    "from": 77,
    "label": "represents",
    "to": 105
  }, {
    "from": 96,
    "label": "provides",
    "to": 105
  }, {
    "from": 74,
    "label": "represents",
    "to": 106
  }, {
    "from": 96,
    "label": "provides",
    "to": 106
  }, {
    "from": 72,
    "label": "represents",
    "to": 107
  }, {
    "from": 96,
    "label": "provides",
    "to": 107
  }, {
    "from": 68,
    "label": "represents",
    "to": 108
  }, {
    "from": 96,
    "label": "provides",
    "to": 108
  }, {
    "from": 109,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 111,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "compat",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function create_server(ctx, addr, maker, logformat)\r\n  if ctx and not Z.is_ctx(ctx) then\r\n    ctx, addr, maker, logformat = nil, ctx, addr, maker\r\n  end\r\n  logformat = logformat or \"log.logformat.default\"\r\n\r\n  ctx = IMPL.context(ctx)\r\n\r\n  if maker then\r\n    local addr_sync = 'inproc://' .. rand_str(15)\r\n    local skt_sync = zassert(ctx:socket(zmq.PAIR))\r\n    zassert(skt_sync:bind(addr_sync))\r\n    server.zrun(\r\n      \"log.writer.net.server.zmq\", maker, logformat, ctx, \r\n      false, 'PULL', addr, addr_sync\r\n    )\r\n    zassert(skt_sync:recv())\r\n    skt_sync:close()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function create_writer(ctx, addr, maker)\r\n  if ctx and not Z.is_ctx(ctx) then\r\n    ctx, addr, maker = nil, ctx, addr\r\n  end\r\n\r\n  if maker then\r\n    server.run( ctx, addr, maker, \"log.logformat.default\" )\r\n  end\r\n\r\n  return require \"log.writer.format\".new(\r\n    require \"log.logformat.proxy\".new(),\r\n    require \"log.writer.net.zmq.push\".new(ctx, addr)\r\n  )\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function prequire(...) \r\n  local ok, mod = pcall(require, ...)\r\n  return ok and mod, mod or nil\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function has_member(t, key)\r\n  local ok, has\r\n  if type(key) == \"table\" then\r\n    ok, has = pcall(function()\r\n      for _, k in ipairs(key) do\r\n        if nil == t[k] then return false end\r\n      end\r\n      return true\r\n    end)\r\n  else\r\n    ok, has = pcall(function()\r\n      return nil ~= t[key]\r\n    end)\r\n  end\r\n  return ok and has\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local ok, has",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if type(key) == \"table\" then\r\n    ok, has = pcall(function()\r\n      for _, k in ipairs(key) do\r\n        if nil == t[k] then return false end\r\n      end\r\n      return true\r\n    end)\r\n  else\r\n    ok, has = pcall(function()\r\n      return nil ~= t[key]\r\n    end)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "ok, has = pcall(function()\r\n      for _, k in ipairs(key) do\r\n        if nil == t[k] then return false end\r\n      end\r\n      return true\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "for _, k in ipairs(key) do\r\n        if nil == t[k] then return false end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "if nil == t[k] then return false end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "ok, has = pcall(function()\r\n      return nil ~= t[key]\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function is_ctx(ctx)\r\n  local tname = type(ctx)\r\n  if (tname ~= 'table') and (tname ~= 'userdata') then\r\n    return false\r\n  end\r\n  return has_member(ctx, {\r\n    'socket', 'term'\r\n  })\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local tname = type(ctx)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if (tname ~= 'table') and (tname ~= 'userdata') then\r\n    return false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function(err) \r\n    if type(err) == \"number\" then return zmq.strerror(err) end\r\n    if type(err) == \"string\" then return err end\r\n    return err:msg()\r\n  end",
    "type": "function"
  }, {
    "id": 21,
    "text": "if type(err) == \"number\" then return zmq.strerror(err) end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if type(err) == \"string\" then return err end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(err) \r\n    if type(err) == \"number\" then return err end\r\n    if type(err) == \"string\" then return err end -- @todo extract no from string\r\n    return err:no()\r\n  end",
    "type": "function"
  }, {
    "id": 25,
    "text": "if type(err) == \"number\" then return err end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function(skt)       return skt:recv_all() end",
    "type": "function"
  }, {
    "id": 28,
    "text": "function(skt, addr) return skt:connect(addr) end",
    "type": "function"
  }, {
    "id": 29,
    "text": "function(skt, addr) return skt:bind(addr) end",
    "type": "function"
  }, {
    "id": 30,
    "text": "function(err) return err end",
    "type": "function"
  }, {
    "id": 31,
    "text": "function(err) return err end",
    "type": "function"
  }, {
    "id": 32,
    "text": "function(skt)\r\n    local t = {}\r\n    local r, err = skt:recv()\r\n    if not r then return nil, err end\r\n    table.insert(t,r)\r\n    while skt:rcvmore() == 1 do\r\n      r, err = skt:recv()\r\n      if not r then return nil, err, t end\r\n      table.insert(t,r)\r\n    end \r\n    return t\r\n  end",
    "type": "function"
  }, {
    "id": 33,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local r, err = skt:recv()",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if not r then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "table.insert(t,r)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "while skt:rcvmore() == 1 do\r\n      r, err = skt:recv()\r\n      if not r then return nil, err, t end\r\n      table.insert(t,r)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 38,
    "text": "r, err = skt:recv()",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if not r then return nil, err, t end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function(skt, addr) \r\n    if type(addr) == 'table' then\r\n      for i,a in ipairs(addr) do\r\n        local ok, err = skt:connect(a)\r\n        if not ok then return nil, err, i end\r\n      end\r\n      return true\r\n    end\r\n    return skt:connect(addr)\r\n  end",
    "type": "function"
  }, {
    "id": 42,
    "text": "if type(addr) == 'table' then\r\n      for i,a in ipairs(addr) do\r\n        local ok, err = skt:connect(a)\r\n        if not ok then return nil, err, i end\r\n      end\r\n      return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "for i,a in ipairs(addr) do\r\n        local ok, err = skt:connect(a)\r\n        if not ok then return nil, err, i end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "local ok, err = skt:connect(a)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if not ok then return nil, err, i end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function(skt, addr)\r\n    if type(addr) == 'table' then\r\n      for i,a in ipairs(addr) do\r\n        local ok, err = skt:bind(a)\r\n        if not ok then return nil, err, i end\r\n      end\r\n      return true\r\n    end\r\n    return skt:bind(addr)\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "if type(addr) == 'table' then\r\n      for i,a in ipairs(addr) do\r\n        local ok, err = skt:bind(a)\r\n        if not ok then return nil, err, i end\r\n      end\r\n      return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "for i,a in ipairs(addr) do\r\n        local ok, err = skt:bind(a)\r\n        if not ok then return nil, err, i end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 50,
    "text": "local ok, err = skt:bind(a)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(skt)\r\n  local ok, err, t = zrecv_all(skt)\r\n  if not ok then \r\n    if t and t[1] then return t[1] end\r\n    return nil, err\r\n  end\r\n  return ok[1]\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local ok, err, t = zrecv_all(skt)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if not ok then \r\n    if t and t[1] then return t[1] end\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if t and t[1] then return t[1] end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function()\r\n      for _, k in ipairs(key) do\r\n        if nil == t[k] then return false end\r\n      end\r\n      return true\r\n    end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function()\r\n      return nil ~= t[key]\r\n    end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "",
    "type": "function container"
  }, {
    "id": 62,
    "text": "local function init(stype, is_srv)\r\n  local M = {}\r\n\r\n  function M.new(ctx, addr, timeout) \r\n    if ctx and not Z.is_ctx(ctx) then\r\n      ctx, addr, timeout = nil, ctx, addr\r\n    end\r\n\r\n    local skt = socket(ctx, stype, is_srv, addr, timeout)\r\n    return function(fmt, ...) skt:send((fmt(...))) end\r\n  end\r\n\r\n  return M\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "strerror",
    "type": "global function"
  }, {
    "id": 64,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 65,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 66,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 67,
    "text": "type",
    "type": "global function"
  }, {
    "id": 68,
    "text": "is_ctx",
    "type": "global function"
  }, {
    "id": 69,
    "text": "require",
    "type": "global function"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "variable container"
  }, {
    "id": 80,
    "text": "",
    "type": "require container"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "global variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "interface container"
  }, {
    "id": 97,
    "text": "",
    "type": "interface"
  }, {
    "id": 98,
    "text": "",
    "type": "interface"
  }, {
    "id": 99,
    "text": "",
    "type": "interface"
  }, {
    "id": 100,
    "text": "",
    "type": "interface"
  }, {
    "id": 101,
    "text": "",
    "type": "interface"
  }, {
    "id": 102,
    "text": "",
    "type": "interface"
  }, {
    "id": 103,
    "text": "",
    "type": "interface"
  }, {
    "id": 104,
    "text": "",
    "type": "interface"
  }, {
    "id": 105,
    "text": "",
    "type": "interface"
  }, {
    "id": 106,
    "text": "",
    "type": "interface"
  }, {
    "id": 107,
    "text": "",
    "type": "interface"
  }, {
    "id": 108,
    "text": "",
    "type": "interface"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  } ]
}