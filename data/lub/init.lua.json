{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lub/lub/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 13
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 13
  }, {
    "from": 40,
    "label": "has",
    "to": 54
  }, {
    "from": 40,
    "label": "has",
    "to": 55
  }, {
    "from": 40,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 40,
    "label": "has",
    "to": 13
  }, {
    "from": 40,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 38
  }, {
    "from": 40,
    "label": "has",
    "to": 13
  }, {
    "from": 40,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 47
  }, {
    "from": 65,
    "label": "has",
    "to": 48
  }, {
    "from": 65,
    "label": "has",
    "to": 49
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 51
  }, {
    "from": 67,
    "label": "has",
    "to": 13
  }, {
    "from": 67,
    "label": "has",
    "to": 52
  }, {
    "from": 67,
    "label": "has",
    "to": 53
  }, {
    "from": 67,
    "label": "has",
    "to": 13
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 13
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 70
  }, {
    "from": 72,
    "label": "has",
    "to": 13
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 70
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 13
  }, {
    "from": 74,
    "label": "has",
    "to": 13
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 83,
    "label": "has",
    "to": 89
  }, {
    "from": 83,
    "label": "has",
    "to": 90
  }, {
    "from": 83,
    "label": "has",
    "to": 91
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 13
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 13
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 13
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 13
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 103
  }, {
    "from": 105,
    "label": "has",
    "to": 13
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 13
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 117
  }, {
    "from": 119,
    "label": "has",
    "to": 13
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 13
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 113
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 13
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 127,
    "label": "has",
    "to": 13
  }, {
    "from": 127,
    "label": "has",
    "to": 13
  }, {
    "from": 127,
    "label": "has",
    "to": 13
  }, {
    "from": 127,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 13
  }, {
    "from": 134,
    "label": "has",
    "to": 13
  }, {
    "from": 134,
    "label": "has",
    "to": 13
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 13
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 140,
    "label": "has",
    "to": 13
  }, {
    "from": 140,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 151,
    "label": "has",
    "to": 13
  }, {
    "from": 151,
    "label": "has",
    "to": 13
  }, {
    "from": 151,
    "label": "has",
    "to": 13
  }, {
    "from": 151,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 13
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 163,
    "label": "has",
    "to": 167
  }, {
    "from": 161,
    "label": "has",
    "to": 168
  }, {
    "from": 161,
    "label": "has",
    "to": 169
  }, {
    "from": 161,
    "label": "has",
    "to": 170
  }, {
    "from": 161,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 161,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 159,
    "label": "has",
    "to": 13
  }, {
    "from": 159,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 179,
    "label": "has",
    "to": 13
  }, {
    "from": 179,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 188,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 186,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 186,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 206,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 203,
    "label": "has",
    "to": 13
  }, {
    "from": 203,
    "label": "has",
    "to": 13
  }, {
    "from": 203,
    "label": "has",
    "to": 13
  }, {
    "from": 203,
    "label": "has",
    "to": 13
  }, {
    "from": 203,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 13
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 212,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 215
  }, {
    "from": 218,
    "label": "has",
    "to": 13
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 220,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 220,
    "label": "has",
    "to": 225
  }, {
    "from": 220,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 220,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 230,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 230,
    "label": "has",
    "to": 13
  }, {
    "from": 230,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 13
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 242,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 240,
    "label": "has",
    "to": 13
  }, {
    "from": 240,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "calls",
    "to": 259
  }, {
    "from": 40,
    "label": "calls",
    "to": 259
  }, {
    "from": 97,
    "label": "calls",
    "to": 259
  }, {
    "from": 119,
    "label": "calls",
    "to": 259
  }, {
    "from": 121,
    "label": "calls",
    "to": 259
  }, {
    "from": 127,
    "label": "calls",
    "to": 259
  }, {
    "from": 140,
    "label": "calls",
    "to": 259
  }, {
    "from": 220,
    "label": "calls",
    "to": 259
  }, {
    "from": 230,
    "label": "calls",
    "to": 259
  }, {
    "from": 230,
    "label": "calls",
    "to": 259
  }, {
    "from": 240,
    "label": "calls",
    "to": 259
  }, {
    "from": 203,
    "label": "calls",
    "to": 203
  }, {
    "from": 74,
    "label": "calls",
    "to": 285
  }, {
    "from": 97,
    "label": "calls",
    "to": 285
  }, {
    "from": 105,
    "label": "calls",
    "to": 285
  }, {
    "from": 121,
    "label": "calls",
    "to": 285
  }, {
    "from": 80,
    "label": "calls",
    "to": 260
  }, {
    "from": 72,
    "label": "calls",
    "to": 69
  }, {
    "from": 249,
    "label": "calls",
    "to": 251
  }, {
    "from": 72,
    "label": "calls",
    "to": 261
  }, {
    "from": 74,
    "label": "calls",
    "to": 261
  }, {
    "from": 80,
    "label": "calls",
    "to": 261
  }, {
    "from": 134,
    "label": "calls",
    "to": 261
  }, {
    "from": 140,
    "label": "calls",
    "to": 261
  }, {
    "from": 157,
    "label": "calls",
    "to": 261
  }, {
    "from": 220,
    "label": "calls",
    "to": 261
  }, {
    "from": 249,
    "label": "calls",
    "to": 262
  }, {
    "from": 80,
    "label": "calls",
    "to": 140
  }, {
    "from": 80,
    "label": "calls",
    "to": 140
  }, {
    "from": 112,
    "label": "calls",
    "to": 140
  }, {
    "from": 127,
    "label": "calls",
    "to": 140
  }, {
    "from": 15,
    "label": "calls",
    "to": 264
  }, {
    "from": 28,
    "label": "calls",
    "to": 264
  }, {
    "from": 40,
    "label": "calls",
    "to": 264
  }, {
    "from": 212,
    "label": "calls",
    "to": 265
  }, {
    "from": 74,
    "label": "calls",
    "to": 72
  }, {
    "from": 119,
    "label": "calls",
    "to": 237
  }, {
    "from": 119,
    "label": "calls",
    "to": 237
  }, {
    "from": 127,
    "label": "calls",
    "to": 237
  }, {
    "from": 212,
    "label": "calls",
    "to": 267
  }, {
    "from": 220,
    "label": "calls",
    "to": 267
  }, {
    "from": 220,
    "label": "calls",
    "to": 267
  }, {
    "from": 230,
    "label": "calls",
    "to": 267
  }, {
    "from": 230,
    "label": "calls",
    "to": 267
  }, {
    "from": 121,
    "label": "calls",
    "to": 268
  }, {
    "from": 119,
    "label": "calls",
    "to": 269
  }, {
    "from": 127,
    "label": "calls",
    "to": 269
  }, {
    "from": 93,
    "label": "calls",
    "to": 257
  }, {
    "from": 140,
    "label": "calls",
    "to": 256
  }, {
    "from": 105,
    "label": "calls",
    "to": 97
  }, {
    "from": 69,
    "label": "calls",
    "to": 272
  }, {
    "from": 80,
    "label": "calls",
    "to": 272
  }, {
    "from": 80,
    "label": "calls",
    "to": 272
  }, {
    "from": 40,
    "label": "calls",
    "to": 65
  }, {
    "from": 140,
    "label": "calls",
    "to": 159
  }, {
    "from": 220,
    "label": "calls",
    "to": 159
  }, {
    "from": 230,
    "label": "calls",
    "to": 159
  }, {
    "from": 80,
    "label": "calls",
    "to": 134
  }, {
    "from": 105,
    "label": "calls",
    "to": 134
  }, {
    "from": 116,
    "label": "calls",
    "to": 134
  }, {
    "from": 119,
    "label": "calls",
    "to": 134
  }, {
    "from": 240,
    "label": "calls",
    "to": 134
  }, {
    "from": 199,
    "label": "calls",
    "to": 283
  }, {
    "from": 203,
    "label": "calls",
    "to": 283
  }, {
    "from": 112,
    "label": "calls",
    "to": 240
  }, {
    "from": 240,
    "label": "calls",
    "to": 240
  }, {
    "from": 97,
    "label": "calls",
    "to": 273
  }, {
    "from": 105,
    "label": "calls",
    "to": 273
  }, {
    "from": 40,
    "label": "calls",
    "to": 67
  }, {
    "from": 28,
    "label": "calls",
    "to": 271
  }, {
    "from": 40,
    "label": "calls",
    "to": 271
  }, {
    "from": 240,
    "label": "calls",
    "to": 271
  }, {
    "from": 15,
    "label": "calls",
    "to": 15
  }, {
    "from": 28,
    "label": "calls",
    "to": 15
  }, {
    "from": 9,
    "label": "calls",
    "to": 282
  }, {
    "from": 80,
    "label": "calls",
    "to": 276
  }, {
    "from": 80,
    "label": "calls",
    "to": 276
  }, {
    "from": 105,
    "label": "calls",
    "to": 255
  }, {
    "from": 127,
    "label": "calls",
    "to": 255
  }, {
    "from": 116,
    "label": "calls",
    "to": 277
  }, {
    "from": 151,
    "label": "calls",
    "to": 278
  }, {
    "from": 151,
    "label": "calls",
    "to": 278
  }, {
    "from": 159,
    "label": "calls",
    "to": 278
  }, {
    "from": 74,
    "label": "calls",
    "to": 270
  }, {
    "from": 220,
    "label": "calls",
    "to": 270
  }, {
    "from": 230,
    "label": "calls",
    "to": 270
  }, {
    "from": 74,
    "label": "calls",
    "to": 274
  }, {
    "from": 237,
    "label": "calls",
    "to": 274
  }, {
    "from": 237,
    "label": "calls",
    "to": 274
  }, {
    "from": 15,
    "label": "calls",
    "to": 266
  }, {
    "from": 40,
    "label": "calls",
    "to": 266
  }, {
    "from": 140,
    "label": "calls",
    "to": 266
  }, {
    "from": 179,
    "label": "calls",
    "to": 266
  }, {
    "from": 186,
    "label": "calls",
    "to": 266
  }, {
    "from": 140,
    "label": "calls",
    "to": 280
  }, {
    "from": 127,
    "label": "calls",
    "to": 258
  }, {
    "from": 140,
    "label": "calls",
    "to": 279
  }, {
    "from": 159,
    "label": "calls",
    "to": 279
  }, {
    "from": 159,
    "label": "calls",
    "to": 279
  }, {
    "from": 159,
    "label": "calls",
    "to": 279
  }, {
    "from": 186,
    "label": "calls",
    "to": 279
  }, {
    "from": 186,
    "label": "calls",
    "to": 279
  }, {
    "from": 240,
    "label": "calls",
    "to": 253
  }, {
    "from": 230,
    "label": "calls",
    "to": 275
  }, {
    "from": 140,
    "label": "calls",
    "to": 179
  }, {
    "from": 105,
    "label": "calls",
    "to": 112
  }, {
    "from": 116,
    "label": "calls",
    "to": 112
  }, {
    "from": 119,
    "label": "calls",
    "to": 112
  }, {
    "from": 249,
    "label": "calls",
    "to": 254
  }, {
    "from": 15,
    "label": "calls",
    "to": 281
  }, {
    "from": 40,
    "label": "calls",
    "to": 281
  }, {
    "from": 203,
    "label": "calls",
    "to": 281
  }, {
    "from": 138,
    "label": "calls",
    "to": 230
  }, {
    "from": 151,
    "label": "calls",
    "to": 284
  }, {
    "from": 249,
    "label": "calls",
    "to": 218
  }, {
    "from": 249,
    "label": "calls",
    "to": 218
  }, {
    "from": 159,
    "label": "calls",
    "to": 263
  }, {
    "from": 121,
    "label": "calls",
    "to": 93
  }, {
    "from": 240,
    "label": "calls",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 249
  }, {
    "from": 249,
    "label": "declares",
    "to": 9
  }, {
    "from": 249,
    "label": "declares",
    "to": 15
  }, {
    "from": 249,
    "label": "declares",
    "to": 28
  }, {
    "from": 249,
    "label": "declares",
    "to": 40
  }, {
    "from": 249,
    "label": "declares",
    "to": 65
  }, {
    "from": 249,
    "label": "declares",
    "to": 67
  }, {
    "from": 249,
    "label": "declares",
    "to": 69
  }, {
    "from": 249,
    "label": "declares",
    "to": 72
  }, {
    "from": 249,
    "label": "declares",
    "to": 74
  }, {
    "from": 249,
    "label": "declares",
    "to": 80
  }, {
    "from": 249,
    "label": "declares",
    "to": 93
  }, {
    "from": 249,
    "label": "declares",
    "to": 97
  }, {
    "from": 249,
    "label": "declares",
    "to": 105
  }, {
    "from": 249,
    "label": "declares",
    "to": 112
  }, {
    "from": 249,
    "label": "declares",
    "to": 116
  }, {
    "from": 249,
    "label": "declares",
    "to": 119
  }, {
    "from": 249,
    "label": "declares",
    "to": 121
  }, {
    "from": 249,
    "label": "declares",
    "to": 127
  }, {
    "from": 249,
    "label": "declares",
    "to": 134
  }, {
    "from": 249,
    "label": "declares",
    "to": 138
  }, {
    "from": 249,
    "label": "declares",
    "to": 140
  }, {
    "from": 249,
    "label": "declares",
    "to": 151
  }, {
    "from": 249,
    "label": "declares",
    "to": 157
  }, {
    "from": 249,
    "label": "declares",
    "to": 159
  }, {
    "from": 249,
    "label": "declares",
    "to": 179
  }, {
    "from": 249,
    "label": "declares",
    "to": 186
  }, {
    "from": 249,
    "label": "declares",
    "to": 199
  }, {
    "from": 249,
    "label": "declares",
    "to": 203
  }, {
    "from": 249,
    "label": "declares",
    "to": 212
  }, {
    "from": 249,
    "label": "declares",
    "to": 218
  }, {
    "from": 249,
    "label": "declares",
    "to": 220
  }, {
    "from": 249,
    "label": "declares",
    "to": 230
  }, {
    "from": 249,
    "label": "declares",
    "to": 237
  }, {
    "from": 249,
    "label": "declares",
    "to": 240
  }, {
    "from": 249,
    "label": "declares",
    "to": 248
  }, {
    "from": 1,
    "label": "contains",
    "to": 288
  }, {
    "from": 1,
    "label": "contains",
    "to": 289
  }, {
    "from": 288,
    "label": "initializes",
    "to": 290
  }, {
    "from": 290,
    "label": "assigns",
    "to": 291
  }, {
    "from": 288,
    "label": "initializes",
    "to": 292
  }, {
    "from": 292,
    "label": "assigns",
    "to": 293
  }, {
    "from": 288,
    "label": "initializes",
    "to": 294
  }, {
    "from": 294,
    "label": "assigns",
    "to": 295
  }, {
    "from": 288,
    "label": "initializes",
    "to": 296
  }, {
    "from": 296,
    "label": "assigns",
    "to": 297
  }, {
    "from": 288,
    "label": "initializes",
    "to": 298
  }, {
    "from": 298,
    "label": "assigns",
    "to": 299
  }, {
    "from": 288,
    "label": "initializes",
    "to": 300
  }, {
    "from": 300,
    "label": "assigns",
    "to": 301
  }, {
    "from": 288,
    "label": "initializes",
    "to": 302
  }, {
    "from": 302,
    "label": "assigns",
    "to": 303
  }, {
    "from": 288,
    "label": "initializes",
    "to": 304
  }, {
    "from": 304,
    "label": "assigns",
    "to": 305
  }, {
    "from": 288,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "assigns",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 288,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 288,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 288,
    "label": "initializes",
    "to": 314
  }, {
    "from": 288,
    "label": "initializes",
    "to": 315
  }, {
    "from": 315,
    "label": "assigns",
    "to": 316
  }, {
    "from": 288,
    "label": "initializes",
    "to": 317
  }, {
    "from": 317,
    "label": "assigns",
    "to": 318
  }, {
    "from": 288,
    "label": "initializes",
    "to": 319
  }, {
    "from": 319,
    "label": "assigns",
    "to": 320
  }, {
    "from": 288,
    "label": "initializes",
    "to": 321
  }, {
    "from": 321,
    "label": "assigns",
    "to": 322
  }, {
    "from": 288,
    "label": "initializes",
    "to": 323
  }, {
    "from": 323,
    "label": "assigns",
    "to": 324
  }, {
    "from": 289,
    "label": "initializes",
    "to": 325
  }, {
    "from": 325,
    "label": "requires",
    "to": 252
  }, {
    "from": 1,
    "label": "provides",
    "to": 326
  }, {
    "from": 286,
    "label": "represents",
    "to": 327
  }, {
    "from": 326,
    "label": "provides",
    "to": 327
  }, {
    "from": 310,
    "label": "contains",
    "to": 2
  }, {
    "from": 310,
    "label": "contains",
    "to": 3
  }, {
    "from": 310,
    "label": "contains",
    "to": 4
  }, {
    "from": 310,
    "label": "contains",
    "to": 5
  }, {
    "from": 290,
    "label": "contains",
    "to": 6
  }, {
    "from": 290,
    "label": "contains",
    "to": 7
  }, {
    "from": 310,
    "label": "contains",
    "to": 8
  }, {
    "from": 310,
    "label": "contains",
    "to": 9
  }, {
    "from": 310,
    "label": "contains",
    "to": 28
  }, {
    "from": 310,
    "label": "contains",
    "to": 40
  }, {
    "from": 310,
    "label": "contains",
    "to": 80
  }, {
    "from": 310,
    "label": "contains",
    "to": 93
  }, {
    "from": 310,
    "label": "contains",
    "to": 97
  }, {
    "from": 310,
    "label": "contains",
    "to": 105
  }, {
    "from": 310,
    "label": "contains",
    "to": 112
  }, {
    "from": 310,
    "label": "contains",
    "to": 116
  }, {
    "from": 310,
    "label": "contains",
    "to": 119
  }, {
    "from": 310,
    "label": "contains",
    "to": 121
  }, {
    "from": 310,
    "label": "contains",
    "to": 127
  }, {
    "from": 310,
    "label": "contains",
    "to": 134
  }, {
    "from": 310,
    "label": "contains",
    "to": 138
  }, {
    "from": 310,
    "label": "contains",
    "to": 140
  }, {
    "from": 310,
    "label": "contains",
    "to": 151
  }, {
    "from": 310,
    "label": "contains",
    "to": 157
  }, {
    "from": 310,
    "label": "contains",
    "to": 159
  }, {
    "from": 310,
    "label": "contains",
    "to": 179
  }, {
    "from": 310,
    "label": "contains",
    "to": 186
  }, {
    "from": 310,
    "label": "contains",
    "to": 199
  }, {
    "from": 310,
    "label": "contains",
    "to": 212
  }, {
    "from": 310,
    "label": "contains",
    "to": 220
  }, {
    "from": 310,
    "label": "contains",
    "to": 230
  }, {
    "from": 310,
    "label": "contains",
    "to": 237
  }, {
    "from": 287,
    "label": "contains",
    "to": 240
  }, {
    "from": 290,
    "label": "contains",
    "to": 240
  }, {
    "from": 328,
    "label": "contains",
    "to": 240
  }, {
    "from": 310,
    "label": "contains",
    "to": 250
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 148,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 166,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 177,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 227,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 228,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 235,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 243,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 245,
    "label": "hasArgument",
    "to": 309
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 309
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "init",
    "type": "module"
  }, {
    "id": 2,
    "text": "function lib.new(prefix, tbl)\r\n  assert(prefix, 'Missing prefix in Autoload call.')\r\n  local self = tbl or {}\r\n  self.type = prefix\r\n  return setmetatable(self, lib)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function lib.__index(table, name)\r\n  -- Trying to load new lib like foo.Bar\r\n  local ok, new_lib_or_error = pcall(function() return require(table.type..'.'..name); end)\r\n  if ok then\r\n    -- insert new class with name in table\r\n    table[name] = new_lib_or_error\r\n    return new_lib_or_error\r\n  else\r\n    print(new_lib_or_error)\r\n    return nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function lib.global()\r\n  setmetatable(_G, lib2)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function lib.strict(x)\r\n  if x == false then\r\n    -- not strict\r\n    lib2.__index = private.__index\r\n  else\r\n    -- disable autoload and raise on nil\r\n    lib2.__index = private.__index_strict\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function private.__index(table, name)\r\n  if name == '_PROMPT' or name == '_PROMPT2' then\r\n    -- special case for lua interactive\r\n    return nil\r\n  end\r\n  local ok, new_lib_or_error = pcall(function() return require(name); end)\r\n  if ok then\r\n    return new_lib_or_error or rawget(table, name)\r\n  else\r\n    -- nil value\r\n    return nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function private.__index_strict(table, name)\r\n  if name == '_PROMPT' or name == '_PROMPT2' then\r\n    -- special case for lua interactive\r\n    return nil\r\n  end\r\n  local ok, new_lib_or_error = pcall(function() return require(name); end)\r\n  if ok then\r\n    return new_lib_or_error or rawget(table, name)\r\n  else\r\n    -- nil value\r\n    error(string.format(\"Trying to access undefined global variable '%s'.\\n%s\", name, debug.traceback()))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function lib.new(path)\r\n  local self = {path = path}\r\n  return setmetatable(self, lib)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function lib.class(class_name, tbl)\r\n  local lib = tbl or {}\r\n  lib.type = class_name\r\n  lib.__index = lib\r\n\r\n  return setmetatable(lib, CALL_TO_NEW)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local lib = tbl or {}",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "lib.type = class_name",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "lib.__index = lib",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function itdeepSearch(data, func, depth, max_depth)\r\n  local end_reached = true\r\n  local result\r\n  for _, child in ipairs(data) do\r\n    if type(child) == 'table' then\r\n      if depth == max_depth then\r\n        local r = func(child)\r\n        if r then\r\n          return r\r\n        elseif child[1] then\r\n          -- Could search deeper\r\n          end_reached = false\r\n        end\r\n      elseif child[1] then\r\n        -- Go deeper\r\n        local r, e = itdeepSearch(child, func, depth + 1, max_depth)\r\n        if r then\r\n          return r\r\n        else\r\n          end_reached = end_reached and e\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  return nil, end_reached\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local end_reached = true",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local result",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "for _, child in ipairs(data) do\r\n    if type(child) == 'table' then\r\n      if depth == max_depth then\r\n        local r = func(child)\r\n        if r then\r\n          return r\r\n        elseif child[1] then\r\n          -- Could search deeper\r\n          end_reached = false\r\n        end\r\n      elseif child[1] then\r\n        -- Go deeper\r\n        local r, e = itdeepSearch(child, func, depth + 1, max_depth)\r\n        if r then\r\n          return r\r\n        else\r\n          end_reached = end_reached and e\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if type(child) == 'table' then\r\n      if depth == max_depth then\r\n        local r = func(child)\r\n        if r then\r\n          return r\r\n        elseif child[1] then\r\n          -- Could search deeper\r\n          end_reached = false\r\n        end\r\n      elseif child[1] then\r\n        -- Go deeper\r\n        local r, e = itdeepSearch(child, func, depth + 1, max_depth)\r\n        if r then\r\n          return r\r\n        else\r\n          end_reached = end_reached and e\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "if depth == max_depth then\r\n        local r = func(child)\r\n        if r then\r\n          return r\r\n        elseif child[1] then\r\n          -- Could search deeper\r\n          end_reached = false\r\n        end\r\n      elseif child[1] then\r\n        -- Go deeper\r\n        local r, e = itdeepSearch(child, func, depth + 1, max_depth)\r\n        if r then\r\n          return r\r\n        else\r\n          end_reached = end_reached and e\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "local r = func(child)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if r then\r\n          return r\r\n        elseif child[1] then\r\n          -- Could search deeper\r\n          end_reached = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "end_reached = false",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "local r, e = itdeepSearch(child, func, depth + 1, max_depth)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if r then\r\n          return r\r\n        else\r\n          end_reached = end_reached and e\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "end_reached = end_reached and e",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function lib.IDDFS(data, func, max_depth)\r\n  local depth = 1\r\n  max_depth = max_depth or 3000\r\n  key = key or 'xml'\r\n  local r = func(data)\r\n  if r then return r end\r\n  while true do\r\n    local result, end_reached = itdeepSearch(data, func, 1, depth)\r\n    if result then\r\n      return result\r\n    elseif end_reached then\r\n      return nil\r\n    elseif depth < max_depth then\r\n      depth = depth + 1\r\n    else\r\n      error(string.format('Could not finish search: maximal depth of %i reached.', max_depth))\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local depth = 1",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "max_depth = max_depth or 3000",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "key = key or 'xml'",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local r = func(data)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if r then return r end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "while true do\r\n    local result, end_reached = itdeepSearch(data, func, 1, depth)\r\n    if result then\r\n      return result\r\n    elseif end_reached then\r\n      return nil\r\n    elseif depth < max_depth then\r\n      depth = depth + 1\r\n    else\r\n      error(string.format('Could not finish search: maximal depth of %i reached.', max_depth))\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 35,
    "text": "local result, end_reached = itdeepSearch(data, func, 1, depth)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if result then\r\n      return result\r\n    elseif end_reached then\r\n      return nil\r\n    elseif depth < max_depth then\r\n      depth = depth + 1\r\n    else\r\n      error(string.format('Could not finish search: maximal depth of %i reached.', max_depth))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "depth = depth + 1",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "error(string.format('Could not finish search: maximal depth of %i reached.', max_depth))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function lib.BFS(data, func, max_depth)\r\n  local max_depth = max_depth or 3000\r\n  local queue = {}\r\n  local depth = {} -- depth queue\r\n  local head  = 1\r\n  local tail  = 1\r\n  local function push(e, d)\r\n    queue[tail] = e\r\n    depth[tail] = d\r\n    tail = tail + 1\r\n  end\r\n\r\n  local function pop()\r\n    if head == tail then return nil end\r\n    local e, d = queue[head], depth[head]\r\n    head = head + 1\r\n    return e, d\r\n  end\r\n\r\n  local elem = data\r\n  local d = 1\r\n  while elem and d <= max_depth do\r\n    local r = func(elem)\r\n    if r then return elem end\r\n    for _, child in ipairs(elem) do\r\n      if type(child) == 'table' then\r\n        push(child, d + 1)\r\n      end\r\n    end\r\n    elem, d = pop()\r\n  end\r\n\r\n  if d and d > max_depth then\r\n    error(string.format('Could not finish search: maximal depth of %i reached.', max_depth))\r\n  else\r\n    return nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local max_depth = max_depth or 3000",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local queue = {}",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local depth = {}",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local head  = 1",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local tail  = 1",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local function push(e, d)\r\n    queue[tail] = e\r\n    depth[tail] = d\r\n    tail = tail + 1\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 47,
    "text": "queue[tail] = e",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "depth[tail] = d",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "tail = tail + 1",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local function pop()\r\n    if head == tail then return nil end\r\n    local e, d = queue[head], depth[head]\r\n    head = head + 1\r\n    return e, d\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 51,
    "text": "if head == tail then return nil end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "local e, d = queue[head], depth[head]",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "head = head + 1",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "local elem = data",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local d = 1",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "while elem and d <= max_depth do\r\n    local r = func(elem)\r\n    if r then return elem end\r\n    for _, child in ipairs(elem) do\r\n      if type(child) == 'table' then\r\n        push(child, d + 1)\r\n      end\r\n    end\r\n    elem, d = pop()\r\n  end",
    "type": "statement:while"
  }, {
    "id": 57,
    "text": "local r = func(elem)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if r then return elem end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "for _, child in ipairs(elem) do\r\n      if type(child) == 'table' then\r\n        push(child, d + 1)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "if type(child) == 'table' then\r\n        push(child, d + 1)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "push(child, d + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "elem, d = pop()",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if d and d > max_depth then\r\n    error(string.format('Could not finish search: maximal depth of %i reached.', max_depth))\r\n  else\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "local function push(e, d)\r\n    queue[tail] = e\r\n    depth[tail] = d\r\n    tail = tail + 1\r\n  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "local function pop()\r\n    if head == tail then return nil end\r\n    local e, d = queue[head], depth[head]\r\n    head = head + 1\r\n    return e, d\r\n  end",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "local function scriptSource(level)\r\n  local level = level or 0\r\n  return debug.getinfo(2 - level).source\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local level = level or 0",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "local function scriptPath(level)\r\n  local level = level or 0\r\n  return match(scriptSource(level - 1), '^@(.*)$')\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "local function scriptDir(level)\r\n  local level = level or 0\r\n  local file = scriptPath(level - 1)\r\n  assert(file, \"Cannot use scriptDir here because of a tail call optimization.\\n\"..debug.traceback())\r\n  if match(file, '/') then\r\n    local p = gsub(file, '/[^/]+$', '')\r\n    return p\r\n  else\r\n    return '.'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local file = scriptPath(level - 1)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "assert(file, \"Cannot use scriptDir here because of a tail call optimization.\\n\"..debug.traceback())",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "if match(file, '/') then\r\n    local p = gsub(file, '/[^/]+$', '')\r\n    return p\r\n  else\r\n    return '.'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "local p = gsub(file, '/[^/]+$', '')",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function lib.path(path, level)\r\n  level = level or 2\r\n  local chr = sub(path, 1, 1)\r\n  if chr == '|' or chr == '&' then\r\n    local src = debug.getinfo(level).source\r\n    if src:match(TAIL_CALL) then\r\n      src = debug.getinfo(level + 1).source\r\n    end\r\n    local s = match(src, '^@(.*)$')\r\n    if chr == '&' then\r\n      return s\r\n    end\r\n    local b = lib.dir(s)\r\n    if len(path) == 1 then return b end\r\n    local r = sub(path, 2, -1)\r\n    return lib.absolutizePath(b..'/'..r)\r\n  else\r\n    return lib.absolutizePath(path)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "level = level or 2",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "local chr = sub(path, 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "if chr == '|' or chr == '&' then\r\n    local src = debug.getinfo(level).source\r\n    if src:match(TAIL_CALL) then\r\n      src = debug.getinfo(level + 1).source\r\n    end\r\n    local s = match(src, '^@(.*)$')\r\n    if chr == '&' then\r\n      return s\r\n    end\r\n    local b = lib.dir(s)\r\n    if len(path) == 1 then return b end\r\n    local r = sub(path, 2, -1)\r\n    return lib.absolutizePath(b..'/'..r)\r\n  else\r\n    return lib.absolutizePath(path)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "local src = debug.getinfo(level).source",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if src:match(TAIL_CALL) then\r\n      src = debug.getinfo(level + 1).source\r\n    end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "src = debug.getinfo(level + 1).source",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "local s = match(src, '^@(.*)$')",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if chr == '&' then\r\n      return s\r\n    end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "local b = lib.dir(s)",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if len(path) == 1 then return b end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "local r = sub(path, 2, -1)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function lib.fileType(path)\r\n  if not path then return nil end\r\n  local attrs = lfs.attributes(path)\r\n  return attrs and attrs.mode\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "if not path then return nil end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "local attrs = lfs.attributes(path)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function lib.content(basepath, path)\r\n  if path then\r\n    path = string.format('%s/%s', basepath, path)\r\n  else\r\n    path = basepath\r\n  end\r\n  local f = assert(io.open(path, 'rb'))\r\n  local s = f:read('*all')\r\n  f:close()\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "if path then\r\n    path = string.format('%s/%s', basepath, path)\r\n  else\r\n    path = basepath\r\n  end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "path = string.format('%s/%s', basepath, path)",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "path = basepath",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "local f = assert(io.open(path, 'rb'))",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local s = f:read('*all')",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function lib.writeall(filepath, data, check_diff)\r\n  -- get base directory and build components if necessary\r\n  lib.makePath(lib.dir(filepath))\r\n  if check_diff and lib.exist(filepath) then\r\n    if data == lib.content(filepath) then\r\n      return true\r\n    end\r\n  end\r\n  local f = assert(io.open(filepath, 'wb'))\r\n  local s = f:write(data)\r\n  f:close()\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "lib.makePath(lib.dir(filepath))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "if check_diff and lib.exist(filepath) then\r\n    if data == lib.content(filepath) then\r\n      return true\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "if data == lib.content(filepath) then\r\n      return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "local f = assert(io.open(filepath, 'wb'))",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local s = f:write(data)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function lib.makePath(path)\r\n  local fullpath = lib.absolutizePath(path)\r\n  private.makePathPart(fullpath, fullpath)\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local fullpath = lib.absolutizePath(path)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "private.makePathPart(fullpath, fullpath)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function lib.move(path, new_path)\r\n  lib.makePath(lib.dir(new_path))\r\n  return os.rename(path, new_path)\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "lib.makePath(lib.dir(new_path))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function lib.copy(path, new_path)\r\n  lib.makePath(lib.dir(new_path))\r\n  return os.execute(string.format('cp %s %s', lib.shellQuote(path), lib.shellQuote(new_path)))\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function lib.rmFile(path)\r\n  local typ = lib.fileType(path)\r\n  if not typ then return end\r\n  assert(typ == 'file', string.format(\"Cannot remove '%s': it is a %s.\", path, typ))\r\n  os.remove(path)\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "local typ = lib.fileType(path)",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "if not typ then return end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "assert(typ == 'file', string.format(\"Cannot remove '%s': it is a %s.\", path, typ))",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "os.remove(path)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function lib.rmTree(path, recursive)\r\n  local fullpath = lib.absolutizePath(path)\r\n  if not lib.exist(fullpath) then\r\n    return true\r\n  end\r\n  if fullpath ~= '/' and fullpath ~= '' then\r\n    -- bug paranoia\r\n    if not recursive then\r\n      return lfs.rmdir(fullpath)\r\n    else\r\n      local code = string.format('rm -r %s', lib.shellQuote(fullpath))\r\n      if os.execute(code) == 0 then\r\n        return true\r\n      else\r\n        return false\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "if not lib.exist(fullpath) then\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "if fullpath ~= '/' and fullpath ~= '' then\r\n    -- bug paranoia\r\n    if not recursive then\r\n      return lfs.rmdir(fullpath)\r\n    else\r\n      local code = string.format('rm -r %s', lib.shellQuote(fullpath))\r\n      if os.execute(code) == 0 then\r\n        return true\r\n      else\r\n        return false\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "if not recursive then\r\n      return lfs.rmdir(fullpath)\r\n    else\r\n      local code = string.format('rm -r %s', lib.shellQuote(fullpath))\r\n      if os.execute(code) == 0 then\r\n        return true\r\n      else\r\n        return false\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "local code = string.format('rm -r %s', lib.shellQuote(fullpath))",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "if os.execute(code) == 0 then\r\n        return true\r\n      else\r\n        return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function lib.dir(filepath)\r\n  local base, file = match(filepath, '(.*)/(.*)$')\r\n  if not base then\r\n    return '.', filepath\r\n  elseif base == '' then\r\n    -- '/' == root ?\r\n    return '/', file\r\n  else\r\n    return base, file\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "local base, file = match(filepath, '(.*)/(.*)$')",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "if not base then\r\n    return '.', filepath\r\n  elseif base == '' then\r\n    -- '/' == root ?\r\n    return '/', file\r\n  else\r\n    return base, file\r\n  end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function lib.pathDir(...)\r\n  return lib.deprecation('lub', 'pathDir', 'dir', ...)\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function lib.absolutizePath(path, basepath)\r\n  if not match(path, '^/') then\r\n    path = string.format('%s/%s', basepath or lfs.currentdir(), path)\r\n  end\r\n  -- resolve '/./' and '/../'\r\n  local parts = lib.split(path, '/')\r\n  local path = {}\r\n  for i, part in ipairs(parts) do\r\n    if part == '.' then\r\n      -- ignore\r\n    elseif part == '..' then\r\n      -- move back\r\n      -- 1 = '', 2 = 'xxx', 3 = '..' ==> 1 = ''\r\n      if i > 2 then\r\n        table.remove(path, #path)\r\n      end\r\n    else\r\n      table.insert(path, part)\r\n    end\r\n  end\r\n  return lib.join(path, '/')\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "if not match(path, '^/') then\r\n    path = string.format('%s/%s', basepath or lfs.currentdir(), path)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "path = string.format('%s/%s', basepath or lfs.currentdir(), path)",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "local parts = lib.split(path, '/')",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local path = {}",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "for i, part in ipairs(parts) do\r\n    if part == '.' then\r\n      -- ignore\r\n    elseif part == '..' then\r\n      -- move back\r\n      -- 1 = '', 2 = 'xxx', 3 = '..' ==> 1 = ''\r\n      if i > 2 then\r\n        table.remove(path, #path)\r\n      end\r\n    else\r\n      table.insert(path, part)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 146,
    "text": "if part == '.' then\r\n      -- ignore\r\n    elseif part == '..' then\r\n      -- move back\r\n      -- 1 = '', 2 = 'xxx', 3 = '..' ==> 1 = ''\r\n      if i > 2 then\r\n        table.remove(path, #path)\r\n      end\r\n    else\r\n      table.insert(path, part)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "if i > 2 then\r\n        table.remove(path, #path)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "table.remove(path, #path)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "table.insert(path, part)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function lib.absToRel(abs_string, base)\r\n  local l = string.len(base)\r\n  local s = string.sub(abs_string, 1, l)\r\n  if s == base then\r\n    if base == abs_string then\r\n      return abs_string\r\n    else\r\n      return string.sub(abs_string, l+2, -1)\r\n    end\r\n  else\r\n    return abs_string\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "local l = string.len(base)",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "local s = string.sub(abs_string, 1, l)",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if s == base then\r\n    if base == abs_string then\r\n      return abs_string\r\n    else\r\n      return string.sub(abs_string, l+2, -1)\r\n    end\r\n  else\r\n    return abs_string\r\n  end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "if base == abs_string then\r\n      return abs_string\r\n    else\r\n      return string.sub(abs_string, l+2, -1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function lib.strip(str)\r\n  return match(str, '^[ \\t\\n\\r]*(.-)[ \\t\\n\\r]*$')\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function lib.split(str, pat)\r\n  local t = {}  -- NOTE: use {n = 0} in Lua-5.0\r\n  if not pat then\r\n    local i = 1\r\n    while true do\r\n      local s = string.sub(str, i, i)\r\n      if s == '' then\r\n        break\r\n      else\r\n        table.insert(t, s)\r\n      end\r\n      i = i + 1\r\n    end\r\n  else\r\n    local fpat = '(.-)' .. pat\r\n    local last_end = 1\r\n    local s, e, cap = string.find(str,fpat, 1)\r\n    while s do\r\n      table.insert(t,cap)\r\n      last_end = e+1\r\n      s, e, cap = str:find(fpat, last_end)\r\n    end\r\n    if last_end <= #str then\r\n      cap = str:sub(last_end)\r\n      table.insert(t, cap)\r\n    end\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "if not pat then\r\n    local i = 1\r\n    while true do\r\n      local s = string.sub(str, i, i)\r\n      if s == '' then\r\n        break\r\n      else\r\n        table.insert(t, s)\r\n      end\r\n      i = i + 1\r\n    end\r\n  else\r\n    local fpat = '(.-)' .. pat\r\n    local last_end = 1\r\n    local s, e, cap = string.find(str,fpat, 1)\r\n    while s do\r\n      table.insert(t,cap)\r\n      last_end = e+1\r\n      s, e, cap = str:find(fpat, last_end)\r\n    end\r\n    if last_end <= #str then\r\n      cap = str:sub(last_end)\r\n      table.insert(t, cap)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "while true do\r\n      local s = string.sub(str, i, i)\r\n      if s == '' then\r\n        break\r\n      else\r\n        table.insert(t, s)\r\n      end\r\n      i = i + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 164,
    "text": "local s = string.sub(str, i, i)",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "if s == '' then\r\n        break\r\n      else\r\n        table.insert(t, s)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "table.insert(t, s)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "local fpat = '(.-)' .. pat",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "local last_end = 1",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "local s, e, cap = string.find(str,fpat, 1)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "while s do\r\n      table.insert(t,cap)\r\n      last_end = e+1\r\n      s, e, cap = str:find(fpat, last_end)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 172,
    "text": "table.insert(t,cap)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "last_end = e+1",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "s, e, cap = str:find(fpat, last_end)",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "if last_end <= #str then\r\n      cap = str:sub(last_end)\r\n      table.insert(t, cap)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "cap = str:sub(last_end)",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "table.insert(t, cap)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function lib.join(list, sep)\r\n  local res = nil\r\n  for _, part in ipairs(list) do\r\n    if not res then\r\n      res = part\r\n    else\r\n      res = res .. sep .. part\r\n    end\r\n  end\r\n  return res or ''\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "local res = nil",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "for _, part in ipairs(list) do\r\n    if not res then\r\n      res = part\r\n    else\r\n      res = res .. sep .. part\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 182,
    "text": "if not res then\r\n      res = part\r\n    else\r\n      res = res .. sep .. part\r\n    end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "res = part",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "res = res .. sep .. part",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function lib.insertSorted(list, elem, key)\r\n  local pos = -1\r\n  for i, n in ipairs(list) do\r\n    local a, b = n, elem\r\n    if key then\r\n      a = a[key]\r\n      b = b[key]\r\n    end\r\n    if a > b then\r\n      pos = i\r\n      break\r\n    end\r\n  end\r\n  if pos == -1 then\r\n    table.insert(list, elem)\r\n  else\r\n    table.insert(list, pos, elem)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "local pos = -1",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "for i, n in ipairs(list) do\r\n    local a, b = n, elem\r\n    if key then\r\n      a = a[key]\r\n      b = b[key]\r\n    end\r\n    if a > b then\r\n      pos = i\r\n      break\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 189,
    "text": "local a, b = n, elem",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "if key then\r\n      a = a[key]\r\n      b = b[key]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "a = a[key]",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "b = b[key]",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "if a > b then\r\n      pos = i\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "pos = i",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "if pos == -1 then\r\n    table.insert(list, elem)\r\n  else\r\n    table.insert(list, pos, elem)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "table.insert(list, elem)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "table.insert(list, pos, elem)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function lib.merge(source, table)\r\n  for k, v in pairs(table) do\r\n    source[k] = v\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "for k, v in pairs(table) do\r\n    source[k] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 201,
    "text": "source[k] = v",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "local function deepMerge(base, key, value)\r\n  local base_v = base[key]\r\n  if type(value) == 'table' then\r\n    if not base_v then\r\n      base[key] = value\r\n      return true\r\n    else\r\n      -- merge\r\n      local changed = false\r\n      for k, v in pairs(value) do\r\n        changed = deepMerge(base_v, k, v) or changed\r\n      end\r\n      return changed\r\n    end\r\n  elseif base_v == value then\r\n    -- nothing changed\r\n    return false\r\n  else\r\n    base[key] = value\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 204,
    "text": "local base_v = base[key]",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "if type(value) == 'table' then\r\n    if not base_v then\r\n      base[key] = value\r\n      return true\r\n    else\r\n      -- merge\r\n      local changed = false\r\n      for k, v in pairs(value) do\r\n        changed = deepMerge(base_v, k, v) or changed\r\n      end\r\n      return changed\r\n    end\r\n  elseif base_v == value then\r\n    -- nothing changed\r\n    return false\r\n  else\r\n    base[key] = value\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "if not base_v then\r\n      base[key] = value\r\n      return true\r\n    else\r\n      -- merge\r\n      local changed = false\r\n      for k, v in pairs(value) do\r\n        changed = deepMerge(base_v, k, v) or changed\r\n      end\r\n      return changed\r\n    end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "base[key] = value",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "local changed = false",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "for k, v in pairs(value) do\r\n        changed = deepMerge(base_v, k, v) or changed\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 210,
    "text": "changed = deepMerge(base_v, k, v) or changed",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function lib.traceRequire(enable)\r\n  if enable then\r\n    require = function(path)\r\n      print(\"require '\"..path..\"'\")\r\n      return orig_req(path)\r\n    end\r\n  else\r\n    require = orig_req\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 213,
    "text": "if enable then\r\n    require = function(path)\r\n      print(\"require '\"..path..\"'\")\r\n      return orig_req(path)\r\n    end\r\n  else\r\n    require = orig_req\r\n  end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "require = function(path)\r\n      print(\"require '\"..path..\"'\")\r\n      return orig_req(path)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "print(\"require '\"..path..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "require = orig_req",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 218,
    "text": "function(path)\r\n      print(\"require '\"..path..\"'\")\r\n      return orig_req(path)\r\n    end",
    "type": "function"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "function lib.log(...)\r\n  local trace = lib.split(debug.traceback(), '\\n\\t')\r\n  local part = trace[3]\r\n  if part:match(TAIL_CALL) then\r\n    part = trace[4]\r\n  end\r\n  local file, line = match(part, '^([^:]+):([^:]+):')\r\n  if file and line then\r\n    print(string.format('%s:%i:', file, line), ...)\r\n  else\r\n    print(part, ...)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 221,
    "text": "local trace = lib.split(debug.traceback(), '\\n\\t')",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "local part = trace[3]",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "if part:match(TAIL_CALL) then\r\n    part = trace[4]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "part = trace[4]",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "local file, line = match(part, '^([^:]+):([^:]+):')",
    "type": "statement:localassign"
  }, {
    "id": 226,
    "text": "if file and line then\r\n    print(string.format('%s:%i:', file, line), ...)\r\n  else\r\n    print(part, ...)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "print(string.format('%s:%i:', file, line), ...)",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "print(part, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function lib.deprecation(lib_name, old, new, ...)\r\n  local trace = lib.split(debug.traceback(), '\\n\\t')[4]\r\n  local arg = ...\r\n  if arg then\r\n    print(string.format(\"[DEPRECATION] %s\\n\\t'%s.%s' is deprecated. Please use '%s.%s' instead.\", trace, lib_name, old, lib_name, new))\r\n    return package.loaded[lib_name][new](...)\r\n  else\r\n    print(string.format(\"[DEPRECATION] %s\\n\\t'%s.%s' is deprecated and will be removed. Please use '%s' instead.\", trace, lib_name, old, new))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "local trace = lib.split(debug.traceback(), '\\n\\t')[4]",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "local arg = ...",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "if arg then\r\n    print(string.format(\"[DEPRECATION] %s\\n\\t'%s.%s' is deprecated. Please use '%s.%s' instead.\", trace, lib_name, old, lib_name, new))\r\n    return package.loaded[lib_name][new](...)\r\n  else\r\n    print(string.format(\"[DEPRECATION] %s\\n\\t'%s.%s' is deprecated and will be removed. Please use '%s' instead.\", trace, lib_name, old, new))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "print(string.format(\"[DEPRECATION] %s\\n\\t'%s.%s' is deprecated. Please use '%s.%s' instead.\", trace, lib_name, old, lib_name, new))",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "print(string.format(\"[DEPRECATION] %s\\n\\t'%s.%s' is deprecated and will be removed. Please use '%s' instead.\", trace, lib_name, old, new))",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function lib.shellQuote(str)\r\n  str = gsub(str, '\\\\', '\\\\\\\\')\r\n  return '\"' .. gsub(str, '\"', '\\\\\"') .. '\"'\r\nend",
    "type": "function"
  }, {
    "id": 238,
    "text": "str = gsub(str, '\\\\', '\\\\\\\\')",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 240,
    "text": "function private.makePathPart(path, fullpath)\r\n  local file_type = lib.fileType(path)\r\n  if file_type == 'file' then\r\n    error(string.format(\"Could not build path '%s' ('%s' is a file).\", fullpath, path))\r\n  elseif file_type == 'directory' then\r\n    return -- done\r\n  else\r\n    local base = lib.dir(path)\r\n    private.makePathPart(base, fullpath)\r\n    -- base should exist or an error has been raised\r\n    lfs.mkdir(path)\r\n    -- done\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 241,
    "text": "local file_type = lib.fileType(path)",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "if file_type == 'file' then\r\n    error(string.format(\"Could not build path '%s' ('%s' is a file).\", fullpath, path))\r\n  elseif file_type == 'directory' then\r\n    return -- done\r\n  else\r\n    local base = lib.dir(path)\r\n    private.makePathPart(base, fullpath)\r\n    -- base should exist or an error has been raised\r\n    lfs.mkdir(path)\r\n    -- done\r\n  end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "error(string.format(\"Could not build path '%s' ('%s' is a file).\", fullpath, path))",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "local base = lib.dir(path)",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "private.makePathPart(base, fullpath)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "lfs.mkdir(path)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function(lib, ...) return lib.new(...) end",
    "type": "function"
  }, {
    "id": 249,
    "text": "",
    "type": "function container"
  }, {
    "id": 250,
    "text": "function lib.new(source)\r\n  local self\r\n  if type(source) == 'string' then\r\n    self = {source = source}\r\n  else\r\n    self = assert(source)\r\n    -- Grab source from path...\r\n    local file = assert(io.open(self.path, 'r'))\r\n    self.source = file:read('*a')\r\n    file:close()\r\n  end\r\n  setmetatable(self, lib)\r\n  private.makeFunction(self, self.source)\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "new",
    "type": "global function"
  }, {
    "id": 252,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 253,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 254,
    "text": "Autoload",
    "type": "global function"
  }, {
    "id": 255,
    "text": "exist",
    "type": "global function"
  }, {
    "id": 256,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 257,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 258,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 259,
    "text": "format",
    "type": "global function"
  }, {
    "id": 260,
    "text": "len",
    "type": "global function"
  }, {
    "id": 261,
    "text": "match",
    "type": "global function"
  }, {
    "id": 262,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 263,
    "text": "find",
    "type": "global function"
  }, {
    "id": 264,
    "text": "func",
    "type": "global function"
  }, {
    "id": 265,
    "text": "orig_req",
    "type": "global function"
  }, {
    "id": 266,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 267,
    "text": "print",
    "type": "global function"
  }, {
    "id": 268,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 269,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 270,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 271,
    "text": "error",
    "type": "global function"
  }, {
    "id": 272,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 273,
    "text": "open",
    "type": "global function"
  }, {
    "id": 274,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 275,
    "text": "loaded[lib_name][new]",
    "type": "global function"
  }, {
    "id": 276,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 277,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 278,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 279,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 280,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 281,
    "text": "type",
    "type": "global function"
  }, {
    "id": 282,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 283,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 284,
    "text": "len",
    "type": "global function"
  }, {
    "id": 285,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 286,
    "text": "",
    "type": "local variable"
  }, {
    "id": 287,
    "text": "",
    "type": "local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "variable container"
  }, {
    "id": 289,
    "text": "",
    "type": "require container"
  }, {
    "id": 290,
    "text": "",
    "type": "local variable"
  }, {
    "id": 291,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 292,
    "text": "",
    "type": "local variable"
  }, {
    "id": 293,
    "text": "",
    "type": "n/a"
  }, {
    "id": 294,
    "text": "",
    "type": "local variable"
  }, {
    "id": 295,
    "text": "",
    "type": "n/a"
  }, {
    "id": 296,
    "text": "",
    "type": "local variable"
  }, {
    "id": 297,
    "text": "",
    "type": "n/a"
  }, {
    "id": 298,
    "text": "",
    "type": "local variable"
  }, {
    "id": 299,
    "text": "",
    "type": "n/a"
  }, {
    "id": 300,
    "text": "",
    "type": "local variable"
  }, {
    "id": 301,
    "text": "",
    "type": "n/a"
  }, {
    "id": 302,
    "text": "",
    "type": "local variable"
  }, {
    "id": 303,
    "text": "",
    "type": "n/a"
  }, {
    "id": 304,
    "text": "",
    "type": "local variable"
  }, {
    "id": 305,
    "text": "",
    "type": "n/a"
  }, {
    "id": 306,
    "text": "",
    "type": "local variable"
  }, {
    "id": 307,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 308,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 309,
    "text": "",
    "type": "function"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "global variable"
  }, {
    "id": 315,
    "text": "",
    "type": "global variable"
  }, {
    "id": 316,
    "text": "",
    "type": "n/a"
  }, {
    "id": 317,
    "text": "",
    "type": "global variable"
  }, {
    "id": 318,
    "text": "",
    "type": "n/a"
  }, {
    "id": 319,
    "text": "",
    "type": "global variable"
  }, {
    "id": 320,
    "text": "",
    "type": "n/a"
  }, {
    "id": 321,
    "text": "",
    "type": "global variable"
  }, {
    "id": 322,
    "text": "",
    "type": "n/a"
  }, {
    "id": 323,
    "text": "",
    "type": "global variable"
  }, {
    "id": 324,
    "text": "",
    "type": "n/a"
  }, {
    "id": 325,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 326,
    "text": "",
    "type": "interface container"
  }, {
    "id": 327,
    "text": "",
    "type": "interface"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  } ]
}