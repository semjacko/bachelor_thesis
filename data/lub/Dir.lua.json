{
  "_filename": "Dir.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lub/lub/Dir.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 20
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 19
  }, {
    "from": 36,
    "label": "has",
    "to": 20
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 30
  }, {
    "from": 38,
    "label": "has",
    "to": 20
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 7,
    "label": "calls",
    "to": 44
  }, {
    "from": 22,
    "label": "calls",
    "to": 44
  }, {
    "from": 32,
    "label": "calls",
    "to": 44
  }, {
    "from": 17,
    "label": "calls",
    "to": 45
  }, {
    "from": 28,
    "label": "calls",
    "to": 45
  }, {
    "from": 7,
    "label": "calls",
    "to": 47
  }, {
    "from": 22,
    "label": "calls",
    "to": 47
  }, {
    "from": 3,
    "label": "calls",
    "to": 48
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 49
  }, {
    "from": 7,
    "label": "calls",
    "to": 49
  }, {
    "from": 22,
    "label": "calls",
    "to": 49
  }, {
    "from": 32,
    "label": "calls",
    "to": 49
  }, {
    "from": 17,
    "label": "calls",
    "to": 46
  }, {
    "from": 28,
    "label": "calls",
    "to": 46
  }, {
    "from": 40,
    "label": "calls",
    "to": 50
  }, {
    "from": 40,
    "label": "calls",
    "to": 50
  }, {
    "from": 7,
    "label": "calls",
    "to": 7
  }, {
    "from": 40,
    "label": "calls",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 40,
    "label": "declares",
    "to": 3
  }, {
    "from": 40,
    "label": "declares",
    "to": 7
  }, {
    "from": 40,
    "label": "declares",
    "to": 17
  }, {
    "from": 40,
    "label": "declares",
    "to": 22
  }, {
    "from": 40,
    "label": "declares",
    "to": 28
  }, {
    "from": 40,
    "label": "declares",
    "to": 32
  }, {
    "from": 40,
    "label": "declares",
    "to": 36
  }, {
    "from": 40,
    "label": "declares",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 53,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "requires",
    "to": 2
  }, {
    "from": 53,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "requires",
    "to": 41
  }, {
    "from": 1,
    "label": "provides",
    "to": 58
  }, {
    "from": 51,
    "label": "represents",
    "to": 59
  }, {
    "from": 58,
    "label": "provides",
    "to": 59
  }, {
    "from": 60,
    "label": "contains",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Dir",
    "type": "module"
  }, {
    "id": 2,
    "text": "lub",
    "type": "module"
  }, {
    "id": 3,
    "text": "function lib.new(path)\r\n  local self = {path = path}\r\n  return setmetatable(self, lib)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local self = {path = path}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function glob_list(base, pattern)\r\n  for file in lfs.dir(base) do\r\n    if not string.match(file, lib.ignore_pattern) then\r\n      local fullpath = base..lib.sep..file\r\n      local attrs = lfs.attributes(fullpath)\r\n      if attrs and attrs.mode == 'file' then\r\n        if not pattern or string.match(fullpath, pattern) then\r\n          coroutine.yield(fullpath)\r\n        end\r\n      elseif attrs and attrs.mode == 'directory' then\r\n        glob_list(fullpath, pattern)\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "for file in lfs.dir(base) do\r\n    if not string.match(file, lib.ignore_pattern) then\r\n      local fullpath = base..lib.sep..file\r\n      local attrs = lfs.attributes(fullpath)\r\n      if attrs and attrs.mode == 'file' then\r\n        if not pattern or string.match(fullpath, pattern) then\r\n          coroutine.yield(fullpath)\r\n        end\r\n      elseif attrs and attrs.mode == 'directory' then\r\n        glob_list(fullpath, pattern)\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "if not string.match(file, lib.ignore_pattern) then\r\n      local fullpath = base..lib.sep..file\r\n      local attrs = lfs.attributes(fullpath)\r\n      if attrs and attrs.mode == 'file' then\r\n        if not pattern or string.match(fullpath, pattern) then\r\n          coroutine.yield(fullpath)\r\n        end\r\n      elseif attrs and attrs.mode == 'directory' then\r\n        glob_list(fullpath, pattern)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local fullpath = base..lib.sep..file",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local attrs = lfs.attributes(fullpath)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if attrs and attrs.mode == 'file' then\r\n        if not pattern or string.match(fullpath, pattern) then\r\n          coroutine.yield(fullpath)\r\n        end\r\n      elseif attrs and attrs.mode == 'directory' then\r\n        glob_list(fullpath, pattern)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "if not pattern or string.match(fullpath, pattern) then\r\n          coroutine.yield(fullpath)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "coroutine.yield(fullpath)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "glob_list(fullpath, pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function lib:glob(pattern)\r\n  local co = coroutine.create(glob_list)\r\n  --glob_list(self.path, pattern, list)\r\n  return function()\r\n    local ok, value = coroutine.resume(co, self.path, pattern)\r\n    if ok then\r\n      return value\r\n    else\r\n      return nil\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local co = coroutine.create(glob_list)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local ok, value = coroutine.resume(co, self.path, pattern)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if ok then\r\n      return value\r\n    else\r\n      return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function list_files(self)\r\n  local base = self.path\r\n  for file in lfs.dir(base) do\r\n    if not string.match(file, self.ignore_pattern) then\r\n      coroutine.yield(base..self.sep..file)\r\n    end\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local base = self.path",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for file in lfs.dir(base) do\r\n    if not string.match(file, self.ignore_pattern) then\r\n      coroutine.yield(base..self.sep..file)\r\n    end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "if not string.match(file, self.ignore_pattern) then\r\n      coroutine.yield(base..self.sep..file)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "coroutine.yield(base..self.sep..file)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function lib:list()\r\n  local co = coroutine.create(list_files)\r\n  return function()\r\n    local ok, value = coroutine.resume(co, self)\r\n    if ok then\r\n      return value\r\n    else\r\n      return nil\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local co = coroutine.create(list_files)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local ok, value = coroutine.resume(co, self)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function lib:contains(pattern)\r\n  for file in lfs.dir(self.path) do\r\n    if string.match(file, pattern) then\r\n      return true\r\n    end\r\n\tend\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "for file in lfs.dir(self.path) do\r\n    if string.match(file, pattern) then\r\n      return true\r\n    end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "if string.match(file, pattern) then\r\n      return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function()\r\n    local ok, value = coroutine.resume(co, self.path, pattern)\r\n    if ok then\r\n      return value\r\n    else\r\n      return nil\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n    local ok, value = coroutine.resume(co, self)\r\n    if ok then\r\n      return value\r\n    else\r\n      return nil\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "",
    "type": "function container"
  }, {
    "id": 41,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 42,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 43,
    "text": "class",
    "type": "global function"
  }, {
    "id": 44,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 45,
    "text": "create",
    "type": "global function"
  }, {
    "id": 46,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 47,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 48,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 49,
    "text": "match",
    "type": "global function"
  }, {
    "id": 50,
    "text": "require",
    "type": "global function"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "variable container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "interface container"
  }, {
    "id": 59,
    "text": "",
    "type": "interface"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  } ]
}