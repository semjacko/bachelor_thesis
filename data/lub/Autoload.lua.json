{
  "_filename": "Autoload.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lub/lub/Autoload.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 24
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 7
  }, {
    "from": 33,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "calls",
    "to": 38
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 9,
    "label": "calls",
    "to": 40
  }, {
    "from": 9,
    "label": "calls",
    "to": 41
  }, {
    "from": 23,
    "label": "calls",
    "to": 41
  }, {
    "from": 28,
    "label": "calls",
    "to": 41
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 15,
    "label": "calls",
    "to": 44
  }, {
    "from": 23,
    "label": "calls",
    "to": 39
  }, {
    "from": 28,
    "label": "calls",
    "to": 39
  }, {
    "from": 28,
    "label": "calls",
    "to": 42
  }, {
    "from": 35,
    "label": "calls",
    "to": 45
  }, {
    "from": 9,
    "label": "calls",
    "to": 45
  }, {
    "from": 23,
    "label": "calls",
    "to": 45
  }, {
    "from": 28,
    "label": "calls",
    "to": 45
  }, {
    "from": 28,
    "label": "calls",
    "to": 43
  }, {
    "from": 35,
    "label": "calls",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 35
  }, {
    "from": 35,
    "label": "declares",
    "to": 3
  }, {
    "from": 35,
    "label": "declares",
    "to": 9
  }, {
    "from": 35,
    "label": "declares",
    "to": 15
  }, {
    "from": 35,
    "label": "declares",
    "to": 18
  }, {
    "from": 35,
    "label": "declares",
    "to": 23
  }, {
    "from": 35,
    "label": "declares",
    "to": 28
  }, {
    "from": 35,
    "label": "declares",
    "to": 32
  }, {
    "from": 35,
    "label": "declares",
    "to": 33
  }, {
    "from": 35,
    "label": "declares",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 47,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 47,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 47,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 47,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 48,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 58
  }, {
    "from": 49,
    "label": "represents",
    "to": 59
  }, {
    "from": 58,
    "label": "provides",
    "to": 59
  }, {
    "from": 49,
    "label": "represents",
    "to": 60
  }, {
    "from": 49,
    "label": "represents",
    "to": 63
  }, {
    "from": 49,
    "label": "represents",
    "to": 65
  }, {
    "from": 62,
    "label": "contains",
    "to": 3
  }, {
    "from": 62,
    "label": "contains",
    "to": 9
  }, {
    "from": 62,
    "label": "contains",
    "to": 15
  }, {
    "from": 62,
    "label": "contains",
    "to": 18
  }, {
    "from": 53,
    "label": "contains",
    "to": 23
  }, {
    "from": 61,
    "label": "contains",
    "to": 23
  }, {
    "from": 64,
    "label": "contains",
    "to": 23
  }, {
    "from": 53,
    "label": "contains",
    "to": 28
  }, {
    "from": 61,
    "label": "contains",
    "to": 28
  }, {
    "from": 64,
    "label": "contains",
    "to": 28
  }, {
    "from": 53,
    "label": "contains",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Autoload",
    "type": "module"
  }, {
    "id": 2,
    "text": "lub",
    "type": "module"
  }, {
    "id": 3,
    "text": "function lib.new(prefix, tbl)\r\n  assert(prefix, 'Missing prefix in Autoload call.')\r\n  local self = tbl or {}\r\n  self.type = prefix\r\n  return setmetatable(self, lib)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert(prefix, 'Missing prefix in Autoload call.')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local self = tbl or {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "self.type = prefix",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function lib.__index(table, name)\r\n  -- Trying to load new lib like foo.Bar\r\n  local ok, new_lib_or_error = pcall(function() return require(table.type..'.'..name); end)\r\n  if ok then\r\n    -- insert new class with name in table\r\n    table[name] = new_lib_or_error\r\n    return new_lib_or_error\r\n  else\r\n    print(new_lib_or_error)\r\n    return nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local ok, new_lib_or_error = pcall(function() return require(table.type..'.'..name); end)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if ok then\r\n    -- insert new class with name in table\r\n    table[name] = new_lib_or_error\r\n    return new_lib_or_error\r\n  else\r\n    print(new_lib_or_error)\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "table[name] = new_lib_or_error",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "print(new_lib_or_error)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function lib.global()\r\n  setmetatable(_G, lib2)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "setmetatable(_G, lib2)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function lib.strict(x)\r\n  if x == false then\r\n    -- not strict\r\n    lib2.__index = private.__index\r\n  else\r\n    -- disable autoload and raise on nil\r\n    lib2.__index = private.__index_strict\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if x == false then\r\n    -- not strict\r\n    lib2.__index = private.__index\r\n  else\r\n    -- disable autoload and raise on nil\r\n    lib2.__index = private.__index_strict\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "lib2.__index = private.__index",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "lib2.__index = private.__index_strict",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function private.__index(table, name)\r\n  if name == '_PROMPT' or name == '_PROMPT2' then\r\n    -- special case for lua interactive\r\n    return nil\r\n  end\r\n  local ok, new_lib_or_error = pcall(function() return require(name); end)\r\n  if ok then\r\n    return new_lib_or_error or rawget(table, name)\r\n  else\r\n    -- nil value\r\n    return nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if name == '_PROMPT' or name == '_PROMPT2' then\r\n    -- special case for lua interactive\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local ok, new_lib_or_error = pcall(function() return require(name); end)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if ok then\r\n    return new_lib_or_error or rawget(table, name)\r\n  else\r\n    -- nil value\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function private.__index_strict(table, name)\r\n  if name == '_PROMPT' or name == '_PROMPT2' then\r\n    -- special case for lua interactive\r\n    return nil\r\n  end\r\n  local ok, new_lib_or_error = pcall(function() return require(name); end)\r\n  if ok then\r\n    return new_lib_or_error or rawget(table, name)\r\n  else\r\n    -- nil value\r\n    error(string.format(\"Trying to access undefined global variable '%s'.\\n%s\", name, debug.traceback()))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if ok then\r\n    return new_lib_or_error or rawget(table, name)\r\n  else\r\n    -- nil value\r\n    error(string.format(\"Trying to access undefined global variable '%s'.\\n%s\", name, debug.traceback()))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "error(string.format(\"Trying to access undefined global variable '%s'.\\n%s\", name, debug.traceback()))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function() return require(table.type..'.'..name); end",
    "type": "function"
  }, {
    "id": 33,
    "text": "function() return require(name); end",
    "type": "function"
  }, {
    "id": 34,
    "text": "function() return require(name); end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "function container"
  }, {
    "id": 36,
    "text": "function private.makePathPart(path, fullpath)\r\n  local file_type = lib.fileType(path)\r\n  if file_type == 'file' then\r\n    error(string.format(\"Could not build path '%s' ('%s' is a file).\", fullpath, path))\r\n  elseif file_type == 'directory' then\r\n    return -- done\r\n  else\r\n    local base = lib.dir(path)\r\n    private.makePathPart(base, fullpath)\r\n    -- base should exist or an error has been raised\r\n    lfs.mkdir(path)\r\n    -- done\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "class",
    "type": "global function"
  }, {
    "id": 38,
    "text": "format",
    "type": "global function"
  }, {
    "id": 39,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 40,
    "text": "print",
    "type": "global function"
  }, {
    "id": 41,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 42,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 43,
    "text": "error",
    "type": "global function"
  }, {
    "id": 44,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 45,
    "text": "require",
    "type": "global function"
  }, {
    "id": 46,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "interface container"
  }, {
    "id": 59,
    "text": "",
    "type": "interface"
  }, {
    "id": 60,
    "text": "",
    "type": "interface"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "interface"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "interface"
  } ]
}