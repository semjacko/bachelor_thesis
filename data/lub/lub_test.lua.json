{
  "_filename": "lub_test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lub/test/lub_test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 24
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 24
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 24
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 40
  }, {
    "from": 44,
    "label": "has",
    "to": 36
  }, {
    "from": 43,
    "label": "has",
    "to": 41
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 24
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 40
  }, {
    "from": 47,
    "label": "has",
    "to": 36
  }, {
    "from": 46,
    "label": "has",
    "to": 41
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 24
  }, {
    "from": 49,
    "label": "has",
    "to": 32
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 35
  }, {
    "from": 51,
    "label": "has",
    "to": 36
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 62,
    "label": "has",
    "to": 55
  }, {
    "from": 62,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 63
  }, {
    "from": 70,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 70,
    "label": "has",
    "to": 64
  }, {
    "from": 70,
    "label": "has",
    "to": 65
  }, {
    "from": 70,
    "label": "has",
    "to": 66
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 83
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 74,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 75
  }, {
    "from": 86,
    "label": "has",
    "to": 76
  }, {
    "from": 86,
    "label": "has",
    "to": 77
  }, {
    "from": 86,
    "label": "has",
    "to": 78
  }, {
    "from": 86,
    "label": "has",
    "to": 79
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 81
  }, {
    "from": 86,
    "label": "has",
    "to": 78
  }, {
    "from": 86,
    "label": "has",
    "to": 83
  }, {
    "from": 86,
    "label": "has",
    "to": 84
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 89,
    "label": "has",
    "to": 95
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 102
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 121,
    "label": "has",
    "to": 102
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 139,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 144,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 144,
    "label": "has",
    "to": 152
  }, {
    "from": 144,
    "label": "has",
    "to": 153
  }, {
    "from": 144,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 148
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 145
  }, {
    "from": 157,
    "label": "has",
    "to": 146
  }, {
    "from": 157,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 157,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 153
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 148
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 146
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 148
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 162,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 148
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 145
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 36
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 171,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 151
  }, {
    "from": 171,
    "label": "has",
    "to": 178
  }, {
    "from": 171,
    "label": "has",
    "to": 179
  }, {
    "from": 171,
    "label": "has",
    "to": 180
  }, {
    "from": 171,
    "label": "has",
    "to": 181
  }, {
    "from": 171,
    "label": "has",
    "to": 182
  }, {
    "from": 171,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 148
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 36
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 175
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 190,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 25
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 194,
    "label": "has",
    "to": 198
  }, {
    "from": 194,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 200,
    "label": "has",
    "to": 203
  }, {
    "from": 200,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 35
  }, {
    "from": 207,
    "label": "has",
    "to": 36
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 40
  }, {
    "from": 211,
    "label": "has",
    "to": 36
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 40
  }, {
    "from": 213,
    "label": "has",
    "to": 36
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 40
  }, {
    "from": 215,
    "label": "has",
    "to": 36
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 35
  }, {
    "from": 217,
    "label": "has",
    "to": 36
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 35
  }, {
    "from": 51,
    "label": "has",
    "to": 36
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 57
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 57
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 57
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 150
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 151
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 150
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 151
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 177
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 151
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 192
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 86,
    "label": "calls",
    "to": 248
  }, {
    "from": 3,
    "label": "calls",
    "to": 271
  }, {
    "from": 7,
    "label": "calls",
    "to": 271
  }, {
    "from": 7,
    "label": "calls",
    "to": 271
  }, {
    "from": 53,
    "label": "calls",
    "to": 271
  }, {
    "from": 53,
    "label": "calls",
    "to": 271
  }, {
    "from": 53,
    "label": "calls",
    "to": 271
  }, {
    "from": 62,
    "label": "calls",
    "to": 271
  }, {
    "from": 62,
    "label": "calls",
    "to": 271
  }, {
    "from": 62,
    "label": "calls",
    "to": 271
  }, {
    "from": 70,
    "label": "calls",
    "to": 271
  }, {
    "from": 70,
    "label": "calls",
    "to": 271
  }, {
    "from": 70,
    "label": "calls",
    "to": 271
  }, {
    "from": 89,
    "label": "calls",
    "to": 271
  }, {
    "from": 97,
    "label": "calls",
    "to": 271
  }, {
    "from": 97,
    "label": "calls",
    "to": 271
  }, {
    "from": 97,
    "label": "calls",
    "to": 271
  }, {
    "from": 97,
    "label": "calls",
    "to": 271
  }, {
    "from": 104,
    "label": "calls",
    "to": 271
  }, {
    "from": 104,
    "label": "calls",
    "to": 271
  }, {
    "from": 104,
    "label": "calls",
    "to": 271
  }, {
    "from": 104,
    "label": "calls",
    "to": 271
  }, {
    "from": 110,
    "label": "calls",
    "to": 271
  }, {
    "from": 110,
    "label": "calls",
    "to": 271
  }, {
    "from": 110,
    "label": "calls",
    "to": 271
  }, {
    "from": 110,
    "label": "calls",
    "to": 271
  }, {
    "from": 116,
    "label": "calls",
    "to": 271
  }, {
    "from": 116,
    "label": "calls",
    "to": 271
  }, {
    "from": 116,
    "label": "calls",
    "to": 271
  }, {
    "from": 121,
    "label": "calls",
    "to": 271
  }, {
    "from": 121,
    "label": "calls",
    "to": 271
  }, {
    "from": 121,
    "label": "calls",
    "to": 271
  }, {
    "from": 121,
    "label": "calls",
    "to": 271
  }, {
    "from": 133,
    "label": "calls",
    "to": 271
  }, {
    "from": 133,
    "label": "calls",
    "to": 271
  }, {
    "from": 133,
    "label": "calls",
    "to": 271
  }, {
    "from": 133,
    "label": "calls",
    "to": 271
  }, {
    "from": 139,
    "label": "calls",
    "to": 271
  }, {
    "from": 139,
    "label": "calls",
    "to": 271
  }, {
    "from": 139,
    "label": "calls",
    "to": 271
  }, {
    "from": 162,
    "label": "calls",
    "to": 271
  }, {
    "from": 200,
    "label": "calls",
    "to": 271
  }, {
    "from": 200,
    "label": "calls",
    "to": 271
  }, {
    "from": 3,
    "label": "calls",
    "to": 265
  }, {
    "from": 53,
    "label": "calls",
    "to": 265
  }, {
    "from": 53,
    "label": "calls",
    "to": 265
  }, {
    "from": 53,
    "label": "calls",
    "to": 265
  }, {
    "from": 53,
    "label": "calls",
    "to": 265
  }, {
    "from": 53,
    "label": "calls",
    "to": 265
  }, {
    "from": 53,
    "label": "calls",
    "to": 265
  }, {
    "from": 62,
    "label": "calls",
    "to": 265
  }, {
    "from": 62,
    "label": "calls",
    "to": 265
  }, {
    "from": 62,
    "label": "calls",
    "to": 265
  }, {
    "from": 62,
    "label": "calls",
    "to": 265
  }, {
    "from": 62,
    "label": "calls",
    "to": 265
  }, {
    "from": 62,
    "label": "calls",
    "to": 265
  }, {
    "from": 62,
    "label": "calls",
    "to": 265
  }, {
    "from": 70,
    "label": "calls",
    "to": 265
  }, {
    "from": 70,
    "label": "calls",
    "to": 265
  }, {
    "from": 70,
    "label": "calls",
    "to": 265
  }, {
    "from": 70,
    "label": "calls",
    "to": 265
  }, {
    "from": 70,
    "label": "calls",
    "to": 265
  }, {
    "from": 70,
    "label": "calls",
    "to": 265
  }, {
    "from": 74,
    "label": "calls",
    "to": 265
  }, {
    "from": 74,
    "label": "calls",
    "to": 265
  }, {
    "from": 86,
    "label": "calls",
    "to": 265
  }, {
    "from": 86,
    "label": "calls",
    "to": 265
  }, {
    "from": 89,
    "label": "calls",
    "to": 265
  }, {
    "from": 127,
    "label": "calls",
    "to": 265
  }, {
    "from": 130,
    "label": "calls",
    "to": 265
  }, {
    "from": 133,
    "label": "calls",
    "to": 265
  }, {
    "from": 133,
    "label": "calls",
    "to": 265
  }, {
    "from": 133,
    "label": "calls",
    "to": 265
  }, {
    "from": 62,
    "label": "calls",
    "to": 257
  }, {
    "from": 70,
    "label": "calls",
    "to": 257
  }, {
    "from": 74,
    "label": "calls",
    "to": 257
  }, {
    "from": 74,
    "label": "calls",
    "to": 257
  }, {
    "from": 74,
    "label": "calls",
    "to": 257
  }, {
    "from": 74,
    "label": "calls",
    "to": 257
  }, {
    "from": 86,
    "label": "calls",
    "to": 257
  }, {
    "from": 86,
    "label": "calls",
    "to": 257
  }, {
    "from": 86,
    "label": "calls",
    "to": 257
  }, {
    "from": 86,
    "label": "calls",
    "to": 257
  }, {
    "from": 190,
    "label": "calls",
    "to": 246
  }, {
    "from": 144,
    "label": "calls",
    "to": 256
  }, {
    "from": 144,
    "label": "calls",
    "to": 256
  }, {
    "from": 3,
    "label": "calls",
    "to": 251
  }, {
    "from": 89,
    "label": "calls",
    "to": 251
  }, {
    "from": 171,
    "label": "calls",
    "to": 260
  }, {
    "from": 89,
    "label": "calls",
    "to": 272
  }, {
    "from": 53,
    "label": "calls",
    "to": 255
  }, {
    "from": 53,
    "label": "calls",
    "to": 255
  }, {
    "from": 62,
    "label": "calls",
    "to": 255
  }, {
    "from": 62,
    "label": "calls",
    "to": 255
  }, {
    "from": 70,
    "label": "calls",
    "to": 255
  }, {
    "from": 89,
    "label": "calls",
    "to": 255
  }, {
    "from": 89,
    "label": "calls",
    "to": 255
  }, {
    "from": 194,
    "label": "calls",
    "to": 270
  }, {
    "from": 194,
    "label": "calls",
    "to": 270
  }, {
    "from": 194,
    "label": "calls",
    "to": 270
  }, {
    "from": 116,
    "label": "calls",
    "to": 269
  }, {
    "from": 116,
    "label": "calls",
    "to": 269
  }, {
    "from": 116,
    "label": "calls",
    "to": 269
  }, {
    "from": 74,
    "label": "calls",
    "to": 254
  }, {
    "from": 86,
    "label": "calls",
    "to": 254
  }, {
    "from": 89,
    "label": "calls",
    "to": 254
  }, {
    "from": 162,
    "label": "calls",
    "to": 264
  }, {
    "from": 53,
    "label": "calls",
    "to": 273
  }, {
    "from": 62,
    "label": "calls",
    "to": 273
  }, {
    "from": 70,
    "label": "calls",
    "to": 273
  }, {
    "from": 144,
    "label": "calls",
    "to": 273
  }, {
    "from": 144,
    "label": "calls",
    "to": 273
  }, {
    "from": 171,
    "label": "calls",
    "to": 273
  }, {
    "from": 190,
    "label": "calls",
    "to": 273
  }, {
    "from": 200,
    "label": "calls",
    "to": 268
  }, {
    "from": 7,
    "label": "calls",
    "to": 263
  }, {
    "from": 171,
    "label": "calls",
    "to": 186
  }, {
    "from": 110,
    "label": "calls",
    "to": 250
  }, {
    "from": 110,
    "label": "calls",
    "to": 250
  }, {
    "from": 110,
    "label": "calls",
    "to": 250
  }, {
    "from": 110,
    "label": "calls",
    "to": 250
  }, {
    "from": 74,
    "label": "calls",
    "to": 266
  }, {
    "from": 162,
    "label": "calls",
    "to": 274
  }, {
    "from": 7,
    "label": "calls",
    "to": 261
  }, {
    "from": 7,
    "label": "calls",
    "to": 261
  }, {
    "from": 46,
    "label": "calls",
    "to": 242
  }, {
    "from": 49,
    "label": "calls",
    "to": 242
  }, {
    "from": 31,
    "label": "calls",
    "to": 280
  }, {
    "from": 49,
    "label": "calls",
    "to": 280
  }, {
    "from": 16,
    "label": "calls",
    "to": 276
  }, {
    "from": 62,
    "label": "calls",
    "to": 276
  }, {
    "from": 70,
    "label": "calls",
    "to": 276
  }, {
    "from": 74,
    "label": "calls",
    "to": 276
  }, {
    "from": 74,
    "label": "calls",
    "to": 276
  }, {
    "from": 86,
    "label": "calls",
    "to": 276
  }, {
    "from": 16,
    "label": "calls",
    "to": 277
  }, {
    "from": 62,
    "label": "calls",
    "to": 277
  }, {
    "from": 74,
    "label": "calls",
    "to": 277
  }, {
    "from": 74,
    "label": "calls",
    "to": 277
  }, {
    "from": 86,
    "label": "calls",
    "to": 277
  }, {
    "from": 86,
    "label": "calls",
    "to": 277
  }, {
    "from": 86,
    "label": "calls",
    "to": 277
  }, {
    "from": 139,
    "label": "calls",
    "to": 243
  }, {
    "from": 139,
    "label": "calls",
    "to": 243
  }, {
    "from": 139,
    "label": "calls",
    "to": 243
  }, {
    "from": 16,
    "label": "calls",
    "to": 244
  }, {
    "from": 16,
    "label": "calls",
    "to": 244
  }, {
    "from": 23,
    "label": "calls",
    "to": 278
  }, {
    "from": 31,
    "label": "calls",
    "to": 278
  }, {
    "from": 49,
    "label": "calls",
    "to": 278
  }, {
    "from": 53,
    "label": "calls",
    "to": 245
  }, {
    "from": 62,
    "label": "calls",
    "to": 245
  }, {
    "from": 70,
    "label": "calls",
    "to": 245
  }, {
    "from": 127,
    "label": "calls",
    "to": 279
  }, {
    "from": 130,
    "label": "calls",
    "to": 279
  }, {
    "from": 144,
    "label": "calls",
    "to": 279
  }, {
    "from": 144,
    "label": "calls",
    "to": 279
  }, {
    "from": 144,
    "label": "calls",
    "to": 279
  }, {
    "from": 144,
    "label": "calls",
    "to": 279
  }, {
    "from": 171,
    "label": "calls",
    "to": 279
  }, {
    "from": 171,
    "label": "calls",
    "to": 279
  }, {
    "from": 11,
    "label": "calls",
    "to": 267
  }, {
    "from": 53,
    "label": "calls",
    "to": 249
  }, {
    "from": 53,
    "label": "calls",
    "to": 249
  }, {
    "from": 53,
    "label": "calls",
    "to": 249
  }, {
    "from": 62,
    "label": "calls",
    "to": 249
  }, {
    "from": 62,
    "label": "calls",
    "to": 249
  }, {
    "from": 62,
    "label": "calls",
    "to": 249
  }, {
    "from": 70,
    "label": "calls",
    "to": 249
  }, {
    "from": 70,
    "label": "calls",
    "to": 249
  }, {
    "from": 70,
    "label": "calls",
    "to": 249
  }, {
    "from": 133,
    "label": "calls",
    "to": 249
  }, {
    "from": 133,
    "label": "calls",
    "to": 249
  }, {
    "from": 133,
    "label": "calls",
    "to": 249
  }, {
    "from": 133,
    "label": "calls",
    "to": 249
  }, {
    "from": 43,
    "label": "calls",
    "to": 262
  }, {
    "from": 241,
    "label": "calls",
    "to": 253
  }, {
    "from": 23,
    "label": "calls",
    "to": 259
  }, {
    "from": 31,
    "label": "calls",
    "to": 259
  }, {
    "from": 38,
    "label": "calls",
    "to": 259
  }, {
    "from": 97,
    "label": "calls",
    "to": 247
  }, {
    "from": 104,
    "label": "calls",
    "to": 247
  }, {
    "from": 121,
    "label": "calls",
    "to": 247
  }, {
    "from": 241,
    "label": "calls",
    "to": 281
  }, {
    "from": 241,
    "label": "calls",
    "to": 281
  }, {
    "from": 74,
    "label": "calls",
    "to": 258
  }, {
    "from": 74,
    "label": "calls",
    "to": 258
  }, {
    "from": 86,
    "label": "calls",
    "to": 258
  }, {
    "from": 86,
    "label": "calls",
    "to": 258
  }, {
    "from": 11,
    "label": "calls",
    "to": 275
  }, {
    "from": 16,
    "label": "calls",
    "to": 275
  }, {
    "from": 23,
    "label": "calls",
    "to": 275
  }, {
    "from": 38,
    "label": "calls",
    "to": 275
  }, {
    "from": 43,
    "label": "calls",
    "to": 275
  }, {
    "from": 46,
    "label": "calls",
    "to": 275
  }, {
    "from": 162,
    "label": "calls",
    "to": 275
  }, {
    "from": 171,
    "label": "calls",
    "to": 275
  }, {
    "from": 194,
    "label": "calls",
    "to": 275
  }, {
    "from": 2,
    "label": "contains",
    "to": 241
  }, {
    "from": 241,
    "label": "declares",
    "to": 3
  }, {
    "from": 241,
    "label": "declares",
    "to": 7
  }, {
    "from": 241,
    "label": "declares",
    "to": 11
  }, {
    "from": 241,
    "label": "declares",
    "to": 16
  }, {
    "from": 241,
    "label": "declares",
    "to": 23
  }, {
    "from": 241,
    "label": "declares",
    "to": 31
  }, {
    "from": 241,
    "label": "declares",
    "to": 38
  }, {
    "from": 241,
    "label": "declares",
    "to": 43
  }, {
    "from": 241,
    "label": "declares",
    "to": 46
  }, {
    "from": 241,
    "label": "declares",
    "to": 49
  }, {
    "from": 241,
    "label": "declares",
    "to": 53
  }, {
    "from": 241,
    "label": "declares",
    "to": 62
  }, {
    "from": 241,
    "label": "declares",
    "to": 70
  }, {
    "from": 241,
    "label": "declares",
    "to": 74
  }, {
    "from": 241,
    "label": "declares",
    "to": 86
  }, {
    "from": 241,
    "label": "declares",
    "to": 89
  }, {
    "from": 241,
    "label": "declares",
    "to": 97
  }, {
    "from": 241,
    "label": "declares",
    "to": 104
  }, {
    "from": 241,
    "label": "declares",
    "to": 110
  }, {
    "from": 241,
    "label": "declares",
    "to": 116
  }, {
    "from": 241,
    "label": "declares",
    "to": 121
  }, {
    "from": 241,
    "label": "declares",
    "to": 127
  }, {
    "from": 241,
    "label": "declares",
    "to": 130
  }, {
    "from": 241,
    "label": "declares",
    "to": 133
  }, {
    "from": 241,
    "label": "declares",
    "to": 139
  }, {
    "from": 241,
    "label": "declares",
    "to": 144
  }, {
    "from": 241,
    "label": "declares",
    "to": 155
  }, {
    "from": 241,
    "label": "declares",
    "to": 157
  }, {
    "from": 241,
    "label": "declares",
    "to": 160
  }, {
    "from": 241,
    "label": "declares",
    "to": 162
  }, {
    "from": 241,
    "label": "declares",
    "to": 169
  }, {
    "from": 241,
    "label": "declares",
    "to": 171
  }, {
    "from": 241,
    "label": "declares",
    "to": 184
  }, {
    "from": 241,
    "label": "declares",
    "to": 186
  }, {
    "from": 241,
    "label": "declares",
    "to": 188
  }, {
    "from": 241,
    "label": "declares",
    "to": 190
  }, {
    "from": 241,
    "label": "declares",
    "to": 194
  }, {
    "from": 241,
    "label": "declares",
    "to": 200
  }, {
    "from": 241,
    "label": "declares",
    "to": 205
  }, {
    "from": 241,
    "label": "declares",
    "to": 207
  }, {
    "from": 241,
    "label": "declares",
    "to": 209
  }, {
    "from": 241,
    "label": "declares",
    "to": 211
  }, {
    "from": 241,
    "label": "declares",
    "to": 213
  }, {
    "from": 241,
    "label": "declares",
    "to": 215
  }, {
    "from": 241,
    "label": "declares",
    "to": 217
  }, {
    "from": 241,
    "label": "declares",
    "to": 219
  }, {
    "from": 241,
    "label": "declares",
    "to": 221
  }, {
    "from": 241,
    "label": "declares",
    "to": 223
  }, {
    "from": 241,
    "label": "declares",
    "to": 225
  }, {
    "from": 241,
    "label": "declares",
    "to": 227
  }, {
    "from": 241,
    "label": "declares",
    "to": 229
  }, {
    "from": 241,
    "label": "declares",
    "to": 231
  }, {
    "from": 241,
    "label": "declares",
    "to": 233
  }, {
    "from": 241,
    "label": "declares",
    "to": 235
  }, {
    "from": 241,
    "label": "declares",
    "to": 237
  }, {
    "from": 241,
    "label": "declares",
    "to": 239
  }, {
    "from": 2,
    "label": "contains",
    "to": 282
  }, {
    "from": 2,
    "label": "contains",
    "to": 283
  }, {
    "from": 282,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 282,
    "label": "initializes",
    "to": 286
  }, {
    "from": 283,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "requires",
    "to": 1
  }, {
    "from": 283,
    "label": "initializes",
    "to": 288
  }, {
    "from": 288,
    "label": "requires",
    "to": 252
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 205
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 207
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 217
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 207
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 217
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 219
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 221
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 223
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 225
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 227
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 229
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 231
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 237
  }, {
    "from": 176,
    "label": "hasArgument",
    "to": 229
  }, {
    "from": 176,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 176,
    "label": "hasArgument",
    "to": 235
  }, {
    "from": 176,
    "label": "hasArgument",
    "to": 237
  }, {
    "from": 191,
    "label": "hasArgument",
    "to": 239
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lub",
    "type": "module"
  }, {
    "id": 2,
    "text": "lub_test",
    "type": "module"
  }, {
    "id": 3,
    "text": "function should.readAll()\r\n  local p = lub.path '|fixtures/io.txt'\r\n  assertEqual('Hello Lubyk!\\n', lub.content(p))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local p = lub.path '|fixtures/io.txt'",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assertEqual('Hello Lubyk!\\n', lub.content(p))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function should.absolutizePath()\r\n  assertEqual(lfs.currentdir() .. '/foo/bar', lub.absolutizePath('foo/bar'))\r\n  assertEqual('/foo/bar', lub.absolutizePath('/foo/bar'))\r\n  -- assertEqual('/One/two/foo/bar', lub.absolutizePath('foo/bar', '/One/two'))\r\n  -- assertEqual('/foo/bar', lub.absolutizePath('/foo/bar', '/One/two'))\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "assertEqual(lfs.currentdir() .. '/foo/bar', lub.absolutizePath('foo/bar'))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assertEqual('/foo/bar', lub.absolutizePath('/foo/bar'))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function should.merge()\r\n  local base = {a = { b = {x=1}}, c = {d = 4}}\r\n  lub.merge(base, {\r\n    a = 'hello',\r\n    d = 'boom',\r\n  })\r\n  assertValueEqual({a = 'hello', c = {d = 4}, d = 'boom'}, base)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local base = {a = { b = {x=1}}, c = {d = 4}}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "lub.merge(base, {\r\n    a = 'hello',\r\n    d = 'boom',\r\n  })",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assertValueEqual({a = 'hello', c = {d = 4}, d = 'boom'}, base)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function should.deepMerge()\r\n  local base = {a = { b = {x=1}, c = {d = 4}}}\r\n  local a2   = { b = {x=3}, c = {e = 5}, g = 2}\r\n  assertFalse(lub.deepMerge(base, 'a', {c = {d = 4}}))\r\n  assertTrue(lub.deepMerge(base, 'a', a2))\r\n  assertValueEqual({a = { b = {x=3}, c = {d = 4, e = 5}, g = 2}}, base)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local base = {a = { b = {x=1}, c = {d = 4}}}",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local a2   = { b = {x=3}, c = {e = 5}, g = 2}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "assertFalse(lub.deepMerge(base, 'a', {c = {d = 4}}))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assertTrue(lub.deepMerge(base, 'a', a2))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assertValueEqual({a = { b = {x=3}, c = {d = 4, e = 5}, g = 2}}, base)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function should.search()\r\n  local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }\r\n  local list = {}\r\n  lub.search(data, function(node)\r\n    if node.xml == 'b' then\r\n      table.insert(list, node)\r\n    end\r\n  end)\r\n  assertValueEqual({\r\n    -- Breadth-first search\r\n    {xml = 'b', 'Top'},\r\n    {xml = 'b', 'Bob'},\r\n  }, list)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "lub.search(data, function(node)\r\n    if node.xml == 'b' then\r\n      table.insert(list, node)\r\n    end\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "if node.xml == 'b' then\r\n      table.insert(list, node)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "table.insert(list, node)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assertValueEqual({\r\n    -- Breadth-first search\r\n    {xml = 'b', 'Top'},\r\n    {xml = 'b', 'Bob'},\r\n  }, list)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function should.raiseOnLoopInSearch()\r\n  local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }\r\n  table.insert(data[3], data)\r\n  assertError('Could not finish search: maximal depth of 3000 reached.', function()\r\n    r = lub.search(data, function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "table.insert(data[3], data)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assertError('Could not finish search: maximal depth of 3000 reached.', function()\r\n    r = lub.search(data, function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "r = lub.search(data, function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if node.xml == 'x' then\r\n        return node\r\n      end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function should.searchWithSearch()\r\n  local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }\r\n  r = lub.search(data, function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end)\r\n  assertValueEqual({xml = 'b', 'Top'}, r)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "r = lub.search(data, function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if node.xml == 'b' then\r\n      return node\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "assertValueEqual({xml = 'b', 'Top'}, r)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function should.searchWithIDDFS()\r\n  local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }\r\n  r = lub.IDDFS(data, function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end)\r\n  assertValueEqual({xml = 'b', 'Top'}, r)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "r = lub.IDDFS(data, function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function should.searchWithBFS()\r\n  local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }\r\n  r = lub.BFS(data, function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end)\r\n  assertValueEqual({xml = 'b', 'Top'}, r)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "r = lub.BFS(data, function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function should.raiseOnLoopInBFS()\r\n  local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }\r\n  table.insert(data[3], data)\r\n  assertError('Could not finish search: maximal depth of 3000 reached.', function()\r\n    r = lub.BFS(data, function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "assertError('Could not finish search: maximal depth of 3000 reached.', function()\r\n    r = lub.BFS(data, function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "r = lub.BFS(data, function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function should.makePath()\r\n  local path = lub.path('|fixtures/tmp/foo/bar/baz')\r\n  lub.rmTree(lub.path('|fixtures/tmp'), true)\r\n  assertPass(function()\r\n    lub.makePath(path)\r\n  end)\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/foo')))\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/foo/bar')))\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/foo/bar/baz')))\r\n  lub.rmTree(lub.path('|fixtures/tmp'), true)\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local path = lub.path('|fixtures/tmp/foo/bar/baz')",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "lub.rmTree(lub.path('|fixtures/tmp'), true)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assertPass(function()\r\n    lub.makePath(path)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "lub.makePath(path)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/foo')))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/foo/bar')))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/foo/bar/baz')))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function should.notRmTreeRecursive()\r\n  local path = lub.path('|fixtures/tmp/fo\"o/bar/baz')\r\n  assertPass(function()\r\n    lub.makePath(path)\r\n  end)\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o')))\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o/bar')))\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o/bar/baz')))\r\n  assertFalse(lub.rmTree(lub.path('|fixtures/tmp/fo\"o')))\r\n  assertTrue(lub.exist(lub.path('|fixtures/tmp/fo\"o')))\r\n  lub.rmTree(lub.path('|fixtures/tmp'), true)\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local path = lub.path('|fixtures/tmp/fo\"o/bar/baz')",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o')))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o/bar')))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o/bar/baz')))",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assertFalse(lub.rmTree(lub.path('|fixtures/tmp/fo\"o')))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assertTrue(lub.exist(lub.path('|fixtures/tmp/fo\"o')))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function should.rmTree()\r\n  local path = lub.path('|fixtures/tmp/fo\"o/bar/baz')\r\n  assertPass(function()\r\n    lub.makePath(path)\r\n  end)\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o')))\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o/bar')))\r\n  assertEqual('directory', lub.fileType(lub.path('|fixtures/tmp/fo\"o/bar/baz')))\r\n  lub.rmTree(lub.path('|fixtures/tmp/fo\"o'), true)\r\n  assertFalse(lub.exist(lub.path('|fixtures/tmp/fo\"o')))\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "lub.rmTree(lub.path('|fixtures/tmp/fo\"o'), true)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assertFalse(lub.exist(lub.path('|fixtures/tmp/fo\"o')))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function should.move()\r\n  local path  = lub.path('|fixtures/tmp.txt')\r\n  lub.writeall(path, 'Hello')\r\n  local path2 = lub.path('|fixtures/tmp2.txt')\r\n  assertTrue(lub.exist(path))\r\n  assertFalse(lub.exist(path2))\r\n\r\n  lub.move(path, path2)\r\n  assertTrue(lub.exist(path2))\r\n  assertFalse(lub.exist(path))\r\n\r\n  -- cleanup\r\n  lub.rmFile(path)\r\n  lub.rmFile(path2)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local path  = lub.path('|fixtures/tmp.txt')",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "lub.writeall(path, 'Hello')",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "local path2 = lub.path('|fixtures/tmp2.txt')",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "assertTrue(lub.exist(path))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assertFalse(lub.exist(path2))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "lub.move(path, path2)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assertTrue(lub.exist(path2))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assertFalse(lub.exist(path))",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "lub.rmFile(path)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "lub.rmFile(path2)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function should.copy()\r\n  local path  = lub.path('|fixtures/tmp.txt')\r\n  lub.writeall(path, 'Hello')\r\n  local path2 = lub.path('|fixtures/tmp2.txt')\r\n  assertTrue(lub.exist(path))\r\n  assertFalse(lub.exist(path2))\r\n\r\n  lub.copy(path, path2)\r\n  assertTrue(lub.exist(path2))\r\n  assertTrue(lub.exist(path))\r\n\r\n  -- cleanup\r\n  lub.rmFile(path)\r\n  lub.rmFile(path2)\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "lub.copy(path, path2)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function should.writeall()\r\n  local foo = lub.path('|fixtures/tmp/foo')\r\n  lub.rmTree(foo, true)\r\n  local tmp_path = foo .. '/bar/lub_test_writeall.txt'\r\n  os.remove(tmp_path)\r\n  lub.writeall(tmp_path, 'This is the message')\r\n  assertEqual('This is the message', lub.content(tmp_path))\r\n  lub.rmTree(foo, true)\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local foo = lub.path('|fixtures/tmp/foo')",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "lub.rmTree(foo, true)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local tmp_path = foo .. '/bar/lub_test_writeall.txt'",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "os.remove(tmp_path)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "lub.writeall(tmp_path, 'This is the message')",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assertEqual('This is the message', lub.content(tmp_path))",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function should.split()\r\n  local list = lub.split('cat,dog,mouse', ',')\r\n  assertEqual('cat'  , list[1])\r\n  assertEqual('dog'  , list[2])\r\n  assertEqual('mouse', list[3])\r\n  assertEqual(3, #list)\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local list = lub.split('cat,dog,mouse', ',')",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "assertEqual('cat'  , list[1])",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assertEqual('dog'  , list[2])",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "assertEqual('mouse', list[3])",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "assertEqual(3, #list)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function should.splitChars()\r\n  local list = lub.split('cat')\r\n  assertEqual('c', list[1])\r\n  assertEqual('a', list[2])\r\n  assertEqual('t', list[3])\r\n  assertEqual(3, #list)\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local list = lub.split('cat')",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "assertEqual('c', list[1])",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assertEqual('a', list[2])",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assertEqual('t', list[3])",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function should.strip()\r\n  assertEqual('hop hop', lub.strip(' \\t\\nhop hop '))\r\n  assertEqual('hop hop', lub.strip('hop hop '))\r\n  assertEqual('hop hop', lub.strip('  hop hop'))\r\n  assertEqual('hop hop', lub.strip('hop hop'))\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "assertEqual('hop hop', lub.strip(' \\t\\nhop hop '))",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assertEqual('hop hop', lub.strip('hop hop '))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assertEqual('hop hop', lub.strip('  hop hop'))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assertEqual('hop hop', lub.strip('hop hop'))",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function should.absToRel()\r\n  assertEqual('play/in/trigger', lub.absToRel('/foo/play/in/trigger', '/foo'))\r\n  assertEqual('/foo/bar', lub.absToRel('/foo/bar', '/foo/bar'))\r\n  assertEqual('/foo/baz/boom', lub.absToRel('/foo/baz/boom', '/foo/bar'))\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "assertEqual('play/in/trigger', lub.absToRel('/foo/play/in/trigger', '/foo'))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assertEqual('/foo/bar', lub.absToRel('/foo/bar', '/foo/bar'))",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assertEqual('/foo/baz/boom', lub.absToRel('/foo/baz/boom', '/foo/bar'))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function should.returnEmptyOnSpitStartingWithSep()\r\n  local list = lub.split('/my/home', '/')\r\n  assertEqual(''    , list[1])\r\n  assertEqual('my'  , list[2])\r\n  assertEqual('home', list[3])\r\n  assertEqual(3, #list)\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "local list = lub.split('/my/home', '/')",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "assertEqual(''    , list[1])",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assertEqual('my'  , list[2])",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "assertEqual('home', list[3])",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function should.provideDir()\r\n  assertMatch('test$', lub.path '|')\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "assertMatch('test$', lub.path '|')",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function should.provideFile()\r\n  assertMatch('test/lub_test.lua$', lub.path '&')\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "assertMatch('test/lub_test.lua$', lub.path '&')",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function should.testFileExistence()\r\n  assertEqual('file', lub.fileType(lub.path('|fixtures/io.txt')))\r\n  assertEqual(nil, lub.fileType(lub.path('|docbad')))\r\n  assertEqual('directory', lub.fileType(lub.path '|'))\r\n  assertEqual(nil, lub.fileType(nil))\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "assertEqual('file', lub.fileType(lub.path('|fixtures/io.txt')))",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assertEqual(nil, lub.fileType(lub.path('|docbad')))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assertEqual('directory', lub.fileType(lub.path '|'))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "assertEqual(nil, lub.fileType(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function should.shellQuote()\r\n  assertEqual('\"foo\"', lub.shellQuote('foo'))\r\n  -- foo 25\"  --> \"foo 25\\\"\"\r\n  assertEqual('\"foo 25\\\\\\\"\"', lub.shellQuote('foo 25\"'))\r\n  -- foo 25\\\" --> \"foo 25\\\\\\\"\"\r\n  assertEqual('\"foo 25\\\\\\\\\\\\\\\"\"', lub.shellQuote('foo 25\\\\\"'))\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "assertEqual('\"foo\"', lub.shellQuote('foo'))",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "assertEqual('\"foo 25\\\\\\\"\"', lub.shellQuote('foo 25\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "assertEqual('\"foo 25\\\\\\\\\\\\\\\"\"', lub.shellQuote('foo 25\\\\\"'))",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function should.log()\r\n  local o_print = print\r\n  local out\r\n  function print(...)\r\n    out = {...}\r\n  end\r\n\r\n  assertPass(function()\r\n    lub.log('Hello')\r\n  end, function()\r\n    print = o_print\r\n  end)\r\n\r\n  assertMatch('test/lub_test.lua:[0-9]+', out[1])\r\n  assertMatch('Hello', out[2])\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "local o_print = print",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "local out",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "function print(...)\r\n    out = {...}\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 148,
    "text": "out = {...}",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "assertPass(function()\r\n    lub.log('Hello')\r\n  end, function()\r\n    print = o_print\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "lub.log('Hello')",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "print = o_print",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "assertMatch('test/lub_test.lua:[0-9]+', out[1])",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "assertMatch('Hello', out[2])",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function print(...)\r\n    out = {...}\r\n  end",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function should.log()\r\n  local o_print = print\r\n  local out\r\n  function print(...)\r\n    out = {...}\r\n  end\r\n\r\n  assertPass(function()\r\n    lub.log('Hello')\r\n  end, function()\r\n    print = o_print\r\n  end)\r\n\r\n  assertMatch('test/lub_test.lua:179', out[1])\r\n  assertMatch('Hello', out[2])\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "assertMatch('test/lub_test.lua:179', out[1])",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function print(...)\r\n    out = {...}\r\n  end",
    "type": "function"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function should.declareClass()\r\n  local c = lub.class 'foo.Bar'\r\n  assertEqual('foo.Bar', c.type)\r\n  local out\r\n  function c.new(...)\r\n    out = {...}\r\n  end\r\n  c('hey')\r\n  assertValueEqual({'hey'}, out)\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "local c = lub.class 'foo.Bar'",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "assertEqual('foo.Bar', c.type)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "function c.new(...)\r\n    out = {...}\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 166,
    "text": "c('hey')",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assertValueEqual({'hey'}, out)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function c.new(...)\r\n    out = {...}\r\n  end",
    "type": "function"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function should.useDeprecation()\r\n  local o_print = print\r\n  local out, bar\r\n  function print(...)\r\n    out = {...}\r\n  end\r\n\r\n  function lub.foo(...)\r\n    return lub.deprecation('lub', 'foo', 'bar', ...)\r\n  end\r\n\r\n  function lub.bar(...)\r\n    bar = {...}\r\n  end\r\n\r\n  assertPass(function()\r\n    lub.foo('Hello')\r\n  end, function()\r\n    print = o_print\r\n  end)\r\n  lub.foo = nil\r\n  lub.bar = nil\r\n\r\n  assertMatch(\"[DEPRECATION]\", out[1])\r\n  assertMatch(\"'lub.foo' is deprecated. Please use 'lub.bar' instead.\", out[1])\r\n  assertValueEqual({'Hello'}, bar)\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "local out, bar",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "function lub.foo(...)\r\n    return lub.deprecation('lub', 'foo', 'bar', ...)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 174,
    "text": "function lub.bar(...)\r\n    bar = {...}\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 175,
    "text": "bar = {...}",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "assertPass(function()\r\n    lub.foo('Hello')\r\n  end, function()\r\n    print = o_print\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "lub.foo('Hello')",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "lub.foo = nil",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "lub.bar = nil",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "assertMatch(\"[DEPRECATION]\", out[1])",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "assertMatch(\"'lub.foo' is deprecated. Please use 'lub.bar' instead.\", out[1])",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "assertValueEqual({'Hello'}, bar)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function print(...)\r\n    out = {...}\r\n  end",
    "type": "function"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function lub.foo(...)\r\n    return lub.deprecation('lub', 'foo', 'bar', ...)\r\n  end",
    "type": "function"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "function lub.bar(...)\r\n    bar = {...}\r\n  end",
    "type": "function"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "function should.traceRequire()\r\n  -- just to make coverage testing happy.\r\n  assertPass(function()\r\n    lub.traceRequire(false)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "assertPass(function()\r\n    lub.traceRequire(false)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "lub.traceRequire(false)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function should.insertSorted()\r\n  local list = {}\r\n  lub.insertSorted(list, 'c')\r\n  lub.insertSorted(list, 'a')\r\n  lub.insertSorted(list, 'b')\r\n  assertValueEqual({'a','b','c'}, list)\r\nend",
    "type": "function"
  }, {
    "id": 195,
    "text": "lub.insertSorted(list, 'c')",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "lub.insertSorted(list, 'a')",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "lub.insertSorted(list, 'b')",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "assertValueEqual({'a','b','c'}, list)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "function should.returnParentDirectory()\r\n  local parent, child = lub.dir('/a/b/c')\r\n  assertEqual('/a/b', parent)\r\n  assertEqual('c', child)\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "local parent, child = lub.dir('/a/b/c')",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "assertEqual('/a/b', parent)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "assertEqual('c', child)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "function(node)\r\n    if node.xml == 'b' then\r\n      table.insert(list, node)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function()\r\n    r = lub.search(data, function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function(node)\r\n    if node.xml == 'b' then\r\n      return node\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function()\r\n    r = lub.BFS(data, function(node)\r\n      if node.xml == 'x' then\r\n        return node\r\n      end\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function()\r\n    lub.makePath(path)\r\n  end",
    "type": "function"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function()\r\n    lub.makePath(path)\r\n  end",
    "type": "function"
  }, {
    "id": 224,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 225,
    "text": "function()\r\n    lub.makePath(path)\r\n  end",
    "type": "function"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function()\r\n    lub.log('Hello')\r\n  end",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function()\r\n    print = o_print\r\n  end",
    "type": "function"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function()\r\n    lub.log('Hello')\r\n  end",
    "type": "function"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function()\r\n    print = o_print\r\n  end",
    "type": "function"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function()\r\n    lub.foo('Hello')\r\n  end",
    "type": "function"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function()\r\n    print = o_print\r\n  end",
    "type": "function"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function()\r\n    lub.traceRequire(false)\r\n  end",
    "type": "function"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "",
    "type": "function container"
  }, {
    "id": 242,
    "text": "BFS",
    "type": "global function"
  }, {
    "id": 243,
    "text": "shellQuote",
    "type": "global function"
  }, {
    "id": 244,
    "text": "deepMerge",
    "type": "global function"
  }, {
    "id": 245,
    "text": "makePath",
    "type": "global function"
  }, {
    "id": 246,
    "text": "traceRequire",
    "type": "global function"
  }, {
    "id": 247,
    "text": "split",
    "type": "global function"
  }, {
    "id": 248,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 249,
    "text": "fileType",
    "type": "global function"
  }, {
    "id": 250,
    "text": "strip",
    "type": "global function"
  }, {
    "id": 251,
    "text": "content",
    "type": "global function"
  }, {
    "id": 252,
    "text": "lut",
    "type": "module"
  }, {
    "id": 253,
    "text": "Test",
    "type": "global function"
  }, {
    "id": 254,
    "text": "writeall",
    "type": "global function"
  }, {
    "id": 255,
    "text": "rmTree",
    "type": "global function"
  }, {
    "id": 256,
    "text": "log",
    "type": "global function"
  }, {
    "id": 257,
    "text": "exist",
    "type": "global function"
  }, {
    "id": 258,
    "text": "rmFile",
    "type": "global function"
  }, {
    "id": 259,
    "text": "search",
    "type": "global function"
  }, {
    "id": 260,
    "text": "deprecation",
    "type": "global function"
  }, {
    "id": 261,
    "text": "absolutizePath",
    "type": "global function"
  }, {
    "id": 262,
    "text": "IDDFS",
    "type": "global function"
  }, {
    "id": 263,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 264,
    "text": "class",
    "type": "global function"
  }, {
    "id": 265,
    "text": "path",
    "type": "global function"
  }, {
    "id": 266,
    "text": "move",
    "type": "global function"
  }, {
    "id": 267,
    "text": "merge",
    "type": "global function"
  }, {
    "id": 268,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 269,
    "text": "absToRel",
    "type": "global function"
  }, {
    "id": 270,
    "text": "insertSorted",
    "type": "global function"
  }, {
    "id": 271,
    "text": "assertEqual",
    "type": "global function"
  }, {
    "id": 272,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 273,
    "text": "assertPass",
    "type": "global function"
  }, {
    "id": 274,
    "text": "c",
    "type": "global function"
  }, {
    "id": 275,
    "text": "assertValueEqual",
    "type": "global function"
  }, {
    "id": 276,
    "text": "assertFalse",
    "type": "global function"
  }, {
    "id": 277,
    "text": "assertTrue",
    "type": "global function"
  }, {
    "id": 278,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 279,
    "text": "assertMatch",
    "type": "global function"
  }, {
    "id": 280,
    "text": "assertError",
    "type": "global function"
  }, {
    "id": 281,
    "text": "require",
    "type": "global function"
  }, {
    "id": 282,
    "text": "",
    "type": "variable container"
  }, {
    "id": 283,
    "text": "",
    "type": "require container"
  }, {
    "id": 284,
    "text": "",
    "type": "local variable"
  }, {
    "id": 285,
    "text": "",
    "type": "n/a"
  }, {
    "id": 286,
    "text": "",
    "type": "global variable"
  }, {
    "id": 287,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "require local variable"
  } ]
}