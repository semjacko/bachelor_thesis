{
  "_filename": "seesubst.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/examples/seesubst.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 26
  }, {
    "from": 19,
    "label": "calls",
    "to": 23
  }, {
    "from": 19,
    "label": "calls",
    "to": 23
  }, {
    "from": 7,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 27
  }, {
    "from": 19,
    "label": "calls",
    "to": 21
  }, {
    "from": 19,
    "label": "calls",
    "to": 22
  }, {
    "from": 19,
    "label": "calls",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 19,
    "label": "declares",
    "to": 7
  }, {
    "from": 19,
    "label": "declares",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 28,
    "label": "initializes",
    "to": 30
  }, {
    "from": 30,
    "label": "assigns",
    "to": 31
  }, {
    "from": 28,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "assigns",
    "to": 33
  }, {
    "from": 28,
    "label": "initializes",
    "to": 34
  }, {
    "from": 34,
    "label": "assigns",
    "to": 35
  }, {
    "from": 28,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 28,
    "label": "initializes",
    "to": 38
  }, {
    "from": 29,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 41,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 42,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 43,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 44,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 44,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 2
  }, {
    "from": 45,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 46,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 47,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 48,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 49,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 40
  }, {
    "from": 50,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 4
  }, {
    "from": 50,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 5
  }, {
    "from": 51,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 20
  }, {
    "from": 52,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 3
  }, {
    "from": 53,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 3
  }, {
    "from": 53,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 4
  }, {
    "from": 53,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 4
  }, {
    "from": 54,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 6
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "seesubst",
    "type": "module"
  }, {
    "id": 2,
    "text": "symbols",
    "type": "module"
  }, {
    "id": 3,
    "text": "app",
    "type": "module"
  }, {
    "id": 4,
    "text": "import_into",
    "type": "module"
  }, {
    "id": 5,
    "text": "strict",
    "type": "module"
  }, {
    "id": 6,
    "text": "stringx",
    "type": "module"
  }, {
    "id": 7,
    "text": "function gsub (s,pat,subst,start)\r\n    local fpat = _gsub_patterns[pat]\r\n    if not fpat then\r\n        -- use SIP to generate a proper string pattern.\r\n        -- the _whole thing_ is a capture, to get the whole match\r\n        -- and the unnamed capture.\r\n        fpat = '('..sip.create_pattern(pat)..')'\r\n        _gsub_patterns[pat] = fpat\r\n    end\r\n    return s:gsub(fpat,subst,start)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local fpat = _gsub_patterns[pat]",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if not fpat then\r\n        -- use SIP to generate a proper string pattern.\r\n        -- the _whole thing_ is a capture, to get the whole match\r\n        -- and the unnamed capture.\r\n        fpat = '('..sip.create_pattern(pat)..')'\r\n        _gsub_patterns[pat] = fpat\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "fpat = '('..sip.create_pattern(pat)..')'",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "_gsub_patterns[pat] = fpat",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function(see,path)\r\n        if fun(path,res) or mod(path,res) then\r\n            local ret = ('[see %s](%s.%s.html'):format(path,res[1],res[2])\r\n            if res[3] then\r\n                return ret..'#'..res[3]..')'\r\n            else\r\n                return ret..')'\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 15,
    "text": "if fun(path,res) or mod(path,res) then\r\n            local ret = ('[see %s](%s.%s.html'):format(path,res[1],res[2])\r\n            if res[3] then\r\n                return ret..'#'..res[3]..')'\r\n            else\r\n                return ret..')'\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local ret = ('[see %s](%s.%s.html'):format(path,res[1],res[2])",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if res[3] then\r\n                return ret..'#'..res[3]..')'\r\n            else\r\n                return ret..')'\r\n            end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "",
    "type": "function container"
  }, {
    "id": 20,
    "text": "debug",
    "type": "module"
  }, {
    "id": 21,
    "text": "print",
    "type": "global function"
  }, {
    "id": 22,
    "text": "require",
    "type": "global function"
  }, {
    "id": 23,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 24,
    "text": "create_pattern",
    "type": "global function"
  }, {
    "id": 25,
    "text": "lines",
    "type": "global function"
  }, {
    "id": 26,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 27,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 28,
    "text": "",
    "type": "variable container"
  }, {
    "id": 29,
    "text": "",
    "type": "require container"
  }, {
    "id": 30,
    "text": "",
    "type": "local variable"
  }, {
    "id": 31,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 32,
    "text": "",
    "type": "local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 34,
    "text": "",
    "type": "local variable"
  }, {
    "id": 35,
    "text": "",
    "type": "n/a"
  }, {
    "id": 36,
    "text": "",
    "type": "local variable"
  }, {
    "id": 37,
    "text": "",
    "type": "n/a"
  }, {
    "id": 38,
    "text": "",
    "type": "global variable"
  }, {
    "id": 39,
    "text": "",
    "type": "global variable"
  }, {
    "id": 40,
    "text": "pl",
    "type": "module"
  }, {
    "id": 41,
    "text": "",
    "type": "require container"
  }, {
    "id": 42,
    "text": "",
    "type": "require container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  }, {
    "id": 45,
    "text": "",
    "type": "require container"
  }, {
    "id": 46,
    "text": "",
    "type": "require container"
  }, {
    "id": 47,
    "text": "",
    "type": "require container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "require container"
  }, {
    "id": 51,
    "text": "",
    "type": "require container"
  }, {
    "id": 52,
    "text": "",
    "type": "require container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "require container"
  } ]
}