{
  "_filename": "Date.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/Date.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 14,
    "label": "has",
    "to": 33
  }, {
    "from": 5,
    "label": "has",
    "to": 34
  }, {
    "from": 5,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 51
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 54
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 59,
    "label": "has",
    "to": 51
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 51
  }, {
    "from": 63,
    "label": "has",
    "to": 51
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 51
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 51
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 51
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 67
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 67
  }, {
    "from": 75,
    "label": "has",
    "to": 51
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 51
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 51
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 100,
    "label": "has",
    "to": 105
  }, {
    "from": 100,
    "label": "has",
    "to": 106
  }, {
    "from": 95,
    "label": "has",
    "to": 51
  }, {
    "from": 95,
    "label": "has",
    "to": 51
  }, {
    "from": 95,
    "label": "has",
    "to": 51
  }, {
    "from": 95,
    "label": "has",
    "to": 51
  }, {
    "from": 95,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 51
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 51
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 112,
    "label": "has",
    "to": 51
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 37
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 51
  }, {
    "from": 124,
    "label": "has",
    "to": 51
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 127,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 127,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 136,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 127,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 127,
    "label": "has",
    "to": 51
  }, {
    "from": 127,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 51
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 147,
    "label": "has",
    "to": 155
  }, {
    "from": 147,
    "label": "has",
    "to": 156
  }, {
    "from": 147,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 160,
    "label": "has",
    "to": 164
  }, {
    "from": 160,
    "label": "has",
    "to": 165
  }, {
    "from": 160,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 160,
    "label": "has",
    "to": 168
  }, {
    "from": 160,
    "label": "has",
    "to": 169
  }, {
    "from": 160,
    "label": "has",
    "to": 170
  }, {
    "from": 160,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 160,
    "label": "has",
    "to": 174
  }, {
    "from": 160,
    "label": "has",
    "to": 175
  }, {
    "from": 160,
    "label": "has",
    "to": 176
  }, {
    "from": 160,
    "label": "has",
    "to": 177
  }, {
    "from": 147,
    "label": "has",
    "to": 178
  }, {
    "from": 147,
    "label": "has",
    "to": 179
  }, {
    "from": 147,
    "label": "has",
    "to": 180
  }, {
    "from": 147,
    "label": "has",
    "to": 181
  }, {
    "from": 147,
    "label": "has",
    "to": 182
  }, {
    "from": 147,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 184,
    "label": "has",
    "to": 186
  }, {
    "from": 184,
    "label": "has",
    "to": 51
  }, {
    "from": 184,
    "label": "has",
    "to": 187
  }, {
    "from": 184,
    "label": "has",
    "to": 188
  }, {
    "from": 184,
    "label": "has",
    "to": 51
  }, {
    "from": 184,
    "label": "has",
    "to": 189
  }, {
    "from": 184,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 184,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 193,
    "label": "has",
    "to": 197
  }, {
    "from": 184,
    "label": "has",
    "to": 198
  }, {
    "from": 184,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 184,
    "label": "has",
    "to": 51
  }, {
    "from": 184,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 203,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 206,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 203,
    "label": "has",
    "to": 51
  }, {
    "from": 203,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 218,
    "label": "has",
    "to": 220
  }, {
    "from": 218,
    "label": "has",
    "to": 221
  }, {
    "from": 218,
    "label": "has",
    "to": 222
  }, {
    "from": 215,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 51
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 226,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 226,
    "label": "has",
    "to": 51
  }, {
    "from": 226,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 236,
    "label": "has",
    "to": 239
  }, {
    "from": 234,
    "label": "has",
    "to": 240
  }, {
    "from": 234,
    "label": "has",
    "to": 51
  }, {
    "from": 234,
    "label": "has",
    "to": 241
  }, {
    "from": 234,
    "label": "has",
    "to": 242
  }, {
    "from": 234,
    "label": "has",
    "to": 243
  }, {
    "from": 234,
    "label": "has",
    "to": 51
  }, {
    "from": 234,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 234,
    "label": "has",
    "to": 246
  }, {
    "from": 234,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 234,
    "label": "has",
    "to": 51
  }, {
    "from": 234,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 251,
    "label": "has",
    "to": 254
  }, {
    "from": 251,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 177
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 251,
    "label": "has",
    "to": 257
  }, {
    "from": 251,
    "label": "has",
    "to": 258
  }, {
    "from": 251,
    "label": "has",
    "to": 259
  }, {
    "from": 251,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 260,
    "label": "has",
    "to": 263
  }, {
    "from": 260,
    "label": "has",
    "to": 264
  }, {
    "from": 260,
    "label": "has",
    "to": 265
  }, {
    "from": 260,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 264
  }, {
    "from": 251,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 264
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 251,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 271,
    "label": "has",
    "to": 275
  }, {
    "from": 271,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 271,
    "label": "has",
    "to": 264
  }, {
    "from": 251,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 264
  }, {
    "from": 251,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 281,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 284,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 288,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 291
  }, {
    "from": 288,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 292,
    "label": "has",
    "to": 295
  }, {
    "from": 292,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 292,
    "label": "has",
    "to": 298
  }, {
    "from": 251,
    "label": "has",
    "to": 299
  }, {
    "from": 251,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 251,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 251,
    "label": "has",
    "to": 304
  }, {
    "from": 251,
    "label": "has",
    "to": 305
  }, {
    "from": 251,
    "label": "has",
    "to": 306
  }, {
    "from": 251,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 251,
    "label": "has",
    "to": 309
  }, {
    "from": 251,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 251,
    "label": "has",
    "to": 312
  }, {
    "from": 251,
    "label": "has",
    "to": 313
  }, {
    "from": 251,
    "label": "has",
    "to": 314
  }, {
    "from": 251,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 315,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 315,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 319
  }, {
    "from": 315,
    "label": "has",
    "to": 322
  }, {
    "from": 315,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 251,
    "label": "has",
    "to": 51
  }, {
    "from": 251,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 177
  }, {
    "from": 326,
    "label": "has",
    "to": 256
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 327,
    "label": "has",
    "to": 51
  }, {
    "from": 327,
    "label": "has",
    "to": 51
  }, {
    "from": 327,
    "label": "has",
    "to": 331
  }, {
    "from": 127,
    "label": "calls",
    "to": 124
  }, {
    "from": 127,
    "label": "calls",
    "to": 124
  }, {
    "from": 127,
    "label": "calls",
    "to": 124
  }, {
    "from": 127,
    "label": "calls",
    "to": 124
  }, {
    "from": 147,
    "label": "calls",
    "to": 345
  }, {
    "from": 147,
    "label": "calls",
    "to": 345
  }, {
    "from": 251,
    "label": "calls",
    "to": 333
  }, {
    "from": 42,
    "label": "calls",
    "to": 336
  }, {
    "from": 53,
    "label": "calls",
    "to": 336
  }, {
    "from": 59,
    "label": "calls",
    "to": 336
  }, {
    "from": 112,
    "label": "calls",
    "to": 336
  }, {
    "from": 184,
    "label": "calls",
    "to": 336
  }, {
    "from": 184,
    "label": "calls",
    "to": 336
  }, {
    "from": 251,
    "label": "calls",
    "to": 336
  }, {
    "from": 251,
    "label": "calls",
    "to": 336
  }, {
    "from": 332,
    "label": "calls",
    "to": 342
  }, {
    "from": 332,
    "label": "calls",
    "to": 342
  }, {
    "from": 332,
    "label": "calls",
    "to": 342
  }, {
    "from": 75,
    "label": "calls",
    "to": 351
  }, {
    "from": 184,
    "label": "calls",
    "to": 348
  }, {
    "from": 5,
    "label": "calls",
    "to": 353
  }, {
    "from": 90,
    "label": "calls",
    "to": 353
  }, {
    "from": 147,
    "label": "calls",
    "to": 353
  }, {
    "from": 147,
    "label": "calls",
    "to": 353
  }, {
    "from": 226,
    "label": "calls",
    "to": 353
  }, {
    "from": 226,
    "label": "calls",
    "to": 353
  }, {
    "from": 251,
    "label": "calls",
    "to": 353
  }, {
    "from": 251,
    "label": "calls",
    "to": 226
  }, {
    "from": 251,
    "label": "calls",
    "to": 226
  }, {
    "from": 251,
    "label": "calls",
    "to": 226
  }, {
    "from": 251,
    "label": "calls",
    "to": 226
  }, {
    "from": 251,
    "label": "calls",
    "to": 226
  }, {
    "from": 5,
    "label": "calls",
    "to": 355
  }, {
    "from": 42,
    "label": "calls",
    "to": 355
  }, {
    "from": 90,
    "label": "calls",
    "to": 346
  }, {
    "from": 184,
    "label": "calls",
    "to": 327
  }, {
    "from": 5,
    "label": "calls",
    "to": 339
  }, {
    "from": 36,
    "label": "calls",
    "to": 339
  }, {
    "from": 36,
    "label": "calls",
    "to": 339
  }, {
    "from": 42,
    "label": "calls",
    "to": 339
  }, {
    "from": 42,
    "label": "calls",
    "to": 339
  }, {
    "from": 69,
    "label": "calls",
    "to": 339
  }, {
    "from": 71,
    "label": "calls",
    "to": 339
  }, {
    "from": 95,
    "label": "calls",
    "to": 339
  }, {
    "from": 121,
    "label": "calls",
    "to": 339
  }, {
    "from": 203,
    "label": "calls",
    "to": 339
  }, {
    "from": 95,
    "label": "calls",
    "to": 340
  }, {
    "from": 251,
    "label": "calls",
    "to": 215
  }, {
    "from": 251,
    "label": "calls",
    "to": 224
  }, {
    "from": 5,
    "label": "calls",
    "to": 350
  }, {
    "from": 5,
    "label": "calls",
    "to": 350
  }, {
    "from": 147,
    "label": "calls",
    "to": 334
  }, {
    "from": 147,
    "label": "calls",
    "to": 338
  }, {
    "from": 147,
    "label": "calls",
    "to": 338
  }, {
    "from": 147,
    "label": "calls",
    "to": 338
  }, {
    "from": 147,
    "label": "calls",
    "to": 338
  }, {
    "from": 147,
    "label": "calls",
    "to": 338
  }, {
    "from": 147,
    "label": "calls",
    "to": 338
  }, {
    "from": 42,
    "label": "calls",
    "to": 347
  }, {
    "from": 332,
    "label": "calls",
    "to": 349
  }, {
    "from": 332,
    "label": "calls",
    "to": 349
  }, {
    "from": 332,
    "label": "calls",
    "to": 349
  }, {
    "from": 332,
    "label": "calls",
    "to": 354
  }, {
    "from": 184,
    "label": "calls",
    "to": 352
  }, {
    "from": 226,
    "label": "calls",
    "to": 352
  }, {
    "from": 234,
    "label": "calls",
    "to": 352
  }, {
    "from": 234,
    "label": "calls",
    "to": 352
  }, {
    "from": 251,
    "label": "calls",
    "to": 352
  }, {
    "from": 327,
    "label": "calls",
    "to": 343
  }, {
    "from": 215,
    "label": "calls",
    "to": 251
  }, {
    "from": 5,
    "label": "calls",
    "to": 341
  }, {
    "from": 5,
    "label": "calls",
    "to": 341
  }, {
    "from": 42,
    "label": "calls",
    "to": 341
  }, {
    "from": 42,
    "label": "calls",
    "to": 341
  }, {
    "from": 42,
    "label": "calls",
    "to": 341
  }, {
    "from": 332,
    "label": "calls",
    "to": 341
  }, {
    "from": 75,
    "label": "calls",
    "to": 341
  }, {
    "from": 75,
    "label": "calls",
    "to": 341
  }, {
    "from": 251,
    "label": "calls",
    "to": 234
  }, {
    "from": 251,
    "label": "calls",
    "to": 234
  }, {
    "from": 5,
    "label": "calls",
    "to": 344
  }, {
    "from": 5,
    "label": "calls",
    "to": 344
  }, {
    "from": 5,
    "label": "calls",
    "to": 344
  }, {
    "from": 42,
    "label": "calls",
    "to": 344
  }, {
    "from": 203,
    "label": "calls",
    "to": 344
  }, {
    "from": 251,
    "label": "calls",
    "to": 326
  }, {
    "from": 251,
    "label": "calls",
    "to": 326
  }, {
    "from": 251,
    "label": "calls",
    "to": 326
  }, {
    "from": 251,
    "label": "calls",
    "to": 326
  }, {
    "from": 251,
    "label": "calls",
    "to": 326
  }, {
    "from": 332,
    "label": "calls",
    "to": 337
  }, {
    "from": 184,
    "label": "calls",
    "to": 337
  }, {
    "from": 251,
    "label": "calls",
    "to": 335
  }, {
    "from": 251,
    "label": "calls",
    "to": 335
  }, {
    "from": 2,
    "label": "contains",
    "to": 332
  }, {
    "from": 332,
    "label": "declares",
    "to": 5
  }, {
    "from": 332,
    "label": "declares",
    "to": 36
  }, {
    "from": 332,
    "label": "declares",
    "to": 42
  }, {
    "from": 332,
    "label": "declares",
    "to": 53
  }, {
    "from": 332,
    "label": "declares",
    "to": 59
  }, {
    "from": 332,
    "label": "declares",
    "to": 63
  }, {
    "from": 332,
    "label": "declares",
    "to": 69
  }, {
    "from": 332,
    "label": "declares",
    "to": 71
  }, {
    "from": 332,
    "label": "declares",
    "to": 73
  }, {
    "from": 332,
    "label": "declares",
    "to": 75
  }, {
    "from": 332,
    "label": "declares",
    "to": 82
  }, {
    "from": 332,
    "label": "declares",
    "to": 90
  }, {
    "from": 332,
    "label": "declares",
    "to": 95
  }, {
    "from": 332,
    "label": "declares",
    "to": 108
  }, {
    "from": 332,
    "label": "declares",
    "to": 110
  }, {
    "from": 332,
    "label": "declares",
    "to": 112
  }, {
    "from": 332,
    "label": "declares",
    "to": 118
  }, {
    "from": 332,
    "label": "declares",
    "to": 121
  }, {
    "from": 332,
    "label": "declares",
    "to": 124
  }, {
    "from": 332,
    "label": "declares",
    "to": 127
  }, {
    "from": 332,
    "label": "declares",
    "to": 147
  }, {
    "from": 332,
    "label": "declares",
    "to": 184
  }, {
    "from": 332,
    "label": "declares",
    "to": 203
  }, {
    "from": 332,
    "label": "declares",
    "to": 212
  }, {
    "from": 332,
    "label": "declares",
    "to": 215
  }, {
    "from": 332,
    "label": "declares",
    "to": 224
  }, {
    "from": 332,
    "label": "declares",
    "to": 226
  }, {
    "from": 332,
    "label": "declares",
    "to": 234
  }, {
    "from": 332,
    "label": "declares",
    "to": 251
  }, {
    "from": 332,
    "label": "declares",
    "to": 326
  }, {
    "from": 332,
    "label": "declares",
    "to": 327
  }, {
    "from": 2,
    "label": "declares",
    "to": 346
  }, {
    "from": 2,
    "label": "contains",
    "to": 356
  }, {
    "from": 2,
    "label": "contains",
    "to": 357
  }, {
    "from": 356,
    "label": "initializes",
    "to": 358
  }, {
    "from": 358,
    "label": "assigns",
    "to": 359
  }, {
    "from": 356,
    "label": "initializes",
    "to": 360
  }, {
    "from": 360,
    "label": "assigns",
    "to": 361
  }, {
    "from": 356,
    "label": "initializes",
    "to": 362
  }, {
    "from": 362,
    "label": "assigns",
    "to": 363
  }, {
    "from": 356,
    "label": "initializes",
    "to": 364
  }, {
    "from": 364,
    "label": "assigns",
    "to": 365
  }, {
    "from": 356,
    "label": "initializes",
    "to": 366
  }, {
    "from": 366,
    "label": "assigns",
    "to": 367
  }, {
    "from": 356,
    "label": "initializes",
    "to": 368
  }, {
    "from": 368,
    "label": "assigns",
    "to": 369
  }, {
    "from": 356,
    "label": "initializes",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 371,
    "label": "assigns",
    "to": 372
  }, {
    "from": 372,
    "label": "assigns",
    "to": 373
  }, {
    "from": 371,
    "label": "assigns",
    "to": 374
  }, {
    "from": 374,
    "label": "assigns",
    "to": 375
  }, {
    "from": 371,
    "label": "assigns",
    "to": 376
  }, {
    "from": 376,
    "label": "assigns",
    "to": 377
  }, {
    "from": 371,
    "label": "assigns",
    "to": 378
  }, {
    "from": 378,
    "label": "assigns",
    "to": 379
  }, {
    "from": 371,
    "label": "assigns",
    "to": 380
  }, {
    "from": 380,
    "label": "assigns",
    "to": 381
  }, {
    "from": 371,
    "label": "assigns",
    "to": 382
  }, {
    "from": 382,
    "label": "assigns",
    "to": 383
  }, {
    "from": 356,
    "label": "initializes",
    "to": 384
  }, {
    "from": 356,
    "label": "initializes",
    "to": 385
  }, {
    "from": 356,
    "label": "initializes",
    "to": 386
  }, {
    "from": 356,
    "label": "initializes",
    "to": 387
  }, {
    "from": 387,
    "label": "assigns",
    "to": 388
  }, {
    "from": 356,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "assigns",
    "to": 390
  }, {
    "from": 356,
    "label": "initializes",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 356,
    "label": "initializes",
    "to": 393
  }, {
    "from": 393,
    "label": "assigns",
    "to": 394
  }, {
    "from": 357,
    "label": "initializes",
    "to": 395
  }, {
    "from": 395,
    "label": "requires",
    "to": 1
  }, {
    "from": 357,
    "label": "initializes",
    "to": 396
  }, {
    "from": 396,
    "label": "requires",
    "to": 3
  }, {
    "from": 357,
    "label": "initializes",
    "to": 397
  }, {
    "from": 397,
    "label": "requires",
    "to": 4
  }, {
    "from": 2,
    "label": "provides",
    "to": 398
  }, {
    "from": 368,
    "label": "represents",
    "to": 399
  }, {
    "from": 398,
    "label": "provides",
    "to": 399
  }, {
    "from": 400,
    "label": "requires",
    "to": 2
  }, {
    "from": 401,
    "label": "requires",
    "to": 2
  }, {
    "from": 402,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "class",
    "type": "module"
  }, {
    "id": 2,
    "text": "Date",
    "type": "module"
  }, {
    "id": 3,
    "text": "stringx",
    "type": "module"
  }, {
    "id": 4,
    "text": "utils",
    "type": "module"
  }, {
    "id": 5,
    "text": "function Date:_init(t,...)\r\n    local time\r\n    local nargs = select('#',...)\r\n    if nargs > 2 then\r\n        local extra = {...}\r\n        local year = t\r\n        t = {\r\n            year = year,\r\n            month = extra[1],\r\n            day = extra[2],\r\n            hour = extra[3],\r\n            min = extra[4],\r\n            sec = extra[5]\r\n        }\r\n    end\r\n    if nargs == 1 then\r\n        self.utc = select(1,...) == true\r\n    end\r\n    if t == nil or t == 'utc' then\r\n        time = os_time()\r\n        self.utc = t == 'utc'\r\n    elseif type(t) == 'number' then\r\n        time = t\r\n        if self.utc == nil then self.utc = true end\r\n    elseif type(t) == 'table' then\r\n        if getmetatable(t) == Date then -- copy ctor\r\n            time = t.time\r\n            self.utc = t.utc\r\n        else\r\n            if not (t.year and t.month) then\r\n                local lt = os_date('*t')\r\n                if not t.year and not t.month and not t.day then\r\n                    t.year = lt.year\r\n                    t.month = lt.month\r\n                    t.day = lt.day\r\n                else\r\n                    t.year = t.year or lt.year\r\n                    t.month = t.month or (t.day and lt.month or 1)\r\n                    t.day = t.day or 1\r\n                end\r\n            end\r\n            t.day = t.day or 1\r\n            time = os_time(t)\r\n        end\r\n    else\r\n        error(\"bad type for Date constructor: \"..type(t),2)\r\n    end\r\n    self:set(time)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local time",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local nargs = select('#',...)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if nargs > 2 then\r\n        local extra = {...}\r\n        local year = t\r\n        t = {\r\n            year = year,\r\n            month = extra[1],\r\n            day = extra[2],\r\n            hour = extra[3],\r\n            min = extra[4],\r\n            sec = extra[5]\r\n        }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "local extra = {...}",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local year = t",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "t = {\r\n            year = year,\r\n            month = extra[1],\r\n            day = extra[2],\r\n            hour = extra[3],\r\n            min = extra[4],\r\n            sec = extra[5]\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if nargs == 1 then\r\n        self.utc = select(1,...) == true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "self.utc = select(1,...) == true",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if t == nil or t == 'utc' then\r\n        time = os_time()\r\n        self.utc = t == 'utc'\r\n    elseif type(t) == 'number' then\r\n        time = t\r\n        if self.utc == nil then self.utc = true end\r\n    elseif type(t) == 'table' then\r\n        if getmetatable(t) == Date then -- copy ctor\r\n            time = t.time\r\n            self.utc = t.utc\r\n        else\r\n            if not (t.year and t.month) then\r\n                local lt = os_date('*t')\r\n                if not t.year and not t.month and not t.day then\r\n                    t.year = lt.year\r\n                    t.month = lt.month\r\n                    t.day = lt.day\r\n                else\r\n                    t.year = t.year or lt.year\r\n                    t.month = t.month or (t.day and lt.month or 1)\r\n                    t.day = t.day or 1\r\n                end\r\n            end\r\n            t.day = t.day or 1\r\n            time = os_time(t)\r\n        end\r\n    else\r\n        error(\"bad type for Date constructor: \"..type(t),2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "time = os_time()",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "self.utc = t == 'utc'",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "time = t",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if self.utc == nil then self.utc = true end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "self.utc = true",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if getmetatable(t) == Date then -- copy ctor\r\n            time = t.time\r\n            self.utc = t.utc\r\n        else\r\n            if not (t.year and t.month) then\r\n                local lt = os_date('*t')\r\n                if not t.year and not t.month and not t.day then\r\n                    t.year = lt.year\r\n                    t.month = lt.month\r\n                    t.day = lt.day\r\n                else\r\n                    t.year = t.year or lt.year\r\n                    t.month = t.month or (t.day and lt.month or 1)\r\n                    t.day = t.day or 1\r\n                end\r\n            end\r\n            t.day = t.day or 1\r\n            time = os_time(t)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "time = t.time",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "self.utc = t.utc",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if not (t.year and t.month) then\r\n                local lt = os_date('*t')\r\n                if not t.year and not t.month and not t.day then\r\n                    t.year = lt.year\r\n                    t.month = lt.month\r\n                    t.day = lt.day\r\n                else\r\n                    t.year = t.year or lt.year\r\n                    t.month = t.month or (t.day and lt.month or 1)\r\n                    t.day = t.day or 1\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local lt = os_date('*t')",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if not t.year and not t.month and not t.day then\r\n                    t.year = lt.year\r\n                    t.month = lt.month\r\n                    t.day = lt.day\r\n                else\r\n                    t.year = t.year or lt.year\r\n                    t.month = t.month or (t.day and lt.month or 1)\r\n                    t.day = t.day or 1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "t.year = lt.year",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "t.month = lt.month",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "t.day = lt.day",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "t.year = t.year or lt.year",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "t.month = t.month or (t.day and lt.month or 1)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "t.day = t.day or 1",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "time = os_time(t)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "error(\"bad type for Date constructor: \"..type(t),2)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "self:set(time)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function Date:set(t)\r\n    self.time = t\r\n    if self.utc then\r\n        self.tab = os_date('!*t',t)\r\n    else\r\n        self.tab = os_date('*t',t)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "self.time = t",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if self.utc then\r\n        self.tab = os_date('!*t',t)\r\n    else\r\n        self.tab = os_date('*t',t)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "self.tab = os_date('!*t',t)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "self.tab = os_date('*t',t)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function Date.tzone (ts)\r\n    if ts == nil then\r\n        ts = os_time()\r\n    elseif type(ts) == \"table\" then\r\n        if getmetatable(ts) == Date then\r\n        \tts = ts.time\r\n        else\r\n        \tts = Date(ts).time\r\n        end\r\n    end\r\n    local utc = os_date('!*t',ts)\r\n    local lcl = os_date('*t',ts)\r\n    lcl.isdst = false\r\n    return os.difftime(os_time(lcl), os_time(utc))\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "if ts == nil then\r\n        ts = os_time()\r\n    elseif type(ts) == \"table\" then\r\n        if getmetatable(ts) == Date then\r\n        \tts = ts.time\r\n        else\r\n        \tts = Date(ts).time\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "ts = os_time()",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if getmetatable(ts) == Date then\r\n        \tts = ts.time\r\n        else\r\n        \tts = Date(ts).time\r\n        end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "ts = ts.time",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "ts = Date(ts).time",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local utc = os_date('!*t',ts)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local lcl = os_date('*t',ts)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "lcl.isdst = false",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function Date:toUTC ()\r\n    local ndate = Date(self)\r\n    if not self.utc then\r\n        ndate.utc = true\r\n        ndate:set(ndate.time)\r\n    end\r\n    return ndate\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local ndate = Date(self)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if not self.utc then\r\n        ndate.utc = true\r\n        ndate:set(ndate.time)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "ndate.utc = true",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "ndate:set(ndate.time)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function Date:toLocal ()\r\n    local ndate = Date(self)\r\n    if self.utc then\r\n        ndate.utc = false\r\n        ndate:set(ndate.time)\r\n--~         ndate:add { sec = Date.tzone(self) }\r\n    end\r\n    return ndate\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "if self.utc then\r\n        ndate.utc = false\r\n        ndate:set(ndate.time)\r\n--~         ndate:add { sec = Date.tzone(self) }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "ndate.utc = false",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function(self,val)\r\n        if val then\r\n            assert_arg(1,val,\"number\")\r\n            self.tab[c] = val\r\n            self:set(os_time(self.tab))\r\n            return self\r\n        else\r\n            return self.tab[c]\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 64,
    "text": "if val then\r\n            assert_arg(1,val,\"number\")\r\n            self.tab[c] = val\r\n            self:set(os_time(self.tab))\r\n            return self\r\n        else\r\n            return self.tab[c]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "assert_arg(1,val,\"number\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "self.tab[c] = val",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "self:set(os_time(self.tab))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function Date:weekday_name(full)\r\n    return os_date(full and '%A' or '%a',self.time)\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function Date:month_name(full)\r\n    return os_date(full and '%B' or '%b',self.time)\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function Date:is_weekend()\r\n    return self.tab.wday == 1 or self.tab.wday == 7\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function Date:add(t)\r\n    local old_dst = self.tab.isdst\r\n    local key,val = next(t)\r\n    self.tab[key] = self.tab[key] + val\r\n    self:set(os_time(self.tab))\r\n    if old_dst ~= self.tab.isdst then\r\n        self.tab.hour = self.tab.hour - (old_dst and 1 or -1)\r\n        self:set(os_time(self.tab))\r\n    end\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "local old_dst = self.tab.isdst",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local key,val = next(t)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "self.tab[key] = self.tab[key] + val",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if old_dst ~= self.tab.isdst then\r\n        self.tab.hour = self.tab.hour - (old_dst and 1 or -1)\r\n        self:set(os_time(self.tab))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "self.tab.hour = self.tab.hour - (old_dst and 1 or -1)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function Date:last_day()\r\n    local d = 28\r\n    local m = self.tab.month\r\n    while self.tab.month == m do\r\n        d = d + 1\r\n        self:add{day=1}\r\n    end\r\n    self:add{day=-1}\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local d = 28",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local m = self.tab.month",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "while self.tab.month == m do\r\n        d = d + 1\r\n        self:add{day=1}\r\n    end",
    "type": "statement:while"
  }, {
    "id": 86,
    "text": "d = d + 1",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "self:add{day=1}",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "self:add{day=-1}",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function Date:diff(other)\r\n    local dt = self.time - other.time\r\n    if dt < 0 then error(\"date difference is negative!\",2) end\r\n    return Date.Interval(dt)\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local dt = self.time - other.time",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if dt < 0 then error(\"date difference is negative!\",2) end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "error(\"date difference is negative!\",2)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function Date:__tostring()\r\n    local fmt = '%Y-%m-%dT%H:%M:%S'\r\n    if self.utc then\r\n        fmt = \"!\"..fmt\r\n    end\r\n    local t = os_date(fmt,self.time)\r\n    if self.utc then\r\n        return  t .. 'Z'\r\n    else\r\n        local offs = self:tzone()\r\n        if offs == 0 then\r\n            return t .. 'Z'\r\n        end\r\n        local sign = offs > 0 and '+' or '-'\r\n        local h = math.ceil(offs/3600)\r\n        local m = (offs % 3600)/60\r\n        if m == 0 then\r\n            return t .. ('%s%02d'):format(sign,h)\r\n        else\r\n            return t .. ('%s%02d:%02d'):format(sign,h,m)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "local fmt = '%Y-%m-%dT%H:%M:%S'",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "if self.utc then\r\n        fmt = \"!\"..fmt\r\n    end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "fmt = \"!\"..fmt",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "local t = os_date(fmt,self.time)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if self.utc then\r\n        return  t .. 'Z'\r\n    else\r\n        local offs = self:tzone()\r\n        if offs == 0 then\r\n            return t .. 'Z'\r\n        end\r\n        local sign = offs > 0 and '+' or '-'\r\n        local h = math.ceil(offs/3600)\r\n        local m = (offs % 3600)/60\r\n        if m == 0 then\r\n            return t .. ('%s%02d'):format(sign,h)\r\n        else\r\n            return t .. ('%s%02d:%02d'):format(sign,h,m)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "local offs = self:tzone()",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if offs == 0 then\r\n            return t .. 'Z'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "local sign = offs > 0 and '+' or '-'",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local h = math.ceil(offs/3600)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local m = (offs % 3600)/60",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if m == 0 then\r\n            return t .. ('%s%02d'):format(sign,h)\r\n        else\r\n            return t .. ('%s%02d:%02d'):format(sign,h,m)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function Date:__eq(other)\r\n    return self.time == other.time\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function Date:__lt(other)\r\n    return self.time < other.time\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function Date:__add(other)\r\n    local nd = Date(self)\r\n    if Date.Interval:class_of(other) then\r\n        other = {sec=other.time}\r\n    end\r\n    nd:add(other)\r\n    return nd\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local nd = Date(self)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "if Date.Interval:class_of(other) then\r\n        other = {sec=other.time}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "other = {sec=other.time}",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "nd:add(other)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function Date.Interval:_init(t)\r\n    self:set(t)\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "self:set(t)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function Date.Interval:set(t)\r\n    self.time = t\r\n    self.tab = os_date('!*t',self.time)\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "self.tab = os_date('!*t',self.time)",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "local function ess(n)\r\n    if n > 1 then return 's '\r\n    else return ' '\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "if n > 1 then return 's '\r\n    else return ' '\r\n    end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function Date.Interval:__tostring()\r\n    local t, res = self.tab, ''\r\n    local y,m,d = t.year - 1970, t.month - 1, t.day - 1\r\n    if y > 0 then res = res .. y .. ' year'..ess(y) end\r\n    if m > 0 then res = res .. m .. ' month'..ess(m) end\r\n    if d > 0 then res = res .. d .. ' day'..ess(d) end\r\n    if y == 0 and m == 0 then\r\n        local h = t.hour\r\n        if h > 0 then res = res .. h .. ' hour'..ess(h) end\r\n        if t.min > 0 then res = res .. t.min .. ' min ' end\r\n        if t.sec > 0 then res = res .. t.sec .. ' sec ' end\r\n    end\r\n    if res == '' then res = 'zero' end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "local t, res = self.tab, ''",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "local y,m,d = t.year - 1970, t.month - 1, t.day - 1",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "if y > 0 then res = res .. y .. ' year'..ess(y) end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "res = res .. y .. ' year'..ess(y)",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "if m > 0 then res = res .. m .. ' month'..ess(m) end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "res = res .. m .. ' month'..ess(m)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "if d > 0 then res = res .. d .. ' day'..ess(d) end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "res = res .. d .. ' day'..ess(d)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "if y == 0 and m == 0 then\r\n        local h = t.hour\r\n        if h > 0 then res = res .. h .. ' hour'..ess(h) end\r\n        if t.min > 0 then res = res .. t.min .. ' min ' end\r\n        if t.sec > 0 then res = res .. t.sec .. ' sec ' end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "local h = t.hour",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if h > 0 then res = res .. h .. ' hour'..ess(h) end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "res = res .. h .. ' hour'..ess(h)",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "if t.min > 0 then res = res .. t.min .. ' min ' end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "res = res .. t.min .. ' min '",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "if t.sec > 0 then res = res .. t.sec .. ' sec ' end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "res = res .. t.sec .. ' sec '",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "if res == '' then res = 'zero' end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "res = 'zero'",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function Date.Format:_init(fmt)\r\n    if not fmt then\r\n        self.fmt = '%Y-%m-%d %H:%M:%S'\r\n        self.outf = self.fmt\r\n        self.plain = true\r\n        return\r\n    end\r\n    local append = table.insert\r\n    local D,PLUS,OPENP,CLOSEP = '\\001','\\002','\\003','\\004'\r\n    local vars,used = {},{}\r\n    local patt,outf = {},{}\r\n    local i = 1\r\n    while i < #fmt do\r\n        local ch = fmt:sub(i,i)\r\n        local df = formats[ch]\r\n        if df then\r\n            if used[ch] then error(\"field appeared twice: \"..ch,4) end\r\n            used[ch] = true\r\n            -- this field may be repeated\r\n            local _,inext = fmt:find(ch..'+',i+1)\r\n            local cnt = not _ and 1 or inext-i+1\r\n            if not df[2][cnt] then error(\"wrong number of fields: \"..ch,4) end\r\n            -- single chars mean 'accept more than one digit'\r\n            local p = cnt==1 and (D..PLUS) or (D):rep(cnt)\r\n            append(patt,OPENP..p..CLOSEP)\r\n            append(vars,ch)\r\n            if ch == 'y' then\r\n                append(outf,cnt==2 and '%y' or '%Y')\r\n            else\r\n                append(outf,'%'..ch)\r\n            end\r\n            i = i + cnt\r\n        else\r\n            append(patt,ch)\r\n            append(outf,ch)\r\n            i = i + 1\r\n        end\r\n    end\r\n    -- escape any magic characters\r\n    fmt = utils.escape(table.concat(patt))\r\n   -- fmt = table.concat(patt):gsub('[%-%.%+%[%]%(%)%$%^%%%?%*]','%%%1')\r\n    -- replace markers with their magic equivalents\r\n    fmt = fmt:gsub(D,'%%d'):gsub(PLUS,'+'):gsub(OPENP,'('):gsub(CLOSEP,')')\r\n    self.fmt = fmt\r\n    self.outf = table.concat(outf)\r\n    self.vars = vars\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "if not fmt then\r\n        self.fmt = '%Y-%m-%d %H:%M:%S'\r\n        self.outf = self.fmt\r\n        self.plain = true\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "self.fmt = '%Y-%m-%d %H:%M:%S'",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "self.outf = self.fmt",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "self.plain = true",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "local append = table.insert",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "local D,PLUS,OPENP,CLOSEP = '\\001','\\002','\\003','\\004'",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "local vars,used = {},{}",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "local patt,outf = {},{}",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "while i < #fmt do\r\n        local ch = fmt:sub(i,i)\r\n        local df = formats[ch]\r\n        if df then\r\n            if used[ch] then error(\"field appeared twice: \"..ch,4) end\r\n            used[ch] = true\r\n            -- this field may be repeated\r\n            local _,inext = fmt:find(ch..'+',i+1)\r\n            local cnt = not _ and 1 or inext-i+1\r\n            if not df[2][cnt] then error(\"wrong number of fields: \"..ch,4) end\r\n            -- single chars mean 'accept more than one digit'\r\n            local p = cnt==1 and (D..PLUS) or (D):rep(cnt)\r\n            append(patt,OPENP..p..CLOSEP)\r\n            append(vars,ch)\r\n            if ch == 'y' then\r\n                append(outf,cnt==2 and '%y' or '%Y')\r\n            else\r\n                append(outf,'%'..ch)\r\n            end\r\n            i = i + cnt\r\n        else\r\n            append(patt,ch)\r\n            append(outf,ch)\r\n            i = i + 1\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 158,
    "text": "local ch = fmt:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local df = formats[ch]",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "if df then\r\n            if used[ch] then error(\"field appeared twice: \"..ch,4) end\r\n            used[ch] = true\r\n            -- this field may be repeated\r\n            local _,inext = fmt:find(ch..'+',i+1)\r\n            local cnt = not _ and 1 or inext-i+1\r\n            if not df[2][cnt] then error(\"wrong number of fields: \"..ch,4) end\r\n            -- single chars mean 'accept more than one digit'\r\n            local p = cnt==1 and (D..PLUS) or (D):rep(cnt)\r\n            append(patt,OPENP..p..CLOSEP)\r\n            append(vars,ch)\r\n            if ch == 'y' then\r\n                append(outf,cnt==2 and '%y' or '%Y')\r\n            else\r\n                append(outf,'%'..ch)\r\n            end\r\n            i = i + cnt\r\n        else\r\n            append(patt,ch)\r\n            append(outf,ch)\r\n            i = i + 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "if used[ch] then error(\"field appeared twice: \"..ch,4) end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "error(\"field appeared twice: \"..ch,4)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "used[ch] = true",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "local _,inext = fmt:find(ch..'+',i+1)",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "local cnt = not _ and 1 or inext-i+1",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "if not df[2][cnt] then error(\"wrong number of fields: \"..ch,4) end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "error(\"wrong number of fields: \"..ch,4)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "local p = cnt==1 and (D..PLUS) or (D):rep(cnt)",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "append(patt,OPENP..p..CLOSEP)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "append(vars,ch)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "if ch == 'y' then\r\n                append(outf,cnt==2 and '%y' or '%Y')\r\n            else\r\n                append(outf,'%'..ch)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "append(outf,cnt==2 and '%y' or '%Y')",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "append(outf,'%'..ch)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "i = i + cnt",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "append(patt,ch)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "append(outf,ch)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "fmt = utils.escape(table.concat(patt))",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "fmt = fmt:gsub(D,'%%d'):gsub(PLUS,'+'):gsub(OPENP,'('):gsub(CLOSEP,')')",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "self.fmt = fmt",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "self.outf = table.concat(outf)",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "self.vars = vars",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function Date.Format:parse(str)\r\n    assert_string(1,str)\r\n    if self.plain then\r\n        return parse_date(str,self.us)\r\n    end\r\n    local res = {str:match(self.fmt)}\r\n    if #res==0 then return nil, 'cannot parse '..str end\r\n    local tab = {}\r\n    for i,v in ipairs(self.vars) do\r\n        local name = formats[v][1] -- e.g. 'y' becomes 'year'\r\n        tab[name] = tonumber(res[i])\r\n    end\r\n    -- os.date() requires these fields; if not present, we assume\r\n    -- that the time set is for the current day.\r\n    if not (tab.year and tab.month and tab.day) then\r\n        local today = Date()\r\n        tab.year = tab.year or today:year()\r\n        tab.month = tab.month or today:month()\r\n        tab.day = tab.day or today:day()\r\n    end\r\n    local Y = tab.year\r\n    if Y < 100 then -- classic Y2K pivot\r\n        tab.year = Y + (Y < 35 and 2000 or 1999)\r\n    elseif not Y then\r\n        tab.year = 1970\r\n    end\r\n    return Date(tab)\r\nend",
    "type": "function"
  }, {
    "id": 185,
    "text": "assert_string(1,str)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "if self.plain then\r\n        return parse_date(str,self.us)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "local res = {str:match(self.fmt)}",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "if #res==0 then return nil, 'cannot parse '..str end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "local tab = {}",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "for i,v in ipairs(self.vars) do\r\n        local name = formats[v][1] -- e.g. 'y' becomes 'year'\r\n        tab[name] = tonumber(res[i])\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 191,
    "text": "local name = formats[v][1]",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "tab[name] = tonumber(res[i])",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "if not (tab.year and tab.month and tab.day) then\r\n        local today = Date()\r\n        tab.year = tab.year or today:year()\r\n        tab.month = tab.month or today:month()\r\n        tab.day = tab.day or today:day()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "local today = Date()",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "tab.year = tab.year or today:year()",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "tab.month = tab.month or today:month()",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "tab.day = tab.day or today:day()",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "local Y = tab.year",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "if Y < 100 then -- classic Y2K pivot\r\n        tab.year = Y + (Y < 35 and 2000 or 1999)\r\n    elseif not Y then\r\n        tab.year = 1970\r\n    end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "tab.year = Y + (Y < 35 and 2000 or 1999)",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "tab.year = 1970",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function Date.Format:tostring(d)\r\n    local tm\r\n    local fmt = self.outf\r\n    if type(d) == 'number' then\r\n        tm = d\r\n    else\r\n        tm = d.time\r\n        if d.utc then\r\n            fmt = '!'..fmt\r\n        end\r\n    end\r\n    return os_date(fmt,tm)\r\nend",
    "type": "function"
  }, {
    "id": 204,
    "text": "local tm",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "local fmt = self.outf",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "if type(d) == 'number' then\r\n        tm = d\r\n    else\r\n        tm = d.time\r\n        if d.utc then\r\n            fmt = '!'..fmt\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "tm = d",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "tm = d.time",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "if d.utc then\r\n            fmt = '!'..fmt\r\n        end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "fmt = '!'..fmt",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function Date.Format:US_order(yesno)\r\n    self.us = yesno\r\nend",
    "type": "function"
  }, {
    "id": 213,
    "text": "self.us = yesno",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "local function create_months()\r\n    local ld, day1 = parse_date_unsafe '2000-12-31', {day=1}\r\n    months = {}\r\n    for i = 1,12 do\r\n        ld = ld:last_day()\r\n        ld:add(day1)\r\n        local mon = ld:month_name():lower()\r\n        months [mon] = i\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 216,
    "text": "local ld, day1 = parse_date_unsafe '2000-12-31', {day=1}",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "months = {}",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "for i = 1,12 do\r\n        ld = ld:last_day()\r\n        ld:add(day1)\r\n        local mon = ld:month_name():lower()\r\n        months [mon] = i\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 219,
    "text": "ld = ld:last_day()",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "ld:add(day1)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "local mon = ld:month_name():lower()",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "months [mon] = i",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "local function looks_like_a_month(w) \r\n    return w:match '^%a+,*$' ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "local function tonum(s,l1,l2,kind)\r\n    kind = kind or ''\r\n    local n = tonumber(s)\r\n    if not n then error((\"%snot a number: '%s'\"):format(kind,s)) end\r\n    if n < l1 or n > l2 then\r\n        error((\"%s out of range: %s is not between %d and %d\"):format(kind,s,l1,l2))\r\n    end\r\n    return n\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "kind = kind or ''",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "local n = tonumber(s)",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "if not n then error((\"%snot a number: '%s'\"):format(kind,s)) end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "error((\"%snot a number: '%s'\"):format(kind,s))",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "if n < l1 or n > l2 then\r\n        error((\"%s out of range: %s is not between %d and %d\"):format(kind,s,l1,l2))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "error((\"%s out of range: %s is not between %d and %d\"):format(kind,s,l1,l2))",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "local function  parse_iso_end(p,ns,sec)\r\n    -- may be fractional part of seconds\r\n    local _,nfrac,secfrac = p:find('^%.%d+',ns+1)\r\n    if secfrac then\r\n        sec = sec .. secfrac\r\n        p = p:sub(nfrac+1)\r\n    else\r\n        p = p:sub(ns+1)\r\n    end\r\n    -- ISO 8601 dates may end in Z (for UTC) or [+-][isotime]\r\n    -- (we're working with the date as lower case, hence 'z')\r\n    if p:match 'z$' then -- we're UTC!\r\n        return  sec, {h=0,m=0}\r\n    end \r\n    p = p:gsub(':','') -- turn 00:30 to 0030\r\n    local _,_,sign,offs = p:find('^([%+%-])(%d+)')\r\n    if not sign then return sec, nil end -- not UTC\r\n\r\n    if #offs == 2 then offs = offs .. '00' end -- 01 to 0100\r\n    local tz = { h = tonumber(offs:sub(1,2)), m = tonumber(offs:sub(3,4)) }\r\n    if sign == '-' then tz.h = -tz.h; tz.m = -tz.m end\r\n    return sec, tz\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "local _,nfrac,secfrac = p:find('^%.%d+',ns+1)",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "if secfrac then\r\n        sec = sec .. secfrac\r\n        p = p:sub(nfrac+1)\r\n    else\r\n        p = p:sub(ns+1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "sec = sec .. secfrac",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "p = p:sub(nfrac+1)",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "p = p:sub(ns+1)",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "if p:match 'z$' then -- we're UTC!\r\n        return  sec, {h=0,m=0}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 241,
    "text": "p = p:gsub(':','')",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "local _,_,sign,offs = p:find('^([%+%-])(%d+)')",
    "type": "statement:localassign"
  }, {
    "id": 243,
    "text": "if not sign then return sec, nil end",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "if #offs == 2 then offs = offs .. '00' end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "offs = offs .. '00'",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "local tz = { h = tonumber(offs:sub(1,2)), m = tonumber(offs:sub(3,4)) }",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "if sign == '-' then tz.h = -tz.h; tz.m = -tz.m end",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "tz.h = -tz.h",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "tz.m = -tz.m",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function parse_date_unsafe (s,US)\r\n    s = s:gsub('T',' ') -- ISO 8601\r\n    local parts = stringx.split(s:lower())\r\n    local i,p = 1,parts[1]\r\n    local function nextp() i = i + 1; p = parts[i] end\r\n    local year,min,hour,sec,apm\r\n    local tz\r\n    local _,nxt,day, month = p:find '^(%d+)/(%d+)'\r\n    if day then\r\n        -- swop for US case\r\n        if US then\r\n            day, month = month, day\r\n        end\r\n        _,_,year = p:find('^/(%d+)',nxt+1)\r\n        nextp()\r\n    else -- ISO\r\n        year,month,day = p:match('^(%d+)%-(%d+)%-(%d+)')\r\n        if year then\r\n            nextp()\r\n        end\r\n    end\r\n    if p and not year and is_number(p) then -- has to be date\r\n        if #p < 4 then\r\n            day = p\r\n            nextp()\r\n        else -- unless it looks like a 24-hour time\r\n            year = true\r\n        end\r\n    end\r\n    if p and looks_like_a_month(p) then -- date followed by month\r\n        p = p:sub(1,3)\r\n        if not months then\r\n            create_months()\r\n        end\r\n        local mon = months[p]\r\n        if mon then\r\n            month = mon\r\n        else error(\"not a month: \" .. p) end\r\n        nextp()\r\n    end\r\n    if p and not year and is_number(p) then\r\n        year = p\r\n        nextp()\r\n    end\r\n\r\n    if p then -- time is hh:mm[:ss], hhmm[ss] or H.M[am|pm]\r\n        _,nxt,hour,min = p:find '^(%d+):(%d+)'\r\n        local ns\r\n        if nxt then -- are there seconds?\r\n            _,ns,sec = p:find ('^:(%d+)',nxt+1)\r\n            --if ns then\r\n                sec,tz = parse_iso_end(p,ns or nxt,sec)\r\n            --end\r\n        else -- might be h.m\r\n            _,ns,hour,min = p:find '^(%d+)%.(%d+)'\r\n            if ns then\r\n                apm = p:match '[ap]m$'\r\n            else  -- or hhmm[ss]\r\n                local hourmin\r\n                _,nxt,hourmin = p:find ('^(%d+)')\r\n                if nxt then\r\n                   hour = hourmin:sub(1,2)\r\n                   min = hourmin:sub(3,4)\r\n                   sec = hourmin:sub(5,6)\r\n                   if #sec == 0 then sec = nil end\r\n                   sec,tz = parse_iso_end(p,nxt,sec)\r\n                end\r\n            end\r\n        end\r\n    end\r\n    local today\r\n    if year == true then year = nil end\r\n    if not (year and month and day) then\r\n        today = Date()\r\n    end\r\n    day = day and tonum(day,1,31,'day') or (month and 1 or today:day())\r\n    month = month and tonum(month,1,12,'month') or today:month()\r\n    year = year and tonumber(year) or today:year()\r\n    if year < 100 then -- two-digit year pivot around year < 2035\r\n        year = year + (year < 35 and 2000 or 1900)\r\n    end\r\n    hour = hour and tonum(hour,0,apm and 12 or 24,'hour') or 12\r\n    if apm == 'pm' then\r\n        hour = hour + 12\r\n    end\r\n    min = min and tonum(min,0,59) or 0\r\n    sec = sec and tonum(sec,0,60) or 0  --60 used to indicate leap second\r\n    local res = Date {year = year, month = month, day = day, hour = hour, min = min, sec = sec}\r\n    if tz then -- ISO 8601 UTC time\r\n        local corrected = false\r\n        if tz.h ~= 0 then res:add {hour = -tz.h}; corrected = true end\r\n        if tz.m ~= 0 then res:add {min = -tz.m}; corrected = true end\r\n        res.utc = true\r\n        -- we're in UTC, so let's go local...\r\n        if corrected then\r\n            res = res:toLocal()\r\n        end-- we're UTC!\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 252,
    "text": "s = s:gsub('T',' ')",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "local parts = stringx.split(s:lower())",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "local i,p = 1,parts[1]",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "local function nextp() i = i + 1; p = parts[i] end",
    "type": "statement:localfunction"
  }, {
    "id": 256,
    "text": "p = parts[i]",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "local year,min,hour,sec,apm",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "local tz",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "local _,nxt,day, month = p:find '^(%d+)/(%d+)'",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "if day then\r\n        -- swop for US case\r\n        if US then\r\n            day, month = month, day\r\n        end\r\n        _,_,year = p:find('^/(%d+)',nxt+1)\r\n        nextp()\r\n    else -- ISO\r\n        year,month,day = p:match('^(%d+)%-(%d+)%-(%d+)')\r\n        if year then\r\n            nextp()\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "if US then\r\n            day, month = month, day\r\n        end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "day, month = month, day",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "_,_,year = p:find('^/(%d+)',nxt+1)",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "nextp()",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "year,month,day = p:match('^(%d+)%-(%d+)%-(%d+)')",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "if year then\r\n            nextp()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "if p and not year and is_number(p) then -- has to be date\r\n        if #p < 4 then\r\n            day = p\r\n            nextp()\r\n        else -- unless it looks like a 24-hour time\r\n            year = true\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "if #p < 4 then\r\n            day = p\r\n            nextp()\r\n        else -- unless it looks like a 24-hour time\r\n            year = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "day = p",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "year = true",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "if p and looks_like_a_month(p) then -- date followed by month\r\n        p = p:sub(1,3)\r\n        if not months then\r\n            create_months()\r\n        end\r\n        local mon = months[p]\r\n        if mon then\r\n            month = mon\r\n        else error(\"not a month: \" .. p) end\r\n        nextp()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "p = p:sub(1,3)",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "if not months then\r\n            create_months()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 274,
    "text": "create_months()",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "local mon = months[p]",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "if mon then\r\n            month = mon\r\n        else error(\"not a month: \" .. p) end",
    "type": "statement:if"
  }, {
    "id": 277,
    "text": "month = mon",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "error(\"not a month: \" .. p)",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "if p and not year and is_number(p) then\r\n        year = p\r\n        nextp()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "year = p",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "if p then -- time is hh:mm[:ss], hhmm[ss] or H.M[am|pm]\r\n        _,nxt,hour,min = p:find '^(%d+):(%d+)'\r\n        local ns\r\n        if nxt then -- are there seconds?\r\n            _,ns,sec = p:find ('^:(%d+)',nxt+1)\r\n            --if ns then\r\n                sec,tz = parse_iso_end(p,ns or nxt,sec)\r\n            --end\r\n        else -- might be h.m\r\n            _,ns,hour,min = p:find '^(%d+)%.(%d+)'\r\n            if ns then\r\n                apm = p:match '[ap]m$'\r\n            else  -- or hhmm[ss]\r\n                local hourmin\r\n                _,nxt,hourmin = p:find ('^(%d+)')\r\n                if nxt then\r\n                   hour = hourmin:sub(1,2)\r\n                   min = hourmin:sub(3,4)\r\n                   sec = hourmin:sub(5,6)\r\n                   if #sec == 0 then sec = nil end\r\n                   sec,tz = parse_iso_end(p,nxt,sec)\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 282,
    "text": "_,nxt,hour,min = p:find '^(%d+):(%d+)'",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "local ns",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "if nxt then -- are there seconds?\r\n            _,ns,sec = p:find ('^:(%d+)',nxt+1)\r\n            --if ns then\r\n                sec,tz = parse_iso_end(p,ns or nxt,sec)\r\n            --end\r\n        else -- might be h.m\r\n            _,ns,hour,min = p:find '^(%d+)%.(%d+)'\r\n            if ns then\r\n                apm = p:match '[ap]m$'\r\n            else  -- or hhmm[ss]\r\n                local hourmin\r\n                _,nxt,hourmin = p:find ('^(%d+)')\r\n                if nxt then\r\n                   hour = hourmin:sub(1,2)\r\n                   min = hourmin:sub(3,4)\r\n                   sec = hourmin:sub(5,6)\r\n                   if #sec == 0 then sec = nil end\r\n                   sec,tz = parse_iso_end(p,nxt,sec)\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 285,
    "text": "_,ns,sec = p:find ('^:(%d+)',nxt+1)",
    "type": "statement:assign"
  }, {
    "id": 286,
    "text": "sec,tz = parse_iso_end(p,ns or nxt,sec)",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "_,ns,hour,min = p:find '^(%d+)%.(%d+)'",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "if ns then\r\n                apm = p:match '[ap]m$'\r\n            else  -- or hhmm[ss]\r\n                local hourmin\r\n                _,nxt,hourmin = p:find ('^(%d+)')\r\n                if nxt then\r\n                   hour = hourmin:sub(1,2)\r\n                   min = hourmin:sub(3,4)\r\n                   sec = hourmin:sub(5,6)\r\n                   if #sec == 0 then sec = nil end\r\n                   sec,tz = parse_iso_end(p,nxt,sec)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 289,
    "text": "apm = p:match '[ap]m$'",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "local hourmin",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "_,nxt,hourmin = p:find ('^(%d+)')",
    "type": "statement:assign"
  }, {
    "id": 292,
    "text": "if nxt then\r\n                   hour = hourmin:sub(1,2)\r\n                   min = hourmin:sub(3,4)\r\n                   sec = hourmin:sub(5,6)\r\n                   if #sec == 0 then sec = nil end\r\n                   sec,tz = parse_iso_end(p,nxt,sec)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 293,
    "text": "hour = hourmin:sub(1,2)",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "min = hourmin:sub(3,4)",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "sec = hourmin:sub(5,6)",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "if #sec == 0 then sec = nil end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "sec = nil",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "sec,tz = parse_iso_end(p,nxt,sec)",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "local today",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "if year == true then year = nil end",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "year = nil",
    "type": "statement:assign"
  }, {
    "id": 302,
    "text": "if not (year and month and day) then\r\n        today = Date()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 303,
    "text": "today = Date()",
    "type": "statement:assign"
  }, {
    "id": 304,
    "text": "day = day and tonum(day,1,31,'day') or (month and 1 or today:day())",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "month = month and tonum(month,1,12,'month') or today:month()",
    "type": "statement:assign"
  }, {
    "id": 306,
    "text": "year = year and tonumber(year) or today:year()",
    "type": "statement:assign"
  }, {
    "id": 307,
    "text": "if year < 100 then -- two-digit year pivot around year < 2035\r\n        year = year + (year < 35 and 2000 or 1900)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "year = year + (year < 35 and 2000 or 1900)",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "hour = hour and tonum(hour,0,apm and 12 or 24,'hour') or 12",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "if apm == 'pm' then\r\n        hour = hour + 12\r\n    end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "hour = hour + 12",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "min = min and tonum(min,0,59) or 0",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "sec = sec and tonum(sec,0,60) or 0",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "local res = Date {year = year, month = month, day = day, hour = hour, min = min, sec = sec}",
    "type": "statement:localassign"
  }, {
    "id": 315,
    "text": "if tz then -- ISO 8601 UTC time\r\n        local corrected = false\r\n        if tz.h ~= 0 then res:add {hour = -tz.h}; corrected = true end\r\n        if tz.m ~= 0 then res:add {min = -tz.m}; corrected = true end\r\n        res.utc = true\r\n        -- we're in UTC, so let's go local...\r\n        if corrected then\r\n            res = res:toLocal()\r\n        end-- we're UTC!\r\n    end",
    "type": "statement:if"
  }, {
    "id": 316,
    "text": "local corrected = false",
    "type": "statement:localassign"
  }, {
    "id": 317,
    "text": "if tz.h ~= 0 then res:add {hour = -tz.h}; corrected = true end",
    "type": "statement:if"
  }, {
    "id": 318,
    "text": "res:add {hour = -tz.h}",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "corrected = true",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "if tz.m ~= 0 then res:add {min = -tz.m}; corrected = true end",
    "type": "statement:if"
  }, {
    "id": 321,
    "text": "res:add {min = -tz.m}",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "res.utc = true",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "if corrected then\r\n            res = res:toLocal()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 324,
    "text": "res = res:toLocal()",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 326,
    "text": "local function nextp() i = i + 1; p = parts[i] end",
    "type": "function"
  }, {
    "id": 327,
    "text": "function parse_date (s)\r\n    local ok, d = pcall(parse_date_unsafe,s)\r\n    if not ok then -- error\r\n        d = d:gsub('.-:%d+: ','')\r\n        return nil, d\r\n    else\r\n        return d\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 328,
    "text": "local ok, d = pcall(parse_date_unsafe,s)",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "if not ok then -- error\r\n        d = d:gsub('.-:%d+: ','')\r\n        return nil, d\r\n    else\r\n        return d\r\n    end",
    "type": "statement:if"
  }, {
    "id": 330,
    "text": "d = d:gsub('.-:%d+: ','')",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 332,
    "text": "",
    "type": "function container"
  }, {
    "id": 333,
    "text": "split",
    "type": "global function"
  }, {
    "id": 334,
    "text": "escape",
    "type": "global function"
  }, {
    "id": 335,
    "text": "is_number",
    "type": "global function"
  }, {
    "id": 336,
    "text": "Date",
    "type": "global function"
  }, {
    "id": 337,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 338,
    "text": "append",
    "type": "global function"
  }, {
    "id": 339,
    "text": "os_date",
    "type": "global function"
  }, {
    "id": 340,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 341,
    "text": "os_time",
    "type": "global function"
  }, {
    "id": 342,
    "text": "require",
    "type": "global function"
  }, {
    "id": 343,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 344,
    "text": "type",
    "type": "global function"
  }, {
    "id": 345,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 346,
    "text": "Interval",
    "type": "global function"
  }, {
    "id": 347,
    "text": "difftime",
    "type": "global function"
  }, {
    "id": 348,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 349,
    "text": "class",
    "type": "global function"
  }, {
    "id": 350,
    "text": "select",
    "type": "global function"
  }, {
    "id": 351,
    "text": "next",
    "type": "global function"
  }, {
    "id": 352,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 353,
    "text": "error",
    "type": "global function"
  }, {
    "id": 354,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 355,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 356,
    "text": "",
    "type": "variable container"
  }, {
    "id": 357,
    "text": "",
    "type": "require container"
  }, {
    "id": 358,
    "text": "",
    "type": "local variable"
  }, {
    "id": 359,
    "text": "",
    "type": "n/a"
  }, {
    "id": 360,
    "text": "",
    "type": "local variable"
  }, {
    "id": 361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 362,
    "text": "",
    "type": "local variable"
  }, {
    "id": 363,
    "text": "",
    "type": "n/a"
  }, {
    "id": 364,
    "text": "",
    "type": "local variable"
  }, {
    "id": 365,
    "text": "",
    "type": "n/a"
  }, {
    "id": 366,
    "text": "",
    "type": "local variable"
  }, {
    "id": 367,
    "text": "",
    "type": "n/a"
  }, {
    "id": 368,
    "text": "",
    "type": "local variable"
  }, {
    "id": 369,
    "text": "",
    "type": "n/a"
  }, {
    "id": 370,
    "text": "",
    "type": "local variable"
  }, {
    "id": 371,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 372,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 373,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 374,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 375,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 376,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 377,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 378,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 379,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 380,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 381,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 382,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 383,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 384,
    "text": "",
    "type": "local variable"
  }, {
    "id": 385,
    "text": "",
    "type": "local variable"
  }, {
    "id": 386,
    "text": "",
    "type": "local variable"
  }, {
    "id": 387,
    "text": "",
    "type": "local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "n/a"
  }, {
    "id": 389,
    "text": "",
    "type": "global variable"
  }, {
    "id": 390,
    "text": "",
    "type": "n/a"
  }, {
    "id": 391,
    "text": "",
    "type": "global variable"
  }, {
    "id": 392,
    "text": "",
    "type": "n/a"
  }, {
    "id": 393,
    "text": "",
    "type": "global variable"
  }, {
    "id": 394,
    "text": "",
    "type": "n/a"
  }, {
    "id": 395,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 396,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 397,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 398,
    "text": "",
    "type": "interface container"
  }, {
    "id": 399,
    "text": "",
    "type": "interface"
  }, {
    "id": 400,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 401,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 402,
    "text": "",
    "type": "require local variable"
  } ]
}