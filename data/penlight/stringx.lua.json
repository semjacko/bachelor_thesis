{
  "_filename": "stringx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/stringx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 7
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 7
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 19,
    "label": "has",
    "to": 7
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 21,
    "label": "has",
    "to": 7
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 15
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 25,
    "label": "has",
    "to": 7
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 7
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 7
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 15
  }, {
    "from": 37,
    "label": "has",
    "to": 7
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 15
  }, {
    "from": 39,
    "label": "has",
    "to": 7
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 15
  }, {
    "from": 41,
    "label": "has",
    "to": 7
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 15
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 7
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 15
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 7
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 15
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 7
  }, {
    "from": 57,
    "label": "has",
    "to": 7
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 7
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 66
  }, {
    "from": 60,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 60,
    "label": "has",
    "to": 7
  }, {
    "from": 60,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 15
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 7
  }, {
    "from": 73,
    "label": "has",
    "to": 7
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 15
  }, {
    "from": 78,
    "label": "has",
    "to": 74
  }, {
    "from": 78,
    "label": "has",
    "to": 7
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 15
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 7
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 15
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 7
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 93,
    "label": "has",
    "to": 99
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 93,
    "label": "has",
    "to": 101
  }, {
    "from": 87,
    "label": "has",
    "to": 7
  }, {
    "from": 87,
    "label": "has",
    "to": 7
  }, {
    "from": 87,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 15
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 7
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 15
  }, {
    "from": 106,
    "label": "has",
    "to": 104
  }, {
    "from": 106,
    "label": "has",
    "to": 7
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 15
  }, {
    "from": 108,
    "label": "has",
    "to": 104
  }, {
    "from": 108,
    "label": "has",
    "to": 7
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 110,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 110,
    "label": "has",
    "to": 7
  }, {
    "from": 110,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 15
  }, {
    "from": 123,
    "label": "has",
    "to": 7
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 15
  }, {
    "from": 125,
    "label": "has",
    "to": 7
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 15
  }, {
    "from": 127,
    "label": "has",
    "to": 7
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 15
  }, {
    "from": 129,
    "label": "has",
    "to": 7
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 131,
    "label": "has",
    "to": 7
  }, {
    "from": 131,
    "label": "has",
    "to": 7
  }, {
    "from": 131,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 15
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 7
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 15
  }, {
    "from": 140,
    "label": "has",
    "to": 138
  }, {
    "from": 140,
    "label": "has",
    "to": 7
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 15
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 7
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 15
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 7
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 15
  }, {
    "from": 149,
    "label": "has",
    "to": 7
  }, {
    "from": 149,
    "label": "has",
    "to": 7
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 15
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 151,
    "label": "has",
    "to": 7
  }, {
    "from": 151,
    "label": "has",
    "to": 7
  }, {
    "from": 151,
    "label": "has",
    "to": 7
  }, {
    "from": 151,
    "label": "has",
    "to": 7
  }, {
    "from": 151,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 157,
    "label": "has",
    "to": 7
  }, {
    "from": 157,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 15
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 168,
    "label": "has",
    "to": 172
  }, {
    "from": 168,
    "label": "has",
    "to": 173
  }, {
    "from": 168,
    "label": "has",
    "to": 174
  }, {
    "from": 166,
    "label": "has",
    "to": 7
  }, {
    "from": 166,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 7
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 7
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 87,
    "label": "calls",
    "to": 193
  }, {
    "from": 14,
    "label": "calls",
    "to": 194
  }, {
    "from": 17,
    "label": "calls",
    "to": 194
  }, {
    "from": 19,
    "label": "calls",
    "to": 194
  }, {
    "from": 21,
    "label": "calls",
    "to": 194
  }, {
    "from": 23,
    "label": "calls",
    "to": 194
  }, {
    "from": 25,
    "label": "calls",
    "to": 194
  }, {
    "from": 27,
    "label": "calls",
    "to": 194
  }, {
    "from": 29,
    "label": "calls",
    "to": 194
  }, {
    "from": 48,
    "label": "calls",
    "to": 194
  }, {
    "from": 60,
    "label": "calls",
    "to": 194
  }, {
    "from": 60,
    "label": "calls",
    "to": 194
  }, {
    "from": 73,
    "label": "calls",
    "to": 194
  }, {
    "from": 110,
    "label": "calls",
    "to": 194
  }, {
    "from": 110,
    "label": "calls",
    "to": 194
  }, {
    "from": 37,
    "label": "calls",
    "to": 31
  }, {
    "from": 39,
    "label": "calls",
    "to": 31
  }, {
    "from": 14,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 19,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 23,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 43,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 57,
    "label": "calls",
    "to": 3
  }, {
    "from": 73,
    "label": "calls",
    "to": 3
  }, {
    "from": 73,
    "label": "calls",
    "to": 3
  }, {
    "from": 78,
    "label": "calls",
    "to": 3
  }, {
    "from": 78,
    "label": "calls",
    "to": 3
  }, {
    "from": 80,
    "label": "calls",
    "to": 3
  }, {
    "from": 80,
    "label": "calls",
    "to": 3
  }, {
    "from": 80,
    "label": "calls",
    "to": 3
  }, {
    "from": 84,
    "label": "calls",
    "to": 3
  }, {
    "from": 103,
    "label": "calls",
    "to": 3
  }, {
    "from": 106,
    "label": "calls",
    "to": 3
  }, {
    "from": 108,
    "label": "calls",
    "to": 3
  }, {
    "from": 123,
    "label": "calls",
    "to": 3
  }, {
    "from": 125,
    "label": "calls",
    "to": 3
  }, {
    "from": 127,
    "label": "calls",
    "to": 3
  }, {
    "from": 129,
    "label": "calls",
    "to": 3
  }, {
    "from": 137,
    "label": "calls",
    "to": 3
  }, {
    "from": 140,
    "label": "calls",
    "to": 3
  }, {
    "from": 142,
    "label": "calls",
    "to": 3
  }, {
    "from": 145,
    "label": "calls",
    "to": 3
  }, {
    "from": 149,
    "label": "calls",
    "to": 3
  }, {
    "from": 151,
    "label": "calls",
    "to": 3
  }, {
    "from": 166,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 199
  }, {
    "from": 80,
    "label": "calls",
    "to": 188
  }, {
    "from": 43,
    "label": "calls",
    "to": 197
  }, {
    "from": 48,
    "label": "calls",
    "to": 197
  }, {
    "from": 110,
    "label": "calls",
    "to": 200
  }, {
    "from": 110,
    "label": "calls",
    "to": 200
  }, {
    "from": 131,
    "label": "calls",
    "to": 200
  }, {
    "from": 131,
    "label": "calls",
    "to": 200
  }, {
    "from": 131,
    "label": "calls",
    "to": 200
  }, {
    "from": 142,
    "label": "calls",
    "to": 200
  }, {
    "from": 48,
    "label": "calls",
    "to": 198
  }, {
    "from": 31,
    "label": "calls",
    "to": 191
  }, {
    "from": 31,
    "label": "calls",
    "to": 191
  }, {
    "from": 131,
    "label": "calls",
    "to": 191
  }, {
    "from": 137,
    "label": "calls",
    "to": 9
  }, {
    "from": 140,
    "label": "calls",
    "to": 9
  }, {
    "from": 123,
    "label": "calls",
    "to": 110
  }, {
    "from": 125,
    "label": "calls",
    "to": 110
  }, {
    "from": 127,
    "label": "calls",
    "to": 110
  }, {
    "from": 157,
    "label": "calls",
    "to": 201
  }, {
    "from": 103,
    "label": "calls",
    "to": 87
  }, {
    "from": 106,
    "label": "calls",
    "to": 87
  }, {
    "from": 108,
    "label": "calls",
    "to": 87
  }, {
    "from": 31,
    "label": "calls",
    "to": 186
  }, {
    "from": 78,
    "label": "calls",
    "to": 60
  }, {
    "from": 84,
    "label": "calls",
    "to": 60
  }, {
    "from": 80,
    "label": "calls",
    "to": 189
  }, {
    "from": 110,
    "label": "calls",
    "to": 189
  }, {
    "from": 137,
    "label": "calls",
    "to": 131
  }, {
    "from": 140,
    "label": "calls",
    "to": 131
  }, {
    "from": 3,
    "label": "calls",
    "to": 202
  }, {
    "from": 9,
    "label": "calls",
    "to": 202
  }, {
    "from": 103,
    "label": "calls",
    "to": 202
  }, {
    "from": 106,
    "label": "calls",
    "to": 202
  }, {
    "from": 108,
    "label": "calls",
    "to": 202
  }, {
    "from": 142,
    "label": "calls",
    "to": 202
  }, {
    "from": 43,
    "label": "calls",
    "to": 12
  }, {
    "from": 48,
    "label": "calls",
    "to": 12
  }, {
    "from": 129,
    "label": "calls",
    "to": 184
  }, {
    "from": 12,
    "label": "calls",
    "to": 203
  }, {
    "from": 31,
    "label": "calls",
    "to": 192
  }, {
    "from": 31,
    "label": "calls",
    "to": 192
  }, {
    "from": 31,
    "label": "calls",
    "to": 192
  }, {
    "from": 87,
    "label": "calls",
    "to": 195
  }, {
    "from": 87,
    "label": "calls",
    "to": 195
  }, {
    "from": 87,
    "label": "calls",
    "to": 195
  }, {
    "from": 87,
    "label": "calls",
    "to": 195
  }, {
    "from": 176,
    "label": "calls",
    "to": 185
  }, {
    "from": 183,
    "label": "calls",
    "to": 190
  }, {
    "from": 12,
    "label": "calls",
    "to": 190
  }, {
    "from": 41,
    "label": "calls",
    "to": 187
  }, {
    "from": 166,
    "label": "calls",
    "to": 157
  }, {
    "from": 1,
    "label": "contains",
    "to": 183
  }, {
    "from": 183,
    "label": "declares",
    "to": 3
  }, {
    "from": 183,
    "label": "declares",
    "to": 6
  }, {
    "from": 183,
    "label": "declares",
    "to": 9
  }, {
    "from": 183,
    "label": "declares",
    "to": 12
  }, {
    "from": 183,
    "label": "declares",
    "to": 14
  }, {
    "from": 183,
    "label": "declares",
    "to": 17
  }, {
    "from": 183,
    "label": "declares",
    "to": 19
  }, {
    "from": 183,
    "label": "declares",
    "to": 21
  }, {
    "from": 183,
    "label": "declares",
    "to": 23
  }, {
    "from": 183,
    "label": "declares",
    "to": 25
  }, {
    "from": 183,
    "label": "declares",
    "to": 27
  }, {
    "from": 183,
    "label": "declares",
    "to": 29
  }, {
    "from": 183,
    "label": "declares",
    "to": 31
  }, {
    "from": 183,
    "label": "declares",
    "to": 37
  }, {
    "from": 183,
    "label": "declares",
    "to": 39
  }, {
    "from": 183,
    "label": "declares",
    "to": 41
  }, {
    "from": 183,
    "label": "declares",
    "to": 43
  }, {
    "from": 183,
    "label": "declares",
    "to": 48
  }, {
    "from": 183,
    "label": "declares",
    "to": 57
  }, {
    "from": 183,
    "label": "declares",
    "to": 60
  }, {
    "from": 183,
    "label": "declares",
    "to": 73
  }, {
    "from": 183,
    "label": "declares",
    "to": 78
  }, {
    "from": 183,
    "label": "declares",
    "to": 80
  }, {
    "from": 183,
    "label": "declares",
    "to": 84
  }, {
    "from": 183,
    "label": "declares",
    "to": 87
  }, {
    "from": 183,
    "label": "declares",
    "to": 103
  }, {
    "from": 183,
    "label": "declares",
    "to": 106
  }, {
    "from": 183,
    "label": "declares",
    "to": 108
  }, {
    "from": 183,
    "label": "declares",
    "to": 110
  }, {
    "from": 183,
    "label": "declares",
    "to": 123
  }, {
    "from": 183,
    "label": "declares",
    "to": 125
  }, {
    "from": 183,
    "label": "declares",
    "to": 127
  }, {
    "from": 183,
    "label": "declares",
    "to": 129
  }, {
    "from": 183,
    "label": "declares",
    "to": 131
  }, {
    "from": 183,
    "label": "declares",
    "to": 137
  }, {
    "from": 183,
    "label": "declares",
    "to": 140
  }, {
    "from": 183,
    "label": "declares",
    "to": 142
  }, {
    "from": 183,
    "label": "declares",
    "to": 145
  }, {
    "from": 183,
    "label": "declares",
    "to": 149
  }, {
    "from": 183,
    "label": "declares",
    "to": 151
  }, {
    "from": 183,
    "label": "declares",
    "to": 157
  }, {
    "from": 183,
    "label": "declares",
    "to": 166
  }, {
    "from": 183,
    "label": "declares",
    "to": 176
  }, {
    "from": 183,
    "label": "declares",
    "to": 179
  }, {
    "from": 183,
    "label": "declares",
    "to": 181
  }, {
    "from": 1,
    "label": "declares",
    "to": 196
  }, {
    "from": 205,
    "label": "requires",
    "to": 1
  }, {
    "from": 206,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 207
  }, {
    "from": 1,
    "label": "contains",
    "to": 208
  }, {
    "from": 207,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 207,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 207,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 207,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 207,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 207,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 207,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 207,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 207,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 207,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 207,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 207,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 207,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 207,
    "label": "initializes",
    "to": 235
  }, {
    "from": 235,
    "label": "assigns",
    "to": 236
  }, {
    "from": 207,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 207,
    "label": "initializes",
    "to": 239
  }, {
    "from": 207,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  }, {
    "from": 207,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 207,
    "label": "initializes",
    "to": 244
  }, {
    "from": 244,
    "label": "assigns",
    "to": 245
  }, {
    "from": 207,
    "label": "initializes",
    "to": 246
  }, {
    "from": 246,
    "label": "assigns",
    "to": 247
  }, {
    "from": 207,
    "label": "initializes",
    "to": 248
  }, {
    "from": 248,
    "label": "assigns",
    "to": 249
  }, {
    "from": 208,
    "label": "initializes",
    "to": 250
  }, {
    "from": 250,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 251
  }, {
    "from": 240,
    "label": "represents",
    "to": 252
  }, {
    "from": 251,
    "label": "provides",
    "to": 252
  }, {
    "from": 204,
    "label": "requires",
    "to": 1
  }, {
    "from": 253,
    "label": "requires",
    "to": 1
  }, {
    "from": 240,
    "label": "contains",
    "to": 14
  }, {
    "from": 240,
    "label": "contains",
    "to": 17
  }, {
    "from": 240,
    "label": "contains",
    "to": 19
  }, {
    "from": 240,
    "label": "contains",
    "to": 21
  }, {
    "from": 240,
    "label": "contains",
    "to": 23
  }, {
    "from": 240,
    "label": "contains",
    "to": 25
  }, {
    "from": 240,
    "label": "contains",
    "to": 37
  }, {
    "from": 240,
    "label": "contains",
    "to": 39
  }, {
    "from": 240,
    "label": "contains",
    "to": 41
  }, {
    "from": 240,
    "label": "contains",
    "to": 43
  }, {
    "from": 240,
    "label": "contains",
    "to": 48
  }, {
    "from": 240,
    "label": "contains",
    "to": 57
  }, {
    "from": 240,
    "label": "contains",
    "to": 73
  }, {
    "from": 240,
    "label": "contains",
    "to": 78
  }, {
    "from": 240,
    "label": "contains",
    "to": 80
  }, {
    "from": 240,
    "label": "contains",
    "to": 84
  }, {
    "from": 240,
    "label": "contains",
    "to": 103
  }, {
    "from": 240,
    "label": "contains",
    "to": 106
  }, {
    "from": 240,
    "label": "contains",
    "to": 108
  }, {
    "from": 240,
    "label": "contains",
    "to": 123
  }, {
    "from": 240,
    "label": "contains",
    "to": 125
  }, {
    "from": 240,
    "label": "contains",
    "to": 127
  }, {
    "from": 240,
    "label": "contains",
    "to": 129
  }, {
    "from": 240,
    "label": "contains",
    "to": 137
  }, {
    "from": 240,
    "label": "contains",
    "to": 140
  }, {
    "from": 240,
    "label": "contains",
    "to": 142
  }, {
    "from": 240,
    "label": "contains",
    "to": 145
  }, {
    "from": 240,
    "label": "contains",
    "to": 149
  }, {
    "from": 240,
    "label": "contains",
    "to": 151
  }, {
    "from": 240,
    "label": "contains",
    "to": 166
  }, {
    "from": 240,
    "label": "contains",
    "to": 176
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "stringx",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function assert_string (n,s)\r\n    assert_arg(n,s,'string')\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert_arg(n,s,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function non_empty(s)\r\n    return #s > 0\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function assert_nonempty_string(n,s)\r\n    assert_arg(n,s,'string',non_empty,'must be a non-empty string')\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert_arg(n,s,'string',non_empty,'must be a non-empty string')",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function makelist(l)\r\n    return setmetatable(l, require('pl.List'))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function stringx.isalpha(s)\r\n    assert_string(1,s)\r\n    return find(s,'^%a+$') == 1\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "assert_string(1,s)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function stringx.isdigit(s)\r\n    assert_string(1,s)\r\n    return find(s,'^%d+$') == 1\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function stringx.isalnum(s)\r\n    assert_string(1,s)\r\n    return find(s,'^%w+$') == 1\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function stringx.isspace(s)\r\n    assert_string(1,s)\r\n    return find(s,'^%s+$') == 1\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function stringx.islower(s)\r\n    assert_string(1,s)\r\n    return find(s,'^[%l%s]+$') == 1\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function stringx.isupper(s)\r\n    assert_string(1,s)\r\n    return find(s,'^[%u%s]+$') == 1\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function raw_startswith(s, prefix)\r\n    return find(s,prefix,1,true) == 1\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function raw_endswith(s, suffix)\r\n    return #s >= #suffix and find(s, suffix, #s-#suffix+1, true) and true or false\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function test_affixes(s, affixes, fn)\r\n    if type(affixes) == 'string' then\r\n        return fn(s,affixes)\r\n    elseif type(affixes) == 'table' then\r\n        for _,affix in ipairs(affixes) do\r\n            if fn(s,affix) then return true end\r\n        end\r\n        return false\r\n    else\r\n        error((\"argument #2 expected a 'string' or a 'table', got a '%s'\"):format(type(affixes)))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "if type(affixes) == 'string' then\r\n        return fn(s,affixes)\r\n    elseif type(affixes) == 'table' then\r\n        for _,affix in ipairs(affixes) do\r\n            if fn(s,affix) then return true end\r\n        end\r\n        return false\r\n    else\r\n        error((\"argument #2 expected a 'string' or a 'table', got a '%s'\"):format(type(affixes)))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "for _,affix in ipairs(affixes) do\r\n            if fn(s,affix) then return true end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "if fn(s,affix) then return true end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "error((\"argument #2 expected a 'string' or a 'table', got a '%s'\"):format(type(affixes)))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function stringx.startswith(s,prefix)\r\n    assert_string(1,s)\r\n    return test_affixes(s,prefix,raw_startswith)\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function stringx.endswith(s,suffix)\r\n    assert_string(1,s)\r\n    return test_affixes(s,suffix,raw_endswith)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function stringx.join(s,seq)\r\n    assert_string(1,s)\r\n    return concat(seq,s)\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function stringx.splitlines (s,keepends)\r\n    assert_string(1,s)\r\n    local res = usplit(s,'[\\r\\n]')\r\n    -- we are currently hacking around a problem with utils.split (see stringx.split)\r\n    if #res == 0 then res = {''} end\r\n    return makelist(res)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local res = usplit(s,'[\\r\\n]')",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if #res == 0 then res = {''} end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "res = {''}",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function stringx.split(s,re,n)\r\n    assert_string(1,s)\r\n    local plain = true\r\n    if not re then -- default spaces\r\n        s = lstrip(s)\r\n        plain = false\r\n    end\r\n    local res = usplit(s,re,plain,n)\r\n    if re and re ~= '' and find(s,re,-#re,true) then\r\n        res[#res+1] = \"\"\r\n    end\r\n\treturn makelist(res)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local plain = true",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if not re then -- default spaces\r\n        s = lstrip(s)\r\n        plain = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "s = lstrip(s)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "plain = false",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "local res = usplit(s,re,plain,n)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if re and re ~= '' and find(s,re,-#re,true) then\r\n        res[#res+1] = \"\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "res[#res+1] = \"\"",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function stringx.expandtabs(s,tabsize)\r\n    assert_string(1,s)\r\n    tabsize = tabsize or 8\r\n    return (s:gsub(\"([^\\t\\r\\n]*)\\t\", function(before_tab)\r\n        return before_tab .. (\" \"):rep(tabsize - #before_tab % tabsize)\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "tabsize = tabsize or 8",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "local function _find_all(s,sub,first,last)\r\n    first = first or 1\r\n    last = last or #s\r\n    if sub == '' then return last+1,last-first+1 end\r\n    local i1,i2 = find(s,sub,first,true)\r\n    local res\r\n    local k = 0\r\n    while i1 do\r\n        if last and i2 > last then break end\r\n        res = i1\r\n        k = k + 1\r\n        i1,i2 = find(s,sub,i2+1,true)\r\n    end\r\n    return res,k\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "first = first or 1",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "last = last or #s",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if sub == '' then return last+1,last-first+1 end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local i1,i2 = find(s,sub,first,true)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local k = 0",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "while i1 do\r\n        if last and i2 > last then break end\r\n        res = i1\r\n        k = k + 1\r\n        i1,i2 = find(s,sub,i2+1,true)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 68,
    "text": "if last and i2 > last then break end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "res = i1",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "i1,i2 = find(s,sub,i2+1,true)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function stringx.lfind(s,sub,first,last)\r\n    assert_string(1,s)\r\n    assert_string(2,sub)\r\n    local i1, i2 = find(s,sub,first,true)\r\n\r\n    if i1 and (not last or i2 <= last) then\r\n        return i1\r\n    else\r\n        return nil\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert_string(2,sub)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "local i1, i2 = find(s,sub,first,true)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if i1 and (not last or i2 <= last) then\r\n        return i1\r\n    else\r\n        return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function stringx.rfind(s,sub,first,last)\r\n    assert_string(1,s)\r\n    assert_string(2,sub)\r\n    return (_find_all(s,sub,first,last))\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function stringx.replace(s,old,new,n)\r\n    assert_string(1,s)\r\n    assert_string(2,old)\r\n    assert_string(3,new)\r\n    return (gsub(s,escape(old),new:gsub('%%','%%%%'),n))\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "assert_string(2,old)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert_string(3,new)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function stringx.count(s,sub)\r\n    assert_string(1,s)\r\n    local i,k = _find_all(s,sub,1)\r\n    return k\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local i,k = _find_all(s,sub,1)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "local function _just(s,w,ch,left,right)\r\n    local n = #s\r\n    if w > n then\r\n        if not ch then ch = ' ' end\r\n        local f1,f2\r\n        if left and right then\r\n            local rn = ceil((w-n)/2)\r\n            local ln = w - n - rn\r\n            f1 = rep(ch,ln)\r\n            f2 = rep(ch,rn)\r\n        elseif right then\r\n            f1 = rep(ch,w-n)\r\n            f2 = ''\r\n        else\r\n            f2 = rep(ch,w-n)\r\n            f1 = ''\r\n        end\r\n        return f1..s..f2\r\n    else\r\n        return s\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "local n = #s",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if w > n then\r\n        if not ch then ch = ' ' end\r\n        local f1,f2\r\n        if left and right then\r\n            local rn = ceil((w-n)/2)\r\n            local ln = w - n - rn\r\n            f1 = rep(ch,ln)\r\n            f2 = rep(ch,rn)\r\n        elseif right then\r\n            f1 = rep(ch,w-n)\r\n            f2 = ''\r\n        else\r\n            f2 = rep(ch,w-n)\r\n            f1 = ''\r\n        end\r\n        return f1..s..f2\r\n    else\r\n        return s\r\n    end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "if not ch then ch = ' ' end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "ch = ' '",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local f1,f2",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if left and right then\r\n            local rn = ceil((w-n)/2)\r\n            local ln = w - n - rn\r\n            f1 = rep(ch,ln)\r\n            f2 = rep(ch,rn)\r\n        elseif right then\r\n            f1 = rep(ch,w-n)\r\n            f2 = ''\r\n        else\r\n            f2 = rep(ch,w-n)\r\n            f1 = ''\r\n        end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "local rn = ceil((w-n)/2)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local ln = w - n - rn",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "f1 = rep(ch,ln)",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "f2 = rep(ch,rn)",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "f1 = rep(ch,w-n)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "f2 = ''",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "f2 = rep(ch,w-n)",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "f1 = ''",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function stringx.ljust(s,w,ch)\r\n    assert_string(1,s)\r\n    assert_arg(2,w,'number')\r\n    return _just(s,w,ch,true,false)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "assert_arg(2,w,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function stringx.rjust(s,w,ch)\r\n    assert_string(1,s)\r\n    assert_arg(2,w,'number')\r\n    return _just(s,w,ch,false,true)\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function stringx.center(s,w,ch)\r\n    assert_string(1,s)\r\n    assert_arg(2,w,'number')\r\n    return _just(s,w,ch,true,true)\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "local function _strip(s,left,right,chrs)\r\n    if not chrs then\r\n        chrs = '%s'\r\n    else\r\n        chrs = '['..escape(chrs)..']'\r\n    end\r\n    if left then\r\n        local i1,i2 = find(s,'^'..chrs..'*')\r\n        if i2 >= i1 then\r\n            s = sub(s,i2+1)\r\n        end\r\n    end\r\n    if right then\r\n        local i1,i2 = find(s,chrs..'*$')\r\n        if i2 >= i1 then\r\n            s = sub(s,1,i1-1)\r\n        end\r\n    end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "if not chrs then\r\n        chrs = '%s'\r\n    else\r\n        chrs = '['..escape(chrs)..']'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "chrs = '%s'",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "chrs = '['..escape(chrs)..']'",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "if left then\r\n        local i1,i2 = find(s,'^'..chrs..'*')\r\n        if i2 >= i1 then\r\n            s = sub(s,i2+1)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "local i1,i2 = find(s,'^'..chrs..'*')",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if i2 >= i1 then\r\n            s = sub(s,i2+1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "s = sub(s,i2+1)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "if right then\r\n        local i1,i2 = find(s,chrs..'*$')\r\n        if i2 >= i1 then\r\n            s = sub(s,1,i1-1)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "local i1,i2 = find(s,chrs..'*$')",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if i2 >= i1 then\r\n            s = sub(s,1,i1-1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "s = sub(s,1,i1-1)",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function stringx.lstrip(s,chrs)\r\n    assert_string(1,s)\r\n    return _strip(s,true,false,chrs)\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function stringx.rstrip(s,chrs)\r\n    assert_string(1,s)\r\n    return _strip(s,false,true,chrs)\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function stringx.strip(s,chrs)\r\n    assert_string(1,s)\r\n    return _strip(s,true,true,chrs)\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function stringx.splitv(s,re)\r\n    assert_string(1,s)\r\n    return utils.splitv(s,re)\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "local function _partition(p,delim,fn)\r\n    local i1,i2 = fn(p,delim)\r\n    if not i1 or i1 == -1 then\r\n        return p,'',''\r\n    else\r\n        if not i2 then i2 = i1 end\r\n        return sub(p,1,i1-1),sub(p,i1,i2),sub(p,i2+1)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "local i1,i2 = fn(p,delim)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "if not i1 or i1 == -1 then\r\n        return p,'',''\r\n    else\r\n        if not i2 then i2 = i1 end\r\n        return sub(p,1,i1-1),sub(p,i1,i2),sub(p,i2+1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "if not i2 then i2 = i1 end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "i2 = i1",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function stringx.partition(s,ch)\r\n    assert_string(1,s)\r\n    assert_nonempty_string(2,ch)\r\n    return _partition(s,ch,stringx.lfind)\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "assert_nonempty_string(2,ch)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function stringx.rpartition(s,ch)\r\n    assert_string(1,s)\r\n    assert_nonempty_string(2,ch)\r\n    return _partition(s,ch,stringx.rfind)\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function stringx.at(s,idx)\r\n    assert_string(1,s)\r\n    assert_arg(2,idx,'number')\r\n    return sub(s,idx,idx)\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "assert_arg(2,idx,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function stringx.lines(s)\r\n    assert_string(1,s)\r\n    if not s:find '\\n$' then s = s..'\\n' end\r\n    return s:gmatch('([^\\n]*)\\n')\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "if not s:find '\\n$' then s = s..'\\n' end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "s = s..'\\n'",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function stringx.title(s)\r\n    assert_string(1,s)\r\n    return (s:gsub('(%S)(%S*)',function(f,r)\r\n        return f:upper()..r:lower()\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function stringx.shorten(s,w,tail)\r\n    assert_string(1,s)\r\n    if #s > w then\r\n        if w < n_ellipsis then return ellipsis:sub(1,w) end\r\n        if tail then\r\n            local i = #s - w + 1 + n_ellipsis\r\n            return ellipsis .. s:sub(i)\r\n        else\r\n            return s:sub(1,w-n_ellipsis) .. ellipsis\r\n        end\r\n    end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "if #s > w then\r\n        if w < n_ellipsis then return ellipsis:sub(1,w) end\r\n        if tail then\r\n            local i = #s - w + 1 + n_ellipsis\r\n            return ellipsis .. s:sub(i)\r\n        else\r\n            return s:sub(1,w-n_ellipsis) .. ellipsis\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "if w < n_ellipsis then return ellipsis:sub(1,w) end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "if tail then\r\n            local i = #s - w + 1 + n_ellipsis\r\n            return ellipsis .. s:sub(i)\r\n        else\r\n            return s:sub(1,w-n_ellipsis) .. ellipsis\r\n        end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "local i = #s - w + 1 + n_ellipsis",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "local function has_lquote(s)\r\n    local lstring_pat = '([%[%]])(=*)%1'\r\n    local equals\r\n    local start, finish, bracket, new_equals = nil, 1, nil, nil\r\n\r\n    repeat\r\n        start, finish, bracket, new_equals = s:find(lstring_pat, finish)\r\n        if new_equals then\r\n            equals = max(equals or 0, #new_equals)\r\n        end\r\n    until not new_equals\r\n\r\n    return equals \r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "local lstring_pat = '([%[%]])(=*)%1'",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local equals",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "local start, finish, bracket, new_equals = nil, 1, nil, nil",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "repeat\r\n        start, finish, bracket, new_equals = s:find(lstring_pat, finish)\r\n        if new_equals then\r\n            equals = max(equals or 0, #new_equals)\r\n        end\r\n    until not new_equals",
    "type": "statement:repeat"
  }, {
    "id": 162,
    "text": "start, finish, bracket, new_equals = s:find(lstring_pat, finish)",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "if new_equals then\r\n            equals = max(equals or 0, #new_equals)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "equals = max(equals or 0, #new_equals)",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function stringx.quote_string(s)\r\n    assert_string(1,s)\r\n    -- Find out if there are any embedded long-quote sequences that may cause issues.\r\n    -- This is important when strings are embedded within strings, like when serializing.\r\n    -- Append a closing bracket to catch unfinished long-quote sequences at the end of the string.\r\n    local equal_signs = has_lquote(s .. \"]\")\r\n\r\n    -- Note that strings containing \"\\r\" can't be quoted using long brackets\r\n    -- as Lua lexer converts all newlines to \"\\n\" within long strings.\r\n    if (s:find(\"\\n\") or equal_signs) and not s:find(\"\\r\") then\r\n        -- If there is an embedded sequence that matches a long quote, then\r\n        -- find the one with the maximum number of = signs and add one to that number.\r\n        equal_signs = (\"=\"):rep((equal_signs or -1) + 1)\r\n        -- Long strings strip out leading newline. We want to retain that, when quoting.\r\n        if s:find(\"^\\n\") then s = \"\\n\" .. s end\r\n        local lbracket, rbracket =  \r\n            \"[\" .. equal_signs .. \"[\",  \r\n            \"]\" .. equal_signs .. \"]\"\r\n        s = lbracket .. s .. rbracket\r\n    else\r\n        -- Escape funny stuff. Lua 5.1 does not handle \"\\r\" correctly.\r\n        s = (\"%q\"):format(s):gsub(\"\\r\", \"\\\\r\")\r\n    end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "local equal_signs = has_lquote(s .. \"]\")",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "if (s:find(\"\\n\") or equal_signs) and not s:find(\"\\r\") then\r\n        -- If there is an embedded sequence that matches a long quote, then\r\n        -- find the one with the maximum number of = signs and add one to that number.\r\n        equal_signs = (\"=\"):rep((equal_signs or -1) + 1)\r\n        -- Long strings strip out leading newline. We want to retain that, when quoting.\r\n        if s:find(\"^\\n\") then s = \"\\n\" .. s end\r\n        local lbracket, rbracket =  \r\n            \"[\" .. equal_signs .. \"[\",  \r\n            \"]\" .. equal_signs .. \"]\"\r\n        s = lbracket .. s .. rbracket\r\n    else\r\n        -- Escape funny stuff. Lua 5.1 does not handle \"\\r\" correctly.\r\n        s = (\"%q\"):format(s):gsub(\"\\r\", \"\\\\r\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "equal_signs = (\"=\"):rep((equal_signs or -1) + 1)",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "if s:find(\"^\\n\") then s = \"\\n\" .. s end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "s = \"\\n\" .. s",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "local lbracket, rbracket =  \r\n            \"[\" .. equal_signs .. \"[\",  \r\n            \"]\" .. equal_signs .. \"]\"",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "s = lbracket .. s .. rbracket",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "s = (\"%q\"):format(s):gsub(\"\\r\", \"\\\\r\")",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function stringx.import()\r\n    utils.import(stringx,string)\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "utils.import(stringx,string)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function(before_tab)\r\n        return before_tab .. (\" \"):rep(tabsize - #before_tab % tabsize)\r\n    end",
    "type": "function"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function(f,r)\r\n        return f:upper()..r:lower()\r\n    end",
    "type": "function"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "",
    "type": "function container"
  }, {
    "id": 184,
    "text": "splitv",
    "type": "global function"
  }, {
    "id": 185,
    "text": "import",
    "type": "global function"
  }, {
    "id": 186,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 187,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 188,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 189,
    "text": "escape",
    "type": "global function"
  }, {
    "id": 190,
    "text": "require",
    "type": "global function"
  }, {
    "id": 191,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 192,
    "text": "type",
    "type": "global function"
  }, {
    "id": 193,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 194,
    "text": "find",
    "type": "global function"
  }, {
    "id": 195,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 196,
    "text": "lines",
    "type": "global function"
  }, {
    "id": 197,
    "text": "usplit",
    "type": "global function"
  }, {
    "id": 198,
    "text": "lstrip",
    "type": "global function"
  }, {
    "id": 199,
    "text": "error",
    "type": "global function"
  }, {
    "id": 200,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 201,
    "text": "max",
    "type": "global function"
  }, {
    "id": 202,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 203,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 204,
    "text": "",
    "type": "global variable"
  }, {
    "id": 205,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "variable container"
  }, {
    "id": 208,
    "text": "",
    "type": "require container"
  }, {
    "id": 209,
    "text": "",
    "type": "local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "n/a"
  }, {
    "id": 211,
    "text": "",
    "type": "local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "n/a"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "n/a"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "n/a"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "n/a"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "n/a"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "n/a"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "n/a"
  }, {
    "id": 229,
    "text": "",
    "type": "local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "n/a"
  }, {
    "id": 233,
    "text": "",
    "type": "local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "n/a"
  }, {
    "id": 235,
    "text": "",
    "type": "local variable"
  }, {
    "id": 236,
    "text": "",
    "type": "n/a"
  }, {
    "id": 237,
    "text": "",
    "type": "local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "n/a"
  }, {
    "id": 239,
    "text": "",
    "type": "local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "string"
  }, {
    "id": 244,
    "text": "",
    "type": "local variable"
  }, {
    "id": 245,
    "text": "",
    "type": "unop"
  }, {
    "id": 246,
    "text": "",
    "type": "global variable"
  }, {
    "id": 247,
    "text": "",
    "type": "n/a"
  }, {
    "id": 248,
    "text": "",
    "type": "global variable"
  }, {
    "id": 249,
    "text": "",
    "type": "n/a"
  }, {
    "id": 250,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 251,
    "text": "",
    "type": "interface container"
  }, {
    "id": 252,
    "text": "",
    "type": "interface"
  }, {
    "id": 253,
    "text": "",
    "type": "require local variable"
  } ]
}