{
  "_filename": "utils.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/utils.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 23
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 30,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 23
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 23
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 23
  }, {
    "from": 47,
    "label": "has",
    "to": 23
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 48
  }, {
    "from": 56,
    "label": "has",
    "to": 49
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 23
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 53
  }, {
    "from": 56,
    "label": "has",
    "to": 23
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 49
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 59
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 53
  }, {
    "from": 62,
    "label": "has",
    "to": 23
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 42
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 23
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 68,
    "label": "has",
    "to": 23
  }, {
    "from": 68,
    "label": "has",
    "to": 23
  }, {
    "from": 68,
    "label": "has",
    "to": 23
  }, {
    "from": 68,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 23
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 23
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 93,
    "label": "has",
    "to": 23
  }, {
    "from": 93,
    "label": "has",
    "to": 23
  }, {
    "from": 93,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 100,
    "label": "has",
    "to": 107
  }, {
    "from": 100,
    "label": "has",
    "to": 108
  }, {
    "from": 100,
    "label": "has",
    "to": 109
  }, {
    "from": 100,
    "label": "has",
    "to": 110
  }, {
    "from": 100,
    "label": "has",
    "to": 111
  }, {
    "from": 100,
    "label": "has",
    "to": 112
  }, {
    "from": 100,
    "label": "has",
    "to": 23
  }, {
    "from": 100,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 23
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 23
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 126,
    "label": "has",
    "to": 132
  }, {
    "from": 126,
    "label": "has",
    "to": 133
  }, {
    "from": 126,
    "label": "has",
    "to": 134
  }, {
    "from": 126,
    "label": "has",
    "to": 135
  }, {
    "from": 124,
    "label": "has",
    "to": 23
  }, {
    "from": 124,
    "label": "has",
    "to": 23
  }, {
    "from": 124,
    "label": "has",
    "to": 23
  }, {
    "from": 124,
    "label": "has",
    "to": 23
  }, {
    "from": 124,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 137,
    "label": "has",
    "to": 23
  }, {
    "from": 137,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 141,
    "label": "has",
    "to": 145
  }, {
    "from": 141,
    "label": "has",
    "to": 146
  }, {
    "from": 141,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 141,
    "label": "has",
    "to": 149
  }, {
    "from": 141,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 141,
    "label": "has",
    "to": 152
  }, {
    "from": 141,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 151
  }, {
    "from": 137,
    "label": "has",
    "to": 23
  }, {
    "from": 137,
    "label": "has",
    "to": 23
  }, {
    "from": 137,
    "label": "has",
    "to": 23
  }, {
    "from": 137,
    "label": "has",
    "to": 23
  }, {
    "from": 137,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 137,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 137,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 23
  }, {
    "from": 161,
    "label": "has",
    "to": 23
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 162
  }, {
    "from": 164,
    "label": "has",
    "to": 23
  }, {
    "from": 164,
    "label": "has",
    "to": 23
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 166,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 176,
    "label": "has",
    "to": 180
  }, {
    "from": 175,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 182,
    "label": "has",
    "to": 23
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 23
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 23
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 116
  }, {
    "from": 191,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 191,
    "label": "has",
    "to": 23
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 23
  }, {
    "from": 194,
    "label": "has",
    "to": 23
  }, {
    "from": 15,
    "label": "calls",
    "to": 217
  }, {
    "from": 3,
    "label": "calls",
    "to": 216
  }, {
    "from": 100,
    "label": "calls",
    "to": 199
  }, {
    "from": 100,
    "label": "calls",
    "to": 199
  }, {
    "from": 195,
    "label": "calls",
    "to": 114
  }, {
    "from": 182,
    "label": "calls",
    "to": 3
  }, {
    "from": 195,
    "label": "calls",
    "to": 196
  }, {
    "from": 195,
    "label": "calls",
    "to": 196
  }, {
    "from": 19,
    "label": "calls",
    "to": 196
  }, {
    "from": 114,
    "label": "calls",
    "to": 200
  }, {
    "from": 124,
    "label": "calls",
    "to": 208
  }, {
    "from": 161,
    "label": "calls",
    "to": 208
  }, {
    "from": 164,
    "label": "calls",
    "to": 208
  }, {
    "from": 86,
    "label": "calls",
    "to": 68
  }, {
    "from": 62,
    "label": "calls",
    "to": 197
  }, {
    "from": 68,
    "label": "calls",
    "to": 197
  }, {
    "from": 68,
    "label": "calls",
    "to": 197
  }, {
    "from": 100,
    "label": "calls",
    "to": 204
  }, {
    "from": 100,
    "label": "calls",
    "to": 204
  }, {
    "from": 30,
    "label": "calls",
    "to": 26
  }, {
    "from": 137,
    "label": "calls",
    "to": 166
  }, {
    "from": 172,
    "label": "calls",
    "to": 166
  }, {
    "from": 47,
    "label": "calls",
    "to": 209
  }, {
    "from": 56,
    "label": "calls",
    "to": 209
  }, {
    "from": 62,
    "label": "calls",
    "to": 209
  }, {
    "from": 124,
    "label": "calls",
    "to": 209
  }, {
    "from": 124,
    "label": "calls",
    "to": 209
  }, {
    "from": 124,
    "label": "calls",
    "to": 209
  }, {
    "from": 68,
    "label": "calls",
    "to": 214
  }, {
    "from": 47,
    "label": "calls",
    "to": 182
  }, {
    "from": 175,
    "label": "calls",
    "to": 182
  }, {
    "from": 19,
    "label": "calls",
    "to": 202
  }, {
    "from": 47,
    "label": "calls",
    "to": 218
  }, {
    "from": 56,
    "label": "calls",
    "to": 218
  }, {
    "from": 62,
    "label": "calls",
    "to": 218
  }, {
    "from": 137,
    "label": "calls",
    "to": 221
  }, {
    "from": 137,
    "label": "calls",
    "to": 221
  }, {
    "from": 137,
    "label": "calls",
    "to": 221
  }, {
    "from": 137,
    "label": "calls",
    "to": 221
  }, {
    "from": 137,
    "label": "calls",
    "to": 221
  }, {
    "from": 166,
    "label": "calls",
    "to": 221
  }, {
    "from": 166,
    "label": "calls",
    "to": 221
  }, {
    "from": 182,
    "label": "calls",
    "to": 221
  }, {
    "from": 68,
    "label": "calls",
    "to": 222
  }, {
    "from": 68,
    "label": "calls",
    "to": 222
  }, {
    "from": 68,
    "label": "calls",
    "to": 222
  }, {
    "from": 137,
    "label": "calls",
    "to": 205
  }, {
    "from": 100,
    "label": "calls",
    "to": 47
  }, {
    "from": 100,
    "label": "calls",
    "to": 47
  }, {
    "from": 124,
    "label": "calls",
    "to": 198
  }, {
    "from": 100,
    "label": "calls",
    "to": 93
  }, {
    "from": 100,
    "label": "calls",
    "to": 93
  }, {
    "from": 3,
    "label": "calls",
    "to": 15
  }, {
    "from": 3,
    "label": "calls",
    "to": 15
  }, {
    "from": 11,
    "label": "calls",
    "to": 15
  }, {
    "from": 19,
    "label": "calls",
    "to": 15
  }, {
    "from": 30,
    "label": "calls",
    "to": 19
  }, {
    "from": 195,
    "label": "calls",
    "to": 206
  }, {
    "from": 30,
    "label": "calls",
    "to": 206
  }, {
    "from": 137,
    "label": "calls",
    "to": 206
  }, {
    "from": 86,
    "label": "calls",
    "to": 212
  }, {
    "from": 161,
    "label": "calls",
    "to": 137
  }, {
    "from": 164,
    "label": "calls",
    "to": 137
  }, {
    "from": 137,
    "label": "calls",
    "to": 203
  }, {
    "from": 100,
    "label": "calls",
    "to": 219
  }, {
    "from": 88,
    "label": "calls",
    "to": 211
  }, {
    "from": 175,
    "label": "calls",
    "to": 207
  }, {
    "from": 100,
    "label": "calls",
    "to": 215
  }, {
    "from": 100,
    "label": "calls",
    "to": 215
  }, {
    "from": 26,
    "label": "calls",
    "to": 220
  }, {
    "from": 30,
    "label": "calls",
    "to": 220
  }, {
    "from": 3,
    "label": "calls",
    "to": 210
  }, {
    "from": 30,
    "label": "calls",
    "to": 210
  }, {
    "from": 137,
    "label": "calls",
    "to": 210
  }, {
    "from": 166,
    "label": "calls",
    "to": 210
  }, {
    "from": 166,
    "label": "calls",
    "to": 210
  }, {
    "from": 187,
    "label": "calls",
    "to": 210
  }, {
    "from": 187,
    "label": "calls",
    "to": 210
  }, {
    "from": 137,
    "label": "calls",
    "to": 224
  }, {
    "from": 187,
    "label": "calls",
    "to": 224
  }, {
    "from": 166,
    "label": "calls",
    "to": 223
  }, {
    "from": 11,
    "label": "calls",
    "to": 172
  }, {
    "from": 15,
    "label": "calls",
    "to": 172
  }, {
    "from": 41,
    "label": "calls",
    "to": 172
  }, {
    "from": 47,
    "label": "calls",
    "to": 172
  }, {
    "from": 56,
    "label": "calls",
    "to": 172
  }, {
    "from": 56,
    "label": "calls",
    "to": 172
  }, {
    "from": 62,
    "label": "calls",
    "to": 172
  }, {
    "from": 68,
    "label": "calls",
    "to": 172
  }, {
    "from": 2,
    "label": "contains",
    "to": 195
  }, {
    "from": 195,
    "label": "declares",
    "to": 3
  }, {
    "from": 195,
    "label": "declares",
    "to": 11
  }, {
    "from": 195,
    "label": "declares",
    "to": 15
  }, {
    "from": 195,
    "label": "declares",
    "to": 19
  }, {
    "from": 195,
    "label": "declares",
    "to": 26
  }, {
    "from": 195,
    "label": "declares",
    "to": 30
  }, {
    "from": 195,
    "label": "declares",
    "to": 41
  }, {
    "from": 195,
    "label": "declares",
    "to": 44
  }, {
    "from": 195,
    "label": "declares",
    "to": 47
  }, {
    "from": 195,
    "label": "declares",
    "to": 56
  }, {
    "from": 195,
    "label": "declares",
    "to": 62
  }, {
    "from": 195,
    "label": "declares",
    "to": 68
  }, {
    "from": 195,
    "label": "declares",
    "to": 86
  }, {
    "from": 195,
    "label": "declares",
    "to": 88
  }, {
    "from": 195,
    "label": "declares",
    "to": 93
  }, {
    "from": 195,
    "label": "declares",
    "to": 100
  }, {
    "from": 195,
    "label": "declares",
    "to": 114
  }, {
    "from": 195,
    "label": "declares",
    "to": 121
  }, {
    "from": 195,
    "label": "declares",
    "to": 124
  }, {
    "from": 195,
    "label": "declares",
    "to": 137
  }, {
    "from": 195,
    "label": "declares",
    "to": 161
  }, {
    "from": 195,
    "label": "declares",
    "to": 164
  }, {
    "from": 195,
    "label": "declares",
    "to": 166
  }, {
    "from": 195,
    "label": "declares",
    "to": 172
  }, {
    "from": 195,
    "label": "declares",
    "to": 175
  }, {
    "from": 195,
    "label": "declares",
    "to": 182
  }, {
    "from": 195,
    "label": "declares",
    "to": 187
  }, {
    "from": 195,
    "label": "declares",
    "to": 191
  }, {
    "from": 195,
    "label": "declares",
    "to": 193
  }, {
    "from": 195,
    "label": "declares",
    "to": 194
  }, {
    "from": 2,
    "label": "declares",
    "to": 198
  }, {
    "from": 2,
    "label": "declares",
    "to": 201
  }, {
    "from": 2,
    "label": "declares",
    "to": 203
  }, {
    "from": 2,
    "label": "declares",
    "to": 213
  }, {
    "from": 2,
    "label": "declares",
    "to": 219
  }, {
    "from": 225,
    "label": "requires",
    "to": 2
  }, {
    "from": 226,
    "label": "requires",
    "to": 2
  }, {
    "from": 227,
    "label": "requires",
    "to": 2
  }, {
    "from": 228,
    "label": "requires",
    "to": 2
  }, {
    "from": 229,
    "label": "requires",
    "to": 2
  }, {
    "from": 230,
    "label": "requires",
    "to": 2
  }, {
    "from": 231,
    "label": "requires",
    "to": 2
  }, {
    "from": 232,
    "label": "requires",
    "to": 2
  }, {
    "from": 233,
    "label": "requires",
    "to": 2
  }, {
    "from": 234,
    "label": "requires",
    "to": 2
  }, {
    "from": 235,
    "label": "requires",
    "to": 2
  }, {
    "from": 236,
    "label": "requires",
    "to": 2
  }, {
    "from": 237,
    "label": "requires",
    "to": 2
  }, {
    "from": 238,
    "label": "requires",
    "to": 2
  }, {
    "from": 239,
    "label": "requires",
    "to": 2
  }, {
    "from": 240,
    "label": "requires",
    "to": 2
  }, {
    "from": 241,
    "label": "requires",
    "to": 2
  }, {
    "from": 242,
    "label": "requires",
    "to": 2
  }, {
    "from": 243,
    "label": "requires",
    "to": 2
  }, {
    "from": 244,
    "label": "requires",
    "to": 2
  }, {
    "from": 245,
    "label": "requires",
    "to": 2
  }, {
    "from": 246,
    "label": "requires",
    "to": 2
  }, {
    "from": 247,
    "label": "requires",
    "to": 2
  }, {
    "from": 248,
    "label": "requires",
    "to": 2
  }, {
    "from": 249,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 250
  }, {
    "from": 2,
    "label": "contains",
    "to": 251
  }, {
    "from": 250,
    "label": "initializes",
    "to": 252
  }, {
    "from": 252,
    "label": "assigns",
    "to": 253
  }, {
    "from": 250,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 250,
    "label": "initializes",
    "to": 256
  }, {
    "from": 256,
    "label": "assigns",
    "to": 257
  }, {
    "from": 250,
    "label": "initializes",
    "to": 258
  }, {
    "from": 258,
    "label": "assigns",
    "to": 259
  }, {
    "from": 250,
    "label": "initializes",
    "to": 260
  }, {
    "from": 260,
    "label": "assigns",
    "to": 261
  }, {
    "from": 250,
    "label": "initializes",
    "to": 262
  }, {
    "from": 262,
    "label": "assigns",
    "to": 263
  }, {
    "from": 250,
    "label": "initializes",
    "to": 264
  }, {
    "from": 264,
    "label": "assigns",
    "to": 265
  }, {
    "from": 250,
    "label": "initializes",
    "to": 266
  }, {
    "from": 266,
    "label": "assigns",
    "to": 267
  }, {
    "from": 250,
    "label": "initializes",
    "to": 268
  }, {
    "from": 268,
    "label": "assigns",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 270,
    "label": "assigns",
    "to": 271
  }, {
    "from": 269,
    "label": "assigns",
    "to": 272
  }, {
    "from": 272,
    "label": "assigns",
    "to": 273
  }, {
    "from": 269,
    "label": "assigns",
    "to": 274
  }, {
    "from": 274,
    "label": "assigns",
    "to": 275
  }, {
    "from": 269,
    "label": "assigns",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 269,
    "label": "assigns",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 269,
    "label": "assigns",
    "to": 280
  }, {
    "from": 280,
    "label": "assigns",
    "to": 281
  }, {
    "from": 269,
    "label": "assigns",
    "to": 282
  }, {
    "from": 282,
    "label": "assigns",
    "to": 283
  }, {
    "from": 269,
    "label": "assigns",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 250,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 250,
    "label": "initializes",
    "to": 288
  }, {
    "from": 250,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 250,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 250,
    "label": "initializes",
    "to": 293
  }, {
    "from": 250,
    "label": "initializes",
    "to": 294
  }, {
    "from": 294,
    "label": "assigns",
    "to": 295
  }, {
    "from": 250,
    "label": "initializes",
    "to": 296
  }, {
    "from": 296,
    "label": "assigns",
    "to": 297
  }, {
    "from": 250,
    "label": "initializes",
    "to": 298
  }, {
    "from": 298,
    "label": "assigns",
    "to": 299
  }, {
    "from": 250,
    "label": "initializes",
    "to": 300
  }, {
    "from": 300,
    "label": "assigns",
    "to": 301
  }, {
    "from": 250,
    "label": "initializes",
    "to": 302
  }, {
    "from": 302,
    "label": "assigns",
    "to": 303
  }, {
    "from": 251,
    "label": "initializes",
    "to": 304
  }, {
    "from": 304,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 305
  }, {
    "from": 268,
    "label": "represents",
    "to": 306
  }, {
    "from": 305,
    "label": "provides",
    "to": 306
  }, {
    "from": 307,
    "label": "requires",
    "to": 2
  }, {
    "from": 308,
    "label": "requires",
    "to": 2
  }, {
    "from": 309,
    "label": "requires",
    "to": 2
  }, {
    "from": 310,
    "label": "requires",
    "to": 2
  }, {
    "from": 311,
    "label": "requires",
    "to": 2
  }, {
    "from": 312,
    "label": "requires",
    "to": 2
  }, {
    "from": 313,
    "label": "requires",
    "to": 2
  }, {
    "from": 314,
    "label": "requires",
    "to": 2
  }, {
    "from": 315,
    "label": "requires",
    "to": 2
  }, {
    "from": 316,
    "label": "requires",
    "to": 2
  }, {
    "from": 317,
    "label": "requires",
    "to": 2
  }, {
    "from": 318,
    "label": "requires",
    "to": 2
  }, {
    "from": 319,
    "label": "requires",
    "to": 2
  }, {
    "from": 320,
    "label": "requires",
    "to": 2
  }, {
    "from": 321,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "compat",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "function utils.quit(code,...)\r\n    if type(code) == 'string' then\r\n        utils.fprintf(io.stderr,code,...)\r\n        code = -1\r\n    else\r\n        utils.fprintf(io.stderr,...)\r\n    end\r\n    io.stderr:write('\\n')\r\n    os.exit(code)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if type(code) == 'string' then\r\n        utils.fprintf(io.stderr,code,...)\r\n        code = -1\r\n    else\r\n        utils.fprintf(io.stderr,...)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "utils.fprintf(io.stderr,code,...)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "code = -1",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "utils.fprintf(io.stderr,...)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "io.stderr:write('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "os.exit(code)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function utils.printf(fmt,...)\r\n    utils.assert_string(1,fmt)\r\n    utils.fprintf(stdout,fmt,...)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "utils.assert_string(1,fmt)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "utils.fprintf(stdout,fmt,...)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function utils.fprintf(f,fmt,...)\r\n    utils.assert_string(2,fmt)\r\n    f:write(format(fmt,...))\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "utils.assert_string(2,fmt)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "f:write(format(fmt,...))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function import_symbol(T,k,v,libname)\r\n    local key = rawget(T,k)\r\n    -- warn about collisions!\r\n    if key and k ~= '_M' and k ~= '_NAME' and k ~= '_PACKAGE' and k ~= '_VERSION' then\r\n        utils.fprintf(io.stderr,\"warning: '%s.%s' will not override existing symbol\\n\",libname,k)\r\n        return\r\n    end\r\n    rawset(T,k,v)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local key = rawget(T,k)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if key and k ~= '_M' and k ~= '_NAME' and k ~= '_PACKAGE' and k ~= '_VERSION' then\r\n        utils.fprintf(io.stderr,\"warning: '%s.%s' will not override existing symbol\\n\",libname,k)\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "utils.fprintf(io.stderr,\"warning: '%s.%s' will not override existing symbol\\n\",libname,k)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 24,
    "text": "rawset(T,k,v)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function lookup_lib(T,t)\r\n    for k,v in pairs(T) do\r\n        if v == t then return k end\r\n    end\r\n    return '?'\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "for k,v in pairs(T) do\r\n        if v == t then return k end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "if v == t then return k end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function utils.import(t,T)\r\n    T = T or _G\r\n    t = t or utils\r\n    if type(t) == 'string' then\r\n        t = require (t)\r\n    end\r\n    local libname = lookup_lib(T,t)\r\n    if already_imported[t] then return end\r\n    already_imported[t] = libname\r\n    for k,v in pairs(t) do\r\n        import_symbol(T,k,v,libname)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "T = T or _G",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "t = t or utils",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if type(t) == 'string' then\r\n        t = require (t)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "t = require (t)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local libname = lookup_lib(T,t)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if already_imported[t] then return end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "already_imported[t] = libname",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "for k,v in pairs(t) do\r\n        import_symbol(T,k,v,libname)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "import_symbol(T,k,v,libname)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function utils.escape(s)\r\n    utils.assert_string(1,s)\r\n    return (s:gsub('[%-%.%+%[%]%(%)%$%^%%%?%*]','%%%1'))\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "utils.assert_string(1,s)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function utils.choose(cond,value1,value2)\r\n    if cond then return value1\r\n    else return value2\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "if cond then return value1\r\n    else return value2\r\n    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function utils.readfile(filename,is_bin)\r\n    local mode = is_bin and 'b' or ''\r\n    utils.assert_string(1,filename)\r\n    local f,open_err = io.open(filename,'r'..mode)\r\n    if not f then return utils.raise (open_err) end\r\n    local res,read_err = f:read('*a')\r\n    f:close()\r\n    if not res then\r\n        -- Errors in io.open have \"filename: \" prefix,\r\n        -- error in file:read don't, add it.\r\n        return raise (filename..\": \"..read_err)\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local mode = is_bin and 'b' or ''",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "utils.assert_string(1,filename)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "local f,open_err = io.open(filename,'r'..mode)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if not f then return utils.raise (open_err) end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "local res,read_err = f:read('*a')",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "if not res then\r\n        -- Errors in io.open have \"filename: \" prefix,\r\n        -- error in file:read don't, add it.\r\n        return raise (filename..\": \"..read_err)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function utils.writefile(filename,str,is_bin)\r\n    local mode = is_bin and 'b' or ''\r\n    utils.assert_string(1,filename)\r\n    utils.assert_string(2,str)\r\n    local f,err = io.open(filename,'w'..mode)\r\n    if not f then return raise(err) end\r\n    f:write(str)\r\n    f:close()\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "utils.assert_string(2,str)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "local f,err = io.open(filename,'w'..mode)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if not f then return raise(err) end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "f:write(str)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function utils.readlines(filename)\r\n    utils.assert_string(1,filename)\r\n    local f,err = io.open(filename,'r')\r\n    if not f then return raise(err) end\r\n    local res = {}\r\n    for line in f:lines() do\r\n        append(res,line)\r\n    end\r\n    f:close()\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local f,err = io.open(filename,'r')",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "for line in f:lines() do\r\n        append(res,line)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 66,
    "text": "append(res,line)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function utils.split(s,re,plain,n)\r\n    utils.assert_string(1,s)\r\n    local find,sub,append = string.find, string.sub, table.insert\r\n    local i1,ls = 1,{}\r\n    if not re then re = '%s+' end\r\n    if re == '' then return {s} end\r\n    while true do\r\n        local i2,i3 = find(s,re,i1,plain)\r\n        if not i2 then\r\n            local last = sub(s,i1)\r\n            if last ~= '' then append(ls,last) end\r\n            if #ls == 1 and ls[1] == '' then\r\n                return {}\r\n            else\r\n                return ls\r\n            end\r\n        end\r\n        append(ls,sub(s,i1,i2-1))\r\n        if n and #ls == n then\r\n            ls[#ls] = sub(s,i1)\r\n            return ls\r\n        end\r\n        i1 = i3+1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local find,sub,append = string.find, string.sub, table.insert",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local i1,ls = 1,{}",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if not re then re = '%s+' end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "re = '%s+'",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if re == '' then return {s} end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "while true do\r\n        local i2,i3 = find(s,re,i1,plain)\r\n        if not i2 then\r\n            local last = sub(s,i1)\r\n            if last ~= '' then append(ls,last) end\r\n            if #ls == 1 and ls[1] == '' then\r\n                return {}\r\n            else\r\n                return ls\r\n            end\r\n        end\r\n        append(ls,sub(s,i1,i2-1))\r\n        if n and #ls == n then\r\n            ls[#ls] = sub(s,i1)\r\n            return ls\r\n        end\r\n        i1 = i3+1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 75,
    "text": "local i2,i3 = find(s,re,i1,plain)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if not i2 then\r\n            local last = sub(s,i1)\r\n            if last ~= '' then append(ls,last) end\r\n            if #ls == 1 and ls[1] == '' then\r\n                return {}\r\n            else\r\n                return ls\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "local last = sub(s,i1)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if last ~= '' then append(ls,last) end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "append(ls,last)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "if #ls == 1 and ls[1] == '' then\r\n                return {}\r\n            else\r\n                return ls\r\n            end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "append(ls,sub(s,i1,i2-1))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "if n and #ls == n then\r\n            ls[#ls] = sub(s,i1)\r\n            return ls\r\n        end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "ls[#ls] = sub(s,i1)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "i1 = i3+1",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function utils.splitv (s,re)\r\n    return unpack(utils.split(s,re))\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function utils.array_tostring (t,temp,tostr)\r\n    temp, tostr = temp or {}, tostr or tostring\r\n    for i = 1,#t do\r\n        temp[i] = tostr(t[i],i)\r\n    end\r\n    return temp\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "temp, tostr = temp or {}, tostr or tostring",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "for i = 1,#t do\r\n        temp[i] = tostr(t[i],i)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 91,
    "text": "temp[i] = tostr(t[i],i)",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function utils.quote_arg(argument)\r\n    if is_windows then\r\n        if argument == \"\" or argument:find('[ \\f\\t\\v]') then\r\n            -- Need to quote the argument.\r\n            -- Quotes need to be escaped with backslashes;\r\n            -- additionally, backslashes before a quote, escaped or not,\r\n            -- need to be doubled.\r\n            -- See documentation for CommandLineToArgvW Windows function.\r\n            argument = '\"' .. argument:gsub([[(\\*)\"]], [[%1%1\\\"]]):gsub([[\\+$]], \"%0%0\") .. '\"'\r\n        end\r\n\r\n        -- os.execute() uses system() C function, which on Windows passes command\r\n        -- to cmd.exe. Escape its special characters.\r\n        return (argument:gsub('[\"^<>!|&%%]', \"^%0\"))\r\n    else\r\n        if argument == \"\" or argument:find('[^a-zA-Z0-9_@%+=:,./-]') then\r\n            -- To quote arguments on posix-like systems use single quotes.\r\n            -- To represent an embedded single quote close quoted string ('),\r\n            -- add escaped quote (\\'), open quoted string again (').\r\n            argument = \"'\" .. argument:gsub(\"'\", [['\\'']]) .. \"'\"\r\n        end\r\n\r\n        return argument\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "if is_windows then\r\n        if argument == \"\" or argument:find('[ \\f\\t\\v]') then\r\n            -- Need to quote the argument.\r\n            -- Quotes need to be escaped with backslashes;\r\n            -- additionally, backslashes before a quote, escaped or not,\r\n            -- need to be doubled.\r\n            -- See documentation for CommandLineToArgvW Windows function.\r\n            argument = '\"' .. argument:gsub([[(\\*)\"]], [[%1%1\\\"]]):gsub([[\\+$]], \"%0%0\") .. '\"'\r\n        end\r\n\r\n        -- os.execute() uses system() C function, which on Windows passes command\r\n        -- to cmd.exe. Escape its special characters.\r\n        return (argument:gsub('[\"^<>!|&%%]', \"^%0\"))\r\n    else\r\n        if argument == \"\" or argument:find('[^a-zA-Z0-9_@%+=:,./-]') then\r\n            -- To quote arguments on posix-like systems use single quotes.\r\n            -- To represent an embedded single quote close quoted string ('),\r\n            -- add escaped quote (\\'), open quoted string again (').\r\n            argument = \"'\" .. argument:gsub(\"'\", [['\\'']]) .. \"'\"\r\n        end\r\n\r\n        return argument\r\n    end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "if argument == \"\" or argument:find('[ \\f\\t\\v]') then\r\n            -- Need to quote the argument.\r\n            -- Quotes need to be escaped with backslashes;\r\n            -- additionally, backslashes before a quote, escaped or not,\r\n            -- need to be doubled.\r\n            -- See documentation for CommandLineToArgvW Windows function.\r\n            argument = '\"' .. argument:gsub([[(\\*)\"]], [[%1%1\\\"]]):gsub([[\\+$]], \"%0%0\") .. '\"'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "argument = '\"' .. argument:gsub([[(\\*)\"]], [[%1%1\\\"]]):gsub([[\\+$]], \"%0%0\") .. '\"'",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if argument == \"\" or argument:find('[^a-zA-Z0-9_@%+=:,./-]') then\r\n            -- To quote arguments on posix-like systems use single quotes.\r\n            -- To represent an embedded single quote close quoted string ('),\r\n            -- add escaped quote (\\'), open quoted string again (').\r\n            argument = \"'\" .. argument:gsub(\"'\", [['\\'']]) .. \"'\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "argument = \"'\" .. argument:gsub(\"'\", [['\\'']]) .. \"'\"",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function utils.executeex(cmd, bin)\r\n    local mode\r\n    local outfile = os.tmpname()\r\n    local errfile = os.tmpname()\r\n\r\n    if is_windows and not outfile:find(':') then\r\n        outfile = os.getenv('TEMP')..outfile\r\n        errfile = os.getenv('TEMP')..errfile\r\n    end\r\n    cmd = cmd .. \" > \" .. utils.quote_arg(outfile) .. \" 2> \" .. utils.quote_arg(errfile)\r\n\r\n    local success, retcode = utils.execute(cmd)\r\n    local outcontent = utils.readfile(outfile, bin)\r\n    local errcontent = utils.readfile(errfile, bin)\r\n    os.remove(outfile)\r\n    os.remove(errfile)\r\n    return success, retcode, (outcontent or \"\"), (errcontent or \"\")\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "local mode",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local outfile = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local errfile = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "if is_windows and not outfile:find(':') then\r\n        outfile = os.getenv('TEMP')..outfile\r\n        errfile = os.getenv('TEMP')..errfile\r\n    end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "outfile = os.getenv('TEMP')..outfile",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "errfile = os.getenv('TEMP')..errfile",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "cmd = cmd .. \" > \" .. utils.quote_arg(outfile) .. \" 2> \" .. utils.quote_arg(errfile)",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "local success, retcode = utils.execute(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local outcontent = utils.readfile(outfile, bin)",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local errcontent = utils.readfile(errfile, bin)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "os.remove(outfile)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "os.remove(errfile)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function utils.memoize(func)\r\n    local cache = {}\r\n    return function(k)\r\n        local res = cache[k]\r\n        if res == nil then\r\n            res = func(k)\r\n            cache[k] = res\r\n        end\r\n        return res\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "local cache = {}",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "local res = cache[k]",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if res == nil then\r\n            res = func(k)\r\n            cache[k] = res\r\n        end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "res = func(k)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "cache[k] = res",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function utils.add_function_factory (mt,fun)\r\n    _function_factories[mt] = fun\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "_function_factories[mt] = fun",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "local function _string_lambda(f)\r\n    local raise = utils.raise\r\n    if f:find '^|' or f:find '_' then\r\n        local args,body = f:match '|([^|]*)|(.+)'\r\n        if f:find '_' then\r\n            args = '_'\r\n            body = f\r\n        else\r\n            if not args then return raise 'bad string lambda' end\r\n        end\r\n        local fstr = 'return function('..args..') return '..body..' end'\r\n        local fn,err = utils.load(fstr)\r\n        if not fn then return raise(err) end\r\n        fn = fn()\r\n        return fn\r\n    else return raise 'not a string lambda'\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local raise = utils.raise",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if f:find '^|' or f:find '_' then\r\n        local args,body = f:match '|([^|]*)|(.+)'\r\n        if f:find '_' then\r\n            args = '_'\r\n            body = f\r\n        else\r\n            if not args then return raise 'bad string lambda' end\r\n        end\r\n        local fstr = 'return function('..args..') return '..body..' end'\r\n        local fn,err = utils.load(fstr)\r\n        if not fn then return raise(err) end\r\n        fn = fn()\r\n        return fn\r\n    else return raise 'not a string lambda'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "local args,body = f:match '|([^|]*)|(.+)'",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "if f:find '_' then\r\n            args = '_'\r\n            body = f\r\n        else\r\n            if not args then return raise 'bad string lambda' end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "args = '_'",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "body = f",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "if not args then return raise 'bad string lambda' end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "local fstr = 'return function('..args..') return '..body..' end'",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local fn,err = utils.load(fstr)",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "if not fn then return raise(err) end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "fn = fn()",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function utils.function_arg (idx,f,msg)\r\n    utils.assert_arg(1,idx,'number')\r\n    local tp = type(f)\r\n    if tp == 'function' then return f end  -- no worries!\r\n    -- ok, a string can correspond to an operator (like '==')\r\n    if tp == 'string' then\r\n        if not ops then ops = require 'pl.operator'.optable end\r\n        local fn = ops[f]\r\n        if fn then return fn end\r\n        local fn, err = utils.string_lambda(f)\r\n        if not fn then error(err..': '..f) end\r\n        return fn\r\n    elseif tp == 'table' or tp == 'userdata' then\r\n        local mt = getmetatable(f)\r\n        if not mt then error('not a callable object',2) end\r\n        local ff = _function_factories[mt]\r\n        if not ff then\r\n            if not mt.__call then error('not a callable object',2) end\r\n            return f\r\n        else\r\n            return ff(f) -- we have a function factory for this type!\r\n        end\r\n    end\r\n    if not msg then msg = \" must be callable\" end\r\n    if idx > 0 then\r\n        error(\"argument \"..idx..\": \"..msg,2)\r\n    else\r\n        error(msg,2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "utils.assert_arg(1,idx,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "local tp = type(f)",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if tp == 'function' then return f end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "if tp == 'string' then\r\n        if not ops then ops = require 'pl.operator'.optable end\r\n        local fn = ops[f]\r\n        if fn then return fn end\r\n        local fn, err = utils.string_lambda(f)\r\n        if not fn then error(err..': '..f) end\r\n        return fn\r\n    elseif tp == 'table' or tp == 'userdata' then\r\n        local mt = getmetatable(f)\r\n        if not mt then error('not a callable object',2) end\r\n        local ff = _function_factories[mt]\r\n        if not ff then\r\n            if not mt.__call then error('not a callable object',2) end\r\n            return f\r\n        else\r\n            return ff(f) -- we have a function factory for this type!\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "if not ops then ops = require 'pl.operator'.optable end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "ops = require 'pl.operator'.optable",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "local fn = ops[f]",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "if fn then return fn end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "local fn, err = utils.string_lambda(f)",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "if not fn then error(err..': '..f) end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "error(err..': '..f)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "local mt = getmetatable(f)",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "if not mt then error('not a callable object',2) end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "error('not a callable object',2)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "local ff = _function_factories[mt]",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "if not ff then\r\n            if not mt.__call then error('not a callable object',2) end\r\n            return f\r\n        else\r\n            return ff(f) -- we have a function factory for this type!\r\n        end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "if not mt.__call then error('not a callable object',2) end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "if not msg then msg = \" must be callable\" end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "msg = \" must be callable\"",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "if idx > 0 then\r\n        error(\"argument \"..idx..\": \"..msg,2)\r\n    else\r\n        error(msg,2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "error(\"argument \"..idx..\": \"..msg,2)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "error(msg,2)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function utils.bind1 (fn,p)\r\n    fn = utils.function_arg(1,fn)\r\n    return function(...) return fn(p,...) end\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "fn = utils.function_arg(1,fn)",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function utils.bind2 (fn,p)\r\n    fn = utils.function_arg(1,fn)\r\n    return function(x,...) return fn(x,p,...) end\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function utils.assert_arg (n,val,tp,verify,msg,lev)\r\n    if type(val) ~= tp then\r\n        error((\"argument %d expected a '%s', got a '%s'\"):format(n,tp,type(val)),lev or 2)\r\n    end\r\n    if verify and not verify(val) then\r\n        error((\"argument %d: '%s' %s\"):format(n,val,msg),lev or 2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "if type(val) ~= tp then\r\n        error((\"argument %d expected a '%s', got a '%s'\"):format(n,tp,type(val)),lev or 2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "error((\"argument %d expected a '%s', got a '%s'\"):format(n,tp,type(val)),lev or 2)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "if verify and not verify(val) then\r\n        error((\"argument %d: '%s' %s\"):format(n,val,msg),lev or 2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "error((\"argument %d: '%s' %s\"):format(n,val,msg),lev or 2)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function utils.assert_string (n,val)\r\n    utils.assert_arg(n,val,'string',nil,nil,3)\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "utils.assert_arg(n,val,'string',nil,nil,3)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function utils.on_error (mode)\r\n    if ({['default'] = 1, ['quit'] = 2, ['error'] = 3})[mode] then\r\n      err_mode = mode\r\n    else\r\n      -- fail loudly\r\n      if err_mode == 'default' then err_mode = 'error' end\r\n      utils.raise(\"Bad argument expected string; 'default', 'quit', or 'error'. Got '\"..tostring(mode)..\"'\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "if ({['default'] = 1, ['quit'] = 2, ['error'] = 3})[mode] then\r\n      err_mode = mode\r\n    else\r\n      -- fail loudly\r\n      if err_mode == 'default' then err_mode = 'error' end\r\n      utils.raise(\"Bad argument expected string; 'default', 'quit', or 'error'. Got '\"..tostring(mode)..\"'\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "err_mode = mode",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "if err_mode == 'default' then err_mode = 'error' end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "err_mode = 'error'",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "utils.raise(\"Bad argument expected string; 'default', 'quit', or 'error'. Got '\"..tostring(mode)..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "function utils.raise (err)\r\n    if err_mode == 'default' then return nil,err\r\n    elseif err_mode == 'quit' then utils.quit(err)\r\n    else error(err,2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "if err_mode == 'default' then return nil,err\r\n    elseif err_mode == 'quit' then utils.quit(err)\r\n    else error(err,2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "utils.quit(err)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "error(err,2)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function utils.is_type (obj,tp)\r\n    if type(tp) == 'string' then return type(obj) == tp end\r\n    local mt = getmetatable(obj)\r\n    return tp == mt\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "if type(tp) == 'string' then return type(obj) == tp end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "local mt = getmetatable(obj)",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function(k)\r\n        local res = cache[k]\r\n        if res == nil then\r\n            res = func(k)\r\n            cache[k] = res\r\n        end\r\n        return res\r\n    end",
    "type": "function"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function(...) return fn(p,...) end",
    "type": "function"
  }, {
    "id": 194,
    "text": "function(x,...) return fn(x,p,...) end",
    "type": "function"
  }, {
    "id": 195,
    "text": "",
    "type": "function container"
  }, {
    "id": 196,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 197,
    "text": "append",
    "type": "global function"
  }, {
    "id": 198,
    "text": "load",
    "type": "global function"
  }, {
    "id": 199,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 200,
    "text": "func",
    "type": "global function"
  }, {
    "id": 201,
    "text": "import",
    "type": "global function"
  }, {
    "id": 202,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 203,
    "text": "string_lambda",
    "type": "global function"
  }, {
    "id": 204,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 205,
    "text": "ff",
    "type": "global function"
  }, {
    "id": 206,
    "text": "require",
    "type": "global function"
  }, {
    "id": 207,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 208,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 209,
    "text": "raise",
    "type": "global function"
  }, {
    "id": 210,
    "text": "type",
    "type": "global function"
  }, {
    "id": 211,
    "text": "tostr",
    "type": "global function"
  }, {
    "id": 212,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 213,
    "text": "split",
    "type": "global function"
  }, {
    "id": 214,
    "text": "find",
    "type": "global function"
  }, {
    "id": 215,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 216,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 217,
    "text": "format",
    "type": "global function"
  }, {
    "id": 218,
    "text": "open",
    "type": "global function"
  }, {
    "id": 219,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 220,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 221,
    "text": "error",
    "type": "global function"
  }, {
    "id": 222,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 223,
    "text": "verify",
    "type": "global function"
  }, {
    "id": 224,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 225,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 236,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 242,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 244,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 245,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 246,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 247,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 248,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 249,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 250,
    "text": "",
    "type": "variable container"
  }, {
    "id": 251,
    "text": "",
    "type": "require container"
  }, {
    "id": 252,
    "text": "",
    "type": "local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "n/a"
  }, {
    "id": 254,
    "text": "",
    "type": "local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "n/a"
  }, {
    "id": 256,
    "text": "",
    "type": "local variable"
  }, {
    "id": 257,
    "text": "",
    "type": "n/a"
  }, {
    "id": 258,
    "text": "",
    "type": "local variable"
  }, {
    "id": 259,
    "text": "",
    "type": "n/a"
  }, {
    "id": 260,
    "text": "",
    "type": "local variable"
  }, {
    "id": 261,
    "text": "",
    "type": "n/a"
  }, {
    "id": 262,
    "text": "",
    "type": "local variable"
  }, {
    "id": 263,
    "text": "",
    "type": "n/a"
  }, {
    "id": 264,
    "text": "",
    "type": "local variable"
  }, {
    "id": 265,
    "text": "",
    "type": "n/a"
  }, {
    "id": 266,
    "text": "",
    "type": "local variable"
  }, {
    "id": 267,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 268,
    "text": "",
    "type": "local variable"
  }, {
    "id": 269,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 270,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 271,
    "text": "",
    "type": "string"
  }, {
    "id": 272,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 273,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 274,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 275,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 276,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 277,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 278,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 279,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 280,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 281,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 282,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 283,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 284,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 285,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 286,
    "text": "",
    "type": "local variable"
  }, {
    "id": 287,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 288,
    "text": "",
    "type": "local variable"
  }, {
    "id": 289,
    "text": "",
    "type": "local variable"
  }, {
    "id": 290,
    "text": "",
    "type": "n/a"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "local variable"
  }, {
    "id": 295,
    "text": "",
    "type": "string"
  }, {
    "id": 296,
    "text": "",
    "type": "global variable"
  }, {
    "id": 297,
    "text": "",
    "type": "n/a"
  }, {
    "id": 298,
    "text": "",
    "type": "global variable"
  }, {
    "id": 299,
    "text": "",
    "type": "n/a"
  }, {
    "id": 300,
    "text": "",
    "type": "global variable"
  }, {
    "id": 301,
    "text": "",
    "type": "n/a"
  }, {
    "id": 302,
    "text": "",
    "type": "global variable"
  }, {
    "id": 303,
    "text": "",
    "type": "n/a"
  }, {
    "id": 304,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 305,
    "text": "",
    "type": "interface container"
  }, {
    "id": 306,
    "text": "",
    "type": "interface"
  }, {
    "id": 307,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 309,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 310,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 312,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 314,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 315,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 316,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 318,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 320,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "require local variable"
  } ]
}