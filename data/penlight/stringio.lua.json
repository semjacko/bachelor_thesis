{
  "_filename": "stringio.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/stringio.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 17
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 17
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 29,
    "label": "has",
    "to": 40
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 29,
    "label": "has",
    "to": 41
  }, {
    "from": 29,
    "label": "has",
    "to": 42
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 43
  }, {
    "from": 29,
    "label": "has",
    "to": 44
  }, {
    "from": 29,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 17
  }, {
    "from": 24,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 17
  }, {
    "from": 47,
    "label": "has",
    "to": 17
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 17
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 17
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 17
  }, {
    "from": 63,
    "label": "has",
    "to": 17
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 70,
    "label": "has",
    "to": 17
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 17
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 17
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 67
  }, {
    "from": 76,
    "label": "has",
    "to": 17
  }, {
    "from": 76,
    "label": "has",
    "to": 17
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 80
  }, {
    "from": 8,
    "label": "calls",
    "to": 80
  }, {
    "from": 24,
    "label": "calls",
    "to": 86
  }, {
    "from": 24,
    "label": "calls",
    "to": 85
  }, {
    "from": 70,
    "label": "calls",
    "to": 87
  }, {
    "from": 72,
    "label": "calls",
    "to": 87
  }, {
    "from": 47,
    "label": "calls",
    "to": 84
  }, {
    "from": 63,
    "label": "calls",
    "to": 84
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 63,
    "label": "calls",
    "to": 83
  }, {
    "from": 74,
    "label": "calls",
    "to": 72
  }, {
    "from": 78,
    "label": "calls",
    "to": 79
  }, {
    "from": 78,
    "label": "calls",
    "to": 79
  }, {
    "from": 16,
    "label": "calls",
    "to": 81
  }, {
    "from": 24,
    "label": "calls",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 78,
    "label": "declares",
    "to": 3
  }, {
    "from": 78,
    "label": "declares",
    "to": 8
  }, {
    "from": 78,
    "label": "declares",
    "to": 13
  }, {
    "from": 78,
    "label": "declares",
    "to": 16
  }, {
    "from": 78,
    "label": "declares",
    "to": 19
  }, {
    "from": 78,
    "label": "declares",
    "to": 21
  }, {
    "from": 78,
    "label": "declares",
    "to": 22
  }, {
    "from": 78,
    "label": "declares",
    "to": 24
  }, {
    "from": 78,
    "label": "declares",
    "to": 47
  }, {
    "from": 78,
    "label": "declares",
    "to": 53
  }, {
    "from": 78,
    "label": "declares",
    "to": 63
  }, {
    "from": 78,
    "label": "declares",
    "to": 69
  }, {
    "from": 78,
    "label": "declares",
    "to": 70
  }, {
    "from": 78,
    "label": "declares",
    "to": 72
  }, {
    "from": 78,
    "label": "declares",
    "to": 74
  }, {
    "from": 78,
    "label": "declares",
    "to": 76
  }, {
    "from": 88,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 1,
    "label": "contains",
    "to": 90
  }, {
    "from": 89,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 89,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 89,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 89,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 89,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 89,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 89,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 89,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 89,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 89,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 89,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 1,
    "label": "provides",
    "to": 113
  }, {
    "from": 103,
    "label": "represents",
    "to": 114
  }, {
    "from": 113,
    "label": "provides",
    "to": 114
  }, {
    "from": 115,
    "label": "requires",
    "to": 1
  }, {
    "from": 116,
    "label": "requires",
    "to": 1
  }, {
    "from": 117,
    "label": "requires",
    "to": 1
  }, {
    "from": 118,
    "label": "requires",
    "to": 1
  }, {
    "from": 119,
    "label": "requires",
    "to": 1
  }, {
    "from": 105,
    "label": "contains",
    "to": 2
  }, {
    "from": 103,
    "label": "contains",
    "to": 70
  }, {
    "from": 103,
    "label": "contains",
    "to": 72
  }, {
    "from": 103,
    "label": "contains",
    "to": 74
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "stringio",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function SW (iter,...)\r\n    if callable(iter) then\r\n        return setmetatable({iter=iter},SMT)\r\n    else\r\n        return iter,...\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function xwrite(self,...)\r\n    local args = {...} --arguments may not be nil!\r\n    for i = 1, #args do\r\n        append(self.tbl,args[i])\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for i = 1, #args do\r\n        append(self.tbl,args[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 6,
    "text": "append(self.tbl,args[i])",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function SW:write(arg1,arg2,...)\r\n    if arg2 then\r\n        xwrite(self,arg1,arg2,...)\r\n    else\r\n        append(self.tbl,arg1)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if arg2 then\r\n        xwrite(self,arg1,arg2,...)\r\n    else\r\n        append(self.tbl,arg1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "xwrite(self,arg1,arg2,...)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "append(self.tbl,arg1)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function SW:writef(fmt,...)\r\n    self:write(fmt:format(...))\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "self:write(fmt:format(...))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function SW:value()\r\n    return concat(self.tbl)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function SW:__tostring()\r\n    return self:value()\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function SW:close() -- for compatibility only\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function SW:seek()\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function SR:_read(fmt)\r\n    local i,str = self.i,self.str\r\n    local sz = #str\r\n    if i > sz then return nil end\r\n    local res\r\n    if fmt == '*l' or fmt == '*L' then\r\n        local idx = str:find('\\n',i) or (sz+1)\r\n        res = str:sub(i,fmt == '*l' and idx-1 or idx)\r\n        self.i = idx+1\r\n    elseif fmt == '*a' then\r\n        res = str:sub(i)\r\n        self.i = sz\r\n    elseif fmt == '*n' then\r\n        local _,i2,i2,idx\r\n        _,idx = str:find ('%s*%d+',i)\r\n        _,i2 = str:find ('^%.%d+',idx+1)\r\n        if i2 then idx = i2 end\r\n        _,i2 = str:find ('^[eE][%+%-]*%d+',idx+1)\r\n        if i2 then idx = i2 end\r\n        local val = str:sub(i,idx)\r\n        res = tonumber(val)\r\n        self.i = idx+1\r\n    elseif type(fmt) == 'number' then\r\n        res = str:sub(i,i+fmt-1)\r\n        self.i = i + fmt\r\n    else\r\n        error(\"bad read format\",2)\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local i,str = self.i,self.str",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local sz = #str",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if i > sz then return nil end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if fmt == '*l' or fmt == '*L' then\r\n        local idx = str:find('\\n',i) or (sz+1)\r\n        res = str:sub(i,fmt == '*l' and idx-1 or idx)\r\n        self.i = idx+1\r\n    elseif fmt == '*a' then\r\n        res = str:sub(i)\r\n        self.i = sz\r\n    elseif fmt == '*n' then\r\n        local _,i2,i2,idx\r\n        _,idx = str:find ('%s*%d+',i)\r\n        _,i2 = str:find ('^%.%d+',idx+1)\r\n        if i2 then idx = i2 end\r\n        _,i2 = str:find ('^[eE][%+%-]*%d+',idx+1)\r\n        if i2 then idx = i2 end\r\n        local val = str:sub(i,idx)\r\n        res = tonumber(val)\r\n        self.i = idx+1\r\n    elseif type(fmt) == 'number' then\r\n        res = str:sub(i,i+fmt-1)\r\n        self.i = i + fmt\r\n    else\r\n        error(\"bad read format\",2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local idx = str:find('\\n',i) or (sz+1)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "res = str:sub(i,fmt == '*l' and idx-1 or idx)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "self.i = idx+1",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "res = str:sub(i)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "self.i = sz",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local _,i2,i2,idx",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "_,idx = str:find ('%s*%d+',i)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "_,i2 = str:find ('^%.%d+',idx+1)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if i2 then idx = i2 end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "idx = i2",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "_,i2 = str:find ('^[eE][%+%-]*%d+',idx+1)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "local val = str:sub(i,idx)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "res = tonumber(val)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "res = str:sub(i,i+fmt-1)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "self.i = i + fmt",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "error(\"bad read format\",2)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function SR:read(...)\r\n    if select('#',...) == 0 then\r\n        return self:_read('*l')\r\n    else\r\n        local res, fmts = {},{...}\r\n        for i = 1, #fmts do\r\n            res[i] = self:_read(fmts[i])\r\n        end\r\n        return unpack(res)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "if select('#',...) == 0 then\r\n        return self:_read('*l')\r\n    else\r\n        local res, fmts = {},{...}\r\n        for i = 1, #fmts do\r\n            res[i] = self:_read(fmts[i])\r\n        end\r\n        return unpack(res)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local res, fmts = {},{...}",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "for i = 1, #fmts do\r\n            res[i] = self:_read(fmts[i])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 51,
    "text": "res[i] = self:_read(fmts[i])",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function SR:seek(whence,offset)\r\n    local base\r\n    whence = whence or 'cur'\r\n    offset = offset or 0\r\n    if whence == 'set' then\r\n        base = 1\r\n    elseif whence == 'cur' then\r\n        base = self.i\r\n    elseif whence == 'end' then\r\n        base = #self.str\r\n    end\r\n    self.i = base + offset\r\n    return self.i\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local base",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "whence = whence or 'cur'",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "offset = offset or 0",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if whence == 'set' then\r\n        base = 1\r\n    elseif whence == 'cur' then\r\n        base = self.i\r\n    elseif whence == 'end' then\r\n        base = #self.str\r\n    end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "base = 1",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "base = self.i",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "base = #self.str",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "self.i = base + offset",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function SR:lines(...)\r\n    local n, args = select('#',...)\r\n    if n > 0 then\r\n        args = {...}\r\n    end\r\n    return function()\r\n        if n == 0 then\r\n            return self:_read '*l'\r\n        else\r\n            return self:read(unpack(args))\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local n, args = select('#',...)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if n > 0 then\r\n        args = {...}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "args = {...}",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "if n == 0 then\r\n            return self:_read '*l'\r\n        else\r\n            return self:read(unpack(args))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function SR:close() -- for compatibility only\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "function stringio.create()\r\n    return setmetatable({tbl={}},SW)\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function stringio.open(s)\r\n    return setmetatable({str=s,i=1},SR)\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function stringio.lines(s,...)\r\n    return stringio.open(s):lines(...)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function()\r\n        if n == 0 then\r\n            return self:_read '*l'\r\n        else\r\n            return self:read(unpack(args))\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "",
    "type": "function container"
  }, {
    "id": 79,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 80,
    "text": "append",
    "type": "global function"
  }, {
    "id": 81,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 82,
    "text": "type",
    "type": "global function"
  }, {
    "id": 83,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 84,
    "text": "select",
    "type": "global function"
  }, {
    "id": 85,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 86,
    "text": "error",
    "type": "global function"
  }, {
    "id": 87,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "variable container"
  }, {
    "id": 90,
    "text": "",
    "type": "require container"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "global variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "interface container"
  }, {
    "id": 114,
    "text": "",
    "type": "interface"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  } ]
}