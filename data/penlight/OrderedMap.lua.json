{
  "_filename": "OrderedMap.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/OrderedMap.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 25
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 32
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 30
  }, {
    "from": 36,
    "label": "has",
    "to": 25
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 25
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 25
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 25
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 25
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 25
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 25
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 58,
    "label": "has",
    "to": 25
  }, {
    "from": 58,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 54
  }, {
    "from": 67,
    "label": "has",
    "to": 55
  }, {
    "from": 67,
    "label": "has",
    "to": 25
  }, {
    "from": 67,
    "label": "has",
    "to": 56
  }, {
    "from": 67,
    "label": "has",
    "to": 25
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 14,
    "label": "calls",
    "to": 77
  }, {
    "from": 14,
    "label": "calls",
    "to": 77
  }, {
    "from": 14,
    "label": "calls",
    "to": 82
  }, {
    "from": 14,
    "label": "calls",
    "to": 71
  }, {
    "from": 58,
    "label": "calls",
    "to": 71
  }, {
    "from": 58,
    "label": "calls",
    "to": 76
  }, {
    "from": 58,
    "label": "calls",
    "to": 76
  }, {
    "from": 14,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 81
  }, {
    "from": 14,
    "label": "calls",
    "to": 85
  }, {
    "from": 7,
    "label": "calls",
    "to": 74
  }, {
    "from": 27,
    "label": "calls",
    "to": 74
  }, {
    "from": 27,
    "label": "calls",
    "to": 74
  }, {
    "from": 36,
    "label": "calls",
    "to": 74
  }, {
    "from": 7,
    "label": "calls",
    "to": 84
  }, {
    "from": 45,
    "label": "calls",
    "to": 72
  }, {
    "from": 7,
    "label": "calls",
    "to": 80
  }, {
    "from": 45,
    "label": "calls",
    "to": 80
  }, {
    "from": 27,
    "label": "calls",
    "to": 70
  }, {
    "from": 14,
    "label": "calls",
    "to": 78
  }, {
    "from": 58,
    "label": "calls",
    "to": 78
  }, {
    "from": 69,
    "label": "calls",
    "to": 75
  }, {
    "from": 69,
    "label": "calls",
    "to": 75
  }, {
    "from": 69,
    "label": "calls",
    "to": 75
  }, {
    "from": 69,
    "label": "calls",
    "to": 75
  }, {
    "from": 69,
    "label": "calls",
    "to": 75
  }, {
    "from": 58,
    "label": "calls",
    "to": 73
  }, {
    "from": 69,
    "label": "calls",
    "to": 79
  }, {
    "from": 4,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "declares",
    "to": 7
  }, {
    "from": 69,
    "label": "declares",
    "to": 14
  }, {
    "from": 69,
    "label": "declares",
    "to": 27
  }, {
    "from": 69,
    "label": "declares",
    "to": 36
  }, {
    "from": 69,
    "label": "declares",
    "to": 43
  }, {
    "from": 69,
    "label": "declares",
    "to": 45
  }, {
    "from": 69,
    "label": "declares",
    "to": 47
  }, {
    "from": 69,
    "label": "declares",
    "to": 50
  }, {
    "from": 69,
    "label": "declares",
    "to": 58
  }, {
    "from": 69,
    "label": "declares",
    "to": 67
  }, {
    "from": 4,
    "label": "contains",
    "to": 86
  }, {
    "from": 4,
    "label": "contains",
    "to": 87
  }, {
    "from": 86,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 86,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 86,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 86,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 86,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 86,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 86,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 86,
    "label": "initializes",
    "to": 102
  }, {
    "from": 86,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 86,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 87,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "requires",
    "to": 5
  }, {
    "from": 87,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "requires",
    "to": 6
  }, {
    "from": 87,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 2
  }, {
    "from": 87,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 87,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 3
  }, {
    "from": 4,
    "label": "provides",
    "to": 112
  }, {
    "from": 94,
    "label": "represents",
    "to": 113
  }, {
    "from": 112,
    "label": "provides",
    "to": 113
  }, {
    "from": 114,
    "label": "requires",
    "to": 4
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "class",
    "type": "module"
  }, {
    "id": 2,
    "text": "List",
    "type": "module"
  }, {
    "id": 3,
    "text": "Map",
    "type": "module"
  }, {
    "id": 4,
    "text": "OrderedMap",
    "type": "module"
  }, {
    "id": 5,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 6,
    "text": "utils",
    "type": "module"
  }, {
    "id": 7,
    "text": "function OrderedMap:_init (t)\r\n    rawset(self,'_keys',List())\r\n    if t then\r\n        local map,err = self:update(t)\r\n        if not map then error(err,2) end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "rawset(self,'_keys',List())",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "if t then\r\n        local map,err = self:update(t)\r\n        if not map then error(err,2) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local map,err = self:update(t)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if not map then error(err,2) end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "error(err,2)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function OrderedMap:update (t)\r\n    assert_arg(1,t,'table')\r\n    if OrderedMap:class_of(t) then\r\n       for k,v in t:iter() do\r\n           self:set(k,v)\r\n       end\r\n    elseif #t > 0 then -- an array must contain {key=val} tables\r\n       if type(t[1]) == 'table' then\r\n           for _,pair in ipairs(t) do\r\n               local key,value = next(pair)\r\n               if not key then return raise 'empty pair initialization table' end\r\n               self:set(key,value)\r\n           end\r\n       else\r\n           return raise 'cannot use an array to initialize an OrderedMap'\r\n       end\r\n    else\r\n       for k,v in pairs(t) do\r\n           self:set(k,v)\r\n       end\r\n    end\r\n   return self\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "assert_arg(1,t,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if OrderedMap:class_of(t) then\r\n       for k,v in t:iter() do\r\n           self:set(k,v)\r\n       end\r\n    elseif #t > 0 then -- an array must contain {key=val} tables\r\n       if type(t[1]) == 'table' then\r\n           for _,pair in ipairs(t) do\r\n               local key,value = next(pair)\r\n               if not key then return raise 'empty pair initialization table' end\r\n               self:set(key,value)\r\n           end\r\n       else\r\n           return raise 'cannot use an array to initialize an OrderedMap'\r\n       end\r\n    else\r\n       for k,v in pairs(t) do\r\n           self:set(k,v)\r\n       end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "for k,v in t:iter() do\r\n           self:set(k,v)\r\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "self:set(k,v)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if type(t[1]) == 'table' then\r\n           for _,pair in ipairs(t) do\r\n               local key,value = next(pair)\r\n               if not key then return raise 'empty pair initialization table' end\r\n               self:set(key,value)\r\n           end\r\n       else\r\n           return raise 'cannot use an array to initialize an OrderedMap'\r\n       end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "for _,pair in ipairs(t) do\r\n               local key,value = next(pair)\r\n               if not key then return raise 'empty pair initialization table' end\r\n               self:set(key,value)\r\n           end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "local key,value = next(pair)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if not key then return raise 'empty pair initialization table' end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "self:set(key,value)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "for k,v in pairs(t) do\r\n           self:set(k,v)\r\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function OrderedMap:set (key,val)\r\n    if rawget(self, key) == nil and val ~= nil then -- new key\r\n        self._keys:append(key) -- we keep in order\r\n        rawset(self,key,val)  -- don't want to provoke __newindex!\r\n    else -- existing key-value pair\r\n        if val == nil then\r\n            self._keys:remove_value(key)\r\n            rawset(self,key,nil)\r\n        else\r\n            self[key] = val\r\n        end\r\n    end\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "if rawget(self, key) == nil and val ~= nil then -- new key\r\n        self._keys:append(key) -- we keep in order\r\n        rawset(self,key,val)  -- don't want to provoke __newindex!\r\n    else -- existing key-value pair\r\n        if val == nil then\r\n            self._keys:remove_value(key)\r\n            rawset(self,key,nil)\r\n        else\r\n            self[key] = val\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "self._keys:append(key)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "rawset(self,key,val)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if val == nil then\r\n            self._keys:remove_value(key)\r\n            rawset(self,key,nil)\r\n        else\r\n            self[key] = val\r\n        end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "self._keys:remove_value(key)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "rawset(self,key,nil)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "self[key] = val",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function OrderedMap:insert (pos,key,val)\r\n    local oldval = self[key]\r\n    val = val or oldval\r\n    if oldval then\r\n        self._keys:remove_value(key)\r\n    end\r\n    if val then\r\n        self._keys:insert(pos,key)\r\n        rawset(self,key,val)\r\n    end\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local oldval = self[key]",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "val = val or oldval",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if oldval then\r\n        self._keys:remove_value(key)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "if val then\r\n        self._keys:insert(pos,key)\r\n        rawset(self,key,val)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "self._keys:insert(pos,key)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function OrderedMap:keys ()\r\n    return self._keys\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function OrderedMap:values ()\r\n    return List(index_by(self,self._keys))\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function OrderedMap:sort (cmp)\r\n    tsort(self._keys,cmp)\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "tsort(self._keys,cmp)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function OrderedMap:iter ()\r\n    local i = 0\r\n    local keys = self._keys\r\n    local n,idx = #keys\r\n    return function()\r\n        i = i + 1\r\n        if i > #keys then return nil end\r\n        idx = keys[i]\r\n        return idx,self[idx]\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local keys = self._keys",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local n,idx = #keys",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if i > #keys then return nil end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "idx = keys[i]",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function OrderedMap:__tostring ()\r\n    local res = {}\r\n    for i,v in ipairs(self._keys) do\r\n        local val = self[v]\r\n        local vs = tostring(val)\r\n        if type(val) ~= 'number' then\r\n            vs = '\"'..vs..'\"'\r\n        end\r\n        res[i] = tostring(v)..'='..vs\r\n    end\r\n    return '{'..concat(res,',')..'}'\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "for i,v in ipairs(self._keys) do\r\n        local val = self[v]\r\n        local vs = tostring(val)\r\n        if type(val) ~= 'number' then\r\n            vs = '\"'..vs..'\"'\r\n        end\r\n        res[i] = tostring(v)..'='..vs\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "local val = self[v]",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local vs = tostring(val)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if type(val) ~= 'number' then\r\n            vs = '\"'..vs..'\"'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "vs = '\"'..vs..'\"'",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "res[i] = tostring(v)..'='..vs",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function()\r\n        i = i + 1\r\n        if i > #keys then return nil end\r\n        idx = keys[i]\r\n        return idx,self[idx]\r\n    end",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "",
    "type": "function container"
  }, {
    "id": 70,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 71,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 72,
    "text": "index_by",
    "type": "global function"
  }, {
    "id": 73,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 74,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 75,
    "text": "require",
    "type": "global function"
  }, {
    "id": 76,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 77,
    "text": "raise",
    "type": "global function"
  }, {
    "id": 78,
    "text": "type",
    "type": "global function"
  }, {
    "id": 79,
    "text": "class",
    "type": "global function"
  }, {
    "id": 80,
    "text": "List",
    "type": "global function"
  }, {
    "id": 81,
    "text": "tsort",
    "type": "global function"
  }, {
    "id": 82,
    "text": "next",
    "type": "global function"
  }, {
    "id": 83,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 84,
    "text": "error",
    "type": "global function"
  }, {
    "id": 85,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 86,
    "text": "",
    "type": "variable container"
  }, {
    "id": 87,
    "text": "",
    "type": "require container"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "global variable"
  }, {
    "id": 103,
    "text": "",
    "type": "global variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "global variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "interface container"
  }, {
    "id": 113,
    "text": "",
    "type": "interface"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  } ]
}