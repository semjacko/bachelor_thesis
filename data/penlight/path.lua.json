{
  "_filename": "path.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/path.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 7
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 7
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 7
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 4
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 27
  }, {
    "from": 45,
    "label": "has",
    "to": 28
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 30
  }, {
    "from": 46,
    "label": "has",
    "to": 31
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 7
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 4
  }, {
    "from": 53,
    "label": "has",
    "to": 51
  }, {
    "from": 53,
    "label": "has",
    "to": 7
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 4
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 7
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 7
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 7
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 61,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 61,
    "label": "has",
    "to": 7
  }, {
    "from": 61,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 4
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 7
  }, {
    "from": 75,
    "label": "has",
    "to": 7
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 4
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 89
  }, {
    "from": 80,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 83
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 78,
    "label": "has",
    "to": 94
  }, {
    "from": 78,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 78,
    "label": "has",
    "to": 100
  }, {
    "from": 78,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 78,
    "label": "has",
    "to": 7
  }, {
    "from": 78,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 7
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 4
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 108,
    "label": "has",
    "to": 112
  }, {
    "from": 108,
    "label": "has",
    "to": 113
  }, {
    "from": 108,
    "label": "has",
    "to": 114
  }, {
    "from": 108,
    "label": "has",
    "to": 115
  }, {
    "from": 108,
    "label": "has",
    "to": 116
  }, {
    "from": 108,
    "label": "has",
    "to": 117
  }, {
    "from": 108,
    "label": "has",
    "to": 7
  }, {
    "from": 108,
    "label": "has",
    "to": 118
  }, {
    "from": 108,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 108,
    "label": "has",
    "to": 122
  }, {
    "from": 108,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 108,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 108,
    "label": "has",
    "to": 7
  }, {
    "from": 108,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 4
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 7
  }, {
    "from": 129,
    "label": "has",
    "to": 7
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 7
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 140,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 140,
    "label": "has",
    "to": 7
  }, {
    "from": 140,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 140,
    "label": "has",
    "to": 7
  }, {
    "from": 140,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 7
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 155,
    "label": "has",
    "to": 7
  }, {
    "from": 155,
    "label": "has",
    "to": 7
  }, {
    "from": 155,
    "label": "has",
    "to": 163
  }, {
    "from": 155,
    "label": "calls",
    "to": 177
  }, {
    "from": 22,
    "label": "calls",
    "to": 189
  }, {
    "from": 78,
    "label": "calls",
    "to": 183
  }, {
    "from": 34,
    "label": "calls",
    "to": 181
  }, {
    "from": 108,
    "label": "calls",
    "to": 181
  }, {
    "from": 135,
    "label": "calls",
    "to": 169
  }, {
    "from": 3,
    "label": "calls",
    "to": 180
  }, {
    "from": 9,
    "label": "calls",
    "to": 180
  }, {
    "from": 11,
    "label": "calls",
    "to": 180
  }, {
    "from": 14,
    "label": "calls",
    "to": 180
  }, {
    "from": 16,
    "label": "calls",
    "to": 180
  }, {
    "from": 18,
    "label": "calls",
    "to": 180
  }, {
    "from": 22,
    "label": "calls",
    "to": 180
  }, {
    "from": 26,
    "label": "calls",
    "to": 180
  }, {
    "from": 34,
    "label": "calls",
    "to": 180
  }, {
    "from": 34,
    "label": "calls",
    "to": 180
  }, {
    "from": 45,
    "label": "calls",
    "to": 180
  }, {
    "from": 50,
    "label": "calls",
    "to": 180
  }, {
    "from": 53,
    "label": "calls",
    "to": 180
  }, {
    "from": 55,
    "label": "calls",
    "to": 180
  }, {
    "from": 58,
    "label": "calls",
    "to": 180
  }, {
    "from": 61,
    "label": "calls",
    "to": 180
  }, {
    "from": 61,
    "label": "calls",
    "to": 180
  }, {
    "from": 61,
    "label": "calls",
    "to": 180
  }, {
    "from": 75,
    "label": "calls",
    "to": 180
  }, {
    "from": 78,
    "label": "calls",
    "to": 180
  }, {
    "from": 108,
    "label": "calls",
    "to": 180
  }, {
    "from": 108,
    "label": "calls",
    "to": 180
  }, {
    "from": 129,
    "label": "calls",
    "to": 180
  }, {
    "from": 140,
    "label": "calls",
    "to": 180
  }, {
    "from": 140,
    "label": "calls",
    "to": 180
  }, {
    "from": 155,
    "label": "calls",
    "to": 180
  }, {
    "from": 129,
    "label": "calls",
    "to": 186
  }, {
    "from": 129,
    "label": "calls",
    "to": 186
  }, {
    "from": 129,
    "label": "calls",
    "to": 186
  }, {
    "from": 129,
    "label": "calls",
    "to": 186
  }, {
    "from": 135,
    "label": "calls",
    "to": 186
  }, {
    "from": 78,
    "label": "calls",
    "to": 168
  }, {
    "from": 34,
    "label": "calls",
    "to": 78
  }, {
    "from": 24,
    "label": "calls",
    "to": 188
  }, {
    "from": 26,
    "label": "calls",
    "to": 188
  }, {
    "from": 26,
    "label": "calls",
    "to": 188
  }, {
    "from": 45,
    "label": "calls",
    "to": 188
  }, {
    "from": 45,
    "label": "calls",
    "to": 188
  }, {
    "from": 129,
    "label": "calls",
    "to": 188
  }, {
    "from": 50,
    "label": "calls",
    "to": 26
  }, {
    "from": 53,
    "label": "calls",
    "to": 26
  }, {
    "from": 155,
    "label": "calls",
    "to": 171
  }, {
    "from": 155,
    "label": "calls",
    "to": 171
  }, {
    "from": 140,
    "label": "calls",
    "to": 50
  }, {
    "from": 140,
    "label": "calls",
    "to": 50
  }, {
    "from": 26,
    "label": "calls",
    "to": 24
  }, {
    "from": 26,
    "label": "calls",
    "to": 24
  }, {
    "from": 34,
    "label": "calls",
    "to": 24
  }, {
    "from": 34,
    "label": "calls",
    "to": 24
  }, {
    "from": 45,
    "label": "calls",
    "to": 24
  }, {
    "from": 45,
    "label": "calls",
    "to": 24
  }, {
    "from": 58,
    "label": "calls",
    "to": 24
  }, {
    "from": 58,
    "label": "calls",
    "to": 24
  }, {
    "from": 58,
    "label": "calls",
    "to": 24
  }, {
    "from": 58,
    "label": "calls",
    "to": 24
  }, {
    "from": 61,
    "label": "calls",
    "to": 24
  }, {
    "from": 78,
    "label": "calls",
    "to": 24
  }, {
    "from": 78,
    "label": "calls",
    "to": 24
  }, {
    "from": 78,
    "label": "calls",
    "to": 24
  }, {
    "from": 78,
    "label": "calls",
    "to": 24
  }, {
    "from": 78,
    "label": "calls",
    "to": 24
  }, {
    "from": 78,
    "label": "calls",
    "to": 24
  }, {
    "from": 78,
    "label": "calls",
    "to": 24
  }, {
    "from": 104,
    "label": "calls",
    "to": 24
  }, {
    "from": 108,
    "label": "calls",
    "to": 24
  }, {
    "from": 129,
    "label": "calls",
    "to": 24
  }, {
    "from": 140,
    "label": "calls",
    "to": 24
  }, {
    "from": 140,
    "label": "calls",
    "to": 24
  }, {
    "from": 140,
    "label": "calls",
    "to": 24
  }, {
    "from": 140,
    "label": "calls",
    "to": 24
  }, {
    "from": 108,
    "label": "calls",
    "to": 184
  }, {
    "from": 108,
    "label": "calls",
    "to": 184
  }, {
    "from": 3,
    "label": "calls",
    "to": 173
  }, {
    "from": 9,
    "label": "calls",
    "to": 173
  }, {
    "from": 14,
    "label": "calls",
    "to": 173
  }, {
    "from": 16,
    "label": "calls",
    "to": 173
  }, {
    "from": 18,
    "label": "calls",
    "to": 173
  }, {
    "from": 20,
    "label": "calls",
    "to": 173
  }, {
    "from": 108,
    "label": "calls",
    "to": 165
  }, {
    "from": 108,
    "label": "calls",
    "to": 165
  }, {
    "from": 164,
    "label": "calls",
    "to": 174
  }, {
    "from": 34,
    "label": "calls",
    "to": 61
  }, {
    "from": 61,
    "label": "calls",
    "to": 61
  }, {
    "from": 61,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 45
  }, {
    "from": 108,
    "label": "calls",
    "to": 170
  }, {
    "from": 108,
    "label": "calls",
    "to": 178
  }, {
    "from": 34,
    "label": "calls",
    "to": 58
  }, {
    "from": 61,
    "label": "calls",
    "to": 58
  }, {
    "from": 78,
    "label": "calls",
    "to": 167
  }, {
    "from": 78,
    "label": "calls",
    "to": 167
  }, {
    "from": 108,
    "label": "calls",
    "to": 167
  }, {
    "from": 61,
    "label": "calls",
    "to": 182
  }, {
    "from": 104,
    "label": "calls",
    "to": 75
  }, {
    "from": 140,
    "label": "calls",
    "to": 75
  }, {
    "from": 140,
    "label": "calls",
    "to": 75
  }, {
    "from": 11,
    "label": "calls",
    "to": 175
  }, {
    "from": 164,
    "label": "calls",
    "to": 176
  }, {
    "from": 108,
    "label": "calls",
    "to": 34
  }, {
    "from": 164,
    "label": "calls",
    "to": 187
  }, {
    "from": 1,
    "label": "contains",
    "to": 164
  }, {
    "from": 164,
    "label": "declares",
    "to": 3
  }, {
    "from": 164,
    "label": "declares",
    "to": 9
  }, {
    "from": 164,
    "label": "declares",
    "to": 11
  }, {
    "from": 164,
    "label": "declares",
    "to": 14
  }, {
    "from": 164,
    "label": "declares",
    "to": 16
  }, {
    "from": 164,
    "label": "declares",
    "to": 18
  }, {
    "from": 164,
    "label": "declares",
    "to": 20
  }, {
    "from": 164,
    "label": "declares",
    "to": 22
  }, {
    "from": 164,
    "label": "declares",
    "to": 24
  }, {
    "from": 164,
    "label": "declares",
    "to": 26
  }, {
    "from": 164,
    "label": "declares",
    "to": 34
  }, {
    "from": 164,
    "label": "declares",
    "to": 45
  }, {
    "from": 164,
    "label": "declares",
    "to": 50
  }, {
    "from": 164,
    "label": "declares",
    "to": 53
  }, {
    "from": 164,
    "label": "declares",
    "to": 55
  }, {
    "from": 164,
    "label": "declares",
    "to": 58
  }, {
    "from": 164,
    "label": "declares",
    "to": 61
  }, {
    "from": 164,
    "label": "declares",
    "to": 75
  }, {
    "from": 164,
    "label": "declares",
    "to": 78
  }, {
    "from": 164,
    "label": "declares",
    "to": 104
  }, {
    "from": 164,
    "label": "declares",
    "to": 108
  }, {
    "from": 164,
    "label": "declares",
    "to": 129
  }, {
    "from": 164,
    "label": "declares",
    "to": 135
  }, {
    "from": 164,
    "label": "declares",
    "to": 140
  }, {
    "from": 164,
    "label": "declares",
    "to": 155
  }, {
    "from": 1,
    "label": "declares",
    "to": 166
  }, {
    "from": 1,
    "label": "declares",
    "to": 172
  }, {
    "from": 1,
    "label": "declares",
    "to": 179
  }, {
    "from": 1,
    "label": "declares",
    "to": 185
  }, {
    "from": 1,
    "label": "declares",
    "to": 189
  }, {
    "from": 190,
    "label": "requires",
    "to": 1
  }, {
    "from": 191,
    "label": "requires",
    "to": 1
  }, {
    "from": 192,
    "label": "requires",
    "to": 1
  }, {
    "from": 193,
    "label": "requires",
    "to": 1
  }, {
    "from": 194,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 195
  }, {
    "from": 1,
    "label": "contains",
    "to": 196
  }, {
    "from": 195,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 195,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 195,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 195,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 195,
    "label": "initializes",
    "to": 205
  }, {
    "from": 195,
    "label": "initializes",
    "to": 206
  }, {
    "from": 195,
    "label": "initializes",
    "to": 207
  }, {
    "from": 195,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 195,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 195,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 195,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 195,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 195,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 195,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 195,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 195,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 195,
    "label": "initializes",
    "to": 226
  }, {
    "from": 195,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 195,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 195,
    "label": "initializes",
    "to": 231
  }, {
    "from": 195,
    "label": "initializes",
    "to": 232
  }, {
    "from": 195,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 195,
    "label": "initializes",
    "to": 235
  }, {
    "from": 235,
    "label": "assigns",
    "to": 236
  }, {
    "from": 195,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 195,
    "label": "initializes",
    "to": 239
  }, {
    "from": 239,
    "label": "assigns",
    "to": 240
  }, {
    "from": 195,
    "label": "initializes",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 195,
    "label": "initializes",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 195,
    "label": "initializes",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 195,
    "label": "initializes",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 195,
    "label": "initializes",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 195,
    "label": "initializes",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 195,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 196,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 256
  }, {
    "from": 227,
    "label": "represents",
    "to": 257
  }, {
    "from": 256,
    "label": "provides",
    "to": 257
  }, {
    "from": 258,
    "label": "requires",
    "to": 1
  }, {
    "from": 259,
    "label": "requires",
    "to": 1
  }, {
    "from": 260,
    "label": "requires",
    "to": 1
  }, {
    "from": 261,
    "label": "requires",
    "to": 1
  }, {
    "from": 262,
    "label": "requires",
    "to": 1
  }, {
    "from": 263,
    "label": "requires",
    "to": 1
  }, {
    "from": 227,
    "label": "contains",
    "to": 3
  }, {
    "from": 227,
    "label": "contains",
    "to": 9
  }, {
    "from": 227,
    "label": "contains",
    "to": 11
  }, {
    "from": 227,
    "label": "contains",
    "to": 14
  }, {
    "from": 227,
    "label": "contains",
    "to": 16
  }, {
    "from": 227,
    "label": "contains",
    "to": 18
  }, {
    "from": 227,
    "label": "contains",
    "to": 20
  }, {
    "from": 227,
    "label": "contains",
    "to": 22
  }, {
    "from": 227,
    "label": "contains",
    "to": 26
  }, {
    "from": 227,
    "label": "contains",
    "to": 34
  }, {
    "from": 227,
    "label": "contains",
    "to": 45
  }, {
    "from": 227,
    "label": "contains",
    "to": 50
  }, {
    "from": 227,
    "label": "contains",
    "to": 53
  }, {
    "from": 227,
    "label": "contains",
    "to": 55
  }, {
    "from": 227,
    "label": "contains",
    "to": 58
  }, {
    "from": 227,
    "label": "contains",
    "to": 61
  }, {
    "from": 227,
    "label": "contains",
    "to": 75
  }, {
    "from": 227,
    "label": "contains",
    "to": 78
  }, {
    "from": 227,
    "label": "contains",
    "to": 108
  }, {
    "from": 227,
    "label": "contains",
    "to": 129
  }, {
    "from": 227,
    "label": "contains",
    "to": 135
  }, {
    "from": 227,
    "label": "contains",
    "to": 140
  }, {
    "from": 227,
    "label": "contains",
    "to": 155
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "path",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "function path.isdir(P)\r\n\tassert_string(1,P)\r\n    if P:match(\"\\\\$\") then\r\n        P = P:sub(1,-2)\r\n    end\r\n    return attrib(P,'mode') == 'directory'\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert_string(1,P)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "if P:match(\"\\\\$\") then\r\n        P = P:sub(1,-2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "P = P:sub(1,-2)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function path.isfile(P)\r\n\tassert_string(1,P)\r\n    return attrib(P,'mode') == 'file'\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function path.islink(P)\r\n\tassert_string(1,P)\r\n    if link_attrib then\r\n        return link_attrib(P,'mode')=='link'\r\n    else\r\n        return false\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if link_attrib then\r\n        return link_attrib(P,'mode')=='link'\r\n    else\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function path.getsize(P)\r\n\tassert_string(1,P)\r\n    return attrib(P,'size')\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function path.exists(P)\r\n\tassert_string(1,P)\r\n    return attrib(P,'mode') ~= nil and P\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function path.getatime(P)\r\n\tassert_string(1,P)\r\n    return attrib(P,'access')\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function path.getmtime(P)\r\n    return attrib(P,'modification')\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function path.getctime(P)\r\n\tassert_string(1,P)\r\n    return path.attrib(P,'change')\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function at(s,i)\r\n    return sub(s,i,i)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function path.splitpath(P)\r\n    assert_string(1,P)\r\n    local i = #P\r\n    local ch = at(P,i)\r\n    while i > 0 and ch ~= sep and ch ~= other_sep do\r\n        i = i - 1\r\n        ch = at(P,i)\r\n    end\r\n    if i == 0 then\r\n        return '',P\r\n    else\r\n        return sub(P,1,i-1), sub(P,i+1)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local i = #P",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local ch = at(P,i)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "while i > 0 and ch ~= sep and ch ~= other_sep do\r\n        i = i - 1\r\n        ch = at(P,i)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 30,
    "text": "i = i - 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "ch = at(P,i)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if i == 0 then\r\n        return '',P\r\n    else\r\n        return sub(P,1,i-1), sub(P,i+1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function path.abspath(P,pwd)\r\n    assert_string(1,P)\r\n\tif pwd then assert_string(2,pwd) end\r\n    local use_pwd = pwd ~= nil\r\n    if not use_pwd and not currentdir then return P end\r\n    P = P:gsub('[\\\\/]$','')\r\n    pwd = pwd or currentdir()\r\n    if not path.isabs(P) then\r\n        P = path.join(pwd,P)\r\n    elseif path.is_windows and not use_pwd and at(P,2) ~= ':' and at(P,2) ~= '\\\\' then\r\n        P = pwd:sub(1,2)..P -- attach current drive to path like '\\\\fred.txt'\r\n    end\r\n    return path.normpath(P)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if pwd then assert_string(2,pwd) end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "assert_string(2,pwd)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local use_pwd = pwd ~= nil",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if not use_pwd and not currentdir then return P end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "P = P:gsub('[\\\\/]$','')",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "pwd = pwd or currentdir()",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if not path.isabs(P) then\r\n        P = path.join(pwd,P)\r\n    elseif path.is_windows and not use_pwd and at(P,2) ~= ':' and at(P,2) ~= '\\\\' then\r\n        P = pwd:sub(1,2)..P -- attach current drive to path like '\\\\fred.txt'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "P = path.join(pwd,P)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "P = pwd:sub(1,2)..P",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function path.splitext(P)\r\n    assert_string(1,P)\r\n    local i = #P\r\n    local ch = at(P,i)\r\n    while i > 0 and ch ~= '.' do\r\n        if ch == sep or ch == other_sep then\r\n            return P,''\r\n        end\r\n        i = i - 1\r\n        ch = at(P,i)\r\n    end\r\n    if i == 0 then\r\n        return P,''\r\n    else\r\n        return sub(P,1,i-1),sub(P,i)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "while i > 0 and ch ~= '.' do\r\n        if ch == sep or ch == other_sep then\r\n            return P,''\r\n        end\r\n        i = i - 1\r\n        ch = at(P,i)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 47,
    "text": "if ch == sep or ch == other_sep then\r\n            return P,''\r\n        end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "if i == 0 then\r\n        return P,''\r\n    else\r\n        return sub(P,1,i-1),sub(P,i)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function path.dirname(P)\r\n    assert_string(1,P)\r\n    local p1,p2 = path.splitpath(P)\r\n    return p1\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local p1,p2 = path.splitpath(P)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function path.basename(P)\r\n    assert_string(1,P)\r\n    local p1,p2 = path.splitpath(P)\r\n    return p2\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function path.extension(P)\r\n    assert_string(1,P)\r\n    local p1,p2 = path.splitext(P)\r\n    return p2\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local p1,p2 = path.splitext(P)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function path.isabs(P)\r\n    assert_string(1,P)\r\n    if path.is_windows then\r\n        return at(P,1) == '/' or at(P,1)=='\\\\' or at(P,2)==':'\r\n    else\r\n        return at(P,1) == '/'\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "if path.is_windows then\r\n        return at(P,1) == '/' or at(P,1)=='\\\\' or at(P,2)==':'\r\n    else\r\n        return at(P,1) == '/'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function path.join(p1,p2,...)\r\n    assert_string(1,p1)\r\n    assert_string(2,p2)\r\n    if select('#',...) > 0 then\r\n        local p = path.join(p1,p2)\r\n        local args = {...}\r\n        for i = 1,#args do\r\n            assert_string(i,args[i])\r\n            p = path.join(p,args[i])\r\n        end\r\n        return p\r\n    end\r\n    if path.isabs(p2) then return p2 end\r\n    local endc = at(p1,#p1)\r\n    if endc ~= path.sep and endc ~= other_sep and endc ~= \"\" then\r\n        p1 = p1..path.sep\r\n    end\r\n    return p1..p2\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "assert_string(1,p1)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert_string(2,p2)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "if select('#',...) > 0 then\r\n        local p = path.join(p1,p2)\r\n        local args = {...}\r\n        for i = 1,#args do\r\n            assert_string(i,args[i])\r\n            p = path.join(p,args[i])\r\n        end\r\n        return p\r\n    end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "local p = path.join(p1,p2)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "for i = 1,#args do\r\n            assert_string(i,args[i])\r\n            p = path.join(p,args[i])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 68,
    "text": "assert_string(i,args[i])",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "p = path.join(p,args[i])",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if path.isabs(p2) then return p2 end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "local endc = at(p1,#p1)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if endc ~= path.sep and endc ~= other_sep and endc ~= \"\" then\r\n        p1 = p1..path.sep\r\n    end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "p1 = p1..path.sep",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function path.normcase(P)\r\n    assert_string(1,P)\r\n    if path.is_windows then\r\n        return (P:lower():gsub('/','\\\\'))\r\n    else\r\n        return P\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "if path.is_windows then\r\n        return (P:lower():gsub('/','\\\\'))\r\n    else\r\n        return P\r\n    end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function path.normpath(P)\r\n    assert_string(1,P)\r\n    -- Split path into anchor and relative path.\r\n    local anchor = ''\r\n    if path.is_windows then\r\n        if P:match '^\\\\\\\\' then -- UNC\r\n            anchor = '\\\\\\\\'\r\n            P = P:sub(3)\r\n        elseif at(P, 1) == '/' or at(P, 1) == '\\\\' then\r\n            anchor = '\\\\'\r\n            P = P:sub(2)\r\n        elseif at(P, 2) == ':' then\r\n            anchor = P:sub(1, 2)\r\n            P = P:sub(3)\r\n            if at(P, 1) == '/' or at(P, 1) == '\\\\' then\r\n                anchor = anchor..'\\\\'\r\n                P = P:sub(2)\r\n            end\r\n        end\r\n        P = P:gsub('/','\\\\')\r\n    else\r\n        -- According to POSIX, in path start '//' and '/' are distinct,\r\n        -- but '///+' is equivalent to '/'.\r\n        if P:match '^//' and at(P, 3) ~= '/' then \r\n            anchor = '//'\r\n            P = P:sub(3)\r\n        elseif at(P, 1) == '/' then\r\n            anchor = '/'\r\n            P = P:match '^/*(.*)$'\r\n        end\r\n    end\r\n    local parts = {}\r\n    for part in P:gmatch('[^'..sep..']+') do\r\n        if part == '..' then\r\n            if #parts ~= 0 and parts[#parts] ~= '..' then\r\n                remove(parts)\r\n            else\r\n                append(parts, part)\r\n            end\r\n        elseif part ~= '.' then\r\n            append(parts, part)\r\n        end\r\n    end\r\n    P = anchor..concat(parts, sep)\r\n    if P == '' then P = '.' end\r\n    return P\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local anchor = ''",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if path.is_windows then\r\n        if P:match '^\\\\\\\\' then -- UNC\r\n            anchor = '\\\\\\\\'\r\n            P = P:sub(3)\r\n        elseif at(P, 1) == '/' or at(P, 1) == '\\\\' then\r\n            anchor = '\\\\'\r\n            P = P:sub(2)\r\n        elseif at(P, 2) == ':' then\r\n            anchor = P:sub(1, 2)\r\n            P = P:sub(3)\r\n            if at(P, 1) == '/' or at(P, 1) == '\\\\' then\r\n                anchor = anchor..'\\\\'\r\n                P = P:sub(2)\r\n            end\r\n        end\r\n        P = P:gsub('/','\\\\')\r\n    else\r\n        -- According to POSIX, in path start '//' and '/' are distinct,\r\n        -- but '///+' is equivalent to '/'.\r\n        if P:match '^//' and at(P, 3) ~= '/' then \r\n            anchor = '//'\r\n            P = P:sub(3)\r\n        elseif at(P, 1) == '/' then\r\n            anchor = '/'\r\n            P = P:match '^/*(.*)$'\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "if P:match '^\\\\\\\\' then -- UNC\r\n            anchor = '\\\\\\\\'\r\n            P = P:sub(3)\r\n        elseif at(P, 1) == '/' or at(P, 1) == '\\\\' then\r\n            anchor = '\\\\'\r\n            P = P:sub(2)\r\n        elseif at(P, 2) == ':' then\r\n            anchor = P:sub(1, 2)\r\n            P = P:sub(3)\r\n            if at(P, 1) == '/' or at(P, 1) == '\\\\' then\r\n                anchor = anchor..'\\\\'\r\n                P = P:sub(2)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "anchor = '\\\\\\\\'",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "P = P:sub(3)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "anchor = '\\\\'",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "P = P:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "anchor = P:sub(1, 2)",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if at(P, 1) == '/' or at(P, 1) == '\\\\' then\r\n                anchor = anchor..'\\\\'\r\n                P = P:sub(2)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "anchor = anchor..'\\\\'",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "P = P:gsub('/','\\\\')",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "if P:match '^//' and at(P, 3) ~= '/' then \r\n            anchor = '//'\r\n            P = P:sub(3)\r\n        elseif at(P, 1) == '/' then\r\n            anchor = '/'\r\n            P = P:match '^/*(.*)$'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "anchor = '//'",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "anchor = '/'",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "P = P:match '^/*(.*)$'",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "local parts = {}",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "for part in P:gmatch('[^'..sep..']+') do\r\n        if part == '..' then\r\n            if #parts ~= 0 and parts[#parts] ~= '..' then\r\n                remove(parts)\r\n            else\r\n                append(parts, part)\r\n            end\r\n        elseif part ~= '.' then\r\n            append(parts, part)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 96,
    "text": "if part == '..' then\r\n            if #parts ~= 0 and parts[#parts] ~= '..' then\r\n                remove(parts)\r\n            else\r\n                append(parts, part)\r\n            end\r\n        elseif part ~= '.' then\r\n            append(parts, part)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "if #parts ~= 0 and parts[#parts] ~= '..' then\r\n                remove(parts)\r\n            else\r\n                append(parts, part)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "remove(parts)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "append(parts, part)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "P = anchor..concat(parts, sep)",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "if P == '' then P = '.' end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "P = '.'",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function ATS (P)\r\n    if at(P,#P) ~= path.sep then\r\n        P = P..path.sep\r\n    end\r\n    return path.normcase(P)\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "if at(P,#P) ~= path.sep then\r\n        P = P..path.sep\r\n    end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "P = P..path.sep",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function path.relpath (P,start)\r\n    assert_string(1,P)\r\n\tif start then assert_string(2,start) end\r\n    local split,normcase,min,append = utils.split, path.normcase, math.min, table.insert\r\n    P = normcase(path.abspath(P,start))\r\n    start = start or currentdir()\r\n    start = normcase(start)\r\n    local startl, Pl = split(start,sep), split(P,sep)\r\n    local n = min(#startl,#Pl)\r\n    if path.is_windows and n > 0 and at(Pl[1],2) == ':' and Pl[1] ~= startl[1] then\r\n        return P\r\n    end\r\n    local k = n+1 -- default value if this loop doesn't bail out!\r\n    for i = 1,n do\r\n        if startl[i] ~= Pl[i] then\r\n            k = i\r\n            break\r\n        end\r\n    end\r\n    local rell = {}\r\n    for i = 1, #startl-k+1 do rell[i] = '..' end\r\n    if k <= #Pl then\r\n        for i = k,#Pl do append(rell,Pl[i]) end\r\n    end\r\n    return table.concat(rell,sep)\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "if start then assert_string(2,start) end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "assert_string(2,start)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "local split,normcase,min,append = utils.split, path.normcase, math.min, table.insert",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "P = normcase(path.abspath(P,start))",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "start = start or currentdir()",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "start = normcase(start)",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "local startl, Pl = split(start,sep), split(P,sep)",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "local n = min(#startl,#Pl)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if path.is_windows and n > 0 and at(Pl[1],2) == ':' and Pl[1] ~= startl[1] then\r\n        return P\r\n    end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "local k = n+1",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "for i = 1,n do\r\n        if startl[i] ~= Pl[i] then\r\n            k = i\r\n            break\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 120,
    "text": "if startl[i] ~= Pl[i] then\r\n            k = i\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "k = i",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "local rell = {}",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "for i = 1, #startl-k+1 do rell[i] = '..' end",
    "type": "statement:numericfor"
  }, {
    "id": 124,
    "text": "rell[i] = '..'",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if k <= #Pl then\r\n        for i = k,#Pl do append(rell,Pl[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "for i = k,#Pl do append(rell,Pl[i]) end",
    "type": "statement:numericfor"
  }, {
    "id": 127,
    "text": "append(rell,Pl[i])",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function path.expanduser(P)\r\n    assert_string(1,P)\r\n    if at(P,1) == '~' then\r\n        local home = getenv('HOME')\r\n        if not home then -- has to be Windows\r\n            home = getenv 'USERPROFILE' or (getenv 'HOMEDRIVE' .. getenv 'HOMEPATH')\r\n        end\r\n        return home..sub(P,2)\r\n    else\r\n        return P\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "if at(P,1) == '~' then\r\n        local home = getenv('HOME')\r\n        if not home then -- has to be Windows\r\n            home = getenv 'USERPROFILE' or (getenv 'HOMEDRIVE' .. getenv 'HOMEPATH')\r\n        end\r\n        return home..sub(P,2)\r\n    else\r\n        return P\r\n    end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "local home = getenv('HOME')",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "if not home then -- has to be Windows\r\n            home = getenv 'USERPROFILE' or (getenv 'HOMEDRIVE' .. getenv 'HOMEPATH')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "home = getenv 'USERPROFILE' or (getenv 'HOMEDRIVE' .. getenv 'HOMEPATH')",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function path.tmpname ()\r\n    local res = tmpnam()\r\n    -- On Windows if Lua is compiled using MSVC14 os.tmpname\r\n    -- already returns an absolute path within TEMP env variable directory,\r\n    -- no need to prepend it.\r\n    if path.is_windows and not res:find(':') then\r\n        res = getenv('TEMP')..res\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local res = tmpnam()",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if path.is_windows and not res:find(':') then\r\n        res = getenv('TEMP')..res\r\n    end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "res = getenv('TEMP')..res",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function path.common_prefix (path1,path2)\r\n    assert_string(1,path1)\r\n    assert_string(2,path2)\r\n    path1, path2 = path.normcase(path1), path.normcase(path2)\r\n    -- get them in order!\r\n    if #path1 > #path2 then path2,path1 = path1,path2 end\r\n    for i = 1,#path1 do\r\n        local c1 = at(path1,i)\r\n        if c1 ~= at(path2,i) then\r\n            local cp = path1:sub(1,i-1)\r\n            if at(path1,i-1) ~= sep then\r\n                cp = path.dirname(cp)\r\n            end\r\n            return cp\r\n        end\r\n    end\r\n    if at(path2,#path1+1) ~= sep then path1 = path.dirname(path1) end\r\n    return path1\r\n    --return ''\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "assert_string(1,path1)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "assert_string(2,path2)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "path1, path2 = path.normcase(path1), path.normcase(path2)",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "if #path1 > #path2 then path2,path1 = path1,path2 end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "path2,path1 = path1,path2",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "for i = 1,#path1 do\r\n        local c1 = at(path1,i)\r\n        if c1 ~= at(path2,i) then\r\n            local cp = path1:sub(1,i-1)\r\n            if at(path1,i-1) ~= sep then\r\n                cp = path.dirname(cp)\r\n            end\r\n            return cp\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 147,
    "text": "local c1 = at(path1,i)",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if c1 ~= at(path2,i) then\r\n            local cp = path1:sub(1,i-1)\r\n            if at(path1,i-1) ~= sep then\r\n                cp = path.dirname(cp)\r\n            end\r\n            return cp\r\n        end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "local cp = path1:sub(1,i-1)",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "if at(path1,i-1) ~= sep then\r\n                cp = path.dirname(cp)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "cp = path.dirname(cp)",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if at(path2,#path1+1) ~= sep then path1 = path.dirname(path1) end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "path1 = path.dirname(path1)",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function path.package_path(mod)\r\n    assert_string(1,mod)\r\n    local res\r\n    mod = mod:gsub('%.',sep)\r\n    res = package.searchpath(mod,package.path)\r\n    if res then return res,true end\r\n    res = package.searchpath(mod,package.cpath)\r\n    if res then return res,false end\r\n    return raise 'cannot find module on path'\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "assert_string(1,mod)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "mod = mod:gsub('%.',sep)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "res = package.searchpath(mod,package.path)",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "if res then return res,true end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "res = package.searchpath(mod,package.cpath)",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "if res then return res,false end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "",
    "type": "function container"
  }, {
    "id": 165,
    "text": "normcase",
    "type": "global function"
  }, {
    "id": 166,
    "text": "getmtime",
    "type": "global function"
  }, {
    "id": 167,
    "text": "append",
    "type": "global function"
  }, {
    "id": 168,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 169,
    "text": "tmpnam",
    "type": "global function"
  }, {
    "id": 170,
    "text": "min",
    "type": "global function"
  }, {
    "id": 171,
    "text": "searchpath",
    "type": "global function"
  }, {
    "id": 172,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 173,
    "text": "attrib",
    "type": "global function"
  }, {
    "id": 174,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 175,
    "text": "link_attrib",
    "type": "global function"
  }, {
    "id": 176,
    "text": "require",
    "type": "global function"
  }, {
    "id": 177,
    "text": "raise",
    "type": "global function"
  }, {
    "id": 178,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 179,
    "text": "isfile",
    "type": "global function"
  }, {
    "id": 180,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 181,
    "text": "currentdir",
    "type": "global function"
  }, {
    "id": 182,
    "text": "select",
    "type": "global function"
  }, {
    "id": 183,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 184,
    "text": "split",
    "type": "global function"
  }, {
    "id": 185,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 186,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 187,
    "text": "error",
    "type": "global function"
  }, {
    "id": 188,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 189,
    "text": "attrib",
    "type": "global function"
  }, {
    "id": 190,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "variable container"
  }, {
    "id": 196,
    "text": "",
    "type": "require container"
  }, {
    "id": 197,
    "text": "",
    "type": "local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "n/a"
  }, {
    "id": 199,
    "text": "",
    "type": "local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "n/a"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "n/a"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "n/a"
  }, {
    "id": 216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "n/a"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "n/a"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 229,
    "text": "",
    "type": "local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "n/a"
  }, {
    "id": 235,
    "text": "",
    "type": "local variable"
  }, {
    "id": 236,
    "text": "",
    "type": "n/a"
  }, {
    "id": 237,
    "text": "",
    "type": "global variable"
  }, {
    "id": 238,
    "text": "",
    "type": "n/a"
  }, {
    "id": 239,
    "text": "",
    "type": "global variable"
  }, {
    "id": 240,
    "text": "",
    "type": "n/a"
  }, {
    "id": 241,
    "text": "",
    "type": "global variable"
  }, {
    "id": 242,
    "text": "",
    "type": "n/a"
  }, {
    "id": 243,
    "text": "",
    "type": "global variable"
  }, {
    "id": 244,
    "text": "",
    "type": "n/a"
  }, {
    "id": 245,
    "text": "",
    "type": "global variable"
  }, {
    "id": 246,
    "text": "",
    "type": "n/a"
  }, {
    "id": 247,
    "text": "",
    "type": "global variable"
  }, {
    "id": 248,
    "text": "",
    "type": "n/a"
  }, {
    "id": 249,
    "text": "",
    "type": "global variable"
  }, {
    "id": 250,
    "text": "",
    "type": "n/a"
  }, {
    "id": 251,
    "text": "",
    "type": "global variable"
  }, {
    "id": 252,
    "text": "",
    "type": "n/a"
  }, {
    "id": 253,
    "text": "",
    "type": "global variable"
  }, {
    "id": 254,
    "text": "",
    "type": "n/a"
  }, {
    "id": 255,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "interface container"
  }, {
    "id": 257,
    "text": "",
    "type": "interface"
  }, {
    "id": 258,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 259,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 261,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 263,
    "text": "",
    "type": "require local variable"
  } ]
}