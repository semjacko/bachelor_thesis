{
  "_filename": "input.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/input.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 6
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 6
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 39,
    "label": "has",
    "to": 51
  }, {
    "from": 39,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 39,
    "label": "has",
    "to": 60
  }, {
    "from": 39,
    "label": "has",
    "to": 61
  }, {
    "from": 39,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 39,
    "label": "has",
    "to": 69
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 70
  }, {
    "from": 39,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 14
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 80,
    "label": "has",
    "to": 6
  }, {
    "from": 80,
    "label": "has",
    "to": 6
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 22
  }, {
    "from": 82,
    "label": "has",
    "to": 23
  }, {
    "from": 82,
    "label": "has",
    "to": 6
  }, {
    "from": 82,
    "label": "has",
    "to": 6
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 85,
    "label": "has",
    "to": 70
  }, {
    "from": 85,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 14
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 85,
    "label": "has",
    "to": 6
  }, {
    "from": 85,
    "label": "has",
    "to": 6
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 17,
    "label": "calls",
    "to": 89
  }, {
    "from": 39,
    "label": "calls",
    "to": 31
  }, {
    "from": 27,
    "label": "calls",
    "to": 99
  }, {
    "from": 29,
    "label": "calls",
    "to": 99
  }, {
    "from": 87,
    "label": "calls",
    "to": 91
  }, {
    "from": 39,
    "label": "calls",
    "to": 100
  }, {
    "from": 27,
    "label": "calls",
    "to": 17
  }, {
    "from": 29,
    "label": "calls",
    "to": 17
  }, {
    "from": 39,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 101
  }, {
    "from": 17,
    "label": "calls",
    "to": 93
  }, {
    "from": 39,
    "label": "calls",
    "to": 93
  }, {
    "from": 17,
    "label": "calls",
    "to": 102
  }, {
    "from": 39,
    "label": "calls",
    "to": 88
  }, {
    "from": 3,
    "label": "calls",
    "to": 95
  }, {
    "from": 3,
    "label": "calls",
    "to": 95
  }, {
    "from": 39,
    "label": "calls",
    "to": 95
  }, {
    "from": 31,
    "label": "calls",
    "to": 97
  }, {
    "from": 39,
    "label": "calls",
    "to": 96
  }, {
    "from": 3,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 3,
    "label": "calls",
    "to": 94
  }, {
    "from": 1,
    "label": "contains",
    "to": 87
  }, {
    "from": 87,
    "label": "declares",
    "to": 3
  }, {
    "from": 87,
    "label": "declares",
    "to": 17
  }, {
    "from": 87,
    "label": "declares",
    "to": 27
  }, {
    "from": 87,
    "label": "declares",
    "to": 29
  }, {
    "from": 87,
    "label": "declares",
    "to": 31
  }, {
    "from": 87,
    "label": "declares",
    "to": 39
  }, {
    "from": 87,
    "label": "declares",
    "to": 80
  }, {
    "from": 87,
    "label": "declares",
    "to": 82
  }, {
    "from": 87,
    "label": "declares",
    "to": 84
  }, {
    "from": 87,
    "label": "declares",
    "to": 85
  }, {
    "from": 1,
    "label": "declares",
    "to": 90
  }, {
    "from": 1,
    "label": "contains",
    "to": 103
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 103,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 103,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 103,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 103,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 103,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 103,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 103,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 103,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 103,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 103,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 103,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 103,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 104,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 130
  }, {
    "from": 125,
    "label": "represents",
    "to": 131
  }, {
    "from": 130,
    "label": "provides",
    "to": 131
  }, {
    "from": 132,
    "label": "requires",
    "to": 1
  }, {
    "from": 125,
    "label": "contains",
    "to": 3
  }, {
    "from": 125,
    "label": "contains",
    "to": 17
  }, {
    "from": 125,
    "label": "contains",
    "to": 27
  }, {
    "from": 125,
    "label": "contains",
    "to": 29
  }, {
    "from": 125,
    "label": "contains",
    "to": 39
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "input",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "function input.alltokens (getter,pattern,fn)\r\n    local line = getter()  -- current line\r\n    local pos = 1           -- current position in the line\r\n    return function ()      -- iterator function\r\n        while line do         -- repeat while there are lines\r\n          local s, e = strfind(line, pattern, pos)\r\n          if s then           -- found a word?\r\n            pos = e + 1       -- next position is after this token\r\n            local res = strsub(line, s, e)     -- return the token\r\n            if fn then res = fn(res) end\r\n            return res\r\n          else\r\n            line = getter()  -- token not found; try next line\r\n            pos = 1           -- restart from first position\r\n          end\r\n        end\r\n        return nil            -- no more lines: end of traversal\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local line = getter()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "while line do         -- repeat while there are lines\r\n          local s, e = strfind(line, pattern, pos)\r\n          if s then           -- found a word?\r\n            pos = e + 1       -- next position is after this token\r\n            local res = strsub(line, s, e)     -- return the token\r\n            if fn then res = fn(res) end\r\n            return res\r\n          else\r\n            line = getter()  -- token not found; try next line\r\n            pos = 1           -- restart from first position\r\n          end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 8,
    "text": "local s, e = strfind(line, pattern, pos)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if s then           -- found a word?\r\n            pos = e + 1       -- next position is after this token\r\n            local res = strsub(line, s, e)     -- return the token\r\n            if fn then res = fn(res) end\r\n            return res\r\n          else\r\n            line = getter()  -- token not found; try next line\r\n            pos = 1           -- restart from first position\r\n          end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "pos = e + 1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local res = strsub(line, s, e)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if fn then res = fn(res) end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "res = fn(res)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "line = getter()",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "pos = 1",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function input.create_getter(f)\r\n    if f then\r\n        if type(f) == 'string' then\r\n            local ls = utils.split(f,'\\n')\r\n            local i,n = 0,#ls\r\n            return function()\r\n                i = i + 1\r\n                if i > n then return nil end\r\n                return ls[i]\r\n            end\r\n        else\r\n            -- anything that supports the read() method!\r\n            if not f.read then error('not a file-like object') end\r\n            return function() return f:read() end\r\n        end\r\n    else\r\n        return io.read  -- i.e. just read from stdin\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if f then\r\n        if type(f) == 'string' then\r\n            local ls = utils.split(f,'\\n')\r\n            local i,n = 0,#ls\r\n            return function()\r\n                i = i + 1\r\n                if i > n then return nil end\r\n                return ls[i]\r\n            end\r\n        else\r\n            -- anything that supports the read() method!\r\n            if not f.read then error('not a file-like object') end\r\n            return function() return f:read() end\r\n        end\r\n    else\r\n        return io.read  -- i.e. just read from stdin\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "if type(f) == 'string' then\r\n            local ls = utils.split(f,'\\n')\r\n            local i,n = 0,#ls\r\n            return function()\r\n                i = i + 1\r\n                if i > n then return nil end\r\n                return ls[i]\r\n            end\r\n        else\r\n            -- anything that supports the read() method!\r\n            if not f.read then error('not a file-like object') end\r\n            return function() return f:read() end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "local ls = utils.split(f,'\\n')",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local i,n = 0,#ls",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if i > n then return nil end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "if not f.read then error('not a file-like object') end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "error('not a file-like object')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function input.numbers(f)\r\n    return alltokens(input.create_getter(f),\r\n        '('..patterns.FLOAT..')',tonumber)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function input.words(f)\r\n    return alltokens(input.create_getter(f),\"%w+\")\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function apply_tonumber (no_fail,...)\r\n    local args = {...}\r\n    for i = 1,#args do\r\n        local n = tonumber(args[i])\r\n        if  n == nil then\r\n            if not no_fail then return nil,args[i] end\r\n        else\r\n            args[i] = n\r\n        end\r\n    end\r\n    return args\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "for i = 1,#args do\r\n        local n = tonumber(args[i])\r\n        if  n == nil then\r\n            if not no_fail then return nil,args[i] end\r\n        else\r\n            args[i] = n\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 34,
    "text": "local n = tonumber(args[i])",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if  n == nil then\r\n            if not no_fail then return nil,args[i] end\r\n        else\r\n            args[i] = n\r\n        end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if not no_fail then return nil,args[i] end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "args[i] = n",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function input.fields (ids,delim,f,opts)\r\n  local sep\r\n  local s\r\n  local getter = input.create_getter(f)\r\n  local no_fail = opts and opts.no_fail\r\n  local no_convert = opts and opts.no_convert\r\n  if not delim or delim == ' ' then\r\n      delim = '%s'\r\n      sep = '%s+'\r\n      s = '%s*'\r\n  else\r\n      sep = delim\r\n      s = ''\r\n  end\r\n  local max_id = 0\r\n  if type(ids) == 'table' then\r\n    for i,id in pairs(ids) do\r\n      if id > max_id then max_id = id end\r\n    end\r\n  else\r\n    max_id = ids\r\n    ids = {}\r\n    for i = 1,max_id do ids[#ids+1] = i end\r\n  end\r\n  local pat = '[^'..delim..']*'\r\n  local k = 1\r\n  for i = 1,max_id do\r\n    if ids[k] == i then\r\n      k = k + 1\r\n      s = s..'('..pat..')'\r\n    else\r\n      s = s..pat\r\n    end\r\n    if i < max_id then\r\n      s = s..sep\r\n    end\r\n  end\r\n  local linecount = 1\r\n  return function()\r\n    local line,results,err\r\n    repeat\r\n        line = getter()\r\n        linecount = linecount + 1\r\n        if not line then return nil end\r\n        if no_convert then\r\n            results = {strmatch(line,s)}\r\n        else\r\n            results,err = apply_tonumber(no_fail,strmatch(line,s))\r\n            if not results then\r\n                utils.quit(\"line \"..(linecount-1)..\": cannot convert '\"..err..\"' to number\")\r\n            end\r\n        end\r\n    until #results > 0\r\n    return unpack(results)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local sep",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local getter = input.create_getter(f)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local no_fail = opts and opts.no_fail",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local no_convert = opts and opts.no_convert",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if not delim or delim == ' ' then\r\n      delim = '%s'\r\n      sep = '%s+'\r\n      s = '%s*'\r\n  else\r\n      sep = delim\r\n      s = ''\r\n  end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "delim = '%s'",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "sep = '%s+'",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "s = '%s*'",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "sep = delim",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "s = ''",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local max_id = 0",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if type(ids) == 'table' then\r\n    for i,id in pairs(ids) do\r\n      if id > max_id then max_id = id end\r\n    end\r\n  else\r\n    max_id = ids\r\n    ids = {}\r\n    for i = 1,max_id do ids[#ids+1] = i end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "for i,id in pairs(ids) do\r\n      if id > max_id then max_id = id end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "if id > max_id then max_id = id end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "max_id = id",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "max_id = ids",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "ids = {}",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "for i = 1,max_id do ids[#ids+1] = i end",
    "type": "statement:numericfor"
  }, {
    "id": 59,
    "text": "ids[#ids+1] = i",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "local pat = '[^'..delim..']*'",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local k = 1",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "for i = 1,max_id do\r\n    if ids[k] == i then\r\n      k = k + 1\r\n      s = s..'('..pat..')'\r\n    else\r\n      s = s..pat\r\n    end\r\n    if i < max_id then\r\n      s = s..sep\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 63,
    "text": "if ids[k] == i then\r\n      k = k + 1\r\n      s = s..'('..pat..')'\r\n    else\r\n      s = s..pat\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "s = s..'('..pat..')'",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "s = s..pat",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "if i < max_id then\r\n      s = s..sep\r\n    end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "s = s..sep",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "local linecount = 1",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local line,results,err",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "repeat\r\n        line = getter()\r\n        linecount = linecount + 1\r\n        if not line then return nil end\r\n        if no_convert then\r\n            results = {strmatch(line,s)}\r\n        else\r\n            results,err = apply_tonumber(no_fail,strmatch(line,s))\r\n            if not results then\r\n                utils.quit(\"line \"..(linecount-1)..\": cannot convert '\"..err..\"' to number\")\r\n            end\r\n        end\r\n    until #results > 0",
    "type": "statement:repeat"
  }, {
    "id": 72,
    "text": "linecount = linecount + 1",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if not line then return nil end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "if no_convert then\r\n            results = {strmatch(line,s)}\r\n        else\r\n            results,err = apply_tonumber(no_fail,strmatch(line,s))\r\n            if not results then\r\n                utils.quit(\"line \"..(linecount-1)..\": cannot convert '\"..err..\"' to number\")\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "results = {strmatch(line,s)}",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "results,err = apply_tonumber(no_fail,strmatch(line,s))",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "if not results then\r\n                utils.quit(\"line \"..(linecount-1)..\": cannot convert '\"..err..\"' to number\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "utils.quit(\"line \"..(linecount-1)..\": cannot convert '\"..err..\"' to number\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function ()      -- iterator function\r\n        while line do         -- repeat while there are lines\r\n          local s, e = strfind(line, pattern, pos)\r\n          if s then           -- found a word?\r\n            pos = e + 1       -- next position is after this token\r\n            local res = strsub(line, s, e)     -- return the token\r\n            if fn then res = fn(res) end\r\n            return res\r\n          else\r\n            line = getter()  -- token not found; try next line\r\n            pos = 1           -- restart from first position\r\n          end\r\n        end\r\n        return nil            -- no more lines: end of traversal\r\n   end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function()\r\n                i = i + 1\r\n                if i > n then return nil end\r\n                return ls[i]\r\n            end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function() return f:read() end",
    "type": "function"
  }, {
    "id": 85,
    "text": "function()\r\n    local line,results,err\r\n    repeat\r\n        line = getter()\r\n        linecount = linecount + 1\r\n        if not line then return nil end\r\n        if no_convert then\r\n            results = {strmatch(line,s)}\r\n        else\r\n            results,err = apply_tonumber(no_fail,strmatch(line,s))\r\n            if not results then\r\n                utils.quit(\"line \"..(linecount-1)..\": cannot convert '\"..err..\"' to number\")\r\n            end\r\n        end\r\n    until #results > 0\r\n    return unpack(results)\r\n  end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "",
    "type": "function container"
  }, {
    "id": 88,
    "text": "quit",
    "type": "global function"
  }, {
    "id": 89,
    "text": "split",
    "type": "global function"
  }, {
    "id": 90,
    "text": "fields",
    "type": "global function"
  }, {
    "id": 91,
    "text": "require",
    "type": "global function"
  }, {
    "id": 92,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 93,
    "text": "type",
    "type": "global function"
  }, {
    "id": 94,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 95,
    "text": "getter",
    "type": "global function"
  }, {
    "id": 96,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 97,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 98,
    "text": "strmatch",
    "type": "global function"
  }, {
    "id": 99,
    "text": "alltokens",
    "type": "global function"
  }, {
    "id": 100,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 101,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 102,
    "text": "error",
    "type": "global function"
  }, {
    "id": 103,
    "text": "",
    "type": "variable container"
  }, {
    "id": 104,
    "text": "",
    "type": "require container"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "n/a"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "n/a"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "interface container"
  }, {
    "id": 131,
    "text": "",
    "type": "interface"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  } ]
}