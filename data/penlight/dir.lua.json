{
  "_filename": "dir.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/dir.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 5
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 5
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 22
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 39
  }, {
    "from": 49,
    "label": "has",
    "to": 5
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 51,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 51,
    "label": "has",
    "to": 5
  }, {
    "from": 51,
    "label": "has",
    "to": 5
  }, {
    "from": 51,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 62,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 71,
    "label": "has",
    "to": 77
  }, {
    "from": 71,
    "label": "has",
    "to": 78
  }, {
    "from": 71,
    "label": "has",
    "to": 79
  }, {
    "from": 71,
    "label": "has",
    "to": 80
  }, {
    "from": 71,
    "label": "has",
    "to": 81
  }, {
    "from": 71,
    "label": "has",
    "to": 82
  }, {
    "from": 61,
    "label": "has",
    "to": 83
  }, {
    "from": 61,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 91,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 91,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 5
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 110
  }, {
    "from": 114,
    "label": "has",
    "to": 111
  }, {
    "from": 114,
    "label": "has",
    "to": 5
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 34
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 116,
    "label": "has",
    "to": 5
  }, {
    "from": 116,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 126,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 140
  }, {
    "from": 134,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 5
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 142,
    "label": "has",
    "to": 5
  }, {
    "from": 142,
    "label": "has",
    "to": 5
  }, {
    "from": 142,
    "label": "has",
    "to": 5
  }, {
    "from": 142,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 5
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 151,
    "label": "has",
    "to": 5
  }, {
    "from": 151,
    "label": "has",
    "to": 5
  }, {
    "from": 151,
    "label": "has",
    "to": 5
  }, {
    "from": 151,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 5
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 167
  }, {
    "from": 161,
    "label": "has",
    "to": 168
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 169
  }, {
    "from": 161,
    "label": "has",
    "to": 170
  }, {
    "from": 161,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 161,
    "label": "has",
    "to": 173
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 174
  }, {
    "from": 161,
    "label": "has",
    "to": 175
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 176
  }, {
    "from": 161,
    "label": "has",
    "to": 177
  }, {
    "from": 161,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 161,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 181,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 192,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 201,
    "label": "has",
    "to": 205
  }, {
    "from": 201,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 201,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 201,
    "label": "has",
    "to": 5
  }, {
    "from": 201,
    "label": "has",
    "to": 217
  }, {
    "from": 201,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 221,
    "label": "has",
    "to": 118
  }, {
    "from": 221,
    "label": "has",
    "to": 224
  }, {
    "from": 221,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 221,
    "label": "has",
    "to": 5
  }, {
    "from": 221,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 140
  }, {
    "from": 232,
    "label": "has",
    "to": 217
  }, {
    "from": 87,
    "label": "calls",
    "to": 85
  }, {
    "from": 87,
    "label": "calls",
    "to": 85
  }, {
    "from": 161,
    "label": "calls",
    "to": 247
  }, {
    "from": 51,
    "label": "calls",
    "to": 238
  }, {
    "from": 87,
    "label": "calls",
    "to": 262
  }, {
    "from": 87,
    "label": "calls",
    "to": 61
  }, {
    "from": 38,
    "label": "calls",
    "to": 28
  }, {
    "from": 49,
    "label": "calls",
    "to": 28
  }, {
    "from": 28,
    "label": "calls",
    "to": 47
  }, {
    "from": 126,
    "label": "calls",
    "to": 253
  }, {
    "from": 126,
    "label": "calls",
    "to": 253
  }, {
    "from": 219,
    "label": "calls",
    "to": 253
  }, {
    "from": 161,
    "label": "calls",
    "to": 260
  }, {
    "from": 161,
    "label": "calls",
    "to": 260
  }, {
    "from": 161,
    "label": "calls",
    "to": 260
  }, {
    "from": 16,
    "label": "calls",
    "to": 13
  }, {
    "from": 20,
    "label": "calls",
    "to": 13
  }, {
    "from": 38,
    "label": "calls",
    "to": 13
  }, {
    "from": 221,
    "label": "calls",
    "to": 13
  }, {
    "from": 233,
    "label": "calls",
    "to": 257
  }, {
    "from": 233,
    "label": "calls",
    "to": 257
  }, {
    "from": 4,
    "label": "calls",
    "to": 257
  }, {
    "from": 161,
    "label": "calls",
    "to": 258
  }, {
    "from": 161,
    "label": "calls",
    "to": 258
  }, {
    "from": 28,
    "label": "calls",
    "to": 264
  }, {
    "from": 20,
    "label": "calls",
    "to": 4
  }, {
    "from": 28,
    "label": "calls",
    "to": 4
  }, {
    "from": 116,
    "label": "calls",
    "to": 4
  }, {
    "from": 116,
    "label": "calls",
    "to": 4
  }, {
    "from": 221,
    "label": "calls",
    "to": 4
  }, {
    "from": 87,
    "label": "calls",
    "to": 240
  }, {
    "from": 87,
    "label": "calls",
    "to": 245
  }, {
    "from": 20,
    "label": "calls",
    "to": 250
  }, {
    "from": 28,
    "label": "calls",
    "to": 250
  }, {
    "from": 116,
    "label": "calls",
    "to": 250
  }, {
    "from": 116,
    "label": "calls",
    "to": 250
  }, {
    "from": 161,
    "label": "calls",
    "to": 250
  }, {
    "from": 161,
    "label": "calls",
    "to": 250
  }, {
    "from": 87,
    "label": "calls",
    "to": 51
  }, {
    "from": 87,
    "label": "calls",
    "to": 51
  }, {
    "from": 87,
    "label": "calls",
    "to": 51
  }, {
    "from": 161,
    "label": "calls",
    "to": 158
  }, {
    "from": 161,
    "label": "calls",
    "to": 265
  }, {
    "from": 151,
    "label": "calls",
    "to": 266
  }, {
    "from": 61,
    "label": "calls",
    "to": 259
  }, {
    "from": 61,
    "label": "calls",
    "to": 259
  }, {
    "from": 28,
    "label": "calls",
    "to": 267
  }, {
    "from": 116,
    "label": "calls",
    "to": 267
  }, {
    "from": 219,
    "label": "calls",
    "to": 267
  }, {
    "from": 161,
    "label": "calls",
    "to": 273
  }, {
    "from": 161,
    "label": "calls",
    "to": 273
  }, {
    "from": 161,
    "label": "calls",
    "to": 273
  }, {
    "from": 161,
    "label": "calls",
    "to": 273
  }, {
    "from": 28,
    "label": "calls",
    "to": 236
  }, {
    "from": 87,
    "label": "calls",
    "to": 236
  }, {
    "from": 116,
    "label": "calls",
    "to": 236
  }, {
    "from": 142,
    "label": "calls",
    "to": 236
  }, {
    "from": 61,
    "label": "calls",
    "to": 274
  }, {
    "from": 219,
    "label": "calls",
    "to": 219
  }, {
    "from": 201,
    "label": "calls",
    "to": 219
  }, {
    "from": 221,
    "label": "calls",
    "to": 201
  }, {
    "from": 161,
    "label": "calls",
    "to": 248
  }, {
    "from": 161,
    "label": "calls",
    "to": 248
  }, {
    "from": 221,
    "label": "calls",
    "to": 248
  }, {
    "from": 219,
    "label": "calls",
    "to": 276
  }, {
    "from": 13,
    "label": "calls",
    "to": 244
  }, {
    "from": 28,
    "label": "calls",
    "to": 246
  }, {
    "from": 51,
    "label": "calls",
    "to": 242
  }, {
    "from": 87,
    "label": "calls",
    "to": 277
  }, {
    "from": 109,
    "label": "calls",
    "to": 87
  }, {
    "from": 114,
    "label": "calls",
    "to": 87
  }, {
    "from": 38,
    "label": "calls",
    "to": 7
  }, {
    "from": 49,
    "label": "calls",
    "to": 7
  }, {
    "from": 134,
    "label": "calls",
    "to": 7
  }, {
    "from": 142,
    "label": "calls",
    "to": 7
  }, {
    "from": 221,
    "label": "calls",
    "to": 7
  }, {
    "from": 142,
    "label": "calls",
    "to": 235
  }, {
    "from": 142,
    "label": "calls",
    "to": 134
  }, {
    "from": 161,
    "label": "calls",
    "to": 134
  }, {
    "from": 134,
    "label": "calls",
    "to": 275
  }, {
    "from": 201,
    "label": "calls",
    "to": 275
  }, {
    "from": 87,
    "label": "calls",
    "to": 243
  }, {
    "from": 151,
    "label": "calls",
    "to": 243
  }, {
    "from": 201,
    "label": "calls",
    "to": 278
  }, {
    "from": 201,
    "label": "calls",
    "to": 278
  }, {
    "from": 20,
    "label": "calls",
    "to": 249
  }, {
    "from": 126,
    "label": "calls",
    "to": 249
  }, {
    "from": 142,
    "label": "calls",
    "to": 249
  }, {
    "from": 161,
    "label": "calls",
    "to": 249
  }, {
    "from": 87,
    "label": "calls",
    "to": 254
  }, {
    "from": 61,
    "label": "calls",
    "to": 279
  }, {
    "from": 126,
    "label": "calls",
    "to": 116
  }, {
    "from": 51,
    "label": "calls",
    "to": 239
  }, {
    "from": 85,
    "label": "calls",
    "to": 239
  }, {
    "from": 85,
    "label": "calls",
    "to": 239
  }, {
    "from": 87,
    "label": "calls",
    "to": 239
  }, {
    "from": 116,
    "label": "calls",
    "to": 255
  }, {
    "from": 16,
    "label": "calls",
    "to": 263
  }, {
    "from": 16,
    "label": "calls",
    "to": 263
  }, {
    "from": 20,
    "label": "calls",
    "to": 263
  }, {
    "from": 38,
    "label": "calls",
    "to": 263
  }, {
    "from": 109,
    "label": "calls",
    "to": 263
  }, {
    "from": 109,
    "label": "calls",
    "to": 263
  }, {
    "from": 114,
    "label": "calls",
    "to": 263
  }, {
    "from": 114,
    "label": "calls",
    "to": 263
  }, {
    "from": 158,
    "label": "calls",
    "to": 263
  }, {
    "from": 161,
    "label": "calls",
    "to": 263
  }, {
    "from": 161,
    "label": "calls",
    "to": 263
  }, {
    "from": 161,
    "label": "calls",
    "to": 261
  }, {
    "from": 161,
    "label": "calls",
    "to": 261
  }, {
    "from": 219,
    "label": "calls",
    "to": 261
  }, {
    "from": 151,
    "label": "calls",
    "to": 151
  }, {
    "from": 158,
    "label": "calls",
    "to": 151
  }, {
    "from": 201,
    "label": "calls",
    "to": 268
  }, {
    "from": 7,
    "label": "calls",
    "to": 280
  }, {
    "from": 10,
    "label": "calls",
    "to": 280
  }, {
    "from": 20,
    "label": "calls",
    "to": 280
  }, {
    "from": 51,
    "label": "calls",
    "to": 237
  }, {
    "from": 126,
    "label": "calls",
    "to": 126
  }, {
    "from": 134,
    "label": "calls",
    "to": 126
  }, {
    "from": 4,
    "label": "calls",
    "to": 281
  }, {
    "from": 51,
    "label": "calls",
    "to": 270
  }, {
    "from": 51,
    "label": "calls",
    "to": 270
  }, {
    "from": 142,
    "label": "calls",
    "to": 270
  }, {
    "from": 13,
    "label": "calls",
    "to": 234
  }, {
    "from": 16,
    "label": "calls",
    "to": 234
  }, {
    "from": 20,
    "label": "calls",
    "to": 234
  }, {
    "from": 38,
    "label": "calls",
    "to": 234
  }, {
    "from": 87,
    "label": "calls",
    "to": 234
  }, {
    "from": 87,
    "label": "calls",
    "to": 234
  }, {
    "from": 158,
    "label": "calls",
    "to": 234
  }, {
    "from": 142,
    "label": "calls",
    "to": 251
  }, {
    "from": 161,
    "label": "calls",
    "to": 269
  }, {
    "from": 161,
    "label": "calls",
    "to": 269
  }, {
    "from": 158,
    "label": "calls",
    "to": 241
  }, {
    "from": 87,
    "label": "calls",
    "to": 252
  }, {
    "from": 1,
    "label": "contains",
    "to": 233
  }, {
    "from": 233,
    "label": "declares",
    "to": 4
  }, {
    "from": 233,
    "label": "declares",
    "to": 7
  }, {
    "from": 233,
    "label": "declares",
    "to": 10
  }, {
    "from": 233,
    "label": "declares",
    "to": 13
  }, {
    "from": 233,
    "label": "declares",
    "to": 16
  }, {
    "from": 233,
    "label": "declares",
    "to": 20
  }, {
    "from": 233,
    "label": "declares",
    "to": 28
  }, {
    "from": 233,
    "label": "declares",
    "to": 38
  }, {
    "from": 233,
    "label": "declares",
    "to": 47
  }, {
    "from": 233,
    "label": "declares",
    "to": 49
  }, {
    "from": 233,
    "label": "declares",
    "to": 51
  }, {
    "from": 233,
    "label": "declares",
    "to": 61
  }, {
    "from": 233,
    "label": "declares",
    "to": 85
  }, {
    "from": 233,
    "label": "declares",
    "to": 87
  }, {
    "from": 233,
    "label": "declares",
    "to": 109
  }, {
    "from": 233,
    "label": "declares",
    "to": 114
  }, {
    "from": 233,
    "label": "declares",
    "to": 116
  }, {
    "from": 233,
    "label": "declares",
    "to": 126
  }, {
    "from": 233,
    "label": "declares",
    "to": 134
  }, {
    "from": 233,
    "label": "declares",
    "to": 142
  }, {
    "from": 233,
    "label": "declares",
    "to": 151
  }, {
    "from": 233,
    "label": "declares",
    "to": 158
  }, {
    "from": 233,
    "label": "declares",
    "to": 161
  }, {
    "from": 233,
    "label": "declares",
    "to": 201
  }, {
    "from": 233,
    "label": "declares",
    "to": 219
  }, {
    "from": 233,
    "label": "declares",
    "to": 221
  }, {
    "from": 233,
    "label": "declares",
    "to": 231
  }, {
    "from": 233,
    "label": "declares",
    "to": 232
  }, {
    "from": 1,
    "label": "declares",
    "to": 256
  }, {
    "from": 1,
    "label": "declares",
    "to": 271
  }, {
    "from": 1,
    "label": "declares",
    "to": 272
  }, {
    "from": 1,
    "label": "contains",
    "to": 282
  }, {
    "from": 1,
    "label": "contains",
    "to": 283
  }, {
    "from": 282,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 282,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 282,
    "label": "initializes",
    "to": 288
  }, {
    "from": 288,
    "label": "assigns",
    "to": 289
  }, {
    "from": 282,
    "label": "initializes",
    "to": 290
  }, {
    "from": 290,
    "label": "assigns",
    "to": 291
  }, {
    "from": 282,
    "label": "initializes",
    "to": 292
  }, {
    "from": 292,
    "label": "assigns",
    "to": 293
  }, {
    "from": 282,
    "label": "initializes",
    "to": 294
  }, {
    "from": 294,
    "label": "assigns",
    "to": 295
  }, {
    "from": 282,
    "label": "initializes",
    "to": 296
  }, {
    "from": 296,
    "label": "assigns",
    "to": 297
  }, {
    "from": 282,
    "label": "initializes",
    "to": 298
  }, {
    "from": 298,
    "label": "assigns",
    "to": 299
  }, {
    "from": 282,
    "label": "initializes",
    "to": 300
  }, {
    "from": 300,
    "label": "assigns",
    "to": 301
  }, {
    "from": 282,
    "label": "initializes",
    "to": 302
  }, {
    "from": 302,
    "label": "assigns",
    "to": 303
  }, {
    "from": 282,
    "label": "initializes",
    "to": 304
  }, {
    "from": 304,
    "label": "assigns",
    "to": 305
  }, {
    "from": 282,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "assigns",
    "to": 307
  }, {
    "from": 282,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 282,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 282,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 282,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 282,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 282,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 282,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 282,
    "label": "initializes",
    "to": 322
  }, {
    "from": 282,
    "label": "initializes",
    "to": 323
  }, {
    "from": 282,
    "label": "initializes",
    "to": 324
  }, {
    "from": 282,
    "label": "initializes",
    "to": 325
  }, {
    "from": 282,
    "label": "initializes",
    "to": 326
  }, {
    "from": 282,
    "label": "initializes",
    "to": 327
  }, {
    "from": 282,
    "label": "initializes",
    "to": 328
  }, {
    "from": 282,
    "label": "initializes",
    "to": 329
  }, {
    "from": 282,
    "label": "initializes",
    "to": 330
  }, {
    "from": 282,
    "label": "initializes",
    "to": 331
  }, {
    "from": 283,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "requires",
    "to": 3
  }, {
    "from": 283,
    "label": "initializes",
    "to": 333
  }, {
    "from": 333,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 334
  }, {
    "from": 320,
    "label": "represents",
    "to": 335
  }, {
    "from": 334,
    "label": "provides",
    "to": 335
  }, {
    "from": 336,
    "label": "requires",
    "to": 1
  }, {
    "from": 320,
    "label": "contains",
    "to": 16
  }, {
    "from": 320,
    "label": "contains",
    "to": 20
  }, {
    "from": 320,
    "label": "contains",
    "to": 38
  }, {
    "from": 320,
    "label": "contains",
    "to": 49
  }, {
    "from": 320,
    "label": "contains",
    "to": 109
  }, {
    "from": 320,
    "label": "contains",
    "to": 114
  }, {
    "from": 320,
    "label": "contains",
    "to": 134
  }, {
    "from": 320,
    "label": "contains",
    "to": 142
  }, {
    "from": 320,
    "label": "contains",
    "to": 158
  }, {
    "from": 320,
    "label": "contains",
    "to": 161
  }, {
    "from": 320,
    "label": "contains",
    "to": 201
  }, {
    "from": 320,
    "label": "contains",
    "to": 221
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dir",
    "type": "module"
  }, {
    "id": 2,
    "text": "path",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function makelist(l)\r\n    return setmetatable(l, require('pl.List'))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function assert_dir (n,val)\r\n    assert_arg(n,val,'string',path.isdir,'not a directory',4)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "assert_arg(n,val,'string',path.isdir,'not a directory',4)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function assert_file (n,val)\r\n    assert_arg(n,val,'string',path.isfile,'not a file',4)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "assert_arg(n,val,'string',path.isfile,'not a file',4)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function filemask(mask)\r\n    mask = utils.escape(path.normcase(mask))\r\n    return '^'..mask:gsub('%%%*','.*'):gsub('%%%?','.')..'$'\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "mask = utils.escape(path.normcase(mask))",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function dir.fnmatch(filename,pattern)\r\n    assert_string(1,filename)\r\n    assert_string(2,pattern)\r\n    return path.normcase(filename):find(filemask(pattern)) ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "assert_string(1,filename)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert_string(2,pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function dir.filter(filenames,pattern)\r\n    assert_arg(1,filenames,'table')\r\n    assert_string(2,pattern)\r\n    local res = {}\r\n    local mask = filemask(pattern)\r\n    for i,f in ipairs(filenames) do\r\n        if path.normcase(f):find(mask) then append(res,f) end\r\n    end\r\n    return makelist(res)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert_arg(1,filenames,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local mask = filemask(pattern)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for i,f in ipairs(filenames) do\r\n        if path.normcase(f):find(mask) then append(res,f) end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "if path.normcase(f):find(mask) then append(res,f) end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "append(res,f)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function _listfiles(dir,filemode,match)\r\n    local res = {}\r\n    local check = utils.choose(filemode,path.isfile,path.isdir)\r\n    if not dir then dir = '.' end\r\n    for f in ldir(dir) do\r\n        if f ~= '.' and f ~= '..' then\r\n            local p = path.join(dir,f)\r\n            if check(p) and (not match or match(p)) then\r\n                append(res,p)\r\n            end\r\n        end\r\n    end\r\n    return makelist(res)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local check = utils.choose(filemode,path.isfile,path.isdir)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not dir then dir = '.' end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "dir = '.'",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "for f in ldir(dir) do\r\n        if f ~= '.' and f ~= '..' then\r\n            local p = path.join(dir,f)\r\n            if check(p) and (not match or match(p)) then\r\n                append(res,p)\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "if f ~= '.' and f ~= '..' then\r\n            local p = path.join(dir,f)\r\n            if check(p) and (not match or match(p)) then\r\n                append(res,p)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "local p = path.join(dir,f)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if check(p) and (not match or match(p)) then\r\n                append(res,p)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "append(res,p)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function dir.getfiles(dir,mask)\r\n    assert_dir(1,dir)\r\n    if mask then assert_string(2,mask) end\r\n    local match\r\n    if mask then\r\n        mask = filemask(mask)\r\n        match = function(f)\r\n            return path.normcase(f):find(mask)\r\n        end\r\n    end\r\n    return _listfiles(dir,true,match)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "assert_dir(1,dir)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "if mask then assert_string(2,mask) end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "assert_string(2,mask)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local match",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if mask then\r\n        mask = filemask(mask)\r\n        match = function(f)\r\n            return path.normcase(f):find(mask)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "mask = filemask(mask)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "match = function(f)\r\n            return path.normcase(f):find(mask)\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function(f)\r\n            return path.normcase(f):find(mask)\r\n        end",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function dir.getdirectories(dir)\r\n    assert_dir(1,dir)\r\n    return _listfiles(dir,false)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function execute_command(cmd,parms)\r\n   if not cmd_tmpfile then cmd_tmpfile = path.tmpname () end\r\n   local err = path.is_windows and ' > ' or ' 2> '\r\n    cmd = cmd..' '..parms..err..utils.quote_arg(cmd_tmpfile)\r\n    local ret = utils.execute(cmd)\r\n    if not ret then\r\n        local err = (utils.readfile(cmd_tmpfile):gsub('\\n(.*)',''))\r\n        remove(cmd_tmpfile)\r\n        return false,err\r\n    else\r\n        remove(cmd_tmpfile)\r\n        return true\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "if not cmd_tmpfile then cmd_tmpfile = path.tmpname () end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "cmd_tmpfile = path.tmpname ()",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "local err = path.is_windows and ' > ' or ' 2> '",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "cmd = cmd..' '..parms..err..utils.quote_arg(cmd_tmpfile)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local ret = utils.execute(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if not ret then\r\n        local err = (utils.readfile(cmd_tmpfile):gsub('\\n(.*)',''))\r\n        remove(cmd_tmpfile)\r\n        return false,err\r\n    else\r\n        remove(cmd_tmpfile)\r\n        return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "local err = (utils.readfile(cmd_tmpfile):gsub('\\n(.*)',''))",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "remove(cmd_tmpfile)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function find_ffi_copyfile ()\r\n    if not ffi_checked then\r\n        ffi_checked = true\r\n        local res\r\n        res,alien = pcall(require,'alien')\r\n        if not res then\r\n            alien = nil\r\n            res, ffi = pcall(require,'ffi')\r\n        end\r\n        if not res then\r\n            ffi = nil\r\n            return\r\n        end\r\n    else\r\n        return\r\n    end\r\n    if alien then\r\n        -- register the Win32 CopyFile and MoveFile functions\r\n        local kernel = alien.load('kernel32.dll')\r\n        CopyFile = kernel.CopyFileA\r\n        CopyFile:types{'string','string','int',ret='int',abi='stdcall'}\r\n        MoveFile = kernel.MoveFileA\r\n        MoveFile:types{'string','string',ret='int',abi='stdcall'}\r\n        GetLastError = kernel.GetLastError\r\n        GetLastError:types{ret ='int', abi='stdcall'}\r\n    elseif ffi then\r\n        ffi.cdef [[\r\n            int CopyFileA(const char *src, const char *dest, int iovr);\r\n            int MoveFileA(const char *src, const char *dest);\r\n            int GetLastError();\r\n        ]]\r\n        CopyFile = ffi.C.CopyFileA\r\n        MoveFile = ffi.C.MoveFileA\r\n        GetLastError = ffi.C.GetLastError\r\n    end\r\n    win32_errors = {\r\n        ERROR_FILE_NOT_FOUND    =         2,\r\n        ERROR_PATH_NOT_FOUND    =         3,\r\n        ERROR_ACCESS_DENIED    =          5,\r\n        ERROR_WRITE_PROTECT    =          19,\r\n        ERROR_BAD_UNIT         =          20,\r\n        ERROR_NOT_READY        =          21,\r\n        ERROR_WRITE_FAULT      =          29,\r\n        ERROR_READ_FAULT       =          30,\r\n        ERROR_SHARING_VIOLATION =         32,\r\n        ERROR_LOCK_VIOLATION    =         33,\r\n        ERROR_HANDLE_DISK_FULL  =         39,\r\n        ERROR_BAD_NETPATH       =         53,\r\n        ERROR_NETWORK_BUSY      =         54,\r\n        ERROR_DEV_NOT_EXIST     =         55,\r\n        ERROR_FILE_EXISTS       =         80,\r\n        ERROR_OPEN_FAILED       =         110,\r\n        ERROR_INVALID_NAME      =         123,\r\n        ERROR_BAD_PATHNAME      =         161,\r\n        ERROR_ALREADY_EXISTS    =         183,\r\n    }\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "if not ffi_checked then\r\n        ffi_checked = true\r\n        local res\r\n        res,alien = pcall(require,'alien')\r\n        if not res then\r\n            alien = nil\r\n            res, ffi = pcall(require,'ffi')\r\n        end\r\n        if not res then\r\n            ffi = nil\r\n            return\r\n        end\r\n    else\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "ffi_checked = true",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "res,alien = pcall(require,'alien')",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if not res then\r\n            alien = nil\r\n            res, ffi = pcall(require,'ffi')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "alien = nil",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "res, ffi = pcall(require,'ffi')",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if not res then\r\n            ffi = nil\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "ffi = nil",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "if alien then\r\n        -- register the Win32 CopyFile and MoveFile functions\r\n        local kernel = alien.load('kernel32.dll')\r\n        CopyFile = kernel.CopyFileA\r\n        CopyFile:types{'string','string','int',ret='int',abi='stdcall'}\r\n        MoveFile = kernel.MoveFileA\r\n        MoveFile:types{'string','string',ret='int',abi='stdcall'}\r\n        GetLastError = kernel.GetLastError\r\n        GetLastError:types{ret ='int', abi='stdcall'}\r\n    elseif ffi then\r\n        ffi.cdef [[\r\n            int CopyFileA(const char *src, const char *dest, int iovr);\r\n            int MoveFileA(const char *src, const char *dest);\r\n            int GetLastError();\r\n        ]]\r\n        CopyFile = ffi.C.CopyFileA\r\n        MoveFile = ffi.C.MoveFileA\r\n        GetLastError = ffi.C.GetLastError\r\n    end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "local kernel = alien.load('kernel32.dll')",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "CopyFile = kernel.CopyFileA",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "CopyFile:types{'string','string','int',ret='int',abi='stdcall'}",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "MoveFile = kernel.MoveFileA",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "MoveFile:types{'string','string',ret='int',abi='stdcall'}",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "GetLastError = kernel.GetLastError",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "GetLastError:types{ret ='int', abi='stdcall'}",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "ffi.cdef [[\r\n            int CopyFileA(const char *src, const char *dest, int iovr);\r\n            int MoveFileA(const char *src, const char *dest);\r\n            int GetLastError();\r\n        ]]",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "CopyFile = ffi.C.CopyFileA",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "MoveFile = ffi.C.MoveFileA",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "GetLastError = ffi.C.GetLastError",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "win32_errors = {\r\n        ERROR_FILE_NOT_FOUND    =         2,\r\n        ERROR_PATH_NOT_FOUND    =         3,\r\n        ERROR_ACCESS_DENIED    =          5,\r\n        ERROR_WRITE_PROTECT    =          19,\r\n        ERROR_BAD_UNIT         =          20,\r\n        ERROR_NOT_READY        =          21,\r\n        ERROR_WRITE_FAULT      =          29,\r\n        ERROR_READ_FAULT       =          30,\r\n        ERROR_SHARING_VIOLATION =         32,\r\n        ERROR_LOCK_VIOLATION    =         33,\r\n        ERROR_HANDLE_DISK_FULL  =         39,\r\n        ERROR_BAD_NETPATH       =         53,\r\n        ERROR_NETWORK_BUSY      =         54,\r\n        ERROR_DEV_NOT_EXIST     =         55,\r\n        ERROR_FILE_EXISTS       =         80,\r\n        ERROR_OPEN_FAILED       =         110,\r\n        ERROR_INVALID_NAME      =         123,\r\n        ERROR_BAD_PATHNAME      =         161,\r\n        ERROR_ALREADY_EXISTS    =         183,\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function two_arguments (f1,f2)\r\n    return utils.quote_arg(f1)..' '..utils.quote_arg(f2)\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "local function file_op (is_copy,src,dest,flag)\r\n    if flag == 1 and path.exists(dest) then\r\n        return false,\"cannot overwrite destination\"\r\n    end\r\n    if is_windows then\r\n        -- if we haven't tried to load Alien/LuaJIT FFI before, then do so\r\n        find_ffi_copyfile()\r\n        -- fallback if there's no Alien, just use DOS commands *shudder*\r\n        -- 'rename' involves a copy and then deleting the source.\r\n        if not CopyFile then\r\n            src = path.normcase(src)\r\n            dest = path.normcase(dest)\r\n            local cmd = is_copy and 'copy' or 'rename'\r\n            local res, err = execute_command('copy',two_arguments(src,dest))\r\n            if not res then return false,err end\r\n            if not is_copy then\r\n                return execute_command('del',utils.quote_arg(src))\r\n            end\r\n            return true\r\n        else\r\n            if path.isdir(dest) then\r\n                dest = path.join(dest,path.basename(src))\r\n            end\r\n\t\t\tlocal ret\r\n            if is_copy then ret = CopyFile(src,dest,flag)\r\n            else ret = MoveFile(src,dest) end\r\n            if ret == 0 then\r\n                local err = GetLastError()\r\n                for name,value in pairs(win32_errors) do\r\n                    if value == err then return false,name end\r\n                end\r\n                return false,\"Error #\"..err\r\n            else return true\r\n            end\r\n        end\r\n    else -- for Unix, just use cp for now\r\n        return execute_command(is_copy and 'cp' or 'mv',\r\n            two_arguments(src,dest))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "if flag == 1 and path.exists(dest) then\r\n        return false,\"cannot overwrite destination\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "if is_windows then\r\n        -- if we haven't tried to load Alien/LuaJIT FFI before, then do so\r\n        find_ffi_copyfile()\r\n        -- fallback if there's no Alien, just use DOS commands *shudder*\r\n        -- 'rename' involves a copy and then deleting the source.\r\n        if not CopyFile then\r\n            src = path.normcase(src)\r\n            dest = path.normcase(dest)\r\n            local cmd = is_copy and 'copy' or 'rename'\r\n            local res, err = execute_command('copy',two_arguments(src,dest))\r\n            if not res then return false,err end\r\n            if not is_copy then\r\n                return execute_command('del',utils.quote_arg(src))\r\n            end\r\n            return true\r\n        else\r\n            if path.isdir(dest) then\r\n                dest = path.join(dest,path.basename(src))\r\n            end\r\n\t\t\tlocal ret\r\n            if is_copy then ret = CopyFile(src,dest,flag)\r\n            else ret = MoveFile(src,dest) end\r\n            if ret == 0 then\r\n                local err = GetLastError()\r\n                for name,value in pairs(win32_errors) do\r\n                    if value == err then return false,name end\r\n                end\r\n                return false,\"Error #\"..err\r\n            else return true\r\n            end\r\n        end\r\n    else -- for Unix, just use cp for now\r\n        return execute_command(is_copy and 'cp' or 'mv',\r\n            two_arguments(src,dest))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "find_ffi_copyfile()",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "if not CopyFile then\r\n            src = path.normcase(src)\r\n            dest = path.normcase(dest)\r\n            local cmd = is_copy and 'copy' or 'rename'\r\n            local res, err = execute_command('copy',two_arguments(src,dest))\r\n            if not res then return false,err end\r\n            if not is_copy then\r\n                return execute_command('del',utils.quote_arg(src))\r\n            end\r\n            return true\r\n        else\r\n            if path.isdir(dest) then\r\n                dest = path.join(dest,path.basename(src))\r\n            end\r\n\t\t\tlocal ret\r\n            if is_copy then ret = CopyFile(src,dest,flag)\r\n            else ret = MoveFile(src,dest) end\r\n            if ret == 0 then\r\n                local err = GetLastError()\r\n                for name,value in pairs(win32_errors) do\r\n                    if value == err then return false,name end\r\n                end\r\n                return false,\"Error #\"..err\r\n            else return true\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "src = path.normcase(src)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "dest = path.normcase(dest)",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "local cmd = is_copy and 'copy' or 'rename'",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local res, err = execute_command('copy',two_arguments(src,dest))",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if not res then return false,err end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "if not is_copy then\r\n                return execute_command('del',utils.quote_arg(src))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "if path.isdir(dest) then\r\n                dest = path.join(dest,path.basename(src))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "dest = path.join(dest,path.basename(src))",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "local ret",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if is_copy then ret = CopyFile(src,dest,flag)\r\n            else ret = MoveFile(src,dest) end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "ret = CopyFile(src,dest,flag)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "ret = MoveFile(src,dest)",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "if ret == 0 then\r\n                local err = GetLastError()\r\n                for name,value in pairs(win32_errors) do\r\n                    if value == err then return false,name end\r\n                end\r\n                return false,\"Error #\"..err\r\n            else return true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "local err = GetLastError()",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "for name,value in pairs(win32_errors) do\r\n                    if value == err then return false,name end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 107,
    "text": "if value == err then return false,name end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function dir.copyfile (src,dest,flag)\r\n    assert_string(1,src)\r\n    assert_string(2,dest)\r\n    flag = flag==nil or flag\r\n    return file_op(true,src,dest,flag and 0 or 1)\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "assert_string(1,src)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert_string(2,dest)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "flag = flag==nil or flag",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function dir.movefile (src,dest)\r\n    assert_string(1,src)\r\n    assert_string(2,dest)\r\n    return file_op(false,src,dest,0)\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "local function _dirfiles(dir,attrib)\r\n    local dirs = {}\r\n    local files = {}\r\n    for f in ldir(dir) do\r\n        if f ~= '.' and f ~= '..' then\r\n            local p = path.join(dir,f)\r\n            local mode = attrib(p,'mode')\r\n            if mode=='directory' then\r\n                append(dirs,f)\r\n            else\r\n                append(files,f)\r\n            end\r\n        end\r\n    end\r\n    return makelist(dirs), makelist(files)\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "local dirs = {}",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local files = {}",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "for f in ldir(dir) do\r\n        if f ~= '.' and f ~= '..' then\r\n            local p = path.join(dir,f)\r\n            local mode = attrib(p,'mode')\r\n            if mode=='directory' then\r\n                append(dirs,f)\r\n            else\r\n                append(files,f)\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 120,
    "text": "if f ~= '.' and f ~= '..' then\r\n            local p = path.join(dir,f)\r\n            local mode = attrib(p,'mode')\r\n            if mode=='directory' then\r\n                append(dirs,f)\r\n            else\r\n                append(files,f)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "local mode = attrib(p,'mode')",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if mode=='directory' then\r\n                append(dirs,f)\r\n            else\r\n                append(files,f)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "append(dirs,f)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "append(files,f)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "local function _walker(root,bottom_up,attrib)\r\n    local dirs,files = _dirfiles(root,attrib)\r\n    if not bottom_up then yield(root,dirs,files) end\r\n    for i,d in ipairs(dirs) do\r\n        _walker(root..path.sep..d,bottom_up,attrib)\r\n    end\r\n    if bottom_up then yield(root,dirs,files) end\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "local dirs,files = _dirfiles(root,attrib)",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "if not bottom_up then yield(root,dirs,files) end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "yield(root,dirs,files)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "for i,d in ipairs(dirs) do\r\n        _walker(root..path.sep..d,bottom_up,attrib)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 131,
    "text": "_walker(root..path.sep..d,bottom_up,attrib)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "if bottom_up then yield(root,dirs,files) end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function dir.walk(root,bottom_up,follow_links)\r\n    assert_dir(1,root)\r\n    local attrib\r\n    if path.is_windows or not follow_links then\r\n        attrib = path.attrib\r\n    else\r\n        attrib = path.link_attrib\r\n    end\r\n    return wrap(function () _walker(root,bottom_up,attrib) end)\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "assert_dir(1,root)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "local attrib",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if path.is_windows or not follow_links then\r\n        attrib = path.attrib\r\n    else\r\n        attrib = path.link_attrib\r\n    end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "attrib = path.attrib",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "attrib = path.link_attrib",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "_walker(root,bottom_up,attrib)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function dir.rmtree(fullpath)\r\n    assert_dir(1,fullpath)\r\n    if path.islink(fullpath) then return false,'will not follow symlink' end\r\n    for root,dirs,files in dir.walk(fullpath,true) do\r\n        for i,f in ipairs(files) do\r\n            local res, err = remove(path.join(root,f))\r\n            if not res then return nil,err end\r\n        end\r\n        local res, err = rmdir(root)\r\n        if not res then return nil,err end\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "assert_dir(1,fullpath)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "if path.islink(fullpath) then return false,'will not follow symlink' end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "for root,dirs,files in dir.walk(fullpath,true) do\r\n        for i,f in ipairs(files) do\r\n            local res, err = remove(path.join(root,f))\r\n            if not res then return nil,err end\r\n        end\r\n        local res, err = rmdir(root)\r\n        if not res then return nil,err end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 146,
    "text": "for i,f in ipairs(files) do\r\n            local res, err = remove(path.join(root,f))\r\n            if not res then return nil,err end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 147,
    "text": "local res, err = remove(path.join(root,f))",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if not res then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "local res, err = rmdir(root)",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function _makepath(p)\r\n    -- windows root drive case\r\n    if p:find '^%a:[\\\\]*$' then\r\n        return true\r\n    end\r\n   if not path.isdir(p) then\r\n    local subp = p:match(dirpat)\r\n    local ok, err = _makepath(subp)\r\n    if not ok then return nil, err end\r\n    return mkdir(p)\r\n   else\r\n    return true\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "if p:find '^%a:[\\\\]*$' then\r\n        return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "if not path.isdir(p) then\r\n    local subp = p:match(dirpat)\r\n    local ok, err = _makepath(subp)\r\n    if not ok then return nil, err end\r\n    return mkdir(p)\r\n   else\r\n    return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "local subp = p:match(dirpat)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "local ok, err = _makepath(subp)",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function dir.makepath (p)\r\n    assert_string(1,p)\r\n    return _makepath(path.normcase(path.abspath(p)))\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "assert_string(1,p)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function dir.clonetree (path1,path2,file_fun,verbose)\r\n    assert_string(1,path1)\r\n    assert_string(2,path2)\r\n    if verbose == true then verbose = print end\r\n    local abspath,normcase,isdir,join = path.abspath,path.normcase,path.isdir,path.join\r\n    local faildirs,failfiles = {},{}\r\n    if not isdir(path1) then return raise 'source is not a valid directory' end\r\n    path1 = abspath(normcase(path1))\r\n    path2 = abspath(normcase(path2))\r\n    if verbose then verbose('normalized:',path1,path2) end\r\n    -- particularly NB that the new path isn't fully contained in the old path\r\n    if path1 == path2 then return raise \"paths are the same\" end\r\n    local i1,i2 = path2:find(path1,1,true)\r\n    if i2 == #path1 and path2:sub(i2+1,i2+1) == path.sep then\r\n        return raise 'destination is a subdirectory of the source'\r\n    end\r\n    local cp = path.common_prefix (path1,path2)\r\n    local idx = #cp\r\n    if idx == 0 then -- no common path, but watch out for Windows paths!\r\n        if path1:sub(2,2) == ':' then idx = 3 end\r\n    end\r\n    for root,dirs,files in dir.walk(path1) do\r\n        local opath = path2..root:sub(idx)\r\n        if verbose then verbose('paths:',opath,root) end\r\n        if not isdir(opath) then\r\n            local ret = dir.makepath(opath)\r\n            if not ret then append(faildirs,opath) end\r\n            if verbose then verbose('creating:',opath,ret) end\r\n        end\r\n        if file_fun then\r\n            for i,f in ipairs(files) do\r\n                local p1 = join(root,f)\r\n                local p2 = join(opath,f)\r\n                local ret = file_fun(p1,p2)\r\n                if not ret then append(failfiles,p2) end\r\n                if verbose then\r\n                    verbose('files:',p1,p2,ret)\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return true,faildirs,failfiles\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "assert_string(1,path1)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert_string(2,path2)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "if verbose == true then verbose = print end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "verbose = print",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "local abspath,normcase,isdir,join = path.abspath,path.normcase,path.isdir,path.join",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "local faildirs,failfiles = {},{}",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "if not isdir(path1) then return raise 'source is not a valid directory' end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "path1 = abspath(normcase(path1))",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "path2 = abspath(normcase(path2))",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "if verbose then verbose('normalized:',path1,path2) end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "verbose('normalized:',path1,path2)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "if path1 == path2 then return raise \"paths are the same\" end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "local i1,i2 = path2:find(path1,1,true)",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "if i2 == #path1 and path2:sub(i2+1,i2+1) == path.sep then\r\n        return raise 'destination is a subdirectory of the source'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "local cp = path.common_prefix (path1,path2)",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local idx = #cp",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if idx == 0 then -- no common path, but watch out for Windows paths!\r\n        if path1:sub(2,2) == ':' then idx = 3 end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "if path1:sub(2,2) == ':' then idx = 3 end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "idx = 3",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "for root,dirs,files in dir.walk(path1) do\r\n        local opath = path2..root:sub(idx)\r\n        if verbose then verbose('paths:',opath,root) end\r\n        if not isdir(opath) then\r\n            local ret = dir.makepath(opath)\r\n            if not ret then append(faildirs,opath) end\r\n            if verbose then verbose('creating:',opath,ret) end\r\n        end\r\n        if file_fun then\r\n            for i,f in ipairs(files) do\r\n                local p1 = join(root,f)\r\n                local p2 = join(opath,f)\r\n                local ret = file_fun(p1,p2)\r\n                if not ret then append(failfiles,p2) end\r\n                if verbose then\r\n                    verbose('files:',p1,p2,ret)\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 182,
    "text": "local opath = path2..root:sub(idx)",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "if verbose then verbose('paths:',opath,root) end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "verbose('paths:',opath,root)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "if not isdir(opath) then\r\n            local ret = dir.makepath(opath)\r\n            if not ret then append(faildirs,opath) end\r\n            if verbose then verbose('creating:',opath,ret) end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "local ret = dir.makepath(opath)",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "if not ret then append(faildirs,opath) end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "append(faildirs,opath)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "if verbose then verbose('creating:',opath,ret) end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "verbose('creating:',opath,ret)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "if file_fun then\r\n            for i,f in ipairs(files) do\r\n                local p1 = join(root,f)\r\n                local p2 = join(opath,f)\r\n                local ret = file_fun(p1,p2)\r\n                if not ret then append(failfiles,p2) end\r\n                if verbose then\r\n                    verbose('files:',p1,p2,ret)\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "for i,f in ipairs(files) do\r\n                local p1 = join(root,f)\r\n                local p2 = join(opath,f)\r\n                local ret = file_fun(p1,p2)\r\n                if not ret then append(failfiles,p2) end\r\n                if verbose then\r\n                    verbose('files:',p1,p2,ret)\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 193,
    "text": "local p1 = join(root,f)",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "local p2 = join(opath,f)",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "local ret = file_fun(p1,p2)",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "if not ret then append(failfiles,p2) end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "append(failfiles,p2)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "if verbose then\r\n                    verbose('files:',p1,p2,ret)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "verbose('files:',p1,p2,ret)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function dir.dirtree( d )\r\n    assert( d and d ~= \"\", \"directory parameter is missing or empty\" )\r\n    local exists, isdir = path.exists, path.isdir\r\n    local sep = path.sep\r\n\r\n    local last = sub ( d, -1 )\r\n    if last == sep or last == '/' then\r\n        d = sub( d, 1, -2 )\r\n    end\r\n\r\n    local function yieldtree( dir )\r\n        for entry in ldir( dir ) do\r\n            if entry ~= \".\" and entry ~= \"..\" then\r\n                entry = dir .. sep .. entry\r\n                if exists(entry) then  -- Just in case a symlink is broken.\r\n                    local is_dir = isdir(entry)\r\n                    yield( entry, is_dir )\r\n                    if is_dir then\r\n                        yieldtree( entry )\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    return wrap( function() yieldtree( d ) end )\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "assert( d and d ~= \"\", \"directory parameter is missing or empty\" )",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "local exists, isdir = path.exists, path.isdir",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "local sep = path.sep",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "local last = sub ( d, -1 )",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "if last == sep or last == '/' then\r\n        d = sub( d, 1, -2 )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "d = sub( d, 1, -2 )",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "local function yieldtree( dir )\r\n        for entry in ldir( dir ) do\r\n            if entry ~= \".\" and entry ~= \"..\" then\r\n                entry = dir .. sep .. entry\r\n                if exists(entry) then  -- Just in case a symlink is broken.\r\n                    local is_dir = isdir(entry)\r\n                    yield( entry, is_dir )\r\n                    if is_dir then\r\n                        yieldtree( entry )\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 209,
    "text": "for entry in ldir( dir ) do\r\n            if entry ~= \".\" and entry ~= \"..\" then\r\n                entry = dir .. sep .. entry\r\n                if exists(entry) then  -- Just in case a symlink is broken.\r\n                    local is_dir = isdir(entry)\r\n                    yield( entry, is_dir )\r\n                    if is_dir then\r\n                        yieldtree( entry )\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 210,
    "text": "if entry ~= \".\" and entry ~= \"..\" then\r\n                entry = dir .. sep .. entry\r\n                if exists(entry) then  -- Just in case a symlink is broken.\r\n                    local is_dir = isdir(entry)\r\n                    yield( entry, is_dir )\r\n                    if is_dir then\r\n                        yieldtree( entry )\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "entry = dir .. sep .. entry",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "if exists(entry) then  -- Just in case a symlink is broken.\r\n                    local is_dir = isdir(entry)\r\n                    yield( entry, is_dir )\r\n                    if is_dir then\r\n                        yieldtree( entry )\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "local is_dir = isdir(entry)",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "yield( entry, is_dir )",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "if is_dir then\r\n                        yieldtree( entry )\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 216,
    "text": "yieldtree( entry )",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "yieldtree( d )",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "local function yieldtree( dir )\r\n        for entry in ldir( dir ) do\r\n            if entry ~= \".\" and entry ~= \"..\" then\r\n                entry = dir .. sep .. entry\r\n                if exists(entry) then  -- Just in case a symlink is broken.\r\n                    local is_dir = isdir(entry)\r\n                    yield( entry, is_dir )\r\n                    if is_dir then\r\n                        yieldtree( entry )\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function dir.getallfiles( start_path, pattern )\r\n    assert_dir(1,start_path)\r\n    pattern = pattern or \"*\"\r\n\r\n    local files = {}\r\n    local normcase = path.normcase\r\n    for filename, mode in dir.dirtree( start_path ) do\r\n        if not mode then\r\n            local mask = filemask( pattern )\r\n            if normcase(filename):find( mask ) then\r\n                files[#files + 1] = filename\r\n            end\r\n        end\r\n    end\r\n\r\n    return makelist(files)\r\nend",
    "type": "function"
  }, {
    "id": 222,
    "text": "assert_dir(1,start_path)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "pattern = pattern or \"*\"",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "local normcase = path.normcase",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "for filename, mode in dir.dirtree( start_path ) do\r\n        if not mode then\r\n            local mask = filemask( pattern )\r\n            if normcase(filename):find( mask ) then\r\n                files[#files + 1] = filename\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 226,
    "text": "if not mode then\r\n            local mask = filemask( pattern )\r\n            if normcase(filename):find( mask ) then\r\n                files[#files + 1] = filename\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "local mask = filemask( pattern )",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "if normcase(filename):find( mask ) then\r\n                files[#files + 1] = filename\r\n            end",
    "type": "statement:if"
  }, {
    "id": 229,
    "text": "files[#files + 1] = filename",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function () _walker(root,bottom_up,attrib) end",
    "type": "function"
  }, {
    "id": 232,
    "text": "function() yieldtree( d ) end",
    "type": "function"
  }, {
    "id": 233,
    "text": "",
    "type": "function container"
  }, {
    "id": 234,
    "text": "normcase",
    "type": "global function"
  }, {
    "id": 235,
    "text": "islink",
    "type": "global function"
  }, {
    "id": 236,
    "text": "join",
    "type": "global function"
  }, {
    "id": 237,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 238,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 239,
    "text": "quote_arg",
    "type": "global function"
  }, {
    "id": 240,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 241,
    "text": "abspath",
    "type": "global function"
  }, {
    "id": 242,
    "text": "readfile",
    "type": "global function"
  }, {
    "id": 243,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 244,
    "text": "escape",
    "type": "global function"
  }, {
    "id": 245,
    "text": "basename",
    "type": "global function"
  }, {
    "id": 246,
    "text": "choose",
    "type": "global function"
  }, {
    "id": 247,
    "text": "common_prefix",
    "type": "global function"
  }, {
    "id": 248,
    "text": "normcase",
    "type": "global function"
  }, {
    "id": 249,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 250,
    "text": "append",
    "type": "global function"
  }, {
    "id": 251,
    "text": "rmdir",
    "type": "global function"
  }, {
    "id": 252,
    "text": "CopyFile",
    "type": "global function"
  }, {
    "id": 253,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 254,
    "text": "MoveFile",
    "type": "global function"
  }, {
    "id": 255,
    "text": "attrib",
    "type": "global function"
  }, {
    "id": 256,
    "text": "copyfile",
    "type": "global function"
  }, {
    "id": 257,
    "text": "require",
    "type": "global function"
  }, {
    "id": 258,
    "text": "join",
    "type": "global function"
  }, {
    "id": 259,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 260,
    "text": "raise",
    "type": "global function"
  }, {
    "id": 261,
    "text": "isdir",
    "type": "global function"
  }, {
    "id": 262,
    "text": "GetLastError",
    "type": "global function"
  }, {
    "id": 263,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 264,
    "text": "check",
    "type": "global function"
  }, {
    "id": 265,
    "text": "file_fun",
    "type": "global function"
  }, {
    "id": 266,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 267,
    "text": "ldir",
    "type": "global function"
  }, {
    "id": 268,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 269,
    "text": "abspath",
    "type": "global function"
  }, {
    "id": 270,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 271,
    "text": "rmtree",
    "type": "global function"
  }, {
    "id": 272,
    "text": "clonetree",
    "type": "global function"
  }, {
    "id": 273,
    "text": "verbose",
    "type": "global function"
  }, {
    "id": 274,
    "text": "load",
    "type": "global function"
  }, {
    "id": 275,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 276,
    "text": "exists",
    "type": "global function"
  }, {
    "id": 277,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 278,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 279,
    "text": "cdef",
    "type": "global function"
  }, {
    "id": 280,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 281,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 282,
    "text": "",
    "type": "variable container"
  }, {
    "id": 283,
    "text": "",
    "type": "require container"
  }, {
    "id": 284,
    "text": "",
    "type": "local variable"
  }, {
    "id": 285,
    "text": "",
    "type": "n/a"
  }, {
    "id": 286,
    "text": "",
    "type": "local variable"
  }, {
    "id": 287,
    "text": "",
    "type": "n/a"
  }, {
    "id": 288,
    "text": "",
    "type": "local variable"
  }, {
    "id": 289,
    "text": "",
    "type": "n/a"
  }, {
    "id": 290,
    "text": "",
    "type": "local variable"
  }, {
    "id": 291,
    "text": "",
    "type": "n/a"
  }, {
    "id": 292,
    "text": "",
    "type": "local variable"
  }, {
    "id": 293,
    "text": "",
    "type": "n/a"
  }, {
    "id": 294,
    "text": "",
    "type": "local variable"
  }, {
    "id": 295,
    "text": "",
    "type": "n/a"
  }, {
    "id": 296,
    "text": "",
    "type": "local variable"
  }, {
    "id": 297,
    "text": "",
    "type": "n/a"
  }, {
    "id": 298,
    "text": "",
    "type": "local variable"
  }, {
    "id": 299,
    "text": "",
    "type": "n/a"
  }, {
    "id": 300,
    "text": "",
    "type": "local variable"
  }, {
    "id": 301,
    "text": "",
    "type": "n/a"
  }, {
    "id": 302,
    "text": "",
    "type": "local variable"
  }, {
    "id": 303,
    "text": "",
    "type": "n/a"
  }, {
    "id": 304,
    "text": "",
    "type": "local variable"
  }, {
    "id": 305,
    "text": "",
    "type": "n/a"
  }, {
    "id": 306,
    "text": "",
    "type": "local variable"
  }, {
    "id": 307,
    "text": "",
    "type": "n/a"
  }, {
    "id": 308,
    "text": "",
    "type": "local variable"
  }, {
    "id": 309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "local variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "local variable"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "local variable"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "local variable"
  }, {
    "id": 330,
    "text": "",
    "type": "local variable"
  }, {
    "id": 331,
    "text": "",
    "type": "local variable"
  }, {
    "id": 332,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 334,
    "text": "",
    "type": "interface container"
  }, {
    "id": 335,
    "text": "",
    "type": "interface"
  }, {
    "id": 336,
    "text": "",
    "type": "require local variable"
  } ]
}