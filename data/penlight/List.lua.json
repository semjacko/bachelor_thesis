{
  "_filename": "List.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/List.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 9
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 9
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 41
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 35
  }, {
    "from": 47,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 9
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 9
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 9
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 9
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 9
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 9
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 88,
    "label": "has",
    "to": 97
  }, {
    "from": 88,
    "label": "has",
    "to": 98
  }, {
    "from": 88,
    "label": "has",
    "to": 99
  }, {
    "from": 88,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 88,
    "label": "has",
    "to": 9
  }, {
    "from": 88,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 9
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 9
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 107,
    "label": "has",
    "to": 9
  }, {
    "from": 107,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 115,
    "label": "has",
    "to": 121
  }, {
    "from": 115,
    "label": "has",
    "to": 9
  }, {
    "from": 115,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 30
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 9
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 9
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 9
  }, {
    "from": 127,
    "label": "has",
    "to": 9
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 9
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 9
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 9
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 9
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 9
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 9
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 9
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 9
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 9
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 173,
    "label": "has",
    "to": 176
  }, {
    "from": 171,
    "label": "has",
    "to": 9
  }, {
    "from": 171,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 9
  }, {
    "from": 178,
    "label": "has",
    "to": 9
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 9
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 180,
    "label": "has",
    "to": 186
  }, {
    "from": 180,
    "label": "has",
    "to": 9
  }, {
    "from": 180,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 9
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 144
  }, {
    "from": 190,
    "label": "has",
    "to": 172
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 174
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 191,
    "label": "has",
    "to": 197
  }, {
    "from": 190,
    "label": "has",
    "to": 9
  }, {
    "from": 190,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 9
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 206
  }, {
    "from": 202,
    "label": "has",
    "to": 207
  }, {
    "from": 202,
    "label": "has",
    "to": 9
  }, {
    "from": 202,
    "label": "has",
    "to": 9
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 206
  }, {
    "from": 202,
    "label": "has",
    "to": 208
  }, {
    "from": 202,
    "label": "has",
    "to": 9
  }, {
    "from": 202,
    "label": "has",
    "to": 9
  }, {
    "from": 201,
    "label": "has",
    "to": 9
  }, {
    "from": 201,
    "label": "has",
    "to": 9
  }, {
    "from": 201,
    "label": "has",
    "to": 9
  }, {
    "from": 201,
    "label": "has",
    "to": 9
  }, {
    "from": 201,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 9
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 181
  }, {
    "from": 212,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 212,
    "label": "has",
    "to": 186
  }, {
    "from": 212,
    "label": "has",
    "to": 9
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 214,
    "label": "has",
    "to": 206
  }, {
    "from": 214,
    "label": "has",
    "to": 207
  }, {
    "from": 214,
    "label": "has",
    "to": 9
  }, {
    "from": 214,
    "label": "has",
    "to": 9
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 206
  }, {
    "from": 216,
    "label": "has",
    "to": 208
  }, {
    "from": 216,
    "label": "has",
    "to": 9
  }, {
    "from": 216,
    "label": "has",
    "to": 9
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 169,
    "label": "calls",
    "to": 233
  }, {
    "from": 16,
    "label": "calls",
    "to": 227
  }, {
    "from": 107,
    "label": "calls",
    "to": 227
  }, {
    "from": 199,
    "label": "calls",
    "to": 227
  }, {
    "from": 136,
    "label": "calls",
    "to": 230
  }, {
    "from": 51,
    "label": "calls",
    "to": 242
  }, {
    "from": 171,
    "label": "calls",
    "to": 231
  }, {
    "from": 88,
    "label": "calls",
    "to": 225
  }, {
    "from": 161,
    "label": "calls",
    "to": 241
  }, {
    "from": 40,
    "label": "calls",
    "to": 219
  }, {
    "from": 43,
    "label": "calls",
    "to": 219
  }, {
    "from": 47,
    "label": "calls",
    "to": 219
  }, {
    "from": 84,
    "label": "calls",
    "to": 219
  }, {
    "from": 178,
    "label": "calls",
    "to": 226
  }, {
    "from": 188,
    "label": "calls",
    "to": 220
  }, {
    "from": 64,
    "label": "calls",
    "to": 236
  }, {
    "from": 88,
    "label": "calls",
    "to": 236
  }, {
    "from": 190,
    "label": "calls",
    "to": 236
  }, {
    "from": 105,
    "label": "calls",
    "to": 232
  }, {
    "from": 82,
    "label": "calls",
    "to": 243
  }, {
    "from": 153,
    "label": "calls",
    "to": 228
  }, {
    "from": 153,
    "label": "calls",
    "to": 148
  }, {
    "from": 171,
    "label": "calls",
    "to": 148
  }, {
    "from": 180,
    "label": "calls",
    "to": 148
  }, {
    "from": 148,
    "label": "calls",
    "to": 246
  }, {
    "from": 201,
    "label": "calls",
    "to": 247
  }, {
    "from": 166,
    "label": "calls",
    "to": 223
  }, {
    "from": 59,
    "label": "calls",
    "to": 238
  }, {
    "from": 132,
    "label": "calls",
    "to": 222
  }, {
    "from": 180,
    "label": "calls",
    "to": 178
  }, {
    "from": 180,
    "label": "calls",
    "to": 178
  }, {
    "from": 218,
    "label": "calls",
    "to": 229
  }, {
    "from": 218,
    "label": "calls",
    "to": 229
  }, {
    "from": 218,
    "label": "calls",
    "to": 229
  }, {
    "from": 11,
    "label": "calls",
    "to": 234
  }, {
    "from": 136,
    "label": "calls",
    "to": 234
  }, {
    "from": 148,
    "label": "calls",
    "to": 234
  }, {
    "from": 201,
    "label": "calls",
    "to": 234
  }, {
    "from": 201,
    "label": "calls",
    "to": 234
  }, {
    "from": 201,
    "label": "calls",
    "to": 234
  }, {
    "from": 201,
    "label": "calls",
    "to": 234
  }, {
    "from": 115,
    "label": "calls",
    "to": 244
  }, {
    "from": 201,
    "label": "calls",
    "to": 245
  }, {
    "from": 143,
    "label": "calls",
    "to": 248
  }, {
    "from": 190,
    "label": "calls",
    "to": 248
  }, {
    "from": 218,
    "label": "calls",
    "to": 235
  }, {
    "from": 29,
    "label": "calls",
    "to": 249
  }, {
    "from": 34,
    "label": "calls",
    "to": 249
  }, {
    "from": 40,
    "label": "calls",
    "to": 249
  }, {
    "from": 47,
    "label": "calls",
    "to": 249
  }, {
    "from": 88,
    "label": "calls",
    "to": 249
  }, {
    "from": 88,
    "label": "calls",
    "to": 249
  }, {
    "from": 88,
    "label": "calls",
    "to": 249
  }, {
    "from": 107,
    "label": "calls",
    "to": 249
  }, {
    "from": 115,
    "label": "calls",
    "to": 249
  }, {
    "from": 115,
    "label": "calls",
    "to": 249
  }, {
    "from": 123,
    "label": "calls",
    "to": 249
  }, {
    "from": 132,
    "label": "calls",
    "to": 249
  }, {
    "from": 161,
    "label": "calls",
    "to": 249
  }, {
    "from": 132,
    "label": "calls",
    "to": 221
  }, {
    "from": 159,
    "label": "calls",
    "to": 239
  }, {
    "from": 5,
    "label": "calls",
    "to": 250
  }, {
    "from": 190,
    "label": "calls",
    "to": 250
  }, {
    "from": 164,
    "label": "calls",
    "to": 237
  }, {
    "from": 59,
    "label": "calls",
    "to": 240
  }, {
    "from": 143,
    "label": "calls",
    "to": 240
  }, {
    "from": 190,
    "label": "calls",
    "to": 240
  }, {
    "from": 22,
    "label": "calls",
    "to": 5
  }, {
    "from": 159,
    "label": "calls",
    "to": 5
  }, {
    "from": 161,
    "label": "calls",
    "to": 5
  }, {
    "from": 164,
    "label": "calls",
    "to": 5
  }, {
    "from": 169,
    "label": "calls",
    "to": 5
  }, {
    "from": 171,
    "label": "calls",
    "to": 5
  }, {
    "from": 5,
    "label": "calls",
    "to": 251
  }, {
    "from": 11,
    "label": "calls",
    "to": 251
  }, {
    "from": 16,
    "label": "calls",
    "to": 224
  }, {
    "from": 26,
    "label": "calls",
    "to": 224
  }, {
    "from": 29,
    "label": "calls",
    "to": 224
  }, {
    "from": 34,
    "label": "calls",
    "to": 224
  }, {
    "from": 88,
    "label": "calls",
    "to": 224
  }, {
    "from": 107,
    "label": "calls",
    "to": 224
  }, {
    "from": 13,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "contains",
    "to": 218
  }, {
    "from": 218,
    "label": "declares",
    "to": 5
  }, {
    "from": 218,
    "label": "declares",
    "to": 11
  }, {
    "from": 218,
    "label": "declares",
    "to": 13
  }, {
    "from": 218,
    "label": "declares",
    "to": 16
  }, {
    "from": 218,
    "label": "declares",
    "to": 22
  }, {
    "from": 218,
    "label": "declares",
    "to": 26
  }, {
    "from": 218,
    "label": "declares",
    "to": 29
  }, {
    "from": 218,
    "label": "declares",
    "to": 34
  }, {
    "from": 218,
    "label": "declares",
    "to": 38
  }, {
    "from": 218,
    "label": "declares",
    "to": 40
  }, {
    "from": 218,
    "label": "declares",
    "to": 43
  }, {
    "from": 218,
    "label": "declares",
    "to": 47
  }, {
    "from": 218,
    "label": "declares",
    "to": 51
  }, {
    "from": 218,
    "label": "declares",
    "to": 53
  }, {
    "from": 218,
    "label": "declares",
    "to": 59
  }, {
    "from": 218,
    "label": "declares",
    "to": 64
  }, {
    "from": 218,
    "label": "declares",
    "to": 66
  }, {
    "from": 218,
    "label": "declares",
    "to": 73
  }, {
    "from": 218,
    "label": "declares",
    "to": 82
  }, {
    "from": 218,
    "label": "declares",
    "to": 84
  }, {
    "from": 218,
    "label": "declares",
    "to": 88
  }, {
    "from": 218,
    "label": "declares",
    "to": 103
  }, {
    "from": 218,
    "label": "declares",
    "to": 105
  }, {
    "from": 218,
    "label": "declares",
    "to": 107
  }, {
    "from": 218,
    "label": "declares",
    "to": 115
  }, {
    "from": 218,
    "label": "declares",
    "to": 123
  }, {
    "from": 218,
    "label": "declares",
    "to": 127
  }, {
    "from": 218,
    "label": "declares",
    "to": 132
  }, {
    "from": 218,
    "label": "declares",
    "to": 136
  }, {
    "from": 218,
    "label": "declares",
    "to": 141
  }, {
    "from": 218,
    "label": "declares",
    "to": 143
  }, {
    "from": 218,
    "label": "declares",
    "to": 148
  }, {
    "from": 218,
    "label": "declares",
    "to": 153
  }, {
    "from": 218,
    "label": "declares",
    "to": 159
  }, {
    "from": 218,
    "label": "declares",
    "to": 161
  }, {
    "from": 218,
    "label": "declares",
    "to": 164
  }, {
    "from": 218,
    "label": "declares",
    "to": 166
  }, {
    "from": 218,
    "label": "declares",
    "to": 169
  }, {
    "from": 218,
    "label": "declares",
    "to": 171
  }, {
    "from": 218,
    "label": "declares",
    "to": 178
  }, {
    "from": 218,
    "label": "declares",
    "to": 180
  }, {
    "from": 218,
    "label": "declares",
    "to": 188
  }, {
    "from": 218,
    "label": "declares",
    "to": 190
  }, {
    "from": 218,
    "label": "declares",
    "to": 199
  }, {
    "from": 218,
    "label": "declares",
    "to": 201
  }, {
    "from": 218,
    "label": "declares",
    "to": 210
  }, {
    "from": 218,
    "label": "declares",
    "to": 212
  }, {
    "from": 218,
    "label": "declares",
    "to": 214
  }, {
    "from": 218,
    "label": "declares",
    "to": 216
  }, {
    "from": 252,
    "label": "requires",
    "to": 2
  }, {
    "from": 253,
    "label": "requires",
    "to": 2
  }, {
    "from": 254,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 255
  }, {
    "from": 2,
    "label": "contains",
    "to": 256
  }, {
    "from": 255,
    "label": "initializes",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 255,
    "label": "initializes",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 255,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 255,
    "label": "initializes",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 255,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 255,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 255,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 255,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 255,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 255,
    "label": "initializes",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 255,
    "label": "initializes",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 255,
    "label": "initializes",
    "to": 279
  }, {
    "from": 279,
    "label": "assigns",
    "to": 280
  }, {
    "from": 255,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "assigns",
    "to": 282
  }, {
    "from": 255,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 255,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "assigns",
    "to": 286
  }, {
    "from": 255,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 255,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 255,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 255,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 255,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 255,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 255,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 255,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "assigns",
    "to": 302
  }, {
    "from": 255,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "assigns",
    "to": 304
  }, {
    "from": 255,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 255,
    "label": "initializes",
    "to": 307
  }, {
    "from": 255,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 255,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 255,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 255,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 255,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 255,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 255,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 255,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 255,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 256,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "requires",
    "to": 3
  }, {
    "from": 256,
    "label": "initializes",
    "to": 327
  }, {
    "from": 327,
    "label": "requires",
    "to": 4
  }, {
    "from": 256,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 329
  }, {
    "from": 305,
    "label": "represents",
    "to": 330
  }, {
    "from": 329,
    "label": "provides",
    "to": 330
  }, {
    "from": 331,
    "label": "requires",
    "to": 2
  }, {
    "from": 332,
    "label": "requires",
    "to": 2
  }, {
    "from": 333,
    "label": "requires",
    "to": 2
  }, {
    "from": 334,
    "label": "requires",
    "to": 2
  }, {
    "from": 335,
    "label": "requires",
    "to": 2
  }, {
    "from": 336,
    "label": "requires",
    "to": 2
  }, {
    "from": 337,
    "label": "requires",
    "to": 2
  }, {
    "from": 338,
    "label": "requires",
    "to": 2
  }, {
    "from": 339,
    "label": "requires",
    "to": 2
  }, {
    "from": 340,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "class",
    "type": "module"
  }, {
    "id": 2,
    "text": "List",
    "type": "module"
  }, {
    "id": 3,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 4,
    "text": "utils",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function makelist (t,obj)\r\n    local klass = List\r\n    if obj then\r\n        klass = getmetatable(obj)\r\n    end\r\n    return setmetatable(t,klass)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local klass = List",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if obj then\r\n        klass = getmetatable(obj)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "klass = getmetatable(obj)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function simple_table(t)\r\n    return type(t) == 'table' and not getmetatable(t) and #t > 0\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function List._create (src)\r\n    if simple_table(src) then return src end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if simple_table(src) then return src end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function List:_init (src)\r\n    if self == src then return end -- existing table used as self!\r\n    if src then\r\n        for v in iter(src) do\r\n            tinsert(self,v)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "if self == src then return end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "if src then\r\n        for v in iter(src) do\r\n            tinsert(self,v)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "for v in iter(src) do\r\n            tinsert(self,v)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "tinsert(self,v)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function List:clone()\r\n    local ls = makelist({},self)\r\n    ls:extend(self)\r\n    return ls\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local ls = makelist({},self)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "ls:extend(self)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function List:append(i)\r\n    tinsert(self,i)\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "tinsert(self,i)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function List:extend(L)\r\n    assert_arg(1,L,'table')\r\n    for i = 1,#L do tinsert(self,L[i]) end\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert_arg(1,L,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "for i = 1,#L do tinsert(self,L[i]) end",
    "type": "statement:numericfor"
  }, {
    "id": 32,
    "text": "tinsert(self,L[i])",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function List:insert(i, x)\r\n    assert_arg(1,i,'number')\r\n    tinsert(self,i,x)\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert_arg(1,i,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "tinsert(self,i,x)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function List:put (x)\r\n    return self:insert(1,x)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function List:remove (i)\r\n    assert_arg(1,i,'number')\r\n    tremove(self,i)\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "tremove(self,i)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function List:remove_value(x)\r\n    for i=1,#self do\r\n        if self[i]==x then tremove(self,i) return self end\r\n    end\r\n    return self\r\n end",
    "type": "function"
  }, {
    "id": 44,
    "text": "for i=1,#self do\r\n        if self[i]==x then tremove(self,i) return self end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 45,
    "text": "if self[i]==x then tremove(self,i) return self end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function List:pop(i)\r\n    if not i then i = #self end\r\n    assert_arg(1,i,'number')\r\n    return tremove(self,i)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "if not i then i = #self end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "i = #self",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function List:contains(x)\r\n    return tfind(self,x) and true or false\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function List:count(x)\r\n    local cnt=0\r\n    for i=1,#self do\r\n        if self[i]==x then cnt=cnt+1 end\r\n    end\r\n    return cnt\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local cnt=0",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "for i=1,#self do\r\n        if self[i]==x then cnt=cnt+1 end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 56,
    "text": "if self[i]==x then cnt=cnt+1 end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "cnt=cnt+1",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function List:sort(cmp)\r\n    if cmp then cmp = function_arg(1,cmp) end\r\n    tsort(self,cmp)\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "if cmp then cmp = function_arg(1,cmp) end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "cmp = function_arg(1,cmp)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "tsort(self,cmp)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function List:sorted(cmp)\r\n    return List(self):sort(cmp)\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function List:reverse()\r\n    local t = self\r\n    local n = #t\r\n    for i = 1,n/2 do\r\n        t[i],t[n] = t[n],t[i]\r\n        n = n - 1\r\n    end\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local t = self",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local n = #t",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "for i = 1,n/2 do\r\n        t[i],t[n] = t[n],t[i]\r\n        n = n - 1\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 70,
    "text": "t[i],t[n] = t[n],t[i]",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "n = n - 1",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function List:minmax()\r\n    local vmin,vmax = 1e70,-1e70\r\n    for i = 1,#self do\r\n        local v = self[i]\r\n        if v < vmin then vmin = v end\r\n        if v > vmax then vmax = v end\r\n    end\r\n    return vmin,vmax\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "local vmin,vmax = 1e70,-1e70",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "for i = 1,#self do\r\n        local v = self[i]\r\n        if v < vmin then vmin = v end\r\n        if v > vmax then vmax = v end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 76,
    "text": "local v = self[i]",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if v < vmin then vmin = v end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "vmin = v",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if v > vmax then vmax = v end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "vmax = v",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function List:slice(first,last)\r\n    return tsub(self,first,last)\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function List:clear()\r\n    for i=1,#self do tremove(self) end\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "for i=1,#self do tremove(self) end",
    "type": "statement:numericfor"
  }, {
    "id": 86,
    "text": "tremove(self)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function List.range(start,finish,incr)\r\n    if not finish then\r\n        finish = start\r\n        start = 1\r\n    end\r\n    if incr then\r\n    assert_arg(3,incr,'number')\r\n    if math.ceil(incr) ~= incr then finish = finish + eps end\r\n    else\r\n        incr = 1\r\n    end\r\n    assert_arg(1,start,'number')\r\n    assert_arg(2,finish,'number')\r\n    local t = List()\r\n    for i=start,finish,incr do tinsert(t,i) end\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "if not finish then\r\n        finish = start\r\n        start = 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "finish = start",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "start = 1",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "if incr then\r\n    assert_arg(3,incr,'number')\r\n    if math.ceil(incr) ~= incr then finish = finish + eps end\r\n    else\r\n        incr = 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "assert_arg(3,incr,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "if math.ceil(incr) ~= incr then finish = finish + eps end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "finish = finish + eps",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "incr = 1",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "assert_arg(1,start,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert_arg(2,finish,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "local t = List()",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "for i=start,finish,incr do tinsert(t,i) end",
    "type": "statement:numericfor"
  }, {
    "id": 101,
    "text": "tinsert(t,i)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function List:len()\r\n    return #self\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function List:chop(i1,i2)\r\n    return tremovevalues(self,i1,i2)\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function List:splice(idx,list)\r\n    assert_arg(1,idx,'number')\r\n    idx = idx - 1\r\n    local i = 1\r\n    for v in iter(list) do\r\n        tinsert(self,i+idx,v)\r\n        i = i + 1\r\n    end\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "assert_arg(1,idx,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "idx = idx - 1",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "for v in iter(list) do\r\n        tinsert(self,i+idx,v)\r\n        i = i + 1\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 112,
    "text": "tinsert(self,i+idx,v)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function List:slice_assign(i1,i2,seq)\r\n    assert_arg(1,i1,'number')\r\n    assert_arg(1,i2,'number')\r\n    i1,i2 = normalize_slice(self,i1,i2)\r\n    if i2 >= i1 then self:chop(i1,i2) end\r\n    self:splice(i1,seq)\r\n    return self\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "assert_arg(1,i1,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert_arg(1,i2,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "i1,i2 = normalize_slice(self,i1,i2)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if i2 >= i1 then self:chop(i1,i2) end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "self:chop(i1,i2)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "self:splice(i1,seq)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function List:__concat(L)\r\n    assert_arg(1,L,'table')\r\n    local ls = self:clone()\r\n    ls:extend(L)\r\n    return ls\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "local ls = self:clone()",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "ls:extend(L)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function List:__eq(L)\r\n    if #self ~= #L then return false end\r\n    for i = 1,#self do\r\n        if self[i] ~= L[i] then return false end\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "if #self ~= #L then return false end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "for i = 1,#self do\r\n        if self[i] ~= L[i] then return false end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 130,
    "text": "if self[i] ~= L[i] then return false end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function List:join (delim)\r\n    delim = delim or ''\r\n    assert_arg(1,delim,'string')\r\n    return concat(array_tostring(self),delim)\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "delim = delim or ''",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "assert_arg(1,delim,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "local function tostring_q(val)\r\n    local s = tostring(val)\r\n    if type(val) == 'string' then\r\n        s = '\"'..s..'\"'\r\n    end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "local s = tostring(val)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if type(val) == 'string' then\r\n        s = '\"'..s..'\"'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "s = '\"'..s..'\"'",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function List:__tostring()\r\n    return '{'..self:join(',',tostring_q)..'}'\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function List:foreach (fun,...)\r\n    fun = function_arg(1,fun)\r\n    for i = 1,#self do\r\n        fun(self[i],...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "fun = function_arg(1,fun)",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "for i = 1,#self do\r\n        fun(self[i],...)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 146,
    "text": "fun(self[i],...)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "local function lookup_fun (obj,name)\r\n    local f = obj[name]\r\n    if not f then error(type(obj)..\" does not have method \"..name,3) end\r\n    return f\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "local f = obj[name]",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "if not f then error(type(obj)..\" does not have method \"..name,3) end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "error(type(obj)..\" does not have method \"..name,3)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function List:foreachm (name,...)\r\n    for i = 1,#self do\r\n        local obj = self[i]\r\n        local f = lookup_fun(obj,name)\r\n        f(obj,...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "for i = 1,#self do\r\n        local obj = self[i]\r\n        local f = lookup_fun(obj,name)\r\n        f(obj,...)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 155,
    "text": "local obj = self[i]",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "local f = lookup_fun(obj,name)",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "f(obj,...)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function List:filter (fun,arg)\r\n    return makelist(filter(self,fun,arg),self)\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function List.split (s,delim)\r\n    assert_arg(1,s,'string')\r\n    return makelist(split(s,delim))\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "assert_arg(1,s,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function List:map (fun,...)\r\n    return makelist(imap(fun,self,...),self)\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function List:transform (fun,...)\r\n    transform(fun,self,...)\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "transform(fun,self,...)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function List:map2 (fun,ls,...)\r\n    return makelist(imap2(fun,self,ls,...),self)\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function List:mapm (name,...)\r\n    local res = {}\r\n    for i = 1,#self do\r\n      local val = self[i]\r\n      local fn = lookup_fun(val,name)\r\n      res[i] = fn(val,...)\r\n    end\r\n    return makelist(res,self)\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "for i = 1,#self do\r\n      local val = self[i]\r\n      local fn = lookup_fun(val,name)\r\n      res[i] = fn(val,...)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 174,
    "text": "local val = self[i]",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "local fn = lookup_fun(val,name)",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "res[i] = fn(val,...)",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "local function composite_call (method,f)\r\n    return function(self,...)\r\n        return self[method](self,f,...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function List.default_map_with(T)\r\n    return function(self,name)\r\n        local m\r\n        if T then\r\n            local f = lookup_fun(T,name)\r\n            m = composite_call('map',f)\r\n        else\r\n            m = composite_call('mapn',name)\r\n        end\r\n        getmetatable(self)[name] = m -- and cache..\r\n        return m\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "local m",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "if T then\r\n            local f = lookup_fun(T,name)\r\n            m = composite_call('map',f)\r\n        else\r\n            m = composite_call('mapn',name)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "local f = lookup_fun(T,name)",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "m = composite_call('map',f)",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "m = composite_call('mapn',name)",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "getmetatable(self)[name] = m",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "function List:reduce (fun)\r\n    return reduce(fun,self)\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "function List:partition (fun,...)\r\n    fun = function_arg(1,fun)\r\n    local res = {}\r\n    for i = 1,#self do\r\n        local val = self[i]\r\n        local klass = fun(val,...)\r\n        if klass == nil then klass = '<nil>' end\r\n        if not res[klass] then res[klass] = List() end\r\n        res[klass]:append(val)\r\n    end\r\n    return setmetatable(res,Multimap)\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "for i = 1,#self do\r\n        local val = self[i]\r\n        local klass = fun(val,...)\r\n        if klass == nil then klass = '<nil>' end\r\n        if not res[klass] then res[klass] = List() end\r\n        res[klass]:append(val)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 192,
    "text": "local klass = fun(val,...)",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "if klass == nil then klass = '<nil>' end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "klass = '<nil>'",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "if not res[klass] then res[klass] = List() end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "res[klass] = List()",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "res[klass]:append(val)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function List:iter ()\r\n    return iter(self)\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function List.iterate(seq)\r\n    if type(seq) == 'string' then\r\n        local idx = 0\r\n        local n = #seq\r\n        local sub = string.sub\r\n        return function ()\r\n            idx = idx + 1\r\n            if idx > n then return nil\r\n            else\r\n                return sub(seq,idx,idx)\r\n            end\r\n        end\r\n    elseif type(seq) == 'table' then\r\n        local idx = 0\r\n        local n = #seq\r\n        return function()\r\n            idx = idx + 1\r\n            if idx > n then return nil\r\n            else\r\n                return seq[idx]\r\n            end\r\n        end\r\n    elseif type(seq) == 'function' then\r\n        return seq\r\n    elseif type(seq) == 'userdata' and io.type(seq) == 'file' then\r\n        return seq:lines()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "if type(seq) == 'string' then\r\n        local idx = 0\r\n        local n = #seq\r\n        local sub = string.sub\r\n        return function ()\r\n            idx = idx + 1\r\n            if idx > n then return nil\r\n            else\r\n                return sub(seq,idx,idx)\r\n            end\r\n        end\r\n    elseif type(seq) == 'table' then\r\n        local idx = 0\r\n        local n = #seq\r\n        return function()\r\n            idx = idx + 1\r\n            if idx > n then return nil\r\n            else\r\n                return seq[idx]\r\n            end\r\n        end\r\n    elseif type(seq) == 'function' then\r\n        return seq\r\n    elseif type(seq) == 'userdata' and io.type(seq) == 'file' then\r\n        return seq:lines()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "local idx = 0",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "local n = #seq",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "local sub = string.sub",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "idx = idx + 1",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "if idx > n then return nil\r\n            else\r\n                return sub(seq,idx,idx)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "if idx > n then return nil\r\n            else\r\n                return seq[idx]\r\n            end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function(self,...)\r\n        return self[method](self,f,...)\r\n    end",
    "type": "function"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function(self,name)\r\n        local m\r\n        if T then\r\n            local f = lookup_fun(T,name)\r\n            m = composite_call('map',f)\r\n        else\r\n            m = composite_call('mapn',name)\r\n        end\r\n        getmetatable(self)[name] = m -- and cache..\r\n        return m\r\n    end",
    "type": "function"
  }, {
    "id": 213,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 214,
    "text": "function ()\r\n            idx = idx + 1\r\n            if idx > n then return nil\r\n            else\r\n                return sub(seq,idx,idx)\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "function()\r\n            idx = idx + 1\r\n            if idx > n then return nil\r\n            else\r\n                return seq[idx]\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 217,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 218,
    "text": "",
    "type": "function container"
  }, {
    "id": 219,
    "text": "tremove",
    "type": "global function"
  }, {
    "id": 220,
    "text": "reduce",
    "type": "global function"
  }, {
    "id": 221,
    "text": "array_tostring",
    "type": "global function"
  }, {
    "id": 222,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 223,
    "text": "transform",
    "type": "global function"
  }, {
    "id": 224,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 225,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 226,
    "text": "self[method]",
    "type": "global function"
  }, {
    "id": 227,
    "text": "iter",
    "type": "global function"
  }, {
    "id": 228,
    "text": "f",
    "type": "global function"
  }, {
    "id": 229,
    "text": "require",
    "type": "global function"
  }, {
    "id": 230,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 231,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 232,
    "text": "tremovevalues",
    "type": "global function"
  }, {
    "id": 233,
    "text": "imap2",
    "type": "global function"
  }, {
    "id": 234,
    "text": "type",
    "type": "global function"
  }, {
    "id": 235,
    "text": "class",
    "type": "global function"
  }, {
    "id": 236,
    "text": "List",
    "type": "global function"
  }, {
    "id": 237,
    "text": "imap",
    "type": "global function"
  }, {
    "id": 238,
    "text": "tsort",
    "type": "global function"
  }, {
    "id": 239,
    "text": "filter",
    "type": "global function"
  }, {
    "id": 240,
    "text": "function_arg",
    "type": "global function"
  }, {
    "id": 241,
    "text": "split",
    "type": "global function"
  }, {
    "id": 242,
    "text": "tfind",
    "type": "global function"
  }, {
    "id": 243,
    "text": "tsub",
    "type": "global function"
  }, {
    "id": 244,
    "text": "normalize_slice",
    "type": "global function"
  }, {
    "id": 245,
    "text": "type",
    "type": "global function"
  }, {
    "id": 246,
    "text": "error",
    "type": "global function"
  }, {
    "id": 247,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 248,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 249,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 250,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 251,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 252,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "variable container"
  }, {
    "id": 256,
    "text": "",
    "type": "require container"
  }, {
    "id": 257,
    "text": "",
    "type": "local variable"
  }, {
    "id": 258,
    "text": "",
    "type": "n/a"
  }, {
    "id": 259,
    "text": "",
    "type": "local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "n/a"
  }, {
    "id": 261,
    "text": "",
    "type": "local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "n/a"
  }, {
    "id": 263,
    "text": "",
    "type": "local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "n/a"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "n/a"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "n/a"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "n/a"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "n/a"
  }, {
    "id": 273,
    "text": "",
    "type": "local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "n/a"
  }, {
    "id": 275,
    "text": "",
    "type": "local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "n/a"
  }, {
    "id": 277,
    "text": "",
    "type": "local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "n/a"
  }, {
    "id": 279,
    "text": "",
    "type": "local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "n/a"
  }, {
    "id": 281,
    "text": "",
    "type": "local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "n/a"
  }, {
    "id": 283,
    "text": "",
    "type": "local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "local variable"
  }, {
    "id": 286,
    "text": "",
    "type": "n/a"
  }, {
    "id": 287,
    "text": "",
    "type": "local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "n/a"
  }, {
    "id": 289,
    "text": "",
    "type": "local variable"
  }, {
    "id": 290,
    "text": "",
    "type": "n/a"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "n/a"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "n/a"
  }, {
    "id": 303,
    "text": "",
    "type": "local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "n/a"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "n/a"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "local variable"
  }, {
    "id": 309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "number"
  }, {
    "id": 312,
    "text": "",
    "type": "global variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "global variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "global variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "global variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "global variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "global variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "global variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 328,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "interface container"
  }, {
    "id": 330,
    "text": "",
    "type": "interface"
  }, {
    "id": 331,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 332,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 334,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 336,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 338,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 339,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "require local variable"
  } ]
}