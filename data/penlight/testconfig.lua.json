{
  "_filename": "testconfig.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/penlight/examples/testconfig.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 29
  }, {
    "from": 15,
    "label": "calls",
    "to": 25
  }, {
    "from": 4,
    "label": "calls",
    "to": 4
  }, {
    "from": 15,
    "label": "calls",
    "to": 4
  }, {
    "from": 15,
    "label": "calls",
    "to": 23
  }, {
    "from": 15,
    "label": "calls",
    "to": 24
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 15
  }, {
    "from": 22,
    "label": "calls",
    "to": 15
  }, {
    "from": 22,
    "label": "calls",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 22
  }, {
    "from": 22,
    "label": "declares",
    "to": 4
  }, {
    "from": 22,
    "label": "declares",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "requires",
    "to": 3
  }, {
    "from": 31,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "testconfig",
    "type": "module"
  }, {
    "id": 2,
    "text": "config",
    "type": "module"
  }, {
    "id": 3,
    "text": "stringio",
    "type": "module"
  }, {
    "id": 4,
    "text": "function dump(t,indent)\r\n    if type(t) == 'table' then\r\n        io.write(indent,'{\\n')\r\n        local newindent = indent..'  '\r\n        for k,v in pairs(t) do\r\n            io.write(newindent,k,'=')\r\n            dump(v,indent)\r\n            io.write('\\n')\r\n        end\r\n        io.write(newindent,'},\\n')\r\n    else\r\n        io.write(indent,t,'(',type(t),')')\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if type(t) == 'table' then\r\n        io.write(indent,'{\\n')\r\n        local newindent = indent..'  '\r\n        for k,v in pairs(t) do\r\n            io.write(newindent,k,'=')\r\n            dump(v,indent)\r\n            io.write('\\n')\r\n        end\r\n        io.write(newindent,'},\\n')\r\n    else\r\n        io.write(indent,t,'(',type(t),')')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "io.write(indent,'{\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local newindent = indent..'  '",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for k,v in pairs(t) do\r\n            io.write(newindent,k,'=')\r\n            dump(v,indent)\r\n            io.write('\\n')\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "io.write(newindent,k,'=')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "dump(v,indent)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "io.write('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "io.write(newindent,'},\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "io.write(indent,t,'(',type(t),')')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function testconfig(test)\r\n    local f = stringio.open(test)\r\n    local c = config.read(f)\r\n    f:close()\r\n    dump(c,'  ')\r\n    print '-----'\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local f = stringio.open(test)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local c = config.read(f)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "dump(c,'  ')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "print '-----'",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "",
    "type": "function container"
  }, {
    "id": 23,
    "text": "read",
    "type": "global function"
  }, {
    "id": 24,
    "text": "open",
    "type": "global function"
  }, {
    "id": 25,
    "text": "print",
    "type": "global function"
  }, {
    "id": 26,
    "text": "require",
    "type": "global function"
  }, {
    "id": 27,
    "text": "write",
    "type": "global function"
  }, {
    "id": 28,
    "text": "type",
    "type": "global function"
  }, {
    "id": 29,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 30,
    "text": "",
    "type": "variable container"
  }, {
    "id": 31,
    "text": "",
    "type": "require container"
  }, {
    "id": 32,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "require local variable"
  } ]
}