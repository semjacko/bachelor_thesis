{
  "_filename": "Set.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/Set.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 9,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 7
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 29
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 31
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 7
  }, {
    "from": 38,
    "label": "has",
    "to": 7
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 7
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 7
  }, {
    "from": 44,
    "label": "has",
    "to": 7
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 7
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 7
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 7
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 18,
    "label": "calls",
    "to": 65
  }, {
    "from": 9,
    "label": "calls",
    "to": 67
  }, {
    "from": 20,
    "label": "calls",
    "to": 67
  }, {
    "from": 44,
    "label": "calls",
    "to": 67
  }, {
    "from": 20,
    "label": "calls",
    "to": 6
  }, {
    "from": 20,
    "label": "calls",
    "to": 60
  }, {
    "from": 26,
    "label": "calls",
    "to": 62
  }, {
    "from": 34,
    "label": "calls",
    "to": 62
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 54,
    "label": "calls",
    "to": 63
  }, {
    "from": 9,
    "label": "calls",
    "to": 56
  }, {
    "from": 38,
    "label": "calls",
    "to": 36
  }, {
    "from": 50,
    "label": "calls",
    "to": 34
  }, {
    "from": 48,
    "label": "calls",
    "to": 66
  }, {
    "from": 50,
    "label": "calls",
    "to": 48
  }, {
    "from": 18,
    "label": "calls",
    "to": 57
  }, {
    "from": 36,
    "label": "calls",
    "to": 64
  }, {
    "from": 42,
    "label": "calls",
    "to": 64
  }, {
    "from": 6,
    "label": "calls",
    "to": 68
  }, {
    "from": 52,
    "label": "calls",
    "to": 44
  }, {
    "from": 52,
    "label": "calls",
    "to": 44
  }, {
    "from": 9,
    "label": "calls",
    "to": 69
  }, {
    "from": 28,
    "label": "calls",
    "to": 69
  }, {
    "from": 38,
    "label": "calls",
    "to": 69
  }, {
    "from": 20,
    "label": "calls",
    "to": 55
  }, {
    "from": 54,
    "label": "calls",
    "to": 59
  }, {
    "from": 54,
    "label": "calls",
    "to": 59
  }, {
    "from": 54,
    "label": "calls",
    "to": 59
  }, {
    "from": 54,
    "label": "calls",
    "to": 59
  }, {
    "from": 18,
    "label": "calls",
    "to": 58
  }, {
    "from": 28,
    "label": "calls",
    "to": 61
  }, {
    "from": 38,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "contains",
    "to": 54
  }, {
    "from": 54,
    "label": "declares",
    "to": 6
  }, {
    "from": 54,
    "label": "declares",
    "to": 9
  }, {
    "from": 54,
    "label": "declares",
    "to": 18
  }, {
    "from": 54,
    "label": "declares",
    "to": 20
  }, {
    "from": 54,
    "label": "declares",
    "to": 26
  }, {
    "from": 54,
    "label": "declares",
    "to": 28
  }, {
    "from": 54,
    "label": "declares",
    "to": 34
  }, {
    "from": 54,
    "label": "declares",
    "to": 36
  }, {
    "from": 54,
    "label": "declares",
    "to": 38
  }, {
    "from": 54,
    "label": "declares",
    "to": 42
  }, {
    "from": 54,
    "label": "declares",
    "to": 44
  }, {
    "from": 54,
    "label": "declares",
    "to": 48
  }, {
    "from": 54,
    "label": "declares",
    "to": 50
  }, {
    "from": 54,
    "label": "declares",
    "to": 52
  }, {
    "from": 3,
    "label": "declares",
    "to": 65
  }, {
    "from": 3,
    "label": "contains",
    "to": 71
  }, {
    "from": 3,
    "label": "contains",
    "to": 72
  }, {
    "from": 71,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 71,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 71,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 71,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 71,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 71,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 71,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 71,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 71,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 71,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 71,
    "label": "initializes",
    "to": 93
  }, {
    "from": 71,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 71,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 71,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 71,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 71,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 71,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 71,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 71,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 72,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 4
  }, {
    "from": 72,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 5
  }, {
    "from": 72,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 2
  }, {
    "from": 72,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "requires",
    "to": 1
  }, {
    "from": 3,
    "label": "provides",
    "to": 114
  }, {
    "from": 70,
    "label": "represents",
    "to": 115
  }, {
    "from": 114,
    "label": "provides",
    "to": 115
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "class",
    "type": "module"
  }, {
    "id": 2,
    "text": "Map",
    "type": "module"
  }, {
    "id": 3,
    "text": "Set",
    "type": "module"
  }, {
    "id": 4,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 5,
    "text": "utils",
    "type": "module"
  }, {
    "id": 6,
    "text": "local function makeset (t)\r\n    return setmetatable(t,Set)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function Set:_init (t)\r\n    t = t or {}\r\n    local mt = getmetatable(t)\r\n    if mt == Set or mt == Map then\r\n        for k in pairs(t) do self[k] = true end\r\n    else\r\n        for _,v in ipairs(t) do self[v] = true end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "t = t or {}",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local mt = getmetatable(t)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if mt == Set or mt == Map then\r\n        for k in pairs(t) do self[k] = true end\r\n    else\r\n        for _,v in ipairs(t) do self[v] = true end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "for k in pairs(t) do self[k] = true end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "self[k] = true",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "for _,v in ipairs(t) do self[v] = true end",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "self[v] = true",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function Set:__tostring ()\r\n    return '['..concat(array_tostring(Set.values(self)),',')..']'\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function Set.map (self,fn,...)\r\n    fn = utils.function_arg(1,fn)\r\n    local res = {}\r\n    for k in pairs(self) do\r\n        res[fn(k,...)] = true\r\n    end\r\n    return makeset(res)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "fn = utils.function_arg(1,fn)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for k in pairs(self) do\r\n        res[fn(k,...)] = true\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "res[fn(k,...)] = true",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function Set.union (self,set)\r\n    return merge(self,set,true)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function setadd(self,other)\r\n    local mt = getmetatable(other)\r\n    if mt == Set or mt == Map then\r\n        return Set.union(self,other)\r\n    else\r\n        local new = Set(self)\r\n        new[other] = true\r\n        return new\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local mt = getmetatable(other)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if mt == Set or mt == Map then\r\n        return Set.union(self,other)\r\n    else\r\n        local new = Set(self)\r\n        new[other] = true\r\n        return new\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local new = Set(self)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "new[other] = true",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function Set.intersection (self,set)\r\n    return merge(self,set,false)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function Set.difference (self,set)\r\n    return difference(self,set,false)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function setminus (self,other)\r\n    local mt = getmetatable(other)\r\n    if mt == Set or mt == Map then\r\n        return Set.difference(self,other)\r\n    else\r\n        local new = Set(self)\r\n        new[other] = nil\r\n        return new\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "if mt == Set or mt == Map then\r\n        return Set.difference(self,other)\r\n    else\r\n        local new = Set(self)\r\n        new[other] = nil\r\n        return new\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "new[other] = nil",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function Set.symmetric_difference (self,set)\r\n    return difference(self,set,true)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function Set.issubset (self,set)\r\n    for k in pairs(self) do\r\n        if not set[k] then return false end\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "for k in pairs(self) do\r\n        if not set[k] then return false end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "if not set[k] then return false end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Set.isempty (self)\r\n    return next(self) == nil\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function Set.isdisjoint (s1,s2)\r\n    return Set.isempty(Set.intersection(s1,s2))\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function Set.__eq (s1,s2)\r\n    return Set.issubset(s1,s2) and Set.issubset(s2,s1)\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "",
    "type": "function container"
  }, {
    "id": 55,
    "text": "function_arg",
    "type": "global function"
  }, {
    "id": 56,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 57,
    "text": "array_tostring",
    "type": "global function"
  }, {
    "id": 58,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 59,
    "text": "require",
    "type": "global function"
  }, {
    "id": 60,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 61,
    "text": "Set",
    "type": "global function"
  }, {
    "id": 62,
    "text": "merge",
    "type": "global function"
  }, {
    "id": 63,
    "text": "class",
    "type": "global function"
  }, {
    "id": 64,
    "text": "difference",
    "type": "global function"
  }, {
    "id": 65,
    "text": "values",
    "type": "global function"
  }, {
    "id": 66,
    "text": "next",
    "type": "global function"
  }, {
    "id": 67,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 68,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 69,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "variable container"
  }, {
    "id": 72,
    "text": "",
    "type": "require container"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "global variable"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "global variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "global variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "global variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "global variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "global variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "global variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "interface container"
  }, {
    "id": 115,
    "text": "",
    "type": "interface"
  } ]
}