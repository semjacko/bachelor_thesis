{
  "_filename": "text.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/text.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 11
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 5
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 5
  }, {
    "from": 50,
    "label": "has",
    "to": 5
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 51
  }, {
    "from": 57,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 57,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 5
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 60
  }, {
    "from": 62,
    "label": "has",
    "to": 5
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 60
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 5
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 51
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 54
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 67,
    "label": "has",
    "to": 76
  }, {
    "from": 67,
    "label": "has",
    "to": 5
  }, {
    "from": 67,
    "label": "has",
    "to": 5
  }, {
    "from": 64,
    "label": "has",
    "to": 77
  }, {
    "from": 64,
    "label": "has",
    "to": 5
  }, {
    "from": 64,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 68
  }, {
    "from": 79,
    "label": "has",
    "to": 51
  }, {
    "from": 79,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 54
  }, {
    "from": 79,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 79,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 79,
    "label": "has",
    "to": 76
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 83,
    "label": "has",
    "to": 5
  }, {
    "from": 81,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 5
  }, {
    "from": 81,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 81,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 84
  }, {
    "from": 95,
    "label": "has",
    "to": 85
  }, {
    "from": 95,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 95,
    "label": "has",
    "to": 5
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 99,
    "label": "has",
    "to": 5
  }, {
    "from": 99,
    "label": "has",
    "to": 5
  }, {
    "from": 99,
    "label": "has",
    "to": 5
  }, {
    "from": 99,
    "label": "has",
    "to": 5
  }, {
    "from": 99,
    "label": "has",
    "to": 5
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 68
  }, {
    "from": 103,
    "label": "has",
    "to": 51
  }, {
    "from": 103,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 54
  }, {
    "from": 103,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 103,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 103,
    "label": "has",
    "to": 76
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 81,
    "label": "calls",
    "to": 95
  }, {
    "from": 81,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 109
  }, {
    "from": 39,
    "label": "calls",
    "to": 26
  }, {
    "from": 57,
    "label": "calls",
    "to": 111
  }, {
    "from": 95,
    "label": "calls",
    "to": 111
  }, {
    "from": 46,
    "label": "calls",
    "to": 118
  }, {
    "from": 57,
    "label": "calls",
    "to": 118
  }, {
    "from": 18,
    "label": "calls",
    "to": 15
  }, {
    "from": 57,
    "label": "calls",
    "to": 15
  }, {
    "from": 26,
    "label": "calls",
    "to": 106
  }, {
    "from": 15,
    "label": "calls",
    "to": 107
  }, {
    "from": 22,
    "label": "calls",
    "to": 107
  }, {
    "from": 39,
    "label": "calls",
    "to": 107
  }, {
    "from": 64,
    "label": "calls",
    "to": 107
  }, {
    "from": 15,
    "label": "calls",
    "to": 117
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 4,
    "label": "calls",
    "to": 110
  }, {
    "from": 9,
    "label": "calls",
    "to": 4
  }, {
    "from": 26,
    "label": "calls",
    "to": 4
  }, {
    "from": 95,
    "label": "calls",
    "to": 115
  }, {
    "from": 15,
    "label": "calls",
    "to": 9
  }, {
    "from": 22,
    "label": "calls",
    "to": 9
  }, {
    "from": 64,
    "label": "calls",
    "to": 9
  }, {
    "from": 9,
    "label": "calls",
    "to": 116
  }, {
    "from": 59,
    "label": "calls",
    "to": 46
  }, {
    "from": 62,
    "label": "calls",
    "to": 46
  }, {
    "from": 57,
    "label": "calls",
    "to": 46
  }, {
    "from": 81,
    "label": "calls",
    "to": 46
  }, {
    "from": 46,
    "label": "calls",
    "to": 112
  }, {
    "from": 15,
    "label": "calls",
    "to": 10
  }, {
    "from": 22,
    "label": "calls",
    "to": 10
  }, {
    "from": 64,
    "label": "calls",
    "to": 10
  }, {
    "from": 18,
    "label": "calls",
    "to": 119
  }, {
    "from": 26,
    "label": "calls",
    "to": 8
  }, {
    "from": 46,
    "label": "calls",
    "to": 108
  }, {
    "from": 46,
    "label": "calls",
    "to": 108
  }, {
    "from": 105,
    "label": "calls",
    "to": 41
  }, {
    "from": 4,
    "label": "calls",
    "to": 121
  }, {
    "from": 105,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 121
  }, {
    "from": 18,
    "label": "calls",
    "to": 120
  }, {
    "from": 18,
    "label": "calls",
    "to": 120
  }, {
    "from": 22,
    "label": "calls",
    "to": 120
  }, {
    "from": 26,
    "label": "calls",
    "to": 120
  }, {
    "from": 41,
    "label": "calls",
    "to": 120
  }, {
    "from": 59,
    "label": "calls",
    "to": 120
  }, {
    "from": 62,
    "label": "calls",
    "to": 120
  }, {
    "from": 64,
    "label": "calls",
    "to": 120
  }, {
    "from": 95,
    "label": "calls",
    "to": 114
  }, {
    "from": 81,
    "label": "calls",
    "to": 114
  }, {
    "from": 95,
    "label": "calls",
    "to": 113
  }, {
    "from": 81,
    "label": "calls",
    "to": 113
  }, {
    "from": 81,
    "label": "calls",
    "to": 113
  }, {
    "from": 57,
    "label": "calls",
    "to": 122
  }, {
    "from": 81,
    "label": "calls",
    "to": 122
  }, {
    "from": 8,
    "label": "calls",
    "to": 7
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 1,
    "label": "contains",
    "to": 105
  }, {
    "from": 105,
    "label": "declares",
    "to": 4
  }, {
    "from": 105,
    "label": "declares",
    "to": 7
  }, {
    "from": 105,
    "label": "declares",
    "to": 8
  }, {
    "from": 105,
    "label": "declares",
    "to": 9
  }, {
    "from": 105,
    "label": "declares",
    "to": 10
  }, {
    "from": 105,
    "label": "declares",
    "to": 15
  }, {
    "from": 105,
    "label": "declares",
    "to": 18
  }, {
    "from": 105,
    "label": "declares",
    "to": 22
  }, {
    "from": 105,
    "label": "declares",
    "to": 26
  }, {
    "from": 105,
    "label": "declares",
    "to": 39
  }, {
    "from": 105,
    "label": "declares",
    "to": 41
  }, {
    "from": 105,
    "label": "declares",
    "to": 46
  }, {
    "from": 105,
    "label": "declares",
    "to": 57
  }, {
    "from": 105,
    "label": "declares",
    "to": 59
  }, {
    "from": 105,
    "label": "declares",
    "to": 62
  }, {
    "from": 105,
    "label": "declares",
    "to": 64
  }, {
    "from": 105,
    "label": "declares",
    "to": 79
  }, {
    "from": 105,
    "label": "declares",
    "to": 81
  }, {
    "from": 105,
    "label": "declares",
    "to": 95
  }, {
    "from": 105,
    "label": "declares",
    "to": 97
  }, {
    "from": 105,
    "label": "declares",
    "to": 99
  }, {
    "from": 105,
    "label": "declares",
    "to": 101
  }, {
    "from": 105,
    "label": "declares",
    "to": 103
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 1,
    "label": "contains",
    "to": 125
  }, {
    "from": 124,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 124,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 124,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 124,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 124,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 124,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 124,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 124,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 124,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 124,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 124,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 125,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "requires",
    "to": 3
  }, {
    "from": 125,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 150
  }, {
    "from": 123,
    "label": "represents",
    "to": 151
  }, {
    "from": 150,
    "label": "provides",
    "to": 151
  }, {
    "from": 152,
    "label": "requires",
    "to": 1
  }, {
    "from": 153,
    "label": "requires",
    "to": 1
  }, {
    "from": 140,
    "label": "contains",
    "to": 18
  }, {
    "from": 140,
    "label": "contains",
    "to": 22
  }, {
    "from": 140,
    "label": "contains",
    "to": 26
  }, {
    "from": 140,
    "label": "contains",
    "to": 39
  }, {
    "from": 142,
    "label": "contains",
    "to": 41
  }, {
    "from": 140,
    "label": "contains",
    "to": 81
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "text",
    "type": "module"
  }, {
    "id": 2,
    "text": "types",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function makelist(l)\r\n    return setmetatable(l, require('pl.List'))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function lstrip(str)  return (str:gsub('^%s+',''))  end",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function strip(str)  return (lstrip(str):gsub('%s+$','')) end",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function split(s,delim)  return makelist(usplit(s,delim)) end",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function imap(f,t,...)\r\n    local res = {}\r\n    for i = 1,#t do res[i] = f(t[i],...) end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "for i = 1,#t do res[i] = f(t[i],...) end",
    "type": "statement:numericfor"
  }, {
    "id": 13,
    "text": "res[i] = f(t[i],...)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function _indent (s,sp)\r\n    local sl = split(s,'\\n')\r\n    return concat(imap(bind1('..',sp),sl),'\\n')..'\\n'\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local sl = split(s,'\\n')",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function text.indent (s,n,ch)\r\n    assert_arg(1,s,'string')\r\n    assert_arg(2,n,'number')\r\n    return _indent(s,string.rep(ch or ' ',n))\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert_arg(1,s,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert_arg(2,n,'number')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function text.dedent (s)\r\n    assert_arg(1,s,'string')\r\n    local sl = split(s,'\\n')\r\n    local i1,i2 = (#sl>0 and sl[1] or ''):find('^%s*')\r\n    sl = imap(string.sub,sl,i2+1)\r\n    return concat(sl,'\\n')..'\\n'\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local i1,i2 = (#sl>0 and sl[1] or ''):find('^%s*')",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "sl = imap(string.sub,sl,i2+1)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function text.wrap (s,width)\r\n    assert_arg(1,s,'string')\r\n    width = width or 70\r\n    s = s:gsub('\\n',' ')\r\n    local i,nxt = 1\r\n    local lines,line = {}\r\n    while i < #s do\r\n        nxt = i+width\r\n        if s:find(\"[%w']\",nxt) then -- inside a word\r\n            nxt = s:find('%W',nxt+1) -- so find word boundary\r\n        end\r\n        line = s:sub(i,nxt)\r\n        i = i + #line\r\n        append(lines,strip(line))\r\n    end\r\n    return makelist(lines)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "width = width or 70",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "s = s:gsub('\\n',' ')",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local i,nxt = 1",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local lines,line = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "while i < #s do\r\n        nxt = i+width\r\n        if s:find(\"[%w']\",nxt) then -- inside a word\r\n            nxt = s:find('%W',nxt+1) -- so find word boundary\r\n        end\r\n        line = s:sub(i,nxt)\r\n        i = i + #line\r\n        append(lines,strip(line))\r\n    end",
    "type": "statement:while"
  }, {
    "id": 32,
    "text": "nxt = i+width",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if s:find(\"[%w']\",nxt) then -- inside a word\r\n            nxt = s:find('%W',nxt+1) -- so find word boundary\r\n        end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "nxt = s:find('%W',nxt+1)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "line = s:sub(i,nxt)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "i = i + #line",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "append(lines,strip(line))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function text.fill (s,width)\r\n    return concat(text.wrap(s,width),'\\n') .. '\\n'\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function Template.new(tmpl)\r\n    assert_arg(1,tmpl,'string')\r\n    local res = {}\r\n    res.tmpl = tmpl\r\n    setmetatable(res,Template)\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "assert_arg(1,tmpl,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "res.tmpl = tmpl",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "setmetatable(res,Template)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function _substitute(s,tbl,safe)\r\n    local subst\r\n    if is_callable(tbl) then\r\n        subst = tbl\r\n    else\r\n        function subst(f)\r\n            local s = tbl[f]\r\n            if not s then\r\n                if safe then\r\n                    return f\r\n                else\r\n                    error(\"not present in table \"..f)\r\n                end\r\n            else\r\n                return s\r\n            end\r\n        end\r\n    end\r\n    local res = gsub(s,'%${([%w_]+)}',subst)\r\n    return (gsub(res,'%$([%w_]+)',subst))\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local subst",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if is_callable(tbl) then\r\n        subst = tbl\r\n    else\r\n        function subst(f)\r\n            local s = tbl[f]\r\n            if not s then\r\n                if safe then\r\n                    return f\r\n                else\r\n                    error(\"not present in table \"..f)\r\n                end\r\n            else\r\n                return s\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "subst = tbl",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "function subst(f)\r\n            local s = tbl[f]\r\n            if not s then\r\n                if safe then\r\n                    return f\r\n                else\r\n                    error(\"not present in table \"..f)\r\n                end\r\n            else\r\n                return s\r\n            end\r\n        end",
    "type": "statement:globalfunction"
  }, {
    "id": 51,
    "text": "local s = tbl[f]",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if not s then\r\n                if safe then\r\n                    return f\r\n                else\r\n                    error(\"not present in table \"..f)\r\n                end\r\n            else\r\n                return s\r\n            end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "if safe then\r\n                    return f\r\n                else\r\n                    error(\"not present in table \"..f)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "error(\"not present in table \"..f)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local res = gsub(s,'%${([%w_]+)}',subst)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function subst(f)\r\n            local s = tbl[f]\r\n            if not s then\r\n                if safe then\r\n                    return f\r\n                else\r\n                    error(\"not present in table \"..f)\r\n                end\r\n            else\r\n                return s\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function Template:substitute(tbl)\r\n    assert_arg(1,tbl,'table')\r\n    return _substitute(self.tmpl,tbl,false)\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "assert_arg(1,tbl,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function Template:safe_substitute(tbl)\r\n    assert_arg(1,tbl,'table')\r\n    return _substitute(self.tmpl,tbl,true)\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function Template:indent_substitute(tbl)\r\n    assert_arg(1,tbl,'table')\r\n    if not self.strings then\r\n        self.strings = split(self.tmpl,'\\n')\r\n    end\r\n    -- the idea is to substitute line by line, grabbing any spaces as\r\n    -- well as the $var. If the value to be substituted contains newlines,\r\n    -- then we split that into lines and adjust the indent before inserting.\r\n    local function subst(line)\r\n        return line:gsub('(%s*)%$([%w_]+)',function(sp,f)\r\n\t\t\tlocal subtmpl\r\n            local s = tbl[f]\r\n            if not s then error(\"not present in table \"..f) end\r\n\t\t\tif getmetatable(s) == Template then\r\n\t\t\t\tsubtmpl = s\r\n\t\t\t\ts = s.tmpl\r\n\t\t\telse\r\n\t\t\t\ts = tostring(s)\r\n\t\t\tend\r\n            if s:find '\\n' then\r\n                s = _indent(s,sp)\r\n            end\r\n\t\t\tif subtmpl then return _substitute(s,tbl)\r\n\t\t\telse return s\r\n\t\t\tend\r\n        end)\r\n    end\r\n    local lines = imap(subst,self.strings)\r\n    return concat(lines,'\\n')..'\\n'\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "if not self.strings then\r\n        self.strings = split(self.tmpl,'\\n')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "self.strings = split(self.tmpl,'\\n')",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local function subst(line)\r\n        return line:gsub('(%s*)%$([%w_]+)',function(sp,f)\r\n\t\t\tlocal subtmpl\r\n            local s = tbl[f]\r\n            if not s then error(\"not present in table \"..f) end\r\n\t\t\tif getmetatable(s) == Template then\r\n\t\t\t\tsubtmpl = s\r\n\t\t\t\ts = s.tmpl\r\n\t\t\telse\r\n\t\t\t\ts = tostring(s)\r\n\t\t\tend\r\n            if s:find '\\n' then\r\n                s = _indent(s,sp)\r\n            end\r\n\t\t\tif subtmpl then return _substitute(s,tbl)\r\n\t\t\telse return s\r\n\t\t\tend\r\n        end)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 68,
    "text": "local subtmpl",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if not s then error(\"not present in table \"..f) end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "if getmetatable(s) == Template then\r\n\t\t\t\tsubtmpl = s\r\n\t\t\t\ts = s.tmpl\r\n\t\t\telse\r\n\t\t\t\ts = tostring(s)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "subtmpl = s",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "s = s.tmpl",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "s = tostring(s)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if s:find '\\n' then\r\n                s = _indent(s,sp)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "s = _indent(s,sp)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if subtmpl then return _substitute(s,tbl)\r\n\t\t\telse return s\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "local lines = imap(subst,self.strings)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "local function subst(line)\r\n        return line:gsub('(%s*)%$([%w_]+)',function(sp,f)\r\n\t\t\tlocal subtmpl\r\n            local s = tbl[f]\r\n            if not s then error(\"not present in table \"..f) end\r\n\t\t\tif getmetatable(s) == Template then\r\n\t\t\t\tsubtmpl = s\r\n\t\t\t\ts = s.tmpl\r\n\t\t\telse\r\n\t\t\t\ts = tostring(s)\r\n\t\t\tend\r\n            if s:find '\\n' then\r\n                s = _indent(s,sp)\r\n            end\r\n\t\t\tif subtmpl then return _substitute(s,tbl)\r\n\t\t\telse return s\r\n\t\t\tend\r\n        end)\r\n    end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function text.format_operator()\r\n\r\n    local format = string.format\r\n\r\n    -- a more forgiving version of string.format, which applies\r\n    -- tostring() to any value with a %s format.\r\n    local function formatx (fmt,...)\r\n        local args = {...}\r\n        local i = 1\r\n        for p in fmt:gmatch('%%.') do\r\n            if p == '%s' and type(args[i]) ~= 'string' then\r\n                args[i] = tostring(args[i])\r\n            end\r\n            i = i + 1\r\n        end\r\n        return format(fmt,unpack(args))\r\n    end\r\n\r\n    local function basic_subst(s,t)\r\n        return (s:gsub('%$([%w_]+)',t))\r\n    end\r\n\r\n    -- Note this goes further than the original, and will allow these cases:\r\n    -- 1. a single value\r\n    -- 2. a list of values\r\n    -- 3. a map of var=value pairs\r\n    -- 4. a function, as in gsub\r\n    -- For the second two cases, it uses $-variable substituion.\r\n    getmetatable(\"\").__mod = function(a, b)\r\n        if b == nil then\r\n            return a\r\n        elseif type(b) == \"table\" and getmetatable(b) == nil then\r\n            if #b == 0 then -- assume a map-like table\r\n                return _substitute(a,b,true)\r\n            else\r\n                return formatx(a,unpack(b))\r\n            end\r\n        elseif type(b) == 'function' then\r\n            return basic_subst(a,b)\r\n        else\r\n            return formatx(a,b)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "local format = string.format",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local function formatx (fmt,...)\r\n        local args = {...}\r\n        local i = 1\r\n        for p in fmt:gmatch('%%.') do\r\n            if p == '%s' and type(args[i]) ~= 'string' then\r\n                args[i] = tostring(args[i])\r\n            end\r\n            i = i + 1\r\n        end\r\n        return format(fmt,unpack(args))\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 84,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "for p in fmt:gmatch('%%.') do\r\n            if p == '%s' and type(args[i]) ~= 'string' then\r\n                args[i] = tostring(args[i])\r\n            end\r\n            i = i + 1\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "if p == '%s' and type(args[i]) ~= 'string' then\r\n                args[i] = tostring(args[i])\r\n            end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "args[i] = tostring(args[i])",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "local function basic_subst(s,t)\r\n        return (s:gsub('%$([%w_]+)',t))\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 91,
    "text": "getmetatable(\"\").__mod = function(a, b)\r\n        if b == nil then\r\n            return a\r\n        elseif type(b) == \"table\" and getmetatable(b) == nil then\r\n            if #b == 0 then -- assume a map-like table\r\n                return _substitute(a,b,true)\r\n            else\r\n                return formatx(a,unpack(b))\r\n            end\r\n        elseif type(b) == 'function' then\r\n            return basic_subst(a,b)\r\n        else\r\n            return formatx(a,b)\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "if b == nil then\r\n            return a\r\n        elseif type(b) == \"table\" and getmetatable(b) == nil then\r\n            if #b == 0 then -- assume a map-like table\r\n                return _substitute(a,b,true)\r\n            else\r\n                return formatx(a,unpack(b))\r\n            end\r\n        elseif type(b) == 'function' then\r\n            return basic_subst(a,b)\r\n        else\r\n            return formatx(a,b)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "if #b == 0 then -- assume a map-like table\r\n                return _substitute(a,b,true)\r\n            else\r\n                return formatx(a,unpack(b))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "local function formatx (fmt,...)\r\n        local args = {...}\r\n        local i = 1\r\n        for p in fmt:gmatch('%%.') do\r\n            if p == '%s' and type(args[i]) ~= 'string' then\r\n                args[i] = tostring(args[i])\r\n            end\r\n            i = i + 1\r\n        end\r\n        return format(fmt,unpack(args))\r\n    end",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "local function basic_subst(s,t)\r\n        return (s:gsub('%$([%w_]+)',t))\r\n    end",
    "type": "function"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function(a, b)\r\n        if b == nil then\r\n            return a\r\n        elseif type(b) == \"table\" and getmetatable(b) == nil then\r\n            if #b == 0 then -- assume a map-like table\r\n                return _substitute(a,b,true)\r\n            else\r\n                return formatx(a,unpack(b))\r\n            end\r\n        elseif type(b) == 'function' then\r\n            return basic_subst(a,b)\r\n        else\r\n            return formatx(a,b)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function(obj,tmpl)\r\n        return Template.new(tmpl)\r\n    end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function(sp,f)\r\n\t\t\tlocal subtmpl\r\n            local s = tbl[f]\r\n            if not s then error(\"not present in table \"..f) end\r\n\t\t\tif getmetatable(s) == Template then\r\n\t\t\t\tsubtmpl = s\r\n\t\t\t\ts = s.tmpl\r\n\t\t\telse\r\n\t\t\t\ts = tostring(s)\r\n\t\t\tend\r\n            if s:find '\\n' then\r\n                s = _indent(s,sp)\r\n            end\r\n\t\t\tif subtmpl then return _substitute(s,tbl)\r\n\t\t\telse return s\r\n\t\t\tend\r\n        end",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "",
    "type": "function container"
  }, {
    "id": 106,
    "text": "append",
    "type": "global function"
  }, {
    "id": 107,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 108,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 109,
    "text": "f",
    "type": "global function"
  }, {
    "id": 110,
    "text": "require",
    "type": "global function"
  }, {
    "id": 111,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 112,
    "text": "is_callable",
    "type": "global function"
  }, {
    "id": 113,
    "text": "type",
    "type": "global function"
  }, {
    "id": 114,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 115,
    "text": "format",
    "type": "global function"
  }, {
    "id": 116,
    "text": "usplit",
    "type": "global function"
  }, {
    "id": 117,
    "text": "bind1",
    "type": "global function"
  }, {
    "id": 118,
    "text": "error",
    "type": "global function"
  }, {
    "id": 119,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 120,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 121,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 122,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "variable container"
  }, {
    "id": 125,
    "text": "",
    "type": "require container"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "n/a"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "n/a"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 144,
    "text": "",
    "type": "global variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "global variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "interface container"
  }, {
    "id": 151,
    "text": "",
    "type": "interface"
  }, {
    "id": 152,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "require local variable"
  } ]
}