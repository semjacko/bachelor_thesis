{
  "_filename": "class.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/class.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 15
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 15
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 44,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 44,
    "label": "has",
    "to": 57
  }, {
    "from": 44,
    "label": "has",
    "to": 58
  }, {
    "from": 44,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 44,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 44,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 63,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 63,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 63,
    "label": "has",
    "to": 15
  }, {
    "from": 44,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 44,
    "label": "has",
    "to": 83
  }, {
    "from": 44,
    "label": "has",
    "to": 84
  }, {
    "from": 44,
    "label": "has",
    "to": 85
  }, {
    "from": 44,
    "label": "has",
    "to": 86
  }, {
    "from": 44,
    "label": "has",
    "to": 15
  }, {
    "from": 44,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 64
  }, {
    "from": 88,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 88,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 88,
    "label": "has",
    "to": 69
  }, {
    "from": 88,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 88,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 88,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 88,
    "label": "has",
    "to": 15
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 90,
    "label": "has",
    "to": 81
  }, {
    "from": 90,
    "label": "has",
    "to": 82
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 15
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 15
  }, {
    "from": 93,
    "label": "has",
    "to": 15
  }, {
    "from": 92,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 92,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 94
  }, {
    "from": 105,
    "label": "has",
    "to": 95
  }, {
    "from": 105,
    "label": "has",
    "to": 15
  }, {
    "from": 105,
    "label": "has",
    "to": 96
  }, {
    "from": 105,
    "label": "has",
    "to": 97
  }, {
    "from": 105,
    "label": "has",
    "to": 15
  }, {
    "from": 105,
    "label": "has",
    "to": 15
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 99
  }, {
    "from": 107,
    "label": "has",
    "to": 100
  }, {
    "from": 107,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 12
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 15
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 15
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 15
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 118,
    "label": "has",
    "to": 15
  }, {
    "from": 118,
    "label": "has",
    "to": 114
  }, {
    "from": 118,
    "label": "has",
    "to": 115
  }, {
    "from": 118,
    "label": "has",
    "to": 116
  }, {
    "from": 118,
    "label": "has",
    "to": 15
  }, {
    "from": 118,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "calls",
    "to": 44
  }, {
    "from": 124,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 124,
    "label": "calls",
    "to": 127
  }, {
    "from": 92,
    "label": "calls",
    "to": 127
  }, {
    "from": 92,
    "label": "calls",
    "to": 132
  }, {
    "from": 30,
    "label": "calls",
    "to": 130
  }, {
    "from": 44,
    "label": "calls",
    "to": 139
  }, {
    "from": 44,
    "label": "calls",
    "to": 140
  }, {
    "from": 2,
    "label": "calls",
    "to": 125
  }, {
    "from": 2,
    "label": "calls",
    "to": 125
  }, {
    "from": 2,
    "label": "calls",
    "to": 125
  }, {
    "from": 2,
    "label": "calls",
    "to": 125
  }, {
    "from": 17,
    "label": "calls",
    "to": 125
  }, {
    "from": 25,
    "label": "calls",
    "to": 125
  }, {
    "from": 30,
    "label": "calls",
    "to": 125
  }, {
    "from": 44,
    "label": "calls",
    "to": 125
  }, {
    "from": 44,
    "label": "calls",
    "to": 125
  }, {
    "from": 44,
    "label": "calls",
    "to": 125
  }, {
    "from": 44,
    "label": "calls",
    "to": 125
  }, {
    "from": 44,
    "label": "calls",
    "to": 125
  }, {
    "from": 44,
    "label": "calls",
    "to": 125
  }, {
    "from": 44,
    "label": "calls",
    "to": 125
  }, {
    "from": 92,
    "label": "calls",
    "to": 125
  }, {
    "from": 92,
    "label": "calls",
    "to": 125
  }, {
    "from": 92,
    "label": "calls",
    "to": 128
  }, {
    "from": 124,
    "label": "calls",
    "to": 133
  }, {
    "from": 44,
    "label": "calls",
    "to": 126
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 124,
    "label": "calls",
    "to": 136
  }, {
    "from": 39,
    "label": "calls",
    "to": 138
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 44,
    "label": "calls",
    "to": 2
  }, {
    "from": 44,
    "label": "calls",
    "to": 2
  }, {
    "from": 28,
    "label": "calls",
    "to": 141
  }, {
    "from": 30,
    "label": "calls",
    "to": 141
  }, {
    "from": 30,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 44,
    "label": "calls",
    "to": 141
  }, {
    "from": 124,
    "label": "calls",
    "to": 141
  }, {
    "from": 25,
    "label": "calls",
    "to": 131
  }, {
    "from": 17,
    "label": "calls",
    "to": 142
  }, {
    "from": 17,
    "label": "calls",
    "to": 142
  }, {
    "from": 44,
    "label": "calls",
    "to": 142
  }, {
    "from": 25,
    "label": "calls",
    "to": 134
  }, {
    "from": 44,
    "label": "calls",
    "to": 134
  }, {
    "from": 44,
    "label": "calls",
    "to": 134
  }, {
    "from": 44,
    "label": "calls",
    "to": 134
  }, {
    "from": 124,
    "label": "calls",
    "to": 129
  }, {
    "from": 44,
    "label": "calls",
    "to": 137
  }, {
    "from": 44,
    "label": "calls",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 124,
    "label": "declares",
    "to": 2
  }, {
    "from": 124,
    "label": "declares",
    "to": 17
  }, {
    "from": 124,
    "label": "declares",
    "to": 25
  }, {
    "from": 124,
    "label": "declares",
    "to": 28
  }, {
    "from": 124,
    "label": "declares",
    "to": 30
  }, {
    "from": 124,
    "label": "declares",
    "to": 39
  }, {
    "from": 124,
    "label": "declares",
    "to": 44
  }, {
    "from": 124,
    "label": "declares",
    "to": 88
  }, {
    "from": 124,
    "label": "declares",
    "to": 90
  }, {
    "from": 124,
    "label": "declares",
    "to": 92
  }, {
    "from": 124,
    "label": "declares",
    "to": 105
  }, {
    "from": 124,
    "label": "declares",
    "to": 107
  }, {
    "from": 124,
    "label": "declares",
    "to": 109
  }, {
    "from": 124,
    "label": "declares",
    "to": 111
  }, {
    "from": 124,
    "label": "declares",
    "to": 113
  }, {
    "from": 124,
    "label": "declares",
    "to": 118
  }, {
    "from": 1,
    "label": "contains",
    "to": 143
  }, {
    "from": 1,
    "label": "contains",
    "to": 144
  }, {
    "from": 143,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 143,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 143,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 143,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 143,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 143,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 143,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 143,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 143,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 143,
    "label": "initializes",
    "to": 163
  }, {
    "from": 143,
    "label": "initializes",
    "to": 164
  }, {
    "from": 143,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 143,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 1,
    "label": "provides",
    "to": 169
  }, {
    "from": 165,
    "label": "represents",
    "to": 170
  }, {
    "from": 169,
    "label": "provides",
    "to": 170
  }, {
    "from": 163,
    "label": "represents",
    "to": 171
  }, {
    "from": 172,
    "label": "requires",
    "to": 1
  }, {
    "from": 173,
    "label": "requires",
    "to": 1
  }, {
    "from": 174,
    "label": "requires",
    "to": 1
  }, {
    "from": 175,
    "label": "requires",
    "to": 1
  }, {
    "from": 176,
    "label": "requires",
    "to": 1
  }, {
    "from": 177,
    "label": "requires",
    "to": 1
  }, {
    "from": 178,
    "label": "requires",
    "to": 1
  }, {
    "from": 179,
    "label": "requires",
    "to": 1
  }, {
    "from": 180,
    "label": "requires",
    "to": 1
  }, {
    "from": 181,
    "label": "requires",
    "to": 1
  }, {
    "from": 182,
    "label": "requires",
    "to": 1
  }, {
    "from": 183,
    "label": "requires",
    "to": 1
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 109
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "class",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function call_ctor (c,obj,...)\r\n    -- nice alias for the base class ctor\r\n    local base = rawget(c,'_base')\r\n    if base then\r\n        local parent_ctor = rawget(base,'_init')\r\n        while not parent_ctor do\r\n            base = rawget(base,'_base')\r\n            if not base then break end\r\n            parent_ctor = rawget(base,'_init')\r\n        end\r\n        if parent_ctor then\r\n            rawset(obj,'super',function(obj,...)\r\n                call_ctor(base,obj,...)\r\n            end)\r\n        end\r\n    end\r\n    local res = c._init(obj,...)\r\n    rawset(obj,'super',nil)\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local base = rawget(c,'_base')",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if base then\r\n        local parent_ctor = rawget(base,'_init')\r\n        while not parent_ctor do\r\n            base = rawget(base,'_base')\r\n            if not base then break end\r\n            parent_ctor = rawget(base,'_init')\r\n        end\r\n        if parent_ctor then\r\n            rawset(obj,'super',function(obj,...)\r\n                call_ctor(base,obj,...)\r\n            end)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "local parent_ctor = rawget(base,'_init')",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "while not parent_ctor do\r\n            base = rawget(base,'_base')\r\n            if not base then break end\r\n            parent_ctor = rawget(base,'_init')\r\n        end",
    "type": "statement:while"
  }, {
    "id": 7,
    "text": "base = rawget(base,'_base')",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if not base then break end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "parent_ctor = rawget(base,'_init')",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if parent_ctor then\r\n            rawset(obj,'super',function(obj,...)\r\n                call_ctor(base,obj,...)\r\n            end)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "rawset(obj,'super',function(obj,...)\r\n                call_ctor(base,obj,...)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "call_ctor(base,obj,...)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local res = c._init(obj,...)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "rawset(obj,'super',nil)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function is_a(self,klass)\r\n    if klass == nil then\r\n        -- no class provided, so return the class this instance is derived from\r\n        return getmetatable(self)\r\n    end\r\n    local m = getmetatable(self)\r\n    if not m then return false end --*can't be an object!\r\n    while m do\r\n        if m == klass then return true end\r\n        m = rawget(m,'_base')\r\n    end\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if klass == nil then\r\n        -- no class provided, so return the class this instance is derived from\r\n        return getmetatable(self)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "local m = getmetatable(self)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not m then return false end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "while m do\r\n        if m == klass then return true end\r\n        m = rawget(m,'_base')\r\n    end",
    "type": "statement:while"
  }, {
    "id": 22,
    "text": "if m == klass then return true end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "m = rawget(m,'_base')",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function class_of(klass,obj)\r\n    if type(klass) ~= 'table' or not rawget(klass,'is_a') then return false end\r\n    return klass.is_a(obj,klass)\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "if type(klass) ~= 'table' or not rawget(klass,'is_a') then return false end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function cast (klass, obj)\r\n    return setmetatable(obj,klass)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function _class_tostring (obj)\r\n    local mt = obj._class\r\n    local name = rawget(mt,'_name')\r\n    setmetatable(obj,nil)\r\n    local str = tostring(obj)\r\n    setmetatable(obj,mt)\r\n    if name then str = name ..str:gsub('table','') end\r\n    return str\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local mt = obj._class",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local name = rawget(mt,'_name')",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "setmetatable(obj,nil)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local str = tostring(obj)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "setmetatable(obj,mt)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if name then str = name ..str:gsub('table','') end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "str = name ..str:gsub('table','')",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function tupdate(td,ts,dont_override)\r\n    for k,v in pairs(ts) do\r\n        if not dont_override or td[k] == nil then\r\n            td[k] = v\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "for k,v in pairs(ts) do\r\n        if not dont_override or td[k] == nil then\r\n            td[k] = v\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "if not dont_override or td[k] == nil then\r\n            td[k] = v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "td[k] = v",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function _class(base,c_arg,c)\r\n    -- the class `c` will be the metatable for all its objects,\r\n    -- and they will look up their methods in it.\r\n    local mt = {}   -- a metatable for the class to support __call and _handler\r\n    -- can define class by passing it a plain table of methods\r\n    local plain = type(base) == 'table' and not getmetatable(base)\r\n    if plain then\r\n        c = base\r\n        base = c._base\r\n    else\r\n        c = c or {}\r\n    end\r\n   \r\n    if type(base) == 'table' then\r\n        -- our new class is a shallow copy of the base class!\r\n        -- but be careful not to wipe out any methods we have been given at this point!\r\n        tupdate(c,base,plain)\r\n        c._base = base\r\n        -- inherit the 'not found' handler, if present\r\n        if rawget(c,'_handler') then mt.__index = c._handler end\r\n    elseif base ~= nil then\r\n        error(\"must derive from a table type\",3)\r\n    end\r\n\r\n    c.__index = c\r\n    setmetatable(c,mt)\r\n    if not plain then\r\n        c._init = nil\r\n    end\r\n\r\n    if base and rawget(base,'_class_init') then\r\n        base._class_init(c,c_arg)\r\n    end\r\n\r\n    -- expose a ctor which can be called by <classname>(<args>)\r\n    mt.__call = function(class_tbl,...)\r\n        local obj\r\n        if rawget(c,'_create') then obj = c._create(...) end\r\n        if not obj then obj = {} end\r\n        setmetatable(obj,c)\r\n\r\n        if rawget(c,'_init') then -- explicit constructor\r\n            local res = call_ctor(c,obj,...)\r\n            if res then -- _if_ a ctor returns a value, it becomes the object...\r\n                obj = res\r\n                setmetatable(obj,c)\r\n            end\r\n        elseif base and rawget(base,'_init') then -- default constructor\r\n            -- make sure that any stuff from the base class is initialized!\r\n            call_ctor(base,obj,...)\r\n        end\r\n\r\n        if base and rawget(base,'_post_init') then\r\n            base._post_init(obj)\r\n        end\r\n\r\n        if not rawget(c,'__tostring') then\r\n            c.__tostring = _class_tostring\r\n        end\r\n        return obj\r\n    end\r\n    -- Call Class.catch to set a handler for methods/properties not found in the class!\r\n    c.catch = function(self, handler)\r\n        if type(self) == \"function\" then\r\n            -- called using . instead of :\r\n            handler = self\r\n        end\r\n        c._handler = handler\r\n        mt.__index = handler\r\n    end\r\n    c.is_a = is_a\r\n    c.class_of = class_of\r\n    c.cast = cast\r\n    c._class = c\r\n\r\n    return c\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local mt = {}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local plain = type(base) == 'table' and not getmetatable(base)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if plain then\r\n        c = base\r\n        base = c._base\r\n    else\r\n        c = c or {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "c = base",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "base = c._base",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "c = c or {}",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if type(base) == 'table' then\r\n        -- our new class is a shallow copy of the base class!\r\n        -- but be careful not to wipe out any methods we have been given at this point!\r\n        tupdate(c,base,plain)\r\n        c._base = base\r\n        -- inherit the 'not found' handler, if present\r\n        if rawget(c,'_handler') then mt.__index = c._handler end\r\n    elseif base ~= nil then\r\n        error(\"must derive from a table type\",3)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "tupdate(c,base,plain)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "c._base = base",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "if rawget(c,'_handler') then mt.__index = c._handler end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "mt.__index = c._handler",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "error(\"must derive from a table type\",3)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "c.__index = c",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "setmetatable(c,mt)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "if not plain then\r\n        c._init = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "c._init = nil",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if base and rawget(base,'_class_init') then\r\n        base._class_init(c,c_arg)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "base._class_init(c,c_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "mt.__call = function(class_tbl,...)\r\n        local obj\r\n        if rawget(c,'_create') then obj = c._create(...) end\r\n        if not obj then obj = {} end\r\n        setmetatable(obj,c)\r\n\r\n        if rawget(c,'_init') then -- explicit constructor\r\n            local res = call_ctor(c,obj,...)\r\n            if res then -- _if_ a ctor returns a value, it becomes the object...\r\n                obj = res\r\n                setmetatable(obj,c)\r\n            end\r\n        elseif base and rawget(base,'_init') then -- default constructor\r\n            -- make sure that any stuff from the base class is initialized!\r\n            call_ctor(base,obj,...)\r\n        end\r\n\r\n        if base and rawget(base,'_post_init') then\r\n            base._post_init(obj)\r\n        end\r\n\r\n        if not rawget(c,'__tostring') then\r\n            c.__tostring = _class_tostring\r\n        end\r\n        return obj\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local obj",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if rawget(c,'_create') then obj = c._create(...) end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "obj = c._create(...)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "if not obj then obj = {} end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "obj = {}",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "setmetatable(obj,c)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if rawget(c,'_init') then -- explicit constructor\r\n            local res = call_ctor(c,obj,...)\r\n            if res then -- _if_ a ctor returns a value, it becomes the object...\r\n                obj = res\r\n                setmetatable(obj,c)\r\n            end\r\n        elseif base and rawget(base,'_init') then -- default constructor\r\n            -- make sure that any stuff from the base class is initialized!\r\n            call_ctor(base,obj,...)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "local res = call_ctor(c,obj,...)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if res then -- _if_ a ctor returns a value, it becomes the object...\r\n                obj = res\r\n                setmetatable(obj,c)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "obj = res",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if base and rawget(base,'_post_init') then\r\n            base._post_init(obj)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "base._post_init(obj)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "if not rawget(c,'__tostring') then\r\n            c.__tostring = _class_tostring\r\n        end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "c.__tostring = _class_tostring",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "c.catch = function(self, handler)\r\n        if type(self) == \"function\" then\r\n            -- called using . instead of :\r\n            handler = self\r\n        end\r\n        c._handler = handler\r\n        mt.__index = handler\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if type(self) == \"function\" then\r\n            -- called using . instead of :\r\n            handler = self\r\n        end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "handler = self",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "c._handler = handler",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "mt.__index = handler",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "c.is_a = is_a",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "c.class_of = class_of",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "c.cast = cast",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "c._class = c",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(class_tbl,...)\r\n        local obj\r\n        if rawget(c,'_create') then obj = c._create(...) end\r\n        if not obj then obj = {} end\r\n        setmetatable(obj,c)\r\n\r\n        if rawget(c,'_init') then -- explicit constructor\r\n            local res = call_ctor(c,obj,...)\r\n            if res then -- _if_ a ctor returns a value, it becomes the object...\r\n                obj = res\r\n                setmetatable(obj,c)\r\n            end\r\n        elseif base and rawget(base,'_init') then -- default constructor\r\n            -- make sure that any stuff from the base class is initialized!\r\n            call_ctor(base,obj,...)\r\n        end\r\n\r\n        if base and rawget(base,'_post_init') then\r\n            base._post_init(obj)\r\n        end\r\n\r\n        if not rawget(c,'__tostring') then\r\n            c.__tostring = _class_tostring\r\n        end\r\n        return obj\r\n    end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function(self, handler)\r\n        if type(self) == \"function\" then\r\n            -- called using . instead of :\r\n            handler = self\r\n        end\r\n        c._handler = handler\r\n        mt.__index = handler\r\n    end",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function class.properties._class_init(klass)\r\n    klass.__index = function(t,key)\r\n        -- normal class lookup!\r\n        local v = klass[key]\r\n        if v then return v end\r\n        -- is it a getter?\r\n        v = rawget(klass,'get_'..key)\r\n        if v then\r\n            return v(t)\r\n        end\r\n        -- is it a field?\r\n        return rawget(t,'_'..key)\r\n    end\r\n    klass.__newindex = function (t,key,value)\r\n        -- if there's a setter, use that, otherwise directly set table\r\n        local p = 'set_'..key\r\n        local setter = klass[p]\r\n        if setter then\r\n            setter(t,value)\r\n        else\r\n            rawset(t,key,value)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "klass.__index = function(t,key)\r\n        -- normal class lookup!\r\n        local v = klass[key]\r\n        if v then return v end\r\n        -- is it a getter?\r\n        v = rawget(klass,'get_'..key)\r\n        if v then\r\n            return v(t)\r\n        end\r\n        -- is it a field?\r\n        return rawget(t,'_'..key)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "local v = klass[key]",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if v then return v end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "v = rawget(klass,'get_'..key)",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if v then\r\n            return v(t)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "klass.__newindex = function (t,key,value)\r\n        -- if there's a setter, use that, otherwise directly set table\r\n        local p = 'set_'..key\r\n        local setter = klass[p]\r\n        if setter then\r\n            setter(t,value)\r\n        else\r\n            rawset(t,key,value)\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "local p = 'set_'..key",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local setter = klass[p]",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if setter then\r\n            setter(t,value)\r\n        else\r\n            rawset(t,key,value)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "setter(t,value)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "rawset(t,key,value)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function(t,key)\r\n        -- normal class lookup!\r\n        local v = klass[key]\r\n        if v then return v end\r\n        -- is it a getter?\r\n        v = rawget(klass,'get_'..key)\r\n        if v then\r\n            return v(t)\r\n        end\r\n        -- is it a field?\r\n        return rawget(t,'_'..key)\r\n    end",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function (t,key,value)\r\n        -- if there's a setter, use that, otherwise directly set table\r\n        local p = 'set_'..key\r\n        local setter = klass[p]\r\n        if setter then\r\n            setter(t,value)\r\n        else\r\n            rawset(t,key,value)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function(obj,...)\r\n                call_ctor(base,obj,...)\r\n            end",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function(fun,...)\r\n        return _class(...)\r\n    end",
    "type": "function"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function(...)\r\n            local c = _class(...)\r\n            c._name = key\r\n            rawset(env,key,c)\r\n            return c\r\n        end",
    "type": "function"
  }, {
    "id": 114,
    "text": "local c = _class(...)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "c._name = key",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "rawset(env,key,c)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function(tbl,key)\r\n        if key == 'class' then\r\n            io.stderr:write('require(\"pl.class\").class is deprecated. Use require(\"pl.class\")\\n')\r\n            return class\r\n        end\r\n        compat = compat or require 'pl.compat'\r\n        local env = compat.getfenv(2)\r\n        return function(...)\r\n            local c = _class(...)\r\n            c._name = key\r\n            rawset(env,key,c)\r\n            return c\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 119,
    "text": "if key == 'class' then\r\n            io.stderr:write('require(\"pl.class\").class is deprecated. Use require(\"pl.class\")\\n')\r\n            return class\r\n        end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "io.stderr:write('require(\"pl.class\").class is deprecated. Use require(\"pl.class\")\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "compat = compat or require 'pl.compat'",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "local env = compat.getfenv(2)",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "",
    "type": "function container"
  }, {
    "id": 125,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 126,
    "text": "_post_init",
    "type": "global function"
  }, {
    "id": 127,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 128,
    "text": "setter",
    "type": "global function"
  }, {
    "id": 129,
    "text": "require",
    "type": "global function"
  }, {
    "id": 130,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 131,
    "text": "is_a",
    "type": "global function"
  }, {
    "id": 132,
    "text": "v",
    "type": "global function"
  }, {
    "id": 133,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 134,
    "text": "type",
    "type": "global function"
  }, {
    "id": 135,
    "text": "_init",
    "type": "global function"
  }, {
    "id": 136,
    "text": "class",
    "type": "global function"
  }, {
    "id": 137,
    "text": "_create",
    "type": "global function"
  }, {
    "id": 138,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 139,
    "text": "_class_init",
    "type": "global function"
  }, {
    "id": 140,
    "text": "error",
    "type": "global function"
  }, {
    "id": 141,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 142,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 143,
    "text": "",
    "type": "variable container"
  }, {
    "id": 144,
    "text": "",
    "type": "require container"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "global variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "interface container"
  }, {
    "id": 170,
    "text": "",
    "type": "interface"
  }, {
    "id": 171,
    "text": "",
    "type": "interface"
  }, {
    "id": 172,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "require local variable"
  } ]
}