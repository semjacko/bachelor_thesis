{
  "_filename": "pretty.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/pretty.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 36
  }, {
    "from": 24,
    "label": "has",
    "to": 37
  }, {
    "from": 24,
    "label": "has",
    "to": 38
  }, {
    "from": 24,
    "label": "has",
    "to": 39
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 30
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 35
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 38
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 10
  }, {
    "from": 51,
    "label": "has",
    "to": 10
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 10
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 10
  }, {
    "from": 58,
    "label": "has",
    "to": 10
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 10
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 10
  }, {
    "from": 66,
    "label": "has",
    "to": 10
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 66,
    "label": "has",
    "to": 76
  }, {
    "from": 66,
    "label": "has",
    "to": 77
  }, {
    "from": 66,
    "label": "has",
    "to": 78
  }, {
    "from": 66,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 66,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 81
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 66,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 66,
    "label": "has",
    "to": 92
  }, {
    "from": 66,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 95,
    "label": "has",
    "to": 103
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 95,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 107
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 113
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 107
  }, {
    "from": 95,
    "label": "has",
    "to": 120
  }, {
    "from": 95,
    "label": "has",
    "to": 121
  }, {
    "from": 95,
    "label": "has",
    "to": 122
  }, {
    "from": 95,
    "label": "has",
    "to": 123
  }, {
    "from": 93,
    "label": "has",
    "to": 10
  }, {
    "from": 66,
    "label": "has",
    "to": 124
  }, {
    "from": 66,
    "label": "has",
    "to": 121
  }, {
    "from": 66,
    "label": "has",
    "to": 10
  }, {
    "from": 66,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 81
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 88
  }, {
    "from": 130,
    "label": "has",
    "to": 89
  }, {
    "from": 130,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 94
  }, {
    "from": 132,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 95,
    "label": "has",
    "to": 103
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 95,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 107
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 113
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 107
  }, {
    "from": 95,
    "label": "has",
    "to": 120
  }, {
    "from": 95,
    "label": "has",
    "to": 121
  }, {
    "from": 95,
    "label": "has",
    "to": 122
  }, {
    "from": 95,
    "label": "has",
    "to": 123
  }, {
    "from": 132,
    "label": "has",
    "to": 10
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 10
  }, {
    "from": 138,
    "label": "has",
    "to": 10
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 144,
    "label": "has",
    "to": 151
  }, {
    "from": 144,
    "label": "has",
    "to": 152
  }, {
    "from": 144,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 144,
    "label": "has",
    "to": 156
  }, {
    "from": 144,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 144,
    "label": "has",
    "to": 160
  }, {
    "from": 142,
    "label": "has",
    "to": 10
  }, {
    "from": 142,
    "label": "has",
    "to": 10
  }, {
    "from": 142,
    "label": "has",
    "to": 10
  }, {
    "from": 142,
    "label": "has",
    "to": 161
  }, {
    "from": 5,
    "label": "calls",
    "to": 181
  }, {
    "from": 5,
    "label": "calls",
    "to": 181
  }, {
    "from": 138,
    "label": "calls",
    "to": 180
  }, {
    "from": 24,
    "label": "calls",
    "to": 163
  }, {
    "from": 41,
    "label": "calls",
    "to": 163
  }, {
    "from": 134,
    "label": "calls",
    "to": 166
  }, {
    "from": 24,
    "label": "calls",
    "to": 12
  }, {
    "from": 41,
    "label": "calls",
    "to": 12
  }, {
    "from": 12,
    "label": "calls",
    "to": 170
  }, {
    "from": 19,
    "label": "calls",
    "to": 170
  }, {
    "from": 128,
    "label": "calls",
    "to": 172
  }, {
    "from": 128,
    "label": "calls",
    "to": 172
  }, {
    "from": 134,
    "label": "calls",
    "to": 173
  }, {
    "from": 66,
    "label": "calls",
    "to": 132
  }, {
    "from": 66,
    "label": "calls",
    "to": 132
  }, {
    "from": 66,
    "label": "calls",
    "to": 132
  }, {
    "from": 66,
    "label": "calls",
    "to": 132
  }, {
    "from": 24,
    "label": "calls",
    "to": 178
  }, {
    "from": 41,
    "label": "calls",
    "to": 178
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 66,
    "label": "calls",
    "to": 51
  }, {
    "from": 24,
    "label": "calls",
    "to": 167
  }, {
    "from": 41,
    "label": "calls",
    "to": 167
  }, {
    "from": 66,
    "label": "calls",
    "to": 182
  }, {
    "from": 66,
    "label": "calls",
    "to": 126
  }, {
    "from": 66,
    "label": "calls",
    "to": 126
  }, {
    "from": 66,
    "label": "calls",
    "to": 126
  }, {
    "from": 24,
    "label": "calls",
    "to": 19
  }, {
    "from": 41,
    "label": "calls",
    "to": 19
  }, {
    "from": 51,
    "label": "calls",
    "to": 176
  }, {
    "from": 58,
    "label": "calls",
    "to": 176
  }, {
    "from": 66,
    "label": "calls",
    "to": 176
  }, {
    "from": 5,
    "label": "calls",
    "to": 183
  }, {
    "from": 66,
    "label": "calls",
    "to": 130
  }, {
    "from": 66,
    "label": "calls",
    "to": 130
  }, {
    "from": 12,
    "label": "calls",
    "to": 165
  }, {
    "from": 12,
    "label": "calls",
    "to": 168
  }, {
    "from": 19,
    "label": "calls",
    "to": 168
  }, {
    "from": 12,
    "label": "calls",
    "to": 186
  }, {
    "from": 5,
    "label": "calls",
    "to": 174
  }, {
    "from": 66,
    "label": "calls",
    "to": 5
  }, {
    "from": 66,
    "label": "calls",
    "to": 5
  }, {
    "from": 66,
    "label": "calls",
    "to": 5
  }, {
    "from": 66,
    "label": "calls",
    "to": 5
  }, {
    "from": 66,
    "label": "calls",
    "to": 5
  }, {
    "from": 138,
    "label": "calls",
    "to": 5
  }, {
    "from": 138,
    "label": "calls",
    "to": 5
  }, {
    "from": 138,
    "label": "calls",
    "to": 138
  }, {
    "from": 142,
    "label": "calls",
    "to": 138
  }, {
    "from": 24,
    "label": "calls",
    "to": 184
  }, {
    "from": 5,
    "label": "calls",
    "to": 179
  }, {
    "from": 56,
    "label": "calls",
    "to": 179
  }, {
    "from": 58,
    "label": "calls",
    "to": 179
  }, {
    "from": 66,
    "label": "calls",
    "to": 179
  }, {
    "from": 66,
    "label": "calls",
    "to": 179
  }, {
    "from": 66,
    "label": "calls",
    "to": 179
  }, {
    "from": 66,
    "label": "calls",
    "to": 179
  }, {
    "from": 66,
    "label": "calls",
    "to": 169
  }, {
    "from": 66,
    "label": "calls",
    "to": 171
  }, {
    "from": 58,
    "label": "calls",
    "to": 66
  }, {
    "from": 134,
    "label": "calls",
    "to": 66
  }, {
    "from": 134,
    "label": "calls",
    "to": 66
  }, {
    "from": 66,
    "label": "calls",
    "to": 61
  }, {
    "from": 66,
    "label": "calls",
    "to": 61
  }, {
    "from": 66,
    "label": "calls",
    "to": 56
  }, {
    "from": 162,
    "label": "calls",
    "to": 177
  }, {
    "from": 162,
    "label": "calls",
    "to": 177
  }, {
    "from": 162,
    "label": "calls",
    "to": 177
  }, {
    "from": 162,
    "label": "calls",
    "to": 177
  }, {
    "from": 66,
    "label": "calls",
    "to": 175
  }, {
    "from": 61,
    "label": "calls",
    "to": 58
  }, {
    "from": 66,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "contains",
    "to": 162
  }, {
    "from": 162,
    "label": "declares",
    "to": 5
  }, {
    "from": 162,
    "label": "declares",
    "to": 12
  }, {
    "from": 162,
    "label": "declares",
    "to": 19
  }, {
    "from": 162,
    "label": "declares",
    "to": 24
  }, {
    "from": 162,
    "label": "declares",
    "to": 41
  }, {
    "from": 162,
    "label": "declares",
    "to": 51
  }, {
    "from": 162,
    "label": "declares",
    "to": 56
  }, {
    "from": 162,
    "label": "declares",
    "to": 58
  }, {
    "from": 162,
    "label": "declares",
    "to": 61
  }, {
    "from": 162,
    "label": "declares",
    "to": 66
  }, {
    "from": 162,
    "label": "declares",
    "to": 126
  }, {
    "from": 162,
    "label": "declares",
    "to": 128
  }, {
    "from": 162,
    "label": "declares",
    "to": 130
  }, {
    "from": 162,
    "label": "declares",
    "to": 132
  }, {
    "from": 162,
    "label": "declares",
    "to": 134
  }, {
    "from": 162,
    "label": "declares",
    "to": 138
  }, {
    "from": 162,
    "label": "declares",
    "to": 142
  }, {
    "from": 2,
    "label": "declares",
    "to": 185
  }, {
    "from": 187,
    "label": "requires",
    "to": 2
  }, {
    "from": 188,
    "label": "requires",
    "to": 2
  }, {
    "from": 189,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 190
  }, {
    "from": 2,
    "label": "contains",
    "to": 191
  }, {
    "from": 190,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 190,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 190,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 190,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 190,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 190,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 190,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 190,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 190,
    "label": "initializes",
    "to": 208
  }, {
    "from": 190,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 210,
    "label": "assigns",
    "to": 212
  }, {
    "from": 210,
    "label": "assigns",
    "to": 213
  }, {
    "from": 210,
    "label": "assigns",
    "to": 214
  }, {
    "from": 190,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 216,
    "label": "assigns",
    "to": 218
  }, {
    "from": 216,
    "label": "assigns",
    "to": 219
  }, {
    "from": 216,
    "label": "assigns",
    "to": 220
  }, {
    "from": 191,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "requires",
    "to": 4
  }, {
    "from": 191,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "requires",
    "to": 1
  }, {
    "from": 191,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "requires",
    "to": 164
  }, {
    "from": 191,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "requires",
    "to": 3
  }, {
    "from": 2,
    "label": "provides",
    "to": 225
  }, {
    "from": 206,
    "label": "represents",
    "to": 226
  }, {
    "from": 225,
    "label": "provides",
    "to": 226
  }, {
    "from": 227,
    "label": "requires",
    "to": 2
  }, {
    "from": 228,
    "label": "requires",
    "to": 2
  }, {
    "from": 229,
    "label": "requires",
    "to": 2
  }, {
    "from": 230,
    "label": "requires",
    "to": 2
  }, {
    "from": 231,
    "label": "requires",
    "to": 2
  }, {
    "from": 232,
    "label": "requires",
    "to": 2
  }, {
    "from": 206,
    "label": "contains",
    "to": 24
  }, {
    "from": 206,
    "label": "contains",
    "to": 41
  }, {
    "from": 206,
    "label": "contains",
    "to": 66
  }, {
    "from": 206,
    "label": "contains",
    "to": 134
  }, {
    "from": 206,
    "label": "contains",
    "to": 142
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lexer",
    "type": "module"
  }, {
    "id": 2,
    "text": "pretty",
    "type": "module"
  }, {
    "id": 3,
    "text": "stringx",
    "type": "module"
  }, {
    "id": 4,
    "text": "utils",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function tostring(value)\r\n    if type(value) ~= \"number\" then\r\n        return original_tostring(value)\r\n    elseif value ~= value then\r\n        return \"NaN\"\r\n    elseif value == mhuge then\r\n        return \"Inf\"\r\n    elseif value == -mhuge then\r\n        return \"-Inf\"\r\n    elseif (_VERSION ~= \"Lua 5.3\" or mtype(value) == \"integer\") and mfloor(value) == value then\r\n        return (\"%d\"):format(value)\r\n    else\r\n        local res = (\"%.14g\"):format(value)\r\n        if _VERSION == \"Lua 5.3\" and mtype(value) == \"float\" and not res:find(\"%.\") then\r\n            -- Number is internally a float but looks like an integer.\r\n            -- Insert \".0\" after first run of digits.\r\n            res = res:gsub(\"%d+\", \"%0.0\", 1)\r\n        end\r\n        return res\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if type(value) ~= \"number\" then\r\n        return original_tostring(value)\r\n    elseif value ~= value then\r\n        return \"NaN\"\r\n    elseif value == mhuge then\r\n        return \"Inf\"\r\n    elseif value == -mhuge then\r\n        return \"-Inf\"\r\n    elseif (_VERSION ~= \"Lua 5.3\" or mtype(value) == \"integer\") and mfloor(value) == value then\r\n        return (\"%d\"):format(value)\r\n    else\r\n        local res = (\"%.14g\"):format(value)\r\n        if _VERSION == \"Lua 5.3\" and mtype(value) == \"float\" and not res:find(\"%.\") then\r\n            -- Number is internally a float but looks like an integer.\r\n            -- Insert \".0\" after first run of digits.\r\n            res = res:gsub(\"%d+\", \"%0.0\", 1)\r\n        end\r\n        return res\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "local res = (\"%.14g\"):format(value)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if _VERSION == \"Lua 5.3\" and mtype(value) == \"float\" and not res:find(\"%.\") then\r\n            -- Number is internally a float but looks like an integer.\r\n            -- Insert \".0\" after first run of digits.\r\n            res = res:gsub(\"%d+\", \"%0.0\", 1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "res = res:gsub(\"%d+\", \"%0.0\", 1)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function save_global_env()\r\n    local env = {}\r\n    env.hook, env.mask, env.count = debug.gethook()\r\n    debug.sethook()\r\n    env.string_mt = getmetatable(\"\")\r\n    debug.setmetatable(\"\", nil)\r\n    return env\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local env = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "env.hook, env.mask, env.count = debug.gethook()",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "debug.sethook()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "env.string_mt = getmetatable(\"\")",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "debug.setmetatable(\"\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function restore_global_env(env)\r\n    if env then\r\n        debug.setmetatable(\"\", env.string_mt)\r\n        debug.sethook(env.hook, env.mask, env.count)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "if env then\r\n        debug.setmetatable(\"\", env.string_mt)\r\n        debug.sethook(env.hook, env.mask, env.count)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "debug.setmetatable(\"\", env.string_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "debug.sethook(env.hook, env.mask, env.count)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function pretty.read(s)\r\n    assert_arg(1,s,'string')\r\n    if s:find '^%s*%-%-' then -- may start with a comment..\r\n        s = s:gsub('%-%-.-\\n','')\r\n    end\r\n    if not s:find '^%s*{' then return nil,\"not a Lua table\" end\r\n    if s:find '[^\\'\"%w_]function[^\\'\"%w_]' then\r\n        local tok = lexer.lua(s)\r\n        for t,v in tok do\r\n            if t == 'keyword' and v == 'function' then\r\n                return nil,\"cannot have functions in table definition\"\r\n            end\r\n        end\r\n    end\r\n    s = 'return '..s\r\n    local chunk,err = utils.load(s,'tbl','t',{})\r\n    if not chunk then return nil,err end\r\n    local global_env = save_global_env()\r\n    local ok,ret = pcall(chunk)\r\n    restore_global_env(global_env)\r\n    if ok then return ret\r\n    else\r\n        return nil,ret\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "assert_arg(1,s,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "if s:find '^%s*%-%-' then -- may start with a comment..\r\n        s = s:gsub('%-%-.-\\n','')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "s = s:gsub('%-%-.-\\n','')",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if not s:find '^%s*{' then return nil,\"not a Lua table\" end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "if s:find '[^\\'\"%w_]function[^\\'\"%w_]' then\r\n        local tok = lexer.lua(s)\r\n        for t,v in tok do\r\n            if t == 'keyword' and v == 'function' then\r\n                return nil,\"cannot have functions in table definition\"\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local tok = lexer.lua(s)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for t,v in tok do\r\n            if t == 'keyword' and v == 'function' then\r\n                return nil,\"cannot have functions in table definition\"\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "if t == 'keyword' and v == 'function' then\r\n                return nil,\"cannot have functions in table definition\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "s = 'return '..s",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "local chunk,err = utils.load(s,'tbl','t',{})",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if not chunk then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "local global_env = save_global_env()",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local ok,ret = pcall(chunk)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "restore_global_env(global_env)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if ok then return ret\r\n    else\r\n        return nil,ret\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function pretty.load (s, env, paranoid)\r\n    env = env or {}\r\n    if paranoid then\r\n        local tok = lexer.lua(s)\r\n        for t,v in tok do\r\n            if t == 'keyword'\r\n                and (v == 'for' or v == 'repeat' or v == 'function' or v == 'goto')\r\n            then\r\n                return nil,\"looping not allowed\"\r\n            end\r\n        end\r\n    end\r\n    local chunk,err = utils.load(s,'tbl','t',env)\r\n    if not chunk then return nil,err end\r\n    local global_env = paranoid and save_global_env()\r\n    local ok,err = pcall(chunk)\r\n    restore_global_env(global_env)\r\n    if not ok then return nil,err end\r\n    return env\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "env = env or {}",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if paranoid then\r\n        local tok = lexer.lua(s)\r\n        for t,v in tok do\r\n            if t == 'keyword'\r\n                and (v == 'for' or v == 'repeat' or v == 'function' or v == 'goto')\r\n            then\r\n                return nil,\"looping not allowed\"\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "for t,v in tok do\r\n            if t == 'keyword'\r\n                and (v == 'for' or v == 'repeat' or v == 'function' or v == 'goto')\r\n            then\r\n                return nil,\"looping not allowed\"\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "if t == 'keyword'\r\n                and (v == 'for' or v == 'repeat' or v == 'function' or v == 'goto')\r\n            then\r\n                return nil,\"looping not allowed\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "local chunk,err = utils.load(s,'tbl','t',env)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local global_env = paranoid and save_global_env()",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local ok,err = pcall(chunk)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if not ok then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function quote_if_necessary (v)\r\n    if not v then return ''\r\n    else\r\n        --AAS\r\n        if v:find ' ' then v = quote_string(v) end\r\n    end\r\n    return v\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "if not v then return ''\r\n    else\r\n        --AAS\r\n        if v:find ' ' then v = quote_string(v) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "if v:find ' ' then v = quote_string(v) end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "v = quote_string(v)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function is_identifier (s)\r\n    return type(s) == 'string' and s:find('^[%a_][%w_]*$') and not keywords[s]\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function quote (s)\r\n    if type(s) == 'table' then\r\n        return pretty.write(s,'')\r\n    else\r\n        --AAS\r\n        return quote_string(s)-- ('%q'):format(tostring(s))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "if type(s) == 'table' then\r\n        return pretty.write(s,'')\r\n    else\r\n        --AAS\r\n        return quote_string(s)-- ('%q'):format(tostring(s))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function index (numkey,key)\r\n    --AAS\r\n    if not numkey then\r\n        key = quote(key)\r\n         key = key:find(\"^%[\") and (\" \" .. key .. \" \") or key\r\n    end\r\n    return '['..key..']'\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "if not numkey then\r\n        key = quote(key)\r\n         key = key:find(\"^%[\") and (\" \" .. key .. \" \") or key\r\n    end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "key = quote(key)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "key = key:find(\"^%[\") and (\" \" .. key .. \" \") or key",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function pretty.write (tbl,space,not_clever)\r\n    if type(tbl) ~= 'table' then\r\n        local res = tostring(tbl)\r\n        if type(tbl) == 'string' then return quote(tbl) end\r\n        return res, 'not a table'\r\n    end\r\n    if not keywords then\r\n        keywords = lexer.get_keywords()\r\n    end\r\n    local set = ' = '\r\n    if space == '' then set = '=' end\r\n    space = space or '  '\r\n    local lines = {}\r\n    local line = ''\r\n    local tables = {}\r\n\r\n\r\n    local function put(s)\r\n        if #s > 0 then\r\n            line = line..s\r\n        end\r\n    end\r\n\r\n    local function putln (s)\r\n        if #line > 0 then\r\n            line = line..s\r\n            append(lines,line)\r\n            line = ''\r\n        else\r\n            append(lines,s)\r\n        end\r\n    end\r\n\r\n    local function eat_last_comma ()\r\n        local n,lastch = #lines\r\n        local lastch = lines[n]:sub(-1,-1)\r\n        if lastch == ',' then\r\n            lines[n] = lines[n]:sub(1,-2)\r\n        end\r\n    end\r\n\r\n\r\n    local writeit\r\n    writeit = function (t,oldindent,indent)\r\n        local tp = type(t)\r\n        if tp ~= 'string' and  tp ~= 'table' then\r\n            putln(quote_if_necessary(tostring(t))..',')\r\n        elseif tp == 'string' then\r\n            -- if t:find('\\n') then\r\n            --     putln('[[\\n'..t..']],')\r\n            -- else\r\n            --     putln(quote(t)..',')\r\n            -- end\r\n            --AAS\r\n            putln(quote_string(t) ..\",\")\r\n        elseif tp == 'table' then\r\n            if tables[t] then\r\n                putln('<cycle>,')\r\n                return\r\n            end\r\n            tables[t] = true\r\n            local newindent = indent..space\r\n            putln('{')\r\n            local used = {}\r\n            if not not_clever then\r\n                for i,val in ipairs(t) do\r\n                    put(indent)\r\n                    writeit(val,indent,newindent)\r\n                    used[i] = true\r\n                end\r\n            end\r\n            for key,val in pairs(t) do\r\n                local tkey = type(key)\r\n                local numkey = tkey == 'number'\r\n                if not_clever then\r\n                    key = tostring(key)\r\n                    put(indent..index(numkey,key)..set)\r\n                    writeit(val,indent,newindent)\r\n                else\r\n                    if not numkey or not used[key] then -- non-array indices\r\n                        if tkey ~= 'string' then\r\n                            key = tostring(key)\r\n                        end\r\n                        if numkey or not is_identifier(key) then\r\n                            key = index(numkey,key)\r\n                        end\r\n                        put(indent..key..set)\r\n                        writeit(val,indent,newindent)\r\n                    end\r\n                end\r\n            end\r\n            tables[t] = nil\r\n            eat_last_comma()\r\n            putln(oldindent..'},')\r\n        else\r\n            putln(tostring(t)..',')\r\n        end\r\n    end\r\n    writeit(tbl,'',space)\r\n    eat_last_comma()\r\n    return concat(lines,#space > 0 and '\\n' or '')\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "if type(tbl) ~= 'table' then\r\n        local res = tostring(tbl)\r\n        if type(tbl) == 'string' then return quote(tbl) end\r\n        return res, 'not a table'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "local res = tostring(tbl)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if type(tbl) == 'string' then return quote(tbl) end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "if not keywords then\r\n        keywords = lexer.get_keywords()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "keywords = lexer.get_keywords()",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local set = ' = '",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if space == '' then set = '=' end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "set = '='",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "space = space or '  '",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local lines = {}",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local line = ''",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local tables = {}",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local function put(s)\r\n        if #s > 0 then\r\n            line = line..s\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 80,
    "text": "if #s > 0 then\r\n            line = line..s\r\n        end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "line = line..s",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "local function putln (s)\r\n        if #line > 0 then\r\n            line = line..s\r\n            append(lines,line)\r\n            line = ''\r\n        else\r\n            append(lines,s)\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 83,
    "text": "if #line > 0 then\r\n            line = line..s\r\n            append(lines,line)\r\n            line = ''\r\n        else\r\n            append(lines,s)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "append(lines,line)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "line = ''",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "append(lines,s)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "local function eat_last_comma ()\r\n        local n,lastch = #lines\r\n        local lastch = lines[n]:sub(-1,-1)\r\n        if lastch == ',' then\r\n            lines[n] = lines[n]:sub(1,-2)\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 88,
    "text": "local n,lastch = #lines",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local lastch = lines[n]:sub(-1,-1)",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if lastch == ',' then\r\n            lines[n] = lines[n]:sub(1,-2)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "lines[n] = lines[n]:sub(1,-2)",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local writeit",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "writeit = function (t,oldindent,indent)\r\n        local tp = type(t)\r\n        if tp ~= 'string' and  tp ~= 'table' then\r\n            putln(quote_if_necessary(tostring(t))..',')\r\n        elseif tp == 'string' then\r\n            -- if t:find('\\n') then\r\n            --     putln('[[\\n'..t..']],')\r\n            -- else\r\n            --     putln(quote(t)..',')\r\n            -- end\r\n            --AAS\r\n            putln(quote_string(t) ..\",\")\r\n        elseif tp == 'table' then\r\n            if tables[t] then\r\n                putln('<cycle>,')\r\n                return\r\n            end\r\n            tables[t] = true\r\n            local newindent = indent..space\r\n            putln('{')\r\n            local used = {}\r\n            if not not_clever then\r\n                for i,val in ipairs(t) do\r\n                    put(indent)\r\n                    writeit(val,indent,newindent)\r\n                    used[i] = true\r\n                end\r\n            end\r\n            for key,val in pairs(t) do\r\n                local tkey = type(key)\r\n                local numkey = tkey == 'number'\r\n                if not_clever then\r\n                    key = tostring(key)\r\n                    put(indent..index(numkey,key)..set)\r\n                    writeit(val,indent,newindent)\r\n                else\r\n                    if not numkey or not used[key] then -- non-array indices\r\n                        if tkey ~= 'string' then\r\n                            key = tostring(key)\r\n                        end\r\n                        if numkey or not is_identifier(key) then\r\n                            key = index(numkey,key)\r\n                        end\r\n                        put(indent..key..set)\r\n                        writeit(val,indent,newindent)\r\n                    end\r\n                end\r\n            end\r\n            tables[t] = nil\r\n            eat_last_comma()\r\n            putln(oldindent..'},')\r\n        else\r\n            putln(tostring(t)..',')\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "local tp = type(t)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if tp ~= 'string' and  tp ~= 'table' then\r\n            putln(quote_if_necessary(tostring(t))..',')\r\n        elseif tp == 'string' then\r\n            -- if t:find('\\n') then\r\n            --     putln('[[\\n'..t..']],')\r\n            -- else\r\n            --     putln(quote(t)..',')\r\n            -- end\r\n            --AAS\r\n            putln(quote_string(t) ..\",\")\r\n        elseif tp == 'table' then\r\n            if tables[t] then\r\n                putln('<cycle>,')\r\n                return\r\n            end\r\n            tables[t] = true\r\n            local newindent = indent..space\r\n            putln('{')\r\n            local used = {}\r\n            if not not_clever then\r\n                for i,val in ipairs(t) do\r\n                    put(indent)\r\n                    writeit(val,indent,newindent)\r\n                    used[i] = true\r\n                end\r\n            end\r\n            for key,val in pairs(t) do\r\n                local tkey = type(key)\r\n                local numkey = tkey == 'number'\r\n                if not_clever then\r\n                    key = tostring(key)\r\n                    put(indent..index(numkey,key)..set)\r\n                    writeit(val,indent,newindent)\r\n                else\r\n                    if not numkey or not used[key] then -- non-array indices\r\n                        if tkey ~= 'string' then\r\n                            key = tostring(key)\r\n                        end\r\n                        if numkey or not is_identifier(key) then\r\n                            key = index(numkey,key)\r\n                        end\r\n                        put(indent..key..set)\r\n                        writeit(val,indent,newindent)\r\n                    end\r\n                end\r\n            end\r\n            tables[t] = nil\r\n            eat_last_comma()\r\n            putln(oldindent..'},')\r\n        else\r\n            putln(tostring(t)..',')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "putln(quote_if_necessary(tostring(t))..',')",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "putln(quote_string(t) ..\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if tables[t] then\r\n                putln('<cycle>,')\r\n                return\r\n            end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "putln('<cycle>,')",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "tables[t] = true",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "local newindent = indent..space",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "putln('{')",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "local used = {}",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "if not not_clever then\r\n                for i,val in ipairs(t) do\r\n                    put(indent)\r\n                    writeit(val,indent,newindent)\r\n                    used[i] = true\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "for i,val in ipairs(t) do\r\n                    put(indent)\r\n                    writeit(val,indent,newindent)\r\n                    used[i] = true\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 106,
    "text": "put(indent)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "writeit(val,indent,newindent)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "used[i] = true",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "for key,val in pairs(t) do\r\n                local tkey = type(key)\r\n                local numkey = tkey == 'number'\r\n                if not_clever then\r\n                    key = tostring(key)\r\n                    put(indent..index(numkey,key)..set)\r\n                    writeit(val,indent,newindent)\r\n                else\r\n                    if not numkey or not used[key] then -- non-array indices\r\n                        if tkey ~= 'string' then\r\n                            key = tostring(key)\r\n                        end\r\n                        if numkey or not is_identifier(key) then\r\n                            key = index(numkey,key)\r\n                        end\r\n                        put(indent..key..set)\r\n                        writeit(val,indent,newindent)\r\n                    end\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "local tkey = type(key)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "local numkey = tkey == 'number'",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "if not_clever then\r\n                    key = tostring(key)\r\n                    put(indent..index(numkey,key)..set)\r\n                    writeit(val,indent,newindent)\r\n                else\r\n                    if not numkey or not used[key] then -- non-array indices\r\n                        if tkey ~= 'string' then\r\n                            key = tostring(key)\r\n                        end\r\n                        if numkey or not is_identifier(key) then\r\n                            key = index(numkey,key)\r\n                        end\r\n                        put(indent..key..set)\r\n                        writeit(val,indent,newindent)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "key = tostring(key)",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "put(indent..index(numkey,key)..set)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "if not numkey or not used[key] then -- non-array indices\r\n                        if tkey ~= 'string' then\r\n                            key = tostring(key)\r\n                        end\r\n                        if numkey or not is_identifier(key) then\r\n                            key = index(numkey,key)\r\n                        end\r\n                        put(indent..key..set)\r\n                        writeit(val,indent,newindent)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "if tkey ~= 'string' then\r\n                            key = tostring(key)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "if numkey or not is_identifier(key) then\r\n                            key = index(numkey,key)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "key = index(numkey,key)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "put(indent..key..set)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "tables[t] = nil",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "eat_last_comma()",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "putln(oldindent..'},')",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "putln(tostring(t)..',')",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "writeit(tbl,'',space)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "local function put(s)\r\n        if #s > 0 then\r\n            line = line..s\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "local function putln (s)\r\n        if #line > 0 then\r\n            line = line..s\r\n            append(lines,line)\r\n            line = ''\r\n        else\r\n            append(lines,s)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "local function eat_last_comma ()\r\n        local n,lastch = #lines\r\n        local lastch = lines[n]:sub(-1,-1)\r\n        if lastch == ',' then\r\n            lines[n] = lines[n]:sub(1,-2)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function (t,oldindent,indent)\r\n        local tp = type(t)\r\n        if tp ~= 'string' and  tp ~= 'table' then\r\n            putln(quote_if_necessary(tostring(t))..',')\r\n        elseif tp == 'string' then\r\n            -- if t:find('\\n') then\r\n            --     putln('[[\\n'..t..']],')\r\n            -- else\r\n            --     putln(quote(t)..',')\r\n            -- end\r\n            --AAS\r\n            putln(quote_string(t) ..\",\")\r\n        elseif tp == 'table' then\r\n            if tables[t] then\r\n                putln('<cycle>,')\r\n                return\r\n            end\r\n            tables[t] = true\r\n            local newindent = indent..space\r\n            putln('{')\r\n            local used = {}\r\n            if not not_clever then\r\n                for i,val in ipairs(t) do\r\n                    put(indent)\r\n                    writeit(val,indent,newindent)\r\n                    used[i] = true\r\n                end\r\n            end\r\n            for key,val in pairs(t) do\r\n                local tkey = type(key)\r\n                local numkey = tkey == 'number'\r\n                if not_clever then\r\n                    key = tostring(key)\r\n                    put(indent..index(numkey,key)..set)\r\n                    writeit(val,indent,newindent)\r\n                else\r\n                    if not numkey or not used[key] then -- non-array indices\r\n                        if tkey ~= 'string' then\r\n                            key = tostring(key)\r\n                        end\r\n                        if numkey or not is_identifier(key) then\r\n                            key = index(numkey,key)\r\n                        end\r\n                        put(indent..key..set)\r\n                        writeit(val,indent,newindent)\r\n                    end\r\n                end\r\n            end\r\n            tables[t] = nil\r\n            eat_last_comma()\r\n            putln(oldindent..'},')\r\n        else\r\n            putln(tostring(t)..',')\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function pretty.dump (t, filename)\r\n    if not filename then\r\n        print(pretty.write(t))\r\n        return true\r\n    else\r\n        return utils.writefile(filename, pretty.write(t))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "if not filename then\r\n        print(pretty.write(t))\r\n        return true\r\n    else\r\n        return utils.writefile(filename, pretty.write(t))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "print(pretty.write(t))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "local function comma (val)\r\n    local thou = math.floor(val/1000)\r\n    if thou > 0 then return comma(thou)..','.. tostring(val % 1000)\r\n    else return tostring(val) end\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "local thou = math.floor(val/1000)",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if thou > 0 then return comma(thou)..','.. tostring(val % 1000)\r\n    else return tostring(val) end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function pretty.number (num,kind,prec)\r\n    local fmt = '%.'..(prec or 1)..'f%s'\r\n    if kind == 'T' then\r\n        return comma(num)\r\n    else\r\n        local postfixes, fact\r\n        if kind == 'M' then\r\n            fact = 1024\r\n            postfixes = memp\r\n        else\r\n            fact = 1000\r\n            postfixes = nump\r\n        end\r\n        local div = fact\r\n        local k = 1\r\n        while num >= div and k <= #postfixes do\r\n            div = div * fact\r\n            k = k + 1\r\n        end\r\n        div = div / fact\r\n        if k > #postfixes then k = k - 1; div = div/fact end\r\n        if k > 1 then\r\n            return fmt:format(num/div,postfixes[k] or 'duh')\r\n        else\r\n            return num..postfixes[1]\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "local fmt = '%.'..(prec or 1)..'f%s'",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if kind == 'T' then\r\n        return comma(num)\r\n    else\r\n        local postfixes, fact\r\n        if kind == 'M' then\r\n            fact = 1024\r\n            postfixes = memp\r\n        else\r\n            fact = 1000\r\n            postfixes = nump\r\n        end\r\n        local div = fact\r\n        local k = 1\r\n        while num >= div and k <= #postfixes do\r\n            div = div * fact\r\n            k = k + 1\r\n        end\r\n        div = div / fact\r\n        if k > #postfixes then k = k - 1; div = div/fact end\r\n        if k > 1 then\r\n            return fmt:format(num/div,postfixes[k] or 'duh')\r\n        else\r\n            return num..postfixes[1]\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "local postfixes, fact",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "if kind == 'M' then\r\n            fact = 1024\r\n            postfixes = memp\r\n        else\r\n            fact = 1000\r\n            postfixes = nump\r\n        end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "fact = 1024",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "postfixes = memp",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "fact = 1000",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "postfixes = nump",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "local div = fact",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "local k = 1",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "while num >= div and k <= #postfixes do\r\n            div = div * fact\r\n            k = k + 1\r\n        end",
    "type": "statement:while"
  }, {
    "id": 154,
    "text": "div = div * fact",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "div = div / fact",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "if k > #postfixes then k = k - 1; div = div/fact end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "k = k - 1",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "div = div/fact",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "if k > 1 then\r\n            return fmt:format(num/div,postfixes[k] or 'duh')\r\n        else\r\n            return num..postfixes[1]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "",
    "type": "function container"
  }, {
    "id": 163,
    "text": "lua",
    "type": "global function"
  }, {
    "id": 164,
    "text": "debug",
    "type": "module"
  }, {
    "id": 165,
    "text": "gethook",
    "type": "global function"
  }, {
    "id": 166,
    "text": "writefile",
    "type": "global function"
  }, {
    "id": 167,
    "text": "load",
    "type": "global function"
  }, {
    "id": 168,
    "text": "sethook",
    "type": "global function"
  }, {
    "id": 169,
    "text": "get_keywords",
    "type": "global function"
  }, {
    "id": 170,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 171,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 172,
    "text": "append",
    "type": "global function"
  }, {
    "id": 173,
    "text": "print",
    "type": "global function"
  }, {
    "id": 174,
    "text": "original_tostring",
    "type": "global function"
  }, {
    "id": 175,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 176,
    "text": "quote_string",
    "type": "global function"
  }, {
    "id": 177,
    "text": "require",
    "type": "global function"
  }, {
    "id": 178,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 179,
    "text": "type",
    "type": "global function"
  }, {
    "id": 180,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 181,
    "text": "mtype",
    "type": "global function"
  }, {
    "id": 182,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 183,
    "text": "mfloor",
    "type": "global function"
  }, {
    "id": 184,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 185,
    "text": "write",
    "type": "global function"
  }, {
    "id": 186,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 187,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "variable container"
  }, {
    "id": 191,
    "text": "",
    "type": "require container"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "n/a"
  }, {
    "id": 200,
    "text": "",
    "type": "local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "n/a"
  }, {
    "id": 202,
    "text": "",
    "type": "local variable"
  }, {
    "id": 203,
    "text": "",
    "type": "n/a"
  }, {
    "id": 204,
    "text": "",
    "type": "local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "n/a"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 211,
    "text": "",
    "type": "string"
  }, {
    "id": 212,
    "text": "",
    "type": "string"
  }, {
    "id": 213,
    "text": "",
    "type": "string"
  }, {
    "id": 214,
    "text": "",
    "type": "string"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 217,
    "text": "",
    "type": "string"
  }, {
    "id": 218,
    "text": "",
    "type": "string"
  }, {
    "id": 219,
    "text": "",
    "type": "string"
  }, {
    "id": 220,
    "text": "",
    "type": "string"
  }, {
    "id": 221,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "interface container"
  }, {
    "id": 226,
    "text": "",
    "type": "interface"
  }, {
    "id": 227,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "require local variable"
  } ]
}