{
  "_filename": "xml.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/xml.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 19
  }, {
    "from": 7,
    "label": "has",
    "to": 20
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 5
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 5
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 5
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 5
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 5
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 57,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 5
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 69,
    "label": "has",
    "to": 5
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 5
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 94,
    "label": "has",
    "to": 100
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 94,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 94,
    "label": "has",
    "to": 102
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 94,
    "label": "has",
    "to": 103
  }, {
    "from": 94,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 94,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 94,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 5
  }, {
    "from": 110,
    "label": "has",
    "to": 5
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 5
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 116,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 5
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 5
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 5
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 5
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 5
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 137,
    "label": "has",
    "to": 5
  }, {
    "from": 137,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 137,
    "label": "has",
    "to": 5
  }, {
    "from": 137,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 129
  }, {
    "from": 146,
    "label": "has",
    "to": 5
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 130
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 146,
    "label": "has",
    "to": 5
  }, {
    "from": 146,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 130
  }, {
    "from": 152,
    "label": "has",
    "to": 5
  }, {
    "from": 152,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 5
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 163,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 163,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 163,
    "label": "has",
    "to": 171
  }, {
    "from": 163,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 173,
    "label": "has",
    "to": 176
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 163,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 163,
    "label": "has",
    "to": 183
  }, {
    "from": 163,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 184,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 184,
    "label": "has",
    "to": 188
  }, {
    "from": 184,
    "label": "has",
    "to": 189
  }, {
    "from": 184,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 184,
    "label": "has",
    "to": 196
  }, {
    "from": 163,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 173,
    "label": "has",
    "to": 176
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 200,
    "label": "has",
    "to": 206
  }, {
    "from": 200,
    "label": "has",
    "to": 5
  }, {
    "from": 200,
    "label": "has",
    "to": 207
  }, {
    "from": 208,
    "label": "has",
    "to": 125
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 208,
    "label": "has",
    "to": 5
  }, {
    "from": 208,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 5
  }, {
    "from": 215,
    "label": "has",
    "to": 5
  }, {
    "from": 215,
    "label": "has",
    "to": 5
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 215,
    "label": "has",
    "to": 219
  }, {
    "from": 215,
    "label": "has",
    "to": 220
  }, {
    "from": 215,
    "label": "has",
    "to": 221
  }, {
    "from": 215,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 125
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 215,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 215,
    "label": "has",
    "to": 5
  }, {
    "from": 213,
    "label": "has",
    "to": 5
  }, {
    "from": 213,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 230,
    "label": "has",
    "to": 5
  }, {
    "from": 230,
    "label": "has",
    "to": 5
  }, {
    "from": 230,
    "label": "has",
    "to": 5
  }, {
    "from": 230,
    "label": "has",
    "to": 218
  }, {
    "from": 230,
    "label": "has",
    "to": 219
  }, {
    "from": 230,
    "label": "has",
    "to": 220
  }, {
    "from": 230,
    "label": "has",
    "to": 221
  }, {
    "from": 230,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 125
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 230,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 230,
    "label": "has",
    "to": 5
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 232,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 237
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 238
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 239
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 246
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 5
  }, {
    "from": 232,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 5
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 250,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 250,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 252
  }, {
    "from": 250,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 5
  }, {
    "from": 259,
    "label": "has",
    "to": 5
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 261,
    "label": "has",
    "to": 264
  }, {
    "from": 261,
    "label": "has",
    "to": 265
  }, {
    "from": 261,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 271
  }, {
    "from": 266,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 270
  }, {
    "from": 273,
    "label": "has",
    "to": 271
  }, {
    "from": 266,
    "label": "has",
    "to": 5
  }, {
    "from": 261,
    "label": "has",
    "to": 274
  }, {
    "from": 261,
    "label": "has",
    "to": 275
  }, {
    "from": 261,
    "label": "has",
    "to": 276
  }, {
    "from": 261,
    "label": "has",
    "to": 277
  }, {
    "from": 261,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 261,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 261,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 282,
    "label": "has",
    "to": 284
  }, {
    "from": 282,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 286,
    "label": "has",
    "to": 289
  }, {
    "from": 285,
    "label": "has",
    "to": 290
  }, {
    "from": 285,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 291,
    "label": "has",
    "to": 295
  }, {
    "from": 285,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 285,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 298,
    "label": "has",
    "to": 274
  }, {
    "from": 298,
    "label": "has",
    "to": 301
  }, {
    "from": 298,
    "label": "has",
    "to": 302
  }, {
    "from": 298,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 298,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 298,
    "label": "has",
    "to": 307
  }, {
    "from": 282,
    "label": "has",
    "to": 308
  }, {
    "from": 261,
    "label": "has",
    "to": 309
  }, {
    "from": 261,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 261,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 261,
    "label": "has",
    "to": 314
  }, {
    "from": 261,
    "label": "has",
    "to": 5
  }, {
    "from": 261,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 267
  }, {
    "from": 316,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 271
  }, {
    "from": 316,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 270
  }, {
    "from": 273,
    "label": "has",
    "to": 271
  }, {
    "from": 316,
    "label": "has",
    "to": 5
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 318,
    "label": "has",
    "to": 5
  }, {
    "from": 319,
    "label": "has",
    "to": 5
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 320,
    "label": "has",
    "to": 5
  }, {
    "from": 320,
    "label": "has",
    "to": 5
  }, {
    "from": 320,
    "label": "has",
    "to": 323
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 327,
    "label": "has",
    "to": 330
  }, {
    "from": 325,
    "label": "has",
    "to": 331
  }, {
    "from": 325,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 325,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 324,
    "label": "has",
    "to": 5
  }, {
    "from": 324,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 338,
    "label": "has",
    "to": 5
  }, {
    "from": 338,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 342,
    "label": "has",
    "to": 5
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 346,
    "label": "has",
    "to": 347
  }, {
    "from": 346,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 346,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 350,
    "label": "has",
    "to": 354
  }, {
    "from": 350,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 350,
    "label": "has",
    "to": 357
  }, {
    "from": 350,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 350,
    "label": "has",
    "to": 361
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 365,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 361,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 369,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 371,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 372
  }, {
    "from": 371,
    "label": "has",
    "to": 5
  }, {
    "from": 369,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 374,
    "label": "has",
    "to": 376
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 378,
    "label": "has",
    "to": 380
  }, {
    "from": 378,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 381,
    "label": "has",
    "to": 383
  }, {
    "from": 376,
    "label": "has",
    "to": 130
  }, {
    "from": 376,
    "label": "has",
    "to": 384
  }, {
    "from": 376,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 130
  }, {
    "from": 369,
    "label": "has",
    "to": 386
  }, {
    "from": 361,
    "label": "has",
    "to": 387
  }, {
    "from": 361,
    "label": "has",
    "to": 368
  }, {
    "from": 350,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 346,
    "label": "has",
    "to": 5
  }, {
    "from": 346,
    "label": "has",
    "to": 5
  }, {
    "from": 346,
    "label": "has",
    "to": 5
  }, {
    "from": 346,
    "label": "has",
    "to": 5
  }, {
    "from": 346,
    "label": "has",
    "to": 5
  }, {
    "from": 346,
    "label": "has",
    "to": 5
  }, {
    "from": 346,
    "label": "has",
    "to": 392
  }, {
    "from": 393,
    "label": "has",
    "to": 372
  }, {
    "from": 393,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 372
  }, {
    "from": 393,
    "label": "has",
    "to": 5
  }, {
    "from": 393,
    "label": "has",
    "to": 394
  }, {
    "from": 395,
    "label": "has",
    "to": 95
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 395,
    "label": "has",
    "to": 397
  }, {
    "from": 395,
    "label": "has",
    "to": 5
  }, {
    "from": 395,
    "label": "has",
    "to": 398
  }, {
    "from": 398,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 399,
    "label": "has",
    "to": 401
  }, {
    "from": 399,
    "label": "has",
    "to": 402
  }, {
    "from": 395,
    "label": "has",
    "to": 125
  }, {
    "from": 395,
    "label": "has",
    "to": 403
  }, {
    "from": 395,
    "label": "has",
    "to": 5
  }, {
    "from": 395,
    "label": "has",
    "to": 404
  }, {
    "from": 405,
    "label": "has",
    "to": 23
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 407,
    "label": "has",
    "to": 5
  }, {
    "from": 407,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 130
  }, {
    "from": 409,
    "label": "has",
    "to": 5
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 411,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 411,
    "label": "has",
    "to": 5
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 413,
    "label": "has",
    "to": 147
  }, {
    "from": 413,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 130
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 413,
    "label": "has",
    "to": 5
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 415,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 415,
    "label": "has",
    "to": 271
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 417,
    "label": "has",
    "to": 270
  }, {
    "from": 417,
    "label": "has",
    "to": 271
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 419,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 399,
    "label": "has",
    "to": 401
  }, {
    "from": 399,
    "label": "has",
    "to": 402
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 346,
    "label": "calls",
    "to": 393
  }, {
    "from": 346,
    "label": "calls",
    "to": 393
  }, {
    "from": 163,
    "label": "calls",
    "to": 444
  }, {
    "from": 57,
    "label": "calls",
    "to": 56
  }, {
    "from": 57,
    "label": "calls",
    "to": 56
  }, {
    "from": 69,
    "label": "calls",
    "to": 56
  }, {
    "from": 79,
    "label": "calls",
    "to": 56
  }, {
    "from": 208,
    "label": "calls",
    "to": 56
  }, {
    "from": 230,
    "label": "calls",
    "to": 56
  }, {
    "from": 248,
    "label": "calls",
    "to": 56
  }, {
    "from": 261,
    "label": "calls",
    "to": 56
  }, {
    "from": 346,
    "label": "calls",
    "to": 56
  }, {
    "from": 346,
    "label": "calls",
    "to": 56
  }, {
    "from": 393,
    "label": "calls",
    "to": 56
  }, {
    "from": 395,
    "label": "calls",
    "to": 56
  }, {
    "from": 395,
    "label": "calls",
    "to": 56
  }, {
    "from": 33,
    "label": "calls",
    "to": 426
  }, {
    "from": 152,
    "label": "calls",
    "to": 426
  }, {
    "from": 261,
    "label": "calls",
    "to": 426
  }, {
    "from": 395,
    "label": "calls",
    "to": 426
  }, {
    "from": 395,
    "label": "calls",
    "to": 426
  }, {
    "from": 346,
    "label": "calls",
    "to": 342
  }, {
    "from": 90,
    "label": "calls",
    "to": 430
  }, {
    "from": 338,
    "label": "calls",
    "to": 442
  }, {
    "from": 163,
    "label": "calls",
    "to": 162
  }, {
    "from": 163,
    "label": "calls",
    "to": 162
  }, {
    "from": 163,
    "label": "calls",
    "to": 162
  }, {
    "from": 163,
    "label": "calls",
    "to": 162
  }, {
    "from": 94,
    "label": "calls",
    "to": 88
  }, {
    "from": 94,
    "label": "calls",
    "to": 88
  }, {
    "from": 163,
    "label": "calls",
    "to": 434
  }, {
    "from": 346,
    "label": "calls",
    "to": 319
  }, {
    "from": 395,
    "label": "calls",
    "to": 319
  }, {
    "from": 69,
    "label": "calls",
    "to": 443
  }, {
    "from": 261,
    "label": "calls",
    "to": 316
  }, {
    "from": 261,
    "label": "calls",
    "to": 316
  }, {
    "from": 69,
    "label": "calls",
    "to": 422
  }, {
    "from": 90,
    "label": "calls",
    "to": 422
  }, {
    "from": 94,
    "label": "calls",
    "to": 422
  }, {
    "from": 112,
    "label": "calls",
    "to": 422
  }, {
    "from": 116,
    "label": "calls",
    "to": 422
  }, {
    "from": 132,
    "label": "calls",
    "to": 422
  }, {
    "from": 163,
    "label": "calls",
    "to": 422
  }, {
    "from": 208,
    "label": "calls",
    "to": 422
  }, {
    "from": 250,
    "label": "calls",
    "to": 422
  }, {
    "from": 261,
    "label": "calls",
    "to": 423
  }, {
    "from": 261,
    "label": "calls",
    "to": 423
  }, {
    "from": 346,
    "label": "calls",
    "to": 424
  }, {
    "from": 346,
    "label": "calls",
    "to": 424
  }, {
    "from": 69,
    "label": "calls",
    "to": 57
  }, {
    "from": 94,
    "label": "calls",
    "to": 57
  }, {
    "from": 7,
    "label": "calls",
    "to": 431
  }, {
    "from": 162,
    "label": "calls",
    "to": 439
  }, {
    "from": 7,
    "label": "calls",
    "to": 425
  }, {
    "from": 94,
    "label": "calls",
    "to": 79
  }, {
    "from": 395,
    "label": "calls",
    "to": 79
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 57,
    "label": "calls",
    "to": 3
  }, {
    "from": 421,
    "label": "calls",
    "to": 429
  }, {
    "from": 56,
    "label": "calls",
    "to": 433
  }, {
    "from": 57,
    "label": "calls",
    "to": 433
  }, {
    "from": 88,
    "label": "calls",
    "to": 433
  }, {
    "from": 94,
    "label": "calls",
    "to": 433
  }, {
    "from": 116,
    "label": "calls",
    "to": 433
  }, {
    "from": 132,
    "label": "calls",
    "to": 433
  }, {
    "from": 146,
    "label": "calls",
    "to": 433
  }, {
    "from": 200,
    "label": "calls",
    "to": 433
  }, {
    "from": 230,
    "label": "calls",
    "to": 433
  }, {
    "from": 232,
    "label": "calls",
    "to": 433
  }, {
    "from": 232,
    "label": "calls",
    "to": 433
  }, {
    "from": 248,
    "label": "calls",
    "to": 433
  }, {
    "from": 319,
    "label": "calls",
    "to": 433
  }, {
    "from": 200,
    "label": "calls",
    "to": 427
  }, {
    "from": 208,
    "label": "calls",
    "to": 427
  }, {
    "from": 250,
    "label": "calls",
    "to": 432
  }, {
    "from": 250,
    "label": "calls",
    "to": 432
  }, {
    "from": 346,
    "label": "calls",
    "to": 324
  }, {
    "from": 57,
    "label": "calls",
    "to": 248
  }, {
    "from": 79,
    "label": "calls",
    "to": 248
  }, {
    "from": 250,
    "label": "calls",
    "to": 248
  }, {
    "from": 47,
    "label": "calls",
    "to": 445
  }, {
    "from": 57,
    "label": "calls",
    "to": 445
  }, {
    "from": 163,
    "label": "calls",
    "to": 445
  }, {
    "from": 230,
    "label": "calls",
    "to": 445
  }, {
    "from": 232,
    "label": "calls",
    "to": 445
  }, {
    "from": 232,
    "label": "calls",
    "to": 445
  }, {
    "from": 346,
    "label": "calls",
    "to": 445
  }, {
    "from": 116,
    "label": "calls",
    "to": 116
  }, {
    "from": 124,
    "label": "calls",
    "to": 116
  }, {
    "from": 7,
    "label": "calls",
    "to": 440
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 261,
    "label": "calls",
    "to": 446
  }, {
    "from": 261,
    "label": "calls",
    "to": 446
  }, {
    "from": 261,
    "label": "calls",
    "to": 446
  }, {
    "from": 342,
    "label": "calls",
    "to": 338
  }, {
    "from": 346,
    "label": "calls",
    "to": 338
  }, {
    "from": 346,
    "label": "calls",
    "to": 346
  }, {
    "from": 346,
    "label": "calls",
    "to": 346
  }, {
    "from": 346,
    "label": "calls",
    "to": 346
  }, {
    "from": 346,
    "label": "calls",
    "to": 346
  }, {
    "from": 395,
    "label": "calls",
    "to": 346
  }, {
    "from": 94,
    "label": "calls",
    "to": 90
  }, {
    "from": 94,
    "label": "calls",
    "to": 90
  }, {
    "from": 110,
    "label": "calls",
    "to": 213
  }, {
    "from": 200,
    "label": "calls",
    "to": 163
  }, {
    "from": 316,
    "label": "calls",
    "to": 258
  }, {
    "from": 316,
    "label": "calls",
    "to": 258
  }, {
    "from": 261,
    "label": "calls",
    "to": 258
  }, {
    "from": 261,
    "label": "calls",
    "to": 258
  }, {
    "from": 152,
    "label": "calls",
    "to": 435
  }, {
    "from": 94,
    "label": "calls",
    "to": 110
  }, {
    "from": 94,
    "label": "calls",
    "to": 110
  }, {
    "from": 163,
    "label": "calls",
    "to": 438
  }, {
    "from": 261,
    "label": "calls",
    "to": 438
  }, {
    "from": 261,
    "label": "calls",
    "to": 438
  }, {
    "from": 261,
    "label": "calls",
    "to": 438
  }, {
    "from": 261,
    "label": "calls",
    "to": 438
  }, {
    "from": 261,
    "label": "calls",
    "to": 438
  }, {
    "from": 261,
    "label": "calls",
    "to": 438
  }, {
    "from": 163,
    "label": "calls",
    "to": 198
  }, {
    "from": 163,
    "label": "calls",
    "to": 198
  }, {
    "from": 152,
    "label": "calls",
    "to": 437
  }, {
    "from": 324,
    "label": "calls",
    "to": 320
  }, {
    "from": 94,
    "label": "calls",
    "to": 441
  }, {
    "from": 318,
    "label": "calls",
    "to": 441
  }, {
    "from": 320,
    "label": "calls",
    "to": 441
  }, {
    "from": 320,
    "label": "calls",
    "to": 441
  }, {
    "from": 232,
    "label": "calls",
    "to": 232
  }, {
    "from": 324,
    "label": "calls",
    "to": 318
  }, {
    "from": 324,
    "label": "calls",
    "to": 318
  }, {
    "from": 346,
    "label": "calls",
    "to": 318
  }, {
    "from": 346,
    "label": "calls",
    "to": 318
  }, {
    "from": 230,
    "label": "calls",
    "to": 230
  }, {
    "from": 230,
    "label": "calls",
    "to": 230
  }, {
    "from": 230,
    "label": "calls",
    "to": 230
  }, {
    "from": 213,
    "label": "calls",
    "to": 230
  }, {
    "from": 3,
    "label": "calls",
    "to": 447
  }, {
    "from": 7,
    "label": "calls",
    "to": 447
  }, {
    "from": 230,
    "label": "calls",
    "to": 447
  }, {
    "from": 261,
    "label": "calls",
    "to": 447
  }, {
    "from": 261,
    "label": "calls",
    "to": 447
  }, {
    "from": 259,
    "label": "calls",
    "to": 261
  }, {
    "from": 25,
    "label": "calls",
    "to": 428
  }, {
    "from": 41,
    "label": "calls",
    "to": 428
  }, {
    "from": 57,
    "label": "calls",
    "to": 428
  }, {
    "from": 57,
    "label": "calls",
    "to": 428
  }, {
    "from": 69,
    "label": "calls",
    "to": 428
  }, {
    "from": 94,
    "label": "calls",
    "to": 428
  }, {
    "from": 116,
    "label": "calls",
    "to": 428
  }, {
    "from": 163,
    "label": "calls",
    "to": 428
  }, {
    "from": 163,
    "label": "calls",
    "to": 428
  }, {
    "from": 163,
    "label": "calls",
    "to": 428
  }, {
    "from": 163,
    "label": "calls",
    "to": 428
  }, {
    "from": 163,
    "label": "calls",
    "to": 428
  }, {
    "from": 163,
    "label": "calls",
    "to": 428
  }, {
    "from": 163,
    "label": "calls",
    "to": 428
  }, {
    "from": 208,
    "label": "calls",
    "to": 428
  }, {
    "from": 230,
    "label": "calls",
    "to": 428
  }, {
    "from": 261,
    "label": "calls",
    "to": 428
  }, {
    "from": 261,
    "label": "calls",
    "to": 428
  }, {
    "from": 261,
    "label": "calls",
    "to": 428
  }, {
    "from": 261,
    "label": "calls",
    "to": 428
  }, {
    "from": 261,
    "label": "calls",
    "to": 428
  }, {
    "from": 261,
    "label": "calls",
    "to": 428
  }, {
    "from": 324,
    "label": "calls",
    "to": 428
  }, {
    "from": 69,
    "label": "calls",
    "to": 436
  }, {
    "from": 230,
    "label": "calls",
    "to": 448
  }, {
    "from": 230,
    "label": "calls",
    "to": 449
  }, {
    "from": 7,
    "label": "calls",
    "to": 250
  }, {
    "from": 250,
    "label": "calls",
    "to": 250
  }, {
    "from": 395,
    "label": "calls",
    "to": 250
  }, {
    "from": 2,
    "label": "contains",
    "to": 421
  }, {
    "from": 421,
    "label": "declares",
    "to": 3
  }, {
    "from": 421,
    "label": "declares",
    "to": 7
  }, {
    "from": 421,
    "label": "declares",
    "to": 25
  }, {
    "from": 421,
    "label": "declares",
    "to": 30
  }, {
    "from": 421,
    "label": "declares",
    "to": 33
  }, {
    "from": 421,
    "label": "declares",
    "to": 36
  }, {
    "from": 421,
    "label": "declares",
    "to": 41
  }, {
    "from": 421,
    "label": "declares",
    "to": 44
  }, {
    "from": 421,
    "label": "declares",
    "to": 47
  }, {
    "from": 421,
    "label": "declares",
    "to": 51
  }, {
    "from": 421,
    "label": "declares",
    "to": 54
  }, {
    "from": 421,
    "label": "declares",
    "to": 56
  }, {
    "from": 421,
    "label": "declares",
    "to": 57
  }, {
    "from": 421,
    "label": "declares",
    "to": 69
  }, {
    "from": 421,
    "label": "declares",
    "to": 78
  }, {
    "from": 421,
    "label": "declares",
    "to": 79
  }, {
    "from": 421,
    "label": "declares",
    "to": 88
  }, {
    "from": 421,
    "label": "declares",
    "to": 90
  }, {
    "from": 421,
    "label": "declares",
    "to": 94
  }, {
    "from": 421,
    "label": "declares",
    "to": 110
  }, {
    "from": 421,
    "label": "declares",
    "to": 112
  }, {
    "from": 421,
    "label": "declares",
    "to": 116
  }, {
    "from": 421,
    "label": "declares",
    "to": 124
  }, {
    "from": 421,
    "label": "declares",
    "to": 128
  }, {
    "from": 421,
    "label": "declares",
    "to": 132
  }, {
    "from": 421,
    "label": "declares",
    "to": 137
  }, {
    "from": 421,
    "label": "declares",
    "to": 146
  }, {
    "from": 421,
    "label": "declares",
    "to": 152
  }, {
    "from": 421,
    "label": "declares",
    "to": 162
  }, {
    "from": 421,
    "label": "declares",
    "to": 163
  }, {
    "from": 421,
    "label": "declares",
    "to": 198
  }, {
    "from": 421,
    "label": "declares",
    "to": 200
  }, {
    "from": 421,
    "label": "declares",
    "to": 208
  }, {
    "from": 421,
    "label": "declares",
    "to": 213
  }, {
    "from": 421,
    "label": "declares",
    "to": 230
  }, {
    "from": 421,
    "label": "declares",
    "to": 232
  }, {
    "from": 421,
    "label": "declares",
    "to": 248
  }, {
    "from": 421,
    "label": "declares",
    "to": 250
  }, {
    "from": 421,
    "label": "declares",
    "to": 258
  }, {
    "from": 421,
    "label": "declares",
    "to": 259
  }, {
    "from": 421,
    "label": "declares",
    "to": 261
  }, {
    "from": 421,
    "label": "declares",
    "to": 316
  }, {
    "from": 421,
    "label": "declares",
    "to": 318
  }, {
    "from": 421,
    "label": "declares",
    "to": 319
  }, {
    "from": 421,
    "label": "declares",
    "to": 320
  }, {
    "from": 421,
    "label": "declares",
    "to": 324
  }, {
    "from": 421,
    "label": "declares",
    "to": 338
  }, {
    "from": 421,
    "label": "declares",
    "to": 342
  }, {
    "from": 421,
    "label": "declares",
    "to": 346
  }, {
    "from": 421,
    "label": "declares",
    "to": 393
  }, {
    "from": 421,
    "label": "declares",
    "to": 395
  }, {
    "from": 421,
    "label": "declares",
    "to": 405
  }, {
    "from": 421,
    "label": "declares",
    "to": 407
  }, {
    "from": 421,
    "label": "declares",
    "to": 409
  }, {
    "from": 421,
    "label": "declares",
    "to": 411
  }, {
    "from": 421,
    "label": "declares",
    "to": 413
  }, {
    "from": 421,
    "label": "declares",
    "to": 415
  }, {
    "from": 421,
    "label": "declares",
    "to": 417
  }, {
    "from": 421,
    "label": "declares",
    "to": 419
  }, {
    "from": 2,
    "label": "contains",
    "to": 450
  }, {
    "from": 2,
    "label": "contains",
    "to": 451
  }, {
    "from": 450,
    "label": "initializes",
    "to": 452
  }, {
    "from": 452,
    "label": "assigns",
    "to": 453
  }, {
    "from": 450,
    "label": "initializes",
    "to": 454
  }, {
    "from": 454,
    "label": "assigns",
    "to": 455
  }, {
    "from": 450,
    "label": "initializes",
    "to": 456
  }, {
    "from": 456,
    "label": "assigns",
    "to": 457
  }, {
    "from": 450,
    "label": "initializes",
    "to": 458
  }, {
    "from": 458,
    "label": "assigns",
    "to": 459
  }, {
    "from": 450,
    "label": "initializes",
    "to": 460
  }, {
    "from": 460,
    "label": "assigns",
    "to": 461
  }, {
    "from": 450,
    "label": "initializes",
    "to": 462
  }, {
    "from": 462,
    "label": "assigns",
    "to": 463
  }, {
    "from": 450,
    "label": "initializes",
    "to": 464
  }, {
    "from": 464,
    "label": "assigns",
    "to": 465
  }, {
    "from": 450,
    "label": "initializes",
    "to": 466
  }, {
    "from": 466,
    "label": "assigns",
    "to": 467
  }, {
    "from": 450,
    "label": "initializes",
    "to": 468
  }, {
    "from": 468,
    "label": "assigns",
    "to": 469
  }, {
    "from": 450,
    "label": "initializes",
    "to": 470
  }, {
    "from": 470,
    "label": "assigns",
    "to": 471
  }, {
    "from": 450,
    "label": "initializes",
    "to": 472
  }, {
    "from": 472,
    "label": "assigns",
    "to": 473
  }, {
    "from": 450,
    "label": "initializes",
    "to": 474
  }, {
    "from": 474,
    "label": "assigns",
    "to": 475
  }, {
    "from": 450,
    "label": "initializes",
    "to": 476
  }, {
    "from": 476,
    "label": "assigns",
    "to": 477
  }, {
    "from": 450,
    "label": "initializes",
    "to": 478
  }, {
    "from": 478,
    "label": "assigns",
    "to": 479
  }, {
    "from": 450,
    "label": "initializes",
    "to": 480
  }, {
    "from": 480,
    "label": "assigns",
    "to": 481
  }, {
    "from": 450,
    "label": "initializes",
    "to": 482
  }, {
    "from": 482,
    "label": "assigns",
    "to": 483
  }, {
    "from": 450,
    "label": "initializes",
    "to": 484
  }, {
    "from": 484,
    "label": "assigns",
    "to": 485
  }, {
    "from": 450,
    "label": "initializes",
    "to": 486
  }, {
    "from": 486,
    "label": "assigns",
    "to": 487
  }, {
    "from": 450,
    "label": "initializes",
    "to": 488
  }, {
    "from": 488,
    "label": "assigns",
    "to": 489
  }, {
    "from": 450,
    "label": "initializes",
    "to": 490
  }, {
    "from": 490,
    "label": "assigns",
    "to": 491
  }, {
    "from": 450,
    "label": "initializes",
    "to": 492
  }, {
    "from": 492,
    "label": "assigns",
    "to": 493
  }, {
    "from": 450,
    "label": "initializes",
    "to": 494
  }, {
    "from": 494,
    "label": "assigns",
    "to": 495
  }, {
    "from": 450,
    "label": "initializes",
    "to": 496
  }, {
    "from": 496,
    "label": "assigns",
    "to": 497
  }, {
    "from": 450,
    "label": "initializes",
    "to": 498
  }, {
    "from": 498,
    "label": "assigns",
    "to": 499
  }, {
    "from": 499,
    "label": "assigns",
    "to": 500
  }, {
    "from": 500,
    "label": "assigns",
    "to": 501
  }, {
    "from": 450,
    "label": "initializes",
    "to": 502
  }, {
    "from": 502,
    "label": "assigns",
    "to": 503
  }, {
    "from": 450,
    "label": "initializes",
    "to": 504
  }, {
    "from": 450,
    "label": "initializes",
    "to": 505
  }, {
    "from": 450,
    "label": "initializes",
    "to": 506
  }, {
    "from": 506,
    "label": "assigns",
    "to": 507
  }, {
    "from": 507,
    "label": "assigns",
    "to": 508
  }, {
    "from": 508,
    "label": "assigns",
    "to": 509
  }, {
    "from": 507,
    "label": "assigns",
    "to": 510
  }, {
    "from": 510,
    "label": "assigns",
    "to": 511
  }, {
    "from": 507,
    "label": "assigns",
    "to": 512
  }, {
    "from": 512,
    "label": "assigns",
    "to": 513
  }, {
    "from": 507,
    "label": "assigns",
    "to": 514
  }, {
    "from": 514,
    "label": "assigns",
    "to": 515
  }, {
    "from": 507,
    "label": "assigns",
    "to": 516
  }, {
    "from": 516,
    "label": "assigns",
    "to": 517
  }, {
    "from": 507,
    "label": "assigns",
    "to": 518
  }, {
    "from": 518,
    "label": "assigns",
    "to": 519
  }, {
    "from": 507,
    "label": "assigns",
    "to": 520
  }, {
    "from": 520,
    "label": "assigns",
    "to": 521
  }, {
    "from": 507,
    "label": "assigns",
    "to": 522
  }, {
    "from": 522,
    "label": "assigns",
    "to": 523
  }, {
    "from": 507,
    "label": "assigns",
    "to": 524
  }, {
    "from": 524,
    "label": "assigns",
    "to": 525
  }, {
    "from": 507,
    "label": "assigns",
    "to": 526
  }, {
    "from": 526,
    "label": "assigns",
    "to": 527
  }, {
    "from": 507,
    "label": "assigns",
    "to": 528
  }, {
    "from": 528,
    "label": "assigns",
    "to": 529
  }, {
    "from": 507,
    "label": "assigns",
    "to": 530
  }, {
    "from": 530,
    "label": "assigns",
    "to": 531
  }, {
    "from": 507,
    "label": "assigns",
    "to": 532
  }, {
    "from": 532,
    "label": "assigns",
    "to": 533
  }, {
    "from": 507,
    "label": "assigns",
    "to": 534
  }, {
    "from": 534,
    "label": "assigns",
    "to": 535
  }, {
    "from": 450,
    "label": "initializes",
    "to": 536
  }, {
    "from": 536,
    "label": "assigns",
    "to": 537
  }, {
    "from": 537,
    "label": "assigns",
    "to": 538
  }, {
    "from": 538,
    "label": "assigns",
    "to": 539
  }, {
    "from": 537,
    "label": "assigns",
    "to": 540
  }, {
    "from": 540,
    "label": "assigns",
    "to": 541
  }, {
    "from": 537,
    "label": "assigns",
    "to": 542
  }, {
    "from": 542,
    "label": "assigns",
    "to": 543
  }, {
    "from": 537,
    "label": "assigns",
    "to": 544
  }, {
    "from": 544,
    "label": "assigns",
    "to": 545
  }, {
    "from": 537,
    "label": "assigns",
    "to": 546
  }, {
    "from": 546,
    "label": "assigns",
    "to": 547
  }, {
    "from": 450,
    "label": "initializes",
    "to": 548
  }, {
    "from": 450,
    "label": "initializes",
    "to": 549
  }, {
    "from": 549,
    "label": "assigns",
    "to": 550
  }, {
    "from": 450,
    "label": "initializes",
    "to": 551
  }, {
    "from": 551,
    "label": "assigns",
    "to": 552
  }, {
    "from": 450,
    "label": "initializes",
    "to": 553
  }, {
    "from": 553,
    "label": "assigns",
    "to": 554
  }, {
    "from": 451,
    "label": "initializes",
    "to": 555
  }, {
    "from": 555,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 556
  }, {
    "from": 496,
    "label": "represents",
    "to": 557
  }, {
    "from": 556,
    "label": "provides",
    "to": 557
  }, {
    "from": 558,
    "label": "requires",
    "to": 2
  }, {
    "from": 496,
    "label": "contains",
    "to": 3
  }, {
    "from": 496,
    "label": "contains",
    "to": 7
  }, {
    "from": 496,
    "label": "contains",
    "to": 57
  }, {
    "from": 496,
    "label": "contains",
    "to": 69
  }, {
    "from": 496,
    "label": "contains",
    "to": 200
  }, {
    "from": 496,
    "label": "contains",
    "to": 213
  }, {
    "from": 496,
    "label": "contains",
    "to": 232
  }, {
    "from": 496,
    "label": "contains",
    "to": 248
  }, {
    "from": 496,
    "label": "contains",
    "to": 250
  }, {
    "from": 496,
    "label": "contains",
    "to": 259
  }, {
    "from": 496,
    "label": "contains",
    "to": 261
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 415
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 417
  }, {
    "from": 398,
    "label": "hasArgument",
    "to": 419
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "utils",
    "type": "module"
  }, {
    "id": 2,
    "text": "xml",
    "type": "module"
  }, {
    "id": 3,
    "text": "function _M.new(tag, attr)\r\n    local doc = { tag = tag, attr = attr or {}, last_add = {}};\r\n    return setmetatable(doc, Doc);\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local doc = { tag = tag, attr = attr or {}, last_add = {}}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function _M.parse(text_or_file, is_file, use_basic)\r\n    local parser,status,lom\r\n    if use_basic then parser = _M.basic_parse\r\n    else\r\n        status,lom = pcall(require,'lxp.lom')\r\n        if not status then parser = _M.basic_parse else parser = lom.parse end\r\n    end\r\n    if is_file then\r\n        local f,err = io.open(text_or_file)\r\n        if not f then return nil,err end\r\n        text_or_file = f:read '*a'\r\n        f:close()\r\n    end\r\n    local doc,err = parser(text_or_file)\r\n    if not doc then return nil,err end\r\n    if lom then\r\n        _M.walk(doc,false,function(_,d)\r\n            setmetatable(d,Doc)\r\n        end)\r\n    end\r\n    return doc\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local parser,status,lom",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if use_basic then parser = _M.basic_parse\r\n    else\r\n        status,lom = pcall(require,'lxp.lom')\r\n        if not status then parser = _M.basic_parse else parser = lom.parse end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "parser = _M.basic_parse",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "status,lom = pcall(require,'lxp.lom')",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if not status then parser = _M.basic_parse else parser = lom.parse end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "parser = lom.parse",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if is_file then\r\n        local f,err = io.open(text_or_file)\r\n        if not f then return nil,err end\r\n        text_or_file = f:read '*a'\r\n        f:close()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "local f,err = io.open(text_or_file)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if not f then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "text_or_file = f:read '*a'",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local doc,err = parser(text_or_file)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not doc then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "if lom then\r\n        _M.walk(doc,false,function(_,d)\r\n            setmetatable(d,Doc)\r\n        end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "_M.walk(doc,false,function(_,d)\r\n            setmetatable(d,Doc)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "setmetatable(d,Doc)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function Doc:addtag(tag, attrs)\r\n    local s = _M.new(tag, attrs);\r\n    (self.last_add[#self.last_add] or self):add_direct_child(s);\r\n    t_insert(self.last_add, s);\r\n    return self;\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local s = _M.new(tag, attrs)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "(self.last_add[#self.last_add] or self):add_direct_child(s)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "t_insert(self.last_add, s)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function Doc:text(text)\r\n    (self.last_add[#self.last_add] or self):add_direct_child(text);\r\n    return self;\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "(self.last_add[#self.last_add] or self):add_direct_child(text)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function Doc:up()\r\n    t_remove(self.last_add);\r\n    return self;\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "t_remove(self.last_add)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function Doc:reset()\r\n    local last_add = self.last_add;\r\n    for i = 1,#last_add do\r\n        last_add[i] = nil;\r\n    end\r\n    return self;\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local last_add = self.last_add",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "for i = 1,#last_add do\r\n        last_add[i] = nil;\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 39,
    "text": "last_add[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function Doc:add_direct_child(child)\r\n    t_insert(self, child);\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "t_insert(self, child)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function Doc:add_child(child)\r\n    (self.last_add[#self.last_add] or self):add_direct_child(child);\r\n    return self;\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "(self.last_add[#self.last_add] or self):add_direct_child(child)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function Doc:set_attribs (t)\r\n    for k,v in pairs(t) do\r\n        self.attr[k] = v\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "for k,v in pairs(t) do\r\n        self.attr[k] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "self.attr[k] = v",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function Doc:set_attrib(a,v)\r\n    self.attr[a] = v\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "self.attr[a] = v",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function Doc:get_attribs()\r\n    return self.attr\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function is_text(s) return type(s) == 'string' end",
    "type": "function"
  }, {
    "id": 57,
    "text": "function _M.elem(tag,items)\r\n    local s = _M.new(tag)\r\n    if is_text(items) then items = {items} end\r\n    if _M.is_tag(items) then\r\n       t_insert(s,items)\r\n    elseif type(items) == 'table' then\r\n       for k,v in pairs(items) do\r\n           if is_text(k) then\r\n               s.attr[k] = v\r\n               t_insert(s.attr,k)\r\n           else\r\n               s[k] = v\r\n           end\r\n       end\r\n    end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local s = _M.new(tag)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if is_text(items) then items = {items} end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "items = {items}",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if _M.is_tag(items) then\r\n       t_insert(s,items)\r\n    elseif type(items) == 'table' then\r\n       for k,v in pairs(items) do\r\n           if is_text(k) then\r\n               s.attr[k] = v\r\n               t_insert(s.attr,k)\r\n           else\r\n               s[k] = v\r\n           end\r\n       end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "t_insert(s,items)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "for k,v in pairs(items) do\r\n           if is_text(k) then\r\n               s.attr[k] = v\r\n               t_insert(s.attr,k)\r\n           else\r\n               s[k] = v\r\n           end\r\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 64,
    "text": "if is_text(k) then\r\n               s.attr[k] = v\r\n               t_insert(s.attr,k)\r\n           else\r\n               s[k] = v\r\n           end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "s.attr[k] = v",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "t_insert(s.attr,k)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "s[k] = v",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function _M.tags(list)\r\n    local ctors = {}\r\n    local elem = _M.elem\r\n    if is_text(list) then list = split(list,'%s*,%s*') end\r\n    for _,tag in ipairs(list) do\r\n        local ctor = function(items) return _M.elem(tag,items) end\r\n        t_insert(ctors,ctor)\r\n    end\r\n    return unpack(ctors)\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local ctors = {}",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local elem = _M.elem",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if is_text(list) then list = split(list,'%s*,%s*') end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "list = split(list,'%s*,%s*')",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "for _,tag in ipairs(list) do\r\n        local ctor = function(items) return _M.elem(tag,items) end\r\n        t_insert(ctors,ctor)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "local ctor = function(items) return _M.elem(tag,items) end",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "t_insert(ctors,ctor)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function(items) return _M.elem(tag,items) end",
    "type": "function"
  }, {
    "id": 79,
    "text": "local function template_cache (templ)\r\n    if is_text(templ) then\r\n        if templ_cache[templ] then\r\n            templ = templ_cache[templ]\r\n        else\r\n            local str,err = templ\r\n            templ,err = _M.parse(str,false,true)\r\n            if not templ then return nil,err end\r\n            templ_cache[str] = templ\r\n        end\r\n    elseif not _M.is_tag(templ) then\r\n        return nil, \"template is not a document\"\r\n    end\r\n    return templ\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "if is_text(templ) then\r\n        if templ_cache[templ] then\r\n            templ = templ_cache[templ]\r\n        else\r\n            local str,err = templ\r\n            templ,err = _M.parse(str,false,true)\r\n            if not templ then return nil,err end\r\n            templ_cache[str] = templ\r\n        end\r\n    elseif not _M.is_tag(templ) then\r\n        return nil, \"template is not a document\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "if templ_cache[templ] then\r\n            templ = templ_cache[templ]\r\n        else\r\n            local str,err = templ\r\n            templ,err = _M.parse(str,false,true)\r\n            if not templ then return nil,err end\r\n            templ_cache[str] = templ\r\n        end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "templ = templ_cache[templ]",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "local str,err = templ",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "templ,err = _M.parse(str,false,true)",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if not templ then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "templ_cache[str] = templ",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "local function is_data(data)\r\n    return #data == 0 or type(data[1]) ~= 'table'\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "local function prepare_data(data)\r\n    -- a hack for ensuring that $1 maps to first element of data, etc.\r\n    -- Either this or could change the gsub call just below.\r\n    for i,v in ipairs(data) do\r\n        data[tostring(i)] = v\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "for i,v in ipairs(data) do\r\n        data[tostring(i)] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 92,
    "text": "data[tostring(i)] = v",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function Doc.subst(templ, data)\r\n    local err\r\n    if type(data) ~= 'table' or not next(data) then return nil, \"data must be a non-empty table\" end\r\n    if is_data(data) then\r\n        prepare_data(data)\r\n    end\r\n    templ,err = template_cache(templ)\r\n    if err then return nil, err end\r\n    local function _subst(item)\r\n        return _M.clone(templ,function(s)\r\n            return s:gsub('%$(%w+)',item)\r\n        end)\r\n    end\r\n    if is_data(data) then return _subst(data) end\r\n    local list = {}\r\n    for _,item in ipairs(data) do\r\n        prepare_data(item)\r\n        t_insert(list,_subst(item))\r\n    end\r\n    if data.tag then\r\n        list = _M.elem(data.tag,list)\r\n    end\r\n    return list\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if type(data) ~= 'table' or not next(data) then return nil, \"data must be a non-empty table\" end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "if is_data(data) then\r\n        prepare_data(data)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "prepare_data(data)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "templ,err = template_cache(templ)",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "local function _subst(item)\r\n        return _M.clone(templ,function(s)\r\n            return s:gsub('%$(%w+)',item)\r\n        end)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 102,
    "text": "if is_data(data) then return _subst(data) end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "for _,item in ipairs(data) do\r\n        prepare_data(item)\r\n        t_insert(list,_subst(item))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 105,
    "text": "prepare_data(item)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "t_insert(list,_subst(item))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "if data.tag then\r\n        list = _M.elem(data.tag,list)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "list = _M.elem(data.tag,list)",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "local function _subst(item)\r\n        return _M.clone(templ,function(s)\r\n            return s:gsub('%$(%w+)',item)\r\n        end)\r\n    end",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function Doc:child_with_name(tag)\r\n    for _, child in ipairs(self) do\r\n        if child.tag == tag then return child; end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "for _, child in ipairs(self) do\r\n        if child.tag == tag then return child; end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 114,
    "text": "if child.tag == tag then return child; end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function _children_with_name(self,tag,list,recurse)\r\n    for _, child in ipairs(self) do if type(child) == 'table' then\r\n        if child.tag == tag then t_insert(list,child) end\r\n        if recurse then _children_with_name(child,tag,list,recurse) end\r\n    end end\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "for _, child in ipairs(self) do if type(child) == 'table' then\r\n        if child.tag == tag then t_insert(list,child) end\r\n        if recurse then _children_with_name(child,tag,list,recurse) end\r\n    end end",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "if type(child) == 'table' then\r\n        if child.tag == tag then t_insert(list,child) end\r\n        if recurse then _children_with_name(child,tag,list,recurse) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "if child.tag == tag then t_insert(list,child) end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "t_insert(list,child)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "if recurse then _children_with_name(child,tag,list,recurse) end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "_children_with_name(child,tag,list,recurse)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function Doc:get_elements_with_name(tag,dont_recurse)\r\n    local res = {}\r\n    _children_with_name(self,tag,res,not dont_recurse)\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "_children_with_name(self,tag,res,not dont_recurse)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function Doc:children()\r\n    local i = 0;\r\n    return function (a)\r\n            i = i + 1\r\n            return a[i];\r\n    end, self, i;\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function Doc:first_childtag()\r\n    if #self == 0 then return end\r\n    for _,t in ipairs(self) do\r\n        if type(t) == 'table' then return t end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "if #self == 0 then return end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "for _,t in ipairs(self) do\r\n        if type(t) == 'table' then return t end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 135,
    "text": "if type(t) == 'table' then return t end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function Doc:matching_tags(tag, xmlns)\r\n    xmlns = xmlns or self.attr.xmlns;\r\n    local tags = self;\r\n    local start_i, max_i, v = 1, #tags;\r\n    return function ()\r\n            for i=start_i,max_i do\r\n                v = tags[i];\r\n                if (not tag or v.tag == tag)\r\n                and (not xmlns or xmlns == v.attr.xmlns) then\r\n                    start_i = i+1;\r\n                    return v;\r\n                end\r\n            end\r\n        end, tags, start_i;\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "xmlns = xmlns or self.attr.xmlns",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "local tags = self",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "local start_i, max_i, v = 1, #tags",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "for i=start_i,max_i do\r\n                v = tags[i];\r\n                if (not tag or v.tag == tag)\r\n                and (not xmlns or xmlns == v.attr.xmlns) then\r\n                    start_i = i+1;\r\n                    return v;\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 142,
    "text": "v = tags[i]",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "if (not tag or v.tag == tag)\r\n                and (not xmlns or xmlns == v.attr.xmlns) then\r\n                    start_i = i+1;\r\n                    return v;\r\n                end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "start_i = i+1",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function Doc:childtags()\r\n    local i = 0;\r\n    return function (a)\r\n        local v\r\n            repeat\r\n                i = i + 1\r\n                v = self[i]\r\n                if v and type(v) == 'table' then return v; end\r\n            until not v\r\n        end, self[1], i;\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "local v",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "repeat\r\n                i = i + 1\r\n                v = self[i]\r\n                if v and type(v) == 'table' then return v; end\r\n            until not v",
    "type": "statement:repeat"
  }, {
    "id": 149,
    "text": "v = self[i]",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "if v and type(v) == 'table' then return v; end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function Doc:maptags(callback)\r\n    local is_tag = _M.is_tag\r\n    local i = 1;\r\n    while i <= #self do\r\n        if is_tag(self[i]) then\r\n            local ret = callback(self[i]);\r\n            if ret == nil then\r\n                t_remove(self, i);\r\n            else\r\n                self[i] = ret;\r\n                i = i + 1;\r\n            end\r\n        end\r\n    end\r\n    return self;\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "local is_tag = _M.is_tag",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "while i <= #self do\r\n        if is_tag(self[i]) then\r\n            local ret = callback(self[i]);\r\n            if ret == nil then\r\n                t_remove(self, i);\r\n            else\r\n                self[i] = ret;\r\n                i = i + 1;\r\n            end\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 156,
    "text": "if is_tag(self[i]) then\r\n            local ret = callback(self[i]);\r\n            if ret == nil then\r\n                t_remove(self, i);\r\n            else\r\n                self[i] = ret;\r\n                i = i + 1;\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "local ret = callback(self[i])",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if ret == nil then\r\n                t_remove(self, i);\r\n            else\r\n                self[i] = ret;\r\n                i = i + 1;\r\n            end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "t_remove(self, i)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "self[i] = ret",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function xml_escape(str) return (s_gsub(str, \"['&<>\\\"]\", escape_table)); end",
    "type": "function"
  }, {
    "id": 163,
    "text": "local function _dostring(t, buf, self, xml_escape, parentns, idn, indent, attr_indent)\r\n    local nsid = 0;\r\n    local tag = t.tag\r\n    local lf,alf = \"\",\" \"\r\n    if indent then lf = '\\n'..idn end\r\n    if attr_indent then alf = '\\n'..idn..attr_indent end\r\n    t_insert(buf, lf..\"<\"..tag);\r\n    local function write_attr(k,v)\r\n        if s_find(k, \"\\1\", 1, true) then\r\n            local ns, attrk = s_match(k, \"^([^\\1]*)\\1?(.*)$\");\r\n            nsid = nsid + 1;\r\n            t_insert(buf, \" xmlns:ns\"..nsid..\"='\"..xml_escape(ns)..\"' \"..\"ns\"..nsid..\":\"..attrk..\"='\"..xml_escape(v)..\"'\");\r\n        elseif not(k == \"xmlns\" and v == parentns) then\r\n            t_insert(buf, alf..k..\"='\"..xml_escape(v)..\"'\");\r\n        end\r\n    end\r\n    -- it's useful for testing to have predictable attribute ordering, if available\r\n    if #t.attr > 0 then\r\n        for _,k in ipairs(t.attr) do\r\n            write_attr(k,t.attr[k])\r\n        end\r\n    else\r\n        for k, v in pairs(t.attr) do\r\n            write_attr(k,v)\r\n        end\r\n    end\r\n    local len,has_children = #t;\r\n    if len == 0 then\r\n    local out = \"/>\"\r\n    if attr_indent then out = '\\n'..idn..out end\r\n        t_insert(buf, out);\r\n    else\r\n        t_insert(buf, \">\");\r\n        for n=1,len do\r\n            local child = t[n];\r\n            if child.tag then\r\n                self(child, buf, self, xml_escape, t.attr.xmlns,idn and idn..indent, indent, attr_indent );\r\n                has_children = true\r\n            else -- text element\r\n                t_insert(buf, xml_escape(child));\r\n            end\r\n        end\r\n        t_insert(buf, (has_children and lf or '')..\"</\"..tag..\">\");\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "local nsid = 0",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "local tag = t.tag",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "local lf,alf = \"\",\" \"",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "if indent then lf = '\\n'..idn end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "lf = '\\n'..idn",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "if attr_indent then alf = '\\n'..idn..attr_indent end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "alf = '\\n'..idn..attr_indent",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "t_insert(buf, lf..\"<\"..tag)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "local function write_attr(k,v)\r\n        if s_find(k, \"\\1\", 1, true) then\r\n            local ns, attrk = s_match(k, \"^([^\\1]*)\\1?(.*)$\");\r\n            nsid = nsid + 1;\r\n            t_insert(buf, \" xmlns:ns\"..nsid..\"='\"..xml_escape(ns)..\"' \"..\"ns\"..nsid..\":\"..attrk..\"='\"..xml_escape(v)..\"'\");\r\n        elseif not(k == \"xmlns\" and v == parentns) then\r\n            t_insert(buf, alf..k..\"='\"..xml_escape(v)..\"'\");\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 173,
    "text": "if s_find(k, \"\\1\", 1, true) then\r\n            local ns, attrk = s_match(k, \"^([^\\1]*)\\1?(.*)$\");\r\n            nsid = nsid + 1;\r\n            t_insert(buf, \" xmlns:ns\"..nsid..\"='\"..xml_escape(ns)..\"' \"..\"ns\"..nsid..\":\"..attrk..\"='\"..xml_escape(v)..\"'\");\r\n        elseif not(k == \"xmlns\" and v == parentns) then\r\n            t_insert(buf, alf..k..\"='\"..xml_escape(v)..\"'\");\r\n        end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "local ns, attrk = s_match(k, \"^([^\\1]*)\\1?(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "nsid = nsid + 1",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "t_insert(buf, \" xmlns:ns\"..nsid..\"='\"..xml_escape(ns)..\"' \"..\"ns\"..nsid..\":\"..attrk..\"='\"..xml_escape(v)..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "t_insert(buf, alf..k..\"='\"..xml_escape(v)..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "if #t.attr > 0 then\r\n        for _,k in ipairs(t.attr) do\r\n            write_attr(k,t.attr[k])\r\n        end\r\n    else\r\n        for k, v in pairs(t.attr) do\r\n            write_attr(k,v)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "for _,k in ipairs(t.attr) do\r\n            write_attr(k,t.attr[k])\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 180,
    "text": "write_attr(k,t.attr[k])",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "for k, v in pairs(t.attr) do\r\n            write_attr(k,v)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 182,
    "text": "write_attr(k,v)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "local len,has_children = #t",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "if len == 0 then\r\n    local out = \"/>\"\r\n    if attr_indent then out = '\\n'..idn..out end\r\n        t_insert(buf, out);\r\n    else\r\n        t_insert(buf, \">\");\r\n        for n=1,len do\r\n            local child = t[n];\r\n            if child.tag then\r\n                self(child, buf, self, xml_escape, t.attr.xmlns,idn and idn..indent, indent, attr_indent );\r\n                has_children = true\r\n            else -- text element\r\n                t_insert(buf, xml_escape(child));\r\n            end\r\n        end\r\n        t_insert(buf, (has_children and lf or '')..\"</\"..tag..\">\");\r\n    end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "local out = \"/>\"",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "if attr_indent then out = '\\n'..idn..out end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "out = '\\n'..idn..out",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "t_insert(buf, out)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "t_insert(buf, \">\")",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "for n=1,len do\r\n            local child = t[n];\r\n            if child.tag then\r\n                self(child, buf, self, xml_escape, t.attr.xmlns,idn and idn..indent, indent, attr_indent );\r\n                has_children = true\r\n            else -- text element\r\n                t_insert(buf, xml_escape(child));\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 191,
    "text": "local child = t[n]",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if child.tag then\r\n                self(child, buf, self, xml_escape, t.attr.xmlns,idn and idn..indent, indent, attr_indent );\r\n                has_children = true\r\n            else -- text element\r\n                t_insert(buf, xml_escape(child));\r\n            end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "self(child, buf, self, xml_escape, t.attr.xmlns,idn and idn..indent, indent, attr_indent )",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "has_children = true",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "t_insert(buf, xml_escape(child))",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "t_insert(buf, (has_children and lf or '')..\"</\"..tag..\">\")",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "local function write_attr(k,v)\r\n        if s_find(k, \"\\1\", 1, true) then\r\n            local ns, attrk = s_match(k, \"^([^\\1]*)\\1?(.*)$\");\r\n            nsid = nsid + 1;\r\n            t_insert(buf, \" xmlns:ns\"..nsid..\"='\"..xml_escape(ns)..\"' \"..\"ns\"..nsid..\":\"..attrk..\"='\"..xml_escape(v)..\"'\");\r\n        elseif not(k == \"xmlns\" and v == parentns) then\r\n            t_insert(buf, alf..k..\"='\"..xml_escape(v)..\"'\");\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "function _M.tostring(t,idn,indent, attr_indent, xml)\r\n    local buf = {};\r\n    if xml then\r\n        if type(xml) == \"string\" then\r\n            buf[1] = xml\r\n        else\r\n            buf[1] = \"<?xml version='1.0'?>\"\r\n        end\r\n    end\r\n    _dostring(t, buf, _dostring, xml_escape, nil,idn,indent, attr_indent);\r\n    return t_concat(buf);\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "local buf = {}",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if xml then\r\n        if type(xml) == \"string\" then\r\n            buf[1] = xml\r\n        else\r\n            buf[1] = \"<?xml version='1.0'?>\"\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "if type(xml) == \"string\" then\r\n            buf[1] = xml\r\n        else\r\n            buf[1] = \"<?xml version='1.0'?>\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "buf[1] = xml",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "buf[1] = \"<?xml version='1.0'?>\"",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "_dostring(t, buf, _dostring, xml_escape, nil,idn,indent, attr_indent)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 208,
    "text": "function Doc:get_text()\r\n    local res = {}\r\n    for i,el in ipairs(self) do\r\n        if is_text(el) then t_insert(res,el) end\r\n    end\r\n    return t_concat(res);\r\nend",
    "type": "function"
  }, {
    "id": 209,
    "text": "for i,el in ipairs(self) do\r\n        if is_text(el) then t_insert(res,el) end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 210,
    "text": "if is_text(el) then t_insert(res,el) end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "t_insert(res,el)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function _M.clone(doc, strsubst)\r\n    local lookup_table = {};\r\n    local function _copy(object,kind,parent)\r\n        if type(object) ~= \"table\" then\r\n            if strsubst and is_text(object) then return strsubst(object,kind,parent)\r\n            else return object\r\n            end\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {};\r\n        lookup_table[object] = new_table\r\n        local tag = object.tag\r\n        new_table.tag = _copy(tag,'*TAG',parent)\r\n        if object.attr then\r\n            local res = {}\r\n            for attr,value in pairs(object.attr) do\r\n                res[attr] = _copy(value,attr,object)\r\n            end\r\n            new_table.attr = res\r\n        end\r\n        for index = 1,#object do\r\n            local v = _copy(object[index],'*TEXT',object)\r\n            t_insert(new_table,v)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end\r\n\r\n    return _copy(doc)\r\nend",
    "type": "function"
  }, {
    "id": 214,
    "text": "local lookup_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "local function _copy(object,kind,parent)\r\n        if type(object) ~= \"table\" then\r\n            if strsubst and is_text(object) then return strsubst(object,kind,parent)\r\n            else return object\r\n            end\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {};\r\n        lookup_table[object] = new_table\r\n        local tag = object.tag\r\n        new_table.tag = _copy(tag,'*TAG',parent)\r\n        if object.attr then\r\n            local res = {}\r\n            for attr,value in pairs(object.attr) do\r\n                res[attr] = _copy(value,attr,object)\r\n            end\r\n            new_table.attr = res\r\n        end\r\n        for index = 1,#object do\r\n            local v = _copy(object[index],'*TEXT',object)\r\n            t_insert(new_table,v)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 216,
    "text": "if type(object) ~= \"table\" then\r\n            if strsubst and is_text(object) then return strsubst(object,kind,parent)\r\n            else return object\r\n            end\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "if strsubst and is_text(object) then return strsubst(object,kind,parent)\r\n            else return object\r\n            end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "local new_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "lookup_table[object] = new_table",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "local tag = object.tag",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "new_table.tag = _copy(tag,'*TAG',parent)",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "if object.attr then\r\n            local res = {}\r\n            for attr,value in pairs(object.attr) do\r\n                res[attr] = _copy(value,attr,object)\r\n            end\r\n            new_table.attr = res\r\n        end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "for attr,value in pairs(object.attr) do\r\n                res[attr] = _copy(value,attr,object)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 224,
    "text": "res[attr] = _copy(value,attr,object)",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "new_table.attr = res",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "for index = 1,#object do\r\n            local v = _copy(object[index],'*TEXT',object)\r\n            t_insert(new_table,v)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 227,
    "text": "local v = _copy(object[index],'*TEXT',object)",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "t_insert(new_table,v)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "local function _copy(object,kind,parent)\r\n        if type(object) ~= \"table\" then\r\n            if strsubst and is_text(object) then return strsubst(object,kind,parent)\r\n            else return object\r\n            end\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {};\r\n        lookup_table[object] = new_table\r\n        local tag = object.tag\r\n        new_table.tag = _copy(tag,'*TAG',parent)\r\n        if object.attr then\r\n            local res = {}\r\n            for attr,value in pairs(object.attr) do\r\n                res[attr] = _copy(value,attr,object)\r\n            end\r\n            new_table.attr = res\r\n        end\r\n        for index = 1,#object do\r\n            local v = _copy(object[index],'*TEXT',object)\r\n            t_insert(new_table,v)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end",
    "type": "function"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "function _M.compare(t1,t2)\r\n    local ty1 = type(t1)\r\n    local ty2 = type(t2)\r\n    if ty1 ~= ty2 then return false, 'type mismatch' end\r\n    if ty1 == 'string' then\r\n        return t1 == t2 and true or 'text '..t1..' ~= text '..t2\r\n    end\r\n    if ty1 ~= 'table' or ty2 ~= 'table' then return false, 'not a document' end\r\n    if t1.tag ~= t2.tag then return false, 'tag  '..t1.tag..' ~= tag '..t2.tag end\r\n    if #t1 ~= #t2 then return false, 'size '..#t1..' ~= size '..#t2..' for tag '..t1.tag end\r\n    -- compare attributes\r\n    for k,v in pairs(t1.attr) do\r\n        if t2.attr[k] ~= v then return false, 'mismatch attrib' end\r\n    end\r\n    for k,v in pairs(t2.attr) do\r\n        if t1.attr[k] ~= v then return false, 'mismatch attrib' end\r\n    end\r\n    -- compare children\r\n    for i = 1,#t1 do\r\n        local yes,err = _M.compare(t1[i],t2[i])\r\n        if not yes then return err end\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 233,
    "text": "local ty1 = type(t1)",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "local ty2 = type(t2)",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "if ty1 ~= ty2 then return false, 'type mismatch' end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "if ty1 == 'string' then\r\n        return t1 == t2 and true or 'text '..t1..' ~= text '..t2\r\n    end",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "if ty1 ~= 'table' or ty2 ~= 'table' then return false, 'not a document' end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "if t1.tag ~= t2.tag then return false, 'tag  '..t1.tag..' ~= tag '..t2.tag end",
    "type": "statement:if"
  }, {
    "id": 239,
    "text": "if #t1 ~= #t2 then return false, 'size '..#t1..' ~= size '..#t2..' for tag '..t1.tag end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "for k,v in pairs(t1.attr) do\r\n        if t2.attr[k] ~= v then return false, 'mismatch attrib' end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 241,
    "text": "if t2.attr[k] ~= v then return false, 'mismatch attrib' end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "for k,v in pairs(t2.attr) do\r\n        if t1.attr[k] ~= v then return false, 'mismatch attrib' end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 243,
    "text": "if t1.attr[k] ~= v then return false, 'mismatch attrib' end",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "for i = 1,#t1 do\r\n        local yes,err = _M.compare(t1[i],t2[i])\r\n        if not yes then return err end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 245,
    "text": "local yes,err = _M.compare(t1[i],t2[i])",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "if not yes then return err end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function _M.is_tag(d)\r\n    return type(d) == 'table' and is_text(d.tag)\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function _M.walk (doc, depth_first, operation)\r\n    if not depth_first then operation(doc.tag,doc) end\r\n    for _,d in ipairs(doc) do\r\n        if _M.is_tag(d) then\r\n            _M.walk(d,depth_first,operation)\r\n        end\r\n    end\r\n    if depth_first then operation(doc.tag,doc) end\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "if not depth_first then operation(doc.tag,doc) end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "operation(doc.tag,doc)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "for _,d in ipairs(doc) do\r\n        if _M.is_tag(d) then\r\n            _M.walk(d,depth_first,operation)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 254,
    "text": "if _M.is_tag(d) then\r\n            _M.walk(d,depth_first,operation)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "_M.walk(d,depth_first,operation)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "if depth_first then operation(doc.tag,doc) end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 258,
    "text": "local function unescape(str) return (str:gsub( \"&(%a+);\", escapes)); end",
    "type": "function"
  }, {
    "id": 259,
    "text": "function _M.parsehtml (s)\r\n    return _M.basic_parse(s,false,true)\r\nend",
    "type": "function"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "function _M.basic_parse(s,all_text,html)\r\n    local t_insert,t_remove = table.insert,table.remove\r\n    local s_find,s_sub = string.find,string.sub\r\n    local stack = {}\r\n    local top = {}\r\n\r\n    local function parseargs(s)\r\n      local arg = {}\r\n      s:gsub(\"([%w:%-_]+)%s*=%s*([\\\"'])(.-)%2\", function (w, _, a)\r\n        if html then w = w:lower() end\r\n        arg[w] = unescape(a)\r\n      end)\r\n      if html then\r\n        s:gsub(\"([%w:%-_]+)%s*=%s*([^\\\"']+)%s*\", function (w, a)\r\n          w = w:lower()\r\n          arg[w] = unescape(a)\r\n        end)\r\n      end\r\n      return arg\r\n    end\r\n\r\n    t_insert(stack, top)\r\n    local ni,c,label,xarg, empty, _, istart\r\n    local i, j = 1, 1\r\n    -- we're not interested in <?xml version=\"1.0\"?>\r\n    _,istart = s_find(s,'^%s*<%?[^%?]+%?>%s*')    \r\n    if not istart then -- or <!DOCTYPE ...>\r\n        _,istart = s_find(s,'^%s*<!DOCTYPE.->%s*')\r\n    end\r\n    if istart then i = istart+1 end\r\n    while true do\r\n        ni,j,c,label,xarg, empty = s_find(s, \"<([%/!]?)([%w:%-_]+)(.-)(%/?)>\", i)\r\n        if not ni then break end\r\n        if c == \"!\" then -- comment\r\n            -- case where there's no space inside comment\r\n            if not (label:match '%-%-$' and xarg == '') then\r\n                if xarg:match '%-%-$' then -- we've grabbed it all\r\n                    j = j - 2\r\n                end\r\n                -- match end of comment\r\n                _,j = s_find(s, \"-->\", j, true)\r\n            end\r\n        else\r\n            local text = s_sub(s, i, ni-1)\r\n            if html then\r\n                label = label:lower()\r\n                if html_empty_elements[label] then empty = \"/\" end\r\n                if label == 'script' then\r\n                end\r\n            end\r\n            if all_text or not s_find(text, \"^%s*$\") then\r\n                t_insert(top, unescape(text))\r\n            end\r\n            if empty == \"/\" then  -- empty element tag\r\n                t_insert(top, setmetatable({tag=label, attr=parseargs(xarg), empty=1},Doc))\r\n            elseif c == \"\" then   -- start tag\r\n                top = setmetatable({tag=label, attr=parseargs(xarg)},Doc)\r\n                t_insert(stack, top)   -- new level\r\n            else  -- end tag\r\n                local toclose = t_remove(stack)  -- remove top\r\n                top = stack[#stack]\r\n                if #stack < 1 then\r\n                    error(\"nothing to close with \"..label..':'..text)\r\n                end\r\n                if toclose.tag ~= label then\r\n                    error(\"trying to close \"..toclose.tag..\" with \"..label..\" \"..text)\r\n                end\r\n                t_insert(top, toclose)\r\n            end\r\n        end\r\n    i = j+1\r\n    end\r\n    local text = s_sub(s, i)\r\n    if all_text or  not s_find(text, \"^%s*$\") then\r\n        t_insert(stack[#stack], unescape(text))\r\n    end\r\n    if #stack > 1 then\r\n        error(\"unclosed \"..stack[#stack].tag)\r\n    end\r\n    local res = stack[1]\r\n    return is_text(res[1]) and res[2] or res[1]\r\nend",
    "type": "function"
  }, {
    "id": 262,
    "text": "local t_insert,t_remove = table.insert,table.remove",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "local s_find,s_sub = string.find,string.sub",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "local stack = {}",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "local top = {}",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "local function parseargs(s)\r\n      local arg = {}\r\n      s:gsub(\"([%w:%-_]+)%s*=%s*([\\\"'])(.-)%2\", function (w, _, a)\r\n        if html then w = w:lower() end\r\n        arg[w] = unescape(a)\r\n      end)\r\n      if html then\r\n        s:gsub(\"([%w:%-_]+)%s*=%s*([^\\\"']+)%s*\", function (w, a)\r\n          w = w:lower()\r\n          arg[w] = unescape(a)\r\n        end)\r\n      end\r\n      return arg\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 267,
    "text": "local arg = {}",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "s:gsub(\"([%w:%-_]+)%s*=%s*([\\\"'])(.-)%2\", function (w, _, a)\r\n        if html then w = w:lower() end\r\n        arg[w] = unescape(a)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "if html then w = w:lower() end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "w = w:lower()",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "arg[w] = unescape(a)",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "if html then\r\n        s:gsub(\"([%w:%-_]+)%s*=%s*([^\\\"']+)%s*\", function (w, a)\r\n          w = w:lower()\r\n          arg[w] = unescape(a)\r\n        end)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "s:gsub(\"([%w:%-_]+)%s*=%s*([^\\\"']+)%s*\", function (w, a)\r\n          w = w:lower()\r\n          arg[w] = unescape(a)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "t_insert(stack, top)",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "local ni,c,label,xarg, empty, _, istart",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "local i, j = 1, 1",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "_,istart = s_find(s,'^%s*<%?[^%?]+%?>%s*')",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "if not istart then -- or <!DOCTYPE ...>\r\n        _,istart = s_find(s,'^%s*<!DOCTYPE.->%s*')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "_,istart = s_find(s,'^%s*<!DOCTYPE.->%s*')",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "if istart then i = istart+1 end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "i = istart+1",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "while true do\r\n        ni,j,c,label,xarg, empty = s_find(s, \"<([%/!]?)([%w:%-_]+)(.-)(%/?)>\", i)\r\n        if not ni then break end\r\n        if c == \"!\" then -- comment\r\n            -- case where there's no space inside comment\r\n            if not (label:match '%-%-$' and xarg == '') then\r\n                if xarg:match '%-%-$' then -- we've grabbed it all\r\n                    j = j - 2\r\n                end\r\n                -- match end of comment\r\n                _,j = s_find(s, \"-->\", j, true)\r\n            end\r\n        else\r\n            local text = s_sub(s, i, ni-1)\r\n            if html then\r\n                label = label:lower()\r\n                if html_empty_elements[label] then empty = \"/\" end\r\n                if label == 'script' then\r\n                end\r\n            end\r\n            if all_text or not s_find(text, \"^%s*$\") then\r\n                t_insert(top, unescape(text))\r\n            end\r\n            if empty == \"/\" then  -- empty element tag\r\n                t_insert(top, setmetatable({tag=label, attr=parseargs(xarg), empty=1},Doc))\r\n            elseif c == \"\" then   -- start tag\r\n                top = setmetatable({tag=label, attr=parseargs(xarg)},Doc)\r\n                t_insert(stack, top)   -- new level\r\n            else  -- end tag\r\n                local toclose = t_remove(stack)  -- remove top\r\n                top = stack[#stack]\r\n                if #stack < 1 then\r\n                    error(\"nothing to close with \"..label..':'..text)\r\n                end\r\n                if toclose.tag ~= label then\r\n                    error(\"trying to close \"..toclose.tag..\" with \"..label..\" \"..text)\r\n                end\r\n                t_insert(top, toclose)\r\n            end\r\n        end\r\n    i = j+1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 283,
    "text": "ni,j,c,label,xarg, empty = s_find(s, \"<([%/!]?)([%w:%-_]+)(.-)(%/?)>\", i)",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "if not ni then break end",
    "type": "statement:if"
  }, {
    "id": 285,
    "text": "if c == \"!\" then -- comment\r\n            -- case where there's no space inside comment\r\n            if not (label:match '%-%-$' and xarg == '') then\r\n                if xarg:match '%-%-$' then -- we've grabbed it all\r\n                    j = j - 2\r\n                end\r\n                -- match end of comment\r\n                _,j = s_find(s, \"-->\", j, true)\r\n            end\r\n        else\r\n            local text = s_sub(s, i, ni-1)\r\n            if html then\r\n                label = label:lower()\r\n                if html_empty_elements[label] then empty = \"/\" end\r\n                if label == 'script' then\r\n                end\r\n            end\r\n            if all_text or not s_find(text, \"^%s*$\") then\r\n                t_insert(top, unescape(text))\r\n            end\r\n            if empty == \"/\" then  -- empty element tag\r\n                t_insert(top, setmetatable({tag=label, attr=parseargs(xarg), empty=1},Doc))\r\n            elseif c == \"\" then   -- start tag\r\n                top = setmetatable({tag=label, attr=parseargs(xarg)},Doc)\r\n                t_insert(stack, top)   -- new level\r\n            else  -- end tag\r\n                local toclose = t_remove(stack)  -- remove top\r\n                top = stack[#stack]\r\n                if #stack < 1 then\r\n                    error(\"nothing to close with \"..label..':'..text)\r\n                end\r\n                if toclose.tag ~= label then\r\n                    error(\"trying to close \"..toclose.tag..\" with \"..label..\" \"..text)\r\n                end\r\n                t_insert(top, toclose)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "if not (label:match '%-%-$' and xarg == '') then\r\n                if xarg:match '%-%-$' then -- we've grabbed it all\r\n                    j = j - 2\r\n                end\r\n                -- match end of comment\r\n                _,j = s_find(s, \"-->\", j, true)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 287,
    "text": "if xarg:match '%-%-$' then -- we've grabbed it all\r\n                    j = j - 2\r\n                end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "j = j - 2",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "_,j = s_find(s, \"-->\", j, true)",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "local text = s_sub(s, i, ni-1)",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "if html then\r\n                label = label:lower()\r\n                if html_empty_elements[label] then empty = \"/\" end\r\n                if label == 'script' then\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "label = label:lower()",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "if html_empty_elements[label] then empty = \"/\" end",
    "type": "statement:if"
  }, {
    "id": 294,
    "text": "empty = \"/\"",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "if label == 'script' then\r\n                end",
    "type": "statement:if"
  }, {
    "id": 296,
    "text": "if all_text or not s_find(text, \"^%s*$\") then\r\n                t_insert(top, unescape(text))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "t_insert(top, unescape(text))",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "if empty == \"/\" then  -- empty element tag\r\n                t_insert(top, setmetatable({tag=label, attr=parseargs(xarg), empty=1},Doc))\r\n            elseif c == \"\" then   -- start tag\r\n                top = setmetatable({tag=label, attr=parseargs(xarg)},Doc)\r\n                t_insert(stack, top)   -- new level\r\n            else  -- end tag\r\n                local toclose = t_remove(stack)  -- remove top\r\n                top = stack[#stack]\r\n                if #stack < 1 then\r\n                    error(\"nothing to close with \"..label..':'..text)\r\n                end\r\n                if toclose.tag ~= label then\r\n                    error(\"trying to close \"..toclose.tag..\" with \"..label..\" \"..text)\r\n                end\r\n                t_insert(top, toclose)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 299,
    "text": "t_insert(top, setmetatable({tag=label, attr=parseargs(xarg), empty=1},Doc))",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "top = setmetatable({tag=label, attr=parseargs(xarg)},Doc)",
    "type": "statement:assign"
  }, {
    "id": 301,
    "text": "local toclose = t_remove(stack)",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "top = stack[#stack]",
    "type": "statement:assign"
  }, {
    "id": 303,
    "text": "if #stack < 1 then\r\n                    error(\"nothing to close with \"..label..':'..text)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 304,
    "text": "error(\"nothing to close with \"..label..':'..text)",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "if toclose.tag ~= label then\r\n                    error(\"trying to close \"..toclose.tag..\" with \"..label..\" \"..text)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "error(\"trying to close \"..toclose.tag..\" with \"..label..\" \"..text)",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "t_insert(top, toclose)",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "i = j+1",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "local text = s_sub(s, i)",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "if all_text or  not s_find(text, \"^%s*$\") then\r\n        t_insert(stack[#stack], unescape(text))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "t_insert(stack[#stack], unescape(text))",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "if #stack > 1 then\r\n        error(\"unclosed \"..stack[#stack].tag)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 313,
    "text": "error(\"unclosed \"..stack[#stack].tag)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "local res = stack[1]",
    "type": "statement:localassign"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "local function parseargs(s)\r\n      local arg = {}\r\n      s:gsub(\"([%w:%-_]+)%s*=%s*([\\\"'])(.-)%2\", function (w, _, a)\r\n        if html then w = w:lower() end\r\n        arg[w] = unescape(a)\r\n      end)\r\n      if html then\r\n        s:gsub(\"([%w:%-_]+)%s*=%s*([^\\\"']+)%s*\", function (w, a)\r\n          w = w:lower()\r\n          arg[w] = unescape(a)\r\n        end)\r\n      end\r\n      return arg\r\n    end",
    "type": "function"
  }, {
    "id": 317,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 318,
    "text": "local function empty(attr) return not attr or not next(attr) end",
    "type": "function"
  }, {
    "id": 319,
    "text": "local function is_element(d) return type(d) == 'table' and d.tag ~= nil end",
    "type": "function"
  }, {
    "id": 320,
    "text": "local function has_one_element(t)\r\n    local key,value = next(t)\r\n    if next(t,key) ~= nil then return false end\r\n    return key,value\r\nend",
    "type": "function"
  }, {
    "id": 321,
    "text": "local key,value = next(t)",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "if next(t,key) ~= nil then return false end",
    "type": "statement:if"
  }, {
    "id": 323,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 324,
    "text": "local function append_capture(res,tbl)\r\n    if not empty(tbl) then -- no point in capturing empty tables...\r\n        local key\r\n        if tbl._ then  -- if $_ was set then it is meant as the top-level key for the captured table\r\n            key = tbl._\r\n            tbl._ = nil\r\n            if empty(tbl) then return end\r\n        end\r\n        -- a table with only one pair {[0]=value} shall be reduced to that value\r\n        local numkey,val = has_one_element(tbl)\r\n        if numkey == 0 then tbl = val end\r\n        if key then\r\n            res[key] = tbl\r\n        else -- otherwise, we append the captured table\r\n            t_insert(res,tbl)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 325,
    "text": "if not empty(tbl) then -- no point in capturing empty tables...\r\n        local key\r\n        if tbl._ then  -- if $_ was set then it is meant as the top-level key for the captured table\r\n            key = tbl._\r\n            tbl._ = nil\r\n            if empty(tbl) then return end\r\n        end\r\n        -- a table with only one pair {[0]=value} shall be reduced to that value\r\n        local numkey,val = has_one_element(tbl)\r\n        if numkey == 0 then tbl = val end\r\n        if key then\r\n            res[key] = tbl\r\n        else -- otherwise, we append the captured table\r\n            t_insert(res,tbl)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 326,
    "text": "local key",
    "type": "statement:localassign"
  }, {
    "id": 327,
    "text": "if tbl._ then  -- if $_ was set then it is meant as the top-level key for the captured table\r\n            key = tbl._\r\n            tbl._ = nil\r\n            if empty(tbl) then return end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 328,
    "text": "key = tbl._",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "tbl._ = nil",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "if empty(tbl) then return end",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "local numkey,val = has_one_element(tbl)",
    "type": "statement:localassign"
  }, {
    "id": 332,
    "text": "if numkey == 0 then tbl = val end",
    "type": "statement:if"
  }, {
    "id": 333,
    "text": "tbl = val",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "if key then\r\n            res[key] = tbl\r\n        else -- otherwise, we append the captured table\r\n            t_insert(res,tbl)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "res[key] = tbl",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "t_insert(res,tbl)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "local function make_number(pat)\r\n    if pat:find '^%d+$' then -- $1 etc means use this as an array location\r\n        pat = tonumber(pat)\r\n    end\r\n    return pat\r\nend",
    "type": "function"
  }, {
    "id": 339,
    "text": "if pat:find '^%d+$' then -- $1 etc means use this as an array location\r\n        pat = tonumber(pat)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 340,
    "text": "pat = tonumber(pat)",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "local function capture_attrib(res,pat,value)\r\n    pat = make_number(pat:sub(2))\r\n    res[pat] = value\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "pat = make_number(pat:sub(2))",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "res[pat] = value",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 346,
    "text": "function match(d,pat,res,keep_going)\r\n    local ret = true\r\n    if d == nil then d = '' end --return false end\r\n    -- attribute string matching is straight equality, except if the pattern is a $ capture,\r\n    -- which always succeeds.\r\n    if is_text(d) then\r\n        if not is_text(pat) then return false end\r\n        if _M.debug then print(d,pat) end\r\n        if pat:find '^%$' then\r\n            return capture_attrib(res,pat,d)\r\n        else\r\n            return d == pat\r\n        end\r\n    else\r\n    if _M.debug then print(d.tag,pat.tag) end\r\n        -- this is an element node. For a match to succeed, the attributes must\r\n        -- match as well.\r\n        -- a tagname in the pattern ending with '-' is a wildcard and matches like an attribute\r\n        local tagpat = pat.tag:match '^(.-)%-$'\r\n        if tagpat then\r\n            tagpat = make_number(tagpat)\r\n            res[tagpat] = d.tag\r\n        end\r\n        if d.tag == pat.tag or tagpat then\r\n\r\n            if not empty(pat.attr) then\r\n                if empty(d.attr) then ret =  false\r\n                else\r\n                    for prop,pval in pairs(pat.attr) do\r\n                        local dval = d.attr[prop]\r\n                        if not match(dval,pval,res) then ret = false;  break end\r\n                    end\r\n                end\r\n            end\r\n            -- the pattern may have child nodes. We match partially, so that {P1,P2} shall match {X,P1,X,X,P2,..}\r\n            if ret and #pat > 0 then\r\n                local i,j = 1,1\r\n                local function next_elem()\r\n                    j = j + 1  -- next child element of data\r\n                    if is_text(d[j]) then j = j + 1 end\r\n                    return j <= #d\r\n                end\r\n                repeat\r\n                    local p = pat[i]\r\n                    -- repeated {{<...>}} patterns  shall match one or more elements\r\n                    -- so e.g. {P+} will match {X,X,P,P,X,P,X,X,X}\r\n                    if is_element(p) and p.repeated then\r\n                        local found\r\n                        repeat\r\n                            local tbl = {}\r\n                            ret = match(d[j],p,tbl,false)\r\n                            if ret then\r\n                                found = false --true\r\n                                append_capture(res,tbl)\r\n                            end\r\n                        until not next_elem() or (found and not ret)\r\n                        i = i + 1\r\n                    else\r\n                        ret = match(d[j],p,res,false)\r\n                        if ret then i = i + 1 end\r\n                    end\r\n                until not next_elem() or i > #pat -- run out of elements or patterns to match\r\n                -- if every element in our pattern matched ok, then it's been a successful match\r\n                if i > #pat then return true end\r\n            end\r\n            if ret then return true end\r\n        else\r\n            ret = false\r\n        end\r\n        -- keep going anyway - look at the children!\r\n        if keep_going then\r\n            for child in d:childtags() do\r\n                ret = match(child,pat,res,keep_going)\r\n                if ret then break end\r\n            end\r\n        end\r\n    end\r\n    return ret\r\nend",
    "type": "function"
  }, {
    "id": 347,
    "text": "local ret = true",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "if d == nil then d = '' end",
    "type": "statement:if"
  }, {
    "id": 349,
    "text": "d = ''",
    "type": "statement:assign"
  }, {
    "id": 350,
    "text": "if is_text(d) then\r\n        if not is_text(pat) then return false end\r\n        if _M.debug then print(d,pat) end\r\n        if pat:find '^%$' then\r\n            return capture_attrib(res,pat,d)\r\n        else\r\n            return d == pat\r\n        end\r\n    else\r\n    if _M.debug then print(d.tag,pat.tag) end\r\n        -- this is an element node. For a match to succeed, the attributes must\r\n        -- match as well.\r\n        -- a tagname in the pattern ending with '-' is a wildcard and matches like an attribute\r\n        local tagpat = pat.tag:match '^(.-)%-$'\r\n        if tagpat then\r\n            tagpat = make_number(tagpat)\r\n            res[tagpat] = d.tag\r\n        end\r\n        if d.tag == pat.tag or tagpat then\r\n\r\n            if not empty(pat.attr) then\r\n                if empty(d.attr) then ret =  false\r\n                else\r\n                    for prop,pval in pairs(pat.attr) do\r\n                        local dval = d.attr[prop]\r\n                        if not match(dval,pval,res) then ret = false;  break end\r\n                    end\r\n                end\r\n            end\r\n            -- the pattern may have child nodes. We match partially, so that {P1,P2} shall match {X,P1,X,X,P2,..}\r\n            if ret and #pat > 0 then\r\n                local i,j = 1,1\r\n                local function next_elem()\r\n                    j = j + 1  -- next child element of data\r\n                    if is_text(d[j]) then j = j + 1 end\r\n                    return j <= #d\r\n                end\r\n                repeat\r\n                    local p = pat[i]\r\n                    -- repeated {{<...>}} patterns  shall match one or more elements\r\n                    -- so e.g. {P+} will match {X,X,P,P,X,P,X,X,X}\r\n                    if is_element(p) and p.repeated then\r\n                        local found\r\n                        repeat\r\n                            local tbl = {}\r\n                            ret = match(d[j],p,tbl,false)\r\n                            if ret then\r\n                                found = false --true\r\n                                append_capture(res,tbl)\r\n                            end\r\n                        until not next_elem() or (found and not ret)\r\n                        i = i + 1\r\n                    else\r\n                        ret = match(d[j],p,res,false)\r\n                        if ret then i = i + 1 end\r\n                    end\r\n                until not next_elem() or i > #pat -- run out of elements or patterns to match\r\n                -- if every element in our pattern matched ok, then it's been a successful match\r\n                if i > #pat then return true end\r\n            end\r\n            if ret then return true end\r\n        else\r\n            ret = false\r\n        end\r\n        -- keep going anyway - look at the children!\r\n        if keep_going then\r\n            for child in d:childtags() do\r\n                ret = match(child,pat,res,keep_going)\r\n                if ret then break end\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 351,
    "text": "if not is_text(pat) then return false end",
    "type": "statement:if"
  }, {
    "id": 352,
    "text": "if _M.debug then print(d,pat) end",
    "type": "statement:if"
  }, {
    "id": 353,
    "text": "print(d,pat)",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "if pat:find '^%$' then\r\n            return capture_attrib(res,pat,d)\r\n        else\r\n            return d == pat\r\n        end",
    "type": "statement:if"
  }, {
    "id": 355,
    "text": "if _M.debug then print(d.tag,pat.tag) end",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "print(d.tag,pat.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "local tagpat = pat.tag:match '^(.-)%-$'",
    "type": "statement:localassign"
  }, {
    "id": 358,
    "text": "if tagpat then\r\n            tagpat = make_number(tagpat)\r\n            res[tagpat] = d.tag\r\n        end",
    "type": "statement:if"
  }, {
    "id": 359,
    "text": "tagpat = make_number(tagpat)",
    "type": "statement:assign"
  }, {
    "id": 360,
    "text": "res[tagpat] = d.tag",
    "type": "statement:assign"
  }, {
    "id": 361,
    "text": "if d.tag == pat.tag or tagpat then\r\n\r\n            if not empty(pat.attr) then\r\n                if empty(d.attr) then ret =  false\r\n                else\r\n                    for prop,pval in pairs(pat.attr) do\r\n                        local dval = d.attr[prop]\r\n                        if not match(dval,pval,res) then ret = false;  break end\r\n                    end\r\n                end\r\n            end\r\n            -- the pattern may have child nodes. We match partially, so that {P1,P2} shall match {X,P1,X,X,P2,..}\r\n            if ret and #pat > 0 then\r\n                local i,j = 1,1\r\n                local function next_elem()\r\n                    j = j + 1  -- next child element of data\r\n                    if is_text(d[j]) then j = j + 1 end\r\n                    return j <= #d\r\n                end\r\n                repeat\r\n                    local p = pat[i]\r\n                    -- repeated {{<...>}} patterns  shall match one or more elements\r\n                    -- so e.g. {P+} will match {X,X,P,P,X,P,X,X,X}\r\n                    if is_element(p) and p.repeated then\r\n                        local found\r\n                        repeat\r\n                            local tbl = {}\r\n                            ret = match(d[j],p,tbl,false)\r\n                            if ret then\r\n                                found = false --true\r\n                                append_capture(res,tbl)\r\n                            end\r\n                        until not next_elem() or (found and not ret)\r\n                        i = i + 1\r\n                    else\r\n                        ret = match(d[j],p,res,false)\r\n                        if ret then i = i + 1 end\r\n                    end\r\n                until not next_elem() or i > #pat -- run out of elements or patterns to match\r\n                -- if every element in our pattern matched ok, then it's been a successful match\r\n                if i > #pat then return true end\r\n            end\r\n            if ret then return true end\r\n        else\r\n            ret = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 362,
    "text": "if not empty(pat.attr) then\r\n                if empty(d.attr) then ret =  false\r\n                else\r\n                    for prop,pval in pairs(pat.attr) do\r\n                        local dval = d.attr[prop]\r\n                        if not match(dval,pval,res) then ret = false;  break end\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 363,
    "text": "if empty(d.attr) then ret =  false\r\n                else\r\n                    for prop,pval in pairs(pat.attr) do\r\n                        local dval = d.attr[prop]\r\n                        if not match(dval,pval,res) then ret = false;  break end\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 364,
    "text": "ret =  false",
    "type": "statement:assign"
  }, {
    "id": 365,
    "text": "for prop,pval in pairs(pat.attr) do\r\n                        local dval = d.attr[prop]\r\n                        if not match(dval,pval,res) then ret = false;  break end\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 366,
    "text": "local dval = d.attr[prop]",
    "type": "statement:localassign"
  }, {
    "id": 367,
    "text": "if not match(dval,pval,res) then ret = false;  break end",
    "type": "statement:if"
  }, {
    "id": 368,
    "text": "ret = false",
    "type": "statement:assign"
  }, {
    "id": 369,
    "text": "if ret and #pat > 0 then\r\n                local i,j = 1,1\r\n                local function next_elem()\r\n                    j = j + 1  -- next child element of data\r\n                    if is_text(d[j]) then j = j + 1 end\r\n                    return j <= #d\r\n                end\r\n                repeat\r\n                    local p = pat[i]\r\n                    -- repeated {{<...>}} patterns  shall match one or more elements\r\n                    -- so e.g. {P+} will match {X,X,P,P,X,P,X,X,X}\r\n                    if is_element(p) and p.repeated then\r\n                        local found\r\n                        repeat\r\n                            local tbl = {}\r\n                            ret = match(d[j],p,tbl,false)\r\n                            if ret then\r\n                                found = false --true\r\n                                append_capture(res,tbl)\r\n                            end\r\n                        until not next_elem() or (found and not ret)\r\n                        i = i + 1\r\n                    else\r\n                        ret = match(d[j],p,res,false)\r\n                        if ret then i = i + 1 end\r\n                    end\r\n                until not next_elem() or i > #pat -- run out of elements or patterns to match\r\n                -- if every element in our pattern matched ok, then it's been a successful match\r\n                if i > #pat then return true end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 370,
    "text": "local i,j = 1,1",
    "type": "statement:localassign"
  }, {
    "id": 371,
    "text": "local function next_elem()\r\n                    j = j + 1  -- next child element of data\r\n                    if is_text(d[j]) then j = j + 1 end\r\n                    return j <= #d\r\n                end",
    "type": "statement:localfunction"
  }, {
    "id": 372,
    "text": "j = j + 1",
    "type": "statement:assign"
  }, {
    "id": 373,
    "text": "if is_text(d[j]) then j = j + 1 end",
    "type": "statement:if"
  }, {
    "id": 374,
    "text": "repeat\r\n                    local p = pat[i]\r\n                    -- repeated {{<...>}} patterns  shall match one or more elements\r\n                    -- so e.g. {P+} will match {X,X,P,P,X,P,X,X,X}\r\n                    if is_element(p) and p.repeated then\r\n                        local found\r\n                        repeat\r\n                            local tbl = {}\r\n                            ret = match(d[j],p,tbl,false)\r\n                            if ret then\r\n                                found = false --true\r\n                                append_capture(res,tbl)\r\n                            end\r\n                        until not next_elem() or (found and not ret)\r\n                        i = i + 1\r\n                    else\r\n                        ret = match(d[j],p,res,false)\r\n                        if ret then i = i + 1 end\r\n                    end\r\n                until not next_elem() or i > #pat",
    "type": "statement:repeat"
  }, {
    "id": 375,
    "text": "local p = pat[i]",
    "type": "statement:localassign"
  }, {
    "id": 376,
    "text": "if is_element(p) and p.repeated then\r\n                        local found\r\n                        repeat\r\n                            local tbl = {}\r\n                            ret = match(d[j],p,tbl,false)\r\n                            if ret then\r\n                                found = false --true\r\n                                append_capture(res,tbl)\r\n                            end\r\n                        until not next_elem() or (found and not ret)\r\n                        i = i + 1\r\n                    else\r\n                        ret = match(d[j],p,res,false)\r\n                        if ret then i = i + 1 end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 377,
    "text": "local found",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "repeat\r\n                            local tbl = {}\r\n                            ret = match(d[j],p,tbl,false)\r\n                            if ret then\r\n                                found = false --true\r\n                                append_capture(res,tbl)\r\n                            end\r\n                        until not next_elem() or (found and not ret)",
    "type": "statement:repeat"
  }, {
    "id": 379,
    "text": "local tbl = {}",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "ret = match(d[j],p,tbl,false)",
    "type": "statement:assign"
  }, {
    "id": 381,
    "text": "if ret then\r\n                                found = false --true\r\n                                append_capture(res,tbl)\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 382,
    "text": "found = false",
    "type": "statement:assign"
  }, {
    "id": 383,
    "text": "append_capture(res,tbl)",
    "type": "statement:functioncall"
  }, {
    "id": 384,
    "text": "ret = match(d[j],p,res,false)",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "if ret then i = i + 1 end",
    "type": "statement:if"
  }, {
    "id": 386,
    "text": "if i > #pat then return true end",
    "type": "statement:if"
  }, {
    "id": 387,
    "text": "if ret then return true end",
    "type": "statement:if"
  }, {
    "id": 388,
    "text": "if keep_going then\r\n            for child in d:childtags() do\r\n                ret = match(child,pat,res,keep_going)\r\n                if ret then break end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 389,
    "text": "for child in d:childtags() do\r\n                ret = match(child,pat,res,keep_going)\r\n                if ret then break end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 390,
    "text": "ret = match(child,pat,res,keep_going)",
    "type": "statement:assign"
  }, {
    "id": 391,
    "text": "if ret then break end",
    "type": "statement:if"
  }, {
    "id": 392,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 393,
    "text": "local function next_elem()\r\n                    j = j + 1  -- next child element of data\r\n                    if is_text(d[j]) then j = j + 1 end\r\n                    return j <= #d\r\n                end",
    "type": "function"
  }, {
    "id": 394,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 395,
    "text": "function Doc:match(pat)\r\n    local err\r\n    pat,err = template_cache(pat)\r\n    if not pat then return nil, err end\r\n    _M.walk(pat,false,function(_,d)\r\n        if is_text(d[1]) and is_element(d[2]) and is_text(d[3]) and\r\n           d[1]:find '%s*{{' and d[3]:find '}}%s*' then\r\n           t_remove(d,1)\r\n           t_remove(d,2)\r\n           d[1].repeated = true\r\n        end\r\n    end)\r\n\r\n    local res = {}\r\n    local ret = match(self,pat,res,true)\r\n    return res,ret\r\nend",
    "type": "function"
  }, {
    "id": 396,
    "text": "pat,err = template_cache(pat)",
    "type": "statement:assign"
  }, {
    "id": 397,
    "text": "if not pat then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 398,
    "text": "_M.walk(pat,false,function(_,d)\r\n        if is_text(d[1]) and is_element(d[2]) and is_text(d[3]) and\r\n           d[1]:find '%s*{{' and d[3]:find '}}%s*' then\r\n           t_remove(d,1)\r\n           t_remove(d,2)\r\n           d[1].repeated = true\r\n        end\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "if is_text(d[1]) and is_element(d[2]) and is_text(d[3]) and\r\n           d[1]:find '%s*{{' and d[3]:find '}}%s*' then\r\n           t_remove(d,1)\r\n           t_remove(d,2)\r\n           d[1].repeated = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 400,
    "text": "t_remove(d,1)",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "t_remove(d,2)",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "d[1].repeated = true",
    "type": "statement:assign"
  }, {
    "id": 403,
    "text": "local ret = match(self,pat,res,true)",
    "type": "statement:localassign"
  }, {
    "id": 404,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 405,
    "text": "function(_,d)\r\n            setmetatable(d,Doc)\r\n        end",
    "type": "function"
  }, {
    "id": 406,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 407,
    "text": "function(s)\r\n            return s:gsub('%$(%w+)',item)\r\n        end",
    "type": "function"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "function (a)\r\n            i = i + 1\r\n            return a[i];\r\n    end",
    "type": "function"
  }, {
    "id": 410,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 411,
    "text": "function ()\r\n            for i=start_i,max_i do\r\n                v = tags[i];\r\n                if (not tag or v.tag == tag)\r\n                and (not xmlns or xmlns == v.attr.xmlns) then\r\n                    start_i = i+1;\r\n                    return v;\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 412,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 413,
    "text": "function (a)\r\n        local v\r\n            repeat\r\n                i = i + 1\r\n                v = self[i]\r\n                if v and type(v) == 'table' then return v; end\r\n            until not v\r\n        end",
    "type": "function"
  }, {
    "id": 414,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 415,
    "text": "function (w, _, a)\r\n        if html then w = w:lower() end\r\n        arg[w] = unescape(a)\r\n      end",
    "type": "function"
  }, {
    "id": 416,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 417,
    "text": "function (w, a)\r\n          w = w:lower()\r\n          arg[w] = unescape(a)\r\n        end",
    "type": "function"
  }, {
    "id": 418,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 419,
    "text": "function(_,d)\r\n        if is_text(d[1]) and is_element(d[2]) and is_text(d[3]) and\r\n           d[1]:find '%s*{{' and d[3]:find '}}%s*' then\r\n           t_remove(d,1)\r\n           t_remove(d,2)\r\n           d[1].repeated = true\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 420,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 421,
    "text": "",
    "type": "function container"
  }, {
    "id": 422,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 423,
    "text": "s_sub",
    "type": "global function"
  }, {
    "id": 424,
    "text": "print",
    "type": "global function"
  }, {
    "id": 425,
    "text": "parser",
    "type": "global function"
  }, {
    "id": 426,
    "text": "t_remove",
    "type": "global function"
  }, {
    "id": 427,
    "text": "t_concat",
    "type": "global function"
  }, {
    "id": 428,
    "text": "t_insert",
    "type": "global function"
  }, {
    "id": 429,
    "text": "require",
    "type": "global function"
  }, {
    "id": 430,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 431,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 432,
    "text": "operation",
    "type": "global function"
  }, {
    "id": 433,
    "text": "type",
    "type": "global function"
  }, {
    "id": 434,
    "text": "s_match",
    "type": "global function"
  }, {
    "id": 435,
    "text": "callback",
    "type": "global function"
  }, {
    "id": 436,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 437,
    "text": "is_tag",
    "type": "global function"
  }, {
    "id": 438,
    "text": "s_find",
    "type": "global function"
  }, {
    "id": 439,
    "text": "s_gsub",
    "type": "global function"
  }, {
    "id": 440,
    "text": "open",
    "type": "global function"
  }, {
    "id": 441,
    "text": "next",
    "type": "global function"
  }, {
    "id": 442,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 443,
    "text": "split",
    "type": "global function"
  }, {
    "id": 444,
    "text": "self",
    "type": "global function"
  }, {
    "id": 445,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 446,
    "text": "error",
    "type": "global function"
  }, {
    "id": 447,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 448,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 449,
    "text": "strsubst",
    "type": "global function"
  }, {
    "id": 450,
    "text": "",
    "type": "variable container"
  }, {
    "id": 451,
    "text": "",
    "type": "require container"
  }, {
    "id": 452,
    "text": "",
    "type": "local variable"
  }, {
    "id": 453,
    "text": "",
    "type": "n/a"
  }, {
    "id": 454,
    "text": "",
    "type": "local variable"
  }, {
    "id": 455,
    "text": "",
    "type": "n/a"
  }, {
    "id": 456,
    "text": "",
    "type": "local variable"
  }, {
    "id": 457,
    "text": "",
    "type": "n/a"
  }, {
    "id": 458,
    "text": "",
    "type": "local variable"
  }, {
    "id": 459,
    "text": "",
    "type": "n/a"
  }, {
    "id": 460,
    "text": "",
    "type": "local variable"
  }, {
    "id": 461,
    "text": "",
    "type": "n/a"
  }, {
    "id": 462,
    "text": "",
    "type": "local variable"
  }, {
    "id": 463,
    "text": "",
    "type": "n/a"
  }, {
    "id": 464,
    "text": "",
    "type": "local variable"
  }, {
    "id": 465,
    "text": "",
    "type": "n/a"
  }, {
    "id": 466,
    "text": "",
    "type": "local variable"
  }, {
    "id": 467,
    "text": "",
    "type": "n/a"
  }, {
    "id": 468,
    "text": "",
    "type": "local variable"
  }, {
    "id": 469,
    "text": "",
    "type": "n/a"
  }, {
    "id": 470,
    "text": "",
    "type": "local variable"
  }, {
    "id": 471,
    "text": "",
    "type": "n/a"
  }, {
    "id": 472,
    "text": "",
    "type": "local variable"
  }, {
    "id": 473,
    "text": "",
    "type": "n/a"
  }, {
    "id": 474,
    "text": "",
    "type": "local variable"
  }, {
    "id": 475,
    "text": "",
    "type": "n/a"
  }, {
    "id": 476,
    "text": "",
    "type": "local variable"
  }, {
    "id": 477,
    "text": "",
    "type": "n/a"
  }, {
    "id": 478,
    "text": "",
    "type": "local variable"
  }, {
    "id": 479,
    "text": "",
    "type": "n/a"
  }, {
    "id": 480,
    "text": "",
    "type": "local variable"
  }, {
    "id": 481,
    "text": "",
    "type": "n/a"
  }, {
    "id": 482,
    "text": "",
    "type": "local variable"
  }, {
    "id": 483,
    "text": "",
    "type": "n/a"
  }, {
    "id": 484,
    "text": "",
    "type": "local variable"
  }, {
    "id": 485,
    "text": "",
    "type": "n/a"
  }, {
    "id": 486,
    "text": "",
    "type": "local variable"
  }, {
    "id": 487,
    "text": "",
    "type": "n/a"
  }, {
    "id": 488,
    "text": "",
    "type": "local variable"
  }, {
    "id": 489,
    "text": "",
    "type": "n/a"
  }, {
    "id": 490,
    "text": "",
    "type": "local variable"
  }, {
    "id": 491,
    "text": "",
    "type": "n/a"
  }, {
    "id": 492,
    "text": "",
    "type": "local variable"
  }, {
    "id": 493,
    "text": "",
    "type": "n/a"
  }, {
    "id": 494,
    "text": "",
    "type": "local variable"
  }, {
    "id": 495,
    "text": "",
    "type": "n/a"
  }, {
    "id": 496,
    "text": "",
    "type": "local variable"
  }, {
    "id": 497,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 498,
    "text": "",
    "type": "local variable"
  }, {
    "id": 499,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 500,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 501,
    "text": "",
    "type": "string"
  }, {
    "id": 502,
    "text": "",
    "type": "local variable"
  }, {
    "id": 503,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 504,
    "text": "",
    "type": "local variable"
  }, {
    "id": 505,
    "text": "",
    "type": "local variable"
  }, {
    "id": 506,
    "text": "",
    "type": "local variable"
  }, {
    "id": 507,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 508,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 509,
    "text": "",
    "type": "boolean"
  }, {
    "id": 510,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 511,
    "text": "",
    "type": "boolean"
  }, {
    "id": 512,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 513,
    "text": "",
    "type": "boolean"
  }, {
    "id": 514,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 515,
    "text": "",
    "type": "boolean"
  }, {
    "id": 516,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 517,
    "text": "",
    "type": "boolean"
  }, {
    "id": 518,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 519,
    "text": "",
    "type": "boolean"
  }, {
    "id": 520,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 521,
    "text": "",
    "type": "boolean"
  }, {
    "id": 522,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 523,
    "text": "",
    "type": "boolean"
  }, {
    "id": 524,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 525,
    "text": "",
    "type": "boolean"
  }, {
    "id": 526,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 527,
    "text": "",
    "type": "boolean"
  }, {
    "id": 528,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 529,
    "text": "",
    "type": "boolean"
  }, {
    "id": 530,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 531,
    "text": "",
    "type": "boolean"
  }, {
    "id": 532,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 533,
    "text": "",
    "type": "boolean"
  }, {
    "id": 534,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 535,
    "text": "",
    "type": "boolean"
  }, {
    "id": 536,
    "text": "",
    "type": "local variable"
  }, {
    "id": 537,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 538,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 539,
    "text": "",
    "type": "string"
  }, {
    "id": 540,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 541,
    "text": "",
    "type": "string"
  }, {
    "id": 542,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 543,
    "text": "",
    "type": "string"
  }, {
    "id": 544,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 545,
    "text": "",
    "type": "string"
  }, {
    "id": 546,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 547,
    "text": "",
    "type": "string"
  }, {
    "id": 548,
    "text": "",
    "type": "local variable"
  }, {
    "id": 549,
    "text": "",
    "type": "global variable"
  }, {
    "id": 550,
    "text": "",
    "type": "n/a"
  }, {
    "id": 551,
    "text": "",
    "type": "global variable"
  }, {
    "id": 552,
    "text": "",
    "type": "n/a"
  }, {
    "id": 553,
    "text": "",
    "type": "global variable"
  }, {
    "id": 554,
    "text": "",
    "type": "n/a"
  }, {
    "id": 555,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 556,
    "text": "",
    "type": "interface container"
  }, {
    "id": 557,
    "text": "",
    "type": "interface"
  }, {
    "id": 558,
    "text": "",
    "type": "require local variable"
  } ]
}