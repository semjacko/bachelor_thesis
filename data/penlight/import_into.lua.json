{
  "_filename": "import_into.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/import_into.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 32
  }, {
    "from": 22,
    "label": "has",
    "to": 33
  }, {
    "from": 22,
    "label": "has",
    "to": 34
  }, {
    "from": 22,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 22,
    "label": "has",
    "to": 40
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "calls",
    "to": 48
  }, {
    "from": 8,
    "label": "calls",
    "to": 46
  }, {
    "from": 42,
    "label": "calls",
    "to": 45
  }, {
    "from": 42,
    "label": "calls",
    "to": 45
  }, {
    "from": 8,
    "label": "calls",
    "to": 45
  }, {
    "from": 42,
    "label": "calls",
    "to": 43
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 18,
    "label": "calls",
    "to": 43
  }, {
    "from": 42,
    "label": "calls",
    "to": 49
  }, {
    "from": 42,
    "label": "calls",
    "to": 47
  }, {
    "from": 8,
    "label": "calls",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 42,
    "label": "declares",
    "to": 2
  }, {
    "from": 42,
    "label": "declares",
    "to": 5
  }, {
    "from": 42,
    "label": "declares",
    "to": 8
  }, {
    "from": 42,
    "label": "declares",
    "to": 18
  }, {
    "from": 42,
    "label": "declares",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "provides",
    "to": 53
  }, {
    "from": 53,
    "label": "provides",
    "to": 54
  }, {
    "from": 50,
    "label": "requires",
    "to": 1
  }, {
    "from": 55,
    "label": "requires",
    "to": 1
  }, {
    "from": 56,
    "label": "requires",
    "to": 1
  }, {
    "from": 57,
    "label": "requires",
    "to": 1
  }, {
    "from": 50,
    "label": "requires",
    "to": 1
  }, {
    "from": 50,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "import_into",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(t,key)\r\n\t        return require ('pl.'..name)[key]\r\n\t    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function gmt.hook(handler)\r\n\t    _hook = handler\r\n\tend",
    "type": "function"
  }, {
    "id": 6,
    "text": "_hook = handler",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function gmt.__index(t,name)\r\n\t    local found = modules[name]\r\n\t    -- either true, or the name of the module containing this class.\r\n\t    -- either way, we load the required module and make it globally available.\r\n\t    if found then\r\n\t        -- e..g pretty.dump causes pl.pretty to become available as 'pretty'\r\n\t        rawset(env,name,require('pl.'..name))\r\n\t        return env[name]\r\n\t    else\r\n\t        local res\r\n\t        if _hook then\r\n\t            res = _hook(t,name)\r\n\t            if res then return res end\r\n\t        end\r\n\t        if _prev_index then\r\n\t            return _prev_index(t,name)\r\n\t        end\r\n\t    end\r\n\tend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local found = modules[name]",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if found then\r\n\t        -- e..g pretty.dump causes pl.pretty to become available as 'pretty'\r\n\t        rawset(env,name,require('pl.'..name))\r\n\t        return env[name]\r\n\t    else\r\n\t        local res\r\n\t        if _hook then\r\n\t            res = _hook(t,name)\r\n\t            if res then return res end\r\n\t        end\r\n\t        if _prev_index then\r\n\t            return _prev_index(t,name)\r\n\t        end\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "rawset(env,name,require('pl.'..name))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if _hook then\r\n\t            res = _hook(t,name)\r\n\t            if res then return res end\r\n\t        end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "res = _hook(t,name)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if res then return res end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if _prev_index then\r\n\t            return _prev_index(t,name)\r\n\t        end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function gmt.__newindex(t,name,value)\r\n            mod[name] = value\r\n            rawset(t,name,value)\r\n        end",
    "type": "function"
  }, {
    "id": 19,
    "text": "mod[name] = value",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "rawset(t,name,value)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(env)\r\n    local mod\r\n    if env == true then\r\n        mod = {}\r\n        env = {}\r\n    end\r\n\tlocal env = env or {}\r\n\r\n\tlocal modules = {\r\n\t    utils = true,path=true,dir=true,tablex=true,stringio=true,sip=true,\r\n\t    input=true,seq=true,lexer=true,stringx=true,\r\n\t    config=true,pretty=true,data=true,func=true,text=true,\r\n\t    operator=true,lapp=true,array2d=true,\r\n\t    comprehension=true,xml=true,types=true,\r\n\t    test = true, app = true, file = true, class = true, List = true,\r\n\t    Map = true, Set = true, OrderedMap = true, MultiMap = true,\r\n\t    Date = true,\r\n\t    -- classes --\r\n\t}\r\n\trawset(env,'utils',require 'pl.utils')\r\n\r\n\tfor name,klass in pairs(env.utils.stdmt) do\r\n\t    klass.__index = function(t,key)\r\n\t        return require ('pl.'..name)[key]\r\n\t    end;\r\n\tend\r\n\r\n\t-- ensure that we play nice with libraries that also attach a metatable\r\n\t-- to the global table; always forward to a custom __index if we don't\r\n\t-- match\r\n\r\n\tlocal _hook,_prev_index\r\n\tlocal gmt = {}\r\n\tlocal prevenvmt = getmetatable(env)\r\n\tif prevenvmt then\r\n\t    _prev_index = prevenvmt.__index\r\n\t    if prevenvmt.__newindex then\r\n\t        gmt.__index = prevenvmt.__newindex\r\n\t    end\r\n\tend\r\n\r\n\tfunction gmt.hook(handler)\r\n\t    _hook = handler\r\n\tend\r\n\r\n\tfunction gmt.__index(t,name)\r\n\t    local found = modules[name]\r\n\t    -- either true, or the name of the module containing this class.\r\n\t    -- either way, we load the required module and make it globally available.\r\n\t    if found then\r\n\t        -- e..g pretty.dump causes pl.pretty to become available as 'pretty'\r\n\t        rawset(env,name,require('pl.'..name))\r\n\t        return env[name]\r\n\t    else\r\n\t        local res\r\n\t        if _hook then\r\n\t            res = _hook(t,name)\r\n\t            if res then return res end\r\n\t        end\r\n\t        if _prev_index then\r\n\t            return _prev_index(t,name)\r\n\t        end\r\n\t    end\r\n\tend\r\n\r\n    if mod then\r\n        function gmt.__newindex(t,name,value)\r\n            mod[name] = value\r\n            rawset(t,name,value)\r\n        end\r\n    end\r\n\r\n\tsetmetatable(env,gmt)\r\n\r\n\treturn env,mod or env\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local mod",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if env == true then\r\n        mod = {}\r\n        env = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "mod = {}",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "env = {}",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "local env = env or {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local modules = {\r\n\t    utils = true,path=true,dir=true,tablex=true,stringio=true,sip=true,\r\n\t    input=true,seq=true,lexer=true,stringx=true,\r\n\t    config=true,pretty=true,data=true,func=true,text=true,\r\n\t    operator=true,lapp=true,array2d=true,\r\n\t    comprehension=true,xml=true,types=true,\r\n\t    test = true, app = true, file = true, class = true, List = true,\r\n\t    Map = true, Set = true, OrderedMap = true, MultiMap = true,\r\n\t    Date = true,\r\n\t    -- classes --\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "rawset(env,'utils',require 'pl.utils')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "for name,klass in pairs(env.utils.stdmt) do\r\n\t    klass.__index = function(t,key)\r\n\t        return require ('pl.'..name)[key]\r\n\t    end;\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "klass.__index = function(t,key)\r\n\t        return require ('pl.'..name)[key]\r\n\t    end",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local _hook,_prev_index",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local gmt = {}",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local prevenvmt = getmetatable(env)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if prevenvmt then\r\n\t    _prev_index = prevenvmt.__index\r\n\t    if prevenvmt.__newindex then\r\n\t        gmt.__index = prevenvmt.__newindex\r\n\t    end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "_prev_index = prevenvmt.__index",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if prevenvmt.__newindex then\r\n\t        gmt.__index = prevenvmt.__newindex\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "gmt.__index = prevenvmt.__newindex",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if mod then\r\n        function gmt.__newindex(t,name,value)\r\n            mod[name] = value\r\n            rawset(t,name,value)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "setmetatable(env,gmt)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "",
    "type": "function container"
  }, {
    "id": 43,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 44,
    "text": "_hook",
    "type": "global function"
  }, {
    "id": 45,
    "text": "require",
    "type": "global function"
  }, {
    "id": 46,
    "text": "_prev_index",
    "type": "global function"
  }, {
    "id": 47,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 48,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 49,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "variable container"
  }, {
    "id": 52,
    "text": "",
    "type": "require container"
  }, {
    "id": 53,
    "text": "",
    "type": "interface container"
  }, {
    "id": 54,
    "text": "",
    "type": "interface"
  }, {
    "id": 55,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "require local variable"
  } ]
}