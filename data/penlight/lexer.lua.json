{
  "_filename": "lexer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/lexer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 17,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 7
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 7
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 7
  }, {
    "from": 36,
    "label": "has",
    "to": 7
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 7
  }, {
    "from": 39,
    "label": "has",
    "to": 7
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 42,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 64
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 55,
    "label": "has",
    "to": 74
  }, {
    "from": 55,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 55,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 79,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 77,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 69
  }, {
    "from": 94,
    "label": "has",
    "to": 70
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 94,
    "label": "has",
    "to": 102
  }, {
    "from": 55,
    "label": "has",
    "to": 7
  }, {
    "from": 42,
    "label": "has",
    "to": 7
  }, {
    "from": 42,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 56
  }, {
    "from": 104,
    "label": "has",
    "to": 57
  }, {
    "from": 104,
    "label": "has",
    "to": 58
  }, {
    "from": 104,
    "label": "has",
    "to": 59
  }, {
    "from": 104,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 64
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 104,
    "label": "has",
    "to": 74
  }, {
    "from": 104,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 104,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 79,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 77,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 69
  }, {
    "from": 94,
    "label": "has",
    "to": 70
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 94,
    "label": "has",
    "to": 102
  }, {
    "from": 104,
    "label": "has",
    "to": 7
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 64
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 7
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 7
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 113,
    "label": "has",
    "to": 118
  }, {
    "from": 110,
    "label": "has",
    "to": 119
  }, {
    "from": 110,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 7
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 7
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 7
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 7
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 133,
    "label": "has",
    "to": 7
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 134
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 139,
    "label": "has",
    "to": 7
  }, {
    "from": 139,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 145,
    "label": "has",
    "to": 150
  }, {
    "from": 145,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 145,
    "label": "has",
    "to": 154
  }, {
    "from": 145,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 7
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 7
  }, {
    "from": 145,
    "label": "has",
    "to": 158
  }, {
    "from": 145,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 163
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 169
  }, {
    "from": 162,
    "label": "has",
    "to": 170
  }, {
    "from": 145,
    "label": "has",
    "to": 7
  }, {
    "from": 145,
    "label": "has",
    "to": 7
  }, {
    "from": 145,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 152
  }, {
    "from": 172,
    "label": "has",
    "to": 153
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 7
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 7
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 178,
    "label": "has",
    "to": 7
  }, {
    "from": 178,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 183,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 181
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 183,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 183,
    "label": "has",
    "to": 7
  }, {
    "from": 183,
    "label": "has",
    "to": 191
  }, {
    "from": 104,
    "label": "calls",
    "to": 203
  }, {
    "from": 104,
    "label": "calls",
    "to": 203
  }, {
    "from": 133,
    "label": "calls",
    "to": 129
  }, {
    "from": 9,
    "label": "calls",
    "to": 199
  }, {
    "from": 6,
    "label": "calls",
    "to": 195
  }, {
    "from": 9,
    "label": "calls",
    "to": 195
  }, {
    "from": 13,
    "label": "calls",
    "to": 195
  }, {
    "from": 17,
    "label": "calls",
    "to": 195
  }, {
    "from": 26,
    "label": "calls",
    "to": 195
  }, {
    "from": 28,
    "label": "calls",
    "to": 195
  }, {
    "from": 30,
    "label": "calls",
    "to": 195
  }, {
    "from": 32,
    "label": "calls",
    "to": 195
  }, {
    "from": 34,
    "label": "calls",
    "to": 195
  }, {
    "from": 36,
    "label": "calls",
    "to": 195
  }, {
    "from": 36,
    "label": "calls",
    "to": 195
  }, {
    "from": 39,
    "label": "calls",
    "to": 195
  }, {
    "from": 39,
    "label": "calls",
    "to": 195
  }, {
    "from": 104,
    "label": "calls",
    "to": 195
  }, {
    "from": 104,
    "label": "calls",
    "to": 195
  }, {
    "from": 104,
    "label": "calls",
    "to": 195
  }, {
    "from": 104,
    "label": "calls",
    "to": 195
  }, {
    "from": 104,
    "label": "calls",
    "to": 195
  }, {
    "from": 104,
    "label": "calls",
    "to": 195
  }, {
    "from": 145,
    "label": "calls",
    "to": 172
  }, {
    "from": 145,
    "label": "calls",
    "to": 172
  }, {
    "from": 145,
    "label": "calls",
    "to": 172
  }, {
    "from": 183,
    "label": "calls",
    "to": 198
  }, {
    "from": 133,
    "label": "calls",
    "to": 42
  }, {
    "from": 139,
    "label": "calls",
    "to": 42
  }, {
    "from": 104,
    "label": "calls",
    "to": 193
  }, {
    "from": 104,
    "label": "calls",
    "to": 193
  }, {
    "from": 110,
    "label": "calls",
    "to": 194
  }, {
    "from": 172,
    "label": "calls",
    "to": 194
  }, {
    "from": 145,
    "label": "calls",
    "to": 194
  }, {
    "from": 145,
    "label": "calls",
    "to": 194
  }, {
    "from": 145,
    "label": "calls",
    "to": 194
  }, {
    "from": 104,
    "label": "calls",
    "to": 206
  }, {
    "from": 183,
    "label": "calls",
    "to": 2
  }, {
    "from": 183,
    "label": "calls",
    "to": 2
  }, {
    "from": 110,
    "label": "calls",
    "to": 200
  }, {
    "from": 121,
    "label": "calls",
    "to": 200
  }, {
    "from": 124,
    "label": "calls",
    "to": 200
  }, {
    "from": 126,
    "label": "calls",
    "to": 200
  }, {
    "from": 145,
    "label": "calls",
    "to": 200
  }, {
    "from": 178,
    "label": "calls",
    "to": 200
  }, {
    "from": 178,
    "label": "calls",
    "to": 200
  }, {
    "from": 183,
    "label": "calls",
    "to": 200
  }, {
    "from": 110,
    "label": "calls",
    "to": 201
  }, {
    "from": 110,
    "label": "calls",
    "to": 108
  }, {
    "from": 110,
    "label": "calls",
    "to": 108
  }, {
    "from": 42,
    "label": "calls",
    "to": 202
  }, {
    "from": 145,
    "label": "calls",
    "to": 174
  }, {
    "from": 2,
    "label": "calls",
    "to": 196
  }, {
    "from": 42,
    "label": "calls",
    "to": 196
  }, {
    "from": 104,
    "label": "calls",
    "to": 196
  }, {
    "from": 108,
    "label": "calls",
    "to": 196
  }, {
    "from": 110,
    "label": "calls",
    "to": 196
  }, {
    "from": 2,
    "label": "calls",
    "to": 204
  }, {
    "from": 183,
    "label": "calls",
    "to": 204
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 197
  }, {
    "from": 104,
    "label": "calls",
    "to": 197
  }, {
    "from": 1,
    "label": "contains",
    "to": 192
  }, {
    "from": 192,
    "label": "declares",
    "to": 2
  }, {
    "from": 192,
    "label": "declares",
    "to": 6
  }, {
    "from": 192,
    "label": "declares",
    "to": 9
  }, {
    "from": 192,
    "label": "declares",
    "to": 13
  }, {
    "from": 192,
    "label": "declares",
    "to": 17
  }, {
    "from": 192,
    "label": "declares",
    "to": 26
  }, {
    "from": 192,
    "label": "declares",
    "to": 28
  }, {
    "from": 192,
    "label": "declares",
    "to": 30
  }, {
    "from": 192,
    "label": "declares",
    "to": 32
  }, {
    "from": 192,
    "label": "declares",
    "to": 34
  }, {
    "from": 192,
    "label": "declares",
    "to": 36
  }, {
    "from": 192,
    "label": "declares",
    "to": 39
  }, {
    "from": 192,
    "label": "declares",
    "to": 42
  }, {
    "from": 192,
    "label": "declares",
    "to": 104
  }, {
    "from": 192,
    "label": "declares",
    "to": 106
  }, {
    "from": 192,
    "label": "declares",
    "to": 108
  }, {
    "from": 192,
    "label": "declares",
    "to": 110
  }, {
    "from": 192,
    "label": "declares",
    "to": 121
  }, {
    "from": 192,
    "label": "declares",
    "to": 124
  }, {
    "from": 192,
    "label": "declares",
    "to": 126
  }, {
    "from": 192,
    "label": "declares",
    "to": 129
  }, {
    "from": 192,
    "label": "declares",
    "to": 133
  }, {
    "from": 192,
    "label": "declares",
    "to": 139
  }, {
    "from": 192,
    "label": "declares",
    "to": 145
  }, {
    "from": 192,
    "label": "declares",
    "to": 172
  }, {
    "from": 192,
    "label": "declares",
    "to": 174
  }, {
    "from": 192,
    "label": "declares",
    "to": 176
  }, {
    "from": 192,
    "label": "declares",
    "to": 178
  }, {
    "from": 192,
    "label": "declares",
    "to": 183
  }, {
    "from": 1,
    "label": "declares",
    "to": 205
  }, {
    "from": 207,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 208
  }, {
    "from": 1,
    "label": "contains",
    "to": 209
  }, {
    "from": 208,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 208,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 208,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 208,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 208,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 208,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 208,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 208,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 208,
    "label": "initializes",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 208,
    "label": "initializes",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 208,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 208,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 208,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 208,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "assigns",
    "to": 237
  }, {
    "from": 208,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "assigns",
    "to": 239
  }, {
    "from": 208,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  }, {
    "from": 208,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 208,
    "label": "initializes",
    "to": 244
  }, {
    "from": 244,
    "label": "assigns",
    "to": 245
  }, {
    "from": 208,
    "label": "initializes",
    "to": 246
  }, {
    "from": 246,
    "label": "assigns",
    "to": 247
  }, {
    "from": 208,
    "label": "initializes",
    "to": 248
  }, {
    "from": 248,
    "label": "assigns",
    "to": 249
  }, {
    "from": 208,
    "label": "initializes",
    "to": 250
  }, {
    "from": 208,
    "label": "initializes",
    "to": 251
  }, {
    "from": 208,
    "label": "initializes",
    "to": 252
  }, {
    "from": 208,
    "label": "initializes",
    "to": 253
  }, {
    "from": 208,
    "label": "initializes",
    "to": 254
  }, {
    "from": 208,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "assigns",
    "to": 256
  }, {
    "from": 1,
    "label": "provides",
    "to": 257
  }, {
    "from": 220,
    "label": "represents",
    "to": 258
  }, {
    "from": 257,
    "label": "provides",
    "to": 258
  }, {
    "from": 259,
    "label": "requires",
    "to": 1
  }, {
    "from": 260,
    "label": "requires",
    "to": 1
  }, {
    "from": 220,
    "label": "contains",
    "to": 42
  }, {
    "from": 220,
    "label": "contains",
    "to": 110
  }, {
    "from": 220,
    "label": "contains",
    "to": 121
  }, {
    "from": 220,
    "label": "contains",
    "to": 124
  }, {
    "from": 220,
    "label": "contains",
    "to": 126
  }, {
    "from": 220,
    "label": "contains",
    "to": 129
  }, {
    "from": 220,
    "label": "contains",
    "to": 133
  }, {
    "from": 220,
    "label": "contains",
    "to": 139
  }, {
    "from": 220,
    "label": "contains",
    "to": 145
  }, {
    "from": 220,
    "label": "contains",
    "to": 178
  }, {
    "from": 220,
    "label": "contains",
    "to": 183
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lexer",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function assert_arg(idx,val,tp)\r\n    if type(val) ~= tp then\r\n        error(\"argument \"..idx..\" must be \"..tp, 2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if type(val) ~= tp then\r\n        error(\"argument \"..idx..\" must be \"..tp, 2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "error(\"argument \"..idx..\" must be \"..tp, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function tdump(tok)\r\n    return yield(tok,tok)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function ndump(tok,options)\r\n    if options and options.number then\r\n        tok = tonumber(tok)\r\n    end\r\n    return yield(\"number\",tok)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "if options and options.number then\r\n        tok = tonumber(tok)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "tok = tonumber(tok)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function sdump(tok,options)\r\n    if options and options.string then\r\n        tok = tok:sub(2,-2)\r\n    end\r\n    return yield(\"string\",tok)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if options and options.string then\r\n        tok = tok:sub(2,-2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "tok = tok:sub(2,-2)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function sdump_l(tok,options,findres)\r\n    if options and options.string then\r\n        local quotelen = 3\r\n        if findres[3] then\r\n            quotelen = quotelen + findres[3]:len()\r\n        end\r\n        tok = tok:sub(quotelen, -quotelen)\r\n        if tok:sub(1, 1) == \"\\n\" then\r\n            tok = tok:sub(2)\r\n        end\r\n    end\r\n    return yield(\"string\",tok)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if options and options.string then\r\n        local quotelen = 3\r\n        if findres[3] then\r\n            quotelen = quotelen + findres[3]:len()\r\n        end\r\n        tok = tok:sub(quotelen, -quotelen)\r\n        if tok:sub(1, 1) == \"\\n\" then\r\n            tok = tok:sub(2)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "local quotelen = 3",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if findres[3] then\r\n            quotelen = quotelen + findres[3]:len()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "quotelen = quotelen + findres[3]:len()",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "tok = tok:sub(quotelen, -quotelen)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if tok:sub(1, 1) == \"\\n\" then\r\n            tok = tok:sub(2)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "tok = tok:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function chdump(tok,options)\r\n    if options and options.string then\r\n        tok = tok:sub(2,-2)\r\n    end\r\n    return yield(\"char\",tok)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function cdump(tok)\r\n    return yield('comment',tok)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function wsdump (tok)\r\n    return yield(\"space\",tok)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function pdump (tok)\r\n    return yield('prepro',tok)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function plain_vdump(tok)\r\n    return yield(\"iden\",tok)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function lua_vdump(tok)\r\n    if lua_keyword[tok] then\r\n        return yield(\"keyword\",tok)\r\n    else\r\n        return yield(\"iden\",tok)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "if lua_keyword[tok] then\r\n        return yield(\"keyword\",tok)\r\n    else\r\n        return yield(\"iden\",tok)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function cpp_vdump(tok)\r\n    if cpp_keyword[tok] then\r\n        return yield(\"keyword\",tok)\r\n    else\r\n        return yield(\"iden\",tok)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "if cpp_keyword[tok] then\r\n        return yield(\"keyword\",tok)\r\n    else\r\n        return yield(\"iden\",tok)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function lexer.scan(s,matches,filter,options)\r\n    local file = type(s) ~= 'string' and s\r\n    filter = filter or {space=true}\r\n    options = options or {number=true,string=true}\r\n    if filter then\r\n        if filter.space then filter[wsdump] = true end\r\n        if filter.comments then\r\n            filter[cdump] = true\r\n        end\r\n    end\r\n    if not matches then\r\n        if not plain_matches then\r\n            plain_matches = {\r\n                {WSPACE,wsdump},\r\n                {NUMBER3,ndump},\r\n                {IDEN,plain_vdump},\r\n                {NUMBER1,ndump},\r\n                {NUMBER2,ndump},\r\n                {STRING1,sdump},\r\n                {STRING2,sdump},\r\n                {STRING3,sdump},\r\n                {'^.',tdump}\r\n            }\r\n        end\r\n        matches = plain_matches\r\n    end\r\n    local function lex(first_arg)\r\n        local line_nr = 0\r\n        local next_line = file and file:read()\r\n        local sz = file and 0 or #s\r\n        local idx = 1\r\n\r\n        -- res is the value used to resume the coroutine.\r\n        local function handle_requests(res)\r\n            while res do\r\n                local tp = type(res)\r\n                -- insert a token list\r\n                if tp == 'table' then\r\n                    res = yield('','')\r\n                    for _,t in ipairs(res) do\r\n                        res = yield(t[1],t[2])\r\n                    end\r\n                elseif tp == 'string' then -- or search up to some special pattern\r\n                    local i1,i2 = strfind(s,res,idx)\r\n                    if i1 then\r\n                        local tok = strsub(s,i1,i2)\r\n                        idx = i2 + 1\r\n                        res = yield('',tok)\r\n                    else\r\n                        res = yield('','')\r\n                        idx = sz + 1\r\n                    end\r\n                else\r\n                    res = yield(line_nr,idx)\r\n                end\r\n            end\r\n        end\r\n\r\n        handle_requests(first_arg)\r\n        if not file then line_nr = 1 end\r\n\r\n        while true do\r\n            if idx > sz then\r\n                if file then\r\n                    if not next_line then return end\r\n                    s = next_line\r\n                    line_nr = line_nr + 1\r\n                    next_line = file:read()\r\n                    if next_line then\r\n                        s = s .. '\\n'\r\n                    end\r\n                    idx, sz = 1, #s\r\n                else\r\n                    while true do\r\n                        handle_requests(yield())\r\n                    end\r\n                end\r\n            end\r\n\r\n            for _,m in ipairs(matches) do\r\n                local pat = m[1]\r\n                local fun = m[2]\r\n                local findres = {strfind(s,pat,idx)}\r\n                local i1, i2 = findres[1], findres[2]\r\n                if i1 then\r\n                    local tok = strsub(s,i1,i2)\r\n                    idx = i2 + 1\r\n                    local res\r\n                    if not (filter and filter[fun]) then\r\n                        lexer.finished = idx > sz\r\n                        res = fun(tok, options, findres)\r\n                    end\r\n                    if not file and tok:find(\"\\n\") then\r\n                        -- Update line number.\r\n                        local _, newlines = tok:gsub(\"\\n\", {})\r\n                        line_nr = line_nr + newlines\r\n                    end\r\n                    handle_requests(res)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return wrap(lex)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local file = type(s) ~= 'string' and s",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "filter = filter or {space=true}",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "options = options or {number=true,string=true}",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "if filter then\r\n        if filter.space then filter[wsdump] = true end\r\n        if filter.comments then\r\n            filter[cdump] = true\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "if filter.space then filter[wsdump] = true end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "filter[wsdump] = true",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if filter.comments then\r\n            filter[cdump] = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "filter[cdump] = true",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if not matches then\r\n        if not plain_matches then\r\n            plain_matches = {\r\n                {WSPACE,wsdump},\r\n                {NUMBER3,ndump},\r\n                {IDEN,plain_vdump},\r\n                {NUMBER1,ndump},\r\n                {NUMBER2,ndump},\r\n                {STRING1,sdump},\r\n                {STRING2,sdump},\r\n                {STRING3,sdump},\r\n                {'^.',tdump}\r\n            }\r\n        end\r\n        matches = plain_matches\r\n    end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "if not plain_matches then\r\n            plain_matches = {\r\n                {WSPACE,wsdump},\r\n                {NUMBER3,ndump},\r\n                {IDEN,plain_vdump},\r\n                {NUMBER1,ndump},\r\n                {NUMBER2,ndump},\r\n                {STRING1,sdump},\r\n                {STRING2,sdump},\r\n                {STRING3,sdump},\r\n                {'^.',tdump}\r\n            }\r\n        end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "plain_matches = {\r\n                {WSPACE,wsdump},\r\n                {NUMBER3,ndump},\r\n                {IDEN,plain_vdump},\r\n                {NUMBER1,ndump},\r\n                {NUMBER2,ndump},\r\n                {STRING1,sdump},\r\n                {STRING2,sdump},\r\n                {STRING3,sdump},\r\n                {'^.',tdump}\r\n            }",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "matches = plain_matches",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local function lex(first_arg)\r\n        local line_nr = 0\r\n        local next_line = file and file:read()\r\n        local sz = file and 0 or #s\r\n        local idx = 1\r\n\r\n        -- res is the value used to resume the coroutine.\r\n        local function handle_requests(res)\r\n            while res do\r\n                local tp = type(res)\r\n                -- insert a token list\r\n                if tp == 'table' then\r\n                    res = yield('','')\r\n                    for _,t in ipairs(res) do\r\n                        res = yield(t[1],t[2])\r\n                    end\r\n                elseif tp == 'string' then -- or search up to some special pattern\r\n                    local i1,i2 = strfind(s,res,idx)\r\n                    if i1 then\r\n                        local tok = strsub(s,i1,i2)\r\n                        idx = i2 + 1\r\n                        res = yield('',tok)\r\n                    else\r\n                        res = yield('','')\r\n                        idx = sz + 1\r\n                    end\r\n                else\r\n                    res = yield(line_nr,idx)\r\n                end\r\n            end\r\n        end\r\n\r\n        handle_requests(first_arg)\r\n        if not file then line_nr = 1 end\r\n\r\n        while true do\r\n            if idx > sz then\r\n                if file then\r\n                    if not next_line then return end\r\n                    s = next_line\r\n                    line_nr = line_nr + 1\r\n                    next_line = file:read()\r\n                    if next_line then\r\n                        s = s .. '\\n'\r\n                    end\r\n                    idx, sz = 1, #s\r\n                else\r\n                    while true do\r\n                        handle_requests(yield())\r\n                    end\r\n                end\r\n            end\r\n\r\n            for _,m in ipairs(matches) do\r\n                local pat = m[1]\r\n                local fun = m[2]\r\n                local findres = {strfind(s,pat,idx)}\r\n                local i1, i2 = findres[1], findres[2]\r\n                if i1 then\r\n                    local tok = strsub(s,i1,i2)\r\n                    idx = i2 + 1\r\n                    local res\r\n                    if not (filter and filter[fun]) then\r\n                        lexer.finished = idx > sz\r\n                        res = fun(tok, options, findres)\r\n                    end\r\n                    if not file and tok:find(\"\\n\") then\r\n                        -- Update line number.\r\n                        local _, newlines = tok:gsub(\"\\n\", {})\r\n                        line_nr = line_nr + newlines\r\n                    end\r\n                    handle_requests(res)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 56,
    "text": "local line_nr = 0",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local next_line = file and file:read()",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local sz = file and 0 or #s",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local idx = 1",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local function handle_requests(res)\r\n            while res do\r\n                local tp = type(res)\r\n                -- insert a token list\r\n                if tp == 'table' then\r\n                    res = yield('','')\r\n                    for _,t in ipairs(res) do\r\n                        res = yield(t[1],t[2])\r\n                    end\r\n                elseif tp == 'string' then -- or search up to some special pattern\r\n                    local i1,i2 = strfind(s,res,idx)\r\n                    if i1 then\r\n                        local tok = strsub(s,i1,i2)\r\n                        idx = i2 + 1\r\n                        res = yield('',tok)\r\n                    else\r\n                        res = yield('','')\r\n                        idx = sz + 1\r\n                    end\r\n                else\r\n                    res = yield(line_nr,idx)\r\n                end\r\n            end\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 61,
    "text": "while res do\r\n                local tp = type(res)\r\n                -- insert a token list\r\n                if tp == 'table' then\r\n                    res = yield('','')\r\n                    for _,t in ipairs(res) do\r\n                        res = yield(t[1],t[2])\r\n                    end\r\n                elseif tp == 'string' then -- or search up to some special pattern\r\n                    local i1,i2 = strfind(s,res,idx)\r\n                    if i1 then\r\n                        local tok = strsub(s,i1,i2)\r\n                        idx = i2 + 1\r\n                        res = yield('',tok)\r\n                    else\r\n                        res = yield('','')\r\n                        idx = sz + 1\r\n                    end\r\n                else\r\n                    res = yield(line_nr,idx)\r\n                end\r\n            end",
    "type": "statement:while"
  }, {
    "id": 62,
    "text": "local tp = type(res)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if tp == 'table' then\r\n                    res = yield('','')\r\n                    for _,t in ipairs(res) do\r\n                        res = yield(t[1],t[2])\r\n                    end\r\n                elseif tp == 'string' then -- or search up to some special pattern\r\n                    local i1,i2 = strfind(s,res,idx)\r\n                    if i1 then\r\n                        local tok = strsub(s,i1,i2)\r\n                        idx = i2 + 1\r\n                        res = yield('',tok)\r\n                    else\r\n                        res = yield('','')\r\n                        idx = sz + 1\r\n                    end\r\n                else\r\n                    res = yield(line_nr,idx)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "res = yield('','')",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "for _,t in ipairs(res) do\r\n                        res = yield(t[1],t[2])\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 66,
    "text": "res = yield(t[1],t[2])",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local i1,i2 = strfind(s,res,idx)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if i1 then\r\n                        local tok = strsub(s,i1,i2)\r\n                        idx = i2 + 1\r\n                        res = yield('',tok)\r\n                    else\r\n                        res = yield('','')\r\n                        idx = sz + 1\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local tok = strsub(s,i1,i2)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "idx = i2 + 1",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "res = yield('',tok)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "idx = sz + 1",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "res = yield(line_nr,idx)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "handle_requests(first_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "if not file then line_nr = 1 end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "line_nr = 1",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "while true do\r\n            if idx > sz then\r\n                if file then\r\n                    if not next_line then return end\r\n                    s = next_line\r\n                    line_nr = line_nr + 1\r\n                    next_line = file:read()\r\n                    if next_line then\r\n                        s = s .. '\\n'\r\n                    end\r\n                    idx, sz = 1, #s\r\n                else\r\n                    while true do\r\n                        handle_requests(yield())\r\n                    end\r\n                end\r\n            end\r\n\r\n            for _,m in ipairs(matches) do\r\n                local pat = m[1]\r\n                local fun = m[2]\r\n                local findres = {strfind(s,pat,idx)}\r\n                local i1, i2 = findres[1], findres[2]\r\n                if i1 then\r\n                    local tok = strsub(s,i1,i2)\r\n                    idx = i2 + 1\r\n                    local res\r\n                    if not (filter and filter[fun]) then\r\n                        lexer.finished = idx > sz\r\n                        res = fun(tok, options, findres)\r\n                    end\r\n                    if not file and tok:find(\"\\n\") then\r\n                        -- Update line number.\r\n                        local _, newlines = tok:gsub(\"\\n\", {})\r\n                        line_nr = line_nr + newlines\r\n                    end\r\n                    handle_requests(res)\r\n                    break\r\n                end\r\n            end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 78,
    "text": "if idx > sz then\r\n                if file then\r\n                    if not next_line then return end\r\n                    s = next_line\r\n                    line_nr = line_nr + 1\r\n                    next_line = file:read()\r\n                    if next_line then\r\n                        s = s .. '\\n'\r\n                    end\r\n                    idx, sz = 1, #s\r\n                else\r\n                    while true do\r\n                        handle_requests(yield())\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "if file then\r\n                    if not next_line then return end\r\n                    s = next_line\r\n                    line_nr = line_nr + 1\r\n                    next_line = file:read()\r\n                    if next_line then\r\n                        s = s .. '\\n'\r\n                    end\r\n                    idx, sz = 1, #s\r\n                else\r\n                    while true do\r\n                        handle_requests(yield())\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "if not next_line then return end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "s = next_line",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "line_nr = line_nr + 1",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "next_line = file:read()",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "if next_line then\r\n                        s = s .. '\\n'\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "s = s .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "idx, sz = 1, #s",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "while true do\r\n                        handle_requests(yield())\r\n                    end",
    "type": "statement:while"
  }, {
    "id": 88,
    "text": "handle_requests(yield())",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "for _,m in ipairs(matches) do\r\n                local pat = m[1]\r\n                local fun = m[2]\r\n                local findres = {strfind(s,pat,idx)}\r\n                local i1, i2 = findres[1], findres[2]\r\n                if i1 then\r\n                    local tok = strsub(s,i1,i2)\r\n                    idx = i2 + 1\r\n                    local res\r\n                    if not (filter and filter[fun]) then\r\n                        lexer.finished = idx > sz\r\n                        res = fun(tok, options, findres)\r\n                    end\r\n                    if not file and tok:find(\"\\n\") then\r\n                        -- Update line number.\r\n                        local _, newlines = tok:gsub(\"\\n\", {})\r\n                        line_nr = line_nr + newlines\r\n                    end\r\n                    handle_requests(res)\r\n                    break\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "local pat = m[1]",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local fun = m[2]",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local findres = {strfind(s,pat,idx)}",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local i1, i2 = findres[1], findres[2]",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if i1 then\r\n                    local tok = strsub(s,i1,i2)\r\n                    idx = i2 + 1\r\n                    local res\r\n                    if not (filter and filter[fun]) then\r\n                        lexer.finished = idx > sz\r\n                        res = fun(tok, options, findres)\r\n                    end\r\n                    if not file and tok:find(\"\\n\") then\r\n                        -- Update line number.\r\n                        local _, newlines = tok:gsub(\"\\n\", {})\r\n                        line_nr = line_nr + newlines\r\n                    end\r\n                    handle_requests(res)\r\n                    break\r\n                end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if not (filter and filter[fun]) then\r\n                        lexer.finished = idx > sz\r\n                        res = fun(tok, options, findres)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "lexer.finished = idx > sz",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "res = fun(tok, options, findres)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if not file and tok:find(\"\\n\") then\r\n                        -- Update line number.\r\n                        local _, newlines = tok:gsub(\"\\n\", {})\r\n                        line_nr = line_nr + newlines\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "local _, newlines = tok:gsub(\"\\n\", {})",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "line_nr = line_nr + newlines",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "handle_requests(res)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function lex(first_arg)\r\n        local line_nr = 0\r\n        local next_line = file and file:read()\r\n        local sz = file and 0 or #s\r\n        local idx = 1\r\n\r\n        -- res is the value used to resume the coroutine.\r\n        local function handle_requests(res)\r\n            while res do\r\n                local tp = type(res)\r\n                -- insert a token list\r\n                if tp == 'table' then\r\n                    res = yield('','')\r\n                    for _,t in ipairs(res) do\r\n                        res = yield(t[1],t[2])\r\n                    end\r\n                elseif tp == 'string' then -- or search up to some special pattern\r\n                    local i1,i2 = strfind(s,res,idx)\r\n                    if i1 then\r\n                        local tok = strsub(s,i1,i2)\r\n                        idx = i2 + 1\r\n                        res = yield('',tok)\r\n                    else\r\n                        res = yield('','')\r\n                        idx = sz + 1\r\n                    end\r\n                else\r\n                    res = yield(line_nr,idx)\r\n                end\r\n            end\r\n        end\r\n\r\n        handle_requests(first_arg)\r\n        if not file then line_nr = 1 end\r\n\r\n        while true do\r\n            if idx > sz then\r\n                if file then\r\n                    if not next_line then return end\r\n                    s = next_line\r\n                    line_nr = line_nr + 1\r\n                    next_line = file:read()\r\n                    if next_line then\r\n                        s = s .. '\\n'\r\n                    end\r\n                    idx, sz = 1, #s\r\n                else\r\n                    while true do\r\n                        handle_requests(yield())\r\n                    end\r\n                end\r\n            end\r\n\r\n            for _,m in ipairs(matches) do\r\n                local pat = m[1]\r\n                local fun = m[2]\r\n                local findres = {strfind(s,pat,idx)}\r\n                local i1, i2 = findres[1], findres[2]\r\n                if i1 then\r\n                    local tok = strsub(s,i1,i2)\r\n                    idx = i2 + 1\r\n                    local res\r\n                    if not (filter and filter[fun]) then\r\n                        lexer.finished = idx > sz\r\n                        res = fun(tok, options, findres)\r\n                    end\r\n                    if not file and tok:find(\"\\n\") then\r\n                        -- Update line number.\r\n                        local _, newlines = tok:gsub(\"\\n\", {})\r\n                        line_nr = line_nr + newlines\r\n                    end\r\n                    handle_requests(res)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "local function handle_requests(res)\r\n            while res do\r\n                local tp = type(res)\r\n                -- insert a token list\r\n                if tp == 'table' then\r\n                    res = yield('','')\r\n                    for _,t in ipairs(res) do\r\n                        res = yield(t[1],t[2])\r\n                    end\r\n                elseif tp == 'string' then -- or search up to some special pattern\r\n                    local i1,i2 = strfind(s,res,idx)\r\n                    if i1 then\r\n                        local tok = strsub(s,i1,i2)\r\n                        idx = i2 + 1\r\n                        res = yield('',tok)\r\n                    else\r\n                        res = yield('','')\r\n                        idx = sz + 1\r\n                    end\r\n                else\r\n                    res = yield(line_nr,idx)\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "local function isstring (s)\r\n    return type(s) == 'string'\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function lexer.insert (tok,a1,a2)\r\n    if not a1 then return end\r\n    local ts\r\n    if isstring(a1) and isstring(a2) then\r\n        ts = {{a1,a2}}\r\n    elseif type(a1) == 'function' then\r\n        ts = {}\r\n        for t,v in a1() do\r\n            append(ts,{t,v})\r\n        end\r\n    else\r\n        ts = a1\r\n    end\r\n    tok(ts)\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "if not a1 then return end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "local ts",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if isstring(a1) and isstring(a2) then\r\n        ts = {{a1,a2}}\r\n    elseif type(a1) == 'function' then\r\n        ts = {}\r\n        for t,v in a1() do\r\n            append(ts,{t,v})\r\n        end\r\n    else\r\n        ts = a1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "ts = {{a1,a2}}",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "ts = {}",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "for t,v in a1() do\r\n            append(ts,{t,v})\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 117,
    "text": "append(ts,{t,v})",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "ts = a1",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "tok(ts)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function lexer.getline (tok)\r\n    local t,v = tok('.-\\n')\r\n    return v\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "local t,v = tok('.-\\n')",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function lexer.lineno (tok)\r\n    return tok(0)\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function lexer.getrest (tok)\r\n    local t,v = tok('.+')\r\n    return v\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "local t,v = tok('.+')",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function lexer.get_keywords ()\r\n    if not lua_keyword then\r\n        lua_keyword = {\r\n            [\"and\"] = true, [\"break\"] = true,  [\"do\"] = true,\r\n            [\"else\"] = true, [\"elseif\"] = true, [\"end\"] = true,\r\n            [\"false\"] = true, [\"for\"] = true, [\"function\"] = true,\r\n            [\"if\"] = true, [\"in\"] = true,  [\"local\"] = true, [\"nil\"] = true,\r\n            [\"not\"] = true, [\"or\"] = true, [\"repeat\"] = true,\r\n            [\"return\"] = true, [\"then\"] = true, [\"true\"] = true,\r\n            [\"until\"] = true,  [\"while\"] = true\r\n        }\r\n    end\r\n    return lua_keyword\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "if not lua_keyword then\r\n        lua_keyword = {\r\n            [\"and\"] = true, [\"break\"] = true,  [\"do\"] = true,\r\n            [\"else\"] = true, [\"elseif\"] = true, [\"end\"] = true,\r\n            [\"false\"] = true, [\"for\"] = true, [\"function\"] = true,\r\n            [\"if\"] = true, [\"in\"] = true,  [\"local\"] = true, [\"nil\"] = true,\r\n            [\"not\"] = true, [\"or\"] = true, [\"repeat\"] = true,\r\n            [\"return\"] = true, [\"then\"] = true, [\"true\"] = true,\r\n            [\"until\"] = true,  [\"while\"] = true\r\n        }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "lua_keyword = {\r\n            [\"and\"] = true, [\"break\"] = true,  [\"do\"] = true,\r\n            [\"else\"] = true, [\"elseif\"] = true, [\"end\"] = true,\r\n            [\"false\"] = true, [\"for\"] = true, [\"function\"] = true,\r\n            [\"if\"] = true, [\"in\"] = true,  [\"local\"] = true, [\"nil\"] = true,\r\n            [\"not\"] = true, [\"or\"] = true, [\"repeat\"] = true,\r\n            [\"return\"] = true, [\"then\"] = true, [\"true\"] = true,\r\n            [\"until\"] = true,  [\"while\"] = true\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function lexer.lua(s,filter,options)\r\n    filter = filter or {space=true,comments=true}\r\n    lexer.get_keywords()\r\n    if not lua_matches then\r\n        lua_matches = {\r\n            {WSPACE,wsdump},\r\n            {NUMBER3,ndump},\r\n            {IDEN,lua_vdump},\r\n            {NUMBER4,ndump},\r\n            {NUMBER5,ndump},\r\n            {STRING1,sdump},\r\n            {STRING2,sdump},\r\n            {STRING3,sdump},\r\n            {'^%-%-%[(=*)%[.-%]%1%]',cdump},\r\n            {'^%-%-.-\\n',cdump},\r\n            {'^%[(=*)%[.-%]%1%]',sdump_l},\r\n            {'^==',tdump},\r\n            {'^~=',tdump},\r\n            {'^<=',tdump},\r\n            {'^>=',tdump},\r\n            {'^%.%.%.',tdump},\r\n            {'^%.%.',tdump},\r\n            {'^.',tdump}\r\n        }\r\n    end\r\n    return lexer.scan(s,lua_matches,filter,options)\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "filter = filter or {space=true,comments=true}",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "lexer.get_keywords()",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "if not lua_matches then\r\n        lua_matches = {\r\n            {WSPACE,wsdump},\r\n            {NUMBER3,ndump},\r\n            {IDEN,lua_vdump},\r\n            {NUMBER4,ndump},\r\n            {NUMBER5,ndump},\r\n            {STRING1,sdump},\r\n            {STRING2,sdump},\r\n            {STRING3,sdump},\r\n            {'^%-%-%[(=*)%[.-%]%1%]',cdump},\r\n            {'^%-%-.-\\n',cdump},\r\n            {'^%[(=*)%[.-%]%1%]',sdump_l},\r\n            {'^==',tdump},\r\n            {'^~=',tdump},\r\n            {'^<=',tdump},\r\n            {'^>=',tdump},\r\n            {'^%.%.%.',tdump},\r\n            {'^%.%.',tdump},\r\n            {'^.',tdump}\r\n        }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "lua_matches = {\r\n            {WSPACE,wsdump},\r\n            {NUMBER3,ndump},\r\n            {IDEN,lua_vdump},\r\n            {NUMBER4,ndump},\r\n            {NUMBER5,ndump},\r\n            {STRING1,sdump},\r\n            {STRING2,sdump},\r\n            {STRING3,sdump},\r\n            {'^%-%-%[(=*)%[.-%]%1%]',cdump},\r\n            {'^%-%-.-\\n',cdump},\r\n            {'^%[(=*)%[.-%]%1%]',sdump_l},\r\n            {'^==',tdump},\r\n            {'^~=',tdump},\r\n            {'^<=',tdump},\r\n            {'^>=',tdump},\r\n            {'^%.%.%.',tdump},\r\n            {'^%.%.',tdump},\r\n            {'^.',tdump}\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function lexer.cpp(s,filter,options)\r\n    filter = filter or {space=true,comments=true}\r\n    if not cpp_keyword then\r\n        cpp_keyword = {\r\n            [\"class\"] = true, [\"break\"] = true,  [\"do\"] = true, [\"sizeof\"] = true,\r\n            [\"else\"] = true, [\"continue\"] = true, [\"struct\"] = true,\r\n            [\"false\"] = true, [\"for\"] = true, [\"public\"] = true, [\"void\"] = true,\r\n            [\"private\"] = true, [\"protected\"] = true, [\"goto\"] = true,\r\n            [\"if\"] = true, [\"static\"] = true,  [\"const\"] = true, [\"typedef\"] = true,\r\n            [\"enum\"] = true, [\"char\"] = true, [\"int\"] = true, [\"bool\"] = true,\r\n            [\"long\"] = true, [\"float\"] = true, [\"true\"] = true, [\"delete\"] = true,\r\n            [\"double\"] = true,  [\"while\"] = true, [\"new\"] = true,\r\n            [\"namespace\"] = true, [\"try\"] = true, [\"catch\"] = true,\r\n            [\"switch\"] = true, [\"case\"] = true, [\"extern\"] = true,\r\n            [\"return\"] = true,[\"default\"] = true,['unsigned']  = true,['signed'] = true,\r\n            [\"union\"] =  true, [\"volatile\"] = true, [\"register\"] = true,[\"short\"] = true,\r\n        }\r\n    end\r\n    if not cpp_matches then\r\n        cpp_matches = {\r\n            {WSPACE,wsdump},\r\n            {PREPRO,pdump},\r\n            {NUMBER3,ndump},\r\n            {IDEN,cpp_vdump},\r\n            {NUMBER4,ndump},\r\n            {NUMBER5,ndump},\r\n            {CHAR1,chdump},\r\n            {CHAR2,chdump},\r\n            {CHAR3,chdump},\r\n            {STRING1,sdump},\r\n            {STRING2,sdump},\r\n            {STRING3,sdump},\r\n            {'^//.-\\n',cdump},\r\n            {'^/%*.-%*/',cdump},\r\n            {'^==',tdump},\r\n            {'^!=',tdump},\r\n            {'^<=',tdump},\r\n            {'^>=',tdump},\r\n            {'^->',tdump},\r\n            {'^&&',tdump},\r\n            {'^||',tdump},\r\n            {'^%+%+',tdump},\r\n            {'^%-%-',tdump},\r\n            {'^%+=',tdump},\r\n            {'^%-=',tdump},\r\n            {'^%*=',tdump},\r\n            {'^/=',tdump},\r\n            {'^|=',tdump},\r\n            {'^%^=',tdump},\r\n            {'^::',tdump},\r\n            {'^.',tdump}\r\n        }\r\n    end\r\n    return lexer.scan(s,cpp_matches,filter,options)\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "if not cpp_keyword then\r\n        cpp_keyword = {\r\n            [\"class\"] = true, [\"break\"] = true,  [\"do\"] = true, [\"sizeof\"] = true,\r\n            [\"else\"] = true, [\"continue\"] = true, [\"struct\"] = true,\r\n            [\"false\"] = true, [\"for\"] = true, [\"public\"] = true, [\"void\"] = true,\r\n            [\"private\"] = true, [\"protected\"] = true, [\"goto\"] = true,\r\n            [\"if\"] = true, [\"static\"] = true,  [\"const\"] = true, [\"typedef\"] = true,\r\n            [\"enum\"] = true, [\"char\"] = true, [\"int\"] = true, [\"bool\"] = true,\r\n            [\"long\"] = true, [\"float\"] = true, [\"true\"] = true, [\"delete\"] = true,\r\n            [\"double\"] = true,  [\"while\"] = true, [\"new\"] = true,\r\n            [\"namespace\"] = true, [\"try\"] = true, [\"catch\"] = true,\r\n            [\"switch\"] = true, [\"case\"] = true, [\"extern\"] = true,\r\n            [\"return\"] = true,[\"default\"] = true,['unsigned']  = true,['signed'] = true,\r\n            [\"union\"] =  true, [\"volatile\"] = true, [\"register\"] = true,[\"short\"] = true,\r\n        }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "cpp_keyword = {\r\n            [\"class\"] = true, [\"break\"] = true,  [\"do\"] = true, [\"sizeof\"] = true,\r\n            [\"else\"] = true, [\"continue\"] = true, [\"struct\"] = true,\r\n            [\"false\"] = true, [\"for\"] = true, [\"public\"] = true, [\"void\"] = true,\r\n            [\"private\"] = true, [\"protected\"] = true, [\"goto\"] = true,\r\n            [\"if\"] = true, [\"static\"] = true,  [\"const\"] = true, [\"typedef\"] = true,\r\n            [\"enum\"] = true, [\"char\"] = true, [\"int\"] = true, [\"bool\"] = true,\r\n            [\"long\"] = true, [\"float\"] = true, [\"true\"] = true, [\"delete\"] = true,\r\n            [\"double\"] = true,  [\"while\"] = true, [\"new\"] = true,\r\n            [\"namespace\"] = true, [\"try\"] = true, [\"catch\"] = true,\r\n            [\"switch\"] = true, [\"case\"] = true, [\"extern\"] = true,\r\n            [\"return\"] = true,[\"default\"] = true,['unsigned']  = true,['signed'] = true,\r\n            [\"union\"] =  true, [\"volatile\"] = true, [\"register\"] = true,[\"short\"] = true,\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "if not cpp_matches then\r\n        cpp_matches = {\r\n            {WSPACE,wsdump},\r\n            {PREPRO,pdump},\r\n            {NUMBER3,ndump},\r\n            {IDEN,cpp_vdump},\r\n            {NUMBER4,ndump},\r\n            {NUMBER5,ndump},\r\n            {CHAR1,chdump},\r\n            {CHAR2,chdump},\r\n            {CHAR3,chdump},\r\n            {STRING1,sdump},\r\n            {STRING2,sdump},\r\n            {STRING3,sdump},\r\n            {'^//.-\\n',cdump},\r\n            {'^/%*.-%*/',cdump},\r\n            {'^==',tdump},\r\n            {'^!=',tdump},\r\n            {'^<=',tdump},\r\n            {'^>=',tdump},\r\n            {'^->',tdump},\r\n            {'^&&',tdump},\r\n            {'^||',tdump},\r\n            {'^%+%+',tdump},\r\n            {'^%-%-',tdump},\r\n            {'^%+=',tdump},\r\n            {'^%-=',tdump},\r\n            {'^%*=',tdump},\r\n            {'^/=',tdump},\r\n            {'^|=',tdump},\r\n            {'^%^=',tdump},\r\n            {'^::',tdump},\r\n            {'^.',tdump}\r\n        }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "cpp_matches = {\r\n            {WSPACE,wsdump},\r\n            {PREPRO,pdump},\r\n            {NUMBER3,ndump},\r\n            {IDEN,cpp_vdump},\r\n            {NUMBER4,ndump},\r\n            {NUMBER5,ndump},\r\n            {CHAR1,chdump},\r\n            {CHAR2,chdump},\r\n            {CHAR3,chdump},\r\n            {STRING1,sdump},\r\n            {STRING2,sdump},\r\n            {STRING3,sdump},\r\n            {'^//.-\\n',cdump},\r\n            {'^/%*.-%*/',cdump},\r\n            {'^==',tdump},\r\n            {'^!=',tdump},\r\n            {'^<=',tdump},\r\n            {'^>=',tdump},\r\n            {'^->',tdump},\r\n            {'^&&',tdump},\r\n            {'^||',tdump},\r\n            {'^%+%+',tdump},\r\n            {'^%-%-',tdump},\r\n            {'^%+=',tdump},\r\n            {'^%-=',tdump},\r\n            {'^%*=',tdump},\r\n            {'^/=',tdump},\r\n            {'^|=',tdump},\r\n            {'^%^=',tdump},\r\n            {'^::',tdump},\r\n            {'^.',tdump}\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function lexer.get_separated_list(tok,endtoken,delim)\r\n    endtoken = endtoken or ')'\r\n    delim = delim or ','\r\n    local parm_values = {}\r\n    local level = 1 -- used to count ( and )\r\n    local tl = {}\r\n    local function tappend (tl,t,val)\r\n        val = val or t\r\n        append(tl,{t,val})\r\n    end\r\n    local is_end\r\n    if endtoken == '\\n' then\r\n        is_end = function(t,val)\r\n            return t == 'space' and val:find '\\n'\r\n        end\r\n    else\r\n        is_end = function (t)\r\n            return t == endtoken\r\n        end\r\n    end\r\n    local token,value\r\n    while true do\r\n        token,value=tok()\r\n        if not token then return nil,'EOS' end -- end of stream is an error!\r\n        if is_end(token,value) and level == 1 then\r\n            append(parm_values,tl)\r\n            break\r\n        elseif token == '(' then\r\n            level = level + 1\r\n            tappend(tl,'(')\r\n        elseif token == ')' then\r\n            level = level - 1\r\n            if level == 0 then -- finished with parm list\r\n                append(parm_values,tl)\r\n                break\r\n            else\r\n                tappend(tl,')')\r\n            end\r\n        elseif token == delim and level == 1 then\r\n            append(parm_values,tl) -- a new parm\r\n            tl = {}\r\n        else\r\n            tappend(tl,token,value)\r\n        end\r\n    end\r\n    return parm_values,{token,value}\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "endtoken = endtoken or ')'",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "delim = delim or ','",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "local parm_values = {}",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local level = 1",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "local tl = {}",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "local function tappend (tl,t,val)\r\n        val = val or t\r\n        append(tl,{t,val})\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 152,
    "text": "val = val or t",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "append(tl,{t,val})",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "local is_end",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "if endtoken == '\\n' then\r\n        is_end = function(t,val)\r\n            return t == 'space' and val:find '\\n'\r\n        end\r\n    else\r\n        is_end = function (t)\r\n            return t == endtoken\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "is_end = function(t,val)\r\n            return t == 'space' and val:find '\\n'\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "is_end = function (t)\r\n            return t == endtoken\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "local token,value",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "while true do\r\n        token,value=tok()\r\n        if not token then return nil,'EOS' end -- end of stream is an error!\r\n        if is_end(token,value) and level == 1 then\r\n            append(parm_values,tl)\r\n            break\r\n        elseif token == '(' then\r\n            level = level + 1\r\n            tappend(tl,'(')\r\n        elseif token == ')' then\r\n            level = level - 1\r\n            if level == 0 then -- finished with parm list\r\n                append(parm_values,tl)\r\n                break\r\n            else\r\n                tappend(tl,')')\r\n            end\r\n        elseif token == delim and level == 1 then\r\n            append(parm_values,tl) -- a new parm\r\n            tl = {}\r\n        else\r\n            tappend(tl,token,value)\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 160,
    "text": "token,value=tok()",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "if not token then return nil,'EOS' end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "if is_end(token,value) and level == 1 then\r\n            append(parm_values,tl)\r\n            break\r\n        elseif token == '(' then\r\n            level = level + 1\r\n            tappend(tl,'(')\r\n        elseif token == ')' then\r\n            level = level - 1\r\n            if level == 0 then -- finished with parm list\r\n                append(parm_values,tl)\r\n                break\r\n            else\r\n                tappend(tl,')')\r\n            end\r\n        elseif token == delim and level == 1 then\r\n            append(parm_values,tl) -- a new parm\r\n            tl = {}\r\n        else\r\n            tappend(tl,token,value)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "append(parm_values,tl)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "level = level + 1",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "tappend(tl,'(')",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "level = level - 1",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "if level == 0 then -- finished with parm list\r\n                append(parm_values,tl)\r\n                break\r\n            else\r\n                tappend(tl,')')\r\n            end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "tappend(tl,')')",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "tl = {}",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "tappend(tl,token,value)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "local function tappend (tl,t,val)\r\n        val = val or t\r\n        append(tl,{t,val})\r\n    end",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function(t,val)\r\n            return t == 'space' and val:find '\\n'\r\n        end",
    "type": "function"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function (t)\r\n            return t == endtoken\r\n        end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function lexer.skipws (tok)\r\n    local t,v = tok()\r\n    while t == 'space' do\r\n        t,v = tok()\r\n    end\r\n    return t,v\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "local t,v = tok()",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "while t == 'space' do\r\n        t,v = tok()\r\n    end",
    "type": "statement:while"
  }, {
    "id": 181,
    "text": "t,v = tok()",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function lexer.expecting (tok,expected_type,no_skip_ws)\r\n    assert_arg(1,tok,'function')\r\n    assert_arg(2,expected_type,'string')\r\n    local t,v\r\n    if no_skip_ws then\r\n        t,v = tok()\r\n    else\r\n        t,v = skipws(tok)\r\n    end\r\n    if t ~= expected_type then error (\"expecting \"..expected_type,2) end\r\n    return v\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "assert_arg(1,tok,'function')",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert_arg(2,expected_type,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "local t,v",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "if no_skip_ws then\r\n        t,v = tok()\r\n    else\r\n        t,v = skipws(tok)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "t,v = skipws(tok)",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "if t ~= expected_type then error (\"expecting \"..expected_type,2) end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "error (\"expecting \"..expected_type,2)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "",
    "type": "function container"
  }, {
    "id": 193,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 194,
    "text": "append",
    "type": "global function"
  }, {
    "id": 195,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 196,
    "text": "type",
    "type": "global function"
  }, {
    "id": 197,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 198,
    "text": "skipws",
    "type": "global function"
  }, {
    "id": 199,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 200,
    "text": "tok",
    "type": "global function"
  }, {
    "id": 201,
    "text": "a1",
    "type": "global function"
  }, {
    "id": 202,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 203,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 204,
    "text": "error",
    "type": "global function"
  }, {
    "id": 205,
    "text": "scan",
    "type": "global function"
  }, {
    "id": 206,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 207,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "variable container"
  }, {
    "id": 209,
    "text": "",
    "type": "require container"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "n/a"
  }, {
    "id": 216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "string"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "string"
  }, {
    "id": 226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "string"
  }, {
    "id": 228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "string"
  }, {
    "id": 230,
    "text": "",
    "type": "local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "string"
  }, {
    "id": 232,
    "text": "",
    "type": "local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "string"
  }, {
    "id": 234,
    "text": "",
    "type": "local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "string"
  }, {
    "id": 236,
    "text": "",
    "type": "local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "string"
  }, {
    "id": 238,
    "text": "",
    "type": "local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "string"
  }, {
    "id": 240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "string"
  }, {
    "id": 242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "string"
  }, {
    "id": 244,
    "text": "",
    "type": "local variable"
  }, {
    "id": 245,
    "text": "",
    "type": "string"
  }, {
    "id": 246,
    "text": "",
    "type": "local variable"
  }, {
    "id": 247,
    "text": "",
    "type": "string"
  }, {
    "id": 248,
    "text": "",
    "type": "local variable"
  }, {
    "id": 249,
    "text": "",
    "type": "string"
  }, {
    "id": 250,
    "text": "",
    "type": "local variable"
  }, {
    "id": 251,
    "text": "",
    "type": "local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "n/a"
  }, {
    "id": 257,
    "text": "",
    "type": "interface container"
  }, {
    "id": 258,
    "text": "",
    "type": "interface"
  }, {
    "id": 259,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "require local variable"
  } ]
}