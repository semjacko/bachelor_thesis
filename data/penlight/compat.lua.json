{
  "_filename": "compat.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/compat.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 5
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 17
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 5
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "calls",
    "to": 46
  }, {
    "from": 28,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 36,
    "label": "calls",
    "to": 56
  }, {
    "from": 7,
    "label": "calls",
    "to": 53
  }, {
    "from": 7,
    "label": "calls",
    "to": 52
  }, {
    "from": 16,
    "label": "calls",
    "to": 52
  }, {
    "from": 28,
    "label": "calls",
    "to": 52
  }, {
    "from": 16,
    "label": "calls",
    "to": 47
  }, {
    "from": 7,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 16,
    "label": "calls",
    "to": 58
  }, {
    "from": 7,
    "label": "calls",
    "to": 48
  }, {
    "from": 34,
    "label": "calls",
    "to": 55
  }, {
    "from": 16,
    "label": "calls",
    "to": 50
  }, {
    "from": 28,
    "label": "calls",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 45,
    "label": "declares",
    "to": 2
  }, {
    "from": 45,
    "label": "declares",
    "to": 7
  }, {
    "from": 45,
    "label": "declares",
    "to": 16
  }, {
    "from": 45,
    "label": "declares",
    "to": 28
  }, {
    "from": 45,
    "label": "declares",
    "to": 34
  }, {
    "from": 45,
    "label": "declares",
    "to": 36
  }, {
    "from": 45,
    "label": "declares",
    "to": 44
  }, {
    "from": 1,
    "label": "declares",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 60,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 60,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 1,
    "label": "provides",
    "to": 66
  }, {
    "from": 59,
    "label": "represents",
    "to": 67
  }, {
    "from": 66,
    "label": "provides",
    "to": 67
  }, {
    "from": 68,
    "label": "requires",
    "to": 1
  }, {
    "from": 69,
    "label": "requires",
    "to": 1
  }, {
    "from": 62,
    "label": "contains",
    "to": 2
  }, {
    "from": 62,
    "label": "contains",
    "to": 7
  }, {
    "from": 62,
    "label": "contains",
    "to": 16
  }, {
    "from": 62,
    "label": "contains",
    "to": 28
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 44
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "compat",
    "type": "module"
  }, {
    "id": 2,
    "text": "function compat.execute (cmd)\r\n    local res1,res2,res2 = os.execute(cmd)\r\n    if compat.lua51 then\r\n        return res1==0,res1\r\n    else\r\n        return not not res1,res2\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local res1,res2,res2 = os.execute(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if compat.lua51 then\r\n        return res1==0,res1\r\n    else\r\n        return not not res1,res2\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function compat.load(str,src,mode,env)\r\n            local chunk,err\r\n            if type(str) == 'string' then\r\n                if str:byte(1) == 27 and not (mode or 'bt'):find 'b' then\r\n                    return nil,\"attempt to load a binary chunk\"\r\n                end\r\n                chunk,err = loadstring(str,src)\r\n            else\r\n                chunk,err = lua51_load(str,src)\r\n            end\r\n            if chunk and env then setfenv(chunk,env) end\r\n            return chunk,err\r\n        end",
    "type": "function"
  }, {
    "id": 8,
    "text": "local chunk,err",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if type(str) == 'string' then\r\n                if str:byte(1) == 27 and not (mode or 'bt'):find 'b' then\r\n                    return nil,\"attempt to load a binary chunk\"\r\n                end\r\n                chunk,err = loadstring(str,src)\r\n            else\r\n                chunk,err = lua51_load(str,src)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "if str:byte(1) == 27 and not (mode or 'bt'):find 'b' then\r\n                    return nil,\"attempt to load a binary chunk\"\r\n                end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "chunk,err = loadstring(str,src)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "chunk,err = lua51_load(str,src)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if chunk and env then setfenv(chunk,env) end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "setfenv(chunk,env)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function compat.setfenv(f, t)\r\n        f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)\r\n        local name\r\n        local up = 0\r\n        repeat\r\n            up = up + 1\r\n            name = debug.getupvalue(f, up)\r\n        until name == '_ENV' or name == nil\r\n        if name then\r\n            debug.upvaluejoin(f, up, function() return name end, 1) -- use unique upvalue\r\n            debug.setupvalue(f, up, t)\r\n        end\r\n        if f ~= 0 then return f end\r\n    end",
    "type": "function"
  }, {
    "id": 17,
    "text": "f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local up = 0",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "repeat\r\n            up = up + 1\r\n            name = debug.getupvalue(f, up)\r\n        until name == '_ENV' or name == nil",
    "type": "statement:repeat"
  }, {
    "id": 21,
    "text": "up = up + 1",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "name = debug.getupvalue(f, up)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if name then\r\n            debug.upvaluejoin(f, up, function() return name end, 1) -- use unique upvalue\r\n            debug.setupvalue(f, up, t)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "debug.upvaluejoin(f, up, function() return name end, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "debug.setupvalue(f, up, t)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "if f ~= 0 then return f end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function compat.getfenv(f)\r\n        local f = f or 0\r\n        f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)\r\n        local name, val\r\n        local up = 0\r\n        repeat\r\n            up = up + 1\r\n            name, val = debug.getupvalue(f, up)\r\n        until name == '_ENV' or name == nil\r\n        return val\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local f = f or 0",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local name, val",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "repeat\r\n            up = up + 1\r\n            name, val = debug.getupvalue(f, up)\r\n        until name == '_ENV' or name == nil",
    "type": "statement:repeat"
  }, {
    "id": 32,
    "text": "name, val = debug.getupvalue(f, up)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function table.pack (...)\r\n        return {n=select('#',...); ...}\r\n    end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function package.searchpath (mod,path)\r\n        mod = mod:gsub('%.',sep)\r\n        for m in path:gmatch('[^;]+') do\r\n            local nm = m:gsub('?',mod)\r\n            local f = io.open(nm,'r')\r\n            if f then f:close(); return nm end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 37,
    "text": "mod = mod:gsub('%.',sep)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "for m in path:gmatch('[^;]+') do\r\n            local nm = m:gsub('?',mod)\r\n            local f = io.open(nm,'r')\r\n            if f then f:close(); return nm end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "local nm = m:gsub('?',mod)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local f = io.open(nm,'r')",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if f then f:close(); return nm end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function() return name end",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "function container"
  }, {
    "id": 46,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 47,
    "text": "upvaluejoin",
    "type": "global function"
  }, {
    "id": 48,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 49,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 50,
    "text": "getupvalue",
    "type": "global function"
  }, {
    "id": 51,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 52,
    "text": "type",
    "type": "global function"
  }, {
    "id": 53,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 54,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 55,
    "text": "select",
    "type": "global function"
  }, {
    "id": 56,
    "text": "open",
    "type": "global function"
  }, {
    "id": 57,
    "text": "lua51_load",
    "type": "global function"
  }, {
    "id": 58,
    "text": "setupvalue",
    "type": "global function"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "variable container"
  }, {
    "id": 61,
    "text": "",
    "type": "require container"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "interface container"
  }, {
    "id": 67,
    "text": "",
    "type": "interface"
  }, {
    "id": 68,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  } ]
}