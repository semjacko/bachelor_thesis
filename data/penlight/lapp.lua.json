{
  "_filename": "lapp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/lapp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 8,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 66,
    "label": "has",
    "to": 84
  }, {
    "from": 66,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 3
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 90,
    "label": "has",
    "to": 98
  }, {
    "from": 90,
    "label": "has",
    "to": 99
  }, {
    "from": 90,
    "label": "has",
    "to": 100
  }, {
    "from": 90,
    "label": "has",
    "to": 101
  }, {
    "from": 90,
    "label": "has",
    "to": 102
  }, {
    "from": 85,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 107,
    "label": "has",
    "to": 114
  }, {
    "from": 107,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 119,
    "label": "has",
    "to": 126
  }, {
    "from": 119,
    "label": "has",
    "to": 127
  }, {
    "from": 119,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 107,
    "label": "has",
    "to": 130
  }, {
    "from": 107,
    "label": "has",
    "to": 131
  }, {
    "from": 107,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 107,
    "label": "has",
    "to": 134
  }, {
    "from": 107,
    "label": "has",
    "to": 135
  }, {
    "from": 103,
    "label": "has",
    "to": 136
  }, {
    "from": 103,
    "label": "has",
    "to": 137
  }, {
    "from": 103,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 138,
    "label": "has",
    "to": 144
  }, {
    "from": 103,
    "label": "has",
    "to": 145
  }, {
    "from": 66,
    "label": "has",
    "to": 146
  }, {
    "from": 66,
    "label": "has",
    "to": 147
  }, {
    "from": 66,
    "label": "has",
    "to": 148
  }, {
    "from": 66,
    "label": "has",
    "to": 149
  }, {
    "from": 66,
    "label": "has",
    "to": 150
  }, {
    "from": 66,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 151,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 86
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 159,
    "label": "has",
    "to": 164
  }, {
    "from": 157,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 166,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 170,
    "label": "has",
    "to": 177
  }, {
    "from": 165,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 165,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 165,
    "label": "has",
    "to": 182
  }, {
    "from": 165,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 183,
    "label": "has",
    "to": 187
  }, {
    "from": 183,
    "label": "has",
    "to": 188
  }, {
    "from": 165,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 165,
    "label": "has",
    "to": 191
  }, {
    "from": 157,
    "label": "has",
    "to": 188
  }, {
    "from": 157,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 157,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 162
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 194,
    "label": "has",
    "to": 198
  }, {
    "from": 194,
    "label": "has",
    "to": 199
  }, {
    "from": 157,
    "label": "has",
    "to": 200
  }, {
    "from": 157,
    "label": "has",
    "to": 201
  }, {
    "from": 157,
    "label": "has",
    "to": 202
  }, {
    "from": 157,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 157,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 157,
    "label": "has",
    "to": 162
  }, {
    "from": 157,
    "label": "has",
    "to": 207
  }, {
    "from": 66,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 209,
    "label": "has",
    "to": 212
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 213
  }, {
    "from": 214,
    "label": "has",
    "to": 76
  }, {
    "from": 214,
    "label": "has",
    "to": 3
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 78
  }, {
    "from": 216,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 3
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 123
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 222,
    "label": "has",
    "to": 129
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 152
  }, {
    "from": 224,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 224,
    "label": "has",
    "to": 3
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 3
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 250
  }, {
    "from": 66,
    "label": "calls",
    "to": 216
  }, {
    "from": 66,
    "label": "calls",
    "to": 216
  }, {
    "from": 66,
    "label": "calls",
    "to": 216
  }, {
    "from": 41,
    "label": "calls",
    "to": 249
  }, {
    "from": 66,
    "label": "calls",
    "to": 53
  }, {
    "from": 218,
    "label": "calls",
    "to": 246
  }, {
    "from": 66,
    "label": "calls",
    "to": 246
  }, {
    "from": 66,
    "label": "calls",
    "to": 246
  }, {
    "from": 66,
    "label": "calls",
    "to": 246
  }, {
    "from": 66,
    "label": "calls",
    "to": 246
  }, {
    "from": 66,
    "label": "calls",
    "to": 246
  }, {
    "from": 66,
    "label": "calls",
    "to": 246
  }, {
    "from": 229,
    "label": "calls",
    "to": 240
  }, {
    "from": 23,
    "label": "calls",
    "to": 17
  }, {
    "from": 29,
    "label": "calls",
    "to": 17
  }, {
    "from": 36,
    "label": "calls",
    "to": 17
  }, {
    "from": 66,
    "label": "calls",
    "to": 17
  }, {
    "from": 66,
    "label": "calls",
    "to": 17
  }, {
    "from": 66,
    "label": "calls",
    "to": 17
  }, {
    "from": 66,
    "label": "calls",
    "to": 17
  }, {
    "from": 66,
    "label": "calls",
    "to": 56
  }, {
    "from": 66,
    "label": "calls",
    "to": 218
  }, {
    "from": 66,
    "label": "calls",
    "to": 218
  }, {
    "from": 66,
    "label": "calls",
    "to": 218
  }, {
    "from": 66,
    "label": "calls",
    "to": 218
  }, {
    "from": 23,
    "label": "calls",
    "to": 241
  }, {
    "from": 216,
    "label": "calls",
    "to": 241
  }, {
    "from": 66,
    "label": "calls",
    "to": 241
  }, {
    "from": 66,
    "label": "calls",
    "to": 5
  }, {
    "from": 66,
    "label": "calls",
    "to": 5
  }, {
    "from": 66,
    "label": "calls",
    "to": 5
  }, {
    "from": 229,
    "label": "calls",
    "to": 247
  }, {
    "from": 66,
    "label": "calls",
    "to": 224
  }, {
    "from": 66,
    "label": "calls",
    "to": 224
  }, {
    "from": 17,
    "label": "calls",
    "to": 8
  }, {
    "from": 66,
    "label": "calls",
    "to": 8
  }, {
    "from": 66,
    "label": "calls",
    "to": 2
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 66,
    "label": "calls",
    "to": 4
  }, {
    "from": 229,
    "label": "calls",
    "to": 239
  }, {
    "from": 66,
    "label": "calls",
    "to": 253
  }, {
    "from": 23,
    "label": "calls",
    "to": 251
  }, {
    "from": 66,
    "label": "calls",
    "to": 33
  }, {
    "from": 41,
    "label": "calls",
    "to": 244
  }, {
    "from": 33,
    "label": "calls",
    "to": 29
  }, {
    "from": 53,
    "label": "calls",
    "to": 29
  }, {
    "from": 66,
    "label": "calls",
    "to": 29
  }, {
    "from": 66,
    "label": "calls",
    "to": 29
  }, {
    "from": 66,
    "label": "calls",
    "to": 6
  }, {
    "from": 66,
    "label": "calls",
    "to": 6
  }, {
    "from": 41,
    "label": "calls",
    "to": 23
  }, {
    "from": 66,
    "label": "calls",
    "to": 41
  }, {
    "from": 36,
    "label": "calls",
    "to": 252
  }, {
    "from": 56,
    "label": "calls",
    "to": 252
  }, {
    "from": 66,
    "label": "calls",
    "to": 243
  }, {
    "from": 41,
    "label": "calls",
    "to": 36
  }, {
    "from": 229,
    "label": "calls",
    "to": 66
  }, {
    "from": 229,
    "label": "calls",
    "to": 255
  }, {
    "from": 66,
    "label": "calls",
    "to": 226
  }, {
    "from": 66,
    "label": "calls",
    "to": 226
  }, {
    "from": 8,
    "label": "calls",
    "to": 254
  }, {
    "from": 216,
    "label": "calls",
    "to": 248
  }, {
    "from": 66,
    "label": "calls",
    "to": 248
  }, {
    "from": 229,
    "label": "calls",
    "to": 245
  }, {
    "from": 224,
    "label": "calls",
    "to": 242
  }, {
    "from": 66,
    "label": "calls",
    "to": 242
  }, {
    "from": 66,
    "label": "calls",
    "to": 242
  }, {
    "from": 66,
    "label": "calls",
    "to": 214
  }, {
    "from": 1,
    "label": "contains",
    "to": 229
  }, {
    "from": 229,
    "label": "declares",
    "to": 2
  }, {
    "from": 229,
    "label": "declares",
    "to": 4
  }, {
    "from": 229,
    "label": "declares",
    "to": 5
  }, {
    "from": 229,
    "label": "declares",
    "to": 6
  }, {
    "from": 229,
    "label": "declares",
    "to": 7
  }, {
    "from": 229,
    "label": "declares",
    "to": 8
  }, {
    "from": 229,
    "label": "declares",
    "to": 17
  }, {
    "from": 229,
    "label": "declares",
    "to": 23
  }, {
    "from": 229,
    "label": "declares",
    "to": 29
  }, {
    "from": 229,
    "label": "declares",
    "to": 33
  }, {
    "from": 229,
    "label": "declares",
    "to": 36
  }, {
    "from": 229,
    "label": "declares",
    "to": 41
  }, {
    "from": 229,
    "label": "declares",
    "to": 50
  }, {
    "from": 229,
    "label": "declares",
    "to": 53
  }, {
    "from": 229,
    "label": "declares",
    "to": 56
  }, {
    "from": 229,
    "label": "declares",
    "to": 66
  }, {
    "from": 229,
    "label": "declares",
    "to": 214
  }, {
    "from": 229,
    "label": "declares",
    "to": 216
  }, {
    "from": 229,
    "label": "declares",
    "to": 218
  }, {
    "from": 229,
    "label": "declares",
    "to": 220
  }, {
    "from": 229,
    "label": "declares",
    "to": 222
  }, {
    "from": 229,
    "label": "declares",
    "to": 224
  }, {
    "from": 229,
    "label": "declares",
    "to": 226
  }, {
    "from": 229,
    "label": "declares",
    "to": 228
  }, {
    "from": 1,
    "label": "declares",
    "to": 243
  }, {
    "from": 1,
    "label": "contains",
    "to": 256
  }, {
    "from": 1,
    "label": "contains",
    "to": 257
  }, {
    "from": 256,
    "label": "initializes",
    "to": 258
  }, {
    "from": 258,
    "label": "assigns",
    "to": 259
  }, {
    "from": 256,
    "label": "initializes",
    "to": 260
  }, {
    "from": 256,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 256,
    "label": "initializes",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 256,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 256,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 256,
    "label": "initializes",
    "to": 269
  }, {
    "from": 256,
    "label": "initializes",
    "to": 270
  }, {
    "from": 256,
    "label": "initializes",
    "to": 271
  }, {
    "from": 256,
    "label": "initializes",
    "to": 272
  }, {
    "from": 256,
    "label": "initializes",
    "to": 273
  }, {
    "from": 256,
    "label": "initializes",
    "to": 274
  }, {
    "from": 256,
    "label": "initializes",
    "to": 275
  }, {
    "from": 256,
    "label": "initializes",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 277,
    "label": "assigns",
    "to": 280
  }, {
    "from": 280,
    "label": "assigns",
    "to": 281
  }, {
    "from": 277,
    "label": "assigns",
    "to": 282
  }, {
    "from": 282,
    "label": "assigns",
    "to": 283
  }, {
    "from": 256,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 256,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 288,
    "label": "assigns",
    "to": 289
  }, {
    "from": 287,
    "label": "assigns",
    "to": 290
  }, {
    "from": 290,
    "label": "assigns",
    "to": 291
  }, {
    "from": 287,
    "label": "assigns",
    "to": 292
  }, {
    "from": 292,
    "label": "assigns",
    "to": 293
  }, {
    "from": 287,
    "label": "assigns",
    "to": 294
  }, {
    "from": 294,
    "label": "assigns",
    "to": 295
  }, {
    "from": 287,
    "label": "assigns",
    "to": 296
  }, {
    "from": 296,
    "label": "assigns",
    "to": 297
  }, {
    "from": 256,
    "label": "initializes",
    "to": 298
  }, {
    "from": 256,
    "label": "initializes",
    "to": 299
  }, {
    "from": 1,
    "label": "provides",
    "to": 300
  }, {
    "from": 267,
    "label": "represents",
    "to": 301
  }, {
    "from": 300,
    "label": "provides",
    "to": 301
  }, {
    "from": 260,
    "label": "represents",
    "to": 302
  }, {
    "from": 284,
    "label": "represents",
    "to": 303
  }, {
    "from": 304,
    "label": "requires",
    "to": 1
  }, {
    "from": 267,
    "label": "contains",
    "to": 8
  }, {
    "from": 267,
    "label": "contains",
    "to": 17
  }, {
    "from": 267,
    "label": "contains",
    "to": 23
  }, {
    "from": 267,
    "label": "contains",
    "to": 29
  }, {
    "from": 267,
    "label": "contains",
    "to": 50
  }, {
    "from": 267,
    "label": "contains",
    "to": 66
  }, {
    "from": 284,
    "label": "contains",
    "to": 230
  }, {
    "from": 284,
    "label": "contains",
    "to": 231
  }, {
    "from": 284,
    "label": "contains",
    "to": 232
  }, {
    "from": 284,
    "label": "contains",
    "to": 233
  }, {
    "from": 284,
    "label": "contains",
    "to": 234
  }, {
    "from": 284,
    "label": "contains",
    "to": 235
  }, {
    "from": 284,
    "label": "contains",
    "to": 236
  }, {
    "from": 284,
    "label": "contains",
    "to": 237
  }, {
    "from": 267,
    "label": "contains",
    "to": 238
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lapp",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function lines(s) return s:gmatch('([^\\n]*)\\n') end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "local function lstrip(str)  return str:gsub('^%s+','')  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function strip(str)  return lstrip(str):gsub('%s+$','') end",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function at(s,k)  return s:sub(k,k) end",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function isdigit(s) return s:find('^%d+$') == 1 end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function lapp.quit(msg,no_usage)\r\n    if no_usage == 'throw' then\r\n        error(msg)\r\n    end\r\n    if msg then\r\n        io.stderr:write(msg..'\\n\\n')\r\n    end\r\n    if not no_usage then\r\n        io.stderr:write(usage)\r\n    end\r\n    os.exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if no_usage == 'throw' then\r\n        error(msg)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "error(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "if msg then\r\n        io.stderr:write(msg..'\\n\\n')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "io.stderr:write(msg..'\\n\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if not no_usage then\r\n        io.stderr:write(usage)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "io.stderr:write(usage)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function lapp.error(msg,no_usage)\r\n    if not lapp.show_usage_error then\r\n        no_usage = true\r\n    elseif lapp.show_usage_error == 'throw' then\r\n        no_usage = 'throw'\r\n    end\r\n    lapp.quit(script..': '..msg,no_usage)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if not lapp.show_usage_error then\r\n        no_usage = true\r\n    elseif lapp.show_usage_error == 'throw' then\r\n        no_usage = 'throw'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "no_usage = true",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "no_usage = 'throw'",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "lapp.quit(script..': '..msg,no_usage)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function lapp.open (file,opt)\r\n    local val,err = io.open(file,opt)\r\n    if not val then lapp.error(err,true) end\r\n    append(open_files,val)\r\n    return val\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local val,err = io.open(file,opt)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if not val then lapp.error(err,true) end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "lapp.error(err,true)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "append(open_files,val)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function lapp.assert(condn,msg)\r\n    if not condn then\r\n        lapp.error(msg)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "if not condn then\r\n        lapp.error(msg)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "lapp.error(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function range_check(x,min,max,parm)\r\n    lapp.assert(min <= x and max >= x,parm..' out of range')\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "lapp.assert(min <= x and max >= x,parm..' out of range')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function xtonumber(s)\r\n    local val = tonumber(s)\r\n    if not val then lapp.error(\"unable to convert to number: \"..s) end\r\n    return val\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local val = tonumber(s)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if not val then lapp.error(\"unable to convert to number: \"..s) end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "lapp.error(\"unable to convert to number: \"..s)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function convert_parameter(ps,val)\r\n    if ps.converter then\r\n        val = ps.converter(val)\r\n    end\r\n    if ps.type == 'number' then\r\n        val = xtonumber(val)\r\n    elseif builtin_types[ps.type] == 'file' then\r\n        val = lapp.open(val,(ps.type == 'file-in' and 'r') or 'w' )\r\n    elseif ps.type == 'boolean' then\r\n        return val\r\n    end\r\n    if ps.constraint then\r\n        ps.constraint(val)\r\n    end\r\n    return val\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if ps.converter then\r\n        val = ps.converter(val)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "val = ps.converter(val)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if ps.type == 'number' then\r\n        val = xtonumber(val)\r\n    elseif builtin_types[ps.type] == 'file' then\r\n        val = lapp.open(val,(ps.type == 'file-in' and 'r') or 'w' )\r\n    elseif ps.type == 'boolean' then\r\n        return val\r\n    end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "val = xtonumber(val)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "val = lapp.open(val,(ps.type == 'file-in' and 'r') or 'w' )",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if ps.constraint then\r\n        ps.constraint(val)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "ps.constraint(val)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function lapp.add_type (name,converter,constraint)\r\n    types[name] = {converter=converter,constraint=constraint}\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "types[name] = {converter=converter,constraint=constraint}",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function force_short(short)\r\n    lapp.assert(#short==1,short..\": short parameters should be one character\")\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "lapp.assert(#short==1,short..\": short parameters should be one character\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function process_default (sval,vtype)\r\n    local val\r\n    if not vtype or vtype == 'number' then\r\n        val = tonumber(sval)\r\n    end\r\n    if val then -- we have a number!\r\n        return val,'number'\r\n    elseif filetypes[sval] then\r\n        local ft = filetypes[sval]\r\n        return ft[1],ft[2]\r\n    else\r\n        if sval == 'true' and not vtype then\r\n            return true, 'boolean'\r\n        end\r\n        if sval:match '^[\"\\']' then sval = sval:sub(2,-2) end\r\n        return sval,vtype or 'string'\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local val",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if not vtype or vtype == 'number' then\r\n        val = tonumber(sval)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "val = tonumber(sval)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if val then -- we have a number!\r\n        return val,'number'\r\n    elseif filetypes[sval] then\r\n        local ft = filetypes[sval]\r\n        return ft[1],ft[2]\r\n    else\r\n        if sval == 'true' and not vtype then\r\n            return true, 'boolean'\r\n        end\r\n        if sval:match '^[\"\\']' then sval = sval:sub(2,-2) end\r\n        return sval,vtype or 'string'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "local ft = filetypes[sval]",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if sval == 'true' and not vtype then\r\n            return true, 'boolean'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "if sval:match '^[\"\\']' then sval = sval:sub(2,-2) end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "sval = sval:sub(2,-2)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function lapp.process_options_string(str,args)\r\n    local results = {}\r\n    local opts = {at_start=true}\r\n    local varargs\r\n    local arg = args or _G.arg\r\n    open_files = {}\r\n    parms = {}\r\n    aliases = {}\r\n    parmlist = {}\r\n\r\n    local function check_varargs(s)\r\n        local res,cnt = s:gsub('^%.%.%.%s*','')\r\n        return res, (cnt > 0)\r\n    end\r\n\r\n    local function set_result(ps,parm,val)\r\n        parm = type(parm) == \"string\" and parm:gsub(\"%W\", \"_\") or parm -- so foo-bar becomes foo_bar in Lua\r\n        if not ps.varargs then\r\n            results[parm] = val\r\n        else\r\n            if not results[parm] then\r\n                results[parm] = { val }\r\n            else\r\n                append(results[parm],val)\r\n            end\r\n        end\r\n    end\r\n\r\n    usage = str\r\n\r\n    for line in lines(str) do\r\n        local res = {}\r\n        local optspec,optparm,i1,i2,defval,vtype,constraint,rest\r\n        line = lstrip(line)\r\n        local function check(str)\r\n            return match(str,line,res)\r\n        end\r\n\r\n        -- flags: either '-<short>', '-<short>,--<long>' or '--<long>'\r\n        if check '-$v{short}, --$o{long} $' or check '-$v{short} $' or check '--$o{long} $' then\r\n            if res.long then\r\n                optparm = res.long:gsub('[^%w%-]','_')  -- I'm not sure the $o pattern will let anything else through?\r\n                if res.short then aliases[res.short] = optparm  end\r\n            else\r\n                optparm = res.short\r\n            end\r\n            if res.short and not lapp.slack then force_short(res.short) end\r\n            res.rest, varargs = check_varargs(res.rest)\r\n        elseif check '$<{name} $'  then -- is it <parameter_name>?\r\n            -- so <input file...> becomes input_file ...\r\n            optparm,rest = res.name:match '([^%.]+)(.*)'\r\n            optparm = optparm:gsub('%A','_')\r\n            varargs = rest == '...'\r\n            append(parmlist,optparm)\r\n        end\r\n        -- this is not a pure doc line and specifies the flag/parameter type\r\n        if res.rest then\r\n            line = res.rest\r\n            res = {}\r\n            local optional\r\n            -- do we have ([optional] [<type>] [default <val>])?\r\n            if match('$({def} $',line,res) or match('$({def}',line,res) then\r\n                local typespec = strip(res.def)\r\n                local ftype, rest = typespec:match('^(%S+)(.*)$')\r\n                rest = strip(rest)\r\n                if ftype == 'optional' then\r\n                    ftype, rest = rest:match('^(%S+)(.*)$')\r\n                    rest = strip(rest)\r\n                    optional = true\r\n                end\r\n                local default\r\n                if ftype == 'default' then\r\n                    default = true\r\n                    if rest == '' then lapp.error(\"value must follow default\") end\r\n                else -- a type specification\r\n                    if match('$f{min}..$f{max}',ftype,res) then\r\n                        -- a numerical range like 1..10\r\n                        local min,max = res.min,res.max\r\n                        vtype = 'number'\r\n                        constraint = function(x)\r\n                            range_check(x,min,max,optparm)\r\n                        end\r\n                    elseif not ftype:match '|' then -- plain type\r\n                        vtype = ftype\r\n                    else\r\n                        -- 'enum' type is a string which must belong to\r\n                        -- one of several distinct values\r\n                        local enums = ftype\r\n                        local enump = '|' .. enums .. '|'\r\n                        vtype = 'string'\r\n                        constraint = function(s)\r\n                            lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )\r\n                        end\r\n                    end\r\n                end\r\n                res.rest = rest\r\n                typespec = res.rest\r\n                -- optional 'default value' clause. Type is inferred as\r\n                -- 'string' or 'number' if there's no explicit type\r\n                if default or match('default $r{rest}',typespec,res) then\r\n                    defval,vtype = process_default(res.rest,vtype)\r\n                end\r\n            else -- must be a plain flag, no extra parameter required\r\n                defval = false\r\n                vtype = 'boolean'\r\n            end\r\n            local ps = {\r\n                type = vtype,\r\n                defval = defval,\r\n                required = defval == nil and not optional,\r\n                comment = res.rest or optparm,\r\n                constraint = constraint,\r\n                varargs = varargs\r\n            }\r\n            varargs = nil\r\n            if types[vtype] then\r\n                local converter = types[vtype].converter\r\n                if type(converter) == 'string' then\r\n                    ps.type = converter\r\n                else\r\n                    ps.converter = converter\r\n                end\r\n                ps.constraint = types[vtype].constraint\r\n            elseif not builtin_types[vtype] then\r\n                lapp.error(vtype..\" is unknown type\")\r\n            end\r\n            parms[optparm] = ps\r\n        end\r\n    end\r\n    -- cool, we have our parms, let's parse the command line args\r\n    local iparm = 1\r\n    local iextra = 1\r\n    local i = 1\r\n    local parm,ps,val\r\n    local end_of_flags = false\r\n\r\n    local function check_parm (parm)\r\n        local eqi = parm:find '='\r\n        if eqi then\r\n            tinsert(arg,i+1,parm:sub(eqi+1))\r\n            parm = parm:sub(1,eqi-1)\r\n        end\r\n        return parm,eqi\r\n    end\r\n\r\n    local function is_flag (parm)\r\n        return parms[aliases[parm] or parm]\r\n    end\r\n\r\n    while i <= #arg do\r\n        local theArg = arg[i]\r\n        local res = {}\r\n        -- after '--' we don't parse args and they end up in \r\n        -- the array part of the result (args[1] etc)\r\n        if theArg == '--' then\r\n            end_of_flags = true\r\n            iparm = #parmlist + 1\r\n            i = i + 1\r\n            theArg = arg[i]\r\n            if not theArg then\r\n                break\r\n            end\r\n        end\r\n        -- look for a flag, -<short flags> or --<long flag>\r\n        if not end_of_flags and (match('--$S{long}',theArg,res) or match('-$S{short}',theArg,res)) then\r\n            if res.long then -- long option\r\n                parm = check_parm(res.long)\r\n            elseif #res.short == 1 or is_flag(res.short) then\r\n                parm = res.short\r\n            else\r\n                local parmstr,eq = check_parm(res.short)\r\n                if not eq then\r\n                    parm = at(parmstr,1)\r\n                    local flag = is_flag(parm)\r\n                    if flag and flag.type ~= 'boolean' then\r\n                    --if isdigit(at(parmstr,2)) then\r\n                        -- a short option followed by a digit is an exception (for AW;))\r\n                        -- push ahead into the arg array\r\n                        tinsert(arg,i+1,parmstr:sub(2))\r\n                    else\r\n                        -- push multiple flags into the arg array!\r\n                        for k = 2,#parmstr do\r\n                            tinsert(arg,i+k-1,'-'..at(parmstr,k))\r\n                        end\r\n                    end\r\n                else\r\n                    parm = parmstr\r\n                end\r\n            end\r\n            if aliases[parm] then parm = aliases[parm] end\r\n            if not parms[parm] and (parm == 'h' or parm == 'help') then\r\n                lapp.quit()\r\n            end\r\n        else -- a parameter\r\n            parm = parmlist[iparm]\r\n            if not parm then\r\n               -- extra unnamed parameters are indexed starting at 1\r\n               parm = iextra\r\n               ps = { type = 'string' }\r\n               parms[parm] = ps\r\n               iextra = iextra + 1\r\n            else\r\n                ps = parms[parm]\r\n            end\r\n            if not ps.varargs then\r\n                iparm = iparm + 1\r\n            end\r\n            val = theArg\r\n        end\r\n        ps = parms[parm]\r\n        if not ps then lapp.error(\"unrecognized parameter: \"..parm) end\r\n        if ps.type ~= 'boolean' then -- we need a value! This should follow\r\n            if not val then\r\n                i = i + 1\r\n                val = arg[i]\r\n                theArg = val\r\n            end\r\n            lapp.assert(val,parm..\" was expecting a value\")\r\n        else -- toggle boolean flags (usually false -> true)\r\n            val = not ps.defval\r\n        end\r\n        ps.used = true\r\n        val = convert_parameter(ps,val)\r\n        set_result(ps,parm,val)\r\n        if builtin_types[ps.type] == 'file' then\r\n            set_result(ps,parm..'_name',theArg)\r\n        end\r\n        if lapp.callback then\r\n            lapp.callback(parm,theArg,res)\r\n        end\r\n        i = i + 1\r\n        val = nil\r\n    end\r\n    -- check unused parms, set defaults and check if any required parameters were missed\r\n    for parm,ps in pairs(parms) do\r\n        if not ps.used then\r\n            if ps.required then lapp.error(\"missing required parameter: \"..parm) end\r\n            set_result(ps,parm,ps.defval)\r\n        end\r\n    end\r\n    return results\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local opts = {at_start=true}",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local varargs",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local arg = args or _G.arg",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "open_files = {}",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "parms = {}",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "aliases = {}",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "parmlist = {}",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "local function check_varargs(s)\r\n        local res,cnt = s:gsub('^%.%.%.%s*','')\r\n        return res, (cnt > 0)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 76,
    "text": "local res,cnt = s:gsub('^%.%.%.%s*','')",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local function set_result(ps,parm,val)\r\n        parm = type(parm) == \"string\" and parm:gsub(\"%W\", \"_\") or parm -- so foo-bar becomes foo_bar in Lua\r\n        if not ps.varargs then\r\n            results[parm] = val\r\n        else\r\n            if not results[parm] then\r\n                results[parm] = { val }\r\n            else\r\n                append(results[parm],val)\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 78,
    "text": "parm = type(parm) == \"string\" and parm:gsub(\"%W\", \"_\") or parm",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if not ps.varargs then\r\n            results[parm] = val\r\n        else\r\n            if not results[parm] then\r\n                results[parm] = { val }\r\n            else\r\n                append(results[parm],val)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "results[parm] = val",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if not results[parm] then\r\n                results[parm] = { val }\r\n            else\r\n                append(results[parm],val)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "results[parm] = { val }",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "append(results[parm],val)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "usage = str",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "for line in lines(str) do\r\n        local res = {}\r\n        local optspec,optparm,i1,i2,defval,vtype,constraint,rest\r\n        line = lstrip(line)\r\n        local function check(str)\r\n            return match(str,line,res)\r\n        end\r\n\r\n        -- flags: either '-<short>', '-<short>,--<long>' or '--<long>'\r\n        if check '-$v{short}, --$o{long} $' or check '-$v{short} $' or check '--$o{long} $' then\r\n            if res.long then\r\n                optparm = res.long:gsub('[^%w%-]','_')  -- I'm not sure the $o pattern will let anything else through?\r\n                if res.short then aliases[res.short] = optparm  end\r\n            else\r\n                optparm = res.short\r\n            end\r\n            if res.short and not lapp.slack then force_short(res.short) end\r\n            res.rest, varargs = check_varargs(res.rest)\r\n        elseif check '$<{name} $'  then -- is it <parameter_name>?\r\n            -- so <input file...> becomes input_file ...\r\n            optparm,rest = res.name:match '([^%.]+)(.*)'\r\n            optparm = optparm:gsub('%A','_')\r\n            varargs = rest == '...'\r\n            append(parmlist,optparm)\r\n        end\r\n        -- this is not a pure doc line and specifies the flag/parameter type\r\n        if res.rest then\r\n            line = res.rest\r\n            res = {}\r\n            local optional\r\n            -- do we have ([optional] [<type>] [default <val>])?\r\n            if match('$({def} $',line,res) or match('$({def}',line,res) then\r\n                local typespec = strip(res.def)\r\n                local ftype, rest = typespec:match('^(%S+)(.*)$')\r\n                rest = strip(rest)\r\n                if ftype == 'optional' then\r\n                    ftype, rest = rest:match('^(%S+)(.*)$')\r\n                    rest = strip(rest)\r\n                    optional = true\r\n                end\r\n                local default\r\n                if ftype == 'default' then\r\n                    default = true\r\n                    if rest == '' then lapp.error(\"value must follow default\") end\r\n                else -- a type specification\r\n                    if match('$f{min}..$f{max}',ftype,res) then\r\n                        -- a numerical range like 1..10\r\n                        local min,max = res.min,res.max\r\n                        vtype = 'number'\r\n                        constraint = function(x)\r\n                            range_check(x,min,max,optparm)\r\n                        end\r\n                    elseif not ftype:match '|' then -- plain type\r\n                        vtype = ftype\r\n                    else\r\n                        -- 'enum' type is a string which must belong to\r\n                        -- one of several distinct values\r\n                        local enums = ftype\r\n                        local enump = '|' .. enums .. '|'\r\n                        vtype = 'string'\r\n                        constraint = function(s)\r\n                            lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )\r\n                        end\r\n                    end\r\n                end\r\n                res.rest = rest\r\n                typespec = res.rest\r\n                -- optional 'default value' clause. Type is inferred as\r\n                -- 'string' or 'number' if there's no explicit type\r\n                if default or match('default $r{rest}',typespec,res) then\r\n                    defval,vtype = process_default(res.rest,vtype)\r\n                end\r\n            else -- must be a plain flag, no extra parameter required\r\n                defval = false\r\n                vtype = 'boolean'\r\n            end\r\n            local ps = {\r\n                type = vtype,\r\n                defval = defval,\r\n                required = defval == nil and not optional,\r\n                comment = res.rest or optparm,\r\n                constraint = constraint,\r\n                varargs = varargs\r\n            }\r\n            varargs = nil\r\n            if types[vtype] then\r\n                local converter = types[vtype].converter\r\n                if type(converter) == 'string' then\r\n                    ps.type = converter\r\n                else\r\n                    ps.converter = converter\r\n                end\r\n                ps.constraint = types[vtype].constraint\r\n            elseif not builtin_types[vtype] then\r\n                lapp.error(vtype..\" is unknown type\")\r\n            end\r\n            parms[optparm] = ps\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 86,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local optspec,optparm,i1,i2,defval,vtype,constraint,rest",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "line = lstrip(line)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "local function check(str)\r\n            return match(str,line,res)\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 90,
    "text": "if check '-$v{short}, --$o{long} $' or check '-$v{short} $' or check '--$o{long} $' then\r\n            if res.long then\r\n                optparm = res.long:gsub('[^%w%-]','_')  -- I'm not sure the $o pattern will let anything else through?\r\n                if res.short then aliases[res.short] = optparm  end\r\n            else\r\n                optparm = res.short\r\n            end\r\n            if res.short and not lapp.slack then force_short(res.short) end\r\n            res.rest, varargs = check_varargs(res.rest)\r\n        elseif check '$<{name} $'  then -- is it <parameter_name>?\r\n            -- so <input file...> becomes input_file ...\r\n            optparm,rest = res.name:match '([^%.]+)(.*)'\r\n            optparm = optparm:gsub('%A','_')\r\n            varargs = rest == '...'\r\n            append(parmlist,optparm)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "if res.long then\r\n                optparm = res.long:gsub('[^%w%-]','_')  -- I'm not sure the $o pattern will let anything else through?\r\n                if res.short then aliases[res.short] = optparm  end\r\n            else\r\n                optparm = res.short\r\n            end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "optparm = res.long:gsub('[^%w%-]','_')",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "if res.short then aliases[res.short] = optparm  end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "aliases[res.short] = optparm",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "optparm = res.short",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if res.short and not lapp.slack then force_short(res.short) end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "force_short(res.short)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "res.rest, varargs = check_varargs(res.rest)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "optparm,rest = res.name:match '([^%.]+)(.*)'",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "optparm = optparm:gsub('%A','_')",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "varargs = rest == '...'",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "append(parmlist,optparm)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "if res.rest then\r\n            line = res.rest\r\n            res = {}\r\n            local optional\r\n            -- do we have ([optional] [<type>] [default <val>])?\r\n            if match('$({def} $',line,res) or match('$({def}',line,res) then\r\n                local typespec = strip(res.def)\r\n                local ftype, rest = typespec:match('^(%S+)(.*)$')\r\n                rest = strip(rest)\r\n                if ftype == 'optional' then\r\n                    ftype, rest = rest:match('^(%S+)(.*)$')\r\n                    rest = strip(rest)\r\n                    optional = true\r\n                end\r\n                local default\r\n                if ftype == 'default' then\r\n                    default = true\r\n                    if rest == '' then lapp.error(\"value must follow default\") end\r\n                else -- a type specification\r\n                    if match('$f{min}..$f{max}',ftype,res) then\r\n                        -- a numerical range like 1..10\r\n                        local min,max = res.min,res.max\r\n                        vtype = 'number'\r\n                        constraint = function(x)\r\n                            range_check(x,min,max,optparm)\r\n                        end\r\n                    elseif not ftype:match '|' then -- plain type\r\n                        vtype = ftype\r\n                    else\r\n                        -- 'enum' type is a string which must belong to\r\n                        -- one of several distinct values\r\n                        local enums = ftype\r\n                        local enump = '|' .. enums .. '|'\r\n                        vtype = 'string'\r\n                        constraint = function(s)\r\n                            lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )\r\n                        end\r\n                    end\r\n                end\r\n                res.rest = rest\r\n                typespec = res.rest\r\n                -- optional 'default value' clause. Type is inferred as\r\n                -- 'string' or 'number' if there's no explicit type\r\n                if default or match('default $r{rest}',typespec,res) then\r\n                    defval,vtype = process_default(res.rest,vtype)\r\n                end\r\n            else -- must be a plain flag, no extra parameter required\r\n                defval = false\r\n                vtype = 'boolean'\r\n            end\r\n            local ps = {\r\n                type = vtype,\r\n                defval = defval,\r\n                required = defval == nil and not optional,\r\n                comment = res.rest or optparm,\r\n                constraint = constraint,\r\n                varargs = varargs\r\n            }\r\n            varargs = nil\r\n            if types[vtype] then\r\n                local converter = types[vtype].converter\r\n                if type(converter) == 'string' then\r\n                    ps.type = converter\r\n                else\r\n                    ps.converter = converter\r\n                end\r\n                ps.constraint = types[vtype].constraint\r\n            elseif not builtin_types[vtype] then\r\n                lapp.error(vtype..\" is unknown type\")\r\n            end\r\n            parms[optparm] = ps\r\n        end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "line = res.rest",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "res = {}",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "local optional",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "if match('$({def} $',line,res) or match('$({def}',line,res) then\r\n                local typespec = strip(res.def)\r\n                local ftype, rest = typespec:match('^(%S+)(.*)$')\r\n                rest = strip(rest)\r\n                if ftype == 'optional' then\r\n                    ftype, rest = rest:match('^(%S+)(.*)$')\r\n                    rest = strip(rest)\r\n                    optional = true\r\n                end\r\n                local default\r\n                if ftype == 'default' then\r\n                    default = true\r\n                    if rest == '' then lapp.error(\"value must follow default\") end\r\n                else -- a type specification\r\n                    if match('$f{min}..$f{max}',ftype,res) then\r\n                        -- a numerical range like 1..10\r\n                        local min,max = res.min,res.max\r\n                        vtype = 'number'\r\n                        constraint = function(x)\r\n                            range_check(x,min,max,optparm)\r\n                        end\r\n                    elseif not ftype:match '|' then -- plain type\r\n                        vtype = ftype\r\n                    else\r\n                        -- 'enum' type is a string which must belong to\r\n                        -- one of several distinct values\r\n                        local enums = ftype\r\n                        local enump = '|' .. enums .. '|'\r\n                        vtype = 'string'\r\n                        constraint = function(s)\r\n                            lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )\r\n                        end\r\n                    end\r\n                end\r\n                res.rest = rest\r\n                typespec = res.rest\r\n                -- optional 'default value' clause. Type is inferred as\r\n                -- 'string' or 'number' if there's no explicit type\r\n                if default or match('default $r{rest}',typespec,res) then\r\n                    defval,vtype = process_default(res.rest,vtype)\r\n                end\r\n            else -- must be a plain flag, no extra parameter required\r\n                defval = false\r\n                vtype = 'boolean'\r\n            end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "local typespec = strip(res.def)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local ftype, rest = typespec:match('^(%S+)(.*)$')",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "rest = strip(rest)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "if ftype == 'optional' then\r\n                    ftype, rest = rest:match('^(%S+)(.*)$')\r\n                    rest = strip(rest)\r\n                    optional = true\r\n                end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "ftype, rest = rest:match('^(%S+)(.*)$')",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "optional = true",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "local default",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if ftype == 'default' then\r\n                    default = true\r\n                    if rest == '' then lapp.error(\"value must follow default\") end\r\n                else -- a type specification\r\n                    if match('$f{min}..$f{max}',ftype,res) then\r\n                        -- a numerical range like 1..10\r\n                        local min,max = res.min,res.max\r\n                        vtype = 'number'\r\n                        constraint = function(x)\r\n                            range_check(x,min,max,optparm)\r\n                        end\r\n                    elseif not ftype:match '|' then -- plain type\r\n                        vtype = ftype\r\n                    else\r\n                        -- 'enum' type is a string which must belong to\r\n                        -- one of several distinct values\r\n                        local enums = ftype\r\n                        local enump = '|' .. enums .. '|'\r\n                        vtype = 'string'\r\n                        constraint = function(s)\r\n                            lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "default = true",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "if rest == '' then lapp.error(\"value must follow default\") end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "lapp.error(\"value must follow default\")",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "if match('$f{min}..$f{max}',ftype,res) then\r\n                        -- a numerical range like 1..10\r\n                        local min,max = res.min,res.max\r\n                        vtype = 'number'\r\n                        constraint = function(x)\r\n                            range_check(x,min,max,optparm)\r\n                        end\r\n                    elseif not ftype:match '|' then -- plain type\r\n                        vtype = ftype\r\n                    else\r\n                        -- 'enum' type is a string which must belong to\r\n                        -- one of several distinct values\r\n                        local enums = ftype\r\n                        local enump = '|' .. enums .. '|'\r\n                        vtype = 'string'\r\n                        constraint = function(s)\r\n                            lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "local min,max = res.min,res.max",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "vtype = 'number'",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "constraint = function(x)\r\n                            range_check(x,min,max,optparm)\r\n                        end",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "range_check(x,min,max,optparm)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "vtype = ftype",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "local enums = ftype",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local enump = '|' .. enums .. '|'",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "vtype = 'string'",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "constraint = function(s)\r\n                            lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )\r\n                        end",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "res.rest = rest",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "typespec = res.rest",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "if default or match('default $r{rest}',typespec,res) then\r\n                    defval,vtype = process_default(res.rest,vtype)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "defval,vtype = process_default(res.rest,vtype)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "defval = false",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "vtype = 'boolean'",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "local ps = {\r\n                type = vtype,\r\n                defval = defval,\r\n                required = defval == nil and not optional,\r\n                comment = res.rest or optparm,\r\n                constraint = constraint,\r\n                varargs = varargs\r\n            }",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "varargs = nil",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "if types[vtype] then\r\n                local converter = types[vtype].converter\r\n                if type(converter) == 'string' then\r\n                    ps.type = converter\r\n                else\r\n                    ps.converter = converter\r\n                end\r\n                ps.constraint = types[vtype].constraint\r\n            elseif not builtin_types[vtype] then\r\n                lapp.error(vtype..\" is unknown type\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "local converter = types[vtype].converter",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if type(converter) == 'string' then\r\n                    ps.type = converter\r\n                else\r\n                    ps.converter = converter\r\n                end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "ps.type = converter",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "ps.converter = converter",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "ps.constraint = types[vtype].constraint",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "lapp.error(vtype..\" is unknown type\")",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "parms[optparm] = ps",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "local iparm = 1",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "local iextra = 1",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local parm,ps,val",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "local end_of_flags = false",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "local function check_parm (parm)\r\n        local eqi = parm:find '='\r\n        if eqi then\r\n            tinsert(arg,i+1,parm:sub(eqi+1))\r\n            parm = parm:sub(1,eqi-1)\r\n        end\r\n        return parm,eqi\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 152,
    "text": "local eqi = parm:find '='",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "if eqi then\r\n            tinsert(arg,i+1,parm:sub(eqi+1))\r\n            parm = parm:sub(1,eqi-1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "tinsert(arg,i+1,parm:sub(eqi+1))",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "parm = parm:sub(1,eqi-1)",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "local function is_flag (parm)\r\n        return parms[aliases[parm] or parm]\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 157,
    "text": "while i <= #arg do\r\n        local theArg = arg[i]\r\n        local res = {}\r\n        -- after '--' we don't parse args and they end up in \r\n        -- the array part of the result (args[1] etc)\r\n        if theArg == '--' then\r\n            end_of_flags = true\r\n            iparm = #parmlist + 1\r\n            i = i + 1\r\n            theArg = arg[i]\r\n            if not theArg then\r\n                break\r\n            end\r\n        end\r\n        -- look for a flag, -<short flags> or --<long flag>\r\n        if not end_of_flags and (match('--$S{long}',theArg,res) or match('-$S{short}',theArg,res)) then\r\n            if res.long then -- long option\r\n                parm = check_parm(res.long)\r\n            elseif #res.short == 1 or is_flag(res.short) then\r\n                parm = res.short\r\n            else\r\n                local parmstr,eq = check_parm(res.short)\r\n                if not eq then\r\n                    parm = at(parmstr,1)\r\n                    local flag = is_flag(parm)\r\n                    if flag and flag.type ~= 'boolean' then\r\n                    --if isdigit(at(parmstr,2)) then\r\n                        -- a short option followed by a digit is an exception (for AW;))\r\n                        -- push ahead into the arg array\r\n                        tinsert(arg,i+1,parmstr:sub(2))\r\n                    else\r\n                        -- push multiple flags into the arg array!\r\n                        for k = 2,#parmstr do\r\n                            tinsert(arg,i+k-1,'-'..at(parmstr,k))\r\n                        end\r\n                    end\r\n                else\r\n                    parm = parmstr\r\n                end\r\n            end\r\n            if aliases[parm] then parm = aliases[parm] end\r\n            if not parms[parm] and (parm == 'h' or parm == 'help') then\r\n                lapp.quit()\r\n            end\r\n        else -- a parameter\r\n            parm = parmlist[iparm]\r\n            if not parm then\r\n               -- extra unnamed parameters are indexed starting at 1\r\n               parm = iextra\r\n               ps = { type = 'string' }\r\n               parms[parm] = ps\r\n               iextra = iextra + 1\r\n            else\r\n                ps = parms[parm]\r\n            end\r\n            if not ps.varargs then\r\n                iparm = iparm + 1\r\n            end\r\n            val = theArg\r\n        end\r\n        ps = parms[parm]\r\n        if not ps then lapp.error(\"unrecognized parameter: \"..parm) end\r\n        if ps.type ~= 'boolean' then -- we need a value! This should follow\r\n            if not val then\r\n                i = i + 1\r\n                val = arg[i]\r\n                theArg = val\r\n            end\r\n            lapp.assert(val,parm..\" was expecting a value\")\r\n        else -- toggle boolean flags (usually false -> true)\r\n            val = not ps.defval\r\n        end\r\n        ps.used = true\r\n        val = convert_parameter(ps,val)\r\n        set_result(ps,parm,val)\r\n        if builtin_types[ps.type] == 'file' then\r\n            set_result(ps,parm..'_name',theArg)\r\n        end\r\n        if lapp.callback then\r\n            lapp.callback(parm,theArg,res)\r\n        end\r\n        i = i + 1\r\n        val = nil\r\n    end",
    "type": "statement:while"
  }, {
    "id": 158,
    "text": "local theArg = arg[i]",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "if theArg == '--' then\r\n            end_of_flags = true\r\n            iparm = #parmlist + 1\r\n            i = i + 1\r\n            theArg = arg[i]\r\n            if not theArg then\r\n                break\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "end_of_flags = true",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "iparm = #parmlist + 1",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "theArg = arg[i]",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "if not theArg then\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "if not end_of_flags and (match('--$S{long}',theArg,res) or match('-$S{short}',theArg,res)) then\r\n            if res.long then -- long option\r\n                parm = check_parm(res.long)\r\n            elseif #res.short == 1 or is_flag(res.short) then\r\n                parm = res.short\r\n            else\r\n                local parmstr,eq = check_parm(res.short)\r\n                if not eq then\r\n                    parm = at(parmstr,1)\r\n                    local flag = is_flag(parm)\r\n                    if flag and flag.type ~= 'boolean' then\r\n                    --if isdigit(at(parmstr,2)) then\r\n                        -- a short option followed by a digit is an exception (for AW;))\r\n                        -- push ahead into the arg array\r\n                        tinsert(arg,i+1,parmstr:sub(2))\r\n                    else\r\n                        -- push multiple flags into the arg array!\r\n                        for k = 2,#parmstr do\r\n                            tinsert(arg,i+k-1,'-'..at(parmstr,k))\r\n                        end\r\n                    end\r\n                else\r\n                    parm = parmstr\r\n                end\r\n            end\r\n            if aliases[parm] then parm = aliases[parm] end\r\n            if not parms[parm] and (parm == 'h' or parm == 'help') then\r\n                lapp.quit()\r\n            end\r\n        else -- a parameter\r\n            parm = parmlist[iparm]\r\n            if not parm then\r\n               -- extra unnamed parameters are indexed starting at 1\r\n               parm = iextra\r\n               ps = { type = 'string' }\r\n               parms[parm] = ps\r\n               iextra = iextra + 1\r\n            else\r\n                ps = parms[parm]\r\n            end\r\n            if not ps.varargs then\r\n                iparm = iparm + 1\r\n            end\r\n            val = theArg\r\n        end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "if res.long then -- long option\r\n                parm = check_parm(res.long)\r\n            elseif #res.short == 1 or is_flag(res.short) then\r\n                parm = res.short\r\n            else\r\n                local parmstr,eq = check_parm(res.short)\r\n                if not eq then\r\n                    parm = at(parmstr,1)\r\n                    local flag = is_flag(parm)\r\n                    if flag and flag.type ~= 'boolean' then\r\n                    --if isdigit(at(parmstr,2)) then\r\n                        -- a short option followed by a digit is an exception (for AW;))\r\n                        -- push ahead into the arg array\r\n                        tinsert(arg,i+1,parmstr:sub(2))\r\n                    else\r\n                        -- push multiple flags into the arg array!\r\n                        for k = 2,#parmstr do\r\n                            tinsert(arg,i+k-1,'-'..at(parmstr,k))\r\n                        end\r\n                    end\r\n                else\r\n                    parm = parmstr\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "parm = check_parm(res.long)",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "parm = res.short",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "local parmstr,eq = check_parm(res.short)",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "if not eq then\r\n                    parm = at(parmstr,1)\r\n                    local flag = is_flag(parm)\r\n                    if flag and flag.type ~= 'boolean' then\r\n                    --if isdigit(at(parmstr,2)) then\r\n                        -- a short option followed by a digit is an exception (for AW;))\r\n                        -- push ahead into the arg array\r\n                        tinsert(arg,i+1,parmstr:sub(2))\r\n                    else\r\n                        -- push multiple flags into the arg array!\r\n                        for k = 2,#parmstr do\r\n                            tinsert(arg,i+k-1,'-'..at(parmstr,k))\r\n                        end\r\n                    end\r\n                else\r\n                    parm = parmstr\r\n                end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "parm = at(parmstr,1)",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "local flag = is_flag(parm)",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "if flag and flag.type ~= 'boolean' then\r\n                    --if isdigit(at(parmstr,2)) then\r\n                        -- a short option followed by a digit is an exception (for AW;))\r\n                        -- push ahead into the arg array\r\n                        tinsert(arg,i+1,parmstr:sub(2))\r\n                    else\r\n                        -- push multiple flags into the arg array!\r\n                        for k = 2,#parmstr do\r\n                            tinsert(arg,i+k-1,'-'..at(parmstr,k))\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "tinsert(arg,i+1,parmstr:sub(2))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "for k = 2,#parmstr do\r\n                            tinsert(arg,i+k-1,'-'..at(parmstr,k))\r\n                        end",
    "type": "statement:numericfor"
  }, {
    "id": 176,
    "text": "tinsert(arg,i+k-1,'-'..at(parmstr,k))",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "parm = parmstr",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "if aliases[parm] then parm = aliases[parm] end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "parm = aliases[parm]",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "if not parms[parm] and (parm == 'h' or parm == 'help') then\r\n                lapp.quit()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "lapp.quit()",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "parm = parmlist[iparm]",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "if not parm then\r\n               -- extra unnamed parameters are indexed starting at 1\r\n               parm = iextra\r\n               ps = { type = 'string' }\r\n               parms[parm] = ps\r\n               iextra = iextra + 1\r\n            else\r\n                ps = parms[parm]\r\n            end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "parm = iextra",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "ps = { type = 'string' }",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "parms[parm] = ps",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "iextra = iextra + 1",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "ps = parms[parm]",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "if not ps.varargs then\r\n                iparm = iparm + 1\r\n            end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "iparm = iparm + 1",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "val = theArg",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "if not ps then lapp.error(\"unrecognized parameter: \"..parm) end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "lapp.error(\"unrecognized parameter: \"..parm)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "if ps.type ~= 'boolean' then -- we need a value! This should follow\r\n            if not val then\r\n                i = i + 1\r\n                val = arg[i]\r\n                theArg = val\r\n            end\r\n            lapp.assert(val,parm..\" was expecting a value\")\r\n        else -- toggle boolean flags (usually false -> true)\r\n            val = not ps.defval\r\n        end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "if not val then\r\n                i = i + 1\r\n                val = arg[i]\r\n                theArg = val\r\n            end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "val = arg[i]",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "theArg = val",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "lapp.assert(val,parm..\" was expecting a value\")",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "val = not ps.defval",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "ps.used = true",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "val = convert_parameter(ps,val)",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "set_result(ps,parm,val)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "if builtin_types[ps.type] == 'file' then\r\n            set_result(ps,parm..'_name',theArg)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "set_result(ps,parm..'_name',theArg)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "if lapp.callback then\r\n            lapp.callback(parm,theArg,res)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "lapp.callback(parm,theArg,res)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "val = nil",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "for parm,ps in pairs(parms) do\r\n        if not ps.used then\r\n            if ps.required then lapp.error(\"missing required parameter: \"..parm) end\r\n            set_result(ps,parm,ps.defval)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 209,
    "text": "if not ps.used then\r\n            if ps.required then lapp.error(\"missing required parameter: \"..parm) end\r\n            set_result(ps,parm,ps.defval)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "if ps.required then lapp.error(\"missing required parameter: \"..parm) end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "lapp.error(\"missing required parameter: \"..parm)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "set_result(ps,parm,ps.defval)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 214,
    "text": "local function check_varargs(s)\r\n        local res,cnt = s:gsub('^%.%.%.%s*','')\r\n        return res, (cnt > 0)\r\n    end",
    "type": "function"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "local function set_result(ps,parm,val)\r\n        parm = type(parm) == \"string\" and parm:gsub(\"%W\", \"_\") or parm -- so foo-bar becomes foo_bar in Lua\r\n        if not ps.varargs then\r\n            results[parm] = val\r\n        else\r\n            if not results[parm] then\r\n                results[parm] = { val }\r\n            else\r\n                append(results[parm],val)\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 217,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 218,
    "text": "local function check(str)\r\n            return match(str,line,res)\r\n        end",
    "type": "function"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "function(x)\r\n                            range_check(x,min,max,optparm)\r\n                        end",
    "type": "function"
  }, {
    "id": 221,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 222,
    "text": "function(s)\r\n                            lapp.assert(enump:match('|'..s..'|'),\r\n                              \"value '\"..s..\"' not in \"..enums\r\n                            )\r\n                        end",
    "type": "function"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "local function check_parm (parm)\r\n        local eqi = parm:find '='\r\n        if eqi then\r\n            tinsert(arg,i+1,parm:sub(eqi+1))\r\n            parm = parm:sub(1,eqi-1)\r\n        end\r\n        return parm,eqi\r\n    end",
    "type": "function"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "local function is_flag (parm)\r\n        return parms[aliases[parm] or parm]\r\n    end",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function(tbl,str,args) return lapp.process_options_string(str,args) end",
    "type": "function"
  }, {
    "id": 229,
    "text": "",
    "type": "function container"
  }, {
    "id": 230,
    "text": "function types.is_callable (obj)\r\n    return type(obj) == 'function' or getmetatable(obj) and getmetatable(obj).__call and true\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "function types.type (obj)\r\n    local t = type(obj)\r\n    if t == 'table' or t == 'userdata' then\r\n        local mt = getmetatable(obj)\r\n        if mt == fileMT then\r\n            return 'file'\r\n        elseif mt == nil then\r\n            return t\r\n        else\r\n            return mt._name or \"unknown \"..t\r\n        end\r\n    else\r\n        return t\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 232,
    "text": "function types.is_integer (x)\r\n    return math.ceil(x)==x\r\nend",
    "type": "function"
  }, {
    "id": 233,
    "text": "function types.is_empty(o, ignore_spaces)\r\n    if o == nil or (type(o) == \"table\" and not next(o)) or (type(o) == \"string\" and (o == \"\" or (ignore_spaces and o:match(\"^%s+$\")))) then\r\n        return true\r\n    end\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "function types.is_indexable (val)\r\n    local mt = check_meta(val)\r\n    if mt == true then return true end\r\n    return mt and mt.__len and mt.__index and true\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "function types.is_iterable (val)\r\n    local mt = check_meta(val)\r\n    if mt == true then return true end\r\n    return mt and mt.__pairs and true\r\nend",
    "type": "function"
  }, {
    "id": 236,
    "text": "function types.is_writeable (val)\r\n    local mt = check_meta(val)\r\n    if mt == true then return true end\r\n    return mt and mt.__newindex and true\r\nend",
    "type": "function"
  }, {
    "id": 237,
    "text": "function types.to_bool(o, true_strs, check_objs)\r\n    local true_func\r\n    if true_strs then\r\n        utils.assert_arg(2, true_strs, \"table\")\r\n    end\r\n    true_func = true_types[type(o)]\r\n    if true_func then\r\n        return true_func(o, true_strs, check_objs)\r\n    elseif check_objs and o ~= nil then\r\n        return true\r\n    end\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 238,
    "text": "function lapp.callback(param, arg)\r\n    table.insert(calls, {param, arg})\r\nend",
    "type": "function"
  }, {
    "id": 239,
    "text": "custom_pattern",
    "type": "global function"
  }, {
    "id": 240,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 241,
    "text": "append",
    "type": "global function"
  }, {
    "id": 242,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 243,
    "text": "callback",
    "type": "global function"
  }, {
    "id": 244,
    "text": "converter",
    "type": "global function"
  }, {
    "id": 245,
    "text": "require",
    "type": "global function"
  }, {
    "id": 246,
    "text": "match",
    "type": "global function"
  }, {
    "id": 247,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 248,
    "text": "type",
    "type": "global function"
  }, {
    "id": 249,
    "text": "constraint",
    "type": "global function"
  }, {
    "id": 250,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 251,
    "text": "open",
    "type": "global function"
  }, {
    "id": 252,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 253,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 254,
    "text": "error",
    "type": "global function"
  }, {
    "id": 255,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 256,
    "text": "",
    "type": "variable container"
  }, {
    "id": 257,
    "text": "",
    "type": "require container"
  }, {
    "id": 258,
    "text": "",
    "type": "local variable"
  }, {
    "id": 259,
    "text": "",
    "type": "n/a"
  }, {
    "id": 260,
    "text": "",
    "type": "local variable"
  }, {
    "id": 261,
    "text": "",
    "type": "local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "n/a"
  }, {
    "id": 263,
    "text": "",
    "type": "local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "n/a"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "n/a"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "local variable"
  }, {
    "id": 273,
    "text": "",
    "type": "local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "local variable"
  }, {
    "id": 275,
    "text": "",
    "type": "local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "local variable"
  }, {
    "id": 277,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 278,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 279,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 280,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 281,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 282,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 283,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 284,
    "text": "",
    "type": "local variable"
  }, {
    "id": 285,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 286,
    "text": "",
    "type": "local variable"
  }, {
    "id": 287,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 288,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 289,
    "text": "",
    "type": "boolean"
  }, {
    "id": 290,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 291,
    "text": "",
    "type": "boolean"
  }, {
    "id": 292,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 293,
    "text": "",
    "type": "string"
  }, {
    "id": 294,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 295,
    "text": "",
    "type": "string"
  }, {
    "id": 296,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 297,
    "text": "",
    "type": "boolean"
  }, {
    "id": 298,
    "text": "",
    "type": "global variable"
  }, {
    "id": 299,
    "text": "",
    "type": "global variable"
  }, {
    "id": 300,
    "text": "",
    "type": "interface container"
  }, {
    "id": 301,
    "text": "",
    "type": "interface"
  }, {
    "id": 302,
    "text": "",
    "type": "interface"
  }, {
    "id": 303,
    "text": "",
    "type": "interface"
  }, {
    "id": 304,
    "text": "",
    "type": "require local variable"
  } ]
}