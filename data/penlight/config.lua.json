{
  "_filename": "config.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/config.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 14,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 44,
    "label": "has",
    "to": 51
  }, {
    "from": 36,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 8
  }, {
    "from": 52,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 55
  }, {
    "from": 36,
    "label": "has",
    "to": 56
  }, {
    "from": 36,
    "label": "has",
    "to": 57
  }, {
    "from": 36,
    "label": "has",
    "to": 58
  }, {
    "from": 36,
    "label": "has",
    "to": 59
  }, {
    "from": 36,
    "label": "has",
    "to": 60
  }, {
    "from": 36,
    "label": "has",
    "to": 61
  }, {
    "from": 36,
    "label": "has",
    "to": 62
  }, {
    "from": 36,
    "label": "has",
    "to": 63
  }, {
    "from": 36,
    "label": "has",
    "to": 64
  }, {
    "from": 36,
    "label": "has",
    "to": 65
  }, {
    "from": 36,
    "label": "has",
    "to": 66
  }, {
    "from": 36,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 36,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 72,
    "label": "has",
    "to": 8
  }, {
    "from": 72,
    "label": "has",
    "to": 8
  }, {
    "from": 72,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 72,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 90,
    "label": "has",
    "to": 103
  }, {
    "from": 36,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 53
  }, {
    "from": 105,
    "label": "has",
    "to": 54
  }, {
    "from": 105,
    "label": "has",
    "to": 8
  }, {
    "from": 105,
    "label": "has",
    "to": 8
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 107,
    "label": "has",
    "to": 8
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 24
  }, {
    "from": 111,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 111,
    "label": "has",
    "to": 8
  }, {
    "from": 111,
    "label": "has",
    "to": 8
  }, {
    "from": 111,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 114
  }, {
    "from": 36,
    "label": "calls",
    "to": 116
  }, {
    "from": 36,
    "label": "calls",
    "to": 116
  }, {
    "from": 14,
    "label": "calls",
    "to": 118
  }, {
    "from": 109,
    "label": "calls",
    "to": 109
  }, {
    "from": 36,
    "label": "calls",
    "to": 109
  }, {
    "from": 36,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 36,
    "label": "calls",
    "to": 14
  }, {
    "from": 2,
    "label": "calls",
    "to": 115
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 14,
    "label": "calls",
    "to": 117
  }, {
    "from": 109,
    "label": "calls",
    "to": 117
  }, {
    "from": 109,
    "label": "calls",
    "to": 10
  }, {
    "from": 36,
    "label": "calls",
    "to": 107
  }, {
    "from": 36,
    "label": "calls",
    "to": 107
  }, {
    "from": 109,
    "label": "calls",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 113
  }, {
    "from": 113,
    "label": "declares",
    "to": 2
  }, {
    "from": 113,
    "label": "declares",
    "to": 10
  }, {
    "from": 113,
    "label": "declares",
    "to": 12
  }, {
    "from": 113,
    "label": "declares",
    "to": 14
  }, {
    "from": 113,
    "label": "declares",
    "to": 36
  }, {
    "from": 113,
    "label": "declares",
    "to": 105
  }, {
    "from": 113,
    "label": "declares",
    "to": 107
  }, {
    "from": 113,
    "label": "declares",
    "to": 109
  }, {
    "from": 113,
    "label": "declares",
    "to": 111
  }, {
    "from": 120,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 121
  }, {
    "from": 1,
    "label": "contains",
    "to": 122
  }, {
    "from": 121,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 121,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 121,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 121,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 121,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 121,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 1,
    "label": "provides",
    "to": 135
  }, {
    "from": 133,
    "label": "represents",
    "to": 136
  }, {
    "from": 135,
    "label": "provides",
    "to": 136
  }, {
    "from": 137,
    "label": "requires",
    "to": 1
  }, {
    "from": 133,
    "label": "contains",
    "to": 14
  }, {
    "from": 133,
    "label": "contains",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "config",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function split(s,re)\r\n    local res = {}\r\n    local t_insert = table.insert\r\n    re = '[^'..re..']+'\r\n    for k in s:gmatch(re) do t_insert(res,k) end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local t_insert = table.insert",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "re = '[^'..re..']+'",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "for k in s:gmatch(re) do t_insert(res,k) end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "t_insert(res,k)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function strip(s)\r\n    return s:gsub('^%s+',''):gsub('%s+$','')\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function strip_quotes (s)\r\n    return s:gsub(\"['\\\"](.*)['\\\"]\",'%1')\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function config.lines(file)\r\n    local f,openf,err\r\n    local line = ''\r\n    if type(file) == 'string' then\r\n        f,err = io.open(file,'r')\r\n        if not f then return nil,err end\r\n        openf = true\r\n    else\r\n        f = file or io.stdin\r\n        if not file.read then return nil, 'not a file-like object' end\r\n    end\r\n    if not f then return nil, 'file is nil' end\r\n    return function()\r\n        local l = f:read()\r\n        while l do\r\n            -- only for non-blank lines that don't begin with either ';' or '#'\r\n            if l:match '%S' and not l:match '^%s*[;#]' then\r\n                -- does the line end with '\\'?\r\n                local i = l:find '\\\\%s*$'\r\n                if i then -- if so,\r\n                    line = line..l:sub(1,i-1)\r\n                elseif line == '' then\r\n                    return l\r\n                else\r\n                    l = line..l\r\n                    line = ''\r\n                    return l\r\n                end\r\n            end\r\n            l = f:read()\r\n        end\r\n        if openf then f:close() end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local f,openf,err",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local line = ''",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if type(file) == 'string' then\r\n        f,err = io.open(file,'r')\r\n        if not f then return nil,err end\r\n        openf = true\r\n    else\r\n        f = file or io.stdin\r\n        if not file.read then return nil, 'not a file-like object' end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "f,err = io.open(file,'r')",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "if not f then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "openf = true",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "f = file or io.stdin",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if not file.read then return nil, 'not a file-like object' end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if not f then return nil, 'file is nil' end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local l = f:read()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "while l do\r\n            -- only for non-blank lines that don't begin with either ';' or '#'\r\n            if l:match '%S' and not l:match '^%s*[;#]' then\r\n                -- does the line end with '\\'?\r\n                local i = l:find '\\\\%s*$'\r\n                if i then -- if so,\r\n                    line = line..l:sub(1,i-1)\r\n                elseif line == '' then\r\n                    return l\r\n                else\r\n                    l = line..l\r\n                    line = ''\r\n                    return l\r\n                end\r\n            end\r\n            l = f:read()\r\n        end",
    "type": "statement:while"
  }, {
    "id": 26,
    "text": "if l:match '%S' and not l:match '^%s*[;#]' then\r\n                -- does the line end with '\\'?\r\n                local i = l:find '\\\\%s*$'\r\n                if i then -- if so,\r\n                    line = line..l:sub(1,i-1)\r\n                elseif line == '' then\r\n                    return l\r\n                else\r\n                    l = line..l\r\n                    line = ''\r\n                    return l\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local i = l:find '\\\\%s*$'",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if i then -- if so,\r\n                    line = line..l:sub(1,i-1)\r\n                elseif line == '' then\r\n                    return l\r\n                else\r\n                    l = line..l\r\n                    line = ''\r\n                    return l\r\n                end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "line = line..l:sub(1,i-1)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "l = line..l",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "line = ''",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "l = f:read()",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if openf then f:close() end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function config.read(file,cnfg)\r\n    local f,openf,err,auto\r\n\r\n    local iter,err = config.lines(file)\r\n    if not iter then return nil,err end\r\n    local line = iter()\r\n    cnfg = cnfg or {}\r\n    if cnfg.smart then\r\n        auto = true\r\n        if line:match '^[^=]+=' then\r\n            cnfg.keysep = '='\r\n        elseif line:match '^[^:]+:' then\r\n            cnfg.keysep = ':'\r\n            cnfg.list_delim = ':'\r\n        elseif line:match '^%S+%s+' then\r\n            cnfg.keysep = ' '\r\n            -- more than two columns assume that it's a space-delimited list\r\n            -- cf /etc/fstab with /etc/ssh/ssh_config\r\n            if line:match '^%S+%s+%S+%s+%S+' then\r\n                cnfg.list_delim = ' '\r\n            end\r\n            cnfg.variabilize = false\r\n        end\r\n    end\r\n\r\n\r\n    local function check_cnfg (var,def)\r\n        local val = cnfg[var]\r\n        if val == nil then return def else return val end\r\n    end\r\n\r\n    local initial_digits = '^[%d%+%-]'\r\n    local t = {}\r\n    local top_t = t\r\n    local variablilize = check_cnfg ('variabilize',true)\r\n    local list_delim = check_cnfg('list_delim',',')\r\n    local convert_numbers = check_cnfg('convert_numbers',true)\r\n    local convert_boolean = check_cnfg('convert_boolean',false)\r\n    local trim_space = check_cnfg('trim_space',true)\r\n    local trim_quotes = check_cnfg('trim_quotes',false)\r\n    local ignore_assign = check_cnfg('ignore_assign',false)\r\n    local keysep = check_cnfg('keysep','=')\r\n    local keypat = keysep == ' ' and '%s+' or '%s*'..keysep..'%s*'\r\n    if list_delim == ' ' then list_delim = '%s+' end\r\n\r\n    local function process_name(key)\r\n        if variablilize then\r\n            key = key:gsub('[^%w]','_')\r\n        end\r\n        return key\r\n    end\r\n\r\n    local function process_value(value)\r\n        if list_delim and value:find(list_delim) then\r\n            value = split(value,list_delim)\r\n            for i,v in ipairs(value) do\r\n                value[i] = process_value(v)\r\n            end\r\n        elseif convert_numbers and value:find(initial_digits) then\r\n            local val = tonumber(value)\r\n            if not val and value:match ' kB$' then\r\n                value = value:gsub(' kB','')\r\n                val = tonumber(value)\r\n            end\r\n            if val then value = val end\r\n        elseif convert_boolean and value == 'true' then\r\n           return true\r\n        elseif convert_boolean and value == 'false' then\r\n           return false\r\n        end\r\n        if type(value) == 'string' then\r\n           if trim_space then value = strip(value) end\r\n           if not trim_quotes and auto and value:match '^\"' then\r\n                trim_quotes = true\r\n            end\r\n           if trim_quotes then value = strip_quotes(value) end\r\n        end\r\n        return value\r\n    end\r\n\r\n    while line do\r\n        if line:find('^%[') then -- section!\r\n            local section = process_name(line:match('%[([^%]]+)%]'))\r\n            t = top_t\r\n            t[section] = {}\r\n            t = t[section]\r\n        else\r\n            line = line:gsub('^%s*','')\r\n            local i1,i2 = line:find(keypat)\r\n            if i1 and not ignore_assign then -- key,value assignment\r\n                local key = process_name(line:sub(1,i1-1))\r\n                local value = process_value(line:sub(i2+1))\r\n                t[key] = value\r\n            else -- a plain list of values...\r\n                t[#t+1] = process_value(line)\r\n            end\r\n        end\r\n        line = iter()\r\n    end\r\n    return top_t\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local f,openf,err,auto",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local iter,err = config.lines(file)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if not iter then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local line = iter()",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "cnfg = cnfg or {}",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if cnfg.smart then\r\n        auto = true\r\n        if line:match '^[^=]+=' then\r\n            cnfg.keysep = '='\r\n        elseif line:match '^[^:]+:' then\r\n            cnfg.keysep = ':'\r\n            cnfg.list_delim = ':'\r\n        elseif line:match '^%S+%s+' then\r\n            cnfg.keysep = ' '\r\n            -- more than two columns assume that it's a space-delimited list\r\n            -- cf /etc/fstab with /etc/ssh/ssh_config\r\n            if line:match '^%S+%s+%S+%s+%S+' then\r\n                cnfg.list_delim = ' '\r\n            end\r\n            cnfg.variabilize = false\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "auto = true",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if line:match '^[^=]+=' then\r\n            cnfg.keysep = '='\r\n        elseif line:match '^[^:]+:' then\r\n            cnfg.keysep = ':'\r\n            cnfg.list_delim = ':'\r\n        elseif line:match '^%S+%s+' then\r\n            cnfg.keysep = ' '\r\n            -- more than two columns assume that it's a space-delimited list\r\n            -- cf /etc/fstab with /etc/ssh/ssh_config\r\n            if line:match '^%S+%s+%S+%s+%S+' then\r\n                cnfg.list_delim = ' '\r\n            end\r\n            cnfg.variabilize = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "cnfg.keysep = '='",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "cnfg.keysep = ':'",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "cnfg.list_delim = ':'",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "cnfg.keysep = ' '",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if line:match '^%S+%s+%S+%s+%S+' then\r\n                cnfg.list_delim = ' '\r\n            end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "cnfg.list_delim = ' '",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "cnfg.variabilize = false",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local function check_cnfg (var,def)\r\n        local val = cnfg[var]\r\n        if val == nil then return def else return val end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 53,
    "text": "local val = cnfg[var]",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if val == nil then return def else return val end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local initial_digits = '^[%d%+%-]'",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local top_t = t",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local variablilize = check_cnfg ('variabilize',true)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local list_delim = check_cnfg('list_delim',',')",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local convert_numbers = check_cnfg('convert_numbers',true)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local convert_boolean = check_cnfg('convert_boolean',false)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local trim_space = check_cnfg('trim_space',true)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local trim_quotes = check_cnfg('trim_quotes',false)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local ignore_assign = check_cnfg('ignore_assign',false)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local keysep = check_cnfg('keysep','=')",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local keypat = keysep == ' ' and '%s+' or '%s*'..keysep..'%s*'",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if list_delim == ' ' then list_delim = '%s+' end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "list_delim = '%s+'",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "local function process_name(key)\r\n        if variablilize then\r\n            key = key:gsub('[^%w]','_')\r\n        end\r\n        return key\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 70,
    "text": "if variablilize then\r\n            key = key:gsub('[^%w]','_')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "key = key:gsub('[^%w]','_')",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local function process_value(value)\r\n        if list_delim and value:find(list_delim) then\r\n            value = split(value,list_delim)\r\n            for i,v in ipairs(value) do\r\n                value[i] = process_value(v)\r\n            end\r\n        elseif convert_numbers and value:find(initial_digits) then\r\n            local val = tonumber(value)\r\n            if not val and value:match ' kB$' then\r\n                value = value:gsub(' kB','')\r\n                val = tonumber(value)\r\n            end\r\n            if val then value = val end\r\n        elseif convert_boolean and value == 'true' then\r\n           return true\r\n        elseif convert_boolean and value == 'false' then\r\n           return false\r\n        end\r\n        if type(value) == 'string' then\r\n           if trim_space then value = strip(value) end\r\n           if not trim_quotes and auto and value:match '^\"' then\r\n                trim_quotes = true\r\n            end\r\n           if trim_quotes then value = strip_quotes(value) end\r\n        end\r\n        return value\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 73,
    "text": "if list_delim and value:find(list_delim) then\r\n            value = split(value,list_delim)\r\n            for i,v in ipairs(value) do\r\n                value[i] = process_value(v)\r\n            end\r\n        elseif convert_numbers and value:find(initial_digits) then\r\n            local val = tonumber(value)\r\n            if not val and value:match ' kB$' then\r\n                value = value:gsub(' kB','')\r\n                val = tonumber(value)\r\n            end\r\n            if val then value = val end\r\n        elseif convert_boolean and value == 'true' then\r\n           return true\r\n        elseif convert_boolean and value == 'false' then\r\n           return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "value = split(value,list_delim)",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "for i,v in ipairs(value) do\r\n                value[i] = process_value(v)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 76,
    "text": "value[i] = process_value(v)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "local val = tonumber(value)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if not val and value:match ' kB$' then\r\n                value = value:gsub(' kB','')\r\n                val = tonumber(value)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "value = value:gsub(' kB','')",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "val = tonumber(value)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if val then value = val end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "value = val",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "if type(value) == 'string' then\r\n           if trim_space then value = strip(value) end\r\n           if not trim_quotes and auto and value:match '^\"' then\r\n                trim_quotes = true\r\n            end\r\n           if trim_quotes then value = strip_quotes(value) end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "if trim_space then value = strip(value) end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "value = strip(value)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if not trim_quotes and auto and value:match '^\"' then\r\n                trim_quotes = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "trim_quotes = true",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "if trim_quotes then value = strip_quotes(value) end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "value = strip_quotes(value)",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "while line do\r\n        if line:find('^%[') then -- section!\r\n            local section = process_name(line:match('%[([^%]]+)%]'))\r\n            t = top_t\r\n            t[section] = {}\r\n            t = t[section]\r\n        else\r\n            line = line:gsub('^%s*','')\r\n            local i1,i2 = line:find(keypat)\r\n            if i1 and not ignore_assign then -- key,value assignment\r\n                local key = process_name(line:sub(1,i1-1))\r\n                local value = process_value(line:sub(i2+1))\r\n                t[key] = value\r\n            else -- a plain list of values...\r\n                t[#t+1] = process_value(line)\r\n            end\r\n        end\r\n        line = iter()\r\n    end",
    "type": "statement:while"
  }, {
    "id": 91,
    "text": "if line:find('^%[') then -- section!\r\n            local section = process_name(line:match('%[([^%]]+)%]'))\r\n            t = top_t\r\n            t[section] = {}\r\n            t = t[section]\r\n        else\r\n            line = line:gsub('^%s*','')\r\n            local i1,i2 = line:find(keypat)\r\n            if i1 and not ignore_assign then -- key,value assignment\r\n                local key = process_name(line:sub(1,i1-1))\r\n                local value = process_value(line:sub(i2+1))\r\n                t[key] = value\r\n            else -- a plain list of values...\r\n                t[#t+1] = process_value(line)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "local section = process_name(line:match('%[([^%]]+)%]'))",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "t = top_t",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "t[section] = {}",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "t = t[section]",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "line = line:gsub('^%s*','')",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "local i1,i2 = line:find(keypat)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if i1 and not ignore_assign then -- key,value assignment\r\n                local key = process_name(line:sub(1,i1-1))\r\n                local value = process_value(line:sub(i2+1))\r\n                t[key] = value\r\n            else -- a plain list of values...\r\n                t[#t+1] = process_value(line)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "local key = process_name(line:sub(1,i1-1))",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local value = process_value(line:sub(i2+1))",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "t[key] = value",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "t[#t+1] = process_value(line)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "line = iter()",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "local function check_cnfg (var,def)\r\n        local val = cnfg[var]\r\n        if val == nil then return def else return val end\r\n    end",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "local function process_name(key)\r\n        if variablilize then\r\n            key = key:gsub('[^%w]','_')\r\n        end\r\n        return key\r\n    end",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "local function process_value(value)\r\n        if list_delim and value:find(list_delim) then\r\n            value = split(value,list_delim)\r\n            for i,v in ipairs(value) do\r\n                value[i] = process_value(v)\r\n            end\r\n        elseif convert_numbers and value:find(initial_digits) then\r\n            local val = tonumber(value)\r\n            if not val and value:match ' kB$' then\r\n                value = value:gsub(' kB','')\r\n                val = tonumber(value)\r\n            end\r\n            if val then value = val end\r\n        elseif convert_boolean and value == 'true' then\r\n           return true\r\n        elseif convert_boolean and value == 'false' then\r\n           return false\r\n        end\r\n        if type(value) == 'string' then\r\n           if trim_space then value = strip(value) end\r\n           if not trim_quotes and auto and value:match '^\"' then\r\n                trim_quotes = true\r\n            end\r\n           if trim_quotes then value = strip_quotes(value) end\r\n        end\r\n        return value\r\n    end",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function()\r\n        local l = f:read()\r\n        while l do\r\n            -- only for non-blank lines that don't begin with either ';' or '#'\r\n            if l:match '%S' and not l:match '^%s*[;#]' then\r\n                -- does the line end with '\\'?\r\n                local i = l:find '\\\\%s*$'\r\n                if i then -- if so,\r\n                    line = line..l:sub(1,i-1)\r\n                elseif line == '' then\r\n                    return l\r\n                else\r\n                    l = line..l\r\n                    line = ''\r\n                    return l\r\n                end\r\n            end\r\n            l = f:read()\r\n        end\r\n        if openf then f:close() end\r\n    end",
    "type": "function"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "",
    "type": "function container"
  }, {
    "id": 114,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 115,
    "text": "t_insert",
    "type": "global function"
  }, {
    "id": 116,
    "text": "iter",
    "type": "global function"
  }, {
    "id": 117,
    "text": "type",
    "type": "global function"
  }, {
    "id": 118,
    "text": "open",
    "type": "global function"
  }, {
    "id": 119,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "variable container"
  }, {
    "id": 122,
    "text": "",
    "type": "require container"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "n/a"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 135,
    "text": "",
    "type": "interface container"
  }, {
    "id": 136,
    "text": "",
    "type": "interface"
  }, {
    "id": 137,
    "text": "",
    "type": "require local variable"
  } ]
}