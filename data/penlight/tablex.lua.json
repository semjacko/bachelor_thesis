{
  "_filename": "tablex.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/tablex.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 32
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 4
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 32
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 38
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 40
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 67
  }, {
    "from": 74,
    "label": "has",
    "to": 68
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 70
  }, {
    "from": 74,
    "label": "has",
    "to": 69
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 77,
    "label": "has",
    "to": 88
  }, {
    "from": 77,
    "label": "has",
    "to": 89
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 4
  }, {
    "from": 91,
    "label": "has",
    "to": 4
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 92
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 97
  }, {
    "from": 99,
    "label": "has",
    "to": 4
  }, {
    "from": 99,
    "label": "has",
    "to": 4
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 32
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 38
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 4
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 32
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 38
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 4
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 92
  }, {
    "from": 120,
    "label": "has",
    "to": 116
  }, {
    "from": 120,
    "label": "has",
    "to": 38
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 4
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 38
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 124,
    "label": "has",
    "to": 4
  }, {
    "from": 124,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 32
  }, {
    "from": 132,
    "label": "has",
    "to": 116
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 136,
    "label": "has",
    "to": 4
  }, {
    "from": 136,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 27
  }, {
    "from": 147,
    "label": "has",
    "to": 116
  }, {
    "from": 147,
    "label": "has",
    "to": 38
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 4
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 116
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 152,
    "label": "has",
    "to": 4
  }, {
    "from": 152,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 126
  }, {
    "from": 159,
    "label": "has",
    "to": 116
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 159,
    "label": "has",
    "to": 4
  }, {
    "from": 159,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 32
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 92
  }, {
    "from": 170,
    "label": "has",
    "to": 166
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 116
  }, {
    "from": 174,
    "label": "has",
    "to": 38
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 179,
    "label": "has",
    "to": 184
  }, {
    "from": 174,
    "label": "has",
    "to": 4
  }, {
    "from": 174,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 32
  }, {
    "from": 186,
    "label": "has",
    "to": 116
  }, {
    "from": 186,
    "label": "has",
    "to": 38
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 190,
    "label": "has",
    "to": 194
  }, {
    "from": 189,
    "label": "has",
    "to": 195
  }, {
    "from": 186,
    "label": "has",
    "to": 4
  }, {
    "from": 186,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 4
  }, {
    "from": 198,
    "label": "has",
    "to": 32
  }, {
    "from": 198,
    "label": "has",
    "to": 4
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 4
  }, {
    "from": 201,
    "label": "has",
    "to": 32
  }, {
    "from": 201,
    "label": "has",
    "to": 4
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 4
  }, {
    "from": 204,
    "label": "has",
    "to": 92
  }, {
    "from": 204,
    "label": "has",
    "to": 4
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 4
  }, {
    "from": 207,
    "label": "has",
    "to": 92
  }, {
    "from": 207,
    "label": "has",
    "to": 4
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 148
  }, {
    "from": 209,
    "label": "has",
    "to": 27
  }, {
    "from": 209,
    "label": "has",
    "to": 38
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 40
  }, {
    "from": 209,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 40
  }, {
    "from": 209,
    "label": "has",
    "to": 4
  }, {
    "from": 209,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 4
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 4
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 38
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 40
  }, {
    "from": 219,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 40
  }, {
    "from": 219,
    "label": "has",
    "to": 4
  }, {
    "from": 219,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 92
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 160
  }, {
    "from": 228,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 236,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 228,
    "label": "has",
    "to": 4
  }, {
    "from": 228,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 92
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 232
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 40
  }, {
    "from": 247,
    "label": "has",
    "to": 183
  }, {
    "from": 243,
    "label": "has",
    "to": 4
  }, {
    "from": 243,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 4
  }, {
    "from": 249,
    "label": "has",
    "to": 4
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 251,
    "label": "has",
    "to": 254
  }, {
    "from": 251,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 255,
    "label": "has",
    "to": 258
  }, {
    "from": 251,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 260,
    "label": "has",
    "to": 257
  }, {
    "from": 251,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 251,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 251,
    "label": "has",
    "to": 4
  }, {
    "from": 251,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 269,
    "label": "has",
    "to": 4
  }, {
    "from": 269,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 270
  }, {
    "from": 273,
    "label": "has",
    "to": 271
  }, {
    "from": 273,
    "label": "has",
    "to": 4
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 275,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 275,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 275,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 275,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 275,
    "label": "has",
    "to": 4
  }, {
    "from": 275,
    "label": "has",
    "to": 285
  }, {
    "from": 286,
    "label": "has",
    "to": 92
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 286,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 286,
    "label": "has",
    "to": 4
  }, {
    "from": 286,
    "label": "has",
    "to": 291
  }, {
    "from": 292,
    "label": "has",
    "to": 92
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 294,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 292,
    "label": "has",
    "to": 299
  }, {
    "from": 300,
    "label": "has",
    "to": 38
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 4
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 303,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 308,
    "label": "has",
    "to": 311
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 311,
    "label": "has",
    "to": 313
  }, {
    "from": 308,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 317
  }, {
    "from": 314,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 308,
    "label": "has",
    "to": 4
  }, {
    "from": 308,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 309
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 321,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 321,
    "label": "has",
    "to": 4
  }, {
    "from": 321,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 326,
    "label": "has",
    "to": 4
  }, {
    "from": 326,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 332
  }, {
    "from": 330,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 333,
    "label": "has",
    "to": 335
  }, {
    "from": 326,
    "label": "has",
    "to": 4
  }, {
    "from": 326,
    "label": "has",
    "to": 4
  }, {
    "from": 326,
    "label": "has",
    "to": 336
  }, {
    "from": 337,
    "label": "has",
    "to": 32
  }, {
    "from": 337,
    "label": "has",
    "to": 338
  }, {
    "from": 337,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 331
  }, {
    "from": 337,
    "label": "has",
    "to": 4
  }, {
    "from": 337,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 342,
    "label": "has",
    "to": 346
  }, {
    "from": 342,
    "label": "has",
    "to": 33
  }, {
    "from": 342,
    "label": "has",
    "to": 4
  }, {
    "from": 342,
    "label": "has",
    "to": 35
  }, {
    "from": 342,
    "label": "has",
    "to": 4
  }, {
    "from": 342,
    "label": "has",
    "to": 347
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 343
  }, {
    "from": 348,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 4
  }, {
    "from": 348,
    "label": "has",
    "to": 33
  }, {
    "from": 348,
    "label": "has",
    "to": 4
  }, {
    "from": 348,
    "label": "has",
    "to": 35
  }, {
    "from": 348,
    "label": "has",
    "to": 4
  }, {
    "from": 348,
    "label": "has",
    "to": 351
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 353,
    "label": "has",
    "to": 4
  }, {
    "from": 353,
    "label": "has",
    "to": 4
  }, {
    "from": 353,
    "label": "has",
    "to": 4
  }, {
    "from": 352,
    "label": "has",
    "to": 4
  }, {
    "from": 352,
    "label": "has",
    "to": 355
  }, {
    "from": 356,
    "label": "has",
    "to": 4
  }, {
    "from": 357,
    "label": "has",
    "to": 35
  }, {
    "from": 357,
    "label": "has",
    "to": 4
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 359,
    "label": "has",
    "to": 4
  }, {
    "from": 360,
    "label": "has",
    "to": 35
  }, {
    "from": 360,
    "label": "has",
    "to": 4
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 362,
    "label": "has",
    "to": 354
  }, {
    "from": 363,
    "label": "has",
    "to": 4
  }, {
    "from": 364,
    "label": "has",
    "to": 4
  }, {
    "from": 365,
    "label": "has",
    "to": 4
  }, {
    "from": 204,
    "label": "calls",
    "to": 8
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 115,
    "label": "calls",
    "to": 2
  }, {
    "from": 120,
    "label": "calls",
    "to": 2
  }, {
    "from": 124,
    "label": "calls",
    "to": 2
  }, {
    "from": 147,
    "label": "calls",
    "to": 2
  }, {
    "from": 209,
    "label": "calls",
    "to": 2
  }, {
    "from": 219,
    "label": "calls",
    "to": 2
  }, {
    "from": 243,
    "label": "calls",
    "to": 2
  }, {
    "from": 286,
    "label": "calls",
    "to": 2
  }, {
    "from": 366,
    "label": "calls",
    "to": 382
  }, {
    "from": 13,
    "label": "calls",
    "to": 368
  }, {
    "from": 13,
    "label": "calls",
    "to": 10
  }, {
    "from": 17,
    "label": "calls",
    "to": 10
  }, {
    "from": 21,
    "label": "calls",
    "to": 10
  }, {
    "from": 21,
    "label": "calls",
    "to": 369
  }, {
    "from": 300,
    "label": "calls",
    "to": 292
  }, {
    "from": 352,
    "label": "calls",
    "to": 373
  }, {
    "from": 286,
    "label": "calls",
    "to": 374
  }, {
    "from": 174,
    "label": "calls",
    "to": 379
  }, {
    "from": 251,
    "label": "calls",
    "to": 379
  }, {
    "from": 25,
    "label": "calls",
    "to": 392
  }, {
    "from": 31,
    "label": "calls",
    "to": 392
  }, {
    "from": 37,
    "label": "calls",
    "to": 392
  }, {
    "from": 42,
    "label": "calls",
    "to": 392
  }, {
    "from": 50,
    "label": "calls",
    "to": 392
  }, {
    "from": 50,
    "label": "calls",
    "to": 392
  }, {
    "from": 50,
    "label": "calls",
    "to": 392
  }, {
    "from": 103,
    "label": "calls",
    "to": 392
  }, {
    "from": 115,
    "label": "calls",
    "to": 392
  }, {
    "from": 132,
    "label": "calls",
    "to": 392
  }, {
    "from": 147,
    "label": "calls",
    "to": 392
  }, {
    "from": 165,
    "label": "calls",
    "to": 392
  }, {
    "from": 186,
    "label": "calls",
    "to": 392
  }, {
    "from": 209,
    "label": "calls",
    "to": 392
  }, {
    "from": 209,
    "label": "calls",
    "to": 392
  }, {
    "from": 219,
    "label": "calls",
    "to": 392
  }, {
    "from": 219,
    "label": "calls",
    "to": 392
  }, {
    "from": 366,
    "label": "calls",
    "to": 392
  }, {
    "from": 366,
    "label": "calls",
    "to": 392
  }, {
    "from": 337,
    "label": "calls",
    "to": 392
  }, {
    "from": 342,
    "label": "calls",
    "to": 392
  }, {
    "from": 348,
    "label": "calls",
    "to": 392
  }, {
    "from": 352,
    "label": "calls",
    "to": 392
  }, {
    "from": 152,
    "label": "calls",
    "to": 375
  }, {
    "from": 25,
    "label": "calls",
    "to": 17
  }, {
    "from": 31,
    "label": "calls",
    "to": 17
  }, {
    "from": 37,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 103,
    "label": "calls",
    "to": 17
  }, {
    "from": 115,
    "label": "calls",
    "to": 17
  }, {
    "from": 132,
    "label": "calls",
    "to": 17
  }, {
    "from": 147,
    "label": "calls",
    "to": 17
  }, {
    "from": 147,
    "label": "calls",
    "to": 17
  }, {
    "from": 165,
    "label": "calls",
    "to": 17
  }, {
    "from": 186,
    "label": "calls",
    "to": 17
  }, {
    "from": 198,
    "label": "calls",
    "to": 17
  }, {
    "from": 201,
    "label": "calls",
    "to": 17
  }, {
    "from": 209,
    "label": "calls",
    "to": 17
  }, {
    "from": 209,
    "label": "calls",
    "to": 17
  }, {
    "from": 219,
    "label": "calls",
    "to": 17
  }, {
    "from": 219,
    "label": "calls",
    "to": 17
  }, {
    "from": 337,
    "label": "calls",
    "to": 17
  }, {
    "from": 10,
    "label": "calls",
    "to": 393
  }, {
    "from": 352,
    "label": "calls",
    "to": 393
  }, {
    "from": 2,
    "label": "calls",
    "to": 397
  }, {
    "from": 42,
    "label": "calls",
    "to": 397
  }, {
    "from": 50,
    "label": "calls",
    "to": 397
  }, {
    "from": 174,
    "label": "calls",
    "to": 386
  }, {
    "from": 348,
    "label": "calls",
    "to": 380
  }, {
    "from": 136,
    "label": "calls",
    "to": 6
  }, {
    "from": 198,
    "label": "calls",
    "to": 6
  }, {
    "from": 201,
    "label": "calls",
    "to": 6
  }, {
    "from": 292,
    "label": "calls",
    "to": 367
  }, {
    "from": 243,
    "label": "calls",
    "to": 377
  }, {
    "from": 303,
    "label": "calls",
    "to": 391
  }, {
    "from": 321,
    "label": "calls",
    "to": 391
  }, {
    "from": 2,
    "label": "calls",
    "to": 396
  }, {
    "from": 6,
    "label": "calls",
    "to": 396
  }, {
    "from": 8,
    "label": "calls",
    "to": 396
  }, {
    "from": 42,
    "label": "calls",
    "to": 396
  }, {
    "from": 207,
    "label": "calls",
    "to": 396
  }, {
    "from": 228,
    "label": "calls",
    "to": 396
  }, {
    "from": 352,
    "label": "calls",
    "to": 396
  }, {
    "from": 292,
    "label": "calls",
    "to": 383
  }, {
    "from": 215,
    "label": "calls",
    "to": 209
  }, {
    "from": 217,
    "label": "calls",
    "to": 209
  }, {
    "from": 66,
    "label": "calls",
    "to": 13
  }, {
    "from": 66,
    "label": "calls",
    "to": 13
  }, {
    "from": 74,
    "label": "calls",
    "to": 13
  }, {
    "from": 74,
    "label": "calls",
    "to": 13
  }, {
    "from": 91,
    "label": "calls",
    "to": 13
  }, {
    "from": 99,
    "label": "calls",
    "to": 13
  }, {
    "from": 109,
    "label": "calls",
    "to": 13
  }, {
    "from": 109,
    "label": "calls",
    "to": 13
  }, {
    "from": 120,
    "label": "calls",
    "to": 13
  }, {
    "from": 124,
    "label": "calls",
    "to": 13
  }, {
    "from": 152,
    "label": "calls",
    "to": 13
  }, {
    "from": 152,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 170,
    "label": "calls",
    "to": 13
  }, {
    "from": 204,
    "label": "calls",
    "to": 13
  }, {
    "from": 207,
    "label": "calls",
    "to": 13
  }, {
    "from": 228,
    "label": "calls",
    "to": 13
  }, {
    "from": 243,
    "label": "calls",
    "to": 13
  }, {
    "from": 269,
    "label": "calls",
    "to": 13
  }, {
    "from": 269,
    "label": "calls",
    "to": 13
  }, {
    "from": 273,
    "label": "calls",
    "to": 13
  }, {
    "from": 273,
    "label": "calls",
    "to": 13
  }, {
    "from": 286,
    "label": "calls",
    "to": 13
  }, {
    "from": 292,
    "label": "calls",
    "to": 13
  }, {
    "from": 249,
    "label": "calls",
    "to": 174
  }, {
    "from": 342,
    "label": "calls",
    "to": 388
  }, {
    "from": 348,
    "label": "calls",
    "to": 388
  }, {
    "from": 50,
    "label": "calls",
    "to": 385
  }, {
    "from": 66,
    "label": "calls",
    "to": 378
  }, {
    "from": 74,
    "label": "calls",
    "to": 378
  }, {
    "from": 103,
    "label": "calls",
    "to": 378
  }, {
    "from": 228,
    "label": "calls",
    "to": 378
  }, {
    "from": 186,
    "label": "calls",
    "to": 376
  }, {
    "from": 124,
    "label": "calls",
    "to": 370
  }, {
    "from": 198,
    "label": "calls",
    "to": 186
  }, {
    "from": 201,
    "label": "calls",
    "to": 186
  }, {
    "from": 204,
    "label": "calls",
    "to": 186
  }, {
    "from": 207,
    "label": "calls",
    "to": 186
  }, {
    "from": 286,
    "label": "calls",
    "to": 275
  }, {
    "from": 321,
    "label": "calls",
    "to": 275
  }, {
    "from": 251,
    "label": "calls",
    "to": 303
  }, {
    "from": 366,
    "label": "calls",
    "to": 326
  }, {
    "from": 337,
    "label": "calls",
    "to": 326
  }, {
    "from": 115,
    "label": "calls",
    "to": 394
  }, {
    "from": 120,
    "label": "calls",
    "to": 394
  }, {
    "from": 124,
    "label": "calls",
    "to": 394
  }, {
    "from": 132,
    "label": "calls",
    "to": 394
  }, {
    "from": 147,
    "label": "calls",
    "to": 394
  }, {
    "from": 152,
    "label": "calls",
    "to": 394
  }, {
    "from": 159,
    "label": "calls",
    "to": 394
  }, {
    "from": 165,
    "label": "calls",
    "to": 394
  }, {
    "from": 170,
    "label": "calls",
    "to": 394
  }, {
    "from": 174,
    "label": "calls",
    "to": 394
  }, {
    "from": 186,
    "label": "calls",
    "to": 394
  }, {
    "from": 25,
    "label": "calls",
    "to": 21
  }, {
    "from": 308,
    "label": "calls",
    "to": 395
  }, {
    "from": 321,
    "label": "calls",
    "to": 395
  }, {
    "from": 42,
    "label": "calls",
    "to": 42
  }, {
    "from": 251,
    "label": "calls",
    "to": 286
  }, {
    "from": 66,
    "label": "calls",
    "to": 389
  }, {
    "from": 74,
    "label": "calls",
    "to": 389
  }, {
    "from": 103,
    "label": "calls",
    "to": 389
  }, {
    "from": 115,
    "label": "calls",
    "to": 389
  }, {
    "from": 120,
    "label": "calls",
    "to": 389
  }, {
    "from": 132,
    "label": "calls",
    "to": 389
  }, {
    "from": 147,
    "label": "calls",
    "to": 389
  }, {
    "from": 152,
    "label": "calls",
    "to": 389
  }, {
    "from": 159,
    "label": "calls",
    "to": 389
  }, {
    "from": 165,
    "label": "calls",
    "to": 389
  }, {
    "from": 170,
    "label": "calls",
    "to": 389
  }, {
    "from": 174,
    "label": "calls",
    "to": 389
  }, {
    "from": 186,
    "label": "calls",
    "to": 389
  }, {
    "from": 228,
    "label": "calls",
    "to": 389
  }, {
    "from": 243,
    "label": "calls",
    "to": 389
  }, {
    "from": 348,
    "label": "calls",
    "to": 389
  }, {
    "from": 308,
    "label": "calls",
    "to": 387
  }, {
    "from": 269,
    "label": "calls",
    "to": 251
  }, {
    "from": 273,
    "label": "calls",
    "to": 251
  }, {
    "from": 42,
    "label": "calls",
    "to": 384
  }, {
    "from": 42,
    "label": "calls",
    "to": 384
  }, {
    "from": 50,
    "label": "calls",
    "to": 384
  }, {
    "from": 50,
    "label": "calls",
    "to": 384
  }, {
    "from": 186,
    "label": "calls",
    "to": 384
  }, {
    "from": 366,
    "label": "calls",
    "to": 384
  }, {
    "from": 366,
    "label": "calls",
    "to": 384
  }, {
    "from": 366,
    "label": "calls",
    "to": 381
  }, {
    "from": 366,
    "label": "calls",
    "to": 381
  }, {
    "from": 2,
    "label": "calls",
    "to": 381
  }, {
    "from": 6,
    "label": "calls",
    "to": 381
  }, {
    "from": 8,
    "label": "calls",
    "to": 381
  }, {
    "from": 207,
    "label": "calls",
    "to": 381
  }, {
    "from": 17,
    "label": "calls",
    "to": 371
  }, {
    "from": 50,
    "label": "calls",
    "to": 390
  }, {
    "from": 1,
    "label": "contains",
    "to": 366
  }, {
    "from": 366,
    "label": "declares",
    "to": 2
  }, {
    "from": 366,
    "label": "declares",
    "to": 6
  }, {
    "from": 366,
    "label": "declares",
    "to": 8
  }, {
    "from": 366,
    "label": "declares",
    "to": 10
  }, {
    "from": 366,
    "label": "declares",
    "to": 13
  }, {
    "from": 366,
    "label": "declares",
    "to": 17
  }, {
    "from": 366,
    "label": "declares",
    "to": 21
  }, {
    "from": 366,
    "label": "declares",
    "to": 25
  }, {
    "from": 366,
    "label": "declares",
    "to": 31
  }, {
    "from": 366,
    "label": "declares",
    "to": 37
  }, {
    "from": 366,
    "label": "declares",
    "to": 42
  }, {
    "from": 366,
    "label": "declares",
    "to": 50
  }, {
    "from": 366,
    "label": "declares",
    "to": 66
  }, {
    "from": 366,
    "label": "declares",
    "to": 74
  }, {
    "from": 366,
    "label": "declares",
    "to": 91
  }, {
    "from": 366,
    "label": "declares",
    "to": 99
  }, {
    "from": 366,
    "label": "declares",
    "to": 103
  }, {
    "from": 366,
    "label": "declares",
    "to": 109
  }, {
    "from": 366,
    "label": "declares",
    "to": 115
  }, {
    "from": 366,
    "label": "declares",
    "to": 120
  }, {
    "from": 366,
    "label": "declares",
    "to": 124
  }, {
    "from": 366,
    "label": "declares",
    "to": 132
  }, {
    "from": 366,
    "label": "declares",
    "to": 136
  }, {
    "from": 366,
    "label": "declares",
    "to": 147
  }, {
    "from": 366,
    "label": "declares",
    "to": 152
  }, {
    "from": 366,
    "label": "declares",
    "to": 159
  }, {
    "from": 366,
    "label": "declares",
    "to": 165
  }, {
    "from": 366,
    "label": "declares",
    "to": 170
  }, {
    "from": 366,
    "label": "declares",
    "to": 174
  }, {
    "from": 366,
    "label": "declares",
    "to": 186
  }, {
    "from": 366,
    "label": "declares",
    "to": 197
  }, {
    "from": 366,
    "label": "declares",
    "to": 198
  }, {
    "from": 366,
    "label": "declares",
    "to": 200
  }, {
    "from": 366,
    "label": "declares",
    "to": 201
  }, {
    "from": 366,
    "label": "declares",
    "to": 203
  }, {
    "from": 366,
    "label": "declares",
    "to": 204
  }, {
    "from": 366,
    "label": "declares",
    "to": 206
  }, {
    "from": 366,
    "label": "declares",
    "to": 207
  }, {
    "from": 366,
    "label": "declares",
    "to": 209
  }, {
    "from": 366,
    "label": "declares",
    "to": 215
  }, {
    "from": 366,
    "label": "declares",
    "to": 217
  }, {
    "from": 366,
    "label": "declares",
    "to": 219
  }, {
    "from": 366,
    "label": "declares",
    "to": 228
  }, {
    "from": 366,
    "label": "declares",
    "to": 243
  }, {
    "from": 366,
    "label": "declares",
    "to": 249
  }, {
    "from": 366,
    "label": "declares",
    "to": 251
  }, {
    "from": 366,
    "label": "declares",
    "to": 269
  }, {
    "from": 366,
    "label": "declares",
    "to": 273
  }, {
    "from": 366,
    "label": "declares",
    "to": 275
  }, {
    "from": 366,
    "label": "declares",
    "to": 286
  }, {
    "from": 366,
    "label": "declares",
    "to": 292
  }, {
    "from": 366,
    "label": "declares",
    "to": 300
  }, {
    "from": 366,
    "label": "declares",
    "to": 303
  }, {
    "from": 366,
    "label": "declares",
    "to": 308
  }, {
    "from": 366,
    "label": "declares",
    "to": 321
  }, {
    "from": 366,
    "label": "declares",
    "to": 326
  }, {
    "from": 366,
    "label": "declares",
    "to": 337
  }, {
    "from": 366,
    "label": "declares",
    "to": 342
  }, {
    "from": 366,
    "label": "declares",
    "to": 348
  }, {
    "from": 366,
    "label": "declares",
    "to": 352
  }, {
    "from": 366,
    "label": "declares",
    "to": 356
  }, {
    "from": 366,
    "label": "declares",
    "to": 357
  }, {
    "from": 366,
    "label": "declares",
    "to": 359
  }, {
    "from": 366,
    "label": "declares",
    "to": 360
  }, {
    "from": 366,
    "label": "declares",
    "to": 362
  }, {
    "from": 366,
    "label": "declares",
    "to": 363
  }, {
    "from": 366,
    "label": "declares",
    "to": 364
  }, {
    "from": 366,
    "label": "declares",
    "to": 365
  }, {
    "from": 1,
    "label": "declares",
    "to": 372
  }, {
    "from": 398,
    "label": "requires",
    "to": 1
  }, {
    "from": 399,
    "label": "requires",
    "to": 1
  }, {
    "from": 400,
    "label": "requires",
    "to": 1
  }, {
    "from": 401,
    "label": "requires",
    "to": 1
  }, {
    "from": 402,
    "label": "requires",
    "to": 1
  }, {
    "from": 403,
    "label": "requires",
    "to": 1
  }, {
    "from": 404,
    "label": "requires",
    "to": 1
  }, {
    "from": 405,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 406
  }, {
    "from": 1,
    "label": "contains",
    "to": 407
  }, {
    "from": 406,
    "label": "initializes",
    "to": 408
  }, {
    "from": 408,
    "label": "assigns",
    "to": 409
  }, {
    "from": 406,
    "label": "initializes",
    "to": 410
  }, {
    "from": 410,
    "label": "assigns",
    "to": 411
  }, {
    "from": 406,
    "label": "initializes",
    "to": 412
  }, {
    "from": 412,
    "label": "assigns",
    "to": 413
  }, {
    "from": 406,
    "label": "initializes",
    "to": 414
  }, {
    "from": 414,
    "label": "assigns",
    "to": 415
  }, {
    "from": 406,
    "label": "initializes",
    "to": 416
  }, {
    "from": 416,
    "label": "assigns",
    "to": 417
  }, {
    "from": 406,
    "label": "initializes",
    "to": 418
  }, {
    "from": 418,
    "label": "assigns",
    "to": 419
  }, {
    "from": 406,
    "label": "initializes",
    "to": 420
  }, {
    "from": 420,
    "label": "assigns",
    "to": 421
  }, {
    "from": 406,
    "label": "initializes",
    "to": 422
  }, {
    "from": 422,
    "label": "assigns",
    "to": 423
  }, {
    "from": 406,
    "label": "initializes",
    "to": 424
  }, {
    "from": 424,
    "label": "assigns",
    "to": 425
  }, {
    "from": 406,
    "label": "initializes",
    "to": 426
  }, {
    "from": 426,
    "label": "assigns",
    "to": 427
  }, {
    "from": 406,
    "label": "initializes",
    "to": 428
  }, {
    "from": 428,
    "label": "assigns",
    "to": 429
  }, {
    "from": 406,
    "label": "initializes",
    "to": 430
  }, {
    "from": 430,
    "label": "assigns",
    "to": 431
  }, {
    "from": 406,
    "label": "initializes",
    "to": 432
  }, {
    "from": 432,
    "label": "assigns",
    "to": 433
  }, {
    "from": 406,
    "label": "initializes",
    "to": 434
  }, {
    "from": 434,
    "label": "assigns",
    "to": 435
  }, {
    "from": 406,
    "label": "initializes",
    "to": 436
  }, {
    "from": 436,
    "label": "assigns",
    "to": 437
  }, {
    "from": 406,
    "label": "initializes",
    "to": 438
  }, {
    "from": 438,
    "label": "assigns",
    "to": 439
  }, {
    "from": 406,
    "label": "initializes",
    "to": 440
  }, {
    "from": 440,
    "label": "assigns",
    "to": 441
  }, {
    "from": 406,
    "label": "initializes",
    "to": 442
  }, {
    "from": 442,
    "label": "assigns",
    "to": 443
  }, {
    "from": 406,
    "label": "initializes",
    "to": 444
  }, {
    "from": 406,
    "label": "initializes",
    "to": 445
  }, {
    "from": 406,
    "label": "initializes",
    "to": 446
  }, {
    "from": 406,
    "label": "initializes",
    "to": 447
  }, {
    "from": 447,
    "label": "assigns",
    "to": 448
  }, {
    "from": 406,
    "label": "initializes",
    "to": 449
  }, {
    "from": 449,
    "label": "assigns",
    "to": 450
  }, {
    "from": 407,
    "label": "initializes",
    "to": 451
  }, {
    "from": 451,
    "label": "requires",
    "to": 452
  }, {
    "from": 407,
    "label": "initializes",
    "to": 453
  }, {
    "from": 453,
    "label": "requires",
    "to": 454
  }, {
    "from": 407,
    "label": "initializes",
    "to": 455
  }, {
    "from": 455,
    "label": "requires",
    "to": 456
  }, {
    "from": 1,
    "label": "provides",
    "to": 457
  }, {
    "from": 440,
    "label": "represents",
    "to": 458
  }, {
    "from": 457,
    "label": "provides",
    "to": 458
  }, {
    "from": 459,
    "label": "requires",
    "to": 1
  }, {
    "from": 460,
    "label": "requires",
    "to": 1
  }, {
    "from": 461,
    "label": "requires",
    "to": 1
  }, {
    "from": 462,
    "label": "requires",
    "to": 1
  }, {
    "from": 463,
    "label": "requires",
    "to": 1
  }, {
    "from": 464,
    "label": "requires",
    "to": 1
  }, {
    "from": 465,
    "label": "requires",
    "to": 1
  }, {
    "from": 466,
    "label": "requires",
    "to": 452
  }, {
    "from": 440,
    "label": "contains",
    "to": 25
  }, {
    "from": 440,
    "label": "contains",
    "to": 31
  }, {
    "from": 440,
    "label": "contains",
    "to": 37
  }, {
    "from": 440,
    "label": "contains",
    "to": 42
  }, {
    "from": 440,
    "label": "contains",
    "to": 50
  }, {
    "from": 440,
    "label": "contains",
    "to": 66
  }, {
    "from": 440,
    "label": "contains",
    "to": 74
  }, {
    "from": 440,
    "label": "contains",
    "to": 91
  }, {
    "from": 440,
    "label": "contains",
    "to": 99
  }, {
    "from": 440,
    "label": "contains",
    "to": 103
  }, {
    "from": 440,
    "label": "contains",
    "to": 109
  }, {
    "from": 440,
    "label": "contains",
    "to": 115
  }, {
    "from": 440,
    "label": "contains",
    "to": 120
  }, {
    "from": 440,
    "label": "contains",
    "to": 124
  }, {
    "from": 440,
    "label": "contains",
    "to": 132
  }, {
    "from": 440,
    "label": "contains",
    "to": 136
  }, {
    "from": 440,
    "label": "contains",
    "to": 147
  }, {
    "from": 440,
    "label": "contains",
    "to": 152
  }, {
    "from": 440,
    "label": "contains",
    "to": 159
  }, {
    "from": 440,
    "label": "contains",
    "to": 165
  }, {
    "from": 440,
    "label": "contains",
    "to": 170
  }, {
    "from": 440,
    "label": "contains",
    "to": 174
  }, {
    "from": 440,
    "label": "contains",
    "to": 186
  }, {
    "from": 440,
    "label": "contains",
    "to": 198
  }, {
    "from": 440,
    "label": "contains",
    "to": 201
  }, {
    "from": 440,
    "label": "contains",
    "to": 204
  }, {
    "from": 440,
    "label": "contains",
    "to": 207
  }, {
    "from": 440,
    "label": "contains",
    "to": 209
  }, {
    "from": 440,
    "label": "contains",
    "to": 215
  }, {
    "from": 440,
    "label": "contains",
    "to": 217
  }, {
    "from": 440,
    "label": "contains",
    "to": 219
  }, {
    "from": 440,
    "label": "contains",
    "to": 228
  }, {
    "from": 440,
    "label": "contains",
    "to": 243
  }, {
    "from": 440,
    "label": "contains",
    "to": 249
  }, {
    "from": 440,
    "label": "contains",
    "to": 269
  }, {
    "from": 440,
    "label": "contains",
    "to": 273
  }, {
    "from": 440,
    "label": "contains",
    "to": 275
  }, {
    "from": 440,
    "label": "contains",
    "to": 286
  }, {
    "from": 440,
    "label": "contains",
    "to": 292
  }, {
    "from": 440,
    "label": "contains",
    "to": 300
  }, {
    "from": 440,
    "label": "contains",
    "to": 303
  }, {
    "from": 440,
    "label": "contains",
    "to": 308
  }, {
    "from": 440,
    "label": "contains",
    "to": 321
  }, {
    "from": 440,
    "label": "contains",
    "to": 337
  }, {
    "from": 440,
    "label": "contains",
    "to": 342
  }, {
    "from": 440,
    "label": "contains",
    "to": 348
  }, {
    "from": 440,
    "label": "contains",
    "to": 352
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 359
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function setmeta (res,tbl,pl_class)\r\n    local mt = getmetatable(tbl) or pl_class and require('pl.' .. pl_class)\r\n    return mt and setmetatable(res, mt) or res\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local mt = getmetatable(tbl) or pl_class and require('pl.' .. pl_class)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function makelist(l)\r\n    return setmetatable(l, require('pl.List'))\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function makemap(m)\r\n    return setmetatable(m, require('pl.Map'))\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function complain (idx,msg)\r\n    error(('argument %d is not %s'):format(idx,msg),3)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "error(('argument %d is not %s'):format(idx,msg),3)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function assert_arg_indexable (idx,val)\r\n    if not types.is_indexable(val) then\r\n        complain(idx,\"indexable\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if not types.is_indexable(val) then\r\n        complain(idx,\"indexable\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "complain(idx,\"indexable\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function assert_arg_iterable (idx,val)\r\n    if not types.is_iterable(val) then\r\n        complain(idx,\"iterable\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if not types.is_iterable(val) then\r\n        complain(idx,\"iterable\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "complain(idx,\"iterable\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function assert_arg_writeable (idx,val)\r\n    if not types.is_writeable(val) then\r\n        complain(idx,\"writeable\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "if not types.is_writeable(val) then\r\n        complain(idx,\"writeable\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "complain(idx,\"writeable\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function tablex.update (t1,t2)\r\n    assert_arg_writeable(1,t1)\r\n    assert_arg_iterable(2,t2)\r\n    for k,v in pairs(t2) do\r\n        t1[k] = v\r\n    end\r\n    return t1\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "assert_arg_writeable(1,t1)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert_arg_iterable(2,t2)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "for k,v in pairs(t2) do\r\n        t1[k] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 29,
    "text": "t1[k] = v",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function tablex.size (t)\r\n    assert_arg_iterable(1,t)\r\n    local i = 0\r\n    for k in pairs(t) do i = i + 1 end\r\n    return i\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "assert_arg_iterable(1,t)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "for k in pairs(t) do i = i + 1 end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function tablex.copy (t)\r\n    assert_arg_iterable(1,t)\r\n    local res = {}\r\n    for k,v in pairs(t) do\r\n        res[k] = v\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "for k,v in pairs(t) do\r\n        res[k] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 40,
    "text": "res[k] = v",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function tablex.deepcopy(t)\r\n    if type(t) ~= 'table' then return t end\r\n    assert_arg_iterable(1,t)\r\n    local mt = getmetatable(t)\r\n    local res = {}\r\n    for k,v in pairs(t) do\r\n        if type(v) == 'table' then\r\n            v = tablex.deepcopy(v)\r\n        end\r\n        res[k] = v\r\n    end\r\n    setmetatable(res,mt)\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "if type(t) ~= 'table' then return t end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "local mt = getmetatable(t)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "for k,v in pairs(t) do\r\n        if type(v) == 'table' then\r\n            v = tablex.deepcopy(v)\r\n        end\r\n        res[k] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "if type(v) == 'table' then\r\n            v = tablex.deepcopy(v)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "v = tablex.deepcopy(v)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "setmetatable(res,mt)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function tablex.deepcompare(t1,t2,ignore_mt,eps)\r\n    local ty1 = type(t1)\r\n    local ty2 = type(t2)\r\n    if ty1 ~= ty2 then return false end\r\n    -- non-table types can be directly compared\r\n    if ty1 ~= 'table' then\r\n        if ty1 == 'number' and eps then return abs(t1-t2) < eps end\r\n        return t1 == t2\r\n    end\r\n    -- as well as tables which have the metamethod __eq\r\n    local mt = getmetatable(t1)\r\n    if not ignore_mt and mt and mt.__eq then return t1 == t2 end\r\n    for k1 in pairs(t1) do\r\n        if t2[k1]==nil then return false end\r\n    end\r\n    for k2 in pairs(t2) do\r\n        if t1[k2]==nil then return false end\r\n    end\r\n    for k1,v1 in pairs(t1) do\r\n        local v2 = t2[k1]\r\n        if not deepcompare(v1,v2,ignore_mt,eps) then return false end\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local ty1 = type(t1)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local ty2 = type(t2)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if ty1 ~= ty2 then return false end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if ty1 ~= 'table' then\r\n        if ty1 == 'number' and eps then return abs(t1-t2) < eps end\r\n        return t1 == t2\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if ty1 == 'number' and eps then return abs(t1-t2) < eps end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local mt = getmetatable(t1)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if not ignore_mt and mt and mt.__eq then return t1 == t2 end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "for k1 in pairs(t1) do\r\n        if t2[k1]==nil then return false end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 59,
    "text": "if t2[k1]==nil then return false end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "for k2 in pairs(t2) do\r\n        if t1[k2]==nil then return false end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "if t1[k2]==nil then return false end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "for k1,v1 in pairs(t1) do\r\n        local v2 = t2[k1]\r\n        if not deepcompare(v1,v2,ignore_mt,eps) then return false end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "local v2 = t2[k1]",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if not deepcompare(v1,v2,ignore_mt,eps) then return false end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function tablex.compare (t1,t2,cmp)\r\n    assert_arg_indexable(1,t1)\r\n    assert_arg_indexable(2,t2)\r\n    if #t1 ~= #t2 then return false end\r\n    cmp = function_arg(3,cmp)\r\n    for k = 1,#t1 do\r\n        if not cmp(t1[k],t2[k]) then return false end\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "assert_arg_indexable(1,t1)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert_arg_indexable(2,t2)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "if #t1 ~= #t2 then return false end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "cmp = function_arg(3,cmp)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "for k = 1,#t1 do\r\n        if not cmp(t1[k],t2[k]) then return false end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 72,
    "text": "if not cmp(t1[k],t2[k]) then return false end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function tablex.compare_no_order (t1,t2,cmp)\r\n    assert_arg_indexable(1,t1)\r\n    assert_arg_indexable(2,t2)\r\n    if cmp then cmp = function_arg(3,cmp) end\r\n    if #t1 ~= #t2 then return false end\r\n    local visited = {}\r\n    for i = 1,#t1 do\r\n        local val = t1[i]\r\n        local gotcha\r\n        for j = 1,#t2 do if not visited[j] then\r\n            local match\r\n            if cmp then match = cmp(val,t2[j]) else match = val == t2[j] end\r\n            if match then\r\n                gotcha = j\r\n                break\r\n            end\r\n        end end\r\n        if not gotcha then return false end\r\n        visited[gotcha] = true\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "if cmp then cmp = function_arg(3,cmp) end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "local visited = {}",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "for i = 1,#t1 do\r\n        local val = t1[i]\r\n        local gotcha\r\n        for j = 1,#t2 do if not visited[j] then\r\n            local match\r\n            if cmp then match = cmp(val,t2[j]) else match = val == t2[j] end\r\n            if match then\r\n                gotcha = j\r\n                break\r\n            end\r\n        end end\r\n        if not gotcha then return false end\r\n        visited[gotcha] = true\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 78,
    "text": "local val = t1[i]",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local gotcha",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "for j = 1,#t2 do if not visited[j] then\r\n            local match\r\n            if cmp then match = cmp(val,t2[j]) else match = val == t2[j] end\r\n            if match then\r\n                gotcha = j\r\n                break\r\n            end\r\n        end end",
    "type": "statement:numericfor"
  }, {
    "id": 81,
    "text": "if not visited[j] then\r\n            local match\r\n            if cmp then match = cmp(val,t2[j]) else match = val == t2[j] end\r\n            if match then\r\n                gotcha = j\r\n                break\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "local match",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "if cmp then match = cmp(val,t2[j]) else match = val == t2[j] end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "match = cmp(val,t2[j])",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "match = val == t2[j]",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if match then\r\n                gotcha = j\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "gotcha = j",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "if not gotcha then return false end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "visited[gotcha] = true",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function tablex.find(t,val,idx)\r\n    assert_arg_indexable(1,t)\r\n    idx = idx or 1\r\n    if idx < 0 then idx = #t + idx + 1 end\r\n    for i = idx,#t do\r\n        if t[i] == val then return i end\r\n    end\r\n    return nil\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "assert_arg_indexable(1,t)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "idx = idx or 1",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "if idx < 0 then idx = #t + idx + 1 end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "idx = #t + idx + 1",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "for i = idx,#t do\r\n        if t[i] == val then return i end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 97,
    "text": "if t[i] == val then return i end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function tablex.rfind(t,val,idx)\r\n    assert_arg_indexable(1,t)\r\n    idx = idx or #t\r\n    if idx < 0 then idx = #t + idx + 1 end\r\n    for i = idx,1,-1 do\r\n        if t[i] == val then return i end\r\n    end\r\n    return nil\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "idx = idx or #t",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "for i = idx,1,-1 do\r\n        if t[i] == val then return i end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function tablex.find_if(t,cmp,arg)\r\n    assert_arg_iterable(1,t)\r\n    cmp = function_arg(2,cmp)\r\n    for k,v in pairs(t) do\r\n        local c = cmp(v,arg)\r\n        if c then return k,c end\r\n    end\r\n    return nil\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "cmp = function_arg(2,cmp)",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "for k,v in pairs(t) do\r\n        local c = cmp(v,arg)\r\n        if c then return k,c end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 106,
    "text": "local c = cmp(v,arg)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "if c then return k,c end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function tablex.index_by(tbl,idx)\r\n    assert_arg_indexable(1,tbl)\r\n    assert_arg_indexable(2,idx)\r\n    local res = {}\r\n    for i = 1,#idx do\r\n        res[i] = tbl[idx[i]]\r\n    end\r\n    return setmeta(res,tbl,'List')\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "assert_arg_indexable(1,tbl)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert_arg_indexable(2,idx)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "for i = 1,#idx do\r\n        res[i] = tbl[idx[i]]\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 113,
    "text": "res[i] = tbl[idx[i]]",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function tablex.map(fun,t,...)\r\n    assert_arg_iterable(1,t)\r\n    fun = function_arg(1,fun)\r\n    local res = {}\r\n    for k,v in pairs(t) do\r\n        res[k] = fun(v,...)\r\n    end\r\n    return setmeta(res,t)\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "fun = function_arg(1,fun)",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "for k,v in pairs(t) do\r\n        res[k] = fun(v,...)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "res[k] = fun(v,...)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function tablex.imap(fun,t,...)\r\n    assert_arg_indexable(1,t)\r\n    fun = function_arg(1,fun)\r\n    local res = {}\r\n    for i = 1,#t do\r\n        res[i] = fun(t[i],...) or false\r\n    end\r\n    return setmeta(res,t,'List')\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "for i = 1,#t do\r\n        res[i] = fun(t[i],...) or false\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 122,
    "text": "res[i] = fun(t[i],...) or false",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function tablex.map_named_method (name,t,...)\r\n    utils.assert_string(1,name)\r\n    assert_arg_indexable(2,t)\r\n    local res = {}\r\n    for i = 1,#t do\r\n        local val = t[i]\r\n        local fun = val[name]\r\n        res[i] = fun(val,...)\r\n    end\r\n    return setmeta(res,t,'List')\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "utils.assert_string(1,name)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert_arg_indexable(2,t)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "for i = 1,#t do\r\n        local val = t[i]\r\n        local fun = val[name]\r\n        res[i] = fun(val,...)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 128,
    "text": "local val = t[i]",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "local fun = val[name]",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "res[i] = fun(val,...)",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function tablex.transform (fun,t,...)\r\n    assert_arg_iterable(1,t)\r\n    fun = function_arg(1,fun)\r\n    for k,v in pairs(t) do\r\n        t[k] = fun(v,...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "for k,v in pairs(t) do\r\n        t[k] = fun(v,...)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "t[k] = fun(v,...)",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function tablex.range (start,finish,step)\r\n    local res\r\n    step = step or 1\r\n    if start == finish then\r\n        res = {start}\r\n    elseif (start > finish and step > 0) or (finish > start and step < 0) then\r\n        res = {}\r\n    else\r\n        local k = 1\r\n        res = {}\r\n        for i=start,finish,step do res[k]=i; k=k+1 end\r\n    end\r\n    return makelist(res)\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "step = step or 1",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "if start == finish then\r\n        res = {start}\r\n    elseif (start > finish and step > 0) or (finish > start and step < 0) then\r\n        res = {}\r\n    else\r\n        local k = 1\r\n        res = {}\r\n        for i=start,finish,step do res[k]=i; k=k+1 end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "res = {start}",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "res = {}",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "local k = 1",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "for i=start,finish,step do res[k]=i; k=k+1 end",
    "type": "statement:numericfor"
  }, {
    "id": 144,
    "text": "res[k]=i",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "k=k+1",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function tablex.map2 (fun,t1,t2,...)\r\n    assert_arg_iterable(1,t1)\r\n    assert_arg_iterable(2,t2)\r\n    fun = function_arg(1,fun)\r\n    local res = {}\r\n    for k,v in pairs(t1) do\r\n        res[k] = fun(v,t2[k],...)\r\n    end\r\n    return setmeta(res,t1,'List')\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "assert_arg_iterable(1,t1)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "for k,v in pairs(t1) do\r\n        res[k] = fun(v,t2[k],...)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 150,
    "text": "res[k] = fun(v,t2[k],...)",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function tablex.imap2 (fun,t1,t2,...)\r\n    assert_arg_indexable(2,t1)\r\n    assert_arg_indexable(3,t2)\r\n    fun = function_arg(1,fun)\r\n    local res,n = {},math.min(#t1,#t2)\r\n    for i = 1,n do\r\n        res[i] = fun(t1[i],t2[i],...)\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "assert_arg_indexable(2,t1)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "assert_arg_indexable(3,t2)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "local res,n = {},math.min(#t1,#t2)",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "for i = 1,n do\r\n        res[i] = fun(t1[i],t2[i],...)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 157,
    "text": "res[i] = fun(t1[i],t2[i],...)",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function tablex.reduce (fun,t)\r\n    assert_arg_indexable(2,t)\r\n    fun = function_arg(1,fun)\r\n    local n = #t\r\n    local res = t[1]\r\n    for i = 2,n do\r\n        res = fun(res,t[i])\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "local n = #t",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "local res = t[1]",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "for i = 2,n do\r\n        res = fun(res,t[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 163,
    "text": "res = fun(res,t[i])",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function tablex.foreach(t,fun,...)\r\n    assert_arg_iterable(1,t)\r\n    fun = function_arg(2,fun)\r\n    for k,v in pairs(t) do\r\n        fun(v,k,...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "fun = function_arg(2,fun)",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "for k,v in pairs(t) do\r\n        fun(v,k,...)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 168,
    "text": "fun(v,k,...)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function tablex.foreachi(t,fun,...)\r\n    assert_arg_indexable(1,t)\r\n    fun = function_arg(2,fun)\r\n    for i = 1,#t do\r\n        fun(t[i],i,...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "for i = 1,#t do\r\n        fun(t[i],i,...)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 172,
    "text": "fun(t[i],i,...)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function tablex.mapn(fun,...)\r\n    fun = function_arg(1,fun)\r\n    local res = {}\r\n    local lists = {...}\r\n    local minn = 1e40\r\n    for i = 1,#lists do\r\n        minn = min(minn,#(lists[i]))\r\n    end\r\n    for i = 1,minn do\r\n        local args,k = {},1\r\n        for j = 1,#lists do\r\n            args[k] = lists[j][i]\r\n            k = k + 1\r\n        end\r\n        res[#res+1] = fun(unpack(args))\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "local lists = {...}",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "local minn = 1e40",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "for i = 1,#lists do\r\n        minn = min(minn,#(lists[i]))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 178,
    "text": "minn = min(minn,#(lists[i]))",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "for i = 1,minn do\r\n        local args,k = {},1\r\n        for j = 1,#lists do\r\n            args[k] = lists[j][i]\r\n            k = k + 1\r\n        end\r\n        res[#res+1] = fun(unpack(args))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 180,
    "text": "local args,k = {},1",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "for j = 1,#lists do\r\n            args[k] = lists[j][i]\r\n            k = k + 1\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 182,
    "text": "args[k] = lists[j][i]",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "res[#res+1] = fun(unpack(args))",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function tablex.pairmap(fun,t,...)\r\n    assert_arg_iterable(1,t)\r\n    fun = function_arg(1,fun)\r\n    local res = {}\r\n    for k,v in pairs(t) do\r\n        local rv,rk = fun(k,v,...)\r\n        if rk then\r\n\t\t\tif res[rk] then\r\n\t\t\t\tif type(res[rk]) == 'table' then\r\n\t\t\t\t\ttable.insert(res[rk],rv)\r\n\t\t\t\telse\r\n\t\t\t\t\tres[rk] = {res[rk], rv}\r\n\t\t\t\tend\r\n\t\t\telse\r\n            \tres[rk] = rv\r\n\t\t\tend\r\n        else\r\n            res[#res+1] = rv\r\n        end\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "for k,v in pairs(t) do\r\n        local rv,rk = fun(k,v,...)\r\n        if rk then\r\n\t\t\tif res[rk] then\r\n\t\t\t\tif type(res[rk]) == 'table' then\r\n\t\t\t\t\ttable.insert(res[rk],rv)\r\n\t\t\t\telse\r\n\t\t\t\t\tres[rk] = {res[rk], rv}\r\n\t\t\t\tend\r\n\t\t\telse\r\n            \tres[rk] = rv\r\n\t\t\tend\r\n        else\r\n            res[#res+1] = rv\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 188,
    "text": "local rv,rk = fun(k,v,...)",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "if rk then\r\n\t\t\tif res[rk] then\r\n\t\t\t\tif type(res[rk]) == 'table' then\r\n\t\t\t\t\ttable.insert(res[rk],rv)\r\n\t\t\t\telse\r\n\t\t\t\t\tres[rk] = {res[rk], rv}\r\n\t\t\t\tend\r\n\t\t\telse\r\n            \tres[rk] = rv\r\n\t\t\tend\r\n        else\r\n            res[#res+1] = rv\r\n        end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "if res[rk] then\r\n\t\t\t\tif type(res[rk]) == 'table' then\r\n\t\t\t\t\ttable.insert(res[rk],rv)\r\n\t\t\t\telse\r\n\t\t\t\t\tres[rk] = {res[rk], rv}\r\n\t\t\t\tend\r\n\t\t\telse\r\n            \tres[rk] = rv\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "if type(res[rk]) == 'table' then\r\n\t\t\t\t\ttable.insert(res[rk],rv)\r\n\t\t\t\telse\r\n\t\t\t\t\tres[rk] = {res[rk], rv}\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "table.insert(res[rk],rv)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "res[rk] = {res[rk], rv}",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "res[rk] = rv",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "res[#res+1] = rv",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "local function keys_op(i,v) return i end",
    "type": "function"
  }, {
    "id": 198,
    "text": "function tablex.keys(t)\r\n    assert_arg_iterable(1,t)\r\n    return makelist(tablex.pairmap(keys_op,t))\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "local function values_op(i,v) return v end",
    "type": "function"
  }, {
    "id": 201,
    "text": "function tablex.values(t)\r\n    assert_arg_iterable(1,t)\r\n    return makelist(tablex.pairmap(values_op,t))\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "local function index_map_op (i,v) return i,v end",
    "type": "function"
  }, {
    "id": 204,
    "text": "function tablex.index_map (t)\r\n    assert_arg_indexable(1,t)\r\n    return makemap(tablex.pairmap(index_map_op,t))\r\nend",
    "type": "function"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "local function set_op(i,v) return true,v end",
    "type": "function"
  }, {
    "id": 207,
    "text": "function tablex.makeset (t)\r\n    assert_arg_indexable(1,t)\r\n    return setmetatable(tablex.pairmap(set_op,t),require('pl.Set'))\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function tablex.merge (t1,t2,dup)\r\n    assert_arg_iterable(1,t1)\r\n    assert_arg_iterable(2,t2)\r\n    local res = {}\r\n    for k,v in pairs(t1) do\r\n        if dup or t2[k] then res[k] = v end\r\n    end\r\n    if dup then\r\n      for k,v in pairs(t2) do\r\n        res[k] = v\r\n      end\r\n    end\r\n    return setmeta(res,t1,'Map')\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "for k,v in pairs(t1) do\r\n        if dup or t2[k] then res[k] = v end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 211,
    "text": "if dup or t2[k] then res[k] = v end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "if dup then\r\n      for k,v in pairs(t2) do\r\n        res[k] = v\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "for k,v in pairs(t2) do\r\n        res[k] = v\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "function tablex.union(t1, t2)\r\n    return tablex.merge(t1, t2, true)\r\nend",
    "type": "function"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function tablex.intersection(t1, t2)\r\n    return tablex.merge(t1, t2, false)\r\nend",
    "type": "function"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function tablex.difference (s1,s2,symm)\r\n    assert_arg_iterable(1,s1)\r\n    assert_arg_iterable(2,s2)\r\n    local res = {}\r\n    for k,v in pairs(s1) do\r\n        if s2[k] == nil then res[k] = v end\r\n    end\r\n    if symm then\r\n        for k,v in pairs(s2) do\r\n            if s1[k] == nil then res[k] = v end\r\n        end\r\n    end\r\n    return setmeta(res,s1,'Map')\r\nend",
    "type": "function"
  }, {
    "id": 220,
    "text": "assert_arg_iterable(1,s1)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "assert_arg_iterable(2,s2)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "for k,v in pairs(s1) do\r\n        if s2[k] == nil then res[k] = v end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 223,
    "text": "if s2[k] == nil then res[k] = v end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "if symm then\r\n        for k,v in pairs(s2) do\r\n            if s1[k] == nil then res[k] = v end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "for k,v in pairs(s2) do\r\n            if s1[k] == nil then res[k] = v end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 226,
    "text": "if s1[k] == nil then res[k] = v end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function tablex.count_map (t,cmp)\r\n    assert_arg_indexable(1,t)\r\n    local res,mask = {},{}\r\n    cmp = function_arg(2,cmp or '==')\r\n    local n = #t\r\n    for i = 1,#t do\r\n        local v = t[i]\r\n        if not mask[v] then\r\n            mask[v] = true\r\n            -- check this value against all other values\r\n            res[v] = 1  -- there's at least one instance\r\n            for j = i+1,n do\r\n                local w = t[j]\r\n                local ok = cmp(v,w)\r\n                if ok then\r\n                    res[v] = res[v] + 1\r\n                    mask[w] = true\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return setmetatable(res,'Map')\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "local res,mask = {},{}",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "cmp = function_arg(2,cmp or '==')",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "for i = 1,#t do\r\n        local v = t[i]\r\n        if not mask[v] then\r\n            mask[v] = true\r\n            -- check this value against all other values\r\n            res[v] = 1  -- there's at least one instance\r\n            for j = i+1,n do\r\n                local w = t[j]\r\n                local ok = cmp(v,w)\r\n                if ok then\r\n                    res[v] = res[v] + 1\r\n                    mask[w] = true\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 232,
    "text": "local v = t[i]",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "if not mask[v] then\r\n            mask[v] = true\r\n            -- check this value against all other values\r\n            res[v] = 1  -- there's at least one instance\r\n            for j = i+1,n do\r\n                local w = t[j]\r\n                local ok = cmp(v,w)\r\n                if ok then\r\n                    res[v] = res[v] + 1\r\n                    mask[w] = true\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "mask[v] = true",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "res[v] = 1",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "for j = i+1,n do\r\n                local w = t[j]\r\n                local ok = cmp(v,w)\r\n                if ok then\r\n                    res[v] = res[v] + 1\r\n                    mask[w] = true\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 237,
    "text": "local w = t[j]",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "local ok = cmp(v,w)",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "if ok then\r\n                    res[v] = res[v] + 1\r\n                    mask[w] = true\r\n                end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "res[v] = res[v] + 1",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "mask[w] = true",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function tablex.filter (t,pred,arg)\r\n    assert_arg_indexable(1,t)\r\n    pred = function_arg(2,pred)\r\n    local res,k = {},1\r\n    for i = 1,#t do\r\n        local v = t[i]\r\n        if pred(v,arg) then\r\n            res[k] = v\r\n            k = k + 1\r\n        end\r\n    end\r\n    return setmeta(res,t,'List')\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "pred = function_arg(2,pred)",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "local res,k = {},1",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "for i = 1,#t do\r\n        local v = t[i]\r\n        if pred(v,arg) then\r\n            res[k] = v\r\n            k = k + 1\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 247,
    "text": "if pred(v,arg) then\r\n            res[k] = v\r\n            k = k + 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "function tablex.zip(...)\r\n    return tablex.mapn(function(...) return {...} end,...)\r\nend",
    "type": "function"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function _copy (dest,src,idest,isrc,nsrc,clean_tail)\r\n    idest = idest or 1\r\n    isrc = isrc or 1\r\n    local iend\r\n    if not nsrc then\r\n        nsrc = #src\r\n        iend = #src\r\n    else\r\n        iend = isrc + min(nsrc-1,#src-isrc)\r\n    end\r\n    if dest == src then -- special case\r\n        if idest > isrc and iend >= idest then -- overlapping ranges\r\n            src = tablex.sub(src,isrc,nsrc)\r\n            isrc = 1; iend = #src\r\n        end\r\n    end\r\n    for i = isrc,iend do\r\n        dest[idest] = src[i]\r\n        idest = idest + 1\r\n    end\r\n    if clean_tail then\r\n        tablex.clear(dest,idest)\r\n    end\r\n    return dest\r\nend",
    "type": "function"
  }, {
    "id": 252,
    "text": "idest = idest or 1",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "isrc = isrc or 1",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "local iend",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "if not nsrc then\r\n        nsrc = #src\r\n        iend = #src\r\n    else\r\n        iend = isrc + min(nsrc-1,#src-isrc)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "nsrc = #src",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "iend = #src",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "iend = isrc + min(nsrc-1,#src-isrc)",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "if dest == src then -- special case\r\n        if idest > isrc and iend >= idest then -- overlapping ranges\r\n            src = tablex.sub(src,isrc,nsrc)\r\n            isrc = 1; iend = #src\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 260,
    "text": "if idest > isrc and iend >= idest then -- overlapping ranges\r\n            src = tablex.sub(src,isrc,nsrc)\r\n            isrc = 1; iend = #src\r\n        end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "src = tablex.sub(src,isrc,nsrc)",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "isrc = 1",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "for i = isrc,iend do\r\n        dest[idest] = src[i]\r\n        idest = idest + 1\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 264,
    "text": "dest[idest] = src[i]",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "idest = idest + 1",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "if clean_tail then\r\n        tablex.clear(dest,idest)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "tablex.clear(dest,idest)",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function tablex.icopy (dest,src,idest,isrc,nsrc)\r\n    assert_arg_indexable(1,dest)\r\n    assert_arg_indexable(2,src)\r\n    return _copy(dest,src,idest,isrc,nsrc,true)\r\nend",
    "type": "function"
  }, {
    "id": 270,
    "text": "assert_arg_indexable(1,dest)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "assert_arg_indexable(2,src)",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function tablex.move (dest,src,idest,isrc,nsrc)\r\n    assert_arg_indexable(1,dest)\r\n    assert_arg_indexable(2,src)\r\n    return _copy(dest,src,idest,isrc,nsrc,false)\r\nend",
    "type": "function"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "function tablex._normalize_slice(self,first,last)\r\n  local sz = #self\r\n  if not first then first=1 end\r\n  if first<0 then first=sz+first+1 end\r\n  -- make the range _inclusive_!\r\n  if not last then last=sz end\r\n  if last < 0 then last=sz+1+last end\r\n  return first,last\r\nend",
    "type": "function"
  }, {
    "id": 276,
    "text": "local sz = #self",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "if not first then first=1 end",
    "type": "statement:if"
  }, {
    "id": 278,
    "text": "first=1",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "if first<0 then first=sz+first+1 end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "first=sz+first+1",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "if not last then last=sz end",
    "type": "statement:if"
  }, {
    "id": 282,
    "text": "last=sz",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "if last < 0 then last=sz+1+last end",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "last=sz+1+last",
    "type": "statement:assign"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function tablex.sub(t,first,last)\r\n    assert_arg_indexable(1,t)\r\n    first,last = tablex._normalize_slice(t,first,last)\r\n    local res={}\r\n    for i=first,last do append(res,t[i]) end\r\n    return setmeta(res,t,'List')\r\nend",
    "type": "function"
  }, {
    "id": 287,
    "text": "first,last = tablex._normalize_slice(t,first,last)",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "local res={}",
    "type": "statement:localassign"
  }, {
    "id": 289,
    "text": "for i=first,last do append(res,t[i]) end",
    "type": "statement:numericfor"
  }, {
    "id": 290,
    "text": "append(res,t[i])",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 292,
    "text": "function tablex.set (t,val,i1,i2)\r\n    assert_arg_indexable(1,t)\r\n    i1,i2 = i1 or 1,i2 or #t\r\n    if types.is_callable(val) then\r\n        for i = i1,i2 do\r\n            t[i] = val(i)\r\n        end\r\n    else\r\n        for i = i1,i2 do\r\n            t[i] = val\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 293,
    "text": "i1,i2 = i1 or 1,i2 or #t",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "if types.is_callable(val) then\r\n        for i = i1,i2 do\r\n            t[i] = val(i)\r\n        end\r\n    else\r\n        for i = i1,i2 do\r\n            t[i] = val\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 295,
    "text": "for i = i1,i2 do\r\n            t[i] = val(i)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 296,
    "text": "t[i] = val(i)",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "for i = i1,i2 do\r\n            t[i] = val\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 298,
    "text": "t[i] = val",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 300,
    "text": "function tablex.new (n,val)\r\n    local res = {}\r\n    tablex.set(res,val,1,n)\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 301,
    "text": "tablex.set(res,val,1,n)",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 303,
    "text": "function tablex.clear(t,istart)\r\n    istart = istart or 1\r\n    for i = istart,#t do remove(t) end\r\nend",
    "type": "function"
  }, {
    "id": 304,
    "text": "istart = istart or 1",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "for i = istart,#t do remove(t) end",
    "type": "statement:numericfor"
  }, {
    "id": 306,
    "text": "remove(t)",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "function tablex.insertvalues(t, ...)\r\n    assert_arg(1,t,'table')\r\n    local pos, values\r\n    if select('#', ...) == 1 then\r\n        pos,values = #t+1, ...\r\n    else\r\n        pos,values = ...\r\n    end\r\n    if #values > 0 then\r\n        for i=#t,pos,-1 do\r\n            t[i+#values] = t[i]\r\n        end\r\n        local offset = 1 - pos\r\n        for i=pos,pos+#values-1 do\r\n            t[i] = values[i + offset]\r\n        end\r\n    end\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 309,
    "text": "assert_arg(1,t,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "local pos, values",
    "type": "statement:localassign"
  }, {
    "id": 311,
    "text": "if select('#', ...) == 1 then\r\n        pos,values = #t+1, ...\r\n    else\r\n        pos,values = ...\r\n    end",
    "type": "statement:if"
  }, {
    "id": 312,
    "text": "pos,values = #t+1, ...",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "pos,values = ...",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "if #values > 0 then\r\n        for i=#t,pos,-1 do\r\n            t[i+#values] = t[i]\r\n        end\r\n        local offset = 1 - pos\r\n        for i=pos,pos+#values-1 do\r\n            t[i] = values[i + offset]\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "for i=#t,pos,-1 do\r\n            t[i+#values] = t[i]\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 316,
    "text": "t[i+#values] = t[i]",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "local offset = 1 - pos",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "for i=pos,pos+#values-1 do\r\n            t[i] = values[i + offset]\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 319,
    "text": "t[i] = values[i + offset]",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function tablex.removevalues (t,i1,i2)\r\n    assert_arg(1,t,'table')\r\n    i1,i2 = tablex._normalize_slice(t,i1,i2)\r\n    for i = i1,i2 do\r\n        remove(t,i1)\r\n    end\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 322,
    "text": "i1,i2 = tablex._normalize_slice(t,i1,i2)",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "for i = i1,i2 do\r\n        remove(t,i1)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 324,
    "text": "remove(t,i1)",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 326,
    "text": "function (t,value,tables)\r\n    for k,v in pairs(t) do\r\n        if v == value then return k end\r\n    end\r\n    for k,v in pairs(t) do\r\n        if not tables[v] and type(v) == 'table' then\r\n            tables[v] = true\r\n            local res = _find(v,value,tables)\r\n            if res then\r\n                res = tostring(res)\r\n                if type(k) ~= 'string' then\r\n                    return '['..k..']'..res\r\n                else\r\n                    return k..'.'..res\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 327,
    "text": "for k,v in pairs(t) do\r\n        if v == value then return k end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 328,
    "text": "if v == value then return k end",
    "type": "statement:if"
  }, {
    "id": 329,
    "text": "for k,v in pairs(t) do\r\n        if not tables[v] and type(v) == 'table' then\r\n            tables[v] = true\r\n            local res = _find(v,value,tables)\r\n            if res then\r\n                res = tostring(res)\r\n                if type(k) ~= 'string' then\r\n                    return '['..k..']'..res\r\n                else\r\n                    return k..'.'..res\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 330,
    "text": "if not tables[v] and type(v) == 'table' then\r\n            tables[v] = true\r\n            local res = _find(v,value,tables)\r\n            if res then\r\n                res = tostring(res)\r\n                if type(k) ~= 'string' then\r\n                    return '['..k..']'..res\r\n                else\r\n                    return k..'.'..res\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "tables[v] = true",
    "type": "statement:assign"
  }, {
    "id": 332,
    "text": "local res = _find(v,value,tables)",
    "type": "statement:localassign"
  }, {
    "id": 333,
    "text": "if res then\r\n                res = tostring(res)\r\n                if type(k) ~= 'string' then\r\n                    return '['..k..']'..res\r\n                else\r\n                    return k..'.'..res\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 334,
    "text": "res = tostring(res)",
    "type": "statement:assign"
  }, {
    "id": 335,
    "text": "if type(k) ~= 'string' then\r\n                    return '['..k..']'..res\r\n                else\r\n                    return k..'.'..res\r\n                end",
    "type": "statement:if"
  }, {
    "id": 336,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 337,
    "text": "function tablex.search (t,value,exclude)\r\n    assert_arg_iterable(1,t)\r\n    local tables = {[t]=true}\r\n    if exclude then\r\n        for _,v in pairs(exclude) do tables[v] = true end\r\n    end\r\n    return _find(t,value,tables)\r\nend",
    "type": "function"
  }, {
    "id": 338,
    "text": "local tables = {[t]=true}",
    "type": "statement:localassign"
  }, {
    "id": 339,
    "text": "if exclude then\r\n        for _,v in pairs(exclude) do tables[v] = true end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 340,
    "text": "for _,v in pairs(exclude) do tables[v] = true end",
    "type": "statement:genericfor"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function tablex.sort(t,f)\r\n    local keys = {}\r\n    for k in pairs(t) do keys[#keys + 1] = k end\r\n    tsort(keys,f)\r\n    local i = 0\r\n    return function()\r\n        i = i + 1\r\n        return keys[i], t[keys[i]]\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "local keys = {}",
    "type": "statement:localassign"
  }, {
    "id": 344,
    "text": "for k in pairs(t) do keys[#keys + 1] = k end",
    "type": "statement:genericfor"
  }, {
    "id": 345,
    "text": "keys[#keys + 1] = k",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "tsort(keys,f)",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 348,
    "text": "function tablex.sortv(t,f)\r\n    f = function_arg(2, f or '<')\r\n    local keys = {}\r\n    for k in pairs(t) do keys[#keys + 1] = k end\r\n    tsort(keys,function(x, y) return f(t[x], t[y]) end)\r\n    local i = 0\r\n    return function()\r\n        i = i + 1\r\n        return keys[i], t[keys[i]]\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 349,
    "text": "f = function_arg(2, f or '<')",
    "type": "statement:assign"
  }, {
    "id": 350,
    "text": "tsort(keys,function(x, y) return f(t[x], t[y]) end)",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 352,
    "text": "function tablex.readonly(t)\r\n    local mt = {\r\n        __index=t,\r\n        __newindex=function(t, k, v) error(\"Attempt to modify read-only table\", 2) end,\r\n        __pairs=function() return pairs(t) end,\r\n        __ipairs=function() return ipairs(t) end,\r\n        __len=function() return #t end,\r\n        __metatable=false\r\n    }\r\n    return setmetatable({}, mt)\r\nend",
    "type": "function"
  }, {
    "id": 353,
    "text": "local mt = {\r\n        __index=t,\r\n        __newindex=function(t, k, v) error(\"Attempt to modify read-only table\", 2) end,\r\n        __pairs=function() return pairs(t) end,\r\n        __ipairs=function() return ipairs(t) end,\r\n        __len=function() return #t end,\r\n        __metatable=false\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 354,
    "text": "error(\"Attempt to modify read-only table\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 356,
    "text": "function(...) return {...} end",
    "type": "function"
  }, {
    "id": 357,
    "text": "function()\r\n        i = i + 1\r\n        return keys[i], t[keys[i]]\r\n    end",
    "type": "function"
  }, {
    "id": 358,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 359,
    "text": "function(x, y) return f(t[x], t[y]) end",
    "type": "function"
  }, {
    "id": 360,
    "text": "function()\r\n        i = i + 1\r\n        return keys[i], t[keys[i]]\r\n    end",
    "type": "function"
  }, {
    "id": 361,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 362,
    "text": "function(t, k, v) error(\"Attempt to modify read-only table\", 2) end",
    "type": "function"
  }, {
    "id": 363,
    "text": "function() return pairs(t) end",
    "type": "function"
  }, {
    "id": 364,
    "text": "function() return ipairs(t) end",
    "type": "function"
  }, {
    "id": 365,
    "text": "function() return #t end",
    "type": "function"
  }, {
    "id": 366,
    "text": "",
    "type": "function container"
  }, {
    "id": 367,
    "text": "is_callable",
    "type": "global function"
  }, {
    "id": 368,
    "text": "is_indexable",
    "type": "global function"
  }, {
    "id": 369,
    "text": "is_writeable",
    "type": "global function"
  }, {
    "id": 370,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 371,
    "text": "is_iterable",
    "type": "global function"
  }, {
    "id": 372,
    "text": "imap",
    "type": "global function"
  }, {
    "id": 373,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 374,
    "text": "append",
    "type": "global function"
  }, {
    "id": 375,
    "text": "min",
    "type": "global function"
  }, {
    "id": 376,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 377,
    "text": "pred",
    "type": "global function"
  }, {
    "id": 378,
    "text": "cmp",
    "type": "global function"
  }, {
    "id": 379,
    "text": "min",
    "type": "global function"
  }, {
    "id": 380,
    "text": "f",
    "type": "global function"
  }, {
    "id": 381,
    "text": "require",
    "type": "global function"
  }, {
    "id": 382,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 383,
    "text": "val",
    "type": "global function"
  }, {
    "id": 384,
    "text": "type",
    "type": "global function"
  }, {
    "id": 385,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 386,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 387,
    "text": "select",
    "type": "global function"
  }, {
    "id": 388,
    "text": "tsort",
    "type": "global function"
  }, {
    "id": 389,
    "text": "function_arg",
    "type": "global function"
  }, {
    "id": 390,
    "text": "deepcompare",
    "type": "global function"
  }, {
    "id": 391,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 392,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 393,
    "text": "error",
    "type": "global function"
  }, {
    "id": 394,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 395,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 396,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 397,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 398,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 399,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 400,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 401,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 402,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 403,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 404,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 405,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 406,
    "text": "",
    "type": "variable container"
  }, {
    "id": 407,
    "text": "",
    "type": "require container"
  }, {
    "id": 408,
    "text": "",
    "type": "local variable"
  }, {
    "id": 409,
    "text": "",
    "type": "n/a"
  }, {
    "id": 410,
    "text": "",
    "type": "local variable"
  }, {
    "id": 411,
    "text": "",
    "type": "n/a"
  }, {
    "id": 412,
    "text": "",
    "type": "local variable"
  }, {
    "id": 413,
    "text": "",
    "type": "n/a"
  }, {
    "id": 414,
    "text": "",
    "type": "local variable"
  }, {
    "id": 415,
    "text": "",
    "type": "n/a"
  }, {
    "id": 416,
    "text": "",
    "type": "local variable"
  }, {
    "id": 417,
    "text": "",
    "type": "n/a"
  }, {
    "id": 418,
    "text": "",
    "type": "local variable"
  }, {
    "id": 419,
    "text": "",
    "type": "n/a"
  }, {
    "id": 420,
    "text": "",
    "type": "local variable"
  }, {
    "id": 421,
    "text": "",
    "type": "n/a"
  }, {
    "id": 422,
    "text": "",
    "type": "local variable"
  }, {
    "id": 423,
    "text": "",
    "type": "n/a"
  }, {
    "id": 424,
    "text": "",
    "type": "local variable"
  }, {
    "id": 425,
    "text": "",
    "type": "n/a"
  }, {
    "id": 426,
    "text": "",
    "type": "local variable"
  }, {
    "id": 427,
    "text": "",
    "type": "n/a"
  }, {
    "id": 428,
    "text": "",
    "type": "local variable"
  }, {
    "id": 429,
    "text": "",
    "type": "n/a"
  }, {
    "id": 430,
    "text": "",
    "type": "local variable"
  }, {
    "id": 431,
    "text": "",
    "type": "n/a"
  }, {
    "id": 432,
    "text": "",
    "type": "local variable"
  }, {
    "id": 433,
    "text": "",
    "type": "n/a"
  }, {
    "id": 434,
    "text": "",
    "type": "local variable"
  }, {
    "id": 435,
    "text": "",
    "type": "n/a"
  }, {
    "id": 436,
    "text": "",
    "type": "local variable"
  }, {
    "id": 437,
    "text": "",
    "type": "n/a"
  }, {
    "id": 438,
    "text": "",
    "type": "local variable"
  }, {
    "id": 439,
    "text": "",
    "type": "n/a"
  }, {
    "id": 440,
    "text": "",
    "type": "local variable"
  }, {
    "id": 441,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 442,
    "text": "",
    "type": "local variable"
  }, {
    "id": 443,
    "text": "",
    "type": "n/a"
  }, {
    "id": 444,
    "text": "",
    "type": "local variable"
  }, {
    "id": 445,
    "text": "",
    "type": "local variable"
  }, {
    "id": 446,
    "text": "",
    "type": "local variable"
  }, {
    "id": 447,
    "text": "",
    "type": "global variable"
  }, {
    "id": 448,
    "text": "",
    "type": "n/a"
  }, {
    "id": 449,
    "text": "",
    "type": "global variable"
  }, {
    "id": 450,
    "text": "",
    "type": "n/a"
  }, {
    "id": 451,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 452,
    "text": "utils)",
    "type": "module"
  }, {
    "id": 453,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 454,
    "text": "types)",
    "type": "module"
  }, {
    "id": 455,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 456,
    "text": " pl_class)",
    "type": "module"
  }, {
    "id": 457,
    "text": "",
    "type": "interface container"
  }, {
    "id": 458,
    "text": "",
    "type": "interface"
  }, {
    "id": 459,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 460,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 461,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 462,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 463,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 464,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 465,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 466,
    "text": "",
    "type": "require local variable"
  } ]
}