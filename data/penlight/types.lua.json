{
  "_filename": "types.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/types.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 24,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 22
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 4
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "calls",
    "to": 48
  }, {
    "from": 44,
    "label": "calls",
    "to": 46
  }, {
    "from": 14,
    "label": "calls",
    "to": 51
  }, {
    "from": 44,
    "label": "calls",
    "to": 51
  }, {
    "from": 3,
    "label": "calls",
    "to": 50
  }, {
    "from": 6,
    "label": "calls",
    "to": 50
  }, {
    "from": 14,
    "label": "calls",
    "to": 50
  }, {
    "from": 14,
    "label": "calls",
    "to": 50
  }, {
    "from": 17,
    "label": "calls",
    "to": 50
  }, {
    "from": 44,
    "label": "calls",
    "to": 50
  }, {
    "from": 28,
    "label": "calls",
    "to": 50
  }, {
    "from": 44,
    "label": "calls",
    "to": 49
  }, {
    "from": 28,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 44,
    "label": "calls",
    "to": 52
  }, {
    "from": 6,
    "label": "calls",
    "to": 52
  }, {
    "from": 17,
    "label": "calls",
    "to": 52
  }, {
    "from": 12,
    "label": "calls",
    "to": 47
  }, {
    "from": 20,
    "label": "calls",
    "to": 17
  }, {
    "from": 24,
    "label": "calls",
    "to": 17
  }, {
    "from": 26,
    "label": "calls",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 44,
    "label": "declares",
    "to": 3
  }, {
    "from": 44,
    "label": "declares",
    "to": 6
  }, {
    "from": 44,
    "label": "declares",
    "to": 12
  }, {
    "from": 44,
    "label": "declares",
    "to": 14
  }, {
    "from": 44,
    "label": "declares",
    "to": 17
  }, {
    "from": 44,
    "label": "declares",
    "to": 20
  }, {
    "from": 44,
    "label": "declares",
    "to": 24
  }, {
    "from": 44,
    "label": "declares",
    "to": 26
  }, {
    "from": 44,
    "label": "declares",
    "to": 28
  }, {
    "from": 44,
    "label": "declares",
    "to": 35
  }, {
    "from": 44,
    "label": "declares",
    "to": 36
  }, {
    "from": 44,
    "label": "declares",
    "to": 41
  }, {
    "from": 44,
    "label": "declares",
    "to": 42
  }, {
    "from": 53,
    "label": "requires",
    "to": 1
  }, {
    "from": 55,
    "label": "requires",
    "to": 1
  }, {
    "from": 56,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 57,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 57,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 57,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 64,
    "label": "assigns",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 64,
    "label": "assigns",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 64,
    "label": "assigns",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 64,
    "label": "assigns",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 57,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 76,
    "label": "assigns",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 76,
    "label": "assigns",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 76,
    "label": "assigns",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 57,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 58,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 88
  }, {
    "from": 54,
    "label": "represents",
    "to": 89
  }, {
    "from": 88,
    "label": "provides",
    "to": 89
  }, {
    "from": 90,
    "label": "requires",
    "to": 1
  }, {
    "from": 91,
    "label": "requires",
    "to": 1
  }, {
    "from": 54,
    "label": "contains",
    "to": 3
  }, {
    "from": 59,
    "label": "contains",
    "to": 3
  }, {
    "from": 54,
    "label": "contains",
    "to": 6
  }, {
    "from": 59,
    "label": "contains",
    "to": 6
  }, {
    "from": 54,
    "label": "contains",
    "to": 12
  }, {
    "from": 59,
    "label": "contains",
    "to": 12
  }, {
    "from": 54,
    "label": "contains",
    "to": 14
  }, {
    "from": 59,
    "label": "contains",
    "to": 14
  }, {
    "from": 54,
    "label": "contains",
    "to": 20
  }, {
    "from": 59,
    "label": "contains",
    "to": 20
  }, {
    "from": 54,
    "label": "contains",
    "to": 24
  }, {
    "from": 59,
    "label": "contains",
    "to": 24
  }, {
    "from": 54,
    "label": "contains",
    "to": 26
  }, {
    "from": 59,
    "label": "contains",
    "to": 26
  }, {
    "from": 54,
    "label": "contains",
    "to": 28
  }, {
    "from": 59,
    "label": "contains",
    "to": 28
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 84
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "types",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "function types.is_callable (obj)\r\n    return type(obj) == 'function' or getmetatable(obj) and getmetatable(obj).__call and true\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function types.type (obj)\r\n    local t = type(obj)\r\n    if t == 'table' or t == 'userdata' then\r\n        local mt = getmetatable(obj)\r\n        if mt == fileMT then\r\n            return 'file'\r\n        elseif mt == nil then\r\n            return t\r\n        else\r\n            return mt._name or \"unknown \"..t\r\n        end\r\n    else\r\n        return t\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local t = type(obj)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if t == 'table' or t == 'userdata' then\r\n        local mt = getmetatable(obj)\r\n        if mt == fileMT then\r\n            return 'file'\r\n        elseif mt == nil then\r\n            return t\r\n        else\r\n            return mt._name or \"unknown \"..t\r\n        end\r\n    else\r\n        return t\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "local mt = getmetatable(obj)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if mt == fileMT then\r\n            return 'file'\r\n        elseif mt == nil then\r\n            return t\r\n        else\r\n            return mt._name or \"unknown \"..t\r\n        end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function types.is_integer (x)\r\n    return math.ceil(x)==x\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function types.is_empty(o, ignore_spaces)\r\n    if o == nil or (type(o) == \"table\" and not next(o)) or (type(o) == \"string\" and (o == \"\" or (ignore_spaces and o:match(\"^%s+$\")))) then\r\n        return true\r\n    end\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if o == nil or (type(o) == \"table\" and not next(o)) or (type(o) == \"string\" and (o == \"\" or (ignore_spaces and o:match(\"^%s+$\")))) then\r\n        return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function check_meta (val)\r\n    if type(val) == 'table' then return true end\r\n    return getmetatable(val)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if type(val) == 'table' then return true end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function types.is_indexable (val)\r\n    local mt = check_meta(val)\r\n    if mt == true then return true end\r\n    return mt and mt.__len and mt.__index and true\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local mt = check_meta(val)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if mt == true then return true end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function types.is_iterable (val)\r\n    local mt = check_meta(val)\r\n    if mt == true then return true end\r\n    return mt and mt.__pairs and true\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function types.is_writeable (val)\r\n    local mt = check_meta(val)\r\n    if mt == true then return true end\r\n    return mt and mt.__newindex and true\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function types.to_bool(o, true_strs, check_objs)\r\n    local true_func\r\n    if true_strs then\r\n        utils.assert_arg(2, true_strs, \"table\")\r\n    end\r\n    true_func = true_types[type(o)]\r\n    if true_func then\r\n        return true_func(o, true_strs, check_objs)\r\n    elseif check_objs and o ~= nil then\r\n        return true\r\n    end\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local true_func",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if true_strs then\r\n        utils.assert_arg(2, true_strs, \"table\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "utils.assert_arg(2, true_strs, \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "true_func = true_types[type(o)]",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if true_func then\r\n        return true_func(o, true_strs, check_objs)\r\n    elseif check_objs and o ~= nil then\r\n        return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(o, true_strs, check_objs) return o end",
    "type": "function"
  }, {
    "id": 36,
    "text": "function(o, true_strs, check_objs)\r\n        if trues[o:lower()] then\r\n            return true\r\n        end\r\n        -- Check alternative user provided strings.\r\n        for _,v in ipairs(true_strs or {}) do\r\n            if type(v) == \"string\" and o == v:lower() then\r\n                return true\r\n            end\r\n        end\r\n        return false\r\n    end",
    "type": "function"
  }, {
    "id": 37,
    "text": "if trues[o:lower()] then\r\n            return true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "for _,v in ipairs(true_strs or {}) do\r\n            if type(v) == \"string\" and o == v:lower() then\r\n                return true\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "if type(v) == \"string\" and o == v:lower() then\r\n                return true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function(o, true_strs, check_objs) return o ~= 0 end",
    "type": "function"
  }, {
    "id": 42,
    "text": "function(o, true_strs, check_objs) if check_objs and next(o) ~= nil then return true end return false end",
    "type": "function"
  }, {
    "id": 43,
    "text": "if check_objs and next(o) ~= nil then return true end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "",
    "type": "function container"
  }, {
    "id": 45,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 46,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 47,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 48,
    "text": "true_func",
    "type": "global function"
  }, {
    "id": 49,
    "text": "require",
    "type": "global function"
  }, {
    "id": 50,
    "text": "type",
    "type": "global function"
  }, {
    "id": 51,
    "text": "next",
    "type": "global function"
  }, {
    "id": 52,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 53,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "variable container"
  }, {
    "id": 58,
    "text": "",
    "type": "require container"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 65,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 66,
    "text": "",
    "type": "boolean"
  }, {
    "id": 67,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 68,
    "text": "",
    "type": "boolean"
  }, {
    "id": 69,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 70,
    "text": "",
    "type": "boolean"
  }, {
    "id": 71,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 72,
    "text": "",
    "type": "boolean"
  }, {
    "id": 73,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 74,
    "text": "",
    "type": "boolean"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 77,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 78,
    "text": "",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 80,
    "text": "",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 82,
    "text": "",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 84,
    "text": "",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "global variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "interface container"
  }, {
    "id": 89,
    "text": "",
    "type": "interface"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  } ]
}