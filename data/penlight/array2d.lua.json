{
  "_filename": "array2d.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/array2d.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 9
  }, {
    "from": 21,
    "label": "has",
    "to": 9
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 19
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 9
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 19
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 22
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 9
  }, {
    "from": 36,
    "label": "has",
    "to": 9
  }, {
    "from": 36,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 22
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 46
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 62
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 57,
    "label": "has",
    "to": 68
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 16
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 16
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 9
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 16
  }, {
    "from": 80,
    "label": "has",
    "to": 46
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 9
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 16
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 88,
    "label": "has",
    "to": 9
  }, {
    "from": 88,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 98,
    "label": "has",
    "to": 9
  }, {
    "from": 98,
    "label": "has",
    "to": 9
  }, {
    "from": 98,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 16
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 9
  }, {
    "from": 105,
    "label": "has",
    "to": 9
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 9
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 16
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 46
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 75
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 118,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 118,
    "label": "has",
    "to": 9
  }, {
    "from": 118,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 119
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 16
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 135,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 135,
    "label": "has",
    "to": 145
  }, {
    "from": 135,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 140
  }, {
    "from": 148,
    "label": "has",
    "to": 142
  }, {
    "from": 149,
    "label": "has",
    "to": 144
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 16
  }, {
    "from": 151,
    "label": "has",
    "to": 119
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 75
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 151,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 158,
    "label": "has",
    "to": 162
  }, {
    "from": 158,
    "label": "has",
    "to": 163
  }, {
    "from": 158,
    "label": "has",
    "to": 164
  }, {
    "from": 158,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 158,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 19
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 170,
    "label": "has",
    "to": 174
  }, {
    "from": 170,
    "label": "has",
    "to": 175
  }, {
    "from": 170,
    "label": "has",
    "to": 9
  }, {
    "from": 170,
    "label": "has",
    "to": 176
  }, {
    "from": 170,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 177,
    "label": "has",
    "to": 181
  }, {
    "from": 177,
    "label": "has",
    "to": 182
  }, {
    "from": 170,
    "label": "has",
    "to": 9
  }, {
    "from": 170,
    "label": "has",
    "to": 183
  }, {
    "from": 170,
    "label": "has",
    "to": 9
  }, {
    "from": 170,
    "label": "has",
    "to": 9
  }, {
    "from": 170,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 19
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 9
  }, {
    "from": 185,
    "label": "has",
    "to": 179
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 9
  }, {
    "from": 185,
    "label": "has",
    "to": 9
  }, {
    "from": 185,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 46
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 58
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 192,
    "label": "has",
    "to": 68
  }, {
    "from": 190,
    "label": "has",
    "to": 9
  }, {
    "from": 190,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 9
  }, {
    "from": 200,
    "label": "has",
    "to": 9
  }, {
    "from": 201,
    "label": "has",
    "to": 9
  }, {
    "from": 202,
    "label": "has",
    "to": 9
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 204,
    "label": "has",
    "to": 9
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 9
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 208,
    "label": "has",
    "to": 176
  }, {
    "from": 208,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 177,
    "label": "has",
    "to": 181
  }, {
    "from": 177,
    "label": "has",
    "to": 182
  }, {
    "from": 208,
    "label": "has",
    "to": 9
  }, {
    "from": 208,
    "label": "has",
    "to": 183
  }, {
    "from": 208,
    "label": "has",
    "to": 9
  }, {
    "from": 208,
    "label": "has",
    "to": 9
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 179
  }, {
    "from": 210,
    "label": "has",
    "to": 188
  }, {
    "from": 210,
    "label": "has",
    "to": 9
  }, {
    "from": 210,
    "label": "has",
    "to": 9
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 34,
    "label": "calls",
    "to": 237
  }, {
    "from": 34,
    "label": "calls",
    "to": 237
  }, {
    "from": 34,
    "label": "calls",
    "to": 237
  }, {
    "from": 34,
    "label": "calls",
    "to": 237
  }, {
    "from": 34,
    "label": "calls",
    "to": 237
  }, {
    "from": 88,
    "label": "calls",
    "to": 233
  }, {
    "from": 135,
    "label": "calls",
    "to": 223
  }, {
    "from": 28,
    "label": "calls",
    "to": 24
  }, {
    "from": 26,
    "label": "calls",
    "to": 230
  }, {
    "from": 185,
    "label": "calls",
    "to": 230
  }, {
    "from": 38,
    "label": "calls",
    "to": 215
  }, {
    "from": 45,
    "label": "calls",
    "to": 215
  }, {
    "from": 158,
    "label": "calls",
    "to": 220
  }, {
    "from": 158,
    "label": "calls",
    "to": 220
  }, {
    "from": 24,
    "label": "calls",
    "to": 216
  }, {
    "from": 26,
    "label": "calls",
    "to": 216
  }, {
    "from": 28,
    "label": "calls",
    "to": 216
  }, {
    "from": 118,
    "label": "calls",
    "to": 109
  }, {
    "from": 131,
    "label": "calls",
    "to": 109
  }, {
    "from": 151,
    "label": "calls",
    "to": 109
  }, {
    "from": 158,
    "label": "calls",
    "to": 109
  }, {
    "from": 170,
    "label": "calls",
    "to": 109
  }, {
    "from": 151,
    "label": "calls",
    "to": 231
  }, {
    "from": 190,
    "label": "calls",
    "to": 224
  }, {
    "from": 78,
    "label": "calls",
    "to": 218
  }, {
    "from": 80,
    "label": "calls",
    "to": 218
  }, {
    "from": 105,
    "label": "calls",
    "to": 98
  }, {
    "from": 135,
    "label": "calls",
    "to": 151
  }, {
    "from": 32,
    "label": "calls",
    "to": 226
  }, {
    "from": 24,
    "label": "calls",
    "to": 221
  }, {
    "from": 26,
    "label": "calls",
    "to": 221
  }, {
    "from": 38,
    "label": "calls",
    "to": 217
  }, {
    "from": 190,
    "label": "calls",
    "to": 213
  }, {
    "from": 21,
    "label": "calls",
    "to": 5
  }, {
    "from": 53,
    "label": "calls",
    "to": 5
  }, {
    "from": 78,
    "label": "calls",
    "to": 5
  }, {
    "from": 80,
    "label": "calls",
    "to": 5
  }, {
    "from": 118,
    "label": "calls",
    "to": 5
  }, {
    "from": 212,
    "label": "calls",
    "to": 222
  }, {
    "from": 212,
    "label": "calls",
    "to": 222
  }, {
    "from": 212,
    "label": "calls",
    "to": 222
  }, {
    "from": 11,
    "label": "calls",
    "to": 222
  }, {
    "from": 98,
    "label": "calls",
    "to": 88
  }, {
    "from": 98,
    "label": "calls",
    "to": 88
  }, {
    "from": 98,
    "label": "calls",
    "to": 88
  }, {
    "from": 88,
    "label": "calls",
    "to": 235
  }, {
    "from": 88,
    "label": "calls",
    "to": 235
  }, {
    "from": 88,
    "label": "calls",
    "to": 235
  }, {
    "from": 105,
    "label": "calls",
    "to": 118
  }, {
    "from": 26,
    "label": "calls",
    "to": 234
  }, {
    "from": 151,
    "label": "calls",
    "to": 229
  }, {
    "from": 18,
    "label": "calls",
    "to": 232
  }, {
    "from": 21,
    "label": "calls",
    "to": 232
  }, {
    "from": 21,
    "label": "calls",
    "to": 232
  }, {
    "from": 34,
    "label": "calls",
    "to": 232
  }, {
    "from": 34,
    "label": "calls",
    "to": 232
  }, {
    "from": 53,
    "label": "calls",
    "to": 15
  }, {
    "from": 109,
    "label": "calls",
    "to": 15
  }, {
    "from": 158,
    "label": "calls",
    "to": 15
  }, {
    "from": 15,
    "label": "calls",
    "to": 238
  }, {
    "from": 18,
    "label": "calls",
    "to": 238
  }, {
    "from": 21,
    "label": "calls",
    "to": 238
  }, {
    "from": 24,
    "label": "calls",
    "to": 238
  }, {
    "from": 26,
    "label": "calls",
    "to": 238
  }, {
    "from": 28,
    "label": "calls",
    "to": 238
  }, {
    "from": 34,
    "label": "calls",
    "to": 238
  }, {
    "from": 34,
    "label": "calls",
    "to": 238
  }, {
    "from": 38,
    "label": "calls",
    "to": 238
  }, {
    "from": 38,
    "label": "calls",
    "to": 238
  }, {
    "from": 70,
    "label": "calls",
    "to": 238
  }, {
    "from": 73,
    "label": "calls",
    "to": 238
  }, {
    "from": 80,
    "label": "calls",
    "to": 238
  }, {
    "from": 84,
    "label": "calls",
    "to": 238
  }, {
    "from": 105,
    "label": "calls",
    "to": 238
  }, {
    "from": 118,
    "label": "calls",
    "to": 238
  }, {
    "from": 135,
    "label": "calls",
    "to": 238
  }, {
    "from": 151,
    "label": "calls",
    "to": 238
  }, {
    "from": 158,
    "label": "calls",
    "to": 238
  }, {
    "from": 158,
    "label": "calls",
    "to": 238
  }, {
    "from": 170,
    "label": "calls",
    "to": 238
  }, {
    "from": 185,
    "label": "calls",
    "to": 238
  }, {
    "from": 131,
    "label": "calls",
    "to": 228
  }, {
    "from": 21,
    "label": "calls",
    "to": 214
  }, {
    "from": 34,
    "label": "calls",
    "to": 214
  }, {
    "from": 38,
    "label": "calls",
    "to": 214
  }, {
    "from": 5,
    "label": "calls",
    "to": 239
  }, {
    "from": 11,
    "label": "calls",
    "to": 239
  }, {
    "from": 84,
    "label": "calls",
    "to": 236
  }, {
    "from": 212,
    "label": "calls",
    "to": 225
  }, {
    "from": 88,
    "label": "calls",
    "to": 225
  }, {
    "from": 88,
    "label": "calls",
    "to": 225
  }, {
    "from": 18,
    "label": "calls",
    "to": 11
  }, {
    "from": 45,
    "label": "calls",
    "to": 11
  }, {
    "from": 5,
    "label": "calls",
    "to": 240
  }, {
    "from": 98,
    "label": "calls",
    "to": 227
  }, {
    "from": 135,
    "label": "calls",
    "to": 219
  }, {
    "from": 1,
    "label": "contains",
    "to": 212
  }, {
    "from": 212,
    "label": "declares",
    "to": 5
  }, {
    "from": 212,
    "label": "declares",
    "to": 11
  }, {
    "from": 212,
    "label": "declares",
    "to": 13
  }, {
    "from": 212,
    "label": "declares",
    "to": 15
  }, {
    "from": 212,
    "label": "declares",
    "to": 18
  }, {
    "from": 212,
    "label": "declares",
    "to": 21
  }, {
    "from": 212,
    "label": "declares",
    "to": 24
  }, {
    "from": 212,
    "label": "declares",
    "to": 26
  }, {
    "from": 212,
    "label": "declares",
    "to": 28
  }, {
    "from": 212,
    "label": "declares",
    "to": 32
  }, {
    "from": 212,
    "label": "declares",
    "to": 34
  }, {
    "from": 212,
    "label": "declares",
    "to": 38
  }, {
    "from": 212,
    "label": "declares",
    "to": 45
  }, {
    "from": 212,
    "label": "declares",
    "to": 53
  }, {
    "from": 212,
    "label": "declares",
    "to": 70
  }, {
    "from": 212,
    "label": "declares",
    "to": 73
  }, {
    "from": 212,
    "label": "declares",
    "to": 78
  }, {
    "from": 212,
    "label": "declares",
    "to": 80
  }, {
    "from": 212,
    "label": "declares",
    "to": 84
  }, {
    "from": 212,
    "label": "declares",
    "to": 88
  }, {
    "from": 212,
    "label": "declares",
    "to": 98
  }, {
    "from": 212,
    "label": "declares",
    "to": 105
  }, {
    "from": 212,
    "label": "declares",
    "to": 109
  }, {
    "from": 212,
    "label": "declares",
    "to": 118
  }, {
    "from": 212,
    "label": "declares",
    "to": 131
  }, {
    "from": 212,
    "label": "declares",
    "to": 135
  }, {
    "from": 212,
    "label": "declares",
    "to": 147
  }, {
    "from": 212,
    "label": "declares",
    "to": 148
  }, {
    "from": 212,
    "label": "declares",
    "to": 149
  }, {
    "from": 212,
    "label": "declares",
    "to": 151
  }, {
    "from": 212,
    "label": "declares",
    "to": 158
  }, {
    "from": 212,
    "label": "declares",
    "to": 170
  }, {
    "from": 212,
    "label": "declares",
    "to": 185
  }, {
    "from": 212,
    "label": "declares",
    "to": 190
  }, {
    "from": 212,
    "label": "declares",
    "to": 199
  }, {
    "from": 212,
    "label": "declares",
    "to": 200
  }, {
    "from": 212,
    "label": "declares",
    "to": 201
  }, {
    "from": 212,
    "label": "declares",
    "to": 202
  }, {
    "from": 212,
    "label": "declares",
    "to": 204
  }, {
    "from": 212,
    "label": "declares",
    "to": 206
  }, {
    "from": 212,
    "label": "declares",
    "to": 208
  }, {
    "from": 212,
    "label": "declares",
    "to": 210
  }, {
    "from": 1,
    "label": "contains",
    "to": 241
  }, {
    "from": 1,
    "label": "contains",
    "to": 242
  }, {
    "from": 241,
    "label": "initializes",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 241,
    "label": "initializes",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 241,
    "label": "initializes",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 241,
    "label": "initializes",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 241,
    "label": "initializes",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 241,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 241,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "assigns",
    "to": 256
  }, {
    "from": 241,
    "label": "initializes",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 241,
    "label": "initializes",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 241,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 241,
    "label": "initializes",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 241,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 241,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 241,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 241,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 241,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 241,
    "label": "initializes",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 241,
    "label": "initializes",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 241,
    "label": "initializes",
    "to": 279
  }, {
    "from": 279,
    "label": "assigns",
    "to": 280
  }, {
    "from": 241,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "assigns",
    "to": 282
  }, {
    "from": 241,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 241,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "assigns",
    "to": 286
  }, {
    "from": 241,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 241,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 241,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 241,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 241,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 241,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 241,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 242,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "requires",
    "to": 2
  }, {
    "from": 242,
    "label": "initializes",
    "to": 302
  }, {
    "from": 302,
    "label": "requires",
    "to": 4
  }, {
    "from": 242,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "requires",
    "to": 3
  }, {
    "from": 1,
    "label": "provides",
    "to": 304
  }, {
    "from": 289,
    "label": "represents",
    "to": 305
  }, {
    "from": 304,
    "label": "provides",
    "to": 305
  }, {
    "from": 306,
    "label": "requires",
    "to": 1
  }, {
    "from": 289,
    "label": "contains",
    "to": 15
  }, {
    "from": 289,
    "label": "contains",
    "to": 18
  }, {
    "from": 289,
    "label": "contains",
    "to": 21
  }, {
    "from": 289,
    "label": "contains",
    "to": 24
  }, {
    "from": 289,
    "label": "contains",
    "to": 26
  }, {
    "from": 289,
    "label": "contains",
    "to": 28
  }, {
    "from": 289,
    "label": "contains",
    "to": 34
  }, {
    "from": 289,
    "label": "contains",
    "to": 38
  }, {
    "from": 289,
    "label": "contains",
    "to": 45
  }, {
    "from": 289,
    "label": "contains",
    "to": 53
  }, {
    "from": 289,
    "label": "contains",
    "to": 70
  }, {
    "from": 289,
    "label": "contains",
    "to": 73
  }, {
    "from": 289,
    "label": "contains",
    "to": 78
  }, {
    "from": 289,
    "label": "contains",
    "to": 80
  }, {
    "from": 289,
    "label": "contains",
    "to": 84
  }, {
    "from": 289,
    "label": "contains",
    "to": 98
  }, {
    "from": 289,
    "label": "contains",
    "to": 105
  }, {
    "from": 289,
    "label": "contains",
    "to": 118
  }, {
    "from": 289,
    "label": "contains",
    "to": 131
  }, {
    "from": 289,
    "label": "contains",
    "to": 135
  }, {
    "from": 289,
    "label": "contains",
    "to": 151
  }, {
    "from": 289,
    "label": "contains",
    "to": 158
  }, {
    "from": 289,
    "label": "contains",
    "to": 170
  }, {
    "from": 289,
    "label": "contains",
    "to": 185
  }, {
    "from": 289,
    "label": "contains",
    "to": 190
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "array2d",
    "type": "module"
  }, {
    "id": 2,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 3,
    "text": "types",
    "type": "module"
  }, {
    "id": 4,
    "text": "utils",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function obj (int,out)\r\n    local mt = getmetatable(int)\r\n    if mt then\r\n        setmetatable(out,mt)\r\n    end\r\n    return out\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local mt = getmetatable(int)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if mt then\r\n        setmetatable(out,mt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "setmetatable(out,mt)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function makelist (res)\r\n    return setmetatable(res, require('pl.List'))\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function index (t,k)\r\n    return t[k]\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function array2d.size (t)\r\n    assert_arg(1,t,'table')\r\n    return #t,#t[1]\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "assert_arg(1,t,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function array2d.column (a,key)\r\n    assert_arg(1,a,'table')\r\n    return makelist(imap(index,a,key))\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert_arg(1,a,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function array2d.map (f,a,arg)\r\n    assert_arg(1,a,'table')\r\n    f = utils.function_arg(1,f)\r\n    return obj(a,imap(function(row) return imap(f,row,arg) end, a))\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "f = utils.function_arg(1,f)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function array2d.reduce_rows (f,a)\r\n    assert_arg(1,a,'table')\r\n    return tmap(function(row) return reduce(f,row) end, a)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function array2d.reduce_cols (f,a)\r\n    assert_arg(1,a,'table')\r\n    return tmap(function(c) return reduce(f,column(a,c)) end, keys(a[1]))\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function array2d.reduce2 (opc,opr,a)\r\n    assert_arg(3,a,'table')\r\n    local tmp = array2d.reduce_rows(opr,a)\r\n    return reduce(opc,tmp)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert_arg(3,a,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local tmp = array2d.reduce_rows(opr,a)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function dimension (t)\r\n    return type(t[1])=='table' and 2 or 1\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function array2d.map2 (f,ad,bd,a,b,arg)\r\n    assert_arg(1,a,'table')\r\n    assert_arg(2,b,'table')\r\n    f = utils.function_arg(1,f)\r\n    if ad == 1 and bd == 2 then\r\n        return imap(function(row)\r\n            return tmap2(f,a,row,arg)\r\n        end, b)\r\n    elseif ad == 2 and bd == 1 then\r\n        return imap(function(row)\r\n            return tmap2(f,row,b,arg)\r\n        end, a)\r\n    elseif ad == 1 and bd == 1 then\r\n        return tmap2(f,a,b)\r\n    elseif ad == 2 and bd == 2 then\r\n        return tmap2(function(rowa,rowb)\r\n            return tmap2(f,rowa,rowb,arg)\r\n        end, a,b)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert_arg(2,b,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if ad == 1 and bd == 2 then\r\n        return imap(function(row)\r\n            return tmap2(f,a,row,arg)\r\n        end, b)\r\n    elseif ad == 2 and bd == 1 then\r\n        return imap(function(row)\r\n            return tmap2(f,row,b,arg)\r\n        end, a)\r\n    elseif ad == 1 and bd == 1 then\r\n        return tmap2(f,a,b)\r\n    elseif ad == 2 and bd == 2 then\r\n        return tmap2(function(rowa,rowb)\r\n            return tmap2(f,rowa,rowb,arg)\r\n        end, a,b)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function array2d.product (f,t1,t2)\r\n    f = utils.function_arg(1,f)\r\n    assert_arg(2,t1,'table')\r\n    assert_arg(3,t2,'table')\r\n    local res, map = {}, tablex.map\r\n    for i,v in ipairs(t2) do\r\n        res[i] = map(f,t1,v)\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "assert_arg(2,t1,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert_arg(3,t2,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local res, map = {}, tablex.map",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "for i,v in ipairs(t2) do\r\n        res[i] = map(f,t1,v)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 43,
    "text": "res[i] = map(f,t1,v)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function array2d.flatten (t)\r\n    local res = {}\r\n    local k = 1\r\n    for _,a in ipairs(t) do -- for all rows\r\n        for i = 1,#a do\r\n            res[k] = a[i]\r\n            k = k + 1\r\n        end\r\n    end\r\n    return makelist(res)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local k = 1",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "for _,a in ipairs(t) do -- for all rows\r\n        for i = 1,#a do\r\n            res[k] = a[i]\r\n            k = k + 1\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "for i = 1,#a do\r\n            res[k] = a[i]\r\n            k = k + 1\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 50,
    "text": "res[k] = a[i]",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function array2d.reshape (t,nrows,co)\r\n    local nr,nc = array2d.size(t)\r\n    local ncols = nr*nc / nrows\r\n    local res = {}\r\n    local ir,ic = 1,1\r\n    for i = 1,nrows do\r\n        local row = {}\r\n        for j = 1,ncols do\r\n            row[j] = t[ir][ic]\r\n            if not co then\r\n                ic = ic + 1\r\n                if ic > nc then\r\n                    ir = ir + 1\r\n                    ic = 1\r\n                end\r\n            else\r\n                ir = ir + 1\r\n                if ir > nr then\r\n                    ic = ic + 1\r\n                    ir = 1\r\n                end\r\n            end\r\n        end\r\n        res[i] = row\r\n    end\r\n    return obj(t,res)\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local nr,nc = array2d.size(t)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local ncols = nr*nc / nrows",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local ir,ic = 1,1",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "for i = 1,nrows do\r\n        local row = {}\r\n        for j = 1,ncols do\r\n            row[j] = t[ir][ic]\r\n            if not co then\r\n                ic = ic + 1\r\n                if ic > nc then\r\n                    ir = ir + 1\r\n                    ic = 1\r\n                end\r\n            else\r\n                ir = ir + 1\r\n                if ir > nr then\r\n                    ic = ic + 1\r\n                    ir = 1\r\n                end\r\n            end\r\n        end\r\n        res[i] = row\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 58,
    "text": "local row = {}",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "for j = 1,ncols do\r\n            row[j] = t[ir][ic]\r\n            if not co then\r\n                ic = ic + 1\r\n                if ic > nc then\r\n                    ir = ir + 1\r\n                    ic = 1\r\n                end\r\n            else\r\n                ir = ir + 1\r\n                if ir > nr then\r\n                    ic = ic + 1\r\n                    ir = 1\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 60,
    "text": "row[j] = t[ir][ic]",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if not co then\r\n                ic = ic + 1\r\n                if ic > nc then\r\n                    ir = ir + 1\r\n                    ic = 1\r\n                end\r\n            else\r\n                ir = ir + 1\r\n                if ir > nr then\r\n                    ic = ic + 1\r\n                    ir = 1\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "ic = ic + 1",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if ic > nc then\r\n                    ir = ir + 1\r\n                    ic = 1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "ir = ir + 1",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "ic = 1",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if ir > nr then\r\n                    ic = ic + 1\r\n                    ir = 1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "ir = 1",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "res[i] = row",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function array2d.swap_rows (t,i1,i2)\r\n    assert_arg(1,t,'table')\r\n    t[i1],t[i2] = t[i2],t[i1]\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "t[i1],t[i2] = t[i2],t[i1]",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function array2d.swap_cols (t,j1,j2)\r\n    assert_arg(1,t,'table')\r\n    for i = 1,#t do\r\n        local row = t[i]\r\n        row[j1],row[j2] = row[j2],row[j1]\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "for i = 1,#t do\r\n        local row = t[i]\r\n        row[j1],row[j2] = row[j2],row[j1]\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 75,
    "text": "local row = t[i]",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "row[j1],row[j2] = row[j2],row[j1]",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function array2d.extract_rows (t,ridx)\r\n    return obj(t,index_by(t,ridx))\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function array2d.extract_cols (t,cidx)\r\n    assert_arg(1,t,'table')\r\n    local res = {}\r\n    for i = 1,#t do\r\n        res[i] = index_by(t[i],cidx)\r\n    end\r\n    return obj(t,res)\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "for i = 1,#t do\r\n        res[i] = index_by(t[i],cidx)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 82,
    "text": "res[i] = index_by(t[i],cidx)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function array2d.remove_col (t,j)\r\n    assert_arg(1,t,'table')\r\n    for i = 1,#t do\r\n        remove(t[i],j)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "for i = 1,#t do\r\n        remove(t[i],j)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 86,
    "text": "remove(t[i],j)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "local function _parse (s)\r\n    local c,r\r\n    if s:sub(1,1) == 'R' then\r\n        r,c = s:match 'R(%d+)C(%d+)'\r\n        r,c = tonumber(r),tonumber(c)\r\n    else\r\n        c,r = s:match '(.)(.)'\r\n        c = byte(c) - byte 'A' + 1\r\n        r = tonumber(r)\r\n    end\r\n    assert(c ~= nil and r ~= nil,'bad cell specifier: '..s)\r\n    return r,c\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "local c,r",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if s:sub(1,1) == 'R' then\r\n        r,c = s:match 'R(%d+)C(%d+)'\r\n        r,c = tonumber(r),tonumber(c)\r\n    else\r\n        c,r = s:match '(.)(.)'\r\n        c = byte(c) - byte 'A' + 1\r\n        r = tonumber(r)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "r,c = s:match 'R(%d+)C(%d+)'",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "r,c = tonumber(r),tonumber(c)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "c,r = s:match '(.)(.)'",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "c = byte(c) - byte 'A' + 1",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "r = tonumber(r)",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "assert(c ~= nil and r ~= nil,'bad cell specifier: '..s)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function array2d.parse_range (s)\r\n    if s:find ':' then\r\n        local start,finish = splitv(s,':')\r\n        local i1,j1 = _parse(start)\r\n        local i2,j2 = _parse(finish)\r\n        return i1,j1,i2,j2\r\n    else -- single value\r\n        local i,j = _parse(s)\r\n        return i,j\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "if s:find ':' then\r\n        local start,finish = splitv(s,':')\r\n        local i1,j1 = _parse(start)\r\n        local i2,j2 = _parse(finish)\r\n        return i1,j1,i2,j2\r\n    else -- single value\r\n        local i,j = _parse(s)\r\n        return i,j\r\n    end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "local start,finish = splitv(s,':')",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local i1,j1 = _parse(start)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local i2,j2 = _parse(finish)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local i,j = _parse(s)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function array2d.range (t,rstr)\r\n    assert_arg(1,t,'table')\r\n    local i1,j1,i2,j2 = array2d.parse_range(rstr)\r\n    if i2 then\r\n        return array2d.slice(t,i1,j1,i2,j2)\r\n    else -- single value\r\n        return t[i1][j1]\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "local i1,j1,i2,j2 = array2d.parse_range(rstr)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "if i2 then\r\n        return array2d.slice(t,i1,j1,i2,j2)\r\n    else -- single value\r\n        return t[i1][j1]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "local function default_range (t,i1,j1,i2,j2)\r\n    local nr, nc = array2d.size(t)\r\n    i1,j1 = i1 or 1, j1 or 1\r\n    i2,j2 = i2 or nr, j2 or nc\r\n    if i2 < 0 then i2 = nr + i2 + 1 end\r\n    if j2 < 0 then j2 = nc + j2 + 1 end\r\n    return i1,j1,i2,j2\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "local nr, nc = array2d.size(t)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "i1,j1 = i1 or 1, j1 or 1",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "i2,j2 = i2 or nr, j2 or nc",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if i2 < 0 then i2 = nr + i2 + 1 end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "i2 = nr + i2 + 1",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "if j2 < 0 then j2 = nc + j2 + 1 end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "j2 = nc + j2 + 1",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function array2d.slice (t,i1,j1,i2,j2)\r\n    assert_arg(1,t,'table')\r\n    i1,j1,i2,j2 = default_range(t,i1,j1,i2,j2)\r\n    local res = {}\r\n    for i = i1,i2 do\r\n        local val\r\n        local row = t[i]\r\n        if j1 == j2 then\r\n            val = row[j1]\r\n        else\r\n            val = {}\r\n            for j = j1,j2 do\r\n                val[#val+1] = row[j]\r\n            end\r\n        end\r\n        res[#res+1] = val\r\n    end\r\n    if i1 == i2 then res = res[1] end\r\n    return obj(t,res)\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "i1,j1,i2,j2 = default_range(t,i1,j1,i2,j2)",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "for i = i1,i2 do\r\n        local val\r\n        local row = t[i]\r\n        if j1 == j2 then\r\n            val = row[j1]\r\n        else\r\n            val = {}\r\n            for j = j1,j2 do\r\n                val[#val+1] = row[j]\r\n            end\r\n        end\r\n        res[#res+1] = val\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 121,
    "text": "local val",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if j1 == j2 then\r\n            val = row[j1]\r\n        else\r\n            val = {}\r\n            for j = j1,j2 do\r\n                val[#val+1] = row[j]\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "val = row[j1]",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "val = {}",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "for j = j1,j2 do\r\n                val[#val+1] = row[j]\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 126,
    "text": "val[#val+1] = row[j]",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "res[#res+1] = val",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "if i1 == i2 then res = res[1] end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "res = res[1]",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function array2d.set (t,value,i1,j1,i2,j2)\r\n    i1,j1,i2,j2 = default_range(t,i1,j1,i2,j2)\r\n    for i = i1,i2 do\r\n        tset(t[i],value,j1,j2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "for i = i1,i2 do\r\n        tset(t[i],value,j1,j2)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 133,
    "text": "tset(t[i],value,j1,j2)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function array2d.write (t,f,fmt,i1,j1,i2,j2)\r\n    assert_arg(1,t,'table')\r\n    f = f or stdout\r\n    local rowop\r\n    if fmt then\r\n        rowop = function(row,j) fprintf(f,fmt,row[j]) end\r\n    else\r\n        rowop = function(row,j) f:write(tostring(row[j]),' ') end\r\n    end\r\n    local function newline()\r\n        f:write '\\n'\r\n    end\r\n    array2d.forall(t,rowop,newline,i1,j1,i2,j2)\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "f = f or stdout",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "local rowop",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if fmt then\r\n        rowop = function(row,j) fprintf(f,fmt,row[j]) end\r\n    else\r\n        rowop = function(row,j) f:write(tostring(row[j]),' ') end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "rowop = function(row,j) fprintf(f,fmt,row[j]) end",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "fprintf(f,fmt,row[j])",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "rowop = function(row,j) f:write(tostring(row[j]),' ') end",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "f:write(tostring(row[j]),' ')",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "local function newline()\r\n        f:write '\\n'\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 144,
    "text": "f:write '\\n'",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "array2d.forall(t,rowop,newline,i1,j1,i2,j2)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function(row,j) fprintf(f,fmt,row[j]) end",
    "type": "function"
  }, {
    "id": 148,
    "text": "function(row,j) f:write(tostring(row[j]),' ') end",
    "type": "function"
  }, {
    "id": 149,
    "text": "local function newline()\r\n        f:write '\\n'\r\n    end",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function array2d.forall (t,row_op,end_row_op,i1,j1,i2,j2)\r\n    assert_arg(1,t,'table')\r\n    i1,j1,i2,j2 = default_range(t,i1,j1,i2,j2)\r\n    for i = i1,i2 do\r\n        local row = t[i]\r\n        for j = j1,j2 do\r\n            row_op(row,j)\r\n        end\r\n        if end_row_op then end_row_op(i) end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "for i = i1,i2 do\r\n        local row = t[i]\r\n        for j = j1,j2 do\r\n            row_op(row,j)\r\n        end\r\n        if end_row_op then end_row_op(i) end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 153,
    "text": "for j = j1,j2 do\r\n            row_op(row,j)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 154,
    "text": "row_op(row,j)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "if end_row_op then end_row_op(i) end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "end_row_op(i)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function array2d.move (dest,di,dj,src,i1,j1,i2,j2)\r\n    assert_arg(1,dest,'table')\r\n    assert_arg(4,src,'table')\r\n    i1,j1,i2,j2 = default_range(src,i1,j1,i2,j2)\r\n    local nr,nc = array2d.size(dest)\r\n    i2, j2 = min(nr,i2), min(nc,j2)\r\n    --i1, j1 = max(1,i1), max(1,j1)\r\n    dj = dj - 1\r\n    for i = i1,i2 do\r\n        local drow, srow = dest[i+di-1], src[i]\r\n        for j = j1,j2 do\r\n            drow[j+dj] = srow[j]\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "assert_arg(1,dest,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "assert_arg(4,src,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "i1,j1,i2,j2 = default_range(src,i1,j1,i2,j2)",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "local nr,nc = array2d.size(dest)",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "i2, j2 = min(nr,i2), min(nc,j2)",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "dj = dj - 1",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "for i = i1,i2 do\r\n        local drow, srow = dest[i+di-1], src[i]\r\n        for j = j1,j2 do\r\n            drow[j+dj] = srow[j]\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 166,
    "text": "local drow, srow = dest[i+di-1], src[i]",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "for j = j1,j2 do\r\n            drow[j+dj] = srow[j]\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 168,
    "text": "drow[j+dj] = srow[j]",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function array2d.iter (a,indices,i1,j1,i2,j2)\r\n    assert_arg(1,a,'table')\r\n    local norowset = not (i2 and j2)\r\n    i1,j1,i2,j2 = default_range(a,i1,j1,i2,j2)\r\n    local n,i,j = i2-i1+1,i1-1,j1-1\r\n    local row,nr = nil,0\r\n    local onr = j2 - j1 + 1\r\n    return function()\r\n        j = j + 1\r\n        if j > nr then\r\n            j = j1\r\n            i = i + 1\r\n            if i > i2 then return nil end\r\n            row = a[i]\r\n            nr = norowset and #row or onr\r\n        end\r\n        if indices then\r\n            return i,j,row[j]\r\n        else\r\n            return row[j]\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "local norowset = not (i2 and j2)",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "i1,j1,i2,j2 = default_range(a,i1,j1,i2,j2)",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "local n,i,j = i2-i1+1,i1-1,j1-1",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "local row,nr = nil,0",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "local onr = j2 - j1 + 1",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "j = j + 1",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "if j > nr then\r\n            j = j1\r\n            i = i + 1\r\n            if i > i2 then return nil end\r\n            row = a[i]\r\n            nr = norowset and #row or onr\r\n        end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "j = j1",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "if i > i2 then return nil end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "row = a[i]",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "nr = norowset and #row or onr",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "if indices then\r\n            return i,j,row[j]\r\n        else\r\n            return row[j]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function array2d.columns (a)\r\n    assert_arg(1,a,'table')\r\n    local n = a[1][1]\r\n    local i = 0\r\n    return function()\r\n        i = i + 1\r\n        if i > n then return nil end\r\n        return column(a,i)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "local n = a[1][1]",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "if i > n then return nil end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "function array2d.new(rows,cols,val)\r\n    local res = {}\r\n    local fun = types.is_callable(val)\r\n    for i = 1,rows do\r\n        local row = {}\r\n        if fun then\r\n            for j = 1,cols do row[j] = val(i,j) end\r\n        else\r\n            for j = 1,cols do row[j] = val end\r\n        end\r\n        res[i] = row\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "local fun = types.is_callable(val)",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "for i = 1,rows do\r\n        local row = {}\r\n        if fun then\r\n            for j = 1,cols do row[j] = val(i,j) end\r\n        else\r\n            for j = 1,cols do row[j] = val end\r\n        end\r\n        res[i] = row\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 193,
    "text": "if fun then\r\n            for j = 1,cols do row[j] = val(i,j) end\r\n        else\r\n            for j = 1,cols do row[j] = val end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "for j = 1,cols do row[j] = val(i,j) end",
    "type": "statement:numericfor"
  }, {
    "id": 195,
    "text": "row[j] = val(i,j)",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "for j = 1,cols do row[j] = val end",
    "type": "statement:numericfor"
  }, {
    "id": 197,
    "text": "row[j] = val",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function(row) return imap(f,row,arg) end",
    "type": "function"
  }, {
    "id": 200,
    "text": "function(row) return reduce(f,row) end",
    "type": "function"
  }, {
    "id": 201,
    "text": "function(c) return reduce(f,column(a,c)) end",
    "type": "function"
  }, {
    "id": 202,
    "text": "function(row)\r\n            return tmap2(f,a,row,arg)\r\n        end",
    "type": "function"
  }, {
    "id": 203,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 204,
    "text": "function(row)\r\n            return tmap2(f,row,b,arg)\r\n        end",
    "type": "function"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "function(rowa,rowb)\r\n            return tmap2(f,rowa,rowb,arg)\r\n        end",
    "type": "function"
  }, {
    "id": 207,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 208,
    "text": "function()\r\n        j = j + 1\r\n        if j > nr then\r\n            j = j1\r\n            i = i + 1\r\n            if i > i2 then return nil end\r\n            row = a[i]\r\n            nr = norowset and #row or onr\r\n        end\r\n        if indices then\r\n            return i,j,row[j]\r\n        else\r\n            return row[j]\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function()\r\n        i = i + 1\r\n        if i > n then return nil end\r\n        return column(a,i)\r\n    end",
    "type": "function"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "",
    "type": "function container"
  }, {
    "id": 213,
    "text": "is_callable",
    "type": "global function"
  }, {
    "id": 214,
    "text": "function_arg",
    "type": "global function"
  }, {
    "id": 215,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 216,
    "text": "reduce",
    "type": "global function"
  }, {
    "id": 217,
    "text": "map",
    "type": "global function"
  }, {
    "id": 218,
    "text": "index_by",
    "type": "global function"
  }, {
    "id": 219,
    "text": "fprintf",
    "type": "global function"
  }, {
    "id": 220,
    "text": "min",
    "type": "global function"
  }, {
    "id": 221,
    "text": "tmap",
    "type": "global function"
  }, {
    "id": 222,
    "text": "require",
    "type": "global function"
  }, {
    "id": 223,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 224,
    "text": "val",
    "type": "global function"
  }, {
    "id": 225,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 226,
    "text": "type",
    "type": "global function"
  }, {
    "id": 227,
    "text": "splitv",
    "type": "global function"
  }, {
    "id": 228,
    "text": "tset",
    "type": "global function"
  }, {
    "id": 229,
    "text": "end_row_op",
    "type": "global function"
  }, {
    "id": 230,
    "text": "column",
    "type": "global function"
  }, {
    "id": 231,
    "text": "row_op",
    "type": "global function"
  }, {
    "id": 232,
    "text": "imap",
    "type": "global function"
  }, {
    "id": 233,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 234,
    "text": "keys",
    "type": "global function"
  }, {
    "id": 235,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 236,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 237,
    "text": "tmap2",
    "type": "global function"
  }, {
    "id": 238,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 239,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 240,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 241,
    "text": "",
    "type": "variable container"
  }, {
    "id": 242,
    "text": "",
    "type": "require container"
  }, {
    "id": 243,
    "text": "",
    "type": "local variable"
  }, {
    "id": 244,
    "text": "",
    "type": "n/a"
  }, {
    "id": 245,
    "text": "",
    "type": "local variable"
  }, {
    "id": 246,
    "text": "",
    "type": "n/a"
  }, {
    "id": 247,
    "text": "",
    "type": "local variable"
  }, {
    "id": 248,
    "text": "",
    "type": "n/a"
  }, {
    "id": 249,
    "text": "",
    "type": "local variable"
  }, {
    "id": 250,
    "text": "",
    "type": "n/a"
  }, {
    "id": 251,
    "text": "",
    "type": "local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "n/a"
  }, {
    "id": 253,
    "text": "",
    "type": "local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "n/a"
  }, {
    "id": 255,
    "text": "",
    "type": "local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "n/a"
  }, {
    "id": 257,
    "text": "",
    "type": "local variable"
  }, {
    "id": 258,
    "text": "",
    "type": "n/a"
  }, {
    "id": 259,
    "text": "",
    "type": "local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "n/a"
  }, {
    "id": 261,
    "text": "",
    "type": "local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "n/a"
  }, {
    "id": 263,
    "text": "",
    "type": "local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "n/a"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "n/a"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "n/a"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "n/a"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "n/a"
  }, {
    "id": 273,
    "text": "",
    "type": "local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "n/a"
  }, {
    "id": 275,
    "text": "",
    "type": "local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "n/a"
  }, {
    "id": 277,
    "text": "",
    "type": "local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "n/a"
  }, {
    "id": 279,
    "text": "",
    "type": "local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "n/a"
  }, {
    "id": 281,
    "text": "",
    "type": "local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "n/a"
  }, {
    "id": 283,
    "text": "",
    "type": "local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "local variable"
  }, {
    "id": 286,
    "text": "",
    "type": "n/a"
  }, {
    "id": 287,
    "text": "",
    "type": "local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "n/a"
  }, {
    "id": 289,
    "text": "",
    "type": "local variable"
  }, {
    "id": 290,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "n/a"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "global variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 303,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "interface container"
  }, {
    "id": 305,
    "text": "",
    "type": "interface"
  }, {
    "id": 306,
    "text": "",
    "type": "require local variable"
  } ]
}