{
  "_filename": "test-lapp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/penlight/tests/test-lapp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 7,
    "label": "calls",
    "to": 45
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 39
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 7,
    "label": "calls",
    "to": 44
  }, {
    "from": 30,
    "label": "calls",
    "to": 44
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 7
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 20,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 15,
    "label": "calls",
    "to": 42
  }, {
    "from": 15,
    "label": "calls",
    "to": 32
  }, {
    "from": 7,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 30,
    "label": "calls",
    "to": 41
  }, {
    "from": 7,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 15
  }, {
    "from": 30,
    "label": "calls",
    "to": 15
  }, {
    "from": 30,
    "label": "calls",
    "to": 15
  }, {
    "from": 30,
    "label": "calls",
    "to": 15
  }, {
    "from": 6,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 7
  }, {
    "from": 30,
    "label": "declares",
    "to": 15
  }, {
    "from": 30,
    "label": "declares",
    "to": 20
  }, {
    "from": 30,
    "label": "declares",
    "to": 23
  }, {
    "from": 30,
    "label": "declares",
    "to": 26
  }, {
    "from": 6,
    "label": "contains",
    "to": 47
  }, {
    "from": 6,
    "label": "contains",
    "to": 48
  }, {
    "from": 47,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 47,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 47,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 47,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 47,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 47,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 47,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 47,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 47,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 47,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 47,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 47,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 47,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 47,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 47,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 47,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 47,
    "label": "initializes",
    "to": 81
  }, {
    "from": 47,
    "label": "initializes",
    "to": 82
  }, {
    "from": 47,
    "label": "initializes",
    "to": 83
  }, {
    "from": 48,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "requires",
    "to": 4
  }, {
    "from": 48,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 1
  }, {
    "from": 48,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "requires",
    "to": 5
  }, {
    "from": 48,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "requires",
    "to": 3
  }, {
    "from": 48,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "requires",
    "to": 2
  }, {
    "from": 46,
    "label": "contains",
    "to": 20
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lapp",
    "type": "module"
  }, {
    "id": 2,
    "text": "path",
    "type": "module"
  }, {
    "id": 3,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 4,
    "text": "test",
    "type": "module"
  }, {
    "id": 5,
    "text": "utils",
    "type": "module"
  }, {
    "id": 6,
    "text": "test-lapp",
    "type": "module"
  }, {
    "id": 7,
    "text": "function check (spec,args,match)\r\n    local args = lapp(spec,args)\r\n    for k,v in pairs(args) do\r\n        if type(v) == 'userdata' then args[k]:close(); args[k] = '<file>' end\r\n    end\r\n    test.asserteq(args,match,nil,1)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local args = lapp(spec,args)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "for k,v in pairs(args) do\r\n        if type(v) == 'userdata' then args[k]:close(); args[k] = '<file>' end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "if type(v) == 'userdata' then args[k]:close(); args[k] = '<file>' end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "args[k]:close()",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "args[k] = '<file>'",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "test.asserteq(args,match,nil,1)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function check_error(spec,args,msg)\r\n    arg = args\r\n    local ok,err = pcall(lapp,spec)\r\n    test.assertmatch(err,msg)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "arg = args",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local ok,err = pcall(lapp,spec)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "test.assertmatch(err,msg)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function lapp.callback(param, arg)\r\n    table.insert(calls, {param, arg})\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "table.insert(calls, {param, arg})",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function(x)\r\n                 return tablex.imap(tonumber, utils.split(x, '%s*,%s*'))\r\n              end",
    "type": "function"
  }, {
    "id": 24,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function(x)\r\n                 for _,v in ipairs(x) do\r\n                    lapp.assert(math.ceil(v) == v,'not an integer!')\r\n                 end\r\n              end",
    "type": "function"
  }, {
    "id": 27,
    "text": "for _,v in ipairs(x) do\r\n                    lapp.assert(math.ceil(v) == v,'not an integer!')\r\n                 end",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "lapp.assert(math.ceil(v) == v,'not an integer!')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "add_type",
    "type": "global function"
  }, {
    "id": 32,
    "text": "assertmatch",
    "type": "global function"
  }, {
    "id": 33,
    "text": "asserteq",
    "type": "global function"
  }, {
    "id": 34,
    "text": "split",
    "type": "global function"
  }, {
    "id": 35,
    "text": "imap",
    "type": "global function"
  }, {
    "id": 36,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 37,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 38,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 39,
    "text": "normpath",
    "type": "global function"
  }, {
    "id": 40,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 41,
    "text": "require",
    "type": "global function"
  }, {
    "id": 42,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 43,
    "text": "type",
    "type": "global function"
  }, {
    "id": 44,
    "text": "lapp",
    "type": "global function"
  }, {
    "id": 45,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "number"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "string"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "string"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "string"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "string"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "string"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "string"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "string"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "string"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "string"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "string"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "string"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "string"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "string"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "global variable"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  } ]
}