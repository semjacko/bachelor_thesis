{
  "_filename": "symbols.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/examples/symbols.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 11
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 11
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 46,
    "label": "has",
    "to": 61
  }, {
    "from": 46,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 46,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 46,
    "label": "has",
    "to": 70
  }, {
    "from": 46,
    "label": "has",
    "to": 71
  }, {
    "from": 46,
    "label": "has",
    "to": 72
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 11
  }, {
    "from": 74,
    "label": "has",
    "to": 11
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 11
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 11
  }, {
    "from": 80,
    "label": "has",
    "to": 11
  }, {
    "from": 80,
    "label": "has",
    "to": 11
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 11
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 11
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 43
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 76
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 88,
    "label": "has",
    "to": 11
  }, {
    "from": 88,
    "label": "has",
    "to": 11
  }, {
    "from": 88,
    "label": "has",
    "to": 11
  }, {
    "from": 88,
    "label": "has",
    "to": 11
  }, {
    "from": 88,
    "label": "has",
    "to": 11
  }, {
    "from": 88,
    "label": "has",
    "to": 11
  }, {
    "from": 88,
    "label": "has",
    "to": 101
  }, {
    "from": 88,
    "label": "calls",
    "to": 88
  }, {
    "from": 7,
    "label": "calls",
    "to": 115
  }, {
    "from": 30,
    "label": "calls",
    "to": 26
  }, {
    "from": 7,
    "label": "calls",
    "to": 112
  }, {
    "from": 13,
    "label": "calls",
    "to": 112
  }, {
    "from": 13,
    "label": "calls",
    "to": 112
  }, {
    "from": 20,
    "label": "calls",
    "to": 112
  }, {
    "from": 30,
    "label": "calls",
    "to": 112
  }, {
    "from": 39,
    "label": "calls",
    "to": 112
  }, {
    "from": 74,
    "label": "calls",
    "to": 112
  }, {
    "from": 74,
    "label": "calls",
    "to": 112
  }, {
    "from": 80,
    "label": "calls",
    "to": 112
  }, {
    "from": 88,
    "label": "calls",
    "to": 112
  }, {
    "from": 4,
    "label": "calls",
    "to": 108
  }, {
    "from": 88,
    "label": "calls",
    "to": 84
  }, {
    "from": 7,
    "label": "calls",
    "to": 111
  }, {
    "from": 39,
    "label": "calls",
    "to": 121
  }, {
    "from": 80,
    "label": "calls",
    "to": 121
  }, {
    "from": 20,
    "label": "calls",
    "to": 20
  }, {
    "from": 26,
    "label": "calls",
    "to": 20
  }, {
    "from": 13,
    "label": "calls",
    "to": 123
  }, {
    "from": 39,
    "label": "calls",
    "to": 105
  }, {
    "from": 78,
    "label": "calls",
    "to": 114
  }, {
    "from": 102,
    "label": "calls",
    "to": 107
  }, {
    "from": 7,
    "label": "calls",
    "to": 104
  }, {
    "from": 88,
    "label": "calls",
    "to": 86
  }, {
    "from": 88,
    "label": "calls",
    "to": 86
  }, {
    "from": 102,
    "label": "calls",
    "to": 109
  }, {
    "from": 74,
    "label": "calls",
    "to": 74
  }, {
    "from": 74,
    "label": "calls",
    "to": 74
  }, {
    "from": 39,
    "label": "calls",
    "to": 124
  }, {
    "from": 39,
    "label": "calls",
    "to": 116
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 88,
    "label": "calls",
    "to": 106
  }, {
    "from": 30,
    "label": "calls",
    "to": 119
  }, {
    "from": 39,
    "label": "calls",
    "to": 119
  }, {
    "from": 88,
    "label": "calls",
    "to": 119
  }, {
    "from": 39,
    "label": "calls",
    "to": 113
  }, {
    "from": 39,
    "label": "calls",
    "to": 103
  }, {
    "from": 88,
    "label": "calls",
    "to": 39
  }, {
    "from": 39,
    "label": "calls",
    "to": 120
  }, {
    "from": 39,
    "label": "calls",
    "to": 120
  }, {
    "from": 84,
    "label": "calls",
    "to": 120
  }, {
    "from": 86,
    "label": "calls",
    "to": 120
  }, {
    "from": 88,
    "label": "calls",
    "to": 30
  }, {
    "from": 88,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 118
  }, {
    "from": 88,
    "label": "calls",
    "to": 78
  }, {
    "from": 39,
    "label": "calls",
    "to": 117
  }, {
    "from": 39,
    "label": "calls",
    "to": 117
  }, {
    "from": 39,
    "label": "calls",
    "to": 117
  }, {
    "from": 84,
    "label": "calls",
    "to": 117
  }, {
    "from": 86,
    "label": "calls",
    "to": 117
  }, {
    "from": 88,
    "label": "calls",
    "to": 117
  }, {
    "from": 102,
    "label": "calls",
    "to": 110
  }, {
    "from": 102,
    "label": "calls",
    "to": 110
  }, {
    "from": 102,
    "label": "calls",
    "to": 110
  }, {
    "from": 88,
    "label": "calls",
    "to": 80
  }, {
    "from": 13,
    "label": "calls",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 102,
    "label": "declares",
    "to": 4
  }, {
    "from": 102,
    "label": "declares",
    "to": 7
  }, {
    "from": 102,
    "label": "declares",
    "to": 13
  }, {
    "from": 102,
    "label": "declares",
    "to": 20
  }, {
    "from": 102,
    "label": "declares",
    "to": 26
  }, {
    "from": 102,
    "label": "declares",
    "to": 30
  }, {
    "from": 102,
    "label": "declares",
    "to": 39
  }, {
    "from": 102,
    "label": "declares",
    "to": 74
  }, {
    "from": 102,
    "label": "declares",
    "to": 78
  }, {
    "from": 102,
    "label": "declares",
    "to": 80
  }, {
    "from": 102,
    "label": "declares",
    "to": 84
  }, {
    "from": 102,
    "label": "declares",
    "to": 86
  }, {
    "from": 102,
    "label": "declares",
    "to": 88
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 1,
    "label": "contains",
    "to": 127
  }, {
    "from": 126,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 126,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 126,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 126,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 126,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 126,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 126,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 126,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 126,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 126,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 126,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 127,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "requires",
    "to": 3
  }, {
    "from": 127,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "requires",
    "to": 2
  }, {
    "from": 127,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "symbols",
    "type": "module"
  }, {
    "id": 2,
    "text": "List",
    "type": "module"
  }, {
    "id": 3,
    "text": "operator",
    "type": "module"
  }, {
    "id": 4,
    "text": "function bindval (self,val)\r\n    rawset(self,'value',val)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "rawset(self,'value',val)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function sexpr (e)\r\n\tif isPE(e) then\r\n\t\tif e.op ~= 'X' then\r\n\t\t\tlocal args = tablex.imap(sexpr,e)\r\n\t\t\treturn '('..e.op..' '..table.concat(args,' ')..')'\r\n\t\telse\r\n\t\t\treturn e.repr\r\n\t\tend\r\n\telse\r\n\t\treturn tostring(e)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if isPE(e) then\r\n\t\tif e.op ~= 'X' then\r\n\t\t\tlocal args = tablex.imap(sexpr,e)\r\n\t\t\treturn '('..e.op..' '..table.concat(args,' ')..')'\r\n\t\telse\r\n\t\t\treturn e.repr\r\n\t\tend\r\n\telse\r\n\t\treturn tostring(e)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "if e.op ~= 'X' then\r\n\t\t\tlocal args = tablex.imap(sexpr,e)\r\n\t\t\treturn '('..e.op..' '..table.concat(args,' ')..')'\r\n\t\telse\r\n\t\t\treturn e.repr\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local args = tablex.imap(sexpr,e)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function equals (e1,e2)\r\n    local p1,p2 = isPE(e1),isPE(e2)\r\n    if p1 ~= p2 then return false end  -- different kinds of animals!\r\n    if p1 and p2 then -- both PEs\r\n        -- operators must be the same\r\n        if e1.op ~= e2.op then return false end\r\n        -- PHs are equal if their representations are equal\r\n        if e1.op == 'X' then return e1.repr == e2.repr\r\n        -- commutative operators\r\n        elseif e1.op == '+' or e1.op == '*' then\r\n            return compare_no_order(e1,e2,equals)\r\n        else\r\n            -- arguments must be the same\r\n            return compare(e1,e2,equals)\r\n        end\r\n    else -- fall back on simple equality for non PEs\r\n        return e1 == e2\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local p1,p2 = isPE(e1),isPE(e2)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if p1 ~= p2 then return false end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if p1 and p2 then -- both PEs\r\n        -- operators must be the same\r\n        if e1.op ~= e2.op then return false end\r\n        -- PHs are equal if their representations are equal\r\n        if e1.op == 'X' then return e1.repr == e2.repr\r\n        -- commutative operators\r\n        elseif e1.op == '+' or e1.op == '*' then\r\n            return compare_no_order(e1,e2,equals)\r\n        else\r\n            -- arguments must be the same\r\n            return compare(e1,e2,equals)\r\n        end\r\n    else -- fall back on simple equality for non PEs\r\n        return e1 == e2\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if e1.op ~= e2.op then return false end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "if e1.op == 'X' then return e1.repr == e2.repr\r\n        -- commutative operators\r\n        elseif e1.op == '+' or e1.op == '*' then\r\n            return compare_no_order(e1,e2,equals)\r\n        else\r\n            -- arguments must be the same\r\n            return compare(e1,e2,equals)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function tcollect (op,e,ls)\r\n    if isPE(e) and e.op == op then\r\n        for i = 1,#e do\r\n            tcollect(op,e[i],ls)\r\n        end\r\n    else\r\n        ls:append(e)\r\n        return\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if isPE(e) and e.op == op then\r\n        for i = 1,#e do\r\n            tcollect(op,e[i],ls)\r\n        end\r\n    else\r\n        ls:append(e)\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "for i = 1,#e do\r\n            tcollect(op,e[i],ls)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 23,
    "text": "tcollect(op,e[i],ls)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "ls:append(e)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function rcollect (e)\r\n    local res = List()\r\n    tcollect(e.op,e,res)\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local res = List()",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "tcollect(e.op,e,res)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function balance (e)\r\n    if isPE(e) and e.op ~= 'X' then\r\n        local op,args = e.op\r\n        if op == '+' or op == '*' then\r\n            args = rcollect(e)\r\n        else\r\n            args = imap(balance,e)\r\n        end\r\n        for i = 1,#args do\r\n            e[i] = args[i]\r\n        end\r\n    end\r\n    return e\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if isPE(e) and e.op ~= 'X' then\r\n        local op,args = e.op\r\n        if op == '+' or op == '*' then\r\n            args = rcollect(e)\r\n        else\r\n            args = imap(balance,e)\r\n        end\r\n        for i = 1,#args do\r\n            e[i] = args[i]\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "local op,args = e.op",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if op == '+' or op == '*' then\r\n            args = rcollect(e)\r\n        else\r\n            args = imap(balance,e)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "args = rcollect(e)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "args = imap(balance,e)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "for i = 1,#args do\r\n            e[i] = args[i]\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 37,
    "text": "e[i] = args[i]",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function fold (e)\r\n    if isPE(e) then\r\n        if e.op == 'X' then\r\n            -- there could be _bound values_!\r\n            local val = rawget(e,'value')\r\n            return val and val or e\r\n        else\r\n            local op = e.op\r\n            local addmul = op == '*' or op == '+'\r\n            -- first fold all arguments\r\n            local args = imap(fold,e)\r\n            if not addmul and not find_if(args,isPE) then\r\n                -- no placeholders in these args, we can fold the expression.\r\n                local opfn = optable[op]\r\n                if opfn then\r\n                    return opfn(unpack(args))\r\n                else\r\n                    return '?'\r\n                end\r\n            elseif addmul then\r\n                -- enforce a few rules for + and *\r\n                -- split the args into two classes, PE args and non-PE args.\r\n                local classes = List.partition(args,isPE)\r\n                local pe,npe = classes[true],classes[false]\r\n                if npe then -- there's at least one non PE argument\r\n                    -- so fold them\r\n                    if #npe == 1 then npe = npe[1]\r\n                    else npe = npe:reduce(optable[op])\r\n                    end\r\n                    -- if the result is a constant, return it\r\n                    if not pe then return npe end\r\n\r\n                    -- either (* 1 x) => x or (* 1 x y ...) => (* x y ...)\r\n                    if op == '*' then\r\n                        if npe == 0 then return 0\r\n                        elseif npe == 1 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    else -- special cases for +\r\n                        if npe == 0 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    end\r\n                end\r\n                -- build up the final arguments\r\n                local res = {}\r\n                if npe then append(res,npe) end\r\n                for val,count in pairs(count_map(pe,equals)) do\r\n                    if count > 1 then\r\n                        if op == '*' then val = val ^ count\r\n                        else val = val * count\r\n                        end\r\n                    end\r\n                    append(res,val)\r\n                end\r\n                if #res == 1 then return res[1] end\r\n                return PE{op=op,unpack(res)}\r\n            elseif op == '^' then\r\n                if args[2] == 1 then return args[1] end -- identity\r\n                if args[2] == 0 then return 1 end\r\n            end\r\n            return PE{op=op,unpack(args)}\r\n        end\r\n    else\r\n        return e\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "if isPE(e) then\r\n        if e.op == 'X' then\r\n            -- there could be _bound values_!\r\n            local val = rawget(e,'value')\r\n            return val and val or e\r\n        else\r\n            local op = e.op\r\n            local addmul = op == '*' or op == '+'\r\n            -- first fold all arguments\r\n            local args = imap(fold,e)\r\n            if not addmul and not find_if(args,isPE) then\r\n                -- no placeholders in these args, we can fold the expression.\r\n                local opfn = optable[op]\r\n                if opfn then\r\n                    return opfn(unpack(args))\r\n                else\r\n                    return '?'\r\n                end\r\n            elseif addmul then\r\n                -- enforce a few rules for + and *\r\n                -- split the args into two classes, PE args and non-PE args.\r\n                local classes = List.partition(args,isPE)\r\n                local pe,npe = classes[true],classes[false]\r\n                if npe then -- there's at least one non PE argument\r\n                    -- so fold them\r\n                    if #npe == 1 then npe = npe[1]\r\n                    else npe = npe:reduce(optable[op])\r\n                    end\r\n                    -- if the result is a constant, return it\r\n                    if not pe then return npe end\r\n\r\n                    -- either (* 1 x) => x or (* 1 x y ...) => (* x y ...)\r\n                    if op == '*' then\r\n                        if npe == 0 then return 0\r\n                        elseif npe == 1 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    else -- special cases for +\r\n                        if npe == 0 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    end\r\n                end\r\n                -- build up the final arguments\r\n                local res = {}\r\n                if npe then append(res,npe) end\r\n                for val,count in pairs(count_map(pe,equals)) do\r\n                    if count > 1 then\r\n                        if op == '*' then val = val ^ count\r\n                        else val = val * count\r\n                        end\r\n                    end\r\n                    append(res,val)\r\n                end\r\n                if #res == 1 then return res[1] end\r\n                return PE{op=op,unpack(res)}\r\n            elseif op == '^' then\r\n                if args[2] == 1 then return args[1] end -- identity\r\n                if args[2] == 0 then return 1 end\r\n            end\r\n            return PE{op=op,unpack(args)}\r\n        end\r\n    else\r\n        return e\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "if e.op == 'X' then\r\n            -- there could be _bound values_!\r\n            local val = rawget(e,'value')\r\n            return val and val or e\r\n        else\r\n            local op = e.op\r\n            local addmul = op == '*' or op == '+'\r\n            -- first fold all arguments\r\n            local args = imap(fold,e)\r\n            if not addmul and not find_if(args,isPE) then\r\n                -- no placeholders in these args, we can fold the expression.\r\n                local opfn = optable[op]\r\n                if opfn then\r\n                    return opfn(unpack(args))\r\n                else\r\n                    return '?'\r\n                end\r\n            elseif addmul then\r\n                -- enforce a few rules for + and *\r\n                -- split the args into two classes, PE args and non-PE args.\r\n                local classes = List.partition(args,isPE)\r\n                local pe,npe = classes[true],classes[false]\r\n                if npe then -- there's at least one non PE argument\r\n                    -- so fold them\r\n                    if #npe == 1 then npe = npe[1]\r\n                    else npe = npe:reduce(optable[op])\r\n                    end\r\n                    -- if the result is a constant, return it\r\n                    if not pe then return npe end\r\n\r\n                    -- either (* 1 x) => x or (* 1 x y ...) => (* x y ...)\r\n                    if op == '*' then\r\n                        if npe == 0 then return 0\r\n                        elseif npe == 1 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    else -- special cases for +\r\n                        if npe == 0 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    end\r\n                end\r\n                -- build up the final arguments\r\n                local res = {}\r\n                if npe then append(res,npe) end\r\n                for val,count in pairs(count_map(pe,equals)) do\r\n                    if count > 1 then\r\n                        if op == '*' then val = val ^ count\r\n                        else val = val * count\r\n                        end\r\n                    end\r\n                    append(res,val)\r\n                end\r\n                if #res == 1 then return res[1] end\r\n                return PE{op=op,unpack(res)}\r\n            elseif op == '^' then\r\n                if args[2] == 1 then return args[1] end -- identity\r\n                if args[2] == 0 then return 1 end\r\n            end\r\n            return PE{op=op,unpack(args)}\r\n        end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local val = rawget(e,'value')",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local op = e.op",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local addmul = op == '*' or op == '+'",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local args = imap(fold,e)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if not addmul and not find_if(args,isPE) then\r\n                -- no placeholders in these args, we can fold the expression.\r\n                local opfn = optable[op]\r\n                if opfn then\r\n                    return opfn(unpack(args))\r\n                else\r\n                    return '?'\r\n                end\r\n            elseif addmul then\r\n                -- enforce a few rules for + and *\r\n                -- split the args into two classes, PE args and non-PE args.\r\n                local classes = List.partition(args,isPE)\r\n                local pe,npe = classes[true],classes[false]\r\n                if npe then -- there's at least one non PE argument\r\n                    -- so fold them\r\n                    if #npe == 1 then npe = npe[1]\r\n                    else npe = npe:reduce(optable[op])\r\n                    end\r\n                    -- if the result is a constant, return it\r\n                    if not pe then return npe end\r\n\r\n                    -- either (* 1 x) => x or (* 1 x y ...) => (* x y ...)\r\n                    if op == '*' then\r\n                        if npe == 0 then return 0\r\n                        elseif npe == 1 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    else -- special cases for +\r\n                        if npe == 0 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    end\r\n                end\r\n                -- build up the final arguments\r\n                local res = {}\r\n                if npe then append(res,npe) end\r\n                for val,count in pairs(count_map(pe,equals)) do\r\n                    if count > 1 then\r\n                        if op == '*' then val = val ^ count\r\n                        else val = val * count\r\n                        end\r\n                    end\r\n                    append(res,val)\r\n                end\r\n                if #res == 1 then return res[1] end\r\n                return PE{op=op,unpack(res)}\r\n            elseif op == '^' then\r\n                if args[2] == 1 then return args[1] end -- identity\r\n                if args[2] == 0 then return 1 end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "local opfn = optable[op]",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if opfn then\r\n                    return opfn(unpack(args))\r\n                else\r\n                    return '?'\r\n                end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local classes = List.partition(args,isPE)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local pe,npe = classes[true],classes[false]",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if npe then -- there's at least one non PE argument\r\n                    -- so fold them\r\n                    if #npe == 1 then npe = npe[1]\r\n                    else npe = npe:reduce(optable[op])\r\n                    end\r\n                    -- if the result is a constant, return it\r\n                    if not pe then return npe end\r\n\r\n                    -- either (* 1 x) => x or (* 1 x y ...) => (* x y ...)\r\n                    if op == '*' then\r\n                        if npe == 0 then return 0\r\n                        elseif npe == 1 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    else -- special cases for +\r\n                        if npe == 0 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "if #npe == 1 then npe = npe[1]\r\n                    else npe = npe:reduce(optable[op])\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "npe = npe[1]",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "npe = npe:reduce(optable[op])",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if not pe then return npe end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if op == '*' then\r\n                        if npe == 0 then return 0\r\n                        elseif npe == 1 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    else -- special cases for +\r\n                        if npe == 0 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "if npe == 0 then return 0\r\n                        elseif npe == 1 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "if #pe == 1 then return pe[1] else npe = nil end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "npe = nil",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if npe == 0 then -- identity\r\n                            if #pe == 1 then return pe[1] else npe = nil end\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if npe then append(res,npe) end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "append(res,npe)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "for val,count in pairs(count_map(pe,equals)) do\r\n                    if count > 1 then\r\n                        if op == '*' then val = val ^ count\r\n                        else val = val * count\r\n                        end\r\n                    end\r\n                    append(res,val)\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 65,
    "text": "if count > 1 then\r\n                        if op == '*' then val = val ^ count\r\n                        else val = val * count\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "if op == '*' then val = val ^ count\r\n                        else val = val * count\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "val = val ^ count",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "val = val * count",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "append(res,val)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if #res == 1 then return res[1] end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "if args[2] == 1 then return args[1] end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "if args[2] == 0 then return 1 end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function expand (e)\r\n    if isPE(e) and e.op == '*' and isPE(e[2]) and e[2].op == '+' then\r\n        local a,b = e[1],e[2]\r\n        return expand(b[1]*a) + expand(b[2]*a)\r\n    else\r\n        return e\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "if isPE(e) and e.op == '*' and isPE(e[2]) and e[2].op == '+' then\r\n        local a,b = e[1],e[2]\r\n        return expand(b[1]*a) + expand(b[2]*a)\r\n    else\r\n        return e\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "local a,b = e[1],e[2]",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function isnumber (x)\r\n    return type(x) == 'number'\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function references (e,x)\r\n    if isPE(e) then\r\n        if e.op == 'X' then return x.repr == e.repr\r\n        else\r\n            return find_if(e,references,x)\r\n        end\r\n    else\r\n        return false\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "if isPE(e) then\r\n        if e.op == 'X' then return x.repr == e.repr\r\n        else\r\n            return find_if(e,references,x)\r\n        end\r\n    else\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "if e.op == 'X' then return x.repr == e.repr\r\n        else\r\n            return find_if(e,references,x)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function muli (args)\r\n    return PE{op='*',unpack(args)}\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "local function addi (args)\r\n    return PE{op='+',unpack(args)}\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function diff (e,x)\r\n    if isPE(e) and references(e,x) then\r\n        local op = e.op\r\n        if op == 'X' then\r\n            return 1\r\n        else\r\n            local a,b = e[1],e[2]\r\n            if op == '+' then -- differentiation is linear\r\n                local args = imap(diff,e,x)\r\n                return balance(addi(args))\r\n            elseif op == '*' then -- product rule\r\n                local res,d,ee = {}\r\n                for i = 1,#e do\r\n                    d = fold(diff(e[i],x))\r\n                    if d ~= 0 then\r\n                        ee = {unpack(e)}\r\n                        ee[i] = d\r\n                        append(res,balance(muli(ee)))\r\n                    end\r\n                end\r\n                if #res > 1 then return addi(res)\r\n                else return res[1] end\r\n            elseif op == '^' and isnumber(b) then -- power rule\r\n                return b*x^(b-1)\r\n            end\r\n        end\r\n    else\r\n        return 0\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "if isPE(e) and references(e,x) then\r\n        local op = e.op\r\n        if op == 'X' then\r\n            return 1\r\n        else\r\n            local a,b = e[1],e[2]\r\n            if op == '+' then -- differentiation is linear\r\n                local args = imap(diff,e,x)\r\n                return balance(addi(args))\r\n            elseif op == '*' then -- product rule\r\n                local res,d,ee = {}\r\n                for i = 1,#e do\r\n                    d = fold(diff(e[i],x))\r\n                    if d ~= 0 then\r\n                        ee = {unpack(e)}\r\n                        ee[i] = d\r\n                        append(res,balance(muli(ee)))\r\n                    end\r\n                end\r\n                if #res > 1 then return addi(res)\r\n                else return res[1] end\r\n            elseif op == '^' and isnumber(b) then -- power rule\r\n                return b*x^(b-1)\r\n            end\r\n        end\r\n    else\r\n        return 0\r\n    end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "if op == 'X' then\r\n            return 1\r\n        else\r\n            local a,b = e[1],e[2]\r\n            if op == '+' then -- differentiation is linear\r\n                local args = imap(diff,e,x)\r\n                return balance(addi(args))\r\n            elseif op == '*' then -- product rule\r\n                local res,d,ee = {}\r\n                for i = 1,#e do\r\n                    d = fold(diff(e[i],x))\r\n                    if d ~= 0 then\r\n                        ee = {unpack(e)}\r\n                        ee[i] = d\r\n                        append(res,balance(muli(ee)))\r\n                    end\r\n                end\r\n                if #res > 1 then return addi(res)\r\n                else return res[1] end\r\n            elseif op == '^' and isnumber(b) then -- power rule\r\n                return b*x^(b-1)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "if op == '+' then -- differentiation is linear\r\n                local args = imap(diff,e,x)\r\n                return balance(addi(args))\r\n            elseif op == '*' then -- product rule\r\n                local res,d,ee = {}\r\n                for i = 1,#e do\r\n                    d = fold(diff(e[i],x))\r\n                    if d ~= 0 then\r\n                        ee = {unpack(e)}\r\n                        ee[i] = d\r\n                        append(res,balance(muli(ee)))\r\n                    end\r\n                end\r\n                if #res > 1 then return addi(res)\r\n                else return res[1] end\r\n            elseif op == '^' and isnumber(b) then -- power rule\r\n                return b*x^(b-1)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "local args = imap(diff,e,x)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local res,d,ee = {}",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "for i = 1,#e do\r\n                    d = fold(diff(e[i],x))\r\n                    if d ~= 0 then\r\n                        ee = {unpack(e)}\r\n                        ee[i] = d\r\n                        append(res,balance(muli(ee)))\r\n                    end\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 95,
    "text": "d = fold(diff(e[i],x))",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if d ~= 0 then\r\n                        ee = {unpack(e)}\r\n                        ee[i] = d\r\n                        append(res,balance(muli(ee)))\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "ee = {unpack(e)}",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "ee[i] = d",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "append(res,balance(muli(ee)))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "if #res > 1 then return addi(res)\r\n                else return res[1] end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "",
    "type": "function container"
  }, {
    "id": 103,
    "text": "partition",
    "type": "global function"
  }, {
    "id": 104,
    "text": "imap",
    "type": "global function"
  }, {
    "id": 105,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 106,
    "text": "append",
    "type": "global function"
  }, {
    "id": 107,
    "text": "import",
    "type": "global function"
  }, {
    "id": 108,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 109,
    "text": "compose",
    "type": "global function"
  }, {
    "id": 110,
    "text": "require",
    "type": "global function"
  }, {
    "id": 111,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 112,
    "text": "isPE",
    "type": "global function"
  }, {
    "id": 113,
    "text": "count_map",
    "type": "global function"
  }, {
    "id": 114,
    "text": "type",
    "type": "global function"
  }, {
    "id": 115,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 116,
    "text": "opfn",
    "type": "global function"
  }, {
    "id": 117,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 118,
    "text": "List",
    "type": "global function"
  }, {
    "id": 119,
    "text": "imap",
    "type": "global function"
  }, {
    "id": 120,
    "text": "PE",
    "type": "global function"
  }, {
    "id": 121,
    "text": "find_if",
    "type": "global function"
  }, {
    "id": 122,
    "text": "compare",
    "type": "global function"
  }, {
    "id": 123,
    "text": "compare_no_order",
    "type": "global function"
  }, {
    "id": 124,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 125,
    "text": "",
    "type": "global variable"
  }, {
    "id": 126,
    "text": "",
    "type": "variable container"
  }, {
    "id": 127,
    "text": "",
    "type": "require container"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "n/a"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "n/a"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "n/a"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "n/a"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "global variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "require local variable"
  } ]
}