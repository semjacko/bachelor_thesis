{
  "_filename": "data.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/data.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 19,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 6
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 6
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 51,
    "label": "has",
    "to": 6
  }, {
    "from": 51,
    "label": "has",
    "to": 61
  }, {
    "from": 51,
    "label": "has",
    "to": 6
  }, {
    "from": 51,
    "label": "has",
    "to": 6
  }, {
    "from": 51,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 6
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 65,
    "label": "has",
    "to": 76
  }, {
    "from": 65,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 77,
    "label": "has",
    "to": 6
  }, {
    "from": 77,
    "label": "has",
    "to": 6
  }, {
    "from": 65,
    "label": "has",
    "to": 84
  }, {
    "from": 65,
    "label": "has",
    "to": 85
  }, {
    "from": 65,
    "label": "has",
    "to": 86
  }, {
    "from": 65,
    "label": "has",
    "to": 6
  }, {
    "from": 65,
    "label": "has",
    "to": 87
  }, {
    "from": 65,
    "label": "has",
    "to": 88
  }, {
    "from": 65,
    "label": "has",
    "to": 89
  }, {
    "from": 65,
    "label": "has",
    "to": 90
  }, {
    "from": 65,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 65,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 65,
    "label": "has",
    "to": 98
  }, {
    "from": 65,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 6
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 65,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 105,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 102,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 102,
    "label": "has",
    "to": 85
  }, {
    "from": 102,
    "label": "has",
    "to": 116
  }, {
    "from": 102,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 118
  }, {
    "from": 65,
    "label": "has",
    "to": 119
  }, {
    "from": 65,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 110
  }, {
    "from": 65,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 101
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 129,
    "label": "has",
    "to": 137
  }, {
    "from": 128,
    "label": "has",
    "to": 85
  }, {
    "from": 128,
    "label": "has",
    "to": 116
  }, {
    "from": 65,
    "label": "has",
    "to": 6
  }, {
    "from": 65,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 65,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 65,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 65,
    "label": "has",
    "to": 6
  }, {
    "from": 65,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 145,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 145,
    "label": "has",
    "to": 82
  }, {
    "from": 145,
    "label": "has",
    "to": 83
  }, {
    "from": 145,
    "label": "has",
    "to": 6
  }, {
    "from": 145,
    "label": "has",
    "to": 6
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 92
  }, {
    "from": 147,
    "label": "has",
    "to": 93
  }, {
    "from": 147,
    "label": "has",
    "to": 94
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 6
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 150,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 71
  }, {
    "from": 157,
    "label": "has",
    "to": 6
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 157,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 157,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 157,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 157,
    "label": "has",
    "to": 6
  }, {
    "from": 157,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 170,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 176,
    "label": "has",
    "to": 181
  }, {
    "from": 176,
    "label": "has",
    "to": 182
  }, {
    "from": 176,
    "label": "has",
    "to": 183
  }, {
    "from": 176,
    "label": "has",
    "to": 184
  }, {
    "from": 176,
    "label": "has",
    "to": 6
  }, {
    "from": 176,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 6
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 6
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 190,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 190,
    "label": "has",
    "to": 6
  }, {
    "from": 190,
    "label": "has",
    "to": 6
  }, {
    "from": 190,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 198,
    "label": "has",
    "to": 201
  }, {
    "from": 198,
    "label": "has",
    "to": 202
  }, {
    "from": 198,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 204,
    "label": "has",
    "to": 207
  }, {
    "from": 204,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 204,
    "label": "has",
    "to": 210
  }, {
    "from": 198,
    "label": "has",
    "to": 211
  }, {
    "from": 198,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 198,
    "label": "has",
    "to": 215
  }, {
    "from": 198,
    "label": "has",
    "to": 216
  }, {
    "from": 198,
    "label": "has",
    "to": 217
  }, {
    "from": 198,
    "label": "has",
    "to": 6
  }, {
    "from": 198,
    "label": "has",
    "to": 218
  }, {
    "from": 198,
    "label": "has",
    "to": 219
  }, {
    "from": 198,
    "label": "has",
    "to": 220
  }, {
    "from": 198,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 200
  }, {
    "from": 198,
    "label": "has",
    "to": 6
  }, {
    "from": 198,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 224,
    "label": "has",
    "to": 228
  }, {
    "from": 224,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 224,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 224,
    "label": "has",
    "to": 234
  }, {
    "from": 224,
    "label": "has",
    "to": 235
  }, {
    "from": 224,
    "label": "has",
    "to": 236
  }, {
    "from": 224,
    "label": "has",
    "to": 237
  }, {
    "from": 224,
    "label": "has",
    "to": 6
  }, {
    "from": 224,
    "label": "has",
    "to": 6
  }, {
    "from": 224,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 241,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 239,
    "label": "has",
    "to": 6
  }, {
    "from": 239,
    "label": "has",
    "to": 6
  }, {
    "from": 239,
    "label": "has",
    "to": 6
  }, {
    "from": 239,
    "label": "has",
    "to": 249
  }, {
    "from": 239,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 239,
    "label": "has",
    "to": 253
  }, {
    "from": 239,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 239,
    "label": "has",
    "to": 256
  }, {
    "from": 239,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 257,
    "label": "has",
    "to": 260
  }, {
    "from": 257,
    "label": "has",
    "to": 261
  }, {
    "from": 239,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 266,
    "label": "has",
    "to": 269
  }, {
    "from": 262,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 262,
    "label": "has",
    "to": 272
  }, {
    "from": 262,
    "label": "has",
    "to": 217
  }, {
    "from": 262,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 262,
    "label": "has",
    "to": 276
  }, {
    "from": 262,
    "label": "has",
    "to": 277
  }, {
    "from": 239,
    "label": "has",
    "to": 6
  }, {
    "from": 239,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 239,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 239,
    "label": "has",
    "to": 282
  }, {
    "from": 239,
    "label": "has",
    "to": 283
  }, {
    "from": 239,
    "label": "has",
    "to": 6
  }, {
    "from": 239,
    "label": "has",
    "to": 284
  }, {
    "from": 239,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 239,
    "label": "has",
    "to": 287
  }, {
    "from": 239,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 288,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 291
  }, {
    "from": 288,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 292,
    "label": "has",
    "to": 6
  }, {
    "from": 239,
    "label": "has",
    "to": 6
  }, {
    "from": 239,
    "label": "has",
    "to": 295
  }, {
    "from": 296,
    "label": "has",
    "to": 6
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 240
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 298,
    "label": "has",
    "to": 301
  }, {
    "from": 298,
    "label": "has",
    "to": 302
  }, {
    "from": 298,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 298,
    "label": "has",
    "to": 6
  }, {
    "from": 298,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 307,
    "label": "has",
    "to": 310
  }, {
    "from": 298,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 23
  }, {
    "from": 312,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 312,
    "label": "has",
    "to": 6
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 317
  }, {
    "from": 314,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 314,
    "label": "has",
    "to": 6
  }, {
    "from": 314,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 321,
    "label": "has",
    "to": 323
  }, {
    "from": 321,
    "label": "has",
    "to": 15
  }, {
    "from": 321,
    "label": "has",
    "to": 324
  }, {
    "from": 321,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 321,
    "label": "has",
    "to": 328
  }, {
    "from": 321,
    "label": "has",
    "to": 6
  }, {
    "from": 321,
    "label": "has",
    "to": 329
  }, {
    "from": 330,
    "label": "has",
    "to": 6
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 332,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 332,
    "label": "has",
    "to": 6
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 19,
    "label": "calls",
    "to": 355
  }, {
    "from": 198,
    "label": "calls",
    "to": 186
  }, {
    "from": 239,
    "label": "calls",
    "to": 186
  }, {
    "from": 239,
    "label": "calls",
    "to": 186
  }, {
    "from": 334,
    "label": "calls",
    "to": 346
  }, {
    "from": 334,
    "label": "calls",
    "to": 346
  }, {
    "from": 298,
    "label": "calls",
    "to": 346
  }, {
    "from": 10,
    "label": "calls",
    "to": 8
  }, {
    "from": 198,
    "label": "calls",
    "to": 8
  }, {
    "from": 145,
    "label": "calls",
    "to": 354
  }, {
    "from": 190,
    "label": "calls",
    "to": 354
  }, {
    "from": 198,
    "label": "calls",
    "to": 347
  }, {
    "from": 198,
    "label": "calls",
    "to": 347
  }, {
    "from": 334,
    "label": "calls",
    "to": 340
  }, {
    "from": 334,
    "label": "calls",
    "to": 176
  }, {
    "from": 65,
    "label": "calls",
    "to": 176
  }, {
    "from": 239,
    "label": "calls",
    "to": 349
  }, {
    "from": 239,
    "label": "calls",
    "to": 349
  }, {
    "from": 239,
    "label": "calls",
    "to": 349
  }, {
    "from": 334,
    "label": "calls",
    "to": 19
  }, {
    "from": 65,
    "label": "calls",
    "to": 19
  }, {
    "from": 65,
    "label": "calls",
    "to": 19
  }, {
    "from": 65,
    "label": "calls",
    "to": 19
  }, {
    "from": 65,
    "label": "calls",
    "to": 19
  }, {
    "from": 176,
    "label": "calls",
    "to": 19
  }, {
    "from": 46,
    "label": "calls",
    "to": 341
  }, {
    "from": 65,
    "label": "calls",
    "to": 341
  }, {
    "from": 239,
    "label": "calls",
    "to": 341
  }, {
    "from": 19,
    "label": "calls",
    "to": 342
  }, {
    "from": 334,
    "label": "calls",
    "to": 342
  }, {
    "from": 334,
    "label": "calls",
    "to": 342
  }, {
    "from": 147,
    "label": "calls",
    "to": 342
  }, {
    "from": 147,
    "label": "calls",
    "to": 342
  }, {
    "from": 65,
    "label": "calls",
    "to": 342
  }, {
    "from": 65,
    "label": "calls",
    "to": 342
  }, {
    "from": 198,
    "label": "calls",
    "to": 342
  }, {
    "from": 239,
    "label": "calls",
    "to": 342
  }, {
    "from": 239,
    "label": "calls",
    "to": 343
  }, {
    "from": 170,
    "label": "calls",
    "to": 10
  }, {
    "from": 334,
    "label": "calls",
    "to": 198
  }, {
    "from": 239,
    "label": "calls",
    "to": 198
  }, {
    "from": 65,
    "label": "calls",
    "to": 46
  }, {
    "from": 176,
    "label": "calls",
    "to": 46
  }, {
    "from": 19,
    "label": "calls",
    "to": 14
  }, {
    "from": 65,
    "label": "calls",
    "to": 14
  }, {
    "from": 239,
    "label": "calls",
    "to": 337
  }, {
    "from": 65,
    "label": "calls",
    "to": 147
  }, {
    "from": 65,
    "label": "calls",
    "to": 147
  }, {
    "from": 65,
    "label": "calls",
    "to": 147
  }, {
    "from": 65,
    "label": "calls",
    "to": 147
  }, {
    "from": 65,
    "label": "calls",
    "to": 356
  }, {
    "from": 65,
    "label": "calls",
    "to": 149
  }, {
    "from": 65,
    "label": "calls",
    "to": 149
  }, {
    "from": 65,
    "label": "calls",
    "to": 149
  }, {
    "from": 167,
    "label": "calls",
    "to": 157
  }, {
    "from": 334,
    "label": "calls",
    "to": 239
  }, {
    "from": 334,
    "label": "calls",
    "to": 239
  }, {
    "from": 334,
    "label": "calls",
    "to": 239
  }, {
    "from": 154,
    "label": "calls",
    "to": 150
  }, {
    "from": 157,
    "label": "calls",
    "to": 150
  }, {
    "from": 65,
    "label": "calls",
    "to": 351
  }, {
    "from": 150,
    "label": "calls",
    "to": 345
  }, {
    "from": 157,
    "label": "calls",
    "to": 345
  }, {
    "from": 188,
    "label": "calls",
    "to": 345
  }, {
    "from": 198,
    "label": "calls",
    "to": 345
  }, {
    "from": 239,
    "label": "calls",
    "to": 345
  }, {
    "from": 298,
    "label": "calls",
    "to": 345
  }, {
    "from": 46,
    "label": "calls",
    "to": 3
  }, {
    "from": 334,
    "label": "calls",
    "to": 350
  }, {
    "from": 51,
    "label": "calls",
    "to": 350
  }, {
    "from": 65,
    "label": "calls",
    "to": 350
  }, {
    "from": 176,
    "label": "calls",
    "to": 350
  }, {
    "from": 186,
    "label": "calls",
    "to": 350
  }, {
    "from": 239,
    "label": "calls",
    "to": 350
  }, {
    "from": 239,
    "label": "calls",
    "to": 350
  }, {
    "from": 3,
    "label": "calls",
    "to": 338
  }, {
    "from": 65,
    "label": "calls",
    "to": 145
  }, {
    "from": 298,
    "label": "calls",
    "to": 65
  }, {
    "from": 198,
    "label": "calls",
    "to": 335
  }, {
    "from": 12,
    "label": "calls",
    "to": 358
  }, {
    "from": 176,
    "label": "calls",
    "to": 358
  }, {
    "from": 239,
    "label": "calls",
    "to": 358
  }, {
    "from": 334,
    "label": "calls",
    "to": 348
  }, {
    "from": 12,
    "label": "calls",
    "to": 348
  }, {
    "from": 334,
    "label": "calls",
    "to": 348
  }, {
    "from": 239,
    "label": "calls",
    "to": 339
  }, {
    "from": 14,
    "label": "calls",
    "to": 357
  }, {
    "from": 239,
    "label": "calls",
    "to": 190
  }, {
    "from": 298,
    "label": "calls",
    "to": 336
  }, {
    "from": 150,
    "label": "calls",
    "to": 344
  }, {
    "from": 51,
    "label": "calls",
    "to": 352
  }, {
    "from": 239,
    "label": "calls",
    "to": 353
  }, {
    "from": 65,
    "label": "calls",
    "to": 51
  }, {
    "from": 157,
    "label": "calls",
    "to": 51
  }, {
    "from": 298,
    "label": "calls",
    "to": 51
  }, {
    "from": 65,
    "label": "calls",
    "to": 36
  }, {
    "from": 190,
    "label": "calls",
    "to": 36
  }, {
    "from": 19,
    "label": "calls",
    "to": 12
  }, {
    "from": 334,
    "label": "calls",
    "to": 12
  }, {
    "from": 334,
    "label": "calls",
    "to": 12
  }, {
    "from": 334,
    "label": "calls",
    "to": 12
  }, {
    "from": 176,
    "label": "calls",
    "to": 12
  }, {
    "from": 334,
    "label": "calls",
    "to": 224
  }, {
    "from": 239,
    "label": "calls",
    "to": 224
  }, {
    "from": 176,
    "label": "calls",
    "to": 170
  }, {
    "from": 190,
    "label": "calls",
    "to": 188
  }, {
    "from": 198,
    "label": "calls",
    "to": 188
  }, {
    "from": 1,
    "label": "contains",
    "to": 334
  }, {
    "from": 334,
    "label": "declares",
    "to": 3
  }, {
    "from": 334,
    "label": "declares",
    "to": 8
  }, {
    "from": 334,
    "label": "declares",
    "to": 10
  }, {
    "from": 334,
    "label": "declares",
    "to": 12
  }, {
    "from": 334,
    "label": "declares",
    "to": 14
  }, {
    "from": 334,
    "label": "declares",
    "to": 19
  }, {
    "from": 334,
    "label": "declares",
    "to": 35
  }, {
    "from": 334,
    "label": "declares",
    "to": 36
  }, {
    "from": 334,
    "label": "declares",
    "to": 40
  }, {
    "from": 334,
    "label": "declares",
    "to": 46
  }, {
    "from": 334,
    "label": "declares",
    "to": 51
  }, {
    "from": 334,
    "label": "declares",
    "to": 63
  }, {
    "from": 334,
    "label": "declares",
    "to": 65
  }, {
    "from": 334,
    "label": "declares",
    "to": 145
  }, {
    "from": 334,
    "label": "declares",
    "to": 147
  }, {
    "from": 334,
    "label": "declares",
    "to": 149
  }, {
    "from": 334,
    "label": "declares",
    "to": 150
  }, {
    "from": 334,
    "label": "declares",
    "to": 154
  }, {
    "from": 334,
    "label": "declares",
    "to": 157
  }, {
    "from": 334,
    "label": "declares",
    "to": 167
  }, {
    "from": 334,
    "label": "declares",
    "to": 170
  }, {
    "from": 334,
    "label": "declares",
    "to": 176
  }, {
    "from": 334,
    "label": "declares",
    "to": 186
  }, {
    "from": 334,
    "label": "declares",
    "to": 188
  }, {
    "from": 334,
    "label": "declares",
    "to": 190
  }, {
    "from": 334,
    "label": "declares",
    "to": 198
  }, {
    "from": 334,
    "label": "declares",
    "to": 224
  }, {
    "from": 334,
    "label": "declares",
    "to": 239
  }, {
    "from": 334,
    "label": "declares",
    "to": 296
  }, {
    "from": 334,
    "label": "declares",
    "to": 298
  }, {
    "from": 334,
    "label": "declares",
    "to": 312
  }, {
    "from": 334,
    "label": "declares",
    "to": 314
  }, {
    "from": 334,
    "label": "declares",
    "to": 321
  }, {
    "from": 334,
    "label": "declares",
    "to": 330
  }, {
    "from": 334,
    "label": "declares",
    "to": 332
  }, {
    "from": 1,
    "label": "contains",
    "to": 359
  }, {
    "from": 1,
    "label": "contains",
    "to": 360
  }, {
    "from": 359,
    "label": "initializes",
    "to": 361
  }, {
    "from": 361,
    "label": "assigns",
    "to": 362
  }, {
    "from": 359,
    "label": "initializes",
    "to": 363
  }, {
    "from": 363,
    "label": "assigns",
    "to": 364
  }, {
    "from": 359,
    "label": "initializes",
    "to": 365
  }, {
    "from": 365,
    "label": "assigns",
    "to": 366
  }, {
    "from": 359,
    "label": "initializes",
    "to": 367
  }, {
    "from": 367,
    "label": "assigns",
    "to": 368
  }, {
    "from": 359,
    "label": "initializes",
    "to": 369
  }, {
    "from": 369,
    "label": "assigns",
    "to": 370
  }, {
    "from": 359,
    "label": "initializes",
    "to": 371
  }, {
    "from": 371,
    "label": "assigns",
    "to": 372
  }, {
    "from": 359,
    "label": "initializes",
    "to": 373
  }, {
    "from": 373,
    "label": "assigns",
    "to": 374
  }, {
    "from": 359,
    "label": "initializes",
    "to": 375
  }, {
    "from": 375,
    "label": "assigns",
    "to": 376
  }, {
    "from": 359,
    "label": "initializes",
    "to": 377
  }, {
    "from": 377,
    "label": "assigns",
    "to": 378
  }, {
    "from": 359,
    "label": "initializes",
    "to": 379
  }, {
    "from": 379,
    "label": "assigns",
    "to": 380
  }, {
    "from": 359,
    "label": "initializes",
    "to": 381
  }, {
    "from": 381,
    "label": "assigns",
    "to": 382
  }, {
    "from": 359,
    "label": "initializes",
    "to": 383
  }, {
    "from": 383,
    "label": "assigns",
    "to": 384
  }, {
    "from": 359,
    "label": "initializes",
    "to": 385
  }, {
    "from": 385,
    "label": "assigns",
    "to": 386
  }, {
    "from": 359,
    "label": "initializes",
    "to": 387
  }, {
    "from": 387,
    "label": "assigns",
    "to": 388
  }, {
    "from": 359,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "assigns",
    "to": 390
  }, {
    "from": 359,
    "label": "initializes",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 359,
    "label": "initializes",
    "to": 393
  }, {
    "from": 393,
    "label": "assigns",
    "to": 394
  }, {
    "from": 359,
    "label": "initializes",
    "to": 395
  }, {
    "from": 395,
    "label": "assigns",
    "to": 396
  }, {
    "from": 359,
    "label": "initializes",
    "to": 397
  }, {
    "from": 359,
    "label": "initializes",
    "to": 398
  }, {
    "from": 398,
    "label": "assigns",
    "to": 399
  }, {
    "from": 399,
    "label": "assigns",
    "to": 400
  }, {
    "from": 400,
    "label": "assigns",
    "to": 401
  }, {
    "from": 399,
    "label": "assigns",
    "to": 402
  }, {
    "from": 402,
    "label": "assigns",
    "to": 403
  }, {
    "from": 399,
    "label": "assigns",
    "to": 404
  }, {
    "from": 404,
    "label": "assigns",
    "to": 405
  }, {
    "from": 359,
    "label": "initializes",
    "to": 406
  }, {
    "from": 359,
    "label": "initializes",
    "to": 407
  }, {
    "from": 407,
    "label": "assigns",
    "to": 408
  }, {
    "from": 408,
    "label": "assigns",
    "to": 409
  }, {
    "from": 408,
    "label": "assigns",
    "to": 410
  }, {
    "from": 408,
    "label": "assigns",
    "to": 411
  }, {
    "from": 408,
    "label": "assigns",
    "to": 412
  }, {
    "from": 359,
    "label": "initializes",
    "to": 413
  }, {
    "from": 413,
    "label": "assigns",
    "to": 414
  }, {
    "from": 359,
    "label": "initializes",
    "to": 415
  }, {
    "from": 415,
    "label": "assigns",
    "to": 416
  }, {
    "from": 359,
    "label": "initializes",
    "to": 417
  }, {
    "from": 359,
    "label": "initializes",
    "to": 418
  }, {
    "from": 418,
    "label": "assigns",
    "to": 419
  }, {
    "from": 359,
    "label": "initializes",
    "to": 420
  }, {
    "from": 420,
    "label": "assigns",
    "to": 421
  }, {
    "from": 359,
    "label": "initializes",
    "to": 422
  }, {
    "from": 422,
    "label": "assigns",
    "to": 423
  }, {
    "from": 359,
    "label": "initializes",
    "to": 424
  }, {
    "from": 424,
    "label": "assigns",
    "to": 425
  }, {
    "from": 360,
    "label": "initializes",
    "to": 426
  }, {
    "from": 426,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 427
  }, {
    "from": 395,
    "label": "represents",
    "to": 428
  }, {
    "from": 427,
    "label": "provides",
    "to": 428
  }, {
    "from": 429,
    "label": "requires",
    "to": 1
  }, {
    "from": 395,
    "label": "contains",
    "to": 65
  }, {
    "from": 395,
    "label": "contains",
    "to": 157
  }, {
    "from": 395,
    "label": "contains",
    "to": 176
  }, {
    "from": 395,
    "label": "contains",
    "to": 239
  }, {
    "from": 395,
    "label": "contains",
    "to": 298
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 155,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 155,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 155,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 332
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 306,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 319,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 319,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 319,
    "label": "hasArgument",
    "to": 405
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 401
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 403
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 405
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "data",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function count(s,chr)\r\n    chr = utils.escape(chr)\r\n    local _,cnt = s:gsub(chr,' ')\r\n    return cnt\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "chr = utils.escape(chr)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "local _,cnt = s:gsub(chr,' ')",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function rstrip(s)\r\n    return (s:gsub('%s+$',''))\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function strip (s)\r\n    return (rstrip(s):gsub('^%s*',''))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function makelist(l)\r\n    return setmetatable(l, require('pl.List'))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function map(fun,t)\r\n    local res = {}\r\n    for i = 1,#t do\r\n        res[i] = fun(t[i])\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for i = 1,#t do\r\n        res[i] = fun(t[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "res[i] = fun(t[i])",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function split(line,delim,csv,n)\r\n    local massage\r\n    -- CSV fields may be double-quoted and may contain commas!\r\n    if csv and line:match '\"' then\r\n        line = line:gsub('\"([^\"]+)\"',function(str)\r\n            local s,cnt = str:gsub(',','\\001')\r\n            if cnt > 0 then massage = true end\r\n            return s\r\n        end)\r\n        if massage then\r\n            massage = function(s) return (s:gsub('\\001',',')) end\r\n        end\r\n    end\r\n    local res = (usplit(line,delim,false,n))\r\n    if csv then\r\n        -- restore CSV commas-in-fields\r\n        if massage then res = map(massage,res) end\r\n        -- in CSV mode trailiing commas are significant!\r\n        if line:match ',$' then append(res,'') end\r\n    end\r\n    return makelist(res)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local massage",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if csv and line:match '\"' then\r\n        line = line:gsub('\"([^\"]+)\"',function(str)\r\n            local s,cnt = str:gsub(',','\\001')\r\n            if cnt > 0 then massage = true end\r\n            return s\r\n        end)\r\n        if massage then\r\n            massage = function(s) return (s:gsub('\\001',',')) end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "line = line:gsub('\"([^\"]+)\"',function(str)\r\n            local s,cnt = str:gsub(',','\\001')\r\n            if cnt > 0 then massage = true end\r\n            return s\r\n        end)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local s,cnt = str:gsub(',','\\001')",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if cnt > 0 then massage = true end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "massage = true",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if massage then\r\n            massage = function(s) return (s:gsub('\\001',',')) end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "massage = function(s) return (s:gsub('\\001',',')) end",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local res = (usplit(line,delim,false,n))",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if csv then\r\n        -- restore CSV commas-in-fields\r\n        if massage then res = map(massage,res) end\r\n        -- in CSV mode trailiing commas are significant!\r\n        if line:match ',$' then append(res,'') end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "if massage then res = map(massage,res) end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "res = map(massage,res)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if line:match ',$' then append(res,'') end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "append(res,'')",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(s) return (s:gsub('\\001',',')) end",
    "type": "function"
  }, {
    "id": 36,
    "text": "local function find(t,v)\r\n    for i = 1,#t do\r\n        if v == t[i] then return i end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "for i = 1,#t do\r\n        if v == t[i] then return i end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 38,
    "text": "if v == t[i] then return i end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function(self,name)\r\n    local f = DataMT[name]\r\n    if f then return f end\r\n    if not array2d then\r\n        array2d = require 'pl.array2d'\r\n    end\r\n    return array2d[name]\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local f = DataMT[name]",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if f then return f end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "if not array2d then\r\n        array2d = require 'pl.array2d'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "array2d = require 'pl.array2d'",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function guess_delim (line)\r\n    if line=='' then return ' ' end\r\n    for _,delim in ipairs(delims) do\r\n        if count(line,delim) > 0 then\r\n            return delim == ' ' and '%s+' or delim\r\n        end\r\n    end\r\n    return ' '\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "if line=='' then return ' ' end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "for _,delim in ipairs(delims) do\r\n        if count(line,delim) > 0 then\r\n            return delim == ' ' and '%s+' or delim\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "if count(line,delim) > 0 then\r\n            return delim == ' ' and '%s+' or delim\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function open_file (f,mode)\r\n    local opened, err\r\n    local reading = mode == 'r'\r\n    if type(f) == 'string' then\r\n        if f == 'stdin'  then\r\n            f = io.stdin\r\n        elseif f == 'stdout'  then\r\n            f = io.stdout\r\n        else\r\n            f,err = io.open(f,mode)\r\n            if not f then return nil,err end\r\n            opened = true\r\n        end\r\n    end\r\n    if f and ((reading and not f.read) or (not reading and not f.write)) then\r\n        return nil, \"not a file-like object\"\r\n    end\r\n    return f,nil,opened\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local opened, err",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local reading = mode == 'r'",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if type(f) == 'string' then\r\n        if f == 'stdin'  then\r\n            f = io.stdin\r\n        elseif f == 'stdout'  then\r\n            f = io.stdout\r\n        else\r\n            f,err = io.open(f,mode)\r\n            if not f then return nil,err end\r\n            opened = true\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if f == 'stdin'  then\r\n            f = io.stdin\r\n        elseif f == 'stdout'  then\r\n            f = io.stdout\r\n        else\r\n            f,err = io.open(f,mode)\r\n            if not f then return nil,err end\r\n            opened = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "f = io.stdin",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "f = io.stdout",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "f,err = io.open(f,mode)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if not f then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "opened = true",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if f and ((reading and not f.read) or (not reading and not f.write)) then\r\n        return nil, \"not a file-like object\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function all_n ()\r\n\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function data.read(file,cnfg)\r\n    local err,opened,count,line\r\n    local D = {}\r\n    if not cnfg then cnfg = {} end\r\n    local f,err,opened = open_file(file,'r')\r\n    if not f then return nil, err end\r\n    local thousands_dot = cnfg.thousands_dot\r\n    local csv = cnfg.csv\r\n    if csv then cnfg.delim = ',' end\r\n\r\n    -- note that using dot as the thousands separator (@thousands_dot)\r\n    -- requires a special conversion function! For CSV, _empty fields_ are\r\n    -- considered to default to numerial zeroes.\r\n    local tonumber = tonumber\r\n    local function try_number(x)\r\n        if thousands_dot then x = x:gsub('%.(...)','%1') end\r\n        if csv and x == '' then x = '0' end\r\n        local v = tonumber(x)\r\n        if v == nil then return nil,\"not a number\" end\r\n        return v\r\n    end\r\n\r\n    count = 1\r\n    line = f:read()\r\n    if not line then return nil, \"empty file\" end\r\n\r\n    -- first question: what is the delimiter?\r\n    D.delim = cnfg.delim and cnfg.delim or guess_delim(line)\r\n    local delim = D.delim\r\n\r\n    local conversion\r\n    local numfields = {}\r\n    local function append_conversion (idx,conv)\r\n        conversion = conversion or {}\r\n        append(numfields,idx)\r\n        append(conversion,conv)\r\n    end\r\n    if cnfg.numfields then\r\n        for _,n in ipairs(cnfg.numfields) do append_conversion(n,try_number) end\r\n    end\r\n\r\n    -- some space-delimited data starts with a space.  This should not be a column,\r\n    -- although it certainly would be for comma-separated, etc.\r\n    local stripper\r\n    if delim == '%s+' and line:find(delim) == 1 then\r\n        stripper = function(s)  return s:gsub('^%s+','') end\r\n        line = stripper(line)\r\n    end\r\n    -- first line will usually be field names. Unless fieldnames are specified,\r\n    -- we check if it contains purely numerical values for the case of reading\r\n    -- plain data files.\r\n    if not cnfg.fieldnames then\r\n        local fields,nums\r\n        fields = split(line,delim,csv)\r\n        if not cnfg.convert then\r\n            nums = map(tonumber,fields)\r\n            if #nums == #fields then -- they're ALL numbers!\r\n                append(D,nums) -- add the first converted row\r\n                -- and specify conversions for subsequent rows\r\n                for i = 1,#nums do append_conversion(i,try_number) end\r\n            else -- we'll try to check numbers just now..\r\n                nums = nil\r\n            end\r\n        else -- [explicit column conversions] (any deduced number conversions will be added)\r\n            for idx,conv in pairs(cnfg.convert) do append_conversion(idx,conv) end\r\n        end\r\n        if nums == nil then\r\n            cnfg.fieldnames = fields\r\n        end\r\n        line = f:read()\r\n        count = count + 1\r\n        if stripper then line = stripper(line) end\r\n    elseif type(cnfg.fieldnames) == 'string' then\r\n        cnfg.fieldnames = split(cnfg.fieldnames,delim,csv)\r\n    end\r\n    local nfields\r\n    -- at this point, the column headers have been read in. If the first\r\n    -- row consisted of numbers, it has already been added to the dataset.\r\n    if cnfg.fieldnames then\r\n        D.fieldnames = cnfg.fieldnames\r\n        -- [collecting end field] If @last_field_collect then we'll\r\n        -- only split as many fields as there are fieldnames\r\n        if cnfg.last_field_collect then\r\n            nfields = #D.fieldnames\r\n        end\r\n        -- [implicit column conversion] unless @no_convert, we need the numerical field indices\r\n        -- of the first data row. These can also be specified explicitly by @numfields.\r\n        if not cnfg.no_convert then\r\n            local fields = split(line,D.delim,csv,nfields)\r\n            for i = 1,#fields do\r\n                if not find(numfields,i) and try_number(fields[i]) then\r\n                    append_conversion(i,try_number)\r\n                end\r\n            end\r\n        end\r\n    end\r\n    -- keep going until finished\r\n    while line do\r\n        if not line:find ('^%s*$') then -- [blank lines] ignore them!\r\n            if stripper then line = stripper(line) end\r\n            local fields = split(line,delim,csv,nfields)\r\n            if conversion then -- there were field conversions...\r\n                for k = 1,#numfields do\r\n                    local i,conv = numfields[k],conversion[k]\r\n                    local val,err = conv(fields[i])\r\n                    if val == nil then\r\n                        return nil, err..\": \"..fields[i]..\" at line \"..count\r\n                    else\r\n                        fields[i] = val\r\n                    end\r\n                end\r\n            end\r\n            append(D,fields)\r\n        end\r\n        line = f:read()\r\n        count = count + 1\r\n    end\r\n    if opened then f:close() end\r\n    if delim == '%s+' then D.delim = ' ' end\r\n    if not D.fieldnames then D.fieldnames = {} end\r\n    return data.new(D)\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local err,opened,count,line",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local D = {}",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if not cnfg then cnfg = {} end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "cnfg = {}",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "local f,err,opened = open_file(file,'r')",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if not f then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "local thousands_dot = cnfg.thousands_dot",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local csv = cnfg.csv",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if csv then cnfg.delim = ',' end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "cnfg.delim = ','",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local tonumber = tonumber",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local function try_number(x)\r\n        if thousands_dot then x = x:gsub('%.(...)','%1') end\r\n        if csv and x == '' then x = '0' end\r\n        local v = tonumber(x)\r\n        if v == nil then return nil,\"not a number\" end\r\n        return v\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 78,
    "text": "if thousands_dot then x = x:gsub('%.(...)','%1') end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "x = x:gsub('%.(...)','%1')",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if csv and x == '' then x = '0' end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "x = '0'",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "local v = tonumber(x)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "if v == nil then return nil,\"not a number\" end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "count = 1",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "line = f:read()",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if not line then return nil, \"empty file\" end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "D.delim = cnfg.delim and cnfg.delim or guess_delim(line)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "local delim = D.delim",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local conversion",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local numfields = {}",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local function append_conversion (idx,conv)\r\n        conversion = conversion or {}\r\n        append(numfields,idx)\r\n        append(conversion,conv)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 92,
    "text": "conversion = conversion or {}",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "append(numfields,idx)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "append(conversion,conv)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "if cnfg.numfields then\r\n        for _,n in ipairs(cnfg.numfields) do append_conversion(n,try_number) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "for _,n in ipairs(cnfg.numfields) do append_conversion(n,try_number) end",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "append_conversion(n,try_number)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "local stripper",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "if delim == '%s+' and line:find(delim) == 1 then\r\n        stripper = function(s)  return s:gsub('^%s+','') end\r\n        line = stripper(line)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "stripper = function(s)  return s:gsub('^%s+','') end",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "line = stripper(line)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "if not cnfg.fieldnames then\r\n        local fields,nums\r\n        fields = split(line,delim,csv)\r\n        if not cnfg.convert then\r\n            nums = map(tonumber,fields)\r\n            if #nums == #fields then -- they're ALL numbers!\r\n                append(D,nums) -- add the first converted row\r\n                -- and specify conversions for subsequent rows\r\n                for i = 1,#nums do append_conversion(i,try_number) end\r\n            else -- we'll try to check numbers just now..\r\n                nums = nil\r\n            end\r\n        else -- [explicit column conversions] (any deduced number conversions will be added)\r\n            for idx,conv in pairs(cnfg.convert) do append_conversion(idx,conv) end\r\n        end\r\n        if nums == nil then\r\n            cnfg.fieldnames = fields\r\n        end\r\n        line = f:read()\r\n        count = count + 1\r\n        if stripper then line = stripper(line) end\r\n    elseif type(cnfg.fieldnames) == 'string' then\r\n        cnfg.fieldnames = split(cnfg.fieldnames,delim,csv)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "local fields,nums",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "fields = split(line,delim,csv)",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if not cnfg.convert then\r\n            nums = map(tonumber,fields)\r\n            if #nums == #fields then -- they're ALL numbers!\r\n                append(D,nums) -- add the first converted row\r\n                -- and specify conversions for subsequent rows\r\n                for i = 1,#nums do append_conversion(i,try_number) end\r\n            else -- we'll try to check numbers just now..\r\n                nums = nil\r\n            end\r\n        else -- [explicit column conversions] (any deduced number conversions will be added)\r\n            for idx,conv in pairs(cnfg.convert) do append_conversion(idx,conv) end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "nums = map(tonumber,fields)",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if #nums == #fields then -- they're ALL numbers!\r\n                append(D,nums) -- add the first converted row\r\n                -- and specify conversions for subsequent rows\r\n                for i = 1,#nums do append_conversion(i,try_number) end\r\n            else -- we'll try to check numbers just now..\r\n                nums = nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "append(D,nums)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "for i = 1,#nums do append_conversion(i,try_number) end",
    "type": "statement:numericfor"
  }, {
    "id": 110,
    "text": "append_conversion(i,try_number)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "nums = nil",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "for idx,conv in pairs(cnfg.convert) do append_conversion(idx,conv) end",
    "type": "statement:genericfor"
  }, {
    "id": 113,
    "text": "append_conversion(idx,conv)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "if nums == nil then\r\n            cnfg.fieldnames = fields\r\n        end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "cnfg.fieldnames = fields",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "if stripper then line = stripper(line) end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "cnfg.fieldnames = split(cnfg.fieldnames,delim,csv)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "local nfields",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if cnfg.fieldnames then\r\n        D.fieldnames = cnfg.fieldnames\r\n        -- [collecting end field] If @last_field_collect then we'll\r\n        -- only split as many fields as there are fieldnames\r\n        if cnfg.last_field_collect then\r\n            nfields = #D.fieldnames\r\n        end\r\n        -- [implicit column conversion] unless @no_convert, we need the numerical field indices\r\n        -- of the first data row. These can also be specified explicitly by @numfields.\r\n        if not cnfg.no_convert then\r\n            local fields = split(line,D.delim,csv,nfields)\r\n            for i = 1,#fields do\r\n                if not find(numfields,i) and try_number(fields[i]) then\r\n                    append_conversion(i,try_number)\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "D.fieldnames = cnfg.fieldnames",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "if cnfg.last_field_collect then\r\n            nfields = #D.fieldnames\r\n        end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "nfields = #D.fieldnames",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "if not cnfg.no_convert then\r\n            local fields = split(line,D.delim,csv,nfields)\r\n            for i = 1,#fields do\r\n                if not find(numfields,i) and try_number(fields[i]) then\r\n                    append_conversion(i,try_number)\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "local fields = split(line,D.delim,csv,nfields)",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "for i = 1,#fields do\r\n                if not find(numfields,i) and try_number(fields[i]) then\r\n                    append_conversion(i,try_number)\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 127,
    "text": "if not find(numfields,i) and try_number(fields[i]) then\r\n                    append_conversion(i,try_number)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "while line do\r\n        if not line:find ('^%s*$') then -- [blank lines] ignore them!\r\n            if stripper then line = stripper(line) end\r\n            local fields = split(line,delim,csv,nfields)\r\n            if conversion then -- there were field conversions...\r\n                for k = 1,#numfields do\r\n                    local i,conv = numfields[k],conversion[k]\r\n                    local val,err = conv(fields[i])\r\n                    if val == nil then\r\n                        return nil, err..\": \"..fields[i]..\" at line \"..count\r\n                    else\r\n                        fields[i] = val\r\n                    end\r\n                end\r\n            end\r\n            append(D,fields)\r\n        end\r\n        line = f:read()\r\n        count = count + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 129,
    "text": "if not line:find ('^%s*$') then -- [blank lines] ignore them!\r\n            if stripper then line = stripper(line) end\r\n            local fields = split(line,delim,csv,nfields)\r\n            if conversion then -- there were field conversions...\r\n                for k = 1,#numfields do\r\n                    local i,conv = numfields[k],conversion[k]\r\n                    local val,err = conv(fields[i])\r\n                    if val == nil then\r\n                        return nil, err..\": \"..fields[i]..\" at line \"..count\r\n                    else\r\n                        fields[i] = val\r\n                    end\r\n                end\r\n            end\r\n            append(D,fields)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "local fields = split(line,delim,csv,nfields)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if conversion then -- there were field conversions...\r\n                for k = 1,#numfields do\r\n                    local i,conv = numfields[k],conversion[k]\r\n                    local val,err = conv(fields[i])\r\n                    if val == nil then\r\n                        return nil, err..\": \"..fields[i]..\" at line \"..count\r\n                    else\r\n                        fields[i] = val\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "for k = 1,#numfields do\r\n                    local i,conv = numfields[k],conversion[k]\r\n                    local val,err = conv(fields[i])\r\n                    if val == nil then\r\n                        return nil, err..\": \"..fields[i]..\" at line \"..count\r\n                    else\r\n                        fields[i] = val\r\n                    end\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 133,
    "text": "local i,conv = numfields[k],conversion[k]",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local val,err = conv(fields[i])",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "if val == nil then\r\n                        return nil, err..\": \"..fields[i]..\" at line \"..count\r\n                    else\r\n                        fields[i] = val\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "fields[i] = val",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "append(D,fields)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "if opened then f:close() end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "if delim == '%s+' then D.delim = ' ' end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "D.delim = ' '",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "if not D.fieldnames then D.fieldnames = {} end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "D.fieldnames = {}",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "local function try_number(x)\r\n        if thousands_dot then x = x:gsub('%.(...)','%1') end\r\n        if csv and x == '' then x = '0' end\r\n        local v = tonumber(x)\r\n        if v == nil then return nil,\"not a number\" end\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "local function append_conversion (idx,conv)\r\n        conversion = conversion or {}\r\n        append(numfields,idx)\r\n        append(conversion,conv)\r\n    end",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function(s)  return s:gsub('^%s+','') end",
    "type": "function"
  }, {
    "id": 150,
    "text": "local function write_row (data,f,row,delim)\r\n    data.temp = array_tostring(row,data.temp)\r\n    f:write(concat(data.temp,delim),'\\n')\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "data.temp = array_tostring(row,data.temp)",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "f:write(concat(data.temp,delim),'\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function DataMT:write_row(f,row)\r\n    write_row(self,f,row,self.delim)\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "write_row(self,f,row,self.delim)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function data.write (data,file,fieldnames,delim)\r\n    local f,err,opened = open_file(file,'w')\r\n    if not f then return nil, err end\r\n    if not fieldnames then\r\n        fieldnames = data.fieldnames\r\n    end\r\n    delim = delim or '\\t'\r\n    if fieldnames and #fieldnames > 0 then\r\n        f:write(concat(fieldnames,delim),'\\n')\r\n    end\r\n    for i = 1,#data do\r\n        write_row(data,f,data[i],delim)\r\n    end\r\n    if opened then f:close() end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "local f,err,opened = open_file(file,'w')",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "if not fieldnames then\r\n        fieldnames = data.fieldnames\r\n    end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "fieldnames = data.fieldnames",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "delim = delim or '\\t'",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "if fieldnames and #fieldnames > 0 then\r\n        f:write(concat(fieldnames,delim),'\\n')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "f:write(concat(fieldnames,delim),'\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "for i = 1,#data do\r\n        write_row(data,f,data[i],delim)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 165,
    "text": "write_row(data,f,data[i],delim)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function DataMT:write(file)\r\n    data.write(self,file,self.fieldnames,self.delim)\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "data.write(self,file,self.fieldnames,self.delim)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "local function massage_fieldnames (fields,copy)\r\n    -- fieldnames must be valid Lua identifiers; ignore any surrounding padding\r\n    -- but keep the original fieldnames...\r\n    for i = 1,#fields do\r\n        local f = strip(fields[i])\r\n        copy[i] = f\r\n        fields[i] = f:gsub('%W','_')\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "for i = 1,#fields do\r\n        local f = strip(fields[i])\r\n        copy[i] = f\r\n        fields[i] = f:gsub('%W','_')\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 172,
    "text": "local f = strip(fields[i])",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "copy[i] = f",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "fields[i] = f:gsub('%W','_')",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function data.new (d,fieldnames)\r\n    d.fieldnames = d.fieldnames or fieldnames or ''\r\n    if not d.delim and type(d.fieldnames) == 'string' then\r\n        d.delim = guess_delim(d.fieldnames)\r\n        d.fieldnames = split(d.fieldnames,d.delim)\r\n    end\r\n    d.fieldnames = makelist(d.fieldnames)\r\n    d.original_fieldnames = {}\r\n    massage_fieldnames(d.fieldnames,d.original_fieldnames)\r\n    setmetatable(d,DataMT)\r\n    -- a query with just the fieldname will return a sequence\r\n    -- of values, which seq.copy turns into a table.\r\n    return d\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "d.fieldnames = d.fieldnames or fieldnames or ''",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "if not d.delim and type(d.fieldnames) == 'string' then\r\n        d.delim = guess_delim(d.fieldnames)\r\n        d.fieldnames = split(d.fieldnames,d.delim)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "d.delim = guess_delim(d.fieldnames)",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "d.fieldnames = split(d.fieldnames,d.delim)",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "d.fieldnames = makelist(d.fieldnames)",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "d.original_fieldnames = {}",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "massage_fieldnames(d.fieldnames,d.original_fieldnames)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "setmetatable(d,DataMT)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "local function is_string (s)\r\n    return type(s) == 'string'\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "local function fieldnames_as_string (data)\r\n    return concat(data.fieldnames,',')\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "local function massage_fields(data,f)\r\n    local idx\r\n    if f:find '^%d+$' then\r\n        idx = tonumber(f)\r\n    else\r\n        idx = find(data.fieldnames,f)\r\n    end\r\n    if idx then\r\n        return 'v['..idx..']'\r\n    else\r\n        field_error = f..' not found in '..fieldnames_as_string(data)\r\n        return f\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "local idx",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if f:find '^%d+$' then\r\n        idx = tonumber(f)\r\n    else\r\n        idx = find(data.fieldnames,f)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "idx = tonumber(f)",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "idx = find(data.fieldnames,f)",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "if idx then\r\n        return 'v['..idx..']'\r\n    else\r\n        field_error = f..' not found in '..fieldnames_as_string(data)\r\n        return f\r\n    end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "field_error = f..' not found in '..fieldnames_as_string(data)",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "local function process_select (data,parms)\r\n    --- preparing fields ----\r\n    local res,ret\r\n    field_error = nil\r\n    local fields = parms.fields\r\n    local numfields = fields:find '%$'  or #data.fieldnames == 0\r\n    if fields:find '^%s*%*%s*' then\r\n        if not numfields then\r\n            fields = fieldnames_as_string(data)\r\n        else\r\n            local ncol = #data[1]\r\n            fields = {}\r\n            for i = 1,ncol do append(fields,'$'..i) end\r\n            fields = concat(fields,',')\r\n        end\r\n    end\r\n    local idpat = patterns.IDEN\r\n    if numfields then\r\n        idpat = '%$(%d+)'\r\n    else\r\n        -- massage field names to replace non-identifier chars\r\n        fields = rstrip(fields):gsub('[^,%w]','_')\r\n    end\r\n    local massage_fields = utils.bind1(massage_fields,data)\r\n    ret = gsub(fields,idpat,massage_fields)\r\n    if field_error then return nil,field_error end\r\n    parms.fields = fields\r\n    parms.proc_fields = ret\r\n    parms.where = parms.where or  'true'\r\n    if is_string(parms.where) then\r\n        parms.where = gsub(parms.where,idpat,massage_fields)\r\n        field_error = nil\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "local res,ret",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "field_error = nil",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "local fields = parms.fields",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "local numfields = fields:find '%$'  or #data.fieldnames == 0",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "if fields:find '^%s*%*%s*' then\r\n        if not numfields then\r\n            fields = fieldnames_as_string(data)\r\n        else\r\n            local ncol = #data[1]\r\n            fields = {}\r\n            for i = 1,ncol do append(fields,'$'..i) end\r\n            fields = concat(fields,',')\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "if not numfields then\r\n            fields = fieldnames_as_string(data)\r\n        else\r\n            local ncol = #data[1]\r\n            fields = {}\r\n            for i = 1,ncol do append(fields,'$'..i) end\r\n            fields = concat(fields,',')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "fields = fieldnames_as_string(data)",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "local ncol = #data[1]",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "fields = {}",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "for i = 1,ncol do append(fields,'$'..i) end",
    "type": "statement:numericfor"
  }, {
    "id": 209,
    "text": "append(fields,'$'..i)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "fields = concat(fields,',')",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "local idpat = patterns.IDEN",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "if numfields then\r\n        idpat = '%$(%d+)'\r\n    else\r\n        -- massage field names to replace non-identifier chars\r\n        fields = rstrip(fields):gsub('[^,%w]','_')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "idpat = '%$(%d+)'",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "fields = rstrip(fields):gsub('[^,%w]','_')",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "local massage_fields = utils.bind1(massage_fields,data)",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "ret = gsub(fields,idpat,massage_fields)",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "if field_error then return nil,field_error end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "parms.fields = fields",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "parms.proc_fields = ret",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "parms.where = parms.where or  'true'",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "if is_string(parms.where) then\r\n        parms.where = gsub(parms.where,idpat,massage_fields)\r\n        field_error = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "parms.where = gsub(parms.where,idpat,massage_fields)",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "function(s,data)\r\n    local endp\r\n    local parms = {}\r\n    local w1,w2 = s:find('where ')\r\n    local s1,s2 = s:find('sort by ')\r\n    if w1 then -- where clause!\r\n        endp = (s1 or 0)-1\r\n        parms.where = s:sub(w2+1,endp)\r\n    end\r\n    if s1 then -- sort by clause (must be last!)\r\n        parms.sort_by = s:sub(s2+1)\r\n    end\r\n    endp = (w1 or s1 or 0)-1\r\n    parms.fields = s:sub(1,endp)\r\n    local status,err = process_select(data,parms)\r\n    if not status then return nil,err\r\n    else return parms end\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "local endp",
    "type": "statement:localassign"
  }, {
    "id": 226,
    "text": "local parms = {}",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "local w1,w2 = s:find('where ')",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "local s1,s2 = s:find('sort by ')",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "if w1 then -- where clause!\r\n        endp = (s1 or 0)-1\r\n        parms.where = s:sub(w2+1,endp)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "endp = (s1 or 0)-1",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "parms.where = s:sub(w2+1,endp)",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "if s1 then -- sort by clause (must be last!)\r\n        parms.sort_by = s:sub(s2+1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "parms.sort_by = s:sub(s2+1)",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "endp = (w1 or s1 or 0)-1",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "parms.fields = s:sub(1,endp)",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "local status,err = process_select(data,parms)",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "if not status then return nil,err\r\n    else return parms end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function data.query(data,condn,context,return_row)\r\n    local err\r\n    if is_string(condn) then\r\n        condn,err = parse_select(condn,data)\r\n        if not condn then return nil,err end\r\n    elseif type(condn) == 'table' then\r\n        if type(condn.fields) == 'table' then\r\n            condn.fields = concat(condn.fields,',')\r\n        end\r\n        if not condn.proc_fields then\r\n            local status,err = process_select(data,condn)\r\n            if not status then return nil,err end\r\n        end\r\n    else\r\n        return nil, \"condition must be a string or a table\"\r\n    end\r\n    local query, k\r\n    if condn.sort_by then -- use sorted_query\r\n        query = sorted_query\r\n    else\r\n        query = simple_query\r\n    end\r\n    local fields = condn.proc_fields or condn.fields\r\n    if return_row then\r\n        fields = '{'..fields..'}'\r\n    end\r\n    query,k = query:gsub('FIELDLIST',fields)\r\n    if is_string(condn.where) then\r\n        query = query:gsub('CONDITION',condn.where)\r\n        condn.where = nil\r\n    else\r\n       query = query:gsub('CONDITION','_condn(v)')\r\n       condn.where = function_arg(0,condn.where,'condition.where must be callable')\r\n    end\r\n    if condn.sort_by then\r\n        local expr,sort_var,sort_dir\r\n        local sort_by = condn.sort_by\r\n        local i1,i2 = sort_by:find('%s+')\r\n        if i1 then\r\n            sort_var,sort_dir = sort_by:sub(1,i1-1),sort_by:sub(i2+1)\r\n        else\r\n            sort_var = sort_by\r\n            sort_dir = 'asc'\r\n        end\r\n        if sort_var:match '^%$' then sort_var = sort_var:sub(2) end\r\n        sort_var = massage_fields(data,sort_var)\r\n        if field_error then return nil,field_error end\r\n        if sort_dir == 'asc' then\r\n            sort_dir = '<'\r\n        else\r\n            sort_dir = '>'\r\n        end\r\n        expr = ('%s %s %s'):format(sort_var:gsub('v','v1'),sort_dir,sort_var:gsub('v','v2'))\r\n        query = query:gsub('SORT_EXPR',expr)\r\n    end\r\n    if condn.where then\r\n        query = 'return function(_condn) '..query..' end'\r\n    end\r\n    if _DEBUG then print(query) end\r\n\r\n    local fn,err = utils.load(query,'tmp')\r\n    if not fn then return nil,err end\r\n    fn = fn() -- get the function\r\n    if condn.where then\r\n        fn = fn(condn.where)\r\n    end\r\n    local qfun = fn(data)\r\n    if context then\r\n        -- [specifying context for condition] @context is a list of tables which are\r\n        -- 'injected'into the condition's custom context\r\n        append(context,_G)\r\n        local lookup = {}\r\n        utils.setfenv(qfun,lookup)\r\n        setmetatable(lookup,{\r\n            __index = function(tbl,key)\r\n               -- _G.print(tbl,key)\r\n                for k,t in ipairs(context) do\r\n                    if t[key] then return t[key] end\r\n                end\r\n            end\r\n        })\r\n    end\r\n    return qfun\r\nend",
    "type": "function"
  }, {
    "id": 240,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "if is_string(condn) then\r\n        condn,err = parse_select(condn,data)\r\n        if not condn then return nil,err end\r\n    elseif type(condn) == 'table' then\r\n        if type(condn.fields) == 'table' then\r\n            condn.fields = concat(condn.fields,',')\r\n        end\r\n        if not condn.proc_fields then\r\n            local status,err = process_select(data,condn)\r\n            if not status then return nil,err end\r\n        end\r\n    else\r\n        return nil, \"condition must be a string or a table\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "condn,err = parse_select(condn,data)",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "if not condn then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "if type(condn.fields) == 'table' then\r\n            condn.fields = concat(condn.fields,',')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "condn.fields = concat(condn.fields,',')",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "if not condn.proc_fields then\r\n            local status,err = process_select(data,condn)\r\n            if not status then return nil,err end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "local status,err = process_select(data,condn)",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "if not status then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "local query, k",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "if condn.sort_by then -- use sorted_query\r\n        query = sorted_query\r\n    else\r\n        query = simple_query\r\n    end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "query = sorted_query",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "query = simple_query",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "local fields = condn.proc_fields or condn.fields",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "if return_row then\r\n        fields = '{'..fields..'}'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "fields = '{'..fields..'}'",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "query,k = query:gsub('FIELDLIST',fields)",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "if is_string(condn.where) then\r\n        query = query:gsub('CONDITION',condn.where)\r\n        condn.where = nil\r\n    else\r\n       query = query:gsub('CONDITION','_condn(v)')\r\n       condn.where = function_arg(0,condn.where,'condition.where must be callable')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "query = query:gsub('CONDITION',condn.where)",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "condn.where = nil",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "query = query:gsub('CONDITION','_condn(v)')",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "condn.where = function_arg(0,condn.where,'condition.where must be callable')",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "if condn.sort_by then\r\n        local expr,sort_var,sort_dir\r\n        local sort_by = condn.sort_by\r\n        local i1,i2 = sort_by:find('%s+')\r\n        if i1 then\r\n            sort_var,sort_dir = sort_by:sub(1,i1-1),sort_by:sub(i2+1)\r\n        else\r\n            sort_var = sort_by\r\n            sort_dir = 'asc'\r\n        end\r\n        if sort_var:match '^%$' then sort_var = sort_var:sub(2) end\r\n        sort_var = massage_fields(data,sort_var)\r\n        if field_error then return nil,field_error end\r\n        if sort_dir == 'asc' then\r\n            sort_dir = '<'\r\n        else\r\n            sort_dir = '>'\r\n        end\r\n        expr = ('%s %s %s'):format(sort_var:gsub('v','v1'),sort_dir,sort_var:gsub('v','v2'))\r\n        query = query:gsub('SORT_EXPR',expr)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "local expr,sort_var,sort_dir",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "local sort_by = condn.sort_by",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "local i1,i2 = sort_by:find('%s+')",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "if i1 then\r\n            sort_var,sort_dir = sort_by:sub(1,i1-1),sort_by:sub(i2+1)\r\n        else\r\n            sort_var = sort_by\r\n            sort_dir = 'asc'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "sort_var,sort_dir = sort_by:sub(1,i1-1),sort_by:sub(i2+1)",
    "type": "statement:assign"
  }, {
    "id": 268,
    "text": "sort_var = sort_by",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "sort_dir = 'asc'",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "if sort_var:match '^%$' then sort_var = sort_var:sub(2) end",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "sort_var = sort_var:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "sort_var = massage_fields(data,sort_var)",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "if sort_dir == 'asc' then\r\n            sort_dir = '<'\r\n        else\r\n            sort_dir = '>'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 274,
    "text": "sort_dir = '<'",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "sort_dir = '>'",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "expr = ('%s %s %s'):format(sort_var:gsub('v','v1'),sort_dir,sort_var:gsub('v','v2'))",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "query = query:gsub('SORT_EXPR',expr)",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "if condn.where then\r\n        query = 'return function(_condn) '..query..' end'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "query = 'return function(_condn) '..query..' end'",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "if _DEBUG then print(query) end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "print(query)",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "local fn,err = utils.load(query,'tmp')",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "if not fn then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "fn = fn()",
    "type": "statement:assign"
  }, {
    "id": 285,
    "text": "if condn.where then\r\n        fn = fn(condn.where)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "fn = fn(condn.where)",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "local qfun = fn(data)",
    "type": "statement:localassign"
  }, {
    "id": 288,
    "text": "if context then\r\n        -- [specifying context for condition] @context is a list of tables which are\r\n        -- 'injected'into the condition's custom context\r\n        append(context,_G)\r\n        local lookup = {}\r\n        utils.setfenv(qfun,lookup)\r\n        setmetatable(lookup,{\r\n            __index = function(tbl,key)\r\n               -- _G.print(tbl,key)\r\n                for k,t in ipairs(context) do\r\n                    if t[key] then return t[key] end\r\n                end\r\n            end\r\n        })\r\n    end",
    "type": "statement:if"
  }, {
    "id": 289,
    "text": "append(context,_G)",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "local lookup = {}",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "utils.setfenv(qfun,lookup)",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "setmetatable(lookup,{\r\n            __index = function(tbl,key)\r\n               -- _G.print(tbl,key)\r\n                for k,t in ipairs(context) do\r\n                    if t[key] then return t[key] end\r\n                end\r\n            end\r\n        })",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "for k,t in ipairs(context) do\r\n                    if t[key] then return t[key] end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 294,
    "text": "if t[key] then return t[key] end",
    "type": "statement:if"
  }, {
    "id": 295,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 296,
    "text": "function(d,condn,context)\r\n    return data.query(d,condn,context,true)\r\nend",
    "type": "function"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function data.filter (Q,infile,outfile,dont_fail)\r\n    local err\r\n    local d = data.read(infile or 'stdin')\r\n    local out = open_file(outfile or 'stdout')\r\n    local iter,err = d:select(Q)\r\n    local delim = d.delim\r\n    if not iter then\r\n        err = 'error: '..err\r\n        if dont_fail then\r\n            return nil,err\r\n        else\r\n            utils.quit(1,err)\r\n        end\r\n    end\r\n    while true do\r\n        local res = {iter()}\r\n        if #res == 0 then break end\r\n        out:write(concat(res,delim),'\\n')\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 299,
    "text": "local d = data.read(infile or 'stdin')",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "local out = open_file(outfile or 'stdout')",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "local iter,err = d:select(Q)",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "local delim = d.delim",
    "type": "statement:localassign"
  }, {
    "id": 303,
    "text": "if not iter then\r\n        err = 'error: '..err\r\n        if dont_fail then\r\n            return nil,err\r\n        else\r\n            utils.quit(1,err)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 304,
    "text": "err = 'error: '..err",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "if dont_fail then\r\n            return nil,err\r\n        else\r\n            utils.quit(1,err)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "utils.quit(1,err)",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "while true do\r\n        local res = {iter()}\r\n        if #res == 0 then break end\r\n        out:write(concat(res,delim),'\\n')\r\n    end",
    "type": "statement:while"
  }, {
    "id": 308,
    "text": "local res = {iter()}",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "if #res == 0 then break end",
    "type": "statement:if"
  }, {
    "id": 310,
    "text": "out:write(concat(res,delim),'\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "function(str)\r\n            local s,cnt = str:gsub(',','\\001')\r\n            if cnt > 0 then massage = true end\r\n            return s\r\n        end",
    "type": "function"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function(self,name)\r\n        if type(name) == 'number' then\r\n            name = '$'..name\r\n        end\r\n        local arr = {}\r\n        for res in data.query(self,name) do\r\n            append(arr,res)\r\n        end\r\n        return makelist(arr)\r\n    end",
    "type": "function"
  }, {
    "id": 315,
    "text": "if type(name) == 'number' then\r\n            name = '$'..name\r\n        end",
    "type": "statement:if"
  }, {
    "id": 316,
    "text": "name = '$'..name",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "local arr = {}",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "for res in data.query(self,name) do\r\n            append(arr,res)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 319,
    "text": "append(arr,res)",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function(self,condn)\r\n        condn = parse_select(condn,self)\r\n        local iter = data.query(self,condn)\r\n        local res = {}\r\n        local row = makelist{iter()}\r\n        while #row > 0 do\r\n            append(res,row)\r\n            row = makelist{iter()}\r\n        end\r\n        res.delim = self.delim\r\n        return data.new(res,split(condn.fields,','))\r\n    end",
    "type": "function"
  }, {
    "id": 322,
    "text": "condn = parse_select(condn,self)",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "local iter = data.query(self,condn)",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "local row = makelist{iter()}",
    "type": "statement:localassign"
  }, {
    "id": 325,
    "text": "while #row > 0 do\r\n            append(res,row)\r\n            row = makelist{iter()}\r\n        end",
    "type": "statement:while"
  }, {
    "id": 326,
    "text": "append(res,row)",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "row = makelist{iter()}",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "res.delim = self.delim",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 330,
    "text": "function(self)\r\n        return self.fieldnames\r\n    end",
    "type": "function"
  }, {
    "id": 331,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 332,
    "text": "function(tbl,key)\r\n               -- _G.print(tbl,key)\r\n                for k,t in ipairs(context) do\r\n                    if t[key] then return t[key] end\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 333,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 334,
    "text": "",
    "type": "function container"
  }, {
    "id": 335,
    "text": "bind1",
    "type": "global function"
  }, {
    "id": 336,
    "text": "quit",
    "type": "global function"
  }, {
    "id": 337,
    "text": "load",
    "type": "global function"
  }, {
    "id": 338,
    "text": "escape",
    "type": "global function"
  }, {
    "id": 339,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 340,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 341,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 342,
    "text": "append",
    "type": "global function"
  }, {
    "id": 343,
    "text": "print",
    "type": "global function"
  }, {
    "id": 344,
    "text": "array_tostring",
    "type": "global function"
  }, {
    "id": 345,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 346,
    "text": "iter",
    "type": "global function"
  }, {
    "id": 347,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 348,
    "text": "require",
    "type": "global function"
  }, {
    "id": 349,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 350,
    "text": "type",
    "type": "global function"
  }, {
    "id": 351,
    "text": "conv",
    "type": "global function"
  }, {
    "id": 352,
    "text": "open",
    "type": "global function"
  }, {
    "id": 353,
    "text": "function_arg",
    "type": "global function"
  }, {
    "id": 354,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 355,
    "text": "usplit",
    "type": "global function"
  }, {
    "id": 356,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 357,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 358,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 359,
    "text": "",
    "type": "variable container"
  }, {
    "id": 360,
    "text": "",
    "type": "require container"
  }, {
    "id": 361,
    "text": "",
    "type": "local variable"
  }, {
    "id": 362,
    "text": "",
    "type": "n/a"
  }, {
    "id": 363,
    "text": "",
    "type": "local variable"
  }, {
    "id": 364,
    "text": "",
    "type": "n/a"
  }, {
    "id": 365,
    "text": "",
    "type": "local variable"
  }, {
    "id": 366,
    "text": "",
    "type": "n/a"
  }, {
    "id": 367,
    "text": "",
    "type": "local variable"
  }, {
    "id": 368,
    "text": "",
    "type": "n/a"
  }, {
    "id": 369,
    "text": "",
    "type": "local variable"
  }, {
    "id": 370,
    "text": "",
    "type": "n/a"
  }, {
    "id": 371,
    "text": "",
    "type": "local variable"
  }, {
    "id": 372,
    "text": "",
    "type": "n/a"
  }, {
    "id": 373,
    "text": "",
    "type": "local variable"
  }, {
    "id": 374,
    "text": "",
    "type": "n/a"
  }, {
    "id": 375,
    "text": "",
    "type": "local variable"
  }, {
    "id": 376,
    "text": "",
    "type": "n/a"
  }, {
    "id": 377,
    "text": "",
    "type": "local variable"
  }, {
    "id": 378,
    "text": "",
    "type": "n/a"
  }, {
    "id": 379,
    "text": "",
    "type": "local variable"
  }, {
    "id": 380,
    "text": "",
    "type": "n/a"
  }, {
    "id": 381,
    "text": "",
    "type": "local variable"
  }, {
    "id": 382,
    "text": "",
    "type": "n/a"
  }, {
    "id": 383,
    "text": "",
    "type": "local variable"
  }, {
    "id": 384,
    "text": "",
    "type": "n/a"
  }, {
    "id": 385,
    "text": "",
    "type": "local variable"
  }, {
    "id": 386,
    "text": "",
    "type": "n/a"
  }, {
    "id": 387,
    "text": "",
    "type": "local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "n/a"
  }, {
    "id": 389,
    "text": "",
    "type": "local variable"
  }, {
    "id": 390,
    "text": "",
    "type": "n/a"
  }, {
    "id": 391,
    "text": "",
    "type": "local variable"
  }, {
    "id": 392,
    "text": "",
    "type": "n/a"
  }, {
    "id": 393,
    "text": "",
    "type": "local variable"
  }, {
    "id": 394,
    "text": "",
    "type": "n/a"
  }, {
    "id": 395,
    "text": "",
    "type": "local variable"
  }, {
    "id": 396,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 397,
    "text": "",
    "type": "local variable"
  }, {
    "id": 398,
    "text": "",
    "type": "local variable"
  }, {
    "id": 399,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 400,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 401,
    "text": "",
    "type": "function"
  }, {
    "id": 402,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 403,
    "text": "",
    "type": "function"
  }, {
    "id": 404,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 405,
    "text": "",
    "type": "function"
  }, {
    "id": 406,
    "text": "",
    "type": "local variable"
  }, {
    "id": 407,
    "text": "",
    "type": "local variable"
  }, {
    "id": 408,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 409,
    "text": "",
    "type": "string"
  }, {
    "id": 410,
    "text": "",
    "type": "string"
  }, {
    "id": 411,
    "text": "",
    "type": "string"
  }, {
    "id": 412,
    "text": "",
    "type": "string"
  }, {
    "id": 413,
    "text": "",
    "type": "local variable"
  }, {
    "id": 414,
    "text": "",
    "type": "string"
  }, {
    "id": 415,
    "text": "",
    "type": "local variable"
  }, {
    "id": 416,
    "text": "",
    "type": "string"
  }, {
    "id": 417,
    "text": "",
    "type": "local variable"
  }, {
    "id": 418,
    "text": "",
    "type": "global variable"
  }, {
    "id": 419,
    "text": "",
    "type": "n/a"
  }, {
    "id": 420,
    "text": "",
    "type": "global variable"
  }, {
    "id": 421,
    "text": "",
    "type": "n/a"
  }, {
    "id": 422,
    "text": "",
    "type": "global variable"
  }, {
    "id": 423,
    "text": "",
    "type": "n/a"
  }, {
    "id": 424,
    "text": "",
    "type": "global variable"
  }, {
    "id": 425,
    "text": "",
    "type": "n/a"
  }, {
    "id": 426,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 427,
    "text": "",
    "type": "interface container"
  }, {
    "id": 428,
    "text": "",
    "type": "interface"
  }, {
    "id": 429,
    "text": "",
    "type": "require local variable"
  } ]
}