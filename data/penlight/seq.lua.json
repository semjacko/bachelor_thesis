{
  "_filename": "seq.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/seq.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 5
  }, {
    "from": 25,
    "label": "has",
    "to": 5
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 30
  }, {
    "from": 33,
    "label": "has",
    "to": 5
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 34
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 30
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 5
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 55
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 58
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 5
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 5
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 5
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 73,
    "label": "has",
    "to": 5
  }, {
    "from": 73,
    "label": "has",
    "to": 5
  }, {
    "from": 73,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 5
  }, {
    "from": 84,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 5
  }, {
    "from": 89,
    "label": "has",
    "to": 5
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 93,
    "label": "has",
    "to": 5
  }, {
    "from": 93,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 55
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 58
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 102,
    "label": "has",
    "to": 107
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 102,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 5
  }, {
    "from": 109,
    "label": "has",
    "to": 120
  }, {
    "from": 109,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 58
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 109,
    "label": "has",
    "to": 128
  }, {
    "from": 109,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 5
  }, {
    "from": 131,
    "label": "has",
    "to": 90
  }, {
    "from": 131,
    "label": "has",
    "to": 91
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 5
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 131,
    "label": "has",
    "to": 5
  }, {
    "from": 131,
    "label": "has",
    "to": 5
  }, {
    "from": 131,
    "label": "has",
    "to": 5
  }, {
    "from": 131,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 66
  }, {
    "from": 138,
    "label": "has",
    "to": 5
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 5
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 5
  }, {
    "from": 138,
    "label": "has",
    "to": 5
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 5
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 141
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 144,
    "label": "has",
    "to": 5
  }, {
    "from": 144,
    "label": "has",
    "to": 5
  }, {
    "from": 144,
    "label": "has",
    "to": 5
  }, {
    "from": 144,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 66
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 153,
    "label": "has",
    "to": 157
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 153,
    "label": "has",
    "to": 5
  }, {
    "from": 153,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 66
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 30
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 5
  }, {
    "from": 167,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 34
  }, {
    "from": 172,
    "label": "has",
    "to": 66
  }, {
    "from": 172,
    "label": "has",
    "to": 5
  }, {
    "from": 172,
    "label": "has",
    "to": 164
  }, {
    "from": 172,
    "label": "has",
    "to": 165
  }, {
    "from": 172,
    "label": "has",
    "to": 5
  }, {
    "from": 172,
    "label": "has",
    "to": 30
  }, {
    "from": 172,
    "label": "has",
    "to": 5
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 66
  }, {
    "from": 174,
    "label": "has",
    "to": 5
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 5
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 174,
    "label": "has",
    "to": 5
  }, {
    "from": 174,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 66
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 5
  }, {
    "from": 181,
    "label": "has",
    "to": 5
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 181,
    "label": "has",
    "to": 186
  }, {
    "from": 181,
    "label": "has",
    "to": 5
  }, {
    "from": 181,
    "label": "has",
    "to": 187
  }, {
    "from": 181,
    "label": "has",
    "to": 188
  }, {
    "from": 181,
    "label": "has",
    "to": 5
  }, {
    "from": 181,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 190,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 5
  }, {
    "from": 195,
    "label": "has",
    "to": 5
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 198,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 198,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 198,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 5
  }, {
    "from": 198,
    "label": "has",
    "to": 5
  }, {
    "from": 198,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 5
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 5
  }, {
    "from": 213,
    "label": "has",
    "to": 5
  }, {
    "from": 213,
    "label": "has",
    "to": 5
  }, {
    "from": 212,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 5
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 5
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 5
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 5
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 5
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 19
  }, {
    "from": 227,
    "label": "has",
    "to": 5
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 23
  }, {
    "from": 229,
    "label": "has",
    "to": 5
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 30
  }, {
    "from": 231,
    "label": "has",
    "to": 31
  }, {
    "from": 231,
    "label": "has",
    "to": 5
  }, {
    "from": 231,
    "label": "has",
    "to": 5
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 30
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 235,
    "label": "has",
    "to": 5
  }, {
    "from": 235,
    "label": "has",
    "to": 5
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 5
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 133
  }, {
    "from": 239,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 239,
    "label": "has",
    "to": 5
  }, {
    "from": 239,
    "label": "has",
    "to": 5
  }, {
    "from": 239,
    "label": "has",
    "to": 5
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 140
  }, {
    "from": 241,
    "label": "has",
    "to": 141
  }, {
    "from": 241,
    "label": "has",
    "to": 5
  }, {
    "from": 241,
    "label": "has",
    "to": 142
  }, {
    "from": 241,
    "label": "has",
    "to": 5
  }, {
    "from": 241,
    "label": "has",
    "to": 5
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 146
  }, {
    "from": 243,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 141
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 243,
    "label": "has",
    "to": 5
  }, {
    "from": 243,
    "label": "has",
    "to": 5
  }, {
    "from": 243,
    "label": "has",
    "to": 5
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 163
  }, {
    "from": 245,
    "label": "has",
    "to": 5
  }, {
    "from": 245,
    "label": "has",
    "to": 164
  }, {
    "from": 245,
    "label": "has",
    "to": 165
  }, {
    "from": 245,
    "label": "has",
    "to": 5
  }, {
    "from": 245,
    "label": "has",
    "to": 30
  }, {
    "from": 245,
    "label": "has",
    "to": 5
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 247,
    "label": "has",
    "to": 164
  }, {
    "from": 247,
    "label": "has",
    "to": 165
  }, {
    "from": 247,
    "label": "has",
    "to": 5
  }, {
    "from": 247,
    "label": "has",
    "to": 30
  }, {
    "from": 247,
    "label": "has",
    "to": 5
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 175
  }, {
    "from": 249,
    "label": "has",
    "to": 176
  }, {
    "from": 249,
    "label": "has",
    "to": 5
  }, {
    "from": 249,
    "label": "has",
    "to": 177
  }, {
    "from": 249,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 249,
    "label": "has",
    "to": 5
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 184
  }, {
    "from": 251,
    "label": "has",
    "to": 185
  }, {
    "from": 251,
    "label": "has",
    "to": 186
  }, {
    "from": 251,
    "label": "has",
    "to": 5
  }, {
    "from": 251,
    "label": "has",
    "to": 187
  }, {
    "from": 251,
    "label": "has",
    "to": 188
  }, {
    "from": 251,
    "label": "has",
    "to": 5
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 5
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 5
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 5
  }, {
    "from": 258,
    "label": "has",
    "to": 5
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 259,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 5
  }, {
    "from": 261,
    "label": "has",
    "to": 5
  }, {
    "from": 259,
    "label": "has",
    "to": 5
  }, {
    "from": 259,
    "label": "has",
    "to": 5
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 5
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 265,
    "label": "has",
    "to": 5
  }, {
    "from": 265,
    "label": "has",
    "to": 5
  }, {
    "from": 265,
    "label": "has",
    "to": 269
  }, {
    "from": 271,
    "label": "has",
    "to": 5
  }, {
    "from": 272,
    "label": "has",
    "to": 214
  }, {
    "from": 272,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 5
  }, {
    "from": 272,
    "label": "has",
    "to": 5
  }, {
    "from": 272,
    "label": "has",
    "to": 5
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 109,
    "label": "calls",
    "to": 294
  }, {
    "from": 25,
    "label": "calls",
    "to": 301
  }, {
    "from": 85,
    "label": "calls",
    "to": 301
  }, {
    "from": 102,
    "label": "calls",
    "to": 301
  }, {
    "from": 73,
    "label": "calls",
    "to": 295
  }, {
    "from": 65,
    "label": "calls",
    "to": 211
  }, {
    "from": 65,
    "label": "calls",
    "to": 211
  }, {
    "from": 131,
    "label": "calls",
    "to": 211
  }, {
    "from": 131,
    "label": "calls",
    "to": 211
  }, {
    "from": 138,
    "label": "calls",
    "to": 211
  }, {
    "from": 144,
    "label": "calls",
    "to": 211
  }, {
    "from": 153,
    "label": "calls",
    "to": 211
  }, {
    "from": 161,
    "label": "calls",
    "to": 211
  }, {
    "from": 167,
    "label": "calls",
    "to": 211
  }, {
    "from": 172,
    "label": "calls",
    "to": 211
  }, {
    "from": 174,
    "label": "calls",
    "to": 211
  }, {
    "from": 181,
    "label": "calls",
    "to": 211
  }, {
    "from": 181,
    "label": "calls",
    "to": 211
  }, {
    "from": 4,
    "label": "calls",
    "to": 299
  }, {
    "from": 7,
    "label": "calls",
    "to": 299
  }, {
    "from": 9,
    "label": "calls",
    "to": 299
  }, {
    "from": 38,
    "label": "calls",
    "to": 299
  }, {
    "from": 212,
    "label": "calls",
    "to": 174
  }, {
    "from": 47,
    "label": "calls",
    "to": 284
  }, {
    "from": 138,
    "label": "calls",
    "to": 284
  }, {
    "from": 138,
    "label": "calls",
    "to": 284
  }, {
    "from": 174,
    "label": "calls",
    "to": 284
  }, {
    "from": 190,
    "label": "calls",
    "to": 284
  }, {
    "from": 274,
    "label": "calls",
    "to": 284
  }, {
    "from": 73,
    "label": "calls",
    "to": 287
  }, {
    "from": 73,
    "label": "calls",
    "to": 287
  }, {
    "from": 14,
    "label": "calls",
    "to": 277
  }, {
    "from": 274,
    "label": "calls",
    "to": 278
  }, {
    "from": 274,
    "label": "calls",
    "to": 255
  }, {
    "from": 198,
    "label": "calls",
    "to": 279
  }, {
    "from": 198,
    "label": "calls",
    "to": 303
  }, {
    "from": 33,
    "label": "calls",
    "to": 285
  }, {
    "from": 274,
    "label": "calls",
    "to": 253
  }, {
    "from": 144,
    "label": "calls",
    "to": 280
  }, {
    "from": 144,
    "label": "calls",
    "to": 280
  }, {
    "from": 109,
    "label": "calls",
    "to": 130
  }, {
    "from": 102,
    "label": "calls",
    "to": 304
  }, {
    "from": 33,
    "label": "calls",
    "to": 190
  }, {
    "from": 12,
    "label": "calls",
    "to": 305
  }, {
    "from": 274,
    "label": "calls",
    "to": 282
  }, {
    "from": 274,
    "label": "calls",
    "to": 282
  }, {
    "from": 274,
    "label": "calls",
    "to": 282
  }, {
    "from": 54,
    "label": "calls",
    "to": 282
  }, {
    "from": 93,
    "label": "calls",
    "to": 282
  }, {
    "from": 195,
    "label": "calls",
    "to": 290
  }, {
    "from": 274,
    "label": "calls",
    "to": 290
  }, {
    "from": 274,
    "label": "calls",
    "to": 195
  }, {
    "from": 274,
    "label": "calls",
    "to": 195
  }, {
    "from": 198,
    "label": "calls",
    "to": 195
  }, {
    "from": 89,
    "label": "calls",
    "to": 307
  }, {
    "from": 102,
    "label": "calls",
    "to": 288
  }, {
    "from": 85,
    "label": "calls",
    "to": 54
  }, {
    "from": 102,
    "label": "calls",
    "to": 93
  }, {
    "from": 85,
    "label": "calls",
    "to": 293
  }, {
    "from": 109,
    "label": "calls",
    "to": 300
  }, {
    "from": 109,
    "label": "calls",
    "to": 300
  }, {
    "from": 109,
    "label": "calls",
    "to": 300
  }, {
    "from": 89,
    "label": "calls",
    "to": 281
  }, {
    "from": 38,
    "label": "calls",
    "to": 25
  }, {
    "from": 47,
    "label": "calls",
    "to": 25
  }, {
    "from": 54,
    "label": "calls",
    "to": 25
  }, {
    "from": 65,
    "label": "calls",
    "to": 25
  }, {
    "from": 89,
    "label": "calls",
    "to": 25
  }, {
    "from": 89,
    "label": "calls",
    "to": 25
  }, {
    "from": 93,
    "label": "calls",
    "to": 25
  }, {
    "from": 109,
    "label": "calls",
    "to": 25
  }, {
    "from": 131,
    "label": "calls",
    "to": 25
  }, {
    "from": 131,
    "label": "calls",
    "to": 25
  }, {
    "from": 138,
    "label": "calls",
    "to": 25
  }, {
    "from": 153,
    "label": "calls",
    "to": 25
  }, {
    "from": 161,
    "label": "calls",
    "to": 25
  }, {
    "from": 172,
    "label": "calls",
    "to": 25
  }, {
    "from": 174,
    "label": "calls",
    "to": 25
  }, {
    "from": 181,
    "label": "calls",
    "to": 25
  }, {
    "from": 190,
    "label": "calls",
    "to": 25
  }, {
    "from": 138,
    "label": "calls",
    "to": 298
  }, {
    "from": 144,
    "label": "calls",
    "to": 298
  }, {
    "from": 153,
    "label": "calls",
    "to": 298
  }, {
    "from": 190,
    "label": "calls",
    "to": 298
  }, {
    "from": 73,
    "label": "calls",
    "to": 83
  }, {
    "from": 153,
    "label": "calls",
    "to": 308
  }, {
    "from": 21,
    "label": "calls",
    "to": 297
  }, {
    "from": 14,
    "label": "calls",
    "to": 309
  }, {
    "from": 21,
    "label": "calls",
    "to": 309
  }, {
    "from": 274,
    "label": "calls",
    "to": 302
  }, {
    "from": 174,
    "label": "calls",
    "to": 306
  }, {
    "from": 198,
    "label": "calls",
    "to": 306
  }, {
    "from": 54,
    "label": "calls",
    "to": 310
  }, {
    "from": 93,
    "label": "calls",
    "to": 310
  }, {
    "from": 195,
    "label": "calls",
    "to": 310
  }, {
    "from": 274,
    "label": "calls",
    "to": 310
  }, {
    "from": 274,
    "label": "calls",
    "to": 310
  }, {
    "from": 198,
    "label": "calls",
    "to": 292
  }, {
    "from": 14,
    "label": "calls",
    "to": 289
  }, {
    "from": 9,
    "label": "calls",
    "to": 286
  }, {
    "from": 25,
    "label": "calls",
    "to": 286
  }, {
    "from": 73,
    "label": "calls",
    "to": 286
  }, {
    "from": 174,
    "label": "calls",
    "to": 286
  }, {
    "from": 274,
    "label": "calls",
    "to": 286
  }, {
    "from": 198,
    "label": "calls",
    "to": 286
  }, {
    "from": 274,
    "label": "calls",
    "to": 14
  }, {
    "from": 65,
    "label": "calls",
    "to": 291
  }, {
    "from": 212,
    "label": "calls",
    "to": 283
  }, {
    "from": 1,
    "label": "contains",
    "to": 274
  }, {
    "from": 274,
    "label": "declares",
    "to": 4
  }, {
    "from": 274,
    "label": "declares",
    "to": 7
  }, {
    "from": 274,
    "label": "declares",
    "to": 9
  }, {
    "from": 274,
    "label": "declares",
    "to": 12
  }, {
    "from": 274,
    "label": "declares",
    "to": 14
  }, {
    "from": 274,
    "label": "declares",
    "to": 21
  }, {
    "from": 274,
    "label": "declares",
    "to": 25
  }, {
    "from": 274,
    "label": "declares",
    "to": 28
  }, {
    "from": 274,
    "label": "declares",
    "to": 33
  }, {
    "from": 274,
    "label": "declares",
    "to": 38
  }, {
    "from": 274,
    "label": "declares",
    "to": 47
  }, {
    "from": 274,
    "label": "declares",
    "to": 54
  }, {
    "from": 274,
    "label": "declares",
    "to": 61
  }, {
    "from": 274,
    "label": "declares",
    "to": 65
  }, {
    "from": 274,
    "label": "declares",
    "to": 73
  }, {
    "from": 274,
    "label": "declares",
    "to": 83
  }, {
    "from": 274,
    "label": "declares",
    "to": 84
  }, {
    "from": 274,
    "label": "declares",
    "to": 85
  }, {
    "from": 274,
    "label": "declares",
    "to": 89
  }, {
    "from": 274,
    "label": "declares",
    "to": 93
  }, {
    "from": 274,
    "label": "declares",
    "to": 102
  }, {
    "from": 274,
    "label": "declares",
    "to": 109
  }, {
    "from": 274,
    "label": "declares",
    "to": 130
  }, {
    "from": 274,
    "label": "declares",
    "to": 131
  }, {
    "from": 274,
    "label": "declares",
    "to": 138
  }, {
    "from": 274,
    "label": "declares",
    "to": 144
  }, {
    "from": 274,
    "label": "declares",
    "to": 153
  }, {
    "from": 274,
    "label": "declares",
    "to": 161
  }, {
    "from": 274,
    "label": "declares",
    "to": 167
  }, {
    "from": 274,
    "label": "declares",
    "to": 172
  }, {
    "from": 274,
    "label": "declares",
    "to": 174
  }, {
    "from": 274,
    "label": "declares",
    "to": 181
  }, {
    "from": 274,
    "label": "declares",
    "to": 190
  }, {
    "from": 274,
    "label": "declares",
    "to": 195
  }, {
    "from": 274,
    "label": "declares",
    "to": 198
  }, {
    "from": 274,
    "label": "declares",
    "to": 211
  }, {
    "from": 274,
    "label": "declares",
    "to": 212
  }, {
    "from": 274,
    "label": "declares",
    "to": 217
  }, {
    "from": 274,
    "label": "declares",
    "to": 219
  }, {
    "from": 274,
    "label": "declares",
    "to": 221
  }, {
    "from": 274,
    "label": "declares",
    "to": 223
  }, {
    "from": 274,
    "label": "declares",
    "to": 225
  }, {
    "from": 274,
    "label": "declares",
    "to": 227
  }, {
    "from": 274,
    "label": "declares",
    "to": 229
  }, {
    "from": 274,
    "label": "declares",
    "to": 231
  }, {
    "from": 274,
    "label": "declares",
    "to": 233
  }, {
    "from": 274,
    "label": "declares",
    "to": 235
  }, {
    "from": 274,
    "label": "declares",
    "to": 237
  }, {
    "from": 274,
    "label": "declares",
    "to": 239
  }, {
    "from": 274,
    "label": "declares",
    "to": 241
  }, {
    "from": 274,
    "label": "declares",
    "to": 243
  }, {
    "from": 274,
    "label": "declares",
    "to": 245
  }, {
    "from": 274,
    "label": "declares",
    "to": 247
  }, {
    "from": 274,
    "label": "declares",
    "to": 249
  }, {
    "from": 274,
    "label": "declares",
    "to": 251
  }, {
    "from": 274,
    "label": "declares",
    "to": 253
  }, {
    "from": 274,
    "label": "declares",
    "to": 255
  }, {
    "from": 274,
    "label": "declares",
    "to": 257
  }, {
    "from": 274,
    "label": "declares",
    "to": 258
  }, {
    "from": 274,
    "label": "declares",
    "to": 259
  }, {
    "from": 274,
    "label": "declares",
    "to": 263
  }, {
    "from": 274,
    "label": "declares",
    "to": 265
  }, {
    "from": 274,
    "label": "declares",
    "to": 270
  }, {
    "from": 274,
    "label": "declares",
    "to": 271
  }, {
    "from": 274,
    "label": "declares",
    "to": 272
  }, {
    "from": 275,
    "label": "calls",
    "to": 253
  }, {
    "from": 275,
    "label": "calls",
    "to": 255
  }, {
    "from": 1,
    "label": "declares",
    "to": 296
  }, {
    "from": 311,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 312
  }, {
    "from": 1,
    "label": "contains",
    "to": 313
  }, {
    "from": 312,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 312,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 312,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 312,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 312,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 312,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 312,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 312,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 312,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 312,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 312,
    "label": "initializes",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 312,
    "label": "initializes",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 312,
    "label": "initializes",
    "to": 338
  }, {
    "from": 338,
    "label": "assigns",
    "to": 339
  }, {
    "from": 312,
    "label": "initializes",
    "to": 340
  }, {
    "from": 340,
    "label": "assigns",
    "to": 341
  }, {
    "from": 312,
    "label": "initializes",
    "to": 342
  }, {
    "from": 342,
    "label": "assigns",
    "to": 343
  }, {
    "from": 312,
    "label": "initializes",
    "to": 344
  }, {
    "from": 344,
    "label": "assigns",
    "to": 345
  }, {
    "from": 312,
    "label": "initializes",
    "to": 346
  }, {
    "from": 346,
    "label": "assigns",
    "to": 347
  }, {
    "from": 312,
    "label": "initializes",
    "to": 348
  }, {
    "from": 348,
    "label": "assigns",
    "to": 349
  }, {
    "from": 312,
    "label": "initializes",
    "to": 350
  }, {
    "from": 350,
    "label": "assigns",
    "to": 351
  }, {
    "from": 312,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "assigns",
    "to": 353
  }, {
    "from": 312,
    "label": "initializes",
    "to": 354
  }, {
    "from": 312,
    "label": "initializes",
    "to": 355
  }, {
    "from": 355,
    "label": "assigns",
    "to": 356
  }, {
    "from": 312,
    "label": "initializes",
    "to": 357
  }, {
    "from": 312,
    "label": "initializes",
    "to": 358
  }, {
    "from": 358,
    "label": "assigns",
    "to": 359
  }, {
    "from": 312,
    "label": "initializes",
    "to": 360
  }, {
    "from": 360,
    "label": "assigns",
    "to": 361
  }, {
    "from": 312,
    "label": "initializes",
    "to": 362
  }, {
    "from": 362,
    "label": "assigns",
    "to": 363
  }, {
    "from": 312,
    "label": "initializes",
    "to": 364
  }, {
    "from": 364,
    "label": "assigns",
    "to": 365
  }, {
    "from": 365,
    "label": "assigns",
    "to": 366
  }, {
    "from": 366,
    "label": "assigns",
    "to": 367
  }, {
    "from": 365,
    "label": "assigns",
    "to": 368
  }, {
    "from": 368,
    "label": "assigns",
    "to": 369
  }, {
    "from": 312,
    "label": "initializes",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 312,
    "label": "initializes",
    "to": 372
  }, {
    "from": 372,
    "label": "assigns",
    "to": 373
  }, {
    "from": 313,
    "label": "initializes",
    "to": 374
  }, {
    "from": 374,
    "label": "requires",
    "to": 3
  }, {
    "from": 313,
    "label": "initializes",
    "to": 375
  }, {
    "from": 375,
    "label": "requires",
    "to": 2
  }, {
    "from": 313,
    "label": "initializes",
    "to": 376
  }, {
    "from": 376,
    "label": "requires",
    "to": 276
  }, {
    "from": 1,
    "label": "provides",
    "to": 377
  }, {
    "from": 352,
    "label": "represents",
    "to": 378
  }, {
    "from": 377,
    "label": "provides",
    "to": 378
  }, {
    "from": 380,
    "label": "requires",
    "to": 1
  }, {
    "from": 381,
    "label": "requires",
    "to": 1
  }, {
    "from": 352,
    "label": "contains",
    "to": 4
  }, {
    "from": 352,
    "label": "contains",
    "to": 7
  }, {
    "from": 352,
    "label": "contains",
    "to": 9
  }, {
    "from": 352,
    "label": "contains",
    "to": 12
  }, {
    "from": 352,
    "label": "contains",
    "to": 14
  }, {
    "from": 352,
    "label": "contains",
    "to": 21
  }, {
    "from": 352,
    "label": "contains",
    "to": 28
  }, {
    "from": 352,
    "label": "contains",
    "to": 33
  }, {
    "from": 352,
    "label": "contains",
    "to": 38
  }, {
    "from": 352,
    "label": "contains",
    "to": 47
  }, {
    "from": 352,
    "label": "contains",
    "to": 54
  }, {
    "from": 352,
    "label": "contains",
    "to": 61
  }, {
    "from": 352,
    "label": "contains",
    "to": 65
  }, {
    "from": 352,
    "label": "contains",
    "to": 73
  }, {
    "from": 352,
    "label": "contains",
    "to": 85
  }, {
    "from": 352,
    "label": "contains",
    "to": 89
  }, {
    "from": 352,
    "label": "contains",
    "to": 93
  }, {
    "from": 352,
    "label": "contains",
    "to": 102
  }, {
    "from": 352,
    "label": "contains",
    "to": 109
  }, {
    "from": 352,
    "label": "contains",
    "to": 131
  }, {
    "from": 352,
    "label": "contains",
    "to": 138
  }, {
    "from": 352,
    "label": "contains",
    "to": 144
  }, {
    "from": 352,
    "label": "contains",
    "to": 153
  }, {
    "from": 352,
    "label": "contains",
    "to": 161
  }, {
    "from": 352,
    "label": "contains",
    "to": 167
  }, {
    "from": 352,
    "label": "contains",
    "to": 172
  }, {
    "from": 352,
    "label": "contains",
    "to": 174
  }, {
    "from": 352,
    "label": "contains",
    "to": 181
  }, {
    "from": 352,
    "label": "contains",
    "to": 190
  }, {
    "from": 379,
    "label": "contains",
    "to": 195
  }, {
    "from": 352,
    "label": "contains",
    "to": 198
  }, {
    "from": 352,
    "label": "contains",
    "to": 212
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 179,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 179,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 193,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 193,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 369
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 271
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 270
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 367
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 369
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "seq",
    "type": "module"
  }, {
    "id": 2,
    "text": "types",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "function seq.greater_than(x)\r\n  return function(v)\r\n    return tonumber(v) > x\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function seq.less_than(x)\r\n  return function(v)\r\n    return tonumber(v) < x\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function seq.equal_to(x)\r\n  if type(x) == \"number\" then\r\n    return function(v)\r\n      return tonumber(v) == x\r\n    end\r\n  else\r\n    return function(v)\r\n      return v == x\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "if type(x) == \"number\" then\r\n    return function(v)\r\n      return tonumber(v) == x\r\n    end\r\n  else\r\n    return function(v)\r\n      return v == x\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function seq.matching(s)\r\n  return function(v)\r\n     return strfind(v,s)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function seq.list(t)\r\n  assert_arg(1,t,'table')\r\n  if not nexti then\r\n    nexti = ipairs{}\r\n  end\r\n  local key,value = 0\r\n  return function()\r\n    key,value = nexti(t,key)\r\n    return value\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "assert_arg(1,t,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if not nexti then\r\n    nexti = ipairs{}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "nexti = ipairs{}",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local key,value = 0",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "key,value = nexti(t,key)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function seq.keys(t)\r\n  assert_arg(1,t,'table')\r\n  local key,value\r\n  return function()\r\n    key,value = next(t,key)\r\n    return key\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local key,value",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "key,value = next(t,key)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function default_iter(iter)\r\n  if type(iter) == 'table' then return list(iter)\r\n  else return iter end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "if type(iter) == 'table' then return list(iter)\r\n  else return iter end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function seq.range(start,finish)\r\n  local i = start - 1\r\n  return function()\r\n      i = i + 1\r\n      if i > finish then return nil\r\n      else return i end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local i = start - 1",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if i > finish then return nil\r\n      else return i end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function seq.count(iter,condn,arg)\r\n  local i = 0\r\n  seq.foreach(iter,function(val)\r\n        if condn(val,arg) then i = i + 1 end\r\n  end)\r\n  return i\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "seq.foreach(iter,function(val)\r\n        if condn(val,arg) then i = i + 1 end\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if condn(val,arg) then i = i + 1 end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function seq.minmax(iter)\r\n  local vmin,vmax = 1e70,-1e70\r\n  for v in default_iter(iter) do\r\n    v = tonumber(v)\r\n    if v < vmin then vmin = v end\r\n    if v > vmax then vmax = v end\r\n  end\r\n  return vmin,vmax\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local vmin,vmax = 1e70,-1e70",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for v in default_iter(iter) do\r\n    v = tonumber(v)\r\n    if v < vmin then vmin = v end\r\n    if v > vmax then vmax = v end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "v = tonumber(v)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if v < vmin then vmin = v end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "vmin = v",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if v > vmax then vmax = v end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "vmax = v",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function seq.sum(iter,fn)\r\n  local s = 0\r\n  local i = 0\r\n  for v in default_iter(iter) do\r\n    if fn then v = fn(v) end\r\n    s = s + v\r\n    i = i + 1\r\n  end\r\n  return s,i\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local s = 0",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "for v in default_iter(iter) do\r\n    if fn then v = fn(v) end\r\n    s = s + v\r\n    i = i + 1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 50,
    "text": "if fn then v = fn(v) end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "v = fn(v)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "s = s + v",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function seq.copy(iter)\r\n    local res,k = {},1\r\n    for v in default_iter(iter) do\r\n        res[k] = v\r\n        k = k + 1\r\n    end\r\n    setmetatable(res, require('pl.List'))\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local res,k = {},1",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for v in default_iter(iter) do\r\n        res[k] = v\r\n        k = k + 1\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "res[k] = v",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "setmetatable(res, require('pl.List'))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function seq.copy2 (iter,i1,i2)\r\n    local res,k = {},1\r\n    for v1,v2 in iter,i1,i2 do\r\n        res[k] = {v1,v2}\r\n        k = k + 1\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "for v1,v2 in iter,i1,i2 do\r\n        res[k] = {v1,v2}\r\n        k = k + 1\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "res[k] = {v1,v2}",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function seq.copy_tuples (iter)\r\n    iter = default_iter(iter)\r\n    local res = {}\r\n    local row = {iter()}\r\n    while #row > 0 do\r\n        tappend(res,row)\r\n        row = {iter()}\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "iter = default_iter(iter)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local row = {iter()}",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "while #row > 0 do\r\n        tappend(res,row)\r\n        row = {iter()}\r\n    end",
    "type": "statement:while"
  }, {
    "id": 70,
    "text": "tappend(res,row)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "row = {iter()}",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function seq.random(n,l,u)\r\n  local rand\r\n  assert(type(n) == 'number')\r\n  if u then\r\n     rand = function() return mrandom(l,u) end\r\n  elseif l then\r\n     rand = function() return mrandom(l) end\r\n  else\r\n     rand = mrandom\r\n  end\r\n\r\n  return function()\r\n     if n == 0 then return nil\r\n     else\r\n       n = n - 1\r\n       return rand()\r\n     end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "local rand",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "assert(type(n) == 'number')",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "if u then\r\n     rand = function() return mrandom(l,u) end\r\n  elseif l then\r\n     rand = function() return mrandom(l) end\r\n  else\r\n     rand = mrandom\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "rand = function() return mrandom(l,u) end",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "rand = function() return mrandom(l) end",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "rand = mrandom",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if n == 0 then return nil\r\n     else\r\n       n = n - 1\r\n       return rand()\r\n     end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "n = n - 1",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function() return mrandom(l,u) end",
    "type": "function"
  }, {
    "id": 84,
    "text": "function() return mrandom(l) end",
    "type": "function"
  }, {
    "id": 85,
    "text": "function seq.sort(iter,comp)\r\n    local t = seq.copy(iter)\r\n    tsort(t,comp)\r\n    return list(t)\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local t = seq.copy(iter)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "tsort(t,comp)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function seq.zip(iter1,iter2)\r\n    iter1 = default_iter(iter1)\r\n    iter2 = default_iter(iter2)\r\n    return function()\r\n        return iter1(),iter2()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "iter1 = default_iter(iter1)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "iter2 = default_iter(iter2)",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function seq.count_map(iter)\r\n    local t = {}\r\n    local v\r\n    for s in default_iter(iter) do\r\n        v = t[s]\r\n        if v then t[s] = v + 1\r\n        else t[s] = 1 end\r\n    end\r\n    return setmetatable(t, require('pl.Map'))\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local v",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "for s in default_iter(iter) do\r\n        v = t[s]\r\n        if v then t[s] = v + 1\r\n        else t[s] = 1 end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "v = t[s]",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "if v then t[s] = v + 1\r\n        else t[s] = 1 end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "t[s] = v + 1",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "t[s] = 1",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function seq.unique(iter,returns_table)\r\n    local t = seq.count_map(iter)\r\n    local res,k = {},1\r\n    for key in pairs(t) do res[k] = key; k = k + 1 end\r\n    table.sort(res)\r\n    if returns_table then\r\n        return res\r\n    else\r\n        return list(res)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local t = seq.count_map(iter)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "for key in pairs(t) do res[k] = key; k = k + 1 end",
    "type": "statement:genericfor"
  }, {
    "id": 105,
    "text": "res[k] = key",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "table.sort(res)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "if returns_table then\r\n        return res\r\n    else\r\n        return list(res)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function seq.printall(iter,sep,nfields,fmt)\r\n  local write = io.write\r\n  if not sep then sep = ' ' end\r\n  if not nfields then\r\n      if sep == '\\n' then nfields = 1e30\r\n      else nfields = 7 end\r\n  end\r\n  if fmt then\r\n    local fstr = fmt\r\n    fmt = function(v) return format(fstr,v) end\r\n  end\r\n  local k = 1\r\n  for v in default_iter(iter) do\r\n     if fmt then v = fmt(v) end\r\n     if k < nfields then\r\n       write(v,sep)\r\n       k = k + 1\r\n    else\r\n       write(v,'\\n')\r\n       k = 1\r\n    end\r\n  end\r\n  write '\\n'\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "local write = io.write",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if not sep then sep = ' ' end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "sep = ' '",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if not nfields then\r\n      if sep == '\\n' then nfields = 1e30\r\n      else nfields = 7 end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "if sep == '\\n' then nfields = 1e30\r\n      else nfields = 7 end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "nfields = 1e30",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "nfields = 7",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "if fmt then\r\n    local fstr = fmt\r\n    fmt = function(v) return format(fstr,v) end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "local fstr = fmt",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "fmt = function(v) return format(fstr,v) end",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "local k = 1",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "for v in default_iter(iter) do\r\n     if fmt then v = fmt(v) end\r\n     if k < nfields then\r\n       write(v,sep)\r\n       k = k + 1\r\n    else\r\n       write(v,'\\n')\r\n       k = 1\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 122,
    "text": "if fmt then v = fmt(v) end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "v = fmt(v)",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "if k < nfields then\r\n       write(v,sep)\r\n       k = k + 1\r\n    else\r\n       write(v,'\\n')\r\n       k = 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "write(v,sep)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "write(v,'\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "k = 1",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "write '\\n'",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function(v) return format(fstr,v) end",
    "type": "function"
  }, {
    "id": 131,
    "text": "function seq.splice(iter1,iter2)\r\n  iter1 = default_iter(iter1)\r\n  iter2 = default_iter(iter2)\r\n  local iter = iter1\r\n  return function()\r\n    local ret = iter()\r\n    if ret == nil then\r\n      if iter == iter1 then\r\n        iter = iter2\r\n        return iter()\r\n      else return nil end\r\n   else\r\n       return  ret\r\n   end\r\n end\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "local iter = iter1",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local ret = iter()",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "if ret == nil then\r\n      if iter == iter1 then\r\n        iter = iter2\r\n        return iter()\r\n      else return nil end\r\n   else\r\n       return  ret\r\n   end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "if iter == iter1 then\r\n        iter = iter2\r\n        return iter()\r\n      else return nil end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "iter = iter2",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function seq.map(fn,iter,arg)\r\n    fn = function_arg(1,fn)\r\n    iter = default_iter(iter)\r\n    return function()\r\n        local v1,v2 = iter()\r\n        if v1 == nil then return nil end\r\n        if arg then return fn(v1,arg) or false\r\n        else return fn(v1,v2) or false\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "fn = function_arg(1,fn)",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "local v1,v2 = iter()",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "if v1 == nil then return nil end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "if arg then return fn(v1,arg) or false\r\n        else return fn(v1,v2) or false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function seq.filter (iter,pred,arg)\r\n    pred = function_arg(2,pred)\r\n    return function ()\r\n        local v1,v2\r\n        while true do\r\n            v1,v2 = iter()\r\n            if v1 == nil then return nil end\r\n            if arg then\r\n                if pred(v1,arg) then return v1,v2 end\r\n            else\r\n                if pred(v1,v2) then return v1,v2 end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "pred = function_arg(2,pred)",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "local v1,v2",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "while true do\r\n            v1,v2 = iter()\r\n            if v1 == nil then return nil end\r\n            if arg then\r\n                if pred(v1,arg) then return v1,v2 end\r\n            else\r\n                if pred(v1,v2) then return v1,v2 end\r\n            end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 148,
    "text": "v1,v2 = iter()",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "if arg then\r\n                if pred(v1,arg) then return v1,v2 end\r\n            else\r\n                if pred(v1,v2) then return v1,v2 end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "if pred(v1,arg) then return v1,v2 end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "if pred(v1,v2) then return v1,v2 end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function seq.reduce (fun,iter,oldval)\r\n   fun = function_arg(1,fun)\r\n   iter = default_iter(iter)\r\n   if not oldval then\r\n       oldval = iter()\r\n   end\r\n   local val = oldval\r\n   for v in iter do\r\n       val = fun(val,v)\r\n   end\r\n   return val\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "fun = function_arg(1,fun)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "if not oldval then\r\n       oldval = iter()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "oldval = iter()",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "local val = oldval",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "for v in iter do\r\n       val = fun(val,v)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 159,
    "text": "val = fun(val,v)",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function seq.take (iter,n)\r\n    local i = 1\r\n    iter = default_iter(iter)\r\n    return function()\r\n        if i > n then return end\r\n        local val1,val2 = iter()\r\n        if not val1 then return end\r\n        i = i + 1\r\n        return val1,val2\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "if i > n then return end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "local val1,val2 = iter()",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "if not val1 then return end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function seq.skip (iter,n)\r\n    n = n or 1\r\n    for i = 1,n do iter() end\r\n    return iter\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "n = n or 1",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "for i = 1,n do iter() end",
    "type": "statement:numericfor"
  }, {
    "id": 170,
    "text": "iter()",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function seq.enum (iter)\r\n    local i = 0\r\n    iter = default_iter(iter)\r\n    return function  ()\r\n        local val1,val2 = iter()\r\n        if not val1 then return end\r\n        i = i + 1\r\n        return i,val1,val2\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function seq.mapmethod (iter,name,arg1,arg2)\r\n    iter = default_iter(iter)\r\n    return function()\r\n        local val = iter()\r\n        if not val then return end\r\n        local fn = val[name]\r\n        if not fn then error(type(val)..\" does not have method \"..name) end\r\n        return fn(val,arg1,arg2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "local val = iter()",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "if not val then return end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "local fn = val[name]",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if not fn then error(type(val)..\" does not have method \"..name) end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "error(type(val)..\" does not have method \"..name)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function seq.last (iter)\r\n    iter = default_iter(iter)\r\n    local l = iter()\r\n    if l == nil then return nil end\r\n    return function ()\r\n        local val,ll\r\n        val = iter()\r\n        if val == nil then return nil end\r\n        ll = l\r\n        l = val\r\n        return val,ll\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "local l = iter()",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "if l == nil then return nil end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "local val,ll",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "val = iter()",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "if val == nil then return nil end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "ll = l",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "l = val",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "function seq.foreach(iter,fn)\r\n    fn = function_arg(2,fn)\r\n    for i1,i2,i3 in default_iter(iter) do fn(i1,i2,i3) end\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "fn = function_arg(2,fn)",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "for i1,i2,i3 in default_iter(iter) do fn(i1,i2,i3) end",
    "type": "statement:genericfor"
  }, {
    "id": 193,
    "text": "fn(i1,i2,i3)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "local function SW (iter,...)\r\n    if callable(iter) then\r\n        return setmetatable({iter=iter},SMT)\r\n    else\r\n        return iter,...\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "if callable(iter) then\r\n        return setmetatable({iter=iter},SMT)\r\n    else\r\n        return iter,...\r\n    end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "function seq.lines (f,...)\r\n    local n = select('#',...)\r\n    local iter,obj\r\n    if f == 'STDIN' then\r\n        f = io.stdin\r\n    elseif type(f) == 'string' then\r\n        iter,obj = io.lines(f,...)\r\n    elseif not f.read then\r\n        error(\"Pass either a string or a file-like object\",2)\r\n    end\r\n    if not iter then\r\n        iter,obj = f:lines(...)\r\n    end\r\n    if obj then -- LuaJIT version returns a function operating on a file\r\n        local lines,file = iter,obj\r\n        iter = function() return lines(file) end\r\n    end\r\n    return SW(iter)\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "local n = select('#',...)",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "local iter,obj",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "if f == 'STDIN' then\r\n        f = io.stdin\r\n    elseif type(f) == 'string' then\r\n        iter,obj = io.lines(f,...)\r\n    elseif not f.read then\r\n        error(\"Pass either a string or a file-like object\",2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "f = io.stdin",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "iter,obj = io.lines(f,...)",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "error(\"Pass either a string or a file-like object\",2)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "if not iter then\r\n        iter,obj = f:lines(...)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "iter,obj = f:lines(...)",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "if obj then -- LuaJIT version returns a function operating on a file\r\n        local lines,file = iter,obj\r\n        iter = function() return lines(file) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "local lines,file = iter,obj",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "iter = function() return lines(file) end",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function() return lines(file) end",
    "type": "function"
  }, {
    "id": 212,
    "text": "function seq.import ()\r\n    _G.debug.setmetatable(function() end,{\r\n        __index = function(tbl,key)\r\n            local s = overrides[key] or seq[key]\r\n            if s then return s\r\n            else\r\n                return function(s,...) return seq.mapmethod(s,key,...) end\r\n            end\r\n        end\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 213,
    "text": "_G.debug.setmetatable(function() end,{\r\n        __index = function(tbl,key)\r\n            local s = overrides[key] or seq[key]\r\n            if s then return s\r\n            else\r\n                return function(s,...) return seq.mapmethod(s,key,...) end\r\n            end\r\n        end\r\n    })",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "local s = overrides[key] or seq[key]",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "if s then return s\r\n            else\r\n                return function(s,...) return seq.mapmethod(s,key,...) end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function(v)\r\n    return tonumber(v) > x\r\n  end",
    "type": "function"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function(v)\r\n    return tonumber(v) < x\r\n  end",
    "type": "function"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function(v)\r\n      return tonumber(v) == x\r\n    end",
    "type": "function"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function(v)\r\n      return v == x\r\n    end",
    "type": "function"
  }, {
    "id": 224,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 225,
    "text": "function(v)\r\n     return strfind(v,s)\r\n  end",
    "type": "function"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function()\r\n    key,value = nexti(t,key)\r\n    return value\r\n  end",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function()\r\n    key,value = next(t,key)\r\n    return key\r\n  end",
    "type": "function"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function()\r\n      i = i + 1\r\n      if i > finish then return nil\r\n      else return i end\r\n  end",
    "type": "function"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function(val)\r\n        if condn(val,arg) then i = i + 1 end\r\n  end",
    "type": "function"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function()\r\n     if n == 0 then return nil\r\n     else\r\n       n = n - 1\r\n       return rand()\r\n     end\r\n  end",
    "type": "function"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function()\r\n        return iter1(),iter2()\r\n    end",
    "type": "function"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function()\r\n    local ret = iter()\r\n    if ret == nil then\r\n      if iter == iter1 then\r\n        iter = iter2\r\n        return iter()\r\n      else return nil end\r\n   else\r\n       return  ret\r\n   end\r\n end",
    "type": "function"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "function()\r\n        local v1,v2 = iter()\r\n        if v1 == nil then return nil end\r\n        if arg then return fn(v1,arg) or false\r\n        else return fn(v1,v2) or false\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function ()\r\n        local v1,v2\r\n        while true do\r\n            v1,v2 = iter()\r\n            if v1 == nil then return nil end\r\n            if arg then\r\n                if pred(v1,arg) then return v1,v2 end\r\n            else\r\n                if pred(v1,v2) then return v1,v2 end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function()\r\n        if i > n then return end\r\n        local val1,val2 = iter()\r\n        if not val1 then return end\r\n        i = i + 1\r\n        return val1,val2\r\n    end",
    "type": "function"
  }, {
    "id": 246,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 247,
    "text": "function  ()\r\n        local val1,val2 = iter()\r\n        if not val1 then return end\r\n        i = i + 1\r\n        return i,val1,val2\r\n    end",
    "type": "function"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "function()\r\n        local val = iter()\r\n        if not val then return end\r\n        local fn = val[name]\r\n        if not fn then error(type(val)..\" does not have method \"..name) end\r\n        return fn(val,arg1,arg2)\r\n    end",
    "type": "function"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function ()\r\n        local val,ll\r\n        val = iter()\r\n        if val == nil then return nil end\r\n        ll = l\r\n        l = val\r\n        return val,ll\r\n    end",
    "type": "function"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "function(self,fun,arg)\r\n        return map(fun,self,arg)\r\n    end",
    "type": "function"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "function(self,fun)\r\n        return reduce(fun,self)\r\n    end",
    "type": "function"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "function(sw,...) return SW(fn(sw.iter,...)) end",
    "type": "function"
  }, {
    "id": 258,
    "text": "function(sw,...) return SW(mapmethod(sw.iter,key,...)) end",
    "type": "function"
  }, {
    "id": 259,
    "text": "function (tbl,key)\r\n        local fn = overrides[key] or seq[key]\r\n        if fn then\r\n            return function(sw,...) return SW(fn(sw.iter,...)) end\r\n        else\r\n            return function(sw,...) return SW(mapmethod(sw.iter,key,...)) end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 260,
    "text": "local fn = overrides[key] or seq[key]",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "if fn then\r\n            return function(sw,...) return SW(fn(sw.iter,...)) end\r\n        else\r\n            return function(sw,...) return SW(mapmethod(sw.iter,key,...)) end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function (sw)\r\n        return sw.iter()\r\n    end",
    "type": "function"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function(tbl,iter)\r\n        if not callable(iter) then\r\n            if type(iter) == 'table' then iter = seq.list(iter)\r\n            else return iter\r\n            end\r\n        end\r\n        return setmetatable({iter=iter},SMT)\r\n    end",
    "type": "function"
  }, {
    "id": 266,
    "text": "if not callable(iter) then\r\n            if type(iter) == 'table' then iter = seq.list(iter)\r\n            else return iter\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "if type(iter) == 'table' then iter = seq.list(iter)\r\n            else return iter\r\n            end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "iter = seq.list(iter)",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 270,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 271,
    "text": "function(s,...) return seq.mapmethod(s,key,...) end",
    "type": "function"
  }, {
    "id": 272,
    "text": "function(tbl,key)\r\n            local s = overrides[key] or seq[key]\r\n            if s then return s\r\n            else\r\n                return function(s,...) return seq.mapmethod(s,key,...) end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "",
    "type": "function container"
  }, {
    "id": 275,
    "text": "",
    "type": "function container"
  }, {
    "id": 276,
    "text": "debug",
    "type": "module"
  }, {
    "id": 277,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 278,
    "text": "mapmethod",
    "type": "global function"
  }, {
    "id": 279,
    "text": "lines",
    "type": "global function"
  }, {
    "id": 280,
    "text": "pred",
    "type": "global function"
  }, {
    "id": 281,
    "text": "iter1",
    "type": "global function"
  }, {
    "id": 282,
    "text": "require",
    "type": "global function"
  }, {
    "id": 283,
    "text": "_G.debug.setmetatable",
    "type": "global function"
  }, {
    "id": 284,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 285,
    "text": "condn",
    "type": "global function"
  }, {
    "id": 286,
    "text": "type",
    "type": "global function"
  }, {
    "id": 287,
    "text": "mrandom",
    "type": "global function"
  }, {
    "id": 288,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 289,
    "text": "nexti",
    "type": "global function"
  }, {
    "id": 290,
    "text": "callable",
    "type": "global function"
  }, {
    "id": 291,
    "text": "tappend",
    "type": "global function"
  }, {
    "id": 292,
    "text": "select",
    "type": "global function"
  }, {
    "id": 293,
    "text": "tsort",
    "type": "global function"
  }, {
    "id": 294,
    "text": "format",
    "type": "global function"
  }, {
    "id": 295,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 296,
    "text": "sum",
    "type": "global function"
  }, {
    "id": 297,
    "text": "next",
    "type": "global function"
  }, {
    "id": 298,
    "text": "function_arg",
    "type": "global function"
  }, {
    "id": 299,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 300,
    "text": "write",
    "type": "global function"
  }, {
    "id": 301,
    "text": "list",
    "type": "global function"
  }, {
    "id": 302,
    "text": "iter",
    "type": "global function"
  }, {
    "id": 303,
    "text": "lines",
    "type": "global function"
  }, {
    "id": 304,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 305,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 306,
    "text": "error",
    "type": "global function"
  }, {
    "id": 307,
    "text": "iter2",
    "type": "global function"
  }, {
    "id": 308,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 309,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 310,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 311,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 312,
    "text": "",
    "type": "variable container"
  }, {
    "id": 313,
    "text": "",
    "type": "require container"
  }, {
    "id": 314,
    "text": "",
    "type": "local variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "local variable"
  }, {
    "id": 331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 332,
    "text": "",
    "type": "local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 334,
    "text": "",
    "type": "local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "n/a"
  }, {
    "id": 336,
    "text": "",
    "type": "local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "n/a"
  }, {
    "id": 338,
    "text": "",
    "type": "local variable"
  }, {
    "id": 339,
    "text": "",
    "type": "n/a"
  }, {
    "id": 340,
    "text": "",
    "type": "local variable"
  }, {
    "id": 341,
    "text": "",
    "type": "n/a"
  }, {
    "id": 342,
    "text": "",
    "type": "local variable"
  }, {
    "id": 343,
    "text": "",
    "type": "n/a"
  }, {
    "id": 344,
    "text": "",
    "type": "local variable"
  }, {
    "id": 345,
    "text": "",
    "type": "n/a"
  }, {
    "id": 346,
    "text": "",
    "type": "local variable"
  }, {
    "id": 347,
    "text": "",
    "type": "n/a"
  }, {
    "id": 348,
    "text": "",
    "type": "local variable"
  }, {
    "id": 349,
    "text": "",
    "type": "n/a"
  }, {
    "id": 350,
    "text": "",
    "type": "local variable"
  }, {
    "id": 351,
    "text": "",
    "type": "n/a"
  }, {
    "id": 352,
    "text": "",
    "type": "local variable"
  }, {
    "id": 353,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 354,
    "text": "",
    "type": "local variable"
  }, {
    "id": 355,
    "text": "",
    "type": "local variable"
  }, {
    "id": 356,
    "text": "",
    "type": "n/a"
  }, {
    "id": 357,
    "text": "",
    "type": "local variable"
  }, {
    "id": 358,
    "text": "",
    "type": "local variable"
  }, {
    "id": 359,
    "text": "",
    "type": "n/a"
  }, {
    "id": 360,
    "text": "",
    "type": "local variable"
  }, {
    "id": 361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 362,
    "text": "",
    "type": "local variable"
  }, {
    "id": 363,
    "text": "",
    "type": "n/a"
  }, {
    "id": 364,
    "text": "",
    "type": "local variable"
  }, {
    "id": 365,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 366,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 367,
    "text": "",
    "type": "function"
  }, {
    "id": 368,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 369,
    "text": "",
    "type": "function"
  }, {
    "id": 370,
    "text": "",
    "type": "global variable"
  }, {
    "id": 371,
    "text": "",
    "type": "n/a"
  }, {
    "id": 372,
    "text": "",
    "type": "global variable"
  }, {
    "id": 373,
    "text": "",
    "type": "n/a"
  }, {
    "id": 374,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 375,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 376,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 377,
    "text": "",
    "type": "interface container"
  }, {
    "id": 378,
    "text": "",
    "type": "interface"
  }, {
    "id": 379,
    "text": "",
    "type": "local variable"
  }, {
    "id": 380,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 381,
    "text": "",
    "type": "require local variable"
  } ]
}