{
  "_filename": "template.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/template.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 21,
    "label": "has",
    "to": 29
  }, {
    "from": 21,
    "label": "has",
    "to": 30
  }, {
    "from": 16,
    "label": "has",
    "to": 31
  }, {
    "from": 16,
    "label": "has",
    "to": 32
  }, {
    "from": 16,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 34,
    "label": "has",
    "to": 42
  }, {
    "from": 34,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 43
  }, {
    "from": 34,
    "label": "has",
    "to": 44
  }, {
    "from": 34,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 34,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 34,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 47
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 34,
    "label": "calls",
    "to": 57
  }, {
    "from": 3,
    "label": "calls",
    "to": 59
  }, {
    "from": 3,
    "label": "calls",
    "to": 59
  }, {
    "from": 3,
    "label": "calls",
    "to": 59
  }, {
    "from": 16,
    "label": "calls",
    "to": 59
  }, {
    "from": 16,
    "label": "calls",
    "to": 59
  }, {
    "from": 16,
    "label": "calls",
    "to": 59
  }, {
    "from": 16,
    "label": "calls",
    "to": 59
  }, {
    "from": 34,
    "label": "calls",
    "to": 16
  }, {
    "from": 34,
    "label": "calls",
    "to": 60
  }, {
    "from": 16,
    "label": "calls",
    "to": 67
  }, {
    "from": 16,
    "label": "calls",
    "to": 67
  }, {
    "from": 16,
    "label": "calls",
    "to": 64
  }, {
    "from": 34,
    "label": "calls",
    "to": 64
  }, {
    "from": 3,
    "label": "calls",
    "to": 66
  }, {
    "from": 3,
    "label": "calls",
    "to": 66
  }, {
    "from": 3,
    "label": "calls",
    "to": 66
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 58
  }, {
    "from": 34,
    "label": "calls",
    "to": 58
  }, {
    "from": 34,
    "label": "calls",
    "to": 58
  }, {
    "from": 16,
    "label": "calls",
    "to": 3
  }, {
    "from": 56,
    "label": "calls",
    "to": 61
  }, {
    "from": 34,
    "label": "calls",
    "to": 62
  }, {
    "from": 34,
    "label": "calls",
    "to": 62
  }, {
    "from": 34,
    "label": "calls",
    "to": 65
  }, {
    "from": 3,
    "label": "calls",
    "to": 63
  }, {
    "from": 3,
    "label": "calls",
    "to": 63
  }, {
    "from": 3,
    "label": "calls",
    "to": 63
  }, {
    "from": 3,
    "label": "calls",
    "to": 63
  }, {
    "from": 16,
    "label": "calls",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 56,
    "label": "declares",
    "to": 3
  }, {
    "from": 56,
    "label": "declares",
    "to": 16
  }, {
    "from": 56,
    "label": "declares",
    "to": 34
  }, {
    "from": 56,
    "label": "declares",
    "to": 52
  }, {
    "from": 56,
    "label": "declares",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 69,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 69,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 69,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 69,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 69,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 69,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 70,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 84
  }, {
    "from": 81,
    "label": "represents",
    "to": 85
  }, {
    "from": 84,
    "label": "provides",
    "to": 85
  }, {
    "from": 86,
    "label": "requires",
    "to": 1
  }, {
    "from": 87,
    "label": "requires",
    "to": 1
  }, {
    "from": 81,
    "label": "contains",
    "to": 34
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 52
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "template",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function parseDollarParen(pieces, chunk, exec_pat)\r\n    local concatenations = 0\r\n    local s = 1\r\n    for term, executed, e in chunk:gmatch(exec_pat) do\r\n        executed = '('..strsub(executed,2,-2)..')'\r\n        concatenations = concatenations + 2\r\n        if concatenations > max_concatenations then\r\n            append(pieces, format(\"%q)_put((%s or '')..\",\r\n                strsub(chunk,s, term - 1), executed))\r\n            concatenations = 1\r\n        else\r\n            append(pieces, format(\"%q..(%s or '')..\",\r\n                strsub(chunk,s, term - 1), executed))\r\n        end\r\n        s = e\r\n    end\r\n    append(pieces, format(\"%q\", strsub(chunk,s)))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local concatenations = 0",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local s = 1",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for term, executed, e in chunk:gmatch(exec_pat) do\r\n        executed = '('..strsub(executed,2,-2)..')'\r\n        concatenations = concatenations + 2\r\n        if concatenations > max_concatenations then\r\n            append(pieces, format(\"%q)_put((%s or '')..\",\r\n                strsub(chunk,s, term - 1), executed))\r\n            concatenations = 1\r\n        else\r\n            append(pieces, format(\"%q..(%s or '')..\",\r\n                strsub(chunk,s, term - 1), executed))\r\n        end\r\n        s = e\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "executed = '('..strsub(executed,2,-2)..')'",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "concatenations = concatenations + 2",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if concatenations > max_concatenations then\r\n            append(pieces, format(\"%q)_put((%s or '')..\",\r\n                strsub(chunk,s, term - 1), executed))\r\n            concatenations = 1\r\n        else\r\n            append(pieces, format(\"%q..(%s or '')..\",\r\n                strsub(chunk,s, term - 1), executed))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "append(pieces, format(\"%q)_put((%s or '')..\",\r\n                strsub(chunk,s, term - 1), executed))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "concatenations = 1",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "append(pieces, format(\"%q..(%s or '')..\",\r\n                strsub(chunk,s, term - 1), executed))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "s = e",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "append(pieces, format(\"%q\", strsub(chunk,s)))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function parseHashLines(chunk,brackets,esc)\r\n    local exec_pat = \"()$(%b\"..brackets..\")()\"\r\n\r\n    local esc_pat = esc..\"+([^\\n]*\\n?)\"\r\n    local esc_pat1, esc_pat2 = \"^\"..esc_pat, \"\\n\"..esc_pat\r\n    local  pieces, s = {\"return function(_put) \", n = 1}, 1\r\n    while true do\r\n        local ss, e, lua = strfind(chunk,esc_pat1, s)\r\n        if not e then\r\n            ss, e, lua = strfind(chunk,esc_pat2, s)\r\n            append(pieces, \"_put(\")\r\n            parseDollarParen(pieces, strsub(chunk,s, ss), exec_pat)\r\n            append(pieces, \")\")\r\n            if not e then break end\r\n        end\r\n        append(pieces, lua)\r\n        s = e + 1\r\n    end\r\n    append(pieces, \" end\")\r\n    return table.concat(pieces)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local exec_pat = \"()$(%b\"..brackets..\")()\"",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local esc_pat = esc..\"+([^\\n]*\\n?)\"",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local esc_pat1, esc_pat2 = \"^\"..esc_pat, \"\\n\"..esc_pat",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local  pieces, s = {\"return function(_put) \", n = 1}, 1",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "while true do\r\n        local ss, e, lua = strfind(chunk,esc_pat1, s)\r\n        if not e then\r\n            ss, e, lua = strfind(chunk,esc_pat2, s)\r\n            append(pieces, \"_put(\")\r\n            parseDollarParen(pieces, strsub(chunk,s, ss), exec_pat)\r\n            append(pieces, \")\")\r\n            if not e then break end\r\n        end\r\n        append(pieces, lua)\r\n        s = e + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 22,
    "text": "local ss, e, lua = strfind(chunk,esc_pat1, s)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not e then\r\n            ss, e, lua = strfind(chunk,esc_pat2, s)\r\n            append(pieces, \"_put(\")\r\n            parseDollarParen(pieces, strsub(chunk,s, ss), exec_pat)\r\n            append(pieces, \")\")\r\n            if not e then break end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "ss, e, lua = strfind(chunk,esc_pat2, s)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "append(pieces, \"_put(\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "parseDollarParen(pieces, strsub(chunk,s, ss), exec_pat)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "append(pieces, \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "if not e then break end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "append(pieces, lua)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "s = e + 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "append(pieces, \" end\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function template.substitute(str,env)\r\n    env = env or {}\r\n    if rawget(env,\"_parent\") then\r\n        setmetatable(env,{__index = env._parent})\r\n    end\r\n    local brackets = rawget(env,\"_brackets\") or '()'\r\n    local escape = rawget(env,\"_escape\") or '#'\r\n    local code = parseHashLines(str,brackets,escape)\r\n    local fn,err = utils.load(code,'TMP','t',env)\r\n    if not fn then return nil,err end\r\n    fn = fn()\r\n    local out = {}\r\n    local res,err = xpcall(function() fn(function(s)\r\n        out[#out+1] = s\r\n    end) end,debug.traceback)\r\n    if not res then\r\n        if env._debug then print(code) end\r\n        return nil,err\r\n    end\r\n    return table.concat(out)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "env = env or {}",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if rawget(env,\"_parent\") then\r\n        setmetatable(env,{__index = env._parent})\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "setmetatable(env,{__index = env._parent})",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local brackets = rawget(env,\"_brackets\") or '()'",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local escape = rawget(env,\"_escape\") or '#'",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local code = parseHashLines(str,brackets,escape)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local fn,err = utils.load(code,'TMP','t',env)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if not fn then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "fn = fn()",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local res,err = xpcall(function() fn(function(s)\r\n        out[#out+1] = s\r\n    end) end,debug.traceback)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "fn(function(s)\r\n        out[#out+1] = s\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "out[#out+1] = s",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "if not res then\r\n        if env._debug then print(code) end\r\n        return nil,err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "if env._debug then print(code) end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "print(code)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(s)\r\n        out[#out+1] = s\r\n    end",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function() fn(function(s)\r\n        out[#out+1] = s\r\n    end) end",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "",
    "type": "function container"
  }, {
    "id": 57,
    "text": "load",
    "type": "global function"
  }, {
    "id": 58,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 59,
    "text": "append",
    "type": "global function"
  }, {
    "id": 60,
    "text": "print",
    "type": "global function"
  }, {
    "id": 61,
    "text": "require",
    "type": "global function"
  }, {
    "id": 62,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 63,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 64,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 65,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 66,
    "text": "format",
    "type": "global function"
  }, {
    "id": 67,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 68,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 69,
    "text": "",
    "type": "variable container"
  }, {
    "id": 70,
    "text": "",
    "type": "require container"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "number"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "interface container"
  }, {
    "id": 85,
    "text": "",
    "type": "interface"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  } ]
}