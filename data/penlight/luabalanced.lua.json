{
  "_filename": "luabalanced.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/luabalanced.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 92
  }, {
    "from": 2,
    "label": "calls",
    "to": 21
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 6
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 41
  }, {
    "from": 28,
    "label": "has",
    "to": 42
  }, {
    "from": 28,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 12
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 19
  }, {
    "from": 45,
    "label": "has",
    "to": 13
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 19
  }, {
    "from": 45,
    "label": "has",
    "to": 29
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 19
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 5
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 6
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 29
  }, {
    "from": 55,
    "label": "has",
    "to": 30
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 29
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 31
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 29
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 13
  }, {
    "from": 55,
    "label": "has",
    "to": 8
  }, {
    "from": 55,
    "label": "has",
    "to": 39
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 39
  }, {
    "from": 55,
    "label": "has",
    "to": 70
  }, {
    "from": 55,
    "label": "has",
    "to": 8
  }, {
    "from": 54,
    "label": "has",
    "to": 71
  }, {
    "from": 51,
    "label": "has",
    "to": 19
  }, {
    "from": 51,
    "label": "has",
    "to": 19
  }, {
    "from": 51,
    "label": "has",
    "to": 72
  }, {
    "from": 51,
    "label": "has",
    "to": 19
  }, {
    "from": 51,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 19
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 75
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 80
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 81
  }, {
    "from": 83,
    "label": "has",
    "to": 19
  }, {
    "from": 83,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 99,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 99,
    "label": "has",
    "to": 107
  }, {
    "from": 99,
    "label": "has",
    "to": 108
  }, {
    "from": 99,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 99,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 106
  }, {
    "from": 111,
    "label": "has",
    "to": 8
  }, {
    "from": 92,
    "label": "has",
    "to": 114
  }, {
    "from": 92,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 92,
    "label": "has",
    "to": 19
  }, {
    "from": 92,
    "label": "has",
    "to": 115
  }, {
    "from": 92,
    "label": "calls",
    "to": 119
  }, {
    "from": 92,
    "label": "calls",
    "to": 119
  }, {
    "from": 92,
    "label": "calls",
    "to": 119
  }, {
    "from": 92,
    "label": "calls",
    "to": 119
  }, {
    "from": 92,
    "label": "calls",
    "to": 119
  }, {
    "from": 51,
    "label": "calls",
    "to": 21
  }, {
    "from": 21,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 51,
    "label": "calls",
    "to": 3
  }, {
    "from": 92,
    "label": "calls",
    "to": 3
  }, {
    "from": 116,
    "label": "calls",
    "to": 121
  }, {
    "from": 83,
    "label": "calls",
    "to": 51
  }, {
    "from": 3,
    "label": "calls",
    "to": 120
  }, {
    "from": 3,
    "label": "calls",
    "to": 120
  }, {
    "from": 21,
    "label": "calls",
    "to": 120
  }, {
    "from": 21,
    "label": "calls",
    "to": 120
  }, {
    "from": 21,
    "label": "calls",
    "to": 120
  }, {
    "from": 21,
    "label": "calls",
    "to": 120
  }, {
    "from": 21,
    "label": "calls",
    "to": 120
  }, {
    "from": 51,
    "label": "calls",
    "to": 120
  }, {
    "from": 51,
    "label": "calls",
    "to": 120
  }, {
    "from": 83,
    "label": "calls",
    "to": 120
  }, {
    "from": 92,
    "label": "calls",
    "to": 120
  }, {
    "from": 51,
    "label": "calls",
    "to": 45
  }, {
    "from": 92,
    "label": "calls",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 116
  }, {
    "from": 116,
    "label": "declares",
    "to": 3
  }, {
    "from": 116,
    "label": "declares",
    "to": 21
  }, {
    "from": 116,
    "label": "declares",
    "to": 45
  }, {
    "from": 116,
    "label": "declares",
    "to": 51
  }, {
    "from": 116,
    "label": "declares",
    "to": 74
  }, {
    "from": 116,
    "label": "declares",
    "to": 83
  }, {
    "from": 116,
    "label": "declares",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 122,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 122,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 122,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 122,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 131,
    "label": "assigns",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 131,
    "label": "assigns",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 122,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 122,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 141,
    "label": "assigns",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 141,
    "label": "assigns",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 122,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 149,
    "label": "assigns",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 149,
    "label": "assigns",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 122,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 122,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 122,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 122,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 122,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 122,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 1,
    "label": "provides",
    "to": 168
  }, {
    "from": 124,
    "label": "represents",
    "to": 169
  }, {
    "from": 168,
    "label": "provides",
    "to": 169
  }, {
    "from": 124,
    "label": "represents",
    "to": 170
  }, {
    "from": 124,
    "label": "represents",
    "to": 171
  }, {
    "from": 124,
    "label": "contains",
    "to": 117
  }, {
    "from": 124,
    "label": "contains",
    "to": 118
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luabalanced",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function parse_comprehension(expr)\r\n  local t = {}\r\n  local pos = 1\r\n\r\n  -- extract opname (if exists)\r\n  local opname\r\n  local tok, post = expr:match('^%s*([%a_][%w_]*)%s*%(()', pos)\r\n  local pose = #expr + 1\r\n  if tok then\r\n    local tok2, posb = lb.match_bracketed(expr, post-1)\r\n    assert(tok2, 'syntax error')\r\n    if expr:match('^%s*$', posb) then\r\n      opname = tok\r\n      pose = posb - 1\r\n      pos = post\r\n    end\r\n  end\r\n  opname = opname or \"list\"\r\n\r\n  -- extract out expression list\r\n  local out; out, pos = lb.match_explist(expr, pos)\r\n  assert(out, \"syntax error: missing expression list\")\r\n  out = table_concat(out, ', ')\r\n\r\n  -- extract \"for\" clauses\r\n  local fortypes = {}\r\n  local invarlists = {}\r\n  local invallists = {}\r\n  while 1 do\r\n    local post = expr:match('^%s*for%s+()', pos)\r\n    if not post then break end\r\n    pos = post\r\n\r\n    -- extract input vars\r\n    local iv; iv, pos = lb.match_namelist(expr, pos)\r\n    assert(#iv > 0, 'syntax error: zero variables')\r\n    for _,ident in ipairs(iv) do\r\n      assert(not ident:match'^__',\r\n             \"identifier \" .. ident .. \" may not contain __ prefix\")\r\n    end\r\n    invarlists[#invarlists+1] = iv\r\n\r\n    -- extract '=' or 'in' (optional)\r\n    local fortype, post = expr:match('^(=)%s*()', pos)\r\n    if not fortype then fortype, post = expr:match('^(in)%s+()', pos) end\r\n    if fortype then\r\n      pos = post\r\n      -- extract input value range\r\n      local il; il, pos = lb.match_explist(expr, pos)\r\n      assert(#il > 0, 'syntax error: zero expressions')\r\n      assert(fortype ~= '=' or #il == 2 or #il == 3,\r\n             'syntax error: numeric for requires 2 or three expressions')\r\n      fortypes[#invarlists] = fortype\r\n      invallists[#invarlists] = il\r\n    else\r\n      fortypes[#invarlists] = false\r\n      invallists[#invarlists] = false\r\n    end\r\n  end\r\n  assert(#invarlists > 0, 'syntax error: missing \"for\" clause')\r\n\r\n  -- extract \"if\" clauses\r\n  local preds = {}\r\n  while 1 do\r\n    local post = expr:match('^%s*if%s+()', pos)\r\n    if not post then break end\r\n    pos = post\r\n    local pred; pred, pos = lb.match_expression(expr, pos)\r\n    assert(pred, 'syntax error: predicated expression not found')\r\n    preds[#preds+1] = pred\r\n  end\r\n\r\n  -- extract number of parameter variables (name matching \"_%d+\")\r\n  local stmp = ''; lb.gsub(expr, function(u, sin)  -- strip comments/strings\r\n    if u == 'e' then stmp = stmp .. ' ' .. sin .. ' ' end\r\n  end)\r\n  local max_param = 0; stmp:gsub('[%a_][%w_]*', function(s)\r\n    local s = s:match('^_(%d+)$')\r\n    if s then max_param = math_max(max_param, tonumber(s)) end\r\n  end)\r\n\r\n  if pos ~= pose then\r\n    assert(false, \"syntax error: unrecognized \" .. expr:sub(pos))\r\n  end\r\n\r\n  --DEBUG:\r\n  --print('----\\n', string.format(\"%q\", expr), string.format(\"%q\", out), opname)\r\n  --for k,v in ipairs(invarlists) do print(k,v, invallists[k]) end\r\n  --for k,v in ipairs(preds) do print(k,v) end\r\n\r\n  return out, fortypes, invarlists, invallists, preds, opname, max_param\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function match_string(s, pos)\r\n  pos = pos or 1\r\n  local posa = pos\r\n  local c = s:sub(pos,pos)\r\n  if c == '\"' or c == \"'\" then\r\n    pos = pos + 1\r\n    while 1 do\r\n      pos = assert(s:find(\"[\" .. c .. \"\\\\]\", pos), 'syntax error')\r\n      if s:sub(pos,pos) == c then\r\n        local part = s:sub(posa, pos)\r\n        return part, pos + 1\r\n      else\r\n        pos = pos + 2\r\n      end\r\n    end\r\n  else\r\n    local sc = s:match(\"^%[(=*)%[\", pos)\r\n    if sc then\r\n      local _; _, pos = s:find(\"%]\" .. sc .. \"%]\", pos)\r\n      assert(pos)\r\n      local part = s:sub(posa, pos)\r\n      return part, pos + 1\r\n    else\r\n      return nil, pos\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "pos = pos or 1",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "local posa = pos",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local c = s:sub(pos,pos)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if c == '\"' or c == \"'\" then\r\n    pos = pos + 1\r\n    while 1 do\r\n      pos = assert(s:find(\"[\" .. c .. \"\\\\]\", pos), 'syntax error')\r\n      if s:sub(pos,pos) == c then\r\n        local part = s:sub(posa, pos)\r\n        return part, pos + 1\r\n      else\r\n        pos = pos + 2\r\n      end\r\n    end\r\n  else\r\n    local sc = s:match(\"^%[(=*)%[\", pos)\r\n    if sc then\r\n      local _; _, pos = s:find(\"%]\" .. sc .. \"%]\", pos)\r\n      assert(pos)\r\n      local part = s:sub(posa, pos)\r\n      return part, pos + 1\r\n    else\r\n      return nil, pos\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "pos = pos + 1",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "while 1 do\r\n      pos = assert(s:find(\"[\" .. c .. \"\\\\]\", pos), 'syntax error')\r\n      if s:sub(pos,pos) == c then\r\n        local part = s:sub(posa, pos)\r\n        return part, pos + 1\r\n      else\r\n        pos = pos + 2\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 10,
    "text": "pos = assert(s:find(\"[\" .. c .. \"\\\\]\", pos), 'syntax error')",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if s:sub(pos,pos) == c then\r\n        local part = s:sub(posa, pos)\r\n        return part, pos + 1\r\n      else\r\n        pos = pos + 2\r\n      end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "local part = s:sub(posa, pos)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "pos = pos + 2",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local sc = s:match(\"^%[(=*)%[\", pos)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if sc then\r\n      local _; _, pos = s:find(\"%]\" .. sc .. \"%]\", pos)\r\n      assert(pos)\r\n      local part = s:sub(posa, pos)\r\n      return part, pos + 1\r\n    else\r\n      return nil, pos\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local _",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "_, pos = s:find(\"%]\" .. sc .. \"%]\", pos)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "assert(pos)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function match_bracketed(s, pos)\r\n  pos = pos or 1\r\n  local posa = pos\r\n  local ca = s:sub(pos,pos)\r\n  if not ends[ca] then\r\n    return nil, pos\r\n  end\r\n  local stack = {}\r\n  while 1 do\r\n    pos = s:find('[%(%{%[%)%}%]\\\"\\']', pos)\r\n    assert(pos, 'syntax error: unbalanced')\r\n    local c = s:sub(pos,pos)\r\n    if c == '\"' or c == \"'\" then\r\n      local part; part, pos = match_string(s, pos)\r\n      assert(part)\r\n    elseif ends[c] then -- open\r\n      local mid, posb\r\n      if c == '[' then mid, posb = s:match('^%[(=*)%[()', pos) end\r\n      if mid then\r\n        pos = s:match('%]' .. mid .. '%]()', posb)\r\n        assert(pos, 'syntax error: long string not terminated')\r\n        if #stack == 0 then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end\r\n      else\r\n        stack[#stack+1] = c\r\n        pos = pos + 1\r\n      end\r\n    else -- close\r\n      assert(stack[#stack] == assert(begins[c]), 'syntax error: unbalanced')\r\n      stack[#stack] = nil\r\n      if #stack == 0 then\r\n        local part = s:sub(posa, pos)\r\n        return part, pos+1\r\n      end\r\n      pos = pos + 1\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local ca = s:sub(pos,pos)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not ends[ca] then\r\n    return nil, pos\r\n  end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local stack = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "while 1 do\r\n    pos = s:find('[%(%{%[%)%}%]\\\"\\']', pos)\r\n    assert(pos, 'syntax error: unbalanced')\r\n    local c = s:sub(pos,pos)\r\n    if c == '\"' or c == \"'\" then\r\n      local part; part, pos = match_string(s, pos)\r\n      assert(part)\r\n    elseif ends[c] then -- open\r\n      local mid, posb\r\n      if c == '[' then mid, posb = s:match('^%[(=*)%[()', pos) end\r\n      if mid then\r\n        pos = s:match('%]' .. mid .. '%]()', posb)\r\n        assert(pos, 'syntax error: long string not terminated')\r\n        if #stack == 0 then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end\r\n      else\r\n        stack[#stack+1] = c\r\n        pos = pos + 1\r\n      end\r\n    else -- close\r\n      assert(stack[#stack] == assert(begins[c]), 'syntax error: unbalanced')\r\n      stack[#stack] = nil\r\n      if #stack == 0 then\r\n        local part = s:sub(posa, pos)\r\n        return part, pos+1\r\n      end\r\n      pos = pos + 1\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 26,
    "text": "pos = s:find('[%(%{%[%)%}%]\\\"\\']', pos)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "assert(pos, 'syntax error: unbalanced')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "if c == '\"' or c == \"'\" then\r\n      local part; part, pos = match_string(s, pos)\r\n      assert(part)\r\n    elseif ends[c] then -- open\r\n      local mid, posb\r\n      if c == '[' then mid, posb = s:match('^%[(=*)%[()', pos) end\r\n      if mid then\r\n        pos = s:match('%]' .. mid .. '%]()', posb)\r\n        assert(pos, 'syntax error: long string not terminated')\r\n        if #stack == 0 then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end\r\n      else\r\n        stack[#stack+1] = c\r\n        pos = pos + 1\r\n      end\r\n    else -- close\r\n      assert(stack[#stack] == assert(begins[c]), 'syntax error: unbalanced')\r\n      stack[#stack] = nil\r\n      if #stack == 0 then\r\n        local part = s:sub(posa, pos)\r\n        return part, pos+1\r\n      end\r\n      pos = pos + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local part",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "part, pos = match_string(s, pos)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "assert(part)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local mid, posb",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if c == '[' then mid, posb = s:match('^%[(=*)%[()', pos) end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "mid, posb = s:match('^%[(=*)%[()', pos)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if mid then\r\n        pos = s:match('%]' .. mid .. '%]()', posb)\r\n        assert(pos, 'syntax error: long string not terminated')\r\n        if #stack == 0 then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end\r\n      else\r\n        stack[#stack+1] = c\r\n        pos = pos + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "pos = s:match('%]' .. mid .. '%]()', posb)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "assert(pos, 'syntax error: long string not terminated')",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "if #stack == 0 then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local part = s:sub(posa, pos-1)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "stack[#stack+1] = c",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "assert(stack[#stack] == assert(begins[c]), 'syntax error: unbalanced')",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "stack[#stack] = nil",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if #stack == 0 then\r\n        local part = s:sub(posa, pos)\r\n        return part, pos+1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function match_comment(s, pos)\r\n  pos = pos or 1\r\n  if s:sub(pos, pos+1) ~= '--' then\r\n    return nil, pos\r\n  end\r\n  pos = pos + 2\r\n  local partt, post = match_string(s, pos)\r\n  if partt then\r\n    return '--' .. partt, post\r\n  end\r\n  local part; part, pos = s:match('^([^\\n]*\\n?)()', pos)\r\n  return '--' .. part, pos\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if s:sub(pos, pos+1) ~= '--' then\r\n    return nil, pos\r\n  end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "local partt, post = match_string(s, pos)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if partt then\r\n    return '--' .. partt, post\r\n  end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "part, pos = s:match('^([^\\n]*\\n?)()', pos)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function match_expression(s, pos)\r\n  pos = pos or 1\r\n  local posa = pos\r\n  local lastident\r\n  local poscs, posce\r\n  while pos do\r\n    local c = s:sub(pos,pos)\r\n    if c == '\"' or c == \"'\" or c == '[' and s:find('^[=%[]', pos+1) then\r\n      local part; part, pos = match_string(s, pos)\r\n      assert(part, 'syntax error')\r\n    elseif c == '-' and s:sub(pos+1,pos+1) == '-' then\r\n      -- note: handle adjacent comments in loop to properly support\r\n      -- backtracing (poscs/posce).\r\n      poscs = pos\r\n      while s:sub(pos,pos+1) == '--' do\r\n        local part; part, pos = match_comment(s, pos)\r\n        assert(part)\r\n        pos = s:match('^%s*()', pos)\r\n        posce = pos\r\n      end\r\n    elseif c == '(' or c == '{' or c == '[' then\r\n      local part; part, pos = match_bracketed(s, pos)\r\n    elseif c == '=' and s:sub(pos+1,pos+1) == '=' then\r\n      pos = pos + 2  -- skip over two-char op containing '='\r\n    elseif c == '=' and is_compare[s:sub(pos-1,pos-1)] then\r\n      pos = pos + 1  -- skip over two-char op containing '='\r\n    elseif c:match'^[%)%}%];,=]' then\r\n      local part = s:sub(posa, pos-1)\r\n      return part, pos\r\n    elseif c:match'^[%w_]' then\r\n      local newident,newpos = s:match('^([%w_]+)()', pos)\r\n      if pos ~= posa and not wordop[newident] then -- non-first ident\r\n        local pose = ((posce == pos) and poscs or pos) - 1\r\n        while s:match('^%s', pose) do pose = pose - 1 end\r\n        local ce = s:sub(pose,pose)\r\n        if ce:match'[%)%}\\'\\\"%]]' or\r\n           ce:match'[%w_]' and not wordop[lastident]\r\n        then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end\r\n      end\r\n      lastident, pos = newident, newpos\r\n    else\r\n      pos = pos + 1\r\n    end\r\n    pos = s:find('[%(%{%[%)%}%]\\\"\\';,=%w_%-]', pos)\r\n  end\r\n  local part = s:sub(posa, #s)\r\n  return part, #s+1\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local lastident",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local poscs, posce",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "while pos do\r\n    local c = s:sub(pos,pos)\r\n    if c == '\"' or c == \"'\" or c == '[' and s:find('^[=%[]', pos+1) then\r\n      local part; part, pos = match_string(s, pos)\r\n      assert(part, 'syntax error')\r\n    elseif c == '-' and s:sub(pos+1,pos+1) == '-' then\r\n      -- note: handle adjacent comments in loop to properly support\r\n      -- backtracing (poscs/posce).\r\n      poscs = pos\r\n      while s:sub(pos,pos+1) == '--' do\r\n        local part; part, pos = match_comment(s, pos)\r\n        assert(part)\r\n        pos = s:match('^%s*()', pos)\r\n        posce = pos\r\n      end\r\n    elseif c == '(' or c == '{' or c == '[' then\r\n      local part; part, pos = match_bracketed(s, pos)\r\n    elseif c == '=' and s:sub(pos+1,pos+1) == '=' then\r\n      pos = pos + 2  -- skip over two-char op containing '='\r\n    elseif c == '=' and is_compare[s:sub(pos-1,pos-1)] then\r\n      pos = pos + 1  -- skip over two-char op containing '='\r\n    elseif c:match'^[%)%}%];,=]' then\r\n      local part = s:sub(posa, pos-1)\r\n      return part, pos\r\n    elseif c:match'^[%w_]' then\r\n      local newident,newpos = s:match('^([%w_]+)()', pos)\r\n      if pos ~= posa and not wordop[newident] then -- non-first ident\r\n        local pose = ((posce == pos) and poscs or pos) - 1\r\n        while s:match('^%s', pose) do pose = pose - 1 end\r\n        local ce = s:sub(pose,pose)\r\n        if ce:match'[%)%}\\'\\\"%]]' or\r\n           ce:match'[%w_]' and not wordop[lastident]\r\n        then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end\r\n      end\r\n      lastident, pos = newident, newpos\r\n    else\r\n      pos = pos + 1\r\n    end\r\n    pos = s:find('[%(%{%[%)%}%]\\\"\\';,=%w_%-]', pos)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 55,
    "text": "if c == '\"' or c == \"'\" or c == '[' and s:find('^[=%[]', pos+1) then\r\n      local part; part, pos = match_string(s, pos)\r\n      assert(part, 'syntax error')\r\n    elseif c == '-' and s:sub(pos+1,pos+1) == '-' then\r\n      -- note: handle adjacent comments in loop to properly support\r\n      -- backtracing (poscs/posce).\r\n      poscs = pos\r\n      while s:sub(pos,pos+1) == '--' do\r\n        local part; part, pos = match_comment(s, pos)\r\n        assert(part)\r\n        pos = s:match('^%s*()', pos)\r\n        posce = pos\r\n      end\r\n    elseif c == '(' or c == '{' or c == '[' then\r\n      local part; part, pos = match_bracketed(s, pos)\r\n    elseif c == '=' and s:sub(pos+1,pos+1) == '=' then\r\n      pos = pos + 2  -- skip over two-char op containing '='\r\n    elseif c == '=' and is_compare[s:sub(pos-1,pos-1)] then\r\n      pos = pos + 1  -- skip over two-char op containing '='\r\n    elseif c:match'^[%)%}%];,=]' then\r\n      local part = s:sub(posa, pos-1)\r\n      return part, pos\r\n    elseif c:match'^[%w_]' then\r\n      local newident,newpos = s:match('^([%w_]+)()', pos)\r\n      if pos ~= posa and not wordop[newident] then -- non-first ident\r\n        local pose = ((posce == pos) and poscs or pos) - 1\r\n        while s:match('^%s', pose) do pose = pose - 1 end\r\n        local ce = s:sub(pose,pose)\r\n        if ce:match'[%)%}\\'\\\"%]]' or\r\n           ce:match'[%w_]' and not wordop[lastident]\r\n        then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end\r\n      end\r\n      lastident, pos = newident, newpos\r\n    else\r\n      pos = pos + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "assert(part, 'syntax error')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "poscs = pos",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "while s:sub(pos,pos+1) == '--' do\r\n        local part; part, pos = match_comment(s, pos)\r\n        assert(part)\r\n        pos = s:match('^%s*()', pos)\r\n        posce = pos\r\n      end",
    "type": "statement:while"
  }, {
    "id": 59,
    "text": "part, pos = match_comment(s, pos)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "pos = s:match('^%s*()', pos)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "posce = pos",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "part, pos = match_bracketed(s, pos)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "local newident,newpos = s:match('^([%w_]+)()', pos)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if pos ~= posa and not wordop[newident] then -- non-first ident\r\n        local pose = ((posce == pos) and poscs or pos) - 1\r\n        while s:match('^%s', pose) do pose = pose - 1 end\r\n        local ce = s:sub(pose,pose)\r\n        if ce:match'[%)%}\\'\\\"%]]' or\r\n           ce:match'[%w_]' and not wordop[lastident]\r\n        then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "local pose = ((posce == pos) and poscs or pos) - 1",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "while s:match('^%s', pose) do pose = pose - 1 end",
    "type": "statement:while"
  }, {
    "id": 67,
    "text": "pose = pose - 1",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "local ce = s:sub(pose,pose)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if ce:match'[%)%}\\'\\\"%]]' or\r\n           ce:match'[%w_]' and not wordop[lastident]\r\n        then\r\n          local part = s:sub(posa, pos-1)\r\n          return part, pos\r\n        end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "lastident, pos = newident, newpos",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "pos = s:find('[%(%{%[%)%}%]\\\"\\';,=%w_%-]', pos)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local part = s:sub(posa, #s)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "local function match_namelist(s, pos)\r\n  pos = pos or 1\r\n  local list = {}\r\n  while 1 do\r\n    local c = #list == 0 and '^' or '^%s*,%s*'\r\n    local item, post = s:match(c .. '([%a_][%w_]*)%s*()', pos)\r\n    if item then pos = post else break end\r\n    list[#list+1] = item\r\n  end\r\n  return list, pos\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "while 1 do\r\n    local c = #list == 0 and '^' or '^%s*,%s*'\r\n    local item, post = s:match(c .. '([%a_][%w_]*)%s*()', pos)\r\n    if item then pos = post else break end\r\n    list[#list+1] = item\r\n  end",
    "type": "statement:while"
  }, {
    "id": 77,
    "text": "local c = #list == 0 and '^' or '^%s*,%s*'",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local item, post = s:match(c .. '([%a_][%w_]*)%s*()', pos)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if item then pos = post else break end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "pos = post",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "list[#list+1] = item",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "local function match_explist(s, pos)\r\n  pos = pos or 1\r\n  local list = {}\r\n  while 1 do\r\n    if #list ~= 0 then\r\n      local post = s:match('^%s*,%s*()', pos)\r\n      if post then pos = post else break end\r\n    end\r\n    local item; item, pos = match_expression(s, pos)\r\n    assert(item, 'syntax error')\r\n    list[#list+1] = item\r\n  end\r\n  return list, pos\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "while 1 do\r\n    if #list ~= 0 then\r\n      local post = s:match('^%s*,%s*()', pos)\r\n      if post then pos = post else break end\r\n    end\r\n    local item; item, pos = match_expression(s, pos)\r\n    assert(item, 'syntax error')\r\n    list[#list+1] = item\r\n  end",
    "type": "statement:while"
  }, {
    "id": 85,
    "text": "if #list ~= 0 then\r\n      local post = s:match('^%s*,%s*()', pos)\r\n      if post then pos = post else break end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "local post = s:match('^%s*,%s*()', pos)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "if post then pos = post else break end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "local item",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "item, pos = match_expression(s, pos)",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "assert(item, 'syntax error')",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "local function gsub(s, f)\r\n  local pos = 1\r\n  local posa = 1\r\n  local sret = ''\r\n  while 1 do\r\n    pos = s:find('[%-\\'\\\"%[]', pos)\r\n    if not pos then break end\r\n    if s:match('^%-%-', pos) then\r\n      local exp = s:sub(posa, pos-1)\r\n      if #exp > 0 then sret = sret .. (f('e', exp) or exp) end\r\n      local comment; comment, pos = match_comment(s, pos)\r\n      sret = sret .. (f('c', assert(comment)) or comment)\r\n      posa = pos\r\n    else\r\n      local posb = s:find('^[\\'\\\"%[]', pos)\r\n      local str\r\n      if posb then str, pos = match_string(s, posb) end\r\n      if str then\r\n        local exp = s:sub(posa, posb-1)\r\n        if #exp > 0 then sret = sret .. (f('e', exp) or exp) end\r\n        sret = sret .. (f('s', str) or str)\r\n        posa = pos\r\n      else\r\n        pos = pos + 1\r\n      end\r\n    end\r\n  end\r\n  local exp = s:sub(posa)\r\n  if #exp > 0 then sret = sret .. (f('e', exp) or exp) end\r\n  return sret\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local posa = 1",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local sret = ''",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "while 1 do\r\n    pos = s:find('[%-\\'\\\"%[]', pos)\r\n    if not pos then break end\r\n    if s:match('^%-%-', pos) then\r\n      local exp = s:sub(posa, pos-1)\r\n      if #exp > 0 then sret = sret .. (f('e', exp) or exp) end\r\n      local comment; comment, pos = match_comment(s, pos)\r\n      sret = sret .. (f('c', assert(comment)) or comment)\r\n      posa = pos\r\n    else\r\n      local posb = s:find('^[\\'\\\"%[]', pos)\r\n      local str\r\n      if posb then str, pos = match_string(s, posb) end\r\n      if str then\r\n        local exp = s:sub(posa, posb-1)\r\n        if #exp > 0 then sret = sret .. (f('e', exp) or exp) end\r\n        sret = sret .. (f('s', str) or str)\r\n        posa = pos\r\n      else\r\n        pos = pos + 1\r\n      end\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 97,
    "text": "pos = s:find('[%-\\'\\\"%[]', pos)",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "if not pos then break end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "if s:match('^%-%-', pos) then\r\n      local exp = s:sub(posa, pos-1)\r\n      if #exp > 0 then sret = sret .. (f('e', exp) or exp) end\r\n      local comment; comment, pos = match_comment(s, pos)\r\n      sret = sret .. (f('c', assert(comment)) or comment)\r\n      posa = pos\r\n    else\r\n      local posb = s:find('^[\\'\\\"%[]', pos)\r\n      local str\r\n      if posb then str, pos = match_string(s, posb) end\r\n      if str then\r\n        local exp = s:sub(posa, posb-1)\r\n        if #exp > 0 then sret = sret .. (f('e', exp) or exp) end\r\n        sret = sret .. (f('s', str) or str)\r\n        posa = pos\r\n      else\r\n        pos = pos + 1\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "local exp = s:sub(posa, pos-1)",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if #exp > 0 then sret = sret .. (f('e', exp) or exp) end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "sret = sret .. (f('e', exp) or exp)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "local comment",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "comment, pos = match_comment(s, pos)",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "sret = sret .. (f('c', assert(comment)) or comment)",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "posa = pos",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "local posb = s:find('^[\\'\\\"%[]', pos)",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local str",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if posb then str, pos = match_string(s, posb) end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "str, pos = match_string(s, posb)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "if str then\r\n        local exp = s:sub(posa, posb-1)\r\n        if #exp > 0 then sret = sret .. (f('e', exp) or exp) end\r\n        sret = sret .. (f('s', str) or str)\r\n        posa = pos\r\n      else\r\n        pos = pos + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "local exp = s:sub(posa, posb-1)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "sret = sret .. (f('s', str) or str)",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "local exp = s:sub(posa)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "",
    "type": "function container"
  }, {
    "id": 117,
    "text": "function M.answer ()\r\n    Boo = false  -- fine, it's a declared global\r\n    -- in strict mode, you cannot assign to globals if you aren't in main\r\n    test.assertraise(function()\r\n        Foo = true\r\n    end,\" assign to undeclared global 'Foo'\")\r\n    return 42\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "function M.question ()\r\n    return 'what is the answer to Life, the Universe and Everything?'\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "f",
    "type": "global function"
  }, {
    "id": 120,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 121,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 122,
    "text": "",
    "type": "variable container"
  }, {
    "id": 123,
    "text": "",
    "type": "require container"
  }, {
    "id": 124,
    "text": "",
    "type": "local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 132,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 133,
    "text": "",
    "type": "string"
  }, {
    "id": 134,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 135,
    "text": "",
    "type": "string"
  }, {
    "id": 136,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 137,
    "text": "",
    "type": "string"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 142,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 143,
    "text": "",
    "type": "boolean"
  }, {
    "id": 144,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 145,
    "text": "",
    "type": "boolean"
  }, {
    "id": 146,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 147,
    "text": "",
    "type": "boolean"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 150,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 151,
    "text": "",
    "type": "boolean"
  }, {
    "id": 152,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 153,
    "text": "",
    "type": "boolean"
  }, {
    "id": 154,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 155,
    "text": "",
    "type": "boolean"
  }, {
    "id": 156,
    "text": "",
    "type": "global variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "global variable"
  }, {
    "id": 159,
    "text": "",
    "type": "n/a"
  }, {
    "id": 160,
    "text": "",
    "type": "global variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "global variable"
  }, {
    "id": 163,
    "text": "",
    "type": "n/a"
  }, {
    "id": 164,
    "text": "",
    "type": "global variable"
  }, {
    "id": 165,
    "text": "",
    "type": "n/a"
  }, {
    "id": 166,
    "text": "",
    "type": "global variable"
  }, {
    "id": 167,
    "text": "",
    "type": "n/a"
  }, {
    "id": 168,
    "text": "",
    "type": "interface container"
  }, {
    "id": 169,
    "text": "",
    "type": "interface"
  }, {
    "id": 170,
    "text": "",
    "type": "interface"
  }, {
    "id": 171,
    "text": "",
    "type": "interface"
  } ]
}