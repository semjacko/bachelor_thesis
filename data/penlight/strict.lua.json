{
  "_filename": "strict.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/strict.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 6,
    "label": "has",
    "to": 21
  }, {
    "from": 6,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 22,
    "label": "has",
    "to": 32
  }, {
    "from": 6,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 34,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 34,
    "label": "has",
    "to": 44
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 46,
    "label": "has",
    "to": 32
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 34,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 34,
    "label": "has",
    "to": 44
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 16
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 4
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 62
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 6,
    "label": "calls",
    "to": 75
  }, {
    "from": 6,
    "label": "calls",
    "to": 69
  }, {
    "from": 6,
    "label": "calls",
    "to": 77
  }, {
    "from": 55,
    "label": "calls",
    "to": 77
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 6,
    "label": "calls",
    "to": 74
  }, {
    "from": 6,
    "label": "calls",
    "to": 74
  }, {
    "from": 6,
    "label": "calls",
    "to": 76
  }, {
    "from": 55,
    "label": "calls",
    "to": 76
  }, {
    "from": 6,
    "label": "calls",
    "to": 67
  }, {
    "from": 6,
    "label": "calls",
    "to": 67
  }, {
    "from": 6,
    "label": "calls",
    "to": 67
  }, {
    "from": 66,
    "label": "calls",
    "to": 67
  }, {
    "from": 50,
    "label": "calls",
    "to": 6
  }, {
    "from": 55,
    "label": "calls",
    "to": 6
  }, {
    "from": 66,
    "label": "calls",
    "to": 6
  }, {
    "from": 6,
    "label": "calls",
    "to": 72
  }, {
    "from": 6,
    "label": "calls",
    "to": 72
  }, {
    "from": 50,
    "label": "calls",
    "to": 72
  }, {
    "from": 66,
    "label": "calls",
    "to": 71
  }, {
    "from": 6,
    "label": "calls",
    "to": 68
  }, {
    "from": 50,
    "label": "calls",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 66,
    "label": "declares",
    "to": 2
  }, {
    "from": 66,
    "label": "declares",
    "to": 6
  }, {
    "from": 66,
    "label": "declares",
    "to": 46
  }, {
    "from": 66,
    "label": "declares",
    "to": 48
  }, {
    "from": 66,
    "label": "declares",
    "to": 50
  }, {
    "from": 66,
    "label": "declares",
    "to": 55
  }, {
    "from": 66,
    "label": "declares",
    "to": 64
  }, {
    "from": 78,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 79,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 79,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 79,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 79,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 79,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 80,
    "label": "initializes",
    "to": 78
  }, {
    "from": 1,
    "label": "provides",
    "to": 91
  }, {
    "from": 89,
    "label": "represents",
    "to": 92
  }, {
    "from": 91,
    "label": "provides",
    "to": 92
  }, {
    "from": 93,
    "label": "requires",
    "to": 1
  }, {
    "from": 94,
    "label": "requires",
    "to": 1
  }, {
    "from": 89,
    "label": "contains",
    "to": 6
  }, {
    "from": 89,
    "label": "contains",
    "to": 50
  }, {
    "from": 89,
    "label": "contains",
    "to": 55
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "strict",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function what ()\r\n    local d = getinfo(3, \"S\")\r\n    return d and d.what or \"C\"\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local d = getinfo(3, \"S\")",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function strict.module (name,mod,predeclared)\r\n    local mt, old_newindex, old_index, old_index_type, global, closed\r\n    if predeclared then\r\n        global = predeclared.__global\r\n        closed = predeclared.__closed\r\n    end\r\n    if type(mod) == 'table' then\r\n        mt = getmetatable(mod)\r\n        if mt and rawget(mt,'__declared') then return end -- already patched...\r\n    else\r\n        mod = {}\r\n    end\r\n    if mt == nil then\r\n        mt = {}\r\n        setmetatable(mod, mt)\r\n    else\r\n        old_newindex = mt.__newindex\r\n        old_index = mt.__index\r\n        old_index_type = type(old_index)\r\n    end\r\n    mt.__declared = predeclared or {}\r\n    mt.__newindex = function(t, n, v)\r\n        if old_newindex then\r\n            old_newindex(t, n, v)\r\n            if rawget(t,n)~=nil then return end\r\n        end\r\n        if not mt.__declared[n] then\r\n            if global then\r\n                local w = what()\r\n                if w ~= \"main\" and w ~= \"C\" then\r\n                    error(\"assign to undeclared global '\"..n..\"'\", 2)\r\n                end\r\n            end\r\n            mt.__declared[n] = true\r\n        end\r\n        rawset(t, n, v)\r\n    end\r\n    mt.__index = function(t,n)\r\n        if not mt.__declared[n] and what() ~= \"C\" then\r\n            if old_index then\r\n                if old_index_type == \"table\" then\r\n                    local fallback = old_index[n]\r\n                    if fallback ~= nil then\r\n                        return fallback\r\n                    end \r\n                else\r\n                    local res = old_index(t, n)\r\n                    if res then return res end \r\n                end \r\n            end\r\n            local msg = \"variable '\"..n..\"' is not declared\"\r\n            if name then\r\n                msg = msg .. \" in '\"..name..\"'\"\r\n            end\r\n            error(msg, 2)\r\n        end\r\n        return rawget(t, n)\r\n    end\r\n    return mod\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local mt, old_newindex, old_index, old_index_type, global, closed",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if predeclared then\r\n        global = predeclared.__global\r\n        closed = predeclared.__closed\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "global = predeclared.__global",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "closed = predeclared.__closed",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if type(mod) == 'table' then\r\n        mt = getmetatable(mod)\r\n        if mt and rawget(mt,'__declared') then return end -- already patched...\r\n    else\r\n        mod = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "mt = getmetatable(mod)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if mt and rawget(mt,'__declared') then return end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "mod = {}",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if mt == nil then\r\n        mt = {}\r\n        setmetatable(mod, mt)\r\n    else\r\n        old_newindex = mt.__newindex\r\n        old_index = mt.__index\r\n        old_index_type = type(old_index)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "mt = {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "setmetatable(mod, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "old_newindex = mt.__newindex",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "old_index = mt.__index",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "old_index_type = type(old_index)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "mt.__declared = predeclared or {}",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "mt.__newindex = function(t, n, v)\r\n        if old_newindex then\r\n            old_newindex(t, n, v)\r\n            if rawget(t,n)~=nil then return end\r\n        end\r\n        if not mt.__declared[n] then\r\n            if global then\r\n                local w = what()\r\n                if w ~= \"main\" and w ~= \"C\" then\r\n                    error(\"assign to undeclared global '\"..n..\"'\", 2)\r\n                end\r\n            end\r\n            mt.__declared[n] = true\r\n        end\r\n        rawset(t, n, v)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if old_newindex then\r\n            old_newindex(t, n, v)\r\n            if rawget(t,n)~=nil then return end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "old_newindex(t, n, v)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if rawget(t,n)~=nil then return end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if not mt.__declared[n] then\r\n            if global then\r\n                local w = what()\r\n                if w ~= \"main\" and w ~= \"C\" then\r\n                    error(\"assign to undeclared global '\"..n..\"'\", 2)\r\n                end\r\n            end\r\n            mt.__declared[n] = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "if global then\r\n                local w = what()\r\n                if w ~= \"main\" and w ~= \"C\" then\r\n                    error(\"assign to undeclared global '\"..n..\"'\", 2)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local w = what()",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if w ~= \"main\" and w ~= \"C\" then\r\n                    error(\"assign to undeclared global '\"..n..\"'\", 2)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "error(\"assign to undeclared global '\"..n..\"'\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "mt.__declared[n] = true",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "rawset(t, n, v)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "mt.__index = function(t,n)\r\n        if not mt.__declared[n] and what() ~= \"C\" then\r\n            if old_index then\r\n                if old_index_type == \"table\" then\r\n                    local fallback = old_index[n]\r\n                    if fallback ~= nil then\r\n                        return fallback\r\n                    end \r\n                else\r\n                    local res = old_index(t, n)\r\n                    if res then return res end \r\n                end \r\n            end\r\n            local msg = \"variable '\"..n..\"' is not declared\"\r\n            if name then\r\n                msg = msg .. \" in '\"..name..\"'\"\r\n            end\r\n            error(msg, 2)\r\n        end\r\n        return rawget(t, n)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if not mt.__declared[n] and what() ~= \"C\" then\r\n            if old_index then\r\n                if old_index_type == \"table\" then\r\n                    local fallback = old_index[n]\r\n                    if fallback ~= nil then\r\n                        return fallback\r\n                    end \r\n                else\r\n                    local res = old_index(t, n)\r\n                    if res then return res end \r\n                end \r\n            end\r\n            local msg = \"variable '\"..n..\"' is not declared\"\r\n            if name then\r\n                msg = msg .. \" in '\"..name..\"'\"\r\n            end\r\n            error(msg, 2)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if old_index then\r\n                if old_index_type == \"table\" then\r\n                    local fallback = old_index[n]\r\n                    if fallback ~= nil then\r\n                        return fallback\r\n                    end \r\n                else\r\n                    local res = old_index(t, n)\r\n                    if res then return res end \r\n                end \r\n            end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if old_index_type == \"table\" then\r\n                    local fallback = old_index[n]\r\n                    if fallback ~= nil then\r\n                        return fallback\r\n                    end \r\n                else\r\n                    local res = old_index(t, n)\r\n                    if res then return res end \r\n                end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local fallback = old_index[n]",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if fallback ~= nil then\r\n                        return fallback\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local res = old_index(t, n)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if res then return res end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "local msg = \"variable '\"..n..\"' is not declared\"",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if name then\r\n                msg = msg .. \" in '\"..name..\"'\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "msg = msg .. \" in '\"..name..\"'\"",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "error(msg, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function(t, n, v)\r\n        if old_newindex then\r\n            old_newindex(t, n, v)\r\n            if rawget(t,n)~=nil then return end\r\n        end\r\n        if not mt.__declared[n] then\r\n            if global then\r\n                local w = what()\r\n                if w ~= \"main\" and w ~= \"C\" then\r\n                    error(\"assign to undeclared global '\"..n..\"'\", 2)\r\n                end\r\n            end\r\n            mt.__declared[n] = true\r\n        end\r\n        rawset(t, n, v)\r\n    end",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function(t,n)\r\n        if not mt.__declared[n] and what() ~= \"C\" then\r\n            if old_index then\r\n                if old_index_type == \"table\" then\r\n                    local fallback = old_index[n]\r\n                    if fallback ~= nil then\r\n                        return fallback\r\n                    end \r\n                else\r\n                    local res = old_index(t, n)\r\n                    if res then return res end \r\n                end \r\n            end\r\n            local msg = \"variable '\"..n..\"' is not declared\"\r\n            if name then\r\n                msg = msg .. \" in '\"..name..\"'\"\r\n            end\r\n            error(msg, 2)\r\n        end\r\n        return rawget(t, n)\r\n    end",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function strict.make_all_strict (T)\r\n    for k,v in pairs(T) do\r\n        if type(v) == 'table' and v ~= T then\r\n            strict.module(k,v)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "for k,v in pairs(T) do\r\n        if type(v) == 'table' and v ~= T then\r\n            strict.module(k,v)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 52,
    "text": "if type(v) == 'table' and v ~= T then\r\n            strict.module(k,v)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "strict.module(k,v)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function strict.closed_module (mod,name)\r\n    local M = {}\r\n    mod = mod or {}\r\n    local mt = getmetatable(mod)\r\n    if not mt then\r\n        mt = {}\r\n        setmetatable(mod,mt)\r\n    end\r\n    mt.__newindex = function(t,k,v)\r\n        M[k] = v\r\n    end\r\n    return strict.module(name,M)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local M = {}",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "mod = mod or {}",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "local mt = getmetatable(mod)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if not mt then\r\n        mt = {}\r\n        setmetatable(mod,mt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "setmetatable(mod,mt)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "mt.__newindex = function(t,k,v)\r\n        M[k] = v\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "M[k] = v",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function(t,k,v)\r\n        M[k] = v\r\n    end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "",
    "type": "function container"
  }, {
    "id": 67,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 68,
    "text": "old_index",
    "type": "global function"
  }, {
    "id": 69,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 70,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 71,
    "text": "require",
    "type": "global function"
  }, {
    "id": 72,
    "text": "type",
    "type": "global function"
  }, {
    "id": 73,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 74,
    "text": "error",
    "type": "global function"
  }, {
    "id": 75,
    "text": "old_newindex",
    "type": "global function"
  }, {
    "id": 76,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 77,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 78,
    "text": "",
    "type": "global variable"
  }, {
    "id": 79,
    "text": "",
    "type": "variable container"
  }, {
    "id": 80,
    "text": "",
    "type": "require container"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 91,
    "text": "",
    "type": "interface container"
  }, {
    "id": 92,
    "text": "",
    "type": "interface"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "require local variable"
  } ]
}