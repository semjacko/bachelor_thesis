{
  "_filename": "run.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/run.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "calls",
    "to": 20
  }, {
    "from": 18,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 18,
    "label": "calls",
    "to": 22
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 24
  }, {
    "from": 18,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 18,
    "label": "calls",
    "to": 23
  }, {
    "from": 18,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 18,
    "label": "calls",
    "to": 25
  }, {
    "from": 18,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 21
  }, {
    "from": 1,
    "label": "contains",
    "to": 18
  }, {
    "from": 18,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 30,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "assigns",
    "to": 33
  }, {
    "from": 30,
    "label": "initializes",
    "to": 34
  }, {
    "from": 34,
    "label": "assigns",
    "to": 35
  }, {
    "from": 30,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 30,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 30,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 30,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 30,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 30,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 31,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "requires",
    "to": 19
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "run",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function run_directory(dir)\r\n    local files = {}\r\n    for path in lfs.dir(dir) do\r\n        local full_path = dir .. dir_sep .. path\r\n        if path:find(\"%.lua$\") and lfs.attributes(full_path, \"mode\") == \"file\" then\r\n            table.insert(files, full_path)\r\n        end\r\n    end\r\n    table.sort(files)\r\n\r\n    for _, file in ipairs(files) do\r\n        local cmd = lua .. \" \" .. file\r\n        print(\"Running \" .. file)\r\n        local code1, _, code2 = os.execute(cmd)\r\n        local code = type(code1) == \"number\" and code1 or code2\r\n\r\n        if code ~= 0 then\r\n            print((\"Running %s failed with code %d\"):format(file, code))\r\n            os.exit(1)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local files = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for path in lfs.dir(dir) do\r\n        local full_path = dir .. dir_sep .. path\r\n        if path:find(\"%.lua$\") and lfs.attributes(full_path, \"mode\") == \"file\" then\r\n            table.insert(files, full_path)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "local full_path = dir .. dir_sep .. path",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if path:find(\"%.lua$\") and lfs.attributes(full_path, \"mode\") == \"file\" then\r\n            table.insert(files, full_path)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "table.insert(files, full_path)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "table.sort(files)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "for _, file in ipairs(files) do\r\n        local cmd = lua .. \" \" .. file\r\n        print(\"Running \" .. file)\r\n        local code1, _, code2 = os.execute(cmd)\r\n        local code = type(code1) == \"number\" and code1 or code2\r\n\r\n        if code ~= 0 then\r\n            print((\"Running %s failed with code %d\"):format(file, code))\r\n            os.exit(1)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "local cmd = lua .. \" \" .. file",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "print(\"Running \" .. file)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local code1, _, code2 = os.execute(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local code = type(code1) == \"number\" and code1 or code2",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if code ~= 0 then\r\n            print((\"Running %s failed with code %d\"):format(file, code))\r\n            os.exit(1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "print((\"Running %s failed with code %d\"):format(file, code))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "",
    "type": "function container"
  }, {
    "id": 19,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 20,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 21,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 22,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 23,
    "text": "print",
    "type": "global function"
  }, {
    "id": 24,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 25,
    "text": "require",
    "type": "global function"
  }, {
    "id": 26,
    "text": "type",
    "type": "global function"
  }, {
    "id": 27,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 28,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 29,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 30,
    "text": "",
    "type": "variable container"
  }, {
    "id": 31,
    "text": "",
    "type": "require container"
  }, {
    "id": 32,
    "text": "",
    "type": "local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 34,
    "text": "",
    "type": "local variable"
  }, {
    "id": 35,
    "text": "",
    "type": "boolean"
  }, {
    "id": 36,
    "text": "",
    "type": "local variable"
  }, {
    "id": 37,
    "text": "",
    "type": "string"
  }, {
    "id": 38,
    "text": "",
    "type": "local variable"
  }, {
    "id": 39,
    "text": "",
    "type": "unop"
  }, {
    "id": 40,
    "text": "",
    "type": "local variable"
  }, {
    "id": 41,
    "text": "",
    "type": "n/a"
  }, {
    "id": 42,
    "text": "",
    "type": "local variable"
  }, {
    "id": 43,
    "text": "",
    "type": "n/a"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "global variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "require local variable"
  } ]
}