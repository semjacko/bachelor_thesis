{
  "_filename": "test-executeex.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/penlight/tests/test-executeex.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 12
  }, {
    "from": 9,
    "label": "calls",
    "to": 12
  }, {
    "from": 9,
    "label": "calls",
    "to": 12
  }, {
    "from": 9,
    "label": "calls",
    "to": 12
  }, {
    "from": 2,
    "label": "calls",
    "to": 10
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 9
  }, {
    "from": 9,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 14
  }, {
    "from": 13,
    "label": "initializes",
    "to": 15
  }, {
    "from": 15,
    "label": "assigns",
    "to": 16
  }, {
    "from": 13,
    "label": "initializes",
    "to": 17
  }, {
    "from": 17,
    "label": "assigns",
    "to": 18
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test-executeex",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function test_executeex(cmd, expected_successful, expected_retcode, expected_stdout, expected_stderr)\r\n    local successful, retcode, stdout, stderr = utils.executeex(cmd)\r\n    asserteq(successful, expected_successful)\r\n    asserteq(retcode,    expected_retcode * retcode_multiplier)\r\n    asserteq(stdout,     expected_stdout)\r\n    asserteq(stderr,     expected_stderr)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local successful, retcode, stdout, stderr = utils.executeex(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "asserteq(successful, expected_successful)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "asserteq(retcode,    expected_retcode * retcode_multiplier)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "asserteq(stdout,     expected_stdout)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "asserteq(stderr,     expected_stderr)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "",
    "type": "function container"
  }, {
    "id": 10,
    "text": "executeex",
    "type": "global function"
  }, {
    "id": 11,
    "text": "asserteq",
    "type": "global function"
  }, {
    "id": 12,
    "text": "require",
    "type": "global function"
  }, {
    "id": 13,
    "text": "",
    "type": "variable container"
  }, {
    "id": 14,
    "text": "",
    "type": "require container"
  }, {
    "id": 15,
    "text": "",
    "type": "local variable"
  }, {
    "id": 16,
    "text": "",
    "type": "string"
  }, {
    "id": 17,
    "text": "",
    "type": "local variable"
  }, {
    "id": 18,
    "text": "",
    "type": "number"
  } ]
}