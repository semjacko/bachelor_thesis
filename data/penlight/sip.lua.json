{
  "_filename": "sip.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/sip.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 20,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 20,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 20,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 20,
    "label": "has",
    "to": 42
  }, {
    "from": 20,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 47
  }, {
    "from": 20,
    "label": "has",
    "to": 48
  }, {
    "from": 20,
    "label": "has",
    "to": 49
  }, {
    "from": 20,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 50,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 58
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 50,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 68
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 70,
    "label": "has",
    "to": 32
  }, {
    "from": 70,
    "label": "has",
    "to": 33
  }, {
    "from": 70,
    "label": "has",
    "to": 34
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 7
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 7
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 83
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 74,
    "label": "has",
    "to": 85
  }, {
    "from": 74,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 74,
    "label": "has",
    "to": 7
  }, {
    "from": 74,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 21
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 7
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 98,
    "label": "has",
    "to": 103
  }, {
    "from": 98,
    "label": "has",
    "to": 104
  }, {
    "from": 98,
    "label": "has",
    "to": 7
  }, {
    "from": 98,
    "label": "has",
    "to": 7
  }, {
    "from": 98,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 21
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 106,
    "label": "has",
    "to": 7
  }, {
    "from": 106,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 7
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 21
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 7
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 7
  }, {
    "from": 114,
    "label": "has",
    "to": 25
  }, {
    "from": 114,
    "label": "has",
    "to": 7
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 114,
    "label": "has",
    "to": 7
  }, {
    "from": 114,
    "label": "has",
    "to": 7
  }, {
    "from": 114,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 21
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 115
  }, {
    "from": 129,
    "label": "has",
    "to": 7
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 129,
    "label": "has",
    "to": 7
  }, {
    "from": 129,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 129,
    "label": "has",
    "to": 25
  }, {
    "from": 129,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 123
  }, {
    "from": 129,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 129,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 12
  }, {
    "from": 148,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 148,
    "label": "has",
    "to": 7
  }, {
    "from": 148,
    "label": "has",
    "to": 7
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 46
  }, {
    "from": 150,
    "label": "has",
    "to": 7
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 51
  }, {
    "from": 152,
    "label": "has",
    "to": 52
  }, {
    "from": 152,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 152,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 152,
    "label": "has",
    "to": 59
  }, {
    "from": 152,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 58
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 152,
    "label": "has",
    "to": 7
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 154,
    "label": "has",
    "to": 7
  }, {
    "from": 154,
    "label": "has",
    "to": 7
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 11
  }, {
    "from": 129,
    "label": "calls",
    "to": 172
  }, {
    "from": 2,
    "label": "calls",
    "to": 173
  }, {
    "from": 129,
    "label": "calls",
    "to": 168
  }, {
    "from": 156,
    "label": "calls",
    "to": 158
  }, {
    "from": 156,
    "label": "calls",
    "to": 158
  }, {
    "from": 156,
    "label": "calls",
    "to": 158
  }, {
    "from": 98,
    "label": "calls",
    "to": 158
  }, {
    "from": 156,
    "label": "calls",
    "to": 6
  }, {
    "from": 156,
    "label": "calls",
    "to": 6
  }, {
    "from": 156,
    "label": "calls",
    "to": 6
  }, {
    "from": 156,
    "label": "calls",
    "to": 6
  }, {
    "from": 74,
    "label": "calls",
    "to": 20
  }, {
    "from": 74,
    "label": "calls",
    "to": 72
  }, {
    "from": 129,
    "label": "calls",
    "to": 170
  }, {
    "from": 129,
    "label": "calls",
    "to": 170
  }, {
    "from": 129,
    "label": "calls",
    "to": 125
  }, {
    "from": 2,
    "label": "calls",
    "to": 165
  }, {
    "from": 20,
    "label": "calls",
    "to": 165
  }, {
    "from": 74,
    "label": "calls",
    "to": 165
  }, {
    "from": 129,
    "label": "calls",
    "to": 165
  }, {
    "from": 20,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 129,
    "label": "calls",
    "to": 159
  }, {
    "from": 129,
    "label": "calls",
    "to": 159
  }, {
    "from": 70,
    "label": "calls",
    "to": 160
  }, {
    "from": 20,
    "label": "calls",
    "to": 160
  }, {
    "from": 74,
    "label": "calls",
    "to": 160
  }, {
    "from": 125,
    "label": "calls",
    "to": 160
  }, {
    "from": 20,
    "label": "calls",
    "to": 9
  }, {
    "from": 20,
    "label": "calls",
    "to": 9
  }, {
    "from": 98,
    "label": "calls",
    "to": 161
  }, {
    "from": 20,
    "label": "calls",
    "to": 2
  }, {
    "from": 98,
    "label": "calls",
    "to": 2
  }, {
    "from": 106,
    "label": "calls",
    "to": 2
  }, {
    "from": 106,
    "label": "calls",
    "to": 2
  }, {
    "from": 106,
    "label": "calls",
    "to": 2
  }, {
    "from": 114,
    "label": "calls",
    "to": 2
  }, {
    "from": 125,
    "label": "calls",
    "to": 2
  }, {
    "from": 98,
    "label": "calls",
    "to": 74
  }, {
    "from": 106,
    "label": "calls",
    "to": 98
  }, {
    "from": 114,
    "label": "calls",
    "to": 98
  }, {
    "from": 125,
    "label": "calls",
    "to": 98
  }, {
    "from": 106,
    "label": "calls",
    "to": 163
  }, {
    "from": 98,
    "label": "calls",
    "to": 171
  }, {
    "from": 112,
    "label": "calls",
    "to": 106
  }, {
    "from": 114,
    "label": "calls",
    "to": 169
  }, {
    "from": 129,
    "label": "calls",
    "to": 169
  }, {
    "from": 98,
    "label": "calls",
    "to": 167
  }, {
    "from": 20,
    "label": "calls",
    "to": 162
  }, {
    "from": 74,
    "label": "calls",
    "to": 162
  }, {
    "from": 114,
    "label": "calls",
    "to": 174
  }, {
    "from": 1,
    "label": "contains",
    "to": 156
  }, {
    "from": 156,
    "label": "declares",
    "to": 2
  }, {
    "from": 156,
    "label": "declares",
    "to": 6
  }, {
    "from": 156,
    "label": "declares",
    "to": 9
  }, {
    "from": 156,
    "label": "declares",
    "to": 11
  }, {
    "from": 156,
    "label": "declares",
    "to": 17
  }, {
    "from": 156,
    "label": "declares",
    "to": 20
  }, {
    "from": 156,
    "label": "declares",
    "to": 70
  }, {
    "from": 156,
    "label": "declares",
    "to": 72
  }, {
    "from": 156,
    "label": "declares",
    "to": 74
  }, {
    "from": 156,
    "label": "declares",
    "to": 98
  }, {
    "from": 156,
    "label": "declares",
    "to": 106
  }, {
    "from": 156,
    "label": "declares",
    "to": 112
  }, {
    "from": 156,
    "label": "declares",
    "to": 114
  }, {
    "from": 156,
    "label": "declares",
    "to": 125
  }, {
    "from": 156,
    "label": "declares",
    "to": 129
  }, {
    "from": 156,
    "label": "declares",
    "to": 148
  }, {
    "from": 156,
    "label": "declares",
    "to": 150
  }, {
    "from": 156,
    "label": "declares",
    "to": 152
  }, {
    "from": 156,
    "label": "declares",
    "to": 154
  }, {
    "from": 1,
    "label": "declares",
    "to": 157
  }, {
    "from": 1,
    "label": "declares",
    "to": 164
  }, {
    "from": 1,
    "label": "declares",
    "to": 166
  }, {
    "from": 1,
    "label": "contains",
    "to": 176
  }, {
    "from": 1,
    "label": "contains",
    "to": 177
  }, {
    "from": 176,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 176,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 176,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 176,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 176,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 176,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 176,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 176,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 176,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 176,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 176,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 199,
    "label": "assigns",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 199,
    "label": "assigns",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 199,
    "label": "assigns",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 176,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 176,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 211,
    "label": "assigns",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 211,
    "label": "assigns",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 211,
    "label": "assigns",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 176,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 221,
    "label": "assigns",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 221,
    "label": "assigns",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 221,
    "label": "assigns",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 221,
    "label": "assigns",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 221,
    "label": "assigns",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 221,
    "label": "assigns",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 221,
    "label": "assigns",
    "to": 236
  }, {
    "from": 236,
    "label": "assigns",
    "to": 237
  }, {
    "from": 221,
    "label": "assigns",
    "to": 238
  }, {
    "from": 238,
    "label": "assigns",
    "to": 239
  }, {
    "from": 176,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 241,
    "label": "assigns",
    "to": 244
  }, {
    "from": 244,
    "label": "assigns",
    "to": 245
  }, {
    "from": 241,
    "label": "assigns",
    "to": 246
  }, {
    "from": 246,
    "label": "assigns",
    "to": 247
  }, {
    "from": 241,
    "label": "assigns",
    "to": 248
  }, {
    "from": 248,
    "label": "assigns",
    "to": 249
  }, {
    "from": 241,
    "label": "assigns",
    "to": 250
  }, {
    "from": 250,
    "label": "assigns",
    "to": 251
  }, {
    "from": 241,
    "label": "assigns",
    "to": 252
  }, {
    "from": 252,
    "label": "assigns",
    "to": 253
  }, {
    "from": 176,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 176,
    "label": "initializes",
    "to": 256
  }, {
    "from": 256,
    "label": "assigns",
    "to": 257
  }, {
    "from": 1,
    "label": "provides",
    "to": 258
  }, {
    "from": 175,
    "label": "represents",
    "to": 259
  }, {
    "from": 258,
    "label": "provides",
    "to": 259
  }, {
    "from": 260,
    "label": "requires",
    "to": 1
  }, {
    "from": 208,
    "label": "contains",
    "to": 17
  }, {
    "from": 208,
    "label": "contains",
    "to": 20
  }, {
    "from": 208,
    "label": "contains",
    "to": 74
  }, {
    "from": 208,
    "label": "contains",
    "to": 98
  }, {
    "from": 208,
    "label": "contains",
    "to": 106
  }, {
    "from": 208,
    "label": "contains",
    "to": 112
  }, {
    "from": 208,
    "label": "contains",
    "to": 114
  }, {
    "from": 208,
    "label": "contains",
    "to": 125
  }, {
    "from": 208,
    "label": "contains",
    "to": 129
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sip",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function assert_arg(idx,val,tp)\r\n    if type(val) ~= tp then\r\n        error(\"argument \"..idx..\" must be \"..tp, 2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if type(val) ~= tp then\r\n        error(\"argument \"..idx..\" must be \"..tp, 2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "error(\"argument \"..idx..\" must be \"..tp, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function group(s)\r\n    return '('..s..')'\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function escape (spec)\r\n    return (spec:gsub('[%-%.%+%[%]%(%)%^%%%?%*]','%%%0'):gsub('%$%%(%S)','$%1'))\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function compress_spaces(patt)\r\n    return (patt:gsub(\"()%s+()\", function(i1, i2)\r\n        local before = patt:sub(i1 - 2, i1 - 1)\r\n        if before:match('%$[vifadxlu]') or before:match('^[^%$]?[%w_]$') then\r\n            local after = patt:sub(i2, i2 + 1)\r\n            if after:match('%$[vifadxlu]') or after:match('^[%w_]') then\r\n                return '%s+'\r\n            end\r\n        end\r\n        return '%s*'\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local before = patt:sub(i1 - 2, i1 - 1)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if before:match('%$[vifadxlu]') or before:match('^[^%$]?[%w_]$') then\r\n            local after = patt:sub(i2, i2 + 1)\r\n            if after:match('%$[vifadxlu]') or after:match('^[%w_]') then\r\n                return '%s+'\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "local after = patt:sub(i2, i2 + 1)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if after:match('%$[vifadxlu]') or after:match('^[%w_]') then\r\n                return '%s+'\r\n            end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function sip.custom_pattern(flag,patt)\r\n    pattern_map[flag] = patt\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "pattern_map[flag] = patt",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function sip.create_pattern (spec,options)\r\n    assert_arg(1,spec,'string')\r\n    local fieldnames,fieldtypes = {},{}\r\n\r\n    if type(spec) == 'string' then\r\n        spec = escape(spec)\r\n    else\r\n        local res = {}\r\n        for i,s in ipairs(spec) do\r\n            res[i] = escape(s)\r\n        end\r\n        spec = concat(res,'.-')\r\n    end\r\n\r\n    local kount = 1\r\n\r\n    local function addfield (name,type)\r\n        name = name or kount\r\n        append(fieldnames,name)\r\n        fieldtypes[name] = type\r\n        kount = kount + 1\r\n    end\r\n\r\n    local named_vars = spec:find('{%a+}')\r\n\r\n    if options and options.at_start then\r\n        spec = '^'..spec\r\n    end\r\n    if spec:sub(-1,-1) == '$' then\r\n        spec = spec:sub(1,-2)..'$r'\r\n        if named_vars then spec = spec..'{rest}' end\r\n    end\r\n\r\n    local names\r\n\r\n    if named_vars then\r\n        names = {}\r\n        spec = spec:gsub('{(%a+)}',function(name)\r\n            append(names,name)\r\n            return ''\r\n        end)\r\n    end\r\n    spec = compress_spaces(spec)\r\n\r\n    local k = 1\r\n    local err\r\n    local r = (spec:gsub('%$%S',function(s)\r\n        local type,name\r\n        type = s:sub(2,2)\r\n        if names then name = names[k]; k=k+1 end\r\n        -- this kludge is necessary because %q generates two matches, and\r\n        -- we want to ignore the first. Not a problem for named captures.\r\n        if not names and type == 'q' then\r\n            addfield(nil,'Q')\r\n        else\r\n            addfield(name,type)\r\n        end\r\n        local res\r\n        if pattern_map[type] then\r\n            res = pattern_map[type]\r\n        elseif type == 'q' then\r\n            -- some Lua pattern matching voodoo; we want to match '...' as\r\n            -- well as \"...\", and can use the fact that %n will match a\r\n            -- previous capture. Adding the extra field above comes from needing\r\n            -- to accommodate the extra spurious match (which is either ' or \")\r\n            addfield(name,type)\r\n            res = '([\"\\'])(.-)%'..(kount-2)\r\n        else\r\n            local endbracket = brackets[type]\r\n            if endbracket then\r\n                res = '(%b'..type..endbracket..')'\r\n            elseif stdclasses[type] or stdclasses[type:lower()] then\r\n                res = '(%'..type..'+)'\r\n            else\r\n                err = \"unknown format type or character class\"\r\n            end\r\n        end\r\n        return res\r\n    end))\r\n\r\n    if err then\r\n        return nil,err\r\n    else\r\n        return r,fieldnames,fieldtypes\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert_arg(1,spec,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local fieldnames,fieldtypes = {},{}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if type(spec) == 'string' then\r\n        spec = escape(spec)\r\n    else\r\n        local res = {}\r\n        for i,s in ipairs(spec) do\r\n            res[i] = escape(s)\r\n        end\r\n        spec = concat(res,'.-')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "spec = escape(spec)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "for i,s in ipairs(spec) do\r\n            res[i] = escape(s)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "res[i] = escape(s)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "spec = concat(res,'.-')",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local kount = 1",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local function addfield (name,type)\r\n        name = name or kount\r\n        append(fieldnames,name)\r\n        fieldtypes[name] = type\r\n        kount = kount + 1\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 31,
    "text": "name = name or kount",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "append(fieldnames,name)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "fieldtypes[name] = type",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "kount = kount + 1",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local named_vars = spec:find('{%a+}')",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if options and options.at_start then\r\n        spec = '^'..spec\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "spec = '^'..spec",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if spec:sub(-1,-1) == '$' then\r\n        spec = spec:sub(1,-2)..'$r'\r\n        if named_vars then spec = spec..'{rest}' end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "spec = spec:sub(1,-2)..'$r'",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if named_vars then spec = spec..'{rest}' end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "spec = spec..'{rest}'",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "local names",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if named_vars then\r\n        names = {}\r\n        spec = spec:gsub('{(%a+)}',function(name)\r\n            append(names,name)\r\n            return ''\r\n        end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "names = {}",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "spec = spec:gsub('{(%a+)}',function(name)\r\n            append(names,name)\r\n            return ''\r\n        end)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "append(names,name)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "spec = compress_spaces(spec)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local k = 1",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local r = (spec:gsub('%$%S',function(s)\r\n        local type,name\r\n        type = s:sub(2,2)\r\n        if names then name = names[k]; k=k+1 end\r\n        -- this kludge is necessary because %q generates two matches, and\r\n        -- we want to ignore the first. Not a problem for named captures.\r\n        if not names and type == 'q' then\r\n            addfield(nil,'Q')\r\n        else\r\n            addfield(name,type)\r\n        end\r\n        local res\r\n        if pattern_map[type] then\r\n            res = pattern_map[type]\r\n        elseif type == 'q' then\r\n            -- some Lua pattern matching voodoo; we want to match '...' as\r\n            -- well as \"...\", and can use the fact that %n will match a\r\n            -- previous capture. Adding the extra field above comes from needing\r\n            -- to accommodate the extra spurious match (which is either ' or \")\r\n            addfield(name,type)\r\n            res = '([\"\\'])(.-)%'..(kount-2)\r\n        else\r\n            local endbracket = brackets[type]\r\n            if endbracket then\r\n                res = '(%b'..type..endbracket..')'\r\n            elseif stdclasses[type] or stdclasses[type:lower()] then\r\n                res = '(%'..type..'+)'\r\n            else\r\n                err = \"unknown format type or character class\"\r\n            end\r\n        end\r\n        return res\r\n    end))",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local type,name",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "type = s:sub(2,2)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if names then name = names[k]; k=k+1 end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "name = names[k]",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "k=k+1",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if not names and type == 'q' then\r\n            addfield(nil,'Q')\r\n        else\r\n            addfield(name,type)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "addfield(nil,'Q')",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "addfield(name,type)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if pattern_map[type] then\r\n            res = pattern_map[type]\r\n        elseif type == 'q' then\r\n            -- some Lua pattern matching voodoo; we want to match '...' as\r\n            -- well as \"...\", and can use the fact that %n will match a\r\n            -- previous capture. Adding the extra field above comes from needing\r\n            -- to accommodate the extra spurious match (which is either ' or \")\r\n            addfield(name,type)\r\n            res = '([\"\\'])(.-)%'..(kount-2)\r\n        else\r\n            local endbracket = brackets[type]\r\n            if endbracket then\r\n                res = '(%b'..type..endbracket..')'\r\n            elseif stdclasses[type] or stdclasses[type:lower()] then\r\n                res = '(%'..type..'+)'\r\n            else\r\n                err = \"unknown format type or character class\"\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "res = pattern_map[type]",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "res = '([\"\\'])(.-)%'..(kount-2)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "local endbracket = brackets[type]",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if endbracket then\r\n                res = '(%b'..type..endbracket..')'\r\n            elseif stdclasses[type] or stdclasses[type:lower()] then\r\n                res = '(%'..type..'+)'\r\n            else\r\n                err = \"unknown format type or character class\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "res = '(%b'..type..endbracket..')'",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "res = '(%'..type..'+)'",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "err = \"unknown format type or character class\"",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if err then\r\n        return nil,err\r\n    else\r\n        return r,fieldnames,fieldtypes\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function addfield (name,type)\r\n        name = name or kount\r\n        append(fieldnames,name)\r\n        fieldtypes[name] = type\r\n        kount = kount + 1\r\n    end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "local function tnumber (s)\r\n    return s == 'd' or s == 'i' or s == 'f'\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function sip.create_spec_fun(spec,options)\r\n    local fieldtypes,fieldnames\r\n    local ls = {}\r\n    spec,fieldnames,fieldtypes = sip.create_pattern(spec,options)\r\n    if not spec then return spec,fieldnames end\r\n    local named_vars = type(fieldnames[1]) == 'string'\r\n    for i = 1,#fieldnames do\r\n        append(ls,'mm'..i)\r\n    end\r\n    ls[1] = ls[1] or \"mm1\" -- behave correctly if there are no patterns\r\n    local fun = ('return (function(s,res)\\n\\tlocal %s = s:match(%q)\\n'):format(concat(ls,','),spec)\r\n    fun = fun..'\\tif not mm1 then return false end\\n'\r\n    local k=1\r\n    for i,f in ipairs(fieldnames) do\r\n        if f ~= '_' then\r\n            local var = 'mm'..i\r\n            if tnumber(fieldtypes[f]) then\r\n                var = 'tonumber('..var..')'\r\n            elseif brackets[fieldtypes[f]] then\r\n                var = var..':sub(2,-2)'\r\n            end\r\n            if named_vars then\r\n                fun = ('%s\\tres.%s = %s\\n'):format(fun,f,var)\r\n            else\r\n                if fieldtypes[f] ~= 'Q' then -- we skip the string-delim capture\r\n                    fun = ('%s\\tres[%d] = %s\\n'):format(fun,k,var)\r\n                    k = k + 1\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return fun..'\\treturn true\\nend)\\n', named_vars\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local fieldtypes,fieldnames",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local ls = {}",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "spec,fieldnames,fieldtypes = sip.create_pattern(spec,options)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if not spec then return spec,fieldnames end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "local named_vars = type(fieldnames[1]) == 'string'",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "for i = 1,#fieldnames do\r\n        append(ls,'mm'..i)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 81,
    "text": "append(ls,'mm'..i)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "ls[1] = ls[1] or \"mm1\"",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "local fun = ('return (function(s,res)\\n\\tlocal %s = s:match(%q)\\n'):format(concat(ls,','),spec)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "fun = fun..'\\tif not mm1 then return false end\\n'",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "local k=1",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "for i,f in ipairs(fieldnames) do\r\n        if f ~= '_' then\r\n            local var = 'mm'..i\r\n            if tnumber(fieldtypes[f]) then\r\n                var = 'tonumber('..var..')'\r\n            elseif brackets[fieldtypes[f]] then\r\n                var = var..':sub(2,-2)'\r\n            end\r\n            if named_vars then\r\n                fun = ('%s\\tres.%s = %s\\n'):format(fun,f,var)\r\n            else\r\n                if fieldtypes[f] ~= 'Q' then -- we skip the string-delim capture\r\n                    fun = ('%s\\tres[%d] = %s\\n'):format(fun,k,var)\r\n                    k = k + 1\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "if f ~= '_' then\r\n            local var = 'mm'..i\r\n            if tnumber(fieldtypes[f]) then\r\n                var = 'tonumber('..var..')'\r\n            elseif brackets[fieldtypes[f]] then\r\n                var = var..':sub(2,-2)'\r\n            end\r\n            if named_vars then\r\n                fun = ('%s\\tres.%s = %s\\n'):format(fun,f,var)\r\n            else\r\n                if fieldtypes[f] ~= 'Q' then -- we skip the string-delim capture\r\n                    fun = ('%s\\tres[%d] = %s\\n'):format(fun,k,var)\r\n                    k = k + 1\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "local var = 'mm'..i",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if tnumber(fieldtypes[f]) then\r\n                var = 'tonumber('..var..')'\r\n            elseif brackets[fieldtypes[f]] then\r\n                var = var..':sub(2,-2)'\r\n            end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "var = 'tonumber('..var..')'",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "var = var..':sub(2,-2)'",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "if named_vars then\r\n                fun = ('%s\\tres.%s = %s\\n'):format(fun,f,var)\r\n            else\r\n                if fieldtypes[f] ~= 'Q' then -- we skip the string-delim capture\r\n                    fun = ('%s\\tres[%d] = %s\\n'):format(fun,k,var)\r\n                    k = k + 1\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "fun = ('%s\\tres.%s = %s\\n'):format(fun,f,var)",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "if fieldtypes[f] ~= 'Q' then -- we skip the string-delim capture\r\n                    fun = ('%s\\tres[%d] = %s\\n'):format(fun,k,var)\r\n                    k = k + 1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "fun = ('%s\\tres[%d] = %s\\n'):format(fun,k,var)",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function sip.compile(spec,options)\r\n    assert_arg(1,spec,'string')\r\n    local fun,names = sip.create_spec_fun(spec,options)\r\n    if not fun then return nil,names end\r\n    if rawget(_G,'_DEBUG') then print(fun) end\r\n    local chunk,err = loadstring(fun,'tmp')\r\n    if err then return nil,err end\r\n    return chunk(),names\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "local fun,names = sip.create_spec_fun(spec,options)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if not fun then return nil,names end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "if rawget(_G,'_DEBUG') then print(fun) end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "print(fun)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "local chunk,err = loadstring(fun,'tmp')",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "if err then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function sip.match (spec,line,res,options)\r\n    assert_arg(1,spec,'string')\r\n    assert_arg(2,line,'string')\r\n    assert_arg(3,res,'table')\r\n    if not cache[spec] then\r\n        cache[spec] = sip.compile(spec,options)\r\n    end\r\n    return cache[spec](line,res)\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "assert_arg(2,line,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert_arg(3,res,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "if not cache[spec] then\r\n        cache[spec] = sip.compile(spec,options)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "cache[spec] = sip.compile(spec,options)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function sip.match_at_start (spec,line,res)\r\n    return sip.match(spec,line,res,{at_start=true})\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function sip.fields (spec,f)\r\n    assert_arg(1,spec,'string')\r\n    if not f then return nil,\"no file object\" end\r\n    local fun,err = sip.compile(spec)\r\n    if not fun then return nil,err end\r\n    local res = {}\r\n    return function()\r\n        while true do\r\n            local line = f:read()\r\n            if not line then return end\r\n            if fun(line,res) then\r\n                local values = res\r\n                res = {}\r\n                return unpack(values)\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "if not f then return nil,\"no file object\" end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "local fun,err = sip.compile(spec)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if not fun then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "while true do\r\n            local line = f:read()\r\n            if not line then return end\r\n            if fun(line,res) then\r\n                local values = res\r\n                res = {}\r\n                return unpack(values)\r\n            end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 119,
    "text": "local line = f:read()",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if not line then return end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "if fun(line,res) then\r\n                local values = res\r\n                res = {}\r\n                return unpack(values)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "local values = res",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "res = {}",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function sip.pattern (spec,fun)\r\n    assert_arg(1,spec,'string')\r\n    local pat,named = sip.compile(spec)\r\n    append(read_patterns,{pat=pat,named=named,callback=fun})\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local pat,named = sip.compile(spec)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "append(read_patterns,{pat=pat,named=named,callback=fun})",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function sip.read (f,matches)\r\n    local owned,err\r\n    if not f then return nil,\"no file object\" end\r\n    if type(f) == 'string' then\r\n        f,err = io.open(f)\r\n        if not f then return nil,err end\r\n        owned = true\r\n    end\r\n    if matches then\r\n        for _,p in ipairs(matches) do\r\n            sip.pattern(p[1],p[2])\r\n        end\r\n    end\r\n    local res = {}\r\n    for line in f:lines() do\r\n        for _,item in ipairs(read_patterns) do\r\n            if item.pat(line,res) then\r\n                if item.callback then\r\n                    if item.named then\r\n                        item.callback(res)\r\n                    else\r\n                        item.callback(unpack(res))\r\n                    end\r\n                end\r\n                res = {}\r\n                break\r\n            end\r\n        end\r\n    end\r\n    if owned then f:close() end\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "local owned,err",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if type(f) == 'string' then\r\n        f,err = io.open(f)\r\n        if not f then return nil,err end\r\n        owned = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "f,err = io.open(f)",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "if not f then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "owned = true",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "if matches then\r\n        for _,p in ipairs(matches) do\r\n            sip.pattern(p[1],p[2])\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "for _,p in ipairs(matches) do\r\n            sip.pattern(p[1],p[2])\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 137,
    "text": "sip.pattern(p[1],p[2])",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "for line in f:lines() do\r\n        for _,item in ipairs(read_patterns) do\r\n            if item.pat(line,res) then\r\n                if item.callback then\r\n                    if item.named then\r\n                        item.callback(res)\r\n                    else\r\n                        item.callback(unpack(res))\r\n                    end\r\n                end\r\n                res = {}\r\n                break\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 139,
    "text": "for _,item in ipairs(read_patterns) do\r\n            if item.pat(line,res) then\r\n                if item.callback then\r\n                    if item.named then\r\n                        item.callback(res)\r\n                    else\r\n                        item.callback(unpack(res))\r\n                    end\r\n                end\r\n                res = {}\r\n                break\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 140,
    "text": "if item.pat(line,res) then\r\n                if item.callback then\r\n                    if item.named then\r\n                        item.callback(res)\r\n                    else\r\n                        item.callback(unpack(res))\r\n                    end\r\n                end\r\n                res = {}\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "if item.callback then\r\n                    if item.named then\r\n                        item.callback(res)\r\n                    else\r\n                        item.callback(unpack(res))\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "if item.named then\r\n                        item.callback(res)\r\n                    else\r\n                        item.callback(unpack(res))\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "item.callback(res)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "item.callback(unpack(res))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "if owned then f:close() end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function(i1, i2)\r\n        local before = patt:sub(i1 - 2, i1 - 1)\r\n        if before:match('%$[vifadxlu]') or before:match('^[^%$]?[%w_]$') then\r\n            local after = patt:sub(i2, i2 + 1)\r\n            if after:match('%$[vifadxlu]') or after:match('^[%w_]') then\r\n                return '%s+'\r\n            end\r\n        end\r\n        return '%s*'\r\n    end",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function(name)\r\n            append(names,name)\r\n            return ''\r\n        end",
    "type": "function"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function(s)\r\n        local type,name\r\n        type = s:sub(2,2)\r\n        if names then name = names[k]; k=k+1 end\r\n        -- this kludge is necessary because %q generates two matches, and\r\n        -- we want to ignore the first. Not a problem for named captures.\r\n        if not names and type == 'q' then\r\n            addfield(nil,'Q')\r\n        else\r\n            addfield(name,type)\r\n        end\r\n        local res\r\n        if pattern_map[type] then\r\n            res = pattern_map[type]\r\n        elseif type == 'q' then\r\n            -- some Lua pattern matching voodoo; we want to match '...' as\r\n            -- well as \"...\", and can use the fact that %n will match a\r\n            -- previous capture. Adding the extra field above comes from needing\r\n            -- to accommodate the extra spurious match (which is either ' or \")\r\n            addfield(name,type)\r\n            res = '([\"\\'])(.-)%'..(kount-2)\r\n        else\r\n            local endbracket = brackets[type]\r\n            if endbracket then\r\n                res = '(%b'..type..endbracket..')'\r\n            elseif stdclasses[type] or stdclasses[type:lower()] then\r\n                res = '(%'..type..'+)'\r\n            else\r\n                err = \"unknown format type or character class\"\r\n            end\r\n        end\r\n        return res\r\n    end",
    "type": "function"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function()\r\n        while true do\r\n            local line = f:read()\r\n            if not line then return end\r\n            if fun(line,res) then\r\n                local values = res\r\n                res = {}\r\n                return unpack(values)\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "",
    "type": "function container"
  }, {
    "id": 157,
    "text": "custom_pattern",
    "type": "global function"
  }, {
    "id": 158,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 159,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 160,
    "text": "append",
    "type": "global function"
  }, {
    "id": 161,
    "text": "print",
    "type": "global function"
  }, {
    "id": 162,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 163,
    "text": "cache[spec]",
    "type": "global function"
  }, {
    "id": 164,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 165,
    "text": "type",
    "type": "global function"
  }, {
    "id": 166,
    "text": "create_pattern",
    "type": "global function"
  }, {
    "id": 167,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 168,
    "text": "pat",
    "type": "global function"
  }, {
    "id": 169,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 170,
    "text": "callback",
    "type": "global function"
  }, {
    "id": 171,
    "text": "chunk",
    "type": "global function"
  }, {
    "id": 172,
    "text": "open",
    "type": "global function"
  }, {
    "id": 173,
    "text": "error",
    "type": "global function"
  }, {
    "id": 174,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "variable container"
  }, {
    "id": 177,
    "text": "",
    "type": "require container"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  }, {
    "id": 180,
    "text": "",
    "type": "local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "n/a"
  }, {
    "id": 188,
    "text": "",
    "type": "local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "n/a"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 200,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 201,
    "text": "",
    "type": "string"
  }, {
    "id": 202,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 203,
    "text": "",
    "type": "string"
  }, {
    "id": 204,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 205,
    "text": "",
    "type": "string"
  }, {
    "id": 206,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 207,
    "text": "",
    "type": "string"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 212,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 213,
    "text": "",
    "type": "string"
  }, {
    "id": 214,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 215,
    "text": "",
    "type": "string"
  }, {
    "id": 216,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 217,
    "text": "",
    "type": "string"
  }, {
    "id": 218,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 219,
    "text": "",
    "type": "string"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 222,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 223,
    "text": "",
    "type": "number"
  }, {
    "id": 224,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 225,
    "text": "",
    "type": "number"
  }, {
    "id": 226,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 227,
    "text": "",
    "type": "number"
  }, {
    "id": 228,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 229,
    "text": "",
    "type": "number"
  }, {
    "id": 230,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 231,
    "text": "",
    "type": "number"
  }, {
    "id": 232,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 233,
    "text": "",
    "type": "number"
  }, {
    "id": 234,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 235,
    "text": "",
    "type": "number"
  }, {
    "id": 236,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 237,
    "text": "",
    "type": "number"
  }, {
    "id": 238,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 239,
    "text": "",
    "type": "number"
  }, {
    "id": 240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 242,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 243,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 244,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 245,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 246,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 247,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 248,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 249,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 250,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 251,
    "text": "",
    "type": "string"
  }, {
    "id": 252,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 253,
    "text": "",
    "type": "string"
  }, {
    "id": 254,
    "text": "",
    "type": "local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 256,
    "text": "",
    "type": "local variable"
  }, {
    "id": 257,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 258,
    "text": "",
    "type": "interface container"
  }, {
    "id": 259,
    "text": "",
    "type": "interface"
  }, {
    "id": 260,
    "text": "",
    "type": "require local variable"
  } ]
}