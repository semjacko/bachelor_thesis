{
  "_filename": "Map.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/Map.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 10
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 10
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 10
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 36
  }, {
    "from": 14,
    "label": "calls",
    "to": 43
  }, {
    "from": 35,
    "label": "calls",
    "to": 41
  }, {
    "from": 31,
    "label": "calls",
    "to": 39
  }, {
    "from": 12,
    "label": "calls",
    "to": 44
  }, {
    "from": 25,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 45
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 12
  }, {
    "from": 27,
    "label": "calls",
    "to": 12
  }, {
    "from": 35,
    "label": "calls",
    "to": 40
  }, {
    "from": 35,
    "label": "calls",
    "to": 40
  }, {
    "from": 35,
    "label": "calls",
    "to": 40
  }, {
    "from": 35,
    "label": "calls",
    "to": 40
  }, {
    "from": 12,
    "label": "calls",
    "to": 40
  }, {
    "from": 27,
    "label": "calls",
    "to": 38
  }, {
    "from": 29,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "contains",
    "to": 35
  }, {
    "from": 35,
    "label": "declares",
    "to": 6
  }, {
    "from": 35,
    "label": "declares",
    "to": 12
  }, {
    "from": 35,
    "label": "declares",
    "to": 14
  }, {
    "from": 35,
    "label": "declares",
    "to": 16
  }, {
    "from": 35,
    "label": "declares",
    "to": 20
  }, {
    "from": 35,
    "label": "declares",
    "to": 22
  }, {
    "from": 35,
    "label": "declares",
    "to": 25
  }, {
    "from": 35,
    "label": "declares",
    "to": 27
  }, {
    "from": 35,
    "label": "declares",
    "to": 29
  }, {
    "from": 35,
    "label": "declares",
    "to": 31
  }, {
    "from": 35,
    "label": "declares",
    "to": 33
  }, {
    "from": 35,
    "label": "declares",
    "to": 34
  }, {
    "from": 2,
    "label": "contains",
    "to": 46
  }, {
    "from": 2,
    "label": "contains",
    "to": 47
  }, {
    "from": 46,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 46,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 46,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 46,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 46,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 46,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 46,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 46,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 46,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 46,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 46,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 46,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 46,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 46,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 47,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "requires",
    "to": 4
  }, {
    "from": 47,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "requires",
    "to": 5
  }, {
    "from": 47,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "requires",
    "to": 3
  }, {
    "from": 47,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 80
  }, {
    "from": 62,
    "label": "represents",
    "to": 81
  }, {
    "from": 80,
    "label": "provides",
    "to": 81
  }, {
    "from": 82,
    "label": "requires",
    "to": 2
  }, {
    "from": 83,
    "label": "requires",
    "to": 2
  }, {
    "from": 84,
    "label": "requires",
    "to": 2
  }, {
    "from": 64,
    "label": "represents",
    "to": 85
  }, {
    "from": 86,
    "label": "requires",
    "to": 2
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 34
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "class",
    "type": "module"
  }, {
    "id": 2,
    "text": "Map",
    "type": "module"
  }, {
    "id": 3,
    "text": "pretty",
    "type": "module"
  }, {
    "id": 4,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 5,
    "text": "utils",
    "type": "module"
  }, {
    "id": 6,
    "text": "function Map:_init (t)\r\n    local mt = getmetatable(t)\r\n    if mt == Set or mt == Map then\r\n        self:update(t)\r\n    else\r\n        return t -- otherwise assumed to be a map-like table\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local mt = getmetatable(t)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if mt == Set or mt == Map then\r\n        self:update(t)\r\n    else\r\n        return t -- otherwise assumed to be a map-like table\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "self:update(t)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function makelist(t)\r\n    return setmetatable(t, require('pl.List'))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function Map:iter ()\r\n    return pairs(self)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function Map:items()\r\n    local ls = makelist(tablex.pairmap (function (k,v) return makelist {k,v} end, self))\r\n\tls:sort(function(t1,t2) return t1[1] < t2[1] end)\r\n\treturn ls\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local ls = makelist(tablex.pairmap (function (k,v) return makelist {k,v} end, self))",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "ls:sort(function(t1,t2) return t1[1] < t2[1] end)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function Map:setdefault(key, defaultval)\r\n   return self[key] or self:set(key,defaultval) or defaultval\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function Map:set (key,val)\r\n    self[key] = val\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "self[key] = val",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function Map:get (key)\r\n    return rawget(self,key)\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function Map:getvalues (keys)\r\n    return makelist(index_by(self,keys))\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function Map:__eq (m)\r\n    -- note we explicitly ask deepcompare _not_ to use __eq!\r\n    return deepcompare(self,m,true)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function Map:__tostring ()\r\n    return pretty_write(self,'')\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function (k,v) return makelist {k,v} end",
    "type": "function"
  }, {
    "id": 34,
    "text": "function(t1,t2) return t1[1] < t2[1] end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "function container"
  }, {
    "id": 36,
    "text": "pairmap",
    "type": "global function"
  }, {
    "id": 37,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 38,
    "text": "index_by",
    "type": "global function"
  }, {
    "id": 39,
    "text": "pretty_write",
    "type": "global function"
  }, {
    "id": 40,
    "text": "require",
    "type": "global function"
  }, {
    "id": 41,
    "text": "class",
    "type": "global function"
  }, {
    "id": 42,
    "text": "deepcompare",
    "type": "global function"
  }, {
    "id": 43,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 44,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 45,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 46,
    "text": "",
    "type": "variable container"
  }, {
    "id": 47,
    "text": "",
    "type": "require container"
  }, {
    "id": 48,
    "text": "",
    "type": "local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "global variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "global variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "interface container"
  }, {
    "id": 81,
    "text": "",
    "type": "interface"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "interface"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  } ]
}