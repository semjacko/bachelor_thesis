{
  "_filename": "testxml.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/penlight/examples/testxml.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 20
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 20
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 19
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 31,
    "label": "calls",
    "to": 44
  }, {
    "from": 39,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 31,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 31,
    "label": "calls",
    "to": 45
  }, {
    "from": 31,
    "label": "calls",
    "to": 45
  }, {
    "from": 39,
    "label": "calls",
    "to": 41
  }, {
    "from": 39,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 31,
    "label": "calls",
    "to": 2
  }, {
    "from": 39,
    "label": "calls",
    "to": 48
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 46
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 39,
    "label": "declares",
    "to": 2
  }, {
    "from": 39,
    "label": "declares",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 51
  }, {
    "from": 50,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 50,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 50,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 50,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 50,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 50,
    "label": "initializes",
    "to": 62
  }, {
    "from": 51,
    "label": "initializes",
    "to": 49
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "testxml",
    "type": "module"
  }, {
    "id": 2,
    "text": "function parse_element (tok,tag)\r\n\tlocal tbl,t,v,attrib\r\n\ttbl = {}\r\n\ttbl.tag = tag  -- LOM 'tag' is the element tag\r\n\tt,v = skipws(tok)\r\n\twhile v ~= '/' and v ~= '>' do\r\n\t\tif t ~= 'iden' then error('expecting attribute identifier') end\r\n\t\tattrib = v\r\n\t\texpecting(tok,'=')\r\n\t\tv = expecting(tok,'string')\r\n\t\t-- LOM: 'attr' subtable contains attrib/value pairs and an ordered list of attribs\r\n\t\tif not tbl.attr then tbl.attr = {} end\r\n\t\ttbl.attr[attrib] = v\r\n\t\tappend(tbl.attr,attrib)\r\n\t\tt,v = skipws(tok)\r\n\tend\r\n\tif v == '/' then\r\n\t\texpecting(tok,'>')\r\n\t\treturn tbl\r\n\tend\r\n\t-- pick up element data\r\n\tt,v = tok()\r\n\twhile true do\r\n\t\tif t == '<' then\r\n\t\t\tt,v = skipws(tok)\r\n\t\t\tif t == '/' then -- element end tag\r\n\t\t\t\tt,v = tok()\r\n\t\t\t\tif t == '>' then return tbl end\r\n\t\t\t\tif t == 'iden' and v == tag then\r\n\t\t\t\t\tif tok() == '>' then return tbl end\r\n\t\t\t\tend\r\n\t\t\t\terror('expecting end tag '..tag)\r\n\t\t\telse\r\n\t\t\t\tappend(tbl,parse_element(tok,v)) -- LOM: child elements added to table\r\n\t\t\t\tt,v = skipws(tok)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tappend(tbl,v) -- LOM: text added to table\r\n\t\t\tt,v = skipws(tok)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local tbl,t,v,attrib",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "tbl = {}",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "tbl.tag = tag",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "t,v = skipws(tok)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "while v ~= '/' and v ~= '>' do\r\n\t\tif t ~= 'iden' then error('expecting attribute identifier') end\r\n\t\tattrib = v\r\n\t\texpecting(tok,'=')\r\n\t\tv = expecting(tok,'string')\r\n\t\t-- LOM: 'attr' subtable contains attrib/value pairs and an ordered list of attribs\r\n\t\tif not tbl.attr then tbl.attr = {} end\r\n\t\ttbl.attr[attrib] = v\r\n\t\tappend(tbl.attr,attrib)\r\n\t\tt,v = skipws(tok)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 8,
    "text": "if t ~= 'iden' then error('expecting attribute identifier') end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "error('expecting attribute identifier')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "attrib = v",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "expecting(tok,'=')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "v = expecting(tok,'string')",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if not tbl.attr then tbl.attr = {} end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "tbl.attr = {}",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "tbl.attr[attrib] = v",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "append(tbl.attr,attrib)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "if v == '/' then\r\n\t\texpecting(tok,'>')\r\n\t\treturn tbl\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "expecting(tok,'>')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "t,v = tok()",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "while true do\r\n\t\tif t == '<' then\r\n\t\t\tt,v = skipws(tok)\r\n\t\t\tif t == '/' then -- element end tag\r\n\t\t\t\tt,v = tok()\r\n\t\t\t\tif t == '>' then return tbl end\r\n\t\t\t\tif t == 'iden' and v == tag then\r\n\t\t\t\t\tif tok() == '>' then return tbl end\r\n\t\t\t\tend\r\n\t\t\t\terror('expecting end tag '..tag)\r\n\t\t\telse\r\n\t\t\t\tappend(tbl,parse_element(tok,v)) -- LOM: child elements added to table\r\n\t\t\t\tt,v = skipws(tok)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tappend(tbl,v) -- LOM: text added to table\r\n\t\t\tt,v = skipws(tok)\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 22,
    "text": "if t == '<' then\r\n\t\t\tt,v = skipws(tok)\r\n\t\t\tif t == '/' then -- element end tag\r\n\t\t\t\tt,v = tok()\r\n\t\t\t\tif t == '>' then return tbl end\r\n\t\t\t\tif t == 'iden' and v == tag then\r\n\t\t\t\t\tif tok() == '>' then return tbl end\r\n\t\t\t\tend\r\n\t\t\t\terror('expecting end tag '..tag)\r\n\t\t\telse\r\n\t\t\t\tappend(tbl,parse_element(tok,v)) -- LOM: child elements added to table\r\n\t\t\t\tt,v = skipws(tok)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tappend(tbl,v) -- LOM: text added to table\r\n\t\t\tt,v = skipws(tok)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if t == '/' then -- element end tag\r\n\t\t\t\tt,v = tok()\r\n\t\t\t\tif t == '>' then return tbl end\r\n\t\t\t\tif t == 'iden' and v == tag then\r\n\t\t\t\t\tif tok() == '>' then return tbl end\r\n\t\t\t\tend\r\n\t\t\t\terror('expecting end tag '..tag)\r\n\t\t\telse\r\n\t\t\t\tappend(tbl,parse_element(tok,v)) -- LOM: child elements added to table\r\n\t\t\t\tt,v = skipws(tok)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "if t == '>' then return tbl end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "if t == 'iden' and v == tag then\r\n\t\t\t\t\tif tok() == '>' then return tbl end\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if tok() == '>' then return tbl end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "error('expecting end tag '..tag)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "append(tbl,parse_element(tok,v))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "append(tbl,v)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function parse_xml (tok)\r\n    local t,v = skipws(tok)\r\n\twhile t == '<' do\r\n\t\tt,v = tok()\r\n\t\tif t == '?' or t == '!' then\r\n\t\t\t-- skip meta stuff and commentary\r\n\t\t\trepeat t = tok() until t == '>'\r\n\t\t\tt,v = expecting(tok,'<')\r\n\t\telse\r\n\t\t\treturn parse_element(tok,v)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local t,v = skipws(tok)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "while t == '<' do\r\n\t\tt,v = tok()\r\n\t\tif t == '?' or t == '!' then\r\n\t\t\t-- skip meta stuff and commentary\r\n\t\t\trepeat t = tok() until t == '>'\r\n\t\t\tt,v = expecting(tok,'<')\r\n\t\telse\r\n\t\t\treturn parse_element(tok,v)\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 34,
    "text": "if t == '?' or t == '!' then\r\n\t\t\t-- skip meta stuff and commentary\r\n\t\t\trepeat t = tok() until t == '>'\r\n\t\t\tt,v = expecting(tok,'<')\r\n\t\telse\r\n\t\t\treturn parse_element(tok,v)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "repeat t = tok() until t == '>'",
    "type": "statement:repeat"
  }, {
    "id": 36,
    "text": "t = tok()",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "t,v = expecting(tok,'<')",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "",
    "type": "function container"
  }, {
    "id": 40,
    "text": "append",
    "type": "global function"
  }, {
    "id": 41,
    "text": "print",
    "type": "global function"
  }, {
    "id": 42,
    "text": "expecting",
    "type": "global function"
  }, {
    "id": 43,
    "text": "require",
    "type": "global function"
  }, {
    "id": 44,
    "text": "skipws",
    "type": "global function"
  }, {
    "id": 45,
    "text": "tok",
    "type": "global function"
  }, {
    "id": 46,
    "text": "error",
    "type": "global function"
  }, {
    "id": 47,
    "text": "scan",
    "type": "global function"
  }, {
    "id": 48,
    "text": "write",
    "type": "global function"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "variable container"
  }, {
    "id": 51,
    "text": "",
    "type": "require container"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "global variable"
  } ]
}