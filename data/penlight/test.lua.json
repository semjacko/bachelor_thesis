{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/penlight/lua/pl/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 8
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 8
  }, {
    "from": 52,
    "label": "has",
    "to": 8
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 8
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 8
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 46,
    "label": "calls",
    "to": 82
  }, {
    "from": 17,
    "label": "calls",
    "to": 77
  }, {
    "from": 6,
    "label": "calls",
    "to": 79
  }, {
    "from": 46,
    "label": "calls",
    "to": 79
  }, {
    "from": 10,
    "label": "calls",
    "to": 75
  }, {
    "from": 21,
    "label": "calls",
    "to": 73
  }, {
    "from": 17,
    "label": "calls",
    "to": 6
  }, {
    "from": 17,
    "label": "calls",
    "to": 6
  }, {
    "from": 10,
    "label": "calls",
    "to": 76
  }, {
    "from": 21,
    "label": "calls",
    "to": 17
  }, {
    "from": 28,
    "label": "calls",
    "to": 17
  }, {
    "from": 32,
    "label": "calls",
    "to": 17
  }, {
    "from": 40,
    "label": "calls",
    "to": 17
  }, {
    "from": 40,
    "label": "calls",
    "to": 17
  }, {
    "from": 61,
    "label": "calls",
    "to": 86
  }, {
    "from": 67,
    "label": "calls",
    "to": 78
  }, {
    "from": 67,
    "label": "calls",
    "to": 78
  }, {
    "from": 67,
    "label": "calls",
    "to": 78
  }, {
    "from": 67,
    "label": "calls",
    "to": 78
  }, {
    "from": 67,
    "label": "calls",
    "to": 78
  }, {
    "from": 17,
    "label": "calls",
    "to": 10
  }, {
    "from": 32,
    "label": "calls",
    "to": 84
  }, {
    "from": 32,
    "label": "calls",
    "to": 80
  }, {
    "from": 32,
    "label": "calls",
    "to": 80
  }, {
    "from": 59,
    "label": "calls",
    "to": 87
  }, {
    "from": 6,
    "label": "calls",
    "to": 74
  }, {
    "from": 59,
    "label": "calls",
    "to": 83
  }, {
    "from": 6,
    "label": "calls",
    "to": 81
  }, {
    "from": 6,
    "label": "calls",
    "to": 81
  }, {
    "from": 32,
    "label": "calls",
    "to": 81
  }, {
    "from": 46,
    "label": "calls",
    "to": 81
  }, {
    "from": 6,
    "label": "calls",
    "to": 88
  }, {
    "from": 6,
    "label": "calls",
    "to": 88
  }, {
    "from": 61,
    "label": "calls",
    "to": 85
  }, {
    "from": 61,
    "label": "calls",
    "to": 85
  }, {
    "from": 61,
    "label": "calls",
    "to": 72
  }, {
    "from": 4,
    "label": "contains",
    "to": 67
  }, {
    "from": 67,
    "label": "declares",
    "to": 6
  }, {
    "from": 67,
    "label": "declares",
    "to": 10
  }, {
    "from": 67,
    "label": "declares",
    "to": 17
  }, {
    "from": 67,
    "label": "declares",
    "to": 21
  }, {
    "from": 67,
    "label": "declares",
    "to": 28
  }, {
    "from": 67,
    "label": "declares",
    "to": 32
  }, {
    "from": 67,
    "label": "declares",
    "to": 40
  }, {
    "from": 67,
    "label": "declares",
    "to": 46
  }, {
    "from": 67,
    "label": "declares",
    "to": 52
  }, {
    "from": 67,
    "label": "declares",
    "to": 57
  }, {
    "from": 67,
    "label": "declares",
    "to": 59
  }, {
    "from": 67,
    "label": "declares",
    "to": 61
  }, {
    "from": 70,
    "label": "calls",
    "to": 17
  }, {
    "from": 4,
    "label": "contains",
    "to": 89
  }, {
    "from": 4,
    "label": "contains",
    "to": 90
  }, {
    "from": 89,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 89,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 89,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 89,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 89,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 89,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 89,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 89,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 89,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 89,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 90,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "requires",
    "to": 3
  }, {
    "from": 90,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "requires",
    "to": 5
  }, {
    "from": 90,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "requires",
    "to": 2
  }, {
    "from": 90,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "requires",
    "to": 1
  }, {
    "from": 90,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "requires",
    "to": 71
  }, {
    "from": 4,
    "label": "provides",
    "to": 118
  }, {
    "from": 103,
    "label": "represents",
    "to": 119
  }, {
    "from": 118,
    "label": "provides",
    "to": 119
  }, {
    "from": 120,
    "label": "requires",
    "to": 4
  }, {
    "from": 121,
    "label": "requires",
    "to": 4
  }, {
    "from": 122,
    "label": "requires",
    "to": 4
  }, {
    "from": 123,
    "label": "requires",
    "to": 4
  }, {
    "from": 124,
    "label": "requires",
    "to": 4
  }, {
    "from": 125,
    "label": "requires",
    "to": 4
  }, {
    "from": 126,
    "label": "requires",
    "to": 4
  }, {
    "from": 127,
    "label": "requires",
    "to": 4
  }, {
    "from": 128,
    "label": "requires",
    "to": 4
  }, {
    "from": 129,
    "label": "requires",
    "to": 4
  }, {
    "from": 130,
    "label": "requires",
    "to": 4
  }, {
    "from": 131,
    "label": "requires",
    "to": 4
  }, {
    "from": 132,
    "label": "requires",
    "to": 4
  }, {
    "from": 133,
    "label": "requires",
    "to": 4
  }, {
    "from": 134,
    "label": "requires",
    "to": 4
  }, {
    "from": 135,
    "label": "requires",
    "to": 4
  }, {
    "from": 136,
    "label": "requires",
    "to": 4
  }, {
    "from": 137,
    "label": "requires",
    "to": 4
  }, {
    "from": 138,
    "label": "requires",
    "to": 4
  }, {
    "from": 139,
    "label": "requires",
    "to": 4
  }, {
    "from": 140,
    "label": "requires",
    "to": 4
  }, {
    "from": 141,
    "label": "requires",
    "to": 4
  }, {
    "from": 142,
    "label": "requires",
    "to": 4
  }, {
    "from": 143,
    "label": "requires",
    "to": 4
  }, {
    "from": 144,
    "label": "requires",
    "to": 4
  }, {
    "from": 145,
    "label": "requires",
    "to": 4
  }, {
    "from": 146,
    "label": "requires",
    "to": 4
  }, {
    "from": 147,
    "label": "requires",
    "to": 4
  }, {
    "from": 148,
    "label": "requires",
    "to": 4
  }, {
    "from": 149,
    "label": "requires",
    "to": 4
  }, {
    "from": 150,
    "label": "requires",
    "to": 4
  }, {
    "from": 151,
    "label": "requires",
    "to": 4
  }, {
    "from": 103,
    "label": "contains",
    "to": 10
  }, {
    "from": 103,
    "label": "contains",
    "to": 21
  }, {
    "from": 103,
    "label": "contains",
    "to": 28
  }, {
    "from": 103,
    "label": "contains",
    "to": 32
  }, {
    "from": 103,
    "label": "contains",
    "to": 40
  }, {
    "from": 103,
    "label": "contains",
    "to": 59
  }, {
    "from": 103,
    "label": "contains",
    "to": 61
  }, {
    "from": 103,
    "label": "contains",
    "to": 68
  }, {
    "from": 103,
    "label": "contains",
    "to": 69
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "path",
    "type": "module"
  }, {
    "id": 2,
    "text": "pretty",
    "type": "module"
  }, {
    "id": 3,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 4,
    "text": "test",
    "type": "module"
  }, {
    "id": 5,
    "text": "utils",
    "type": "module"
  }, {
    "id": 6,
    "text": "local function dump(x)\r\n    if type(x) == 'table' and not (getmetatable(x) and getmetatable(x).__tostring) then\r\n        return pretty.write(x,' ',true)\r\n    elseif type(x) == 'string' then\r\n        return '\"'..x..'\"'\r\n    else\r\n        return tostring(x)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if type(x) == 'table' and not (getmetatable(x) and getmetatable(x).__tostring) then\r\n        return pretty.write(x,' ',true)\r\n    elseif type(x) == 'string' then\r\n        return '\"'..x..'\"'\r\n    else\r\n        return tostring(x)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function test.error_handler(file,line,got_text, needed_text,msg)\r\n    local err = io.stderr\r\n    err:write(path.basename(file)..':'..line..': assertion failed\\n')\r\n    err:write(\"got:\\t\",got_text,'\\n')\r\n    err:write(\"needed:\\t\",needed_text,'\\n')\r\n    utils.quit(1,msg or \"these values were not equal\")\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local err = io.stderr",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "err:write(path.basename(file)..':'..line..': assertion failed\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "err:write(\"got:\\t\",got_text,'\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "err:write(\"needed:\\t\",needed_text,'\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "utils.quit(1,msg or \"these values were not equal\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function complain (x,y,msg,where)\r\n    local i = debug.getinfo(3 + (where or 0))\r\n    test.error_handler(i.short_src,i.currentline,dump(x),dump(y),msg)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local i = debug.getinfo(3 + (where or 0))",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "test.error_handler(i.short_src,i.currentline,dump(x),dump(y),msg)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function test.asserteq (x,y,eps,where)\r\n    local res = x == y\r\n    if not res then\r\n        res = tablex.deepcompare(x,y,true,eps)\r\n    end\r\n    if not res then\r\n        complain(x,y,nil,where)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local res = x == y",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not res then\r\n        res = tablex.deepcompare(x,y,true,eps)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "res = tablex.deepcompare(x,y,true,eps)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if not res then\r\n        complain(x,y,nil,where)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "complain(x,y,nil,where)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function test.assertmatch (s1,s2,where)\r\n    if not s1:match(s2) then\r\n        complain (s1,s2,\"these strings did not match\",where)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if not s1:match(s2) then\r\n        complain (s1,s2,\"these strings did not match\",where)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "complain (s1,s2,\"these strings did not match\",where)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function test.assertraise(fn,e,where)\r\n    local ok, err\r\n    if type(fn) == 'table' then\r\n        ok, err = pcall(unpack(fn))\r\n    else\r\n        ok, err = pcall(fn)\r\n    end\r\n    if not err or err:match(e)==nil then\r\n        complain (err,e,\"these errors did not match\",where)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if type(fn) == 'table' then\r\n        ok, err = pcall(unpack(fn))\r\n    else\r\n        ok, err = pcall(fn)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "ok, err = pcall(unpack(fn))",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "ok, err = pcall(fn)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if not err or err:match(e)==nil then\r\n        complain (err,e,\"these errors did not match\",where)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "complain (err,e,\"these errors did not match\",where)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function test.asserteq2 (x1,x2,y1,y2,where)\r\n    if x1 ~= y1 then complain(x1,y1,nil,where) end\r\n    if x2 ~= y2 then complain(x2,y2,nil,where) end\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if x1 ~= y1 then complain(x1,y1,nil,where) end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "complain(x1,y1,nil,where)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if x2 ~= y2 then complain(x2,y2,nil,where) end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "complain(x2,y2,nil,where)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function tuple_mt.__tostring(self)\r\n    local ts = {}\r\n    for i=1, self.n do\r\n        local s = self[i]\r\n        ts[i] = type(s) == 'string' and ('%q'):format(s) or tostring(s)\r\n    end\r\n    return 'tuple(' .. table.concat(ts, ', ') .. ')'\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local ts = {}",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "for i=1, self.n do\r\n        local s = self[i]\r\n        ts[i] = type(s) == 'string' and ('%q'):format(s) or tostring(s)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 49,
    "text": "local s = self[i]",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "ts[i] = type(s) == 'string' and ('%q'):format(s) or tostring(s)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function tuple_mt.__eq(a, b)\r\n    if a.n ~= b.n then return false end\r\n    for i=1, a.n do\r\n        if a[i] ~= b[i] then return false end\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "if a.n ~= b.n then return false end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "for i=1, a.n do\r\n        if a[i] ~= b[i] then return false end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 55,
    "text": "if a[i] ~= b[i] then return false end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function tuple_mt.__len(self)\r\n    return self.n\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function test.tuple(...)\r\n    return setmetatable(table.pack(...), tuple_mt)\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function test.timer(msg,n,fun,...)\r\n    local start = clock()\r\n    for i = 1,n do fun(...) end\r\n    utils.printf(\"%s: took %7.2f sec\\n\",msg,clock()-start)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local start = clock()",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "for i = 1,n do fun(...) end",
    "type": "statement:numericfor"
  }, {
    "id": 64,
    "text": "fun(...)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "utils.printf(\"%s: took %7.2f sec\\n\",msg,clock()-start)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "",
    "type": "function container"
  }, {
    "id": 68,
    "text": "function test()\r\n    return X + Y + Z\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "function test (e)\r\n\tlocal v = {}\r\n\tprint('test',collect_values(e,v))\r\n\tif #v > 0 then pprint(v) end\r\n\tlocal rep = repr(e)\r\n    print(rep)\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "function asserteq_no_order (x,y)\r\n    if not compare_no_order(x,y) then\r\n        test.complain(x,y,\"these lists contained different elements\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "debug",
    "type": "module"
  }, {
    "id": 72,
    "text": "printf",
    "type": "global function"
  }, {
    "id": 73,
    "text": "deepcompare",
    "type": "global function"
  }, {
    "id": 74,
    "text": "write",
    "type": "global function"
  }, {
    "id": 75,
    "text": "quit",
    "type": "global function"
  }, {
    "id": 76,
    "text": "basename",
    "type": "global function"
  }, {
    "id": 77,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 78,
    "text": "require",
    "type": "global function"
  }, {
    "id": 79,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 80,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 81,
    "text": "type",
    "type": "global function"
  }, {
    "id": 82,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 83,
    "text": "pack",
    "type": "global function"
  }, {
    "id": 84,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 85,
    "text": "clock",
    "type": "global function"
  }, {
    "id": 86,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 87,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 88,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 89,
    "text": "",
    "type": "variable container"
  }, {
    "id": 90,
    "text": "",
    "type": "require container"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 107,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 108,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "global variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "interface container"
  }, {
    "id": 119,
    "text": "",
    "type": "interface"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "require local variable"
  } ]
}