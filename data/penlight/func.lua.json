{
  "_filename": "func.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/penlight/lua/pl/func.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 6
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 6
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 6
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 43,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 49
  }, {
    "from": 51,
    "label": "has",
    "to": 6
  }, {
    "from": 51,
    "label": "has",
    "to": 6
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 6
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 6
  }, {
    "from": 59,
    "label": "has",
    "to": 6
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 16
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 68,
    "label": "has",
    "to": 81
  }, {
    "from": 68,
    "label": "has",
    "to": 82
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 100,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 100,
    "label": "has",
    "to": 110
  }, {
    "from": 100,
    "label": "has",
    "to": 111
  }, {
    "from": 100,
    "label": "has",
    "to": 112
  }, {
    "from": 100,
    "label": "has",
    "to": 113
  }, {
    "from": 100,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 100,
    "label": "has",
    "to": 116
  }, {
    "from": 100,
    "label": "has",
    "to": 117
  }, {
    "from": 100,
    "label": "has",
    "to": 6
  }, {
    "from": 100,
    "label": "has",
    "to": 118
  }, {
    "from": 100,
    "label": "has",
    "to": 119
  }, {
    "from": 100,
    "label": "has",
    "to": 120
  }, {
    "from": 100,
    "label": "has",
    "to": 6
  }, {
    "from": 100,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 6
  }, {
    "from": 122,
    "label": "has",
    "to": 6
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 6
  }, {
    "from": 125,
    "label": "has",
    "to": 6
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 133,
    "label": "has",
    "to": 139
  }, {
    "from": 133,
    "label": "has",
    "to": 140
  }, {
    "from": 133,
    "label": "has",
    "to": 141
  }, {
    "from": 133,
    "label": "has",
    "to": 142
  }, {
    "from": 127,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 127,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 127,
    "label": "has",
    "to": 147
  }, {
    "from": 127,
    "label": "has",
    "to": 111
  }, {
    "from": 127,
    "label": "has",
    "to": 148
  }, {
    "from": 127,
    "label": "has",
    "to": 149
  }, {
    "from": 127,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 127,
    "label": "has",
    "to": 150
  }, {
    "from": 127,
    "label": "has",
    "to": 151
  }, {
    "from": 127,
    "label": "has",
    "to": 6
  }, {
    "from": 127,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 6
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 6
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 6
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "calls",
    "to": 173
  }, {
    "from": 66,
    "label": "calls",
    "to": 173
  }, {
    "from": 84,
    "label": "calls",
    "to": 175
  }, {
    "from": 127,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 66
  }, {
    "from": 100,
    "label": "calls",
    "to": 66
  }, {
    "from": 160,
    "label": "calls",
    "to": 164
  }, {
    "from": 122,
    "label": "calls",
    "to": 164
  }, {
    "from": 14,
    "label": "calls",
    "to": 163
  }, {
    "from": 14,
    "label": "calls",
    "to": 165
  }, {
    "from": 61,
    "label": "calls",
    "to": 165
  }, {
    "from": 84,
    "label": "calls",
    "to": 165
  }, {
    "from": 100,
    "label": "calls",
    "to": 165
  }, {
    "from": 100,
    "label": "calls",
    "to": 165
  }, {
    "from": 127,
    "label": "calls",
    "to": 165
  }, {
    "from": 127,
    "label": "calls",
    "to": 165
  }, {
    "from": 127,
    "label": "calls",
    "to": 165
  }, {
    "from": 127,
    "label": "calls",
    "to": 165
  }, {
    "from": 127,
    "label": "calls",
    "to": 165
  }, {
    "from": 127,
    "label": "calls",
    "to": 165
  }, {
    "from": 100,
    "label": "calls",
    "to": 166
  }, {
    "from": 100,
    "label": "calls",
    "to": 166
  }, {
    "from": 127,
    "label": "calls",
    "to": 166
  }, {
    "from": 125,
    "label": "calls",
    "to": 176
  }, {
    "from": 127,
    "label": "calls",
    "to": 177
  }, {
    "from": 122,
    "label": "calls",
    "to": 100
  }, {
    "from": 66,
    "label": "calls",
    "to": 167
  }, {
    "from": 100,
    "label": "calls",
    "to": 168
  }, {
    "from": 100,
    "label": "calls",
    "to": 162
  }, {
    "from": 127,
    "label": "calls",
    "to": 162
  }, {
    "from": 34,
    "label": "calls",
    "to": 170
  }, {
    "from": 38,
    "label": "calls",
    "to": 170
  }, {
    "from": 127,
    "label": "calls",
    "to": 179
  }, {
    "from": 127,
    "label": "calls",
    "to": 179
  }, {
    "from": 84,
    "label": "calls",
    "to": 12
  }, {
    "from": 66,
    "label": "calls",
    "to": 56
  }, {
    "from": 160,
    "label": "calls",
    "to": 14
  }, {
    "from": 66,
    "label": "calls",
    "to": 8
  }, {
    "from": 84,
    "label": "calls",
    "to": 8
  }, {
    "from": 84,
    "label": "calls",
    "to": 8
  }, {
    "from": 127,
    "label": "calls",
    "to": 8
  }, {
    "from": 160,
    "label": "calls",
    "to": 172
  }, {
    "from": 160,
    "label": "calls",
    "to": 172
  }, {
    "from": 14,
    "label": "calls",
    "to": 178
  }, {
    "from": 100,
    "label": "calls",
    "to": 178
  }, {
    "from": 127,
    "label": "calls",
    "to": 178
  }, {
    "from": 43,
    "label": "calls",
    "to": 38
  }, {
    "from": 43,
    "label": "calls",
    "to": 183
  }, {
    "from": 51,
    "label": "calls",
    "to": 183
  }, {
    "from": 51,
    "label": "calls",
    "to": 183
  }, {
    "from": 61,
    "label": "calls",
    "to": 183
  }, {
    "from": 160,
    "label": "calls",
    "to": 161
  }, {
    "from": 100,
    "label": "calls",
    "to": 182
  }, {
    "from": 100,
    "label": "calls",
    "to": 182
  }, {
    "from": 160,
    "label": "calls",
    "to": 34
  }, {
    "from": 160,
    "label": "calls",
    "to": 34
  }, {
    "from": 160,
    "label": "calls",
    "to": 34
  }, {
    "from": 66,
    "label": "calls",
    "to": 180
  }, {
    "from": 10,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 160,
    "label": "calls",
    "to": 4
  }, {
    "from": 14,
    "label": "calls",
    "to": 4
  }, {
    "from": 20,
    "label": "calls",
    "to": 4
  }, {
    "from": 22,
    "label": "calls",
    "to": 4
  }, {
    "from": 24,
    "label": "calls",
    "to": 4
  }, {
    "from": 28,
    "label": "calls",
    "to": 4
  }, {
    "from": 30,
    "label": "calls",
    "to": 4
  }, {
    "from": 32,
    "label": "calls",
    "to": 4
  }, {
    "from": 34,
    "label": "calls",
    "to": 4
  }, {
    "from": 38,
    "label": "calls",
    "to": 4
  }, {
    "from": 51,
    "label": "calls",
    "to": 4
  }, {
    "from": 59,
    "label": "calls",
    "to": 4
  }, {
    "from": 34,
    "label": "calls",
    "to": 181
  }, {
    "from": 43,
    "label": "calls",
    "to": 181
  }, {
    "from": 4,
    "label": "calls",
    "to": 184
  }, {
    "from": 84,
    "label": "calls",
    "to": 84
  }, {
    "from": 160,
    "label": "calls",
    "to": 10
  }, {
    "from": 160,
    "label": "calls",
    "to": 10
  }, {
    "from": 160,
    "label": "calls",
    "to": 10
  }, {
    "from": 160,
    "label": "calls",
    "to": 10
  }, {
    "from": 160,
    "label": "calls",
    "to": 10
  }, {
    "from": 41,
    "label": "calls",
    "to": 174
  }, {
    "from": 66,
    "label": "calls",
    "to": 174
  }, {
    "from": 66,
    "label": "calls",
    "to": 174
  }, {
    "from": 8,
    "label": "calls",
    "to": 185
  }, {
    "from": 66,
    "label": "calls",
    "to": 169
  }, {
    "from": 66,
    "label": "calls",
    "to": 169
  }, {
    "from": 100,
    "label": "calls",
    "to": 169
  }, {
    "from": 100,
    "label": "calls",
    "to": 169
  }, {
    "from": 127,
    "label": "calls",
    "to": 169
  }, {
    "from": 127,
    "label": "calls",
    "to": 169
  }, {
    "from": 127,
    "label": "calls",
    "to": 169
  }, {
    "from": 125,
    "label": "calls",
    "to": 171
  }, {
    "from": 1,
    "label": "contains",
    "to": 160
  }, {
    "from": 160,
    "label": "declares",
    "to": 4
  }, {
    "from": 160,
    "label": "declares",
    "to": 8
  }, {
    "from": 160,
    "label": "declares",
    "to": 10
  }, {
    "from": 160,
    "label": "declares",
    "to": 12
  }, {
    "from": 160,
    "label": "declares",
    "to": 14
  }, {
    "from": 160,
    "label": "declares",
    "to": 20
  }, {
    "from": 160,
    "label": "declares",
    "to": 22
  }, {
    "from": 160,
    "label": "declares",
    "to": 24
  }, {
    "from": 160,
    "label": "declares",
    "to": 26
  }, {
    "from": 160,
    "label": "declares",
    "to": 28
  }, {
    "from": 160,
    "label": "declares",
    "to": 30
  }, {
    "from": 160,
    "label": "declares",
    "to": 32
  }, {
    "from": 160,
    "label": "declares",
    "to": 34
  }, {
    "from": 160,
    "label": "declares",
    "to": 38
  }, {
    "from": 160,
    "label": "declares",
    "to": 41
  }, {
    "from": 160,
    "label": "declares",
    "to": 43
  }, {
    "from": 160,
    "label": "declares",
    "to": 51
  }, {
    "from": 160,
    "label": "declares",
    "to": 56
  }, {
    "from": 160,
    "label": "declares",
    "to": 58
  }, {
    "from": 160,
    "label": "declares",
    "to": 59
  }, {
    "from": 160,
    "label": "declares",
    "to": 61
  }, {
    "from": 160,
    "label": "declares",
    "to": 66
  }, {
    "from": 160,
    "label": "declares",
    "to": 84
  }, {
    "from": 160,
    "label": "declares",
    "to": 100
  }, {
    "from": 160,
    "label": "declares",
    "to": 122
  }, {
    "from": 160,
    "label": "declares",
    "to": 125
  }, {
    "from": 160,
    "label": "declares",
    "to": 127
  }, {
    "from": 160,
    "label": "declares",
    "to": 153
  }, {
    "from": 160,
    "label": "declares",
    "to": 155
  }, {
    "from": 160,
    "label": "declares",
    "to": 157
  }, {
    "from": 160,
    "label": "declares",
    "to": 159
  }, {
    "from": 1,
    "label": "declares",
    "to": 168
  }, {
    "from": 1,
    "label": "contains",
    "to": 186
  }, {
    "from": 1,
    "label": "contains",
    "to": 187
  }, {
    "from": 186,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 186,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 186,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 186,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 186,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 186,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 186,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 186,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 186,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 186,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 186,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 186,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 186,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 186,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 186,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 186,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 186,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 186,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 186,
    "label": "initializes",
    "to": 224
  }, {
    "from": 186,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 186,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 228,
    "label": "assigns",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 228,
    "label": "assigns",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 228,
    "label": "assigns",
    "to": 235
  }, {
    "from": 235,
    "label": "assigns",
    "to": 236
  }, {
    "from": 228,
    "label": "assigns",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 228,
    "label": "assigns",
    "to": 239
  }, {
    "from": 239,
    "label": "assigns",
    "to": 240
  }, {
    "from": 228,
    "label": "assigns",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 228,
    "label": "assigns",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 228,
    "label": "assigns",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 228,
    "label": "assigns",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 228,
    "label": "assigns",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 228,
    "label": "assigns",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 228,
    "label": "assigns",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 228,
    "label": "assigns",
    "to": 255
  }, {
    "from": 255,
    "label": "assigns",
    "to": 256
  }, {
    "from": 228,
    "label": "assigns",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 228,
    "label": "assigns",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 228,
    "label": "assigns",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 228,
    "label": "assigns",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 186,
    "label": "initializes",
    "to": 265
  }, {
    "from": 186,
    "label": "initializes",
    "to": 266
  }, {
    "from": 266,
    "label": "assigns",
    "to": 267
  }, {
    "from": 186,
    "label": "initializes",
    "to": 268
  }, {
    "from": 268,
    "label": "assigns",
    "to": 269
  }, {
    "from": 186,
    "label": "initializes",
    "to": 270
  }, {
    "from": 270,
    "label": "assigns",
    "to": 271
  }, {
    "from": 186,
    "label": "initializes",
    "to": 272
  }, {
    "from": 272,
    "label": "assigns",
    "to": 273
  }, {
    "from": 186,
    "label": "initializes",
    "to": 274
  }, {
    "from": 274,
    "label": "assigns",
    "to": 275
  }, {
    "from": 186,
    "label": "initializes",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 186,
    "label": "initializes",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 186,
    "label": "initializes",
    "to": 280
  }, {
    "from": 280,
    "label": "assigns",
    "to": 281
  }, {
    "from": 186,
    "label": "initializes",
    "to": 282
  }, {
    "from": 282,
    "label": "assigns",
    "to": 283
  }, {
    "from": 186,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 186,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 186,
    "label": "initializes",
    "to": 288
  }, {
    "from": 288,
    "label": "assigns",
    "to": 289
  }, {
    "from": 186,
    "label": "initializes",
    "to": 290
  }, {
    "from": 290,
    "label": "assigns",
    "to": 291
  }, {
    "from": 187,
    "label": "initializes",
    "to": 292
  }, {
    "from": 292,
    "label": "requires",
    "to": 3
  }, {
    "from": 187,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 294
  }, {
    "from": 220,
    "label": "represents",
    "to": 295
  }, {
    "from": 294,
    "label": "provides",
    "to": 295
  }, {
    "from": 220,
    "label": "contains",
    "to": 14
  }, {
    "from": 220,
    "label": "contains",
    "to": 20
  }, {
    "from": 222,
    "label": "contains",
    "to": 22
  }, {
    "from": 222,
    "label": "contains",
    "to": 24
  }, {
    "from": 222,
    "label": "contains",
    "to": 26
  }, {
    "from": 222,
    "label": "contains",
    "to": 28
  }, {
    "from": 220,
    "label": "contains",
    "to": 30
  }, {
    "from": 220,
    "label": "contains",
    "to": 32
  }, {
    "from": 220,
    "label": "contains",
    "to": 43
  }, {
    "from": 220,
    "label": "contains",
    "to": 51
  }, {
    "from": 220,
    "label": "contains",
    "to": 56
  }, {
    "from": 220,
    "label": "contains",
    "to": 59
  }, {
    "from": 220,
    "label": "contains",
    "to": 61
  }, {
    "from": 220,
    "label": "contains",
    "to": 100
  }, {
    "from": 220,
    "label": "contains",
    "to": 122
  }, {
    "from": 220,
    "label": "contains",
    "to": 125
  }, {
    "from": 220,
    "label": "contains",
    "to": 127
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 157
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "func",
    "type": "module"
  }, {
    "id": 2,
    "text": "tablex",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function P (t)\r\n    setmetatable(t,_PEMT)\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "setmetatable(t,_PEMT)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function isPE (obj)\r\n    return getmetatable(obj) == _PEMT\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function PH (idx)\r\n    return P {op='X',repr='_'..idx, index=idx}\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function CPH (idx)\r\n    return P {op='X',repr='_C'..idx, index=idx}\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function func.Var (name)\r\n    local ls = utils.split(name,'[%s,]+')\r\n    local res = {}\r\n    for i = 1, #ls do\r\n        append(res,P{op='X',repr=ls[i],index=0})\r\n    end\r\n    return unpack(res)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local ls = utils.split(name,'[%s,]+')",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for i = 1, #ls do\r\n        append(res,P{op='X',repr=ls[i],index=0})\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "append(res,P{op='X',repr=ls[i],index=0})",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function func._ (value)\r\n    return P{op='X',repr=value,index='wrap'}\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function _PEMT.__index(obj,key)\r\n    return P{op='[]',obj,key}\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function _PEMT.__call(fun,...)\r\n    return P{op='()',fun,...}\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function _PEMT.__tostring (e)\r\n    return repr(e)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function _PEMT.__unm(arg)\r\n    return P{op='-',arg}\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function func.Not (arg)\r\n    return P{op='not',arg}\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function func.Len (arg)\r\n    return P{op='#',arg}\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function binreg(context,t)\r\n    for name,op in pairs(t) do\r\n        rawset(context,name,function(x,y)\r\n            return P{op=op,x,y}\r\n        end)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "for name,op in pairs(t) do\r\n        rawset(context,name,function(x,y)\r\n            return P{op=op,x,y}\r\n        end)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "rawset(context,name,function(x,y)\r\n            return P{op=op,x,y}\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function import_name (name,fun,context)\r\n    rawset(context,name,function(...)\r\n        return P{op='()',fun,...}\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "rawset(context,name,function(...)\r\n        return P{op='()',fun,...}\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function is_global_table (n)\r\n    return type(_G[n]) == 'table'\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function func.import(tname,context)\r\n    assert_arg(1,tname,'string',is_global_table,'arg# 1: not a name of a global table')\r\n    local t = _G[tname]\r\n    context = context or _G\r\n    for name,fun in pairs(t) do\r\n        import_name(name,fun,context)\r\n        imported_functions[fun] = name\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert_arg(1,tname,'string',is_global_table,'arg# 1: not a name of a global table')",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "local t = _G[tname]",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "context = context or _G",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "for name,fun in pairs(t) do\r\n        import_name(name,fun,context)\r\n        imported_functions[fun] = name\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "import_name(name,fun,context)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "imported_functions[fun] = name",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function func.register (fun,name)\r\n    assert_arg(1,fun,'function')\r\n    if name then\r\n        assert_arg(2,name,'string')\r\n        imported_functions[fun] = name\r\n    end\r\n    return function(...)\r\n        return P{op='()',fun,...}\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "assert_arg(1,fun,'function')",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if name then\r\n        assert_arg(2,name,'string')\r\n        imported_functions[fun] = name\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "assert_arg(2,name,'string')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function func.lookup_imported_name (fun)\r\n    return imported_functions[fun]\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function _arg(...) return ... end",
    "type": "function"
  }, {
    "id": 59,
    "text": "function func.Args (...)\r\n    return P{op='()',_arg,...}\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function func.tail (ls)\r\n    assert_arg(1,ls,'table')\r\n    local res = {}\r\n    for i = 2,#ls do\r\n        append(res,ls[i])\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "assert_arg(1,ls,'table')",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "for i = 2,#ls do\r\n        append(res,ls[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 64,
    "text": "append(res,ls[i])",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function repr (e,lastpred)\r\n    local tail = func.tail\r\n    if isPE(e) then\r\n        local pred = operators[e.op]\r\n        local ls = map(repr,e,pred)\r\n        if pred then --unary or binary operator\r\n            if #ls ~= 1 then\r\n                local s = concat(ls,' '..e.op..' ')\r\n                if lastpred and lastpred > pred then\r\n                    s = '('..s..')'\r\n                end\r\n                return s\r\n            else\r\n                return e.op..' '..ls[1]\r\n            end\r\n        else -- either postfix, or a placeholder\r\n            if e.op == '[]' then\r\n                return ls[1]..'['..ls[2]..']'\r\n            elseif e.op == '()' then\r\n                local fn\r\n                if ls[1] ~= nil then -- was _args, undeclared!\r\n                    fn = ls[1]\r\n                else\r\n                    fn = ''\r\n                end\r\n                return fn..'('..concat(tail(ls),',')..')'\r\n            else\r\n                return e.repr\r\n            end\r\n        end\r\n    elseif type(e) == 'string' then\r\n        return '\"'..e..'\"'\r\n    elseif type(e) == 'function' then\r\n        local name = func.lookup_imported_name(e)\r\n        if name then return name else return tostring(e) end\r\n    else\r\n        return tostring(e) --should not really get here!\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local tail = func.tail",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if isPE(e) then\r\n        local pred = operators[e.op]\r\n        local ls = map(repr,e,pred)\r\n        if pred then --unary or binary operator\r\n            if #ls ~= 1 then\r\n                local s = concat(ls,' '..e.op..' ')\r\n                if lastpred and lastpred > pred then\r\n                    s = '('..s..')'\r\n                end\r\n                return s\r\n            else\r\n                return e.op..' '..ls[1]\r\n            end\r\n        else -- either postfix, or a placeholder\r\n            if e.op == '[]' then\r\n                return ls[1]..'['..ls[2]..']'\r\n            elseif e.op == '()' then\r\n                local fn\r\n                if ls[1] ~= nil then -- was _args, undeclared!\r\n                    fn = ls[1]\r\n                else\r\n                    fn = ''\r\n                end\r\n                return fn..'('..concat(tail(ls),',')..')'\r\n            else\r\n                return e.repr\r\n            end\r\n        end\r\n    elseif type(e) == 'string' then\r\n        return '\"'..e..'\"'\r\n    elseif type(e) == 'function' then\r\n        local name = func.lookup_imported_name(e)\r\n        if name then return name else return tostring(e) end\r\n    else\r\n        return tostring(e) --should not really get here!\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local pred = operators[e.op]",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local ls = map(repr,e,pred)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if pred then --unary or binary operator\r\n            if #ls ~= 1 then\r\n                local s = concat(ls,' '..e.op..' ')\r\n                if lastpred and lastpred > pred then\r\n                    s = '('..s..')'\r\n                end\r\n                return s\r\n            else\r\n                return e.op..' '..ls[1]\r\n            end\r\n        else -- either postfix, or a placeholder\r\n            if e.op == '[]' then\r\n                return ls[1]..'['..ls[2]..']'\r\n            elseif e.op == '()' then\r\n                local fn\r\n                if ls[1] ~= nil then -- was _args, undeclared!\r\n                    fn = ls[1]\r\n                else\r\n                    fn = ''\r\n                end\r\n                return fn..'('..concat(tail(ls),',')..')'\r\n            else\r\n                return e.repr\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "if #ls ~= 1 then\r\n                local s = concat(ls,' '..e.op..' ')\r\n                if lastpred and lastpred > pred then\r\n                    s = '('..s..')'\r\n                end\r\n                return s\r\n            else\r\n                return e.op..' '..ls[1]\r\n            end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "local s = concat(ls,' '..e.op..' ')",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if lastpred and lastpred > pred then\r\n                    s = '('..s..')'\r\n                end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "s = '('..s..')'",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if e.op == '[]' then\r\n                return ls[1]..'['..ls[2]..']'\r\n            elseif e.op == '()' then\r\n                local fn\r\n                if ls[1] ~= nil then -- was _args, undeclared!\r\n                    fn = ls[1]\r\n                else\r\n                    fn = ''\r\n                end\r\n                return fn..'('..concat(tail(ls),',')..')'\r\n            else\r\n                return e.repr\r\n            end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "local fn",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if ls[1] ~= nil then -- was _args, undeclared!\r\n                    fn = ls[1]\r\n                else\r\n                    fn = ''\r\n                end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "fn = ls[1]",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "fn = ''",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "local name = func.lookup_imported_name(e)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if name then return name else return tostring(e) end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function collect_values (e,vlist)\r\n    if isPE(e) then\r\n        if e.op ~= 'X' then\r\n            local m = 0\r\n            for i = 1,#e do\r\n                local subx = e[i]\r\n                local pe = isPE(subx)\r\n                if pe then\r\n                    if subx.op == 'X' and subx.index == 'wrap' then\r\n                        subx = subx.repr\r\n                        pe = false\r\n                    else\r\n                        m = math.max(m,collect_values(subx,vlist))\r\n                    end\r\n                end\r\n                if not pe then\r\n                    append(vlist,subx)\r\n                    e[i] = CPH(#vlist)\r\n                end\r\n            end\r\n            return m\r\n        else -- was a placeholder, it has an index...\r\n            return e.index\r\n        end\r\n    else -- plain value has no placeholder dependence\r\n        return 0\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "if isPE(e) then\r\n        if e.op ~= 'X' then\r\n            local m = 0\r\n            for i = 1,#e do\r\n                local subx = e[i]\r\n                local pe = isPE(subx)\r\n                if pe then\r\n                    if subx.op == 'X' and subx.index == 'wrap' then\r\n                        subx = subx.repr\r\n                        pe = false\r\n                    else\r\n                        m = math.max(m,collect_values(subx,vlist))\r\n                    end\r\n                end\r\n                if not pe then\r\n                    append(vlist,subx)\r\n                    e[i] = CPH(#vlist)\r\n                end\r\n            end\r\n            return m\r\n        else -- was a placeholder, it has an index...\r\n            return e.index\r\n        end\r\n    else -- plain value has no placeholder dependence\r\n        return 0\r\n    end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "if e.op ~= 'X' then\r\n            local m = 0\r\n            for i = 1,#e do\r\n                local subx = e[i]\r\n                local pe = isPE(subx)\r\n                if pe then\r\n                    if subx.op == 'X' and subx.index == 'wrap' then\r\n                        subx = subx.repr\r\n                        pe = false\r\n                    else\r\n                        m = math.max(m,collect_values(subx,vlist))\r\n                    end\r\n                end\r\n                if not pe then\r\n                    append(vlist,subx)\r\n                    e[i] = CPH(#vlist)\r\n                end\r\n            end\r\n            return m\r\n        else -- was a placeholder, it has an index...\r\n            return e.index\r\n        end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "local m = 0",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "for i = 1,#e do\r\n                local subx = e[i]\r\n                local pe = isPE(subx)\r\n                if pe then\r\n                    if subx.op == 'X' and subx.index == 'wrap' then\r\n                        subx = subx.repr\r\n                        pe = false\r\n                    else\r\n                        m = math.max(m,collect_values(subx,vlist))\r\n                    end\r\n                end\r\n                if not pe then\r\n                    append(vlist,subx)\r\n                    e[i] = CPH(#vlist)\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 89,
    "text": "local subx = e[i]",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local pe = isPE(subx)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if pe then\r\n                    if subx.op == 'X' and subx.index == 'wrap' then\r\n                        subx = subx.repr\r\n                        pe = false\r\n                    else\r\n                        m = math.max(m,collect_values(subx,vlist))\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "if subx.op == 'X' and subx.index == 'wrap' then\r\n                        subx = subx.repr\r\n                        pe = false\r\n                    else\r\n                        m = math.max(m,collect_values(subx,vlist))\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "subx = subx.repr",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "pe = false",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "m = math.max(m,collect_values(subx,vlist))",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if not pe then\r\n                    append(vlist,subx)\r\n                    e[i] = CPH(#vlist)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "append(vlist,subx)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "e[i] = CPH(#vlist)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function func.instantiate (e)\r\n    local consts,values,parms = {},{},{}\r\n    local rep, err, fun\r\n    local n = func.collect_values(e,values)\r\n    for i = 1,#values do\r\n        append(consts,'_C'..i)\r\n        if _DEBUG then print(i,values[i]) end\r\n    end\r\n    for i =1,n do\r\n        append(parms,'_'..i)\r\n    end\r\n    consts = concat(consts,',')\r\n    parms = concat(parms,',')\r\n    rep = repr(e)\r\n    local fstr = ('return function(%s) return function(%s) return %s end end'):format(consts,parms,rep)\r\n    if _DEBUG then print(fstr) end\r\n    fun,err = utils.load(fstr,'fun')\r\n    if not fun then return nil,err end\r\n    fun = fun()  -- get wrapper\r\n    fun = fun(unpack(values)) -- call wrapper (values could be empty)\r\n    e.__PE_function = fun\r\n    return fun\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "local consts,values,parms = {},{},{}",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local rep, err, fun",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local n = func.collect_values(e,values)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "for i = 1,#values do\r\n        append(consts,'_C'..i)\r\n        if _DEBUG then print(i,values[i]) end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 105,
    "text": "append(consts,'_C'..i)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "if _DEBUG then print(i,values[i]) end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "print(i,values[i])",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "for i =1,n do\r\n        append(parms,'_'..i)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 109,
    "text": "append(parms,'_'..i)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "consts = concat(consts,',')",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "parms = concat(parms,',')",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "rep = repr(e)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "local fstr = ('return function(%s) return function(%s) return %s end end'):format(consts,parms,rep)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "if _DEBUG then print(fstr) end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "print(fstr)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "fun,err = utils.load(fstr,'fun')",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "if not fun then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "fun = fun()",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "fun = fun(unpack(values))",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "e.__PE_function = fun",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function func.I(e)\r\n    if rawget(e,'__PE_function')  then\r\n        return e.__PE_function\r\n    else return func.instantiate(e)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "if rawget(e,'__PE_function')  then\r\n        return e.__PE_function\r\n    else return func.instantiate(e)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function func.compose (f,g)\r\n    return function(...) return f(g(...)) end\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function func.bind(fn,...)\r\n    local args = table.pack(...)\r\n    local holders,parms,bvalues,values = {},{},{'fn'},{}\r\n    local nv,maxplace,varargs = 1,0,false\r\n    for i = 1,args.n do\r\n        local a = args[i]\r\n        if isPE(a) and a.op == 'X' then\r\n            append(holders,a.repr)\r\n            maxplace = math.max(maxplace,a.index)\r\n            if a.index == 0 then varargs = true end\r\n        else\r\n            local v = '_v'..nv\r\n            append(bvalues,v)\r\n            append(holders,v)\r\n            append(values,a)\r\n            nv = nv + 1\r\n        end\r\n    end\r\n    for np = 1,maxplace do\r\n        append(parms,'_'..np)\r\n    end\r\n    if varargs then append(parms,'...') end\r\n    bvalues = concat(bvalues,',')\r\n    parms = concat(parms,',')\r\n    holders = concat(holders,',')\r\n    local fstr = ([[\r\nreturn function (%s)\r\n    return function(%s) return fn(%s) end\r\nend\r\n]]):format(bvalues,parms,holders)\r\n    if _DEBUG then print(fstr) end\r\n    local res,err = utils.load(fstr)\r\n    res = res()\r\n    return res(fn,unpack(values))\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "local args = table.pack(...)",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "local holders,parms,bvalues,values = {},{},{'fn'},{}",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local nv,maxplace,varargs = 1,0,false",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "for i = 1,args.n do\r\n        local a = args[i]\r\n        if isPE(a) and a.op == 'X' then\r\n            append(holders,a.repr)\r\n            maxplace = math.max(maxplace,a.index)\r\n            if a.index == 0 then varargs = true end\r\n        else\r\n            local v = '_v'..nv\r\n            append(bvalues,v)\r\n            append(holders,v)\r\n            append(values,a)\r\n            nv = nv + 1\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 132,
    "text": "local a = args[i]",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "if isPE(a) and a.op == 'X' then\r\n            append(holders,a.repr)\r\n            maxplace = math.max(maxplace,a.index)\r\n            if a.index == 0 then varargs = true end\r\n        else\r\n            local v = '_v'..nv\r\n            append(bvalues,v)\r\n            append(holders,v)\r\n            append(values,a)\r\n            nv = nv + 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "append(holders,a.repr)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "maxplace = math.max(maxplace,a.index)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "if a.index == 0 then varargs = true end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "varargs = true",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "local v = '_v'..nv",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "append(bvalues,v)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "append(holders,v)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "append(values,a)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "nv = nv + 1",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "for np = 1,maxplace do\r\n        append(parms,'_'..np)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 144,
    "text": "append(parms,'_'..np)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "if varargs then append(parms,'...') end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "append(parms,'...')",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "bvalues = concat(bvalues,',')",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "holders = concat(holders,',')",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "local fstr = ([[\r\nreturn function (%s)\r\n    return function(%s) return fn(%s) end\r\nend\r\n]]):format(bvalues,parms,holders)",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "local res,err = utils.load(fstr)",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "res = res()",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function(x,y)\r\n            return P{op=op,x,y}\r\n        end",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function(...)\r\n        return P{op='()',fun,...}\r\n    end",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function(...)\r\n        return P{op='()',fun,...}\r\n    end",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function(...) return f(g(...)) end",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "function container"
  }, {
    "id": 161,
    "text": "add_function_factory",
    "type": "global function"
  }, {
    "id": 162,
    "text": "load",
    "type": "global function"
  }, {
    "id": 163,
    "text": "split",
    "type": "global function"
  }, {
    "id": 164,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 165,
    "text": "append",
    "type": "global function"
  }, {
    "id": 166,
    "text": "print",
    "type": "global function"
  }, {
    "id": 167,
    "text": "map",
    "type": "global function"
  }, {
    "id": 168,
    "text": "collect_values",
    "type": "global function"
  }, {
    "id": 169,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 170,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 171,
    "text": "f",
    "type": "global function"
  }, {
    "id": 172,
    "text": "require",
    "type": "global function"
  }, {
    "id": 173,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 174,
    "text": "type",
    "type": "global function"
  }, {
    "id": 175,
    "text": "max",
    "type": "global function"
  }, {
    "id": 176,
    "text": "g",
    "type": "global function"
  }, {
    "id": 177,
    "text": "pack",
    "type": "global function"
  }, {
    "id": 178,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 179,
    "text": "res",
    "type": "global function"
  }, {
    "id": 180,
    "text": "tail",
    "type": "global function"
  }, {
    "id": 181,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 182,
    "text": "fun",
    "type": "global function"
  }, {
    "id": 183,
    "text": "assert_arg",
    "type": "global function"
  }, {
    "id": 184,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 185,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 186,
    "text": "",
    "type": "variable container"
  }, {
    "id": 187,
    "text": "",
    "type": "require container"
  }, {
    "id": 188,
    "text": "",
    "type": "local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "n/a"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "n/a"
  }, {
    "id": 200,
    "text": "",
    "type": "local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "n/a"
  }, {
    "id": 202,
    "text": "",
    "type": "local variable"
  }, {
    "id": 203,
    "text": "",
    "type": "n/a"
  }, {
    "id": 204,
    "text": "",
    "type": "local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "n/a"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "n/a"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "n/a"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "n/a"
  }, {
    "id": 216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 229,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 230,
    "text": "",
    "type": "number"
  }, {
    "id": 231,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 232,
    "text": "",
    "type": "number"
  }, {
    "id": 233,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 234,
    "text": "",
    "type": "number"
  }, {
    "id": 235,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 236,
    "text": "",
    "type": "number"
  }, {
    "id": 237,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 238,
    "text": "",
    "type": "number"
  }, {
    "id": 239,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 240,
    "text": "",
    "type": "number"
  }, {
    "id": 241,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 242,
    "text": "",
    "type": "number"
  }, {
    "id": 243,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 244,
    "text": "",
    "type": "number"
  }, {
    "id": 245,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 246,
    "text": "",
    "type": "number"
  }, {
    "id": 247,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 248,
    "text": "",
    "type": "number"
  }, {
    "id": 249,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 250,
    "text": "",
    "type": "number"
  }, {
    "id": 251,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 252,
    "text": "",
    "type": "number"
  }, {
    "id": 253,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 254,
    "text": "",
    "type": "number"
  }, {
    "id": 255,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 256,
    "text": "",
    "type": "number"
  }, {
    "id": 257,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 258,
    "text": "",
    "type": "number"
  }, {
    "id": 259,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 260,
    "text": "",
    "type": "number"
  }, {
    "id": 261,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 262,
    "text": "",
    "type": "number"
  }, {
    "id": 263,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 264,
    "text": "",
    "type": "number"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "global variable"
  }, {
    "id": 267,
    "text": "",
    "type": "n/a"
  }, {
    "id": 268,
    "text": "",
    "type": "global variable"
  }, {
    "id": 269,
    "text": "",
    "type": "n/a"
  }, {
    "id": 270,
    "text": "",
    "type": "global variable"
  }, {
    "id": 271,
    "text": "",
    "type": "n/a"
  }, {
    "id": 272,
    "text": "",
    "type": "global variable"
  }, {
    "id": 273,
    "text": "",
    "type": "n/a"
  }, {
    "id": 274,
    "text": "",
    "type": "global variable"
  }, {
    "id": 275,
    "text": "",
    "type": "n/a"
  }, {
    "id": 276,
    "text": "",
    "type": "global variable"
  }, {
    "id": 277,
    "text": "",
    "type": "n/a"
  }, {
    "id": 278,
    "text": "",
    "type": "global variable"
  }, {
    "id": 279,
    "text": "",
    "type": "n/a"
  }, {
    "id": 280,
    "text": "",
    "type": "global variable"
  }, {
    "id": 281,
    "text": "",
    "type": "n/a"
  }, {
    "id": 282,
    "text": "",
    "type": "global variable"
  }, {
    "id": 283,
    "text": "",
    "type": "n/a"
  }, {
    "id": 284,
    "text": "",
    "type": "global variable"
  }, {
    "id": 285,
    "text": "",
    "type": "n/a"
  }, {
    "id": 286,
    "text": "",
    "type": "global variable"
  }, {
    "id": 287,
    "text": "",
    "type": "n/a"
  }, {
    "id": 288,
    "text": "",
    "type": "global variable"
  }, {
    "id": 289,
    "text": "",
    "type": "n/a"
  }, {
    "id": 290,
    "text": "",
    "type": "global variable"
  }, {
    "id": 291,
    "text": "",
    "type": "n/a"
  }, {
    "id": 292,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 293,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "interface container"
  }, {
    "id": 295,
    "text": "",
    "type": "interface"
  } ]
}