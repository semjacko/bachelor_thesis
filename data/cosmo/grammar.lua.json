{
  "_filename": "grammar.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cosmo/src/cosmo/grammar.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 11
  }, {
    "from": 15,
    "label": "has",
    "to": 11
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 11
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 21,
    "label": "has",
    "to": 11
  }, {
    "from": 21,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 11
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 11
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 11
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 11
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 11
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 11
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 67
  }, {
    "from": 57,
    "label": "calls",
    "to": 44
  }, {
    "from": 57,
    "label": "calls",
    "to": 66
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 53
  }, {
    "from": 57,
    "label": "calls",
    "to": 21
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 69
  }, {
    "from": 21,
    "label": "calls",
    "to": 69
  }, {
    "from": 21,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 72
  }, {
    "from": 57,
    "label": "calls",
    "to": 60
  }, {
    "from": 57,
    "label": "calls",
    "to": 60
  }, {
    "from": 57,
    "label": "calls",
    "to": 60
  }, {
    "from": 57,
    "label": "calls",
    "to": 60
  }, {
    "from": 57,
    "label": "calls",
    "to": 60
  }, {
    "from": 57,
    "label": "calls",
    "to": 60
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 15,
    "label": "calls",
    "to": 75
  }, {
    "from": 57,
    "label": "calls",
    "to": 68
  }, {
    "from": 57,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 44,
    "label": "calls",
    "to": 19
  }, {
    "from": 57,
    "label": "calls",
    "to": 77
  }, {
    "from": 57,
    "label": "calls",
    "to": 78
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 32,
    "label": "calls",
    "to": 73
  }, {
    "from": 57,
    "label": "calls",
    "to": 71
  }, {
    "from": 44,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 57,
    "label": "declares",
    "to": 2
  }, {
    "from": 57,
    "label": "declares",
    "to": 13
  }, {
    "from": 57,
    "label": "declares",
    "to": 15
  }, {
    "from": 57,
    "label": "declares",
    "to": 19
  }, {
    "from": 57,
    "label": "declares",
    "to": 21
  }, {
    "from": 57,
    "label": "declares",
    "to": 30
  }, {
    "from": 57,
    "label": "declares",
    "to": 32
  }, {
    "from": 57,
    "label": "declares",
    "to": 37
  }, {
    "from": 57,
    "label": "declares",
    "to": 39
  }, {
    "from": 57,
    "label": "declares",
    "to": 44
  }, {
    "from": 57,
    "label": "declares",
    "to": 48
  }, {
    "from": 57,
    "label": "declares",
    "to": 52
  }, {
    "from": 57,
    "label": "declares",
    "to": 53
  }, {
    "from": 58,
    "label": "calls",
    "to": 44
  }, {
    "from": 79,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 80,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 80,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 80,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 80,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 80,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 80,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 80,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 80,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 80,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 80,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 80,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 80,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 80,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 107,
    "label": "assigns",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 107,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 107,
    "label": "assigns",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 107,
    "label": "assigns",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 107,
    "label": "assigns",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 107,
    "label": "assigns",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 107,
    "label": "assigns",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 107,
    "label": "assigns",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 107,
    "label": "assigns",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 107,
    "label": "assigns",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 107,
    "label": "assigns",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 107,
    "label": "assigns",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 107,
    "label": "assigns",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 107,
    "label": "assigns",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 107,
    "label": "assigns",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 107,
    "label": "assigns",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 80,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 80,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 81,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "requires",
    "to": 59
  }, {
    "from": 81,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "requires",
    "to": 63
  }, {
    "from": 1,
    "label": "provides",
    "to": 148
  }, {
    "from": 148,
    "label": "provides",
    "to": 149
  }, {
    "from": 150,
    "label": "requires",
    "to": 1
  }, {
    "from": 151,
    "label": "requires",
    "to": 1
  }, {
    "from": 9,
    "label": "hasArgument",
    "to": 131
  }, {
    "from": 9,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 131
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 131
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 133
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "grammar",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function parse_selector(selector, env)\r\n  env = env or \"env\"\r\n  selector = string.sub(selector, 2, #selector)\r\n  local parts = {}\r\n  for w in string.gmatch(selector, \"[^|]+\") do\r\n    local n = tonumber(w)\r\n    if n then\r\n      table.insert(parts, \"[\" .. n .. \"]\")\r\n    else\r\n      table.insert(parts, \"['\" .. w .. \"']\")\r\n    end\r\n  end\r\n  return env .. table.concat(parts)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "env = env or \"env\"",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "selector = string.sub(selector, 2, #selector)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "local parts = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for w in string.gmatch(selector, \"[^|]+\") do\r\n    local n = tonumber(w)\r\n    if n then\r\n      table.insert(parts, \"[\" .. n .. \"]\")\r\n    else\r\n      table.insert(parts, \"['\" .. w .. \"']\")\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "local n = tonumber(w)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if n then\r\n      table.insert(parts, \"[\" .. n .. \"]\")\r\n    else\r\n      table.insert(parts, \"['\" .. w .. \"']\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "table.insert(parts, \"[\" .. n .. \"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "table.insert(parts, \"['\" .. w .. \"']\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function parse_exp(exp)\r\n  return exp\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function parse_longstring(s)\r\n  local start = s:match(\"^(%[=*%[)\")\r\n  if start then\r\n    return string.format(\"%q\", s:sub(#start + 1, #s - #start))\r\n  else\r\n    return s\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local start = s:match(\"^(%[=*%[)\")",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if start then\r\n    return string.format(\"%q\", s:sub(#start + 1, #s - #start))\r\n  else\r\n    return s\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function syntax(lbra, rbra)\r\n  return [[\r\n      template <- (<item>* -> {} !.) -> compiletemplate\r\n      item <- <text> / <templateappl> / (. => error)\r\n      text <- ({~ (!<selector> ('$$' -> '$' / .))+ ~}) -> compiletext\r\n      selector <- ('$]] .. lbra .. [[' %s {~ <exp> ~} %s ']] .. rbra .. [[') -> parseexp /\r\n         ('$' %alphanum+ ('|' %alphanum+)*) -> parseselector\r\n      templateappl <- ({~ <selector> ~} {~ <args>? ~} !'{'\r\n         ({%longstring} -> compilesubtemplate)? (%s ','? %s ({%longstring} -> compilesubtemplate))* -> {} !(','? %s %start))\r\n         -> compileapplication\r\n      args <- '{' %s '}' / '{' %s <arg> %s (',' %s <arg> %s)* ','? %s '}'\r\n      arg <- <attr> / <exp>\r\n      attr <- <symbol> %s '=' !'=' %s <exp> / '[' !'[' !'=' %s <exp> %s ']' %s '=' %s <exp>\r\n      symbol <- %alpha %alphanum*\r\n      explist <- <exp> (%s ',' %s <exp>)* (%s ',')?\r\n      exp <- <simpleexp> (%s <binop> %s <simpleexp>)*\r\n      simpleexp <- <args> / %string / %longstring -> parsels / %number / 'true' / 'false' /\r\n         'nil' / <unop> %s <exp> / <prefixexp> / (. => error)\r\n      unop <- '-' / 'not' / '#'\r\n      binop <- '+' / '-' / '*' / '/' / '^' / '%' / '..' / '<=' / '<' / '>=' / '>' / '==' / '~=' /\r\n          'and' / 'or'\r\n      prefixexp <- ( <selector> / {%name} -> addenv / '(' %s <exp> %s ')' )\r\n          ( %s <args> / '.' %name / ':' %name %s ('(' %s ')' / '(' %s <explist> %s ')') /\r\n          '[' %s <exp> %s ']' / '(' %s ')' / '(' %s <explist> %s ')' /\r\n          %string / %longstring -> parsels %s )*\r\n  ]]\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function pos_to_line(str, pos)\r\n  local s = str:sub(1, pos)\r\n  local line, start = 1, 0\r\n  local newline = string.find(s, \"\\n\")\r\n  while newline do\r\n    line = line + 1\r\n    start = newline\r\n    newline = string.find(s, \"\\n\", newline + 1)\r\n  end\r\n  return line, pos - start\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local s = str:sub(1, pos)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local line, start = 1, 0",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local newline = string.find(s, \"\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "while newline do\r\n    line = line + 1\r\n    start = newline\r\n    newline = string.find(s, \"\\n\", newline + 1)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 26,
    "text": "line = line + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "start = newline",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "newline = string.find(s, \"\\n\", newline + 1)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function ast_text(text)\r\n  return { tag = \"text\", text = text }\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function ast_template_application(selector, args, ast_first_subtemplate, ast_subtemplates)\r\n  if not ast_subtemplates then\r\n    ast_first_subtemplate = nil\r\n  end\r\n  local subtemplates = { ast_first_subtemplate, unpack(ast_subtemplates or {}) }\r\n  return { tag = \"appl\", selector = selector, args = args, subtemplates = subtemplates }\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "if not ast_subtemplates then\r\n    ast_first_subtemplate = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "ast_first_subtemplate = nil",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local subtemplates = { ast_first_subtemplate, unpack(ast_subtemplates or {}) }",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function ast_template(parts)\r\n  return { tag = \"template\", parts = parts }\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function ast_subtemplate(text)\r\n  local start = text:match(\"^(%[=*%[)\")\r\n  if start then text = text:sub(#start + 1, #text - #start) end\r\n  return ast:match(text)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local start = text:match(\"^(%[=*%[)\")",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if start then text = text:sub(#start + 1, #text - #start) end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "text = text:sub(#start + 1, #text - #start)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function new(lbra, rbra)\r\n  lbra = lbra or \"(\"\r\n  rbra = rbra or \")\"\r\n  return re.compile(syntax(lbra, rbra), syntax_defs)\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "lbra = lbra or \"(\"",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "rbra = rbra or \")\"",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function (s, i, start)\r\n  local p = string.gsub(start, \"%[\", \"]\")\r\n  local _, e = string.find(s, p, i)\r\n  return (e and e + 1)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local p = string.gsub(start, \"%[\", \"]\")",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local _, e = string.find(s, p, i)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function (s) return \"env['\" .. s .. \"']\" end",
    "type": "function"
  }, {
    "id": 53,
    "text": "function (tmpl, pos)\r\n                local line, pos = pos_to_line(tmpl, pos)\r\n                error(\"syntax error in template at line \" .. line .. \" position \" .. pos)\r\n              end",
    "type": "function"
  }, {
    "id": 54,
    "text": "local line, pos = pos_to_line(tmpl, pos)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "error(\"syntax error in template at line \" .. line .. \" position \" .. pos)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "",
    "type": "function container"
  }, {
    "id": 58,
    "text": "",
    "type": "function container"
  }, {
    "id": 59,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 60,
    "text": "S",
    "type": "global function"
  }, {
    "id": 61,
    "text": "R",
    "type": "global function"
  }, {
    "id": 62,
    "text": "P",
    "type": "global function"
  }, {
    "id": 63,
    "text": "re",
    "type": "module"
  }, {
    "id": 64,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 65,
    "text": "Cmt",
    "type": "global function"
  }, {
    "id": 66,
    "text": "V",
    "type": "global function"
  }, {
    "id": 67,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 68,
    "text": "require",
    "type": "global function"
  }, {
    "id": 69,
    "text": "find",
    "type": "global function"
  }, {
    "id": 70,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 71,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 72,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 73,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 74,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 75,
    "text": "format",
    "type": "global function"
  }, {
    "id": 76,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 77,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 78,
    "text": "module",
    "type": "global function"
  }, {
    "id": 79,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "variable container"
  }, {
    "id": 81,
    "text": "",
    "type": "require container"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 108,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 109,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 110,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 111,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 114,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 115,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 116,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 117,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 118,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 119,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 120,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 121,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 122,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 123,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 124,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 125,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 126,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 127,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 128,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 129,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 130,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 131,
    "text": "",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 133,
    "text": "",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 135,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 136,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 137,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 138,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 139,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 140,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 141,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 142,
    "text": "",
    "type": "global variable"
  }, {
    "id": 143,
    "text": "",
    "type": "n/a"
  }, {
    "id": 144,
    "text": "",
    "type": "global variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "interface container"
  }, {
    "id": 149,
    "text": "",
    "type": "interface"
  }, {
    "id": 150,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "require local variable"
  } ]
}