{
  "_filename": "cosmo.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cosmo/src/cosmo.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 4,
    "label": "calls",
    "to": 56
  }, {
    "from": 4,
    "label": "calls",
    "to": 56
  }, {
    "from": 4,
    "label": "calls",
    "to": 56
  }, {
    "from": 4,
    "label": "calls",
    "to": 56
  }, {
    "from": 4,
    "label": "calls",
    "to": 56
  }, {
    "from": 4,
    "label": "calls",
    "to": 56
  }, {
    "from": 4,
    "label": "calls",
    "to": 64
  }, {
    "from": 4,
    "label": "calls",
    "to": 64
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 29,
    "label": "has",
    "to": 7
  }, {
    "from": 29,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 7
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 47
  }, {
    "from": 56,
    "label": "has",
    "to": 48
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 7
  }, {
    "from": 56,
    "label": "has",
    "to": 7
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 7
  }, {
    "from": 64,
    "label": "has",
    "to": 7
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 7
  }, {
    "from": 69,
    "label": "has",
    "to": 66
  }, {
    "from": 69,
    "label": "has",
    "to": 7
  }, {
    "from": 68,
    "label": "has",
    "to": 7
  }, {
    "from": 68,
    "label": "has",
    "to": 7
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 7
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 77
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 7
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 88
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 92
  }, {
    "from": 101,
    "label": "has",
    "to": 93
  }, {
    "from": 101,
    "label": "has",
    "to": 92
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 95
  }, {
    "from": 102,
    "label": "has",
    "to": 93
  }, {
    "from": 102,
    "label": "has",
    "to": 95
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 104,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 7
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 66
  }, {
    "from": 119,
    "label": "has",
    "to": 66
  }, {
    "from": 120,
    "label": "has",
    "to": 7
  }, {
    "from": 120,
    "label": "has",
    "to": 66
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 7
  }, {
    "from": 123,
    "label": "has",
    "to": 98
  }, {
    "from": 123,
    "label": "has",
    "to": 88
  }, {
    "from": 123,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 92
  }, {
    "from": 101,
    "label": "has",
    "to": 93
  }, {
    "from": 101,
    "label": "has",
    "to": 92
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 95
  }, {
    "from": 102,
    "label": "has",
    "to": 93
  }, {
    "from": 102,
    "label": "has",
    "to": 95
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 15,
    "label": "calls",
    "to": 129
  }, {
    "from": 15,
    "label": "calls",
    "to": 136
  }, {
    "from": 26,
    "label": "calls",
    "to": 136
  }, {
    "from": 29,
    "label": "calls",
    "to": 136
  }, {
    "from": 20,
    "label": "calls",
    "to": 131
  }, {
    "from": 26,
    "label": "calls",
    "to": 131
  }, {
    "from": 29,
    "label": "calls",
    "to": 131
  }, {
    "from": 29,
    "label": "calls",
    "to": 20
  }, {
    "from": 46,
    "label": "calls",
    "to": 20
  }, {
    "from": 11,
    "label": "calls",
    "to": 132
  }, {
    "from": 15,
    "label": "calls",
    "to": 132
  }, {
    "from": 79,
    "label": "calls",
    "to": 132
  }, {
    "from": 29,
    "label": "calls",
    "to": 134
  }, {
    "from": 64,
    "label": "calls",
    "to": 134
  }, {
    "from": 68,
    "label": "calls",
    "to": 134
  }, {
    "from": 71,
    "label": "calls",
    "to": 134
  }, {
    "from": 76,
    "label": "calls",
    "to": 134
  }, {
    "from": 79,
    "label": "calls",
    "to": 134
  }, {
    "from": 86,
    "label": "calls",
    "to": 134
  }, {
    "from": 86,
    "label": "calls",
    "to": 134
  }, {
    "from": 86,
    "label": "calls",
    "to": 134
  }, {
    "from": 86,
    "label": "calls",
    "to": 134
  }, {
    "from": 86,
    "label": "calls",
    "to": 134
  }, {
    "from": 86,
    "label": "calls",
    "to": 134
  }, {
    "from": 97,
    "label": "calls",
    "to": 134
  }, {
    "from": 97,
    "label": "calls",
    "to": 134
  }, {
    "from": 97,
    "label": "calls",
    "to": 134
  }, {
    "from": 97,
    "label": "calls",
    "to": 134
  }, {
    "from": 97,
    "label": "calls",
    "to": 134
  }, {
    "from": 97,
    "label": "calls",
    "to": 134
  }, {
    "from": 104,
    "label": "calls",
    "to": 134
  }, {
    "from": 104,
    "label": "calls",
    "to": 134
  }, {
    "from": 104,
    "label": "calls",
    "to": 134
  }, {
    "from": 20,
    "label": "calls",
    "to": 56
  }, {
    "from": 56,
    "label": "calls",
    "to": 56
  }, {
    "from": 56,
    "label": "calls",
    "to": 46
  }, {
    "from": 20,
    "label": "calls",
    "to": 137
  }, {
    "from": 29,
    "label": "calls",
    "to": 137
  }, {
    "from": 71,
    "label": "calls",
    "to": 137
  }, {
    "from": 86,
    "label": "calls",
    "to": 137
  }, {
    "from": 97,
    "label": "calls",
    "to": 137
  }, {
    "from": 104,
    "label": "calls",
    "to": 137
  }, {
    "from": 11,
    "label": "calls",
    "to": 5
  }, {
    "from": 15,
    "label": "calls",
    "to": 141
  }, {
    "from": 20,
    "label": "calls",
    "to": 138
  }, {
    "from": 5,
    "label": "calls",
    "to": 143
  }, {
    "from": 125,
    "label": "calls",
    "to": 139
  }, {
    "from": 125,
    "label": "calls",
    "to": 139
  }, {
    "from": 125,
    "label": "calls",
    "to": 139
  }, {
    "from": 125,
    "label": "calls",
    "to": 140
  }, {
    "from": 46,
    "label": "calls",
    "to": 15
  }, {
    "from": 5,
    "label": "calls",
    "to": 142
  }, {
    "from": 11,
    "label": "calls",
    "to": 142
  }, {
    "from": 86,
    "label": "calls",
    "to": 142
  }, {
    "from": 97,
    "label": "calls",
    "to": 142
  }, {
    "from": 104,
    "label": "calls",
    "to": 142
  }, {
    "from": 125,
    "label": "calls",
    "to": 133
  }, {
    "from": 125,
    "label": "calls",
    "to": 133
  }, {
    "from": 104,
    "label": "calls",
    "to": 135
  }, {
    "from": 71,
    "label": "calls",
    "to": 130
  }, {
    "from": 3,
    "label": "contains",
    "to": 125
  }, {
    "from": 125,
    "label": "declares",
    "to": 5
  }, {
    "from": 125,
    "label": "declares",
    "to": 11
  }, {
    "from": 125,
    "label": "declares",
    "to": 15
  }, {
    "from": 125,
    "label": "declares",
    "to": 20
  }, {
    "from": 125,
    "label": "declares",
    "to": 26
  }, {
    "from": 125,
    "label": "declares",
    "to": 29
  }, {
    "from": 125,
    "label": "declares",
    "to": 44
  }, {
    "from": 125,
    "label": "declares",
    "to": 46
  }, {
    "from": 125,
    "label": "declares",
    "to": 56
  }, {
    "from": 125,
    "label": "declares",
    "to": 63
  }, {
    "from": 125,
    "label": "declares",
    "to": 64
  }, {
    "from": 125,
    "label": "declares",
    "to": 68
  }, {
    "from": 125,
    "label": "declares",
    "to": 71
  }, {
    "from": 125,
    "label": "declares",
    "to": 76
  }, {
    "from": 125,
    "label": "declares",
    "to": 79
  }, {
    "from": 125,
    "label": "declares",
    "to": 86
  }, {
    "from": 125,
    "label": "declares",
    "to": 97
  }, {
    "from": 125,
    "label": "declares",
    "to": 104
  }, {
    "from": 125,
    "label": "declares",
    "to": 114
  }, {
    "from": 125,
    "label": "declares",
    "to": 118
  }, {
    "from": 125,
    "label": "declares",
    "to": 119
  }, {
    "from": 125,
    "label": "declares",
    "to": 120
  }, {
    "from": 125,
    "label": "declares",
    "to": 122
  }, {
    "from": 125,
    "label": "declares",
    "to": 123
  }, {
    "from": 126,
    "label": "calls",
    "to": 68
  }, {
    "from": 126,
    "label": "calls",
    "to": 68
  }, {
    "from": 126,
    "label": "calls",
    "to": 68
  }, {
    "from": 126,
    "label": "calls",
    "to": 97
  }, {
    "from": 126,
    "label": "calls",
    "to": 97
  }, {
    "from": 126,
    "label": "calls",
    "to": 97
  }, {
    "from": 126,
    "label": "calls",
    "to": 97
  }, {
    "from": 126,
    "label": "calls",
    "to": 97
  }, {
    "from": 126,
    "label": "calls",
    "to": 97
  }, {
    "from": 126,
    "label": "calls",
    "to": 97
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 56
  }, {
    "from": 126,
    "label": "calls",
    "to": 64
  }, {
    "from": 126,
    "label": "calls",
    "to": 64
  }, {
    "from": 3,
    "label": "declares",
    "to": 127
  }, {
    "from": 3,
    "label": "declares",
    "to": 128
  }, {
    "from": 144,
    "label": "requires",
    "to": 3
  }, {
    "from": 3,
    "label": "contains",
    "to": 145
  }, {
    "from": 3,
    "label": "contains",
    "to": 146
  }, {
    "from": 145,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 145,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 145,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 145,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 145,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 145,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 145,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 145,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 145,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 145,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 146,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "requires",
    "to": 2
  }, {
    "from": 146,
    "label": "initializes",
    "to": 168
  }, {
    "from": 168,
    "label": "requires",
    "to": 1
  }, {
    "from": 3,
    "label": "provides",
    "to": 169
  }, {
    "from": 169,
    "label": "provides",
    "to": 170
  }, {
    "from": 171,
    "label": "requires",
    "to": 3
  }, {
    "from": 155,
    "label": "contains",
    "to": 20
  }, {
    "from": 155,
    "label": "contains",
    "to": 26
  }, {
    "from": 155,
    "label": "contains",
    "to": 29
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fill",
    "type": "module"
  }, {
    "id": 2,
    "text": "grammar",
    "type": "module"
  }, {
    "id": 3,
    "text": "cosmo",
    "type": "module"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "local function is_callable(f)\r\n  if type(f) == \"function\" then return true end\r\n  local meta = getmetatable(f)\r\n  if meta and meta.__call then return true end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if type(f) == \"function\" then return true end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "local meta = getmetatable(f)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if meta and meta.__call then return true end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function check_selector(name, selector)\r\n  if not is_callable(selector) then\r\n    error(\"selector \" .. name .. \" is not callable but is \" .. type(selector))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if not is_callable(selector) then\r\n    error(\"selector \" .. name .. \" is not callable but is \" .. type(selector))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "error(\"selector \" .. name .. \" is not callable but is \" .. type(selector))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function compile_template(chunkname, template_code)\r\n   local template_func, err = loadstring(string.format(preamble, template_code), chunkname)\r\n   if not template_func then\r\n     error(\"syntax error when compiling template: \" .. err)\r\n   else\r\n     return template_func(is_callable, table.insert, table.concat, setmetatable, getmetatable, type,\r\n                          coroutine.wrap, tostring, check_selector)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local template_func, err = loadstring(string.format(preamble, template_code), chunkname)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if not template_func then\r\n     error(\"syntax error when compiling template: \" .. err)\r\n   else\r\n     return template_func(is_callable, table.insert, table.concat, setmetatable, getmetatable, type,\r\n                          coroutine.wrap, tostring, check_selector)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "error(\"syntax error when compiling template: \" .. err)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function compiler.template(template)\r\n  assert(template.tag == \"template\")\r\n  local parts = {}\r\n  for _, part in ipairs(template.parts) do\r\n    parts[#parts+1] = compiler[part.tag](part)\r\n  end\r\n  return interpreter.fill(compiled_template, { parts = parts })\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert(template.tag == \"template\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local parts = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for _, part in ipairs(template.parts) do\r\n    parts[#parts+1] = compiler[part.tag](part)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "parts[#parts+1] = compiler[part.tag](part)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function compiler.text(text)\r\n  assert(text.tag == \"text\")\r\n  return { _template = 1, quoted_text = string.format(\"%q\", text.text) }\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "assert(text.tag == \"text\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function compiler.appl(appl)\r\n  assert(appl.tag == \"appl\")\r\n  local selector, args, subtemplates = appl.selector, appl.args, appl.subtemplates\r\n  local ta = { _template = 2, selector = string.format(\"%q\", selector),\r\n      parsed_selector = selector }\r\n   local do_subtemplates = function ()\r\n                             for i, subtemplate in ipairs(subtemplates) do\r\n                               yield{ i = i, subtemplate = compiler.template(subtemplate) }\r\n                             end\r\n                           end\r\n   if #subtemplates == 0 then\r\n     if args and args ~= \"\" and args ~= \"{}\" then\r\n       ta.if_subtemplate = { { _template = 2, if_args = { { _template = 1, args = args } } } }\r\n     else\r\n       ta.if_subtemplate = { { _template = 2, if_args = { { _template = 2 } } } }\r\n     end\r\n   else\r\n     if args and args ~= \"\" and args ~= \"{}\" then\r\n       ta.if_subtemplate = { { _template = 1, subtemplates = do_subtemplates,\r\n                               if_args = { { _template = 1, args = args } } } }\r\n     else\r\n       ta.if_subtemplate = { { _template = 1, subtemplates = do_subtemplates,\r\n                               if_args = { { _template = 2 } } } }\r\n     end\r\n   end\r\n   return ta\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert(appl.tag == \"appl\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "local selector, args, subtemplates = appl.selector, appl.args, appl.subtemplates",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local ta = { _template = 2, selector = string.format(\"%q\", selector),\r\n      parsed_selector = selector }",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local do_subtemplates = function ()\r\n                             for i, subtemplate in ipairs(subtemplates) do\r\n                               yield{ i = i, subtemplate = compiler.template(subtemplate) }\r\n                             end\r\n                           end",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "for i, subtemplate in ipairs(subtemplates) do\r\n                               yield{ i = i, subtemplate = compiler.template(subtemplate) }\r\n                             end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "yield{ i = i, subtemplate = compiler.template(subtemplate) }",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if #subtemplates == 0 then\r\n     if args and args ~= \"\" and args ~= \"{}\" then\r\n       ta.if_subtemplate = { { _template = 2, if_args = { { _template = 1, args = args } } } }\r\n     else\r\n       ta.if_subtemplate = { { _template = 2, if_args = { { _template = 2 } } } }\r\n     end\r\n   else\r\n     if args and args ~= \"\" and args ~= \"{}\" then\r\n       ta.if_subtemplate = { { _template = 1, subtemplates = do_subtemplates,\r\n                               if_args = { { _template = 1, args = args } } } }\r\n     else\r\n       ta.if_subtemplate = { { _template = 1, subtemplates = do_subtemplates,\r\n                               if_args = { { _template = 2 } } } }\r\n     end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "if args and args ~= \"\" and args ~= \"{}\" then\r\n       ta.if_subtemplate = { { _template = 2, if_args = { { _template = 1, args = args } } } }\r\n     else\r\n       ta.if_subtemplate = { { _template = 2, if_args = { { _template = 2 } } } }\r\n     end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "ta.if_subtemplate = { { _template = 2, if_args = { { _template = 1, args = args } } } }",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "ta.if_subtemplate = { { _template = 2, if_args = { { _template = 2 } } } }",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if args and args ~= \"\" and args ~= \"{}\" then\r\n       ta.if_subtemplate = { { _template = 1, subtemplates = do_subtemplates,\r\n                               if_args = { { _template = 1, args = args } } } }\r\n     else\r\n       ta.if_subtemplate = { { _template = 1, subtemplates = do_subtemplates,\r\n                               if_args = { { _template = 2 } } } }\r\n     end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "ta.if_subtemplate = { { _template = 1, subtemplates = do_subtemplates,\r\n                               if_args = { { _template = 1, args = args } } } }",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "ta.if_subtemplate = { { _template = 1, subtemplates = do_subtemplates,\r\n                               if_args = { { _template = 2 } } } }",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function ()\r\n                             for i, subtemplate in ipairs(subtemplates) do\r\n                               yield{ i = i, subtemplate = compiler.template(subtemplate) }\r\n                             end\r\n                           end",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function compile(template, chunkname, opts)\r\n  opts = opts or {}\r\n  template = template or \"\"\r\n  chunkname = chunkname or template\r\n  local compiled_template = cache[template][chunkname]\r\n  grammar.ast = opts.parser or grammar.default\r\n  if not compiled_template then\r\n    compiled_template = compile_template(chunkname, compiler.template(grammar.ast:match(template)))\r\n    cache[template][chunkname] = compiled_template\r\n  end\r\n  return compiled_template\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "opts = opts or {}",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "template = template or \"\"",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "chunkname = chunkname or template",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local compiled_template = cache[template][chunkname]",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "grammar.ast = opts.parser or grammar.default",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if not compiled_template then\r\n    compiled_template = compile_template(chunkname, compiler.template(grammar.ast:match(template)))\r\n    cache[template][chunkname] = compiled_template\r\n  end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "compiled_template = compile_template(chunkname, compiler.template(grammar.ast:match(template)))",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "cache[template][chunkname] = compiled_template",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function fill(template, env, opts)\r\n   opts = opts or {}\r\n   template = template or \"\"\r\n   local start = template:match(\"^(%[=*%[)\")\r\n   if start then template = template:sub(#start + 1, #template - #start) end\r\n   if filled_templates[template] then\r\n      return compile(template, opts.chunkname, opts.parser)(env, opts)\r\n   else\r\n      filled_templates[template] = true\r\n      return interpreter.fill(template, env, opts)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local start = template:match(\"^(%[=*%[)\")",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if start then template = template:sub(#start + 1, #template - #start) end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "template = template:sub(#start + 1, #template - #start)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if filled_templates[template] then\r\n      return compile(template, opts.chunkname, opts.parser)(env, opts)\r\n   else\r\n      filled_templates[template] = true\r\n      return interpreter.fill(template, env, opts)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "filled_templates[template] = true",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 64,
    "text": "function cond(bool, table)\r\n   if bool then\r\n      return function () yield(table) end\r\n   else\r\n      return nop\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "if bool then\r\n      return function () yield(table) end\r\n   else\r\n      return nop\r\n   end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "yield(table)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function c(bool)\r\n   if bool then\r\n      return function (table)\r\n                return function () yield(table) end\r\n             end\r\n   else\r\n      return function (table) return nop end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "if bool then\r\n      return function (table)\r\n                return function () yield(table) end\r\n             end\r\n   else\r\n      return function (table) return nop end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function map(arg, has_block)\r\n   if has_block then\r\n      for _, item in ipairs(arg) do\r\n         yield(item)\r\n      end\r\n   else\r\n      return table.concat(arg)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "if has_block then\r\n      for _, item in ipairs(arg) do\r\n         yield(item)\r\n      end\r\n   else\r\n      return table.concat(arg)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "for _, item in ipairs(arg) do\r\n         yield(item)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 74,
    "text": "yield(item)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function inject(arg)\r\n   yield(arg)\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "yield(arg)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function cif(arg, has_block)\r\n  if not has_block then error(\"this selector needs a block\") end\r\n  if arg[1] then\r\n    arg._template = 1\r\n  else\r\n    arg._template = 2\r\n  end\r\n  yield(arg)\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "if not has_block then error(\"this selector needs a block\") end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "error(\"this selector needs a block\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "if arg[1] then\r\n    arg._template = 1\r\n  else\r\n    arg._template = 2\r\n  end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "arg._template = 1",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "arg._template = 2",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function concat(arg)\r\n  local list, sep = arg[1], arg[2] or \", \"\r\n  local size = #list\r\n  for i, e in ipairs(list) do\r\n    if type(e) == \"table\" then\r\n      if i ~= size then\r\n        yield(e)\r\n        yield(sep, true)\r\n      else\r\n        yield(e)\r\n      end\r\n    else\r\n      if i ~= size then\r\n        yield{ it = e }\r\n        yield(sep, true)\r\n      else\r\n        yield{ it = e }\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local list, sep = arg[1], arg[2] or \", \"",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local size = #list",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for i, e in ipairs(list) do\r\n    if type(e) == \"table\" then\r\n      if i ~= size then\r\n        yield(e)\r\n        yield(sep, true)\r\n      else\r\n        yield(e)\r\n      end\r\n    else\r\n      if i ~= size then\r\n        yield{ it = e }\r\n        yield(sep, true)\r\n      else\r\n        yield{ it = e }\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "if type(e) == \"table\" then\r\n      if i ~= size then\r\n        yield(e)\r\n        yield(sep, true)\r\n      else\r\n        yield(e)\r\n      end\r\n    else\r\n      if i ~= size then\r\n        yield{ it = e }\r\n        yield(sep, true)\r\n      else\r\n        yield{ it = e }\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "if i ~= size then\r\n        yield(e)\r\n        yield(sep, true)\r\n      else\r\n        yield(e)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "yield(e)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "yield(sep, true)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "if i ~= size then\r\n        yield{ it = e }\r\n        yield(sep, true)\r\n      else\r\n        yield{ it = e }\r\n      end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "yield{ it = e }",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function make_concat(list)\r\n  return function (arg)\r\n           local sep = (arg and arg[1]) or \", \"\r\n           local size = #list\r\n           for i, e in ipairs(list) do\r\n             if type(e) == \"table\" then\r\n               if i ~= size then\r\n                 yield(e)\r\n                 yield(sep, true)\r\n               else\r\n                 yield(e)\r\n               end\r\n             else\r\n               if i ~= size then\r\n                 yield{ it = e }\r\n                 yield(sep, true)\r\n               else\r\n                 yield{ it = e }\r\n               end\r\n             end\r\n           end\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local sep = (arg and arg[1]) or \", \"",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "for i, e in ipairs(list) do\r\n             if type(e) == \"table\" then\r\n               if i ~= size then\r\n                 yield(e)\r\n                 yield(sep, true)\r\n               else\r\n                 yield(e)\r\n               end\r\n             else\r\n               if i ~= size then\r\n                 yield{ it = e }\r\n                 yield(sep, true)\r\n               else\r\n                 yield{ it = e }\r\n               end\r\n             end\r\n           end",
    "type": "statement:genericfor"
  }, {
    "id": 100,
    "text": "if type(e) == \"table\" then\r\n               if i ~= size then\r\n                 yield(e)\r\n                 yield(sep, true)\r\n               else\r\n                 yield(e)\r\n               end\r\n             else\r\n               if i ~= size then\r\n                 yield{ it = e }\r\n                 yield(sep, true)\r\n               else\r\n                 yield{ it = e }\r\n               end\r\n             end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "if i ~= size then\r\n                 yield(e)\r\n                 yield(sep, true)\r\n               else\r\n                 yield(e)\r\n               end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "if i ~= size then\r\n                 yield{ it = e }\r\n                 yield(sep, true)\r\n               else\r\n                 yield{ it = e }\r\n               end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function cfor(args)\r\n  local name, list, args = args[1], args[2], args[3]\r\n  if type(list) == \"table\" then\r\n    for i, item in ipairs(list) do\r\n      yield({ [name] = item, i = i })\r\n    end\r\n  else\r\n    for item, literal in coroutine.wrap(list), args, true do\r\n      if literal then\r\n        yield(item, true)\r\n      else\r\n        yield({ [name] = item })\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local name, list, args = args[1], args[2], args[3]",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if type(list) == \"table\" then\r\n    for i, item in ipairs(list) do\r\n      yield({ [name] = item, i = i })\r\n    end\r\n  else\r\n    for item, literal in coroutine.wrap(list), args, true do\r\n      if literal then\r\n        yield(item, true)\r\n      else\r\n        yield({ [name] = item })\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "for i, item in ipairs(list) do\r\n      yield({ [name] = item, i = i })\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "yield({ [name] = item, i = i })",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "for item, literal in coroutine.wrap(list), args, true do\r\n      if literal then\r\n        yield(item, true)\r\n      else\r\n        yield({ [name] = item })\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "if literal then\r\n        yield(item, true)\r\n      else\r\n        yield({ [name] = item })\r\n      end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "yield(item, true)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "yield({ [name] = item })",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function (tab, key)\r\n                                   local new = {}\r\n                                   tab[key] = new\r\n                                   return new\r\n                                end",
    "type": "function"
  }, {
    "id": 115,
    "text": "local new = {}",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "tab[key] = new",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function () yield(table) end",
    "type": "function"
  }, {
    "id": 119,
    "text": "function () yield(table) end",
    "type": "function"
  }, {
    "id": 120,
    "text": "function (table)\r\n                return function () yield(table) end\r\n             end",
    "type": "function"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function (table) return nop end",
    "type": "function"
  }, {
    "id": 123,
    "text": "function (arg)\r\n           local sep = (arg and arg[1]) or \", \"\r\n           local size = #list\r\n           for i, e in ipairs(list) do\r\n             if type(e) == \"table\" then\r\n               if i ~= size then\r\n                 yield(e)\r\n                 yield(sep, true)\r\n               else\r\n                 yield(e)\r\n               end\r\n             else\r\n               if i ~= size then\r\n                 yield{ it = e }\r\n                 yield(sep, true)\r\n               else\r\n                 yield{ it = e }\r\n               end\r\n             end\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "",
    "type": "function container"
  }, {
    "id": 126,
    "text": "",
    "type": "function container"
  }, {
    "id": 127,
    "text": "f",
    "type": "global function"
  }, {
    "id": 128,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 129,
    "text": "template_func",
    "type": "global function"
  }, {
    "id": 130,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 131,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 132,
    "text": "error",
    "type": "global function"
  }, {
    "id": 133,
    "text": "require",
    "type": "global function"
  }, {
    "id": 134,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 135,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 136,
    "text": "format",
    "type": "global function"
  }, {
    "id": 137,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 138,
    "text": "tag]",
    "type": "global function"
  }, {
    "id": 139,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 140,
    "text": "module",
    "type": "global function"
  }, {
    "id": 141,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 142,
    "text": "type",
    "type": "global function"
  }, {
    "id": 143,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 144,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "variable container"
  }, {
    "id": 146,
    "text": "",
    "type": "require container"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "string"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "string"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "global variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "global variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "interface container"
  }, {
    "id": 170,
    "text": "",
    "type": "interface"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  } ]
}