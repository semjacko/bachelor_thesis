{
  "_filename": "fill.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cosmo/src/cosmo/fill.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 5
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 34,
    "label": "has",
    "to": 42
  }, {
    "from": 34,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 43,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 45
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 63,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 45
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 57
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 59
  }, {
    "from": 66,
    "label": "has",
    "to": 60
  }, {
    "from": 65,
    "label": "has",
    "to": 61
  }, {
    "from": 34,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 5
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 34,
    "label": "calls",
    "to": 9
  }, {
    "from": 34,
    "label": "calls",
    "to": 9
  }, {
    "from": 34,
    "label": "calls",
    "to": 9
  }, {
    "from": 34,
    "label": "calls",
    "to": 9
  }, {
    "from": 34,
    "label": "calls",
    "to": 9
  }, {
    "from": 34,
    "label": "calls",
    "to": 9
  }, {
    "from": 21,
    "label": "calls",
    "to": 83
  }, {
    "from": 34,
    "label": "calls",
    "to": 83
  }, {
    "from": 68,
    "label": "calls",
    "to": 83
  }, {
    "from": 34,
    "label": "calls",
    "to": 84
  }, {
    "from": 34,
    "label": "calls",
    "to": 84
  }, {
    "from": 34,
    "label": "calls",
    "to": 84
  }, {
    "from": 34,
    "label": "calls",
    "to": 84
  }, {
    "from": 34,
    "label": "calls",
    "to": 84
  }, {
    "from": 34,
    "label": "calls",
    "to": 84
  }, {
    "from": 34,
    "label": "calls",
    "to": 84
  }, {
    "from": 34,
    "label": "calls",
    "to": 84
  }, {
    "from": 25,
    "label": "calls",
    "to": 85
  }, {
    "from": 34,
    "label": "calls",
    "to": 29
  }, {
    "from": 34,
    "label": "calls",
    "to": 25
  }, {
    "from": 34,
    "label": "calls",
    "to": 25
  }, {
    "from": 34,
    "label": "calls",
    "to": 25
  }, {
    "from": 21,
    "label": "calls",
    "to": 87
  }, {
    "from": 34,
    "label": "calls",
    "to": 87
  }, {
    "from": 34,
    "label": "calls",
    "to": 87
  }, {
    "from": 34,
    "label": "calls",
    "to": 87
  }, {
    "from": 34,
    "label": "calls",
    "to": 87
  }, {
    "from": 34,
    "label": "calls",
    "to": 87
  }, {
    "from": 34,
    "label": "calls",
    "to": 88
  }, {
    "from": 34,
    "label": "calls",
    "to": 88
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 89
  }, {
    "from": 68,
    "label": "calls",
    "to": 89
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 68
  }, {
    "from": 74,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 90
  }, {
    "from": 34,
    "label": "calls",
    "to": 90
  }, {
    "from": 82,
    "label": "calls",
    "to": 86
  }, {
    "from": 82,
    "label": "calls",
    "to": 91
  }, {
    "from": 9,
    "label": "calls",
    "to": 91
  }, {
    "from": 82,
    "label": "calls",
    "to": 92
  }, {
    "from": 34,
    "label": "calls",
    "to": 93
  }, {
    "from": 34,
    "label": "calls",
    "to": 93
  }, {
    "from": 34,
    "label": "calls",
    "to": 93
  }, {
    "from": 3,
    "label": "calls",
    "to": 94
  }, {
    "from": 25,
    "label": "calls",
    "to": 94
  }, {
    "from": 34,
    "label": "calls",
    "to": 94
  }, {
    "from": 34,
    "label": "calls",
    "to": 94
  }, {
    "from": 34,
    "label": "calls",
    "to": 94
  }, {
    "from": 34,
    "label": "calls",
    "to": 94
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 3,
    "label": "calls",
    "to": 95
  }, {
    "from": 74,
    "label": "calls",
    "to": 96
  }, {
    "from": 68,
    "label": "calls",
    "to": 97
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 82,
    "label": "declares",
    "to": 3
  }, {
    "from": 82,
    "label": "declares",
    "to": 9
  }, {
    "from": 82,
    "label": "declares",
    "to": 17
  }, {
    "from": 82,
    "label": "declares",
    "to": 19
  }, {
    "from": 82,
    "label": "declares",
    "to": 21
  }, {
    "from": 82,
    "label": "declares",
    "to": 25
  }, {
    "from": 82,
    "label": "declares",
    "to": 29
  }, {
    "from": 82,
    "label": "declares",
    "to": 34
  }, {
    "from": 82,
    "label": "declares",
    "to": 68
  }, {
    "from": 82,
    "label": "declares",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 98
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 98,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 98,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 98,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 99,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 107
  }, {
    "from": 107,
    "label": "provides",
    "to": 108
  }, {
    "from": 109,
    "label": "requires",
    "to": 1
  }, {
    "from": 104,
    "label": "contains",
    "to": 21
  }, {
    "from": 104,
    "label": "contains",
    "to": 34
  }, {
    "from": 104,
    "label": "contains",
    "to": 68
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fill",
    "type": "module"
  }, {
    "id": 2,
    "text": "grammar",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function is_callable(f)\r\n  if type(f) == \"function\" then return true end\r\n  local meta = getmetatable(f)\r\n  if meta and meta.__call then return true end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if type(f) == \"function\" then return true end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "local meta = getmetatable(f)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if meta and meta.__call then return true end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function prepare_env(env, parent)\r\n  local __index = function (t, k)\r\n                    local v = env[k]\r\n                    if not v then\r\n                      v = parent[k]\r\n                    end\r\n                    return v\r\n                  end\r\n  local __newindex = function (t, k, v)\r\n                       env[k] = v\r\n                     end\r\n  return setmetatable({ self = env }, { __index = __index, __newindex = __newindex })\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local __index = function (t, k)\r\n                    local v = env[k]\r\n                    if not v then\r\n                      v = parent[k]\r\n                    end\r\n                    return v\r\n                  end",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local v = env[k]",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not v then\r\n                      v = parent[k]\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "v = parent[k]",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local __newindex = function (t, k, v)\r\n                       env[k] = v\r\n                     end",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "env[k] = v",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function (t, k)\r\n                    local v = env[k]\r\n                    if not v then\r\n                      v = parent[k]\r\n                    end\r\n                    return v\r\n                  end",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function (t, k, v)\r\n                       env[k] = v\r\n                     end",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function interpreter.text(state, text)\r\n  assert(text.tag == \"text\")\r\n  insert(state.out, text.text)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "assert(text.tag == \"text\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "insert(state.out, text.text)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function check_selector(name, selector)\r\n  if not is_callable(selector) then\r\n    error(\"selector \" .. name .. \" is not callable but is \" .. type(selector))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "if not is_callable(selector) then\r\n    error(\"selector \" .. name .. \" is not callable but is \" .. type(selector))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "error(\"selector \" .. name .. \" is not callable but is \" .. type(selector))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function unparse_name(parsed_selector)\r\n  local name = parsed_selector:match(\"^env%['([%w_]+)'%]$\")\r\n  if name then name = \"$\" .. name end\r\n  return name or parsed_selector\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local name = parsed_selector:match(\"^env%['([%w_]+)'%]$\")",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if name then name = \"$\" .. name end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "name = \"$\" .. name",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function interpreter.appl(state, appl)\r\n  assert(appl.tag == \"appl\")\r\n  local selector, args, subtemplates = appl.selector, appl.args, appl.subtemplates\r\n  local env, out, opts = state.env, state.out, state.opts\r\n  local selector_name = unparse_name(selector)\r\n  local default\r\n  if opts.fallback then\r\n    default = subtemplates[1]\r\n  end\r\n  selector = loadstring(\"local env = (...); return \" .. selector)(env)\r\n  if #subtemplates == 0 then\r\n    if args and args ~= \"\" and args ~= \"{}\" then\r\n      check_selector(selector_name, selector)\r\n      selector = selector(loadstring(\"local env = (...); return \" .. args)(env), false)\r\n      insert(out, tostring(selector))\r\n    else\r\n      if is_callable(selector) then\r\n        insert(out, tostring(selector()))\r\n      else\r\n        if not selector and opts.passthrough then\r\n          selector = selector_name\r\n        end\r\n        insert(out, tostring(selector or \"\"))\r\n      end\r\n    end\r\n  else\r\n    if args and args ~= \"\" and args ~= \"{}\" then\r\n      check_selector(selector_name, selector)\r\n      args = loadstring(\"local env = (...); return \" .. args)(env)\r\n      for e, literal in coroutine.wrap(selector), args, true do\r\n        if literal then\r\n          insert(out, tostring(e))\r\n        else\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end\r\n      end\r\n    else\r\n      if type(selector) == 'table' then\r\n        for _, e in ipairs(selector) do\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end\r\n      else\r\n        check_selector(selector_name, selector)\r\n        for e, literal in coroutine.wrap(selector), nil, true do\r\n          if literal then\r\n            insert(out, tostring(e))\r\n          else\r\n            if type(e) ~= \"table\" then\r\n              e = prepare_env({ it = tostring(e) }, env)\r\n            else\r\n              e = prepare_env(e, env)\r\n            end\r\n            interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert(appl.tag == \"appl\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local selector, args, subtemplates = appl.selector, appl.args, appl.subtemplates",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local env, out, opts = state.env, state.out, state.opts",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local selector_name = unparse_name(selector)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local default",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if opts.fallback then\r\n    default = subtemplates[1]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "default = subtemplates[1]",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "selector = loadstring(\"local env = (...); return \" .. selector)(env)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if #subtemplates == 0 then\r\n    if args and args ~= \"\" and args ~= \"{}\" then\r\n      check_selector(selector_name, selector)\r\n      selector = selector(loadstring(\"local env = (...); return \" .. args)(env), false)\r\n      insert(out, tostring(selector))\r\n    else\r\n      if is_callable(selector) then\r\n        insert(out, tostring(selector()))\r\n      else\r\n        if not selector and opts.passthrough then\r\n          selector = selector_name\r\n        end\r\n        insert(out, tostring(selector or \"\"))\r\n      end\r\n    end\r\n  else\r\n    if args and args ~= \"\" and args ~= \"{}\" then\r\n      check_selector(selector_name, selector)\r\n      args = loadstring(\"local env = (...); return \" .. args)(env)\r\n      for e, literal in coroutine.wrap(selector), args, true do\r\n        if literal then\r\n          insert(out, tostring(e))\r\n        else\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end\r\n      end\r\n    else\r\n      if type(selector) == 'table' then\r\n        for _, e in ipairs(selector) do\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end\r\n      else\r\n        check_selector(selector_name, selector)\r\n        for e, literal in coroutine.wrap(selector), nil, true do\r\n          if literal then\r\n            insert(out, tostring(e))\r\n          else\r\n            if type(e) ~= \"table\" then\r\n              e = prepare_env({ it = tostring(e) }, env)\r\n            else\r\n              e = prepare_env(e, env)\r\n            end\r\n            interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "if args and args ~= \"\" and args ~= \"{}\" then\r\n      check_selector(selector_name, selector)\r\n      selector = selector(loadstring(\"local env = (...); return \" .. args)(env), false)\r\n      insert(out, tostring(selector))\r\n    else\r\n      if is_callable(selector) then\r\n        insert(out, tostring(selector()))\r\n      else\r\n        if not selector and opts.passthrough then\r\n          selector = selector_name\r\n        end\r\n        insert(out, tostring(selector or \"\"))\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "check_selector(selector_name, selector)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "selector = selector(loadstring(\"local env = (...); return \" .. args)(env), false)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "insert(out, tostring(selector))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "if is_callable(selector) then\r\n        insert(out, tostring(selector()))\r\n      else\r\n        if not selector and opts.passthrough then\r\n          selector = selector_name\r\n        end\r\n        insert(out, tostring(selector or \"\"))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "insert(out, tostring(selector()))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "if not selector and opts.passthrough then\r\n          selector = selector_name\r\n        end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "selector = selector_name",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "insert(out, tostring(selector or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if args and args ~= \"\" and args ~= \"{}\" then\r\n      check_selector(selector_name, selector)\r\n      args = loadstring(\"local env = (...); return \" .. args)(env)\r\n      for e, literal in coroutine.wrap(selector), args, true do\r\n        if literal then\r\n          insert(out, tostring(e))\r\n        else\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end\r\n      end\r\n    else\r\n      if type(selector) == 'table' then\r\n        for _, e in ipairs(selector) do\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end\r\n      else\r\n        check_selector(selector_name, selector)\r\n        for e, literal in coroutine.wrap(selector), nil, true do\r\n          if literal then\r\n            insert(out, tostring(e))\r\n          else\r\n            if type(e) ~= \"table\" then\r\n              e = prepare_env({ it = tostring(e) }, env)\r\n            else\r\n              e = prepare_env(e, env)\r\n            end\r\n            interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "args = loadstring(\"local env = (...); return \" .. args)(env)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "for e, literal in coroutine.wrap(selector), args, true do\r\n        if literal then\r\n          insert(out, tostring(e))\r\n        else\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "if literal then\r\n          insert(out, tostring(e))\r\n        else\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "insert(out, tostring(e))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "e = prepare_env({ it = tostring(e) }, env)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "e = prepare_env(e, env)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if type(selector) == 'table' then\r\n        for _, e in ipairs(selector) do\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end\r\n      else\r\n        check_selector(selector_name, selector)\r\n        for e, literal in coroutine.wrap(selector), nil, true do\r\n          if literal then\r\n            insert(out, tostring(e))\r\n          else\r\n            if type(e) ~= \"table\" then\r\n              e = prepare_env({ it = tostring(e) }, env)\r\n            else\r\n              e = prepare_env(e, env)\r\n            end\r\n            interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "for _, e in ipairs(selector) do\r\n          if type(e) ~= \"table\" then\r\n            e = prepare_env({ it = tostring(e) }, env)\r\n          else\r\n            e = prepare_env(e, env)\r\n          end\r\n          interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 64,
    "text": "for e, literal in coroutine.wrap(selector), nil, true do\r\n          if literal then\r\n            insert(out, tostring(e))\r\n          else\r\n            if type(e) ~= \"table\" then\r\n              e = prepare_env({ it = tostring(e) }, env)\r\n            else\r\n              e = prepare_env(e, env)\r\n            end\r\n            interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n          end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 65,
    "text": "if literal then\r\n            insert(out, tostring(e))\r\n          else\r\n            if type(e) ~= \"table\" then\r\n              e = prepare_env({ it = tostring(e) }, env)\r\n            else\r\n              e = prepare_env(e, env)\r\n            end\r\n            interpreter.template({ env = e, out = out, opts = opts }, subtemplates[e.self._template or 1] or default)\r\n          end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "if type(e) ~= \"table\" then\r\n              e = prepare_env({ it = tostring(e) }, env)\r\n            else\r\n              e = prepare_env(e, env)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function interpreter.template(state, template)\r\n  if template then\r\n    assert(template.tag == \"template\")\r\n    for _, part in ipairs(template.parts) do\r\n      interpreter[part.tag](state, part)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "if template then\r\n    assert(template.tag == \"template\")\r\n    for _, part in ipairs(template.parts) do\r\n      interpreter[part.tag](state, part)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "assert(template.tag == \"template\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "for _, part in ipairs(template.parts) do\r\n      interpreter[part.tag](state, part)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "interpreter[part.tag](state, part)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function fill(template, env, opts)\r\n   opts = opts or {}\r\n   local out = opts.out or {}\r\n   grammar.ast = opts.parser or grammar.default\r\n   if type(env) == \"string\" then env = { it = env } end\r\n   interpreter.template({ env = env, out = out, opts = opts }, grammar.ast:match(template))\r\n   return concat(out, opts.delim)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "opts = opts or {}",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local out = opts.out or {}",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "grammar.ast = opts.parser or grammar.default",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if type(env) == \"string\" then env = { it = env } end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "env = { it = env }",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "interpreter.template({ env = env, out = out, opts = opts }, grammar.ast:match(template))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "",
    "type": "function container"
  }, {
    "id": 83,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 84,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 85,
    "text": "error",
    "type": "global function"
  }, {
    "id": 86,
    "text": "require",
    "type": "global function"
  }, {
    "id": 87,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 88,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 89,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 90,
    "text": "selector",
    "type": "global function"
  }, {
    "id": 91,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 92,
    "text": "module",
    "type": "global function"
  }, {
    "id": 93,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 94,
    "text": "type",
    "type": "global function"
  }, {
    "id": 95,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 96,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 97,
    "text": "tag]",
    "type": "global function"
  }, {
    "id": 98,
    "text": "",
    "type": "variable container"
  }, {
    "id": 99,
    "text": "",
    "type": "require container"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 106,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "interface container"
  }, {
    "id": 108,
    "text": "",
    "type": "interface"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  } ]
}