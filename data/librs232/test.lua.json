{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/librs232/bindings/lua/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 13,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 15,
    "label": "calls",
    "to": 35
  }, {
    "from": 15,
    "label": "calls",
    "to": 35
  }, {
    "from": 25,
    "label": "calls",
    "to": 35
  }, {
    "from": 25,
    "label": "calls",
    "to": 35
  }, {
    "from": 33,
    "label": "calls",
    "to": 35
  }, {
    "from": 33,
    "label": "calls",
    "to": 35
  }, {
    "from": 33,
    "label": "calls",
    "to": 35
  }, {
    "from": 33,
    "label": "calls",
    "to": 36
  }, {
    "from": 33,
    "label": "calls",
    "to": 36
  }, {
    "from": 33,
    "label": "calls",
    "to": 36
  }, {
    "from": 33,
    "label": "calls",
    "to": 36
  }, {
    "from": 25,
    "label": "calls",
    "to": 15
  }, {
    "from": 25,
    "label": "calls",
    "to": 15
  }, {
    "from": 33,
    "label": "calls",
    "to": 25
  }, {
    "from": 33,
    "label": "calls",
    "to": 25
  }, {
    "from": 33,
    "label": "calls",
    "to": 25
  }, {
    "from": 33,
    "label": "calls",
    "to": 25
  }, {
    "from": 2,
    "label": "calls",
    "to": 46
  }, {
    "from": 15,
    "label": "calls",
    "to": 42
  }, {
    "from": 15,
    "label": "calls",
    "to": 13
  }, {
    "from": 25,
    "label": "calls",
    "to": 38
  }, {
    "from": 25,
    "label": "calls",
    "to": 38
  }, {
    "from": 33,
    "label": "calls",
    "to": 38
  }, {
    "from": 25,
    "label": "calls",
    "to": 40
  }, {
    "from": 6,
    "label": "calls",
    "to": 39
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 44
  }, {
    "from": 25,
    "label": "calls",
    "to": 43
  }, {
    "from": 15,
    "label": "calls",
    "to": 41
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 33,
    "label": "declares",
    "to": 2
  }, {
    "from": 33,
    "label": "declares",
    "to": 6
  }, {
    "from": 33,
    "label": "declares",
    "to": 13
  }, {
    "from": 33,
    "label": "declares",
    "to": 15
  }, {
    "from": 33,
    "label": "declares",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 47,
    "label": "initializes",
    "to": 49
  }, {
    "from": 47,
    "label": "initializes",
    "to": 50
  }, {
    "from": 47,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 47,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 47,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 47,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 47,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 47,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 47,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 47,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 47,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function time_stamp()\r\n\tt = os.date(\"*t\")\r\n\treturn string.format(\"[%02s.%02s.%s %02s:%02s:%02s] \",\r\n\t\t\t     t.day, t.month, t.year,\r\n\t\t\t     t.hour, t.min, t.sec)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "t = os.date(\"*t\")",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function myprint(text)\r\n\ttext = time_stamp() .. text\r\n\toldprint(text)\r\n\tfile = io.open(\"test_lua_log.txt\", \"a+\")\r\n\tfile:write(text .. \"\\n\")\r\n\tfile:close()\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "text = time_stamp() .. text",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "oldprint(text)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "file = io.open(\"test_lua_log.txt\", \"a+\")",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "file:write(text .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function string.lines(str)\r\n\treturn string.gfind(str, \"([^\\n]*)\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function format_test(text, err)\r\n\tlocal ret = \"\\n\"\r\n\tlocal line_number = 1\r\n\tlocal _, _, line_err, line_str = string.find(err, \".*:(%d+):(.*)\")\r\n\tfor line in string.lines(text) do\r\n\t\tif line_number == tonumber(line_err) then\r\n\t\t\tret = ret .. string.format(\"-->   %d. %s (%s)\\n\", line_number, line, line_str)\r\n\t\telse\r\n\t\t\tret = ret .. string.format(\"% 8d. %s\\n\", line_number, line)\r\n\t\tend\r\n\t\tline_number = line_number + 1\r\n\tend\r\n\r\n\treturn ret\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local ret = \"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local line_number = 1",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local _, _, line_err, line_str = string.find(err, \".*:(%d+):(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "for line in string.lines(text) do\r\n\t\tif line_number == tonumber(line_err) then\r\n\t\t\tret = ret .. string.format(\"-->   %d. %s (%s)\\n\", line_number, line, line_str)\r\n\t\telse\r\n\t\t\tret = ret .. string.format(\"% 8d. %s\\n\", line_number, line)\r\n\t\tend\r\n\t\tline_number = line_number + 1\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "if line_number == tonumber(line_err) then\r\n\t\t\tret = ret .. string.format(\"-->   %d. %s (%s)\\n\", line_number, line, line_str)\r\n\t\telse\r\n\t\t\tret = ret .. string.format(\"% 8d. %s\\n\", line_number, line)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "ret = ret .. string.format(\"-->   %d. %s (%s)\\n\", line_number, line, line_str)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "ret = ret .. string.format(\"% 8d. %s\\n\", line_number, line)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "line_number = line_number + 1",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function test(text)\r\n\tlocal chunk, err = loadstring(text)\r\n\tif chunk == nil then\r\n\t\tprint(string.format([[\r\n--------------------------------------------------------------- \r\n%s\r\nloadstring error: '%s'\r\n--------------------------------------------------------------- \r\n]], format_test(text, err), err))\r\n\t\treturn false\r\n\tend\r\n\r\n\tlocal ret, msg = pcall(chunk)\r\n\tif ret == false then\r\n\t\tprint(string.format([[\r\n--------------------------------------------------------------- \r\n%s\r\npcall error: '%s'\r\n--------------------------------------------------------------- \r\n]], format_test(text, msg), msg))\r\n\t\treturn false\r\n\tend\r\n\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local chunk, err = loadstring(text)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if chunk == nil then\r\n\t\tprint(string.format([[\r\n--------------------------------------------------------------- \r\n%s\r\nloadstring error: '%s'\r\n--------------------------------------------------------------- \r\n]], format_test(text, err), err))\r\n\t\treturn false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "print(string.format([[\r\n--------------------------------------------------------------- \r\n%s\r\nloadstring error: '%s'\r\n--------------------------------------------------------------- \r\n]], format_test(text, err), err))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local ret, msg = pcall(chunk)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if ret == false then\r\n\t\tprint(string.format([[\r\n--------------------------------------------------------------- \r\n%s\r\npcall error: '%s'\r\n--------------------------------------------------------------- \r\n]], format_test(text, msg), msg))\r\n\t\treturn false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "print(string.format([[\r\n--------------------------------------------------------------- \r\n%s\r\npcall error: '%s'\r\n--------------------------------------------------------------- \r\n]], format_test(text, msg), msg))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "",
    "type": "function container"
  }, {
    "id": 34,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 35,
    "text": "format",
    "type": "global function"
  }, {
    "id": 36,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 37,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 38,
    "text": "print",
    "type": "global function"
  }, {
    "id": 39,
    "text": "open",
    "type": "global function"
  }, {
    "id": 40,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 41,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 42,
    "text": "find",
    "type": "global function"
  }, {
    "id": 43,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 44,
    "text": "require",
    "type": "global function"
  }, {
    "id": 45,
    "text": "oldprint",
    "type": "global function"
  }, {
    "id": 46,
    "text": "date",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "global variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "",
    "type": "global variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "global variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "global variable"
  }, {
    "id": 66,
    "text": "",
    "type": "n/a"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  } ]
}