{
  "_filename": "emacs_sets.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lrexlib/test/emacs_sets.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 7
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "calls",
    "to": 5
  }, {
    "from": 15,
    "label": "calls",
    "to": 27
  }, {
    "from": 5,
    "label": "calls",
    "to": 28
  }, {
    "from": 15,
    "label": "calls",
    "to": 28
  }, {
    "from": 26,
    "label": "calls",
    "to": 15
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 30
  }, {
    "from": 15,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 29
  }, {
    "from": 26,
    "label": "calls",
    "to": 29
  }, {
    "from": 26,
    "label": "calls",
    "to": 32
  }, {
    "from": 5,
    "label": "calls",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 26,
    "label": "declares",
    "to": 3
  }, {
    "from": 26,
    "label": "declares",
    "to": 5
  }, {
    "from": 26,
    "label": "declares",
    "to": 13
  }, {
    "from": 26,
    "label": "declares",
    "to": 15
  }, {
    "from": 26,
    "label": "declares",
    "to": 20
  }, {
    "from": 26,
    "label": "declares",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 35
  }, {
    "from": 34,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 35,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "requires",
    "to": 2
  }, {
    "from": 35,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 33
  }, {
    "from": 1,
    "label": "provides",
    "to": 40
  }, {
    "from": 40,
    "label": "provides",
    "to": 41
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "emacs_sets",
    "type": "module"
  }, {
    "id": 2,
    "text": "luatest",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function norm(a) return a==nil and N or a end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local function set_f_gmatch (lib, flg)\r\n  -- gmatch (s, p, [cf], [ef])\r\n  local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt, flg.SYNTAX_EMACS, nil) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end\r\n  return {\r\n    Name = \"Function gmatch\",\r\n    Func = test_gmatch,\r\n  --{  subj             patt         results }\r\n    { {(\"abcd\"):rep(3), \"\\\\(.\\\\)b.\\\\(d\\\\)\"}, {{\"a\",\"d\"},{\"a\",\"d\"},{\"a\",\"d\"}} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt, flg.SYNTAX_EMACS, nil) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 7,
    "text": "local out, guard = {}, 10",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for a, b in lib.gmatch (subj, patt, flg.SYNTAX_EMACS, nil) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "table.insert (out, { norm(a), norm(b) })",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "guard = guard - 1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if guard == 0 then break end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt, flg.SYNTAX_EMACS, nil) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function set_f_split (lib, flg)\r\n  -- split (s, p, [cf], [ef])\r\n  local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt, flg.SYNTAX_EMACS, nil) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end\r\n  return {\r\n    Name = \"Function split\",\r\n    Func = test_split,\r\n  --{  subj             patt      results }\r\n    { {\"ab<78>c\", \"<\\\\(.\\\\)\\\\(.\\\\)>\"},    {{\"ab\",\"7\",\"8\"}, {\"c\",N,N},            } },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt, flg.SYNTAX_EMACS, nil) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 17,
    "text": "for a, b, c in lib.split (subj, patt, flg.SYNTAX_EMACS, nil) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "table.insert (out, { norm(a), norm(b), norm(c) })",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt, flg.SYNTAX_EMACS, nil) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function (libname)\r\n  local lib = require (libname)\r\n  local flags = lib.flags ()\r\n  return {\r\n    set_f_gmatch    (lib, flags),\r\n    set_f_split     (lib, flags),\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local lib = require (libname)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local flags = lib.flags ()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "",
    "type": "function container"
  }, {
    "id": 27,
    "text": "split",
    "type": "global function"
  }, {
    "id": 28,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 29,
    "text": "require",
    "type": "global function"
  }, {
    "id": 30,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 31,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 32,
    "text": "flags",
    "type": "global function"
  }, {
    "id": 33,
    "text": "(libname)",
    "type": "module"
  }, {
    "id": 34,
    "text": "",
    "type": "variable container"
  }, {
    "id": 35,
    "text": "",
    "type": "require container"
  }, {
    "id": 36,
    "text": "",
    "type": "local variable"
  }, {
    "id": 37,
    "text": "",
    "type": "n/a"
  }, {
    "id": 38,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 39,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "interface container"
  }, {
    "id": 41,
    "text": "",
    "type": "interface"
  } ]
}