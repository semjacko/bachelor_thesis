{
  "_filename": "oniguruma_sets.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lrexlib/test/oniguruma_sets.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 24
  }, {
    "from": 30,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 24
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 27
  }, {
    "from": 34,
    "label": "has",
    "to": 28
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 32,
    "label": "has",
    "to": 4
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 24
  }, {
    "from": 37,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 27
  }, {
    "from": 34,
    "label": "has",
    "to": 28
  }, {
    "from": 37,
    "label": "has",
    "to": 4
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 4
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 11
  }, {
    "from": 43,
    "label": "has",
    "to": 12
  }, {
    "from": 43,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 32,
    "label": "calls",
    "to": 56
  }, {
    "from": 10,
    "label": "calls",
    "to": 63
  }, {
    "from": 53,
    "label": "calls",
    "to": 41
  }, {
    "from": 53,
    "label": "calls",
    "to": 14
  }, {
    "from": 53,
    "label": "calls",
    "to": 18
  }, {
    "from": 53,
    "label": "calls",
    "to": 10
  }, {
    "from": 53,
    "label": "calls",
    "to": 20
  }, {
    "from": 53,
    "label": "calls",
    "to": 39
  }, {
    "from": 5,
    "label": "calls",
    "to": 57
  }, {
    "from": 20,
    "label": "calls",
    "to": 57
  }, {
    "from": 32,
    "label": "calls",
    "to": 57
  }, {
    "from": 53,
    "label": "calls",
    "to": 57
  }, {
    "from": 53,
    "label": "calls",
    "to": 32
  }, {
    "from": 53,
    "label": "calls",
    "to": 54
  }, {
    "from": 10,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 3
  }, {
    "from": 20,
    "label": "calls",
    "to": 3
  }, {
    "from": 20,
    "label": "calls",
    "to": 3
  }, {
    "from": 32,
    "label": "calls",
    "to": 3
  }, {
    "from": 32,
    "label": "calls",
    "to": 3
  }, {
    "from": 32,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 59
  }, {
    "from": 53,
    "label": "calls",
    "to": 55
  }, {
    "from": 20,
    "label": "calls",
    "to": 60
  }, {
    "from": 32,
    "label": "calls",
    "to": 60
  }, {
    "from": 53,
    "label": "calls",
    "to": 58
  }, {
    "from": 53,
    "label": "calls",
    "to": 58
  }, {
    "from": 53,
    "label": "calls",
    "to": 62
  }, {
    "from": 20,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "contains",
    "to": 53
  }, {
    "from": 53,
    "label": "declares",
    "to": 3
  }, {
    "from": 53,
    "label": "declares",
    "to": 5
  }, {
    "from": 53,
    "label": "declares",
    "to": 10
  }, {
    "from": 53,
    "label": "declares",
    "to": 14
  }, {
    "from": 53,
    "label": "declares",
    "to": 18
  }, {
    "from": 53,
    "label": "declares",
    "to": 20
  }, {
    "from": 53,
    "label": "declares",
    "to": 30
  }, {
    "from": 53,
    "label": "declares",
    "to": 32
  }, {
    "from": 53,
    "label": "declares",
    "to": 37
  }, {
    "from": 53,
    "label": "declares",
    "to": 39
  }, {
    "from": 53,
    "label": "declares",
    "to": 41
  }, {
    "from": 53,
    "label": "declares",
    "to": 43
  }, {
    "from": 53,
    "label": "declares",
    "to": 45
  }, {
    "from": 2,
    "label": "contains",
    "to": 65
  }, {
    "from": 2,
    "label": "contains",
    "to": 66
  }, {
    "from": 65,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 66,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "requires",
    "to": 1
  }, {
    "from": 66,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "requires",
    "to": 64
  }, {
    "from": 2,
    "label": "provides",
    "to": 71
  }, {
    "from": 71,
    "label": "provides",
    "to": 72
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luatest",
    "type": "module"
  }, {
    "id": 2,
    "text": "oniguruma_sets",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function norm(a) return a==nil and N or a end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local function fill (n, m)\r\n  local t = {}\r\n  for i = n, m, -1 do table.insert (t, i) end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for i = n, m, -1 do table.insert (t, i) end",
    "type": "statement:numericfor"
  }, {
    "id": 8,
    "text": "table.insert (t, i)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function set_named_subpatterns (lib, flg)\r\n  return {\r\n    Name = \"Named Subpatterns\",\r\n    Func = function (subj, methodname, patt, name1, name2)\r\n      local r = lib.new (patt)\r\n      local _,_,caps = r[methodname] (r, subj)\r\n      return norm(caps[name1]), norm(caps[name2])\r\n    end,\r\n    --{} N.B. subject is always first element\r\n    { {\"abcd\", \"tfind\", \"(?<dog>.)b.(?<cat>d)\", \"dog\", \"cat\"},  {\"a\",\"d\"} },\r\n    { {\"abcd\", \"exec\",  \"(?<dog>.)b.(?<cat>d)\", \"dog\", \"cat\"},  {\"a\",\"d\"} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local r = lib.new (patt)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local _,_,caps = r[methodname] (r, subj)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function set_f_find (lib, flg)\r\n  local cp1251 =\r\n    \"¿¡¬√ƒ≈®∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ‹€⁄›ﬁﬂ‡·‚„‰Â∏ÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘¸˚˙˝˛ˇ\"\r\n  local loc = \"CP1251\"\r\n  return {\r\n  Name = \"Function find\",\r\n  Func = lib.find,\r\n  --{subj,   patt,      st,cf,ef,lo},        { results }\r\n  { {\"abcd\", \".+\",      5},                  { N   } }, -- failing st\r\n  { {\"abcd\", \".*?\"},                         { 1,0 } }, -- non-greedy\r\n  { {\"abc\",  \"aBC\",     N,flg.IGNORECASE},   { 1,3 } }, -- cf\r\n  { {\"abc\",  \"aBC\",     N,\"i\"         },     { 1,3 } }, -- cf\r\n  { {cp1251, \"[[:upper:]]+\", N,N,N, loc},    { 1,33} }, -- locale\r\n  { {cp1251, \"[[:lower:]]+\", N,N,N, loc},    {34,66} }, -- locale\r\n  { {cp1251, \"\\\\w+\",         N,N,N, loc},    {1, 66} }, -- locale\r\n}\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local cp1251 =\r\n    \"¿¡¬√ƒ≈®∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ‹€⁄›ﬁﬂ‡·‚„‰Â∏ÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘¸˚˙˝˛ˇ\"",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local loc = \"CP1251\"",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function set_f_match (lib, flg)\r\n  return {\r\n  Name = \"Function match\",\r\n  Func = lib.match,\r\n  --{subj,   patt,      st,cf,ef,lo},        { results }\r\n  { {\"abcd\", \".+\",      5},                  { N    }}, -- failing st\r\n  { {\"abcd\", \".*?\"},                         { \"\"   }}, -- non-greedy\r\n  { {\"abc\",  \"aBC\",     N,flg.IGNORECASE},   {\"abc\" }}, -- cf\r\n  { {\"abc\",  \"aBC\",     N,\"i\"         },     {\"abc\" }}, -- cf\r\n}\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function set_f_gmatch (lib, flg)\r\n  -- gmatch (s, p, [cf], [ef])\r\n  local pCSV = \"(^[^,]*)|,([^,]*)\"\r\n  local F = false\r\n  local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end\r\n  return {\r\n    Name = \"Function gmatch\",\r\n    Func = test_gmatch,\r\n  --{  subj             patt   results }\r\n    { {\"a\\0c\",          \".\" }, {{\"a\",N},{\"\\0\",N},{\"c\",N}} },--nuls in subj\r\n    { {\"\",              pCSV}, {{\"\",F}} },\r\n    { {\"12\",            pCSV}, {{\"12\",F}} },\r\n    ----{ {\",\",             pCSV}, {{\"\", F},{F,\"\"}} },\r\n    { {\"12,,45\",        pCSV}, {{\"12\",F},{F,\"\"},{F,\"45\"}} },\r\n    ----{ {\",,12,45,,ab,\",  pCSV}, {{\"\",F},{F,\"\"},{F,\"12\"},{F,\"45\"},{F,\"\"},{F,\"ab\"},{F,\"\"}} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local pCSV = \"(^[^,]*)|,([^,]*)\"",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local F = false",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 24,
    "text": "local out, guard = {}, 10",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "for a, b in lib.gmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "table.insert (out, { norm(a), norm(b) })",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "guard = guard - 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if guard == 0 then break end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function test_gmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.gmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function set_f_split (lib, flg)\r\n  -- split (s, p, [cf], [ef])\r\n  local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end\r\n  return {\r\n    Name = \"Function split\",\r\n    Func = test_split,\r\n  --{  subj             patt      results }\r\n    { {\"a,\\0,c\",       \",\"},     {{\"a\",\",\",N},{\"\\0\",\",\",N},{\"c\",N,N},   } },--nuls in subj\r\n    { {\"ab\",           \"$\"},     {{\"ab\",\"\",N}, {\"\",N,N},               } },\r\n    { {\"ab\",         \"^|$\"},     {{\"\", \"\", N}, {\"ab\",\"\",N},  {\"\",N,N}, } },\r\n    { {\"ab45ab\",\"(?<=ab).*?\"},   {{\"ab\",\"\",N}, {\"45ab\",\"\",N},{\"\",N,N}, } },\r\n    { {\"ab\",         \"\\\\b\"},     {{\"\", \"\", N}, {\"ab\",\"\",N},  {\"\",N,N}, } },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 34,
    "text": "for a, b, c in lib.split (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "table.insert (out, { norm(a), norm(b), norm(c) })",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function test_split (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.split (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function set_m_exec (lib, flg)\r\n  return {\r\n  Name = \"Method exec\",\r\n  Method = \"exec\",\r\n--{patt,cf,lo},           {subj,st,ef}              { results }\r\n  { {\".+\"},               {\"abcd\",5},               { N }    }, -- failing st\r\n  { {\".*?\"},              {\"abcd\"},                 {1,0,{}} }, -- non-greedy\r\n  { {\"aBC\",flg.IGNORECASE}, {\"abc\"},                {1,3,{}} }, -- cf\r\n  { {\"aBC\",\"i\"         }, {\"abc\"},                  {1,3,{}} }, -- cf\r\n}\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function set_m_tfind (lib, flg)\r\n  return {\r\n  Name = \"Method tfind\",\r\n  Method = \"tfind\",\r\n--{patt,cf,lo},           {subj,st,ef}              { results }\r\n  { {\".+\"},               {\"abcd\",5},               { N }    }, -- failing st\r\n  { {\".*?\"},              {\"abcd\"},                 {1,0,{}} }, -- non-greedy\r\n  { {\"aBC\",flg.IGNORECASE}, {\"abc\"},                {1,3,{}} }, -- cf\r\n  { {\"aBC\",\"i\"         }, {\"abc\"},                  {1,3,{}} }, -- cf\r\n}\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function (subj, methodname, patt, name1, name2)\r\n      local r = lib.new (patt)\r\n      local _,_,caps = r[methodname] (r, subj)\r\n      return norm(caps[name1]), norm(caps[name2])\r\n    end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function (libname)\r\n  local lib = require (libname)\r\n  local flags = lib.flags ()\r\n  local sets = {\r\n    set_f_match  (lib, flags),\r\n    set_f_find   (lib, flags),\r\n    set_f_gmatch (lib, flags),\r\n    set_f_split  (lib, flags),\r\n    set_m_exec   (lib, flags),\r\n    set_m_tfind  (lib, flags),\r\n  }\r\n  local MAJOR = tonumber(lib.version():match(\"%d+\"))\r\n  if MAJOR >= 0 then\r\n    table.insert (sets, set_named_subpatterns (lib, flags))\r\n  end\r\n  return sets\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local lib = require (libname)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local flags = lib.flags ()",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local sets = {\r\n    set_f_match  (lib, flags),\r\n    set_f_find   (lib, flags),\r\n    set_f_gmatch (lib, flags),\r\n    set_f_split  (lib, flags),\r\n    set_m_exec   (lib, flags),\r\n    set_m_tfind  (lib, flags),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local MAJOR = tonumber(lib.version():match(\"%d+\"))",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if MAJOR >= 0 then\r\n    table.insert (sets, set_named_subpatterns (lib, flags))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "table.insert (sets, set_named_subpatterns (lib, flags))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "",
    "type": "function container"
  }, {
    "id": 54,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 55,
    "text": "version",
    "type": "global function"
  }, {
    "id": 56,
    "text": "split",
    "type": "global function"
  }, {
    "id": 57,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 58,
    "text": "require",
    "type": "global function"
  }, {
    "id": 59,
    "text": "r[methodname]",
    "type": "global function"
  }, {
    "id": 60,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 61,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 62,
    "text": "flags",
    "type": "global function"
  }, {
    "id": 63,
    "text": "new",
    "type": "global function"
  }, {
    "id": 64,
    "text": "(libname)",
    "type": "module"
  }, {
    "id": 65,
    "text": "",
    "type": "variable container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "interface container"
  }, {
    "id": 72,
    "text": "",
    "type": "interface"
  } ]
}