{
  "_filename": "runtest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lrexlib/test/runtest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 5,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 5,
    "label": "has",
    "to": 27
  }, {
    "from": 5,
    "label": "has",
    "to": 28
  }, {
    "from": 5,
    "label": "has",
    "to": 29
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 35
  }, {
    "from": 5,
    "label": "calls",
    "to": 32
  }, {
    "from": 5,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 38
  }, {
    "from": 5,
    "label": "calls",
    "to": 38
  }, {
    "from": 5,
    "label": "calls",
    "to": 38
  }, {
    "from": 30,
    "label": "calls",
    "to": 5
  }, {
    "from": 5,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 5
  }, {
    "from": 2,
    "label": "contains",
    "to": 41
  }, {
    "from": 2,
    "label": "contains",
    "to": 42
  }, {
    "from": 41,
    "label": "initializes",
    "to": 43
  }, {
    "from": 41,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 45,
    "label": "assigns",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 45,
    "label": "assigns",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 45,
    "label": "assigns",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 45,
    "label": "assigns",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 45,
    "label": "assigns",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 41,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 41,
    "label": "initializes",
    "to": 60
  }, {
    "from": 42,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 1
  }, {
    "from": 42,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "requires",
    "to": 40
  }, {
    "from": 42,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 64
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luatest",
    "type": "module"
  }, {
    "id": 2,
    "text": "runtest",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function print_results (val, indent, lut)\r\n  indent = indent or \"\"\r\n  lut = lut or {} -- look-up table\r\n  local str = tostring (val)\r\n  if type (val) == \"table\" then\r\n    if lut[val] then\r\n      io.write (indent, str, \"\\n\")\r\n    else\r\n      lut[val] = true\r\n      io.write (indent, str, \"\\n\")\r\n      for i,v in ipairs (val) do\r\n        print_results (v, \"  \" .. indent, lut) -- recursion\r\n      end\r\n    end\r\n  else\r\n    io.write (indent, val == NT and \"nil\" or str, \"\\n\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function test_set (set, lib)\r\n  local list = {}\r\n\r\n  if type (set.Func) == \"function\" then\r\n    local func = set.Func\r\n    for i,test in ipairs (set) do\r\n      local ok, res = test_function (test, func)\r\n      if not ok then\r\n        table.insert (list, {i=i, res})\r\n      end\r\n    end\r\n\r\n  elseif type (set.Method) == \"string\" then\r\n    for i,test in ipairs (set) do\r\n      local ok, res1, res2 = test_method (test, lib.new, set.Method)\r\n      if not ok then\r\n        table.insert (list, {i=i, res1, res2})\r\n      end\r\n    end\r\n\r\n  else\r\n    error (\"neither set.Func nor set.Method is valid\")\r\n  end\r\n\r\n  return list\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function test_library (libname, setfile, verbose)\r\n  if verbose then\r\n    print ((\"[lib: %s; file: %s]\"):format (libname, setfile))\r\n  end\r\n  local lib = require (libname)\r\n  local f = require (setfile)\r\n  local sets = f (libname)\r\n\r\n  local realalien = alien\r\n  if libname == \"rex_posix\" and not lib.flags ().STARTEND and alien then\r\n    alien = nil\r\n    io.stderr:write (\"Cannot run posix tests with alien without REG_STARTEND\\n\")\r\n  end\r\n\r\n  local n = 0 -- number of failures\r\n  for _, set in ipairs (sets) do\r\n    if verbose then\r\n      print (set.Name or \"Unnamed set\")\r\n    end\r\n    local err = luatest.test_set (set, lib)\r\n    if verbose then\r\n      for _,v in ipairs (err) do\r\n        print (\"  Test \" .. v.i)\r\n        luatest.print_results (v, \"  \")\r\n      end\r\n    end\r\n    n = n + #err\r\n  end\r\n  if verbose then\r\n    print \"\"\r\n  end\r\n  alien = realalien\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if verbose then\r\n    print ((\"[lib: %s; file: %s]\"):format (libname, setfile))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "print ((\"[lib: %s; file: %s]\"):format (libname, setfile))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local lib = require (libname)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local f = require (setfile)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local sets = f (libname)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local realalien = alien",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if libname == \"rex_posix\" and not lib.flags ().STARTEND and alien then\r\n    alien = nil\r\n    io.stderr:write (\"Cannot run posix tests with alien without REG_STARTEND\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "alien = nil",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "io.stderr:write (\"Cannot run posix tests with alien without REG_STARTEND\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for _, set in ipairs (sets) do\r\n    if verbose then\r\n      print (set.Name or \"Unnamed set\")\r\n    end\r\n    local err = luatest.test_set (set, lib)\r\n    if verbose then\r\n      for _,v in ipairs (err) do\r\n        print (\"  Test \" .. v.i)\r\n        luatest.print_results (v, \"  \")\r\n      end\r\n    end\r\n    n = n + #err\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "if verbose then\r\n      print (set.Name or \"Unnamed set\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "print (set.Name or \"Unnamed set\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local err = luatest.test_set (set, lib)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if verbose then\r\n      for _,v in ipairs (err) do\r\n        print (\"  Test \" .. v.i)\r\n        luatest.print_results (v, \"  \")\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "for _,v in ipairs (err) do\r\n        print (\"  Test \" .. v.i)\r\n        luatest.print_results (v, \"  \")\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 22,
    "text": "print (\"  Test \" .. v.i)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "luatest.print_results (v, \"  \")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "n = n + #err",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if verbose then\r\n    print \"\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "print \"\"",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "alien = realalien",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 32,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 33,
    "text": "print",
    "type": "global function"
  }, {
    "id": 34,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 35,
    "text": "f",
    "type": "global function"
  }, {
    "id": 36,
    "text": "error",
    "type": "global function"
  }, {
    "id": 37,
    "text": "select",
    "type": "global function"
  }, {
    "id": 38,
    "text": "require",
    "type": "global function"
  }, {
    "id": 39,
    "text": "flags",
    "type": "global function"
  }, {
    "id": 40,
    "text": "(libname)",
    "type": "module"
  }, {
    "id": 41,
    "text": "",
    "type": "variable container"
  }, {
    "id": 42,
    "text": "",
    "type": "require container"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 46,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 47,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 48,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 49,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 50,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 51,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 52,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 53,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 54,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 55,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 56,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 57,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "global variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 64,
    "text": "(setfile)",
    "type": "module"
  } ]
}