{
  "_filename": "tre_sets.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lrexlib/test/tre_sets.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 10
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 13
  }, {
    "from": 20,
    "label": "has",
    "to": 14
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 10
  }, {
    "from": 23,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 13
  }, {
    "from": 20,
    "label": "has",
    "to": 14
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 4
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 4
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 4
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 4
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 52,
    "label": "has",
    "to": 4
  }, {
    "from": 52,
    "label": "has",
    "to": 60
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 63,
    "label": "has",
    "to": 4
  }, {
    "from": 64,
    "label": "has",
    "to": 4
  }, {
    "from": 65,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 59
  }, {
    "from": 67,
    "label": "has",
    "to": 4
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 4
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 76,
    "label": "has",
    "to": 4
  }, {
    "from": 77,
    "label": "has",
    "to": 4
  }, {
    "from": 78,
    "label": "has",
    "to": 4
  }, {
    "from": 79,
    "label": "has",
    "to": 4
  }, {
    "from": 80,
    "label": "has",
    "to": 4
  }, {
    "from": 81,
    "label": "has",
    "to": 4
  }, {
    "from": 82,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 85,
    "label": "has",
    "to": 4
  }, {
    "from": 86,
    "label": "has",
    "to": 4
  }, {
    "from": 87,
    "label": "has",
    "to": 4
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 89,
    "label": "has",
    "to": 4
  }, {
    "from": 90,
    "label": "has",
    "to": 4
  }, {
    "from": 91,
    "label": "has",
    "to": 4
  }, {
    "from": 92,
    "label": "has",
    "to": 4
  }, {
    "from": 93,
    "label": "has",
    "to": 4
  }, {
    "from": 94,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 4
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 8,
    "label": "calls",
    "to": 104
  }, {
    "from": 99,
    "label": "calls",
    "to": 37
  }, {
    "from": 99,
    "label": "calls",
    "to": 29
  }, {
    "from": 99,
    "label": "calls",
    "to": 67
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 31,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 45,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 52,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 99,
    "label": "calls",
    "to": 48
  }, {
    "from": 99,
    "label": "calls",
    "to": 35
  }, {
    "from": 99,
    "label": "calls",
    "to": 27
  }, {
    "from": 99,
    "label": "calls",
    "to": 45
  }, {
    "from": 6,
    "label": "calls",
    "to": 101
  }, {
    "from": 8,
    "label": "calls",
    "to": 101
  }, {
    "from": 18,
    "label": "calls",
    "to": 101
  }, {
    "from": 25,
    "label": "calls",
    "to": 101
  }, {
    "from": 27,
    "label": "calls",
    "to": 101
  }, {
    "from": 41,
    "label": "calls",
    "to": 101
  }, {
    "from": 99,
    "label": "calls",
    "to": 31
  }, {
    "from": 99,
    "label": "calls",
    "to": 106
  }, {
    "from": 99,
    "label": "calls",
    "to": 106
  }, {
    "from": 8,
    "label": "calls",
    "to": 107
  }, {
    "from": 18,
    "label": "calls",
    "to": 107
  }, {
    "from": 41,
    "label": "calls",
    "to": 6
  }, {
    "from": 45,
    "label": "calls",
    "to": 6
  }, {
    "from": 48,
    "label": "calls",
    "to": 6
  }, {
    "from": 50,
    "label": "calls",
    "to": 6
  }, {
    "from": 52,
    "label": "calls",
    "to": 6
  }, {
    "from": 67,
    "label": "calls",
    "to": 6
  }, {
    "from": 70,
    "label": "calls",
    "to": 6
  }, {
    "from": 99,
    "label": "calls",
    "to": 50
  }, {
    "from": 99,
    "label": "calls",
    "to": 33
  }, {
    "from": 99,
    "label": "calls",
    "to": 41
  }, {
    "from": 18,
    "label": "calls",
    "to": 103
  }, {
    "from": 99,
    "label": "calls",
    "to": 39
  }, {
    "from": 99,
    "label": "calls",
    "to": 8
  }, {
    "from": 8,
    "label": "calls",
    "to": 105
  }, {
    "from": 18,
    "label": "calls",
    "to": 105
  }, {
    "from": 8,
    "label": "calls",
    "to": 5
  }, {
    "from": 8,
    "label": "calls",
    "to": 5
  }, {
    "from": 18,
    "label": "calls",
    "to": 5
  }, {
    "from": 18,
    "label": "calls",
    "to": 5
  }, {
    "from": 18,
    "label": "calls",
    "to": 5
  }, {
    "from": 99,
    "label": "calls",
    "to": 70
  }, {
    "from": 99,
    "label": "calls",
    "to": 18
  }, {
    "from": 99,
    "label": "calls",
    "to": 52
  }, {
    "from": 99,
    "label": "calls",
    "to": 102
  }, {
    "from": 99,
    "label": "calls",
    "to": 25
  }, {
    "from": 52,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "contains",
    "to": 99
  }, {
    "from": 99,
    "label": "declares",
    "to": 3
  }, {
    "from": 99,
    "label": "declares",
    "to": 5
  }, {
    "from": 99,
    "label": "declares",
    "to": 6
  }, {
    "from": 99,
    "label": "declares",
    "to": 8
  }, {
    "from": 99,
    "label": "declares",
    "to": 16
  }, {
    "from": 99,
    "label": "declares",
    "to": 18
  }, {
    "from": 99,
    "label": "declares",
    "to": 23
  }, {
    "from": 99,
    "label": "declares",
    "to": 25
  }, {
    "from": 99,
    "label": "declares",
    "to": 27
  }, {
    "from": 99,
    "label": "declares",
    "to": 29
  }, {
    "from": 99,
    "label": "declares",
    "to": 31
  }, {
    "from": 99,
    "label": "declares",
    "to": 33
  }, {
    "from": 99,
    "label": "declares",
    "to": 35
  }, {
    "from": 99,
    "label": "declares",
    "to": 37
  }, {
    "from": 99,
    "label": "declares",
    "to": 39
  }, {
    "from": 99,
    "label": "declares",
    "to": 41
  }, {
    "from": 99,
    "label": "declares",
    "to": 45
  }, {
    "from": 99,
    "label": "declares",
    "to": 48
  }, {
    "from": 99,
    "label": "declares",
    "to": 50
  }, {
    "from": 99,
    "label": "declares",
    "to": 52
  }, {
    "from": 99,
    "label": "declares",
    "to": 61
  }, {
    "from": 99,
    "label": "declares",
    "to": 62
  }, {
    "from": 99,
    "label": "declares",
    "to": 63
  }, {
    "from": 99,
    "label": "declares",
    "to": 64
  }, {
    "from": 99,
    "label": "declares",
    "to": 65
  }, {
    "from": 99,
    "label": "declares",
    "to": 66
  }, {
    "from": 99,
    "label": "declares",
    "to": 67
  }, {
    "from": 99,
    "label": "declares",
    "to": 70
  }, {
    "from": 99,
    "label": "declares",
    "to": 73
  }, {
    "from": 99,
    "label": "declares",
    "to": 75
  }, {
    "from": 99,
    "label": "declares",
    "to": 76
  }, {
    "from": 99,
    "label": "declares",
    "to": 77
  }, {
    "from": 99,
    "label": "declares",
    "to": 78
  }, {
    "from": 99,
    "label": "declares",
    "to": 79
  }, {
    "from": 99,
    "label": "declares",
    "to": 80
  }, {
    "from": 99,
    "label": "declares",
    "to": 81
  }, {
    "from": 99,
    "label": "declares",
    "to": 82
  }, {
    "from": 99,
    "label": "declares",
    "to": 83
  }, {
    "from": 99,
    "label": "declares",
    "to": 84
  }, {
    "from": 99,
    "label": "declares",
    "to": 85
  }, {
    "from": 99,
    "label": "declares",
    "to": 86
  }, {
    "from": 99,
    "label": "declares",
    "to": 87
  }, {
    "from": 99,
    "label": "declares",
    "to": 88
  }, {
    "from": 99,
    "label": "declares",
    "to": 89
  }, {
    "from": 99,
    "label": "declares",
    "to": 90
  }, {
    "from": 99,
    "label": "declares",
    "to": 91
  }, {
    "from": 99,
    "label": "declares",
    "to": 92
  }, {
    "from": 99,
    "label": "declares",
    "to": 93
  }, {
    "from": 99,
    "label": "declares",
    "to": 94
  }, {
    "from": 99,
    "label": "declares",
    "to": 95
  }, {
    "from": 2,
    "label": "contains",
    "to": 109
  }, {
    "from": 2,
    "label": "contains",
    "to": 110
  }, {
    "from": 109,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 109,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 110,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "requires",
    "to": 108
  }, {
    "from": 2,
    "label": "provides",
    "to": 117
  }, {
    "from": 117,
    "label": "provides",
    "to": 118
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luatest",
    "type": "module"
  }, {
    "id": 2,
    "text": "tre_sets",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(s) return (string.gsub(s, \".\", \"%0\\0\")) end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "local function norm(a) return a==nil and N or a end",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function get_wgsub (lib)\r\n  return lib.wgsub or\r\n    function (subj, pattern, repl, n)\r\n      return lib.wnew (pattern) : wgsub (subj, repl, n)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function set_f_wgmatch (lib, flg)\r\n  -- gmatch (s, p, [cf], [ef])\r\n  local function test_wgmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.wgmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end\r\n  return {\r\n    Name = \"Function wgmatch\",\r\n    Func = test_wgmatch,\r\n  --{  subj              patt             results }\r\n    { {L\"ab\",            lib.wnew(L\".\")}, {{L\"a\",N}, {L\"b\",N} } },\r\n    { {(L\"abcd\"):rep(3), L\"(.)b.(d)\"},    {{L\"a\",L\"d\"},{L\"a\",L\"d\"},{L\"a\",L\"d\"}} },\r\n    { {L\"abcd\",          L\".*\" },         {{L\"abcd\",N},{L\"\",N}  } },--zero-length match\r\n    { {L\"abc\",           L\"^.\" },         {{L\"a\",N}} },--anchored pattern\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function test_wgmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.wgmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 10,
    "text": "local out, guard = {}, 10",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "for a, b in lib.wgmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "table.insert (out, { norm(a), norm(b) })",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "guard = guard - 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if guard == 0 then break end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function test_wgmatch (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b in lib.wgmatch (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function set_f_wsplit (lib, flg)\r\n  -- split (s, p, [cf], [ef])\r\n  local function test_wsplit (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.wsplit (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end\r\n  return {\r\n    Name = \"Function wsplit\",\r\n    Func = test_wsplit,\r\n  --{  subj              patt       results }\r\n    { {L\"ab\",     lib.wnew(L\",\")},  {{L\"ab\",N,N},                           } },\r\n    { {L\"ab\",            L\",\"},     {{L\"ab\",N,N},                           } },\r\n    { {L\",\",             L\",\"},     {{L\"\",L\",\",N},     {L\"\", N, N},           } },\r\n    { {L\",,\",            L\",\"},     {{L\"\",L\",\",N},     {L\"\",L\",\",N},  {L\"\",N,N} } },\r\n    { {L\"a,b\",           L\",\"},     {{L\"a\",L\",\",N},    {L\"b\",N,N},            } },\r\n    { {L\",a,b\",          L\",\"},     {{L\"\",L\",\",N},     {L\"a\",L\",\",N}, {L\"b\",N,N}} },\r\n    { {L\"a,b,\",          L\",\"},     {{L\"a\",L\",\",N},    {L\"b\",L\",\",N}, {L\"\",N,N} } },\r\n    { {L\"a,,b\",          L\",\"},     {{L\"a\",L\",\",N},    {L\"\",L\",\",N},  {L\"b\",N,N}} },\r\n    { {L\"ab<78>c\", L\"<(.)(.)>\"},    {{L\"ab\",L\"7\",L\"8\"}, {L\"c\",N,N},            } },\r\n    { {L\"abc\",           L\"^.\"},    {{L\"\", L\"a\",N},    {L\"bc\",N,N},           } },--anchored pattern\r\n    { {L\"abc\",           L\"^\"},     {{L\"\", L\"\", N},    {L\"abc\",N,N},          } },\r\n--  { {\"abc\",           \"$\"},     {{\"abc\",\"\",N},   {\"\",N,N},             } },\r\n--  { {\"abc\",         \"^|$\"},     {{\"\", \"\", N},    {\"abc\",\"\",N},{\"\",N,N},} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local function test_wsplit (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.wsplit (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 20,
    "text": "for a, b, c in lib.wsplit (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "table.insert (out, { norm(a), norm(b), norm(c) })",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function test_wsplit (subj, patt)\r\n    local out, guard = {}, 10\r\n    for a, b, c in lib.wsplit (subj, patt) do\r\n      table.insert (out, { norm(a), norm(b), norm(c) })\r\n      guard = guard - 1\r\n      if guard == 0 then break end\r\n    end\r\n    return unpack (out)\r\n  end",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function set_f_wfind (lib, flg)\r\n  return {\r\n    Name = \"Function wfind\",\r\n    Func = lib.wfind,\r\n  --  {subj, patt, st},         { results }\r\n    { {L\"abcd\", lib.wnew(L\".+\")}, { 1,4 }   },      -- [none]\r\n    { {L\"abcd\", L\".+\"},           { 1,4 }   },      -- [none]\r\n    { {L\"abcd\", L\".+\", 2},        { 2,4 }   },      -- positive st\r\n    { {L\"abcd\", L\".+\", -2},       { 3,4 }   },      -- negative st\r\n    { {L\"abcd\", L\".*\"},           { 1,4 }   },      -- [none]\r\n    { {L\"abc\",  L\"bc\"},           { 2,3 }   },      -- [none]\r\n    { {L\"abcd\", L\"(.)b.(d)\"},     { 1,4,L\"a\",L\"d\" }}, -- [captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function set_f_wmatch (lib, flg)\r\n  return {\r\n    Name = \"Function wmatch\",\r\n    Func = lib.wmatch,\r\n  --  {subj, patt, st},           { results }\r\n    { {L\"abcd\", lib.wnew(L\".+\")}, {L\"abcd\"}  }, -- [none]\r\n    { {L\"abcd\", L\".+\"},           {L\"abcd\"}  }, -- [none]\r\n    { {L\"abcd\", L\".+\", 2},        {L\"bcd\"}   }, -- positive st\r\n    { {L\"abcd\", L\".+\", -2},       {L\"cd\"}    }, -- negative st\r\n    { {L\"abcd\", L\".*\"},           {L\"abcd\"}  }, -- [none]\r\n    { {L\"abc\",  L\"bc\"},           {L\"bc\"}    }, -- [none]\r\n    { {L\"abcd\", L\"(.)b.(d)\"},     {L\"a\",L\"d\"} }, -- [captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function set_m_wexec (lib, flg)\r\n  return {\r\n    Name = \"Method wexec\",\r\n    Method = \"wexec\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {L\".+\"},              {L\"abcd\"},            {1,4,{}}  }, -- [none]\r\n    { {L\".+\"},              {L\"abcd\",2},          {2,4,{}}  }, -- positive st\r\n    { {L\".+\"},              {L\"abcd\",-2},         {3,4,{}}  }, -- negative st\r\n    { {L\".*\"},              {L\"abcd\"},            {1,4,{}}  }, -- [none]\r\n    { {L\"bc\"},              {L\"abc\"},             {2,3,{}}  }, -- [none]\r\n    { {L \"(.)b.(d)\"},       {L\"abcd\"},            {1,4,{1,1,4,4}}},--[captures]\r\n    { {L\"(a+)6+(b+)\"},      {L\"Taa66bbT\",2},      {2,7,{2,3,6,7}}},--[st+captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function set_m_waexec (lib, flg)\r\n  return {\r\n    Name = \"Method waexec\",\r\n    Method = \"waexec\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {L\".+\"},              {L\"abcd\",{}},        {1,4,{}}  }, -- [none]\r\n    { {L\".+\"},              {L\"abcd\",{},2},      {2,4,{}}  }, -- positive st\r\n    { {L\".+\"},              {L\"abcd\",{},-2},     {3,4,{}}  }, -- negative st\r\n    { {L\".*\"},              {L\"abcd\",{}},        {1,4,{}}  }, -- [none]\r\n    { {L\"bc\"},              {L\"abc\", {}},        {2,3,{}}  }, -- [none]\r\n    { {L \"(.)b.(d)\"},       {L\"abcd\",{}},        {1,4,{1,1,4,4}}},--[captures]\r\n    { {L\"(a+)6+(b+)\"},      {L\"Taa66bbT\",{},2},  {2,7,{2,3,6,7}}},--[st+captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function set_m_wtfind (lib, flg)\r\n  return {\r\n    Name = \"Method wtfind\",\r\n    Method = \"wtfind\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {L\".+\"},              {L\"abcd\"},           {1,4,{}}  }, -- [none]\r\n    { {L\".+\"},              {L\"abcd\",2},         {2,4,{}}  }, -- positive st\r\n    { {L\".+\"},              {L\"abcd\",-2},        {3,4,{}}  }, -- negative st\r\n    { {L\".*\"},              {L\"abcd\"},           {1,4,{}}  }, -- [none]\r\n    { {L\"bc\"},              {L\"abc\"},            {2,3,{}}  }, -- [none]\r\n    { {L\"(.)b.(d)\"},        {L\"abcd\"},           {1,4,{L\"a\",L\"d\"}}},--[captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function set_m_watfind (lib, flg)\r\n  return {\r\n    Name = \"Method watfind\",\r\n    Method = \"watfind\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {L\".+\"},              {L\"abcd\",{}},        {1,4,{}}  }, -- [none]\r\n    { {L\".+\"},              {L\"abcd\",{},2},      {2,4,{}}  }, -- positive st\r\n    { {L\".+\"},              {L\"abcd\",{},-2},     {3,4,{}}  }, -- negative st\r\n    { {L\".*\"},              {L\"abcd\",{}},        {1,4,{}}  }, -- [none]\r\n    { {L\"bc\"},              {L\"abc\", {}},        {2,3,{}}  }, -- [none]\r\n    { {L\"(.)b.(d)\"},        {L\"abcd\",{}},        {1,4,{L\"a\",L\"d\"}}},--[captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function set_m_wfind (lib, flg)\r\n  return {\r\n    Name = \"Method wfind\",\r\n    Method = \"wfind\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {L\".+\"},              {L\"abcd\"},           {1,4}  }, -- [none]\r\n    { {L\".+\"},              {L\"abcd\",2},         {2,4}  }, -- positive st\r\n    { {L\".+\"},              {L\"abcd\",-2},        {3,4}  }, -- negative st\r\n    { {L\".*\"},              {L\"abcd\"},           {1,4}  }, -- [none]\r\n    { {L\"bc\"},              {L\"abc\"},            {2,3}  }, -- [none]\r\n    { {L\"(.)b.(d)\"},        {L\"abcd\"},           {1,4,L\"a\",L\"d\"}},--[captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function set_m_wmatch (lib, flg)\r\n  return {\r\n    Name = \"Method wmatch\",\r\n    Method = \"wmatch\",\r\n  --{patt},                 {subj, st}           { results }\r\n    { {L\".+\"},              {L\"abcd\"},           {L\"abcd\"}  }, -- [none]\r\n    { {L\".+\"},              {L\"abcd\",2},         {L\"bcd\" }  }, -- positive st\r\n    { {L\".+\"},              {L\"abcd\",-2},        {L\"cd\"  }  }, -- negative st\r\n    { {L\".*\"},              {L\"abcd\"},           {L\"abcd\"}  }, -- [none]\r\n    { {L\"bc\"},              {L\"abc\"},            {L\"bc\"  }  }, -- [none]\r\n    {{ L\"(.)b.(d)\"},        {L\"abcd\"},           {L\"a\",L\"d\"} }, --[captures]\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function set_f_wgsub1 (lib, flg)\r\n  local subj, pat = L\"abcdef\", L\"[abef]+\"\r\n  local cpat = lib.wnew(pat)\r\n  return {\r\n    Name = \"Function wgsub, set1\",\r\n    Func = get_wgsub (lib),\r\n  --{ s,       p,    f,    n,    res1,   res2, res3 },\r\n    { {subj,  cpat,  L\"\",  0},   {subj,     0, 0} }, -- test \"n\" + empty_replace\r\n    { {subj,   pat,  L\"\",  0},   {subj,     0, 0} }, -- test \"n\" + empty_replace\r\n    { {subj,   pat,  L\"\", -1},   {subj,     0, 0} }, -- test \"n\" + empty_replace\r\n    { {subj,   pat,  L\"\",  1},   {L\"cdef\",  1, 1} },\r\n    { {subj,   pat,  L\"\",  2},   {L\"cd\",    2, 2} },\r\n    { {subj,   pat,  L\"\",  3},   {L\"cd\",    2, 2} },\r\n    { {subj,   pat,  L\"\"    },   {L\"cd\",    2, 2} },\r\n    { {subj,   pat,  L\"#\", 0},   {subj,     0, 0} }, -- test \"n\" + non-empty_replace\r\n    { {subj,   pat,  L\"#\", 1},   {L\"#cdef\", 1, 1} },\r\n    { {subj,   pat,  L\"#\", 2},   {L\"#cd#\",  2, 2} },\r\n    { {subj,   pat,  L\"#\", 3},   {L\"#cd#\",  2, 2} },\r\n    { {subj,   pat,  L\"#\"   },   {L\"#cd#\",  2, 2} },\r\n    { {L\"abc\", L\"^.\",L\"#\"   },   {L\"#bc\",   1, 1} }, -- anchored pattern\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local subj, pat = L\"abcdef\", L\"[abef]+\"",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local cpat = lib.wnew(pat)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function set_f_wgsub2 (lib, flg)\r\n  local subj, pat = L\"abc\", L\"([ac])\"\r\n  return {\r\n    Name = \"Function wgsub, set2\",\r\n    Func = get_wgsub (lib),\r\n  --{ s,     p,   f,   n,      res1,     res2, res3 },\r\n    { {subj, pat, L\"<%1>\" },   {L\"<a>b<c>\", 2, 2} }, -- test non-escaped chars in f\r\n    { {subj, pat, L\"%<%1%>\" }, {L\"<a>b<c>\", 2, 2} }, -- test escaped chars in f\r\n    { {subj, pat, L\"\" },       {L\"b\",       2, 2} }, -- test empty replace\r\n    { {subj, pat, L\"1\" },      {L\"1b1\",     2, 2} }, -- test odd and even %'s in f\r\n    { {subj, pat, L\"%1\" },     {L\"abc\",     2, 2} },\r\n    { {subj, pat, L\"%%1\" },    {L\"%1b%1\",   2, 2} },\r\n    { {subj, pat, L\"%%%1\" },   {L\"%ab%c\",   2, 2} },\r\n    { {subj, pat, L\"%%%%1\" },  {L\"%%1b%%1\", 2, 2} },\r\n    { {subj, pat, L\"%%%%%1\" }, {L\"%%ab%%c\", 2, 2} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local subj, pat = L\"abc\", L\"([ac])\"",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function set_f_wgsub3 (lib, flg)\r\n  return {\r\n    Name = \"Function wgsub, set3\",\r\n    Func = get_wgsub (lib),\r\n  --{ s,       p,       f,  n,    res1,res2,res3 },\r\n    { {L\"abc\", L\"a\",    L\"%0\" }, {L\"abc\", 1, 1} }, -- test (in)valid capture index\r\n    { {L\"abc\", L\"a\",    L\"%1\" }, {L\"abc\", 1, 1} },\r\n    { {L\"abc\", L\"[ac]\", L\"%1\" }, {L\"abc\", 2, 2} },\r\n    { {L\"abc\", L\"(a)\",  L\"%1\" }, {L\"abc\", 1, 1} },\r\n    { {L\"abc\", L\"(a)\",  L\"%2\" }, \"invalid capture index\" },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function set_f_wgsub4 (lib, flg)\r\n  return {\r\n    Name = \"Function wgsub, set4\",\r\n    Func = get_wgsub (lib),\r\n  --{ s,           p,                f, n,   res1,       res2, res3 },\r\n    { {L\"a2c3\",     L\".\",            L\"#\" }, {L\"####\",      4, 4} }, -- test .\r\n    { {L\"a2c3\",     L\".+\",           L\"#\" }, {L\"#\",         1, 1} }, -- test .+\r\n    { {L\"a2c3\",     L\".*\",           L\"#\" }, {L\"##\",        2, 2} }, -- test .*\r\n    { {L\"/* */ */\", L\"\\\\/\\\\*(.*)\\\\*\\\\/\", L\"#\" }, {L\"#\",     1, 1} },\r\n    { {L\"a2c3\",     L\"[0-9]\",        L\"#\" }, {L\"a#c#\",      2, 2} }, -- test %d\r\n    { {L\"a2c3\",     L\"[^0-9]\",       L\"#\" }, {L\"#2#3\",      2, 2} }, -- test %D\r\n    { {L\"a \\t\\nb\",  L\"[ \\t\\n]\",      L\"#\" }, {L\"a###b\",     3, 3} }, -- test %s\r\n    { {L\"a \\t\\nb\",  L\"[^ \\t\\n]\",     L\"#\" }, {L\"# \\t\\n#\",   2, 2} }, -- test %S\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function set_f_wgsub5 (lib, flg)\r\n  local function frep1 () end                       -- returns nothing\r\n  local function frep2 () return L\"#\" end           -- ignores arguments\r\n  local function frep3 (...) return table.concat({...}, L\",\") end -- \"normal\"\r\n  local function frep4 () return {} end             -- invalid return type\r\n  local function frep5 () return L\"7\", L\"a\" end     -- 2-nd return is \"a\"\r\n  local function frep6 () return L\"7\", \"break\" end  -- 2-nd return is \"break\"\r\n  local subj = L\"a2c3\"\r\n  return {\r\n    Name = \"Function wgsub, set5\",\r\n    Func = get_wgsub (lib),\r\n  --{ s,     p,          f,   n,   res1,       res2, res3 },\r\n    { {subj, L\"a(.)c(.)\", frep1 }, {subj,         1, 0} },\r\n    { {subj, L\"a(.)c(.)\", frep2 }, {L\"#\",         1, 1} },\r\n    { {subj, L\"a(.)c(.)\", frep3 }, {L\"2,3\",       1, 1} },\r\n    { {subj, L\"a.c.\",     frep3 }, {subj,         1, 1} },\r\n    { {subj, L\"z*\",       frep1 }, {subj,         5, 0} },\r\n    { {subj, L\"z*\",       frep2 }, {L\"#a#2#c#3#\", 5, 5} },\r\n    { {subj, L\"z*\",       frep3 }, {subj,         5, 5} },\r\n    { {subj, subj,        frep4 }, \"invalid return type\" },\r\n    { {L\"abc\",L\".\",       frep5 }, {L\"777\",       3, 3} },\r\n    { {L\"abc\",L\".\",       frep6 }, {L\"777\",       3, 3} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local function frep1 () end",
    "type": "statement:localfunction"
  }, {
    "id": 54,
    "text": "local function frep2 () return L\"#\" end",
    "type": "statement:localfunction"
  }, {
    "id": 55,
    "text": "local function frep3 (...) return table.concat({...}, L\",\") end",
    "type": "statement:localfunction"
  }, {
    "id": 56,
    "text": "local function frep4 () return {} end",
    "type": "statement:localfunction"
  }, {
    "id": 57,
    "text": "local function frep5 () return L\"7\", L\"a\" end",
    "type": "statement:localfunction"
  }, {
    "id": 58,
    "text": "local function frep6 () return L\"7\", \"break\" end",
    "type": "statement:localfunction"
  }, {
    "id": 59,
    "text": "local subj = L\"a2c3\"",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function frep1 () end",
    "type": "function"
  }, {
    "id": 62,
    "text": "local function frep2 () return L\"#\" end",
    "type": "function"
  }, {
    "id": 63,
    "text": "local function frep3 (...) return table.concat({...}, L\",\") end",
    "type": "function"
  }, {
    "id": 64,
    "text": "local function frep4 () return {} end",
    "type": "function"
  }, {
    "id": 65,
    "text": "local function frep5 () return L\"7\", L\"a\" end",
    "type": "function"
  }, {
    "id": 66,
    "text": "local function frep6 () return L\"7\", \"break\" end",
    "type": "function"
  }, {
    "id": 67,
    "text": "local function set_f_wgsub6 (lib, flg)\r\n  local tab1, tab2, tab3 = {}, { [L\"2\"] = 56 }, { [L\"2\"] = {} }\r\n  local subj = L\"a2c3\"\r\n  return {\r\n    Name = \"Function wgsub, set6\",\r\n    Func = get_wgsub (lib),\r\n  --{ s,     p,           f, n,    res1,res2,res3 },\r\n    { {subj, L\"a(.)c(.)\", tab1 }, {subj,  1, 0} },\r\n    { {subj, L\"a(.)c(.)\", tab2 }, {\"56\",  1, 1} },\r\n    { {subj, L\"a(.)c(.)\", tab3 }, \"invalid replacement type\" },\r\n    { {subj, L\"a.c.\",     tab1 }, {subj,  1, 0} },\r\n    { {subj, L\"a.c.\",     tab2 }, {subj,  1, 0} },\r\n    { {subj, L\"a.c.\",     tab3 }, {subj,  1, 0} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local tab1, tab2, tab3 = {}, { [L\"2\"] = 56 }, { [L\"2\"] = {} }",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function set_f_wgsub8 (lib, flg)\r\n  local subj, patt, repl = L\"abcdef\", L\"..\", L\"*\"\r\n  return {\r\n    Name = \"Function wgsub, set8\",\r\n    Func = get_wgsub (lib),\r\n  --{ s,     p,       f, n,                                    res1,  res2, res3 },\r\n    { {subj, patt, repl, function() end },                    {L\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return nil end },         {L\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return false end },       {L\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return true end },        {L\"***\",    3, 3} },\r\n    { {subj, patt, repl, function() return {} end },          {L\"***\",    3, 3} },\r\n    { {subj, patt, repl, function() return L\"#\" end },        {L\"###\",    3, 3} },\r\n    { {subj, patt, repl, function() return 57 end },          {\"575757\",  3, 3} },\r\n    { {subj, patt, repl, function (from) return from end },   {\"135\",     3, 3} },\r\n    { {subj, patt, repl, function (from, to) return to end }, {\"246\",     3, 3} },\r\n    { {subj, patt, repl, function (from,to,rep) return rep end },\r\n                                                              {L\"***\",    3, 3} },\r\n    { {subj, patt, repl, function (from, to, rep) return rep..to..from end },\r\n                                     {L\"*\"..\"21\"..L\"*\"..\"43\"..L\"*\"..\"65\", 3, 3} },\r\n    { {subj, patt, repl, function() return nil end },         {L\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return nil, nil end },    {L\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return nil, false end },  {L\"abcdef\", 3, 0} },\r\n    { {subj, patt, repl, function() return nil, true end },   {L\"ab**\",   3, 2} },\r\n    { {subj, patt, repl, function() return true, true end },  {L\"***\",    3, 3} },\r\n    { {subj, patt, repl, function() return nil, 0 end },      {L\"abcdef\", 1, 0} },\r\n    { {subj, patt, repl, function() return true, 0 end },     {L\"*cdef\",  1, 1} },\r\n    { {subj, patt, repl, function() return nil, 1 end },      {L\"ab*ef\",  2, 1} },\r\n    { {subj, patt, repl, function() return true, 1 end },     {L\"**ef\",   2, 2} },\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local subj, patt, repl = L\"abcdef\", L\"..\", L\"*\"",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function (subj, pattern, repl, n)\r\n      return lib.wnew (pattern) : wgsub (subj, repl, n)\r\n    end",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 76,
    "text": "function() return nil end",
    "type": "function"
  }, {
    "id": 77,
    "text": "function() return false end",
    "type": "function"
  }, {
    "id": 78,
    "text": "function() return true end",
    "type": "function"
  }, {
    "id": 79,
    "text": "function() return {} end",
    "type": "function"
  }, {
    "id": 80,
    "text": "function() return L\"#\" end",
    "type": "function"
  }, {
    "id": 81,
    "text": "function() return 57 end",
    "type": "function"
  }, {
    "id": 82,
    "text": "function (from) return from end",
    "type": "function"
  }, {
    "id": 83,
    "text": "function (from, to) return to end",
    "type": "function"
  }, {
    "id": 84,
    "text": "function (from,to,rep) return rep end",
    "type": "function"
  }, {
    "id": 85,
    "text": "function (from, to, rep) return rep..to..from end",
    "type": "function"
  }, {
    "id": 86,
    "text": "function() return nil end",
    "type": "function"
  }, {
    "id": 87,
    "text": "function() return nil, nil end",
    "type": "function"
  }, {
    "id": 88,
    "text": "function() return nil, false end",
    "type": "function"
  }, {
    "id": 89,
    "text": "function() return nil, true end",
    "type": "function"
  }, {
    "id": 90,
    "text": "function() return true, true end",
    "type": "function"
  }, {
    "id": 91,
    "text": "function() return nil, 0 end",
    "type": "function"
  }, {
    "id": 92,
    "text": "function() return true, 0 end",
    "type": "function"
  }, {
    "id": 93,
    "text": "function() return nil, 1 end",
    "type": "function"
  }, {
    "id": 94,
    "text": "function() return true, 1 end",
    "type": "function"
  }, {
    "id": 95,
    "text": "function (libname)\r\n  local lib = require (libname)\r\n  lib.new = lib.wnew\r\n  return {\r\n    set_f_wgmatch    (lib),\r\n    set_f_wsplit     (lib),\r\n    set_f_wfind      (lib),\r\n    set_f_wmatch     (lib),\r\n    set_m_wexec      (lib),\r\n    set_m_waexec     (lib),\r\n    set_m_wtfind     (lib),\r\n    set_m_watfind    (lib),\r\n    set_m_wfind      (lib),\r\n    set_m_wmatch     (lib),\r\n    set_f_wgsub1     (lib),\r\n    set_f_wgsub2     (lib),\r\n    set_f_wgsub3     (lib),\r\n    set_f_wgsub4     (lib),\r\n    set_f_wgsub5     (lib),\r\n    set_f_wgsub6     (lib),\r\n    set_f_wgsub8     (lib),\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "local lib = require (libname)",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "lib.new = lib.wnew",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "",
    "type": "function container"
  }, {
    "id": 100,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 101,
    "text": "wnew",
    "type": "global function"
  }, {
    "id": 102,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 103,
    "text": "wsplit",
    "type": "global function"
  }, {
    "id": 104,
    "text": "wgmatch",
    "type": "global function"
  }, {
    "id": 105,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 106,
    "text": "require",
    "type": "global function"
  }, {
    "id": 107,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 108,
    "text": "(libname)",
    "type": "module"
  }, {
    "id": 109,
    "text": "",
    "type": "variable container"
  }, {
    "id": 110,
    "text": "",
    "type": "require container"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "interface container"
  }, {
    "id": 118,
    "text": "",
    "type": "interface"
  } ]
}