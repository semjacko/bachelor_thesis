{
  "_filename": "dump.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luajit/src/jit/dump.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 24
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 15,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 35,
    "label": "has",
    "to": 44
  }, {
    "from": 35,
    "label": "has",
    "to": 45
  }, {
    "from": 35,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 35,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 7
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 7
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 7
  }, {
    "from": 61,
    "label": "has",
    "to": 7
  }, {
    "from": 61,
    "label": "has",
    "to": 7
  }, {
    "from": 61,
    "label": "has",
    "to": 7
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 7
  }, {
    "from": 64,
    "label": "has",
    "to": 7
  }, {
    "from": 64,
    "label": "has",
    "to": 7
  }, {
    "from": 64,
    "label": "has",
    "to": 7
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 72,
    "label": "has",
    "to": 84
  }, {
    "from": 72,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 72,
    "label": "has",
    "to": 87
  }, {
    "from": 68,
    "label": "has",
    "to": 88
  }, {
    "from": 68,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 68,
    "label": "has",
    "to": 7
  }, {
    "from": 68,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 105
  }, {
    "from": 92,
    "label": "has",
    "to": 106
  }, {
    "from": 92,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 108,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 7
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 7
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 7
  }, {
    "from": 116,
    "label": "has",
    "to": 7
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 122,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 122,
    "label": "has",
    "to": 7
  }, {
    "from": 122,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 125
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 133,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 36
  }, {
    "from": 145,
    "label": "has",
    "to": 37
  }, {
    "from": 145,
    "label": "has",
    "to": 7
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 145,
    "label": "has",
    "to": 150
  }, {
    "from": 145,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 145,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 114
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 155,
    "label": "has",
    "to": 163
  }, {
    "from": 155,
    "label": "has",
    "to": 164
  }, {
    "from": 155,
    "label": "has",
    "to": 165
  }, {
    "from": 155,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 166,
    "label": "has",
    "to": 170
  }, {
    "from": 166,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 166,
    "label": "has",
    "to": 174
  }, {
    "from": 166,
    "label": "has",
    "to": 175
  }, {
    "from": 166,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 123
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 176,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 139
  }, {
    "from": 176,
    "label": "has",
    "to": 181
  }, {
    "from": 176,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 176,
    "label": "has",
    "to": 184
  }, {
    "from": 176,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 176,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 190,
    "label": "has",
    "to": 193
  }, {
    "from": 188,
    "label": "has",
    "to": 194
  }, {
    "from": 188,
    "label": "has",
    "to": 195
  }, {
    "from": 166,
    "label": "has",
    "to": 196
  }, {
    "from": 145,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 158
  }, {
    "from": 198,
    "label": "has",
    "to": 159
  }, {
    "from": 197,
    "label": "has",
    "to": 114
  }, {
    "from": 145,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 200,
    "label": "has",
    "to": 7
  }, {
    "from": 200,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 210
  }, {
    "from": 207,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 206,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 213,
    "label": "has",
    "to": 219
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 36
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 220,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 213,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 196
  }, {
    "from": 213,
    "label": "has",
    "to": 229
  }, {
    "from": 206,
    "label": "has",
    "to": 230
  }, {
    "from": 206,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 232,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 237,
    "label": "has",
    "to": 241
  }, {
    "from": 237,
    "label": "has",
    "to": 242
  }, {
    "from": 232,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 232,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 232,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 196
  }, {
    "from": 253,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 196
  }, {
    "from": 251,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 196
  }, {
    "from": 260,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 262
  }, {
    "from": 264,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 196
  }, {
    "from": 249,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 267,
    "label": "has",
    "to": 270
  }, {
    "from": 267,
    "label": "has",
    "to": 271
  }, {
    "from": 267,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 267,
    "label": "has",
    "to": 274
  }, {
    "from": 266,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 276,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 7
  }, {
    "from": 276,
    "label": "has",
    "to": 283
  }, {
    "from": 276,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 284,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 276,
    "label": "has",
    "to": 290
  }, {
    "from": 276,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 276,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 276,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 276,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 276,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 276,
    "label": "has",
    "to": 304
  }, {
    "from": 276,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 305,
    "label": "has",
    "to": 308
  }, {
    "from": 305,
    "label": "has",
    "to": 309
  }, {
    "from": 305,
    "label": "has",
    "to": 310
  }, {
    "from": 305,
    "label": "has",
    "to": 311
  }, {
    "from": 305,
    "label": "has",
    "to": 312
  }, {
    "from": 276,
    "label": "has",
    "to": 313
  }, {
    "from": 276,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 315,
    "label": "has",
    "to": 317
  }, {
    "from": 315,
    "label": "has",
    "to": 7
  }, {
    "from": 315,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 317
  }, {
    "from": 319,
    "label": "has",
    "to": 7
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 322,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 322,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 322,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 322,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 322,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 322,
    "label": "has",
    "to": 336
  }, {
    "from": 322,
    "label": "has",
    "to": 7
  }, {
    "from": 322,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 338,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 338,
    "label": "has",
    "to": 344
  }, {
    "from": 338,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 345,
    "label": "has",
    "to": 347
  }, {
    "from": 338,
    "label": "has",
    "to": 336
  }, {
    "from": 338,
    "label": "has",
    "to": 7
  }, {
    "from": 338,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 282
  }, {
    "from": 349,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "calls",
    "to": 15
  }, {
    "from": 35,
    "label": "calls",
    "to": 353
  }, {
    "from": 350,
    "label": "calls",
    "to": 354
  }, {
    "from": 276,
    "label": "calls",
    "to": 354
  }, {
    "from": 350,
    "label": "calls",
    "to": 56
  }, {
    "from": 276,
    "label": "calls",
    "to": 380
  }, {
    "from": 276,
    "label": "calls",
    "to": 380
  }, {
    "from": 2,
    "label": "calls",
    "to": 355
  }, {
    "from": 15,
    "label": "calls",
    "to": 355
  }, {
    "from": 68,
    "label": "calls",
    "to": 355
  }, {
    "from": 68,
    "label": "calls",
    "to": 355
  }, {
    "from": 68,
    "label": "calls",
    "to": 373
  }, {
    "from": 92,
    "label": "calls",
    "to": 373
  }, {
    "from": 92,
    "label": "calls",
    "to": 373
  }, {
    "from": 58,
    "label": "calls",
    "to": 366
  }, {
    "from": 68,
    "label": "calls",
    "to": 366
  }, {
    "from": 232,
    "label": "calls",
    "to": 366
  }, {
    "from": 276,
    "label": "calls",
    "to": 366
  }, {
    "from": 92,
    "label": "calls",
    "to": 372
  }, {
    "from": 122,
    "label": "calls",
    "to": 372
  }, {
    "from": 133,
    "label": "calls",
    "to": 372
  }, {
    "from": 145,
    "label": "calls",
    "to": 372
  }, {
    "from": 116,
    "label": "calls",
    "to": 351
  }, {
    "from": 232,
    "label": "calls",
    "to": 370
  }, {
    "from": 232,
    "label": "calls",
    "to": 375
  }, {
    "from": 68,
    "label": "calls",
    "to": 64
  }, {
    "from": 200,
    "label": "calls",
    "to": 64
  }, {
    "from": 206,
    "label": "calls",
    "to": 64
  }, {
    "from": 206,
    "label": "calls",
    "to": 64
  }, {
    "from": 232,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 371
  }, {
    "from": 2,
    "label": "calls",
    "to": 371
  }, {
    "from": 2,
    "label": "calls",
    "to": 371
  }, {
    "from": 15,
    "label": "calls",
    "to": 371
  }, {
    "from": 266,
    "label": "calls",
    "to": 352
  }, {
    "from": 266,
    "label": "calls",
    "to": 352
  }, {
    "from": 266,
    "label": "calls",
    "to": 352
  }, {
    "from": 276,
    "label": "calls",
    "to": 352
  }, {
    "from": 276,
    "label": "calls",
    "to": 352
  }, {
    "from": 276,
    "label": "calls",
    "to": 352
  }, {
    "from": 350,
    "label": "calls",
    "to": 357
  }, {
    "from": 35,
    "label": "calls",
    "to": 358
  }, {
    "from": 206,
    "label": "calls",
    "to": 35
  }, {
    "from": 232,
    "label": "calls",
    "to": 359
  }, {
    "from": 232,
    "label": "calls",
    "to": 359
  }, {
    "from": 276,
    "label": "calls",
    "to": 367
  }, {
    "from": 15,
    "label": "calls",
    "to": 360
  }, {
    "from": 350,
    "label": "calls",
    "to": 58
  }, {
    "from": 133,
    "label": "calls",
    "to": 133
  }, {
    "from": 145,
    "label": "calls",
    "to": 133
  }, {
    "from": 122,
    "label": "calls",
    "to": 356
  }, {
    "from": 276,
    "label": "calls",
    "to": 266
  }, {
    "from": 206,
    "label": "calls",
    "to": 200
  }, {
    "from": 145,
    "label": "calls",
    "to": 122
  }, {
    "from": 68,
    "label": "calls",
    "to": 376
  }, {
    "from": 68,
    "label": "calls",
    "to": 376
  }, {
    "from": 133,
    "label": "calls",
    "to": 376
  }, {
    "from": 145,
    "label": "calls",
    "to": 376
  }, {
    "from": 145,
    "label": "calls",
    "to": 376
  }, {
    "from": 232,
    "label": "calls",
    "to": 376
  }, {
    "from": 276,
    "label": "calls",
    "to": 376
  }, {
    "from": 276,
    "label": "calls",
    "to": 376
  }, {
    "from": 15,
    "label": "calls",
    "to": 378
  }, {
    "from": 350,
    "label": "calls",
    "to": 378
  }, {
    "from": 350,
    "label": "calls",
    "to": 378
  }, {
    "from": 350,
    "label": "calls",
    "to": 378
  }, {
    "from": 350,
    "label": "calls",
    "to": 378
  }, {
    "from": 350,
    "label": "calls",
    "to": 374
  }, {
    "from": 350,
    "label": "calls",
    "to": 374
  }, {
    "from": 92,
    "label": "calls",
    "to": 374
  }, {
    "from": 116,
    "label": "calls",
    "to": 374
  }, {
    "from": 133,
    "label": "calls",
    "to": 374
  }, {
    "from": 145,
    "label": "calls",
    "to": 374
  }, {
    "from": 145,
    "label": "calls",
    "to": 374
  }, {
    "from": 108,
    "label": "calls",
    "to": 369
  }, {
    "from": 145,
    "label": "calls",
    "to": 369
  }, {
    "from": 145,
    "label": "calls",
    "to": 369
  }, {
    "from": 92,
    "label": "calls",
    "to": 68
  }, {
    "from": 122,
    "label": "calls",
    "to": 68
  }, {
    "from": 133,
    "label": "calls",
    "to": 68
  }, {
    "from": 133,
    "label": "calls",
    "to": 68
  }, {
    "from": 145,
    "label": "calls",
    "to": 68
  }, {
    "from": 145,
    "label": "calls",
    "to": 68
  }, {
    "from": 145,
    "label": "calls",
    "to": 68
  }, {
    "from": 56,
    "label": "calls",
    "to": 365
  }, {
    "from": 58,
    "label": "calls",
    "to": 365
  }, {
    "from": 61,
    "label": "calls",
    "to": 365
  }, {
    "from": 64,
    "label": "calls",
    "to": 365
  }, {
    "from": 68,
    "label": "calls",
    "to": 365
  }, {
    "from": 68,
    "label": "calls",
    "to": 365
  }, {
    "from": 68,
    "label": "calls",
    "to": 365
  }, {
    "from": 68,
    "label": "calls",
    "to": 365
  }, {
    "from": 68,
    "label": "calls",
    "to": 365
  }, {
    "from": 68,
    "label": "calls",
    "to": 365
  }, {
    "from": 68,
    "label": "calls",
    "to": 365
  }, {
    "from": 92,
    "label": "calls",
    "to": 365
  }, {
    "from": 92,
    "label": "calls",
    "to": 365
  }, {
    "from": 108,
    "label": "calls",
    "to": 365
  }, {
    "from": 116,
    "label": "calls",
    "to": 365
  }, {
    "from": 116,
    "label": "calls",
    "to": 365
  }, {
    "from": 122,
    "label": "calls",
    "to": 365
  }, {
    "from": 122,
    "label": "calls",
    "to": 365
  }, {
    "from": 133,
    "label": "calls",
    "to": 365
  }, {
    "from": 133,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 145,
    "label": "calls",
    "to": 365
  }, {
    "from": 200,
    "label": "calls",
    "to": 365
  }, {
    "from": 249,
    "label": "calls",
    "to": 365
  }, {
    "from": 249,
    "label": "calls",
    "to": 365
  }, {
    "from": 249,
    "label": "calls",
    "to": 365
  }, {
    "from": 249,
    "label": "calls",
    "to": 365
  }, {
    "from": 64,
    "label": "calls",
    "to": 361
  }, {
    "from": 35,
    "label": "calls",
    "to": 368
  }, {
    "from": 145,
    "label": "calls",
    "to": 368
  }, {
    "from": 206,
    "label": "calls",
    "to": 368
  }, {
    "from": 68,
    "label": "calls",
    "to": 377
  }, {
    "from": 122,
    "label": "calls",
    "to": 377
  }, {
    "from": 206,
    "label": "calls",
    "to": 145
  }, {
    "from": 206,
    "label": "calls",
    "to": 108
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 108,
    "label": "calls",
    "to": 92
  }, {
    "from": 145,
    "label": "calls",
    "to": 92
  }, {
    "from": 145,
    "label": "calls",
    "to": 92
  }, {
    "from": 61,
    "label": "calls",
    "to": 362
  }, {
    "from": 68,
    "label": "calls",
    "to": 363
  }, {
    "from": 200,
    "label": "calls",
    "to": 363
  }, {
    "from": 200,
    "label": "calls",
    "to": 363
  }, {
    "from": 350,
    "label": "calls",
    "to": 379
  }, {
    "from": 350,
    "label": "calls",
    "to": 379
  }, {
    "from": 350,
    "label": "calls",
    "to": 379
  }, {
    "from": 350,
    "label": "calls",
    "to": 379
  }, {
    "from": 35,
    "label": "calls",
    "to": 379
  }, {
    "from": 116,
    "label": "calls",
    "to": 379
  }, {
    "from": 276,
    "label": "calls",
    "to": 379
  }, {
    "from": 145,
    "label": "calls",
    "to": 116
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 350,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 116,
    "label": "calls",
    "to": 364
  }, {
    "from": 122,
    "label": "calls",
    "to": 364
  }, {
    "from": 145,
    "label": "calls",
    "to": 364
  }, {
    "from": 145,
    "label": "calls",
    "to": 364
  }, {
    "from": 145,
    "label": "calls",
    "to": 364
  }, {
    "from": 145,
    "label": "calls",
    "to": 364
  }, {
    "from": 145,
    "label": "calls",
    "to": 364
  }, {
    "from": 145,
    "label": "calls",
    "to": 364
  }, {
    "from": 232,
    "label": "calls",
    "to": 364
  }, {
    "from": 1,
    "label": "contains",
    "to": 350
  }, {
    "from": 350,
    "label": "declares",
    "to": 2
  }, {
    "from": 350,
    "label": "declares",
    "to": 15
  }, {
    "from": 350,
    "label": "declares",
    "to": 32
  }, {
    "from": 350,
    "label": "declares",
    "to": 35
  }, {
    "from": 350,
    "label": "declares",
    "to": 54
  }, {
    "from": 350,
    "label": "declares",
    "to": 56
  }, {
    "from": 350,
    "label": "declares",
    "to": 58
  }, {
    "from": 350,
    "label": "declares",
    "to": 61
  }, {
    "from": 350,
    "label": "declares",
    "to": 64
  }, {
    "from": 350,
    "label": "declares",
    "to": 68
  }, {
    "from": 350,
    "label": "declares",
    "to": 92
  }, {
    "from": 350,
    "label": "declares",
    "to": 108
  }, {
    "from": 350,
    "label": "declares",
    "to": 116
  }, {
    "from": 350,
    "label": "declares",
    "to": 122
  }, {
    "from": 350,
    "label": "declares",
    "to": 133
  }, {
    "from": 350,
    "label": "declares",
    "to": 145
  }, {
    "from": 350,
    "label": "declares",
    "to": 200
  }, {
    "from": 350,
    "label": "declares",
    "to": 206
  }, {
    "from": 350,
    "label": "declares",
    "to": 232
  }, {
    "from": 350,
    "label": "declares",
    "to": 249
  }, {
    "from": 350,
    "label": "declares",
    "to": 266
  }, {
    "from": 350,
    "label": "declares",
    "to": 276
  }, {
    "from": 350,
    "label": "declares",
    "to": 315
  }, {
    "from": 350,
    "label": "declares",
    "to": 319
  }, {
    "from": 350,
    "label": "declares",
    "to": 322
  }, {
    "from": 350,
    "label": "declares",
    "to": 338
  }, {
    "from": 350,
    "label": "declares",
    "to": 349
  }, {
    "from": 1,
    "label": "contains",
    "to": 385
  }, {
    "from": 1,
    "label": "contains",
    "to": 386
  }, {
    "from": 385,
    "label": "initializes",
    "to": 387
  }, {
    "from": 387,
    "label": "assigns",
    "to": 388
  }, {
    "from": 385,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "assigns",
    "to": 390
  }, {
    "from": 385,
    "label": "initializes",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 385,
    "label": "initializes",
    "to": 393
  }, {
    "from": 393,
    "label": "assigns",
    "to": 394
  }, {
    "from": 385,
    "label": "initializes",
    "to": 395
  }, {
    "from": 395,
    "label": "assigns",
    "to": 396
  }, {
    "from": 385,
    "label": "initializes",
    "to": 397
  }, {
    "from": 397,
    "label": "assigns",
    "to": 398
  }, {
    "from": 385,
    "label": "initializes",
    "to": 399
  }, {
    "from": 399,
    "label": "assigns",
    "to": 400
  }, {
    "from": 385,
    "label": "initializes",
    "to": 401
  }, {
    "from": 401,
    "label": "assigns",
    "to": 402
  }, {
    "from": 385,
    "label": "initializes",
    "to": 403
  }, {
    "from": 403,
    "label": "assigns",
    "to": 404
  }, {
    "from": 385,
    "label": "initializes",
    "to": 405
  }, {
    "from": 405,
    "label": "assigns",
    "to": 406
  }, {
    "from": 385,
    "label": "initializes",
    "to": 407
  }, {
    "from": 407,
    "label": "assigns",
    "to": 408
  }, {
    "from": 385,
    "label": "initializes",
    "to": 409
  }, {
    "from": 409,
    "label": "assigns",
    "to": 410
  }, {
    "from": 385,
    "label": "initializes",
    "to": 411
  }, {
    "from": 411,
    "label": "assigns",
    "to": 412
  }, {
    "from": 385,
    "label": "initializes",
    "to": 413
  }, {
    "from": 413,
    "label": "assigns",
    "to": 414
  }, {
    "from": 385,
    "label": "initializes",
    "to": 415
  }, {
    "from": 415,
    "label": "assigns",
    "to": 416
  }, {
    "from": 385,
    "label": "initializes",
    "to": 417
  }, {
    "from": 417,
    "label": "assigns",
    "to": 418
  }, {
    "from": 385,
    "label": "initializes",
    "to": 419
  }, {
    "from": 419,
    "label": "assigns",
    "to": 420
  }, {
    "from": 385,
    "label": "initializes",
    "to": 421
  }, {
    "from": 421,
    "label": "assigns",
    "to": 422
  }, {
    "from": 385,
    "label": "initializes",
    "to": 423
  }, {
    "from": 423,
    "label": "assigns",
    "to": 424
  }, {
    "from": 385,
    "label": "initializes",
    "to": 425
  }, {
    "from": 425,
    "label": "assigns",
    "to": 426
  }, {
    "from": 385,
    "label": "initializes",
    "to": 427
  }, {
    "from": 427,
    "label": "assigns",
    "to": 428
  }, {
    "from": 385,
    "label": "initializes",
    "to": 429
  }, {
    "from": 429,
    "label": "assigns",
    "to": 430
  }, {
    "from": 385,
    "label": "initializes",
    "to": 431
  }, {
    "from": 385,
    "label": "initializes",
    "to": 432
  }, {
    "from": 385,
    "label": "initializes",
    "to": 433
  }, {
    "from": 385,
    "label": "initializes",
    "to": 434
  }, {
    "from": 385,
    "label": "initializes",
    "to": 435
  }, {
    "from": 385,
    "label": "initializes",
    "to": 436
  }, {
    "from": 436,
    "label": "assigns",
    "to": 437
  }, {
    "from": 437,
    "label": "assigns",
    "to": 438
  }, {
    "from": 438,
    "label": "assigns",
    "to": 439
  }, {
    "from": 385,
    "label": "initializes",
    "to": 440
  }, {
    "from": 440,
    "label": "assigns",
    "to": 441
  }, {
    "from": 385,
    "label": "initializes",
    "to": 442
  }, {
    "from": 442,
    "label": "assigns",
    "to": 443
  }, {
    "from": 385,
    "label": "initializes",
    "to": 444
  }, {
    "from": 444,
    "label": "assigns",
    "to": 445
  }, {
    "from": 445,
    "label": "assigns",
    "to": 446
  }, {
    "from": 446,
    "label": "assigns",
    "to": 447
  }, {
    "from": 445,
    "label": "assigns",
    "to": 448
  }, {
    "from": 445,
    "label": "assigns",
    "to": 449
  }, {
    "from": 445,
    "label": "assigns",
    "to": 450
  }, {
    "from": 445,
    "label": "assigns",
    "to": 451
  }, {
    "from": 445,
    "label": "assigns",
    "to": 452
  }, {
    "from": 445,
    "label": "assigns",
    "to": 453
  }, {
    "from": 445,
    "label": "assigns",
    "to": 454
  }, {
    "from": 445,
    "label": "assigns",
    "to": 455
  }, {
    "from": 445,
    "label": "assigns",
    "to": 456
  }, {
    "from": 445,
    "label": "assigns",
    "to": 457
  }, {
    "from": 445,
    "label": "assigns",
    "to": 458
  }, {
    "from": 445,
    "label": "assigns",
    "to": 459
  }, {
    "from": 445,
    "label": "assigns",
    "to": 460
  }, {
    "from": 445,
    "label": "assigns",
    "to": 461
  }, {
    "from": 445,
    "label": "assigns",
    "to": 462
  }, {
    "from": 445,
    "label": "assigns",
    "to": 463
  }, {
    "from": 445,
    "label": "assigns",
    "to": 464
  }, {
    "from": 445,
    "label": "assigns",
    "to": 465
  }, {
    "from": 445,
    "label": "assigns",
    "to": 466
  }, {
    "from": 445,
    "label": "assigns",
    "to": 467
  }, {
    "from": 445,
    "label": "assigns",
    "to": 468
  }, {
    "from": 445,
    "label": "assigns",
    "to": 469
  }, {
    "from": 445,
    "label": "assigns",
    "to": 470
  }, {
    "from": 385,
    "label": "initializes",
    "to": 471
  }, {
    "from": 471,
    "label": "assigns",
    "to": 472
  }, {
    "from": 472,
    "label": "assigns",
    "to": 473
  }, {
    "from": 473,
    "label": "assigns",
    "to": 474
  }, {
    "from": 472,
    "label": "assigns",
    "to": 475
  }, {
    "from": 472,
    "label": "assigns",
    "to": 476
  }, {
    "from": 472,
    "label": "assigns",
    "to": 477
  }, {
    "from": 472,
    "label": "assigns",
    "to": 478
  }, {
    "from": 472,
    "label": "assigns",
    "to": 479
  }, {
    "from": 472,
    "label": "assigns",
    "to": 480
  }, {
    "from": 472,
    "label": "assigns",
    "to": 481
  }, {
    "from": 472,
    "label": "assigns",
    "to": 482
  }, {
    "from": 472,
    "label": "assigns",
    "to": 483
  }, {
    "from": 472,
    "label": "assigns",
    "to": 484
  }, {
    "from": 472,
    "label": "assigns",
    "to": 485
  }, {
    "from": 472,
    "label": "assigns",
    "to": 486
  }, {
    "from": 472,
    "label": "assigns",
    "to": 487
  }, {
    "from": 472,
    "label": "assigns",
    "to": 488
  }, {
    "from": 472,
    "label": "assigns",
    "to": 489
  }, {
    "from": 472,
    "label": "assigns",
    "to": 490
  }, {
    "from": 472,
    "label": "assigns",
    "to": 491
  }, {
    "from": 472,
    "label": "assigns",
    "to": 492
  }, {
    "from": 472,
    "label": "assigns",
    "to": 493
  }, {
    "from": 472,
    "label": "assigns",
    "to": 494
  }, {
    "from": 472,
    "label": "assigns",
    "to": 495
  }, {
    "from": 472,
    "label": "assigns",
    "to": 496
  }, {
    "from": 472,
    "label": "assigns",
    "to": 497
  }, {
    "from": 385,
    "label": "initializes",
    "to": 498
  }, {
    "from": 498,
    "label": "assigns",
    "to": 499
  }, {
    "from": 385,
    "label": "initializes",
    "to": 500
  }, {
    "from": 500,
    "label": "assigns",
    "to": 501
  }, {
    "from": 501,
    "label": "assigns",
    "to": 502
  }, {
    "from": 502,
    "label": "assigns",
    "to": 503
  }, {
    "from": 501,
    "label": "assigns",
    "to": 504
  }, {
    "from": 504,
    "label": "assigns",
    "to": 505
  }, {
    "from": 501,
    "label": "assigns",
    "to": 506
  }, {
    "from": 506,
    "label": "assigns",
    "to": 507
  }, {
    "from": 385,
    "label": "initializes",
    "to": 508
  }, {
    "from": 508,
    "label": "assigns",
    "to": 509
  }, {
    "from": 385,
    "label": "initializes",
    "to": 510
  }, {
    "from": 510,
    "label": "assigns",
    "to": 511
  }, {
    "from": 385,
    "label": "initializes",
    "to": 512
  }, {
    "from": 385,
    "label": "initializes",
    "to": 513
  }, {
    "from": 385,
    "label": "initializes",
    "to": 514
  }, {
    "from": 514,
    "label": "assigns",
    "to": 515
  }, {
    "from": 515,
    "label": "assigns",
    "to": 516
  }, {
    "from": 516,
    "label": "assigns",
    "to": 517
  }, {
    "from": 515,
    "label": "assigns",
    "to": 518
  }, {
    "from": 518,
    "label": "assigns",
    "to": 519
  }, {
    "from": 515,
    "label": "assigns",
    "to": 520
  }, {
    "from": 520,
    "label": "assigns",
    "to": 521
  }, {
    "from": 515,
    "label": "assigns",
    "to": 522
  }, {
    "from": 522,
    "label": "assigns",
    "to": 523
  }, {
    "from": 515,
    "label": "assigns",
    "to": 524
  }, {
    "from": 524,
    "label": "assigns",
    "to": 525
  }, {
    "from": 515,
    "label": "assigns",
    "to": 526
  }, {
    "from": 526,
    "label": "assigns",
    "to": 527
  }, {
    "from": 385,
    "label": "initializes",
    "to": 528
  }, {
    "from": 528,
    "label": "assigns",
    "to": 529
  }, {
    "from": 385,
    "label": "initializes",
    "to": 530
  }, {
    "from": 530,
    "label": "assigns",
    "to": 531
  }, {
    "from": 385,
    "label": "initializes",
    "to": 532
  }, {
    "from": 532,
    "label": "assigns",
    "to": 533
  }, {
    "from": 385,
    "label": "initializes",
    "to": 534
  }, {
    "from": 534,
    "label": "assigns",
    "to": 535
  }, {
    "from": 385,
    "label": "initializes",
    "to": 536
  }, {
    "from": 536,
    "label": "assigns",
    "to": 537
  }, {
    "from": 386,
    "label": "initializes",
    "to": 538
  }, {
    "from": 538,
    "label": "requires",
    "to": 382
  }, {
    "from": 386,
    "label": "initializes",
    "to": 539
  }, {
    "from": 539,
    "label": "requires",
    "to": 383
  }, {
    "from": 386,
    "label": "initializes",
    "to": 540
  }, {
    "from": 540,
    "label": "requires",
    "to": 384
  }, {
    "from": 386,
    "label": "initializes",
    "to": 541
  }, {
    "from": 541,
    "label": "requires",
    "to": 381
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dump",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function fillsymtab_tr(tr, nexit)\r\n  local t = {}\r\n  symtabmt.__index = t\r\n  if jit.arch == \"mips\" or jit.arch == \"mipsel\" then\r\n    t[traceexitstub(tr, 0)] = \"exit\"\r\n    return\r\n  end\r\n  for i=0,nexit-1 do\r\n    local addr = traceexitstub(tr, i)\r\n    t[addr] = tostring(i)\r\n  end\r\n  local addr = traceexitstub(tr, nexit)\r\n  if addr then t[addr] = \"stack_check\" end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "symtabmt.__index = t",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "if jit.arch == \"mips\" or jit.arch == \"mipsel\" then\r\n    t[traceexitstub(tr, 0)] = \"exit\"\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "t[traceexitstub(tr, 0)] = \"exit\"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "for i=0,nexit-1 do\r\n    local addr = traceexitstub(tr, i)\r\n    t[addr] = tostring(i)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 9,
    "text": "local addr = traceexitstub(tr, i)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "t[addr] = tostring(i)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local addr = traceexitstub(tr, nexit)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if addr then t[addr] = \"stack_check\" end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "t[addr] = \"stack_check\"",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function fillsymtab(tr, nexit)\r\n  local t = symtab\r\n  if nexitsym == 0 then\r\n    local ircall = vmdef.ircall\r\n    for i=0,#ircall do\r\n      local addr = ircalladdr(i)\r\n      if addr ~= 0 then t[addr] = ircall[i] end\r\n    end\r\n  end\r\n  if nexitsym == 1000000 then -- Per-trace exit stubs.\r\n    fillsymtab_tr(tr, nexit)\r\n  elseif nexit > nexitsym then -- Shared exit stubs.\r\n    for i=nexitsym,nexit-1 do\r\n      local addr = traceexitstub(i)\r\n      if addr == nil then -- Fall back to per-trace exit stubs.\r\n\tfillsymtab_tr(tr, nexit)\r\n\tsetmetatable(symtab, symtabmt)\r\n\tnexit = 1000000\r\n\tbreak\r\n      end\r\n      t[addr] = tostring(i)\r\n    end\r\n    nexitsym = nexit\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local t = symtab",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if nexitsym == 0 then\r\n    local ircall = vmdef.ircall\r\n    for i=0,#ircall do\r\n      local addr = ircalladdr(i)\r\n      if addr ~= 0 then t[addr] = ircall[i] end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "local ircall = vmdef.ircall",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "for i=0,#ircall do\r\n      local addr = ircalladdr(i)\r\n      if addr ~= 0 then t[addr] = ircall[i] end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 20,
    "text": "local addr = ircalladdr(i)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if addr ~= 0 then t[addr] = ircall[i] end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "t[addr] = ircall[i]",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if nexitsym == 1000000 then -- Per-trace exit stubs.\r\n    fillsymtab_tr(tr, nexit)\r\n  elseif nexit > nexitsym then -- Shared exit stubs.\r\n    for i=nexitsym,nexit-1 do\r\n      local addr = traceexitstub(i)\r\n      if addr == nil then -- Fall back to per-trace exit stubs.\r\n\tfillsymtab_tr(tr, nexit)\r\n\tsetmetatable(symtab, symtabmt)\r\n\tnexit = 1000000\r\n\tbreak\r\n      end\r\n      t[addr] = tostring(i)\r\n    end\r\n    nexitsym = nexit\r\n  end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "fillsymtab_tr(tr, nexit)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "for i=nexitsym,nexit-1 do\r\n      local addr = traceexitstub(i)\r\n      if addr == nil then -- Fall back to per-trace exit stubs.\r\n\tfillsymtab_tr(tr, nexit)\r\n\tsetmetatable(symtab, symtabmt)\r\n\tnexit = 1000000\r\n\tbreak\r\n      end\r\n      t[addr] = tostring(i)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 26,
    "text": "local addr = traceexitstub(i)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if addr == nil then -- Fall back to per-trace exit stubs.\r\n\tfillsymtab_tr(tr, nexit)\r\n\tsetmetatable(symtab, symtabmt)\r\n\tnexit = 1000000\r\n\tbreak\r\n      end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "setmetatable(symtab, symtabmt)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "nexit = 1000000",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "nexitsym = nexit",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function dumpwrite(s)\r\n  out:write(s)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "out:write(s)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function dump_mcode(tr)\r\n  local info = traceinfo(tr)\r\n  if not info then return end\r\n  local mcode, addr, loop = tracemc(tr)\r\n  if not mcode then return end\r\n  if not disass then disass = require(\"jit.dis_\"..jit.arch) end\r\n  out:write(\"---- TRACE \", tr, \" mcode \", #mcode, \"\\n\")\r\n  local ctx = disass.create(mcode, addr, dumpwrite)\r\n  ctx.hexdump = 0\r\n  ctx.symtab = fillsymtab(tr, info.nexit)\r\n  if loop ~= 0 then\r\n    symtab[addr+loop] = \"LOOP\"\r\n    ctx:disass(0, loop)\r\n    out:write(\"->LOOP:\\n\")\r\n    ctx:disass(loop, #mcode-loop)\r\n    symtab[addr+loop] = nil\r\n  else\r\n    ctx:disass(0, #mcode)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local info = traceinfo(tr)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if not info then return end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "local mcode, addr, loop = tracemc(tr)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if not mcode then return end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "if not disass then disass = require(\"jit.dis_\"..jit.arch) end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "disass = require(\"jit.dis_\"..jit.arch)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "out:write(\"---- TRACE \", tr, \" mcode \", #mcode, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local ctx = disass.create(mcode, addr, dumpwrite)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "ctx.hexdump = 0",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "ctx.symtab = fillsymtab(tr, info.nexit)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "if loop ~= 0 then\r\n    symtab[addr+loop] = \"LOOP\"\r\n    ctx:disass(0, loop)\r\n    out:write(\"->LOOP:\\n\")\r\n    ctx:disass(loop, #mcode-loop)\r\n    symtab[addr+loop] = nil\r\n  else\r\n    ctx:disass(0, #mcode)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "symtab[addr+loop] = \"LOOP\"",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "ctx:disass(0, loop)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "out:write(\"->LOOP:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "ctx:disass(loop, #mcode-loop)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "symtab[addr+loop] = nil",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "ctx:disass(0, #mcode)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function colorize_text(s, t)\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function colorize_ansi(s, t)\r\n  return format(colortype_ansi[t], s)\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function colorize_html(s, t)\r\n  s = gsub(s, \"[<>&]\", html_escape)\r\n  return format('<span class=\"irt_%s\">%s</span>', irtype_text[t], s)\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "s = gsub(s, \"[<>&]\", html_escape)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function ctlsub(c)\r\n  if c == \"\\n\" then return \"\\\\n\"\r\n  elseif c == \"\\r\" then return \"\\\\r\"\r\n  elseif c == \"\\t\" then return \"\\\\t\"\r\n  else return format(\"\\\\%03d\", byte(c))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "if c == \"\\n\" then return \"\\\\n\"\r\n  elseif c == \"\\r\" then return \"\\\\r\"\r\n  elseif c == \"\\t\" then return \"\\\\t\"\r\n  else return format(\"\\\\%03d\", byte(c))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "local function fmtfunc(func, pc)\r\n  local fi = funcinfo(func, pc)\r\n  if fi.loc then\r\n    return fi.loc\r\n  elseif fi.ffid then\r\n    return vmdef.ffnames[fi.ffid]\r\n  elseif fi.addr then\r\n    return format(\"C:%x\", fi.addr)\r\n  else\r\n    return \"(?)\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local fi = funcinfo(func, pc)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if fi.loc then\r\n    return fi.loc\r\n  elseif fi.ffid then\r\n    return vmdef.ffnames[fi.ffid]\r\n  elseif fi.addr then\r\n    return format(\"C:%x\", fi.addr)\r\n  else\r\n    return \"(?)\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function formatk(tr, idx)\r\n  local k, t, slot = tracek(tr, idx)\r\n  local tn = type(k)\r\n  local s\r\n  if tn == \"number\" then\r\n    if k == 2^52+2^51 then\r\n      s = \"bias\"\r\n    else\r\n      s = format(\"%+.14g\", k)\r\n    end\r\n  elseif tn == \"string\" then\r\n    s = format(#k > 20 and '\"%.20s\"~' or '\"%s\"', gsub(k, \"%c\", ctlsub))\r\n  elseif tn == \"function\" then\r\n    s = fmtfunc(k)\r\n  elseif tn == \"table\" then\r\n    s = format(\"{%p}\", k)\r\n  elseif tn == \"userdata\" then\r\n    if t == 12 then\r\n      s = format(\"userdata:%p\", k)\r\n    else\r\n      s = format(\"[%p]\", k)\r\n      if s == \"[0x00000000]\" then s = \"NULL\" end\r\n    end\r\n  elseif t == 21 then -- int64_t\r\n    s = sub(tostring(k), 1, -3)\r\n    if sub(s, 1, 1) ~= \"-\" then s = \"+\"..s end\r\n  else\r\n    s = tostring(k) -- For primitives.\r\n  end\r\n  s = colorize(format(\"%-4s\", s), t)\r\n  if slot then\r\n    s = format(\"%s @%d\", s, slot)\r\n  end\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local k, t, slot = tracek(tr, idx)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local tn = type(k)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if tn == \"number\" then\r\n    if k == 2^52+2^51 then\r\n      s = \"bias\"\r\n    else\r\n      s = format(\"%+.14g\", k)\r\n    end\r\n  elseif tn == \"string\" then\r\n    s = format(#k > 20 and '\"%.20s\"~' or '\"%s\"', gsub(k, \"%c\", ctlsub))\r\n  elseif tn == \"function\" then\r\n    s = fmtfunc(k)\r\n  elseif tn == \"table\" then\r\n    s = format(\"{%p}\", k)\r\n  elseif tn == \"userdata\" then\r\n    if t == 12 then\r\n      s = format(\"userdata:%p\", k)\r\n    else\r\n      s = format(\"[%p]\", k)\r\n      if s == \"[0x00000000]\" then s = \"NULL\" end\r\n    end\r\n  elseif t == 21 then -- int64_t\r\n    s = sub(tostring(k), 1, -3)\r\n    if sub(s, 1, 1) ~= \"-\" then s = \"+\"..s end\r\n  else\r\n    s = tostring(k) -- For primitives.\r\n  end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "if k == 2^52+2^51 then\r\n      s = \"bias\"\r\n    else\r\n      s = format(\"%+.14g\", k)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "s = \"bias\"",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "s = format(\"%+.14g\", k)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "s = format(#k > 20 and '\"%.20s\"~' or '\"%s\"', gsub(k, \"%c\", ctlsub))",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "s = fmtfunc(k)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "s = format(\"{%p}\", k)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if t == 12 then\r\n      s = format(\"userdata:%p\", k)\r\n    else\r\n      s = format(\"[%p]\", k)\r\n      if s == \"[0x00000000]\" then s = \"NULL\" end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "s = format(\"userdata:%p\", k)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "s = format(\"[%p]\", k)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if s == \"[0x00000000]\" then s = \"NULL\" end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "s = \"NULL\"",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "s = sub(tostring(k), 1, -3)",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if sub(s, 1, 1) ~= \"-\" then s = \"+\"..s end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "s = \"+\"..s",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "s = tostring(k)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "s = colorize(format(\"%-4s\", s), t)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if slot then\r\n    s = format(\"%s @%d\", s, slot)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "s = format(\"%s @%d\", s, slot)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "local function printsnap(tr, snap)\r\n  local n = 2\r\n  for s=0,snap[1]-1 do\r\n    local sn = snap[n]\r\n    if shr(sn, 24) == s then\r\n      n = n + 1\r\n      local ref = band(sn, 0xffff) - 0x8000 -- REF_BIAS\r\n      if ref < 0 then\r\n\tout:write(formatk(tr, ref))\r\n      elseif band(sn, 0x80000) ~= 0 then -- SNAP_SOFTFPNUM\r\n\tout:write(colorize(format(\"%04d/%04d\", ref, ref+1), 14))\r\n      else\r\n\tlocal m, ot, op1, op2 = traceir(tr, ref)\r\n\tout:write(colorize(format(\"%04d\", ref), band(ot, 31)))\r\n      end\r\n      out:write(band(sn, 0x10000) == 0 and \" \" or \"|\") -- SNAP_FRAME\r\n    else\r\n      out:write(\"---- \")\r\n    end\r\n  end\r\n  out:write(\"]\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "local n = 2",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "for s=0,snap[1]-1 do\r\n    local sn = snap[n]\r\n    if shr(sn, 24) == s then\r\n      n = n + 1\r\n      local ref = band(sn, 0xffff) - 0x8000 -- REF_BIAS\r\n      if ref < 0 then\r\n\tout:write(formatk(tr, ref))\r\n      elseif band(sn, 0x80000) ~= 0 then -- SNAP_SOFTFPNUM\r\n\tout:write(colorize(format(\"%04d/%04d\", ref, ref+1), 14))\r\n      else\r\n\tlocal m, ot, op1, op2 = traceir(tr, ref)\r\n\tout:write(colorize(format(\"%04d\", ref), band(ot, 31)))\r\n      end\r\n      out:write(band(sn, 0x10000) == 0 and \" \" or \"|\") -- SNAP_FRAME\r\n    else\r\n      out:write(\"---- \")\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 95,
    "text": "local sn = snap[n]",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if shr(sn, 24) == s then\r\n      n = n + 1\r\n      local ref = band(sn, 0xffff) - 0x8000 -- REF_BIAS\r\n      if ref < 0 then\r\n\tout:write(formatk(tr, ref))\r\n      elseif band(sn, 0x80000) ~= 0 then -- SNAP_SOFTFPNUM\r\n\tout:write(colorize(format(\"%04d/%04d\", ref, ref+1), 14))\r\n      else\r\n\tlocal m, ot, op1, op2 = traceir(tr, ref)\r\n\tout:write(colorize(format(\"%04d\", ref), band(ot, 31)))\r\n      end\r\n      out:write(band(sn, 0x10000) == 0 and \" \" or \"|\") -- SNAP_FRAME\r\n    else\r\n      out:write(\"---- \")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "local ref = band(sn, 0xffff) - 0x8000",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "if ref < 0 then\r\n\tout:write(formatk(tr, ref))\r\n      elseif band(sn, 0x80000) ~= 0 then -- SNAP_SOFTFPNUM\r\n\tout:write(colorize(format(\"%04d/%04d\", ref, ref+1), 14))\r\n      else\r\n\tlocal m, ot, op1, op2 = traceir(tr, ref)\r\n\tout:write(colorize(format(\"%04d\", ref), band(ot, 31)))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "out:write(formatk(tr, ref))",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "out:write(colorize(format(\"%04d/%04d\", ref, ref+1), 14))",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "local m, ot, op1, op2 = traceir(tr, ref)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "out:write(colorize(format(\"%04d\", ref), band(ot, 31)))",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "out:write(band(sn, 0x10000) == 0 and \" \" or \"|\")",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "out:write(\"---- \")",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "out:write(\"]\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "local function dump_snap(tr)\r\n  out:write(\"---- TRACE \", tr, \" snapshots\\n\")\r\n  for i=0,1000000000 do\r\n    local snap = tracesnap(tr, i)\r\n    if not snap then break end\r\n    out:write(format(\"#%-3d %04d [ \", i, snap[0]))\r\n    printsnap(tr, snap)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "out:write(\"---- TRACE \", tr, \" snapshots\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "for i=0,1000000000 do\r\n    local snap = tracesnap(tr, i)\r\n    if not snap then break end\r\n    out:write(format(\"#%-3d %04d [ \", i, snap[0]))\r\n    printsnap(tr, snap)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 111,
    "text": "local snap = tracesnap(tr, i)",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "if not snap then break end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "out:write(format(\"#%-3d %04d [ \", i, snap[0]))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "printsnap(tr, snap)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "local function ridsp_name(ridsp, ins)\r\n  if not disass then disass = require(\"jit.dis_\"..jit.arch) end\r\n  local rid, slot = band(ridsp, 0xff), shr(ridsp, 8)\r\n  if rid == 253 or rid == 254 then\r\n    return (slot == 0 or slot == 255) and \" {sink\" or format(\" {%04d\", ins-slot)\r\n  end\r\n  if ridsp > 255 then return format(\"[%x]\", slot*4) end\r\n  if rid < 128 then return disass.regname(rid) end\r\n  return \"\"\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "local rid, slot = band(ridsp, 0xff), shr(ridsp, 8)",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "if rid == 253 or rid == 254 then\r\n    return (slot == 0 or slot == 255) and \" {sink\" or format(\" {%04d\", ins-slot)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "if ridsp > 255 then return format(\"[%x]\", slot*4) end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "if rid < 128 then return disass.regname(rid) end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function dumpcallfunc(tr, ins)\r\n  local ctype\r\n  if ins > 0 then\r\n    local m, ot, op1, op2 = traceir(tr, ins)\r\n    if band(ot, 31) == 0 then -- nil type means CARG(func, ctype).\r\n      ins = op1\r\n      ctype = formatk(tr, op2)\r\n    end\r\n  end\r\n  if ins < 0 then\r\n    out:write(format(\"[0x%x](\", tonumber((tracek(tr, ins)))))\r\n  else\r\n    out:write(format(\"%04d (\", ins))\r\n  end\r\n  return ctype\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "local ctype",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "if ins > 0 then\r\n    local m, ot, op1, op2 = traceir(tr, ins)\r\n    if band(ot, 31) == 0 then -- nil type means CARG(func, ctype).\r\n      ins = op1\r\n      ctype = formatk(tr, op2)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "local m, ot, op1, op2 = traceir(tr, ins)",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if band(ot, 31) == 0 then -- nil type means CARG(func, ctype).\r\n      ins = op1\r\n      ctype = formatk(tr, op2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "ins = op1",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "ctype = formatk(tr, op2)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "if ins < 0 then\r\n    out:write(format(\"[0x%x](\", tonumber((tracek(tr, ins)))))\r\n  else\r\n    out:write(format(\"%04d (\", ins))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "out:write(format(\"[0x%x](\", tonumber((tracek(tr, ins)))))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "out:write(format(\"%04d (\", ins))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "local function dumpcallargs(tr, ins)\r\n  if ins < 0 then\r\n    out:write(formatk(tr, ins))\r\n  else\r\n    local m, ot, op1, op2 = traceir(tr, ins)\r\n    local oidx = 6*shr(ot, 8)\r\n    local op = sub(vmdef.irnames, oidx+1, oidx+6)\r\n    if op == \"CARG  \" then\r\n      dumpcallargs(tr, op1)\r\n      if op2 < 0 then\r\n\tout:write(\" \", formatk(tr, op2))\r\n      else\r\n\tout:write(\" \", format(\"%04d\", op2))\r\n      end\r\n    else\r\n      out:write(format(\"%04d\", ins))\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "if ins < 0 then\r\n    out:write(formatk(tr, ins))\r\n  else\r\n    local m, ot, op1, op2 = traceir(tr, ins)\r\n    local oidx = 6*shr(ot, 8)\r\n    local op = sub(vmdef.irnames, oidx+1, oidx+6)\r\n    if op == \"CARG  \" then\r\n      dumpcallargs(tr, op1)\r\n      if op2 < 0 then\r\n\tout:write(\" \", formatk(tr, op2))\r\n      else\r\n\tout:write(\" \", format(\"%04d\", op2))\r\n      end\r\n    else\r\n      out:write(format(\"%04d\", ins))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "out:write(formatk(tr, ins))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "local oidx = 6*shr(ot, 8)",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local op = sub(vmdef.irnames, oidx+1, oidx+6)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if op == \"CARG  \" then\r\n      dumpcallargs(tr, op1)\r\n      if op2 < 0 then\r\n\tout:write(\" \", formatk(tr, op2))\r\n      else\r\n\tout:write(\" \", format(\"%04d\", op2))\r\n      end\r\n    else\r\n      out:write(format(\"%04d\", ins))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "dumpcallargs(tr, op1)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "if op2 < 0 then\r\n\tout:write(\" \", formatk(tr, op2))\r\n      else\r\n\tout:write(\" \", format(\"%04d\", op2))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "out:write(\" \", formatk(tr, op2))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "out:write(\" \", format(\"%04d\", op2))",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "out:write(format(\"%04d\", ins))",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "local function dump_ir(tr, dumpsnap, dumpreg)\r\n  local info = traceinfo(tr)\r\n  if not info then return end\r\n  local nins = info.nins\r\n  out:write(\"---- TRACE \", tr, \" IR\\n\")\r\n  local irnames = vmdef.irnames\r\n  local snapref = 65536\r\n  local snap, snapno\r\n  if dumpsnap then\r\n    snap = tracesnap(tr, 0)\r\n    snapref = snap[0]\r\n    snapno = 0\r\n  end\r\n  for ins=1,nins do\r\n    if ins >= snapref then\r\n      if dumpreg then\r\n\tout:write(format(\"....              SNAP   #%-3d [ \", snapno))\r\n      else\r\n\tout:write(format(\"....        SNAP   #%-3d [ \", snapno))\r\n      end\r\n      printsnap(tr, snap)\r\n      snapno = snapno + 1\r\n      snap = tracesnap(tr, snapno)\r\n      snapref = snap and snap[0] or 65536\r\n    end\r\n    local m, ot, op1, op2, ridsp = traceir(tr, ins)\r\n    local oidx, t = 6*shr(ot, 8), band(ot, 31)\r\n    local op = sub(irnames, oidx+1, oidx+6)\r\n    if op == \"LOOP  \" then\r\n      if dumpreg then\r\n\tout:write(format(\"%04d ------------ LOOP ------------\\n\", ins))\r\n      else\r\n\tout:write(format(\"%04d ------ LOOP ------------\\n\", ins))\r\n      end\r\n    elseif op ~= \"NOP   \" and op ~= \"CARG  \" and\r\n\t   (dumpreg or op ~= \"RENAME\") then\r\n      local rid = band(ridsp, 255)\r\n      if dumpreg then\r\n\tout:write(format(\"%04d %-6s\", ins, ridsp_name(ridsp, ins)))\r\n      else\r\n\tout:write(format(\"%04d \", ins))\r\n      end\r\n      out:write(format(\"%s%s %s %s \",\r\n\t\t       (rid == 254 or rid == 253) and \"}\" or\r\n\t\t       (band(ot, 128) == 0 and \" \" or \">\"),\r\n\t\t       band(ot, 64) == 0 and \" \" or \"+\",\r\n\t\t       irtype[t], op))\r\n      local m1, m2 = band(m, 3), band(m, 3*4)\r\n      if sub(op, 1, 4) == \"CALL\" then\r\n\tlocal ctype\r\n\tif m2 == 1*4 then -- op2 == IRMlit\r\n\t  out:write(format(\"%-10s  (\", vmdef.ircall[op2]))\r\n\telse\r\n\t  ctype = dumpcallfunc(tr, op2)\r\n\tend\r\n\tif op1 ~= -1 then dumpcallargs(tr, op1) end\r\n\tout:write(\")\")\r\n\tif ctype then out:write(\" ctype \", ctype) end\r\n      elseif op == \"CNEW  \" and op2 == -1 then\r\n\tout:write(formatk(tr, op1))\r\n      elseif m1 ~= 3 then -- op1 != IRMnone\r\n\tif op1 < 0 then\r\n\t  out:write(formatk(tr, op1))\r\n\telse\r\n\t  out:write(format(m1 == 0 and \"%04d\" or \"#%-3d\", op1))\r\n\tend\r\n\tif m2 ~= 3*4 then -- op2 != IRMnone\r\n\t  if m2 == 1*4 then -- op2 == IRMlit\r\n\t    local litn = litname[op]\r\n\t    if litn and litn[op2] then\r\n\t      out:write(\"  \", litn[op2])\r\n\t    elseif op == \"UREFO \" or op == \"UREFC \" then\r\n\t      out:write(format(\"  #%-3d\", shr(op2, 8)))\r\n\t    else\r\n\t      out:write(format(\"  #%-3d\", op2))\r\n\t    end\r\n\t  elseif op2 < 0 then\r\n\t    out:write(\"  \", formatk(tr, op2))\r\n\t  else\r\n\t    out:write(format(\"  %04d\", op2))\r\n\t  end\r\n\tend\r\n      end\r\n      out:write(\"\\n\")\r\n    end\r\n  end\r\n  if snap then\r\n    if dumpreg then\r\n      out:write(format(\"....              SNAP   #%-3d [ \", snapno))\r\n    else\r\n      out:write(format(\"....        SNAP   #%-3d [ \", snapno))\r\n    end\r\n    printsnap(tr, snap)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "local nins = info.nins",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "out:write(\"---- TRACE \", tr, \" IR\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "local irnames = vmdef.irnames",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local snapref = 65536",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "local snap, snapno",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "if dumpsnap then\r\n    snap = tracesnap(tr, 0)\r\n    snapref = snap[0]\r\n    snapno = 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "snap = tracesnap(tr, 0)",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "snapref = snap[0]",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "snapno = 0",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "for ins=1,nins do\r\n    if ins >= snapref then\r\n      if dumpreg then\r\n\tout:write(format(\"....              SNAP   #%-3d [ \", snapno))\r\n      else\r\n\tout:write(format(\"....        SNAP   #%-3d [ \", snapno))\r\n      end\r\n      printsnap(tr, snap)\r\n      snapno = snapno + 1\r\n      snap = tracesnap(tr, snapno)\r\n      snapref = snap and snap[0] or 65536\r\n    end\r\n    local m, ot, op1, op2, ridsp = traceir(tr, ins)\r\n    local oidx, t = 6*shr(ot, 8), band(ot, 31)\r\n    local op = sub(irnames, oidx+1, oidx+6)\r\n    if op == \"LOOP  \" then\r\n      if dumpreg then\r\n\tout:write(format(\"%04d ------------ LOOP ------------\\n\", ins))\r\n      else\r\n\tout:write(format(\"%04d ------ LOOP ------------\\n\", ins))\r\n      end\r\n    elseif op ~= \"NOP   \" and op ~= \"CARG  \" and\r\n\t   (dumpreg or op ~= \"RENAME\") then\r\n      local rid = band(ridsp, 255)\r\n      if dumpreg then\r\n\tout:write(format(\"%04d %-6s\", ins, ridsp_name(ridsp, ins)))\r\n      else\r\n\tout:write(format(\"%04d \", ins))\r\n      end\r\n      out:write(format(\"%s%s %s %s \",\r\n\t\t       (rid == 254 or rid == 253) and \"}\" or\r\n\t\t       (band(ot, 128) == 0 and \" \" or \">\"),\r\n\t\t       band(ot, 64) == 0 and \" \" or \"+\",\r\n\t\t       irtype[t], op))\r\n      local m1, m2 = band(m, 3), band(m, 3*4)\r\n      if sub(op, 1, 4) == \"CALL\" then\r\n\tlocal ctype\r\n\tif m2 == 1*4 then -- op2 == IRMlit\r\n\t  out:write(format(\"%-10s  (\", vmdef.ircall[op2]))\r\n\telse\r\n\t  ctype = dumpcallfunc(tr, op2)\r\n\tend\r\n\tif op1 ~= -1 then dumpcallargs(tr, op1) end\r\n\tout:write(\")\")\r\n\tif ctype then out:write(\" ctype \", ctype) end\r\n      elseif op == \"CNEW  \" and op2 == -1 then\r\n\tout:write(formatk(tr, op1))\r\n      elseif m1 ~= 3 then -- op1 != IRMnone\r\n\tif op1 < 0 then\r\n\t  out:write(formatk(tr, op1))\r\n\telse\r\n\t  out:write(format(m1 == 0 and \"%04d\" or \"#%-3d\", op1))\r\n\tend\r\n\tif m2 ~= 3*4 then -- op2 != IRMnone\r\n\t  if m2 == 1*4 then -- op2 == IRMlit\r\n\t    local litn = litname[op]\r\n\t    if litn and litn[op2] then\r\n\t      out:write(\"  \", litn[op2])\r\n\t    elseif op == \"UREFO \" or op == \"UREFC \" then\r\n\t      out:write(format(\"  #%-3d\", shr(op2, 8)))\r\n\t    else\r\n\t      out:write(format(\"  #%-3d\", op2))\r\n\t    end\r\n\t  elseif op2 < 0 then\r\n\t    out:write(\"  \", formatk(tr, op2))\r\n\t  else\r\n\t    out:write(format(\"  %04d\", op2))\r\n\t  end\r\n\tend\r\n      end\r\n      out:write(\"\\n\")\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 156,
    "text": "if ins >= snapref then\r\n      if dumpreg then\r\n\tout:write(format(\"....              SNAP   #%-3d [ \", snapno))\r\n      else\r\n\tout:write(format(\"....        SNAP   #%-3d [ \", snapno))\r\n      end\r\n      printsnap(tr, snap)\r\n      snapno = snapno + 1\r\n      snap = tracesnap(tr, snapno)\r\n      snapref = snap and snap[0] or 65536\r\n    end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "if dumpreg then\r\n\tout:write(format(\"....              SNAP   #%-3d [ \", snapno))\r\n      else\r\n\tout:write(format(\"....        SNAP   #%-3d [ \", snapno))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "out:write(format(\"....              SNAP   #%-3d [ \", snapno))",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "out:write(format(\"....        SNAP   #%-3d [ \", snapno))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "snapno = snapno + 1",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "snap = tracesnap(tr, snapno)",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "snapref = snap and snap[0] or 65536",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "local m, ot, op1, op2, ridsp = traceir(tr, ins)",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "local oidx, t = 6*shr(ot, 8), band(ot, 31)",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "local op = sub(irnames, oidx+1, oidx+6)",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "if op == \"LOOP  \" then\r\n      if dumpreg then\r\n\tout:write(format(\"%04d ------------ LOOP ------------\\n\", ins))\r\n      else\r\n\tout:write(format(\"%04d ------ LOOP ------------\\n\", ins))\r\n      end\r\n    elseif op ~= \"NOP   \" and op ~= \"CARG  \" and\r\n\t   (dumpreg or op ~= \"RENAME\") then\r\n      local rid = band(ridsp, 255)\r\n      if dumpreg then\r\n\tout:write(format(\"%04d %-6s\", ins, ridsp_name(ridsp, ins)))\r\n      else\r\n\tout:write(format(\"%04d \", ins))\r\n      end\r\n      out:write(format(\"%s%s %s %s \",\r\n\t\t       (rid == 254 or rid == 253) and \"}\" or\r\n\t\t       (band(ot, 128) == 0 and \" \" or \">\"),\r\n\t\t       band(ot, 64) == 0 and \" \" or \"+\",\r\n\t\t       irtype[t], op))\r\n      local m1, m2 = band(m, 3), band(m, 3*4)\r\n      if sub(op, 1, 4) == \"CALL\" then\r\n\tlocal ctype\r\n\tif m2 == 1*4 then -- op2 == IRMlit\r\n\t  out:write(format(\"%-10s  (\", vmdef.ircall[op2]))\r\n\telse\r\n\t  ctype = dumpcallfunc(tr, op2)\r\n\tend\r\n\tif op1 ~= -1 then dumpcallargs(tr, op1) end\r\n\tout:write(\")\")\r\n\tif ctype then out:write(\" ctype \", ctype) end\r\n      elseif op == \"CNEW  \" and op2 == -1 then\r\n\tout:write(formatk(tr, op1))\r\n      elseif m1 ~= 3 then -- op1 != IRMnone\r\n\tif op1 < 0 then\r\n\t  out:write(formatk(tr, op1))\r\n\telse\r\n\t  out:write(format(m1 == 0 and \"%04d\" or \"#%-3d\", op1))\r\n\tend\r\n\tif m2 ~= 3*4 then -- op2 != IRMnone\r\n\t  if m2 == 1*4 then -- op2 == IRMlit\r\n\t    local litn = litname[op]\r\n\t    if litn and litn[op2] then\r\n\t      out:write(\"  \", litn[op2])\r\n\t    elseif op == \"UREFO \" or op == \"UREFC \" then\r\n\t      out:write(format(\"  #%-3d\", shr(op2, 8)))\r\n\t    else\r\n\t      out:write(format(\"  #%-3d\", op2))\r\n\t    end\r\n\t  elseif op2 < 0 then\r\n\t    out:write(\"  \", formatk(tr, op2))\r\n\t  else\r\n\t    out:write(format(\"  %04d\", op2))\r\n\t  end\r\n\tend\r\n      end\r\n      out:write(\"\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "if dumpreg then\r\n\tout:write(format(\"%04d ------------ LOOP ------------\\n\", ins))\r\n      else\r\n\tout:write(format(\"%04d ------ LOOP ------------\\n\", ins))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "out:write(format(\"%04d ------------ LOOP ------------\\n\", ins))",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "out:write(format(\"%04d ------ LOOP ------------\\n\", ins))",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "local rid = band(ridsp, 255)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "if dumpreg then\r\n\tout:write(format(\"%04d %-6s\", ins, ridsp_name(ridsp, ins)))\r\n      else\r\n\tout:write(format(\"%04d \", ins))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "out:write(format(\"%04d %-6s\", ins, ridsp_name(ridsp, ins)))",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "out:write(format(\"%04d \", ins))",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "out:write(format(\"%s%s %s %s \",\r\n\t\t       (rid == 254 or rid == 253) and \"}\" or\r\n\t\t       (band(ot, 128) == 0 and \" \" or \">\"),\r\n\t\t       band(ot, 64) == 0 and \" \" or \"+\",\r\n\t\t       irtype[t], op))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "local m1, m2 = band(m, 3), band(m, 3*4)",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "if sub(op, 1, 4) == \"CALL\" then\r\n\tlocal ctype\r\n\tif m2 == 1*4 then -- op2 == IRMlit\r\n\t  out:write(format(\"%-10s  (\", vmdef.ircall[op2]))\r\n\telse\r\n\t  ctype = dumpcallfunc(tr, op2)\r\n\tend\r\n\tif op1 ~= -1 then dumpcallargs(tr, op1) end\r\n\tout:write(\")\")\r\n\tif ctype then out:write(\" ctype \", ctype) end\r\n      elseif op == \"CNEW  \" and op2 == -1 then\r\n\tout:write(formatk(tr, op1))\r\n      elseif m1 ~= 3 then -- op1 != IRMnone\r\n\tif op1 < 0 then\r\n\t  out:write(formatk(tr, op1))\r\n\telse\r\n\t  out:write(format(m1 == 0 and \"%04d\" or \"#%-3d\", op1))\r\n\tend\r\n\tif m2 ~= 3*4 then -- op2 != IRMnone\r\n\t  if m2 == 1*4 then -- op2 == IRMlit\r\n\t    local litn = litname[op]\r\n\t    if litn and litn[op2] then\r\n\t      out:write(\"  \", litn[op2])\r\n\t    elseif op == \"UREFO \" or op == \"UREFC \" then\r\n\t      out:write(format(\"  #%-3d\", shr(op2, 8)))\r\n\t    else\r\n\t      out:write(format(\"  #%-3d\", op2))\r\n\t    end\r\n\t  elseif op2 < 0 then\r\n\t    out:write(\"  \", formatk(tr, op2))\r\n\t  else\r\n\t    out:write(format(\"  %04d\", op2))\r\n\t  end\r\n\tend\r\n      end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "if m2 == 1*4 then -- op2 == IRMlit\r\n\t  out:write(format(\"%-10s  (\", vmdef.ircall[op2]))\r\n\telse\r\n\t  ctype = dumpcallfunc(tr, op2)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "out:write(format(\"%-10s  (\", vmdef.ircall[op2]))",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "ctype = dumpcallfunc(tr, op2)",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "if op1 ~= -1 then dumpcallargs(tr, op1) end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "out:write(\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "if ctype then out:write(\" ctype \", ctype) end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "out:write(\" ctype \", ctype)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "out:write(formatk(tr, op1))",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "if op1 < 0 then\r\n\t  out:write(formatk(tr, op1))\r\n\telse\r\n\t  out:write(format(m1 == 0 and \"%04d\" or \"#%-3d\", op1))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "out:write(format(m1 == 0 and \"%04d\" or \"#%-3d\", op1))",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "if m2 ~= 3*4 then -- op2 != IRMnone\r\n\t  if m2 == 1*4 then -- op2 == IRMlit\r\n\t    local litn = litname[op]\r\n\t    if litn and litn[op2] then\r\n\t      out:write(\"  \", litn[op2])\r\n\t    elseif op == \"UREFO \" or op == \"UREFC \" then\r\n\t      out:write(format(\"  #%-3d\", shr(op2, 8)))\r\n\t    else\r\n\t      out:write(format(\"  #%-3d\", op2))\r\n\t    end\r\n\t  elseif op2 < 0 then\r\n\t    out:write(\"  \", formatk(tr, op2))\r\n\t  else\r\n\t    out:write(format(\"  %04d\", op2))\r\n\t  end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "if m2 == 1*4 then -- op2 == IRMlit\r\n\t    local litn = litname[op]\r\n\t    if litn and litn[op2] then\r\n\t      out:write(\"  \", litn[op2])\r\n\t    elseif op == \"UREFO \" or op == \"UREFC \" then\r\n\t      out:write(format(\"  #%-3d\", shr(op2, 8)))\r\n\t    else\r\n\t      out:write(format(\"  #%-3d\", op2))\r\n\t    end\r\n\t  elseif op2 < 0 then\r\n\t    out:write(\"  \", formatk(tr, op2))\r\n\t  else\r\n\t    out:write(format(\"  %04d\", op2))\r\n\t  end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "local litn = litname[op]",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "if litn and litn[op2] then\r\n\t      out:write(\"  \", litn[op2])\r\n\t    elseif op == \"UREFO \" or op == \"UREFC \" then\r\n\t      out:write(format(\"  #%-3d\", shr(op2, 8)))\r\n\t    else\r\n\t      out:write(format(\"  #%-3d\", op2))\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "out:write(\"  \", litn[op2])",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "out:write(format(\"  #%-3d\", shr(op2, 8)))",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "out:write(format(\"  #%-3d\", op2))",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "out:write(\"  \", formatk(tr, op2))",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "out:write(format(\"  %04d\", op2))",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "out:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "if snap then\r\n    if dumpreg then\r\n      out:write(format(\"....              SNAP   #%-3d [ \", snapno))\r\n    else\r\n      out:write(format(\"....        SNAP   #%-3d [ \", snapno))\r\n    end\r\n    printsnap(tr, snap)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "if dumpreg then\r\n      out:write(format(\"....              SNAP   #%-3d [ \", snapno))\r\n    else\r\n      out:write(format(\"....        SNAP   #%-3d [ \", snapno))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "local function fmterr(err, info)\r\n  if type(err) == \"number\" then\r\n    if type(info) == \"function\" then info = fmtfunc(info) end\r\n    err = format(vmdef.traceerr[err], info)\r\n  end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "if type(err) == \"number\" then\r\n    if type(info) == \"function\" then info = fmtfunc(info) end\r\n    err = format(vmdef.traceerr[err], info)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "if type(info) == \"function\" then info = fmtfunc(info) end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "info = fmtfunc(info)",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "err = format(vmdef.traceerr[err], info)",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "local function dump_trace(what, tr, func, pc, otr, oex)\r\n  if what == \"stop\" or (what == \"abort\" and dumpmode.a) then\r\n    if dumpmode.i then dump_ir(tr, dumpmode.s, dumpmode.r and what == \"stop\")\r\n    elseif dumpmode.s then dump_snap(tr) end\r\n    if dumpmode.m then dump_mcode(tr) end\r\n  end\r\n  if what == \"start\" then\r\n    if dumpmode.H then out:write('<pre class=\"ljdump\">\\n') end\r\n    out:write(\"---- TRACE \", tr, \" \", what)\r\n    if otr then out:write(\" \", otr, \"/\", oex) end\r\n    out:write(\" \", fmtfunc(func, pc), \"\\n\")\r\n  elseif what == \"stop\" or what == \"abort\" then\r\n    out:write(\"---- TRACE \", tr, \" \", what)\r\n    if what == \"abort\" then\r\n      out:write(\" \", fmtfunc(func, pc), \" -- \", fmterr(otr, oex), \"\\n\")\r\n    else\r\n      local info = traceinfo(tr)\r\n      local link, ltype = info.link, info.linktype\r\n      if link == tr or link == 0 then\r\n\tout:write(\" -> \", ltype, \"\\n\")\r\n      elseif ltype == \"root\" then\r\n\tout:write(\" -> \", link, \"\\n\")\r\n      else\r\n\tout:write(\" -> \", link, \" \", ltype, \"\\n\")\r\n      end\r\n    end\r\n    if dumpmode.H then out:write(\"</pre>\\n\\n\") else out:write(\"\\n\") end\r\n  else\r\n    out:write(\"---- TRACE \", what, \"\\n\\n\")\r\n  end\r\n  out:flush()\r\nend",
    "type": "function"
  }, {
    "id": 207,
    "text": "if what == \"stop\" or (what == \"abort\" and dumpmode.a) then\r\n    if dumpmode.i then dump_ir(tr, dumpmode.s, dumpmode.r and what == \"stop\")\r\n    elseif dumpmode.s then dump_snap(tr) end\r\n    if dumpmode.m then dump_mcode(tr) end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "if dumpmode.i then dump_ir(tr, dumpmode.s, dumpmode.r and what == \"stop\")\r\n    elseif dumpmode.s then dump_snap(tr) end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "dump_ir(tr, dumpmode.s, dumpmode.r and what == \"stop\")",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "dump_snap(tr)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "if dumpmode.m then dump_mcode(tr) end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "dump_mcode(tr)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "if what == \"start\" then\r\n    if dumpmode.H then out:write('<pre class=\"ljdump\">\\n') end\r\n    out:write(\"---- TRACE \", tr, \" \", what)\r\n    if otr then out:write(\" \", otr, \"/\", oex) end\r\n    out:write(\" \", fmtfunc(func, pc), \"\\n\")\r\n  elseif what == \"stop\" or what == \"abort\" then\r\n    out:write(\"---- TRACE \", tr, \" \", what)\r\n    if what == \"abort\" then\r\n      out:write(\" \", fmtfunc(func, pc), \" -- \", fmterr(otr, oex), \"\\n\")\r\n    else\r\n      local info = traceinfo(tr)\r\n      local link, ltype = info.link, info.linktype\r\n      if link == tr or link == 0 then\r\n\tout:write(\" -> \", ltype, \"\\n\")\r\n      elseif ltype == \"root\" then\r\n\tout:write(\" -> \", link, \"\\n\")\r\n      else\r\n\tout:write(\" -> \", link, \" \", ltype, \"\\n\")\r\n      end\r\n    end\r\n    if dumpmode.H then out:write(\"</pre>\\n\\n\") else out:write(\"\\n\") end\r\n  else\r\n    out:write(\"---- TRACE \", what, \"\\n\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "if dumpmode.H then out:write('<pre class=\"ljdump\">\\n') end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "out:write('<pre class=\"ljdump\">\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "out:write(\"---- TRACE \", tr, \" \", what)",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "if otr then out:write(\" \", otr, \"/\", oex) end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "out:write(\" \", otr, \"/\", oex)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "out:write(\" \", fmtfunc(func, pc), \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "if what == \"abort\" then\r\n      out:write(\" \", fmtfunc(func, pc), \" -- \", fmterr(otr, oex), \"\\n\")\r\n    else\r\n      local info = traceinfo(tr)\r\n      local link, ltype = info.link, info.linktype\r\n      if link == tr or link == 0 then\r\n\tout:write(\" -> \", ltype, \"\\n\")\r\n      elseif ltype == \"root\" then\r\n\tout:write(\" -> \", link, \"\\n\")\r\n      else\r\n\tout:write(\" -> \", link, \" \", ltype, \"\\n\")\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "out:write(\" \", fmtfunc(func, pc), \" -- \", fmterr(otr, oex), \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "local link, ltype = info.link, info.linktype",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "if link == tr or link == 0 then\r\n\tout:write(\" -> \", ltype, \"\\n\")\r\n      elseif ltype == \"root\" then\r\n\tout:write(\" -> \", link, \"\\n\")\r\n      else\r\n\tout:write(\" -> \", link, \" \", ltype, \"\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "out:write(\" -> \", ltype, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "out:write(\" -> \", link, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "out:write(\" -> \", link, \" \", ltype, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "if dumpmode.H then out:write(\"</pre>\\n\\n\") else out:write(\"\\n\") end",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "out:write(\"</pre>\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "out:write(\"---- TRACE \", what, \"\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "out:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "local function dump_record(tr, func, pc, depth, callee)\r\n  if depth ~= recdepth then\r\n    recdepth = depth\r\n    recprefix = rep(\" .\", depth)\r\n  end\r\n  local line\r\n  if pc >= 0 then\r\n    line = bcline(func, pc, recprefix)\r\n    if dumpmode.H then line = gsub(line, \"[<>&]\", html_escape) end\r\n  else\r\n    line = \"0000 \"..recprefix..\" FUNCC      \\n\"\r\n    callee = func\r\n  end\r\n  if pc <= 0 then\r\n    out:write(sub(line, 1, -2), \"         ; \", fmtfunc(func), \"\\n\")\r\n  else\r\n    out:write(line)\r\n  end\r\n  if pc >= 0 and band(funcbc(func, pc), 0xff) < 16 then -- ORDER BC\r\n    out:write(bcline(func, pc+1, recprefix)) -- Write JMP for cond.\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 233,
    "text": "if depth ~= recdepth then\r\n    recdepth = depth\r\n    recprefix = rep(\" .\", depth)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "recdepth = depth",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "recprefix = rep(\" .\", depth)",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "local line",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "if pc >= 0 then\r\n    line = bcline(func, pc, recprefix)\r\n    if dumpmode.H then line = gsub(line, \"[<>&]\", html_escape) end\r\n  else\r\n    line = \"0000 \"..recprefix..\" FUNCC      \\n\"\r\n    callee = func\r\n  end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "line = bcline(func, pc, recprefix)",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "if dumpmode.H then line = gsub(line, \"[<>&]\", html_escape) end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "line = gsub(line, \"[<>&]\", html_escape)",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "line = \"0000 \"..recprefix..\" FUNCC      \\n\"",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "callee = func",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "if pc <= 0 then\r\n    out:write(sub(line, 1, -2), \"         ; \", fmtfunc(func), \"\\n\")\r\n  else\r\n    out:write(line)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "out:write(sub(line, 1, -2), \"         ; \", fmtfunc(func), \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "out:write(line)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "if pc >= 0 and band(funcbc(func, pc), 0xff) < 16 then -- ORDER BC\r\n    out:write(bcline(func, pc+1, recprefix)) -- Write JMP for cond.\r\n  end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "out:write(bcline(func, pc+1, recprefix))",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "local function dump_texit(tr, ex, ngpr, nfpr, ...)\r\n  out:write(\"---- TRACE \", tr, \" exit \", ex, \"\\n\")\r\n  if dumpmode.X then\r\n    local regs = {...}\r\n    if jit.arch == \"x64\" then\r\n      for i=1,ngpr do\r\n\tout:write(format(\" %016x\", regs[i]))\r\n\tif i % 4 == 0 then out:write(\"\\n\") end\r\n      end\r\n    else\r\n      for i=1,ngpr do\r\n\tout:write(format(\" %08x\", regs[i]))\r\n\tif i % 8 == 0 then out:write(\"\\n\") end\r\n      end\r\n    end\r\n    if jit.arch == \"mips\" or jit.arch == \"mipsel\" then\r\n      for i=1,nfpr,2 do\r\n\tout:write(format(\" %+17.14g\", regs[ngpr+i]))\r\n\tif i % 8 == 7 then out:write(\"\\n\") end\r\n      end\r\n    else\r\n      for i=1,nfpr do\r\n\tout:write(format(\" %+17.14g\", regs[ngpr+i]))\r\n\tif i % 4 == 0 then out:write(\"\\n\") end\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 250,
    "text": "out:write(\"---- TRACE \", tr, \" exit \", ex, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "if dumpmode.X then\r\n    local regs = {...}\r\n    if jit.arch == \"x64\" then\r\n      for i=1,ngpr do\r\n\tout:write(format(\" %016x\", regs[i]))\r\n\tif i % 4 == 0 then out:write(\"\\n\") end\r\n      end\r\n    else\r\n      for i=1,ngpr do\r\n\tout:write(format(\" %08x\", regs[i]))\r\n\tif i % 8 == 0 then out:write(\"\\n\") end\r\n      end\r\n    end\r\n    if jit.arch == \"mips\" or jit.arch == \"mipsel\" then\r\n      for i=1,nfpr,2 do\r\n\tout:write(format(\" %+17.14g\", regs[ngpr+i]))\r\n\tif i % 8 == 7 then out:write(\"\\n\") end\r\n      end\r\n    else\r\n      for i=1,nfpr do\r\n\tout:write(format(\" %+17.14g\", regs[ngpr+i]))\r\n\tif i % 4 == 0 then out:write(\"\\n\") end\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "local regs = {...}",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "if jit.arch == \"x64\" then\r\n      for i=1,ngpr do\r\n\tout:write(format(\" %016x\", regs[i]))\r\n\tif i % 4 == 0 then out:write(\"\\n\") end\r\n      end\r\n    else\r\n      for i=1,ngpr do\r\n\tout:write(format(\" %08x\", regs[i]))\r\n\tif i % 8 == 0 then out:write(\"\\n\") end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 254,
    "text": "for i=1,ngpr do\r\n\tout:write(format(\" %016x\", regs[i]))\r\n\tif i % 4 == 0 then out:write(\"\\n\") end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 255,
    "text": "out:write(format(\" %016x\", regs[i]))",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "if i % 4 == 0 then out:write(\"\\n\") end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "for i=1,ngpr do\r\n\tout:write(format(\" %08x\", regs[i]))\r\n\tif i % 8 == 0 then out:write(\"\\n\") end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 258,
    "text": "out:write(format(\" %08x\", regs[i]))",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "if i % 8 == 0 then out:write(\"\\n\") end",
    "type": "statement:if"
  }, {
    "id": 260,
    "text": "if jit.arch == \"mips\" or jit.arch == \"mipsel\" then\r\n      for i=1,nfpr,2 do\r\n\tout:write(format(\" %+17.14g\", regs[ngpr+i]))\r\n\tif i % 8 == 7 then out:write(\"\\n\") end\r\n      end\r\n    else\r\n      for i=1,nfpr do\r\n\tout:write(format(\" %+17.14g\", regs[ngpr+i]))\r\n\tif i % 4 == 0 then out:write(\"\\n\") end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "for i=1,nfpr,2 do\r\n\tout:write(format(\" %+17.14g\", regs[ngpr+i]))\r\n\tif i % 8 == 7 then out:write(\"\\n\") end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 262,
    "text": "out:write(format(\" %+17.14g\", regs[ngpr+i]))",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "if i % 8 == 7 then out:write(\"\\n\") end",
    "type": "statement:if"
  }, {
    "id": 264,
    "text": "for i=1,nfpr do\r\n\tout:write(format(\" %+17.14g\", regs[ngpr+i]))\r\n\tif i % 4 == 0 then out:write(\"\\n\") end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "local function dumpoff()\r\n  if active then\r\n    active = false\r\n    jit.attach(dump_texit)\r\n    jit.attach(dump_record)\r\n    jit.attach(dump_trace)\r\n    if out and out ~= stdout and out ~= stderr then out:close() end\r\n    out = nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 267,
    "text": "if active then\r\n    active = false\r\n    jit.attach(dump_texit)\r\n    jit.attach(dump_record)\r\n    jit.attach(dump_trace)\r\n    if out and out ~= stdout and out ~= stderr then out:close() end\r\n    out = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "active = false",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "jit.attach(dump_texit)",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "jit.attach(dump_record)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "jit.attach(dump_trace)",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "if out and out ~= stdout and out ~= stderr then out:close() end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "out:close()",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "out = nil",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "local function dumpon(opt, outfile)\r\n  if active then dumpoff() end\r\n\r\n  local colormode = os.getenv(\"COLORTERM\") and \"A\" or \"T\"\r\n  if opt then\r\n    opt = gsub(opt, \"[TAH]\", function(mode) colormode = mode; return \"\"; end)\r\n  end\r\n\r\n  local m = { t=true, b=true, i=true, m=true, }\r\n  if opt and opt ~= \"\" then\r\n    local o = sub(opt, 1, 1)\r\n    if o ~= \"+\" and o ~= \"-\" then m = {} end\r\n    for i=1,#opt do m[sub(opt, i, i)] = (o ~= \"-\") end\r\n  end\r\n  dumpmode = m\r\n\r\n  if m.t or m.b or m.i or m.s or m.m then\r\n    jit.attach(dump_trace, \"trace\")\r\n  end\r\n  if m.b then\r\n    jit.attach(dump_record, \"record\")\r\n    if not bcline then bcline = require(\"jit.bc\").line end\r\n  end\r\n  if m.x or m.X then\r\n    jit.attach(dump_texit, \"texit\")\r\n  end\r\n\r\n  if not outfile then outfile = os.getenv(\"LUAJIT_DUMPFILE\") end\r\n  if outfile then\r\n    out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))\r\n  else\r\n    out = stdout\r\n  end\r\n\r\n  m[colormode] = true\r\n  if colormode == \"A\" then\r\n    colorize = colorize_ansi\r\n    irtype = irtype_ansi\r\n  elseif colormode == \"H\" then\r\n    colorize = colorize_html\r\n    irtype = irtype_html\r\n    out:write(header_html)\r\n  else\r\n    colorize = colorize_text\r\n    irtype = irtype_text\r\n  end\r\n\r\n  active = true\r\nend",
    "type": "function"
  }, {
    "id": 277,
    "text": "if active then dumpoff() end",
    "type": "statement:if"
  }, {
    "id": 278,
    "text": "dumpoff()",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "local colormode = os.getenv(\"COLORTERM\") and \"A\" or \"T\"",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "if opt then\r\n    opt = gsub(opt, \"[TAH]\", function(mode) colormode = mode; return \"\"; end)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "opt = gsub(opt, \"[TAH]\", function(mode) colormode = mode; return \"\"; end)",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "colormode = mode",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "local m = { t=true, b=true, i=true, m=true, }",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "if opt and opt ~= \"\" then\r\n    local o = sub(opt, 1, 1)\r\n    if o ~= \"+\" and o ~= \"-\" then m = {} end\r\n    for i=1,#opt do m[sub(opt, i, i)] = (o ~= \"-\") end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 285,
    "text": "local o = sub(opt, 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 286,
    "text": "if o ~= \"+\" and o ~= \"-\" then m = {} end",
    "type": "statement:if"
  }, {
    "id": 287,
    "text": "m = {}",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "for i=1,#opt do m[sub(opt, i, i)] = (o ~= \"-\") end",
    "type": "statement:numericfor"
  }, {
    "id": 289,
    "text": "m[sub(opt, i, i)] = (o ~= \"-\")",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "dumpmode = m",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "if m.t or m.b or m.i or m.s or m.m then\r\n    jit.attach(dump_trace, \"trace\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "jit.attach(dump_trace, \"trace\")",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "if m.b then\r\n    jit.attach(dump_record, \"record\")\r\n    if not bcline then bcline = require(\"jit.bc\").line end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 294,
    "text": "jit.attach(dump_record, \"record\")",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "if not bcline then bcline = require(\"jit.bc\").line end",
    "type": "statement:if"
  }, {
    "id": 296,
    "text": "bcline = require(\"jit.bc\").line",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "if m.x or m.X then\r\n    jit.attach(dump_texit, \"texit\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 298,
    "text": "jit.attach(dump_texit, \"texit\")",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "if not outfile then outfile = os.getenv(\"LUAJIT_DUMPFILE\") end",
    "type": "statement:if"
  }, {
    "id": 300,
    "text": "outfile = os.getenv(\"LUAJIT_DUMPFILE\")",
    "type": "statement:assign"
  }, {
    "id": 301,
    "text": "if outfile then\r\n    out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))\r\n  else\r\n    out = stdout\r\n  end",
    "type": "statement:if"
  }, {
    "id": 302,
    "text": "out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))",
    "type": "statement:assign"
  }, {
    "id": 303,
    "text": "out = stdout",
    "type": "statement:assign"
  }, {
    "id": 304,
    "text": "m[colormode] = true",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "if colormode == \"A\" then\r\n    colorize = colorize_ansi\r\n    irtype = irtype_ansi\r\n  elseif colormode == \"H\" then\r\n    colorize = colorize_html\r\n    irtype = irtype_html\r\n    out:write(header_html)\r\n  else\r\n    colorize = colorize_text\r\n    irtype = irtype_text\r\n  end",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "colorize = colorize_ansi",
    "type": "statement:assign"
  }, {
    "id": 307,
    "text": "irtype = irtype_ansi",
    "type": "statement:assign"
  }, {
    "id": 308,
    "text": "colorize = colorize_html",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "irtype = irtype_html",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "out:write(header_html)",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "colorize = colorize_text",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "irtype = irtype_text",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "active = true",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "function(tab, t)\r\n      local s = colorize_ansi(irtype_text[t], t); tab[t] = s; return s; end",
    "type": "function"
  }, {
    "id": 316,
    "text": "local s = colorize_ansi(irtype_text[t], t)",
    "type": "statement:localassign"
  }, {
    "id": 317,
    "text": "tab[t] = s",
    "type": "statement:assign"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function(tab, t)\r\n      local s = colorize_html(irtype_text[t], t); tab[t] = s; return s; end",
    "type": "function"
  }, {
    "id": 320,
    "text": "local s = colorize_html(irtype_text[t], t)",
    "type": "statement:localassign"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function(t, mode)\r\n    local s = \"\"\r\n    if band(mode, 1) ~= 0 then s = s..\"P\" end\r\n    if band(mode, 2) ~= 0 then s = s..\"F\" end\r\n    if band(mode, 4) ~= 0 then s = s..\"T\" end\r\n    if band(mode, 8) ~= 0 then s = s..\"C\" end\r\n    if band(mode, 16) ~= 0 then s = s..\"R\" end\r\n    if band(mode, 32) ~= 0 then s = s..\"I\" end\r\n    t[mode] = s\r\n    return s\r\n  end",
    "type": "function"
  }, {
    "id": 323,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "if band(mode, 1) ~= 0 then s = s..\"P\" end",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "s = s..\"P\"",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "if band(mode, 2) ~= 0 then s = s..\"F\" end",
    "type": "statement:if"
  }, {
    "id": 327,
    "text": "s = s..\"F\"",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "if band(mode, 4) ~= 0 then s = s..\"T\" end",
    "type": "statement:if"
  }, {
    "id": 329,
    "text": "s = s..\"T\"",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "if band(mode, 8) ~= 0 then s = s..\"C\" end",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "s = s..\"C\"",
    "type": "statement:assign"
  }, {
    "id": 332,
    "text": "if band(mode, 16) ~= 0 then s = s..\"R\" end",
    "type": "statement:if"
  }, {
    "id": 333,
    "text": "s = s..\"R\"",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "if band(mode, 32) ~= 0 then s = s..\"I\" end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "s = s..\"I\"",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "t[mode] = s",
    "type": "statement:assign"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function(t, mode)\r\n    local s = irtype[band(mode, 31)]\r\n    s = irtype[band(shr(mode, 5), 31)]..\".\"..s\r\n    if band(mode, 0x400) ~= 0 then s = s..\" trunc\"\r\n    elseif band(mode, 0x800) ~= 0 then s = s..\" sext\" end\r\n    local c = shr(mode, 14)\r\n    if c == 2 then s = s..\" index\" elseif c == 3 then s = s..\" check\" end\r\n    t[mode] = s\r\n    return s\r\n  end",
    "type": "function"
  }, {
    "id": 339,
    "text": "local s = irtype[band(mode, 31)]",
    "type": "statement:localassign"
  }, {
    "id": 340,
    "text": "s = irtype[band(shr(mode, 5), 31)]..\".\"..s",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "if band(mode, 0x400) ~= 0 then s = s..\" trunc\"\r\n    elseif band(mode, 0x800) ~= 0 then s = s..\" sext\" end",
    "type": "statement:if"
  }, {
    "id": 342,
    "text": "s = s..\" trunc\"",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "s = s..\" sext\"",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "local c = shr(mode, 14)",
    "type": "statement:localassign"
  }, {
    "id": 345,
    "text": "if c == 2 then s = s..\" index\" elseif c == 3 then s = s..\" check\" end",
    "type": "statement:if"
  }, {
    "id": 346,
    "text": "s = s..\" index\"",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "s = s..\" check\"",
    "type": "statement:assign"
  }, {
    "id": 348,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 349,
    "text": "function(mode) colormode = mode; return \"\"; end",
    "type": "function"
  }, {
    "id": 350,
    "text": "",
    "type": "function container"
  }, {
    "id": 351,
    "text": "regname",
    "type": "global function"
  }, {
    "id": 352,
    "text": "attach",
    "type": "global function"
  }, {
    "id": 353,
    "text": "create",
    "type": "global function"
  }, {
    "id": 354,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 355,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 356,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 357,
    "text": "module",
    "type": "global function"
  }, {
    "id": 358,
    "text": "tracemc",
    "type": "global function"
  }, {
    "id": 359,
    "text": "bcline",
    "type": "global function"
  }, {
    "id": 360,
    "text": "ircalladdr",
    "type": "global function"
  }, {
    "id": 361,
    "text": "funcinfo",
    "type": "global function"
  }, {
    "id": 362,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 363,
    "text": "type",
    "type": "global function"
  }, {
    "id": 364,
    "text": "band",
    "type": "global function"
  }, {
    "id": 365,
    "text": "format",
    "type": "global function"
  }, {
    "id": 366,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 367,
    "text": "open",
    "type": "global function"
  }, {
    "id": 368,
    "text": "traceinfo",
    "type": "global function"
  }, {
    "id": 369,
    "text": "tracesnap",
    "type": "global function"
  }, {
    "id": 370,
    "text": "funcbc",
    "type": "global function"
  }, {
    "id": 371,
    "text": "traceexitstub",
    "type": "global function"
  }, {
    "id": 372,
    "text": "traceir",
    "type": "global function"
  }, {
    "id": 373,
    "text": "colorize",
    "type": "global function"
  }, {
    "id": 374,
    "text": "shr",
    "type": "global function"
  }, {
    "id": 375,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 376,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 377,
    "text": "tracek",
    "type": "global function"
  }, {
    "id": 378,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 379,
    "text": "require",
    "type": "global function"
  }, {
    "id": 380,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 381,
    "text": "(bit)",
    "type": "module"
  }, {
    "id": 382,
    "text": "(jit)",
    "type": "module"
  }, {
    "id": 383,
    "text": "util)",
    "type": "module"
  }, {
    "id": 384,
    "text": "vmdef)",
    "type": "module"
  }, {
    "id": 385,
    "text": "",
    "type": "variable container"
  }, {
    "id": 386,
    "text": "",
    "type": "require container"
  }, {
    "id": 387,
    "text": "",
    "type": "local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "n/a"
  }, {
    "id": 389,
    "text": "",
    "type": "local variable"
  }, {
    "id": 390,
    "text": "",
    "type": "n/a"
  }, {
    "id": 391,
    "text": "",
    "type": "local variable"
  }, {
    "id": 392,
    "text": "",
    "type": "n/a"
  }, {
    "id": 393,
    "text": "",
    "type": "local variable"
  }, {
    "id": 394,
    "text": "",
    "type": "n/a"
  }, {
    "id": 395,
    "text": "",
    "type": "local variable"
  }, {
    "id": 396,
    "text": "",
    "type": "n/a"
  }, {
    "id": 397,
    "text": "",
    "type": "local variable"
  }, {
    "id": 398,
    "text": "",
    "type": "n/a"
  }, {
    "id": 399,
    "text": "",
    "type": "local variable"
  }, {
    "id": 400,
    "text": "",
    "type": "n/a"
  }, {
    "id": 401,
    "text": "",
    "type": "local variable"
  }, {
    "id": 402,
    "text": "",
    "type": "n/a"
  }, {
    "id": 403,
    "text": "",
    "type": "local variable"
  }, {
    "id": 404,
    "text": "",
    "type": "n/a"
  }, {
    "id": 405,
    "text": "",
    "type": "local variable"
  }, {
    "id": 406,
    "text": "",
    "type": "n/a"
  }, {
    "id": 407,
    "text": "",
    "type": "local variable"
  }, {
    "id": 408,
    "text": "",
    "type": "n/a"
  }, {
    "id": 409,
    "text": "",
    "type": "local variable"
  }, {
    "id": 410,
    "text": "",
    "type": "n/a"
  }, {
    "id": 411,
    "text": "",
    "type": "local variable"
  }, {
    "id": 412,
    "text": "",
    "type": "n/a"
  }, {
    "id": 413,
    "text": "",
    "type": "local variable"
  }, {
    "id": 414,
    "text": "",
    "type": "n/a"
  }, {
    "id": 415,
    "text": "",
    "type": "local variable"
  }, {
    "id": 416,
    "text": "",
    "type": "n/a"
  }, {
    "id": 417,
    "text": "",
    "type": "local variable"
  }, {
    "id": 418,
    "text": "",
    "type": "n/a"
  }, {
    "id": 419,
    "text": "",
    "type": "local variable"
  }, {
    "id": 420,
    "text": "",
    "type": "n/a"
  }, {
    "id": 421,
    "text": "",
    "type": "local variable"
  }, {
    "id": 422,
    "text": "",
    "type": "n/a"
  }, {
    "id": 423,
    "text": "",
    "type": "local variable"
  }, {
    "id": 424,
    "text": "",
    "type": "n/a"
  }, {
    "id": 425,
    "text": "",
    "type": "local variable"
  }, {
    "id": 426,
    "text": "",
    "type": "n/a"
  }, {
    "id": 427,
    "text": "",
    "type": "local variable"
  }, {
    "id": 428,
    "text": "",
    "type": "n/a"
  }, {
    "id": 429,
    "text": "",
    "type": "local variable"
  }, {
    "id": 430,
    "text": "",
    "type": "n/a"
  }, {
    "id": 431,
    "text": "",
    "type": "local variable"
  }, {
    "id": 432,
    "text": "",
    "type": "local variable"
  }, {
    "id": 433,
    "text": "",
    "type": "local variable"
  }, {
    "id": 434,
    "text": "",
    "type": "local variable"
  }, {
    "id": 435,
    "text": "",
    "type": "local variable"
  }, {
    "id": 436,
    "text": "",
    "type": "local variable"
  }, {
    "id": 437,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 438,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 439,
    "text": "",
    "type": "boolean"
  }, {
    "id": 440,
    "text": "",
    "type": "local variable"
  }, {
    "id": 441,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 442,
    "text": "",
    "type": "local variable"
  }, {
    "id": 443,
    "text": "",
    "type": "number"
  }, {
    "id": 444,
    "text": "",
    "type": "local variable"
  }, {
    "id": 445,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 446,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 447,
    "text": "",
    "type": "string"
  }, {
    "id": 448,
    "text": "",
    "type": "string"
  }, {
    "id": 449,
    "text": "",
    "type": "string"
  }, {
    "id": 450,
    "text": "",
    "type": "string"
  }, {
    "id": 451,
    "text": "",
    "type": "string"
  }, {
    "id": 452,
    "text": "",
    "type": "string"
  }, {
    "id": 453,
    "text": "",
    "type": "string"
  }, {
    "id": 454,
    "text": "",
    "type": "string"
  }, {
    "id": 455,
    "text": "",
    "type": "string"
  }, {
    "id": 456,
    "text": "",
    "type": "string"
  }, {
    "id": 457,
    "text": "",
    "type": "string"
  }, {
    "id": 458,
    "text": "",
    "type": "string"
  }, {
    "id": 459,
    "text": "",
    "type": "string"
  }, {
    "id": 460,
    "text": "",
    "type": "string"
  }, {
    "id": 461,
    "text": "",
    "type": "string"
  }, {
    "id": 462,
    "text": "",
    "type": "string"
  }, {
    "id": 463,
    "text": "",
    "type": "string"
  }, {
    "id": 464,
    "text": "",
    "type": "string"
  }, {
    "id": 465,
    "text": "",
    "type": "string"
  }, {
    "id": 466,
    "text": "",
    "type": "string"
  }, {
    "id": 467,
    "text": "",
    "type": "string"
  }, {
    "id": 468,
    "text": "",
    "type": "string"
  }, {
    "id": 469,
    "text": "",
    "type": "string"
  }, {
    "id": 470,
    "text": "",
    "type": "string"
  }, {
    "id": 471,
    "text": "",
    "type": "local variable"
  }, {
    "id": 472,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 473,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 474,
    "text": "",
    "type": "string"
  }, {
    "id": 475,
    "text": "",
    "type": "string"
  }, {
    "id": 476,
    "text": "",
    "type": "string"
  }, {
    "id": 477,
    "text": "",
    "type": "string"
  }, {
    "id": 478,
    "text": "",
    "type": "string"
  }, {
    "id": 479,
    "text": "",
    "type": "string"
  }, {
    "id": 480,
    "text": "",
    "type": "string"
  }, {
    "id": 481,
    "text": "",
    "type": "string"
  }, {
    "id": 482,
    "text": "",
    "type": "string"
  }, {
    "id": 483,
    "text": "",
    "type": "string"
  }, {
    "id": 484,
    "text": "",
    "type": "string"
  }, {
    "id": 485,
    "text": "",
    "type": "string"
  }, {
    "id": 486,
    "text": "",
    "type": "string"
  }, {
    "id": 487,
    "text": "",
    "type": "string"
  }, {
    "id": 488,
    "text": "",
    "type": "string"
  }, {
    "id": 489,
    "text": "",
    "type": "string"
  }, {
    "id": 490,
    "text": "",
    "type": "string"
  }, {
    "id": 491,
    "text": "",
    "type": "string"
  }, {
    "id": 492,
    "text": "",
    "type": "string"
  }, {
    "id": 493,
    "text": "",
    "type": "string"
  }, {
    "id": 494,
    "text": "",
    "type": "string"
  }, {
    "id": 495,
    "text": "",
    "type": "string"
  }, {
    "id": 496,
    "text": "",
    "type": "string"
  }, {
    "id": 497,
    "text": "",
    "type": "string"
  }, {
    "id": 498,
    "text": "",
    "type": "local variable"
  }, {
    "id": 499,
    "text": "",
    "type": "n/a"
  }, {
    "id": 500,
    "text": "",
    "type": "local variable"
  }, {
    "id": 501,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 502,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 503,
    "text": "",
    "type": "string"
  }, {
    "id": 504,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 505,
    "text": "",
    "type": "string"
  }, {
    "id": 506,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 507,
    "text": "",
    "type": "string"
  }, {
    "id": 508,
    "text": "",
    "type": "local variable"
  }, {
    "id": 509,
    "text": "",
    "type": "n/a"
  }, {
    "id": 510,
    "text": "",
    "type": "local variable"
  }, {
    "id": 511,
    "text": "",
    "type": "string"
  }, {
    "id": 512,
    "text": "",
    "type": "local variable"
  }, {
    "id": 513,
    "text": "",
    "type": "local variable"
  }, {
    "id": 514,
    "text": "",
    "type": "local variable"
  }, {
    "id": 515,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 516,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 517,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 518,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 519,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 520,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 521,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 522,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 523,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 524,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 525,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 526,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 527,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 528,
    "text": "",
    "type": "local variable"
  }, {
    "id": 529,
    "text": "",
    "type": "string"
  }, {
    "id": 530,
    "text": "",
    "type": "local variable"
  }, {
    "id": 531,
    "text": "",
    "type": "number"
  }, {
    "id": 532,
    "text": "",
    "type": "global variable"
  }, {
    "id": 533,
    "text": "",
    "type": "n/a"
  }, {
    "id": 534,
    "text": "",
    "type": "global variable"
  }, {
    "id": 535,
    "text": "",
    "type": "n/a"
  }, {
    "id": 536,
    "text": "",
    "type": "global variable"
  }, {
    "id": 537,
    "text": "",
    "type": "n/a"
  }, {
    "id": 538,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 539,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 540,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 541,
    "text": "",
    "type": "require local variable"
  } ]
}