{
  "_filename": "bcsave.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luajit/src/jit/bcsave.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 8
  }, {
    "from": 17,
    "label": "has",
    "to": 8
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 8
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 31,
    "label": "has",
    "to": 39
  }, {
    "from": 30,
    "label": "has",
    "to": 40
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 52,
    "label": "has",
    "to": 66
  }, {
    "from": 52,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 8
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 68,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 8
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 8
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 68,
    "label": "has",
    "to": 84
  }, {
    "from": 68,
    "label": "has",
    "to": 85
  }, {
    "from": 68,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 68,
    "label": "has",
    "to": 94
  }, {
    "from": 68,
    "label": "has",
    "to": 95
  }, {
    "from": 68,
    "label": "has",
    "to": 96
  }, {
    "from": 68,
    "label": "has",
    "to": 97
  }, {
    "from": 68,
    "label": "has",
    "to": 98
  }, {
    "from": 68,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 68,
    "label": "has",
    "to": 101
  }, {
    "from": 68,
    "label": "has",
    "to": 102
  }, {
    "from": 68,
    "label": "has",
    "to": 103
  }, {
    "from": 68,
    "label": "has",
    "to": 104
  }, {
    "from": 68,
    "label": "has",
    "to": 105
  }, {
    "from": 68,
    "label": "has",
    "to": 106
  }, {
    "from": 68,
    "label": "has",
    "to": 107
  }, {
    "from": 68,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 108,
    "label": "has",
    "to": 112
  }, {
    "from": 108,
    "label": "has",
    "to": 113
  }, {
    "from": 68,
    "label": "has",
    "to": 114
  }, {
    "from": 68,
    "label": "has",
    "to": 115
  }, {
    "from": 68,
    "label": "has",
    "to": 116
  }, {
    "from": 68,
    "label": "has",
    "to": 117
  }, {
    "from": 68,
    "label": "has",
    "to": 118
  }, {
    "from": 68,
    "label": "has",
    "to": 119
  }, {
    "from": 68,
    "label": "has",
    "to": 120
  }, {
    "from": 68,
    "label": "has",
    "to": 121
  }, {
    "from": 68,
    "label": "has",
    "to": 122
  }, {
    "from": 68,
    "label": "has",
    "to": 123
  }, {
    "from": 68,
    "label": "has",
    "to": 124
  }, {
    "from": 68,
    "label": "has",
    "to": 125
  }, {
    "from": 68,
    "label": "has",
    "to": 126
  }, {
    "from": 68,
    "label": "has",
    "to": 127
  }, {
    "from": 68,
    "label": "has",
    "to": 128
  }, {
    "from": 68,
    "label": "has",
    "to": 129
  }, {
    "from": 68,
    "label": "has",
    "to": 130
  }, {
    "from": 68,
    "label": "has",
    "to": 131
  }, {
    "from": 68,
    "label": "has",
    "to": 132
  }, {
    "from": 68,
    "label": "has",
    "to": 133
  }, {
    "from": 68,
    "label": "has",
    "to": 134
  }, {
    "from": 68,
    "label": "has",
    "to": 135
  }, {
    "from": 68,
    "label": "has",
    "to": 136
  }, {
    "from": 68,
    "label": "has",
    "to": 137
  }, {
    "from": 68,
    "label": "has",
    "to": 138
  }, {
    "from": 68,
    "label": "has",
    "to": 49
  }, {
    "from": 68,
    "label": "has",
    "to": 139
  }, {
    "from": 68,
    "label": "has",
    "to": 50
  }, {
    "from": 68,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 8
  }, {
    "from": 142,
    "label": "has",
    "to": 8
  }, {
    "from": 143,
    "label": "has",
    "to": 8
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 70
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 73
  }, {
    "from": 144,
    "label": "has",
    "to": 149
  }, {
    "from": 144,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 8
  }, {
    "from": 144,
    "label": "has",
    "to": 150
  }, {
    "from": 144,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 78
  }, {
    "from": 151,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 8
  }, {
    "from": 144,
    "label": "has",
    "to": 152
  }, {
    "from": 144,
    "label": "has",
    "to": 85
  }, {
    "from": 144,
    "label": "has",
    "to": 153
  }, {
    "from": 144,
    "label": "has",
    "to": 154
  }, {
    "from": 144,
    "label": "has",
    "to": 155
  }, {
    "from": 144,
    "label": "has",
    "to": 156
  }, {
    "from": 144,
    "label": "has",
    "to": 157
  }, {
    "from": 144,
    "label": "has",
    "to": 158
  }, {
    "from": 144,
    "label": "has",
    "to": 159
  }, {
    "from": 144,
    "label": "has",
    "to": 160
  }, {
    "from": 144,
    "label": "has",
    "to": 161
  }, {
    "from": 144,
    "label": "has",
    "to": 162
  }, {
    "from": 144,
    "label": "has",
    "to": 163
  }, {
    "from": 144,
    "label": "has",
    "to": 164
  }, {
    "from": 144,
    "label": "has",
    "to": 165
  }, {
    "from": 144,
    "label": "has",
    "to": 166
  }, {
    "from": 144,
    "label": "has",
    "to": 167
  }, {
    "from": 144,
    "label": "has",
    "to": 168
  }, {
    "from": 144,
    "label": "has",
    "to": 169
  }, {
    "from": 144,
    "label": "has",
    "to": 170
  }, {
    "from": 144,
    "label": "has",
    "to": 171
  }, {
    "from": 144,
    "label": "has",
    "to": 172
  }, {
    "from": 144,
    "label": "has",
    "to": 173
  }, {
    "from": 144,
    "label": "has",
    "to": 174
  }, {
    "from": 144,
    "label": "has",
    "to": 175
  }, {
    "from": 144,
    "label": "has",
    "to": 176
  }, {
    "from": 144,
    "label": "has",
    "to": 177
  }, {
    "from": 144,
    "label": "has",
    "to": 178
  }, {
    "from": 144,
    "label": "has",
    "to": 179
  }, {
    "from": 144,
    "label": "has",
    "to": 180
  }, {
    "from": 144,
    "label": "has",
    "to": 181
  }, {
    "from": 144,
    "label": "has",
    "to": 182
  }, {
    "from": 144,
    "label": "has",
    "to": 183
  }, {
    "from": 144,
    "label": "has",
    "to": 184
  }, {
    "from": 144,
    "label": "has",
    "to": 185
  }, {
    "from": 144,
    "label": "has",
    "to": 186
  }, {
    "from": 144,
    "label": "has",
    "to": 49
  }, {
    "from": 144,
    "label": "has",
    "to": 139
  }, {
    "from": 144,
    "label": "has",
    "to": 50
  }, {
    "from": 144,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 8
  }, {
    "from": 189,
    "label": "has",
    "to": 8
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 190,
    "label": "has",
    "to": 193
  }, {
    "from": 190,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 190,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 8
  }, {
    "from": 190,
    "label": "has",
    "to": 199
  }, {
    "from": 190,
    "label": "has",
    "to": 200
  }, {
    "from": 190,
    "label": "has",
    "to": 201
  }, {
    "from": 190,
    "label": "has",
    "to": 202
  }, {
    "from": 190,
    "label": "has",
    "to": 203
  }, {
    "from": 190,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 190,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 209,
    "label": "has",
    "to": 212
  }, {
    "from": 209,
    "label": "has",
    "to": 213
  }, {
    "from": 209,
    "label": "has",
    "to": 214
  }, {
    "from": 209,
    "label": "has",
    "to": 215
  }, {
    "from": 207,
    "label": "has",
    "to": 216
  }, {
    "from": 207,
    "label": "has",
    "to": 217
  }, {
    "from": 207,
    "label": "has",
    "to": 218
  }, {
    "from": 207,
    "label": "has",
    "to": 219
  }, {
    "from": 207,
    "label": "has",
    "to": 220
  }, {
    "from": 207,
    "label": "has",
    "to": 221
  }, {
    "from": 207,
    "label": "has",
    "to": 222
  }, {
    "from": 207,
    "label": "has",
    "to": 223
  }, {
    "from": 207,
    "label": "has",
    "to": 224
  }, {
    "from": 207,
    "label": "has",
    "to": 225
  }, {
    "from": 207,
    "label": "has",
    "to": 226
  }, {
    "from": 207,
    "label": "has",
    "to": 227
  }, {
    "from": 207,
    "label": "has",
    "to": 228
  }, {
    "from": 207,
    "label": "has",
    "to": 229
  }, {
    "from": 207,
    "label": "has",
    "to": 230
  }, {
    "from": 207,
    "label": "has",
    "to": 231
  }, {
    "from": 207,
    "label": "has",
    "to": 232
  }, {
    "from": 207,
    "label": "has",
    "to": 233
  }, {
    "from": 207,
    "label": "has",
    "to": 234
  }, {
    "from": 207,
    "label": "has",
    "to": 235
  }, {
    "from": 207,
    "label": "has",
    "to": 236
  }, {
    "from": 207,
    "label": "has",
    "to": 237
  }, {
    "from": 207,
    "label": "has",
    "to": 238
  }, {
    "from": 207,
    "label": "has",
    "to": 239
  }, {
    "from": 207,
    "label": "has",
    "to": 240
  }, {
    "from": 190,
    "label": "has",
    "to": 241
  }, {
    "from": 190,
    "label": "has",
    "to": 242
  }, {
    "from": 190,
    "label": "has",
    "to": 243
  }, {
    "from": 190,
    "label": "has",
    "to": 244
  }, {
    "from": 190,
    "label": "has",
    "to": 49
  }, {
    "from": 190,
    "label": "has",
    "to": 245
  }, {
    "from": 190,
    "label": "has",
    "to": 50
  }, {
    "from": 190,
    "label": "has",
    "to": 246
  }, {
    "from": 247,
    "label": "has",
    "to": 8
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 248,
    "label": "has",
    "to": 8
  }, {
    "from": 248,
    "label": "has",
    "to": 8
  }, {
    "from": 248,
    "label": "has",
    "to": 8
  }, {
    "from": 248,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 253,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 254
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 257,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 257,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 263,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 257,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 271,
    "label": "has",
    "to": 274
  }, {
    "from": 271,
    "label": "has",
    "to": 275
  }, {
    "from": 271,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 278,
    "label": "has",
    "to": 280
  }, {
    "from": 278,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 283,
    "label": "has",
    "to": 286
  }, {
    "from": 283,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 283,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 289,
    "label": "has",
    "to": 292
  }, {
    "from": 289,
    "label": "has",
    "to": 293
  }, {
    "from": 289,
    "label": "has",
    "to": 294
  }, {
    "from": 289,
    "label": "has",
    "to": 295
  }, {
    "from": 289,
    "label": "has",
    "to": 288
  }, {
    "from": 278,
    "label": "has",
    "to": 64
  }, {
    "from": 271,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 288
  }, {
    "from": 296,
    "label": "has",
    "to": 298
  }, {
    "from": 296,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 288
  }, {
    "from": 296,
    "label": "has",
    "to": 300
  }, {
    "from": 271,
    "label": "has",
    "to": 301
  }, {
    "from": 68,
    "label": "calls",
    "to": 317
  }, {
    "from": 68,
    "label": "calls",
    "to": 317
  }, {
    "from": 68,
    "label": "calls",
    "to": 317
  }, {
    "from": 144,
    "label": "calls",
    "to": 317
  }, {
    "from": 144,
    "label": "calls",
    "to": 317
  }, {
    "from": 190,
    "label": "calls",
    "to": 317
  }, {
    "from": 190,
    "label": "calls",
    "to": 317
  }, {
    "from": 190,
    "label": "calls",
    "to": 317
  }, {
    "from": 52,
    "label": "calls",
    "to": 327
  }, {
    "from": 52,
    "label": "calls",
    "to": 327
  }, {
    "from": 2,
    "label": "calls",
    "to": 318
  }, {
    "from": 6,
    "label": "calls",
    "to": 318
  }, {
    "from": 302,
    "label": "calls",
    "to": 306
  }, {
    "from": 68,
    "label": "calls",
    "to": 306
  }, {
    "from": 52,
    "label": "calls",
    "to": 307
  }, {
    "from": 48,
    "label": "calls",
    "to": 42
  }, {
    "from": 52,
    "label": "calls",
    "to": 42
  }, {
    "from": 68,
    "label": "calls",
    "to": 42
  }, {
    "from": 144,
    "label": "calls",
    "to": 42
  }, {
    "from": 190,
    "label": "calls",
    "to": 42
  }, {
    "from": 257,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 17,
    "label": "calls",
    "to": 6
  }, {
    "from": 20,
    "label": "calls",
    "to": 6
  }, {
    "from": 27,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 42,
    "label": "calls",
    "to": 6
  }, {
    "from": 68,
    "label": "calls",
    "to": 6
  }, {
    "from": 190,
    "label": "calls",
    "to": 6
  }, {
    "from": 248,
    "label": "calls",
    "to": 6
  }, {
    "from": 271,
    "label": "calls",
    "to": 6
  }, {
    "from": 20,
    "label": "calls",
    "to": 320
  }, {
    "from": 24,
    "label": "calls",
    "to": 320
  }, {
    "from": 271,
    "label": "calls",
    "to": 320
  }, {
    "from": 68,
    "label": "calls",
    "to": 308
  }, {
    "from": 190,
    "label": "calls",
    "to": 309
  }, {
    "from": 190,
    "label": "calls",
    "to": 309
  }, {
    "from": 190,
    "label": "calls",
    "to": 309
  }, {
    "from": 190,
    "label": "calls",
    "to": 309
  }, {
    "from": 190,
    "label": "calls",
    "to": 309
  }, {
    "from": 190,
    "label": "calls",
    "to": 309
  }, {
    "from": 257,
    "label": "calls",
    "to": 48
  }, {
    "from": 271,
    "label": "calls",
    "to": 2
  }, {
    "from": 271,
    "label": "calls",
    "to": 2
  }, {
    "from": 271,
    "label": "calls",
    "to": 2
  }, {
    "from": 271,
    "label": "calls",
    "to": 2
  }, {
    "from": 271,
    "label": "calls",
    "to": 2
  }, {
    "from": 248,
    "label": "calls",
    "to": 310
  }, {
    "from": 68,
    "label": "calls",
    "to": 304
  }, {
    "from": 68,
    "label": "calls",
    "to": 304
  }, {
    "from": 144,
    "label": "calls",
    "to": 304
  }, {
    "from": 257,
    "label": "calls",
    "to": 30
  }, {
    "from": 271,
    "label": "calls",
    "to": 27
  }, {
    "from": 271,
    "label": "calls",
    "to": 20
  }, {
    "from": 271,
    "label": "calls",
    "to": 20
  }, {
    "from": 271,
    "label": "calls",
    "to": 20
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 68,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 141
  }, {
    "from": 248,
    "label": "calls",
    "to": 144
  }, {
    "from": 68,
    "label": "calls",
    "to": 303
  }, {
    "from": 144,
    "label": "calls",
    "to": 303
  }, {
    "from": 271,
    "label": "calls",
    "to": 257
  }, {
    "from": 190,
    "label": "calls",
    "to": 247
  }, {
    "from": 190,
    "label": "calls",
    "to": 247
  }, {
    "from": 12,
    "label": "calls",
    "to": 328
  }, {
    "from": 52,
    "label": "calls",
    "to": 321
  }, {
    "from": 27,
    "label": "calls",
    "to": 329
  }, {
    "from": 30,
    "label": "calls",
    "to": 329
  }, {
    "from": 271,
    "label": "calls",
    "to": 253
  }, {
    "from": 17,
    "label": "calls",
    "to": 319
  }, {
    "from": 68,
    "label": "calls",
    "to": 319
  }, {
    "from": 302,
    "label": "calls",
    "to": 311
  }, {
    "from": 12,
    "label": "calls",
    "to": 316
  }, {
    "from": 30,
    "label": "calls",
    "to": 316
  }, {
    "from": 271,
    "label": "calls",
    "to": 316
  }, {
    "from": 248,
    "label": "calls",
    "to": 68
  }, {
    "from": 48,
    "label": "calls",
    "to": 17
  }, {
    "from": 52,
    "label": "calls",
    "to": 17
  }, {
    "from": 68,
    "label": "calls",
    "to": 17
  }, {
    "from": 144,
    "label": "calls",
    "to": 17
  }, {
    "from": 190,
    "label": "calls",
    "to": 17
  }, {
    "from": 253,
    "label": "calls",
    "to": 17
  }, {
    "from": 68,
    "label": "calls",
    "to": 330
  }, {
    "from": 144,
    "label": "calls",
    "to": 330
  }, {
    "from": 190,
    "label": "calls",
    "to": 330
  }, {
    "from": 52,
    "label": "calls",
    "to": 333
  }, {
    "from": 52,
    "label": "calls",
    "to": 333
  }, {
    "from": 68,
    "label": "calls",
    "to": 312
  }, {
    "from": 144,
    "label": "calls",
    "to": 312
  }, {
    "from": 190,
    "label": "calls",
    "to": 312
  }, {
    "from": 271,
    "label": "calls",
    "to": 313
  }, {
    "from": 271,
    "label": "calls",
    "to": 313
  }, {
    "from": 257,
    "label": "calls",
    "to": 52
  }, {
    "from": 190,
    "label": "calls",
    "to": 305
  }, {
    "from": 68,
    "label": "calls",
    "to": 314
  }, {
    "from": 144,
    "label": "calls",
    "to": 314
  }, {
    "from": 68,
    "label": "calls",
    "to": 331
  }, {
    "from": 144,
    "label": "calls",
    "to": 331
  }, {
    "from": 190,
    "label": "calls",
    "to": 331
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 143
  }, {
    "from": 68,
    "label": "calls",
    "to": 332
  }, {
    "from": 271,
    "label": "calls",
    "to": 315
  }, {
    "from": 271,
    "label": "calls",
    "to": 315
  }, {
    "from": 271,
    "label": "calls",
    "to": 315
  }, {
    "from": 271,
    "label": "calls",
    "to": 315
  }, {
    "from": 271,
    "label": "calls",
    "to": 315
  }, {
    "from": 253,
    "label": "calls",
    "to": 12
  }, {
    "from": 257,
    "label": "calls",
    "to": 12
  }, {
    "from": 68,
    "label": "calls",
    "to": 142
  }, {
    "from": 68,
    "label": "calls",
    "to": 142
  }, {
    "from": 68,
    "label": "calls",
    "to": 142
  }, {
    "from": 68,
    "label": "calls",
    "to": 142
  }, {
    "from": 68,
    "label": "calls",
    "to": 142
  }, {
    "from": 68,
    "label": "calls",
    "to": 142
  }, {
    "from": 68,
    "label": "calls",
    "to": 142
  }, {
    "from": 144,
    "label": "calls",
    "to": 142
  }, {
    "from": 144,
    "label": "calls",
    "to": 142
  }, {
    "from": 144,
    "label": "calls",
    "to": 142
  }, {
    "from": 144,
    "label": "calls",
    "to": 142
  }, {
    "from": 144,
    "label": "calls",
    "to": 142
  }, {
    "from": 144,
    "label": "calls",
    "to": 142
  }, {
    "from": 271,
    "label": "calls",
    "to": 322
  }, {
    "from": 257,
    "label": "calls",
    "to": 248
  }, {
    "from": 68,
    "label": "calls",
    "to": 326
  }, {
    "from": 68,
    "label": "calls",
    "to": 326
  }, {
    "from": 68,
    "label": "calls",
    "to": 326
  }, {
    "from": 68,
    "label": "calls",
    "to": 326
  }, {
    "from": 68,
    "label": "calls",
    "to": 326
  }, {
    "from": 144,
    "label": "calls",
    "to": 326
  }, {
    "from": 190,
    "label": "calls",
    "to": 326
  }, {
    "from": 190,
    "label": "calls",
    "to": 326
  }, {
    "from": 190,
    "label": "calls",
    "to": 326
  }, {
    "from": 190,
    "label": "calls",
    "to": 326
  }, {
    "from": 190,
    "label": "calls",
    "to": 326
  }, {
    "from": 190,
    "label": "calls",
    "to": 326
  }, {
    "from": 190,
    "label": "calls",
    "to": 326
  }, {
    "from": 190,
    "label": "calls",
    "to": 326
  }, {
    "from": 24,
    "label": "calls",
    "to": 325
  }, {
    "from": 27,
    "label": "calls",
    "to": 325
  }, {
    "from": 30,
    "label": "calls",
    "to": 325
  }, {
    "from": 30,
    "label": "calls",
    "to": 325
  }, {
    "from": 30,
    "label": "calls",
    "to": 325
  }, {
    "from": 257,
    "label": "calls",
    "to": 324
  }, {
    "from": 302,
    "label": "calls",
    "to": 334
  }, {
    "from": 302,
    "label": "calls",
    "to": 334
  }, {
    "from": 253,
    "label": "calls",
    "to": 334
  }, {
    "from": 248,
    "label": "calls",
    "to": 190
  }, {
    "from": 68,
    "label": "calls",
    "to": 323
  }, {
    "from": 68,
    "label": "calls",
    "to": 323
  }, {
    "from": 68,
    "label": "calls",
    "to": 323
  }, {
    "from": 144,
    "label": "calls",
    "to": 323
  }, {
    "from": 144,
    "label": "calls",
    "to": 323
  }, {
    "from": 144,
    "label": "calls",
    "to": 323
  }, {
    "from": 190,
    "label": "calls",
    "to": 323
  }, {
    "from": 190,
    "label": "calls",
    "to": 323
  }, {
    "from": 190,
    "label": "calls",
    "to": 323
  }, {
    "from": 190,
    "label": "calls",
    "to": 323
  }, {
    "from": 1,
    "label": "contains",
    "to": 302
  }, {
    "from": 302,
    "label": "declares",
    "to": 2
  }, {
    "from": 302,
    "label": "declares",
    "to": 6
  }, {
    "from": 302,
    "label": "declares",
    "to": 12
  }, {
    "from": 302,
    "label": "declares",
    "to": 17
  }, {
    "from": 302,
    "label": "declares",
    "to": 20
  }, {
    "from": 302,
    "label": "declares",
    "to": 24
  }, {
    "from": 302,
    "label": "declares",
    "to": 27
  }, {
    "from": 302,
    "label": "declares",
    "to": 30
  }, {
    "from": 302,
    "label": "declares",
    "to": 42
  }, {
    "from": 302,
    "label": "declares",
    "to": 48
  }, {
    "from": 302,
    "label": "declares",
    "to": 52
  }, {
    "from": 302,
    "label": "declares",
    "to": 68
  }, {
    "from": 302,
    "label": "declares",
    "to": 141
  }, {
    "from": 302,
    "label": "declares",
    "to": 142
  }, {
    "from": 302,
    "label": "declares",
    "to": 143
  }, {
    "from": 302,
    "label": "declares",
    "to": 144
  }, {
    "from": 302,
    "label": "declares",
    "to": 188
  }, {
    "from": 302,
    "label": "declares",
    "to": 189
  }, {
    "from": 302,
    "label": "declares",
    "to": 190
  }, {
    "from": 302,
    "label": "declares",
    "to": 247
  }, {
    "from": 302,
    "label": "declares",
    "to": 248
  }, {
    "from": 302,
    "label": "declares",
    "to": 253
  }, {
    "from": 302,
    "label": "declares",
    "to": 257
  }, {
    "from": 302,
    "label": "declares",
    "to": 271
  }, {
    "from": 1,
    "label": "contains",
    "to": 337
  }, {
    "from": 1,
    "label": "contains",
    "to": 338
  }, {
    "from": 337,
    "label": "initializes",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 337,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 342,
    "label": "assigns",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 342,
    "label": "assigns",
    "to": 345
  }, {
    "from": 345,
    "label": "assigns",
    "to": 346
  }, {
    "from": 342,
    "label": "assigns",
    "to": 347
  }, {
    "from": 347,
    "label": "assigns",
    "to": 348
  }, {
    "from": 342,
    "label": "assigns",
    "to": 349
  }, {
    "from": 349,
    "label": "assigns",
    "to": 350
  }, {
    "from": 342,
    "label": "assigns",
    "to": 351
  }, {
    "from": 351,
    "label": "assigns",
    "to": 352
  }, {
    "from": 337,
    "label": "initializes",
    "to": 353
  }, {
    "from": 353,
    "label": "assigns",
    "to": 354
  }, {
    "from": 354,
    "label": "assigns",
    "to": 355
  }, {
    "from": 355,
    "label": "assigns",
    "to": 356
  }, {
    "from": 354,
    "label": "assigns",
    "to": 357
  }, {
    "from": 357,
    "label": "assigns",
    "to": 358
  }, {
    "from": 354,
    "label": "assigns",
    "to": 359
  }, {
    "from": 359,
    "label": "assigns",
    "to": 360
  }, {
    "from": 354,
    "label": "assigns",
    "to": 361
  }, {
    "from": 361,
    "label": "assigns",
    "to": 362
  }, {
    "from": 354,
    "label": "assigns",
    "to": 363
  }, {
    "from": 363,
    "label": "assigns",
    "to": 364
  }, {
    "from": 354,
    "label": "assigns",
    "to": 365
  }, {
    "from": 365,
    "label": "assigns",
    "to": 366
  }, {
    "from": 354,
    "label": "assigns",
    "to": 367
  }, {
    "from": 367,
    "label": "assigns",
    "to": 368
  }, {
    "from": 337,
    "label": "initializes",
    "to": 369
  }, {
    "from": 369,
    "label": "assigns",
    "to": 370
  }, {
    "from": 370,
    "label": "assigns",
    "to": 371
  }, {
    "from": 371,
    "label": "assigns",
    "to": 372
  }, {
    "from": 370,
    "label": "assigns",
    "to": 373
  }, {
    "from": 373,
    "label": "assigns",
    "to": 374
  }, {
    "from": 370,
    "label": "assigns",
    "to": 375
  }, {
    "from": 375,
    "label": "assigns",
    "to": 376
  }, {
    "from": 370,
    "label": "assigns",
    "to": 377
  }, {
    "from": 377,
    "label": "assigns",
    "to": 378
  }, {
    "from": 370,
    "label": "assigns",
    "to": 379
  }, {
    "from": 379,
    "label": "assigns",
    "to": 380
  }, {
    "from": 370,
    "label": "assigns",
    "to": 381
  }, {
    "from": 381,
    "label": "assigns",
    "to": 382
  }, {
    "from": 370,
    "label": "assigns",
    "to": 383
  }, {
    "from": 383,
    "label": "assigns",
    "to": 384
  }, {
    "from": 337,
    "label": "initializes",
    "to": 385
  }, {
    "from": 385,
    "label": "assigns",
    "to": 386
  }, {
    "from": 338,
    "label": "initializes",
    "to": 387
  }, {
    "from": 387,
    "label": "requires",
    "to": 336
  }, {
    "from": 338,
    "label": "initializes",
    "to": 388
  }, {
    "from": 388,
    "label": "requires",
    "to": 335
  }, {
    "from": 338,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "requires",
    "to": 390
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bcsave",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function usage()\r\n  io.stderr:write[[\r\nSave LuaJIT bytecode: luajit -b[options] input output\r\n  -l        Only list bytecode.\r\n  -s        Strip debug info (default).\r\n  -g        Keep debug info.\r\n  -n name   Set module name (default: auto-detect from input name).\r\n  -t type   Set output file type (default: auto-detect from output name).\r\n  -a arch   Override architecture for object files (default: native).\r\n  -o os     Override OS for object files (default: native).\r\n  -e chunk  Use chunk string as input.\r\n  --        Stop handling options.\r\n  -         Use stdin as input and/or stdout as output.\r\n\r\nFile types: c h obj o raw (default)\r\n]]\r\n  os.exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "io.stderr:write[[\r\nSave LuaJIT bytecode: luajit -b[options] input output\r\n  -l        Only list bytecode.\r\n  -s        Strip debug info (default).\r\n  -g        Keep debug info.\r\n  -n name   Set module name (default: auto-detect from input name).\r\n  -t type   Set output file type (default: auto-detect from output name).\r\n  -a arch   Override architecture for object files (default: native).\r\n  -o os     Override OS for object files (default: native).\r\n  -e chunk  Use chunk string as input.\r\n  --        Stop handling options.\r\n  -         Use stdin as input and/or stdout as output.\r\n\r\nFile types: c h obj o raw (default)\r\n]]",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function check(ok, ...)\r\n  if ok then return ok, ... end\r\n  io.stderr:write(\"luajit: \", ...)\r\n  io.stderr:write(\"\\n\")\r\n  os.exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if ok then return ok, ... end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "io.stderr:write(\"luajit: \", ...)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "io.stderr:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function readfile(input)\r\n  if type(input) == \"function\" then return input end\r\n  if input == \"-\" then input = nil end\r\n  return check(loadfile(input))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "if type(input) == \"function\" then return input end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "if input == \"-\" then input = nil end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "input = nil",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function savefile(name, mode)\r\n  if name == \"-\" then return io.stdout end\r\n  return check(io.open(name, mode))\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if name == \"-\" then return io.stdout end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function checkarg(str, map, err)\r\n  str = string.lower(str)\r\n  local s = check(map[str], \"unknown \", err)\r\n  return s == true and str or s\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "str = string.lower(str)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local s = check(map[str], \"unknown \", err)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function detecttype(str)\r\n  local ext = string.match(string.lower(str), \"%.(%a+)$\")\r\n  return map_type[ext] or \"raw\"\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local ext = string.match(string.lower(str), \"%.(%a+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function checkmodname(str)\r\n  check(string.match(str, \"^[%w_.%-]+$\"), \"bad module name\")\r\n  return string.gsub(str, \"[%.%-]\", \"_\")\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "check(string.match(str, \"^[%w_.%-]+$\"), \"bad module name\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function detectmodname(str)\r\n  if type(str) == \"string\" then\r\n    local tail = string.match(str, \"[^/\\\\]+$\")\r\n    if tail then str = tail end\r\n    local head = string.match(str, \"^(.*)%.[^.]*$\")\r\n    if head then str = head end\r\n    str = string.match(str, \"^[%w_.%-]+\")\r\n  else\r\n    str = nil\r\n  end\r\n  check(str, \"cannot derive module name, use -n name\")\r\n  return string.gsub(str, \"[%.%-]\", \"_\")\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if type(str) == \"string\" then\r\n    local tail = string.match(str, \"[^/\\\\]+$\")\r\n    if tail then str = tail end\r\n    local head = string.match(str, \"^(.*)%.[^.]*$\")\r\n    if head then str = head end\r\n    str = string.match(str, \"^[%w_.%-]+\")\r\n  else\r\n    str = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "local tail = string.match(str, \"[^/\\\\]+$\")",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if tail then str = tail end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "str = tail",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local head = string.match(str, \"^(.*)%.[^.]*$\")",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if head then str = head end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "str = head",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "str = string.match(str, \"^[%w_.%-]+\")",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "str = nil",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "check(str, \"cannot derive module name, use -n name\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function bcsave_tail(fp, output, s)\r\n  local ok, err = fp:write(s)\r\n  if ok and output ~= \"-\" then ok, err = fp:close() end\r\n  check(ok, \"cannot write \", output, \": \", err)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local ok, err = fp:write(s)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if ok and output ~= \"-\" then ok, err = fp:close() end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "ok, err = fp:close()",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "check(ok, \"cannot write \", output, \": \", err)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function bcsave_raw(output, s)\r\n  local fp = savefile(output, \"wb\")\r\n  bcsave_tail(fp, output, s)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local fp = savefile(output, \"wb\")",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "bcsave_tail(fp, output, s)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function bcsave_c(ctx, output, s)\r\n  local fp = savefile(output, \"w\")\r\n  if ctx.type == \"c\" then\r\n    fp:write(string.format([[\r\n#ifdef _cplusplus\r\nextern \"C\"\r\n#endif\r\n#ifdef _WIN32\r\n__declspec(dllexport)\r\n#endif\r\nconst char %s%s[] = {\r\n]], LJBC_PREFIX, ctx.modname))\r\n  else\r\n    fp:write(string.format([[\r\n#define %s%s_SIZE %d\r\nstatic const char %s%s[] = {\r\n]], LJBC_PREFIX, ctx.modname, #s, LJBC_PREFIX, ctx.modname))\r\n  end\r\n  local t, n, m = {}, 0, 0\r\n  for i=1,#s do\r\n    local b = tostring(string.byte(s, i))\r\n    m = m + #b + 1\r\n    if m > 78 then\r\n      fp:write(table.concat(t, \",\", 1, n), \",\\n\")\r\n      n, m = 0, #b + 1\r\n    end\r\n    n = n + 1\r\n    t[n] = b\r\n  end\r\n  bcsave_tail(fp, output, table.concat(t, \",\", 1, n)..\"\\n};\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local fp = savefile(output, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if ctx.type == \"c\" then\r\n    fp:write(string.format([[\r\n#ifdef _cplusplus\r\nextern \"C\"\r\n#endif\r\n#ifdef _WIN32\r\n__declspec(dllexport)\r\n#endif\r\nconst char %s%s[] = {\r\n]], LJBC_PREFIX, ctx.modname))\r\n  else\r\n    fp:write(string.format([[\r\n#define %s%s_SIZE %d\r\nstatic const char %s%s[] = {\r\n]], LJBC_PREFIX, ctx.modname, #s, LJBC_PREFIX, ctx.modname))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "fp:write(string.format([[\r\n#ifdef _cplusplus\r\nextern \"C\"\r\n#endif\r\n#ifdef _WIN32\r\n__declspec(dllexport)\r\n#endif\r\nconst char %s%s[] = {\r\n]], LJBC_PREFIX, ctx.modname))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "fp:write(string.format([[\r\n#define %s%s_SIZE %d\r\nstatic const char %s%s[] = {\r\n]], LJBC_PREFIX, ctx.modname, #s, LJBC_PREFIX, ctx.modname))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "local t, n, m = {}, 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "for i=1,#s do\r\n    local b = tostring(string.byte(s, i))\r\n    m = m + #b + 1\r\n    if m > 78 then\r\n      fp:write(table.concat(t, \",\", 1, n), \",\\n\")\r\n      n, m = 0, #b + 1\r\n    end\r\n    n = n + 1\r\n    t[n] = b\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 59,
    "text": "local b = tostring(string.byte(s, i))",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "m = m + #b + 1",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if m > 78 then\r\n      fp:write(table.concat(t, \",\", 1, n), \",\\n\")\r\n      n, m = 0, #b + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "fp:write(table.concat(t, \",\", 1, n), \",\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "n, m = 0, #b + 1",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "t[n] = b",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "bcsave_tail(fp, output, table.concat(t, \",\", 1, n)..\"\\n};\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function bcsave_elfobj(ctx, output, s, ffi)\r\n  ffi.cdef[[\r\ntypedef struct {\r\n  uint8_t emagic[4], eclass, eendian, eversion, eosabi, eabiversion, epad[7];\r\n  uint16_t type, machine;\r\n  uint32_t version;\r\n  uint32_t entry, phofs, shofs;\r\n  uint32_t flags;\r\n  uint16_t ehsize, phentsize, phnum, shentsize, shnum, shstridx;\r\n} ELF32header;\r\ntypedef struct {\r\n  uint8_t emagic[4], eclass, eendian, eversion, eosabi, eabiversion, epad[7];\r\n  uint16_t type, machine;\r\n  uint32_t version;\r\n  uint64_t entry, phofs, shofs;\r\n  uint32_t flags;\r\n  uint16_t ehsize, phentsize, phnum, shentsize, shnum, shstridx;\r\n} ELF64header;\r\ntypedef struct {\r\n  uint32_t name, type, flags, addr, ofs, size, link, info, align, entsize;\r\n} ELF32sectheader;\r\ntypedef struct {\r\n  uint32_t name, type;\r\n  uint64_t flags, addr, ofs, size;\r\n  uint32_t link, info;\r\n  uint64_t align, entsize;\r\n} ELF64sectheader;\r\ntypedef struct {\r\n  uint32_t name, value, size;\r\n  uint8_t info, other;\r\n  uint16_t sectidx;\r\n} ELF32symbol;\r\ntypedef struct {\r\n  uint32_t name;\r\n  uint8_t info, other;\r\n  uint16_t sectidx;\r\n  uint64_t value, size;\r\n} ELF64symbol;\r\ntypedef struct {\r\n  ELF32header hdr;\r\n  ELF32sectheader sect[6];\r\n  ELF32symbol sym[2];\r\n  uint8_t space[4096];\r\n} ELF32obj;\r\ntypedef struct {\r\n  ELF64header hdr;\r\n  ELF64sectheader sect[6];\r\n  ELF64symbol sym[2];\r\n  uint8_t space[4096];\r\n} ELF64obj;\r\n]]\r\n  local symname = LJBC_PREFIX..ctx.modname\r\n  local is64, isbe = false, false\r\n  if ctx.arch == \"x64\" then\r\n    is64 = true\r\n  elseif ctx.arch == \"ppc\" or ctx.arch == \"ppcspe\" or ctx.arch == \"mips\" then\r\n    isbe = true\r\n  end\r\n\r\n  -- Handle different host/target endianess.\r\n  local function f32(x) return x end\r\n  local f16, fofs = f32, f32\r\n  if ffi.abi(\"be\") ~= isbe then\r\n    f32 = bit.bswap\r\n    function f16(x) return bit.rshift(bit.bswap(x), 16) end\r\n    if is64 then\r\n      local two32 = ffi.cast(\"int64_t\", 2^32)\r\n      function fofs(x) return bit.bswap(x)*two32 end\r\n    else\r\n      fofs = f32\r\n    end\r\n  end\r\n\r\n  -- Create ELF object and fill in header.\r\n  local o = ffi.new(is64 and \"ELF64obj\" or \"ELF32obj\")\r\n  local hdr = o.hdr\r\n  if ctx.os == \"bsd\" or ctx.os == \"other\" then -- Determine native hdr.eosabi.\r\n    local bf = assert(io.open(\"/bin/ls\", \"rb\"))\r\n    local bs = bf:read(9)\r\n    bf:close()\r\n    ffi.copy(o, bs, 9)\r\n    check(hdr.emagic[0] == 127, \"no support for writing native object files\")\r\n  else\r\n    hdr.emagic = \"\\127ELF\"\r\n    hdr.eosabi = ({ freebsd=9, netbsd=2, openbsd=12, solaris=6 })[ctx.os] or 0\r\n  end\r\n  hdr.eclass = is64 and 2 or 1\r\n  hdr.eendian = isbe and 2 or 1\r\n  hdr.eversion = 1\r\n  hdr.type = f16(1)\r\n  hdr.machine = f16(({ x86=3, x64=62, arm=40, ppc=20, ppcspe=20, mips=8, mipsel=8 })[ctx.arch])\r\n  if ctx.arch == \"mips\" or ctx.arch == \"mipsel\" then\r\n    hdr.flags = 0x50001006\r\n  end\r\n  hdr.version = f32(1)\r\n  hdr.shofs = fofs(ffi.offsetof(o, \"sect\"))\r\n  hdr.ehsize = f16(ffi.sizeof(hdr))\r\n  hdr.shentsize = f16(ffi.sizeof(o.sect[0]))\r\n  hdr.shnum = f16(6)\r\n  hdr.shstridx = f16(2)\r\n\r\n  -- Fill in sections and symbols.\r\n  local sofs, ofs = ffi.offsetof(o, \"space\"), 1\r\n  for i,name in ipairs{\r\n      \".symtab\", \".shstrtab\", \".strtab\", \".rodata\", \".note.GNU-stack\",\r\n    } do\r\n    local sect = o.sect[i]\r\n    sect.align = fofs(1)\r\n    sect.name = f32(ofs)\r\n    ffi.copy(o.space+ofs, name)\r\n    ofs = ofs + #name+1\r\n  end\r\n  o.sect[1].type = f32(2) -- .symtab\r\n  o.sect[1].link = f32(3)\r\n  o.sect[1].info = f32(1)\r\n  o.sect[1].align = fofs(8)\r\n  o.sect[1].ofs = fofs(ffi.offsetof(o, \"sym\"))\r\n  o.sect[1].entsize = fofs(ffi.sizeof(o.sym[0]))\r\n  o.sect[1].size = fofs(ffi.sizeof(o.sym))\r\n  o.sym[1].name = f32(1)\r\n  o.sym[1].sectidx = f16(4)\r\n  o.sym[1].size = fofs(#s)\r\n  o.sym[1].info = 17\r\n  o.sect[2].type = f32(3) -- .shstrtab\r\n  o.sect[2].ofs = fofs(sofs)\r\n  o.sect[2].size = fofs(ofs)\r\n  o.sect[3].type = f32(3) -- .strtab\r\n  o.sect[3].ofs = fofs(sofs + ofs)\r\n  o.sect[3].size = fofs(#symname+1)\r\n  ffi.copy(o.space+ofs+1, symname)\r\n  ofs = ofs + #symname + 2\r\n  o.sect[4].type = f32(1) -- .rodata\r\n  o.sect[4].flags = fofs(2)\r\n  o.sect[4].ofs = fofs(sofs + ofs)\r\n  o.sect[4].size = fofs(#s)\r\n  o.sect[5].type = f32(1) -- .note.GNU-stack\r\n  o.sect[5].ofs = fofs(sofs + ofs + #s)\r\n\r\n  -- Write ELF object file.\r\n  local fp = savefile(output, \"wb\")\r\n  fp:write(ffi.string(o, ffi.sizeof(o)-4096+ofs))\r\n  bcsave_tail(fp, output, s)\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "ffi.cdef[[\r\ntypedef struct {\r\n  uint8_t emagic[4], eclass, eendian, eversion, eosabi, eabiversion, epad[7];\r\n  uint16_t type, machine;\r\n  uint32_t version;\r\n  uint32_t entry, phofs, shofs;\r\n  uint32_t flags;\r\n  uint16_t ehsize, phentsize, phnum, shentsize, shnum, shstridx;\r\n} ELF32header;\r\ntypedef struct {\r\n  uint8_t emagic[4], eclass, eendian, eversion, eosabi, eabiversion, epad[7];\r\n  uint16_t type, machine;\r\n  uint32_t version;\r\n  uint64_t entry, phofs, shofs;\r\n  uint32_t flags;\r\n  uint16_t ehsize, phentsize, phnum, shentsize, shnum, shstridx;\r\n} ELF64header;\r\ntypedef struct {\r\n  uint32_t name, type, flags, addr, ofs, size, link, info, align, entsize;\r\n} ELF32sectheader;\r\ntypedef struct {\r\n  uint32_t name, type;\r\n  uint64_t flags, addr, ofs, size;\r\n  uint32_t link, info;\r\n  uint64_t align, entsize;\r\n} ELF64sectheader;\r\ntypedef struct {\r\n  uint32_t name, value, size;\r\n  uint8_t info, other;\r\n  uint16_t sectidx;\r\n} ELF32symbol;\r\ntypedef struct {\r\n  uint32_t name;\r\n  uint8_t info, other;\r\n  uint16_t sectidx;\r\n  uint64_t value, size;\r\n} ELF64symbol;\r\ntypedef struct {\r\n  ELF32header hdr;\r\n  ELF32sectheader sect[6];\r\n  ELF32symbol sym[2];\r\n  uint8_t space[4096];\r\n} ELF32obj;\r\ntypedef struct {\r\n  ELF64header hdr;\r\n  ELF64sectheader sect[6];\r\n  ELF64symbol sym[2];\r\n  uint8_t space[4096];\r\n} ELF64obj;\r\n]]",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "local symname = LJBC_PREFIX..ctx.modname",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local is64, isbe = false, false",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if ctx.arch == \"x64\" then\r\n    is64 = true\r\n  elseif ctx.arch == \"ppc\" or ctx.arch == \"ppcspe\" or ctx.arch == \"mips\" then\r\n    isbe = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "is64 = true",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "isbe = true",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "local function f32(x) return x end",
    "type": "statement:localfunction"
  }, {
    "id": 76,
    "text": "local f16, fofs = f32, f32",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if ffi.abi(\"be\") ~= isbe then\r\n    f32 = bit.bswap\r\n    function f16(x) return bit.rshift(bit.bswap(x), 16) end\r\n    if is64 then\r\n      local two32 = ffi.cast(\"int64_t\", 2^32)\r\n      function fofs(x) return bit.bswap(x)*two32 end\r\n    else\r\n      fofs = f32\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "f32 = bit.bswap",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "function f16(x) return bit.rshift(bit.bswap(x), 16) end",
    "type": "statement:globalfunction"
  }, {
    "id": 80,
    "text": "if is64 then\r\n      local two32 = ffi.cast(\"int64_t\", 2^32)\r\n      function fofs(x) return bit.bswap(x)*two32 end\r\n    else\r\n      fofs = f32\r\n    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "local two32 = ffi.cast(\"int64_t\", 2^32)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "function fofs(x) return bit.bswap(x)*two32 end",
    "type": "statement:globalfunction"
  }, {
    "id": 83,
    "text": "fofs = f32",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "local o = ffi.new(is64 and \"ELF64obj\" or \"ELF32obj\")",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local hdr = o.hdr",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if ctx.os == \"bsd\" or ctx.os == \"other\" then -- Determine native hdr.eosabi.\r\n    local bf = assert(io.open(\"/bin/ls\", \"rb\"))\r\n    local bs = bf:read(9)\r\n    bf:close()\r\n    ffi.copy(o, bs, 9)\r\n    check(hdr.emagic[0] == 127, \"no support for writing native object files\")\r\n  else\r\n    hdr.emagic = \"\\127ELF\"\r\n    hdr.eosabi = ({ freebsd=9, netbsd=2, openbsd=12, solaris=6 })[ctx.os] or 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "local bf = assert(io.open(\"/bin/ls\", \"rb\"))",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local bs = bf:read(9)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "bf:close()",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "ffi.copy(o, bs, 9)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "check(hdr.emagic[0] == 127, \"no support for writing native object files\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "hdr.emagic = \"\\127ELF\"",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "hdr.eosabi = ({ freebsd=9, netbsd=2, openbsd=12, solaris=6 })[ctx.os] or 0",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "hdr.eclass = is64 and 2 or 1",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "hdr.eendian = isbe and 2 or 1",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "hdr.eversion = 1",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "hdr.type = f16(1)",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "hdr.machine = f16(({ x86=3, x64=62, arm=40, ppc=20, ppcspe=20, mips=8, mipsel=8 })[ctx.arch])",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if ctx.arch == \"mips\" or ctx.arch == \"mipsel\" then\r\n    hdr.flags = 0x50001006\r\n  end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "hdr.flags = 0x50001006",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "hdr.version = f32(1)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "hdr.shofs = fofs(ffi.offsetof(o, \"sect\"))",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "hdr.ehsize = f16(ffi.sizeof(hdr))",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "hdr.shentsize = f16(ffi.sizeof(o.sect[0]))",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "hdr.shnum = f16(6)",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "hdr.shstridx = f16(2)",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "local sofs, ofs = ffi.offsetof(o, \"space\"), 1",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "for i,name in ipairs{\r\n      \".symtab\", \".shstrtab\", \".strtab\", \".rodata\", \".note.GNU-stack\",\r\n    } do\r\n    local sect = o.sect[i]\r\n    sect.align = fofs(1)\r\n    sect.name = f32(ofs)\r\n    ffi.copy(o.space+ofs, name)\r\n    ofs = ofs + #name+1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 109,
    "text": "local sect = o.sect[i]",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "sect.align = fofs(1)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "sect.name = f32(ofs)",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "ffi.copy(o.space+ofs, name)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "ofs = ofs + #name+1",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "o.sect[1].type = f32(2)",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "o.sect[1].link = f32(3)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "o.sect[1].info = f32(1)",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "o.sect[1].align = fofs(8)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "o.sect[1].ofs = fofs(ffi.offsetof(o, \"sym\"))",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "o.sect[1].entsize = fofs(ffi.sizeof(o.sym[0]))",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "o.sect[1].size = fofs(ffi.sizeof(o.sym))",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "o.sym[1].name = f32(1)",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "o.sym[1].sectidx = f16(4)",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "o.sym[1].size = fofs(#s)",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "o.sym[1].info = 17",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "o.sect[2].type = f32(3)",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "o.sect[2].ofs = fofs(sofs)",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "o.sect[2].size = fofs(ofs)",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "o.sect[3].type = f32(3)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "o.sect[3].ofs = fofs(sofs + ofs)",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "o.sect[3].size = fofs(#symname+1)",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "ffi.copy(o.space+ofs+1, symname)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "ofs = ofs + #symname + 2",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "o.sect[4].type = f32(1)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "o.sect[4].flags = fofs(2)",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "o.sect[4].ofs = fofs(sofs + ofs)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "o.sect[4].size = fofs(#s)",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "o.sect[5].type = f32(1)",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "o.sect[5].ofs = fofs(sofs + ofs + #s)",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "fp:write(ffi.string(o, ffi.sizeof(o)-4096+ofs))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "local function f32(x) return x end",
    "type": "function"
  }, {
    "id": 142,
    "text": "function f16(x) return bit.rshift(bit.bswap(x), 16) end",
    "type": "function"
  }, {
    "id": 143,
    "text": "function fofs(x) return bit.bswap(x)*two32 end",
    "type": "function"
  }, {
    "id": 144,
    "text": "local function bcsave_peobj(ctx, output, s, ffi)\r\n  ffi.cdef[[\r\ntypedef struct {\r\n  uint16_t arch, nsects;\r\n  uint32_t time, symtabofs, nsyms;\r\n  uint16_t opthdrsz, flags;\r\n} PEheader;\r\ntypedef struct {\r\n  char name[8];\r\n  uint32_t vsize, vaddr, size, ofs, relocofs, lineofs;\r\n  uint16_t nreloc, nline;\r\n  uint32_t flags;\r\n} PEsection;\r\ntypedef struct __attribute((packed)) {\r\n  union {\r\n    char name[8];\r\n    uint32_t nameref[2];\r\n  };\r\n  uint32_t value;\r\n  int16_t sect;\r\n  uint16_t type;\r\n  uint8_t scl, naux;\r\n} PEsym;\r\ntypedef struct __attribute((packed)) {\r\n  uint32_t size;\r\n  uint16_t nreloc, nline;\r\n  uint32_t cksum;\r\n  uint16_t assoc;\r\n  uint8_t comdatsel, unused[3];\r\n} PEsymaux;\r\ntypedef struct {\r\n  PEheader hdr;\r\n  PEsection sect[2];\r\n  // Must be an even number of symbol structs.\r\n  PEsym sym0;\r\n  PEsymaux sym0aux;\r\n  PEsym sym1;\r\n  PEsymaux sym1aux;\r\n  PEsym sym2;\r\n  PEsym sym3;\r\n  uint32_t strtabsize;\r\n  uint8_t space[4096];\r\n} PEobj;\r\n]]\r\n  local symname = LJBC_PREFIX..ctx.modname\r\n  local is64 = false\r\n  if ctx.arch == \"x86\" then\r\n    symname = \"_\"..symname\r\n  elseif ctx.arch == \"x64\" then\r\n    is64 = true\r\n  end\r\n  local symexport = \"   /EXPORT:\"..symname..\",DATA \"\r\n\r\n  -- The file format is always little-endian. Swap if the host is big-endian.\r\n  local function f32(x) return x end\r\n  local f16 = f32\r\n  if ffi.abi(\"be\") then\r\n    f32 = bit.bswap\r\n    function f16(x) return bit.rshift(bit.bswap(x), 16) end\r\n  end\r\n\r\n  -- Create PE object and fill in header.\r\n  local o = ffi.new(\"PEobj\")\r\n  local hdr = o.hdr\r\n  hdr.arch = f16(({ x86=0x14c, x64=0x8664, arm=0x1c0, ppc=0x1f2, mips=0x366, mipsel=0x366 })[ctx.arch])\r\n  hdr.nsects = f16(2)\r\n  hdr.symtabofs = f32(ffi.offsetof(o, \"sym0\"))\r\n  hdr.nsyms = f32(6)\r\n\r\n  -- Fill in sections and symbols.\r\n  o.sect[0].name = \".drectve\"\r\n  o.sect[0].size = f32(#symexport)\r\n  o.sect[0].flags = f32(0x00100a00)\r\n  o.sym0.sect = f16(1)\r\n  o.sym0.scl = 3\r\n  o.sym0.name = \".drectve\"\r\n  o.sym0.naux = 1\r\n  o.sym0aux.size = f32(#symexport)\r\n  o.sect[1].name = \".rdata\"\r\n  o.sect[1].size = f32(#s)\r\n  o.sect[1].flags = f32(0x40300040)\r\n  o.sym1.sect = f16(2)\r\n  o.sym1.scl = 3\r\n  o.sym1.name = \".rdata\"\r\n  o.sym1.naux = 1\r\n  o.sym1aux.size = f32(#s)\r\n  o.sym2.sect = f16(2)\r\n  o.sym2.scl = 2\r\n  o.sym2.nameref[1] = f32(4)\r\n  o.sym3.sect = f16(-1)\r\n  o.sym3.scl = 2\r\n  o.sym3.value = f32(1)\r\n  o.sym3.name = \"@feat.00\" -- Mark as SafeSEH compliant.\r\n  ffi.copy(o.space, symname)\r\n  local ofs = #symname + 1\r\n  o.strtabsize = f32(ofs + 4)\r\n  o.sect[0].ofs = f32(ffi.offsetof(o, \"space\") + ofs)\r\n  ffi.copy(o.space + ofs, symexport)\r\n  ofs = ofs + #symexport\r\n  o.sect[1].ofs = f32(ffi.offsetof(o, \"space\") + ofs)\r\n\r\n  -- Write PE object file.\r\n  local fp = savefile(output, \"wb\")\r\n  fp:write(ffi.string(o, ffi.sizeof(o)-4096+ofs))\r\n  bcsave_tail(fp, output, s)\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "ffi.cdef[[\r\ntypedef struct {\r\n  uint16_t arch, nsects;\r\n  uint32_t time, symtabofs, nsyms;\r\n  uint16_t opthdrsz, flags;\r\n} PEheader;\r\ntypedef struct {\r\n  char name[8];\r\n  uint32_t vsize, vaddr, size, ofs, relocofs, lineofs;\r\n  uint16_t nreloc, nline;\r\n  uint32_t flags;\r\n} PEsection;\r\ntypedef struct __attribute((packed)) {\r\n  union {\r\n    char name[8];\r\n    uint32_t nameref[2];\r\n  };\r\n  uint32_t value;\r\n  int16_t sect;\r\n  uint16_t type;\r\n  uint8_t scl, naux;\r\n} PEsym;\r\ntypedef struct __attribute((packed)) {\r\n  uint32_t size;\r\n  uint16_t nreloc, nline;\r\n  uint32_t cksum;\r\n  uint16_t assoc;\r\n  uint8_t comdatsel, unused[3];\r\n} PEsymaux;\r\ntypedef struct {\r\n  PEheader hdr;\r\n  PEsection sect[2];\r\n  // Must be an even number of symbol structs.\r\n  PEsym sym0;\r\n  PEsymaux sym0aux;\r\n  PEsym sym1;\r\n  PEsymaux sym1aux;\r\n  PEsym sym2;\r\n  PEsym sym3;\r\n  uint32_t strtabsize;\r\n  uint8_t space[4096];\r\n} PEobj;\r\n]]",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "local is64 = false",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "if ctx.arch == \"x86\" then\r\n    symname = \"_\"..symname\r\n  elseif ctx.arch == \"x64\" then\r\n    is64 = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "symname = \"_\"..symname",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "local symexport = \"   /EXPORT:\"..symname..\",DATA \"",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "local f16 = f32",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "if ffi.abi(\"be\") then\r\n    f32 = bit.bswap\r\n    function f16(x) return bit.rshift(bit.bswap(x), 16) end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "local o = ffi.new(\"PEobj\")",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "hdr.arch = f16(({ x86=0x14c, x64=0x8664, arm=0x1c0, ppc=0x1f2, mips=0x366, mipsel=0x366 })[ctx.arch])",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "hdr.nsects = f16(2)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "hdr.symtabofs = f32(ffi.offsetof(o, \"sym0\"))",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "hdr.nsyms = f32(6)",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "o.sect[0].name = \".drectve\"",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "o.sect[0].size = f32(#symexport)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "o.sect[0].flags = f32(0x00100a00)",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "o.sym0.sect = f16(1)",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "o.sym0.scl = 3",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "o.sym0.name = \".drectve\"",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "o.sym0.naux = 1",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "o.sym0aux.size = f32(#symexport)",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "o.sect[1].name = \".rdata\"",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "o.sect[1].size = f32(#s)",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "o.sect[1].flags = f32(0x40300040)",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "o.sym1.sect = f16(2)",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "o.sym1.scl = 3",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "o.sym1.name = \".rdata\"",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "o.sym1.naux = 1",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "o.sym1aux.size = f32(#s)",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "o.sym2.sect = f16(2)",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "o.sym2.scl = 2",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "o.sym2.nameref[1] = f32(4)",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "o.sym3.sect = f16(-1)",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "o.sym3.scl = 2",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "o.sym3.value = f32(1)",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "o.sym3.name = \"@feat.00\"",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "ffi.copy(o.space, symname)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "local ofs = #symname + 1",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "o.strtabsize = f32(ofs + 4)",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "o.sect[0].ofs = f32(ffi.offsetof(o, \"space\") + ofs)",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "ffi.copy(o.space + ofs, symexport)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "ofs = ofs + #symexport",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "o.sect[1].ofs = f32(ffi.offsetof(o, \"space\") + ofs)",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "local function f32(x) return x end",
    "type": "function"
  }, {
    "id": 189,
    "text": "function f16(x) return bit.rshift(bit.bswap(x), 16) end",
    "type": "function"
  }, {
    "id": 190,
    "text": "local function bcsave_machobj(ctx, output, s, ffi)\r\n  ffi.cdef[[\r\ntypedef struct\r\n{\r\n  uint32_t magic, cputype, cpusubtype, filetype, ncmds, sizeofcmds, flags;\r\n} mach_header;\r\ntypedef struct\r\n{\r\n  mach_header; uint32_t reserved;\r\n} mach_header_64;\r\ntypedef struct {\r\n  uint32_t cmd, cmdsize;\r\n  char segname[16];\r\n  uint32_t vmaddr, vmsize, fileoff, filesize;\r\n  uint32_t maxprot, initprot, nsects, flags;\r\n} mach_segment_command;\r\ntypedef struct {\r\n  uint32_t cmd, cmdsize;\r\n  char segname[16];\r\n  uint64_t vmaddr, vmsize, fileoff, filesize;\r\n  uint32_t maxprot, initprot, nsects, flags;\r\n} mach_segment_command_64;\r\ntypedef struct {\r\n  char sectname[16], segname[16];\r\n  uint32_t addr, size;\r\n  uint32_t offset, align, reloff, nreloc, flags;\r\n  uint32_t reserved1, reserved2;\r\n} mach_section;\r\ntypedef struct {\r\n  char sectname[16], segname[16];\r\n  uint64_t addr, size;\r\n  uint32_t offset, align, reloff, nreloc, flags;\r\n  uint32_t reserved1, reserved2, reserved3;\r\n} mach_section_64;\r\ntypedef struct {\r\n  uint32_t cmd, cmdsize, symoff, nsyms, stroff, strsize;\r\n} mach_symtab_command;\r\ntypedef struct {\r\n  int32_t strx;\r\n  uint8_t type, sect;\r\n  int16_t desc;\r\n  uint32_t value;\r\n} mach_nlist;\r\ntypedef struct {\r\n  uint32_t strx;\r\n  uint8_t type, sect;\r\n  uint16_t desc;\r\n  uint64_t value;\r\n} mach_nlist_64;\r\ntypedef struct\r\n{\r\n  uint32_t magic, nfat_arch;\r\n} mach_fat_header;\r\ntypedef struct\r\n{\r\n  uint32_t cputype, cpusubtype, offset, size, align;\r\n} mach_fat_arch;\r\ntypedef struct {\r\n  struct {\r\n    mach_header hdr;\r\n    mach_segment_command seg;\r\n    mach_section sec;\r\n    mach_symtab_command sym;\r\n  } arch[1];\r\n  mach_nlist sym_entry;\r\n  uint8_t space[4096];\r\n} mach_obj;\r\ntypedef struct {\r\n  struct {\r\n    mach_header_64 hdr;\r\n    mach_segment_command_64 seg;\r\n    mach_section_64 sec;\r\n    mach_symtab_command sym;\r\n  } arch[1];\r\n  mach_nlist_64 sym_entry;\r\n  uint8_t space[4096];\r\n} mach_obj_64;\r\ntypedef struct {\r\n  mach_fat_header fat;\r\n  mach_fat_arch fat_arch[4];\r\n  struct {\r\n    mach_header hdr;\r\n    mach_segment_command seg;\r\n    mach_section sec;\r\n    mach_symtab_command sym;\r\n  } arch[4];\r\n  mach_nlist sym_entry;\r\n  uint8_t space[4096];\r\n} mach_fat_obj;\r\n]]\r\n  local symname = '_'..LJBC_PREFIX..ctx.modname\r\n  local isfat, is64, align, mobj = false, false, 4, \"mach_obj\"\r\n  if ctx.arch == \"x64\" then\r\n    is64, align, mobj = true, 8, \"mach_obj_64\"\r\n  elseif ctx.arch == \"arm\" then\r\n    isfat, mobj = true, \"mach_fat_obj\"\r\n  else\r\n    check(ctx.arch == \"x86\", \"unsupported architecture for OSX\")\r\n  end\r\n  local function aligned(v, a) return bit.band(v+a-1, -a) end\r\n  local be32 = bit.bswap -- Mach-O FAT is BE, supported archs are LE.\r\n\r\n  -- Create Mach-O object and fill in header.\r\n  local o = ffi.new(mobj)\r\n  local mach_size = aligned(ffi.offsetof(o, \"space\")+#symname+2, align)\r\n  local cputype = ({ x86={7}, x64={0x01000007}, arm={7,12,12,12} })[ctx.arch]\r\n  local cpusubtype = ({ x86={3}, x64={3}, arm={3,6,9,11} })[ctx.arch]\r\n  if isfat then\r\n    o.fat.magic = be32(0xcafebabe)\r\n    o.fat.nfat_arch = be32(#cpusubtype)\r\n  end\r\n\r\n  -- Fill in sections and symbols.\r\n  for i=0,#cpusubtype-1 do\r\n    local ofs = 0\r\n    if isfat then\r\n      local a = o.fat_arch[i]\r\n      a.cputype = be32(cputype[i+1])\r\n      a.cpusubtype = be32(cpusubtype[i+1])\r\n      -- Subsequent slices overlap each other to share data.\r\n      ofs = ffi.offsetof(o, \"arch\") + i*ffi.sizeof(o.arch[0])\r\n      a.offset = be32(ofs)\r\n      a.size = be32(mach_size-ofs+#s)\r\n    end\r\n    local a = o.arch[i]\r\n    a.hdr.magic = is64 and 0xfeedfacf or 0xfeedface\r\n    a.hdr.cputype = cputype[i+1]\r\n    a.hdr.cpusubtype = cpusubtype[i+1]\r\n    a.hdr.filetype = 1\r\n    a.hdr.ncmds = 2\r\n    a.hdr.sizeofcmds = ffi.sizeof(a.seg)+ffi.sizeof(a.sec)+ffi.sizeof(a.sym)\r\n    a.seg.cmd = is64 and 0x19 or 0x1\r\n    a.seg.cmdsize = ffi.sizeof(a.seg)+ffi.sizeof(a.sec)\r\n    a.seg.vmsize = #s\r\n    a.seg.fileoff = mach_size-ofs\r\n    a.seg.filesize = #s\r\n    a.seg.maxprot = 1\r\n    a.seg.initprot = 1\r\n    a.seg.nsects = 1\r\n    ffi.copy(a.sec.sectname, \"__data\")\r\n    ffi.copy(a.sec.segname, \"__DATA\")\r\n    a.sec.size = #s\r\n    a.sec.offset = mach_size-ofs\r\n    a.sym.cmd = 2\r\n    a.sym.cmdsize = ffi.sizeof(a.sym)\r\n    a.sym.symoff = ffi.offsetof(o, \"sym_entry\")-ofs\r\n    a.sym.nsyms = 1\r\n    a.sym.stroff = ffi.offsetof(o, \"sym_entry\")+ffi.sizeof(o.sym_entry)-ofs\r\n    a.sym.strsize = aligned(#symname+2, align)\r\n  end\r\n  o.sym_entry.type = 0xf\r\n  o.sym_entry.sect = 1\r\n  o.sym_entry.strx = 1\r\n  ffi.copy(o.space+1, symname)\r\n\r\n  -- Write Macho-O object file.\r\n  local fp = savefile(output, \"wb\")\r\n  fp:write(ffi.string(o, mach_size))\r\n  bcsave_tail(fp, output, s)\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "ffi.cdef[[\r\ntypedef struct\r\n{\r\n  uint32_t magic, cputype, cpusubtype, filetype, ncmds, sizeofcmds, flags;\r\n} mach_header;\r\ntypedef struct\r\n{\r\n  mach_header; uint32_t reserved;\r\n} mach_header_64;\r\ntypedef struct {\r\n  uint32_t cmd, cmdsize;\r\n  char segname[16];\r\n  uint32_t vmaddr, vmsize, fileoff, filesize;\r\n  uint32_t maxprot, initprot, nsects, flags;\r\n} mach_segment_command;\r\ntypedef struct {\r\n  uint32_t cmd, cmdsize;\r\n  char segname[16];\r\n  uint64_t vmaddr, vmsize, fileoff, filesize;\r\n  uint32_t maxprot, initprot, nsects, flags;\r\n} mach_segment_command_64;\r\ntypedef struct {\r\n  char sectname[16], segname[16];\r\n  uint32_t addr, size;\r\n  uint32_t offset, align, reloff, nreloc, flags;\r\n  uint32_t reserved1, reserved2;\r\n} mach_section;\r\ntypedef struct {\r\n  char sectname[16], segname[16];\r\n  uint64_t addr, size;\r\n  uint32_t offset, align, reloff, nreloc, flags;\r\n  uint32_t reserved1, reserved2, reserved3;\r\n} mach_section_64;\r\ntypedef struct {\r\n  uint32_t cmd, cmdsize, symoff, nsyms, stroff, strsize;\r\n} mach_symtab_command;\r\ntypedef struct {\r\n  int32_t strx;\r\n  uint8_t type, sect;\r\n  int16_t desc;\r\n  uint32_t value;\r\n} mach_nlist;\r\ntypedef struct {\r\n  uint32_t strx;\r\n  uint8_t type, sect;\r\n  uint16_t desc;\r\n  uint64_t value;\r\n} mach_nlist_64;\r\ntypedef struct\r\n{\r\n  uint32_t magic, nfat_arch;\r\n} mach_fat_header;\r\ntypedef struct\r\n{\r\n  uint32_t cputype, cpusubtype, offset, size, align;\r\n} mach_fat_arch;\r\ntypedef struct {\r\n  struct {\r\n    mach_header hdr;\r\n    mach_segment_command seg;\r\n    mach_section sec;\r\n    mach_symtab_command sym;\r\n  } arch[1];\r\n  mach_nlist sym_entry;\r\n  uint8_t space[4096];\r\n} mach_obj;\r\ntypedef struct {\r\n  struct {\r\n    mach_header_64 hdr;\r\n    mach_segment_command_64 seg;\r\n    mach_section_64 sec;\r\n    mach_symtab_command sym;\r\n  } arch[1];\r\n  mach_nlist_64 sym_entry;\r\n  uint8_t space[4096];\r\n} mach_obj_64;\r\ntypedef struct {\r\n  mach_fat_header fat;\r\n  mach_fat_arch fat_arch[4];\r\n  struct {\r\n    mach_header hdr;\r\n    mach_segment_command seg;\r\n    mach_section sec;\r\n    mach_symtab_command sym;\r\n  } arch[4];\r\n  mach_nlist sym_entry;\r\n  uint8_t space[4096];\r\n} mach_fat_obj;\r\n]]",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "local symname = '_'..LJBC_PREFIX..ctx.modname",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "local isfat, is64, align, mobj = false, false, 4, \"mach_obj\"",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "if ctx.arch == \"x64\" then\r\n    is64, align, mobj = true, 8, \"mach_obj_64\"\r\n  elseif ctx.arch == \"arm\" then\r\n    isfat, mobj = true, \"mach_fat_obj\"\r\n  else\r\n    check(ctx.arch == \"x86\", \"unsupported architecture for OSX\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "is64, align, mobj = true, 8, \"mach_obj_64\"",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "isfat, mobj = true, \"mach_fat_obj\"",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "check(ctx.arch == \"x86\", \"unsupported architecture for OSX\")",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "local function aligned(v, a) return bit.band(v+a-1, -a) end",
    "type": "statement:localfunction"
  }, {
    "id": 199,
    "text": "local be32 = bit.bswap",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "local o = ffi.new(mobj)",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "local mach_size = aligned(ffi.offsetof(o, \"space\")+#symname+2, align)",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "local cputype = ({ x86={7}, x64={0x01000007}, arm={7,12,12,12} })[ctx.arch]",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "local cpusubtype = ({ x86={3}, x64={3}, arm={3,6,9,11} })[ctx.arch]",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "if isfat then\r\n    o.fat.magic = be32(0xcafebabe)\r\n    o.fat.nfat_arch = be32(#cpusubtype)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "o.fat.magic = be32(0xcafebabe)",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "o.fat.nfat_arch = be32(#cpusubtype)",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "for i=0,#cpusubtype-1 do\r\n    local ofs = 0\r\n    if isfat then\r\n      local a = o.fat_arch[i]\r\n      a.cputype = be32(cputype[i+1])\r\n      a.cpusubtype = be32(cpusubtype[i+1])\r\n      -- Subsequent slices overlap each other to share data.\r\n      ofs = ffi.offsetof(o, \"arch\") + i*ffi.sizeof(o.arch[0])\r\n      a.offset = be32(ofs)\r\n      a.size = be32(mach_size-ofs+#s)\r\n    end\r\n    local a = o.arch[i]\r\n    a.hdr.magic = is64 and 0xfeedfacf or 0xfeedface\r\n    a.hdr.cputype = cputype[i+1]\r\n    a.hdr.cpusubtype = cpusubtype[i+1]\r\n    a.hdr.filetype = 1\r\n    a.hdr.ncmds = 2\r\n    a.hdr.sizeofcmds = ffi.sizeof(a.seg)+ffi.sizeof(a.sec)+ffi.sizeof(a.sym)\r\n    a.seg.cmd = is64 and 0x19 or 0x1\r\n    a.seg.cmdsize = ffi.sizeof(a.seg)+ffi.sizeof(a.sec)\r\n    a.seg.vmsize = #s\r\n    a.seg.fileoff = mach_size-ofs\r\n    a.seg.filesize = #s\r\n    a.seg.maxprot = 1\r\n    a.seg.initprot = 1\r\n    a.seg.nsects = 1\r\n    ffi.copy(a.sec.sectname, \"__data\")\r\n    ffi.copy(a.sec.segname, \"__DATA\")\r\n    a.sec.size = #s\r\n    a.sec.offset = mach_size-ofs\r\n    a.sym.cmd = 2\r\n    a.sym.cmdsize = ffi.sizeof(a.sym)\r\n    a.sym.symoff = ffi.offsetof(o, \"sym_entry\")-ofs\r\n    a.sym.nsyms = 1\r\n    a.sym.stroff = ffi.offsetof(o, \"sym_entry\")+ffi.sizeof(o.sym_entry)-ofs\r\n    a.sym.strsize = aligned(#symname+2, align)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 208,
    "text": "local ofs = 0",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "if isfat then\r\n      local a = o.fat_arch[i]\r\n      a.cputype = be32(cputype[i+1])\r\n      a.cpusubtype = be32(cpusubtype[i+1])\r\n      -- Subsequent slices overlap each other to share data.\r\n      ofs = ffi.offsetof(o, \"arch\") + i*ffi.sizeof(o.arch[0])\r\n      a.offset = be32(ofs)\r\n      a.size = be32(mach_size-ofs+#s)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "local a = o.fat_arch[i]",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "a.cputype = be32(cputype[i+1])",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "a.cpusubtype = be32(cpusubtype[i+1])",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "ofs = ffi.offsetof(o, \"arch\") + i*ffi.sizeof(o.arch[0])",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "a.offset = be32(ofs)",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "a.size = be32(mach_size-ofs+#s)",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "local a = o.arch[i]",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "a.hdr.magic = is64 and 0xfeedfacf or 0xfeedface",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "a.hdr.cputype = cputype[i+1]",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "a.hdr.cpusubtype = cpusubtype[i+1]",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "a.hdr.filetype = 1",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "a.hdr.ncmds = 2",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "a.hdr.sizeofcmds = ffi.sizeof(a.seg)+ffi.sizeof(a.sec)+ffi.sizeof(a.sym)",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "a.seg.cmd = is64 and 0x19 or 0x1",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "a.seg.cmdsize = ffi.sizeof(a.seg)+ffi.sizeof(a.sec)",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "a.seg.vmsize = #s",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "a.seg.fileoff = mach_size-ofs",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "a.seg.filesize = #s",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "a.seg.maxprot = 1",
    "type": "statement:assign"
  }, {
    "id": 229,
    "text": "a.seg.initprot = 1",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "a.seg.nsects = 1",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "ffi.copy(a.sec.sectname, \"__data\")",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "ffi.copy(a.sec.segname, \"__DATA\")",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "a.sec.size = #s",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "a.sec.offset = mach_size-ofs",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "a.sym.cmd = 2",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "a.sym.cmdsize = ffi.sizeof(a.sym)",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "a.sym.symoff = ffi.offsetof(o, \"sym_entry\")-ofs",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "a.sym.nsyms = 1",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "a.sym.stroff = ffi.offsetof(o, \"sym_entry\")+ffi.sizeof(o.sym_entry)-ofs",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "a.sym.strsize = aligned(#symname+2, align)",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "o.sym_entry.type = 0xf",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "o.sym_entry.sect = 1",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "o.sym_entry.strx = 1",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "ffi.copy(o.space+1, symname)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "fp:write(ffi.string(o, mach_size))",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 247,
    "text": "local function aligned(v, a) return bit.band(v+a-1, -a) end",
    "type": "function"
  }, {
    "id": 248,
    "text": "local function bcsave_obj(ctx, output, s)\r\n  local ok, ffi = pcall(require, \"ffi\")\r\n  check(ok, \"FFI library required to write this file type\")\r\n  if ctx.os == \"windows\" then\r\n    return bcsave_peobj(ctx, output, s, ffi)\r\n  elseif ctx.os == \"osx\" then\r\n    return bcsave_machobj(ctx, output, s, ffi)\r\n  else\r\n    return bcsave_elfobj(ctx, output, s, ffi)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "local ok, ffi = pcall(require, \"ffi\")",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "check(ok, \"FFI library required to write this file type\")",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "if ctx.os == \"windows\" then\r\n    return bcsave_peobj(ctx, output, s, ffi)\r\n  elseif ctx.os == \"osx\" then\r\n    return bcsave_machobj(ctx, output, s, ffi)\r\n  else\r\n    return bcsave_elfobj(ctx, output, s, ffi)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "local function bclist(input, output)\r\n  local f = readfile(input)\r\n  require(\"jit.bc\").dump(f, savefile(output, \"w\"), true)\r\nend",
    "type": "function"
  }, {
    "id": 254,
    "text": "local f = readfile(input)",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "require(\"jit.bc\").dump(f, savefile(output, \"w\"), true)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "local function bcsave(ctx, input, output)\r\n  local f = readfile(input)\r\n  local s = string.dump(f, ctx.strip)\r\n  local t = ctx.type\r\n  if not t then\r\n    t = detecttype(output)\r\n    ctx.type = t\r\n  end\r\n  if t == \"raw\" then\r\n    bcsave_raw(output, s)\r\n  else\r\n    if not ctx.modname then ctx.modname = detectmodname(input) end\r\n    if t == \"obj\" then\r\n      bcsave_obj(ctx, output, s)\r\n    else\r\n      bcsave_c(ctx, output, s)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 258,
    "text": "local s = string.dump(f, ctx.strip)",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "local t = ctx.type",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "if not t then\r\n    t = detecttype(output)\r\n    ctx.type = t\r\n  end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "t = detecttype(output)",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "ctx.type = t",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "if t == \"raw\" then\r\n    bcsave_raw(output, s)\r\n  else\r\n    if not ctx.modname then ctx.modname = detectmodname(input) end\r\n    if t == \"obj\" then\r\n      bcsave_obj(ctx, output, s)\r\n    else\r\n      bcsave_c(ctx, output, s)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 264,
    "text": "bcsave_raw(output, s)",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "if not ctx.modname then ctx.modname = detectmodname(input) end",
    "type": "statement:if"
  }, {
    "id": 266,
    "text": "ctx.modname = detectmodname(input)",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "if t == \"obj\" then\r\n      bcsave_obj(ctx, output, s)\r\n    else\r\n      bcsave_c(ctx, output, s)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "bcsave_obj(ctx, output, s)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "bcsave_c(ctx, output, s)",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "local function docmd(...)\r\n  local arg = {...}\r\n  local n = 1\r\n  local list = false\r\n  local ctx = {\r\n    strip = true, arch = jit.arch, os = string.lower(jit.os),\r\n    type = false, modname = false,\r\n  }\r\n  while n <= #arg do\r\n    local a = arg[n]\r\n    if type(a) == \"string\" and string.sub(a, 1, 1) == \"-\" and a ~= \"-\" then\r\n      table.remove(arg, n)\r\n      if a == \"--\" then break end\r\n      for m=2,#a do\r\n\tlocal opt = string.sub(a, m, m)\r\n\tif opt == \"l\" then\r\n\t  list = true\r\n\telseif opt == \"s\" then\r\n\t  ctx.strip = true\r\n\telseif opt == \"g\" then\r\n\t  ctx.strip = false\r\n\telse\r\n\t  if arg[n] == nil or m ~= #a then usage() end\r\n\t  if opt == \"e\" then\r\n\t    if n ~= 1 then usage() end\r\n\t    arg[1] = check(loadstring(arg[1]))\r\n\t  elseif opt == \"n\" then\r\n\t    ctx.modname = checkmodname(table.remove(arg, n))\r\n\t  elseif opt == \"t\" then\r\n\t    ctx.type = checkarg(table.remove(arg, n), map_type, \"file type\")\r\n\t  elseif opt == \"a\" then\r\n\t    ctx.arch = checkarg(table.remove(arg, n), map_arch, \"architecture\")\r\n\t  elseif opt == \"o\" then\r\n\t    ctx.os = checkarg(table.remove(arg, n), map_os, \"OS name\")\r\n\t  else\r\n\t    usage()\r\n\t  end\r\n\tend\r\n      end\r\n    else\r\n      n = n + 1\r\n    end\r\n  end\r\n  if list then\r\n    if #arg == 0 or #arg > 2 then usage() end\r\n    bclist(arg[1], arg[2] or \"-\")\r\n  else\r\n    if #arg ~= 2 then usage() end\r\n    bcsave(ctx, arg[1], arg[2])\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 272,
    "text": "local arg = {...}",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "local n = 1",
    "type": "statement:localassign"
  }, {
    "id": 274,
    "text": "local list = false",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "local ctx = {\r\n    strip = true, arch = jit.arch, os = string.lower(jit.os),\r\n    type = false, modname = false,\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "while n <= #arg do\r\n    local a = arg[n]\r\n    if type(a) == \"string\" and string.sub(a, 1, 1) == \"-\" and a ~= \"-\" then\r\n      table.remove(arg, n)\r\n      if a == \"--\" then break end\r\n      for m=2,#a do\r\n\tlocal opt = string.sub(a, m, m)\r\n\tif opt == \"l\" then\r\n\t  list = true\r\n\telseif opt == \"s\" then\r\n\t  ctx.strip = true\r\n\telseif opt == \"g\" then\r\n\t  ctx.strip = false\r\n\telse\r\n\t  if arg[n] == nil or m ~= #a then usage() end\r\n\t  if opt == \"e\" then\r\n\t    if n ~= 1 then usage() end\r\n\t    arg[1] = check(loadstring(arg[1]))\r\n\t  elseif opt == \"n\" then\r\n\t    ctx.modname = checkmodname(table.remove(arg, n))\r\n\t  elseif opt == \"t\" then\r\n\t    ctx.type = checkarg(table.remove(arg, n), map_type, \"file type\")\r\n\t  elseif opt == \"a\" then\r\n\t    ctx.arch = checkarg(table.remove(arg, n), map_arch, \"architecture\")\r\n\t  elseif opt == \"o\" then\r\n\t    ctx.os = checkarg(table.remove(arg, n), map_os, \"OS name\")\r\n\t  else\r\n\t    usage()\r\n\t  end\r\n\tend\r\n      end\r\n    else\r\n      n = n + 1\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 277,
    "text": "local a = arg[n]",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "if type(a) == \"string\" and string.sub(a, 1, 1) == \"-\" and a ~= \"-\" then\r\n      table.remove(arg, n)\r\n      if a == \"--\" then break end\r\n      for m=2,#a do\r\n\tlocal opt = string.sub(a, m, m)\r\n\tif opt == \"l\" then\r\n\t  list = true\r\n\telseif opt == \"s\" then\r\n\t  ctx.strip = true\r\n\telseif opt == \"g\" then\r\n\t  ctx.strip = false\r\n\telse\r\n\t  if arg[n] == nil or m ~= #a then usage() end\r\n\t  if opt == \"e\" then\r\n\t    if n ~= 1 then usage() end\r\n\t    arg[1] = check(loadstring(arg[1]))\r\n\t  elseif opt == \"n\" then\r\n\t    ctx.modname = checkmodname(table.remove(arg, n))\r\n\t  elseif opt == \"t\" then\r\n\t    ctx.type = checkarg(table.remove(arg, n), map_type, \"file type\")\r\n\t  elseif opt == \"a\" then\r\n\t    ctx.arch = checkarg(table.remove(arg, n), map_arch, \"architecture\")\r\n\t  elseif opt == \"o\" then\r\n\t    ctx.os = checkarg(table.remove(arg, n), map_os, \"OS name\")\r\n\t  else\r\n\t    usage()\r\n\t  end\r\n\tend\r\n      end\r\n    else\r\n      n = n + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "table.remove(arg, n)",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "if a == \"--\" then break end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "for m=2,#a do\r\n\tlocal opt = string.sub(a, m, m)\r\n\tif opt == \"l\" then\r\n\t  list = true\r\n\telseif opt == \"s\" then\r\n\t  ctx.strip = true\r\n\telseif opt == \"g\" then\r\n\t  ctx.strip = false\r\n\telse\r\n\t  if arg[n] == nil or m ~= #a then usage() end\r\n\t  if opt == \"e\" then\r\n\t    if n ~= 1 then usage() end\r\n\t    arg[1] = check(loadstring(arg[1]))\r\n\t  elseif opt == \"n\" then\r\n\t    ctx.modname = checkmodname(table.remove(arg, n))\r\n\t  elseif opt == \"t\" then\r\n\t    ctx.type = checkarg(table.remove(arg, n), map_type, \"file type\")\r\n\t  elseif opt == \"a\" then\r\n\t    ctx.arch = checkarg(table.remove(arg, n), map_arch, \"architecture\")\r\n\t  elseif opt == \"o\" then\r\n\t    ctx.os = checkarg(table.remove(arg, n), map_os, \"OS name\")\r\n\t  else\r\n\t    usage()\r\n\t  end\r\n\tend\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 282,
    "text": "local opt = string.sub(a, m, m)",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "if opt == \"l\" then\r\n\t  list = true\r\n\telseif opt == \"s\" then\r\n\t  ctx.strip = true\r\n\telseif opt == \"g\" then\r\n\t  ctx.strip = false\r\n\telse\r\n\t  if arg[n] == nil or m ~= #a then usage() end\r\n\t  if opt == \"e\" then\r\n\t    if n ~= 1 then usage() end\r\n\t    arg[1] = check(loadstring(arg[1]))\r\n\t  elseif opt == \"n\" then\r\n\t    ctx.modname = checkmodname(table.remove(arg, n))\r\n\t  elseif opt == \"t\" then\r\n\t    ctx.type = checkarg(table.remove(arg, n), map_type, \"file type\")\r\n\t  elseif opt == \"a\" then\r\n\t    ctx.arch = checkarg(table.remove(arg, n), map_arch, \"architecture\")\r\n\t  elseif opt == \"o\" then\r\n\t    ctx.os = checkarg(table.remove(arg, n), map_os, \"OS name\")\r\n\t  else\r\n\t    usage()\r\n\t  end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "list = true",
    "type": "statement:assign"
  }, {
    "id": 285,
    "text": "ctx.strip = true",
    "type": "statement:assign"
  }, {
    "id": 286,
    "text": "ctx.strip = false",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "if arg[n] == nil or m ~= #a then usage() end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "usage()",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "if opt == \"e\" then\r\n\t    if n ~= 1 then usage() end\r\n\t    arg[1] = check(loadstring(arg[1]))\r\n\t  elseif opt == \"n\" then\r\n\t    ctx.modname = checkmodname(table.remove(arg, n))\r\n\t  elseif opt == \"t\" then\r\n\t    ctx.type = checkarg(table.remove(arg, n), map_type, \"file type\")\r\n\t  elseif opt == \"a\" then\r\n\t    ctx.arch = checkarg(table.remove(arg, n), map_arch, \"architecture\")\r\n\t  elseif opt == \"o\" then\r\n\t    ctx.os = checkarg(table.remove(arg, n), map_os, \"OS name\")\r\n\t  else\r\n\t    usage()\r\n\t  end",
    "type": "statement:if"
  }, {
    "id": 290,
    "text": "if n ~= 1 then usage() end",
    "type": "statement:if"
  }, {
    "id": 291,
    "text": "arg[1] = check(loadstring(arg[1]))",
    "type": "statement:assign"
  }, {
    "id": 292,
    "text": "ctx.modname = checkmodname(table.remove(arg, n))",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "ctx.type = checkarg(table.remove(arg, n), map_type, \"file type\")",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "ctx.arch = checkarg(table.remove(arg, n), map_arch, \"architecture\")",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "ctx.os = checkarg(table.remove(arg, n), map_os, \"OS name\")",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "if list then\r\n    if #arg == 0 or #arg > 2 then usage() end\r\n    bclist(arg[1], arg[2] or \"-\")\r\n  else\r\n    if #arg ~= 2 then usage() end\r\n    bcsave(ctx, arg[1], arg[2])\r\n  end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "if #arg == 0 or #arg > 2 then usage() end",
    "type": "statement:if"
  }, {
    "id": 298,
    "text": "bclist(arg[1], arg[2] or \"-\")",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "if #arg ~= 2 then usage() end",
    "type": "statement:if"
  }, {
    "id": 300,
    "text": "bcsave(ctx, arg[1], arg[2])",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "",
    "type": "function container"
  }, {
    "id": 303,
    "text": "rshift",
    "type": "global function"
  }, {
    "id": 304,
    "text": "bswap",
    "type": "global function"
  }, {
    "id": 305,
    "text": "band",
    "type": "global function"
  }, {
    "id": 306,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 307,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 308,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 309,
    "text": "be32",
    "type": "global function"
  }, {
    "id": 310,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 311,
    "text": "module",
    "type": "global function"
  }, {
    "id": 312,
    "text": "new",
    "type": "global function"
  }, {
    "id": 313,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 314,
    "text": "abi",
    "type": "global function"
  }, {
    "id": 315,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 316,
    "text": "type",
    "type": "global function"
  }, {
    "id": 317,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 318,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 319,
    "text": "open",
    "type": "global function"
  }, {
    "id": 320,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 321,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 322,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 323,
    "text": "offsetof",
    "type": "global function"
  }, {
    "id": 324,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 325,
    "text": "match",
    "type": "global function"
  }, {
    "id": 326,
    "text": "sizeof",
    "type": "global function"
  }, {
    "id": 327,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 328,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 329,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 330,
    "text": "cdef",
    "type": "global function"
  }, {
    "id": 331,
    "text": "string",
    "type": "global function"
  }, {
    "id": 332,
    "text": "cast",
    "type": "global function"
  }, {
    "id": 333,
    "text": "format",
    "type": "global function"
  }, {
    "id": 334,
    "text": "require",
    "type": "global function"
  }, {
    "id": 335,
    "text": "(bit)",
    "type": "module"
  }, {
    "id": 336,
    "text": "(jit)",
    "type": "module"
  }, {
    "id": 337,
    "text": "",
    "type": "variable container"
  }, {
    "id": 338,
    "text": "",
    "type": "require container"
  }, {
    "id": 339,
    "text": "",
    "type": "local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "string"
  }, {
    "id": 341,
    "text": "",
    "type": "local variable"
  }, {
    "id": 342,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 343,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 344,
    "text": "",
    "type": "string"
  }, {
    "id": 345,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 346,
    "text": "",
    "type": "string"
  }, {
    "id": 347,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 348,
    "text": "",
    "type": "string"
  }, {
    "id": 349,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 350,
    "text": "",
    "type": "string"
  }, {
    "id": 351,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 352,
    "text": "",
    "type": "string"
  }, {
    "id": 353,
    "text": "",
    "type": "local variable"
  }, {
    "id": 354,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 355,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 356,
    "text": "",
    "type": "boolean"
  }, {
    "id": 357,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 358,
    "text": "",
    "type": "boolean"
  }, {
    "id": 359,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 360,
    "text": "",
    "type": "boolean"
  }, {
    "id": 361,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 362,
    "text": "",
    "type": "boolean"
  }, {
    "id": 363,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 364,
    "text": "",
    "type": "boolean"
  }, {
    "id": 365,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 366,
    "text": "",
    "type": "boolean"
  }, {
    "id": 367,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 368,
    "text": "",
    "type": "boolean"
  }, {
    "id": 369,
    "text": "",
    "type": "local variable"
  }, {
    "id": 370,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 371,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 372,
    "text": "",
    "type": "boolean"
  }, {
    "id": 373,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 374,
    "text": "",
    "type": "boolean"
  }, {
    "id": 375,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 376,
    "text": "",
    "type": "boolean"
  }, {
    "id": 377,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 378,
    "text": "",
    "type": "boolean"
  }, {
    "id": 379,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 380,
    "text": "",
    "type": "boolean"
  }, {
    "id": 381,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 382,
    "text": "",
    "type": "boolean"
  }, {
    "id": 383,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 384,
    "text": "",
    "type": "boolean"
  }, {
    "id": 385,
    "text": "",
    "type": "global variable"
  }, {
    "id": 386,
    "text": "",
    "type": "n/a"
  }, {
    "id": 387,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 389,
    "text": "",
    "type": "global variable"
  }, {
    "id": 390,
    "text": "bc)",
    "type": "module"
  } ]
}