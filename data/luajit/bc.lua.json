{
  "_filename": "bc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luajit/src/jit/bc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 19,
    "label": "has",
    "to": 29
  }, {
    "from": 6,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 6,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 38
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 7
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 49,
    "label": "has",
    "to": 59
  }, {
    "from": 49,
    "label": "has",
    "to": 60
  }, {
    "from": 49,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 49,
    "label": "has",
    "to": 65
  }, {
    "from": 49,
    "label": "has",
    "to": 66
  }, {
    "from": 49,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 4
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 78,
    "label": "has",
    "to": 86
  }, {
    "from": 78,
    "label": "has",
    "to": 87
  }, {
    "from": 78,
    "label": "has",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 6,
    "label": "calls",
    "to": 98
  }, {
    "from": 6,
    "label": "calls",
    "to": 98
  }, {
    "from": 6,
    "label": "calls",
    "to": 98
  }, {
    "from": 6,
    "label": "calls",
    "to": 98
  }, {
    "from": 6,
    "label": "calls",
    "to": 98
  }, {
    "from": 6,
    "label": "calls",
    "to": 98
  }, {
    "from": 6,
    "label": "calls",
    "to": 98
  }, {
    "from": 49,
    "label": "calls",
    "to": 98
  }, {
    "from": 6,
    "label": "calls",
    "to": 91
  }, {
    "from": 6,
    "label": "calls",
    "to": 91
  }, {
    "from": 6,
    "label": "calls",
    "to": 91
  }, {
    "from": 49,
    "label": "calls",
    "to": 91
  }, {
    "from": 89,
    "label": "calls",
    "to": 92
  }, {
    "from": 78,
    "label": "calls",
    "to": 92
  }, {
    "from": 49,
    "label": "calls",
    "to": 6
  }, {
    "from": 78,
    "label": "calls",
    "to": 100
  }, {
    "from": 49,
    "label": "calls",
    "to": 49
  }, {
    "from": 68,
    "label": "calls",
    "to": 49
  }, {
    "from": 6,
    "label": "calls",
    "to": 99
  }, {
    "from": 6,
    "label": "calls",
    "to": 103
  }, {
    "from": 49,
    "label": "calls",
    "to": 42
  }, {
    "from": 6,
    "label": "calls",
    "to": 101
  }, {
    "from": 42,
    "label": "calls",
    "to": 101
  }, {
    "from": 6,
    "label": "calls",
    "to": 94
  }, {
    "from": 49,
    "label": "calls",
    "to": 94
  }, {
    "from": 78,
    "label": "calls",
    "to": 70
  }, {
    "from": 78,
    "label": "calls",
    "to": 106
  }, {
    "from": 6,
    "label": "calls",
    "to": 105
  }, {
    "from": 6,
    "label": "calls",
    "to": 105
  }, {
    "from": 70,
    "label": "calls",
    "to": 90
  }, {
    "from": 78,
    "label": "calls",
    "to": 90
  }, {
    "from": 89,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 49,
    "label": "calls",
    "to": 96
  }, {
    "from": 89,
    "label": "calls",
    "to": 104
  }, {
    "from": 89,
    "label": "calls",
    "to": 104
  }, {
    "from": 89,
    "label": "calls",
    "to": 104
  }, {
    "from": 89,
    "label": "calls",
    "to": 104
  }, {
    "from": 6,
    "label": "calls",
    "to": 102
  }, {
    "from": 6,
    "label": "calls",
    "to": 102
  }, {
    "from": 6,
    "label": "calls",
    "to": 102
  }, {
    "from": 42,
    "label": "calls",
    "to": 102
  }, {
    "from": 6,
    "label": "calls",
    "to": 97
  }, {
    "from": 6,
    "label": "calls",
    "to": 97
  }, {
    "from": 6,
    "label": "calls",
    "to": 97
  }, {
    "from": 6,
    "label": "calls",
    "to": 97
  }, {
    "from": 6,
    "label": "calls",
    "to": 97
  }, {
    "from": 6,
    "label": "calls",
    "to": 97
  }, {
    "from": 42,
    "label": "calls",
    "to": 97
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 89,
    "label": "declares",
    "to": 2
  }, {
    "from": 89,
    "label": "declares",
    "to": 6
  }, {
    "from": 89,
    "label": "declares",
    "to": 42
  }, {
    "from": 89,
    "label": "declares",
    "to": 49
  }, {
    "from": 89,
    "label": "declares",
    "to": 68
  }, {
    "from": 89,
    "label": "declares",
    "to": 70
  }, {
    "from": 89,
    "label": "declares",
    "to": 78
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 1,
    "label": "contains",
    "to": 109
  }, {
    "from": 108,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 108,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 108,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 108,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 108,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 108,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 108,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 108,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 108,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 108,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 108,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 108,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 108,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 108,
    "label": "initializes",
    "to": 136
  }, {
    "from": 108,
    "label": "initializes",
    "to": 137
  }, {
    "from": 108,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 108,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 108,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 108,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 108,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 108,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 109,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "requires",
    "to": 151
  }, {
    "from": 109,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "requires",
    "to": 153
  }, {
    "from": 109,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "requires",
    "to": 155
  }, {
    "from": 109,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "requires",
    "to": 107
  }, {
    "from": 157,
    "label": "requires",
    "to": 151
  }, {
    "from": 158,
    "label": "requires",
    "to": 151
  }, {
    "from": 159,
    "label": "requires",
    "to": 153
  }, {
    "from": 160,
    "label": "requires",
    "to": 155
  }, {
    "from": 161,
    "label": "requires",
    "to": 151
  }, {
    "from": 162,
    "label": "requires",
    "to": 153
  }, {
    "from": 163,
    "label": "requires",
    "to": 155
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bc",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function ctlsub(c)\r\n  if c == \"\\n\" then return \"\\\\n\"\r\n  elseif c == \"\\r\" then return \"\\\\r\"\r\n  elseif c == \"\\t\" then return \"\\\\t\"\r\n  else return format(\"\\\\%03d\", byte(c))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if c == \"\\n\" then return \"\\\\n\"\r\n  elseif c == \"\\r\" then return \"\\\\r\"\r\n  elseif c == \"\\t\" then return \"\\\\t\"\r\n  else return format(\"\\\\%03d\", byte(c))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function bcline(func, pc, prefix)\r\n  local ins, m = funcbc(func, pc)\r\n  if not ins then return end\r\n  local ma, mb, mc = band(m, 7), band(m, 15*8), band(m, 15*128)\r\n  local a = band(shr(ins, 8), 0xff)\r\n  local oidx = 6*band(ins, 0xff)\r\n  local op = sub(bcnames, oidx+1, oidx+6)\r\n  local s = format(\"%04d %s %-6s %3s \",\r\n    pc, prefix or \"  \", op, ma == 0 and \"\" or a)\r\n  local d = shr(ins, 16)\r\n  if mc == 13*128 then -- BCMjump\r\n    return format(\"%s=> %04d\\n\", s, pc+d-0x7fff)\r\n  end\r\n  if mb ~= 0 then\r\n    d = band(d, 0xff)\r\n  elseif mc == 0 then\r\n    return s..\"\\n\"\r\n  end\r\n  local kc\r\n  if mc == 10*128 then -- BCMstr\r\n    kc = funck(func, -d-1)\r\n    kc = format(#kc > 40 and '\"%.40s\"~' or '\"%s\"', gsub(kc, \"%c\", ctlsub))\r\n  elseif mc == 9*128 then -- BCMnum\r\n    kc = funck(func, d)\r\n    if op == \"TSETM \" then kc = kc - 2^52 end\r\n  elseif mc == 12*128 then -- BCMfunc\r\n    local fi = funcinfo(funck(func, -d-1))\r\n    if fi.ffid then\r\n      kc = vmdef.ffnames[fi.ffid]\r\n    else\r\n      kc = fi.loc\r\n    end\r\n  elseif mc == 5*128 then -- BCMuv\r\n    kc = funcuvname(func, d)\r\n  end\r\n  if ma == 5 then -- BCMuv\r\n    local ka = funcuvname(func, a)\r\n    if kc then kc = ka..\" ; \"..kc else kc = ka end\r\n  end\r\n  if mb ~= 0 then\r\n    local b = shr(ins, 24)\r\n    if kc then return format(\"%s%3d %3d  ; %s\\n\", s, b, d, kc) end\r\n    return format(\"%s%3d %3d\\n\", s, b, d)\r\n  end\r\n  if kc then return format(\"%s%3d      ; %s\\n\", s, d, kc) end\r\n  if mc == 7*128 and d > 32767 then d = d - 65536 end -- BCMlits\r\n  return format(\"%s%3d\\n\", s, d)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local ins, m = funcbc(func, pc)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not ins then return end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "local ma, mb, mc = band(m, 7), band(m, 15*8), band(m, 15*128)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local a = band(shr(ins, 8), 0xff)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local oidx = 6*band(ins, 0xff)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local op = sub(bcnames, oidx+1, oidx+6)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local s = format(\"%04d %s %-6s %3s \",\r\n    pc, prefix or \"  \", op, ma == 0 and \"\" or a)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local d = shr(ins, 16)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if mc == 13*128 then -- BCMjump\r\n    return format(\"%s=> %04d\\n\", s, pc+d-0x7fff)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if mb ~= 0 then\r\n    d = band(d, 0xff)\r\n  elseif mc == 0 then\r\n    return s..\"\\n\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "d = band(d, 0xff)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local kc",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if mc == 10*128 then -- BCMstr\r\n    kc = funck(func, -d-1)\r\n    kc = format(#kc > 40 and '\"%.40s\"~' or '\"%s\"', gsub(kc, \"%c\", ctlsub))\r\n  elseif mc == 9*128 then -- BCMnum\r\n    kc = funck(func, d)\r\n    if op == \"TSETM \" then kc = kc - 2^52 end\r\n  elseif mc == 12*128 then -- BCMfunc\r\n    local fi = funcinfo(funck(func, -d-1))\r\n    if fi.ffid then\r\n      kc = vmdef.ffnames[fi.ffid]\r\n    else\r\n      kc = fi.loc\r\n    end\r\n  elseif mc == 5*128 then -- BCMuv\r\n    kc = funcuvname(func, d)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "kc = funck(func, -d-1)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "kc = format(#kc > 40 and '\"%.40s\"~' or '\"%s\"', gsub(kc, \"%c\", ctlsub))",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "kc = funck(func, d)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if op == \"TSETM \" then kc = kc - 2^52 end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "kc = kc - 2^52",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local fi = funcinfo(funck(func, -d-1))",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if fi.ffid then\r\n      kc = vmdef.ffnames[fi.ffid]\r\n    else\r\n      kc = fi.loc\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "kc = vmdef.ffnames[fi.ffid]",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "kc = fi.loc",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "kc = funcuvname(func, d)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if ma == 5 then -- BCMuv\r\n    local ka = funcuvname(func, a)\r\n    if kc then kc = ka..\" ; \"..kc else kc = ka end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local ka = funcuvname(func, a)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if kc then kc = ka..\" ; \"..kc else kc = ka end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "kc = ka..\" ; \"..kc",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "kc = ka",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if mb ~= 0 then\r\n    local b = shr(ins, 24)\r\n    if kc then return format(\"%s%3d %3d  ; %s\\n\", s, b, d, kc) end\r\n    return format(\"%s%3d %3d\\n\", s, b, d)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "local b = shr(ins, 24)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if kc then return format(\"%s%3d %3d  ; %s\\n\", s, b, d, kc) end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "if kc then return format(\"%s%3d      ; %s\\n\", s, d, kc) end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "if mc == 7*128 and d > 32767 then d = d - 65536 end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "d = d - 65536",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function bctargets(func)\r\n  local target = {}\r\n  for pc=1,1000000000 do\r\n    local ins, m = funcbc(func, pc)\r\n    if not ins then break end\r\n    if band(m, 15*128) == 13*128 then target[pc+shr(ins, 16)-0x7fff] = true end\r\n  end\r\n  return target\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local target = {}",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "for pc=1,1000000000 do\r\n    local ins, m = funcbc(func, pc)\r\n    if not ins then break end\r\n    if band(m, 15*128) == 13*128 then target[pc+shr(ins, 16)-0x7fff] = true end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 45,
    "text": "if not ins then break end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "if band(m, 15*128) == 13*128 then target[pc+shr(ins, 16)-0x7fff] = true end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "target[pc+shr(ins, 16)-0x7fff] = true",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function bcdump(func, out, all)\r\n  if not out then out = stdout end\r\n  local fi = funcinfo(func)\r\n  if all and fi.children then\r\n    for n=-1,-1000000000,-1 do\r\n      local k = funck(func, n)\r\n      if not k then break end\r\n      if type(k) == \"proto\" then bcdump(k, out, true) end\r\n    end\r\n  end\r\n  out:write(format(\"-- BYTECODE -- %s-%d\\n\", fi.loc, fi.lastlinedefined))\r\n  local target = bctargets(func)\r\n  for pc=1,1000000000 do\r\n    local s = bcline(func, pc, target[pc] and \"=>\")\r\n    if not s then break end\r\n    out:write(s)\r\n  end\r\n  out:write(\"\\n\")\r\n  out:flush()\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if not out then out = stdout end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "out = stdout",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local fi = funcinfo(func)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if all and fi.children then\r\n    for n=-1,-1000000000,-1 do\r\n      local k = funck(func, n)\r\n      if not k then break end\r\n      if type(k) == \"proto\" then bcdump(k, out, true) end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "for n=-1,-1000000000,-1 do\r\n      local k = funck(func, n)\r\n      if not k then break end\r\n      if type(k) == \"proto\" then bcdump(k, out, true) end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 55,
    "text": "local k = funck(func, n)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if not k then break end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "if type(k) == \"proto\" then bcdump(k, out, true) end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "bcdump(k, out, true)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "out:write(format(\"-- BYTECODE -- %s-%d\\n\", fi.loc, fi.lastlinedefined))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local target = bctargets(func)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "for pc=1,1000000000 do\r\n    local s = bcline(func, pc, target[pc] and \"=>\")\r\n    if not s then break end\r\n    out:write(s)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 62,
    "text": "local s = bcline(func, pc, target[pc] and \"=>\")",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if not s then break end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "out:write(s)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "out:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "out:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function h_list(func)\r\n  return bcdump(func, out)\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function bclistoff()\r\n  if active then\r\n    active = false\r\n    jit.attach(h_list)\r\n    if out and out ~= stdout and out ~= stderr then out:close() end\r\n    out = nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "if active then\r\n    active = false\r\n    jit.attach(h_list)\r\n    if out and out ~= stdout and out ~= stderr then out:close() end\r\n    out = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "active = false",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "jit.attach(h_list)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if out and out ~= stdout and out ~= stderr then out:close() end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "out:close()",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "out = nil",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "local function bcliston(outfile)\r\n  if active then bclistoff() end\r\n  if not outfile then outfile = os.getenv(\"LUAJIT_LISTFILE\") end\r\n  if outfile then\r\n    out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))\r\n  else\r\n    out = stderr\r\n  end\r\n  jit.attach(h_list, \"bc\")\r\n  active = true\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "if active then bclistoff() end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "bclistoff()",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "if not outfile then outfile = os.getenv(\"LUAJIT_LISTFILE\") end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "outfile = os.getenv(\"LUAJIT_LISTFILE\")",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "if outfile then\r\n    out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))\r\n  else\r\n    out = stderr\r\n  end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "out = stderr",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "jit.attach(h_list, \"bc\")",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "active = true",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "",
    "type": "function container"
  }, {
    "id": 90,
    "text": "attach",
    "type": "global function"
  }, {
    "id": 91,
    "text": "funck",
    "type": "global function"
  }, {
    "id": 92,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 93,
    "text": "module",
    "type": "global function"
  }, {
    "id": 94,
    "text": "funcinfo",
    "type": "global function"
  }, {
    "id": 95,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 96,
    "text": "type",
    "type": "global function"
  }, {
    "id": 97,
    "text": "band",
    "type": "global function"
  }, {
    "id": 98,
    "text": "format",
    "type": "global function"
  }, {
    "id": 99,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 100,
    "text": "open",
    "type": "global function"
  }, {
    "id": 101,
    "text": "funcbc",
    "type": "global function"
  }, {
    "id": 102,
    "text": "shr",
    "type": "global function"
  }, {
    "id": 103,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 104,
    "text": "require",
    "type": "global function"
  }, {
    "id": 105,
    "text": "funcuvname",
    "type": "global function"
  }, {
    "id": 106,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 107,
    "text": "(bit)",
    "type": "module"
  }, {
    "id": 108,
    "text": "",
    "type": "variable container"
  }, {
    "id": 109,
    "text": "",
    "type": "require container"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "n/a"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  }, {
    "id": 118,
    "text": "",
    "type": "local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "n/a"
  }, {
    "id": 124,
    "text": "",
    "type": "local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "n/a"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "global variable"
  }, {
    "id": 139,
    "text": "",
    "type": "n/a"
  }, {
    "id": 140,
    "text": "",
    "type": "global variable"
  }, {
    "id": 141,
    "text": "",
    "type": "n/a"
  }, {
    "id": 142,
    "text": "",
    "type": "global variable"
  }, {
    "id": 143,
    "text": "",
    "type": "n/a"
  }, {
    "id": 144,
    "text": "",
    "type": "global variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "global variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "global variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 151,
    "text": "(jit)",
    "type": "module"
  }, {
    "id": 152,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 153,
    "text": "util)",
    "type": "module"
  }, {
    "id": 154,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 155,
    "text": "vmdef)",
    "type": "module"
  }, {
    "id": 156,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 161,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "require local variable"
  } ]
}