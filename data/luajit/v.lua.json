{
  "_filename": "v.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luajit/src/jit/v.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 17,
    "label": "has",
    "to": 29
  }, {
    "from": 14,
    "label": "has",
    "to": 30
  }, {
    "from": 13,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 57
  }, {
    "from": 7,
    "label": "calls",
    "to": 57
  }, {
    "from": 13,
    "label": "calls",
    "to": 57
  }, {
    "from": 13,
    "label": "calls",
    "to": 57
  }, {
    "from": 13,
    "label": "calls",
    "to": 57
  }, {
    "from": 13,
    "label": "calls",
    "to": 57
  }, {
    "from": 13,
    "label": "calls",
    "to": 57
  }, {
    "from": 13,
    "label": "calls",
    "to": 57
  }, {
    "from": 13,
    "label": "calls",
    "to": 57
  }, {
    "from": 51,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 13,
    "label": "calls",
    "to": 59
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 32,
    "label": "calls",
    "to": 52
  }, {
    "from": 40,
    "label": "calls",
    "to": 52
  }, {
    "from": 13,
    "label": "calls",
    "to": 7
  }, {
    "from": 13,
    "label": "calls",
    "to": 7
  }, {
    "from": 51,
    "label": "calls",
    "to": 54
  }, {
    "from": 40,
    "label": "calls",
    "to": 32
  }, {
    "from": 7,
    "label": "calls",
    "to": 56
  }, {
    "from": 7,
    "label": "calls",
    "to": 56
  }, {
    "from": 51,
    "label": "calls",
    "to": 60
  }, {
    "from": 51,
    "label": "calls",
    "to": 60
  }, {
    "from": 51,
    "label": "calls",
    "to": 60
  }, {
    "from": 40,
    "label": "calls",
    "to": 61
  }, {
    "from": 40,
    "label": "calls",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 51
  }, {
    "from": 51,
    "label": "declares",
    "to": 2
  }, {
    "from": 51,
    "label": "declares",
    "to": 7
  }, {
    "from": 51,
    "label": "declares",
    "to": 13
  }, {
    "from": 51,
    "label": "declares",
    "to": 32
  }, {
    "from": 51,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 65,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 65,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 65,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 65,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 65,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 65,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 65,
    "label": "initializes",
    "to": 79
  }, {
    "from": 65,
    "label": "initializes",
    "to": 80
  }, {
    "from": 65,
    "label": "initializes",
    "to": 81
  }, {
    "from": 65,
    "label": "initializes",
    "to": 82
  }, {
    "from": 65,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 65,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 65,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 66,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "requires",
    "to": 62
  }, {
    "from": 66,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "requires",
    "to": 63
  }, {
    "from": 66,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 64
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "v",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function fmtfunc(func, pc)\r\n  local fi = funcinfo(func, pc)\r\n  if fi.loc then\r\n    return fi.loc\r\n  elseif fi.ffid then\r\n    return vmdef.ffnames[fi.ffid]\r\n  elseif fi.addr then\r\n    return format(\"C:%x\", fi.addr)\r\n  else\r\n    return \"(?)\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local fi = funcinfo(func, pc)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if fi.loc then\r\n    return fi.loc\r\n  elseif fi.ffid then\r\n    return vmdef.ffnames[fi.ffid]\r\n  elseif fi.addr then\r\n    return format(\"C:%x\", fi.addr)\r\n  else\r\n    return \"(?)\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function fmterr(err, info)\r\n  if type(err) == \"number\" then\r\n    if type(info) == \"function\" then info = fmtfunc(info) end\r\n    err = format(vmdef.traceerr[err], info)\r\n  end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if type(err) == \"number\" then\r\n    if type(info) == \"function\" then info = fmtfunc(info) end\r\n    err = format(vmdef.traceerr[err], info)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "if type(info) == \"function\" then info = fmtfunc(info) end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "info = fmtfunc(info)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "err = format(vmdef.traceerr[err], info)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function dump_trace(what, tr, func, pc, otr, oex)\r\n  if what == \"start\" then\r\n    startloc = fmtfunc(func, pc)\r\n    startex = otr and \"(\"..otr..\"/\"..oex..\") \" or \"\"\r\n  else\r\n    if what == \"abort\" then\r\n      local loc = fmtfunc(func, pc)\r\n      if loc ~= startloc then\r\n\tout:write(format(\"[TRACE --- %s%s -- %s at %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex), loc))\r\n      else\r\n\tout:write(format(\"[TRACE --- %s%s -- %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex)))\r\n      end\r\n    elseif what == \"stop\" then\r\n      local info = traceinfo(tr)\r\n      local link, ltype = info.link, info.linktype\r\n      if ltype == \"interpreter\" then\r\n\tout:write(format(\"[TRACE %3s %s%s -- fallback to interpreter]\\n\",\r\n\t  tr, startex, startloc))\r\n      elseif link == tr or link == 0 then\r\n\tout:write(format(\"[TRACE %3s %s%s %s]\\n\",\r\n\t  tr, startex, startloc, ltype))\r\n      elseif ltype == \"root\" then\r\n\tout:write(format(\"[TRACE %3s %s%s -> %d]\\n\",\r\n\t  tr, startex, startloc, link))\r\n      else\r\n\tout:write(format(\"[TRACE %3s %s%s -> %d %s]\\n\",\r\n\t  tr, startex, startloc, link, ltype))\r\n      end\r\n    else\r\n      out:write(format(\"[TRACE %s]\\n\", what))\r\n    end\r\n    out:flush()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if what == \"start\" then\r\n    startloc = fmtfunc(func, pc)\r\n    startex = otr and \"(\"..otr..\"/\"..oex..\") \" or \"\"\r\n  else\r\n    if what == \"abort\" then\r\n      local loc = fmtfunc(func, pc)\r\n      if loc ~= startloc then\r\n\tout:write(format(\"[TRACE --- %s%s -- %s at %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex), loc))\r\n      else\r\n\tout:write(format(\"[TRACE --- %s%s -- %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex)))\r\n      end\r\n    elseif what == \"stop\" then\r\n      local info = traceinfo(tr)\r\n      local link, ltype = info.link, info.linktype\r\n      if ltype == \"interpreter\" then\r\n\tout:write(format(\"[TRACE %3s %s%s -- fallback to interpreter]\\n\",\r\n\t  tr, startex, startloc))\r\n      elseif link == tr or link == 0 then\r\n\tout:write(format(\"[TRACE %3s %s%s %s]\\n\",\r\n\t  tr, startex, startloc, ltype))\r\n      elseif ltype == \"root\" then\r\n\tout:write(format(\"[TRACE %3s %s%s -> %d]\\n\",\r\n\t  tr, startex, startloc, link))\r\n      else\r\n\tout:write(format(\"[TRACE %3s %s%s -> %d %s]\\n\",\r\n\t  tr, startex, startloc, link, ltype))\r\n      end\r\n    else\r\n      out:write(format(\"[TRACE %s]\\n\", what))\r\n    end\r\n    out:flush()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "startloc = fmtfunc(func, pc)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "startex = otr and \"(\"..otr..\"/\"..oex..\") \" or \"\"",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if what == \"abort\" then\r\n      local loc = fmtfunc(func, pc)\r\n      if loc ~= startloc then\r\n\tout:write(format(\"[TRACE --- %s%s -- %s at %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex), loc))\r\n      else\r\n\tout:write(format(\"[TRACE --- %s%s -- %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex)))\r\n      end\r\n    elseif what == \"stop\" then\r\n      local info = traceinfo(tr)\r\n      local link, ltype = info.link, info.linktype\r\n      if ltype == \"interpreter\" then\r\n\tout:write(format(\"[TRACE %3s %s%s -- fallback to interpreter]\\n\",\r\n\t  tr, startex, startloc))\r\n      elseif link == tr or link == 0 then\r\n\tout:write(format(\"[TRACE %3s %s%s %s]\\n\",\r\n\t  tr, startex, startloc, ltype))\r\n      elseif ltype == \"root\" then\r\n\tout:write(format(\"[TRACE %3s %s%s -> %d]\\n\",\r\n\t  tr, startex, startloc, link))\r\n      else\r\n\tout:write(format(\"[TRACE %3s %s%s -> %d %s]\\n\",\r\n\t  tr, startex, startloc, link, ltype))\r\n      end\r\n    else\r\n      out:write(format(\"[TRACE %s]\\n\", what))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "local loc = fmtfunc(func, pc)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if loc ~= startloc then\r\n\tout:write(format(\"[TRACE --- %s%s -- %s at %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex), loc))\r\n      else\r\n\tout:write(format(\"[TRACE --- %s%s -- %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex)))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "out:write(format(\"[TRACE --- %s%s -- %s at %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex), loc))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "out:write(format(\"[TRACE --- %s%s -- %s]\\n\",\r\n\t  startex, startloc, fmterr(otr, oex)))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local info = traceinfo(tr)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local link, ltype = info.link, info.linktype",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if ltype == \"interpreter\" then\r\n\tout:write(format(\"[TRACE %3s %s%s -- fallback to interpreter]\\n\",\r\n\t  tr, startex, startloc))\r\n      elseif link == tr or link == 0 then\r\n\tout:write(format(\"[TRACE %3s %s%s %s]\\n\",\r\n\t  tr, startex, startloc, ltype))\r\n      elseif ltype == \"root\" then\r\n\tout:write(format(\"[TRACE %3s %s%s -> %d]\\n\",\r\n\t  tr, startex, startloc, link))\r\n      else\r\n\tout:write(format(\"[TRACE %3s %s%s -> %d %s]\\n\",\r\n\t  tr, startex, startloc, link, ltype))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "out:write(format(\"[TRACE %3s %s%s -- fallback to interpreter]\\n\",\r\n\t  tr, startex, startloc))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "out:write(format(\"[TRACE %3s %s%s %s]\\n\",\r\n\t  tr, startex, startloc, ltype))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "out:write(format(\"[TRACE %3s %s%s -> %d]\\n\",\r\n\t  tr, startex, startloc, link))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "out:write(format(\"[TRACE %3s %s%s -> %d %s]\\n\",\r\n\t  tr, startex, startloc, link, ltype))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "out:write(format(\"[TRACE %s]\\n\", what))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "out:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function dumpoff()\r\n  if active then\r\n    active = false\r\n    jit.attach(dump_trace)\r\n    if out and out ~= stdout and out ~= stderr then out:close() end\r\n    out = nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "if active then\r\n    active = false\r\n    jit.attach(dump_trace)\r\n    if out and out ~= stdout and out ~= stderr then out:close() end\r\n    out = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "active = false",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "jit.attach(dump_trace)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if out and out ~= stdout and out ~= stderr then out:close() end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "out:close()",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "out = nil",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function dumpon(outfile)\r\n  if active then dumpoff() end\r\n  if not outfile then outfile = os.getenv(\"LUAJIT_VERBOSEFILE\") end\r\n  if outfile then\r\n    out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))\r\n  else\r\n    out = stderr\r\n  end\r\n  jit.attach(dump_trace, \"trace\")\r\n  active = true\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if active then dumpoff() end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "dumpoff()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if not outfile then outfile = os.getenv(\"LUAJIT_VERBOSEFILE\") end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "outfile = os.getenv(\"LUAJIT_VERBOSEFILE\")",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if outfile then\r\n    out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))\r\n  else\r\n    out = stderr\r\n  end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "out = outfile == \"-\" and stdout or assert(io.open(outfile, \"w\"))",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "out = stderr",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "jit.attach(dump_trace, \"trace\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "active = true",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "",
    "type": "function container"
  }, {
    "id": 52,
    "text": "attach",
    "type": "global function"
  }, {
    "id": 53,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 54,
    "text": "module",
    "type": "global function"
  }, {
    "id": 55,
    "text": "funcinfo",
    "type": "global function"
  }, {
    "id": 56,
    "text": "type",
    "type": "global function"
  }, {
    "id": 57,
    "text": "format",
    "type": "global function"
  }, {
    "id": 58,
    "text": "open",
    "type": "global function"
  }, {
    "id": 59,
    "text": "traceinfo",
    "type": "global function"
  }, {
    "id": 60,
    "text": "require",
    "type": "global function"
  }, {
    "id": 61,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 62,
    "text": "(jit)",
    "type": "module"
  }, {
    "id": 63,
    "text": "util)",
    "type": "module"
  }, {
    "id": 64,
    "text": "vmdef)",
    "type": "module"
  }, {
    "id": 65,
    "text": "",
    "type": "variable container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "global variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  } ]
}