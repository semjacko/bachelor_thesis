{
  "_filename": "genminilua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luajit/src/host/genminilua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 29
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 29
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 25
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 27
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 29
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 29
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 29
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 29
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 29
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 29
  }, {
    "from": 49,
    "label": "has",
    "to": 29
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 29
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 57,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 66
  }, {
    "from": 57,
    "label": "has",
    "to": 67
  }, {
    "from": 57,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 29
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 56,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 53,
    "label": "has",
    "to": 29
  }, {
    "from": 53,
    "label": "has",
    "to": 29
  }, {
    "from": 53,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 29
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 29
  }, {
    "from": 83,
    "label": "has",
    "to": 29
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 29
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 87,
    "label": "has",
    "to": 94
  }, {
    "from": 87,
    "label": "has",
    "to": 95
  }, {
    "from": 87,
    "label": "has",
    "to": 96
  }, {
    "from": 87,
    "label": "has",
    "to": 97
  }, {
    "from": 87,
    "label": "has",
    "to": 98
  }, {
    "from": 87,
    "label": "has",
    "to": 99
  }, {
    "from": 87,
    "label": "has",
    "to": 100
  }, {
    "from": 87,
    "label": "has",
    "to": 101
  }, {
    "from": 87,
    "label": "has",
    "to": 102
  }, {
    "from": 87,
    "label": "has",
    "to": 103
  }, {
    "from": 87,
    "label": "has",
    "to": 104
  }, {
    "from": 87,
    "label": "has",
    "to": 105
  }, {
    "from": 87,
    "label": "has",
    "to": 106
  }, {
    "from": 87,
    "label": "has",
    "to": 107
  }, {
    "from": 87,
    "label": "has",
    "to": 108
  }, {
    "from": 87,
    "label": "has",
    "to": 29
  }, {
    "from": 87,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 29
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 112,
    "label": "has",
    "to": 29
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 29
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 29
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 130,
    "label": "has",
    "to": 135
  }, {
    "from": 130,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 130,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 141
  }, {
    "from": 130,
    "label": "has",
    "to": 143
  }, {
    "from": 130,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 144,
    "label": "has",
    "to": 150
  }, {
    "from": 144,
    "label": "has",
    "to": 151
  }, {
    "from": 144,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 130,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 131
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 128,
    "label": "has",
    "to": 162
  }, {
    "from": 125,
    "label": "has",
    "to": 29
  }, {
    "from": 125,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 164,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 173,
    "label": "has",
    "to": 176
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 173,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 173,
    "label": "has",
    "to": 29
  }, {
    "from": 173,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 32
  }, {
    "from": 188,
    "label": "has",
    "to": 29
  }, {
    "from": 188,
    "label": "has",
    "to": 33
  }, {
    "from": 188,
    "label": "has",
    "to": 25
  }, {
    "from": 188,
    "label": "has",
    "to": 34
  }, {
    "from": 188,
    "label": "has",
    "to": 27
  }, {
    "from": 188,
    "label": "has",
    "to": 35
  }, {
    "from": 188,
    "label": "has",
    "to": 36
  }, {
    "from": 188,
    "label": "has",
    "to": 29
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 29
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 29
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 29
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 196,
    "label": "has",
    "to": 29
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 22,
    "label": "calls",
    "to": 209
  }, {
    "from": 53,
    "label": "calls",
    "to": 209
  }, {
    "from": 80,
    "label": "calls",
    "to": 209
  }, {
    "from": 173,
    "label": "calls",
    "to": 209
  }, {
    "from": 2,
    "label": "calls",
    "to": 204
  }, {
    "from": 22,
    "label": "calls",
    "to": 200
  }, {
    "from": 22,
    "label": "calls",
    "to": 200
  }, {
    "from": 31,
    "label": "calls",
    "to": 200
  }, {
    "from": 31,
    "label": "calls",
    "to": 200
  }, {
    "from": 198,
    "label": "calls",
    "to": 85
  }, {
    "from": 49,
    "label": "calls",
    "to": 201
  }, {
    "from": 6,
    "label": "calls",
    "to": 202
  }, {
    "from": 38,
    "label": "calls",
    "to": 202
  }, {
    "from": 53,
    "label": "calls",
    "to": 202
  }, {
    "from": 53,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 125,
    "label": "calls",
    "to": 202
  }, {
    "from": 198,
    "label": "calls",
    "to": 38
  }, {
    "from": 198,
    "label": "calls",
    "to": 173
  }, {
    "from": 22,
    "label": "calls",
    "to": 203
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 198,
    "label": "calls",
    "to": 87
  }, {
    "from": 53,
    "label": "calls",
    "to": 207
  }, {
    "from": 164,
    "label": "calls",
    "to": 207
  }, {
    "from": 198,
    "label": "calls",
    "to": 22
  }, {
    "from": 198,
    "label": "calls",
    "to": 46
  }, {
    "from": 198,
    "label": "calls",
    "to": 80
  }, {
    "from": 173,
    "label": "calls",
    "to": 208
  }, {
    "from": 173,
    "label": "calls",
    "to": 208
  }, {
    "from": 53,
    "label": "calls",
    "to": 51
  }, {
    "from": 53,
    "label": "calls",
    "to": 51
  }, {
    "from": 6,
    "label": "calls",
    "to": 206
  }, {
    "from": 6,
    "label": "calls",
    "to": 206
  }, {
    "from": 22,
    "label": "calls",
    "to": 206
  }, {
    "from": 31,
    "label": "calls",
    "to": 206
  }, {
    "from": 53,
    "label": "calls",
    "to": 211
  }, {
    "from": 6,
    "label": "calls",
    "to": 210
  }, {
    "from": 53,
    "label": "calls",
    "to": 210
  }, {
    "from": 125,
    "label": "calls",
    "to": 210
  }, {
    "from": 125,
    "label": "calls",
    "to": 210
  }, {
    "from": 125,
    "label": "calls",
    "to": 210
  }, {
    "from": 198,
    "label": "calls",
    "to": 83
  }, {
    "from": 198,
    "label": "calls",
    "to": 40
  }, {
    "from": 173,
    "label": "calls",
    "to": 125
  }, {
    "from": 198,
    "label": "calls",
    "to": 53
  }, {
    "from": 198,
    "label": "calls",
    "to": 205
  }, {
    "from": 31,
    "label": "calls",
    "to": 205
  }, {
    "from": 31,
    "label": "calls",
    "to": 205
  }, {
    "from": 31,
    "label": "calls",
    "to": 205
  }, {
    "from": 40,
    "label": "calls",
    "to": 205
  }, {
    "from": 46,
    "label": "calls",
    "to": 205
  }, {
    "from": 46,
    "label": "calls",
    "to": 205
  }, {
    "from": 49,
    "label": "calls",
    "to": 205
  }, {
    "from": 53,
    "label": "calls",
    "to": 205
  }, {
    "from": 53,
    "label": "calls",
    "to": 205
  }, {
    "from": 83,
    "label": "calls",
    "to": 205
  }, {
    "from": 85,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 87,
    "label": "calls",
    "to": 205
  }, {
    "from": 110,
    "label": "calls",
    "to": 205
  }, {
    "from": 112,
    "label": "calls",
    "to": 205
  }, {
    "from": 112,
    "label": "calls",
    "to": 205
  }, {
    "from": 112,
    "label": "calls",
    "to": 205
  }, {
    "from": 112,
    "label": "calls",
    "to": 205
  }, {
    "from": 112,
    "label": "calls",
    "to": 205
  }, {
    "from": 118,
    "label": "calls",
    "to": 205
  }, {
    "from": 118,
    "label": "calls",
    "to": 205
  }, {
    "from": 118,
    "label": "calls",
    "to": 205
  }, {
    "from": 122,
    "label": "calls",
    "to": 205
  }, {
    "from": 122,
    "label": "calls",
    "to": 205
  }, {
    "from": 164,
    "label": "calls",
    "to": 164
  }, {
    "from": 173,
    "label": "calls",
    "to": 164
  }, {
    "from": 198,
    "label": "calls",
    "to": 6
  }, {
    "from": 198,
    "label": "calls",
    "to": 110
  }, {
    "from": 198,
    "label": "calls",
    "to": 49
  }, {
    "from": 198,
    "label": "calls",
    "to": 118
  }, {
    "from": 31,
    "label": "calls",
    "to": 31
  }, {
    "from": 198,
    "label": "calls",
    "to": 31
  }, {
    "from": 198,
    "label": "calls",
    "to": 122
  }, {
    "from": 198,
    "label": "calls",
    "to": 199
  }, {
    "from": 198,
    "label": "calls",
    "to": 112
  }, {
    "from": 80,
    "label": "calls",
    "to": 212
  }, {
    "from": 1,
    "label": "contains",
    "to": 198
  }, {
    "from": 198,
    "label": "declares",
    "to": 2
  }, {
    "from": 198,
    "label": "declares",
    "to": 6
  }, {
    "from": 198,
    "label": "declares",
    "to": 22
  }, {
    "from": 198,
    "label": "declares",
    "to": 31
  }, {
    "from": 198,
    "label": "declares",
    "to": 38
  }, {
    "from": 198,
    "label": "declares",
    "to": 40
  }, {
    "from": 198,
    "label": "declares",
    "to": 42
  }, {
    "from": 198,
    "label": "declares",
    "to": 46
  }, {
    "from": 198,
    "label": "declares",
    "to": 49
  }, {
    "from": 198,
    "label": "declares",
    "to": 51
  }, {
    "from": 198,
    "label": "declares",
    "to": 53
  }, {
    "from": 198,
    "label": "declares",
    "to": 80
  }, {
    "from": 198,
    "label": "declares",
    "to": 83
  }, {
    "from": 198,
    "label": "declares",
    "to": 85
  }, {
    "from": 198,
    "label": "declares",
    "to": 87
  }, {
    "from": 198,
    "label": "declares",
    "to": 110
  }, {
    "from": 198,
    "label": "declares",
    "to": 112
  }, {
    "from": 198,
    "label": "declares",
    "to": 118
  }, {
    "from": 198,
    "label": "declares",
    "to": 122
  }, {
    "from": 198,
    "label": "declares",
    "to": 125
  }, {
    "from": 198,
    "label": "declares",
    "to": 164
  }, {
    "from": 198,
    "label": "declares",
    "to": 173
  }, {
    "from": 198,
    "label": "declares",
    "to": 185
  }, {
    "from": 198,
    "label": "declares",
    "to": 188
  }, {
    "from": 198,
    "label": "declares",
    "to": 190
  }, {
    "from": 198,
    "label": "declares",
    "to": 192
  }, {
    "from": 198,
    "label": "declares",
    "to": 194
  }, {
    "from": 198,
    "label": "declares",
    "to": 196
  }, {
    "from": 1,
    "label": "contains",
    "to": 213
  }, {
    "from": 1,
    "label": "contains",
    "to": 214
  }, {
    "from": 213,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 213,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 213,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 213,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 213,
    "label": "initializes",
    "to": 223
  }, {
    "from": 213,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 225,
    "label": "assigns",
    "to": 227
  }, {
    "from": 225,
    "label": "assigns",
    "to": 228
  }, {
    "from": 225,
    "label": "assigns",
    "to": 229
  }, {
    "from": 225,
    "label": "assigns",
    "to": 230
  }, {
    "from": 225,
    "label": "assigns",
    "to": 231
  }, {
    "from": 225,
    "label": "assigns",
    "to": 232
  }, {
    "from": 225,
    "label": "assigns",
    "to": 233
  }, {
    "from": 225,
    "label": "assigns",
    "to": 234
  }, {
    "from": 225,
    "label": "assigns",
    "to": 235
  }, {
    "from": 225,
    "label": "assigns",
    "to": 236
  }, {
    "from": 225,
    "label": "assigns",
    "to": 237
  }, {
    "from": 225,
    "label": "assigns",
    "to": 238
  }, {
    "from": 225,
    "label": "assigns",
    "to": 239
  }, {
    "from": 225,
    "label": "assigns",
    "to": 240
  }, {
    "from": 225,
    "label": "assigns",
    "to": 241
  }, {
    "from": 225,
    "label": "assigns",
    "to": 242
  }, {
    "from": 225,
    "label": "assigns",
    "to": 243
  }, {
    "from": 225,
    "label": "assigns",
    "to": 244
  }, {
    "from": 225,
    "label": "assigns",
    "to": 245
  }, {
    "from": 225,
    "label": "assigns",
    "to": 246
  }, {
    "from": 225,
    "label": "assigns",
    "to": 247
  }, {
    "from": 225,
    "label": "assigns",
    "to": 248
  }, {
    "from": 225,
    "label": "assigns",
    "to": 249
  }, {
    "from": 213,
    "label": "initializes",
    "to": 250
  }, {
    "from": 250,
    "label": "assigns",
    "to": 251
  }, {
    "from": 213,
    "label": "initializes",
    "to": 252
  }, {
    "from": 252,
    "label": "assigns",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 253,
    "label": "assigns",
    "to": 256
  }, {
    "from": 256,
    "label": "assigns",
    "to": 257
  }, {
    "from": 213,
    "label": "initializes",
    "to": 258
  }, {
    "from": 258,
    "label": "assigns",
    "to": 259
  }, {
    "from": 213,
    "label": "initializes",
    "to": 260
  }, {
    "from": 260,
    "label": "assigns",
    "to": 261
  }, {
    "from": 213,
    "label": "initializes",
    "to": 262
  }, {
    "from": 262,
    "label": "assigns",
    "to": 263
  }, {
    "from": 213,
    "label": "initializes",
    "to": 264
  }, {
    "from": 264,
    "label": "assigns",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 213,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 213,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 213,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 213,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 213,
    "label": "initializes",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 213,
    "label": "initializes",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 213,
    "label": "initializes",
    "to": 279
  }, {
    "from": 279,
    "label": "assigns",
    "to": 280
  }, {
    "from": 213,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "assigns",
    "to": 282
  }, {
    "from": 213,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 213,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "assigns",
    "to": 286
  }, {
    "from": 213,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 213,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 213,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 213,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 213,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 213,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 213,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "genminilua",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function usage()\r\n  io.stderr:write(\"Usage: \", arg and arg[0] or \"genminilua\",\r\n\t\t  \" lua-\", LUA_VERSION, \"-source-dir\\n\")\r\n  os.exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "io.stderr:write(\"Usage: \", arg and arg[0] or \"genminilua\",\r\n\t\t  \" lua-\", LUA_VERSION, \"-source-dir\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function find_sources()\r\n  LUA_SOURCE = arg and arg[1]\r\n  if not LUA_SOURCE then usage() end\r\n  if sub(LUA_SOURCE, -1) ~= \"/\" then LUA_SOURCE = LUA_SOURCE..\"/\" end\r\n  local fp = io.open(LUA_SOURCE .. \"lua.h\")\r\n  if not fp then\r\n    LUA_SOURCE = LUA_SOURCE..\"src/\"\r\n    fp = io.open(LUA_SOURCE .. \"lua.h\")\r\n    if not fp then usage() end\r\n  end\r\n  local all = fp:read(\"*a\")\r\n  fp:close()\r\n  if not match(all, 'LUA_RELEASE%s*\"Lua '..LUA_VERSION..'\"') then\r\n    io.stderr:write(\"Error: version mismatch\\n\")\r\n    usage()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "LUA_SOURCE = arg and arg[1]",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if not LUA_SOURCE then usage() end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "usage()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "if sub(LUA_SOURCE, -1) ~= \"/\" then LUA_SOURCE = LUA_SOURCE..\"/\" end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "LUA_SOURCE = LUA_SOURCE..\"/\"",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "local fp = io.open(LUA_SOURCE .. \"lua.h\")",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if not fp then\r\n    LUA_SOURCE = LUA_SOURCE..\"src/\"\r\n    fp = io.open(LUA_SOURCE .. \"lua.h\")\r\n    if not fp then usage() end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "LUA_SOURCE = LUA_SOURCE..\"src/\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "fp = io.open(LUA_SOURCE .. \"lua.h\")",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if not fp then usage() end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local all = fp:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "fp:close()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if not match(all, 'LUA_RELEASE%s*\"Lua '..LUA_VERSION..'\"') then\r\n    io.stderr:write(\"Error: version mismatch\\n\")\r\n    usage()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "io.stderr:write(\"Error: version mismatch\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function read_sources()\r\n  local t = {}\r\n  for i, name in ipairs(LUA_FILES) do\r\n    local fp = assert(io.open(LUA_SOURCE..name, \"r\"))\r\n    t[i] = fp:read(\"*a\")\r\n    assert(fp:close())\r\n  end\r\n  t[#t+1] = CUSTOM_MAIN\r\n  return table.concat(t)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for i, name in ipairs(LUA_FILES) do\r\n    local fp = assert(io.open(LUA_SOURCE..name, \"r\"))\r\n    t[i] = fp:read(\"*a\")\r\n    assert(fp:close())\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "local fp = assert(io.open(LUA_SOURCE..name, \"r\"))",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "t[i] = fp:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "assert(fp:close())",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "t[#t+1] = CUSTOM_MAIN",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function merge_includes(src)\r\n  return gsub(src, '#include%s*\"([^\"]*)\"%s*\\n', function(name)\r\n    if includes[name] then return \"\" end\r\n    includes[name] = true\r\n    local fp = assert(io.open(LUA_SOURCE..name, \"r\"))\r\n    local src = fp:read(\"*a\")\r\n    assert(fp:close())\r\n    src = gsub(src, \"#ifndef%s+%w+_h\\n#define%s+%w+_h\\n\", \"\")\r\n    src = gsub(src, \"#endif%s*$\", \"\")\r\n    return merge_includes(src)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "if includes[name] then return \"\" end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "includes[name] = true",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "local src = fp:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "src = gsub(src, \"#ifndef%s+%w+_h\\n#define%s+%w+_h\\n\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "src = gsub(src, \"#endif%s*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function get_license(src)\r\n  return match(src, \"/%*+\\n%* Copyright %(.-%*/\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function fold_lines(src)\r\n  return gsub(src, \"\\\\\\n\", \" \")\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function save_str(str)\r\n  local n = #strings+1\r\n  strings[n] = str\r\n  return \"\\1\"..n..\"\\2\"\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local n = #strings+1",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "strings[n] = str",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function save_strings(src)\r\n  src = gsub(src, '\"[^\"\\n]*\"', save_str)\r\n  return gsub(src, \"'[^'\\n]*'\", save_str)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "src = gsub(src, '\"[^\"\\n]*\"', save_str)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function restore_strings(src)\r\n  return gsub(src, \"\\1(%d+)\\2\", function(numstr)\r\n    return strings[tonumber(numstr)]\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function def_istrue(def)\r\n  return def == \"INT_MAX > 2147483640L\" or\r\n\t def == \"LUAI_BITSINT >= 32\" or\r\n\t def == \"SIZE_Bx < LUAI_BITSINT-1\" or\r\n\t def == \"cast\" or\r\n\t def == \"defined(LUA_CORE)\" or\r\n\t def == \"MINSTRTABSIZE\" or\r\n\t def == \"LUA_MINBUFFER\" or\r\n\t def == \"HARDSTACKTESTS\" or\r\n\t def == \"UNUSED\"\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function preprocess(src)\r\n  local t = { match(src, \"^(.-)#\") }\r\n  local lvl, on, oldon = 0, true, {}\r\n  for pp, def, txt in string.gmatch(src, \"#(%w+) *([^\\n]*)\\n([^#]*)\") do\r\n    if pp == \"if\" or pp == \"ifdef\" or pp == \"ifndef\" then\r\n      lvl = lvl + 1\r\n      oldon[lvl] = on\r\n      on = def_istrue(def)\r\n    elseif pp == \"else\" then\r\n      if oldon[lvl] then\r\n\tif on == false then on = true else on = false end\r\n      end\r\n    elseif pp == \"elif\" then\r\n      if oldon[lvl] then\r\n\ton = def_istrue(def)\r\n      end\r\n    elseif pp == \"endif\" then\r\n      on = oldon[lvl]\r\n      lvl = lvl - 1\r\n    elseif on then\r\n      if pp == \"include\" then\r\n\tif not head[def] and not REMOVE_EXTINC[def] then\r\n\t  head[def] = true\r\n\t  head[#head+1] = \"#include \"..def..\"\\n\"\r\n\tend\r\n      elseif pp == \"define\" then\r\n\tlocal k, sp, v = match(def, \"([%w_]+)(%s*)(.*)\")\r\n\tif k and not (sp == \"\" and sub(v, 1, 1) == \"(\") then\r\n\t  defs[k] = gsub(v, \"%a[%w_]*\", function(tok)\r\n\t    return defs[tok] or tok\r\n\t  end)\r\n\telse\r\n\t  t[#t+1] = \"#define \"..def..\"\\n\"\r\n\tend\r\n      elseif pp ~= \"undef\" then\r\n\terror(\"unexpected directive: \"..pp..\" \"..def)\r\n      end\r\n    end\r\n    if on then t[#t+1] = txt end\r\n  end\r\n  return gsub(table.concat(t), \"%a[%w_]*\", function(tok)\r\n    return defs[tok] or tok\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local t = { match(src, \"^(.-)#\") }",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local lvl, on, oldon = 0, true, {}",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for pp, def, txt in string.gmatch(src, \"#(%w+) *([^\\n]*)\\n([^#]*)\") do\r\n    if pp == \"if\" or pp == \"ifdef\" or pp == \"ifndef\" then\r\n      lvl = lvl + 1\r\n      oldon[lvl] = on\r\n      on = def_istrue(def)\r\n    elseif pp == \"else\" then\r\n      if oldon[lvl] then\r\n\tif on == false then on = true else on = false end\r\n      end\r\n    elseif pp == \"elif\" then\r\n      if oldon[lvl] then\r\n\ton = def_istrue(def)\r\n      end\r\n    elseif pp == \"endif\" then\r\n      on = oldon[lvl]\r\n      lvl = lvl - 1\r\n    elseif on then\r\n      if pp == \"include\" then\r\n\tif not head[def] and not REMOVE_EXTINC[def] then\r\n\t  head[def] = true\r\n\t  head[#head+1] = \"#include \"..def..\"\\n\"\r\n\tend\r\n      elseif pp == \"define\" then\r\n\tlocal k, sp, v = match(def, \"([%w_]+)(%s*)(.*)\")\r\n\tif k and not (sp == \"\" and sub(v, 1, 1) == \"(\") then\r\n\t  defs[k] = gsub(v, \"%a[%w_]*\", function(tok)\r\n\t    return defs[tok] or tok\r\n\t  end)\r\n\telse\r\n\t  t[#t+1] = \"#define \"..def..\"\\n\"\r\n\tend\r\n      elseif pp ~= \"undef\" then\r\n\terror(\"unexpected directive: \"..pp..\" \"..def)\r\n      end\r\n    end\r\n    if on then t[#t+1] = txt end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "if pp == \"if\" or pp == \"ifdef\" or pp == \"ifndef\" then\r\n      lvl = lvl + 1\r\n      oldon[lvl] = on\r\n      on = def_istrue(def)\r\n    elseif pp == \"else\" then\r\n      if oldon[lvl] then\r\n\tif on == false then on = true else on = false end\r\n      end\r\n    elseif pp == \"elif\" then\r\n      if oldon[lvl] then\r\n\ton = def_istrue(def)\r\n      end\r\n    elseif pp == \"endif\" then\r\n      on = oldon[lvl]\r\n      lvl = lvl - 1\r\n    elseif on then\r\n      if pp == \"include\" then\r\n\tif not head[def] and not REMOVE_EXTINC[def] then\r\n\t  head[def] = true\r\n\t  head[#head+1] = \"#include \"..def..\"\\n\"\r\n\tend\r\n      elseif pp == \"define\" then\r\n\tlocal k, sp, v = match(def, \"([%w_]+)(%s*)(.*)\")\r\n\tif k and not (sp == \"\" and sub(v, 1, 1) == \"(\") then\r\n\t  defs[k] = gsub(v, \"%a[%w_]*\", function(tok)\r\n\t    return defs[tok] or tok\r\n\t  end)\r\n\telse\r\n\t  t[#t+1] = \"#define \"..def..\"\\n\"\r\n\tend\r\n      elseif pp ~= \"undef\" then\r\n\terror(\"unexpected directive: \"..pp..\" \"..def)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "lvl = lvl + 1",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "oldon[lvl] = on",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "on = def_istrue(def)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if oldon[lvl] then\r\n\tif on == false then on = true else on = false end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "if on == false then on = true else on = false end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "on = true",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "on = false",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if oldon[lvl] then\r\n\ton = def_istrue(def)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "on = oldon[lvl]",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "lvl = lvl - 1",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if pp == \"include\" then\r\n\tif not head[def] and not REMOVE_EXTINC[def] then\r\n\t  head[def] = true\r\n\t  head[#head+1] = \"#include \"..def..\"\\n\"\r\n\tend\r\n      elseif pp == \"define\" then\r\n\tlocal k, sp, v = match(def, \"([%w_]+)(%s*)(.*)\")\r\n\tif k and not (sp == \"\" and sub(v, 1, 1) == \"(\") then\r\n\t  defs[k] = gsub(v, \"%a[%w_]*\", function(tok)\r\n\t    return defs[tok] or tok\r\n\t  end)\r\n\telse\r\n\t  t[#t+1] = \"#define \"..def..\"\\n\"\r\n\tend\r\n      elseif pp ~= \"undef\" then\r\n\terror(\"unexpected directive: \"..pp..\" \"..def)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "if not head[def] and not REMOVE_EXTINC[def] then\r\n\t  head[def] = true\r\n\t  head[#head+1] = \"#include \"..def..\"\\n\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "head[def] = true",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "head[#head+1] = \"#include \"..def..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local k, sp, v = match(def, \"([%w_]+)(%s*)(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if k and not (sp == \"\" and sub(v, 1, 1) == \"(\") then\r\n\t  defs[k] = gsub(v, \"%a[%w_]*\", function(tok)\r\n\t    return defs[tok] or tok\r\n\t  end)\r\n\telse\r\n\t  t[#t+1] = \"#define \"..def..\"\\n\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "defs[k] = gsub(v, \"%a[%w_]*\", function(tok)\r\n\t    return defs[tok] or tok\r\n\t  end)",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "t[#t+1] = \"#define \"..def..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "error(\"unexpected directive: \"..pp..\" \"..def)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "if on then t[#t+1] = txt end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "t[#t+1] = txt",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "local function merge_header(src, license)\r\n  local hdr = string.format([[\r\n/* This is a heavily customized and minimized copy of Lua %s. */\r\n/* It's only used to build LuaJIT. It does NOT have all standard functions! */\r\n]], LUA_VERSION)\r\n  return hdr..license..table.concat(head)..src\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local hdr = string.format([[\r\n/* This is a heavily customized and minimized copy of Lua %s. */\r\n/* It's only used to build LuaJIT. It does NOT have all standard functions! */\r\n]], LUA_VERSION)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "local function strip_unused1(src)\r\n  return gsub(src, '(  {\"?([%w_]+)\"?,%s+%a[%w_]*},\\n)', function(line, func)\r\n    return REMOVE_LIB[func] and \"\" or line\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function strip_unused2(src)\r\n  return gsub(src, \"Symbolic Execution.-}=\", \"\")\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "local function strip_unused3(src)\r\n  src = gsub(src, \"extern\", \"static\")\r\n  src = gsub(src, \"\\nstatic([^\\n]-)%(([^)]*)%)%(\", \"\\nstatic%1 %2(\")\r\n  src = gsub(src, \"#define lua_assert[^\\n]*\\n\", \"\")\r\n  src = gsub(src, \"lua_assert%b();?\", \"\")\r\n  src = gsub(src, \"default:\\n}\", \"default:;\\n}\")\r\n  src = gsub(src, \"lua_lock%b();\", \"\")\r\n  src = gsub(src, \"lua_unlock%b();\", \"\")\r\n  src = gsub(src, \"luai_threadyield%b();\", \"\")\r\n  src = gsub(src, \"luai_userstateopen%b();\", \"{}\")\r\n  src = gsub(src, \"luai_userstate%w+%b();\", \"\")\r\n  src = gsub(src, \"%(%(c==.*luaY_parser%)\", \"luaY_parser\")\r\n  src = gsub(src, \"trydecpoint%(ls,seminfo%)\",\r\n\t\t  \"luaX_lexerror(ls,\\\"malformed number\\\",TK_NUMBER)\")\r\n  src = gsub(src, \"int c=luaZ_lookahead%b();\", \"\")\r\n  src = gsub(src, \"luaL_register%(L,[^,]*,co_funcs%);\\nreturn 2;\",\r\n\t\t  \"return 1;\")\r\n  src = gsub(src, \"getfuncname%b():\", \"NULL:\")\r\n  src = gsub(src, \"getobjname%b():\", \"NULL:\")\r\n  src = gsub(src, \"if%([^\\n]*hookmask[^\\n]*%)\\n[^\\n]*\\n\", \"\")\r\n  src = gsub(src, \"if%([^\\n]*hookmask[^\\n]*%)%b{}\\n\", \"\")\r\n  src = gsub(src, \"if%([^\\n]*hookmask[^\\n]*&&\\n[^\\n]*%b{}\\n\", \"\")\r\n  src = gsub(src, \"(twoto%b()%()\", \"%1(size_t)\")\r\n  src = gsub(src, \"i<sizenode\", \"i<(int)sizenode\")\r\n  return gsub(src, \"\\n\\n+\", \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "src = gsub(src, \"extern\", \"static\")",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "src = gsub(src, \"\\nstatic([^\\n]-)%(([^)]*)%)%(\", \"\\nstatic%1 %2(\")",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "src = gsub(src, \"#define lua_assert[^\\n]*\\n\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "src = gsub(src, \"lua_assert%b();?\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "src = gsub(src, \"default:\\n}\", \"default:;\\n}\")",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "src = gsub(src, \"lua_lock%b();\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "src = gsub(src, \"lua_unlock%b();\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "src = gsub(src, \"luai_threadyield%b();\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "src = gsub(src, \"luai_userstateopen%b();\", \"{}\")",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "src = gsub(src, \"luai_userstate%w+%b();\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "src = gsub(src, \"%(%(c==.*luaY_parser%)\", \"luaY_parser\")",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "src = gsub(src, \"trydecpoint%(ls,seminfo%)\",\r\n\t\t  \"luaX_lexerror(ls,\\\"malformed number\\\",TK_NUMBER)\")",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "src = gsub(src, \"int c=luaZ_lookahead%b();\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "src = gsub(src, \"luaL_register%(L,[^,]*,co_funcs%);\\nreturn 2;\",\r\n\t\t  \"return 1;\")",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "src = gsub(src, \"getfuncname%b():\", \"NULL:\")",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "src = gsub(src, \"getobjname%b():\", \"NULL:\")",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "src = gsub(src, \"if%([^\\n]*hookmask[^\\n]*%)\\n[^\\n]*\\n\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "src = gsub(src, \"if%([^\\n]*hookmask[^\\n]*%)%b{}\\n\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "src = gsub(src, \"if%([^\\n]*hookmask[^\\n]*&&\\n[^\\n]*%b{}\\n\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "src = gsub(src, \"(twoto%b()%()\", \"%1(size_t)\")",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "src = gsub(src, \"i<sizenode\", \"i<(int)sizenode\")",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "local function strip_comments(src)\r\n  return gsub(src, \"/%*.-%*/\", \" \")\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local function strip_whitespace(src)\r\n  src = gsub(src, \"^%s+\", \"\")\r\n  src = gsub(src, \"%s*\\n%s*\", \"\\n\")\r\n  src = gsub(src, \"[ \\t]+\", \" \")\r\n  src = gsub(src, \"(%W) \", \"%1\")\r\n  return gsub(src, \" (%W)\", \"%1\")\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "src = gsub(src, \"^%s+\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "src = gsub(src, \"%s*\\n%s*\", \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "src = gsub(src, \"[ \\t]+\", \" \")",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "src = gsub(src, \"(%W) \", \"%1\")",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "local function rename_tokens1(src)\r\n  src = gsub(src, \"getline\", \"getline_\")\r\n  src = gsub(src, \"struct ([%w_]+)\", \"ZX%1\")\r\n  return gsub(src, \"union ([%w_]+)\", \"ZY%1\")\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "src = gsub(src, \"getline\", \"getline_\")",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "src = gsub(src, \"struct ([%w_]+)\", \"ZX%1\")",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function rename_tokens2(src)\r\n  src = gsub(src, \"ZX([%w_]+)\", \"struct %1\")\r\n  return gsub(src, \"ZY([%w_]+)\", \"union %1\")\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "src = gsub(src, \"ZX([%w_]+)\", \"struct %1\")",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "local function func_gather(src)\r\n  local nodes, list = {}, {}\r\n  local pos, len = 1, #src\r\n  while pos < len do\r\n    local d, w = match(src, \"^(#define ([%w_]+)[^\\n]*\\n)\", pos)\r\n    if d then\r\n      local n = #list+1\r\n      list[n] = d\r\n      nodes[w] = n\r\n    else\r\n      local s\r\n      d, w, s = match(src, \"^(([%w_]+)[^\\n]*([{;])\\n)\", pos)\r\n      if not d then\r\n\td, w, s = match(src, \"^(([%w_]+)[^(]*%b()([{;])\\n)\", pos)\r\n\tif not d then d = match(src, \"^[^\\n]*\\n\", pos) end\r\n      end\r\n      if s == \"{\" then\r\n\td = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tif sub(d, -2) == \"{\\n\" then\r\n\t  d = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tend\r\n      end\r\n      local k, v = nil, d\r\n      if w == \"typedef\" then\r\n\tif match(d, \"^typedef enum\") then\r\n\t  head[#head+1] = d\r\n\telse\r\n\t  k = match(d, \"([%w_]+);\\n$\")\r\n\t  if not k then k = match(d, \"^.-%(.-([%w_]+)%)%(\") end\r\n\tend\r\n      elseif w == \"enum\" then\r\n\thead[#head+1] = v\r\n      elseif w ~= nil then\r\n\tk = match(d, \"^[^\\n]-([%w_]+)[(%[=]\")\r\n\tif k then\r\n\t  if w ~= \"static\" and k ~= \"main\" then v = \"static \"..d end\r\n\telse\r\n\t  k = w\r\n\tend\r\n      end\r\n      if w and k then\r\n\tlocal o = nodes[k]\r\n\tif o then nodes[\"*\"..k] = o end\r\n\tlocal n = #list+1\r\n\tlist[n] = v\r\n\tnodes[k] = n\r\n      end\r\n    end\r\n    pos = pos + #d\r\n  end\r\n  return nodes, list\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local nodes, list = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local pos, len = 1, #src",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "while pos < len do\r\n    local d, w = match(src, \"^(#define ([%w_]+)[^\\n]*\\n)\", pos)\r\n    if d then\r\n      local n = #list+1\r\n      list[n] = d\r\n      nodes[w] = n\r\n    else\r\n      local s\r\n      d, w, s = match(src, \"^(([%w_]+)[^\\n]*([{;])\\n)\", pos)\r\n      if not d then\r\n\td, w, s = match(src, \"^(([%w_]+)[^(]*%b()([{;])\\n)\", pos)\r\n\tif not d then d = match(src, \"^[^\\n]*\\n\", pos) end\r\n      end\r\n      if s == \"{\" then\r\n\td = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tif sub(d, -2) == \"{\\n\" then\r\n\t  d = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tend\r\n      end\r\n      local k, v = nil, d\r\n      if w == \"typedef\" then\r\n\tif match(d, \"^typedef enum\") then\r\n\t  head[#head+1] = d\r\n\telse\r\n\t  k = match(d, \"([%w_]+);\\n$\")\r\n\t  if not k then k = match(d, \"^.-%(.-([%w_]+)%)%(\") end\r\n\tend\r\n      elseif w == \"enum\" then\r\n\thead[#head+1] = v\r\n      elseif w ~= nil then\r\n\tk = match(d, \"^[^\\n]-([%w_]+)[(%[=]\")\r\n\tif k then\r\n\t  if w ~= \"static\" and k ~= \"main\" then v = \"static \"..d end\r\n\telse\r\n\t  k = w\r\n\tend\r\n      end\r\n      if w and k then\r\n\tlocal o = nodes[k]\r\n\tif o then nodes[\"*\"..k] = o end\r\n\tlocal n = #list+1\r\n\tlist[n] = v\r\n\tnodes[k] = n\r\n      end\r\n    end\r\n    pos = pos + #d\r\n  end",
    "type": "statement:while"
  }, {
    "id": 129,
    "text": "local d, w = match(src, \"^(#define ([%w_]+)[^\\n]*\\n)\", pos)",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "if d then\r\n      local n = #list+1\r\n      list[n] = d\r\n      nodes[w] = n\r\n    else\r\n      local s\r\n      d, w, s = match(src, \"^(([%w_]+)[^\\n]*([{;])\\n)\", pos)\r\n      if not d then\r\n\td, w, s = match(src, \"^(([%w_]+)[^(]*%b()([{;])\\n)\", pos)\r\n\tif not d then d = match(src, \"^[^\\n]*\\n\", pos) end\r\n      end\r\n      if s == \"{\" then\r\n\td = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tif sub(d, -2) == \"{\\n\" then\r\n\t  d = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tend\r\n      end\r\n      local k, v = nil, d\r\n      if w == \"typedef\" then\r\n\tif match(d, \"^typedef enum\") then\r\n\t  head[#head+1] = d\r\n\telse\r\n\t  k = match(d, \"([%w_]+);\\n$\")\r\n\t  if not k then k = match(d, \"^.-%(.-([%w_]+)%)%(\") end\r\n\tend\r\n      elseif w == \"enum\" then\r\n\thead[#head+1] = v\r\n      elseif w ~= nil then\r\n\tk = match(d, \"^[^\\n]-([%w_]+)[(%[=]\")\r\n\tif k then\r\n\t  if w ~= \"static\" and k ~= \"main\" then v = \"static \"..d end\r\n\telse\r\n\t  k = w\r\n\tend\r\n      end\r\n      if w and k then\r\n\tlocal o = nodes[k]\r\n\tif o then nodes[\"*\"..k] = o end\r\n\tlocal n = #list+1\r\n\tlist[n] = v\r\n\tnodes[k] = n\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "local n = #list+1",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "list[n] = d",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "nodes[w] = n",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "d, w, s = match(src, \"^(([%w_]+)[^\\n]*([{;])\\n)\", pos)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "if not d then\r\n\td, w, s = match(src, \"^(([%w_]+)[^(]*%b()([{;])\\n)\", pos)\r\n\tif not d then d = match(src, \"^[^\\n]*\\n\", pos) end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "d, w, s = match(src, \"^(([%w_]+)[^(]*%b()([{;])\\n)\", pos)",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "if not d then d = match(src, \"^[^\\n]*\\n\", pos) end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "d = match(src, \"^[^\\n]*\\n\", pos)",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "if s == \"{\" then\r\n\td = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tif sub(d, -2) == \"{\\n\" then\r\n\t  d = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tend\r\n      end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "d = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "if sub(d, -2) == \"{\\n\" then\r\n\t  d = d..sub(match(src, \"^%b{}[^;\\n]*;?\\n\", pos+#d-2), 3)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "local k, v = nil, d",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if w == \"typedef\" then\r\n\tif match(d, \"^typedef enum\") then\r\n\t  head[#head+1] = d\r\n\telse\r\n\t  k = match(d, \"([%w_]+);\\n$\")\r\n\t  if not k then k = match(d, \"^.-%(.-([%w_]+)%)%(\") end\r\n\tend\r\n      elseif w == \"enum\" then\r\n\thead[#head+1] = v\r\n      elseif w ~= nil then\r\n\tk = match(d, \"^[^\\n]-([%w_]+)[(%[=]\")\r\n\tif k then\r\n\t  if w ~= \"static\" and k ~= \"main\" then v = \"static \"..d end\r\n\telse\r\n\t  k = w\r\n\tend\r\n      end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "if match(d, \"^typedef enum\") then\r\n\t  head[#head+1] = d\r\n\telse\r\n\t  k = match(d, \"([%w_]+);\\n$\")\r\n\t  if not k then k = match(d, \"^.-%(.-([%w_]+)%)%(\") end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "head[#head+1] = d",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "k = match(d, \"([%w_]+);\\n$\")",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "if not k then k = match(d, \"^.-%(.-([%w_]+)%)%(\") end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "k = match(d, \"^.-%(.-([%w_]+)%)%(\")",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "head[#head+1] = v",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "k = match(d, \"^[^\\n]-([%w_]+)[(%[=]\")",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if k then\r\n\t  if w ~= \"static\" and k ~= \"main\" then v = \"static \"..d end\r\n\telse\r\n\t  k = w\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "if w ~= \"static\" and k ~= \"main\" then v = \"static \"..d end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "v = \"static \"..d",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "k = w",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "if w and k then\r\n\tlocal o = nodes[k]\r\n\tif o then nodes[\"*\"..k] = o end\r\n\tlocal n = #list+1\r\n\tlist[n] = v\r\n\tnodes[k] = n\r\n      end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "local o = nodes[k]",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if o then nodes[\"*\"..k] = o end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "nodes[\"*\"..k] = o",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "list[n] = v",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "nodes[k] = n",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "pos = pos + #d",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "local function func_visit(nodes, list, used, n)\r\n  local i = nodes[n]\r\n  for m in string.gmatch(list[i], \"[%w_]+\") do\r\n    if nodes[m] then\r\n      local j = used[m]\r\n      if not j then\r\n\tused[m] = i\r\n\tfunc_visit(nodes, list, used, m)\r\n      elseif i < j then\r\n\tused[m] = i\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "local i = nodes[n]",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "for m in string.gmatch(list[i], \"[%w_]+\") do\r\n    if nodes[m] then\r\n      local j = used[m]\r\n      if not j then\r\n\tused[m] = i\r\n\tfunc_visit(nodes, list, used, m)\r\n      elseif i < j then\r\n\tused[m] = i\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 167,
    "text": "if nodes[m] then\r\n      local j = used[m]\r\n      if not j then\r\n\tused[m] = i\r\n\tfunc_visit(nodes, list, used, m)\r\n      elseif i < j then\r\n\tused[m] = i\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "local j = used[m]",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if not j then\r\n\tused[m] = i\r\n\tfunc_visit(nodes, list, used, m)\r\n      elseif i < j then\r\n\tused[m] = i\r\n      end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "used[m] = i",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "func_visit(nodes, list, used, m)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "local function func_collect(src)\r\n  local nodes, list = func_gather(src)\r\n  local used = {}\r\n  func_visit(nodes, list, used, \"main\")\r\n  for n,i in pairs(nodes) do\r\n    local j = used[n]\r\n    if j and j < i then used[\"*\"..n] = j end\r\n  end\r\n  for n,i in pairs(nodes) do\r\n    if not used[n] then list[i] = \"\" end\r\n  end\r\n  return table.concat(list)\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "local nodes, list = func_gather(src)",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "local used = {}",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "func_visit(nodes, list, used, \"main\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "for n,i in pairs(nodes) do\r\n    local j = used[n]\r\n    if j and j < i then used[\"*\"..n] = j end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 178,
    "text": "local j = used[n]",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "if j and j < i then used[\"*\"..n] = j end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "used[\"*\"..n] = j",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "for n,i in pairs(nodes) do\r\n    if not used[n] then list[i] = \"\" end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 182,
    "text": "if not used[n] then list[i] = \"\" end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "list[i] = \"\"",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function(name)\r\n  REMOVE_LIB[name] = true\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "REMOVE_LIB[name] = true",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "function(name)\r\n    if includes[name] then return \"\" end\r\n    includes[name] = true\r\n    local fp = assert(io.open(LUA_SOURCE..name, \"r\"))\r\n    local src = fp:read(\"*a\")\r\n    assert(fp:close())\r\n    src = gsub(src, \"#ifndef%s+%w+_h\\n#define%s+%w+_h\\n\", \"\")\r\n    src = gsub(src, \"#endif%s*$\", \"\")\r\n    return merge_includes(src)\r\n  end",
    "type": "function"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "function(numstr)\r\n    return strings[tonumber(numstr)]\r\n  end",
    "type": "function"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function(tok)\r\n\t    return defs[tok] or tok\r\n\t  end",
    "type": "function"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function(tok)\r\n    return defs[tok] or tok\r\n  end",
    "type": "function"
  }, {
    "id": 195,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 196,
    "text": "function(line, func)\r\n    return REMOVE_LIB[func] and \"\" or line\r\n  end",
    "type": "function"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "",
    "type": "function container"
  }, {
    "id": 199,
    "text": "write",
    "type": "global function"
  }, {
    "id": 200,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 201,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 202,
    "text": "match",
    "type": "global function"
  }, {
    "id": 203,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 204,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 205,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 206,
    "text": "open",
    "type": "global function"
  }, {
    "id": 207,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 208,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 209,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 210,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 211,
    "text": "error",
    "type": "global function"
  }, {
    "id": 212,
    "text": "format",
    "type": "global function"
  }, {
    "id": 213,
    "text": "",
    "type": "variable container"
  }, {
    "id": 214,
    "text": "",
    "type": "require container"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "n/a"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "n/a"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "string"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 226,
    "text": "",
    "type": "string"
  }, {
    "id": 227,
    "text": "",
    "type": "string"
  }, {
    "id": 228,
    "text": "",
    "type": "string"
  }, {
    "id": 229,
    "text": "",
    "type": "string"
  }, {
    "id": 230,
    "text": "",
    "type": "string"
  }, {
    "id": 231,
    "text": "",
    "type": "string"
  }, {
    "id": 232,
    "text": "",
    "type": "string"
  }, {
    "id": 233,
    "text": "",
    "type": "string"
  }, {
    "id": 234,
    "text": "",
    "type": "string"
  }, {
    "id": 235,
    "text": "",
    "type": "string"
  }, {
    "id": 236,
    "text": "",
    "type": "string"
  }, {
    "id": 237,
    "text": "",
    "type": "string"
  }, {
    "id": 238,
    "text": "",
    "type": "string"
  }, {
    "id": 239,
    "text": "",
    "type": "string"
  }, {
    "id": 240,
    "text": "",
    "type": "string"
  }, {
    "id": 241,
    "text": "",
    "type": "string"
  }, {
    "id": 242,
    "text": "",
    "type": "string"
  }, {
    "id": 243,
    "text": "",
    "type": "string"
  }, {
    "id": 244,
    "text": "",
    "type": "string"
  }, {
    "id": 245,
    "text": "",
    "type": "string"
  }, {
    "id": 246,
    "text": "",
    "type": "string"
  }, {
    "id": 247,
    "text": "",
    "type": "string"
  }, {
    "id": 248,
    "text": "",
    "type": "string"
  }, {
    "id": 249,
    "text": "",
    "type": "string"
  }, {
    "id": 250,
    "text": "",
    "type": "local variable"
  }, {
    "id": 251,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 252,
    "text": "",
    "type": "local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 254,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 255,
    "text": "",
    "type": "boolean"
  }, {
    "id": 256,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 257,
    "text": "",
    "type": "boolean"
  }, {
    "id": 258,
    "text": "",
    "type": "local variable"
  }, {
    "id": 259,
    "text": "",
    "type": "string"
  }, {
    "id": 260,
    "text": "",
    "type": "local variable"
  }, {
    "id": 261,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 262,
    "text": "",
    "type": "local variable"
  }, {
    "id": 263,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 264,
    "text": "",
    "type": "local variable"
  }, {
    "id": 265,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 266,
    "text": "",
    "type": "string"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "n/a"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "n/a"
  }, {
    "id": 273,
    "text": "",
    "type": "global variable"
  }, {
    "id": 274,
    "text": "",
    "type": "n/a"
  }, {
    "id": 275,
    "text": "",
    "type": "global variable"
  }, {
    "id": 276,
    "text": "",
    "type": "n/a"
  }, {
    "id": 277,
    "text": "",
    "type": "global variable"
  }, {
    "id": 278,
    "text": "",
    "type": "n/a"
  }, {
    "id": 279,
    "text": "",
    "type": "global variable"
  }, {
    "id": 280,
    "text": "",
    "type": "n/a"
  }, {
    "id": 281,
    "text": "",
    "type": "global variable"
  }, {
    "id": 282,
    "text": "",
    "type": "n/a"
  }, {
    "id": 283,
    "text": "",
    "type": "global variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "global variable"
  }, {
    "id": 286,
    "text": "",
    "type": "n/a"
  }, {
    "id": 287,
    "text": "",
    "type": "global variable"
  }, {
    "id": 288,
    "text": "",
    "type": "n/a"
  }, {
    "id": 289,
    "text": "",
    "type": "global variable"
  }, {
    "id": 290,
    "text": "",
    "type": "n/a"
  }, {
    "id": 291,
    "text": "",
    "type": "global variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "global variable"
  }, {
    "id": 294,
    "text": "",
    "type": "n/a"
  }, {
    "id": 295,
    "text": "",
    "type": "global variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "global variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "global variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  } ]
}