{
  "_filename": "sql.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lualogging/src/logging/sql.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 3,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 16
  }, {
    "from": 25,
    "label": "has",
    "to": 17
  }, {
    "from": 25,
    "label": "has",
    "to": 18
  }, {
    "from": 25,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 13
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 32
  }, {
    "from": 3,
    "label": "calls",
    "to": 29
  }, {
    "from": 3,
    "label": "calls",
    "to": 31
  }, {
    "from": 3,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 34
  }, {
    "from": 3,
    "label": "calls",
    "to": 33
  }, {
    "from": 27,
    "label": "calls",
    "to": 35
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 27
  }, {
    "from": 27,
    "label": "declares",
    "to": 3
  }, {
    "from": 27,
    "label": "declares",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 37,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 39
  }, {
    "from": 39,
    "label": "provides",
    "to": 40
  }, {
    "from": 41,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sql",
    "type": "module"
  }, {
    "id": 2,
    "text": "logging",
    "type": "module"
  }, {
    "id": 3,
    "text": "function logging.sql(params)\r\n\tparams = params or {}\r\n\tparams.tablename = params.tablename or \"LogTable\"\r\n\tparams.logdatefield = params.logdatefield or \"LogDate\"\r\n\tparams.loglevelfield = params.loglevelfield or \"LogLevel\"\r\n\tparams.logmessagefield = params.logmessagefield or \"LogMessage\"\r\n\r\n\tif params.connectionfactory == nil or type(params.connectionfactory) ~= \"function\" then\r\n\t\treturn nil, \"No specified connection factory function\"\r\n\tend\r\n\r\n\tlocal con, err\r\n\tif params.keepalive then\r\n\t\tcon, err = params.connectionfactory()\r\n\tend\r\n\r\n\treturn logging.new( function(self, level, message)\r\n\t\tif (not params.keepalive) or (con == nil) then\r\n\t\t\tcon, err = params.connectionfactory()\r\n\t\t\tif not con then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tlocal logDate = os.date(\"%Y-%m-%d %H:%M:%S\")\r\n\t\tlocal insert  = string.format(\"INSERT INTO %s (%s, %s, %s) VALUES ('%s', '%s', '%s')\",\r\n\t\t\tparams.tablename, params.logdatefield, params.loglevelfield,\r\n\t\t\tparams.logmessagefield, logDate, level, string.gsub(message, \"'\", \"''\"))\r\n\r\n\t\tlocal ret, err = pcall(con.execute, con, insert)\r\n\t\tif not ret then\r\n\t\t\tcon, err = params.connectionfactory()\r\n\t\t\tif not con then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\t\tret, err = con:execute(insert)\r\n\t\t\tif not ret then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tif not params.keepalive then\r\n\t\t\tcon:close()\r\n\t\tend\r\n\r\n\t\treturn true\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "params = params or {}",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "params.tablename = params.tablename or \"LogTable\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "params.logdatefield = params.logdatefield or \"LogDate\"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "params.loglevelfield = params.loglevelfield or \"LogLevel\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "params.logmessagefield = params.logmessagefield or \"LogMessage\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if params.connectionfactory == nil or type(params.connectionfactory) ~= \"function\" then\r\n\t\treturn nil, \"No specified connection factory function\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "local con, err",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if params.keepalive then\r\n\t\tcon, err = params.connectionfactory()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "con, err = params.connectionfactory()",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if (not params.keepalive) or (con == nil) then\r\n\t\t\tcon, err = params.connectionfactory()\r\n\t\t\tif not con then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if not con then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local logDate = os.date(\"%Y-%m-%d %H:%M:%S\")",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local insert  = string.format(\"INSERT INTO %s (%s, %s, %s) VALUES ('%s', '%s', '%s')\",\r\n\t\t\tparams.tablename, params.logdatefield, params.loglevelfield,\r\n\t\t\tparams.logmessagefield, logDate, level, string.gsub(message, \"'\", \"''\"))",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local ret, err = pcall(con.execute, con, insert)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if not ret then\r\n\t\t\tcon, err = params.connectionfactory()\r\n\t\t\tif not con then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\t\tret, err = con:execute(insert)\r\n\t\t\tif not ret then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "ret, err = con:execute(insert)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if not ret then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if not params.keepalive then\r\n\t\t\tcon:close()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "con:close()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function(self, level, message)\r\n\t\tif (not params.keepalive) or (con == nil) then\r\n\t\t\tcon, err = params.connectionfactory()\r\n\t\t\tif not con then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tlocal logDate = os.date(\"%Y-%m-%d %H:%M:%S\")\r\n\t\tlocal insert  = string.format(\"INSERT INTO %s (%s, %s, %s) VALUES ('%s', '%s', '%s')\",\r\n\t\t\tparams.tablename, params.logdatefield, params.loglevelfield,\r\n\t\t\tparams.logmessagefield, logDate, level, string.gsub(message, \"'\", \"''\"))\r\n\r\n\t\tlocal ret, err = pcall(con.execute, con, insert)\r\n\t\tif not ret then\r\n\t\t\tcon, err = params.connectionfactory()\r\n\t\t\tif not con then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\t\tret, err = con:execute(insert)\r\n\t\t\tif not ret then\r\n\t\t\t\treturn nil, err\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\tif not params.keepalive then\r\n\t\t\tcon:close()\r\n\t\tend\r\n\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "",
    "type": "function container"
  }, {
    "id": 28,
    "text": "new",
    "type": "global function"
  }, {
    "id": 29,
    "text": "format",
    "type": "global function"
  }, {
    "id": 30,
    "text": "connectionfactory",
    "type": "global function"
  }, {
    "id": 31,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 32,
    "text": "date",
    "type": "global function"
  }, {
    "id": 33,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 34,
    "text": "type",
    "type": "global function"
  }, {
    "id": 35,
    "text": "require",
    "type": "global function"
  }, {
    "id": 36,
    "text": "",
    "type": "variable container"
  }, {
    "id": 37,
    "text": "",
    "type": "require container"
  }, {
    "id": 38,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 39,
    "text": "",
    "type": "interface container"
  }, {
    "id": 40,
    "text": "",
    "type": "interface"
  }, {
    "id": 41,
    "text": "",
    "type": "require local variable"
  } ]
}