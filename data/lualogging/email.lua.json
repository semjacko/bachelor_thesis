{
  "_filename": "email.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lualogging/src/logging/email.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 12
  }, {
    "from": 17,
    "label": "has",
    "to": 13
  }, {
    "from": 17,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 25
  }, {
    "from": 19,
    "label": "calls",
    "to": 25
  }, {
    "from": 3,
    "label": "calls",
    "to": 21
  }, {
    "from": 3,
    "label": "calls",
    "to": 22
  }, {
    "from": 3,
    "label": "calls",
    "to": 23
  }, {
    "from": 3,
    "label": "calls",
    "to": 23
  }, {
    "from": 3,
    "label": "calls",
    "to": 20
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 19,
    "label": "declares",
    "to": 3
  }, {
    "from": 19,
    "label": "declares",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 27
  }, {
    "from": 27,
    "label": "initializes",
    "to": 28
  }, {
    "from": 28,
    "label": "requires",
    "to": 2
  }, {
    "from": 27,
    "label": "initializes",
    "to": 29
  }, {
    "from": 29,
    "label": "requires",
    "to": 30
  }, {
    "from": 1,
    "label": "provides",
    "to": 31
  }, {
    "from": 31,
    "label": "provides",
    "to": 32
  }, {
    "from": 33,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "email",
    "type": "module"
  }, {
    "id": 2,
    "text": "logging",
    "type": "module"
  }, {
    "id": 3,
    "text": "function logging.email(params)\r\n\tparams = params or {}\r\n\tparams.headers = params.headers or {}\r\n\r\n\tif params.from == nil then\r\n\t\treturn nil, \"'from' parameter is required\"\r\n\tend\r\n\tif params.rcpt == nil then\r\n\t\treturn nil, \"'rcpt' parameter is required\"\r\n\tend\r\n\r\n\treturn logging.new( function(self, level, message)\r\n\t\tlocal s = logging.prepareLogMsg(params.logPattern, os.date(), level, message)\r\n\t\tif params.headers.subject then\r\n\t\t\tparams.headers.subject =\r\n\t\t\t\tlogging.prepareLogMsg(params.headers.subject, os.date(), level, message)\r\n\t\tend\r\n\t\tlocal msg = { headers = params.headers, body = s }\r\n\t\tparams.source = smtp.message(msg)\r\n\r\n\t\tlocal r, e = smtp.send(params)\r\n\t\tif not r then\r\n\t\t\treturn nil, e\r\n\t\tend\r\n\r\n\t\treturn true\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "params = params or {}",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "params.headers = params.headers or {}",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "if params.from == nil then\r\n\t\treturn nil, \"'from' parameter is required\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "if params.rcpt == nil then\r\n\t\treturn nil, \"'rcpt' parameter is required\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "local s = logging.prepareLogMsg(params.logPattern, os.date(), level, message)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if params.headers.subject then\r\n\t\t\tparams.headers.subject =\r\n\t\t\t\tlogging.prepareLogMsg(params.headers.subject, os.date(), level, message)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "params.headers.subject =\r\n\t\t\t\tlogging.prepareLogMsg(params.headers.subject, os.date(), level, message)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "local msg = { headers = params.headers, body = s }",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "params.source = smtp.message(msg)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local r, e = smtp.send(params)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if not r then\r\n\t\t\treturn nil, e\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function(self, level, message)\r\n\t\tlocal s = logging.prepareLogMsg(params.logPattern, os.date(), level, message)\r\n\t\tif params.headers.subject then\r\n\t\t\tparams.headers.subject =\r\n\t\t\t\tlogging.prepareLogMsg(params.headers.subject, os.date(), level, message)\r\n\t\tend\r\n\t\tlocal msg = { headers = params.headers, body = s }\r\n\t\tparams.source = smtp.message(msg)\r\n\r\n\t\tlocal r, e = smtp.send(params)\r\n\t\tif not r then\r\n\t\t\treturn nil, e\r\n\t\tend\r\n\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "",
    "type": "function container"
  }, {
    "id": 20,
    "text": "new",
    "type": "global function"
  }, {
    "id": 21,
    "text": "send",
    "type": "global function"
  }, {
    "id": 22,
    "text": "message",
    "type": "global function"
  }, {
    "id": 23,
    "text": "prepareLogMsg",
    "type": "global function"
  }, {
    "id": 24,
    "text": "date",
    "type": "global function"
  }, {
    "id": 25,
    "text": "require",
    "type": "global function"
  }, {
    "id": 26,
    "text": "",
    "type": "variable container"
  }, {
    "id": 27,
    "text": "",
    "type": "require container"
  }, {
    "id": 28,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 29,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 30,
    "text": "smtp",
    "type": "module"
  }, {
    "id": 31,
    "text": "",
    "type": "interface container"
  }, {
    "id": 32,
    "text": "",
    "type": "interface"
  }, {
    "id": 33,
    "text": "",
    "type": "require local variable"
  } ]
}