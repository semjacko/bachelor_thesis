{
  "_filename": "logging.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lualogging/src/logging.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 15,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 20
  }, {
    "from": 31,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 33
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 20
  }, {
    "from": 35,
    "label": "has",
    "to": 21
  }, {
    "from": 35,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 35,
    "label": "has",
    "to": 24
  }, {
    "from": 35,
    "label": "has",
    "to": 25
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 20
  }, {
    "from": 37,
    "label": "has",
    "to": 21
  }, {
    "from": 37,
    "label": "has",
    "to": 32
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 48,
    "label": "has",
    "to": 59
  }, {
    "from": 48,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 48,
    "label": "has",
    "to": 67
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 78
  }, {
    "from": 11,
    "label": "calls",
    "to": 78
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 15,
    "label": "calls",
    "to": 11
  }, {
    "from": 46,
    "label": "calls",
    "to": 76
  }, {
    "from": 46,
    "label": "calls",
    "to": 46
  }, {
    "from": 46,
    "label": "calls",
    "to": 46
  }, {
    "from": 46,
    "label": "calls",
    "to": 46
  }, {
    "from": 11,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 77
  }, {
    "from": 46,
    "label": "calls",
    "to": 85
  }, {
    "from": 46,
    "label": "calls",
    "to": 74
  }, {
    "from": 46,
    "label": "calls",
    "to": 79
  }, {
    "from": 46,
    "label": "calls",
    "to": 79
  }, {
    "from": 15,
    "label": "calls",
    "to": 81
  }, {
    "from": 15,
    "label": "calls",
    "to": 81
  }, {
    "from": 46,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 46,
    "label": "calls",
    "to": 72
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 15,
    "label": "calls",
    "to": 83
  }, {
    "from": 46,
    "label": "calls",
    "to": 83
  }, {
    "from": 46,
    "label": "calls",
    "to": 83
  }, {
    "from": 69,
    "label": "calls",
    "to": 2
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 39,
    "label": "calls",
    "to": 82
  }, {
    "from": 39,
    "label": "calls",
    "to": 82
  }, {
    "from": 39,
    "label": "calls",
    "to": 82
  }, {
    "from": 39,
    "label": "calls",
    "to": 82
  }, {
    "from": 46,
    "label": "calls",
    "to": 73
  }, {
    "from": 46,
    "label": "calls",
    "to": 73
  }, {
    "from": 46,
    "label": "calls",
    "to": 73
  }, {
    "from": 46,
    "label": "calls",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "declares",
    "to": 2
  }, {
    "from": 69,
    "label": "declares",
    "to": 8
  }, {
    "from": 69,
    "label": "declares",
    "to": 10
  }, {
    "from": 69,
    "label": "declares",
    "to": 11
  }, {
    "from": 69,
    "label": "declares",
    "to": 15
  }, {
    "from": 69,
    "label": "declares",
    "to": 35
  }, {
    "from": 69,
    "label": "declares",
    "to": 37
  }, {
    "from": 69,
    "label": "declares",
    "to": 39
  }, {
    "from": 69,
    "label": "declares",
    "to": 46
  }, {
    "from": 1,
    "label": "declares",
    "to": 70
  }, {
    "from": 1,
    "label": "declares",
    "to": 71
  }, {
    "from": 1,
    "label": "declares",
    "to": 75
  }, {
    "from": 86,
    "label": "requires",
    "to": 1
  }, {
    "from": 87,
    "label": "requires",
    "to": 1
  }, {
    "from": 88,
    "label": "requires",
    "to": 1
  }, {
    "from": 89,
    "label": "requires",
    "to": 1
  }, {
    "from": 90,
    "label": "requires",
    "to": 1
  }, {
    "from": 91,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 92,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 92,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 92,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 92,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 92,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 92,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 92,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 92,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 92,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 92,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 92,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 115,
    "label": "assigns",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 115,
    "label": "assigns",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 115,
    "label": "assigns",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 115,
    "label": "assigns",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 115,
    "label": "assigns",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 115,
    "label": "assigns",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 115,
    "label": "assigns",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 92,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 133,
    "label": "assigns",
    "to": 135
  }, {
    "from": 133,
    "label": "assigns",
    "to": 136
  }, {
    "from": 133,
    "label": "assigns",
    "to": 137
  }, {
    "from": 133,
    "label": "assigns",
    "to": 138
  }, {
    "from": 92,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 92,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 92,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 1,
    "label": "provides",
    "to": 145
  }, {
    "from": 114,
    "label": "represents",
    "to": 146
  }, {
    "from": 145,
    "label": "provides",
    "to": 146
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "logging",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function LOG_MSG(self, level, fmt, ...)\r\n\tlocal f_type = type(fmt)\r\n\tif f_type == 'string' then\r\n\t\tif select('#', ...) > 0 then\r\n\t\t\treturn self:append(level, format(fmt, ...))\r\n\t\telse\r\n\t\t\t-- only a single string, no formating needed.\r\n\t\t\treturn self:append(level, fmt)\r\n\t\tend\r\n\telseif f_type == 'function' then\r\n\t\t-- fmt should be a callable function which returns the message to log\r\n\t\treturn self:append(level, fmt(...))\r\n\tend\r\n\t-- fmt is not a string and not a function, just call tostring() on it.\r\n\treturn self:append(level, logging.tostring(fmt))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local f_type = type(fmt)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if f_type == 'string' then\r\n\t\tif select('#', ...) > 0 then\r\n\t\t\treturn self:append(level, format(fmt, ...))\r\n\t\telse\r\n\t\t\t-- only a single string, no formating needed.\r\n\t\t\treturn self:append(level, fmt)\r\n\t\tend\r\n\telseif f_type == 'function' then\r\n\t\t-- fmt should be a callable function which returns the message to log\r\n\t\treturn self:append(level, fmt(...))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "if select('#', ...) > 0 then\r\n\t\t\treturn self:append(level, format(fmt, ...))\r\n\t\telse\r\n\t\t\t-- only a single string, no formating needed.\r\n\t\t\treturn self:append(level, fmt)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function(self, ...)\r\n\t\t-- no level checking needed here, this function will only be called if it's level is active.\r\n\t\treturn LOG_MSG(self, level, ...)\r\n\tend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function disable_level() end",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function assert(exp, ...)\r\n\t-- if exp is true, we are finished so don't do any processing of the parameters\r\n\tif exp then return exp, ... end\r\n\t-- assertion failed, raise error\r\n\terror(format(...), 2)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if exp then return exp, ... end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "error(format(...), 2)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function logging.new(append)\r\n\tif type(append) ~= \"function\" then\r\n\t\treturn nil, \"Appender must be a function.\"\r\n\tend\r\n\r\n\tlocal logger = {}\r\n\tlogger.append = append\r\n\r\n\tlogger.setLevel = function (self, level)\r\n\t\tlocal order = LEVEL[level]\r\n\t\tassert(order, \"undefined level `%s'\", _tostring(level))\r\n\t\tif self.level then\r\n\t\t\tself:log(logging.WARN, \"Logger: changing loglevel from %s to %s\", self.level, level)\r\n\t\tend\r\n\t\tself.level = level\r\n\t\tself.level_order = order\r\n\t\t-- enable/disable levels\r\n\t\tfor i=1,MAX_LEVELS do\r\n\t\t\tlocal name = LEVEL[i]:lower()\r\n\t\t\tif i >= order then\r\n\t\t\t\tself[name] = LEVEL_FUNCS[i]\r\n\t\t\telse\r\n\t\t\t\tself[name] = disable_level\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\t-- generic log function.\r\n\tlogger.log = function (self, level, ...)\r\n\t\tlocal order = LEVEL[level]\r\n\t\tassert(order, \"undefined level `%s'\", _tostring(level))\r\n\t\tif order < self.level_order then\r\n\t\t\treturn\r\n\t\tend\r\n\t\treturn LOG_MSG(self, level, ...)\r\n\tend\r\n\r\n\t-- initialize log level.\r\n\tlogger:setLevel(logging.DEBUG)\r\n\treturn logger\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "if type(append) ~= \"function\" then\r\n\t\treturn nil, \"Appender must be a function.\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local logger = {}",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "logger.append = append",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "logger.setLevel = function (self, level)\r\n\t\tlocal order = LEVEL[level]\r\n\t\tassert(order, \"undefined level `%s'\", _tostring(level))\r\n\t\tif self.level then\r\n\t\t\tself:log(logging.WARN, \"Logger: changing loglevel from %s to %s\", self.level, level)\r\n\t\tend\r\n\t\tself.level = level\r\n\t\tself.level_order = order\r\n\t\t-- enable/disable levels\r\n\t\tfor i=1,MAX_LEVELS do\r\n\t\t\tlocal name = LEVEL[i]:lower()\r\n\t\t\tif i >= order then\r\n\t\t\t\tself[name] = LEVEL_FUNCS[i]\r\n\t\t\telse\r\n\t\t\t\tself[name] = disable_level\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "local order = LEVEL[level]",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assert(order, \"undefined level `%s'\", _tostring(level))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if self.level then\r\n\t\t\tself:log(logging.WARN, \"Logger: changing loglevel from %s to %s\", self.level, level)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "self:log(logging.WARN, \"Logger: changing loglevel from %s to %s\", self.level, level)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "self.level = level",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "self.level_order = order",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "for i=1,MAX_LEVELS do\r\n\t\t\tlocal name = LEVEL[i]:lower()\r\n\t\t\tif i >= order then\r\n\t\t\t\tself[name] = LEVEL_FUNCS[i]\r\n\t\t\telse\r\n\t\t\t\tself[name] = disable_level\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 27,
    "text": "local name = LEVEL[i]:lower()",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if i >= order then\r\n\t\t\t\tself[name] = LEVEL_FUNCS[i]\r\n\t\t\telse\r\n\t\t\t\tself[name] = disable_level\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "self[name] = LEVEL_FUNCS[i]",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "self[name] = disable_level",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "logger.log = function (self, level, ...)\r\n\t\tlocal order = LEVEL[level]\r\n\t\tassert(order, \"undefined level `%s'\", _tostring(level))\r\n\t\tif order < self.level_order then\r\n\t\t\treturn\r\n\t\tend\r\n\t\treturn LOG_MSG(self, level, ...)\r\n\tend",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if order < self.level_order then\r\n\t\t\treturn\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "logger:setLevel(logging.DEBUG)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function (self, level)\r\n\t\tlocal order = LEVEL[level]\r\n\t\tassert(order, \"undefined level `%s'\", _tostring(level))\r\n\t\tif self.level then\r\n\t\t\tself:log(logging.WARN, \"Logger: changing loglevel from %s to %s\", self.level, level)\r\n\t\tend\r\n\t\tself.level = level\r\n\t\tself.level_order = order\r\n\t\t-- enable/disable levels\r\n\t\tfor i=1,MAX_LEVELS do\r\n\t\t\tlocal name = LEVEL[i]:lower()\r\n\t\t\tif i >= order then\r\n\t\t\t\tself[name] = LEVEL_FUNCS[i]\r\n\t\t\telse\r\n\t\t\t\tself[name] = disable_level\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function (self, level, ...)\r\n\t\tlocal order = LEVEL[level]\r\n\t\tassert(order, \"undefined level `%s'\", _tostring(level))\r\n\t\tif order < self.level_order then\r\n\t\t\treturn\r\n\t\tend\r\n\t\treturn LOG_MSG(self, level, ...)\r\n\tend",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function logging.prepareLogMsg(pattern, dt, level, message)\r\n\tlocal logMsg = pattern or \"%date %level %message\\n\"\r\n\tmessage = string.gsub(message, \"%%\", \"%%%%\")\r\n\tlogMsg = string.gsub(logMsg, \"%%date\", dt)\r\n\tlogMsg = string.gsub(logMsg, \"%%level\", level)\r\n\tlogMsg = string.gsub(logMsg, \"%%message\", message)\r\n\treturn logMsg\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local logMsg = pattern or \"%date %level %message\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "message = string.gsub(message, \"%%\", \"%%%%\")",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "logMsg = string.gsub(logMsg, \"%%date\", dt)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "logMsg = string.gsub(logMsg, \"%%level\", level)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "logMsg = string.gsub(logMsg, \"%%message\", message)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function tostring(value)\r\n\tlocal str = ''\r\n\r\n\tif (type(value) ~= 'table') then\r\n\t\tif (type(value) == 'string') then\r\n\t\t\tstr = string.format(\"%q\", value)\r\n\t\telse\r\n\t\t\tstr = _tostring(value)\r\n\t\tend\r\n\telse\r\n\t\tlocal auxTable = {}\r\n\t\tfor key in pairs(value) do\r\n\t\t\tif (tonumber(key) ~= key) then\r\n\t\t\t\ttable.insert(auxTable, key)\r\n\t\t\telse\r\n\t\t\t\ttable.insert(auxTable, tostring(key))\r\n\t\t\tend\r\n\t\tend\r\n\t\ttable.sort(auxTable)\r\n\t\r\n\t\tstr = str..'{'\r\n\t\tlocal separator = \"\"\r\n\t\tlocal entry = \"\"\r\n\t\tfor _, fieldName in ipairs(auxTable) do\r\n\t\t\tif ((tonumber(fieldName)) and (tonumber(fieldName) > 0)) then\r\n\t\t\t\tentry = tostring(value[tonumber(fieldName)])\r\n\t\t\telse\r\n\t\t\t\tentry = fieldName..\" = \"..tostring(value[fieldName])\r\n\t\t\tend\r\n\t\t\tstr = str..separator..entry\r\n\t\t\tseparator = \", \"\r\n\t\tend\r\n\t\tstr = str..'}'\r\n\tend\r\n\treturn str\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local str = ''",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if (type(value) ~= 'table') then\r\n\t\tif (type(value) == 'string') then\r\n\t\t\tstr = string.format(\"%q\", value)\r\n\t\telse\r\n\t\t\tstr = _tostring(value)\r\n\t\tend\r\n\telse\r\n\t\tlocal auxTable = {}\r\n\t\tfor key in pairs(value) do\r\n\t\t\tif (tonumber(key) ~= key) then\r\n\t\t\t\ttable.insert(auxTable, key)\r\n\t\t\telse\r\n\t\t\t\ttable.insert(auxTable, tostring(key))\r\n\t\t\tend\r\n\t\tend\r\n\t\ttable.sort(auxTable)\r\n\t\r\n\t\tstr = str..'{'\r\n\t\tlocal separator = \"\"\r\n\t\tlocal entry = \"\"\r\n\t\tfor _, fieldName in ipairs(auxTable) do\r\n\t\t\tif ((tonumber(fieldName)) and (tonumber(fieldName) > 0)) then\r\n\t\t\t\tentry = tostring(value[tonumber(fieldName)])\r\n\t\t\telse\r\n\t\t\t\tentry = fieldName..\" = \"..tostring(value[fieldName])\r\n\t\t\tend\r\n\t\t\tstr = str..separator..entry\r\n\t\t\tseparator = \", \"\r\n\t\tend\r\n\t\tstr = str..'}'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "if (type(value) == 'string') then\r\n\t\t\tstr = string.format(\"%q\", value)\r\n\t\telse\r\n\t\t\tstr = _tostring(value)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "str = string.format(\"%q\", value)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "str = _tostring(value)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local auxTable = {}",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "for key in pairs(value) do\r\n\t\t\tif (tonumber(key) ~= key) then\r\n\t\t\t\ttable.insert(auxTable, key)\r\n\t\t\telse\r\n\t\t\t\ttable.insert(auxTable, tostring(key))\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "if (tonumber(key) ~= key) then\r\n\t\t\t\ttable.insert(auxTable, key)\r\n\t\t\telse\r\n\t\t\t\ttable.insert(auxTable, tostring(key))\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "table.insert(auxTable, key)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "table.insert(auxTable, tostring(key))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "table.sort(auxTable)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "str = str..'{'",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "local separator = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local entry = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "for _, fieldName in ipairs(auxTable) do\r\n\t\t\tif ((tonumber(fieldName)) and (tonumber(fieldName) > 0)) then\r\n\t\t\t\tentry = tostring(value[tonumber(fieldName)])\r\n\t\t\telse\r\n\t\t\t\tentry = fieldName..\" = \"..tostring(value[fieldName])\r\n\t\t\tend\r\n\t\t\tstr = str..separator..entry\r\n\t\t\tseparator = \", \"\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "if ((tonumber(fieldName)) and (tonumber(fieldName) > 0)) then\r\n\t\t\t\tentry = tostring(value[tonumber(fieldName)])\r\n\t\t\telse\r\n\t\t\t\tentry = fieldName..\" = \"..tostring(value[fieldName])\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "entry = tostring(value[tonumber(fieldName)])",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "entry = fieldName..\" = \"..tostring(value[fieldName])",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "str = str..separator..entry",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "separator = \", \"",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "str = str..'}'",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "",
    "type": "function container"
  }, {
    "id": 70,
    "text": "new",
    "type": "global function"
  }, {
    "id": 71,
    "text": "prepareLogMsg",
    "type": "global function"
  }, {
    "id": 72,
    "text": "format",
    "type": "global function"
  }, {
    "id": 73,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 74,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 75,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 76,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 77,
    "text": "fmt",
    "type": "global function"
  }, {
    "id": 78,
    "text": "format",
    "type": "global function"
  }, {
    "id": 79,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 80,
    "text": "error",
    "type": "global function"
  }, {
    "id": 81,
    "text": "_tostring",
    "type": "global function"
  }, {
    "id": 82,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 83,
    "text": "type",
    "type": "global function"
  }, {
    "id": 84,
    "text": "select",
    "type": "global function"
  }, {
    "id": 85,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "variable container"
  }, {
    "id": 93,
    "text": "",
    "type": "require container"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "n/a"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 116,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 117,
    "text": "",
    "type": "string"
  }, {
    "id": 118,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 119,
    "text": "",
    "type": "string"
  }, {
    "id": 120,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 121,
    "text": "",
    "type": "string"
  }, {
    "id": 122,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 123,
    "text": "",
    "type": "string"
  }, {
    "id": 124,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 125,
    "text": "",
    "type": "string"
  }, {
    "id": 126,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 127,
    "text": "",
    "type": "string"
  }, {
    "id": 128,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 129,
    "text": "",
    "type": "string"
  }, {
    "id": 130,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 131,
    "text": "",
    "type": "string"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 134,
    "text": "",
    "type": "string"
  }, {
    "id": 135,
    "text": "",
    "type": "string"
  }, {
    "id": 136,
    "text": "",
    "type": "string"
  }, {
    "id": 137,
    "text": "",
    "type": "string"
  }, {
    "id": 138,
    "text": "",
    "type": "string"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "unop"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 143,
    "text": "",
    "type": "global variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "interface container"
  }, {
    "id": 146,
    "text": "",
    "type": "interface"
  } ]
}