{
  "_filename": "clock.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luagd/demos/clock.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 2,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 31,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 31,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 31,
    "label": "calls",
    "to": 41
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 44,
    "label": "initializes",
    "to": 42
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "clock",
    "type": "module"
  }, {
    "id": 2,
    "text": "function createClock(size, hours, minutes)\r\n  local im = gd.createTrueColor(size, size)\r\n  local white = im:colorAllocate(255, 255, 255)\r\n  local gray = im:colorAllocate(128, 128, 128)\r\n  local black = im:colorAllocate(0, 0, 0)\r\n  local blue = im:colorAllocate(0, 0, 128)\r\n  local cxy = size/2\r\n\r\n  im:filledRectangle(0, 0, size, size, white)\r\n  im:setThickness(math.max(1, size/100))\r\n  im:arc(cxy, cxy, size, size, 0, 360, black)\r\n\r\n  local ang = 0\r\n  local rang, gsize\r\n  while ang < 360 do\r\n    rang = math.rad(ang)\r\n    if math.mod(ang, 90) == 0 then\r\n      gsize = 0.75\r\n    else\r\n      gsize = 0.85\r\n    end\r\n    im:line(\r\n      cxy + gsize * cxy * math.sin(rang),\r\n      size - (cxy + gsize * cxy * math.cos(rang)),\r\n      cxy + cxy * 0.9 * math.sin(rang),\r\n      size - (cxy + cxy * 0.9 * math.cos(rang)),\r\n      gray)\r\n    ang = ang + 30\r\n  end\r\n\r\n  im:setThickness(math.max(1, size/50))\r\n  im:line(cxy, cxy,\r\n    cxy + 0.45 * size * math.sin(math.rad(6*minutes)),\r\n    size - (cxy + 0.45 * size * math.cos(math.rad(6*minutes))),\r\n    blue)\r\n\r\n  im:setThickness(math.max(1, size/25))\r\n  rang = math.rad(30*hours + minutes/2)\r\n  im:line(cxy, cxy, \r\n    cxy + 0.25 * size * math.sin(rang),\r\n    size - (cxy + 0.25 * size * math.cos(rang)),\r\n    blue)\r\n\r\n  im:setThickness(1)\r\n  local sp = math.max(1, size/20)\r\n  im:filledArc(cxy, cxy, sp, sp, 0, 360, black, gd.ARC)\r\n\r\n  return im\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local im = gd.createTrueColor(size, size)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local white = im:colorAllocate(255, 255, 255)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local gray = im:colorAllocate(128, 128, 128)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local black = im:colorAllocate(0, 0, 0)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local blue = im:colorAllocate(0, 0, 128)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local cxy = size/2",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "im:filledRectangle(0, 0, size, size, white)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "im:setThickness(math.max(1, size/100))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "im:arc(cxy, cxy, size, size, 0, 360, black)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local ang = 0",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local rang, gsize",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "while ang < 360 do\r\n    rang = math.rad(ang)\r\n    if math.mod(ang, 90) == 0 then\r\n      gsize = 0.75\r\n    else\r\n      gsize = 0.85\r\n    end\r\n    im:line(\r\n      cxy + gsize * cxy * math.sin(rang),\r\n      size - (cxy + gsize * cxy * math.cos(rang)),\r\n      cxy + cxy * 0.9 * math.sin(rang),\r\n      size - (cxy + cxy * 0.9 * math.cos(rang)),\r\n      gray)\r\n    ang = ang + 30\r\n  end",
    "type": "statement:while"
  }, {
    "id": 15,
    "text": "rang = math.rad(ang)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if math.mod(ang, 90) == 0 then\r\n      gsize = 0.75\r\n    else\r\n      gsize = 0.85\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "gsize = 0.75",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "gsize = 0.85",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "im:line(\r\n      cxy + gsize * cxy * math.sin(rang),\r\n      size - (cxy + gsize * cxy * math.cos(rang)),\r\n      cxy + cxy * 0.9 * math.sin(rang),\r\n      size - (cxy + cxy * 0.9 * math.cos(rang)),\r\n      gray)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "ang = ang + 30",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "im:setThickness(math.max(1, size/50))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "im:line(cxy, cxy,\r\n    cxy + 0.45 * size * math.sin(math.rad(6*minutes)),\r\n    size - (cxy + 0.45 * size * math.cos(math.rad(6*minutes))),\r\n    blue)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "im:setThickness(math.max(1, size/25))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "rang = math.rad(30*hours + minutes/2)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "im:line(cxy, cxy, \r\n    cxy + 0.25 * size * math.sin(rang),\r\n    size - (cxy + 0.25 * size * math.cos(rang)),\r\n    blue)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "im:setThickness(1)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local sp = math.max(1, size/20)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "im:filledArc(cxy, cxy, sp, sp, 0, 360, black, gd.ARC)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "",
    "type": "function container"
  }, {
    "id": 32,
    "text": "createTrueColor",
    "type": "global function"
  }, {
    "id": 33,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 34,
    "text": "cos",
    "type": "global function"
  }, {
    "id": 35,
    "text": "max",
    "type": "global function"
  }, {
    "id": 36,
    "text": "date",
    "type": "global function"
  }, {
    "id": 37,
    "text": "sin",
    "type": "global function"
  }, {
    "id": 38,
    "text": "print",
    "type": "global function"
  }, {
    "id": 39,
    "text": "rad",
    "type": "global function"
  }, {
    "id": 40,
    "text": "write",
    "type": "global function"
  }, {
    "id": 41,
    "text": "require",
    "type": "global function"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  }, {
    "id": 43,
    "text": "",
    "type": "variable container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  } ]
}