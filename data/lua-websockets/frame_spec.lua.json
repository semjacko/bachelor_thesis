{
  "_filename": "frame_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua-websockets/spec/frame_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 28
  }, {
    "from": 38,
    "label": "has",
    "to": 29
  }, {
    "from": 38,
    "label": "has",
    "to": 30
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 30
  }, {
    "from": 44,
    "label": "has",
    "to": 31
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 28
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 29
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 59
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 61
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 67,
    "label": "has",
    "to": 29
  }, {
    "from": 67,
    "label": "has",
    "to": 75
  }, {
    "from": 67,
    "label": "has",
    "to": 52
  }, {
    "from": 67,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 29
  }, {
    "from": 77,
    "label": "has",
    "to": 75
  }, {
    "from": 77,
    "label": "has",
    "to": 42
  }, {
    "from": 77,
    "label": "has",
    "to": 52
  }, {
    "from": 77,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 79
  }, {
    "from": 85,
    "label": "has",
    "to": 80
  }, {
    "from": 85,
    "label": "has",
    "to": 81
  }, {
    "from": 85,
    "label": "has",
    "to": 82
  }, {
    "from": 85,
    "label": "has",
    "to": 83
  }, {
    "from": 85,
    "label": "has",
    "to": 80
  }, {
    "from": 85,
    "label": "has",
    "to": 29
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 42
  }, {
    "from": 85,
    "label": "has",
    "to": 52
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 79
  }, {
    "from": 88,
    "label": "has",
    "to": 80
  }, {
    "from": 88,
    "label": "has",
    "to": 81
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 83
  }, {
    "from": 88,
    "label": "has",
    "to": 80
  }, {
    "from": 88,
    "label": "has",
    "to": 29
  }, {
    "from": 88,
    "label": "has",
    "to": 75
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 82
  }, {
    "from": 92,
    "label": "has",
    "to": 74
  }, {
    "from": 92,
    "label": "has",
    "to": 29
  }, {
    "from": 92,
    "label": "has",
    "to": 75
  }, {
    "from": 92,
    "label": "has",
    "to": 42
  }, {
    "from": 92,
    "label": "has",
    "to": 46
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 50
  }, {
    "from": 95,
    "label": "has",
    "to": 28
  }, {
    "from": 95,
    "label": "has",
    "to": 51
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 29
  }, {
    "from": 95,
    "label": "has",
    "to": 54
  }, {
    "from": 95,
    "label": "has",
    "to": 55
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 101,
    "label": "has",
    "to": 105
  }, {
    "from": 101,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 10
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 13
  }, {
    "from": 112,
    "label": "has",
    "to": 14
  }, {
    "from": 112,
    "label": "has",
    "to": 15
  }, {
    "from": 112,
    "label": "has",
    "to": 16
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 19
  }, {
    "from": 113,
    "label": "has",
    "to": 20
  }, {
    "from": 113,
    "label": "has",
    "to": 21
  }, {
    "from": 113,
    "label": "has",
    "to": 22
  }, {
    "from": 113,
    "label": "has",
    "to": 23
  }, {
    "from": 113,
    "label": "has",
    "to": 24
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 27
  }, {
    "from": 114,
    "label": "has",
    "to": 28
  }, {
    "from": 114,
    "label": "has",
    "to": 29
  }, {
    "from": 114,
    "label": "has",
    "to": 30
  }, {
    "from": 114,
    "label": "has",
    "to": 31
  }, {
    "from": 114,
    "label": "has",
    "to": 32
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 28
  }, {
    "from": 38,
    "label": "has",
    "to": 29
  }, {
    "from": 38,
    "label": "has",
    "to": 30
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 32
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 45
  }, {
    "from": 116,
    "label": "has",
    "to": 29
  }, {
    "from": 116,
    "label": "has",
    "to": 28
  }, {
    "from": 116,
    "label": "has",
    "to": 30
  }, {
    "from": 116,
    "label": "has",
    "to": 31
  }, {
    "from": 116,
    "label": "has",
    "to": 46
  }, {
    "from": 110,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 49
  }, {
    "from": 117,
    "label": "has",
    "to": 50
  }, {
    "from": 117,
    "label": "has",
    "to": 28
  }, {
    "from": 117,
    "label": "has",
    "to": 51
  }, {
    "from": 117,
    "label": "has",
    "to": 42
  }, {
    "from": 117,
    "label": "has",
    "to": 52
  }, {
    "from": 117,
    "label": "has",
    "to": 53
  }, {
    "from": 117,
    "label": "has",
    "to": 29
  }, {
    "from": 117,
    "label": "has",
    "to": 54
  }, {
    "from": 117,
    "label": "has",
    "to": 55
  }, {
    "from": 117,
    "label": "has",
    "to": 42
  }, {
    "from": 117,
    "label": "has",
    "to": 52
  }, {
    "from": 110,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 58
  }, {
    "from": 118,
    "label": "has",
    "to": 59
  }, {
    "from": 118,
    "label": "has",
    "to": 60
  }, {
    "from": 118,
    "label": "has",
    "to": 61
  }, {
    "from": 110,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 64
  }, {
    "from": 119,
    "label": "has",
    "to": 59
  }, {
    "from": 119,
    "label": "has",
    "to": 65
  }, {
    "from": 119,
    "label": "has",
    "to": 61
  }, {
    "from": 110,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 68
  }, {
    "from": 120,
    "label": "has",
    "to": 69
  }, {
    "from": 120,
    "label": "has",
    "to": 70
  }, {
    "from": 120,
    "label": "has",
    "to": 69
  }, {
    "from": 120,
    "label": "has",
    "to": 71
  }, {
    "from": 120,
    "label": "has",
    "to": 69
  }, {
    "from": 120,
    "label": "has",
    "to": 72
  }, {
    "from": 120,
    "label": "has",
    "to": 69
  }, {
    "from": 120,
    "label": "has",
    "to": 73
  }, {
    "from": 120,
    "label": "has",
    "to": 74
  }, {
    "from": 120,
    "label": "has",
    "to": 29
  }, {
    "from": 120,
    "label": "has",
    "to": 75
  }, {
    "from": 120,
    "label": "has",
    "to": 52
  }, {
    "from": 110,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 4
  }, {
    "from": 121,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 121,
    "label": "has",
    "to": 7
  }, {
    "from": 110,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 78
  }, {
    "from": 122,
    "label": "has",
    "to": 79
  }, {
    "from": 122,
    "label": "has",
    "to": 80
  }, {
    "from": 122,
    "label": "has",
    "to": 81
  }, {
    "from": 122,
    "label": "has",
    "to": 82
  }, {
    "from": 122,
    "label": "has",
    "to": 83
  }, {
    "from": 122,
    "label": "has",
    "to": 80
  }, {
    "from": 122,
    "label": "has",
    "to": 29
  }, {
    "from": 122,
    "label": "has",
    "to": 75
  }, {
    "from": 122,
    "label": "has",
    "to": 42
  }, {
    "from": 122,
    "label": "has",
    "to": 52
  }, {
    "from": 110,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 86
  }, {
    "from": 123,
    "label": "has",
    "to": 79
  }, {
    "from": 123,
    "label": "has",
    "to": 80
  }, {
    "from": 123,
    "label": "has",
    "to": 81
  }, {
    "from": 123,
    "label": "has",
    "to": 82
  }, {
    "from": 123,
    "label": "has",
    "to": 83
  }, {
    "from": 123,
    "label": "has",
    "to": 80
  }, {
    "from": 123,
    "label": "has",
    "to": 29
  }, {
    "from": 123,
    "label": "has",
    "to": 75
  }, {
    "from": 123,
    "label": "has",
    "to": 42
  }, {
    "from": 123,
    "label": "has",
    "to": 52
  }, {
    "from": 110,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 89
  }, {
    "from": 124,
    "label": "has",
    "to": 79
  }, {
    "from": 124,
    "label": "has",
    "to": 80
  }, {
    "from": 124,
    "label": "has",
    "to": 81
  }, {
    "from": 124,
    "label": "has",
    "to": 90
  }, {
    "from": 124,
    "label": "has",
    "to": 83
  }, {
    "from": 124,
    "label": "has",
    "to": 80
  }, {
    "from": 124,
    "label": "has",
    "to": 29
  }, {
    "from": 124,
    "label": "has",
    "to": 75
  }, {
    "from": 110,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 93
  }, {
    "from": 125,
    "label": "has",
    "to": 82
  }, {
    "from": 125,
    "label": "has",
    "to": 74
  }, {
    "from": 125,
    "label": "has",
    "to": 29
  }, {
    "from": 125,
    "label": "has",
    "to": 75
  }, {
    "from": 125,
    "label": "has",
    "to": 42
  }, {
    "from": 125,
    "label": "has",
    "to": 46
  }, {
    "from": 110,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 96
  }, {
    "from": 126,
    "label": "has",
    "to": 97
  }, {
    "from": 126,
    "label": "has",
    "to": 50
  }, {
    "from": 126,
    "label": "has",
    "to": 28
  }, {
    "from": 126,
    "label": "has",
    "to": 51
  }, {
    "from": 126,
    "label": "has",
    "to": 98
  }, {
    "from": 126,
    "label": "has",
    "to": 99
  }, {
    "from": 126,
    "label": "has",
    "to": 29
  }, {
    "from": 126,
    "label": "has",
    "to": 54
  }, {
    "from": 126,
    "label": "has",
    "to": 55
  }, {
    "from": 110,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 102
  }, {
    "from": 127,
    "label": "has",
    "to": 103
  }, {
    "from": 127,
    "label": "has",
    "to": 104
  }, {
    "from": 127,
    "label": "has",
    "to": 105
  }, {
    "from": 127,
    "label": "has",
    "to": 106
  }, {
    "from": 127,
    "label": "has",
    "to": 107
  }, {
    "from": 127,
    "label": "has",
    "to": 108
  }, {
    "from": 110,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "calls",
    "to": 133
  }, {
    "from": 129,
    "label": "calls",
    "to": 139
  }, {
    "from": 129,
    "label": "calls",
    "to": 135
  }, {
    "from": 129,
    "label": "calls",
    "to": 145
  }, {
    "from": 129,
    "label": "calls",
    "to": 145
  }, {
    "from": 129,
    "label": "calls",
    "to": 145
  }, {
    "from": 129,
    "label": "calls",
    "to": 145
  }, {
    "from": 129,
    "label": "calls",
    "to": 3
  }, {
    "from": 129,
    "label": "calls",
    "to": 3
  }, {
    "from": 129,
    "label": "calls",
    "to": 3
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 140
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 130
  }, {
    "from": 129,
    "label": "calls",
    "to": 136
  }, {
    "from": 129,
    "label": "calls",
    "to": 136
  }, {
    "from": 129,
    "label": "calls",
    "to": 136
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 131
  }, {
    "from": 129,
    "label": "calls",
    "to": 146
  }, {
    "from": 129,
    "label": "calls",
    "to": 146
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 137
  }, {
    "from": 129,
    "label": "calls",
    "to": 132
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 141
  }, {
    "from": 129,
    "label": "calls",
    "to": 142
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 147
  }, {
    "from": 129,
    "label": "calls",
    "to": 138
  }, {
    "from": 129,
    "label": "calls",
    "to": 138
  }, {
    "from": 129,
    "label": "calls",
    "to": 138
  }, {
    "from": 129,
    "label": "calls",
    "to": 138
  }, {
    "from": 129,
    "label": "calls",
    "to": 138
  }, {
    "from": 129,
    "label": "calls",
    "to": 138
  }, {
    "from": 129,
    "label": "calls",
    "to": 144
  }, {
    "from": 129,
    "label": "calls",
    "to": 144
  }, {
    "from": 129,
    "label": "calls",
    "to": 143
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 129,
    "label": "calls",
    "to": 134
  }, {
    "from": 1,
    "label": "contains",
    "to": 129
  }, {
    "from": 129,
    "label": "declares",
    "to": 3
  }, {
    "from": 129,
    "label": "declares",
    "to": 9
  }, {
    "from": 129,
    "label": "declares",
    "to": 12
  }, {
    "from": 129,
    "label": "declares",
    "to": 18
  }, {
    "from": 129,
    "label": "declares",
    "to": 26
  }, {
    "from": 129,
    "label": "declares",
    "to": 34
  }, {
    "from": 129,
    "label": "declares",
    "to": 44
  }, {
    "from": 129,
    "label": "declares",
    "to": 48
  }, {
    "from": 129,
    "label": "declares",
    "to": 57
  }, {
    "from": 129,
    "label": "declares",
    "to": 63
  }, {
    "from": 129,
    "label": "declares",
    "to": 67
  }, {
    "from": 129,
    "label": "declares",
    "to": 77
  }, {
    "from": 129,
    "label": "declares",
    "to": 85
  }, {
    "from": 129,
    "label": "declares",
    "to": 88
  }, {
    "from": 129,
    "label": "declares",
    "to": 92
  }, {
    "from": 129,
    "label": "declares",
    "to": 95
  }, {
    "from": 129,
    "label": "declares",
    "to": 101
  }, {
    "from": 129,
    "label": "declares",
    "to": 110
  }, {
    "from": 1,
    "label": "contains",
    "to": 148
  }, {
    "from": 1,
    "label": "contains",
    "to": 149
  }, {
    "from": 148,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 148,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 148,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 148,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 148,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 148,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 149,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "requires",
    "to": 2
  }, {
    "from": 149,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 164
  }, {
    "from": 165,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 164
  }, {
    "from": 166,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 164
  }, {
    "from": 167,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 164
  }, {
    "from": 168,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 164
  }, {
    "from": 169,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 164
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 112,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 118,
    "label": "hasArgument",
    "to": 57
  }, {
    "from": 119,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 120,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 101
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "frame_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "frame",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(len)\r\n      local chars = {}\r\n      for i=1,len do\r\n        chars[i] = string.char(math.random(33,126))\r\n      end\r\n      return table.concat(chars)\r\n    end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local chars = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for i=1,len do\r\n        chars[i] = string.char(math.random(33,126))\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 6,
    "text": "chars[i] = string.char(math.random(33,126))",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function()\r\n        assert.is_same(type(frame),'table')\r\n      end",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert.is_same(type(frame),'table')",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n        assert.is.same(type(frame.encode),'function')\r\n        assert.is.same(type(frame.decode),'function')\r\n        assert.is.same(type(frame.encode_close),'function')\r\n        assert.is.same(type(frame.decode_close),'function')\r\n      end",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert.is.same(type(frame.encode),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert.is.same(type(frame.decode),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert.is.same(type(frame.encode_close),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert.is.same(type(frame.decode_close),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function()\r\n        assert.is.same(frame.CONTINUATION,0)\r\n        assert.is.same(frame.TEXT,1)\r\n        assert.is.same(frame.BINARY,2)\r\n        assert.is.same(frame.CLOSE,8)\r\n        assert.is.same(frame.PING,9)\r\n        assert.is.same(frame.PONG,10)\r\n      end",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert.is.same(frame.CONTINUATION,0)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.is.same(frame.TEXT,1)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.is.same(frame.BINARY,2)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.is.same(frame.CLOSE,8)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.is.same(frame.PING,9)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert.is.same(frame.PONG,10)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hello_unmasked..'foo')\r\n        assert.is_same(opcode,0x1)\r\n        assert.is_true(fin)\r\n        assert.is.same(decoded,'Hello')\r\n        assert.is_same(rest,'foo')\r\n        assert.is_false(masked)\r\n      end",
    "type": "function"
  }, {
    "id": 27,
    "text": "local decoded,fin,opcode,rest,masked = frame.decode(hello_unmasked..'foo')",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert.is_same(opcode,0x1)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert.is_true(fin)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.is.same(decoded,'Hello')",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_same(rest,'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.is_false(masked)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n        for i=1,#hello_unmasked do\r\n          local sub = hello_unmasked:sub(1,i)\r\n          local decoded,fin,opcode,rest,masked = frame.decode(sub)\r\n          if i ~= #hello_unmasked then\r\n            assert.is_same(decoded,nil)\r\n            assert.is_same(type(fin),'number')\r\n            assert.is_truthy(i+fin <= #hello_unmasked)\r\n          else\r\n            assert.is_same(opcode,0x1)\r\n            assert.is_true(fin)\r\n            assert.is.same(decoded,'Hello')\r\n            assert.is_same(rest,'')\r\n            assert.is_false(masked)\r\n          end\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 35,
    "text": "for i=1,#hello_unmasked do\r\n          local sub = hello_unmasked:sub(1,i)\r\n          local decoded,fin,opcode,rest,masked = frame.decode(sub)\r\n          if i ~= #hello_unmasked then\r\n            assert.is_same(decoded,nil)\r\n            assert.is_same(type(fin),'number')\r\n            assert.is_truthy(i+fin <= #hello_unmasked)\r\n          else\r\n            assert.is_same(opcode,0x1)\r\n            assert.is_true(fin)\r\n            assert.is.same(decoded,'Hello')\r\n            assert.is_same(rest,'')\r\n            assert.is_false(masked)\r\n          end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 36,
    "text": "local sub = hello_unmasked:sub(1,i)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local decoded,fin,opcode,rest,masked = frame.decode(sub)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if i ~= #hello_unmasked then\r\n            assert.is_same(decoded,nil)\r\n            assert.is_same(type(fin),'number')\r\n            assert.is_truthy(i+fin <= #hello_unmasked)\r\n          else\r\n            assert.is_same(opcode,0x1)\r\n            assert.is_true(fin)\r\n            assert.is.same(decoded,'Hello')\r\n            assert.is_same(rest,'')\r\n            assert.is_false(masked)\r\n          end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "assert.is_same(decoded,nil)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.is_same(type(fin),'number')",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.is_truthy(i+fin <= #hello_unmasked)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert.is_same(rest,'')",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hello_masked..'foo')\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hello')\r\n        assert.is_same(rest,'foo')\r\n        assert.is_truthy(masked)\r\n      end",
    "type": "function"
  }, {
    "id": 45,
    "text": "local decoded,fin,opcode,rest,masked = frame.decode(hello_masked..'foo')",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "assert.is_truthy(masked)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hel)\r\n        assert.is_falsy(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hel')\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n        \r\n        decoded,fin,opcode,rest,masked = frame.decode(lo)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x0)\r\n        assert.is.same(decoded,'lo')\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end",
    "type": "function"
  }, {
    "id": 49,
    "text": "local decoded,fin,opcode,rest,masked = frame.decode(hel)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "assert.is_falsy(fin)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.is.same(decoded,'Hel')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert.is_falsy(masked)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "decoded,fin,opcode,rest,masked = frame.decode(lo)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "assert.is_same(opcode,0x0)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert.is.same(decoded,'lo')",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function()\r\n        local decoded,fin,opcode = frame.decode(hello_unmasked:sub(1,4))\r\n        assert.is_falsy(decoded)\r\n        assert.is_same(fin,#hello_unmasked-4)\r\n        assert.is_falsy(opcode)\r\n      end",
    "type": "function"
  }, {
    "id": 58,
    "text": "local decoded,fin,opcode = frame.decode(hello_unmasked:sub(1,4))",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "assert.is_falsy(decoded)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.is_same(fin,#hello_unmasked-4)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.is_falsy(opcode)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function()\r\n        local decoded,fin,opcode = frame.decode(hello_masked:sub(1,4))\r\n        assert.is_falsy(decoded)\r\n        assert.is_same(fin,#hello_masked-4)\r\n        assert.is_falsy(opcode)\r\n      end",
    "type": "function"
  }, {
    "id": 64,
    "text": "local decoded,fin,opcode = frame.decode(hello_masked:sub(1,4))",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "assert.is_same(fin,#hello_masked-4)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function()\r\n        local encoded = frame.encode('Hello')\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT,false)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT,false,true)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local decoded,fin,opcode,_,masked = frame.decode(encoded)\r\n        assert.is_same('Hello',decoded)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_falsy(masked)\r\n      end",
    "type": "function"
  }, {
    "id": 68,
    "text": "local encoded = frame.encode('Hello')",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "assert.is_same(encoded,hello_unmasked)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "local encoded = frame.encode('Hello',frame.TEXT)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local encoded = frame.encode('Hello',frame.TEXT,false)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local encoded = frame.encode('Hello',frame.TEXT,false,true)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local decoded,fin,opcode,_,masked = frame.decode(encoded)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "assert.is_same('Hello',decoded)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert.is_same(opcode,frame.TEXT)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n        local len = 127\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end",
    "type": "function"
  }, {
    "id": 78,
    "text": "local len = 127",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local text = random_text(len)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "assert.is_same(#text,len)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "local encoded = frame.encode(text)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local decoded,fin,opcode,rest,masked = frame.decode(encoded)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "assert.is_same(text,decoded)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n        local len = 0xffff-1\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end",
    "type": "function"
  }, {
    "id": 86,
    "text": "local len = 0xffff-1",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function()\r\n        local len = 0xffff+1\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n      end",
    "type": "function"
  }, {
    "id": 89,
    "text": "local len = 0xffff+1",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local decoded,fin,opcode = frame.decode(encoded)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n        local encoded = frame.encode('Hello',frame.TEXT,true)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same('Hello',decoded)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_truthy(masked)\r\n      end",
    "type": "function"
  }, {
    "id": 93,
    "text": "local encoded = frame.encode('Hello',frame.TEXT,true)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function()\r\n        local hel = frame.encode('Hel',frame.TEXT,false,false)\r\n        local decoded,fin,opcode = frame.decode(hel)\r\n        assert.is_falsy(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hel')\r\n        \r\n        local lo = frame.encode('lo',frame.CONTINUATION,false)\r\n        decoded,fin,opcode = frame.decode(lo)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x0)\r\n        assert.is.same(decoded,'lo')\r\n      end",
    "type": "function"
  }, {
    "id": 96,
    "text": "local hel = frame.encode('Hel',frame.TEXT,false,false)",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local decoded,fin,opcode = frame.decode(hel)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local lo = frame.encode('lo',frame.CONTINUATION,false)",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "decoded,fin,opcode = frame.decode(lo)",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function()\r\n        local reason = 'foobar'\r\n        local code = 0xfff1\r\n        local close_frame = frame.encode_close(code,reason)\r\n        assert.is_same(#close_frame,2+#reason)\r\n        local dcode,dreason = frame.decode_close(close_frame)\r\n        assert.is_same(dcode,code)\r\n        assert.is_same(dreason,reason)\r\n      end",
    "type": "function"
  }, {
    "id": 102,
    "text": "local reason = 'foobar'",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local code = 0xfff1",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local close_frame = frame.encode_close(code,reason)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "assert.is_same(#close_frame,2+#reason)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "local dcode,dreason = frame.decode_close(close_frame)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "assert.is_same(dcode,code)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert.is_same(dreason,reason)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function()\r\n    it(\r\n      'exposes a table',\r\n      function()\r\n        assert.is_same(type(frame),'table')\r\n      end)\r\n    \r\n    it(\r\n      'provides a decode and a encode function',\r\n      function()\r\n        assert.is.same(type(frame.encode),'function')\r\n        assert.is.same(type(frame.decode),'function')\r\n        assert.is.same(type(frame.encode_close),'function')\r\n        assert.is.same(type(frame.decode_close),'function')\r\n      end)\r\n    \r\n    it(\r\n      'provides correct OPCODES',\r\n      function()\r\n        assert.is.same(frame.CONTINUATION,0)\r\n        assert.is.same(frame.TEXT,1)\r\n        assert.is.same(frame.BINARY,2)\r\n        assert.is.same(frame.CLOSE,8)\r\n        assert.is.same(frame.PING,9)\r\n        assert.is.same(frame.PONG,10)\r\n      end)\r\n    \r\n    \r\n    it(\r\n      'RFC: decode a single-frame unmasked text message',\r\n      function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hello_unmasked..'foo')\r\n        assert.is_same(opcode,0x1)\r\n        assert.is_true(fin)\r\n        assert.is.same(decoded,'Hello')\r\n        assert.is_same(rest,'foo')\r\n        assert.is_false(masked)\r\n      end)\r\n    \r\n    it(\r\n      'RFC: decode a single-frame unmasked text message bytewise and check min length',\r\n      function()\r\n        for i=1,#hello_unmasked do\r\n          local sub = hello_unmasked:sub(1,i)\r\n          local decoded,fin,opcode,rest,masked = frame.decode(sub)\r\n          if i ~= #hello_unmasked then\r\n            assert.is_same(decoded,nil)\r\n            assert.is_same(type(fin),'number')\r\n            assert.is_truthy(i+fin <= #hello_unmasked)\r\n          else\r\n            assert.is_same(opcode,0x1)\r\n            assert.is_true(fin)\r\n            assert.is.same(decoded,'Hello')\r\n            assert.is_same(rest,'')\r\n            assert.is_false(masked)\r\n          end\r\n        end\r\n      end)\r\n    \r\n    it(\r\n      'RFC: decode a single-frame masked text message',\r\n      function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hello_masked..'foo')\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hello')\r\n        assert.is_same(rest,'foo')\r\n        assert.is_truthy(masked)\r\n      end)\r\n    \r\n    it(\r\n      'RFC: decode a fragmented test message',\r\n      function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hel)\r\n        assert.is_falsy(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hel')\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n        \r\n        decoded,fin,opcode,rest,masked = frame.decode(lo)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x0)\r\n        assert.is.same(decoded,'lo')\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end)\r\n    \r\n    it(\r\n      'refuse incomplete unmasked frame',\r\n      function()\r\n        local decoded,fin,opcode = frame.decode(hello_unmasked:sub(1,4))\r\n        assert.is_falsy(decoded)\r\n        assert.is_same(fin,#hello_unmasked-4)\r\n        assert.is_falsy(opcode)\r\n      end)\r\n    \r\n    it(\r\n      'refuse incomplete masked frame',\r\n      function()\r\n        local decoded,fin,opcode = frame.decode(hello_masked:sub(1,4))\r\n        assert.is_falsy(decoded)\r\n        assert.is_same(fin,#hello_masked-4)\r\n        assert.is_falsy(opcode)\r\n      end)\r\n    \r\n    it(\r\n      'encode single-frame unmasked text',\r\n      function()\r\n        local encoded = frame.encode('Hello')\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT,false)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT,false,true)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local decoded,fin,opcode,_,masked = frame.decode(encoded)\r\n        assert.is_same('Hello',decoded)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_falsy(masked)\r\n      end)\r\n    \r\n    local random_text = function(len)\r\n      local chars = {}\r\n      for i=1,len do\r\n        chars[i] = string.char(math.random(33,126))\r\n      end\r\n      return table.concat(chars)\r\n    end\r\n    \r\n    it(\r\n      'encode and decode single-frame of length 127 unmasked text',\r\n      function()\r\n        local len = 127\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end)\r\n    \r\n    it(\r\n      'encode and decode single-frame of length 0xffff-1 unmasked text',\r\n      function()\r\n        local len = 0xffff-1\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end)\r\n    \r\n    it(\r\n      'encode and decode single-frame of length 0xffff+1 unmasked text',\r\n      function()\r\n        local len = 0xffff+1\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n      end)\r\n    \r\n    it(\r\n      'encode single-frame masked text',\r\n      function()\r\n        local encoded = frame.encode('Hello',frame.TEXT,true)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same('Hello',decoded)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_truthy(masked)\r\n      end)\r\n    \r\n    it(\r\n      'encode fragmented unmasked text',\r\n      function()\r\n        local hel = frame.encode('Hel',frame.TEXT,false,false)\r\n        local decoded,fin,opcode = frame.decode(hel)\r\n        assert.is_falsy(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hel')\r\n        \r\n        local lo = frame.encode('lo',frame.CONTINUATION,false)\r\n        decoded,fin,opcode = frame.decode(lo)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x0)\r\n        assert.is.same(decoded,'lo')\r\n      end)\r\n    \r\n    it(\r\n      'encodes and decodes close packet correctly',\r\n      function()\r\n        local reason = 'foobar'\r\n        local code = 0xfff1\r\n        local close_frame = frame.encode_close(code,reason)\r\n        assert.is_same(#close_frame,2+#reason)\r\n        local dcode,dreason = frame.decode_close(close_frame)\r\n        assert.is_same(dcode,code)\r\n        assert.is_same(dreason,reason)\r\n      end)\r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 111,
    "text": "it(\r\n      'exposes a table',\r\n      function()\r\n        assert.is_same(type(frame),'table')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "it(\r\n      'provides a decode and a encode function',\r\n      function()\r\n        assert.is.same(type(frame.encode),'function')\r\n        assert.is.same(type(frame.decode),'function')\r\n        assert.is.same(type(frame.encode_close),'function')\r\n        assert.is.same(type(frame.decode_close),'function')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "it(\r\n      'provides correct OPCODES',\r\n      function()\r\n        assert.is.same(frame.CONTINUATION,0)\r\n        assert.is.same(frame.TEXT,1)\r\n        assert.is.same(frame.BINARY,2)\r\n        assert.is.same(frame.CLOSE,8)\r\n        assert.is.same(frame.PING,9)\r\n        assert.is.same(frame.PONG,10)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "it(\r\n      'RFC: decode a single-frame unmasked text message',\r\n      function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hello_unmasked..'foo')\r\n        assert.is_same(opcode,0x1)\r\n        assert.is_true(fin)\r\n        assert.is.same(decoded,'Hello')\r\n        assert.is_same(rest,'foo')\r\n        assert.is_false(masked)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "it(\r\n      'RFC: decode a single-frame unmasked text message bytewise and check min length',\r\n      function()\r\n        for i=1,#hello_unmasked do\r\n          local sub = hello_unmasked:sub(1,i)\r\n          local decoded,fin,opcode,rest,masked = frame.decode(sub)\r\n          if i ~= #hello_unmasked then\r\n            assert.is_same(decoded,nil)\r\n            assert.is_same(type(fin),'number')\r\n            assert.is_truthy(i+fin <= #hello_unmasked)\r\n          else\r\n            assert.is_same(opcode,0x1)\r\n            assert.is_true(fin)\r\n            assert.is.same(decoded,'Hello')\r\n            assert.is_same(rest,'')\r\n            assert.is_false(masked)\r\n          end\r\n        end\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "it(\r\n      'RFC: decode a single-frame masked text message',\r\n      function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hello_masked..'foo')\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hello')\r\n        assert.is_same(rest,'foo')\r\n        assert.is_truthy(masked)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "it(\r\n      'RFC: decode a fragmented test message',\r\n      function()\r\n        local decoded,fin,opcode,rest,masked = frame.decode(hel)\r\n        assert.is_falsy(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hel')\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n        \r\n        decoded,fin,opcode,rest,masked = frame.decode(lo)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x0)\r\n        assert.is.same(decoded,'lo')\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "it(\r\n      'refuse incomplete unmasked frame',\r\n      function()\r\n        local decoded,fin,opcode = frame.decode(hello_unmasked:sub(1,4))\r\n        assert.is_falsy(decoded)\r\n        assert.is_same(fin,#hello_unmasked-4)\r\n        assert.is_falsy(opcode)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "it(\r\n      'refuse incomplete masked frame',\r\n      function()\r\n        local decoded,fin,opcode = frame.decode(hello_masked:sub(1,4))\r\n        assert.is_falsy(decoded)\r\n        assert.is_same(fin,#hello_masked-4)\r\n        assert.is_falsy(opcode)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "it(\r\n      'encode single-frame unmasked text',\r\n      function()\r\n        local encoded = frame.encode('Hello')\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT,false)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local encoded = frame.encode('Hello',frame.TEXT,false,true)\r\n        assert.is_same(encoded,hello_unmasked)\r\n        local decoded,fin,opcode,_,masked = frame.decode(encoded)\r\n        assert.is_same('Hello',decoded)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_falsy(masked)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "local random_text = function(len)\r\n      local chars = {}\r\n      for i=1,len do\r\n        chars[i] = string.char(math.random(33,126))\r\n      end\r\n      return table.concat(chars)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "it(\r\n      'encode and decode single-frame of length 127 unmasked text',\r\n      function()\r\n        local len = 127\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "it(\r\n      'encode and decode single-frame of length 0xffff-1 unmasked text',\r\n      function()\r\n        local len = 0xffff-1\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_falsy(masked)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "it(\r\n      'encode and decode single-frame of length 0xffff+1 unmasked text',\r\n      function()\r\n        local len = 0xffff+1\r\n        local text = random_text(len)\r\n        assert.is_same(#text,len)\r\n        local encoded = frame.encode(text)\r\n        local decoded,fin,opcode = frame.decode(encoded)\r\n        assert.is_same(text,decoded)\r\n        assert.is_same(#text,len)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "it(\r\n      'encode single-frame masked text',\r\n      function()\r\n        local encoded = frame.encode('Hello',frame.TEXT,true)\r\n        local decoded,fin,opcode,rest,masked = frame.decode(encoded)\r\n        assert.is_same('Hello',decoded)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,frame.TEXT)\r\n        assert.is_same(rest,'')\r\n        assert.is_truthy(masked)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "it(\r\n      'encode fragmented unmasked text',\r\n      function()\r\n        local hel = frame.encode('Hel',frame.TEXT,false,false)\r\n        local decoded,fin,opcode = frame.decode(hel)\r\n        assert.is_falsy(fin)\r\n        assert.is_same(opcode,0x1)\r\n        assert.is.same(decoded,'Hel')\r\n        \r\n        local lo = frame.encode('lo',frame.CONTINUATION,false)\r\n        decoded,fin,opcode = frame.decode(lo)\r\n        assert.is_true(fin)\r\n        assert.is_same(opcode,0x0)\r\n        assert.is.same(decoded,'lo')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "it(\r\n      'encodes and decodes close packet correctly',\r\n      function()\r\n        local reason = 'foobar'\r\n        local code = 0xfff1\r\n        local close_frame = frame.encode_close(code,reason)\r\n        assert.is_same(#close_frame,2+#reason)\r\n        local dcode,dreason = frame.decode_close(close_frame)\r\n        assert.is_same(dcode,code)\r\n        assert.is_same(dreason,reason)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "",
    "type": "function container"
  }, {
    "id": 130,
    "text": "function(data,opcode,masked,fin)\r\n  local encoded\r\n  local header = opcode or 1-- TEXT is default opcode\r\n  if fin == nil or fin == true then\r\n    header = bor(header,bit_7)\r\n  end\r\n  local payload = 0\r\n  if masked then\r\n    payload = bor(payload,bit_7)\r\n  end\r\n  local len = #data\r\n  if len < 126 then\r\n    payload = bor(payload,len)\r\n    encoded = spack('bb',header,payload)\r\n  elseif len < 0xffff then\r\n    payload = bor(payload,126)\r\n    encoded = spack('bb>H',header,payload,len)\r\n  elseif len < 2^53 then\r\n    local high = math.floor(len/2^32)\r\n    local low = len - high*2^32\r\n    payload = bor(payload,127)\r\n    encoded = spack('bb>I>I',header,payload,high,low)\r\n  end\r\n  if not masked then\r\n    encoded = encoded..data\r\n  else\r\n    local m1 = math.random(0,0xff)\r\n    local m2 = math.random(0,0xff)\r\n    local m3 = math.random(0,0xff)\r\n    local m4 = math.random(0,0xff)\r\n    local mask = {m1,m2,m3,m4}\r\n    encoded = encoded..spack('bbbb',m1,m2,m3,m4)\r\n    encoded = encoded..xor_mask(data,mask,#data)\r\n  end\r\n  return encoded\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "function(encoded)\r\n  local encoded_bak = encoded\r\n  if #encoded < 2 then\r\n    return nil,2\r\n  end\r\n  local pos,header,payload = sunpack(encoded,'bb')\r\n  encoded = ssub(encoded,pos)\r\n  local bytes = 2\r\n  local fin = band(header,bit_7) > 0\r\n  local opcode = band(header,bit_0_3)\r\n  local mask = band(payload,bit_7) > 0\r\n  payload = band(payload,bit_0_6)\r\n  if payload > 125 then\r\n    if payload == 126 then\r\n      if #encoded < 2 then\r\n        return nil,2\r\n      end\r\n      pos,payload = sunpack(encoded,'>H')\r\n    elseif payload == 127 then\r\n      if #encoded < 8 then\r\n        return nil,8\r\n      end\r\n      pos,high,low = sunpack(encoded,'>I>I')\r\n      payload = high*2^32 + low\r\n      if payload < 0xffff or payload > 2^53 then\r\n        assert(false,'INVALID PAYLOAD '..payload)\r\n      end\r\n    else\r\n      assert(false,'INVALID PAYLOAD '..payload)\r\n    end\r\n    encoded = ssub(encoded,pos)\r\n    bytes = bytes + pos - 1\r\n  end\r\n  local decoded\r\n  if mask then\r\n    local bytes_short = payload + 4 - #encoded\r\n    if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end\r\n    local pos,m1,m2,m3,m4 = sunpack(encoded,'bbbb')\r\n    encoded = ssub(encoded,pos)\r\n    local mask = {\r\n      m1,m2,m3,m4\r\n    }\r\n    decoded = xor_mask(encoded,mask,payload)\r\n    bytes = bytes + 4 + payload\r\n  else\r\n    local bytes_short = payload - #encoded\r\n    if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end\r\n    if #encoded > payload then\r\n      decoded = ssub(encoded,1,payload)\r\n    else\r\n      decoded = encoded\r\n    end\r\n    bytes = bytes + payload\r\n  end\r\n  return decoded,fin,opcode,encoded_bak:sub(bytes+1),mask\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "function(code,reason)\r\n  if code then\r\n    data = spack('>H',code)\r\n    if reason then\r\n      data = data..tostring(reason)\r\n    end\r\n    return data\r\n  end\r\n  return ''\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "function(data)\r\n  local _,code,reason\r\n  if data then\r\n    if #data > 1 then\r\n      _,code = sunpack(data,'>H')\r\n    end\r\n    if #data > 2 then\r\n      reason = data:sub(3)\r\n    end\r\n  end\r\n  return code,reason\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "is_falsy",
    "type": "global function"
  }, {
    "id": 135,
    "text": "random",
    "type": "global function"
  }, {
    "id": 136,
    "text": "is_truthy",
    "type": "global function"
  }, {
    "id": 137,
    "text": "it",
    "type": "global function"
  }, {
    "id": 138,
    "text": "type",
    "type": "global function"
  }, {
    "id": 139,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 140,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 141,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 142,
    "text": "char",
    "type": "global function"
  }, {
    "id": 143,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 144,
    "text": "require",
    "type": "global function"
  }, {
    "id": 145,
    "text": "bytes",
    "type": "global function"
  }, {
    "id": 146,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 147,
    "text": "assert.is.same",
    "type": "global function"
  }, {
    "id": 148,
    "text": "",
    "type": "variable container"
  }, {
    "id": 149,
    "text": "",
    "type": "require container"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "n/a"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "n/a"
  }, {
    "id": 154,
    "text": "",
    "type": "local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "n/a"
  }, {
    "id": 160,
    "text": "",
    "type": "global variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "global variable"
  }, {
    "id": 164,
    "text": "pack",
    "type": "module"
  }, {
    "id": 165,
    "text": "",
    "type": "require container"
  }, {
    "id": 166,
    "text": "",
    "type": "require container"
  }, {
    "id": 167,
    "text": "",
    "type": "require container"
  }, {
    "id": 168,
    "text": "",
    "type": "require container"
  }, {
    "id": 169,
    "text": "",
    "type": "require container"
  } ]
}