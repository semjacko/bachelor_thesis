{
  "_filename": "test-server-ev.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-websockets/test-server/test-server-ev.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 11
  }, {
    "from": 24,
    "label": "has",
    "to": 12
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 20
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "calls",
    "to": 30
  }, {
    "from": 29,
    "label": "calls",
    "to": 35
  }, {
    "from": 29,
    "label": "calls",
    "to": 32
  }, {
    "from": 29,
    "label": "calls",
    "to": 34
  }, {
    "from": 29,
    "label": "calls",
    "to": 34
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 29,
    "label": "calls",
    "to": 36
  }, {
    "from": 29,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "contains",
    "to": 29
  }, {
    "from": 29,
    "label": "declares",
    "to": 3
  }, {
    "from": 29,
    "label": "declares",
    "to": 7
  }, {
    "from": 29,
    "label": "declares",
    "to": 10
  }, {
    "from": 29,
    "label": "declares",
    "to": 14
  }, {
    "from": 29,
    "label": "declares",
    "to": 19
  }, {
    "from": 29,
    "label": "declares",
    "to": 22
  }, {
    "from": 2,
    "label": "contains",
    "to": 37
  }, {
    "from": 2,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 31
  }, {
    "from": 38,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "requires",
    "to": 1
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 19
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "websocket",
    "type": "module"
  }, {
    "id": 2,
    "text": "test-server-ev",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(ws,data,opcode)\r\n          if opcode == websocket.TEXT then\r\n            ws:broadcast(data)\r\n          end\r\n        end",
    "type": "function"
  }, {
    "id": 4,
    "text": "if opcode == websocket.TEXT then\r\n            ws:broadcast(data)\r\n          end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "ws:broadcast(data)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function(ws)\r\n      ws:on_message(\r\n        function(ws,data,opcode)\r\n          if opcode == websocket.TEXT then\r\n            ws:broadcast(data)\r\n          end\r\n        end)\r\n    end",
    "type": "function"
  }, {
    "id": 8,
    "text": "ws:on_message(\r\n        function(ws,data,opcode)\r\n          if opcode == websocket.TEXT then\r\n            ws:broadcast(data)\r\n          end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function()\r\n          ws:send(tostring(number))\r\n          number = number + 1\r\n        end",
    "type": "function"
  }, {
    "id": 11,
    "text": "ws:send(tostring(number))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "number = number + 1",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function(ws,message,opcode)\r\n          if opcode == websocket.TEXT then\r\n            if message:match('reset') then\r\n              number = 0\r\n            end\r\n          end\r\n        end",
    "type": "function"
  }, {
    "id": 15,
    "text": "if opcode == websocket.TEXT then\r\n            if message:match('reset') then\r\n              number = 0\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if message:match('reset') then\r\n              number = 0\r\n            end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "number = 0",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n          timer:stop(loop)\r\n        end",
    "type": "function"
  }, {
    "id": 20,
    "text": "timer:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(ws)\r\n      local number = 0\r\n      local timer = ev.Timer.new(\r\n        function()\r\n          ws:send(tostring(number))\r\n          number = number + 1\r\n        end,0.1,0.1)\r\n      timer:start(loop)\r\n      ws:on_message(\r\n        function(ws,message,opcode)\r\n          if opcode == websocket.TEXT then\r\n            if message:match('reset') then\r\n              number = 0\r\n            end\r\n          end\r\n        end)\r\n      ws:on_close(\r\n        function()\r\n          timer:stop(loop)\r\n        end)\r\n    end",
    "type": "function"
  }, {
    "id": 23,
    "text": "local number = 0",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local timer = ev.Timer.new(\r\n        function()\r\n          ws:send(tostring(number))\r\n          number = number + 1\r\n        end,0.1,0.1)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "timer:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "ws:on_message(\r\n        function(ws,message,opcode)\r\n          if opcode == websocket.TEXT then\r\n            if message:match('reset') then\r\n              number = 0\r\n            end\r\n          end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "ws:on_close(\r\n        function()\r\n          timer:stop(loop)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "",
    "type": "function container"
  }, {
    "id": 30,
    "text": "server.ev.listen",
    "type": "global function"
  }, {
    "id": 31,
    "text": "ev",
    "type": "module"
  }, {
    "id": 32,
    "text": "Timer.new",
    "type": "global function"
  }, {
    "id": 33,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 34,
    "text": "require",
    "type": "global function"
  }, {
    "id": 35,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 36,
    "text": "print",
    "type": "global function"
  }, {
    "id": 37,
    "text": "",
    "type": "variable container"
  }, {
    "id": 38,
    "text": "",
    "type": "require container"
  }, {
    "id": 39,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "require local variable"
  } ]
}