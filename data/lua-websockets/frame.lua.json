{
  "_filename": "frame.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-websockets/src/websocket/frame.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "calls",
    "to": 92
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 24
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 86
  }, {
    "from": 4,
    "label": "calls",
    "to": 92
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 4,
    "label": "calls",
    "to": 86
  }, {
    "from": 4,
    "label": "calls",
    "to": 86
  }, {
    "from": 5,
    "label": "calls",
    "to": 52
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 33,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 10
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 52,
    "label": "has",
    "to": 60
  }, {
    "from": 52,
    "label": "has",
    "to": 61
  }, {
    "from": 52,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 62,
    "label": "has",
    "to": 56
  }, {
    "from": 62,
    "label": "has",
    "to": 71
  }, {
    "from": 52,
    "label": "has",
    "to": 10
  }, {
    "from": 52,
    "label": "has",
    "to": 10
  }, {
    "from": 52,
    "label": "has",
    "to": 72
  }, {
    "from": 52,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 56
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 73,
    "label": "has",
    "to": 84
  }, {
    "from": 52,
    "label": "has",
    "to": 10
  }, {
    "from": 52,
    "label": "has",
    "to": 10
  }, {
    "from": 52,
    "label": "has",
    "to": 10
  }, {
    "from": 52,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 92,
    "label": "has",
    "to": 10
  }, {
    "from": 92,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "calls",
    "to": 104
  }, {
    "from": 100,
    "label": "calls",
    "to": 104
  }, {
    "from": 100,
    "label": "calls",
    "to": 113
  }, {
    "from": 100,
    "label": "calls",
    "to": 108
  }, {
    "from": 100,
    "label": "calls",
    "to": 108
  }, {
    "from": 100,
    "label": "calls",
    "to": 108
  }, {
    "from": 100,
    "label": "calls",
    "to": 108
  }, {
    "from": 100,
    "label": "calls",
    "to": 115
  }, {
    "from": 100,
    "label": "calls",
    "to": 6
  }, {
    "from": 100,
    "label": "calls",
    "to": 6
  }, {
    "from": 100,
    "label": "calls",
    "to": 6
  }, {
    "from": 100,
    "label": "calls",
    "to": 114
  }, {
    "from": 100,
    "label": "calls",
    "to": 106
  }, {
    "from": 100,
    "label": "calls",
    "to": 12
  }, {
    "from": 100,
    "label": "calls",
    "to": 12
  }, {
    "from": 100,
    "label": "calls",
    "to": 111
  }, {
    "from": 100,
    "label": "calls",
    "to": 110
  }, {
    "from": 100,
    "label": "calls",
    "to": 116
  }, {
    "from": 100,
    "label": "calls",
    "to": 116
  }, {
    "from": 100,
    "label": "calls",
    "to": 116
  }, {
    "from": 100,
    "label": "calls",
    "to": 116
  }, {
    "from": 100,
    "label": "calls",
    "to": 116
  }, {
    "from": 100,
    "label": "calls",
    "to": 117
  }, {
    "from": 100,
    "label": "calls",
    "to": 117
  }, {
    "from": 100,
    "label": "calls",
    "to": 117
  }, {
    "from": 100,
    "label": "calls",
    "to": 117
  }, {
    "from": 100,
    "label": "calls",
    "to": 105
  }, {
    "from": 100,
    "label": "calls",
    "to": 118
  }, {
    "from": 100,
    "label": "calls",
    "to": 112
  }, {
    "from": 100,
    "label": "calls",
    "to": 112
  }, {
    "from": 100,
    "label": "calls",
    "to": 107
  }, {
    "from": 100,
    "label": "calls",
    "to": 107
  }, {
    "from": 100,
    "label": "calls",
    "to": 107
  }, {
    "from": 100,
    "label": "calls",
    "to": 107
  }, {
    "from": 100,
    "label": "calls",
    "to": 107
  }, {
    "from": 100,
    "label": "calls",
    "to": 119
  }, {
    "from": 100,
    "label": "calls",
    "to": 120
  }, {
    "from": 100,
    "label": "calls",
    "to": 120
  }, {
    "from": 100,
    "label": "calls",
    "to": 120
  }, {
    "from": 100,
    "label": "calls",
    "to": 120
  }, {
    "from": 100,
    "label": "calls",
    "to": 120
  }, {
    "from": 100,
    "label": "calls",
    "to": 121
  }, {
    "from": 100,
    "label": "calls",
    "to": 109
  }, {
    "from": 100,
    "label": "calls",
    "to": 109
  }, {
    "from": 100,
    "label": "calls",
    "to": 109
  }, {
    "from": 100,
    "label": "calls",
    "to": 109
  }, {
    "from": 2,
    "label": "contains",
    "to": 100
  }, {
    "from": 100,
    "label": "declares",
    "to": 6
  }, {
    "from": 100,
    "label": "declares",
    "to": 12
  }, {
    "from": 100,
    "label": "declares",
    "to": 24
  }, {
    "from": 100,
    "label": "declares",
    "to": 52
  }, {
    "from": 100,
    "label": "declares",
    "to": 86
  }, {
    "from": 100,
    "label": "declares",
    "to": 92
  }, {
    "from": 101,
    "label": "calls",
    "to": 24
  }, {
    "from": 102,
    "label": "calls",
    "to": 92
  }, {
    "from": 102,
    "label": "calls",
    "to": 24
  }, {
    "from": 102,
    "label": "calls",
    "to": 24
  }, {
    "from": 102,
    "label": "calls",
    "to": 24
  }, {
    "from": 102,
    "label": "calls",
    "to": 86
  }, {
    "from": 102,
    "label": "calls",
    "to": 86
  }, {
    "from": 103,
    "label": "calls",
    "to": 92
  }, {
    "from": 103,
    "label": "calls",
    "to": 92
  }, {
    "from": 103,
    "label": "calls",
    "to": 24
  }, {
    "from": 103,
    "label": "calls",
    "to": 24
  }, {
    "from": 103,
    "label": "calls",
    "to": 24
  }, {
    "from": 103,
    "label": "calls",
    "to": 52
  }, {
    "from": 103,
    "label": "calls",
    "to": 86
  }, {
    "from": 103,
    "label": "calls",
    "to": 86
  }, {
    "from": 122,
    "label": "requires",
    "to": 2
  }, {
    "from": 123,
    "label": "requires",
    "to": 2
  }, {
    "from": 125,
    "label": "requires",
    "to": 2
  }, {
    "from": 126,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 127
  }, {
    "from": 2,
    "label": "contains",
    "to": 128
  }, {
    "from": 127,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 127,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 127,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 127,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 127,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 127,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 127,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 127,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 127,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 127,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 127,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 127,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 127,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 127,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 127,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 127,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 127,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 127,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 127,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 127,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 127,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 127,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 128,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "requires",
    "to": 1
  }, {
    "from": 128,
    "label": "initializes",
    "to": 124
  }, {
    "from": 2,
    "label": "provides",
    "to": 174
  }, {
    "from": 165,
    "label": "represents",
    "to": 175
  }, {
    "from": 174,
    "label": "provides",
    "to": 175
  }, {
    "from": 167,
    "label": "represents",
    "to": 176
  }, {
    "from": 174,
    "label": "provides",
    "to": 176
  }, {
    "from": 169,
    "label": "represents",
    "to": 177
  }, {
    "from": 174,
    "label": "provides",
    "to": 177
  }, {
    "from": 171,
    "label": "represents",
    "to": 178
  }, {
    "from": 174,
    "label": "provides",
    "to": 178
  }, {
    "from": 174,
    "label": "provides",
    "to": 179
  }, {
    "from": 174,
    "label": "provides",
    "to": 180
  }, {
    "from": 174,
    "label": "provides",
    "to": 181
  }, {
    "from": 174,
    "label": "provides",
    "to": 182
  }, {
    "from": 174,
    "label": "provides",
    "to": 183
  }, {
    "from": 174,
    "label": "provides",
    "to": 184
  }, {
    "from": 185,
    "label": "requires",
    "to": 2
  }, {
    "from": 186,
    "label": "requires",
    "to": 2
  }, {
    "from": 187,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bit",
    "type": "module"
  }, {
    "id": 2,
    "text": "frame",
    "type": "module"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "function(...)\r\n  local n = 0\r\n  for _,bitn in pairs{...} do\r\n    n = n + 2^bitn\r\n  end\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for _,bitn in pairs{...} do\r\n    n = n + 2^bitn\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "n = n + 2^bitn",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function(encoded,mask,payload)\r\n  local transformed_arr = {}\r\n  -- xor chunk-wise to prevent stack overflow.\r\n  -- sbyte and schar multiple in/out values\r\n  -- which require stack\r\n  for p=1,payload,2000 do\r\n    local transformed = {}\r\n    local last = mmin(p+1999,payload)\r\n    local original = {sbyte(encoded,p,last)}\r\n    for i=1,#original do\r\n      local j = (i-1) % 4 + 1\r\n      transformed[i] = bxor(original[i],mask[j])\r\n    end\r\n    local xored = schar(unpack(transformed))\r\n    tinsert(transformed_arr,xored)\r\n  end\r\n  return tconcat(transformed_arr)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local transformed_arr = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "for p=1,payload,2000 do\r\n    local transformed = {}\r\n    local last = mmin(p+1999,payload)\r\n    local original = {sbyte(encoded,p,last)}\r\n    for i=1,#original do\r\n      local j = (i-1) % 4 + 1\r\n      transformed[i] = bxor(original[i],mask[j])\r\n    end\r\n    local xored = schar(unpack(transformed))\r\n    tinsert(transformed_arr,xored)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 15,
    "text": "local transformed = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local last = mmin(p+1999,payload)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local original = {sbyte(encoded,p,last)}",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "for i=1,#original do\r\n      local j = (i-1) % 4 + 1\r\n      transformed[i] = bxor(original[i],mask[j])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 19,
    "text": "local j = (i-1) % 4 + 1",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "transformed[i] = bxor(original[i],mask[j])",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local xored = schar(unpack(transformed))",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "tinsert(transformed_arr,xored)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(data,opcode,masked,fin)\r\n  local encoded\r\n  local header = opcode or 1-- TEXT is default opcode\r\n  if fin == nil or fin == true then\r\n    header = bor(header,bit_7)\r\n  end\r\n  local payload = 0\r\n  if masked then\r\n    payload = bor(payload,bit_7)\r\n  end\r\n  local len = #data\r\n  if len < 126 then\r\n    payload = bor(payload,len)\r\n    encoded = spack('bb',header,payload)\r\n  elseif len < 0xffff then\r\n    payload = bor(payload,126)\r\n    encoded = spack('bb>H',header,payload,len)\r\n  elseif len < 2^53 then\r\n    local high = math.floor(len/2^32)\r\n    local low = len - high*2^32\r\n    payload = bor(payload,127)\r\n    encoded = spack('bb>I>I',header,payload,high,low)\r\n  end\r\n  if not masked then\r\n    encoded = encoded..data\r\n  else\r\n    local m1 = math.random(0,0xff)\r\n    local m2 = math.random(0,0xff)\r\n    local m3 = math.random(0,0xff)\r\n    local m4 = math.random(0,0xff)\r\n    local mask = {m1,m2,m3,m4}\r\n    encoded = encoded..spack('bbbb',m1,m2,m3,m4)\r\n    encoded = encoded..xor_mask(data,mask,#data)\r\n  end\r\n  return encoded\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local encoded",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local header = opcode or 1",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if fin == nil or fin == true then\r\n    header = bor(header,bit_7)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "header = bor(header,bit_7)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local payload = 0",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if masked then\r\n    payload = bor(payload,bit_7)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "payload = bor(payload,bit_7)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local len = #data",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if len < 126 then\r\n    payload = bor(payload,len)\r\n    encoded = spack('bb',header,payload)\r\n  elseif len < 0xffff then\r\n    payload = bor(payload,126)\r\n    encoded = spack('bb>H',header,payload,len)\r\n  elseif len < 2^53 then\r\n    local high = math.floor(len/2^32)\r\n    local low = len - high*2^32\r\n    payload = bor(payload,127)\r\n    encoded = spack('bb>I>I',header,payload,high,low)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "payload = bor(payload,len)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "encoded = spack('bb',header,payload)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "payload = bor(payload,126)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "encoded = spack('bb>H',header,payload,len)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "local high = math.floor(len/2^32)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local low = len - high*2^32",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "payload = bor(payload,127)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "encoded = spack('bb>I>I',header,payload,high,low)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if not masked then\r\n    encoded = encoded..data\r\n  else\r\n    local m1 = math.random(0,0xff)\r\n    local m2 = math.random(0,0xff)\r\n    local m3 = math.random(0,0xff)\r\n    local m4 = math.random(0,0xff)\r\n    local mask = {m1,m2,m3,m4}\r\n    encoded = encoded..spack('bbbb',m1,m2,m3,m4)\r\n    encoded = encoded..xor_mask(data,mask,#data)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "encoded = encoded..data",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "local m1 = math.random(0,0xff)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local m2 = math.random(0,0xff)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local m3 = math.random(0,0xff)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local m4 = math.random(0,0xff)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local mask = {m1,m2,m3,m4}",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "encoded = encoded..spack('bbbb',m1,m2,m3,m4)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "encoded = encoded..xor_mask(data,mask,#data)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(encoded)\r\n  local encoded_bak = encoded\r\n  if #encoded < 2 then\r\n    return nil,2\r\n  end\r\n  local pos,header,payload = sunpack(encoded,'bb')\r\n  encoded = ssub(encoded,pos)\r\n  local bytes = 2\r\n  local fin = band(header,bit_7) > 0\r\n  local opcode = band(header,bit_0_3)\r\n  local mask = band(payload,bit_7) > 0\r\n  payload = band(payload,bit_0_6)\r\n  if payload > 125 then\r\n    if payload == 126 then\r\n      if #encoded < 2 then\r\n        return nil,2\r\n      end\r\n      pos,payload = sunpack(encoded,'>H')\r\n    elseif payload == 127 then\r\n      if #encoded < 8 then\r\n        return nil,8\r\n      end\r\n      pos,high,low = sunpack(encoded,'>I>I')\r\n      payload = high*2^32 + low\r\n      if payload < 0xffff or payload > 2^53 then\r\n        assert(false,'INVALID PAYLOAD '..payload)\r\n      end\r\n    else\r\n      assert(false,'INVALID PAYLOAD '..payload)\r\n    end\r\n    encoded = ssub(encoded,pos)\r\n    bytes = bytes + pos - 1\r\n  end\r\n  local decoded\r\n  if mask then\r\n    local bytes_short = payload + 4 - #encoded\r\n    if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end\r\n    local pos,m1,m2,m3,m4 = sunpack(encoded,'bbbb')\r\n    encoded = ssub(encoded,pos)\r\n    local mask = {\r\n      m1,m2,m3,m4\r\n    }\r\n    decoded = xor_mask(encoded,mask,payload)\r\n    bytes = bytes + 4 + payload\r\n  else\r\n    local bytes_short = payload - #encoded\r\n    if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end\r\n    if #encoded > payload then\r\n      decoded = ssub(encoded,1,payload)\r\n    else\r\n      decoded = encoded\r\n    end\r\n    bytes = bytes + payload\r\n  end\r\n  return decoded,fin,opcode,encoded_bak:sub(bytes+1),mask\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local encoded_bak = encoded",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if #encoded < 2 then\r\n    return nil,2\r\n  end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local pos,header,payload = sunpack(encoded,'bb')",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "encoded = ssub(encoded,pos)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "local bytes = 2",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local fin = band(header,bit_7) > 0",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local opcode = band(header,bit_0_3)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local mask = band(payload,bit_7) > 0",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "payload = band(payload,bit_0_6)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if payload > 125 then\r\n    if payload == 126 then\r\n      if #encoded < 2 then\r\n        return nil,2\r\n      end\r\n      pos,payload = sunpack(encoded,'>H')\r\n    elseif payload == 127 then\r\n      if #encoded < 8 then\r\n        return nil,8\r\n      end\r\n      pos,high,low = sunpack(encoded,'>I>I')\r\n      payload = high*2^32 + low\r\n      if payload < 0xffff or payload > 2^53 then\r\n        assert(false,'INVALID PAYLOAD '..payload)\r\n      end\r\n    else\r\n      assert(false,'INVALID PAYLOAD '..payload)\r\n    end\r\n    encoded = ssub(encoded,pos)\r\n    bytes = bytes + pos - 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "if payload == 126 then\r\n      if #encoded < 2 then\r\n        return nil,2\r\n      end\r\n      pos,payload = sunpack(encoded,'>H')\r\n    elseif payload == 127 then\r\n      if #encoded < 8 then\r\n        return nil,8\r\n      end\r\n      pos,high,low = sunpack(encoded,'>I>I')\r\n      payload = high*2^32 + low\r\n      if payload < 0xffff or payload > 2^53 then\r\n        assert(false,'INVALID PAYLOAD '..payload)\r\n      end\r\n    else\r\n      assert(false,'INVALID PAYLOAD '..payload)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "if #encoded < 2 then\r\n        return nil,2\r\n      end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "pos,payload = sunpack(encoded,'>H')",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if #encoded < 8 then\r\n        return nil,8\r\n      end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "pos,high,low = sunpack(encoded,'>I>I')",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "payload = high*2^32 + low",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if payload < 0xffff or payload > 2^53 then\r\n        assert(false,'INVALID PAYLOAD '..payload)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "assert(false,'INVALID PAYLOAD '..payload)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "bytes = bytes + pos - 1",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local decoded",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if mask then\r\n    local bytes_short = payload + 4 - #encoded\r\n    if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end\r\n    local pos,m1,m2,m3,m4 = sunpack(encoded,'bbbb')\r\n    encoded = ssub(encoded,pos)\r\n    local mask = {\r\n      m1,m2,m3,m4\r\n    }\r\n    decoded = xor_mask(encoded,mask,payload)\r\n    bytes = bytes + 4 + payload\r\n  else\r\n    local bytes_short = payload - #encoded\r\n    if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end\r\n    if #encoded > payload then\r\n      decoded = ssub(encoded,1,payload)\r\n    else\r\n      decoded = encoded\r\n    end\r\n    bytes = bytes + payload\r\n  end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local bytes_short = payload + 4 - #encoded",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "local pos,m1,m2,m3,m4 = sunpack(encoded,'bbbb')",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local mask = {\r\n      m1,m2,m3,m4\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "decoded = xor_mask(encoded,mask,payload)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "bytes = bytes + 4 + payload",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "local bytes_short = payload - #encoded",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "if #encoded > payload then\r\n      decoded = ssub(encoded,1,payload)\r\n    else\r\n      decoded = encoded\r\n    end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "decoded = ssub(encoded,1,payload)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "decoded = encoded",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "bytes = bytes + payload",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function(code,reason)\r\n  if code then\r\n    data = spack('>H',code)\r\n    if reason then\r\n      data = data..tostring(reason)\r\n    end\r\n    return data\r\n  end\r\n  return ''\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "if code then\r\n    data = spack('>H',code)\r\n    if reason then\r\n      data = data..tostring(reason)\r\n    end\r\n    return data\r\n  end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "data = spack('>H',code)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if reason then\r\n      data = data..tostring(reason)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "data = data..tostring(reason)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function(data)\r\n  local _,code,reason\r\n  if data then\r\n    if #data > 1 then\r\n      _,code = sunpack(data,'>H')\r\n    end\r\n    if #data > 2 then\r\n      reason = data:sub(3)\r\n    end\r\n  end\r\n  return code,reason\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "local _,code,reason",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if data then\r\n    if #data > 1 then\r\n      _,code = sunpack(data,'>H')\r\n    end\r\n    if #data > 2 then\r\n      reason = data:sub(3)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "if #data > 1 then\r\n      _,code = sunpack(data,'>H')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "_,code = sunpack(data,'>H')",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if #data > 2 then\r\n      reason = data:sub(3)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "reason = data:sub(3)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "",
    "type": "function container"
  }, {
    "id": 101,
    "text": "",
    "type": "function container"
  }, {
    "id": 102,
    "text": "",
    "type": "function container"
  }, {
    "id": 103,
    "text": "",
    "type": "function container"
  }, {
    "id": 104,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 105,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 106,
    "text": "schar",
    "type": "global function"
  }, {
    "id": 107,
    "text": "spack",
    "type": "global function"
  }, {
    "id": 108,
    "text": "random",
    "type": "global function"
  }, {
    "id": 109,
    "text": "band",
    "type": "global function"
  }, {
    "id": 110,
    "text": "sbyte",
    "type": "global function"
  }, {
    "id": 111,
    "text": "mmin",
    "type": "global function"
  }, {
    "id": 112,
    "text": "require",
    "type": "global function"
  }, {
    "id": 113,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 114,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 115,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 116,
    "text": "bor",
    "type": "global function"
  }, {
    "id": 117,
    "text": "ssub",
    "type": "global function"
  }, {
    "id": 118,
    "text": "bxor",
    "type": "global function"
  }, {
    "id": 119,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 120,
    "text": "sunpack",
    "type": "global function"
  }, {
    "id": 121,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "global variable"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "variable container"
  }, {
    "id": 128,
    "text": "",
    "type": "require container"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "interface container"
  }, {
    "id": 175,
    "text": "",
    "type": "interface"
  }, {
    "id": 176,
    "text": "",
    "type": "interface"
  }, {
    "id": 177,
    "text": "",
    "type": "interface"
  }, {
    "id": 178,
    "text": "",
    "type": "interface"
  }, {
    "id": 179,
    "text": "",
    "type": "interface"
  }, {
    "id": 180,
    "text": "",
    "type": "interface"
  }, {
    "id": 181,
    "text": "",
    "type": "interface"
  }, {
    "id": 182,
    "text": "",
    "type": "interface"
  }, {
    "id": 183,
    "text": "",
    "type": "interface"
  }, {
    "id": 184,
    "text": "",
    "type": "interface"
  }, {
    "id": 185,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "require local variable"
  } ]
}