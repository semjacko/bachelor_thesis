{
  "_filename": "tools.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-websockets/src/websocket/tools.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "calls",
    "to": 99
  }, {
    "from": 3,
    "label": "calls",
    "to": 88
  }, {
    "from": 3,
    "label": "calls",
    "to": 88
  }, {
    "from": 3,
    "label": "calls",
    "to": 88
  }, {
    "from": 3,
    "label": "calls",
    "to": 88
  }, {
    "from": 3,
    "label": "calls",
    "to": 88
  }, {
    "from": 3,
    "label": "calls",
    "to": 88
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 4,
    "label": "calls",
    "to": 88
  }, {
    "from": 4,
    "label": "calls",
    "to": 99
  }, {
    "from": 5,
    "label": "calls",
    "to": 88
  }, {
    "from": 5,
    "label": "calls",
    "to": 99
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 6,
    "label": "has",
    "to": 20
  }, {
    "from": 6,
    "label": "has",
    "to": 21
  }, {
    "from": 6,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 22,
    "label": "has",
    "to": 32
  }, {
    "from": 22,
    "label": "has",
    "to": 33
  }, {
    "from": 22,
    "label": "has",
    "to": 34
  }, {
    "from": 22,
    "label": "has",
    "to": 35
  }, {
    "from": 22,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 36,
    "label": "has",
    "to": 46
  }, {
    "from": 36,
    "label": "has",
    "to": 47
  }, {
    "from": 36,
    "label": "has",
    "to": 48
  }, {
    "from": 36,
    "label": "has",
    "to": 49
  }, {
    "from": 36,
    "label": "has",
    "to": 50
  }, {
    "from": 36,
    "label": "has",
    "to": 51
  }, {
    "from": 22,
    "label": "has",
    "to": 52
  }, {
    "from": 22,
    "label": "has",
    "to": 53
  }, {
    "from": 22,
    "label": "has",
    "to": 54
  }, {
    "from": 22,
    "label": "has",
    "to": 55
  }, {
    "from": 22,
    "label": "has",
    "to": 56
  }, {
    "from": 6,
    "label": "has",
    "to": 57
  }, {
    "from": 6,
    "label": "has",
    "to": 58
  }, {
    "from": 6,
    "label": "has",
    "to": 59
  }, {
    "from": 6,
    "label": "has",
    "to": 60
  }, {
    "from": 6,
    "label": "has",
    "to": 61
  }, {
    "from": 6,
    "label": "has",
    "to": 62
  }, {
    "from": 6,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 64,
    "label": "has",
    "to": 72
  }, {
    "from": 64,
    "label": "has",
    "to": 73
  }, {
    "from": 64,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 83
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 74,
    "label": "has",
    "to": 85
  }, {
    "from": 74,
    "label": "has",
    "to": 86
  }, {
    "from": 64,
    "label": "has",
    "to": 62
  }, {
    "from": 64,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 88,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 88,
    "label": "has",
    "to": 62
  }, {
    "from": 88,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 99,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 62
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "calls",
    "to": 114
  }, {
    "from": 107,
    "label": "calls",
    "to": 114
  }, {
    "from": 107,
    "label": "calls",
    "to": 108
  }, {
    "from": 107,
    "label": "calls",
    "to": 108
  }, {
    "from": 107,
    "label": "calls",
    "to": 108
  }, {
    "from": 107,
    "label": "calls",
    "to": 108
  }, {
    "from": 107,
    "label": "calls",
    "to": 108
  }, {
    "from": 107,
    "label": "calls",
    "to": 108
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 123
  }, {
    "from": 107,
    "label": "calls",
    "to": 64
  }, {
    "from": 107,
    "label": "calls",
    "to": 110
  }, {
    "from": 107,
    "label": "calls",
    "to": 111
  }, {
    "from": 107,
    "label": "calls",
    "to": 111
  }, {
    "from": 107,
    "label": "calls",
    "to": 116
  }, {
    "from": 107,
    "label": "calls",
    "to": 112
  }, {
    "from": 107,
    "label": "calls",
    "to": 112
  }, {
    "from": 107,
    "label": "calls",
    "to": 117
  }, {
    "from": 107,
    "label": "calls",
    "to": 117
  }, {
    "from": 107,
    "label": "calls",
    "to": 117
  }, {
    "from": 107,
    "label": "calls",
    "to": 117
  }, {
    "from": 107,
    "label": "calls",
    "to": 120
  }, {
    "from": 107,
    "label": "calls",
    "to": 119
  }, {
    "from": 107,
    "label": "calls",
    "to": 125
  }, {
    "from": 107,
    "label": "calls",
    "to": 125
  }, {
    "from": 107,
    "label": "calls",
    "to": 118
  }, {
    "from": 107,
    "label": "calls",
    "to": 118
  }, {
    "from": 107,
    "label": "calls",
    "to": 118
  }, {
    "from": 107,
    "label": "calls",
    "to": 121
  }, {
    "from": 107,
    "label": "calls",
    "to": 121
  }, {
    "from": 107,
    "label": "calls",
    "to": 124
  }, {
    "from": 107,
    "label": "calls",
    "to": 113
  }, {
    "from": 107,
    "label": "calls",
    "to": 113
  }, {
    "from": 107,
    "label": "calls",
    "to": 113
  }, {
    "from": 107,
    "label": "calls",
    "to": 126
  }, {
    "from": 107,
    "label": "calls",
    "to": 126
  }, {
    "from": 107,
    "label": "calls",
    "to": 126
  }, {
    "from": 107,
    "label": "calls",
    "to": 127
  }, {
    "from": 107,
    "label": "calls",
    "to": 122
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 2,
    "label": "contains",
    "to": 107
  }, {
    "from": 107,
    "label": "declares",
    "to": 6
  }, {
    "from": 107,
    "label": "declares",
    "to": 64
  }, {
    "from": 107,
    "label": "declares",
    "to": 88
  }, {
    "from": 107,
    "label": "declares",
    "to": 99
  }, {
    "from": 129,
    "label": "requires",
    "to": 2
  }, {
    "from": 130,
    "label": "requires",
    "to": 2
  }, {
    "from": 131,
    "label": "requires",
    "to": 2
  }, {
    "from": 132,
    "label": "requires",
    "to": 2
  }, {
    "from": 133,
    "label": "requires",
    "to": 2
  }, {
    "from": 134,
    "label": "requires",
    "to": 2
  }, {
    "from": 135,
    "label": "requires",
    "to": 2
  }, {
    "from": 136,
    "label": "requires",
    "to": 2
  }, {
    "from": 137,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 138
  }, {
    "from": 2,
    "label": "contains",
    "to": 139
  }, {
    "from": 138,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 138,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 138,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 138,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 138,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 138,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 138,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 138,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 138,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 138,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 138,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 138,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 138,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 138,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 138,
    "label": "initializes",
    "to": 168
  }, {
    "from": 168,
    "label": "assigns",
    "to": 169
  }, {
    "from": 138,
    "label": "initializes",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 138,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 138,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 138,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 138,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 139,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "requires",
    "to": 1
  }, {
    "from": 139,
    "label": "initializes",
    "to": 128
  }, {
    "from": 2,
    "label": "provides",
    "to": 181
  }, {
    "from": 170,
    "label": "represents",
    "to": 182
  }, {
    "from": 181,
    "label": "provides",
    "to": 182
  }, {
    "from": 181,
    "label": "provides",
    "to": 183
  }, {
    "from": 176,
    "label": "represents",
    "to": 184
  }, {
    "from": 181,
    "label": "provides",
    "to": 184
  }, {
    "from": 178,
    "label": "represents",
    "to": 185
  }, {
    "from": 181,
    "label": "provides",
    "to": 185
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bit",
    "type": "module"
  }, {
    "id": 2,
    "text": "tools",
    "type": "module"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "function(msg)\r\n  \r\n  local h0 = 0x67452301\r\n  local h1 = 0xEFCDAB89\r\n  local h2 = 0x98BADCFE\r\n  local h3 = 0x10325476\r\n  local h4 = 0xC3D2E1F0\r\n  \r\n  local bits = #msg * 8\r\n  -- append b10000000\r\n  msg = msg..schar(0x80)\r\n  \r\n  -- 64 bit length will be appended\r\n  local bytes = #msg + 8\r\n  \r\n  -- 512 bit append stuff\r\n  local fill_bytes = 64 - (bytes % 64)\r\n  if fill_bytes ~= 64 then\r\n    msg = msg..srep(schar(0),fill_bytes)\r\n  end\r\n  \r\n  -- append 64 big endian length\r\n  local high = math.floor(bits/2^32)\r\n  local low = bits - high*2^32\r\n  msg = msg..spack('>I>I',high,low)\r\n  \r\n  assert(#msg % 64 == 0,#msg % 64)\r\n  \r\n  for j=1,#msg,64 do\r\n    local chunk = msg:sub(j,j+63)\r\n    assert(#chunk==64,#chunk)\r\n    local words = {sunpack(chunk,srep('>I',16))}\r\n    -- index 1 contains fragment from unpack\r\n    tremove(words,1)\r\n    assert(#words==16)\r\n    for i=17,80 do\r\n      words[i] = bxor(words[i-3],words[i-8],words[i-14],words[i-16])\r\n      words[i] = rol(words[i],1)\r\n    end\r\n    local a = h0\r\n    local b = h1\r\n    local c = h2\r\n    local d = h3\r\n    local e = h4\r\n    \r\n    for i=1,80 do\r\n      local k,f\r\n      if i > 0 and i < 21 then\r\n        f = bor(band(b,c),band(bnot(b),d))\r\n        k = 0x5A827999\r\n      elseif i > 20 and i < 41 then\r\n        f = bxor(b,c,d)\r\n        k = 0x6ED9EBA1\r\n      elseif i > 40 and i < 61 then\r\n        f = bor(band(b,c),band(b,d),band(c,d))\r\n        k = 0x8F1BBCDC\r\n      elseif i > 60 and i < 81 then\r\n        f = bxor(b,c,d)\r\n        k = 0xCA62C1D6\r\n      end\r\n      \r\n      local temp = rol(a,5) + f + e + k + words[i]\r\n      e = d\r\n      d = c\r\n      c = rol(b,30)\r\n      b = a\r\n      a = temp\r\n    end\r\n    \r\n    h0 = h0 + a\r\n    h1 = h1 + b\r\n    h2 = h2 + c\r\n    h3 = h3 + d\r\n    h4 = h4 + e\r\n    \r\n  end\r\n  \r\n  -- necessary on sizeof(int) == 32 machines\r\n  h0 = band(h0,0xffffffff)\r\n  h1 = band(h1,0xffffffff)\r\n  h2 = band(h2,0xffffffff)\r\n  h3 = band(h3,0xffffffff)\r\n  h4 = band(h4,0xffffffff)\r\n  \r\n  return spack('>I>I>I>I>I',h0,h1,h2,h3,h4)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local h0 = 0x67452301",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local h1 = 0xEFCDAB89",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local h2 = 0x98BADCFE",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local h3 = 0x10325476",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local h4 = 0xC3D2E1F0",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local bits = #msg * 8",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "msg = msg..schar(0x80)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local bytes = #msg + 8",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local fill_bytes = 64 - (bytes % 64)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if fill_bytes ~= 64 then\r\n    msg = msg..srep(schar(0),fill_bytes)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "msg = msg..srep(schar(0),fill_bytes)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local high = math.floor(bits/2^32)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local low = bits - high*2^32",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "msg = msg..spack('>I>I',high,low)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "assert(#msg % 64 == 0,#msg % 64)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "for j=1,#msg,64 do\r\n    local chunk = msg:sub(j,j+63)\r\n    assert(#chunk==64,#chunk)\r\n    local words = {sunpack(chunk,srep('>I',16))}\r\n    -- index 1 contains fragment from unpack\r\n    tremove(words,1)\r\n    assert(#words==16)\r\n    for i=17,80 do\r\n      words[i] = bxor(words[i-3],words[i-8],words[i-14],words[i-16])\r\n      words[i] = rol(words[i],1)\r\n    end\r\n    local a = h0\r\n    local b = h1\r\n    local c = h2\r\n    local d = h3\r\n    local e = h4\r\n    \r\n    for i=1,80 do\r\n      local k,f\r\n      if i > 0 and i < 21 then\r\n        f = bor(band(b,c),band(bnot(b),d))\r\n        k = 0x5A827999\r\n      elseif i > 20 and i < 41 then\r\n        f = bxor(b,c,d)\r\n        k = 0x6ED9EBA1\r\n      elseif i > 40 and i < 61 then\r\n        f = bor(band(b,c),band(b,d),band(c,d))\r\n        k = 0x8F1BBCDC\r\n      elseif i > 60 and i < 81 then\r\n        f = bxor(b,c,d)\r\n        k = 0xCA62C1D6\r\n      end\r\n      \r\n      local temp = rol(a,5) + f + e + k + words[i]\r\n      e = d\r\n      d = c\r\n      c = rol(b,30)\r\n      b = a\r\n      a = temp\r\n    end\r\n    \r\n    h0 = h0 + a\r\n    h1 = h1 + b\r\n    h2 = h2 + c\r\n    h3 = h3 + d\r\n    h4 = h4 + e\r\n    \r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 23,
    "text": "local chunk = msg:sub(j,j+63)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "assert(#chunk==64,#chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local words = {sunpack(chunk,srep('>I',16))}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "tremove(words,1)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert(#words==16)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "for i=17,80 do\r\n      words[i] = bxor(words[i-3],words[i-8],words[i-14],words[i-16])\r\n      words[i] = rol(words[i],1)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 29,
    "text": "words[i] = bxor(words[i-3],words[i-8],words[i-14],words[i-16])",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "words[i] = rol(words[i],1)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local a = h0",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local b = h1",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local c = h2",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local d = h3",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local e = h4",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "for i=1,80 do\r\n      local k,f\r\n      if i > 0 and i < 21 then\r\n        f = bor(band(b,c),band(bnot(b),d))\r\n        k = 0x5A827999\r\n      elseif i > 20 and i < 41 then\r\n        f = bxor(b,c,d)\r\n        k = 0x6ED9EBA1\r\n      elseif i > 40 and i < 61 then\r\n        f = bor(band(b,c),band(b,d),band(c,d))\r\n        k = 0x8F1BBCDC\r\n      elseif i > 60 and i < 81 then\r\n        f = bxor(b,c,d)\r\n        k = 0xCA62C1D6\r\n      end\r\n      \r\n      local temp = rol(a,5) + f + e + k + words[i]\r\n      e = d\r\n      d = c\r\n      c = rol(b,30)\r\n      b = a\r\n      a = temp\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 37,
    "text": "local k,f",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if i > 0 and i < 21 then\r\n        f = bor(band(b,c),band(bnot(b),d))\r\n        k = 0x5A827999\r\n      elseif i > 20 and i < 41 then\r\n        f = bxor(b,c,d)\r\n        k = 0x6ED9EBA1\r\n      elseif i > 40 and i < 61 then\r\n        f = bor(band(b,c),band(b,d),band(c,d))\r\n        k = 0x8F1BBCDC\r\n      elseif i > 60 and i < 81 then\r\n        f = bxor(b,c,d)\r\n        k = 0xCA62C1D6\r\n      end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "f = bor(band(b,c),band(bnot(b),d))",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "k = 0x5A827999",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "f = bxor(b,c,d)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "k = 0x6ED9EBA1",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "f = bor(band(b,c),band(b,d),band(c,d))",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "k = 0x8F1BBCDC",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "k = 0xCA62C1D6",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "local temp = rol(a,5) + f + e + k + words[i]",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "e = d",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "d = c",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "c = rol(b,30)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "b = a",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "a = temp",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "h0 = h0 + a",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "h1 = h1 + b",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "h2 = h2 + c",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "h3 = h3 + d",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "h4 = h4 + e",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "h0 = band(h0,0xffffffff)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "h1 = band(h1,0xffffffff)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "h2 = band(h2,0xffffffff)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "h3 = band(h3,0xffffffff)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "h4 = band(h4,0xffffffff)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function(data)\r\n  local result = ''\r\n  local padding = ''\r\n  local count = #data % 3\r\n  \r\n  if count > 0 then\r\n    for i=count,2 do\r\n      padding = padding..'='\r\n      data = data..'\\0'\r\n    end\r\n  end\r\n  assert(#data % 3 == 0,#data % 3)\r\n  local bytes = 0\r\n  for i=1,#data,3 do\r\n    local chars = {data:sub(i,i+2):byte(1,3)}\r\n    assert(#chars==3,#chars)\r\n    local n = lshift(chars[1],16) + lshift(chars[2],8) + chars[3]\r\n    local narr = {}\r\n    narr[1] = band(rshift(n,18),63)+1\r\n    narr[2] = band(rshift(n,12),63)+1\r\n    narr[3] = band(rshift(n,6),63)+1\r\n    narr[4] = band(n,63)+1\r\n    result = result..base64chars:sub(narr[1],narr[1])\r\n    result = result..base64chars:sub(narr[2],narr[2])\r\n    result = result..base64chars:sub(narr[3],narr[3])\r\n    result = result..base64chars:sub(narr[4],narr[4])\r\n  end\r\n  return result:sub(1,#result-#padding)..padding\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local result = ''",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local padding = ''",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local count = #data % 3",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if count > 0 then\r\n    for i=count,2 do\r\n      padding = padding..'='\r\n      data = data..'\\0'\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "for i=count,2 do\r\n      padding = padding..'='\r\n      data = data..'\\0'\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 70,
    "text": "padding = padding..'='",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "data = data..'\\0'",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "assert(#data % 3 == 0,#data % 3)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "local bytes = 0",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "for i=1,#data,3 do\r\n    local chars = {data:sub(i,i+2):byte(1,3)}\r\n    assert(#chars==3,#chars)\r\n    local n = lshift(chars[1],16) + lshift(chars[2],8) + chars[3]\r\n    local narr = {}\r\n    narr[1] = band(rshift(n,18),63)+1\r\n    narr[2] = band(rshift(n,12),63)+1\r\n    narr[3] = band(rshift(n,6),63)+1\r\n    narr[4] = band(n,63)+1\r\n    result = result..base64chars:sub(narr[1],narr[1])\r\n    result = result..base64chars:sub(narr[2],narr[2])\r\n    result = result..base64chars:sub(narr[3],narr[3])\r\n    result = result..base64chars:sub(narr[4],narr[4])\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 75,
    "text": "local chars = {data:sub(i,i+2):byte(1,3)}",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "assert(#chars==3,#chars)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "local n = lshift(chars[1],16) + lshift(chars[2],8) + chars[3]",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local narr = {}",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "narr[1] = band(rshift(n,18),63)+1",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "narr[2] = band(rshift(n,12),63)+1",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "narr[3] = band(rshift(n,6),63)+1",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "narr[4] = band(n,63)+1",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "result = result..base64chars:sub(narr[1],narr[1])",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "result = result..base64chars:sub(narr[2],narr[2])",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "result = result..base64chars:sub(narr[3],narr[3])",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "result = result..base64chars:sub(narr[4],narr[4])",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(url)\r\n  local protocol,host = url:match('^(%w+)://([^:/]+)')\r\n  local port,uri = url:match('.+//[^:/]+:?(%d*)(.*)')\r\n  if port and port ~= '' then\r\n    port = tonumber(port)\r\n  elseif protocol == 'ws' then\r\n    port = 80\r\n  end\r\n  if not uri or uri == '' then\r\n    uri = '/'\r\n  end\r\n  if not protocol or not host or not port or not uri then\r\n    error('Invalid URL:'..url)\r\n  end\r\n  return protocol,host,port,uri\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "local protocol,host = url:match('^(%w+)://([^:/]+)')",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local port,uri = url:match('.+//[^:/]+:?(%d*)(.*)')",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if port and port ~= '' then\r\n    port = tonumber(port)\r\n  elseif protocol == 'ws' then\r\n    port = 80\r\n  end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "port = tonumber(port)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "port = 80",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "if not uri or uri == '' then\r\n    uri = '/'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "uri = '/'",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if not protocol or not host or not port or not uri then\r\n    error('Invalid URL:'..url)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "error('Invalid URL:'..url)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function()\r\n  local r1 = mrandom(0,0xfffffff)\r\n  local r2 = mrandom(0,0xfffffff)\r\n  local r3 = mrandom(0,0xfffffff)\r\n  local r4 = mrandom(0,0xfffffff)\r\n  local key = spack('IIII',r1,r2,r3,r4)\r\n  assert(#key==16,#key)\r\n  return base64_encode(key)\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local r1 = mrandom(0,0xfffffff)",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local r2 = mrandom(0,0xfffffff)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local r3 = mrandom(0,0xfffffff)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local r4 = mrandom(0,0xfffffff)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local key = spack('IIII',r1,r2,r3,r4)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "assert(#key==16,#key)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "",
    "type": "function container"
  }, {
    "id": 108,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 109,
    "text": "rol",
    "type": "global function"
  }, {
    "id": 110,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 111,
    "text": "schar",
    "type": "global function"
  }, {
    "id": 112,
    "text": "lshift",
    "type": "global function"
  }, {
    "id": 113,
    "text": "spack",
    "type": "global function"
  }, {
    "id": 114,
    "text": "srep",
    "type": "global function"
  }, {
    "id": 115,
    "text": "band",
    "type": "global function"
  }, {
    "id": 116,
    "text": "bnot",
    "type": "global function"
  }, {
    "id": 117,
    "text": "mrandom",
    "type": "global function"
  }, {
    "id": 118,
    "text": "rshift",
    "type": "global function"
  }, {
    "id": 119,
    "text": "time",
    "type": "global function"
  }, {
    "id": 120,
    "text": "tremove",
    "type": "global function"
  }, {
    "id": 121,
    "text": "require",
    "type": "global function"
  }, {
    "id": 122,
    "text": "error",
    "type": "global function"
  }, {
    "id": 123,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 124,
    "text": "randomseed",
    "type": "global function"
  }, {
    "id": 125,
    "text": "bor",
    "type": "global function"
  }, {
    "id": 126,
    "text": "bxor",
    "type": "global function"
  }, {
    "id": 127,
    "text": "sunpack",
    "type": "global function"
  }, {
    "id": 128,
    "text": "",
    "type": "global variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "variable container"
  }, {
    "id": 139,
    "text": "",
    "type": "require container"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "n/a"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "n/a"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "n/a"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "n/a"
  }, {
    "id": 154,
    "text": "",
    "type": "local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "n/a"
  }, {
    "id": 160,
    "text": "",
    "type": "local variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "n/a"
  }, {
    "id": 164,
    "text": "",
    "type": "local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "n/a"
  }, {
    "id": 166,
    "text": "",
    "type": "local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "n/a"
  }, {
    "id": 168,
    "text": "",
    "type": "local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "n/a"
  }, {
    "id": 170,
    "text": "",
    "type": "local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "n/a"
  }, {
    "id": 172,
    "text": "",
    "type": "local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "string"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "n/a"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  }, {
    "id": 180,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "interface container"
  }, {
    "id": 182,
    "text": "",
    "type": "interface"
  }, {
    "id": 183,
    "text": "",
    "type": "interface"
  }, {
    "id": 184,
    "text": "",
    "type": "interface"
  }, {
    "id": 185,
    "text": "",
    "type": "interface"
  } ]
}