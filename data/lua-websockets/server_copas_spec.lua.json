{
  "_filename": "server_copas_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua-websockets/spec/server_copas_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 18
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 25
  }, {
    "from": 28,
    "label": "has",
    "to": 18
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 31
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 36,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 37
  }, {
    "from": 51,
    "label": "has",
    "to": 38
  }, {
    "from": 51,
    "label": "has",
    "to": 39
  }, {
    "from": 51,
    "label": "has",
    "to": 40
  }, {
    "from": 51,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 42
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 45
  }, {
    "from": 52,
    "label": "has",
    "to": 46
  }, {
    "from": 52,
    "label": "has",
    "to": 47
  }, {
    "from": 52,
    "label": "has",
    "to": 48
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 41
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 45
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 58,
    "label": "has",
    "to": 42
  }, {
    "from": 58,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 45
  }, {
    "from": 69,
    "label": "has",
    "to": 59
  }, {
    "from": 69,
    "label": "has",
    "to": 60
  }, {
    "from": 69,
    "label": "has",
    "to": 61
  }, {
    "from": 69,
    "label": "has",
    "to": 62
  }, {
    "from": 69,
    "label": "has",
    "to": 63
  }, {
    "from": 69,
    "label": "has",
    "to": 64
  }, {
    "from": 69,
    "label": "has",
    "to": 65
  }, {
    "from": 69,
    "label": "has",
    "to": 42
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 55
  }, {
    "from": 71,
    "label": "has",
    "to": 56
  }, {
    "from": 71,
    "label": "has",
    "to": 41
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 45
  }, {
    "from": 73,
    "label": "has",
    "to": 60
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 65
  }, {
    "from": 73,
    "label": "has",
    "to": 42
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 45
  }, {
    "from": 80,
    "label": "has",
    "to": 60
  }, {
    "from": 80,
    "label": "has",
    "to": 74
  }, {
    "from": 80,
    "label": "has",
    "to": 75
  }, {
    "from": 80,
    "label": "has",
    "to": 76
  }, {
    "from": 80,
    "label": "has",
    "to": 77
  }, {
    "from": 80,
    "label": "has",
    "to": 65
  }, {
    "from": 80,
    "label": "has",
    "to": 42
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 55
  }, {
    "from": 82,
    "label": "has",
    "to": 56
  }, {
    "from": 82,
    "label": "has",
    "to": 41
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 45
  }, {
    "from": 84,
    "label": "has",
    "to": 60
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 75
  }, {
    "from": 84,
    "label": "has",
    "to": 76
  }, {
    "from": 84,
    "label": "has",
    "to": 77
  }, {
    "from": 84,
    "label": "has",
    "to": 65
  }, {
    "from": 84,
    "label": "has",
    "to": 42
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 45
  }, {
    "from": 88,
    "label": "has",
    "to": 60
  }, {
    "from": 88,
    "label": "has",
    "to": 85
  }, {
    "from": 88,
    "label": "has",
    "to": 75
  }, {
    "from": 88,
    "label": "has",
    "to": 76
  }, {
    "from": 88,
    "label": "has",
    "to": 77
  }, {
    "from": 88,
    "label": "has",
    "to": 65
  }, {
    "from": 88,
    "label": "has",
    "to": 42
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 55
  }, {
    "from": 90,
    "label": "has",
    "to": 56
  }, {
    "from": 90,
    "label": "has",
    "to": 41
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 45
  }, {
    "from": 92,
    "label": "has",
    "to": 60
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 75
  }, {
    "from": 92,
    "label": "has",
    "to": 76
  }, {
    "from": 92,
    "label": "has",
    "to": 77
  }, {
    "from": 92,
    "label": "has",
    "to": 65
  }, {
    "from": 92,
    "label": "has",
    "to": 42
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 45
  }, {
    "from": 96,
    "label": "has",
    "to": 60
  }, {
    "from": 96,
    "label": "has",
    "to": 93
  }, {
    "from": 96,
    "label": "has",
    "to": 75
  }, {
    "from": 96,
    "label": "has",
    "to": 76
  }, {
    "from": 96,
    "label": "has",
    "to": 77
  }, {
    "from": 96,
    "label": "has",
    "to": 65
  }, {
    "from": 96,
    "label": "has",
    "to": 42
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 18
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 31
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 37
  }, {
    "from": 51,
    "label": "has",
    "to": 38
  }, {
    "from": 51,
    "label": "has",
    "to": 39
  }, {
    "from": 51,
    "label": "has",
    "to": 40
  }, {
    "from": 51,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 42
  }, {
    "from": 104,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 45
  }, {
    "from": 52,
    "label": "has",
    "to": 46
  }, {
    "from": 52,
    "label": "has",
    "to": 47
  }, {
    "from": 52,
    "label": "has",
    "to": 48
  }, {
    "from": 100,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 105,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 45
  }, {
    "from": 69,
    "label": "has",
    "to": 59
  }, {
    "from": 69,
    "label": "has",
    "to": 60
  }, {
    "from": 69,
    "label": "has",
    "to": 61
  }, {
    "from": 69,
    "label": "has",
    "to": 62
  }, {
    "from": 69,
    "label": "has",
    "to": 63
  }, {
    "from": 69,
    "label": "has",
    "to": 64
  }, {
    "from": 69,
    "label": "has",
    "to": 65
  }, {
    "from": 69,
    "label": "has",
    "to": 42
  }, {
    "from": 100,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 5
  }, {
    "from": 106,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 106,
    "label": "has",
    "to": 8
  }, {
    "from": 100,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 107,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 45
  }, {
    "from": 80,
    "label": "has",
    "to": 60
  }, {
    "from": 80,
    "label": "has",
    "to": 74
  }, {
    "from": 80,
    "label": "has",
    "to": 75
  }, {
    "from": 80,
    "label": "has",
    "to": 76
  }, {
    "from": 80,
    "label": "has",
    "to": 77
  }, {
    "from": 80,
    "label": "has",
    "to": 65
  }, {
    "from": 80,
    "label": "has",
    "to": 42
  }, {
    "from": 100,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 108,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 45
  }, {
    "from": 88,
    "label": "has",
    "to": 60
  }, {
    "from": 88,
    "label": "has",
    "to": 85
  }, {
    "from": 88,
    "label": "has",
    "to": 75
  }, {
    "from": 88,
    "label": "has",
    "to": 76
  }, {
    "from": 88,
    "label": "has",
    "to": 77
  }, {
    "from": 88,
    "label": "has",
    "to": 65
  }, {
    "from": 88,
    "label": "has",
    "to": 42
  }, {
    "from": 100,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 109,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 45
  }, {
    "from": 96,
    "label": "has",
    "to": 60
  }, {
    "from": 96,
    "label": "has",
    "to": 93
  }, {
    "from": 96,
    "label": "has",
    "to": 75
  }, {
    "from": 96,
    "label": "has",
    "to": 76
  }, {
    "from": 96,
    "label": "has",
    "to": 77
  }, {
    "from": 96,
    "label": "has",
    "to": 65
  }, {
    "from": 96,
    "label": "has",
    "to": 42
  }, {
    "from": 100,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 18
  }, {
    "from": 100,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 101
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 11
  }, {
    "from": 113,
    "label": "has",
    "to": 12
  }, {
    "from": 113,
    "label": "has",
    "to": 13
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 17
  }, {
    "from": 114,
    "label": "has",
    "to": 18
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 22
  }, {
    "from": 115,
    "label": "has",
    "to": 18
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 25
  }, {
    "from": 28,
    "label": "has",
    "to": 18
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 101
  }, {
    "from": 117,
    "label": "has",
    "to": 102
  }, {
    "from": 117,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 31
  }, {
    "from": 117,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 37
  }, {
    "from": 51,
    "label": "has",
    "to": 38
  }, {
    "from": 51,
    "label": "has",
    "to": 39
  }, {
    "from": 51,
    "label": "has",
    "to": 40
  }, {
    "from": 51,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 42
  }, {
    "from": 104,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 45
  }, {
    "from": 52,
    "label": "has",
    "to": 46
  }, {
    "from": 52,
    "label": "has",
    "to": 47
  }, {
    "from": 52,
    "label": "has",
    "to": 48
  }, {
    "from": 117,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 105,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 45
  }, {
    "from": 69,
    "label": "has",
    "to": 59
  }, {
    "from": 69,
    "label": "has",
    "to": 60
  }, {
    "from": 69,
    "label": "has",
    "to": 61
  }, {
    "from": 69,
    "label": "has",
    "to": 62
  }, {
    "from": 69,
    "label": "has",
    "to": 63
  }, {
    "from": 69,
    "label": "has",
    "to": 64
  }, {
    "from": 69,
    "label": "has",
    "to": 65
  }, {
    "from": 69,
    "label": "has",
    "to": 42
  }, {
    "from": 117,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 5
  }, {
    "from": 106,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 106,
    "label": "has",
    "to": 8
  }, {
    "from": 117,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 107,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 45
  }, {
    "from": 80,
    "label": "has",
    "to": 60
  }, {
    "from": 80,
    "label": "has",
    "to": 74
  }, {
    "from": 80,
    "label": "has",
    "to": 75
  }, {
    "from": 80,
    "label": "has",
    "to": 76
  }, {
    "from": 80,
    "label": "has",
    "to": 77
  }, {
    "from": 80,
    "label": "has",
    "to": 65
  }, {
    "from": 80,
    "label": "has",
    "to": 42
  }, {
    "from": 117,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 108,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 45
  }, {
    "from": 88,
    "label": "has",
    "to": 60
  }, {
    "from": 88,
    "label": "has",
    "to": 85
  }, {
    "from": 88,
    "label": "has",
    "to": 75
  }, {
    "from": 88,
    "label": "has",
    "to": 76
  }, {
    "from": 88,
    "label": "has",
    "to": 77
  }, {
    "from": 88,
    "label": "has",
    "to": 65
  }, {
    "from": 88,
    "label": "has",
    "to": 42
  }, {
    "from": 117,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 56
  }, {
    "from": 68,
    "label": "has",
    "to": 41
  }, {
    "from": 109,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 45
  }, {
    "from": 96,
    "label": "has",
    "to": 60
  }, {
    "from": 96,
    "label": "has",
    "to": 93
  }, {
    "from": 96,
    "label": "has",
    "to": 75
  }, {
    "from": 96,
    "label": "has",
    "to": 76
  }, {
    "from": 96,
    "label": "has",
    "to": 77
  }, {
    "from": 96,
    "label": "has",
    "to": 65
  }, {
    "from": 96,
    "label": "has",
    "to": 42
  }, {
    "from": 117,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 18
  }, {
    "from": 112,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "calls",
    "to": 131
  }, {
    "from": 119,
    "label": "calls",
    "to": 121
  }, {
    "from": 119,
    "label": "calls",
    "to": 121
  }, {
    "from": 119,
    "label": "calls",
    "to": 121
  }, {
    "from": 119,
    "label": "calls",
    "to": 121
  }, {
    "from": 119,
    "label": "calls",
    "to": 129
  }, {
    "from": 119,
    "label": "calls",
    "to": 132
  }, {
    "from": 119,
    "label": "calls",
    "to": 132
  }, {
    "from": 119,
    "label": "calls",
    "to": 132
  }, {
    "from": 119,
    "label": "calls",
    "to": 132
  }, {
    "from": 119,
    "label": "calls",
    "to": 4
  }, {
    "from": 119,
    "label": "calls",
    "to": 4
  }, {
    "from": 119,
    "label": "calls",
    "to": 4
  }, {
    "from": 119,
    "label": "calls",
    "to": 133
  }, {
    "from": 119,
    "label": "calls",
    "to": 133
  }, {
    "from": 119,
    "label": "calls",
    "to": 133
  }, {
    "from": 119,
    "label": "calls",
    "to": 133
  }, {
    "from": 119,
    "label": "calls",
    "to": 133
  }, {
    "from": 119,
    "label": "calls",
    "to": 123
  }, {
    "from": 119,
    "label": "calls",
    "to": 123
  }, {
    "from": 119,
    "label": "calls",
    "to": 123
  }, {
    "from": 119,
    "label": "calls",
    "to": 123
  }, {
    "from": 119,
    "label": "calls",
    "to": 123
  }, {
    "from": 119,
    "label": "calls",
    "to": 134
  }, {
    "from": 119,
    "label": "calls",
    "to": 122
  }, {
    "from": 119,
    "label": "calls",
    "to": 122
  }, {
    "from": 119,
    "label": "calls",
    "to": 122
  }, {
    "from": 119,
    "label": "calls",
    "to": 122
  }, {
    "from": 119,
    "label": "calls",
    "to": 122
  }, {
    "from": 119,
    "label": "calls",
    "to": 125
  }, {
    "from": 119,
    "label": "calls",
    "to": 126
  }, {
    "from": 119,
    "label": "calls",
    "to": 126
  }, {
    "from": 119,
    "label": "calls",
    "to": 126
  }, {
    "from": 119,
    "label": "calls",
    "to": 126
  }, {
    "from": 119,
    "label": "calls",
    "to": 126
  }, {
    "from": 119,
    "label": "calls",
    "to": 136
  }, {
    "from": 119,
    "label": "calls",
    "to": 127
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 130
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 135
  }, {
    "from": 119,
    "label": "calls",
    "to": 137
  }, {
    "from": 119,
    "label": "calls",
    "to": 141
  }, {
    "from": 119,
    "label": "calls",
    "to": 124
  }, {
    "from": 119,
    "label": "calls",
    "to": 139
  }, {
    "from": 119,
    "label": "calls",
    "to": 139
  }, {
    "from": 119,
    "label": "calls",
    "to": 139
  }, {
    "from": 119,
    "label": "calls",
    "to": 138
  }, {
    "from": 119,
    "label": "calls",
    "to": 138
  }, {
    "from": 119,
    "label": "calls",
    "to": 128
  }, {
    "from": 119,
    "label": "calls",
    "to": 128
  }, {
    "from": 119,
    "label": "calls",
    "to": 128
  }, {
    "from": 1,
    "label": "contains",
    "to": 119
  }, {
    "from": 119,
    "label": "declares",
    "to": 4
  }, {
    "from": 119,
    "label": "declares",
    "to": 10
  }, {
    "from": 119,
    "label": "declares",
    "to": 15
  }, {
    "from": 119,
    "label": "declares",
    "to": 16
  }, {
    "from": 119,
    "label": "declares",
    "to": 20
  }, {
    "from": 119,
    "label": "declares",
    "to": 21
  }, {
    "from": 119,
    "label": "declares",
    "to": 24
  }, {
    "from": 119,
    "label": "declares",
    "to": 27
  }, {
    "from": 119,
    "label": "declares",
    "to": 30
  }, {
    "from": 119,
    "label": "declares",
    "to": 33
  }, {
    "from": 119,
    "label": "declares",
    "to": 36
  }, {
    "from": 119,
    "label": "declares",
    "to": 44
  }, {
    "from": 119,
    "label": "declares",
    "to": 50
  }, {
    "from": 119,
    "label": "declares",
    "to": 54
  }, {
    "from": 119,
    "label": "declares",
    "to": 58
  }, {
    "from": 119,
    "label": "declares",
    "to": 67
  }, {
    "from": 119,
    "label": "declares",
    "to": 71
  }, {
    "from": 119,
    "label": "declares",
    "to": 73
  }, {
    "from": 119,
    "label": "declares",
    "to": 79
  }, {
    "from": 119,
    "label": "declares",
    "to": 82
  }, {
    "from": 119,
    "label": "declares",
    "to": 84
  }, {
    "from": 119,
    "label": "declares",
    "to": 87
  }, {
    "from": 119,
    "label": "declares",
    "to": 90
  }, {
    "from": 119,
    "label": "declares",
    "to": 92
  }, {
    "from": 119,
    "label": "declares",
    "to": 95
  }, {
    "from": 119,
    "label": "declares",
    "to": 98
  }, {
    "from": 119,
    "label": "declares",
    "to": 100
  }, {
    "from": 119,
    "label": "declares",
    "to": 112
  }, {
    "from": 1,
    "label": "contains",
    "to": 142
  }, {
    "from": 1,
    "label": "contains",
    "to": 143
  }, {
    "from": 142,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 142,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 142,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 143,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "requires",
    "to": 3
  }, {
    "from": 143,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "requires",
    "to": 2
  }, {
    "from": 143,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "requires",
    "to": 120
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 80,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 96,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 98
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 98
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 100
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "server_copas_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "client",
    "type": "module"
  }, {
    "id": 3,
    "text": "server",
    "type": "module"
  }, {
    "id": 4,
    "text": "function(len)\r\n          local chars = {}\r\n          for i=1,len do\r\n            chars[i] = string.char(math.random(33,126))\r\n          end\r\n          return table.concat(chars)\r\n        end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local chars = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for i=1,len do\r\n            chars[i] = string.char(math.random(33,126))\r\n          end",
    "type": "statement:numericfor"
  }, {
    "id": 7,
    "text": "chars[i] = string.char(math.random(33,126))",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function()\r\n        assert.is_table(server)\r\n        assert.is_table(server.copas)\r\n        assert.is_function(server.copas.listen)\r\n      end",
    "type": "function"
  }, {
    "id": 11,
    "text": "assert.is_table(server)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert.is_table(server.copas)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert.is_function(server.copas.listen)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 16,
    "text": "function()\r\n        local s = server.copas.listen\r\n        {\r\n          default = function() end,\r\n          port = port\r\n        }\r\n        s:close()\r\n      end",
    "type": "function"
  }, {
    "id": 17,
    "text": "local s = server.copas.listen\r\n        {\r\n          default = function() end,\r\n          port = port\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "s:close()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 21,
    "text": "function()\r\n        local s = server.copas.listen\r\n        {\r\n          port = port,\r\n          protocols = {\r\n            echo = function() end\r\n          }\r\n        }\r\n        s:close()\r\n      end",
    "type": "function"
  }, {
    "id": 22,
    "text": "local s = server.copas.listen\r\n        {\r\n          port = port,\r\n          protocols = {\r\n            echo = function() end\r\n          }\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n            local s = server.copas.listen\r\n            {\r\n              port = port\r\n            }\r\n            s:close()\r\n          end",
    "type": "function"
  }, {
    "id": 25,
    "text": "local s = server.copas.listen\r\n            {\r\n              port = port\r\n            }",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function()\r\n        assert.has_error(\r\n          function()\r\n            local s = server.copas.listen\r\n            {\r\n              port = port\r\n            }\r\n            s:close()\r\n          end)\r\n      end",
    "type": "function"
  }, {
    "id": 28,
    "text": "assert.has_error(\r\n          function()\r\n            local s = server.copas.listen\r\n            {\r\n              port = port\r\n            }\r\n            s:close()\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function(client)\r\n                  on_new_echo_client(client)\r\n                end",
    "type": "function"
  }, {
    "id": 31,
    "text": "on_new_echo_client(client)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n            s = server.copas.listen\r\n            {\r\n              port = port,\r\n              protocols = {\r\n                echo = function(client)\r\n                  on_new_echo_client(client)\r\n                end\r\n              }\r\n            }\r\n          end",
    "type": "function"
  }, {
    "id": 34,
    "text": "s = server.copas.listen\r\n            {\r\n              port = port,\r\n              protocols = {\r\n                echo = function(client)\r\n                  on_new_echo_client(client)\r\n                end\r\n              }\r\n            }",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function(client)\r\n                assert.is_table(client)\r\n                assert.is_function(client.receive)\r\n                assert.is_function(client.close)\r\n                assert.is_function(client.send)\r\n                client:close()\r\n                done()\r\n              end",
    "type": "function"
  }, {
    "id": 37,
    "text": "assert.is_table(client)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert.is_function(client.receive)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert.is_function(client.close)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.is_function(client.send)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "client:close()",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "done()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n                  local wsc = client.copas()\r\n                  local ok,err = wsc:connect('ws://localhost:'..port,'echo')\r\n                  assert.is_true(ok)\r\n                  local was_clean,code,reason = wsc:close()\r\n              end",
    "type": "function"
  }, {
    "id": 45,
    "text": "local wsc = client.copas()",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local ok,err = wsc:connect('ws://localhost:'..port,'echo')",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "assert.is_true(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local was_clean,code,reason = wsc:close()",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                assert.is_table(client)\r\n                assert.is_function(client.receive)\r\n                assert.is_function(client.close)\r\n                assert.is_function(client.send)\r\n                client:close()\r\n                done()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local ok,err = wsc:connect('ws://localhost:'..port,'echo')\r\n                  assert.is_true(ok)\r\n                  local was_clean,code,reason = wsc:close()\r\n              end))\r\n          end",
    "type": "function"
  }, {
    "id": 51,
    "text": "on_new_echo_client = guard(\r\n              function(client)\r\n                assert.is_table(client)\r\n                assert.is_function(client.receive)\r\n                assert.is_function(client.close)\r\n                assert.is_function(client.send)\r\n                client:close()\r\n                done()\r\n              end)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local ok,err = wsc:connect('ws://localhost:'..port,'echo')\r\n                  assert.is_true(ok)\r\n                  local was_clean,code,reason = wsc:close()\r\n              end))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end",
    "type": "function"
  }, {
    "id": 55,
    "text": "local message = client:receive()",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "client:send(message)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n                  local wsc = client.copas()\r\n                  local hello = 'Hello'\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  wsc:send(hello)\r\n                  local message,err = wsc:receive()\r\n                  assert.is_same(#message,#hello)\r\n                  assert.is_same(message,hello)\r\n                  wsc:close()\r\n                  done()\r\n              end",
    "type": "function"
  }, {
    "id": 59,
    "text": "local hello = 'Hello'",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "wsc:connect('ws://localhost:'..port,'echo')",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "wsc:send(hello)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "local message,err = wsc:receive()",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "assert.is_same(#message,#hello)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert.is_same(message,hello)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "wsc:close()",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local hello = 'Hello'\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  wsc:send(hello)\r\n                  local message,err = wsc:receive()\r\n                  assert.is_same(#message,#hello)\r\n                  assert.is_same(message,hello)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end",
    "type": "function"
  }, {
    "id": 68,
    "text": "on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local hello = 'Hello'\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  wsc:send(hello)\r\n                  local message,err = wsc:receive()\r\n                  assert.is_same(#message,#hello)\r\n                  assert.is_same(message,hello)\r\n                  wsc:close()\r\n                  done()\r\n              end))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(127)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end",
    "type": "function"
  }, {
    "id": 74,
    "text": "local message = random_text(127)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "wsc:send(message)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local echoed = wsc:receive()",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "assert.is_same(message,echoed)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(127)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end",
    "type": "function"
  }, {
    "id": 80,
    "text": "copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(127)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff-1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end",
    "type": "function"
  }, {
    "id": 85,
    "text": "local message = random_text(0xffff-1)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff-1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end",
    "type": "function"
  }, {
    "id": 88,
    "text": "copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff-1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff+1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end",
    "type": "function"
  }, {
    "id": 93,
    "text": "local message = random_text(0xffff+1)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff+1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end",
    "type": "function"
  }, {
    "id": 96,
    "text": "copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff+1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function()\r\n            s:close()\r\n          end",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function()\r\n        local s\r\n        local on_new_echo_client\r\n        before(\r\n          function()\r\n            s = server.copas.listen\r\n            {\r\n              port = port,\r\n              protocols = {\r\n                echo = function(client)\r\n                  on_new_echo_client(client)\r\n                end\r\n              }\r\n            }\r\n          end)\r\n        \r\n        it(\r\n          'handshake works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                assert.is_table(client)\r\n                assert.is_function(client.receive)\r\n                assert.is_function(client.close)\r\n                assert.is_function(client.send)\r\n                client:close()\r\n                done()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local ok,err = wsc:connect('ws://localhost:'..port,'echo')\r\n                  assert.is_true(ok)\r\n                  local was_clean,code,reason = wsc:close()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local hello = 'Hello'\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  wsc:send(hello)\r\n                  local message,err = wsc:receive()\r\n                  assert.is_same(#message,#hello)\r\n                  assert.is_same(message,hello)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        local random_text = function(len)\r\n          local chars = {}\r\n          for i=1,len do\r\n            chars[i] = string.char(math.random(33,126))\r\n          end\r\n          return table.concat(chars)\r\n        end\r\n        \r\n        it(\r\n          'echo 127 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(127)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo 0xffff-1 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff-1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo 0xffff+1 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff+1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        after(\r\n          function()\r\n            s:close()\r\n          end)\r\n      end",
    "type": "function"
  }, {
    "id": 101,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local on_new_echo_client",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "before(\r\n          function()\r\n            s = server.copas.listen\r\n            {\r\n              port = port,\r\n              protocols = {\r\n                echo = function(client)\r\n                  on_new_echo_client(client)\r\n                end\r\n              }\r\n            }\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "it(\r\n          'handshake works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                assert.is_table(client)\r\n                assert.is_function(client.receive)\r\n                assert.is_function(client.close)\r\n                assert.is_function(client.send)\r\n                client:close()\r\n                done()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local ok,err = wsc:connect('ws://localhost:'..port,'echo')\r\n                  assert.is_true(ok)\r\n                  local was_clean,code,reason = wsc:close()\r\n              end))\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "it(\r\n          'echo works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local hello = 'Hello'\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  wsc:send(hello)\r\n                  local message,err = wsc:receive()\r\n                  assert.is_same(#message,#hello)\r\n                  assert.is_same(message,hello)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "local random_text = function(len)\r\n          local chars = {}\r\n          for i=1,len do\r\n            chars[i] = string.char(math.random(33,126))\r\n          end\r\n          return table.concat(chars)\r\n        end",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "it(\r\n          'echo 127 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(127)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "it(\r\n          'echo 0xffff-1 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff-1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "it(\r\n          'echo 0xffff+1 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff+1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "after(\r\n          function()\r\n            s:close()\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function()\r\n    local s\r\n    it(\r\n      'exposes the correct interface',\r\n      function()\r\n        assert.is_table(server)\r\n        assert.is_table(server.copas)\r\n        assert.is_function(server.copas.listen)\r\n      end)\r\n    \r\n    it(\r\n      'call listen with default handler',\r\n      function()\r\n        local s = server.copas.listen\r\n        {\r\n          default = function() end,\r\n          port = port\r\n        }\r\n        s:close()\r\n      end)\r\n    \r\n    it(\r\n      'call listen with protocol handlers',\r\n      function()\r\n        local s = server.copas.listen\r\n        {\r\n          port = port,\r\n          protocols = {\r\n            echo = function() end\r\n          }\r\n        }\r\n        s:close()\r\n      end)\r\n    \r\n    it(\r\n      'call listen without default nor protocol handlers has errors',\r\n      function()\r\n        assert.has_error(\r\n          function()\r\n            local s = server.copas.listen\r\n            {\r\n              port = port\r\n            }\r\n            s:close()\r\n          end)\r\n      end)\r\n    \r\n    describe(\r\n      'communicating with clients',\r\n      function()\r\n        local s\r\n        local on_new_echo_client\r\n        before(\r\n          function()\r\n            s = server.copas.listen\r\n            {\r\n              port = port,\r\n              protocols = {\r\n                echo = function(client)\r\n                  on_new_echo_client(client)\r\n                end\r\n              }\r\n            }\r\n          end)\r\n        \r\n        it(\r\n          'handshake works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                assert.is_table(client)\r\n                assert.is_function(client.receive)\r\n                assert.is_function(client.close)\r\n                assert.is_function(client.send)\r\n                client:close()\r\n                done()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local ok,err = wsc:connect('ws://localhost:'..port,'echo')\r\n                  assert.is_true(ok)\r\n                  local was_clean,code,reason = wsc:close()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local hello = 'Hello'\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  wsc:send(hello)\r\n                  local message,err = wsc:receive()\r\n                  assert.is_same(#message,#hello)\r\n                  assert.is_same(message,hello)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        local random_text = function(len)\r\n          local chars = {}\r\n          for i=1,len do\r\n            chars[i] = string.char(math.random(33,126))\r\n          end\r\n          return table.concat(chars)\r\n        end\r\n        \r\n        it(\r\n          'echo 127 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(127)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo 0xffff-1 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff-1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo 0xffff+1 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff+1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        after(\r\n          function()\r\n            s:close()\r\n          end)\r\n      end)\r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 113,
    "text": "it(\r\n      'exposes the correct interface',\r\n      function()\r\n        assert.is_table(server)\r\n        assert.is_table(server.copas)\r\n        assert.is_function(server.copas.listen)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "it(\r\n      'call listen with default handler',\r\n      function()\r\n        local s = server.copas.listen\r\n        {\r\n          default = function() end,\r\n          port = port\r\n        }\r\n        s:close()\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "it(\r\n      'call listen with protocol handlers',\r\n      function()\r\n        local s = server.copas.listen\r\n        {\r\n          port = port,\r\n          protocols = {\r\n            echo = function() end\r\n          }\r\n        }\r\n        s:close()\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "it(\r\n      'call listen without default nor protocol handlers has errors',\r\n      function()\r\n        assert.has_error(\r\n          function()\r\n            local s = server.copas.listen\r\n            {\r\n              port = port\r\n            }\r\n            s:close()\r\n          end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "describe(\r\n      'communicating with clients',\r\n      function()\r\n        local s\r\n        local on_new_echo_client\r\n        before(\r\n          function()\r\n            s = server.copas.listen\r\n            {\r\n              port = port,\r\n              protocols = {\r\n                echo = function(client)\r\n                  on_new_echo_client(client)\r\n                end\r\n              }\r\n            }\r\n          end)\r\n        \r\n        it(\r\n          'handshake works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                assert.is_table(client)\r\n                assert.is_function(client.receive)\r\n                assert.is_function(client.close)\r\n                assert.is_function(client.send)\r\n                client:close()\r\n                done()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local ok,err = wsc:connect('ws://localhost:'..port,'echo')\r\n                  assert.is_true(ok)\r\n                  local was_clean,code,reason = wsc:close()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  local hello = 'Hello'\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  wsc:send(hello)\r\n                  local message,err = wsc:receive()\r\n                  assert.is_same(#message,#hello)\r\n                  assert.is_same(message,hello)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        local random_text = function(len)\r\n          local chars = {}\r\n          for i=1,len do\r\n            chars[i] = string.char(math.random(33,126))\r\n          end\r\n          return table.concat(chars)\r\n        end\r\n        \r\n        it(\r\n          'echo 127 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(127)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo 0xffff-1 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff-1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        it(\r\n          'echo 0xffff+1 bytes works',\r\n          async,\r\n          function(done)\r\n            on_new_echo_client = guard(\r\n              function(client)\r\n                local message = client:receive()\r\n                client:send(message)\r\n                client:close()\r\n              end)\r\n            \r\n            copas.addthread(\r\n              guard(\r\n                function()\r\n                  local wsc = client.copas()\r\n                  wsc:connect('ws://localhost:'..port,'echo')\r\n                  local message = random_text(0xffff+1)\r\n                  wsc:send(message)\r\n                  local echoed = wsc:receive()\r\n                  assert.is_same(message,echoed)\r\n                  wsc:close()\r\n                  done()\r\n              end))\r\n          end)\r\n        \r\n        after(\r\n          function()\r\n            s:close()\r\n          end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "",
    "type": "function container"
  }, {
    "id": 120,
    "text": "copas",
    "type": "module"
  }, {
    "id": 121,
    "text": "copas.listen",
    "type": "global function"
  }, {
    "id": 122,
    "text": "addthread",
    "type": "global function"
  }, {
    "id": 123,
    "text": "copas",
    "type": "global function"
  }, {
    "id": 124,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 125,
    "text": "after",
    "type": "global function"
  }, {
    "id": 126,
    "text": "done",
    "type": "global function"
  }, {
    "id": 127,
    "text": "has_error",
    "type": "global function"
  }, {
    "id": 128,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 129,
    "text": "random",
    "type": "global function"
  }, {
    "id": 130,
    "text": "it",
    "type": "global function"
  }, {
    "id": 131,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 132,
    "text": "is_function",
    "type": "global function"
  }, {
    "id": 133,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 134,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 135,
    "text": "setloop",
    "type": "global function"
  }, {
    "id": 136,
    "text": "on_new_echo_client",
    "type": "global function"
  }, {
    "id": 137,
    "text": "char",
    "type": "global function"
  }, {
    "id": 138,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 139,
    "text": "require",
    "type": "global function"
  }, {
    "id": 140,
    "text": "guard",
    "type": "global function"
  }, {
    "id": 141,
    "text": "before",
    "type": "global function"
  }, {
    "id": 142,
    "text": "",
    "type": "variable container"
  }, {
    "id": 143,
    "text": "",
    "type": "require container"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "global variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "require local variable"
  } ]
}