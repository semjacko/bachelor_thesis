{
  "_filename": "client_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua-websockets/spec/client_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 22
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 24
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 24
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 22
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 24
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 24
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 22
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 24
  }, {
    "from": 39,
    "label": "has",
    "to": 35
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 50
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 55
  }, {
    "from": 58,
    "label": "has",
    "to": 50
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 56
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 55
  }, {
    "from": 63,
    "label": "has",
    "to": 50
  }, {
    "from": 63,
    "label": "has",
    "to": 61
  }, {
    "from": 63,
    "label": "has",
    "to": 56
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 10
  }, {
    "from": 75,
    "label": "has",
    "to": 11
  }, {
    "from": 75,
    "label": "has",
    "to": 12
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 15
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 18
  }, {
    "from": 77,
    "label": "has",
    "to": 19
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 22
  }, {
    "from": 78,
    "label": "has",
    "to": 23
  }, {
    "from": 78,
    "label": "has",
    "to": 24
  }, {
    "from": 78,
    "label": "has",
    "to": 25
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 22
  }, {
    "from": 79,
    "label": "has",
    "to": 28
  }, {
    "from": 79,
    "label": "has",
    "to": 24
  }, {
    "from": 79,
    "label": "has",
    "to": 29
  }, {
    "from": 79,
    "label": "has",
    "to": 30
  }, {
    "from": 79,
    "label": "has",
    "to": 24
  }, {
    "from": 79,
    "label": "has",
    "to": 31
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 22
  }, {
    "from": 80,
    "label": "has",
    "to": 34
  }, {
    "from": 80,
    "label": "has",
    "to": 24
  }, {
    "from": 80,
    "label": "has",
    "to": 35
  }, {
    "from": 80,
    "label": "has",
    "to": 36
  }, {
    "from": 80,
    "label": "has",
    "to": 37
  }, {
    "from": 80,
    "label": "has",
    "to": 34
  }, {
    "from": 80,
    "label": "has",
    "to": 24
  }, {
    "from": 80,
    "label": "has",
    "to": 35
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 22
  }, {
    "from": 81,
    "label": "has",
    "to": 40
  }, {
    "from": 81,
    "label": "has",
    "to": 41
  }, {
    "from": 81,
    "label": "has",
    "to": 42
  }, {
    "from": 81,
    "label": "has",
    "to": 40
  }, {
    "from": 81,
    "label": "has",
    "to": 24
  }, {
    "from": 81,
    "label": "has",
    "to": 35
  }, {
    "from": 73,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 45
  }, {
    "from": 82,
    "label": "has",
    "to": 46
  }, {
    "from": 73,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 49
  }, {
    "from": 83,
    "label": "has",
    "to": 50
  }, {
    "from": 83,
    "label": "has",
    "to": 51
  }, {
    "from": 73,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 84,
    "label": "has",
    "to": 7
  }, {
    "from": 73,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 54
  }, {
    "from": 85,
    "label": "has",
    "to": 55
  }, {
    "from": 85,
    "label": "has",
    "to": 50
  }, {
    "from": 85,
    "label": "has",
    "to": 56
  }, {
    "from": 73,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 59
  }, {
    "from": 86,
    "label": "has",
    "to": 60
  }, {
    "from": 86,
    "label": "has",
    "to": 55
  }, {
    "from": 86,
    "label": "has",
    "to": 50
  }, {
    "from": 86,
    "label": "has",
    "to": 61
  }, {
    "from": 86,
    "label": "has",
    "to": 56
  }, {
    "from": 73,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 64
  }, {
    "from": 87,
    "label": "has",
    "to": 65
  }, {
    "from": 87,
    "label": "has",
    "to": 55
  }, {
    "from": 87,
    "label": "has",
    "to": 50
  }, {
    "from": 87,
    "label": "has",
    "to": 61
  }, {
    "from": 87,
    "label": "has",
    "to": 56
  }, {
    "from": 73,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 68
  }, {
    "from": 88,
    "label": "has",
    "to": 69
  }, {
    "from": 88,
    "label": "has",
    "to": 70
  }, {
    "from": 88,
    "label": "has",
    "to": 71
  }, {
    "from": 73,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "calls",
    "to": 99
  }, {
    "from": 90,
    "label": "calls",
    "to": 92
  }, {
    "from": 90,
    "label": "calls",
    "to": 3
  }, {
    "from": 90,
    "label": "calls",
    "to": 3
  }, {
    "from": 90,
    "label": "calls",
    "to": 3
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 100
  }, {
    "from": 90,
    "label": "calls",
    "to": 93
  }, {
    "from": 90,
    "label": "calls",
    "to": 93
  }, {
    "from": 90,
    "label": "calls",
    "to": 93
  }, {
    "from": 90,
    "label": "calls",
    "to": 93
  }, {
    "from": 90,
    "label": "calls",
    "to": 93
  }, {
    "from": 90,
    "label": "calls",
    "to": 93
  }, {
    "from": 90,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 96
  }, {
    "from": 90,
    "label": "calls",
    "to": 105
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 97
  }, {
    "from": 90,
    "label": "calls",
    "to": 101
  }, {
    "from": 90,
    "label": "calls",
    "to": 101
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 102
  }, {
    "from": 90,
    "label": "calls",
    "to": 106
  }, {
    "from": 90,
    "label": "calls",
    "to": 98
  }, {
    "from": 90,
    "label": "calls",
    "to": 98
  }, {
    "from": 90,
    "label": "calls",
    "to": 98
  }, {
    "from": 90,
    "label": "calls",
    "to": 98
  }, {
    "from": 90,
    "label": "calls",
    "to": 98
  }, {
    "from": 90,
    "label": "calls",
    "to": 104
  }, {
    "from": 90,
    "label": "calls",
    "to": 103
  }, {
    "from": 90,
    "label": "calls",
    "to": 94
  }, {
    "from": 1,
    "label": "contains",
    "to": 90
  }, {
    "from": 90,
    "label": "declares",
    "to": 3
  }, {
    "from": 90,
    "label": "declares",
    "to": 9
  }, {
    "from": 90,
    "label": "declares",
    "to": 14
  }, {
    "from": 90,
    "label": "declares",
    "to": 17
  }, {
    "from": 90,
    "label": "declares",
    "to": 21
  }, {
    "from": 90,
    "label": "declares",
    "to": 27
  }, {
    "from": 90,
    "label": "declares",
    "to": 33
  }, {
    "from": 90,
    "label": "declares",
    "to": 39
  }, {
    "from": 90,
    "label": "declares",
    "to": 44
  }, {
    "from": 90,
    "label": "declares",
    "to": 48
  }, {
    "from": 90,
    "label": "declares",
    "to": 53
  }, {
    "from": 90,
    "label": "declares",
    "to": 58
  }, {
    "from": 90,
    "label": "declares",
    "to": 63
  }, {
    "from": 90,
    "label": "declares",
    "to": 67
  }, {
    "from": 90,
    "label": "declares",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 107,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 107,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 107,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 108,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "requires",
    "to": 2
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 80,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 86,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 88,
    "label": "hasArgument",
    "to": 67
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "client_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "client",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(len)\r\n      local chars = {}\r\n      for i=1,len do\r\n        chars[i] = string.char(math.random(33,126))\r\n      end\r\n      return table.concat(chars)\r\n    end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local chars = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for i=1,len do\r\n        chars[i] = string.char(math.random(33,126))\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 6,
    "text": "chars[i] = string.char(math.random(33,126))",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function()\r\n        assert.is_same(type(client),'table')\r\n        assert.is_same(type(client.new),'function')\r\n        assert.is_equal(client.new,client.sync)\r\n      end",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert.is_same(type(client),'table')",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert.is_same(type(client.new),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert.is_equal(client.new,client.sync)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function()\r\n        wsc = client.new()\r\n      end",
    "type": "function"
  }, {
    "id": 15,
    "text": "wsc = client.new()",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n        assert.is_same(type(wsc.connect),'function')\r\n        wsc:connect(url,'echo-protocol')\r\n      end",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert.is_same(type(wsc.connect),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "wsc:connect(url,'echo-protocol')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function()\r\n        local c = client.new()\r\n        local ok,err = c:connect('wsc://localhost:'..port,'echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'bad protocol')\r\n      end",
    "type": "function"
  }, {
    "id": 22,
    "text": "local c = client.new()",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local ok,err = c:connect('wsc://localhost:'..port,'echo-protocol')",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "assert.is_falsy(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert.is_equal(err,'bad protocol')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function()\r\n        local c = client.new()\r\n        local ok,err = c:connect('ws://localhost:8189','echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'connection refused')\r\n        \r\n        local ok,err = c:connect('ws://notexisting:8089','echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'host not found')\r\n      end",
    "type": "function"
  }, {
    "id": 28,
    "text": "local ok,err = c:connect('ws://localhost:8189','echo-protocol')",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "assert.is_equal(err,'connection refused')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local ok,err = c:connect('ws://notexisting:8089','echo-protocol')",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "assert.is_equal(err,'host not found')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n        local c = client.new()\r\n        local ok,err = c:send('test')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n        \r\n        c:connect(url,'echo-protocol')\r\n        c:close()\r\n        local ok,err = c:send('test')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n      end",
    "type": "function"
  }, {
    "id": 34,
    "text": "local ok,err = c:send('test')",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "assert.is_equal(err,'wrong state')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "c:connect(url,'echo-protocol')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "c:close()",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function()\r\n        local c = client.new()\r\n        local ok,err = c:connect(url,'echo-protocol')\r\n        assert.is_truthy(ok)\r\n        assert.is_nil(err)\r\n        \r\n        local ok,err = c:connect(url,'echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n      end",
    "type": "function"
  }, {
    "id": 40,
    "text": "local ok,err = c:connect(url,'echo-protocol')",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "assert.is_truthy(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert.is_nil(err)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n        assert.is_same(type(wsc.send),'function')\r\n        wsc:send('Hello again')\r\n      end",
    "type": "function"
  }, {
    "id": 45,
    "text": "assert.is_same(type(wsc.send),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "wsc:send('Hello again')",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n        assert.is_same(type(wsc.receive),'function')\r\n        local echoed = wsc:receive()\r\n        assert.is_same(echoed,'Hello again')\r\n      end",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert.is_same(type(wsc.receive),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "local echoed = wsc:receive()",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "assert.is_same(echoed,'Hello again')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n        local text = random_text(127)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(text,echoed)\r\n      end",
    "type": "function"
  }, {
    "id": 54,
    "text": "local text = random_text(127)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "wsc:send(text)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert.is_same(text,echoed)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n        local text = random_text(0xffff-1)\r\n        assert.is_same(#text,0xffff-1)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(#text,#echoed)\r\n        assert.is_same(text,echoed)\r\n      end",
    "type": "function"
  }, {
    "id": 59,
    "text": "local text = random_text(0xffff-1)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "assert.is_same(#text,0xffff-1)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.is_same(#text,#echoed)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function()\r\n        local text = random_text(0xffff+1)\r\n        assert.is_same(#text,0xffff+1)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(#text,#echoed)\r\n        assert.is_same(text,echoed)\r\n      end",
    "type": "function"
  }, {
    "id": 64,
    "text": "local text = random_text(0xffff+1)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "assert.is_same(#text,0xffff+1)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function()\r\n        local was_clean,code,reason = wsc:close()\r\n        assert.is_true(was_clean)\r\n        assert.is_true(code >= 1000)\r\n        assert.is_string(reason)\r\n      end",
    "type": "function"
  }, {
    "id": 68,
    "text": "local was_clean,code,reason = wsc:close()",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "assert.is_true(was_clean)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert.is_true(code >= 1000)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert.is_string(reason)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n    local wsc\r\n    it(\r\n      'exposes the correct interface',\r\n      function()\r\n        assert.is_same(type(client),'table')\r\n        assert.is_same(type(client.new),'function')\r\n        assert.is_equal(client.new,client.sync)\r\n      end)\r\n    \r\n    it(\r\n      'can be constructed',\r\n      function()\r\n        wsc = client.new()\r\n      end)\r\n    \r\n    it(\r\n      'can connect (requires external websocket server)',\r\n      function()\r\n        assert.is_same(type(wsc.connect),'function')\r\n        wsc:connect(url,'echo-protocol')\r\n      end)\r\n    \r\n    it(\r\n      'returns error on non-ws protocol',\r\n      function()\r\n        local c = client.new()\r\n        local ok,err = c:connect('wsc://localhost:'..port,'echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'bad protocol')\r\n      end)\r\n    \r\n    it(\r\n      'forwards socket errors',\r\n      function()\r\n        local c = client.new()\r\n        local ok,err = c:connect('ws://localhost:8189','echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'connection refused')\r\n        \r\n        local ok,err = c:connect('ws://notexisting:8089','echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'host not found')\r\n      end)\r\n    \r\n    it(\r\n      'returns error when sending in non-open state (requires external websocket server @port 8081)',\r\n      function()\r\n        local c = client.new()\r\n        local ok,err = c:send('test')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n        \r\n        c:connect(url,'echo-protocol')\r\n        c:close()\r\n        local ok,err = c:send('test')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n      end)\r\n    \r\n    it(\r\n      'returns error when connecting twice (requires external websocket server @port 8081)',\r\n      function()\r\n        local c = client.new()\r\n        local ok,err = c:connect(url,'echo-protocol')\r\n        assert.is_truthy(ok)\r\n        assert.is_nil(err)\r\n        \r\n        local ok,err = c:connect(url,'echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n      end)\r\n    \r\n    it(\r\n      'can send (requires external websocket server @port 8081)',\r\n      function()\r\n        assert.is_same(type(wsc.send),'function')\r\n        wsc:send('Hello again')\r\n      end)\r\n    \r\n    it(\r\n      'can receive (requires external websocket server @port 8081)',\r\n      function()\r\n        assert.is_same(type(wsc.receive),'function')\r\n        local echoed = wsc:receive()\r\n        assert.is_same(echoed,'Hello again')\r\n      end)\r\n    \r\n    local random_text = function(len)\r\n      local chars = {}\r\n      for i=1,len do\r\n        chars[i] = string.char(math.random(33,126))\r\n      end\r\n      return table.concat(chars)\r\n    end\r\n    \r\n    it(\r\n      'can send with payload 127 (requires external websocket server @port 8081)',\r\n      function()\r\n        local text = random_text(127)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(text,echoed)\r\n      end)\r\n    \r\n    it(\r\n      'can send with payload 0xffff-1 (requires external websocket server @port 8081)',\r\n      function()\r\n        local text = random_text(0xffff-1)\r\n        assert.is_same(#text,0xffff-1)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(#text,#echoed)\r\n        assert.is_same(text,echoed)\r\n      end)\r\n    \r\n    it(\r\n      'can send with payload 0xffff+1 (requires external websocket server @port 8081)',\r\n      function()\r\n        local text = random_text(0xffff+1)\r\n        assert.is_same(#text,0xffff+1)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(#text,#echoed)\r\n        assert.is_same(text,echoed)\r\n      end)\r\n    \r\n    it(\r\n      'can close cleanly (requires external websocket server @port 8081)',\r\n      function()\r\n        local was_clean,code,reason = wsc:close()\r\n        assert.is_true(was_clean)\r\n        assert.is_true(code >= 1000)\r\n        assert.is_string(reason)\r\n      end)\r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 74,
    "text": "local wsc",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "it(\r\n      'exposes the correct interface',\r\n      function()\r\n        assert.is_same(type(client),'table')\r\n        assert.is_same(type(client.new),'function')\r\n        assert.is_equal(client.new,client.sync)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "it(\r\n      'can be constructed',\r\n      function()\r\n        wsc = client.new()\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "it(\r\n      'can connect (requires external websocket server)',\r\n      function()\r\n        assert.is_same(type(wsc.connect),'function')\r\n        wsc:connect(url,'echo-protocol')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "it(\r\n      'returns error on non-ws protocol',\r\n      function()\r\n        local c = client.new()\r\n        local ok,err = c:connect('wsc://localhost:'..port,'echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'bad protocol')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "it(\r\n      'forwards socket errors',\r\n      function()\r\n        local c = client.new()\r\n        local ok,err = c:connect('ws://localhost:8189','echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'connection refused')\r\n        \r\n        local ok,err = c:connect('ws://notexisting:8089','echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'host not found')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "it(\r\n      'returns error when sending in non-open state (requires external websocket server @port 8081)',\r\n      function()\r\n        local c = client.new()\r\n        local ok,err = c:send('test')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n        \r\n        c:connect(url,'echo-protocol')\r\n        c:close()\r\n        local ok,err = c:send('test')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "it(\r\n      'returns error when connecting twice (requires external websocket server @port 8081)',\r\n      function()\r\n        local c = client.new()\r\n        local ok,err = c:connect(url,'echo-protocol')\r\n        assert.is_truthy(ok)\r\n        assert.is_nil(err)\r\n        \r\n        local ok,err = c:connect(url,'echo-protocol')\r\n        assert.is_falsy(ok)\r\n        assert.is_equal(err,'wrong state')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "it(\r\n      'can send (requires external websocket server @port 8081)',\r\n      function()\r\n        assert.is_same(type(wsc.send),'function')\r\n        wsc:send('Hello again')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "it(\r\n      'can receive (requires external websocket server @port 8081)',\r\n      function()\r\n        assert.is_same(type(wsc.receive),'function')\r\n        local echoed = wsc:receive()\r\n        assert.is_same(echoed,'Hello again')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "local random_text = function(len)\r\n      local chars = {}\r\n      for i=1,len do\r\n        chars[i] = string.char(math.random(33,126))\r\n      end\r\n      return table.concat(chars)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "it(\r\n      'can send with payload 127 (requires external websocket server @port 8081)',\r\n      function()\r\n        local text = random_text(127)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(text,echoed)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "it(\r\n      'can send with payload 0xffff-1 (requires external websocket server @port 8081)',\r\n      function()\r\n        local text = random_text(0xffff-1)\r\n        assert.is_same(#text,0xffff-1)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(#text,#echoed)\r\n        assert.is_same(text,echoed)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "it(\r\n      'can send with payload 0xffff+1 (requires external websocket server @port 8081)',\r\n      function()\r\n        local text = random_text(0xffff+1)\r\n        assert.is_same(#text,0xffff+1)\r\n        wsc:send(text)\r\n        local echoed = wsc:receive()\r\n        assert.is_same(#text,#echoed)\r\n        assert.is_same(text,echoed)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "it(\r\n      'can close cleanly (requires external websocket server @port 8081)',\r\n      function()\r\n        local was_clean,code,reason = wsc:close()\r\n        assert.is_true(was_clean)\r\n        assert.is_true(code >= 1000)\r\n        assert.is_string(reason)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "",
    "type": "function container"
  }, {
    "id": 91,
    "text": "function(ws)\r\n  ws =  ws or {}\r\n  local sock = socket.tcp()\r\n  if ws.timeout ~= nil then\r\n    sock:settimeout(ws.timeout)\r\n  end\r\n  local self = {}\r\n  \r\n  self.sock_connect = function(self,host,port)\r\n    local _,err = sock:connect(host,port)\r\n    if err then\r\n      return nil,err\r\n    end\r\n  end\r\n  \r\n  self.sock_send = function(self,...)\r\n    return sock:send(...)\r\n  end\r\n  \r\n  self.sock_receive = function(self,...)\r\n    return sock:receive(...)\r\n  end\r\n  \r\n  self.sock_close = function(self)\r\n    sock:shutdown()\r\n    sock:close()\r\n  end\r\n  \r\n  self = sync.extend(self)\r\n  self.state = 'CLOSED'\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 93,
    "text": "is_falsy",
    "type": "global function"
  }, {
    "id": 94,
    "text": "random",
    "type": "global function"
  }, {
    "id": 95,
    "text": "is_equal",
    "type": "global function"
  }, {
    "id": 96,
    "text": "is_truthy",
    "type": "global function"
  }, {
    "id": 97,
    "text": "it",
    "type": "global function"
  }, {
    "id": 98,
    "text": "type",
    "type": "global function"
  }, {
    "id": 99,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 100,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 101,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 102,
    "text": "char",
    "type": "global function"
  }, {
    "id": 103,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 104,
    "text": "require",
    "type": "global function"
  }, {
    "id": 105,
    "text": "is_string",
    "type": "global function"
  }, {
    "id": 106,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 107,
    "text": "",
    "type": "variable container"
  }, {
    "id": 108,
    "text": "",
    "type": "require container"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "global variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  } ]
}