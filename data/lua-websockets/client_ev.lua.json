{
  "_filename": "client_ev.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-websockets/src/websocket/client_ev.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 7,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 30,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 46,
    "label": "has",
    "to": 57
  }, {
    "from": 46,
    "label": "has",
    "to": 58
  }, {
    "from": 46,
    "label": "has",
    "to": 59
  }, {
    "from": 46,
    "label": "has",
    "to": 60
  }, {
    "from": 46,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 81
  }, {
    "from": 69,
    "label": "has",
    "to": 82
  }, {
    "from": 69,
    "label": "has",
    "to": 83
  }, {
    "from": 69,
    "label": "has",
    "to": 84
  }, {
    "from": 69,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 89
  }, {
    "from": 69,
    "label": "has",
    "to": 90
  }, {
    "from": 65,
    "label": "has",
    "to": 91
  }, {
    "from": 46,
    "label": "has",
    "to": 92
  }, {
    "from": 46,
    "label": "has",
    "to": 93
  }, {
    "from": 46,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 46,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 35
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 81
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 110,
    "label": "has",
    "to": 35
  }, {
    "from": 110,
    "label": "has",
    "to": 117
  }, {
    "from": 110,
    "label": "has",
    "to": 118
  }, {
    "from": 110,
    "label": "has",
    "to": 38
  }, {
    "from": 110,
    "label": "has",
    "to": 119
  }, {
    "from": 110,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 10
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 110,
    "label": "has",
    "to": 122
  }, {
    "from": 109,
    "label": "has",
    "to": 80
  }, {
    "from": 109,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 124,
    "label": "has",
    "to": 129
  }, {
    "from": 124,
    "label": "has",
    "to": 130
  }, {
    "from": 124,
    "label": "has",
    "to": 131
  }, {
    "from": 124,
    "label": "has",
    "to": 132
  }, {
    "from": 124,
    "label": "has",
    "to": 133
  }, {
    "from": 124,
    "label": "has",
    "to": 13
  }, {
    "from": 124,
    "label": "has",
    "to": 134
  }, {
    "from": 124,
    "label": "has",
    "to": 135
  }, {
    "from": 124,
    "label": "has",
    "to": 136
  }, {
    "from": 124,
    "label": "has",
    "to": 137
  }, {
    "from": 124,
    "label": "has",
    "to": 138
  }, {
    "from": 124,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 6
  }, {
    "from": 124,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 140,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 140,
    "label": "has",
    "to": 13
  }, {
    "from": 140,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 140,
    "label": "has",
    "to": 16
  }, {
    "from": 140,
    "label": "has",
    "to": 17
  }, {
    "from": 124,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 20
  }, {
    "from": 141,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 124,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 124,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 124,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 43
  }, {
    "from": 144,
    "label": "has",
    "to": 44
  }, {
    "from": 124,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 145,
    "label": "has",
    "to": 49
  }, {
    "from": 145,
    "label": "has",
    "to": 50
  }, {
    "from": 145,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 145,
    "label": "has",
    "to": 53
  }, {
    "from": 145,
    "label": "has",
    "to": 54
  }, {
    "from": 145,
    "label": "has",
    "to": 55
  }, {
    "from": 145,
    "label": "has",
    "to": 56
  }, {
    "from": 145,
    "label": "has",
    "to": 57
  }, {
    "from": 145,
    "label": "has",
    "to": 58
  }, {
    "from": 145,
    "label": "has",
    "to": 59
  }, {
    "from": 145,
    "label": "has",
    "to": 60
  }, {
    "from": 145,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 81
  }, {
    "from": 69,
    "label": "has",
    "to": 82
  }, {
    "from": 69,
    "label": "has",
    "to": 83
  }, {
    "from": 69,
    "label": "has",
    "to": 84
  }, {
    "from": 69,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 89
  }, {
    "from": 69,
    "label": "has",
    "to": 90
  }, {
    "from": 65,
    "label": "has",
    "to": 91
  }, {
    "from": 145,
    "label": "has",
    "to": 92
  }, {
    "from": 145,
    "label": "has",
    "to": 93
  }, {
    "from": 145,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 124,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 98
  }, {
    "from": 124,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 101
  }, {
    "from": 124,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 104
  }, {
    "from": 124,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 107
  }, {
    "from": 124,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 35
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 81
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 110,
    "label": "has",
    "to": 35
  }, {
    "from": 110,
    "label": "has",
    "to": 117
  }, {
    "from": 110,
    "label": "has",
    "to": 118
  }, {
    "from": 110,
    "label": "has",
    "to": 38
  }, {
    "from": 110,
    "label": "has",
    "to": 119
  }, {
    "from": 110,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 10
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 110,
    "label": "has",
    "to": 122
  }, {
    "from": 150,
    "label": "has",
    "to": 80
  }, {
    "from": 124,
    "label": "has",
    "to": 151
  }, {
    "from": 124,
    "label": "has",
    "to": 80
  }, {
    "from": 124,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 40
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 155,
    "label": "has",
    "to": 80
  }, {
    "from": 155,
    "label": "has",
    "to": 80
  }, {
    "from": 155,
    "label": "has",
    "to": 77
  }, {
    "from": 155,
    "label": "has",
    "to": 81
  }, {
    "from": 155,
    "label": "has",
    "to": 82
  }, {
    "from": 155,
    "label": "has",
    "to": 83
  }, {
    "from": 155,
    "label": "has",
    "to": 84
  }, {
    "from": 155,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 155,
    "label": "has",
    "to": 80
  }, {
    "from": 155,
    "label": "has",
    "to": 89
  }, {
    "from": 155,
    "label": "has",
    "to": 90
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 66
  }, {
    "from": 157,
    "label": "has",
    "to": 67
  }, {
    "from": 157,
    "label": "has",
    "to": 68
  }, {
    "from": 157,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 81
  }, {
    "from": 69,
    "label": "has",
    "to": 82
  }, {
    "from": 69,
    "label": "has",
    "to": 83
  }, {
    "from": 69,
    "label": "has",
    "to": 84
  }, {
    "from": 69,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 89
  }, {
    "from": 69,
    "label": "has",
    "to": 90
  }, {
    "from": 157,
    "label": "has",
    "to": 91
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 62
  }, {
    "from": 159,
    "label": "has",
    "to": 63
  }, {
    "from": 159,
    "label": "has",
    "to": 64
  }, {
    "from": 159,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 81
  }, {
    "from": 69,
    "label": "has",
    "to": 82
  }, {
    "from": 69,
    "label": "has",
    "to": 83
  }, {
    "from": 69,
    "label": "has",
    "to": 84
  }, {
    "from": 69,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 69,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 89
  }, {
    "from": 69,
    "label": "has",
    "to": 90
  }, {
    "from": 65,
    "label": "has",
    "to": 91
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 10
  }, {
    "from": 161,
    "label": "has",
    "to": 121
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "calls",
    "to": 166
  }, {
    "from": 163,
    "label": "calls",
    "to": 178
  }, {
    "from": 163,
    "label": "calls",
    "to": 177
  }, {
    "from": 163,
    "label": "calls",
    "to": 177
  }, {
    "from": 163,
    "label": "calls",
    "to": 177
  }, {
    "from": 163,
    "label": "calls",
    "to": 177
  }, {
    "from": 163,
    "label": "calls",
    "to": 177
  }, {
    "from": 163,
    "label": "calls",
    "to": 177
  }, {
    "from": 163,
    "label": "calls",
    "to": 177
  }, {
    "from": 163,
    "label": "calls",
    "to": 177
  }, {
    "from": 163,
    "label": "calls",
    "to": 184
  }, {
    "from": 163,
    "label": "calls",
    "to": 5
  }, {
    "from": 163,
    "label": "calls",
    "to": 5
  }, {
    "from": 163,
    "label": "calls",
    "to": 176
  }, {
    "from": 163,
    "label": "calls",
    "to": 176
  }, {
    "from": 163,
    "label": "calls",
    "to": 182
  }, {
    "from": 163,
    "label": "calls",
    "to": 182
  }, {
    "from": 163,
    "label": "calls",
    "to": 182
  }, {
    "from": 163,
    "label": "calls",
    "to": 170
  }, {
    "from": 163,
    "label": "calls",
    "to": 164
  }, {
    "from": 163,
    "label": "calls",
    "to": 164
  }, {
    "from": 163,
    "label": "calls",
    "to": 164
  }, {
    "from": 163,
    "label": "calls",
    "to": 179
  }, {
    "from": 163,
    "label": "calls",
    "to": 7
  }, {
    "from": 163,
    "label": "calls",
    "to": 7
  }, {
    "from": 163,
    "label": "calls",
    "to": 7
  }, {
    "from": 163,
    "label": "calls",
    "to": 7
  }, {
    "from": 163,
    "label": "calls",
    "to": 7
  }, {
    "from": 163,
    "label": "calls",
    "to": 185
  }, {
    "from": 163,
    "label": "calls",
    "to": 185
  }, {
    "from": 163,
    "label": "calls",
    "to": 185
  }, {
    "from": 163,
    "label": "calls",
    "to": 185
  }, {
    "from": 163,
    "label": "calls",
    "to": 168
  }, {
    "from": 163,
    "label": "calls",
    "to": 173
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 181
  }, {
    "from": 163,
    "label": "calls",
    "to": 19
  }, {
    "from": 163,
    "label": "calls",
    "to": 165
  }, {
    "from": 163,
    "label": "calls",
    "to": 165
  }, {
    "from": 163,
    "label": "calls",
    "to": 180
  }, {
    "from": 163,
    "label": "calls",
    "to": 171
  }, {
    "from": 163,
    "label": "calls",
    "to": 167
  }, {
    "from": 163,
    "label": "calls",
    "to": 175
  }, {
    "from": 163,
    "label": "calls",
    "to": 169
  }, {
    "from": 163,
    "label": "calls",
    "to": 24
  }, {
    "from": 163,
    "label": "calls",
    "to": 183
  }, {
    "from": 1,
    "label": "contains",
    "to": 163
  }, {
    "from": 163,
    "label": "declares",
    "to": 5
  }, {
    "from": 163,
    "label": "declares",
    "to": 7
  }, {
    "from": 163,
    "label": "declares",
    "to": 19
  }, {
    "from": 163,
    "label": "declares",
    "to": 24
  }, {
    "from": 163,
    "label": "declares",
    "to": 30
  }, {
    "from": 163,
    "label": "declares",
    "to": 42
  }, {
    "from": 163,
    "label": "declares",
    "to": 46
  }, {
    "from": 163,
    "label": "declares",
    "to": 97
  }, {
    "from": 163,
    "label": "declares",
    "to": 100
  }, {
    "from": 163,
    "label": "declares",
    "to": 103
  }, {
    "from": 163,
    "label": "declares",
    "to": 106
  }, {
    "from": 163,
    "label": "declares",
    "to": 109
  }, {
    "from": 163,
    "label": "declares",
    "to": 124
  }, {
    "from": 163,
    "label": "declares",
    "to": 153
  }, {
    "from": 163,
    "label": "declares",
    "to": 155
  }, {
    "from": 163,
    "label": "declares",
    "to": 157
  }, {
    "from": 163,
    "label": "declares",
    "to": 159
  }, {
    "from": 163,
    "label": "declares",
    "to": 161
  }, {
    "from": 1,
    "label": "contains",
    "to": 186
  }, {
    "from": 1,
    "label": "contains",
    "to": 187
  }, {
    "from": 186,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 186,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 186,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 187,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "requires",
    "to": 172
  }, {
    "from": 187,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "requires",
    "to": 4
  }, {
    "from": 187,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "requires",
    "to": 2
  }, {
    "from": 187,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "requires",
    "to": 3
  }, {
    "from": 187,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "requires",
    "to": 199
  }, {
    "from": 187,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "requires",
    "to": 174
  }, {
    "from": 1,
    "label": "provides",
    "to": 201
  }, {
    "from": 192,
    "label": "represents",
    "to": 202
  }, {
    "from": 201,
    "label": "provides",
    "to": 202
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 159
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 157
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "client_ev",
    "type": "module"
  }, {
    "id": 2,
    "text": "frame",
    "type": "module"
  }, {
    "id": 3,
    "text": "handshake",
    "type": "module"
  }, {
    "id": 4,
    "text": "tools",
    "type": "module"
  }, {
    "id": 5,
    "text": "function(s,err) print('Websocket client unhandled error',s,err) end",
    "type": "function"
  }, {
    "id": 6,
    "text": "print('Websocket client unhandled error',s,err)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "function(was_clean,code,reason)\r\n    if close_timer then\r\n      close_timer:stop(loop)\r\n      close_timer = nil\r\n    end\r\n    if message_io then\r\n      message_io:stop(loop)\r\n    end\r\n    self.state = 'CLOSED'\r\n    if user_on_close then\r\n      user_on_close(self,was_clean,code,reason or '')\r\n    end\r\n    sock:shutdown()\r\n    sock:close()\r\n  end",
    "type": "function"
  }, {
    "id": 8,
    "text": "if close_timer then\r\n      close_timer:stop(loop)\r\n      close_timer = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "close_timer:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "close_timer = nil",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if message_io then\r\n      message_io:stop(loop)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "message_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "self.state = 'CLOSED'",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if user_on_close then\r\n      user_on_close(self,was_clean,code,reason or '')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "user_on_close(self,was_clean,code,reason or '')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "sock:shutdown()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "sock:close()",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n    self.state = 'OPEN'\r\n    if user_on_open then\r\n      user_on_open(self)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "self.state = 'OPEN'",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if user_on_open then\r\n      user_on_open(self)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "user_on_open(self)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(err)\r\n    if err == 'closed' then\r\n      if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end\r\n    else\r\n      on_error(err)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 25,
    "text": "if err == 'closed' then\r\n      if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end\r\n    else\r\n      on_error(err)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "on_close(false,1006,'')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "on_error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function(message,opcode)\r\n    if opcode == frame.TEXT or opcode == frame.BINARY then\r\n      if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end\r\n    elseif opcode == frame.CLOSE then\r\n      if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE,true)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1005,reason)\r\n          end,handle_socket_err)\r\n      else\r\n        on_close(true,code or 1005,reason)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "if opcode == frame.TEXT or opcode == frame.BINARY then\r\n      if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end\r\n    elseif opcode == frame.CLOSE then\r\n      if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE,true)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1005,reason)\r\n          end,handle_socket_err)\r\n      else\r\n        on_close(true,code or 1005,reason)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "user_on_message(self,message,opcode)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE,true)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1005,reason)\r\n          end,handle_socket_err)\r\n      else\r\n        on_close(true,code or 1005,reason)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "self.state = 'CLOSING'",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local code,reason = frame.decode_close(message)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local encoded = frame.encode_close(code)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "encoded = frame.encode(encoded,frame.CLOSE,true)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1005,reason)\r\n          end,handle_socket_err)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "on_close(true,code or 1005,reason)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function(_,message,opcode)\r\n    local encoded = frame.encode(message,opcode or frame.TEXT,true)\r\n    async_send(encoded, nil, handle_socket_error)\r\n  end",
    "type": "function"
  }, {
    "id": 43,
    "text": "local encoded = frame.encode(message,opcode or frame.TEXT,true)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "async_send(encoded, nil, handle_socket_error)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function(_,params)\r\n    if self.state ~= 'CLOSED' then\r\n      error('wrong state')\r\n    end\r\n    self.state = 'CONNECTING'\r\n    local protocol,host,port,uri = tools.parse_url(params.url)\r\n    if protocol ~= 'ws' then\r\n      error('Protocol not supported:'..protocol)\r\n    end\r\n    assert(not sock)\r\n    sock = socket.tcp()\r\n    fd = sock:getfd()\r\n    assert(fd > -1)\r\n    -- set non blocking\r\n    sock:settimeout(0)\r\n    sock:setoption('tcp-nodelay',true)\r\n    async_send = require'websocket.ev_common'.async_send(sock,loop)\r\n    user_on_open = params.on_open or user_on_open\r\n    \r\n    ev.IO.new(\r\n      function(loop,connect_io)\r\n        connect_io:stop(loop)\r\n        local key = tools.generate_key()\r\n        local req = handshake.upgrade_request\r\n        {\r\n          key = key,\r\n          host = host,\r\n          port = port,\r\n          protocols = {params.protocol or ''},\r\n          origin = ws.origin,\r\n          uri = uri\r\n        }\r\n        async_send(\r\n          req,\r\n          function()\r\n            local resp = {}\r\n            local last\r\n            assert(sock:getfd() > -1)\r\n            handshake_io = ev.IO.new(\r\n              function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end,fd,ev.READ)\r\n            handshake_io:start(loop)-- handshake\r\n          end,\r\n        handle_socket_err)\r\n      end,fd,ev.WRITE):start(loop)-- connect\r\n    local _,err = sock:connect(host,port)\r\n    assert(_ == nil)\r\n    if err ~= 'timeout' then\r\n      error('Websocket could not connect to '..ws.url)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 47,
    "text": "if self.state ~= 'CLOSED' then\r\n      error('wrong state')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "error('wrong state')",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "self.state = 'CONNECTING'",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local protocol,host,port,uri = tools.parse_url(params.url)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if protocol ~= 'ws' then\r\n      error('Protocol not supported:'..protocol)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "error('Protocol not supported:'..protocol)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert(not sock)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "sock = socket.tcp()",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "fd = sock:getfd()",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "assert(fd > -1)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "sock:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "sock:setoption('tcp-nodelay',true)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "async_send = require'websocket.ev_common'.async_send(sock,loop)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "user_on_open = params.on_open or user_on_open",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "ev.IO.new(\r\n      function(loop,connect_io)\r\n        connect_io:stop(loop)\r\n        local key = tools.generate_key()\r\n        local req = handshake.upgrade_request\r\n        {\r\n          key = key,\r\n          host = host,\r\n          port = port,\r\n          protocols = {params.protocol or ''},\r\n          origin = ws.origin,\r\n          uri = uri\r\n        }\r\n        async_send(\r\n          req,\r\n          function()\r\n            local resp = {}\r\n            local last\r\n            assert(sock:getfd() > -1)\r\n            handshake_io = ev.IO.new(\r\n              function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end,fd,ev.READ)\r\n            handshake_io:start(loop)-- handshake\r\n          end,\r\n        handle_socket_err)\r\n      end,fd,ev.WRITE):start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "connect_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "local key = tools.generate_key()",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local req = handshake.upgrade_request\r\n        {\r\n          key = key,\r\n          host = host,\r\n          port = port,\r\n          protocols = {params.protocol or ''},\r\n          origin = ws.origin,\r\n          uri = uri\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "async_send(\r\n          req,\r\n          function()\r\n            local resp = {}\r\n            local last\r\n            assert(sock:getfd() > -1)\r\n            handshake_io = ev.IO.new(\r\n              function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end,fd,ev.READ)\r\n            handshake_io:start(loop)-- handshake\r\n          end,\r\n        handle_socket_err)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local resp = {}",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local last",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "assert(sock:getfd() > -1)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "handshake_io = ev.IO.new(\r\n              function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end,fd,ev.READ)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''",
    "type": "statement:repeat"
  }, {
    "id": 71,
    "text": "local line,err,part = sock:receive('*l')",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "line = last..line",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "last = nil",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "resp[#resp+1] = line",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "read_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "handle_socket_err(err)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "last = part",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 81,
    "text": "handshake_io = nil",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "local response = table.concat(resp,'\\r\\n')",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local headers = handshake.http_headers(response)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local expected_accept = handshake.sec_websocket_accept(key)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "on_error(self,msg)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "on_open(self)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "handshake_io:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local _,err = sock:connect(host,port)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "assert(_ == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "if err ~= 'timeout' then\r\n      error('Websocket could not connect to '..ws.url)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "error('Websocket could not connect to '..ws.url)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function(_,on_close_arg)\r\n    user_on_close = on_close_arg\r\n  end",
    "type": "function"
  }, {
    "id": 98,
    "text": "user_on_close = on_close_arg",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function(_,on_error_arg)\r\n    user_on_error = on_error_arg\r\n  end",
    "type": "function"
  }, {
    "id": 101,
    "text": "user_on_error = on_error_arg",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function(_,on_open_arg)\r\n    user_on_open = on_open_arg\r\n  end",
    "type": "function"
  }, {
    "id": 104,
    "text": "user_on_open = on_open_arg",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function(_,on_message_arg)\r\n    user_on_message = on_message_arg\r\n  end",
    "type": "function"
  }, {
    "id": 107,
    "text": "user_on_message = on_message_arg",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function(_,code,reason,timeout)\r\n    if self.state == 'CONNECTING' then\r\n      self.state = 'CLOSING'\r\n      assert(handshake_io)\r\n      assert(not message_io)\r\n      handshake_io:stop(loop)\r\n      handshake_io = nil\r\n      on_close(false,1006,'not open')\r\n      return\r\n    elseif self.state == 'OPEN' then\r\n      assert(not handshake_io)\r\n      assert(message_io)\r\n      self.state = 'CLOSING'\r\n      timeout = timeout or 3\r\n      local encoded = frame.encode_close(code or 1000,reason)\r\n      encoded = frame.encode(encoded,frame.CLOSE,true)\r\n      -- this should let the other peer confirm the CLOSE message\r\n      -- by 'echoing' the message.\r\n      async_send(encoded)\r\n      close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)\r\n      close_timer:start(loop)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 110,
    "text": "if self.state == 'CONNECTING' then\r\n      self.state = 'CLOSING'\r\n      assert(handshake_io)\r\n      assert(not message_io)\r\n      handshake_io:stop(loop)\r\n      handshake_io = nil\r\n      on_close(false,1006,'not open')\r\n      return\r\n    elseif self.state == 'OPEN' then\r\n      assert(not handshake_io)\r\n      assert(message_io)\r\n      self.state = 'CLOSING'\r\n      timeout = timeout or 3\r\n      local encoded = frame.encode_close(code or 1000,reason)\r\n      encoded = frame.encode(encoded,frame.CLOSE,true)\r\n      -- this should let the other peer confirm the CLOSE message\r\n      -- by 'echoing' the message.\r\n      async_send(encoded)\r\n      close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)\r\n      close_timer:start(loop)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "assert(handshake_io)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert(not message_io)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "handshake_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "on_close(false,1006,'not open')",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "assert(not handshake_io)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert(message_io)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "timeout = timeout or 3",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "local encoded = frame.encode_close(code or 1000,reason)",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "async_send(encoded)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "on_close(false,1006,'timeout')",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "close_timer:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function(ws)\r\n  ws = ws or {}\r\n  local ev = require'ev'\r\n  local sock\r\n  local loop = ws.loop or ev.Loop.default\r\n  local fd\r\n  local message_io\r\n  local handshake_io\r\n  local async_send\r\n  local self = {}\r\n  self.state = 'CLOSED'\r\n  local close_timer\r\n  local user_on_message\r\n  local user_on_close\r\n  local user_on_open\r\n  local user_on_error\r\n  local on_error = function(s,err) print('Websocket client unhandled error',s,err) end\r\n  local on_close = function(was_clean,code,reason)\r\n    if close_timer then\r\n      close_timer:stop(loop)\r\n      close_timer = nil\r\n    end\r\n    if message_io then\r\n      message_io:stop(loop)\r\n    end\r\n    self.state = 'CLOSED'\r\n    if user_on_close then\r\n      user_on_close(self,was_clean,code,reason or '')\r\n    end\r\n    sock:shutdown()\r\n    sock:close()\r\n  end\r\n  local on_open = function()\r\n    self.state = 'OPEN'\r\n    if user_on_open then\r\n      user_on_open(self)\r\n    end\r\n  end\r\n  local handle_socket_err = function(err)\r\n    if err == 'closed' then\r\n      if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end\r\n    else\r\n      on_error(err)\r\n    end\r\n  end\r\n  local on_message = function(message,opcode)\r\n    if opcode == frame.TEXT or opcode == frame.BINARY then\r\n      if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end\r\n    elseif opcode == frame.CLOSE then\r\n      if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE,true)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1005,reason)\r\n          end,handle_socket_err)\r\n      else\r\n        on_close(true,code or 1005,reason)\r\n      end\r\n    end\r\n  end\r\n  \r\n  self.send = function(_,message,opcode)\r\n    local encoded = frame.encode(message,opcode or frame.TEXT,true)\r\n    async_send(encoded, nil, handle_socket_error)\r\n  end\r\n  \r\n  local connect = function(_,params)\r\n    if self.state ~= 'CLOSED' then\r\n      error('wrong state')\r\n    end\r\n    self.state = 'CONNECTING'\r\n    local protocol,host,port,uri = tools.parse_url(params.url)\r\n    if protocol ~= 'ws' then\r\n      error('Protocol not supported:'..protocol)\r\n    end\r\n    assert(not sock)\r\n    sock = socket.tcp()\r\n    fd = sock:getfd()\r\n    assert(fd > -1)\r\n    -- set non blocking\r\n    sock:settimeout(0)\r\n    sock:setoption('tcp-nodelay',true)\r\n    async_send = require'websocket.ev_common'.async_send(sock,loop)\r\n    user_on_open = params.on_open or user_on_open\r\n    \r\n    ev.IO.new(\r\n      function(loop,connect_io)\r\n        connect_io:stop(loop)\r\n        local key = tools.generate_key()\r\n        local req = handshake.upgrade_request\r\n        {\r\n          key = key,\r\n          host = host,\r\n          port = port,\r\n          protocols = {params.protocol or ''},\r\n          origin = ws.origin,\r\n          uri = uri\r\n        }\r\n        async_send(\r\n          req,\r\n          function()\r\n            local resp = {}\r\n            local last\r\n            assert(sock:getfd() > -1)\r\n            handshake_io = ev.IO.new(\r\n              function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end,fd,ev.READ)\r\n            handshake_io:start(loop)-- handshake\r\n          end,\r\n        handle_socket_err)\r\n      end,fd,ev.WRITE):start(loop)-- connect\r\n    local _,err = sock:connect(host,port)\r\n    assert(_ == nil)\r\n    if err ~= 'timeout' then\r\n      error('Websocket could not connect to '..ws.url)\r\n    end\r\n  end\r\n  \r\n  self.on_close = function(_,on_close_arg)\r\n    user_on_close = on_close_arg\r\n  end\r\n  \r\n  self.on_error = function(_,on_error_arg)\r\n    user_on_error = on_error_arg\r\n  end\r\n  \r\n  self.on_open = function(_,on_open_arg)\r\n    user_on_open = on_open_arg\r\n  end\r\n  \r\n  self.on_message = function(_,on_message_arg)\r\n    user_on_message = on_message_arg\r\n  end\r\n  \r\n  self.close = function(_,code,reason,timeout)\r\n    if self.state == 'CONNECTING' then\r\n      self.state = 'CLOSING'\r\n      assert(handshake_io)\r\n      assert(not message_io)\r\n      handshake_io:stop(loop)\r\n      handshake_io = nil\r\n      on_close(false,1006,'not open')\r\n      return\r\n    elseif self.state == 'OPEN' then\r\n      assert(not handshake_io)\r\n      assert(message_io)\r\n      self.state = 'CLOSING'\r\n      timeout = timeout or 3\r\n      local encoded = frame.encode_close(code or 1000,reason)\r\n      encoded = frame.encode(encoded,frame.CLOSE,true)\r\n      -- this should let the other peer confirm the CLOSE message\r\n      -- by 'echoing' the message.\r\n      async_send(encoded)\r\n      close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)\r\n      close_timer:start(loop)\r\n    end\r\n  end\r\n  self.connect = connect\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "ws = ws or {}",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "local ev = require'ev'",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local sock",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "local loop = ws.loop or ev.Loop.default",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "local fd",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local message_io",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local handshake_io",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "local async_send",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local self = {}",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local close_timer",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local user_on_message",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "local user_on_close",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local user_on_open",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "local user_on_error",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "local on_error = function(s,err) print('Websocket client unhandled error',s,err) end",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "local on_close = function(was_clean,code,reason)\r\n    if close_timer then\r\n      close_timer:stop(loop)\r\n      close_timer = nil\r\n    end\r\n    if message_io then\r\n      message_io:stop(loop)\r\n    end\r\n    self.state = 'CLOSED'\r\n    if user_on_close then\r\n      user_on_close(self,was_clean,code,reason or '')\r\n    end\r\n    sock:shutdown()\r\n    sock:close()\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "local on_open = function()\r\n    self.state = 'OPEN'\r\n    if user_on_open then\r\n      user_on_open(self)\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "local handle_socket_err = function(err)\r\n    if err == 'closed' then\r\n      if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end\r\n    else\r\n      on_error(err)\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local on_message = function(message,opcode)\r\n    if opcode == frame.TEXT or opcode == frame.BINARY then\r\n      if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end\r\n    elseif opcode == frame.CLOSE then\r\n      if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE,true)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1005,reason)\r\n          end,handle_socket_err)\r\n      else\r\n        on_close(true,code or 1005,reason)\r\n      end\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "self.send = function(_,message,opcode)\r\n    local encoded = frame.encode(message,opcode or frame.TEXT,true)\r\n    async_send(encoded, nil, handle_socket_error)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "local connect = function(_,params)\r\n    if self.state ~= 'CLOSED' then\r\n      error('wrong state')\r\n    end\r\n    self.state = 'CONNECTING'\r\n    local protocol,host,port,uri = tools.parse_url(params.url)\r\n    if protocol ~= 'ws' then\r\n      error('Protocol not supported:'..protocol)\r\n    end\r\n    assert(not sock)\r\n    sock = socket.tcp()\r\n    fd = sock:getfd()\r\n    assert(fd > -1)\r\n    -- set non blocking\r\n    sock:settimeout(0)\r\n    sock:setoption('tcp-nodelay',true)\r\n    async_send = require'websocket.ev_common'.async_send(sock,loop)\r\n    user_on_open = params.on_open or user_on_open\r\n    \r\n    ev.IO.new(\r\n      function(loop,connect_io)\r\n        connect_io:stop(loop)\r\n        local key = tools.generate_key()\r\n        local req = handshake.upgrade_request\r\n        {\r\n          key = key,\r\n          host = host,\r\n          port = port,\r\n          protocols = {params.protocol or ''},\r\n          origin = ws.origin,\r\n          uri = uri\r\n        }\r\n        async_send(\r\n          req,\r\n          function()\r\n            local resp = {}\r\n            local last\r\n            assert(sock:getfd() > -1)\r\n            handshake_io = ev.IO.new(\r\n              function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end,fd,ev.READ)\r\n            handshake_io:start(loop)-- handshake\r\n          end,\r\n        handle_socket_err)\r\n      end,fd,ev.WRITE):start(loop)-- connect\r\n    local _,err = sock:connect(host,port)\r\n    assert(_ == nil)\r\n    if err ~= 'timeout' then\r\n      error('Websocket could not connect to '..ws.url)\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "self.on_close = function(_,on_close_arg)\r\n    user_on_close = on_close_arg\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "self.on_error = function(_,on_error_arg)\r\n    user_on_error = on_error_arg\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "self.on_open = function(_,on_open_arg)\r\n    user_on_open = on_open_arg\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "self.on_message = function(_,on_message_arg)\r\n    user_on_message = on_message_arg\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "self.close = function(_,code,reason,timeout)\r\n    if self.state == 'CONNECTING' then\r\n      self.state = 'CLOSING'\r\n      assert(handshake_io)\r\n      assert(not message_io)\r\n      handshake_io:stop(loop)\r\n      handshake_io = nil\r\n      on_close(false,1006,'not open')\r\n      return\r\n    elseif self.state == 'OPEN' then\r\n      assert(not handshake_io)\r\n      assert(message_io)\r\n      self.state = 'CLOSING'\r\n      timeout = timeout or 3\r\n      local encoded = frame.encode_close(code or 1000,reason)\r\n      encoded = frame.encode(encoded,frame.CLOSE,true)\r\n      -- this should let the other peer confirm the CLOSE message\r\n      -- by 'echoing' the message.\r\n      async_send(encoded)\r\n      close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)\r\n      close_timer:start(loop)\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "self.connect = connect",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function()\r\n            on_close(true,code or 1005,reason)\r\n          end",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function()\r\n            local resp = {}\r\n            local last\r\n            assert(sock:getfd() > -1)\r\n            handshake_io = ev.IO.new(\r\n              function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end,fd,ev.READ)\r\n            handshake_io:start(loop)-- handshake\r\n          end",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function(loop,connect_io)\r\n        connect_io:stop(loop)\r\n        local key = tools.generate_key()\r\n        local req = handshake.upgrade_request\r\n        {\r\n          key = key,\r\n          host = host,\r\n          port = port,\r\n          protocols = {params.protocol or ''},\r\n          origin = ws.origin,\r\n          uri = uri\r\n        }\r\n        async_send(\r\n          req,\r\n          function()\r\n            local resp = {}\r\n            local last\r\n            assert(sock:getfd() > -1)\r\n            handshake_io = ev.IO.new(\r\n              function(loop,read_io)\r\n                repeat\r\n                  local line,err,part = sock:receive('*l')\r\n                  if line then\r\n                    if last then\r\n                      line = last..line\r\n                      last = nil\r\n                    end\r\n                    resp[#resp+1] = line\r\n                  elseif err ~= 'timeout' then\r\n                    read_io:stop(loop)\r\n                    handle_socket_err(err)\r\n                    return\r\n                  else\r\n                    last = part\r\n                    return\r\n                  end\r\n                until line == ''\r\n                read_io:stop(loop)\r\n                handshake_io = nil\r\n                local response = table.concat(resp,'\\r\\n')\r\n                local headers = handshake.http_headers(response)\r\n                local expected_accept = handshake.sec_websocket_accept(key)\r\n                if headers['sec-websocket-accept'] ~= expected_accept then\r\n                  local msg = 'Websocket Handshake failed: Invalid Sec-Websocket-Accept (expected %s got %s)'\r\n                  msg = msg:format(expected_accept,headers['sec-websocket-accept'] or 'nil')\r\n                  on_error(self,msg)\r\n                  return\r\n                end\r\n                message_io = require'websocket.ev_common'.message_io(\r\n                  sock,loop,\r\n                  on_message,\r\n                handle_socket_err)\r\n                on_open(self)\r\n              end,fd,ev.READ)\r\n            handshake_io:start(loop)-- handshake\r\n          end,\r\n        handle_socket_err)\r\n      end",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end",
    "type": "function"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "",
    "type": "function container"
  }, {
    "id": 164,
    "text": "function(data,opcode,masked,fin)\r\n  local encoded\r\n  local header = opcode or 1-- TEXT is default opcode\r\n  if fin == nil or fin == true then\r\n    header = bor(header,bit_7)\r\n  end\r\n  local payload = 0\r\n  if masked then\r\n    payload = bor(payload,bit_7)\r\n  end\r\n  local len = #data\r\n  if len < 126 then\r\n    payload = bor(payload,len)\r\n    encoded = spack('bb',header,payload)\r\n  elseif len < 0xffff then\r\n    payload = bor(payload,126)\r\n    encoded = spack('bb>H',header,payload,len)\r\n  elseif len < 2^53 then\r\n    local high = math.floor(len/2^32)\r\n    local low = len - high*2^32\r\n    payload = bor(payload,127)\r\n    encoded = spack('bb>I>I',header,payload,high,low)\r\n  end\r\n  if not masked then\r\n    encoded = encoded..data\r\n  else\r\n    local m1 = math.random(0,0xff)\r\n    local m2 = math.random(0,0xff)\r\n    local m3 = math.random(0,0xff)\r\n    local m4 = math.random(0,0xff)\r\n    local mask = {m1,m2,m3,m4}\r\n    encoded = encoded..spack('bbbb',m1,m2,m3,m4)\r\n    encoded = encoded..xor_mask(data,mask,#data)\r\n  end\r\n  return encoded\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "function(code,reason)\r\n  if code then\r\n    data = spack('>H',code)\r\n    if reason then\r\n      data = data..tostring(reason)\r\n    end\r\n    return data\r\n  end\r\n  return ''\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "function(data)\r\n  local _,code,reason\r\n  if data then\r\n    if #data > 1 then\r\n      _,code = sunpack(data,'>H')\r\n    end\r\n    if #data > 2 then\r\n      reason = data:sub(3)\r\n    end\r\n  end\r\n  return code,reason\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "function(sec_websocket_key)\r\n  local a = sec_websocket_key..guid\r\n  local sha1 = sha1(a)\r\n  assert((#sha1 % 2) == 0)\r\n  return base64.encode(sha1)\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "function(request)\r\n  local headers = {}\r\n  if not request:match('.*HTTP/1%.1') then\r\n    return\r\n  end\r\n  request = request:match('[^\\r\\n]+\\r\\n(.*)')\r\n  local empty_line\r\n  for line in request:gmatch('[^\\r\\n]*\\r\\n') do\r\n    local name,val = line:match('([^%s]+)%s*:%s*([^\\r\\n]+)')\r\n    if name and val then\r\n      name = name:lower()\r\n      if not name:match('sec%-websocket') then\r\n        val = val:lower()\r\n      end\r\n      if not headers[name] then\r\n        headers[name] = val\r\n      else\r\n        headers[name] = headers[name]..','..val\r\n      end\r\n    elseif line == '\\r\\n' then\r\n      empty_line = true\r\n    else\r\n      assert(false,line..'('..#line..')')\r\n    end\r\n  end\r\n  return headers,request:match('\\r\\n\\r\\n(.*)')\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "function(req)\r\n  local format = string.format\r\n  local lines = {\r\n    format('GET %s HTTP/1.1',req.uri or ''),\r\n    format('Host: %s',req.host),\r\n    'Upgrade: websocket',\r\n    'Connection: Upgrade',\r\n    format('Sec-WebSocket-Key: %s',req.key),\r\n    format('Sec-WebSocket-Protocol: %s',table.concat(req.protocols,', ')),\r\n    'Sec-WebSocket-Version: 13',\r\n  }\r\n  if req.origin then\r\n    tinsert(lines,string.format('Origin: %s',req.origin))\r\n  end\r\n  if req.port and req.port ~= 80 then\r\n    lines[2] = format('Host: %s:%d',req.host,req.port)\r\n  end\r\n  tinsert(lines,'\\r\\n')\r\n  return table.concat(lines,'\\r\\n')\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "function(url)\r\n  local protocol,host = url:match('^(%w+)://([^:/]+)')\r\n  local port,uri = url:match('.+//[^:/]+:?(%d*)(.*)')\r\n  if port and port ~= '' then\r\n    port = tonumber(port)\r\n  elseif protocol == 'ws' then\r\n    port = 80\r\n  end\r\n  if not uri or uri == '' then\r\n    uri = '/'\r\n  end\r\n  if not protocol or not host or not port or not uri then\r\n    error('Invalid URL:'..url)\r\n  end\r\n  return protocol,host,port,uri\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "function()\r\n  local r1 = mrandom(0,0xfffffff)\r\n  local r2 = mrandom(0,0xfffffff)\r\n  local r3 = mrandom(0,0xfffffff)\r\n  local r4 = mrandom(0,0xfffffff)\r\n  local key = spack('IIII',r1,r2,r3,r4)\r\n  assert(#key==16,#key)\r\n  return base64_encode(key)\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "socket",
    "type": "module"
  }, {
    "id": 173,
    "text": "tcp",
    "type": "global function"
  }, {
    "id": 174,
    "text": "ev",
    "type": "module"
  }, {
    "id": 175,
    "text": "Timer.new",
    "type": "global function"
  }, {
    "id": 176,
    "text": "IO.new",
    "type": "global function"
  }, {
    "id": 177,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 178,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 179,
    "text": "user_on_open",
    "type": "global function"
  }, {
    "id": 180,
    "text": "user_on_close",
    "type": "global function"
  }, {
    "id": 181,
    "text": "require",
    "type": "global function"
  }, {
    "id": 182,
    "text": "error",
    "type": "global function"
  }, {
    "id": 183,
    "text": "print",
    "type": "global function"
  }, {
    "id": 184,
    "text": "user_on_message",
    "type": "global function"
  }, {
    "id": 185,
    "text": "async_send",
    "type": "global function"
  }, {
    "id": 186,
    "text": "",
    "type": "variable container"
  }, {
    "id": 187,
    "text": "",
    "type": "require container"
  }, {
    "id": 188,
    "text": "",
    "type": "local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "n/a"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 199,
    "text": "debug",
    "type": "module"
  }, {
    "id": 200,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "interface container"
  }, {
    "id": 202,
    "text": "",
    "type": "interface"
  } ]
}