{
  "_filename": "handshake_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua-websockets/spec/handshake_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 15
  }, {
    "from": 24,
    "label": "has",
    "to": 16
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 26
  }, {
    "from": 33,
    "label": "has",
    "to": 27
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 33,
    "label": "has",
    "to": 14
  }, {
    "from": 33,
    "label": "has",
    "to": 15
  }, {
    "from": 33,
    "label": "has",
    "to": 16
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 31
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 27
  }, {
    "from": 38,
    "label": "has",
    "to": 29
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 15
  }, {
    "from": 38,
    "label": "has",
    "to": 16
  }, {
    "from": 38,
    "label": "has",
    "to": 31
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 46
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 39
  }, {
    "from": 59,
    "label": "has",
    "to": 40
  }, {
    "from": 59,
    "label": "has",
    "to": 41
  }, {
    "from": 59,
    "label": "has",
    "to": 42
  }, {
    "from": 59,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 59,
    "label": "has",
    "to": 46
  }, {
    "from": 59,
    "label": "has",
    "to": 47
  }, {
    "from": 59,
    "label": "has",
    "to": 27
  }, {
    "from": 59,
    "label": "has",
    "to": 29
  }, {
    "from": 59,
    "label": "has",
    "to": 14
  }, {
    "from": 59,
    "label": "has",
    "to": 15
  }, {
    "from": 59,
    "label": "has",
    "to": 16
  }, {
    "from": 59,
    "label": "has",
    "to": 31
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 50
  }, {
    "from": 60,
    "label": "has",
    "to": 51
  }, {
    "from": 60,
    "label": "has",
    "to": 52
  }, {
    "from": 60,
    "label": "has",
    "to": 53
  }, {
    "from": 60,
    "label": "has",
    "to": 46
  }, {
    "from": 60,
    "label": "has",
    "to": 54
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 4
  }, {
    "from": 63,
    "label": "has",
    "to": 5
  }, {
    "from": 63,
    "label": "has",
    "to": 6
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 9
  }, {
    "from": 64,
    "label": "has",
    "to": 10
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 13
  }, {
    "from": 65,
    "label": "has",
    "to": 14
  }, {
    "from": 65,
    "label": "has",
    "to": 15
  }, {
    "from": 65,
    "label": "has",
    "to": 16
  }, {
    "from": 65,
    "label": "has",
    "to": 17
  }, {
    "from": 65,
    "label": "has",
    "to": 18
  }, {
    "from": 65,
    "label": "has",
    "to": 19
  }, {
    "from": 65,
    "label": "has",
    "to": 20
  }, {
    "from": 65,
    "label": "has",
    "to": 21
  }, {
    "from": 65,
    "label": "has",
    "to": 22
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 25
  }, {
    "from": 66,
    "label": "has",
    "to": 26
  }, {
    "from": 66,
    "label": "has",
    "to": 27
  }, {
    "from": 66,
    "label": "has",
    "to": 28
  }, {
    "from": 66,
    "label": "has",
    "to": 29
  }, {
    "from": 66,
    "label": "has",
    "to": 14
  }, {
    "from": 66,
    "label": "has",
    "to": 15
  }, {
    "from": 66,
    "label": "has",
    "to": 16
  }, {
    "from": 66,
    "label": "has",
    "to": 30
  }, {
    "from": 66,
    "label": "has",
    "to": 31
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 34
  }, {
    "from": 67,
    "label": "has",
    "to": 26
  }, {
    "from": 67,
    "label": "has",
    "to": 27
  }, {
    "from": 67,
    "label": "has",
    "to": 35
  }, {
    "from": 67,
    "label": "has",
    "to": 29
  }, {
    "from": 67,
    "label": "has",
    "to": 14
  }, {
    "from": 67,
    "label": "has",
    "to": 15
  }, {
    "from": 67,
    "label": "has",
    "to": 16
  }, {
    "from": 67,
    "label": "has",
    "to": 36
  }, {
    "from": 67,
    "label": "has",
    "to": 31
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 57
  }, {
    "from": 68,
    "label": "has",
    "to": 58
  }, {
    "from": 68,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 39
  }, {
    "from": 59,
    "label": "has",
    "to": 40
  }, {
    "from": 59,
    "label": "has",
    "to": 41
  }, {
    "from": 59,
    "label": "has",
    "to": 42
  }, {
    "from": 59,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 59,
    "label": "has",
    "to": 46
  }, {
    "from": 59,
    "label": "has",
    "to": 47
  }, {
    "from": 59,
    "label": "has",
    "to": 27
  }, {
    "from": 59,
    "label": "has",
    "to": 29
  }, {
    "from": 59,
    "label": "has",
    "to": 14
  }, {
    "from": 59,
    "label": "has",
    "to": 15
  }, {
    "from": 59,
    "label": "has",
    "to": 16
  }, {
    "from": 59,
    "label": "has",
    "to": 31
  }, {
    "from": 68,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 50
  }, {
    "from": 60,
    "label": "has",
    "to": 51
  }, {
    "from": 60,
    "label": "has",
    "to": 52
  }, {
    "from": 60,
    "label": "has",
    "to": 53
  }, {
    "from": 60,
    "label": "has",
    "to": 46
  }, {
    "from": 60,
    "label": "has",
    "to": 54
  }, {
    "from": 62,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "calls",
    "to": 74
  }, {
    "from": 70,
    "label": "calls",
    "to": 74
  }, {
    "from": 70,
    "label": "calls",
    "to": 82
  }, {
    "from": 70,
    "label": "calls",
    "to": 82
  }, {
    "from": 70,
    "label": "calls",
    "to": 79
  }, {
    "from": 70,
    "label": "calls",
    "to": 79
  }, {
    "from": 70,
    "label": "calls",
    "to": 79
  }, {
    "from": 70,
    "label": "calls",
    "to": 72
  }, {
    "from": 70,
    "label": "calls",
    "to": 72
  }, {
    "from": 70,
    "label": "calls",
    "to": 72
  }, {
    "from": 70,
    "label": "calls",
    "to": 72
  }, {
    "from": 70,
    "label": "calls",
    "to": 76
  }, {
    "from": 70,
    "label": "calls",
    "to": 86
  }, {
    "from": 70,
    "label": "calls",
    "to": 86
  }, {
    "from": 70,
    "label": "calls",
    "to": 80
  }, {
    "from": 70,
    "label": "calls",
    "to": 80
  }, {
    "from": 70,
    "label": "calls",
    "to": 80
  }, {
    "from": 70,
    "label": "calls",
    "to": 80
  }, {
    "from": 70,
    "label": "calls",
    "to": 80
  }, {
    "from": 70,
    "label": "calls",
    "to": 80
  }, {
    "from": 70,
    "label": "calls",
    "to": 80
  }, {
    "from": 70,
    "label": "calls",
    "to": 77
  }, {
    "from": 70,
    "label": "calls",
    "to": 84
  }, {
    "from": 70,
    "label": "calls",
    "to": 84
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 71
  }, {
    "from": 70,
    "label": "calls",
    "to": 81
  }, {
    "from": 70,
    "label": "calls",
    "to": 81
  }, {
    "from": 70,
    "label": "calls",
    "to": 81
  }, {
    "from": 70,
    "label": "calls",
    "to": 81
  }, {
    "from": 70,
    "label": "calls",
    "to": 81
  }, {
    "from": 70,
    "label": "calls",
    "to": 81
  }, {
    "from": 70,
    "label": "calls",
    "to": 73
  }, {
    "from": 70,
    "label": "calls",
    "to": 73
  }, {
    "from": 70,
    "label": "calls",
    "to": 78
  }, {
    "from": 70,
    "label": "calls",
    "to": 78
  }, {
    "from": 70,
    "label": "calls",
    "to": 85
  }, {
    "from": 70,
    "label": "calls",
    "to": 85
  }, {
    "from": 70,
    "label": "calls",
    "to": 85
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 70,
    "label": "declares",
    "to": 3
  }, {
    "from": 70,
    "label": "declares",
    "to": 8
  }, {
    "from": 70,
    "label": "declares",
    "to": 12
  }, {
    "from": 70,
    "label": "declares",
    "to": 24
  }, {
    "from": 70,
    "label": "declares",
    "to": 33
  }, {
    "from": 70,
    "label": "declares",
    "to": 38
  }, {
    "from": 70,
    "label": "declares",
    "to": 49
  }, {
    "from": 70,
    "label": "declares",
    "to": 56
  }, {
    "from": 70,
    "label": "declares",
    "to": 62
  }, {
    "from": 1,
    "label": "contains",
    "to": 88
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 88,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 88,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 88,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 95,
    "label": "assigns",
    "to": 97
  }, {
    "from": 95,
    "label": "assigns",
    "to": 98
  }, {
    "from": 95,
    "label": "assigns",
    "to": 99
  }, {
    "from": 95,
    "label": "assigns",
    "to": 100
  }, {
    "from": 95,
    "label": "assigns",
    "to": 101
  }, {
    "from": 95,
    "label": "assigns",
    "to": 102
  }, {
    "from": 95,
    "label": "assigns",
    "to": 103
  }, {
    "from": 95,
    "label": "assigns",
    "to": 104
  }, {
    "from": 88,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 88,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 88,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 89,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 2
  }, {
    "from": 89,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 75
  }, {
    "from": 89,
    "label": "initializes",
    "to": 87
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 49
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 49
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 56
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "handshake_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "handshake",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n        local sec_websocket_key = \"dGhlIHNhbXBsZSBub25jZQ==\"\r\n        local accept = handshake.sec_websocket_accept(sec_websocket_key)\r\n        assert.is_same(accept,\"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\")\r\n      end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local sec_websocket_key = \"dGhlIHNhbXBsZSBub25jZQ==\"",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local accept = handshake.sec_websocket_accept(sec_websocket_key)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "assert.is_same(accept,\"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n        local req = handshake.upgrade_request\r\n        {\r\n          key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n          host = 'server.example.com',\r\n          origin = 'http://example.com',\r\n          protocols = {'chat','superchat'},\r\n          uri = '/chat'\r\n        }\r\n        assert.is_same(req,request_header)\r\n      end",
    "type": "function"
  }, {
    "id": 9,
    "text": "local req = handshake.upgrade_request\r\n        {\r\n          key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n          host = 'server.example.com',\r\n          origin = 'http://example.com',\r\n          protocols = {'chat','superchat'},\r\n          uri = '/chat'\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "assert.is_same(req,request_header)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n        local headers,remainder = handshake.http_headers(request_header..'foo')\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-key'],'dGhlIHNhbXBsZSBub25jZQ==')\r\n        assert.is_same(headers['sec-websocket-version'],'13')\r\n        assert.is_same(headers['sec-websocket-protocol'],'chat, superchat')\r\n        assert.is_same(headers['origin'],'http://example.com')\r\n        assert.is_same(headers['host'],'server.example.com')\r\n        assert.is_same(remainder,'foo')\r\n      end",
    "type": "function"
  }, {
    "id": 13,
    "text": "local headers,remainder = handshake.http_headers(request_header..'foo')",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "assert.is_same(type(headers),'table')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert.is_same(headers['upgrade'],'websocket')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert.is_same(headers['connection'],'upgrade')",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert.is_same(headers['sec-websocket-key'],'dGhlIHNhbXBsZSBub25jZQ==')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert.is_same(headers['sec-websocket-version'],'13')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.is_same(headers['sec-websocket-protocol'],'chat, superchat')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.is_same(headers['origin'],'http://example.com')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.is_same(headers['host'],'server.example.com')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.is_same(remainder,'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n        local response,protocol = handshake.accept_upgrade(request_header,{'chat'})\r\n        assert.is_same(type(response),'string')\r\n        assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n        assert.is_same(protocol,'chat')\r\n        local headers = handshake.http_headers(response)\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-protocol'],'chat')\r\n        assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n      end",
    "type": "function"
  }, {
    "id": 25,
    "text": "local response,protocol = handshake.accept_upgrade(request_header,{'chat'})",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "assert.is_same(type(response),'string')",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert.is_same(protocol,'chat')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local headers = handshake.http_headers(response)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "assert.is_same(headers['sec-websocket-protocol'],'chat')",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n        local response,protocol = handshake.accept_upgrade(request_header,{'bla'})\r\n        assert.is_same(type(response),'string')\r\n        assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n        assert.is_same(protocol,nil)\r\n        local headers = handshake.http_headers(response)\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-protocol'],nil)\r\n        assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n      end",
    "type": "function"
  }, {
    "id": 34,
    "text": "local response,protocol = handshake.accept_upgrade(request_header,{'bla'})",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "assert.is_same(protocol,nil)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.is_same(headers['sec-websocket-protocol'],nil)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n            sock:connect('localhost',port)\r\n            local req = handshake.upgrade_request\r\n            {\r\n              key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n              host = 'localhost:'..port,\r\n              protocols = {'echo-protocol'},\r\n              origin = 'http://example.com',\r\n              uri = '/'\r\n            }\r\n            sock:send(req)\r\n            local resp = {}\r\n            repeat\r\n              local line,err = sock:receive('*l')\r\n              resp[#resp+1] = line\r\n            until err or line == ''\r\n            assert.is_falsy(err)\r\n            local response = table.concat(resp,'\\r\\n')\r\n            assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n            \r\n            local headers = handshake.http_headers(response)\r\n            assert.is_same(type(headers),'table')\r\n            assert.is_same(headers['upgrade'],'websocket')\r\n            assert.is_same(headers['connection'],'upgrade')\r\n            assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n          end",
    "type": "function"
  }, {
    "id": 39,
    "text": "sock:connect('localhost',port)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "local req = handshake.upgrade_request\r\n            {\r\n              key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n              host = 'localhost:'..port,\r\n              protocols = {'echo-protocol'},\r\n              origin = 'http://example.com',\r\n              uri = '/'\r\n            }",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "sock:send(req)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local resp = {}",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "repeat\r\n              local line,err = sock:receive('*l')\r\n              resp[#resp+1] = line\r\n            until err or line == ''",
    "type": "statement:repeat"
  }, {
    "id": 44,
    "text": "local line,err = sock:receive('*l')",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "resp[#resp+1] = line",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "assert.is_falsy(err)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local response = table.concat(resp,'\\r\\n')",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function()\r\n            -- from rfc doc\r\n            local hello_unmasked = bytes(0x81,0x05,0x48,0x65,0x6c,0x6c,0x6f)\r\n            local hello_masked = bytes(0x81,0x85,0x37,0xfa,0x21,0x3d,0x7f,0x9f,0x4d,0x51,0x58)\r\n            -- the client MUST send masked\r\n            sock:send(hello_masked)\r\n            local resp,err = sock:receive(#hello_unmasked)\r\n            assert.is_falsy(err)\r\n            -- the server answers unmasked\r\n            assert.is_same(resp,hello_unmasked)\r\n          end",
    "type": "function"
  }, {
    "id": 50,
    "text": "local hello_unmasked = bytes(0x81,0x05,0x48,0x65,0x6c,0x6c,0x6f)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local hello_masked = bytes(0x81,0x85,0x37,0xfa,0x21,0x3d,0x7f,0x9f,0x4d,0x51,0x58)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "sock:send(hello_masked)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local resp,err = sock:receive(#hello_unmasked)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "assert.is_same(resp,hello_unmasked)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n        local sock = socket.tcp()\r\n        sock:settimeout(0.3)\r\n        \r\n        it(\r\n          'can connect and upgrade to websocket protocol',\r\n          function()\r\n            sock:connect('localhost',port)\r\n            local req = handshake.upgrade_request\r\n            {\r\n              key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n              host = 'localhost:'..port,\r\n              protocols = {'echo-protocol'},\r\n              origin = 'http://example.com',\r\n              uri = '/'\r\n            }\r\n            sock:send(req)\r\n            local resp = {}\r\n            repeat\r\n              local line,err = sock:receive('*l')\r\n              resp[#resp+1] = line\r\n            until err or line == ''\r\n            assert.is_falsy(err)\r\n            local response = table.concat(resp,'\\r\\n')\r\n            assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n            \r\n            local headers = handshake.http_headers(response)\r\n            assert.is_same(type(headers),'table')\r\n            assert.is_same(headers['upgrade'],'websocket')\r\n            assert.is_same(headers['connection'],'upgrade')\r\n            assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n          end)\r\n        \r\n        \r\n        it(\r\n          'and can send and receive frames',\r\n          function()\r\n            -- from rfc doc\r\n            local hello_unmasked = bytes(0x81,0x05,0x48,0x65,0x6c,0x6c,0x6f)\r\n            local hello_masked = bytes(0x81,0x85,0x37,0xfa,0x21,0x3d,0x7f,0x9f,0x4d,0x51,0x58)\r\n            -- the client MUST send masked\r\n            sock:send(hello_masked)\r\n            local resp,err = sock:receive(#hello_unmasked)\r\n            assert.is_falsy(err)\r\n            -- the server answers unmasked\r\n            assert.is_same(resp,hello_unmasked)\r\n          end)\r\n      end",
    "type": "function"
  }, {
    "id": 57,
    "text": "local sock = socket.tcp()",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "sock:settimeout(0.3)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "it(\r\n          'can connect and upgrade to websocket protocol',\r\n          function()\r\n            sock:connect('localhost',port)\r\n            local req = handshake.upgrade_request\r\n            {\r\n              key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n              host = 'localhost:'..port,\r\n              protocols = {'echo-protocol'},\r\n              origin = 'http://example.com',\r\n              uri = '/'\r\n            }\r\n            sock:send(req)\r\n            local resp = {}\r\n            repeat\r\n              local line,err = sock:receive('*l')\r\n              resp[#resp+1] = line\r\n            until err or line == ''\r\n            assert.is_falsy(err)\r\n            local response = table.concat(resp,'\\r\\n')\r\n            assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n            \r\n            local headers = handshake.http_headers(response)\r\n            assert.is_same(type(headers),'table')\r\n            assert.is_same(headers['upgrade'],'websocket')\r\n            assert.is_same(headers['connection'],'upgrade')\r\n            assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "it(\r\n          'and can send and receive frames',\r\n          function()\r\n            -- from rfc doc\r\n            local hello_unmasked = bytes(0x81,0x05,0x48,0x65,0x6c,0x6c,0x6f)\r\n            local hello_masked = bytes(0x81,0x85,0x37,0xfa,0x21,0x3d,0x7f,0x9f,0x4d,0x51,0x58)\r\n            -- the client MUST send masked\r\n            sock:send(hello_masked)\r\n            local resp,err = sock:receive(#hello_unmasked)\r\n            assert.is_falsy(err)\r\n            -- the server answers unmasked\r\n            assert.is_same(resp,hello_unmasked)\r\n          end)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function()\r\n    it(\r\n      'RFC 1.3: calculate the correct accept sum',\r\n      function()\r\n        local sec_websocket_key = \"dGhlIHNhbXBsZSBub25jZQ==\"\r\n        local accept = handshake.sec_websocket_accept(sec_websocket_key)\r\n        assert.is_same(accept,\"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\")\r\n      end)\r\n    \r\n    it(\r\n      'can create handshake header',\r\n      function()\r\n        local req = handshake.upgrade_request\r\n        {\r\n          key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n          host = 'server.example.com',\r\n          origin = 'http://example.com',\r\n          protocols = {'chat','superchat'},\r\n          uri = '/chat'\r\n        }\r\n        assert.is_same(req,request_header)\r\n      end)\r\n    \r\n    it(\r\n      'can parse handshake header',\r\n      function()\r\n        local headers,remainder = handshake.http_headers(request_header..'foo')\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-key'],'dGhlIHNhbXBsZSBub25jZQ==')\r\n        assert.is_same(headers['sec-websocket-version'],'13')\r\n        assert.is_same(headers['sec-websocket-protocol'],'chat, superchat')\r\n        assert.is_same(headers['origin'],'http://example.com')\r\n        assert.is_same(headers['host'],'server.example.com')\r\n        assert.is_same(remainder,'foo')\r\n      end)\r\n    \r\n    it(\r\n      'generates correct upgrade response',\r\n      function()\r\n        local response,protocol = handshake.accept_upgrade(request_header,{'chat'})\r\n        assert.is_same(type(response),'string')\r\n        assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n        assert.is_same(protocol,'chat')\r\n        local headers = handshake.http_headers(response)\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-protocol'],'chat')\r\n        assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n      end)\r\n    \r\n    it(\r\n      'generates correct upgrade response for unsupported protocol',\r\n      function()\r\n        local response,protocol = handshake.accept_upgrade(request_header,{'bla'})\r\n        assert.is_same(type(response),'string')\r\n        assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n        assert.is_same(protocol,nil)\r\n        local headers = handshake.http_headers(response)\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-protocol'],nil)\r\n        assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n      end)\r\n    \r\n    describe(\r\n      'connecting to echo server (echo-js.ws) on port 8081',\r\n      function()\r\n        local sock = socket.tcp()\r\n        sock:settimeout(0.3)\r\n        \r\n        it(\r\n          'can connect and upgrade to websocket protocol',\r\n          function()\r\n            sock:connect('localhost',port)\r\n            local req = handshake.upgrade_request\r\n            {\r\n              key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n              host = 'localhost:'..port,\r\n              protocols = {'echo-protocol'},\r\n              origin = 'http://example.com',\r\n              uri = '/'\r\n            }\r\n            sock:send(req)\r\n            local resp = {}\r\n            repeat\r\n              local line,err = sock:receive('*l')\r\n              resp[#resp+1] = line\r\n            until err or line == ''\r\n            assert.is_falsy(err)\r\n            local response = table.concat(resp,'\\r\\n')\r\n            assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n            \r\n            local headers = handshake.http_headers(response)\r\n            assert.is_same(type(headers),'table')\r\n            assert.is_same(headers['upgrade'],'websocket')\r\n            assert.is_same(headers['connection'],'upgrade')\r\n            assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n          end)\r\n        \r\n        \r\n        it(\r\n          'and can send and receive frames',\r\n          function()\r\n            -- from rfc doc\r\n            local hello_unmasked = bytes(0x81,0x05,0x48,0x65,0x6c,0x6c,0x6f)\r\n            local hello_masked = bytes(0x81,0x85,0x37,0xfa,0x21,0x3d,0x7f,0x9f,0x4d,0x51,0x58)\r\n            -- the client MUST send masked\r\n            sock:send(hello_masked)\r\n            local resp,err = sock:receive(#hello_unmasked)\r\n            assert.is_falsy(err)\r\n            -- the server answers unmasked\r\n            assert.is_same(resp,hello_unmasked)\r\n          end)\r\n      end)\r\n  end",
    "type": "function"
  }, {
    "id": 63,
    "text": "it(\r\n      'RFC 1.3: calculate the correct accept sum',\r\n      function()\r\n        local sec_websocket_key = \"dGhlIHNhbXBsZSBub25jZQ==\"\r\n        local accept = handshake.sec_websocket_accept(sec_websocket_key)\r\n        assert.is_same(accept,\"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\")\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "it(\r\n      'can create handshake header',\r\n      function()\r\n        local req = handshake.upgrade_request\r\n        {\r\n          key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n          host = 'server.example.com',\r\n          origin = 'http://example.com',\r\n          protocols = {'chat','superchat'},\r\n          uri = '/chat'\r\n        }\r\n        assert.is_same(req,request_header)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "it(\r\n      'can parse handshake header',\r\n      function()\r\n        local headers,remainder = handshake.http_headers(request_header..'foo')\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-key'],'dGhlIHNhbXBsZSBub25jZQ==')\r\n        assert.is_same(headers['sec-websocket-version'],'13')\r\n        assert.is_same(headers['sec-websocket-protocol'],'chat, superchat')\r\n        assert.is_same(headers['origin'],'http://example.com')\r\n        assert.is_same(headers['host'],'server.example.com')\r\n        assert.is_same(remainder,'foo')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "it(\r\n      'generates correct upgrade response',\r\n      function()\r\n        local response,protocol = handshake.accept_upgrade(request_header,{'chat'})\r\n        assert.is_same(type(response),'string')\r\n        assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n        assert.is_same(protocol,'chat')\r\n        local headers = handshake.http_headers(response)\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-protocol'],'chat')\r\n        assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "it(\r\n      'generates correct upgrade response for unsupported protocol',\r\n      function()\r\n        local response,protocol = handshake.accept_upgrade(request_header,{'bla'})\r\n        assert.is_same(type(response),'string')\r\n        assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n        assert.is_same(protocol,nil)\r\n        local headers = handshake.http_headers(response)\r\n        assert.is_same(type(headers),'table')\r\n        assert.is_same(headers['upgrade'],'websocket')\r\n        assert.is_same(headers['connection'],'upgrade')\r\n        assert.is_same(headers['sec-websocket-protocol'],nil)\r\n        assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "describe(\r\n      'connecting to echo server (echo-js.ws) on port 8081',\r\n      function()\r\n        local sock = socket.tcp()\r\n        sock:settimeout(0.3)\r\n        \r\n        it(\r\n          'can connect and upgrade to websocket protocol',\r\n          function()\r\n            sock:connect('localhost',port)\r\n            local req = handshake.upgrade_request\r\n            {\r\n              key = 'dGhlIHNhbXBsZSBub25jZQ==',\r\n              host = 'localhost:'..port,\r\n              protocols = {'echo-protocol'},\r\n              origin = 'http://example.com',\r\n              uri = '/'\r\n            }\r\n            sock:send(req)\r\n            local resp = {}\r\n            repeat\r\n              local line,err = sock:receive('*l')\r\n              resp[#resp+1] = line\r\n            until err or line == ''\r\n            assert.is_falsy(err)\r\n            local response = table.concat(resp,'\\r\\n')\r\n            assert.is_truthy(response:match('^HTTP/1.1 101 Switching Protocols\\r\\n'))\r\n            \r\n            local headers = handshake.http_headers(response)\r\n            assert.is_same(type(headers),'table')\r\n            assert.is_same(headers['upgrade'],'websocket')\r\n            assert.is_same(headers['connection'],'upgrade')\r\n            assert.is_same(headers['sec-websocket-accept'],'s3pPLMBiTxaQ9kYGzzhZRbK+xOo=')\r\n          end)\r\n        \r\n        \r\n        it(\r\n          'and can send and receive frames',\r\n          function()\r\n            -- from rfc doc\r\n            local hello_unmasked = bytes(0x81,0x05,0x48,0x65,0x6c,0x6c,0x6f)\r\n            local hello_masked = bytes(0x81,0x85,0x37,0xfa,0x21,0x3d,0x7f,0x9f,0x4d,0x51,0x58)\r\n            -- the client MUST send masked\r\n            sock:send(hello_masked)\r\n            local resp,err = sock:receive(#hello_unmasked)\r\n            assert.is_falsy(err)\r\n            -- the server answers unmasked\r\n            assert.is_same(resp,hello_unmasked)\r\n          end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "",
    "type": "function container"
  }, {
    "id": 71,
    "text": "function(sec_websocket_key)\r\n  local a = sec_websocket_key..guid\r\n  local sha1 = sha1(a)\r\n  assert((#sha1 % 2) == 0)\r\n  return base64.encode(sha1)\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "function(request)\r\n  local headers = {}\r\n  if not request:match('.*HTTP/1%.1') then\r\n    return\r\n  end\r\n  request = request:match('[^\\r\\n]+\\r\\n(.*)')\r\n  local empty_line\r\n  for line in request:gmatch('[^\\r\\n]*\\r\\n') do\r\n    local name,val = line:match('([^%s]+)%s*:%s*([^\\r\\n]+)')\r\n    if name and val then\r\n      name = name:lower()\r\n      if not name:match('sec%-websocket') then\r\n        val = val:lower()\r\n      end\r\n      if not headers[name] then\r\n        headers[name] = val\r\n      else\r\n        headers[name] = headers[name]..','..val\r\n      end\r\n    elseif line == '\\r\\n' then\r\n      empty_line = true\r\n    else\r\n      assert(false,line..'('..#line..')')\r\n    end\r\n  end\r\n  return headers,request:match('\\r\\n\\r\\n(.*)')\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "function(req)\r\n  local format = string.format\r\n  local lines = {\r\n    format('GET %s HTTP/1.1',req.uri or ''),\r\n    format('Host: %s',req.host),\r\n    'Upgrade: websocket',\r\n    'Connection: Upgrade',\r\n    format('Sec-WebSocket-Key: %s',req.key),\r\n    format('Sec-WebSocket-Protocol: %s',table.concat(req.protocols,', ')),\r\n    'Sec-WebSocket-Version: 13',\r\n  }\r\n  if req.origin then\r\n    tinsert(lines,string.format('Origin: %s',req.origin))\r\n  end\r\n  if req.port and req.port ~= 80 then\r\n    lines[2] = format('Host: %s:%d',req.host,req.port)\r\n  end\r\n  tinsert(lines,'\\r\\n')\r\n  return table.concat(lines,'\\r\\n')\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "function(request,protocols)\r\n  local headers = http_headers(request)\r\n  if headers['upgrade'] ~= 'websocket' or\r\n  not headers['connection'] or\r\n  not headers['connection']:match('upgrade') or\r\n  headers['sec-websocket-key'] == nil or\r\n  headers['sec-websocket-version'] ~= '13' then\r\n    return nil,'HTTP/1.1 400 Bad Request\\r\\n\\r\\n'\r\n  end\r\n  local prot\r\n  if headers['sec-websocket-protocol'] then\r\n    for protocol in headers['sec-websocket-protocol']:gmatch('([^,%s]+)%s?,?') do\r\n      for _,supported in ipairs(protocols) do\r\n        if supported == protocol then\r\n          prot = protocol\r\n          break\r\n        end\r\n      end\r\n      if prot then\r\n        break\r\n      end\r\n    end\r\n  end\r\n  local lines = {\r\n    'HTTP/1.1 101 Switching Protocols',\r\n    'Upgrade: websocket',\r\n    'Connection: '..headers['connection'],\r\n    string.format('Sec-Websocket-Accept: %s',sec_websocket_accept(headers['sec-websocket-key'])),\r\n  }\r\n  if prot then\r\n    tinsert(lines,string.format('Sec-Websocket-Protocol: %s',prot))\r\n  end\r\n  tinsert(lines,'\\r\\n')\r\n  return table.concat(lines,'\\r\\n'),prot\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "socket",
    "type": "module"
  }, {
    "id": 76,
    "text": "tcp",
    "type": "global function"
  }, {
    "id": 77,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 78,
    "text": "is_falsy",
    "type": "global function"
  }, {
    "id": 79,
    "text": "is_truthy",
    "type": "global function"
  }, {
    "id": 80,
    "text": "it",
    "type": "global function"
  }, {
    "id": 81,
    "text": "type",
    "type": "global function"
  }, {
    "id": 82,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 83,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 84,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 85,
    "text": "require",
    "type": "global function"
  }, {
    "id": 86,
    "text": "bytes",
    "type": "global function"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "variable container"
  }, {
    "id": 89,
    "text": "",
    "type": "require container"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 96,
    "text": "",
    "type": "string"
  }, {
    "id": 97,
    "text": "",
    "type": "string"
  }, {
    "id": 98,
    "text": "",
    "type": "string"
  }, {
    "id": 99,
    "text": "",
    "type": "string"
  }, {
    "id": 100,
    "text": "",
    "type": "string"
  }, {
    "id": 101,
    "text": "",
    "type": "string"
  }, {
    "id": 102,
    "text": "",
    "type": "string"
  }, {
    "id": 103,
    "text": "",
    "type": "string"
  }, {
    "id": 104,
    "text": "",
    "type": "string"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  } ]
}