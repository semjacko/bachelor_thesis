{
  "_filename": "handshake.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-websockets/src/websocket/handshake.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "calls",
    "to": 38
  }, {
    "from": 3,
    "label": "calls",
    "to": 38
  }, {
    "from": 3,
    "label": "calls",
    "to": 12
  }, {
    "from": 3,
    "label": "calls",
    "to": 12
  }, {
    "from": 3,
    "label": "calls",
    "to": 12
  }, {
    "from": 3,
    "label": "calls",
    "to": 12
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 3,
    "label": "calls",
    "to": 29
  }, {
    "from": 3,
    "label": "calls",
    "to": 29
  }, {
    "from": 4,
    "label": "calls",
    "to": 12
  }, {
    "from": 4,
    "label": "calls",
    "to": 6
  }, {
    "from": 4,
    "label": "calls",
    "to": 29
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 10
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 10
  }, {
    "from": 38,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 52,
    "label": "calls",
    "to": 5
  }, {
    "from": 52,
    "label": "calls",
    "to": 56
  }, {
    "from": 52,
    "label": "calls",
    "to": 56
  }, {
    "from": 52,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 57
  }, {
    "from": 52,
    "label": "calls",
    "to": 61
  }, {
    "from": 52,
    "label": "calls",
    "to": 61
  }, {
    "from": 52,
    "label": "calls",
    "to": 61
  }, {
    "from": 52,
    "label": "calls",
    "to": 6
  }, {
    "from": 52,
    "label": "calls",
    "to": 12
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 63
  }, {
    "from": 52,
    "label": "calls",
    "to": 63
  }, {
    "from": 52,
    "label": "calls",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 52,
    "label": "declares",
    "to": 6
  }, {
    "from": 52,
    "label": "declares",
    "to": 12
  }, {
    "from": 52,
    "label": "declares",
    "to": 29
  }, {
    "from": 52,
    "label": "declares",
    "to": 38
  }, {
    "from": 53,
    "label": "calls",
    "to": 38
  }, {
    "from": 54,
    "label": "calls",
    "to": 38
  }, {
    "from": 55,
    "label": "calls",
    "to": 12
  }, {
    "from": 55,
    "label": "calls",
    "to": 29
  }, {
    "from": 55,
    "label": "calls",
    "to": 6
  }, {
    "from": 65,
    "label": "requires",
    "to": 1
  }, {
    "from": 66,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 68
  }, {
    "from": 67,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 67,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 67,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 67,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 67,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 67,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 68,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 2
  }, {
    "from": 68,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "requires",
    "to": 2
  }, {
    "from": 68,
    "label": "initializes",
    "to": 64
  }, {
    "from": 1,
    "label": "provides",
    "to": 83
  }, {
    "from": 73,
    "label": "represents",
    "to": 84
  }, {
    "from": 83,
    "label": "provides",
    "to": 84
  }, {
    "from": 75,
    "label": "represents",
    "to": 85
  }, {
    "from": 83,
    "label": "provides",
    "to": 85
  }, {
    "from": 79,
    "label": "represents",
    "to": 86
  }, {
    "from": 83,
    "label": "provides",
    "to": 86
  }, {
    "from": 77,
    "label": "represents",
    "to": 87
  }, {
    "from": 83,
    "label": "provides",
    "to": 87
  }, {
    "from": 88,
    "label": "requires",
    "to": 1
  }, {
    "from": 89,
    "label": "requires",
    "to": 1
  }, {
    "from": 90,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "handshake",
    "type": "module"
  }, {
    "id": 2,
    "text": "tools",
    "type": "module"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "function(data,opcode,masked,fin)\r\n  local encoded\r\n  local header = opcode or 1-- TEXT is default opcode\r\n  if fin == nil or fin == true then\r\n    header = bor(header,bit_7)\r\n  end\r\n  local payload = 0\r\n  if masked then\r\n    payload = bor(payload,bit_7)\r\n  end\r\n  local len = #data\r\n  if len < 126 then\r\n    payload = bor(payload,len)\r\n    encoded = spack('bb',header,payload)\r\n  elseif len < 0xffff then\r\n    payload = bor(payload,126)\r\n    encoded = spack('bb>H',header,payload,len)\r\n  elseif len < 2^53 then\r\n    local high = math.floor(len/2^32)\r\n    local low = len - high*2^32\r\n    payload = bor(payload,127)\r\n    encoded = spack('bb>I>I',header,payload,high,low)\r\n  end\r\n  if not masked then\r\n    encoded = encoded..data\r\n  else\r\n    local m1 = math.random(0,0xff)\r\n    local m2 = math.random(0,0xff)\r\n    local m3 = math.random(0,0xff)\r\n    local m4 = math.random(0,0xff)\r\n    local mask = {m1,m2,m3,m4}\r\n    encoded = encoded..spack('bbbb',m1,m2,m3,m4)\r\n    encoded = encoded..xor_mask(data,mask,#data)\r\n  end\r\n  return encoded\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function(sec_websocket_key)\r\n  local a = sec_websocket_key..guid\r\n  local sha1 = sha1(a)\r\n  assert((#sha1 % 2) == 0)\r\n  return base64.encode(sha1)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local a = sec_websocket_key..guid",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local sha1 = sha1(a)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "assert((#sha1 % 2) == 0)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function(request)\r\n  local headers = {}\r\n  if not request:match('.*HTTP/1%.1') then\r\n    return\r\n  end\r\n  request = request:match('[^\\r\\n]+\\r\\n(.*)')\r\n  local empty_line\r\n  for line in request:gmatch('[^\\r\\n]*\\r\\n') do\r\n    local name,val = line:match('([^%s]+)%s*:%s*([^\\r\\n]+)')\r\n    if name and val then\r\n      name = name:lower()\r\n      if not name:match('sec%-websocket') then\r\n        val = val:lower()\r\n      end\r\n      if not headers[name] then\r\n        headers[name] = val\r\n      else\r\n        headers[name] = headers[name]..','..val\r\n      end\r\n    elseif line == '\\r\\n' then\r\n      empty_line = true\r\n    else\r\n      assert(false,line..'('..#line..')')\r\n    end\r\n  end\r\n  return headers,request:match('\\r\\n\\r\\n(.*)')\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local headers = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if not request:match('.*HTTP/1%.1') then\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "request = request:match('[^\\r\\n]+\\r\\n(.*)')",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "local empty_line",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for line in request:gmatch('[^\\r\\n]*\\r\\n') do\r\n    local name,val = line:match('([^%s]+)%s*:%s*([^\\r\\n]+)')\r\n    if name and val then\r\n      name = name:lower()\r\n      if not name:match('sec%-websocket') then\r\n        val = val:lower()\r\n      end\r\n      if not headers[name] then\r\n        headers[name] = val\r\n      else\r\n        headers[name] = headers[name]..','..val\r\n      end\r\n    elseif line == '\\r\\n' then\r\n      empty_line = true\r\n    else\r\n      assert(false,line..'('..#line..')')\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "local name,val = line:match('([^%s]+)%s*:%s*([^\\r\\n]+)')",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if name and val then\r\n      name = name:lower()\r\n      if not name:match('sec%-websocket') then\r\n        val = val:lower()\r\n      end\r\n      if not headers[name] then\r\n        headers[name] = val\r\n      else\r\n        headers[name] = headers[name]..','..val\r\n      end\r\n    elseif line == '\\r\\n' then\r\n      empty_line = true\r\n    else\r\n      assert(false,line..'('..#line..')')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "name = name:lower()",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if not name:match('sec%-websocket') then\r\n        val = val:lower()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "val = val:lower()",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if not headers[name] then\r\n        headers[name] = val\r\n      else\r\n        headers[name] = headers[name]..','..val\r\n      end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "headers[name] = val",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "headers[name] = headers[name]..','..val",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "empty_line = true",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "assert(false,line..'('..#line..')')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function(req)\r\n  local format = string.format\r\n  local lines = {\r\n    format('GET %s HTTP/1.1',req.uri or ''),\r\n    format('Host: %s',req.host),\r\n    'Upgrade: websocket',\r\n    'Connection: Upgrade',\r\n    format('Sec-WebSocket-Key: %s',req.key),\r\n    format('Sec-WebSocket-Protocol: %s',table.concat(req.protocols,', ')),\r\n    'Sec-WebSocket-Version: 13',\r\n  }\r\n  if req.origin then\r\n    tinsert(lines,string.format('Origin: %s',req.origin))\r\n  end\r\n  if req.port and req.port ~= 80 then\r\n    lines[2] = format('Host: %s:%d',req.host,req.port)\r\n  end\r\n  tinsert(lines,'\\r\\n')\r\n  return table.concat(lines,'\\r\\n')\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local format = string.format",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local lines = {\r\n    format('GET %s HTTP/1.1',req.uri or ''),\r\n    format('Host: %s',req.host),\r\n    'Upgrade: websocket',\r\n    'Connection: Upgrade',\r\n    format('Sec-WebSocket-Key: %s',req.key),\r\n    format('Sec-WebSocket-Protocol: %s',table.concat(req.protocols,', ')),\r\n    'Sec-WebSocket-Version: 13',\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if req.origin then\r\n    tinsert(lines,string.format('Origin: %s',req.origin))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "tinsert(lines,string.format('Origin: %s',req.origin))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "if req.port and req.port ~= 80 then\r\n    lines[2] = format('Host: %s:%d',req.host,req.port)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "lines[2] = format('Host: %s:%d',req.host,req.port)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "tinsert(lines,'\\r\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function(request,protocols)\r\n  local headers = http_headers(request)\r\n  if headers['upgrade'] ~= 'websocket' or\r\n  not headers['connection'] or\r\n  not headers['connection']:match('upgrade') or\r\n  headers['sec-websocket-key'] == nil or\r\n  headers['sec-websocket-version'] ~= '13' then\r\n    return nil,'HTTP/1.1 400 Bad Request\\r\\n\\r\\n'\r\n  end\r\n  local prot\r\n  if headers['sec-websocket-protocol'] then\r\n    for protocol in headers['sec-websocket-protocol']:gmatch('([^,%s]+)%s?,?') do\r\n      for _,supported in ipairs(protocols) do\r\n        if supported == protocol then\r\n          prot = protocol\r\n          break\r\n        end\r\n      end\r\n      if prot then\r\n        break\r\n      end\r\n    end\r\n  end\r\n  local lines = {\r\n    'HTTP/1.1 101 Switching Protocols',\r\n    'Upgrade: websocket',\r\n    'Connection: '..headers['connection'],\r\n    string.format('Sec-Websocket-Accept: %s',sec_websocket_accept(headers['sec-websocket-key'])),\r\n  }\r\n  if prot then\r\n    tinsert(lines,string.format('Sec-Websocket-Protocol: %s',prot))\r\n  end\r\n  tinsert(lines,'\\r\\n')\r\n  return table.concat(lines,'\\r\\n'),prot\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local headers = http_headers(request)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if headers['upgrade'] ~= 'websocket' or\r\n  not headers['connection'] or\r\n  not headers['connection']:match('upgrade') or\r\n  headers['sec-websocket-key'] == nil or\r\n  headers['sec-websocket-version'] ~= '13' then\r\n    return nil,'HTTP/1.1 400 Bad Request\\r\\n\\r\\n'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "local prot",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if headers['sec-websocket-protocol'] then\r\n    for protocol in headers['sec-websocket-protocol']:gmatch('([^,%s]+)%s?,?') do\r\n      for _,supported in ipairs(protocols) do\r\n        if supported == protocol then\r\n          prot = protocol\r\n          break\r\n        end\r\n      end\r\n      if prot then\r\n        break\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "for protocol in headers['sec-websocket-protocol']:gmatch('([^,%s]+)%s?,?') do\r\n      for _,supported in ipairs(protocols) do\r\n        if supported == protocol then\r\n          prot = protocol\r\n          break\r\n        end\r\n      end\r\n      if prot then\r\n        break\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "for _,supported in ipairs(protocols) do\r\n        if supported == protocol then\r\n          prot = protocol\r\n          break\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "if supported == protocol then\r\n          prot = protocol\r\n          break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "prot = protocol",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if prot then\r\n        break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local lines = {\r\n    'HTTP/1.1 101 Switching Protocols',\r\n    'Upgrade: websocket',\r\n    'Connection: '..headers['connection'],\r\n    string.format('Sec-Websocket-Accept: %s',sec_websocket_accept(headers['sec-websocket-key'])),\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if prot then\r\n    tinsert(lines,string.format('Sec-Websocket-Protocol: %s',prot))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "tinsert(lines,string.format('Sec-Websocket-Protocol: %s',prot))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "",
    "type": "function container"
  }, {
    "id": 53,
    "text": "",
    "type": "function container"
  }, {
    "id": 54,
    "text": "",
    "type": "function container"
  }, {
    "id": 55,
    "text": "",
    "type": "function container"
  }, {
    "id": 56,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 57,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 58,
    "text": "sha1",
    "type": "global function"
  }, {
    "id": 59,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 60,
    "text": "format",
    "type": "global function"
  }, {
    "id": 61,
    "text": "require",
    "type": "global function"
  }, {
    "id": 62,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 63,
    "text": "format",
    "type": "global function"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "variable container"
  }, {
    "id": 68,
    "text": "",
    "type": "require container"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "string"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "interface container"
  }, {
    "id": 84,
    "text": "",
    "type": "interface"
  }, {
    "id": 85,
    "text": "",
    "type": "interface"
  }, {
    "id": 86,
    "text": "",
    "type": "interface"
  }, {
    "id": 87,
    "text": "",
    "type": "interface"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  } ]
}