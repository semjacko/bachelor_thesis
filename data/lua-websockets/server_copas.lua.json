{
  "_filename": "server_copas.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-websockets/src/websocket/server_copas.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 8
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 14
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 17
  }, {
    "from": 23,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 8
  }, {
    "from": 23,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 24
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 36
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 45,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 14
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 54,
    "label": "has",
    "to": 8
  }, {
    "from": 54,
    "label": "has",
    "to": 8
  }, {
    "from": 54,
    "label": "has",
    "to": 65
  }, {
    "from": 54,
    "label": "has",
    "to": 66
  }, {
    "from": 54,
    "label": "has",
    "to": 67
  }, {
    "from": 54,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 45,
    "label": "has",
    "to": 25
  }, {
    "from": 45,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 38
  }, {
    "from": 75,
    "label": "has",
    "to": 39
  }, {
    "from": 75,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 45,
    "label": "has",
    "to": 8
  }, {
    "from": 45,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 55
  }, {
    "from": 77,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 14
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 77,
    "label": "has",
    "to": 8
  }, {
    "from": 77,
    "label": "has",
    "to": 8
  }, {
    "from": 77,
    "label": "has",
    "to": 65
  }, {
    "from": 77,
    "label": "has",
    "to": 66
  }, {
    "from": 77,
    "label": "has",
    "to": 67
  }, {
    "from": 77,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "calls",
    "to": 6
  }, {
    "from": 79,
    "label": "calls",
    "to": 87
  }, {
    "from": 79,
    "label": "calls",
    "to": 85
  }, {
    "from": 79,
    "label": "calls",
    "to": 84
  }, {
    "from": 79,
    "label": "calls",
    "to": 84
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 93
  }, {
    "from": 79,
    "label": "calls",
    "to": 93
  }, {
    "from": 79,
    "label": "calls",
    "to": 23
  }, {
    "from": 79,
    "label": "calls",
    "to": 23
  }, {
    "from": 79,
    "label": "calls",
    "to": 86
  }, {
    "from": 79,
    "label": "calls",
    "to": 94
  }, {
    "from": 79,
    "label": "calls",
    "to": 80
  }, {
    "from": 79,
    "label": "calls",
    "to": 82
  }, {
    "from": 79,
    "label": "calls",
    "to": 82
  }, {
    "from": 79,
    "label": "calls",
    "to": 88
  }, {
    "from": 79,
    "label": "calls",
    "to": 91
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 92
  }, {
    "from": 79,
    "label": "calls",
    "to": 35
  }, {
    "from": 3,
    "label": "contains",
    "to": 79
  }, {
    "from": 79,
    "label": "declares",
    "to": 7
  }, {
    "from": 79,
    "label": "declares",
    "to": 10
  }, {
    "from": 79,
    "label": "declares",
    "to": 12
  }, {
    "from": 79,
    "label": "declares",
    "to": 16
  }, {
    "from": 79,
    "label": "declares",
    "to": 19
  }, {
    "from": 79,
    "label": "declares",
    "to": 23
  }, {
    "from": 79,
    "label": "declares",
    "to": 35
  }, {
    "from": 79,
    "label": "declares",
    "to": 37
  }, {
    "from": 79,
    "label": "declares",
    "to": 45
  }, {
    "from": 79,
    "label": "declares",
    "to": 77
  }, {
    "from": 3,
    "label": "contains",
    "to": 95
  }, {
    "from": 3,
    "label": "contains",
    "to": 96
  }, {
    "from": 95,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 95,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 95,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 95,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 95,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 96,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "requires",
    "to": 83
  }, {
    "from": 96,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "requires",
    "to": 81
  }, {
    "from": 96,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 5
  }, {
    "from": 96,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 96,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 2
  }, {
    "from": 96,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 4
  }, {
    "from": 96,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "requires",
    "to": 81
  }, {
    "from": 96,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "requires",
    "to": 81
  }, {
    "from": 3,
    "label": "provides",
    "to": 115
  }, {
    "from": 105,
    "label": "represents",
    "to": 116
  }, {
    "from": 115,
    "label": "provides",
    "to": 116
  }, {
    "from": 105,
    "label": "represents",
    "to": 117
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 77
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "frame",
    "type": "module"
  }, {
    "id": 2,
    "text": "handshake",
    "type": "module"
  }, {
    "id": 3,
    "text": "server_copas",
    "type": "module"
  }, {
    "id": 4,
    "text": "sync",
    "type": "module"
  }, {
    "id": 5,
    "text": "tools",
    "type": "module"
  }, {
    "id": 6,
    "text": "function(request,protocols)\r\n  local headers = http_headers(request)\r\n  if headers['upgrade'] ~= 'websocket' or\r\n  not headers['connection'] or\r\n  not headers['connection']:match('upgrade') or\r\n  headers['sec-websocket-key'] == nil or\r\n  headers['sec-websocket-version'] ~= '13' then\r\n    return nil,'HTTP/1.1 400 Bad Request\\r\\n\\r\\n'\r\n  end\r\n  local prot\r\n  if headers['sec-websocket-protocol'] then\r\n    for protocol in headers['sec-websocket-protocol']:gmatch('([^,%s]+)%s?,?') do\r\n      for _,supported in ipairs(protocols) do\r\n        if supported == protocol then\r\n          prot = protocol\r\n          break\r\n        end\r\n      end\r\n      if prot then\r\n        break\r\n      end\r\n    end\r\n  end\r\n  local lines = {\r\n    'HTTP/1.1 101 Switching Protocols',\r\n    'Upgrade: websocket',\r\n    'Connection: '..headers['connection'],\r\n    string.format('Sec-Websocket-Accept: %s',sec_websocket_accept(headers['sec-websocket-key'])),\r\n  }\r\n  if prot then\r\n    tinsert(lines,string.format('Sec-Websocket-Protocol: %s',prot))\r\n  end\r\n  tinsert(lines,'\\r\\n')\r\n  return table.concat(lines,'\\r\\n'),prot\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function(self,...)\r\n    return copas.send(sock,...)\r\n  end",
    "type": "function"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function(self,...)\r\n    return copas.receive(sock,...)\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function(self)\r\n    sock:shutdown()\r\n    sock:close()\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "sock:shutdown()",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "sock:close()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function(self)\r\n    clients[protocol][self] = nil\r\n  end",
    "type": "function"
  }, {
    "id": 17,
    "text": "clients[protocol][self] = nil",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function(_,...)\r\n    for client in pairs(clients[protocol]) do\r\n      client:send(...)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 20,
    "text": "for client in pairs(clients[protocol]) do\r\n      client:send(...)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "client:send(...)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function(sock,protocol)\r\n  local copas = require'copas'\r\n  \r\n  local self = {}\r\n  \r\n  self.state = 'OPEN'\r\n  self.is_server = true\r\n  \r\n  self.sock_send = function(self,...)\r\n    return copas.send(sock,...)\r\n  end\r\n  \r\n  self.sock_receive = function(self,...)\r\n    return copas.receive(sock,...)\r\n  end\r\n  \r\n  self.sock_close = function(self)\r\n    sock:shutdown()\r\n    sock:close()\r\n  end\r\n  \r\n  self = sync.extend(self)\r\n  \r\n  self.on_close = function(self)\r\n    clients[protocol][self] = nil\r\n  end\r\n  \r\n  self.broadcast = function(_,...)\r\n    for client in pairs(clients[protocol]) do\r\n      client:send(...)\r\n    end\r\n  end\r\n  \r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local copas = require'copas'",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local self = {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "self.state = 'OPEN'",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "self.is_server = true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "self.sock_send = function(self,...)\r\n    return copas.send(sock,...)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "self.sock_receive = function(self,...)\r\n    return copas.receive(sock,...)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "self.sock_close = function(self)\r\n    sock:shutdown()\r\n    sock:close()\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "self = sync.extend(self)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "self.on_close = function(self)\r\n    clients[protocol][self] = nil\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "self.broadcast = function(_,...)\r\n    for client in pairs(clients[protocol]) do\r\n      client:send(...)\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(s) print(s) end",
    "type": "function"
  }, {
    "id": 36,
    "text": "print(s)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "function(keep_clients)\r\n    listener:close()\r\n    listener = nil\r\n    if not keep_clients then\r\n      for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "listener:close()",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "listener = nil",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if not keep_clients then\r\n      for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "for client in pairs(clients) do\r\n          client:close()\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 43,
    "text": "client:close()",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function(opts)\r\n  local copas = require'copas'\r\n  assert(opts and (opts.protocols or opts.default))\r\n  local on_error = opts.on_error or function(s) print(s) end\r\n  local listener = socket.bind(opts.interface or '*',opts.port or 80)\r\n  local protocols = {}\r\n  if opts.protocols then\r\n    for protocol in pairs(opts.protocols) do\r\n      clients[protocol] = {}\r\n      tinsert(protocols,protocol)\r\n    end\r\n  end\r\n  copas.addserver(\r\n    listener,\r\n    function(sock)\r\n      local request = {}\r\n      repeat\r\n        local line,err,part = copas.receive(sock,'*l')\r\n        if line then\r\n          if last then\r\n            line = last..line\r\n            last = nil\r\n          end\r\n          request[#request+1] = line\r\n        elseif err ~= 'timeout' then\r\n          on_error('Websocket server Handshake failed due to copas receive err:'..err)\r\n          sock:close()\r\n          return\r\n        else\r\n          last = part\r\n          return\r\n        end\r\n      until line == ''\r\n      local upgrade_request = tconcat(request,'\\r\\n')\r\n      local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)\r\n      copas.send(sock,response)\r\n      if protocol and opts.protocols[protocol] then\r\n        local new_client = client(sock,protocol)\r\n        clients[protocol][new_client] = true\r\n        opts.protocols[protocol](new_client)\r\n      elseif opts.default then\r\n        local new_client = client(sock)\r\n        opts.default(new_client)\r\n      else\r\n        print('Unsupported protocol:',protocol or '\"null\"')\r\n      end\r\n    end)\r\n  local self = {}\r\n  self.close = function(keep_clients)\r\n    listener:close()\r\n    listener = nil\r\n    if not keep_clients then\r\n      for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end\r\n    end\r\n  end\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "assert(opts and (opts.protocols or opts.default))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local on_error = opts.on_error or function(s) print(s) end",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local listener = socket.bind(opts.interface or '*',opts.port or 80)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local protocols = {}",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if opts.protocols then\r\n    for protocol in pairs(opts.protocols) do\r\n      clients[protocol] = {}\r\n      tinsert(protocols,protocol)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "for protocol in pairs(opts.protocols) do\r\n      clients[protocol] = {}\r\n      tinsert(protocols,protocol)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 52,
    "text": "clients[protocol] = {}",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "tinsert(protocols,protocol)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "copas.addserver(\r\n    listener,\r\n    function(sock)\r\n      local request = {}\r\n      repeat\r\n        local line,err,part = copas.receive(sock,'*l')\r\n        if line then\r\n          if last then\r\n            line = last..line\r\n            last = nil\r\n          end\r\n          request[#request+1] = line\r\n        elseif err ~= 'timeout' then\r\n          on_error('Websocket server Handshake failed due to copas receive err:'..err)\r\n          sock:close()\r\n          return\r\n        else\r\n          last = part\r\n          return\r\n        end\r\n      until line == ''\r\n      local upgrade_request = tconcat(request,'\\r\\n')\r\n      local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)\r\n      copas.send(sock,response)\r\n      if protocol and opts.protocols[protocol] then\r\n        local new_client = client(sock,protocol)\r\n        clients[protocol][new_client] = true\r\n        opts.protocols[protocol](new_client)\r\n      elseif opts.default then\r\n        local new_client = client(sock)\r\n        opts.default(new_client)\r\n      else\r\n        print('Unsupported protocol:',protocol or '\"null\"')\r\n      end\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local request = {}",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "repeat\r\n        local line,err,part = copas.receive(sock,'*l')\r\n        if line then\r\n          if last then\r\n            line = last..line\r\n            last = nil\r\n          end\r\n          request[#request+1] = line\r\n        elseif err ~= 'timeout' then\r\n          on_error('Websocket server Handshake failed due to copas receive err:'..err)\r\n          sock:close()\r\n          return\r\n        else\r\n          last = part\r\n          return\r\n        end\r\n      until line == ''",
    "type": "statement:repeat"
  }, {
    "id": 57,
    "text": "local line,err,part = copas.receive(sock,'*l')",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if line then\r\n          if last then\r\n            line = last..line\r\n            last = nil\r\n          end\r\n          request[#request+1] = line\r\n        elseif err ~= 'timeout' then\r\n          on_error('Websocket server Handshake failed due to copas receive err:'..err)\r\n          sock:close()\r\n          return\r\n        else\r\n          last = part\r\n          return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "if last then\r\n            line = last..line\r\n            last = nil\r\n          end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "line = last..line",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "last = nil",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "request[#request+1] = line",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "on_error('Websocket server Handshake failed due to copas receive err:'..err)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "last = part",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "local upgrade_request = tconcat(request,'\\r\\n')",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "copas.send(sock,response)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "if protocol and opts.protocols[protocol] then\r\n        local new_client = client(sock,protocol)\r\n        clients[protocol][new_client] = true\r\n        opts.protocols[protocol](new_client)\r\n      elseif opts.default then\r\n        local new_client = client(sock)\r\n        opts.default(new_client)\r\n      else\r\n        print('Unsupported protocol:',protocol or '\"null\"')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local new_client = client(sock,protocol)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "clients[protocol][new_client] = true",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "opts.protocols[protocol](new_client)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "local new_client = client(sock)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "opts.default(new_client)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "print('Unsupported protocol:',protocol or '\"null\"')",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "self.close = function(keep_clients)\r\n    listener:close()\r\n    listener = nil\r\n    if not keep_clients then\r\n      for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function(sock)\r\n      local request = {}\r\n      repeat\r\n        local line,err,part = copas.receive(sock,'*l')\r\n        if line then\r\n          if last then\r\n            line = last..line\r\n            last = nil\r\n          end\r\n          request[#request+1] = line\r\n        elseif err ~= 'timeout' then\r\n          on_error('Websocket server Handshake failed due to copas receive err:'..err)\r\n          sock:close()\r\n          return\r\n        else\r\n          last = part\r\n          return\r\n        end\r\n      until line == ''\r\n      local upgrade_request = tconcat(request,'\\r\\n')\r\n      local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)\r\n      copas.send(sock,response)\r\n      if protocol and opts.protocols[protocol] then\r\n        local new_client = client(sock,protocol)\r\n        clients[protocol][new_client] = true\r\n        opts.protocols[protocol](new_client)\r\n      elseif opts.default then\r\n        local new_client = client(sock)\r\n        opts.default(new_client)\r\n      else\r\n        print('Unsupported protocol:',protocol or '\"null\"')\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "",
    "type": "function container"
  }, {
    "id": 80,
    "text": "function(obj)\r\n  assert(obj.sock_send)\r\n  assert(obj.sock_receive)\r\n  assert(obj.sock_close)\r\n  obj.receive = receive\r\n  obj.send = send\r\n  obj.close = close\r\n  obj.connect = connect\r\n  return obj\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "copas",
    "type": "module"
  }, {
    "id": 82,
    "text": "receive",
    "type": "global function"
  }, {
    "id": 83,
    "text": "socket",
    "type": "module"
  }, {
    "id": 84,
    "text": "send",
    "type": "global function"
  }, {
    "id": 85,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 86,
    "text": "addserver",
    "type": "global function"
  }, {
    "id": 87,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 88,
    "text": "default",
    "type": "global function"
  }, {
    "id": 89,
    "text": "require",
    "type": "global function"
  }, {
    "id": 90,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 91,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 92,
    "text": "protocols[protocol]",
    "type": "global function"
  }, {
    "id": 93,
    "text": "print",
    "type": "global function"
  }, {
    "id": 94,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 95,
    "text": "",
    "type": "variable container"
  }, {
    "id": 96,
    "text": "",
    "type": "require container"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "interface container"
  }, {
    "id": 116,
    "text": "",
    "type": "interface"
  }, {
    "id": 117,
    "text": "",
    "type": "interface"
  } ]
}