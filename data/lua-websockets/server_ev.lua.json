{
  "_filename": "server_ev.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-websockets/src/websocket/server_ev.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 11
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 33,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 11
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 38
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 41
  }, {
    "from": 66,
    "label": "has",
    "to": 47
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 19
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 77,
    "label": "has",
    "to": 84
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 77,
    "label": "has",
    "to": 86
  }, {
    "from": 77,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 11
  }, {
    "from": 87,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 77,
    "label": "has",
    "to": 88
  }, {
    "from": 77,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 11
  }, {
    "from": 89,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 89,
    "label": "has",
    "to": 20
  }, {
    "from": 89,
    "label": "has",
    "to": 21
  }, {
    "from": 89,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 89,
    "label": "has",
    "to": 24
  }, {
    "from": 89,
    "label": "has",
    "to": 25
  }, {
    "from": 77,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 77,
    "label": "has",
    "to": 91
  }, {
    "from": 77,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 77,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 46
  }, {
    "from": 93,
    "label": "has",
    "to": 47
  }, {
    "from": 77,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 50
  }, {
    "from": 77,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 53
  }, {
    "from": 77,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 56
  }, {
    "from": 77,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 77,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 11
  }, {
    "from": 98,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 98,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 38
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 41
  }, {
    "from": 66,
    "label": "has",
    "to": 47
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 19
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 77,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 75
  }, {
    "from": 77,
    "label": "has",
    "to": 100
  }, {
    "from": 77,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 104,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 103
  }, {
    "from": 113,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 113,
    "label": "has",
    "to": 84
  }, {
    "from": 113,
    "label": "has",
    "to": 123
  }, {
    "from": 113,
    "label": "has",
    "to": 124
  }, {
    "from": 113,
    "label": "has",
    "to": 125
  }, {
    "from": 113,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 126,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 134,
    "label": "has",
    "to": 140
  }, {
    "from": 134,
    "label": "has",
    "to": 141
  }, {
    "from": 131,
    "label": "has",
    "to": 100
  }, {
    "from": 131,
    "label": "has",
    "to": 100
  }, {
    "from": 131,
    "label": "has",
    "to": 140
  }, {
    "from": 131,
    "label": "has",
    "to": 142
  }, {
    "from": 131,
    "label": "has",
    "to": 143
  }, {
    "from": 131,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 131,
    "label": "has",
    "to": 100
  }, {
    "from": 131,
    "label": "has",
    "to": 148
  }, {
    "from": 131,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 152,
    "label": "has",
    "to": 163
  }, {
    "from": 152,
    "label": "has",
    "to": 164
  }, {
    "from": 113,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 105
  }, {
    "from": 165,
    "label": "has",
    "to": 106
  }, {
    "from": 165,
    "label": "has",
    "to": 107
  }, {
    "from": 165,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 113,
    "label": "has",
    "to": 166
  }, {
    "from": 113,
    "label": "has",
    "to": 100
  }, {
    "from": 113,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 43
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 19
  }, {
    "from": 170,
    "label": "has",
    "to": 71
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 150
  }, {
    "from": 172,
    "label": "has",
    "to": 151
  }, {
    "from": 172,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 152,
    "label": "has",
    "to": 163
  }, {
    "from": 152,
    "label": "has",
    "to": 164
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 134,
    "label": "has",
    "to": 140
  }, {
    "from": 134,
    "label": "has",
    "to": 141
  }, {
    "from": 174,
    "label": "has",
    "to": 100
  }, {
    "from": 174,
    "label": "has",
    "to": 100
  }, {
    "from": 174,
    "label": "has",
    "to": 140
  }, {
    "from": 174,
    "label": "has",
    "to": 142
  }, {
    "from": 174,
    "label": "has",
    "to": 143
  }, {
    "from": 174,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 174,
    "label": "has",
    "to": 100
  }, {
    "from": 174,
    "label": "has",
    "to": 148
  }, {
    "from": 174,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 152,
    "label": "has",
    "to": 163
  }, {
    "from": 152,
    "label": "has",
    "to": 164
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 127
  }, {
    "from": 176,
    "label": "has",
    "to": 128
  }, {
    "from": 176,
    "label": "has",
    "to": 129
  }, {
    "from": 176,
    "label": "has",
    "to": 130
  }, {
    "from": 176,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 134,
    "label": "has",
    "to": 140
  }, {
    "from": 134,
    "label": "has",
    "to": 141
  }, {
    "from": 131,
    "label": "has",
    "to": 100
  }, {
    "from": 131,
    "label": "has",
    "to": 100
  }, {
    "from": 131,
    "label": "has",
    "to": 140
  }, {
    "from": 131,
    "label": "has",
    "to": 142
  }, {
    "from": 131,
    "label": "has",
    "to": 143
  }, {
    "from": 131,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 131,
    "label": "has",
    "to": 100
  }, {
    "from": 131,
    "label": "has",
    "to": 148
  }, {
    "from": 131,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 155,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 155,
    "label": "has",
    "to": 162
  }, {
    "from": 152,
    "label": "has",
    "to": 163
  }, {
    "from": 152,
    "label": "has",
    "to": 164
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "calls",
    "to": 8
  }, {
    "from": 178,
    "label": "calls",
    "to": 182
  }, {
    "from": 178,
    "label": "calls",
    "to": 183
  }, {
    "from": 178,
    "label": "calls",
    "to": 183
  }, {
    "from": 178,
    "label": "calls",
    "to": 183
  }, {
    "from": 178,
    "label": "calls",
    "to": 183
  }, {
    "from": 178,
    "label": "calls",
    "to": 183
  }, {
    "from": 178,
    "label": "calls",
    "to": 183
  }, {
    "from": 178,
    "label": "calls",
    "to": 188
  }, {
    "from": 178,
    "label": "calls",
    "to": 188
  }, {
    "from": 178,
    "label": "calls",
    "to": 188
  }, {
    "from": 178,
    "label": "calls",
    "to": 188
  }, {
    "from": 178,
    "label": "calls",
    "to": 10
  }, {
    "from": 178,
    "label": "calls",
    "to": 10
  }, {
    "from": 178,
    "label": "calls",
    "to": 77
  }, {
    "from": 178,
    "label": "calls",
    "to": 77
  }, {
    "from": 178,
    "label": "calls",
    "to": 181
  }, {
    "from": 178,
    "label": "calls",
    "to": 181
  }, {
    "from": 178,
    "label": "calls",
    "to": 181
  }, {
    "from": 178,
    "label": "calls",
    "to": 189
  }, {
    "from": 178,
    "label": "calls",
    "to": 190
  }, {
    "from": 178,
    "label": "calls",
    "to": 16
  }, {
    "from": 178,
    "label": "calls",
    "to": 16
  }, {
    "from": 178,
    "label": "calls",
    "to": 16
  }, {
    "from": 178,
    "label": "calls",
    "to": 16
  }, {
    "from": 178,
    "label": "calls",
    "to": 9
  }, {
    "from": 178,
    "label": "calls",
    "to": 191
  }, {
    "from": 178,
    "label": "calls",
    "to": 191
  }, {
    "from": 178,
    "label": "calls",
    "to": 191
  }, {
    "from": 178,
    "label": "calls",
    "to": 191
  }, {
    "from": 178,
    "label": "calls",
    "to": 191
  }, {
    "from": 178,
    "label": "calls",
    "to": 191
  }, {
    "from": 178,
    "label": "calls",
    "to": 192
  }, {
    "from": 178,
    "label": "calls",
    "to": 6
  }, {
    "from": 178,
    "label": "calls",
    "to": 6
  }, {
    "from": 178,
    "label": "calls",
    "to": 6
  }, {
    "from": 178,
    "label": "calls",
    "to": 193
  }, {
    "from": 178,
    "label": "calls",
    "to": 193
  }, {
    "from": 178,
    "label": "calls",
    "to": 193
  }, {
    "from": 178,
    "label": "calls",
    "to": 180
  }, {
    "from": 178,
    "label": "calls",
    "to": 7
  }, {
    "from": 178,
    "label": "calls",
    "to": 7
  }, {
    "from": 178,
    "label": "calls",
    "to": 184
  }, {
    "from": 178,
    "label": "calls",
    "to": 186
  }, {
    "from": 178,
    "label": "calls",
    "to": 187
  }, {
    "from": 178,
    "label": "calls",
    "to": 187
  }, {
    "from": 178,
    "label": "calls",
    "to": 187
  }, {
    "from": 178,
    "label": "calls",
    "to": 187
  }, {
    "from": 178,
    "label": "calls",
    "to": 187
  }, {
    "from": 178,
    "label": "calls",
    "to": 187
  }, {
    "from": 178,
    "label": "calls",
    "to": 187
  }, {
    "from": 178,
    "label": "calls",
    "to": 194
  }, {
    "from": 178,
    "label": "calls",
    "to": 185
  }, {
    "from": 4,
    "label": "contains",
    "to": 178
  }, {
    "from": 178,
    "label": "declares",
    "to": 10
  }, {
    "from": 178,
    "label": "declares",
    "to": 16
  }, {
    "from": 178,
    "label": "declares",
    "to": 27
  }, {
    "from": 178,
    "label": "declares",
    "to": 33
  }, {
    "from": 178,
    "label": "declares",
    "to": 45
  }, {
    "from": 178,
    "label": "declares",
    "to": 49
  }, {
    "from": 178,
    "label": "declares",
    "to": 52
  }, {
    "from": 178,
    "label": "declares",
    "to": 55
  }, {
    "from": 178,
    "label": "declares",
    "to": 58
  }, {
    "from": 178,
    "label": "declares",
    "to": 63
  }, {
    "from": 178,
    "label": "declares",
    "to": 74
  }, {
    "from": 178,
    "label": "declares",
    "to": 77
  }, {
    "from": 178,
    "label": "declares",
    "to": 102
  }, {
    "from": 178,
    "label": "declares",
    "to": 104
  }, {
    "from": 178,
    "label": "declares",
    "to": 113
  }, {
    "from": 178,
    "label": "declares",
    "to": 168
  }, {
    "from": 178,
    "label": "declares",
    "to": 170
  }, {
    "from": 178,
    "label": "declares",
    "to": 172
  }, {
    "from": 178,
    "label": "declares",
    "to": 174
  }, {
    "from": 178,
    "label": "declares",
    "to": 176
  }, {
    "from": 4,
    "label": "contains",
    "to": 196
  }, {
    "from": 4,
    "label": "contains",
    "to": 197
  }, {
    "from": 196,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 196,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 196,
    "label": "initializes",
    "to": 202
  }, {
    "from": 196,
    "label": "initializes",
    "to": 203
  }, {
    "from": 196,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 196,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 196,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 197,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "requires",
    "to": 179
  }, {
    "from": 197,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "requires",
    "to": 5
  }, {
    "from": 197,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "requires",
    "to": 2
  }, {
    "from": 197,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "requires",
    "to": 3
  }, {
    "from": 197,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "requires",
    "to": 1
  }, {
    "from": 4,
    "label": "provides",
    "to": 215
  }, {
    "from": 195,
    "label": "represents",
    "to": 216
  }, {
    "from": 215,
    "label": "provides",
    "to": 216
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 168
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 172
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 174
  }, {
    "from": 149,
    "label": "hasArgument",
    "to": 172
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ev_common",
    "type": "module"
  }, {
    "id": 2,
    "text": "frame",
    "type": "module"
  }, {
    "id": 3,
    "text": "handshake",
    "type": "module"
  }, {
    "id": 4,
    "text": "server_ev",
    "type": "module"
  }, {
    "id": 5,
    "text": "tools",
    "type": "module"
  }, {
    "id": 6,
    "text": "function(data,opcode,masked,fin)\r\n  local encoded\r\n  local header = opcode or 1-- TEXT is default opcode\r\n  if fin == nil or fin == true then\r\n    header = bor(header,bit_7)\r\n  end\r\n  local payload = 0\r\n  if masked then\r\n    payload = bor(payload,bit_7)\r\n  end\r\n  local len = #data\r\n  if len < 126 then\r\n    payload = bor(payload,len)\r\n    encoded = spack('bb',header,payload)\r\n  elseif len < 0xffff then\r\n    payload = bor(payload,126)\r\n    encoded = spack('bb>H',header,payload,len)\r\n  elseif len < 2^53 then\r\n    local high = math.floor(len/2^32)\r\n    local low = len - high*2^32\r\n    payload = bor(payload,127)\r\n    encoded = spack('bb>I>I',header,payload,high,low)\r\n  end\r\n  if not masked then\r\n    encoded = encoded..data\r\n  else\r\n    local m1 = math.random(0,0xff)\r\n    local m2 = math.random(0,0xff)\r\n    local m3 = math.random(0,0xff)\r\n    local m4 = math.random(0,0xff)\r\n    local mask = {m1,m2,m3,m4}\r\n    encoded = encoded..spack('bbbb',m1,m2,m3,m4)\r\n    encoded = encoded..xor_mask(data,mask,#data)\r\n  end\r\n  return encoded\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function(code,reason)\r\n  if code then\r\n    data = spack('>H',code)\r\n    if reason then\r\n      data = data..tostring(reason)\r\n    end\r\n    return data\r\n  end\r\n  return ''\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function(data)\r\n  local _,code,reason\r\n  if data then\r\n    if #data > 1 then\r\n      _,code = sunpack(data,'>H')\r\n    end\r\n    if #data > 2 then\r\n      reason = data:sub(3)\r\n    end\r\n  end\r\n  return code,reason\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function(request,protocols)\r\n  local headers = http_headers(request)\r\n  if headers['upgrade'] ~= 'websocket' or\r\n  not headers['connection'] or\r\n  not headers['connection']:match('upgrade') or\r\n  headers['sec-websocket-key'] == nil or\r\n  headers['sec-websocket-version'] ~= '13' then\r\n    return nil,'HTTP/1.1 400 Bad Request\\r\\n\\r\\n'\r\n  end\r\n  local prot\r\n  if headers['sec-websocket-protocol'] then\r\n    for protocol in headers['sec-websocket-protocol']:gmatch('([^,%s]+)%s?,?') do\r\n      for _,supported in ipairs(protocols) do\r\n        if supported == protocol then\r\n          prot = protocol\r\n          break\r\n        end\r\n      end\r\n      if prot then\r\n        break\r\n      end\r\n    end\r\n  end\r\n  local lines = {\r\n    'HTTP/1.1 101 Switching Protocols',\r\n    'Upgrade: websocket',\r\n    'Connection: '..headers['connection'],\r\n    string.format('Sec-Websocket-Accept: %s',sec_websocket_accept(headers['sec-websocket-key'])),\r\n  }\r\n  if prot then\r\n    tinsert(lines,string.format('Sec-Websocket-Protocol: %s',prot))\r\n  end\r\n  tinsert(lines,'\\r\\n')\r\n  return table.concat(lines,'\\r\\n'),prot\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function(s,err)\r\n    clients[protocol][self] = nil\r\n    if user_on_error then\r\n      user_on_error(self,err)\r\n    else\r\n      print('Websocket server error',err)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "clients[protocol][self] = nil",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if user_on_error then\r\n      user_on_error(self,err)\r\n    else\r\n      print('Websocket server error',err)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "user_on_error(self,err)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "print('Websocket server error',err)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function(was_clean,code,reason)\r\n    clients[protocol][self] = nil\r\n    if close_timer then\r\n      close_timer:stop(loop)\r\n      close_timer = nil\r\n    end\r\n    message_io:stop(loop)\r\n    self.state = 'CLOSED'\r\n    if user_on_close then\r\n      user_on_close(self,was_clean,code,reason or '')\r\n    end\r\n    sock:shutdown()\r\n    sock:close()\r\n  end",
    "type": "function"
  }, {
    "id": 17,
    "text": "if close_timer then\r\n      close_timer:stop(loop)\r\n      close_timer = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "close_timer:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "close_timer = nil",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "message_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "self.state = 'CLOSED'",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if user_on_close then\r\n      user_on_close(self,was_clean,code,reason or '')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "user_on_close(self,was_clean,code,reason or '')",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "sock:shutdown()",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "sock:close()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function(err)\r\n    if err == 'closed' then\r\n      if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end\r\n    else\r\n      on_error(err)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 28,
    "text": "if err == 'closed' then\r\n      if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end\r\n    else\r\n      on_error(err)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "on_close(false,1006,'')",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "on_error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function(message,opcode)\r\n    if opcode == frame.TEXT or opcode == frame.BINARY then\r\n      if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end\r\n    elseif opcode == frame.CLOSE then\r\n      if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1006,reason)\r\n          end,handle_sock_err)\r\n      else\r\n        on_close(true,code or 1006,reason)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 34,
    "text": "if opcode == frame.TEXT or opcode == frame.BINARY then\r\n      if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end\r\n    elseif opcode == frame.CLOSE then\r\n      if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1006,reason)\r\n          end,handle_sock_err)\r\n      else\r\n        on_close(true,code or 1006,reason)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "user_on_message(self,message,opcode)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1006,reason)\r\n          end,handle_sock_err)\r\n      else\r\n        on_close(true,code or 1006,reason)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "self.state = 'CLOSING'",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "local code,reason = frame.decode_close(message)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local encoded = frame.encode_close(code)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "encoded = frame.encode(encoded,frame.CLOSE)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1006,reason)\r\n          end,handle_sock_err)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "on_close(true,code or 1006,reason)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function(_,message,opcode)\r\n    local encoded = frame.encode(message,opcode or frame.TEXT)\r\n    async_send(encoded)\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "local encoded = frame.encode(message,opcode or frame.TEXT)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "async_send(encoded)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function(_,on_close_arg)\r\n    user_on_close = on_close_arg\r\n  end",
    "type": "function"
  }, {
    "id": 50,
    "text": "user_on_close = on_close_arg",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(_,on_error_arg)\r\n    user_on_error = on_error_arg\r\n  end",
    "type": "function"
  }, {
    "id": 53,
    "text": "user_on_error = on_error_arg",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function(_,on_message_arg)\r\n    user_on_message = on_message_arg\r\n  end",
    "type": "function"
  }, {
    "id": 56,
    "text": "user_on_message = on_message_arg",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function(_,...)\r\n    for client in pairs(clients[protocol]) do\r\n      if client.state == 'OPEN' then\r\n        client:send(...)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 59,
    "text": "for client in pairs(clients[protocol]) do\r\n      if client.state == 'OPEN' then\r\n        client:send(...)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "if client.state == 'OPEN' then\r\n        client:send(...)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "client:send(...)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function(_,code,reason,timeout)\r\n    clients[protocol][self] = nil\r\n    if not message_io then\r\n      self:start()\r\n    end\r\n    if self.state == 'OPEN' then\r\n      self.state = 'CLOSING'\r\n      assert(message_io)\r\n      timeout = timeout or 3\r\n      local encoded = frame.encode_close(code or 1000,reason or '')\r\n      encoded = frame.encode(encoded,frame.CLOSE)\r\n      async_send(encoded)\r\n      close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)\r\n      close_timer:start(loop)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 64,
    "text": "if not message_io then\r\n      self:start()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "self:start()",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if self.state == 'OPEN' then\r\n      self.state = 'CLOSING'\r\n      assert(message_io)\r\n      timeout = timeout or 3\r\n      local encoded = frame.encode_close(code or 1000,reason or '')\r\n      encoded = frame.encode(encoded,frame.CLOSE)\r\n      async_send(encoded)\r\n      close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)\r\n      close_timer:start(loop)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "assert(message_io)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "timeout = timeout or 3",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "local encoded = frame.encode_close(code or 1000,reason or '')",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "on_close(false,1006,'timeout')",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "close_timer:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function()\r\n    message_io = require'websocket.ev_common'.message_io(\r\n      sock,loop,\r\n      on_message,\r\n    handle_sock_err)\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "message_io = require'websocket.ev_common'.message_io(\r\n      sock,loop,\r\n      on_message,\r\n    handle_sock_err)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function(sock,protocol)\r\n  assert(sock)\r\n  sock:setoption('tcp-nodelay',true)\r\n  local fd = sock:getfd()\r\n  local message_io\r\n  local close_timer\r\n  local async_send = require'websocket.ev_common'.async_send(sock,loop)\r\n  local self = {}\r\n  self.state = 'OPEN'\r\n  local user_on_error\r\n  local on_error = function(s,err)\r\n    clients[protocol][self] = nil\r\n    if user_on_error then\r\n      user_on_error(self,err)\r\n    else\r\n      print('Websocket server error',err)\r\n    end\r\n  end\r\n  local user_on_close\r\n  local on_close = function(was_clean,code,reason)\r\n    clients[protocol][self] = nil\r\n    if close_timer then\r\n      close_timer:stop(loop)\r\n      close_timer = nil\r\n    end\r\n    message_io:stop(loop)\r\n    self.state = 'CLOSED'\r\n    if user_on_close then\r\n      user_on_close(self,was_clean,code,reason or '')\r\n    end\r\n    sock:shutdown()\r\n    sock:close()\r\n  end\r\n  \r\n  local handle_sock_err = function(err)\r\n    if err == 'closed' then\r\n      if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end\r\n    else\r\n      on_error(err)\r\n    end\r\n  end\r\n  local user_on_message\r\n  local on_message = function(message,opcode)\r\n    if opcode == frame.TEXT or opcode == frame.BINARY then\r\n      if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end\r\n    elseif opcode == frame.CLOSE then\r\n      if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1006,reason)\r\n          end,handle_sock_err)\r\n      else\r\n        on_close(true,code or 1006,reason)\r\n      end\r\n    end\r\n  end\r\n  \r\n  self.send = function(_,message,opcode)\r\n    local encoded = frame.encode(message,opcode or frame.TEXT)\r\n    async_send(encoded)\r\n  end\r\n  \r\n  self.on_close = function(_,on_close_arg)\r\n    user_on_close = on_close_arg\r\n  end\r\n  \r\n  self.on_error = function(_,on_error_arg)\r\n    user_on_error = on_error_arg\r\n  end\r\n  \r\n  self.on_message = function(_,on_message_arg)\r\n    user_on_message = on_message_arg\r\n  end\r\n  \r\n  self.broadcast = function(_,...)\r\n    for client in pairs(clients[protocol]) do\r\n      if client.state == 'OPEN' then\r\n        client:send(...)\r\n      end\r\n    end\r\n  end\r\n  \r\n  self.close = function(_,code,reason,timeout)\r\n    clients[protocol][self] = nil\r\n    if not message_io then\r\n      self:start()\r\n    end\r\n    if self.state == 'OPEN' then\r\n      self.state = 'CLOSING'\r\n      assert(message_io)\r\n      timeout = timeout or 3\r\n      local encoded = frame.encode_close(code or 1000,reason or '')\r\n      encoded = frame.encode(encoded,frame.CLOSE)\r\n      async_send(encoded)\r\n      close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)\r\n      close_timer:start(loop)\r\n    end\r\n  end\r\n  \r\n  self.start = function()\r\n    message_io = require'websocket.ev_common'.message_io(\r\n      sock,loop,\r\n      on_message,\r\n    handle_sock_err)\r\n  end\r\n  \r\n  \r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "assert(sock)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "sock:setoption('tcp-nodelay',true)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "local fd = sock:getfd()",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local message_io",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local close_timer",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local async_send = require'websocket.ev_common'.async_send(sock,loop)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local self = {}",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "self.state = 'OPEN'",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "local user_on_error",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local on_error = function(s,err)\r\n    clients[protocol][self] = nil\r\n    if user_on_error then\r\n      user_on_error(self,err)\r\n    else\r\n      print('Websocket server error',err)\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local user_on_close",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local on_close = function(was_clean,code,reason)\r\n    clients[protocol][self] = nil\r\n    if close_timer then\r\n      close_timer:stop(loop)\r\n      close_timer = nil\r\n    end\r\n    message_io:stop(loop)\r\n    self.state = 'CLOSED'\r\n    if user_on_close then\r\n      user_on_close(self,was_clean,code,reason or '')\r\n    end\r\n    sock:shutdown()\r\n    sock:close()\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local handle_sock_err = function(err)\r\n    if err == 'closed' then\r\n      if self.state ~= 'CLOSED' then\r\n        on_close(false,1006,'')\r\n      end\r\n    else\r\n      on_error(err)\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local user_on_message",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local on_message = function(message,opcode)\r\n    if opcode == frame.TEXT or opcode == frame.BINARY then\r\n      if user_on_message then\r\n        user_on_message(self,message,opcode)\r\n      end\r\n    elseif opcode == frame.CLOSE then\r\n      if self.state ~= 'CLOSING' then\r\n        self.state = 'CLOSING'\r\n        local code,reason = frame.decode_close(message)\r\n        local encoded = frame.encode_close(code)\r\n        encoded = frame.encode(encoded,frame.CLOSE)\r\n        async_send(encoded,\r\n          function()\r\n            on_close(true,code or 1006,reason)\r\n          end,handle_sock_err)\r\n      else\r\n        on_close(true,code or 1006,reason)\r\n      end\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "self.send = function(_,message,opcode)\r\n    local encoded = frame.encode(message,opcode or frame.TEXT)\r\n    async_send(encoded)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "self.on_close = function(_,on_close_arg)\r\n    user_on_close = on_close_arg\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "self.on_error = function(_,on_error_arg)\r\n    user_on_error = on_error_arg\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "self.on_message = function(_,on_message_arg)\r\n    user_on_message = on_message_arg\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "self.broadcast = function(_,...)\r\n    for client in pairs(clients[protocol]) do\r\n      if client.state == 'OPEN' then\r\n        client:send(...)\r\n      end\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "self.close = function(_,code,reason,timeout)\r\n    clients[protocol][self] = nil\r\n    if not message_io then\r\n      self:start()\r\n    end\r\n    if self.state == 'OPEN' then\r\n      self.state = 'CLOSING'\r\n      assert(message_io)\r\n      timeout = timeout or 3\r\n      local encoded = frame.encode_close(code or 1000,reason or '')\r\n      encoded = frame.encode(encoded,frame.CLOSE)\r\n      async_send(encoded)\r\n      close_timer = ev.Timer.new(function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end,timeout)\r\n      close_timer:start(loop)\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "self.start = function()\r\n    message_io = require'websocket.ev_common'.message_io(\r\n      sock,loop,\r\n      on_message,\r\n    handle_sock_err)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function(s,err) print(err) end",
    "type": "function"
  }, {
    "id": 103,
    "text": "print(err)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "function(keep_clients)\r\n    listen_io:stop(loop)\r\n    listener:close()\r\n    listener = nil\r\n    if not keep_clients then\r\n      for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 105,
    "text": "listen_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "listener:close()",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "listener = nil",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "if not keep_clients then\r\n      for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "for client in pairs(clients) do\r\n          client:close()\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 111,
    "text": "client:close()",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function(opts)\r\n  assert(opts and (opts.protocols or opts.default))\r\n  ev = require'ev'\r\n  loop = opts.loop or ev.Loop.default\r\n  local on_error = function(s,err) print(err) end\r\n  local protocols = {}\r\n  if opts.protocols then\r\n    for protocol in pairs(opts.protocols) do\r\n      clients[protocol] = {}\r\n      tinsert(protocols,protocol)\r\n    end\r\n  end\r\n  local self = {}\r\n  local listener,err = socket.bind(opts.interface or '*',opts.port or 80)\r\n  assert(listener,err)\r\n  listener:settimeout(0)\r\n  local listen_io = ev.IO.new(\r\n    function()\r\n      local client_sock = listener:accept()\r\n      client_sock:settimeout(0)\r\n      assert(client_sock)\r\n      local request = {}\r\n      ev.IO.new(\r\n        function(loop,read_io)\r\n          repeat\r\n            local line,err,part = client_sock:receive('*l')\r\n            if line then\r\n              if last then\r\n                line = last..line\r\n                last = nil\r\n              end\r\n              request[#request+1] = line\r\n            elseif err ~= 'timeout' then\r\n              on_error(self,'Websocket Handshake failed due to socket err:'..err)\r\n              read_io:stop(loop)\r\n              return\r\n            else\r\n              last = part\r\n              return\r\n            end\r\n          until line == ''\r\n          read_io:stop(loop)\r\n          local upgrade_request = tconcat(request,'\\r\\n')\r\n          local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)\r\n          if not response then\r\n            print('Handshake failed, Request:')\r\n            print(upgrade_request)\r\n            client_sock:close()\r\n            return\r\n          end\r\n          local index\r\n          ev.IO.new(\r\n            function(loop,write_io)\r\n              local len = #response\r\n              local sent,err = client_sock:send(response,index)\r\n              if not sent then\r\n                write_io:stop(loop)\r\n                print('Websocket client closed while handshake',err)\r\n              elseif sent == len then\r\n                write_io:stop(loop)\r\n                if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end\r\n              else\r\n                assert(sent < len)\r\n                index = sent\r\n              end\r\n            end,client_sock:getfd(),ev.WRITE):start(loop)\r\n        end,client_sock:getfd(),ev.READ):start(loop)\r\n    end,listener:getfd(),ev.READ)\r\n  self.close = function(keep_clients)\r\n    listen_io:stop(loop)\r\n    listener:close()\r\n    listener = nil\r\n    if not keep_clients then\r\n      for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end\r\n    end\r\n  end\r\n  listen_io:start(loop)\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "assert(opts and (opts.protocols or opts.default))",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "ev = require'ev'",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "loop = opts.loop or ev.Loop.default",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "local on_error = function(s,err) print(err) end",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local protocols = {}",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if opts.protocols then\r\n    for protocol in pairs(opts.protocols) do\r\n      clients[protocol] = {}\r\n      tinsert(protocols,protocol)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "for protocol in pairs(opts.protocols) do\r\n      clients[protocol] = {}\r\n      tinsert(protocols,protocol)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 121,
    "text": "clients[protocol] = {}",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "tinsert(protocols,protocol)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "local listener,err = socket.bind(opts.interface or '*',opts.port or 80)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "assert(listener,err)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "listener:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "local listen_io = ev.IO.new(\r\n    function()\r\n      local client_sock = listener:accept()\r\n      client_sock:settimeout(0)\r\n      assert(client_sock)\r\n      local request = {}\r\n      ev.IO.new(\r\n        function(loop,read_io)\r\n          repeat\r\n            local line,err,part = client_sock:receive('*l')\r\n            if line then\r\n              if last then\r\n                line = last..line\r\n                last = nil\r\n              end\r\n              request[#request+1] = line\r\n            elseif err ~= 'timeout' then\r\n              on_error(self,'Websocket Handshake failed due to socket err:'..err)\r\n              read_io:stop(loop)\r\n              return\r\n            else\r\n              last = part\r\n              return\r\n            end\r\n          until line == ''\r\n          read_io:stop(loop)\r\n          local upgrade_request = tconcat(request,'\\r\\n')\r\n          local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)\r\n          if not response then\r\n            print('Handshake failed, Request:')\r\n            print(upgrade_request)\r\n            client_sock:close()\r\n            return\r\n          end\r\n          local index\r\n          ev.IO.new(\r\n            function(loop,write_io)\r\n              local len = #response\r\n              local sent,err = client_sock:send(response,index)\r\n              if not sent then\r\n                write_io:stop(loop)\r\n                print('Websocket client closed while handshake',err)\r\n              elseif sent == len then\r\n                write_io:stop(loop)\r\n                if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end\r\n              else\r\n                assert(sent < len)\r\n                index = sent\r\n              end\r\n            end,client_sock:getfd(),ev.WRITE):start(loop)\r\n        end,client_sock:getfd(),ev.READ):start(loop)\r\n    end,listener:getfd(),ev.READ)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local client_sock = listener:accept()",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "client_sock:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert(client_sock)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local request = {}",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "ev.IO.new(\r\n        function(loop,read_io)\r\n          repeat\r\n            local line,err,part = client_sock:receive('*l')\r\n            if line then\r\n              if last then\r\n                line = last..line\r\n                last = nil\r\n              end\r\n              request[#request+1] = line\r\n            elseif err ~= 'timeout' then\r\n              on_error(self,'Websocket Handshake failed due to socket err:'..err)\r\n              read_io:stop(loop)\r\n              return\r\n            else\r\n              last = part\r\n              return\r\n            end\r\n          until line == ''\r\n          read_io:stop(loop)\r\n          local upgrade_request = tconcat(request,'\\r\\n')\r\n          local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)\r\n          if not response then\r\n            print('Handshake failed, Request:')\r\n            print(upgrade_request)\r\n            client_sock:close()\r\n            return\r\n          end\r\n          local index\r\n          ev.IO.new(\r\n            function(loop,write_io)\r\n              local len = #response\r\n              local sent,err = client_sock:send(response,index)\r\n              if not sent then\r\n                write_io:stop(loop)\r\n                print('Websocket client closed while handshake',err)\r\n              elseif sent == len then\r\n                write_io:stop(loop)\r\n                if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end\r\n              else\r\n                assert(sent < len)\r\n                index = sent\r\n              end\r\n            end,client_sock:getfd(),ev.WRITE):start(loop)\r\n        end,client_sock:getfd(),ev.READ):start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "repeat\r\n            local line,err,part = client_sock:receive('*l')\r\n            if line then\r\n              if last then\r\n                line = last..line\r\n                last = nil\r\n              end\r\n              request[#request+1] = line\r\n            elseif err ~= 'timeout' then\r\n              on_error(self,'Websocket Handshake failed due to socket err:'..err)\r\n              read_io:stop(loop)\r\n              return\r\n            else\r\n              last = part\r\n              return\r\n            end\r\n          until line == ''",
    "type": "statement:repeat"
  }, {
    "id": 133,
    "text": "local line,err,part = client_sock:receive('*l')",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "if line then\r\n              if last then\r\n                line = last..line\r\n                last = nil\r\n              end\r\n              request[#request+1] = line\r\n            elseif err ~= 'timeout' then\r\n              on_error(self,'Websocket Handshake failed due to socket err:'..err)\r\n              read_io:stop(loop)\r\n              return\r\n            else\r\n              last = part\r\n              return\r\n            end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "if last then\r\n                line = last..line\r\n                last = nil\r\n              end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "line = last..line",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "last = nil",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "request[#request+1] = line",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "on_error(self,'Websocket Handshake failed due to socket err:'..err)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "read_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "last = part",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "local upgrade_request = tconcat(request,'\\r\\n')",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if not response then\r\n            print('Handshake failed, Request:')\r\n            print(upgrade_request)\r\n            client_sock:close()\r\n            return\r\n          end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "print('Handshake failed, Request:')",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "print(upgrade_request)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "client_sock:close()",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "local index",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "ev.IO.new(\r\n            function(loop,write_io)\r\n              local len = #response\r\n              local sent,err = client_sock:send(response,index)\r\n              if not sent then\r\n                write_io:stop(loop)\r\n                print('Websocket client closed while handshake',err)\r\n              elseif sent == len then\r\n                write_io:stop(loop)\r\n                if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end\r\n              else\r\n                assert(sent < len)\r\n                index = sent\r\n              end\r\n            end,client_sock:getfd(),ev.WRITE):start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "local len = #response",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "local sent,err = client_sock:send(response,index)",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if not sent then\r\n                write_io:stop(loop)\r\n                print('Websocket client closed while handshake',err)\r\n              elseif sent == len then\r\n                write_io:stop(loop)\r\n                if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end\r\n              else\r\n                assert(sent < len)\r\n                index = sent\r\n              end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "write_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "print('Websocket client closed while handshake',err)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "local new_client = client(client_sock,protocol)",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "clients[protocol][new_client] = true",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "opts.protocols[protocol](new_client)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "new_client:start()",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "local new_client = client(client_sock)",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "opts.default(new_client)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "print('Unsupported protocol:',protocol or '\"null\"')",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert(sent < len)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "index = sent",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "self.close = function(keep_clients)\r\n    listen_io:stop(loop)\r\n    listener:close()\r\n    listener = nil\r\n    if not keep_clients then\r\n      for protocol,clients in pairs(clients) do\r\n        for client in pairs(clients) do\r\n          client:close()\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "listen_io:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function()\r\n            on_close(true,code or 1006,reason)\r\n          end",
    "type": "function"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function()\r\n          close_timer = nil\r\n          on_close(false,1006,'timeout')\r\n        end",
    "type": "function"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function(loop,write_io)\r\n              local len = #response\r\n              local sent,err = client_sock:send(response,index)\r\n              if not sent then\r\n                write_io:stop(loop)\r\n                print('Websocket client closed while handshake',err)\r\n              elseif sent == len then\r\n                write_io:stop(loop)\r\n                if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end\r\n              else\r\n                assert(sent < len)\r\n                index = sent\r\n              end\r\n            end",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function(loop,read_io)\r\n          repeat\r\n            local line,err,part = client_sock:receive('*l')\r\n            if line then\r\n              if last then\r\n                line = last..line\r\n                last = nil\r\n              end\r\n              request[#request+1] = line\r\n            elseif err ~= 'timeout' then\r\n              on_error(self,'Websocket Handshake failed due to socket err:'..err)\r\n              read_io:stop(loop)\r\n              return\r\n            else\r\n              last = part\r\n              return\r\n            end\r\n          until line == ''\r\n          read_io:stop(loop)\r\n          local upgrade_request = tconcat(request,'\\r\\n')\r\n          local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)\r\n          if not response then\r\n            print('Handshake failed, Request:')\r\n            print(upgrade_request)\r\n            client_sock:close()\r\n            return\r\n          end\r\n          local index\r\n          ev.IO.new(\r\n            function(loop,write_io)\r\n              local len = #response\r\n              local sent,err = client_sock:send(response,index)\r\n              if not sent then\r\n                write_io:stop(loop)\r\n                print('Websocket client closed while handshake',err)\r\n              elseif sent == len then\r\n                write_io:stop(loop)\r\n                if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end\r\n              else\r\n                assert(sent < len)\r\n                index = sent\r\n              end\r\n            end,client_sock:getfd(),ev.WRITE):start(loop)\r\n        end",
    "type": "function"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function()\r\n      local client_sock = listener:accept()\r\n      client_sock:settimeout(0)\r\n      assert(client_sock)\r\n      local request = {}\r\n      ev.IO.new(\r\n        function(loop,read_io)\r\n          repeat\r\n            local line,err,part = client_sock:receive('*l')\r\n            if line then\r\n              if last then\r\n                line = last..line\r\n                last = nil\r\n              end\r\n              request[#request+1] = line\r\n            elseif err ~= 'timeout' then\r\n              on_error(self,'Websocket Handshake failed due to socket err:'..err)\r\n              read_io:stop(loop)\r\n              return\r\n            else\r\n              last = part\r\n              return\r\n            end\r\n          until line == ''\r\n          read_io:stop(loop)\r\n          local upgrade_request = tconcat(request,'\\r\\n')\r\n          local response,protocol = handshake.accept_upgrade(upgrade_request,protocols)\r\n          if not response then\r\n            print('Handshake failed, Request:')\r\n            print(upgrade_request)\r\n            client_sock:close()\r\n            return\r\n          end\r\n          local index\r\n          ev.IO.new(\r\n            function(loop,write_io)\r\n              local len = #response\r\n              local sent,err = client_sock:send(response,index)\r\n              if not sent then\r\n                write_io:stop(loop)\r\n                print('Websocket client closed while handshake',err)\r\n              elseif sent == len then\r\n                write_io:stop(loop)\r\n                if protocol and opts.protocols[protocol] then\r\n                  local new_client = client(client_sock,protocol)\r\n                  clients[protocol][new_client] = true\r\n                  opts.protocols[protocol](new_client)\r\n                  new_client:start()\r\n                elseif opts.default then\r\n                  local new_client = client(client_sock)\r\n                  opts.default(new_client)\r\n                else\r\n                  print('Unsupported protocol:',protocol or '\"null\"')\r\n                end\r\n              else\r\n                assert(sent < len)\r\n                index = sent\r\n              end\r\n            end,client_sock:getfd(),ev.WRITE):start(loop)\r\n        end,client_sock:getfd(),ev.READ):start(loop)\r\n    end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "",
    "type": "function container"
  }, {
    "id": 179,
    "text": "socket",
    "type": "module"
  }, {
    "id": 180,
    "text": "Timer.new",
    "type": "global function"
  }, {
    "id": 181,
    "text": "IO.new",
    "type": "global function"
  }, {
    "id": 182,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 183,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 184,
    "text": "default",
    "type": "global function"
  }, {
    "id": 185,
    "text": "user_on_error",
    "type": "global function"
  }, {
    "id": 186,
    "text": "user_on_close",
    "type": "global function"
  }, {
    "id": 187,
    "text": "require",
    "type": "global function"
  }, {
    "id": 188,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 189,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 190,
    "text": "protocols[protocol]",
    "type": "global function"
  }, {
    "id": 191,
    "text": "print",
    "type": "global function"
  }, {
    "id": 192,
    "text": "user_on_message",
    "type": "global function"
  }, {
    "id": 193,
    "text": "async_send",
    "type": "global function"
  }, {
    "id": 194,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 195,
    "text": "",
    "type": "local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "variable container"
  }, {
    "id": 197,
    "text": "",
    "type": "require container"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "n/a"
  }, {
    "id": 200,
    "text": "",
    "type": "local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "n/a"
  }, {
    "id": 202,
    "text": "",
    "type": "local variable"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "n/a"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "n/a"
  }, {
    "id": 210,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "interface container"
  }, {
    "id": 216,
    "text": "",
    "type": "interface"
  } ]
}