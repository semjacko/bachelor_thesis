{
  "_filename": "ev_common.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-websockets/src/websocket/ev_common.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 3,
    "label": "has",
    "to": 31
  }, {
    "from": 3,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 34,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 34,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 17
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 59,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 34,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 34,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 59,
    "label": "has",
    "to": 68
  }, {
    "from": 59,
    "label": "has",
    "to": 69
  }, {
    "from": 59,
    "label": "has",
    "to": 70
  }, {
    "from": 59,
    "label": "has",
    "to": 10
  }, {
    "from": 59,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 20
  }, {
    "from": 72,
    "label": "has",
    "to": 21
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 74,
    "label": "has",
    "to": 10
  }, {
    "from": 74,
    "label": "has",
    "to": 14
  }, {
    "from": 74,
    "label": "has",
    "to": 15
  }, {
    "from": 74,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 74,
    "label": "has",
    "to": 31
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "calls",
    "to": 85
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 84
  }, {
    "from": 76,
    "label": "calls",
    "to": 33
  }, {
    "from": 76,
    "label": "calls",
    "to": 77
  }, {
    "from": 76,
    "label": "calls",
    "to": 83
  }, {
    "from": 76,
    "label": "calls",
    "to": 79
  }, {
    "from": 76,
    "label": "calls",
    "to": 79
  }, {
    "from": 76,
    "label": "calls",
    "to": 88
  }, {
    "from": 76,
    "label": "calls",
    "to": 87
  }, {
    "from": 76,
    "label": "calls",
    "to": 82
  }, {
    "from": 76,
    "label": "calls",
    "to": 82
  }, {
    "from": 76,
    "label": "calls",
    "to": 86
  }, {
    "from": 76,
    "label": "calls",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 76,
    "label": "declares",
    "to": 3
  }, {
    "from": 76,
    "label": "declares",
    "to": 33
  }, {
    "from": 76,
    "label": "declares",
    "to": 59
  }, {
    "from": 76,
    "label": "declares",
    "to": 72
  }, {
    "from": 76,
    "label": "declares",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 1,
    "label": "contains",
    "to": 90
  }, {
    "from": 89,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 89,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 89,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 89,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 90,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 78
  }, {
    "from": 90,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 101
  }, {
    "from": 95,
    "label": "represents",
    "to": 102
  }, {
    "from": 101,
    "label": "provides",
    "to": 102
  }, {
    "from": 97,
    "label": "represents",
    "to": 103
  }, {
    "from": 101,
    "label": "provides",
    "to": 103
  }, {
    "from": 104,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ev_common",
    "type": "module"
  }, {
    "id": 2,
    "text": "frame",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(sock,loop)\r\n  assert(sock)\r\n  loop = loop or ev.Loop.default\r\n  local sock_send = sock.send\r\n  local buffer\r\n  local io\r\n  local callbacks = {}\r\n  return function(data,on_sent,on_err)\r\n    if buffer then\r\n      -- a write io is still running\r\n      buffer = buffer..data\r\n      return\r\n    else\r\n      buffer = data\r\n    end\r\n    callbacks.on_sent = on_sent\r\n    callbacks.on_err = on_err\r\n    if not io then\r\n      assert(sock:getfd() > -1)\r\n      local index\r\n      io = ev.IO.new(\r\n        function(loop,write_io)\r\n          local len = #buffer\r\n          local sent,err = sock_send(sock,buffer,index)\r\n          if not sent and err ~= 'timeout' then\r\n            write_io:stop(loop)\r\n            if callbacks.on_err then\r\n              callbacks.on_err(err)\r\n            end\r\n          elseif sent == len then\r\n            buffer = nil\r\n            write_io:stop(loop)\r\n            if callbacks.on_sent then\r\n              callbacks.on_sent()\r\n            end\r\n          else\r\n            assert(sent < len)\r\n            index = sent\r\n          end\r\n        end,sock:getfd(),ev.WRITE)\r\n    end\r\n    io:start(loop)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert(sock)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "loop = loop or ev.Loop.default",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "local sock_send = sock.send",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local buffer",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local io",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local callbacks = {}",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "if buffer then\r\n      -- a write io is still running\r\n      buffer = buffer..data\r\n      return\r\n    else\r\n      buffer = data\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "buffer = buffer..data",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "buffer = data",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "callbacks.on_sent = on_sent",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "callbacks.on_err = on_err",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if not io then\r\n      assert(sock:getfd() > -1)\r\n      local index\r\n      io = ev.IO.new(\r\n        function(loop,write_io)\r\n          local len = #buffer\r\n          local sent,err = sock_send(sock,buffer,index)\r\n          if not sent and err ~= 'timeout' then\r\n            write_io:stop(loop)\r\n            if callbacks.on_err then\r\n              callbacks.on_err(err)\r\n            end\r\n          elseif sent == len then\r\n            buffer = nil\r\n            write_io:stop(loop)\r\n            if callbacks.on_sent then\r\n              callbacks.on_sent()\r\n            end\r\n          else\r\n            assert(sent < len)\r\n            index = sent\r\n          end\r\n        end,sock:getfd(),ev.WRITE)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "assert(sock:getfd() > -1)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local index",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "io = ev.IO.new(\r\n        function(loop,write_io)\r\n          local len = #buffer\r\n          local sent,err = sock_send(sock,buffer,index)\r\n          if not sent and err ~= 'timeout' then\r\n            write_io:stop(loop)\r\n            if callbacks.on_err then\r\n              callbacks.on_err(err)\r\n            end\r\n          elseif sent == len then\r\n            buffer = nil\r\n            write_io:stop(loop)\r\n            if callbacks.on_sent then\r\n              callbacks.on_sent()\r\n            end\r\n          else\r\n            assert(sent < len)\r\n            index = sent\r\n          end\r\n        end,sock:getfd(),ev.WRITE)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "local len = #buffer",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local sent,err = sock_send(sock,buffer,index)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if not sent and err ~= 'timeout' then\r\n            write_io:stop(loop)\r\n            if callbacks.on_err then\r\n              callbacks.on_err(err)\r\n            end\r\n          elseif sent == len then\r\n            buffer = nil\r\n            write_io:stop(loop)\r\n            if callbacks.on_sent then\r\n              callbacks.on_sent()\r\n            end\r\n          else\r\n            assert(sent < len)\r\n            index = sent\r\n          end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "write_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "if callbacks.on_err then\r\n              callbacks.on_err(err)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "callbacks.on_err(err)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "buffer = nil",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if callbacks.on_sent then\r\n              callbacks.on_sent()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "callbacks.on_sent()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert(sent < len)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "index = sent",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "io:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n    while true do\r\n      local encoded,err,part = sock:receive(100000)\r\n      if err then\r\n        if err ~= 'timeout' and #part == 0 then\r\n          if message_io then\r\n            message_io:stop(loop)\r\n          end\r\n          on_error(err)\r\n          return\r\n        elseif #part == 0 then\r\n          return\r\n        end\r\n      end\r\n      \r\n      if last then\r\n        encoded = last..(encoded or part)\r\n        last = nil\r\n      else\r\n        encoded = encoded or part\r\n      end\r\n      \r\n      repeat\r\n        local decoded,fin,opcode,rest = frame.decode(encoded)\r\n        if decoded then\r\n          if not first_opcode then\r\n            first_opcode = opcode\r\n          end\r\n          tinsert(frames,decoded)\r\n          encoded = rest\r\n          if fin == true then\r\n            on_message(tconcat(frames),first_opcode)\r\n            frames = {}\r\n            first_opcode = nil\r\n          end\r\n        end\r\n      until not decoded\r\n      if #encoded > 0 then\r\n        last = encoded\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 34,
    "text": "while true do\r\n      local encoded,err,part = sock:receive(100000)\r\n      if err then\r\n        if err ~= 'timeout' and #part == 0 then\r\n          if message_io then\r\n            message_io:stop(loop)\r\n          end\r\n          on_error(err)\r\n          return\r\n        elseif #part == 0 then\r\n          return\r\n        end\r\n      end\r\n      \r\n      if last then\r\n        encoded = last..(encoded or part)\r\n        last = nil\r\n      else\r\n        encoded = encoded or part\r\n      end\r\n      \r\n      repeat\r\n        local decoded,fin,opcode,rest = frame.decode(encoded)\r\n        if decoded then\r\n          if not first_opcode then\r\n            first_opcode = opcode\r\n          end\r\n          tinsert(frames,decoded)\r\n          encoded = rest\r\n          if fin == true then\r\n            on_message(tconcat(frames),first_opcode)\r\n            frames = {}\r\n            first_opcode = nil\r\n          end\r\n        end\r\n      until not decoded\r\n      if #encoded > 0 then\r\n        last = encoded\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 35,
    "text": "local encoded,err,part = sock:receive(100000)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if err then\r\n        if err ~= 'timeout' and #part == 0 then\r\n          if message_io then\r\n            message_io:stop(loop)\r\n          end\r\n          on_error(err)\r\n          return\r\n        elseif #part == 0 then\r\n          return\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "if err ~= 'timeout' and #part == 0 then\r\n          if message_io then\r\n            message_io:stop(loop)\r\n          end\r\n          on_error(err)\r\n          return\r\n        elseif #part == 0 then\r\n          return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "if message_io then\r\n            message_io:stop(loop)\r\n          end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "message_io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "on_error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if last then\r\n        encoded = last..(encoded or part)\r\n        last = nil\r\n      else\r\n        encoded = encoded or part\r\n      end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "encoded = last..(encoded or part)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "last = nil",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "encoded = encoded or part",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "repeat\r\n        local decoded,fin,opcode,rest = frame.decode(encoded)\r\n        if decoded then\r\n          if not first_opcode then\r\n            first_opcode = opcode\r\n          end\r\n          tinsert(frames,decoded)\r\n          encoded = rest\r\n          if fin == true then\r\n            on_message(tconcat(frames),first_opcode)\r\n            frames = {}\r\n            first_opcode = nil\r\n          end\r\n        end\r\n      until not decoded",
    "type": "statement:repeat"
  }, {
    "id": 46,
    "text": "local decoded,fin,opcode,rest = frame.decode(encoded)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if decoded then\r\n          if not first_opcode then\r\n            first_opcode = opcode\r\n          end\r\n          tinsert(frames,decoded)\r\n          encoded = rest\r\n          if fin == true then\r\n            on_message(tconcat(frames),first_opcode)\r\n            frames = {}\r\n            first_opcode = nil\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "if not first_opcode then\r\n            first_opcode = opcode\r\n          end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "first_opcode = opcode",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "tinsert(frames,decoded)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "encoded = rest",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if fin == true then\r\n            on_message(tconcat(frames),first_opcode)\r\n            frames = {}\r\n            first_opcode = nil\r\n          end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "on_message(tconcat(frames),first_opcode)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "frames = {}",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "first_opcode = nil",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if #encoded > 0 then\r\n        last = encoded\r\n      end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "last = encoded",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function(sock,loop,on_message,on_error)\r\n  assert(sock)\r\n  assert(loop)\r\n  assert(on_message)\r\n  assert(on_error)\r\n  local last\r\n  local frames = {}\r\n  local first_opcode\r\n  assert(sock:getfd() > -1)\r\n  local message_io\r\n  local dispatch = function()\r\n    while true do\r\n      local encoded,err,part = sock:receive(100000)\r\n      if err then\r\n        if err ~= 'timeout' and #part == 0 then\r\n          if message_io then\r\n            message_io:stop(loop)\r\n          end\r\n          on_error(err)\r\n          return\r\n        elseif #part == 0 then\r\n          return\r\n        end\r\n      end\r\n      \r\n      if last then\r\n        encoded = last..(encoded or part)\r\n        last = nil\r\n      else\r\n        encoded = encoded or part\r\n      end\r\n      \r\n      repeat\r\n        local decoded,fin,opcode,rest = frame.decode(encoded)\r\n        if decoded then\r\n          if not first_opcode then\r\n            first_opcode = opcode\r\n          end\r\n          tinsert(frames,decoded)\r\n          encoded = rest\r\n          if fin == true then\r\n            on_message(tconcat(frames),first_opcode)\r\n            frames = {}\r\n            first_opcode = nil\r\n          end\r\n        end\r\n      until not decoded\r\n      if #encoded > 0 then\r\n        last = encoded\r\n      end\r\n    end\r\n  end\r\n  message_io = ev.IO.new(dispatch,sock:getfd(),ev.READ)\r\n  message_io:start(loop)\r\n  -- the might be already data waiting (which will not trigger the IO)\r\n  dispatch()\r\n  return message_io\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "assert(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert(on_message)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert(on_error)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "local last",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local frames = {}",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local first_opcode",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local message_io",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local dispatch = function()\r\n    while true do\r\n      local encoded,err,part = sock:receive(100000)\r\n      if err then\r\n        if err ~= 'timeout' and #part == 0 then\r\n          if message_io then\r\n            message_io:stop(loop)\r\n          end\r\n          on_error(err)\r\n          return\r\n        elseif #part == 0 then\r\n          return\r\n        end\r\n      end\r\n      \r\n      if last then\r\n        encoded = last..(encoded or part)\r\n        last = nil\r\n      else\r\n        encoded = encoded or part\r\n      end\r\n      \r\n      repeat\r\n        local decoded,fin,opcode,rest = frame.decode(encoded)\r\n        if decoded then\r\n          if not first_opcode then\r\n            first_opcode = opcode\r\n          end\r\n          tinsert(frames,decoded)\r\n          encoded = rest\r\n          if fin == true then\r\n            on_message(tconcat(frames),first_opcode)\r\n            frames = {}\r\n            first_opcode = nil\r\n          end\r\n        end\r\n      until not decoded\r\n      if #encoded > 0 then\r\n        last = encoded\r\n      end\r\n    end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "message_io = ev.IO.new(dispatch,sock:getfd(),ev.READ)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "message_io:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "dispatch()",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function(loop,write_io)\r\n          local len = #buffer\r\n          local sent,err = sock_send(sock,buffer,index)\r\n          if not sent and err ~= 'timeout' then\r\n            write_io:stop(loop)\r\n            if callbacks.on_err then\r\n              callbacks.on_err(err)\r\n            end\r\n          elseif sent == len then\r\n            buffer = nil\r\n            write_io:stop(loop)\r\n            if callbacks.on_sent then\r\n              callbacks.on_sent()\r\n            end\r\n          else\r\n            assert(sent < len)\r\n            index = sent\r\n          end\r\n        end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function(data,on_sent,on_err)\r\n    if buffer then\r\n      -- a write io is still running\r\n      buffer = buffer..data\r\n      return\r\n    else\r\n      buffer = data\r\n    end\r\n    callbacks.on_sent = on_sent\r\n    callbacks.on_err = on_err\r\n    if not io then\r\n      assert(sock:getfd() > -1)\r\n      local index\r\n      io = ev.IO.new(\r\n        function(loop,write_io)\r\n          local len = #buffer\r\n          local sent,err = sock_send(sock,buffer,index)\r\n          if not sent and err ~= 'timeout' then\r\n            write_io:stop(loop)\r\n            if callbacks.on_err then\r\n              callbacks.on_err(err)\r\n            end\r\n          elseif sent == len then\r\n            buffer = nil\r\n            write_io:stop(loop)\r\n            if callbacks.on_sent then\r\n              callbacks.on_sent()\r\n            end\r\n          else\r\n            assert(sent < len)\r\n            index = sent\r\n          end\r\n        end,sock:getfd(),ev.WRITE)\r\n    end\r\n    io:start(loop)\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "",
    "type": "function container"
  }, {
    "id": 77,
    "text": "function(encoded)\r\n  local encoded_bak = encoded\r\n  if #encoded < 2 then\r\n    return nil,2\r\n  end\r\n  local pos,header,payload = sunpack(encoded,'bb')\r\n  encoded = ssub(encoded,pos)\r\n  local bytes = 2\r\n  local fin = band(header,bit_7) > 0\r\n  local opcode = band(header,bit_0_3)\r\n  local mask = band(payload,bit_7) > 0\r\n  payload = band(payload,bit_0_6)\r\n  if payload > 125 then\r\n    if payload == 126 then\r\n      if #encoded < 2 then\r\n        return nil,2\r\n      end\r\n      pos,payload = sunpack(encoded,'>H')\r\n    elseif payload == 127 then\r\n      if #encoded < 8 then\r\n        return nil,8\r\n      end\r\n      pos,high,low = sunpack(encoded,'>I>I')\r\n      payload = high*2^32 + low\r\n      if payload < 0xffff or payload > 2^53 then\r\n        assert(false,'INVALID PAYLOAD '..payload)\r\n      end\r\n    else\r\n      assert(false,'INVALID PAYLOAD '..payload)\r\n    end\r\n    encoded = ssub(encoded,pos)\r\n    bytes = bytes + pos - 1\r\n  end\r\n  local decoded\r\n  if mask then\r\n    local bytes_short = payload + 4 - #encoded\r\n    if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end\r\n    local pos,m1,m2,m3,m4 = sunpack(encoded,'bbbb')\r\n    encoded = ssub(encoded,pos)\r\n    local mask = {\r\n      m1,m2,m3,m4\r\n    }\r\n    decoded = xor_mask(encoded,mask,payload)\r\n    bytes = bytes + 4 + payload\r\n  else\r\n    local bytes_short = payload - #encoded\r\n    if bytes_short > 0 then\r\n      return nil,bytes_short\r\n    end\r\n    if #encoded > payload then\r\n      decoded = ssub(encoded,1,payload)\r\n    else\r\n      decoded = encoded\r\n    end\r\n    bytes = bytes + payload\r\n  end\r\n  return decoded,fin,opcode,encoded_bak:sub(bytes+1),mask\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "ev",
    "type": "module"
  }, {
    "id": 79,
    "text": "IO.new",
    "type": "global function"
  }, {
    "id": 80,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 81,
    "text": "on_sent",
    "type": "global function"
  }, {
    "id": 82,
    "text": "require",
    "type": "global function"
  }, {
    "id": 83,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 84,
    "text": "on_error",
    "type": "global function"
  }, {
    "id": 85,
    "text": "on_err",
    "type": "global function"
  }, {
    "id": 86,
    "text": "on_message",
    "type": "global function"
  }, {
    "id": 87,
    "text": "sock_send",
    "type": "global function"
  }, {
    "id": 88,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 89,
    "text": "",
    "type": "variable container"
  }, {
    "id": 90,
    "text": "",
    "type": "require container"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "interface container"
  }, {
    "id": 102,
    "text": "",
    "type": "interface"
  }, {
    "id": 103,
    "text": "",
    "type": "interface"
  }, {
    "id": 104,
    "text": "",
    "type": "require local variable"
  } ]
}