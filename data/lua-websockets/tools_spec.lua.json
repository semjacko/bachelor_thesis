{
  "_filename": "tools_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua-websockets/spec/tools_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 15,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 4
  }, {
    "from": 41,
    "label": "has",
    "to": 5
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 42,
    "label": "has",
    "to": 9
  }, {
    "from": 42,
    "label": "has",
    "to": 10
  }, {
    "from": 42,
    "label": "has",
    "to": 11
  }, {
    "from": 42,
    "label": "has",
    "to": 12
  }, {
    "from": 42,
    "label": "has",
    "to": 13
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 16
  }, {
    "from": 43,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 27
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 30
  }, {
    "from": 44,
    "label": "has",
    "to": 31
  }, {
    "from": 44,
    "label": "has",
    "to": 32
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 33
  }, {
    "from": 44,
    "label": "has",
    "to": 31
  }, {
    "from": 44,
    "label": "has",
    "to": 34
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 33
  }, {
    "from": 44,
    "label": "has",
    "to": 35
  }, {
    "from": 44,
    "label": "has",
    "to": 36
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 33
  }, {
    "from": 44,
    "label": "has",
    "to": 31
  }, {
    "from": 44,
    "label": "has",
    "to": 37
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 30
  }, {
    "from": 44,
    "label": "has",
    "to": 31
  }, {
    "from": 44,
    "label": "has",
    "to": 38
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 29
  }, {
    "from": 44,
    "label": "has",
    "to": 30
  }, {
    "from": 44,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "calls",
    "to": 51
  }, {
    "from": 46,
    "label": "calls",
    "to": 52
  }, {
    "from": 46,
    "label": "calls",
    "to": 50
  }, {
    "from": 46,
    "label": "calls",
    "to": 50
  }, {
    "from": 46,
    "label": "calls",
    "to": 50
  }, {
    "from": 46,
    "label": "calls",
    "to": 59
  }, {
    "from": 46,
    "label": "calls",
    "to": 53
  }, {
    "from": 46,
    "label": "calls",
    "to": 53
  }, {
    "from": 46,
    "label": "calls",
    "to": 53
  }, {
    "from": 46,
    "label": "calls",
    "to": 53
  }, {
    "from": 46,
    "label": "calls",
    "to": 49
  }, {
    "from": 46,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 54
  }, {
    "from": 46,
    "label": "calls",
    "to": 47
  }, {
    "from": 46,
    "label": "calls",
    "to": 57
  }, {
    "from": 46,
    "label": "calls",
    "to": 57
  }, {
    "from": 46,
    "label": "calls",
    "to": 56
  }, {
    "from": 46,
    "label": "calls",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 46,
    "label": "declares",
    "to": 3
  }, {
    "from": 46,
    "label": "declares",
    "to": 7
  }, {
    "from": 46,
    "label": "declares",
    "to": 15
  }, {
    "from": 46,
    "label": "declares",
    "to": 26
  }, {
    "from": 46,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 61,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 61,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 61,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 62,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "requires",
    "to": 2
  }, {
    "from": 62,
    "label": "initializes",
    "to": 60
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 26
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tools_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "tools",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n        local sha = tools.sha1('The quick brown fox jumps over the lazy dog')\r\n        assert.is_same(sha,quick_brown_fox_sha1)\r\n      end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local sha = tools.sha1('The quick brown fox jumps over the lazy dog')",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assert.is_same(sha,quick_brown_fox_sha1)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function()\r\n        local base64 = tools.base64.encode('pleasure')\r\n        assert.is_same(base64,'cGxlYXN1cmU=')\r\n        local base64 = tools.base64.encode('leasure')\r\n        assert.is_same(base64,'bGVhc3VyZQ==')\r\n        local base64 = tools.base64.encode('easure')\r\n        assert.is_same(base64,'ZWFzdXJl')\r\n      end",
    "type": "function"
  }, {
    "id": 8,
    "text": "local base64 = tools.base64.encode('pleasure')",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "assert.is_same(base64,'cGxlYXN1cmU=')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local base64 = tools.base64.encode('leasure')",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "assert.is_same(base64,'bGVhc3VyZQ==')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local base64 = tools.base64.encode('easure')",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "assert.is_same(base64,'ZWFzdXJl')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n        local keys = {}\r\n        for i=1,200 do\r\n          local key = tools.generate_key()\r\n          assert.is_same(type(key),'string')\r\n          assert.is_same(#key,24)\r\n          assert.is_truthy(key:match('^[%w=/%+]*$'))\r\n          for _,other in pairs(keys) do\r\n            assert.is_not_same(other,key)\r\n          end\r\n          keys[i] = key\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 16,
    "text": "local keys = {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for i=1,200 do\r\n          local key = tools.generate_key()\r\n          assert.is_same(type(key),'string')\r\n          assert.is_same(#key,24)\r\n          assert.is_truthy(key:match('^[%w=/%+]*$'))\r\n          for _,other in pairs(keys) do\r\n            assert.is_not_same(other,key)\r\n          end\r\n          keys[i] = key\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "local key = tools.generate_key()",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "assert.is_same(type(key),'string')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.is_same(#key,24)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.is_truthy(key:match('^[%w=/%+]*$'))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "for _,other in pairs(keys) do\r\n            assert.is_not_same(other,key)\r\n          end",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "assert.is_not_same(other,key)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "keys[i] = key",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080/foo')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/foo')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080/')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com/')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com/foo')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/foo')\r\n        \r\n      end",
    "type": "function"
  }, {
    "id": 27,
    "text": "local protocol,host,port,uri = tools.parse_url('ws://www.example.com')",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert.is_same(protocol,'ws')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert.is_same(host,'www.example.com')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.is_same(port,80)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_same(uri,'/')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080')",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "assert.is_same(port,8080)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080/foo')",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "assert.is_same(uri,'/foo')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080/')",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local protocol,host,port,uri = tools.parse_url('ws://www.example.com/')",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local protocol,host,port,uri = tools.parse_url('ws://www.example.com/foo')",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n    it(\r\n      'SHA-1 algorithm works',\r\n      function()\r\n        local sha = tools.sha1('The quick brown fox jumps over the lazy dog')\r\n        assert.is_same(sha,quick_brown_fox_sha1)\r\n      end)\r\n    \r\n    it(\r\n      'Base64 encoding works',\r\n      function()\r\n        local base64 = tools.base64.encode('pleasure')\r\n        assert.is_same(base64,'cGxlYXN1cmU=')\r\n        local base64 = tools.base64.encode('leasure')\r\n        assert.is_same(base64,'bGVhc3VyZQ==')\r\n        local base64 = tools.base64.encode('easure')\r\n        assert.is_same(base64,'ZWFzdXJl')\r\n      end)\r\n    \r\n    it(\r\n      'Generate Key works',\r\n      function()\r\n        local keys = {}\r\n        for i=1,200 do\r\n          local key = tools.generate_key()\r\n          assert.is_same(type(key),'string')\r\n          assert.is_same(#key,24)\r\n          assert.is_truthy(key:match('^[%w=/%+]*$'))\r\n          for _,other in pairs(keys) do\r\n            assert.is_not_same(other,key)\r\n          end\r\n          keys[i] = key\r\n        end\r\n      end)\r\n    \r\n    it(\r\n      'URL parser works',\r\n      function()\r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080/foo')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/foo')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080/')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com/')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com/foo')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/foo')\r\n        \r\n      end)\r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 41,
    "text": "it(\r\n      'SHA-1 algorithm works',\r\n      function()\r\n        local sha = tools.sha1('The quick brown fox jumps over the lazy dog')\r\n        assert.is_same(sha,quick_brown_fox_sha1)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "it(\r\n      'Base64 encoding works',\r\n      function()\r\n        local base64 = tools.base64.encode('pleasure')\r\n        assert.is_same(base64,'cGxlYXN1cmU=')\r\n        local base64 = tools.base64.encode('leasure')\r\n        assert.is_same(base64,'bGVhc3VyZQ==')\r\n        local base64 = tools.base64.encode('easure')\r\n        assert.is_same(base64,'ZWFzdXJl')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "it(\r\n      'Generate Key works',\r\n      function()\r\n        local keys = {}\r\n        for i=1,200 do\r\n          local key = tools.generate_key()\r\n          assert.is_same(type(key),'string')\r\n          assert.is_same(#key,24)\r\n          assert.is_truthy(key:match('^[%w=/%+]*$'))\r\n          for _,other in pairs(keys) do\r\n            assert.is_not_same(other,key)\r\n          end\r\n          keys[i] = key\r\n        end\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "it(\r\n      'URL parser works',\r\n      function()\r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080/foo')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/foo')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com:8080/')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,8080)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com/')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/')\r\n        \r\n        local protocol,host,port,uri = tools.parse_url('ws://www.example.com/foo')\r\n        assert.is_same(protocol,'ws')\r\n        assert.is_same(host,'www.example.com')\r\n        assert.is_same(port,80)\r\n        assert.is_same(uri,'/foo')\r\n        \r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "",
    "type": "function container"
  }, {
    "id": 47,
    "text": "function(msg)\r\n  \r\n  local h0 = 0x67452301\r\n  local h1 = 0xEFCDAB89\r\n  local h2 = 0x98BADCFE\r\n  local h3 = 0x10325476\r\n  local h4 = 0xC3D2E1F0\r\n  \r\n  local bits = #msg * 8\r\n  -- append b10000000\r\n  msg = msg..schar(0x80)\r\n  \r\n  -- 64 bit length will be appended\r\n  local bytes = #msg + 8\r\n  \r\n  -- 512 bit append stuff\r\n  local fill_bytes = 64 - (bytes % 64)\r\n  if fill_bytes ~= 64 then\r\n    msg = msg..srep(schar(0),fill_bytes)\r\n  end\r\n  \r\n  -- append 64 big endian length\r\n  local high = math.floor(bits/2^32)\r\n  local low = bits - high*2^32\r\n  msg = msg..spack('>I>I',high,low)\r\n  \r\n  assert(#msg % 64 == 0,#msg % 64)\r\n  \r\n  for j=1,#msg,64 do\r\n    local chunk = msg:sub(j,j+63)\r\n    assert(#chunk==64,#chunk)\r\n    local words = {sunpack(chunk,srep('>I',16))}\r\n    -- index 1 contains fragment from unpack\r\n    tremove(words,1)\r\n    assert(#words==16)\r\n    for i=17,80 do\r\n      words[i] = bxor(words[i-3],words[i-8],words[i-14],words[i-16])\r\n      words[i] = rol(words[i],1)\r\n    end\r\n    local a = h0\r\n    local b = h1\r\n    local c = h2\r\n    local d = h3\r\n    local e = h4\r\n    \r\n    for i=1,80 do\r\n      local k,f\r\n      if i > 0 and i < 21 then\r\n        f = bor(band(b,c),band(bnot(b),d))\r\n        k = 0x5A827999\r\n      elseif i > 20 and i < 41 then\r\n        f = bxor(b,c,d)\r\n        k = 0x6ED9EBA1\r\n      elseif i > 40 and i < 61 then\r\n        f = bor(band(b,c),band(b,d),band(c,d))\r\n        k = 0x8F1BBCDC\r\n      elseif i > 60 and i < 81 then\r\n        f = bxor(b,c,d)\r\n        k = 0xCA62C1D6\r\n      end\r\n      \r\n      local temp = rol(a,5) + f + e + k + words[i]\r\n      e = d\r\n      d = c\r\n      c = rol(b,30)\r\n      b = a\r\n      a = temp\r\n    end\r\n    \r\n    h0 = h0 + a\r\n    h1 = h1 + b\r\n    h2 = h2 + c\r\n    h3 = h3 + d\r\n    h4 = h4 + e\r\n    \r\n  end\r\n  \r\n  -- necessary on sizeof(int) == 32 machines\r\n  h0 = band(h0,0xffffffff)\r\n  h1 = band(h1,0xffffffff)\r\n  h2 = band(h2,0xffffffff)\r\n  h3 = band(h3,0xffffffff)\r\n  h4 = band(h4,0xffffffff)\r\n  \r\n  return spack('>I>I>I>I>I',h0,h1,h2,h3,h4)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "function(url)\r\n  local protocol,host = url:match('^(%w+)://([^:/]+)')\r\n  local port,uri = url:match('.+//[^:/]+:?(%d*)(.*)')\r\n  if port and port ~= '' then\r\n    port = tonumber(port)\r\n  elseif protocol == 'ws' then\r\n    port = 80\r\n  end\r\n  if not uri or uri == '' then\r\n    uri = '/'\r\n  end\r\n  if not protocol or not host or not port or not uri then\r\n    error('Invalid URL:'..url)\r\n  end\r\n  return protocol,host,port,uri\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "function()\r\n  local r1 = mrandom(0,0xfffffff)\r\n  local r2 = mrandom(0,0xfffffff)\r\n  local r3 = mrandom(0,0xfffffff)\r\n  local r4 = mrandom(0,0xfffffff)\r\n  local key = spack('IIII',r1,r2,r3,r4)\r\n  assert(#key==16,#key)\r\n  return base64_encode(key)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "base64.encode",
    "type": "global function"
  }, {
    "id": 51,
    "text": "is_not_same",
    "type": "global function"
  }, {
    "id": 52,
    "text": "is_truthy",
    "type": "global function"
  }, {
    "id": 53,
    "text": "it",
    "type": "global function"
  }, {
    "id": 54,
    "text": "type",
    "type": "global function"
  }, {
    "id": 55,
    "text": "is_same",
    "type": "global function"
  }, {
    "id": 56,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 57,
    "text": "require",
    "type": "global function"
  }, {
    "id": 58,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 59,
    "text": "bytes",
    "type": "global function"
  }, {
    "id": 60,
    "text": "",
    "type": "global variable"
  }, {
    "id": 61,
    "text": "",
    "type": "variable container"
  }, {
    "id": 62,
    "text": "",
    "type": "require container"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "n/a"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  } ]
}