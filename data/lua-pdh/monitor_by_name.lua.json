{
  "_filename": "monitor_by_name.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-pdh/examples/monitor_by_name.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "calls",
    "to": 25
  }, {
    "from": 20,
    "label": "calls",
    "to": 3
  }, {
    "from": 20,
    "label": "calls",
    "to": 3
  }, {
    "from": 20,
    "label": "calls",
    "to": 3
  }, {
    "from": 20,
    "label": "calls",
    "to": 26
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 23
  }, {
    "from": 20,
    "label": "calls",
    "to": 21
  }, {
    "from": 20,
    "label": "calls",
    "to": 28
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 29
  }, {
    "from": 20,
    "label": "calls",
    "to": 30
  }, {
    "from": 20,
    "label": "calls",
    "to": 30
  }, {
    "from": 20,
    "label": "calls",
    "to": 22
  }, {
    "from": 20,
    "label": "calls",
    "to": 22
  }, {
    "from": 20,
    "label": "calls",
    "to": 22
  }, {
    "from": 20,
    "label": "calls",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 20
  }, {
    "from": 20,
    "label": "declares",
    "to": 3
  }, {
    "from": 20,
    "label": "declares",
    "to": 6
  }, {
    "from": 20,
    "label": "declares",
    "to": 10
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 31,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 31,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 31,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 31,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 31,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 31,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 31,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 31,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 32,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 2
  }, {
    "from": 39,
    "label": "represents",
    "to": 50
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "monitor_by_name",
    "type": "module"
  }, {
    "id": 2,
    "text": "pdh",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(...) if not ... then return assert(..., tostring((select(2, ...)))) end return ... end",
    "type": "function"
  }, {
    "id": 4,
    "text": "if not ... then return assert(..., tostring((select(2, ...)))) end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "function(i, name, pid)\r\n      if name == PROCESS_NAME then\r\n        table.insert(process_list, {i, name, pid})\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 7,
    "text": "if name == PROCESS_NAME then\r\n        table.insert(process_list, {i, name, pid})\r\n      end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "table.insert(process_list, {i, name, pid})",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function(i, name, cpu)\r\n      for instance, t in ipairs(process_list) do\r\n        if t[1] == i then\r\n          -- ??? invalid list\r\n          if name ~= t[2] then process_list = {} return false end\r\n          local name = name .. '#' .. (instance - 1)\r\n          name = counterCpu:path():gsub(\"%*#0\", name):gsub(\"%*\", name)\r\n          local pid = t[3]\r\n          print(os.date(), name, pid, cpu)\r\n        end\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 11,
    "text": "for instance, t in ipairs(process_list) do\r\n        if t[1] == i then\r\n          -- ??? invalid list\r\n          if name ~= t[2] then process_list = {} return false end\r\n          local name = name .. '#' .. (instance - 1)\r\n          name = counterCpu:path():gsub(\"%*#0\", name):gsub(\"%*\", name)\r\n          local pid = t[3]\r\n          print(os.date(), name, pid, cpu)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "if t[1] == i then\r\n          -- ??? invalid list\r\n          if name ~= t[2] then process_list = {} return false end\r\n          local name = name .. '#' .. (instance - 1)\r\n          name = counterCpu:path():gsub(\"%*#0\", name):gsub(\"%*\", name)\r\n          local pid = t[3]\r\n          print(os.date(), name, pid, cpu)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "if name ~= t[2] then process_list = {} return false end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "process_list = {}",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local name = name .. '#' .. (instance - 1)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "name = counterCpu:path():gsub(\"%*#0\", name):gsub(\"%*\", name)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local pid = t[3]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "print(os.date(), name, pid, cpu)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "",
    "type": "function container"
  }, {
    "id": 21,
    "text": "query",
    "type": "global function"
  }, {
    "id": 22,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 23,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 24,
    "text": "date",
    "type": "global function"
  }, {
    "id": 25,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 26,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 27,
    "text": "print",
    "type": "global function"
  }, {
    "id": 28,
    "text": "select",
    "type": "global function"
  }, {
    "id": 29,
    "text": "require",
    "type": "global function"
  }, {
    "id": 30,
    "text": "T",
    "type": "global function"
  }, {
    "id": 31,
    "text": "",
    "type": "variable container"
  }, {
    "id": 32,
    "text": "",
    "type": "require container"
  }, {
    "id": 33,
    "text": "",
    "type": "local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "n/a"
  }, {
    "id": 35,
    "text": "",
    "type": "local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "local variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "",
    "type": "local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 49,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "interface"
  } ]
}