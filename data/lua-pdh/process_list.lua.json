{
  "_filename": "process_list.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-pdh/examples/process_list.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 11,
    "label": "calls",
    "to": 3
  }, {
    "from": 11,
    "label": "calls",
    "to": 26
  }, {
    "from": 23,
    "label": "calls",
    "to": 29
  }, {
    "from": 23,
    "label": "calls",
    "to": 29
  }, {
    "from": 23,
    "label": "calls",
    "to": 11
  }, {
    "from": 23,
    "label": "calls",
    "to": 24
  }, {
    "from": 23,
    "label": "calls",
    "to": 13
  }, {
    "from": 23,
    "label": "calls",
    "to": 25
  }, {
    "from": 23,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 13,
    "label": "calls",
    "to": 28
  }, {
    "from": 13,
    "label": "calls",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 23
  }, {
    "from": 23,
    "label": "declares",
    "to": 3
  }, {
    "from": 23,
    "label": "declares",
    "to": 11
  }, {
    "from": 23,
    "label": "declares",
    "to": 13
  }, {
    "from": 23,
    "label": "declares",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 31,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 31,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 31,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 31,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 40,
    "label": "assigns",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 40,
    "label": "assigns",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 31,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 31,
    "label": "initializes",
    "to": 49
  }, {
    "from": 32,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "process_list",
    "type": "module"
  }, {
    "id": 2,
    "text": "psapi",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function msecToHMS(msec)\r\n  local s = math.floor(msec/1000)\r\n  local h = math.floor(s/3600); s = s - h * 3600\r\n  local m = math.floor(s/60);   s = s - m * 60\r\n  return h, m, s\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local s = math.floor(msec/1000)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local h = math.floor(s/3600)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "s = s - h * 3600",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "local m = math.floor(s/60)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "s = s - m * 60",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function hms(msec)\r\n  return (string.format(\"%.2d:%.2d:%.2d\", msecToHMS(msec)))\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function M(n, K)\r\n  return tostring((math.floor(n / K))) .. ' ' .. MNAME[K]\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function(i, pid)\r\n  local ok, status = process:open(pid)\r\n  if not ok then print(pid, status)\r\n  else\r\n    local memory_info = process:memory_info()\r\n    local creationTime, exitTime, kernelTime, userTime = process:times()\r\n    print(i, pid, process:base_name() or \"----\", hms(kernelTime + userTime), M(memory_info.WorkingSetSize, KB), process:command_line())\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local ok, status = process:open(pid)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if not ok then print(pid, status)\r\n  else\r\n    local memory_info = process:memory_info()\r\n    local creationTime, exitTime, kernelTime, userTime = process:times()\r\n    print(i, pid, process:base_name() or \"----\", hms(kernelTime + userTime), M(memory_info.WorkingSetSize, KB), process:command_line())\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "print(pid, status)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local memory_info = process:memory_info()",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local creationTime, exitTime, kernelTime, userTime = process:times()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "print(i, pid, process:base_name() or \"----\", hms(kernelTime + userTime), M(memory_info.WorkingSetSize, KB), process:command_line())",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "",
    "type": "function container"
  }, {
    "id": 24,
    "text": "process",
    "type": "global function"
  }, {
    "id": 25,
    "text": "enum_processes",
    "type": "global function"
  }, {
    "id": 26,
    "text": "format",
    "type": "global function"
  }, {
    "id": 27,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 28,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 29,
    "text": "print",
    "type": "global function"
  }, {
    "id": 30,
    "text": "require",
    "type": "global function"
  }, {
    "id": 31,
    "text": "",
    "type": "variable container"
  }, {
    "id": 32,
    "text": "",
    "type": "require container"
  }, {
    "id": 33,
    "text": "",
    "type": "local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "number"
  }, {
    "id": 35,
    "text": "",
    "type": "local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "local variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "",
    "type": "local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 41,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 42,
    "text": "",
    "type": "string"
  }, {
    "id": 43,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 44,
    "text": "",
    "type": "string"
  }, {
    "id": 45,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 46,
    "text": "",
    "type": "string"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "require local variable"
  } ]
}