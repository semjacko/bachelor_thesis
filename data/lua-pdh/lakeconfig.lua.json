{
  "_filename": "lakeconfig.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-pdh/lakeconfig.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 5
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 5
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 5
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 40
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 51,
    "label": "has",
    "to": 40
  }, {
    "from": 49,
    "label": "has",
    "to": 5
  }, {
    "from": 49,
    "label": "has",
    "to": 5
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 55
  }, {
    "from": 62,
    "label": "has",
    "to": 56
  }, {
    "from": 62,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 60
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 40
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 69
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 5
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 5
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 5
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 5
  }, {
    "from": 77,
    "label": "has",
    "to": 5
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 84,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 84,
    "label": "has",
    "to": 94
  }, {
    "from": 84,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 83,
    "label": "has",
    "to": 95
  }, {
    "from": 83,
    "label": "has",
    "to": 96
  }, {
    "from": 83,
    "label": "has",
    "to": 97
  }, {
    "from": 83,
    "label": "has",
    "to": 98
  }, {
    "from": 83,
    "label": "has",
    "to": 99
  }, {
    "from": 83,
    "label": "has",
    "to": 100
  }, {
    "from": 83,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 18
  }, {
    "from": 102,
    "label": "has",
    "to": 19
  }, {
    "from": 102,
    "label": "has",
    "to": 20
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 5
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 5
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 5
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 22,
    "label": "calls",
    "to": 22
  }, {
    "from": 29,
    "label": "calls",
    "to": 22
  }, {
    "from": 54,
    "label": "calls",
    "to": 111
  }, {
    "from": 54,
    "label": "calls",
    "to": 111
  }, {
    "from": 62,
    "label": "calls",
    "to": 111
  }, {
    "from": 62,
    "label": "calls",
    "to": 111
  }, {
    "from": 83,
    "label": "calls",
    "to": 111
  }, {
    "from": 83,
    "label": "calls",
    "to": 111
  }, {
    "from": 83,
    "label": "calls",
    "to": 111
  }, {
    "from": 83,
    "label": "calls",
    "to": 111
  }, {
    "from": 83,
    "label": "calls",
    "to": 111
  }, {
    "from": 110,
    "label": "calls",
    "to": 111
  }, {
    "from": 110,
    "label": "calls",
    "to": 111
  }, {
    "from": 110,
    "label": "calls",
    "to": 111
  }, {
    "from": 110,
    "label": "calls",
    "to": 111
  }, {
    "from": 110,
    "label": "calls",
    "to": 111
  }, {
    "from": 110,
    "label": "calls",
    "to": 111
  }, {
    "from": 7,
    "label": "calls",
    "to": 112
  }, {
    "from": 7,
    "label": "calls",
    "to": 112
  }, {
    "from": 65,
    "label": "calls",
    "to": 112
  }, {
    "from": 65,
    "label": "calls",
    "to": 112
  }, {
    "from": 7,
    "label": "calls",
    "to": 113
  }, {
    "from": 65,
    "label": "calls",
    "to": 114
  }, {
    "from": 65,
    "label": "calls",
    "to": 115
  }, {
    "from": 54,
    "label": "calls",
    "to": 39
  }, {
    "from": 65,
    "label": "calls",
    "to": 39
  }, {
    "from": 7,
    "label": "calls",
    "to": 116
  }, {
    "from": 7,
    "label": "calls",
    "to": 119
  }, {
    "from": 22,
    "label": "calls",
    "to": 119
  }, {
    "from": 31,
    "label": "calls",
    "to": 123
  }, {
    "from": 83,
    "label": "calls",
    "to": 77
  }, {
    "from": 35,
    "label": "calls",
    "to": 117
  }, {
    "from": 22,
    "label": "calls",
    "to": 15
  }, {
    "from": 65,
    "label": "calls",
    "to": 31
  }, {
    "from": 39,
    "label": "calls",
    "to": 120
  }, {
    "from": 39,
    "label": "calls",
    "to": 120
  }, {
    "from": 39,
    "label": "calls",
    "to": 120
  }, {
    "from": 49,
    "label": "calls",
    "to": 120
  }, {
    "from": 49,
    "label": "calls",
    "to": 120
  }, {
    "from": 49,
    "label": "calls",
    "to": 120
  }, {
    "from": 54,
    "label": "calls",
    "to": 120
  }, {
    "from": 62,
    "label": "calls",
    "to": 120
  }, {
    "from": 65,
    "label": "calls",
    "to": 120
  }, {
    "from": 65,
    "label": "calls",
    "to": 120
  }, {
    "from": 65,
    "label": "calls",
    "to": 120
  }, {
    "from": 39,
    "label": "calls",
    "to": 121
  }, {
    "from": 39,
    "label": "calls",
    "to": 121
  }, {
    "from": 49,
    "label": "calls",
    "to": 121
  }, {
    "from": 49,
    "label": "calls",
    "to": 121
  }, {
    "from": 65,
    "label": "calls",
    "to": 121
  }, {
    "from": 65,
    "label": "calls",
    "to": 121
  }, {
    "from": 39,
    "label": "calls",
    "to": 122
  }, {
    "from": 49,
    "label": "calls",
    "to": 122
  }, {
    "from": 2,
    "label": "calls",
    "to": 124
  }, {
    "from": 62,
    "label": "calls",
    "to": 49
  }, {
    "from": 15,
    "label": "calls",
    "to": 7
  }, {
    "from": 35,
    "label": "calls",
    "to": 125
  }, {
    "from": 7,
    "label": "calls",
    "to": 126
  }, {
    "from": 7,
    "label": "calls",
    "to": 126
  }, {
    "from": 22,
    "label": "calls",
    "to": 126
  }, {
    "from": 110,
    "label": "calls",
    "to": 127
  }, {
    "from": 77,
    "label": "calls",
    "to": 118
  }, {
    "from": 110,
    "label": "calls",
    "to": 128
  }, {
    "from": 110,
    "label": "calls",
    "to": 128
  }, {
    "from": 110,
    "label": "calls",
    "to": 128
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 110,
    "label": "declares",
    "to": 2
  }, {
    "from": 110,
    "label": "declares",
    "to": 7
  }, {
    "from": 110,
    "label": "declares",
    "to": 15
  }, {
    "from": 110,
    "label": "declares",
    "to": 22
  }, {
    "from": 110,
    "label": "declares",
    "to": 29
  }, {
    "from": 110,
    "label": "declares",
    "to": 31
  }, {
    "from": 110,
    "label": "declares",
    "to": 35
  }, {
    "from": 110,
    "label": "declares",
    "to": 39
  }, {
    "from": 110,
    "label": "declares",
    "to": 49
  }, {
    "from": 110,
    "label": "declares",
    "to": 54
  }, {
    "from": 110,
    "label": "declares",
    "to": 62
  }, {
    "from": 110,
    "label": "declares",
    "to": 65
  }, {
    "from": 110,
    "label": "declares",
    "to": 73
  }, {
    "from": 110,
    "label": "declares",
    "to": 77
  }, {
    "from": 110,
    "label": "declares",
    "to": 83
  }, {
    "from": 110,
    "label": "declares",
    "to": 102
  }, {
    "from": 110,
    "label": "declares",
    "to": 104
  }, {
    "from": 110,
    "label": "declares",
    "to": 106
  }, {
    "from": 110,
    "label": "declares",
    "to": 108
  }, {
    "from": 1,
    "label": "contains",
    "to": 129
  }, {
    "from": 1,
    "label": "contains",
    "to": 130
  }, {
    "from": 129,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 129,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 130,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "requires",
    "to": 136
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lakeconfig",
    "type": "module"
  }, {
    "id": 2,
    "text": "function vc_version()\r\n  local VER = lake.compiler_version()\r\n  MSVC_VER = ({\r\n    [15] = '9';\r\n    [16] = '10';\r\n  })[VER.MAJOR] or ''\r\n  return MSVC_VER\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local VER = lake.compiler_version()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "MSVC_VER = ({\r\n    [15] = '9';\r\n    [16] = '10';\r\n  })[VER.MAJOR] or ''",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function arkey(t)\r\n  assert(type(t) == 'table')\r\n  local keys = {}\r\n  for k in pairs(t) do\r\n    assert(type(k) == 'number')\r\n    table.insert(keys, k)\r\n  end\r\n  table.sort(keys)\r\n  return keys\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "assert(type(t) == 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "local keys = {}",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for k in pairs(t) do\r\n    assert(type(k) == 'number')\r\n    table.insert(keys, k)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "assert(type(k) == 'number')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "table.insert(keys, k)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "table.sort(keys)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function ikeys(t)\r\n  local keys = arkey(t)\r\n  local i = 0\r\n  return function()\r\n    i = i + 1\r\n    local k = keys[i]\r\n    if k == nil then return end\r\n    return k, t[k]\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local keys = arkey(t)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local k = keys[i]",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if k == nil then return end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function expand(arr, t)\r\n  if t == nil then return arr end\r\n\r\n  if type(t) ~= 'table' then\r\n    table.insert(arr, t)\r\n    return arr\r\n  end\r\n\r\n  for _, v in ikeys(t) do\r\n    expand(arr, v)\r\n  end\r\n\r\n  return arr\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "if t == nil then return arr end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "if type(t) ~= 'table' then\r\n    table.insert(arr, t)\r\n    return arr\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "table.insert(arr, t)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "for _, v in ikeys(t) do\r\n    expand(arr, v)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "expand(arr, v)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function L(...)\r\n  return expand({}, {...})\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function prequire(...)\r\n  local ok, mod = pcall(require, ...)\r\n  if ok then return mod end\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if ok then return mod end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function each_join(dir, list)\r\n  for i, v in ipairs(list) do\r\n    list[i] = path.join(dir, v)\r\n  end\r\n  return list\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "for i, v in ipairs(list) do\r\n    list[i] = path.join(dir, v)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "list[i] = path.join(dir, v)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function run(file, cwd)\r\n  print()\r\n  print(\"run \" .. file)\r\n  if not TESTING then\r\n    if cwd then lake.chdir(cwd) end\r\n    local status, code = utils.execute( LUA_RUNNER .. ' ' .. file )\r\n    if cwd then lake.chdir(\"<\") end\r\n    print()\r\n    return status, code\r\n  end\r\n  return true, 0\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "print(\"run \" .. file)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "if not TESTING then\r\n    if cwd then lake.chdir(cwd) end\r\n    local status, code = utils.execute( LUA_RUNNER .. ' ' .. file )\r\n    if cwd then lake.chdir(\"<\") end\r\n    print()\r\n    return status, code\r\n  end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "if cwd then lake.chdir(cwd) end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "lake.chdir(cwd)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "local status, code = utils.execute( LUA_RUNNER .. ' ' .. file )",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if cwd then lake.chdir(\"<\") end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "lake.chdir(\"<\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function exec(file, cwd)\r\n  print()\r\n  print(\"exec \" .. file)\r\n  if not TESTING then\r\n    if cwd then lake.chdir(cwd) end\r\n    local status, code = utils.execute( file )\r\n    if cwd then lake.chdir(\"<\") end\r\n    print()\r\n    return status, code\r\n  end\r\n  return true, 0\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "print(\"exec \" .. file)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "if not TESTING then\r\n    if cwd then lake.chdir(cwd) end\r\n    local status, code = utils.execute( file )\r\n    if cwd then lake.chdir(\"<\") end\r\n    print()\r\n    return status, code\r\n  end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "local status, code = utils.execute( file )",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function run_test(name, params)\r\n  local test_dir = TESTDIR or J(ROOT, 'test')\r\n  local cmd = J(test_dir, name)\r\n  if params then cmd = cmd .. ' ' .. params end\r\n  local ok = run(cmd, test_dir)\r\n  print(\"TEST \" .. name .. (ok and ' - pass!' or ' - fail!'))\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local test_dir = TESTDIR or J(ROOT, 'test')",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local cmd = J(test_dir, name)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if params then cmd = cmd .. ' ' .. params end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "cmd = cmd .. ' ' .. params",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "local ok = run(cmd, test_dir)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "print(\"TEST \" .. name .. (ok and ' - pass!' or ' - fail!'))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function exec_test(name, params)\r\n  local test_dir = TESTDIR or J(ROOT, 'test')\r\n  local cmd = J(test_dir, name)\r\n  if params then cmd = cmd .. ' ' .. params end\r\n  local ok = exec(cmd, test_dir)\r\n  print(\"TEST \" .. name .. (ok and ' - pass!' or ' - fail!'))\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local ok = exec(cmd, test_dir)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function spawn(file, cwd)\r\n    local winapi = prequire \"winapi\"\r\n    if not winapi then\r\n      quit('needs winapi for spawn!')\r\n      return false\r\n    end\r\n\r\n    print(\"spawn \" .. file)\r\n    if not TESTING then\r\n      if cwd then lake.chdir(cwd) end\r\n      assert(winapi.shell_exec(nil, LUA_RUNNER, file, cwd))\r\n      if cwd then lake.chdir(\"<\") end\r\n      print()\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "local winapi = prequire \"winapi\"",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if not winapi then\r\n      quit('needs winapi for spawn!')\r\n      return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "quit('needs winapi for spawn!')",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "print(\"spawn \" .. file)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if not TESTING then\r\n      if cwd then lake.chdir(cwd) end\r\n      assert(winapi.shell_exec(nil, LUA_RUNNER, file, cwd))\r\n      if cwd then lake.chdir(\"<\") end\r\n      print()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "assert(winapi.shell_exec(nil, LUA_RUNNER, file, cwd))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function spawn(file, cwd)\r\n    print(\"spawn \" .. file)\r\n    if not TESTING then\r\n      assert(run(file .. ' &', cwd))\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 74,
    "text": "if not TESTING then\r\n      assert(run(file .. ' &', cwd))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "assert(run(file .. ' &', cwd))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function as_bool(v,d)\r\n  if v == nil then return not not d end\r\n  local n = tonumber(v)\r\n  if n == 0 then return false end\r\n  if n then return true end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "if v == nil then return not not d end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "local n = tonumber(v)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if n == 0 then return false end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "if n then return true end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function INITLAKEFILE()\r\n  if LUA_VER == '5.3' then\r\n    LUA_NEED   = 'lua53'\r\n    LUA_DIR    = ENV.LUA_DIR_5_3 or ENV.LUA_DIR\r\n    LUA_RUNNER = LUA_RUNNER or 'lua53'\r\n  elseif LUA_VER == '5.2' then\r\n    LUA_NEED   = 'lua52'\r\n    LUA_DIR    = ENV.LUA_DIR_5_2 or ENV.LUA_DIR\r\n    LUA_RUNNER = LUA_RUNNER or 'lua52'\r\n  elseif LUA_VER == '5.1' then\r\n    LUA_NEED   = 'lua51'\r\n    LUA_DIR    = ENV.LUA_DIR\r\n    LUA_RUNNER = LUA_RUNNER or 'lua'\r\n  else\r\n    LUA_NEED   = 'lua'\r\n    LUA_DIR    = ENV.LUA_DIR\r\n    LUA_RUNNER = LUA_RUNNER or 'lua'\r\n  end\r\n  ROOT    = ROOT    or J( LUA_DIR, 'libs', PROJECT )\r\n  LUADIR  = LUADIR  or J( ROOT,    'share'         )\r\n  LIBDIR  = LIBDIR  or J( ROOT,    'share'         )\r\n  TESTDIR = TESTDIR or J( ROOT,    'test'          )\r\n  DOCDIR  = DOCDIR  or J( ROOT,    'doc'           )\r\n  DYNAMIC = as_bool(DYNAMIC, false)\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "if LUA_VER == '5.3' then\r\n    LUA_NEED   = 'lua53'\r\n    LUA_DIR    = ENV.LUA_DIR_5_3 or ENV.LUA_DIR\r\n    LUA_RUNNER = LUA_RUNNER or 'lua53'\r\n  elseif LUA_VER == '5.2' then\r\n    LUA_NEED   = 'lua52'\r\n    LUA_DIR    = ENV.LUA_DIR_5_2 or ENV.LUA_DIR\r\n    LUA_RUNNER = LUA_RUNNER or 'lua52'\r\n  elseif LUA_VER == '5.1' then\r\n    LUA_NEED   = 'lua51'\r\n    LUA_DIR    = ENV.LUA_DIR\r\n    LUA_RUNNER = LUA_RUNNER or 'lua'\r\n  else\r\n    LUA_NEED   = 'lua'\r\n    LUA_DIR    = ENV.LUA_DIR\r\n    LUA_RUNNER = LUA_RUNNER or 'lua'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "LUA_NEED   = 'lua53'",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "LUA_DIR    = ENV.LUA_DIR_5_3 or ENV.LUA_DIR",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "LUA_RUNNER = LUA_RUNNER or 'lua53'",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "LUA_NEED   = 'lua52'",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "LUA_DIR    = ENV.LUA_DIR_5_2 or ENV.LUA_DIR",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "LUA_RUNNER = LUA_RUNNER or 'lua52'",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "LUA_NEED   = 'lua51'",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "LUA_DIR    = ENV.LUA_DIR",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "LUA_RUNNER = LUA_RUNNER or 'lua'",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "LUA_NEED   = 'lua'",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "ROOT    = ROOT    or J( LUA_DIR, 'libs', PROJECT )",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "LUADIR  = LUADIR  or J( ROOT,    'share'         )",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "LIBDIR  = LIBDIR  or J( ROOT,    'share'         )",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "TESTDIR = TESTDIR or J( ROOT,    'test'          )",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "DOCDIR  = DOCDIR  or J( ROOT,    'doc'           )",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "DYNAMIC = as_bool(DYNAMIC, false)",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function()\r\n    i = i + 1\r\n    local k = keys[i]\r\n    if k == nil then return end\r\n    return k, t[k]\r\n  end",
    "type": "function"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function()\r\n  return {\r\n    incdir = J(ENV.LUA_DIR_5_3, 'include');\r\n    libdir = J(ENV.LUA_DIR_5_3, 'lib');\r\n    libs = {'lua53'};\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function()\r\n  return {\r\n    incdir = J(ENV.LUA_DIR_5_2, 'include');\r\n    libdir = J(ENV.LUA_DIR_5_2, 'lib');\r\n    libs = {'lua52'};\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function()\r\n  return {\r\n    incdir = J(ENV.LUA_DIR, 'include');\r\n    libdir = J(ENV.LUA_DIR, 'lib');\r\n    libs = {'lua5.1'};\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "",
    "type": "function container"
  }, {
    "id": 111,
    "text": "J",
    "type": "global function"
  }, {
    "id": 112,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 113,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 114,
    "text": "shell_exec",
    "type": "global function"
  }, {
    "id": 115,
    "text": "quit",
    "type": "global function"
  }, {
    "id": 116,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 117,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 118,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 119,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 120,
    "text": "print",
    "type": "global function"
  }, {
    "id": 121,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 122,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 123,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 124,
    "text": "compiler_version",
    "type": "global function"
  }, {
    "id": 125,
    "text": "join",
    "type": "global function"
  }, {
    "id": 126,
    "text": "type",
    "type": "global function"
  }, {
    "id": 127,
    "text": "require",
    "type": "global function"
  }, {
    "id": 128,
    "text": "define_need",
    "type": "global function"
  }, {
    "id": 129,
    "text": "",
    "type": "variable container"
  }, {
    "id": 130,
    "text": "",
    "type": "require container"
  }, {
    "id": 131,
    "text": "",
    "type": "global variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "global variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "io",
    "type": "module"
  } ]
}