{
  "_filename": "bench.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luasys/test/mem/bench.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "calls",
    "to": 6
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 14
  }, {
    "from": 5,
    "label": "calls",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 5
  }, {
    "from": 5,
    "label": "declares",
    "to": 2
  }, {
    "from": 5,
    "label": "declares",
    "to": 3
  }, {
    "from": 5,
    "label": "declares",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 10
  }, {
    "from": 5,
    "label": "calls",
    "to": 10
  }, {
    "from": 5,
    "label": "calls",
    "to": 10
  }, {
    "from": 5,
    "label": "calls",
    "to": 10
  }, {
    "from": 5,
    "label": "calls",
    "to": 11
  }, {
    "from": 5,
    "label": "calls",
    "to": 6
  }, {
    "from": 5,
    "label": "calls",
    "to": 7
  }, {
    "from": 5,
    "label": "calls",
    "to": 7
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 13
  }, {
    "from": 5,
    "label": "calls",
    "to": 12
  }, {
    "from": 5,
    "label": "calls",
    "to": 12
  }, {
    "from": 5,
    "label": "calls",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 16
  }, {
    "from": 16,
    "label": "initializes",
    "to": 17
  }, {
    "from": 16,
    "label": "initializes",
    "to": 18
  }, {
    "from": 1,
    "label": "contains",
    "to": 20
  }, {
    "from": 1,
    "label": "contains",
    "to": 21
  }, {
    "from": 21,
    "label": "initializes",
    "to": 22
  }, {
    "from": 22,
    "label": "requires",
    "to": 19
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bench",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function read_cb(evq, evid, fd)\r\n    count = count + (fd:read(1) and 1 or 0)\r\n\r\n    if writes ~= 0 then\r\n\tlocal widx = events_idx[evid] + 1\r\n\tif widx > num_pipes then\r\n\t    widx = widx - num_pipes\r\n\tend\r\n\r\n\tlocal fdo = pipes[widx][2]\r\n\tfdo:write(\"e\")\r\n\twrites = writes - 1\r\n\tfired = fired + 1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function run_once(evq)\r\n    for i = 1, num_pipes do\r\n\tlocal fdi = pipes[i][1]\r\n\tlocal evid = events[i]\r\n\tif evid then\r\n\t    evq:del(evid, true)\r\n\tend\r\n\tevid = evq:add(fdi, \"r\", read_cb)\r\n\tif not evid then\r\n\t    error(errorMessage)\r\n\tend\r\n\tevents[i], events_idx[evid] = evid, i\r\n    end\r\n\r\n    evq:loop(0, true)\r\n\r\n    fired = 0\r\n    local space = math.floor(num_pipes / num_active)\r\n    for i = 0, num_active - 1 do\r\n\tlocal fdo = pipes[i * space + 1][2]\r\n\tfdo:write(\"e\")\r\n\tfired = fired + 1\r\n    end\r\n\r\n    count = 0\r\n    writes = num_writes\r\n\r\n    local xcount = 0\r\n    period:start()\r\n    repeat\r\n\tevq:loop(0, true)\r\n\txcount = xcount + 1\r\n    until (count == fired)\r\n    local res = period:get()\r\n\r\n    if xcount ~= count then\r\n\tsys.stderr:write(\"Xcount: \", xcount, \", Rcount: \", count, \"\\n\")\r\n    end\r\n    return res\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function main(npipes, nactives, nwrites)\r\n    num_pipes = tonumber(npipes) or 100\r\n    num_active = tonumber(nactives) or 1\r\n    num_writes = tonumber(nwrites) or 100\r\n\r\n    assert(sys.limit_nfiles(num_pipes * 2 + 50))\r\n\r\n    for i = 1, num_pipes do\r\n\tlocal fdi, fdo, res\r\n\tif USE_PIPES then\r\n\t    fdi, fdo = sys.handle(), sys.handle()\r\n\t    res = fdi:pipe(fdo)\r\n\telse\r\n\t    fdi, fdo = sock.handle(), sock.handle()\r\n\t    res = fdi:socket(fdo)\r\n\tend\r\n\tif not res then\r\n\t    error(errorMessage)\r\n\tend\r\n\tpipes[i] = {fdi, fdo}\r\n    end\r\n\r\n    local evq = assert(sys.event_queue())\r\n\r\n    for i = 1, 25 do\r\n\tprint(run_once(evq))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "period",
    "type": "global function"
  }, {
    "id": 7,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 8,
    "text": "handle",
    "type": "global function"
  }, {
    "id": 9,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 10,
    "text": "print",
    "type": "global function"
  }, {
    "id": 11,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 12,
    "text": "open",
    "type": "global function"
  }, {
    "id": 13,
    "text": "pointer",
    "type": "global function"
  }, {
    "id": 14,
    "text": "require",
    "type": "global function"
  }, {
    "id": 15,
    "text": "",
    "type": "variable container"
  }, {
    "id": 16,
    "text": "",
    "type": "require container"
  }, {
    "id": 17,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 18,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 19,
    "text": "(sys)",
    "type": "module"
  }, {
    "id": 20,
    "text": "",
    "type": "variable container"
  }, {
    "id": 21,
    "text": "",
    "type": "require container"
  }, {
    "id": 22,
    "text": "",
    "type": "require local variable"
  } ]
}