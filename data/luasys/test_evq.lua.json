{
  "_filename": "test_evq.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luasys/test/test_evq.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "calls",
    "to": 22
  }, {
    "from": 21,
    "label": "calls",
    "to": 22
  }, {
    "from": 21,
    "label": "calls",
    "to": 24
  }, {
    "from": 21,
    "label": "calls",
    "to": 28
  }, {
    "from": 21,
    "label": "calls",
    "to": 23
  }, {
    "from": 5,
    "label": "calls",
    "to": 23
  }, {
    "from": 5,
    "label": "calls",
    "to": 23
  }, {
    "from": 5,
    "label": "calls",
    "to": 23
  }, {
    "from": 5,
    "label": "calls",
    "to": 23
  }, {
    "from": 21,
    "label": "calls",
    "to": 23
  }, {
    "from": 21,
    "label": "calls",
    "to": 23
  }, {
    "from": 14,
    "label": "calls",
    "to": 23
  }, {
    "from": 14,
    "label": "calls",
    "to": 23
  }, {
    "from": 21,
    "label": "calls",
    "to": 23
  }, {
    "from": 21,
    "label": "calls",
    "to": 23
  }, {
    "from": 21,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 21,
    "label": "calls",
    "to": 25
  }, {
    "from": 2,
    "label": "calls",
    "to": 25
  }, {
    "from": 21,
    "label": "calls",
    "to": 25
  }, {
    "from": 21,
    "label": "calls",
    "to": 25
  }, {
    "from": 14,
    "label": "calls",
    "to": 25
  }, {
    "from": 14,
    "label": "calls",
    "to": 25
  }, {
    "from": 21,
    "label": "calls",
    "to": 25
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 21
  }, {
    "from": 21,
    "label": "declares",
    "to": 2
  }, {
    "from": 21,
    "label": "declares",
    "to": 5
  }, {
    "from": 21,
    "label": "declares",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "requires",
    "to": 29
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_evq",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function sleep(msg)\r\n\tprint(msg, coroutine.yield())\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(msg, coroutine.yield())",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function start(co)\r\n\tlocal evid = assert(evq:add_timer(co, 10))\r\n\tsleep\"init\"\r\n\tassert(evq:timeout(evid, 20))\r\n\tsleep\"work\"\r\n\tassert(evq:timeout(evid, 30))\r\n\tsleep\"done\"\r\n\tassert(evq:del(evid))\r\n    end",
    "type": "function"
  }, {
    "id": 6,
    "text": "local evid = assert(evq:add_timer(co, 10))",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "sleep\"init\"",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert(evq:timeout(evid, 20))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "sleep\"work\"",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert(evq:timeout(evid, 30))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "sleep\"done\"",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert(evq:del(evid))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function on_signal(evq, evid, _, _, _, timeout)\r\n\tif timeout then\r\n\t    assert(evq:timeout(evid))\r\n\t    assert(evq:ignore_signal(\"INT\", false))\r\n\t    print\"SIGINT enabled. Please, press Ctrl-C...\"\r\n\telse\r\n\t    print\"Thanks!\"\r\n\tend\r\n    end",
    "type": "function"
  }, {
    "id": 15,
    "text": "if timeout then\r\n\t    assert(evq:timeout(evid))\r\n\t    assert(evq:ignore_signal(\"INT\", false))\r\n\t    print\"SIGINT enabled. Please, press Ctrl-C...\"\r\n\telse\r\n\t    print\"Thanks!\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "assert(evq:timeout(evid))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert(evq:ignore_signal(\"INT\", false))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "print\"SIGINT enabled. Please, press Ctrl-C...\"",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "print\"Thanks!\"",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "",
    "type": "function container"
  }, {
    "id": 22,
    "text": "event_queue",
    "type": "global function"
  }, {
    "id": 23,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 24,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 25,
    "text": "print",
    "type": "global function"
  }, {
    "id": 26,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 27,
    "text": "create",
    "type": "global function"
  }, {
    "id": 28,
    "text": "require",
    "type": "global function"
  }, {
    "id": 29,
    "text": "(sys)",
    "type": "module"
  }, {
    "id": 30,
    "text": "",
    "type": "variable container"
  }, {
    "id": 31,
    "text": "",
    "type": "require container"
  }, {
    "id": 32,
    "text": "",
    "type": "require local variable"
  } ]
}