{
  "_filename": "fcgi.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luasys/test/isa/fcgi.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 13
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 17
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 50
  }, {
    "from": 39,
    "label": "has",
    "to": 6
  }, {
    "from": 39,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 60
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 66,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 81,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 81,
    "label": "has",
    "to": 91
  }, {
    "from": 81,
    "label": "has",
    "to": 6
  }, {
    "from": 81,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 57
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 84
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 93,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 93,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 108,
    "label": "has",
    "to": 6
  }, {
    "from": 108,
    "label": "has",
    "to": 112
  }, {
    "from": 108,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 108,
    "label": "has",
    "to": 6
  }, {
    "from": 108,
    "label": "has",
    "to": 115
  }, {
    "from": 108,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 61
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 108,
    "label": "has",
    "to": 6
  }, {
    "from": 108,
    "label": "has",
    "to": 119
  }, {
    "from": 108,
    "label": "has",
    "to": 120
  }, {
    "from": 39,
    "label": "calls",
    "to": 126
  }, {
    "from": 39,
    "label": "calls",
    "to": 126
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 128
  }, {
    "from": 121,
    "label": "calls",
    "to": 2
  }, {
    "from": 121,
    "label": "calls",
    "to": 2
  }, {
    "from": 108,
    "label": "calls",
    "to": 2
  }, {
    "from": 108,
    "label": "calls",
    "to": 2
  }, {
    "from": 108,
    "label": "calls",
    "to": 2
  }, {
    "from": 121,
    "label": "calls",
    "to": 52
  }, {
    "from": 121,
    "label": "calls",
    "to": 81
  }, {
    "from": 121,
    "label": "calls",
    "to": 131
  }, {
    "from": 121,
    "label": "calls",
    "to": 132
  }, {
    "from": 121,
    "label": "calls",
    "to": 56
  }, {
    "from": 121,
    "label": "calls",
    "to": 125
  }, {
    "from": 39,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 127
  }, {
    "from": 121,
    "label": "calls",
    "to": 133
  }, {
    "from": 121,
    "label": "calls",
    "to": 140
  }, {
    "from": 121,
    "label": "calls",
    "to": 140
  }, {
    "from": 121,
    "label": "calls",
    "to": 123
  }, {
    "from": 121,
    "label": "calls",
    "to": 130
  }, {
    "from": 121,
    "label": "calls",
    "to": 134
  }, {
    "from": 12,
    "label": "calls",
    "to": 135
  }, {
    "from": 121,
    "label": "calls",
    "to": 135
  }, {
    "from": 81,
    "label": "calls",
    "to": 129
  }, {
    "from": 81,
    "label": "calls",
    "to": 66
  }, {
    "from": 121,
    "label": "calls",
    "to": 138
  }, {
    "from": 121,
    "label": "calls",
    "to": 139
  }, {
    "from": 121,
    "label": "calls",
    "to": 12
  }, {
    "from": 121,
    "label": "calls",
    "to": 12
  }, {
    "from": 121,
    "label": "calls",
    "to": 12
  }, {
    "from": 121,
    "label": "calls",
    "to": 124
  }, {
    "from": 121,
    "label": "calls",
    "to": 122
  }, {
    "from": 108,
    "label": "calls",
    "to": 136
  }, {
    "from": 108,
    "label": "calls",
    "to": 137
  }, {
    "from": 1,
    "label": "contains",
    "to": 121
  }, {
    "from": 121,
    "label": "declares",
    "to": 2
  }, {
    "from": 121,
    "label": "declares",
    "to": 5
  }, {
    "from": 121,
    "label": "declares",
    "to": 8
  }, {
    "from": 121,
    "label": "declares",
    "to": 10
  }, {
    "from": 121,
    "label": "declares",
    "to": 12
  }, {
    "from": 121,
    "label": "declares",
    "to": 19
  }, {
    "from": 121,
    "label": "declares",
    "to": 27
  }, {
    "from": 121,
    "label": "declares",
    "to": 32
  }, {
    "from": 121,
    "label": "declares",
    "to": 39
  }, {
    "from": 121,
    "label": "declares",
    "to": 52
  }, {
    "from": 121,
    "label": "declares",
    "to": 56
  }, {
    "from": 121,
    "label": "declares",
    "to": 63
  }, {
    "from": 121,
    "label": "declares",
    "to": 66
  }, {
    "from": 121,
    "label": "declares",
    "to": 81
  }, {
    "from": 121,
    "label": "declares",
    "to": 93
  }, {
    "from": 121,
    "label": "declares",
    "to": 108
  }, {
    "from": 1,
    "label": "contains",
    "to": 141
  }, {
    "from": 1,
    "label": "contains",
    "to": 142
  }, {
    "from": 142,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "requires",
    "to": 144
  }, {
    "from": 142,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "requires",
    "to": 146
  }, {
    "from": 147,
    "label": "requires",
    "to": 144
  }, {
    "from": 93,
    "label": "represents",
    "to": 148
  }, {
    "from": 149,
    "label": "requires",
    "to": 144
  }, {
    "from": 150,
    "label": "requires",
    "to": 144
  }, {
    "from": 151,
    "label": "requires",
    "to": 144
  }, {
    "from": 152,
    "label": "requires",
    "to": 144
  }, {
    "from": 153,
    "label": "requires",
    "to": 146
  }, {
    "from": 154,
    "label": "requires",
    "to": 144
  }, {
    "from": 155,
    "label": "requires",
    "to": 144
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fcgi",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(title, msg)\r\n\tstderr:write(title, \": \", msg or errorMessage, \"\\n\")\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "stderr:write(title, \": \", msg or errorMessage, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function(req, name)\r\n\treturn req[name]\r\n    end",
    "type": "function"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function(req)\r\n\treturn req.stdin\r\n    end",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function(req)\r\n    end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function out(req, s)\r\n\tlocal chan = req.channel\r\n\tlocal buffer_out = chan.buffer_out\r\n\r\n\tchan.prev = fcgi_encode(buffer_out, req.id, chan.prev, s)\r\n\r\n\tif buffer_out:seek() > BUFER_OUT_SIZE\r\n\t    and chan.fd:write(buffer_out) ~= nil\r\n\tthen\r\n\t\tchan.prev = nil\r\n\tend\r\n    end",
    "type": "function"
  }, {
    "id": 13,
    "text": "local chan = req.channel",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local buffer_out = chan.buffer_out",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "chan.prev = fcgi_encode(buffer_out, req.id, chan.prev, s)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if buffer_out:seek() > BUFER_OUT_SIZE\r\n\t    and chan.fd:write(buffer_out) ~= nil\r\n\tthen\r\n\t\tchan.prev = nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "chan.prev = nil",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function(req, s, ...)\r\n\tif req.state ~= \"out\" then\r\n\t    out(req, req.state == \"headers\" and \"\\r\\n\"\r\n\t\tor \"Content-type: text/html\\r\\n\\r\\n\")\r\n\t    req.state = \"out\"\r\n\tend\r\n\r\n\tif s and s ~= \"\" then out(req, s) end\r\n\r\n\tif select('#', ...) ~= 0 then\r\n\t    return req:write(...)\r\n\tend\r\n    end",
    "type": "function"
  }, {
    "id": 20,
    "text": "if req.state ~= \"out\" then\r\n\t    out(req, req.state == \"headers\" and \"\\r\\n\"\r\n\t\tor \"Content-type: text/html\\r\\n\\r\\n\")\r\n\t    req.state = \"out\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "out(req, req.state == \"headers\" and \"\\r\\n\"\r\n\t\tor \"Content-type: text/html\\r\\n\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "req.state = \"out\"",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if s and s ~= \"\" then out(req, s) end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "out(req, s)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if select('#', ...) ~= 0 then\r\n\t    return req:write(...)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function(req, name, value)\r\n\tif req.state == \"out\" then\r\n\t    error\"Headers already sent\"\r\n\tend\r\n\r\n\tout(req, name .. \": \" .. value .. \"\\r\\n\")\r\n    end",
    "type": "function"
  }, {
    "id": 28,
    "text": "if req.state == \"out\" then\r\n\t    error\"Headers already sent\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "error\"Headers already sent\"",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "out(req, name .. \": \" .. value .. \"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(req)\r\n\tlocal chan = req.channel\r\n\tlocal fd, buffer_out = chan.fd, chan.buffer_out\r\n\r\n\tchan.prev = nil\r\n\tfcgi_encode(buffer_out, req.id)\r\n\r\n\tif not fd:write(buffer_out) then\r\n\t    log(\"socket.write\")\r\n\t    buffer_out:seek(0)\r\n\tend\r\n    end",
    "type": "function"
  }, {
    "id": 33,
    "text": "local fd, buffer_out = chan.fd, chan.buffer_out",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "fcgi_encode(buffer_out, req.id)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if not fd:write(buffer_out) then\r\n\t    log(\"socket.write\")\r\n\t    buffer_out:seek(0)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "log(\"socket.write\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "buffer_out:seek(0)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function pool_get()\r\n\tlocal n = pool.n\r\n\tlocal chan = pool[n]\r\n\tif not chan then\r\n\t    n = 1\r\n\t    chan = {\r\n\t\trequest_meta = request_meta,\r\n\t\tfd = sock.handle()\r\n\t    }\r\n\r\n\t    local buf = sys.mem.pointer():alloc(BUFER_OUT_SIZE)\r\n\t    if not buf then return end\r\n\t    chan.buffer_out = buf\r\n\r\n\t    buf = sys.mem.pointer():alloc(BUFER_IN_SIZE)\r\n\t    if not buf then return end\r\n\t    chan.buffer_in = buf\r\n\tend\r\n\tpool.n = n - 1\r\n\treturn chan\r\n    end",
    "type": "function"
  }, {
    "id": 40,
    "text": "local n = pool.n",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local chan = pool[n]",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if not chan then\r\n\t    n = 1\r\n\t    chan = {\r\n\t\trequest_meta = request_meta,\r\n\t\tfd = sock.handle()\r\n\t    }\r\n\r\n\t    local buf = sys.mem.pointer():alloc(BUFER_OUT_SIZE)\r\n\t    if not buf then return end\r\n\t    chan.buffer_out = buf\r\n\r\n\t    buf = sys.mem.pointer():alloc(BUFER_IN_SIZE)\r\n\t    if not buf then return end\r\n\t    chan.buffer_in = buf\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "n = 1",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "chan = {\r\n\t\trequest_meta = request_meta,\r\n\t\tfd = sock.handle()\r\n\t    }",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "local buf = sys.mem.pointer():alloc(BUFER_OUT_SIZE)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if not buf then return end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "chan.buffer_out = buf",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "buf = sys.mem.pointer():alloc(BUFER_IN_SIZE)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "chan.buffer_in = buf",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "pool.n = n - 1",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function pool_put(chan)\r\n\tlocal n = pool.n + 1\r\n\tpool.n, pool[n] = n, chan\r\n    end",
    "type": "function"
  }, {
    "id": 53,
    "text": "local n = pool.n + 1",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "pool.n, pool[n] = n, chan",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(evq, evid, fd)\r\n\tlocal chan = channels[fd]\r\n\tchannels[fd] = nil\r\n\tpool_put(chan)\r\n\r\n\tevq:del(evid)\r\n\tfd:close()\r\n    end",
    "type": "function"
  }, {
    "id": 57,
    "text": "local chan = channels[fd]",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "channels[fd] = nil",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "pool_put(chan)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "evq:del(evid)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "fd:close()",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function on_change(evq, evid, dir)\r\n\tevq:del(evid)\r\n\tdirs[dir] = nil\r\n    end",
    "type": "function"
  }, {
    "id": 64,
    "text": "dirs[dir] = nil",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function(path)\r\n\tlocal dir, filename = Match(path, [[(.-)([^/\\]+)$]])\r\n\tlocal dir_files = dirs[dir]\r\n\tlocal is_watch = true\r\n\tlocal chunk, err\r\n\r\n\tif dir_files then\r\n\t    chunk = dir_files[filename]\r\n\telseif evq:add_dirwatch(dir, on_change, true) then\r\n\t    dir_files = {}\r\n\t    dirs[dir] = dir_files\r\n\telse\r\n\t    is_watch = false\r\n\tend\r\n\tif not chunk then\r\n\t    chunk, err = loadfile(path)\r\n\t    if chunk and is_watch then\r\n\t\tdir_files[filename] = chunk\r\n\t    end\r\n\tend\r\n\treturn chunk, err\r\n    end",
    "type": "function"
  }, {
    "id": 67,
    "text": "local dir, filename = Match(path, [[(.-)([^/\\]+)$]])",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local dir_files = dirs[dir]",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local is_watch = true",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local chunk, err",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if dir_files then\r\n\t    chunk = dir_files[filename]\r\n\telseif evq:add_dirwatch(dir, on_change, true) then\r\n\t    dir_files = {}\r\n\t    dirs[dir] = dir_files\r\n\telse\r\n\t    is_watch = false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "chunk = dir_files[filename]",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "dir_files = {}",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "dirs[dir] = dir_files",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "is_watch = false",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if not chunk then\r\n\t    chunk, err = loadfile(path)\r\n\t    if chunk and is_watch then\r\n\t\tdir_files[filename] = chunk\r\n\t    end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "chunk, err = loadfile(path)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if chunk and is_watch then\r\n\t\tdir_files[filename] = chunk\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "dir_files[filename] = chunk",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "local function process_request(req)\r\n\tlocal path = req:getvar\"PATH_TRANSLATED\"\r\n\tlocal chunk, err = dir_loadfile(path)\r\n\tlocal status\r\n\r\n\treq.state = \"headers\"\r\n\tif not err then\r\n\t    status, err = xpcall(traceback, chunk, req)\r\n\telse\r\n\t    req:header(\"Status\", 500)\r\n\tend\r\n\tif not status then\r\n\t    req:write(\"\\n\\n<pre>\", err)\r\n\tend\r\n\r\n\treq:close()\r\n\treturn status\r\n    end",
    "type": "function"
  }, {
    "id": 82,
    "text": "local path = req:getvar\"PATH_TRANSLATED\"",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local chunk, err = dir_loadfile(path)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local status",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "req.state = \"headers\"",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if not err then\r\n\t    status, err = xpcall(traceback, chunk, req)\r\n\telse\r\n\t    req:header(\"Status\", 500)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "status, err = xpcall(traceback, chunk, req)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "req:header(\"Status\", 500)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "if not status then\r\n\t    req:write(\"\\n\\n<pre>\", err)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "req:write(\"\\n\\n<pre>\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "req:close()",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function(evq, evid, fd, R, W, T, EOF)\r\n\tlocal chan = channels[fd]\r\n\tlocal buffer_in = chan.buffer_in\r\n\tlocal status\r\n\r\n\tif not EOF and fd:read(buffer_in) then\r\n\t    local request_id = fcgi_decode(buffer_in, chan)\r\n\r\n\t    while request_id do\r\n\t\tlocal req = chan[request_id]\r\n\r\n\t\tif req.error then\r\n\t\t    chan[request_id] = nil\r\n\t\t    log(\"req.error\", req.error)\r\n\t\telse\r\n\t\t    status = process_request(req)\r\n\t\tend\r\n\r\n\t\tstatus = req.keep_conn\r\n\t\trequest_id = req.next_ready\r\n\t    end\r\n\tend\r\n\tif not status then\r\n\t    channels.close(evq, evid, fd)\r\n\tend\r\n    end",
    "type": "function"
  }, {
    "id": 94,
    "text": "local buffer_in = chan.buffer_in",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if not EOF and fd:read(buffer_in) then\r\n\t    local request_id = fcgi_decode(buffer_in, chan)\r\n\r\n\t    while request_id do\r\n\t\tlocal req = chan[request_id]\r\n\r\n\t\tif req.error then\r\n\t\t    chan[request_id] = nil\r\n\t\t    log(\"req.error\", req.error)\r\n\t\telse\r\n\t\t    status = process_request(req)\r\n\t\tend\r\n\r\n\t\tstatus = req.keep_conn\r\n\t\trequest_id = req.next_ready\r\n\t    end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "local request_id = fcgi_decode(buffer_in, chan)",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "while request_id do\r\n\t\tlocal req = chan[request_id]\r\n\r\n\t\tif req.error then\r\n\t\t    chan[request_id] = nil\r\n\t\t    log(\"req.error\", req.error)\r\n\t\telse\r\n\t\t    status = process_request(req)\r\n\t\tend\r\n\r\n\t\tstatus = req.keep_conn\r\n\t\trequest_id = req.next_ready\r\n\t    end",
    "type": "statement:while"
  }, {
    "id": 98,
    "text": "local req = chan[request_id]",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "if req.error then\r\n\t\t    chan[request_id] = nil\r\n\t\t    log(\"req.error\", req.error)\r\n\t\telse\r\n\t\t    status = process_request(req)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "chan[request_id] = nil",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "log(\"req.error\", req.error)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "status = process_request(req)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "status = req.keep_conn",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "request_id = req.next_ready",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if not status then\r\n\t    channels.close(evq, evid, fd)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "channels.close(evq, evid, fd)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "local function accept(evq, evid, fd)\r\n    local channel = channels.get()\r\n    if not channel then\r\n\tlog(\"channels.get\")\r\n\treturn\r\n    end\r\n\r\n    fd = fd:accept(channel.fd)\r\n    if not fd then\r\n\tlog(\"accept\")\r\n\treturn\r\n    end\r\n\r\n    --fd:nonblocking(true)\r\n    --fd:sockopt(\"tcp_nodelay\", 1)\r\n\r\n    evid = evq:add_socket(fd, 'r', process)\r\n    if not evid then\r\n\tfd:close()\r\n\tchannels.put(channel)\r\n\tlog(\"evq.add\")\r\n\treturn\r\n    end\r\n\r\n    channels[fd] = channel\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "local channel = channels.get()",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "if not channel then\r\n\tlog(\"channels.get\")\r\n\treturn\r\n    end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "log(\"channels.get\")",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "fd = fd:accept(channel.fd)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if not fd then\r\n\tlog(\"accept\")\r\n\treturn\r\n    end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "log(\"accept\")",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "evid = evq:add_socket(fd, 'r', process)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "if not evid then\r\n\tfd:close()\r\n\tchannels.put(channel)\r\n\tlog(\"evq.add\")\r\n\treturn\r\n    end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "channels.put(channel)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "log(\"evq.add\")",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "channels[fd] = channel",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "",
    "type": "function container"
  }, {
    "id": 122,
    "text": "inet_pton",
    "type": "global function"
  }, {
    "id": 123,
    "text": "thread.init",
    "type": "global function"
  }, {
    "id": 124,
    "text": "addr",
    "type": "global function"
  }, {
    "id": 125,
    "text": "event_queue",
    "type": "global function"
  }, {
    "id": 126,
    "text": "mem.pointer",
    "type": "global function"
  }, {
    "id": 127,
    "text": "handle",
    "type": "global function"
  }, {
    "id": 128,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 129,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 130,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 131,
    "text": "error",
    "type": "global function"
  }, {
    "id": 132,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 133,
    "text": "fcgi_decode",
    "type": "global function"
  }, {
    "id": 134,
    "text": "Match",
    "type": "global function"
  }, {
    "id": 135,
    "text": "fcgi_encode",
    "type": "global function"
  }, {
    "id": 136,
    "text": "put",
    "type": "global function"
  }, {
    "id": 137,
    "text": "get",
    "type": "global function"
  }, {
    "id": 138,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 139,
    "text": "select",
    "type": "global function"
  }, {
    "id": 140,
    "text": "require",
    "type": "global function"
  }, {
    "id": 141,
    "text": "",
    "type": "variable container"
  }, {
    "id": 142,
    "text": "",
    "type": "require container"
  }, {
    "id": 143,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 144,
    "text": "(sys)",
    "type": "module"
  }, {
    "id": 145,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 146,
    "text": "sock)",
    "type": "module"
  }, {
    "id": 147,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "interface"
  }, {
    "id": 149,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "require local variable"
  } ]
}