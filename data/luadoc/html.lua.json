{
  "_filename": "html.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadoc/src/luadoc/doclet/html.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 12,
    "label": "has",
    "to": 24
  }, {
    "from": 12,
    "label": "has",
    "to": 25
  }, {
    "from": 12,
    "label": "has",
    "to": 26
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 10
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 30
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 30
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 42,
    "label": "has",
    "to": 10
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 36
  }, {
    "from": 49,
    "label": "has",
    "to": 30
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 10
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 49,
    "label": "has",
    "to": 58
  }, {
    "from": 49,
    "label": "has",
    "to": 59
  }, {
    "from": 49,
    "label": "has",
    "to": 10
  }, {
    "from": 49,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 49,
    "label": "has",
    "to": 10
  }, {
    "from": 49,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 36
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 10
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 10
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 74
  }, {
    "from": 76,
    "label": "has",
    "to": 10
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 80,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 92,
    "label": "has",
    "to": 98
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 90,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 58
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 94
  }, {
    "from": 100,
    "label": "has",
    "to": 95
  }, {
    "from": 100,
    "label": "has",
    "to": 96
  }, {
    "from": 100,
    "label": "has",
    "to": 97
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 9
  }, {
    "from": 90,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 94
  }, {
    "from": 104,
    "label": "has",
    "to": 95
  }, {
    "from": 104,
    "label": "has",
    "to": 96
  }, {
    "from": 104,
    "label": "has",
    "to": 97
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 9
  }, {
    "from": 90,
    "label": "has",
    "to": 108
  }, {
    "from": 90,
    "label": "has",
    "to": 97
  }, {
    "from": 90,
    "label": "has",
    "to": 109
  }, {
    "from": 90,
    "label": "has",
    "to": 9
  }, {
    "from": 90,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 32
  }, {
    "from": 112,
    "label": "has",
    "to": 40
  }, {
    "from": 113,
    "label": "has",
    "to": 40
  }, {
    "from": 4,
    "label": "calls",
    "to": 126
  }, {
    "from": 12,
    "label": "calls",
    "to": 124
  }, {
    "from": 63,
    "label": "calls",
    "to": 124
  }, {
    "from": 90,
    "label": "calls",
    "to": 124
  }, {
    "from": 90,
    "label": "calls",
    "to": 124
  }, {
    "from": 90,
    "label": "calls",
    "to": 124
  }, {
    "from": 90,
    "label": "calls",
    "to": 124
  }, {
    "from": 90,
    "label": "calls",
    "to": 124
  }, {
    "from": 90,
    "label": "calls",
    "to": 124
  }, {
    "from": 12,
    "label": "calls",
    "to": 127
  }, {
    "from": 34,
    "label": "calls",
    "to": 127
  }, {
    "from": 34,
    "label": "calls",
    "to": 127
  }, {
    "from": 42,
    "label": "calls",
    "to": 127
  }, {
    "from": 49,
    "label": "calls",
    "to": 127
  }, {
    "from": 49,
    "label": "calls",
    "to": 127
  }, {
    "from": 49,
    "label": "calls",
    "to": 127
  }, {
    "from": 63,
    "label": "calls",
    "to": 127
  }, {
    "from": 63,
    "label": "calls",
    "to": 127
  }, {
    "from": 90,
    "label": "calls",
    "to": 127
  }, {
    "from": 90,
    "label": "calls",
    "to": 127
  }, {
    "from": 90,
    "label": "calls",
    "to": 127
  }, {
    "from": 49,
    "label": "calls",
    "to": 130
  }, {
    "from": 49,
    "label": "calls",
    "to": 130
  }, {
    "from": 80,
    "label": "calls",
    "to": 130
  }, {
    "from": 4,
    "label": "calls",
    "to": 121
  }, {
    "from": 90,
    "label": "calls",
    "to": 76
  }, {
    "from": 49,
    "label": "calls",
    "to": 117
  }, {
    "from": 80,
    "label": "calls",
    "to": 117
  }, {
    "from": 49,
    "label": "calls",
    "to": 42
  }, {
    "from": 49,
    "label": "calls",
    "to": 34
  }, {
    "from": 63,
    "label": "calls",
    "to": 34
  }, {
    "from": 90,
    "label": "calls",
    "to": 128
  }, {
    "from": 90,
    "label": "calls",
    "to": 128
  }, {
    "from": 90,
    "label": "calls",
    "to": 69
  }, {
    "from": 4,
    "label": "calls",
    "to": 122
  }, {
    "from": 12,
    "label": "calls",
    "to": 122
  }, {
    "from": 28,
    "label": "calls",
    "to": 122
  }, {
    "from": 34,
    "label": "calls",
    "to": 122
  }, {
    "from": 42,
    "label": "calls",
    "to": 122
  }, {
    "from": 42,
    "label": "calls",
    "to": 122
  }, {
    "from": 42,
    "label": "calls",
    "to": 122
  }, {
    "from": 69,
    "label": "calls",
    "to": 122
  }, {
    "from": 69,
    "label": "calls",
    "to": 122
  }, {
    "from": 80,
    "label": "calls",
    "to": 122
  }, {
    "from": 80,
    "label": "calls",
    "to": 122
  }, {
    "from": 80,
    "label": "calls",
    "to": 122
  }, {
    "from": 49,
    "label": "calls",
    "to": 119
  }, {
    "from": 90,
    "label": "calls",
    "to": 125
  }, {
    "from": 90,
    "label": "calls",
    "to": 125
  }, {
    "from": 90,
    "label": "calls",
    "to": 125
  }, {
    "from": 90,
    "label": "calls",
    "to": 125
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 63,
    "label": "calls",
    "to": 49
  }, {
    "from": 63,
    "label": "calls",
    "to": 49
  }, {
    "from": 12,
    "label": "calls",
    "to": 115
  }, {
    "from": 114,
    "label": "calls",
    "to": 129
  }, {
    "from": 80,
    "label": "calls",
    "to": 80
  }, {
    "from": 90,
    "label": "calls",
    "to": 80
  }, {
    "from": 80,
    "label": "calls",
    "to": 131
  }, {
    "from": 80,
    "label": "calls",
    "to": 131
  }, {
    "from": 114,
    "label": "calls",
    "to": 132
  }, {
    "from": 114,
    "label": "calls",
    "to": 132
  }, {
    "from": 114,
    "label": "calls",
    "to": 132
  }, {
    "from": 114,
    "label": "calls",
    "to": 132
  }, {
    "from": 114,
    "label": "calls",
    "to": 132
  }, {
    "from": 114,
    "label": "calls",
    "to": 132
  }, {
    "from": 90,
    "label": "calls",
    "to": 12
  }, {
    "from": 90,
    "label": "calls",
    "to": 12
  }, {
    "from": 90,
    "label": "calls",
    "to": 12
  }, {
    "from": 90,
    "label": "calls",
    "to": 12
  }, {
    "from": 90,
    "label": "calls",
    "to": 121
  }, {
    "from": 90,
    "label": "calls",
    "to": 121
  }, {
    "from": 90,
    "label": "calls",
    "to": 121
  }, {
    "from": 90,
    "label": "calls",
    "to": 121
  }, {
    "from": 1,
    "label": "contains",
    "to": 114
  }, {
    "from": 114,
    "label": "declares",
    "to": 4
  }, {
    "from": 114,
    "label": "declares",
    "to": 12
  }, {
    "from": 114,
    "label": "declares",
    "to": 28
  }, {
    "from": 114,
    "label": "declares",
    "to": 34
  }, {
    "from": 114,
    "label": "declares",
    "to": 42
  }, {
    "from": 114,
    "label": "declares",
    "to": 49
  }, {
    "from": 114,
    "label": "declares",
    "to": 63
  }, {
    "from": 114,
    "label": "declares",
    "to": 69
  }, {
    "from": 114,
    "label": "declares",
    "to": 76
  }, {
    "from": 114,
    "label": "declares",
    "to": 80
  }, {
    "from": 114,
    "label": "declares",
    "to": 90
  }, {
    "from": 114,
    "label": "declares",
    "to": 111
  }, {
    "from": 114,
    "label": "declares",
    "to": 112
  }, {
    "from": 114,
    "label": "declares",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 133
  }, {
    "from": 1,
    "label": "contains",
    "to": 134
  }, {
    "from": 133,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 133,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 133,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 133,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 133,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 133,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 133,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 133,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 133,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 133,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 134,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "requires",
    "to": 120
  }, {
    "from": 134,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "requires",
    "to": 118
  }, {
    "from": 134,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "requires",
    "to": 2
  }, {
    "from": 134,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "requires",
    "to": 3
  }, {
    "from": 134,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "requires",
    "to": 116
  }, {
    "from": 134,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "requires",
    "to": 123
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 113
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "html",
    "type": "module"
  }, {
    "id": 2,
    "text": "lp",
    "type": "module"
  }, {
    "id": 3,
    "text": "luadoc",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function search (path, name)\r\n  for c in string.gfind(path, \"[^;]+\") do\r\n    c = string.gsub(c, \"%?\", name)\r\n    local f = io.open(c)\r\n    if f then   -- file exist?\r\n      f:close()\r\n      return c\r\n    end\r\n  end\r\n  return nil    -- file not found\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "for c in string.gfind(path, \"[^;]+\") do\r\n    c = string.gsub(c, \"%?\", name)\r\n    local f = io.open(c)\r\n    if f then   -- file exist?\r\n      f:close()\r\n      return c\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "c = string.gsub(c, \"%?\", name)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "local f = io.open(c)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if f then   -- file exist?\r\n      f:close()\r\n      return c\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function include (template, env)\r\n\t-- template_dir is relative to package.path\r\n\tlocal templatepath = options.template_dir .. template\r\n\r\n\t-- search using package.path (modified to search .lp instead of .lua\r\n\tlocal search_path = string.gsub(package.path, \"%.lua\", \"\")\r\n\tlocal templatepath = search(search_path, templatepath)\r\n\tassert(templatepath, string.format(\"template `%s' not found\", template))\r\n\r\n\tenv = env or {}\r\n\tenv.table = table\r\n\tenv.io = io\r\n\tenv.lp = lp\r\n\tenv.ipairs = ipairs\r\n\tenv.tonumber = tonumber\r\n\tenv.tostring = tostring\r\n\tenv.type = type\r\n\tenv.luadoc = luadoc\r\n\tenv.options = options\r\n\r\n\treturn lp.include(templatepath, env)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local templatepath = options.template_dir .. template",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local search_path = string.gsub(package.path, \"%.lua\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local templatepath = search(search_path, templatepath)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "assert(templatepath, string.format(\"template `%s' not found\", template))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "env = env or {}",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "env.table = table",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "env.io = io",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "env.lp = lp",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "env.ipairs = ipairs",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "env.tonumber = tonumber",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "env.tostring = tostring",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "env.type = type",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "env.luadoc = luadoc",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "env.options = options",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function link (html, from)\r\n\tlocal h = html\r\n\tfrom = from or \"\"\r\n\tstring.gsub(from, \"/\", function () h = \"../\" .. h end)\r\n\treturn h\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local h = html",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "from = from or \"\"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "string.gsub(from, \"/\", function () h = \"../\" .. h end)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "h = \"../\" .. h",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function module_link (modulename, doc, from)\r\n\t-- TODO: replace \".\" by \"/\" to create directories?\r\n\t-- TODO: how to deal with module names with \"/\"?\r\n\tassert(modulename)\r\n\tassert(doc)\r\n\tfrom = from or \"\"\r\n\r\n\tif doc.modules[modulename] == nil then\r\n--\t\tlogger:error(string.format(\"unresolved reference to module `%s'\", modulename))\r\n\t\treturn\r\n\tend\r\n\r\n\tlocal href = \"modules/\" .. modulename .. \".html\"\r\n\tstring.gsub(from, \"/\", function () href = \"../\" .. href end)\r\n\treturn href\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert(modulename)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert(doc)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if doc.modules[modulename] == nil then\r\n--\t\tlogger:error(string.format(\"unresolved reference to module `%s'\", modulename))\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "local href = \"modules/\" .. modulename .. \".html\"",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "string.gsub(from, \"/\", function () href = \"../\" .. href end)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "href = \"../\" .. href",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function file_link (to, from)\r\n\tassert(to)\r\n\tfrom = from or \"\"\r\n\r\n\tlocal href = to\r\n\thref = string.gsub(href, \"lua$\", \"html\")\r\n\thref = string.gsub(href, \"luadoc$\", \"html\")\r\n\thref = \"files/\" .. href\r\n\tstring.gsub(from, \"/\", function () href = \"../\" .. href end)\r\n\treturn href\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "assert(to)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local href = to",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "href = string.gsub(href, \"lua$\", \"html\")",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "href = string.gsub(href, \"luadoc$\", \"html\")",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "href = \"files/\" .. href",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function link_to (fname, doc, module_doc, file_doc, from, kind)\r\n\tassert(fname)\r\n\tassert(doc)\r\n\tfrom = from or \"\"\r\n\tkind = kind or \"functions\"\r\n\r\n\tif file_doc then\r\n\t\tfor _, func_name in pairs(file_doc[kind]) do\r\n\t\t\tif func_name == fname then\r\n\t\t\t\treturn file_link(file_doc.name, from) .. \"#\" .. fname\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\tlocal _, _, modulename, fname = string.find(fname, \"^(.-)[%.%:]?([^%.%:]*)$\")\r\n\tassert(fname)\r\n\r\n\t-- if fname does not specify a module, use the module_doc\r\n\tif string.len(modulename) == 0 and module_doc then\r\n\t\tmodulename = module_doc.name\r\n\tend\r\n\r\n\tlocal module_doc = doc.modules[modulename]\r\n\tif not module_doc then\r\n--\t\tlogger:error(string.format(\"unresolved reference to function `%s': module `%s' not found\", fname, modulename))\r\n\t\treturn\r\n\tend\r\n\r\n\tfor _, func_name in pairs(module_doc[kind]) do\r\n\t\tif func_name == fname then\r\n\t\t\treturn module_link(modulename, doc, from) .. \"#\" .. fname\r\n\t\tend\r\n\tend\r\n\r\n--\tlogger:error(string.format(\"unresolved reference to function `%s' of module `%s'\", fname, modulename))\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "assert(fname)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "kind = kind or \"functions\"",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if file_doc then\r\n\t\tfor _, func_name in pairs(file_doc[kind]) do\r\n\t\t\tif func_name == fname then\r\n\t\t\t\treturn file_link(file_doc.name, from) .. \"#\" .. fname\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "for _, func_name in pairs(file_doc[kind]) do\r\n\t\t\tif func_name == fname then\r\n\t\t\t\treturn file_link(file_doc.name, from) .. \"#\" .. fname\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "if func_name == fname then\r\n\t\t\t\treturn file_link(file_doc.name, from) .. \"#\" .. fname\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local _, _, modulename, fname = string.find(fname, \"^(.-)[%.%:]?([^%.%:]*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if string.len(modulename) == 0 and module_doc then\r\n\t\tmodulename = module_doc.name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "modulename = module_doc.name",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "local module_doc = doc.modules[modulename]",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if not module_doc then\r\n--\t\tlogger:error(string.format(\"unresolved reference to function `%s': module `%s' not found\", fname, modulename))\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "for _, func_name in pairs(module_doc[kind]) do\r\n\t\tif func_name == fname then\r\n\t\t\treturn module_link(modulename, doc, from) .. \"#\" .. fname\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "if func_name == fname then\r\n\t\t\treturn module_link(modulename, doc, from) .. \"#\" .. fname\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function symbol_link (symbol, doc, module_doc, file_doc, from)\r\n\tassert(symbol)\r\n\tassert(doc)\r\n\r\n\tlocal href =\r\n--\t\tfile_link(symbol, from) or\r\n\t\tmodule_link(symbol, doc, from) or\r\n\t\tlink_to(symbol, doc, module_doc, file_doc, from, \"functions\") or\r\n\t\tlink_to(symbol, doc, module_doc, file_doc, from, \"tables\")\r\n\r\n\tif not href then\r\n\t\tlogger:error(string.format(\"unresolved reference to symbol `%s'\", symbol))\r\n\tend\r\n\r\n\treturn href or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "assert(symbol)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local href =\r\n--\t\tfile_link(symbol, from) or\r\n\t\tmodule_link(symbol, doc, from) or\r\n\t\tlink_to(symbol, doc, module_doc, file_doc, from, \"functions\") or\r\n\t\tlink_to(symbol, doc, module_doc, file_doc, from, \"tables\")",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if not href then\r\n\t\tlogger:error(string.format(\"unresolved reference to symbol `%s'\", symbol))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "logger:error(string.format(\"unresolved reference to symbol `%s'\", symbol))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function out_file (filename)\r\n\tlocal h = filename\r\n\th = string.gsub(h, \"lua$\", \"html\")\r\n\th = string.gsub(h, \"luadoc$\", \"html\")\r\n\th = \"files/\" .. h\r\n--\th = options.output_dir .. string.gsub (h, \"^.-([%w_]+%.html)$\", \"%1\")\r\n\th = options.output_dir .. h\r\n\treturn h\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local h = filename",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "h = string.gsub(h, \"lua$\", \"html\")",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "h = string.gsub(h, \"luadoc$\", \"html\")",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "h = \"files/\" .. h",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "h = options.output_dir .. h",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function out_module (modulename)\r\n\tlocal h = modulename .. \".html\"\r\n\th = \"modules/\" .. h\r\n\th = options.output_dir .. h\r\n\treturn h\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "local h = modulename .. \".html\"",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "h = \"modules/\" .. h",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function fixhtmltable (doc)\r\n    for k,v in pairs(doc) do\r\n        if type(v) == \"string\" then\r\n            -- update string value\r\n            local s = string.gsub(v, \"\\n\", \"<br/>\")\r\n            s = string.gsub(s, \"<br/> \", \"<br/>&nbsp\")\r\n            while string.find(s, \"&nbsp \") do\r\n                s = string.gsub(s, \"&nbsp \", \"&nbsp&nbsp\")\r\n            end\r\n            doc[k] = s\r\n        elseif type(v) == \"table\" then\r\n            -- recurse update table\r\n            fixhtmltable(v)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "for k,v in pairs(doc) do\r\n        if type(v) == \"string\" then\r\n            -- update string value\r\n            local s = string.gsub(v, \"\\n\", \"<br/>\")\r\n            s = string.gsub(s, \"<br/> \", \"<br/>&nbsp\")\r\n            while string.find(s, \"&nbsp \") do\r\n                s = string.gsub(s, \"&nbsp \", \"&nbsp&nbsp\")\r\n            end\r\n            doc[k] = s\r\n        elseif type(v) == \"table\" then\r\n            -- recurse update table\r\n            fixhtmltable(v)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "if type(v) == \"string\" then\r\n            -- update string value\r\n            local s = string.gsub(v, \"\\n\", \"<br/>\")\r\n            s = string.gsub(s, \"<br/> \", \"<br/>&nbsp\")\r\n            while string.find(s, \"&nbsp \") do\r\n                s = string.gsub(s, \"&nbsp \", \"&nbsp&nbsp\")\r\n            end\r\n            doc[k] = s\r\n        elseif type(v) == \"table\" then\r\n            -- recurse update table\r\n            fixhtmltable(v)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "local s = string.gsub(v, \"\\n\", \"<br/>\")",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "s = string.gsub(s, \"<br/> \", \"<br/>&nbsp\")",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "while string.find(s, \"&nbsp \") do\r\n                s = string.gsub(s, \"&nbsp \", \"&nbsp&nbsp\")\r\n            end",
    "type": "statement:while"
  }, {
    "id": 86,
    "text": "s = string.gsub(s, \"&nbsp \", \"&nbsp&nbsp\")",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "doc[k] = s",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "fixhtmltable(v)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function start (doc)\r\n    -- Pre proces doc table, replacing linebreaks and leading space by html equiv.\r\n    fixhtmltable(doc)\r\n\t-- Generate index file\r\n\tif (#doc.files > 0 or #doc.modules > 0) and (not options.noindexpage) then\r\n\t\tlocal filename = options.output_dir..\"index.html\"\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"index.lp\", { doc = doc })\r\n\t\tf:close()\r\n\tend\r\n\r\n\t-- Process modules\r\n\tif not options.nomodules then\r\n\t\tfor _, modulename in ipairs(doc.modules) do\r\n\t\t\tlocal module_doc = doc.modules[modulename]\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_module(modulename)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"module.lp\", { doc = doc, module_doc = module_doc })\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend\r\n\r\n\t-- Process files\r\n\tif not options.nofiles then\r\n\t\tfor _, filepath in ipairs(doc.files) do\r\n\t\t\tlocal file_doc = doc.files[filepath]\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_file(file_doc.name)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"file.lp\", { doc = doc, file_doc = file_doc} )\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend\r\n\r\n\t-- copy extra files\r\n\tlocal f = lfs.open(options.output_dir..\"luadoc.css\", \"w\")\r\n\tio.output(f)\r\n\tinclude(\"luadoc.css\")\r\n\tf:close()\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "fixhtmltable(doc)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "if (#doc.files > 0 or #doc.modules > 0) and (not options.noindexpage) then\r\n\t\tlocal filename = options.output_dir..\"index.html\"\r\n\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\tio.output(f)\r\n\t\tinclude(\"index.lp\", { doc = doc })\r\n\t\tf:close()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "local filename = options.output_dir..\"index.html\"",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "logger:info(string.format(\"generating file `%s'\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "local f = lfs.open(filename, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "assert(f, string.format(\"could not open `%s' for writing\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "io.output(f)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "include(\"index.lp\", { doc = doc })",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "if not options.nomodules then\r\n\t\tfor _, modulename in ipairs(doc.modules) do\r\n\t\t\tlocal module_doc = doc.modules[modulename]\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_module(modulename)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"module.lp\", { doc = doc, module_doc = module_doc })\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "for _, modulename in ipairs(doc.modules) do\r\n\t\t\tlocal module_doc = doc.modules[modulename]\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_module(modulename)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"module.lp\", { doc = doc, module_doc = module_doc })\r\n\t\t\tf:close()\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 101,
    "text": "local filename = out_module(modulename)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "include(\"module.lp\", { doc = doc, module_doc = module_doc })",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "if not options.nofiles then\r\n\t\tfor _, filepath in ipairs(doc.files) do\r\n\t\t\tlocal file_doc = doc.files[filepath]\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_file(file_doc.name)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"file.lp\", { doc = doc, file_doc = file_doc} )\r\n\t\t\tf:close()\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "for _, filepath in ipairs(doc.files) do\r\n\t\t\tlocal file_doc = doc.files[filepath]\r\n\t\t\t-- assembly the filename\r\n\t\t\tlocal filename = out_file(file_doc.name)\r\n\t\t\tlogger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\t\t\tio.output(f)\r\n\t\t\tinclude(\"file.lp\", { doc = doc, file_doc = file_doc} )\r\n\t\t\tf:close()\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 105,
    "text": "local file_doc = doc.files[filepath]",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local filename = out_file(file_doc.name)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "include(\"file.lp\", { doc = doc, file_doc = file_doc} )",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "local f = lfs.open(options.output_dir..\"luadoc.css\", \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "include(\"luadoc.css\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function () h = \"../\" .. h end",
    "type": "function"
  }, {
    "id": 112,
    "text": "function () href = \"../\" .. href end",
    "type": "function"
  }, {
    "id": 113,
    "text": "function () href = \"../\" .. href end",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "function container"
  }, {
    "id": 115,
    "text": "function include (filename, env)\r\n\t-- read the whole contents of the file\r\n\tlocal fh = assert (open (filename))\r\n\tlocal src = fh:read(\"*a\")\r\n\tfh:close()\r\n\t-- translates the file into a function\r\n\tlocal prog = compile (src, '@'..filename)\r\n\tlocal _env\r\n\tif env then\r\n\t\t_env = getfenv (prog)\r\n\t\tsetfenv (prog, env)\r\n\tend\r\n\tprog ()\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "string",
    "type": "module"
  }, {
    "id": 117,
    "text": "find",
    "type": "global function"
  }, {
    "id": 118,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 119,
    "text": "len",
    "type": "global function"
  }, {
    "id": 120,
    "text": "io",
    "type": "module"
  }, {
    "id": 121,
    "text": "open",
    "type": "global function"
  }, {
    "id": 122,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 123,
    "text": "table",
    "type": "module"
  }, {
    "id": 124,
    "text": "format",
    "type": "global function"
  }, {
    "id": 125,
    "text": "output",
    "type": "global function"
  }, {
    "id": 126,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 127,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 128,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 129,
    "text": "module",
    "type": "global function"
  }, {
    "id": 130,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 131,
    "text": "type",
    "type": "global function"
  }, {
    "id": 132,
    "text": "require",
    "type": "global function"
  }, {
    "id": 133,
    "text": "",
    "type": "variable container"
  }, {
    "id": 134,
    "text": "",
    "type": "require container"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "require local variable"
  } ]
}