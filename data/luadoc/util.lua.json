{
  "_filename": "util.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadoc/src/luadoc/util.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 3,
    "label": "calls",
    "to": 70
  }, {
    "from": 4,
    "label": "calls",
    "to": 20
  }, {
    "from": 7,
    "label": "calls",
    "to": 17
  }, {
    "from": 8,
    "label": "calls",
    "to": 17
  }, {
    "from": 8,
    "label": "calls",
    "to": 17
  }, {
    "from": 5,
    "label": "calls",
    "to": 20
  }, {
    "from": 7,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "calls",
    "to": 91
  }, {
    "from": 7,
    "label": "calls",
    "to": 12
  }, {
    "from": 7,
    "label": "calls",
    "to": 88
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 6,
    "label": "calls",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 10
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 60,
    "label": "has",
    "to": 10
  }, {
    "from": 60,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 75,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 10
  }, {
    "from": 75,
    "label": "has",
    "to": 83
  }, {
    "from": 75,
    "label": "has",
    "to": 84
  }, {
    "from": 70,
    "label": "has",
    "to": 10
  }, {
    "from": 70,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 10
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 10
  }, {
    "from": 91,
    "label": "has",
    "to": 10
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 72
  }, {
    "from": 94,
    "label": "has",
    "to": 73
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 10
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 60,
    "label": "calls",
    "to": 112
  }, {
    "from": 41,
    "label": "calls",
    "to": 113
  }, {
    "from": 60,
    "label": "calls",
    "to": 106
  }, {
    "from": 60,
    "label": "calls",
    "to": 106
  }, {
    "from": 20,
    "label": "calls",
    "to": 116
  }, {
    "from": 70,
    "label": "calls",
    "to": 102
  }, {
    "from": 20,
    "label": "calls",
    "to": 101
  }, {
    "from": 20,
    "label": "calls",
    "to": 101
  }, {
    "from": 20,
    "label": "calls",
    "to": 101
  }, {
    "from": 20,
    "label": "calls",
    "to": 101
  }, {
    "from": 86,
    "label": "calls",
    "to": 101
  }, {
    "from": 20,
    "label": "calls",
    "to": 111
  }, {
    "from": 20,
    "label": "calls",
    "to": 111
  }, {
    "from": 41,
    "label": "calls",
    "to": 111
  }, {
    "from": 41,
    "label": "calls",
    "to": 111
  }, {
    "from": 41,
    "label": "calls",
    "to": 111
  }, {
    "from": 41,
    "label": "calls",
    "to": 111
  }, {
    "from": 70,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 109
  }, {
    "from": 20,
    "label": "calls",
    "to": 109
  }, {
    "from": 41,
    "label": "calls",
    "to": 110
  }, {
    "from": 41,
    "label": "calls",
    "to": 110
  }, {
    "from": 70,
    "label": "calls",
    "to": 114
  }, {
    "from": 70,
    "label": "calls",
    "to": 117
  }, {
    "from": 100,
    "label": "calls",
    "to": 115
  }, {
    "from": 60,
    "label": "calls",
    "to": 104
  }, {
    "from": 15,
    "label": "calls",
    "to": 105
  }, {
    "from": 17,
    "label": "calls",
    "to": 105
  }, {
    "from": 20,
    "label": "calls",
    "to": 105
  }, {
    "from": 41,
    "label": "calls",
    "to": 105
  }, {
    "from": 91,
    "label": "calls",
    "to": 105
  }, {
    "from": 9,
    "label": "calls",
    "to": 107
  }, {
    "from": 12,
    "label": "calls",
    "to": 107
  }, {
    "from": 38,
    "label": "calls",
    "to": 107
  }, {
    "from": 60,
    "label": "calls",
    "to": 107
  }, {
    "from": 88,
    "label": "calls",
    "to": 107
  }, {
    "from": 100,
    "label": "calls",
    "to": 118
  }, {
    "from": 70,
    "label": "calls",
    "to": 118
  }, {
    "from": 70,
    "label": "calls",
    "to": 118
  }, {
    "from": 12,
    "label": "calls",
    "to": 9
  }, {
    "from": 15,
    "label": "calls",
    "to": 9
  }, {
    "from": 88,
    "label": "calls",
    "to": 9
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 100,
    "label": "declares",
    "to": 9
  }, {
    "from": 100,
    "label": "declares",
    "to": 12
  }, {
    "from": 100,
    "label": "declares",
    "to": 15
  }, {
    "from": 100,
    "label": "declares",
    "to": 17
  }, {
    "from": 100,
    "label": "declares",
    "to": 20
  }, {
    "from": 100,
    "label": "declares",
    "to": 38
  }, {
    "from": 100,
    "label": "declares",
    "to": 41
  }, {
    "from": 100,
    "label": "declares",
    "to": 60
  }, {
    "from": 100,
    "label": "declares",
    "to": 70
  }, {
    "from": 100,
    "label": "declares",
    "to": 86
  }, {
    "from": 100,
    "label": "declares",
    "to": 88
  }, {
    "from": 100,
    "label": "declares",
    "to": 91
  }, {
    "from": 100,
    "label": "declares",
    "to": 94
  }, {
    "from": 100,
    "label": "declares",
    "to": 96
  }, {
    "from": 100,
    "label": "declares",
    "to": 98
  }, {
    "from": 119,
    "label": "requires",
    "to": 1
  }, {
    "from": 120,
    "label": "requires",
    "to": 1
  }, {
    "from": 121,
    "label": "requires",
    "to": 1
  }, {
    "from": 122,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 123,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 123,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 123,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 123,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 123,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 123,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 123,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 123,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 124,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "requires",
    "to": 103
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "util",
    "type": "module"
  }, {
    "id": 2,
    "text": "function start (doc)\r\n\tlocal todo = \"<TODO>\"\r\n\t\r\n\t-- Process files\r\n\tfor i, file_doc in ipairs(doc.files) do\r\n\t\t-- assembly the filename\r\n\t\tlocal filename = out_file(file_doc.name)\r\n\t\tluadoc.logger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t-- TODO: confirm file overwrite\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\r\n\t\tfor _, block in ipairs(file_doc.doc) do\r\n\r\n\t\t\t-- write reorganized comments\r\n\t\t\tf:write(string.rep(\"-\", 80)..\"\\n\")\r\n\t\t\t\r\n\t\t\t-- description\r\n\t\t\tf:write(util.comment(util.wrap(block.description, 77)))\r\n\t\t\tf:write(\"\\n\")\r\n\t\t\t\r\n\t\t\tif block.class == \"function\" then\r\n\t\t\t\t-- parameters\r\n\t\t\t\ttable.foreachi(block.param, function (_, param_name)\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))\r\n\t\t\t\t\tf:write(\"\\n\")\r\n\t\t\t\tend)\r\n\t\t\t\t\r\n\t\t\t\t-- return\r\n\t\t\t\tif type(block.ret) == \"table\" then\r\n\t\t\t\t\ttable.foreachi(block.ret, function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend)\r\n\t\t\t\telse\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", block.ret or todo), 77))..\"\\n\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- TODO: usage\r\n\t\t\t-- TODO: see\r\n\r\n\t\t\t-- write code\r\n\t\t\tfor _, line in ipairs(block.code) do\r\n\t\t\t\tf:write(line..\"\\n\")\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tf:close()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function main (files, options)\r\n\tlogger = util.loadlogengine(options)\r\n\r\n\t-- load config file\r\n\tif options.config ~= nil then\r\n\t\t-- load specified config file\r\n\t\tdofile(options.config)\r\n\telse\r\n\t\t-- load default config file\r\n\t\trequire(\"luadoc.config\")\r\n\tend\r\n\r\n\tlocal taglet = require(options.taglet)\r\n\tlocal doclet = require(options.doclet)\r\n\r\n    -- fix bad windows paths (mix of / and \\ in a path)\r\n    -- standardize on forward slash\r\n    if util.iswindows then\r\n        for k, v in pairs(files) do\r\n            files[k] = string.gsub(v, \"\\\\\", \"/\")\r\n        end\r\n    end\r\n\r\n\t-- analyze input\r\n\ttaglet.options = options\r\n\ttaglet.logger = logger\r\n\tlocal doc = taglet.start(files)\r\n\r\n\t-- generate output\r\n\tdoclet.options = options\r\n\tdoclet.logger = logger\r\n\tdoclet.start(doc)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function see (tag, block, text)\r\n\t-- see is always an array\r\n\tblock[tag] = block[tag] or {}\r\n\t\r\n\t-- remove trailing \".\"\r\n\ttext = string.gsub(text, \"(.*)%.$\", \"%1\")\r\n\t\r\n\tlocal s = util.split(\"%s*,%s*\", text)\t\t\t\r\n\t\r\n\ttable.foreachi(s, function (_, v)\r\n\t\ttable.insert(block[tag], v)\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function check_function (line)\r\n\tline = util.trim(line)\r\n\r\n\tlocal info = table.foreachi(function_patterns, function (_, pattern)\r\n\t\tlocal r, _, l, id, param = string.find(line, pattern)\r\n\t\tif r ~= nil then\r\n\t\t\treturn {\r\n\t\t\t\tname = id,\r\n\t\t\t\tprivate = (l == \"local\"),\r\n\t\t\t\tparam = util.split(\"%s*,%s*\", param),\r\n\t\t\t}\r\n\t\tend\r\n\tend)\r\n\r\n\t-- TODO: remove these assert's?\r\n\tif info ~= nil then\r\n\t\tassert(info.name, \"function name undefined\")\r\n\t\tassert(info.param, string.format(\"undefined parameter list for function `%s'\", info.name))\r\n\tend\r\n\r\n\treturn info\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function check_module (line, currentmodule)\r\n\tline = util.trim(line)\r\n\r\n\t-- module\"x.y\"\r\n\t-- module'x.y'\r\n\t-- module[[x.y]]\r\n\t-- module(\"x.y\")\r\n\t-- module('x.y')\r\n\t-- module([[x.y]])\r\n\t-- module(...)\r\n\r\n\tlocal r, _, modulename = string.find(line, \"^module%s*[%s\\\"'(%[]+([^,\\\"')%]]+)\")\r\n\tif r then\r\n\t\t-- found module definition\r\n\t\tlogger:debug(string.format(\"found module `%s'\", modulename))\r\n\t\treturn modulename\r\n\tend\r\n\treturn currentmodule\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function parse_comment (block, first_line)\r\n\r\n\t-- get the first non-empty line of code\r\n\tlocal code = table.foreachi(block.code, function(_, line)\r\n\t\tif not util.line_empty(line) then\r\n\t\t\t-- `local' declarations are ignored in two cases:\r\n\t\t\t-- when the `nolocals' option is turned on; and\r\n\t\t\t-- when the first block of a file is parsed (this is\r\n\t\t\t--\tnecessary to avoid confusion between the top\r\n\t\t\t--\tlocal declarations and the `module' definition.\r\n\t\t\tif (options.nolocals or first_line) and line:find\"^%s*local\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\treturn line\r\n\t\tend\r\n\tend)\r\n\r\n\t-- parse first line of code\r\n\tif code ~= nil then\r\n\t\tlocal func_info = check_function(code)\r\n\t\tlocal module_name = check_module(code)\r\n\t\tif func_info then\r\n\t\t\tblock.class = \"function\"\r\n\t\t\tblock.name = func_info.name\r\n\t\t\tblock.param = func_info.param\r\n\t\t\tblock.private = func_info.private\r\n\t\telseif module_name then\r\n\t\t\tblock.class = \"module\"\r\n\t\t\tblock.name = module_name\r\n\t\t\tblock.param = {}\r\n\t\telse\r\n\t\t\tblock.param = {}\r\n\t\tend\r\n\telse\r\n\t\t-- TODO: comment without any code. Does this means we are dealing\r\n\t\t-- with a file comment?\r\n\tend\r\n\r\n\t-- parse @ tags\r\n\tlocal currenttag = \"description\"\r\n\tlocal currenttext\t\t-- trimmed and concatenated lines\r\n\tlocal ocurrenttext\t\t-- concatenated lines with linebreaks (eg. original non-stripped text format)\r\n    local currenttagpostfix -- postfix '#' for current tag\r\n\r\n\ttable.foreachi(block.comment, function (_, line)\r\n\t\ttline = util.trim_comment(line)\r\n\t\toline = util.no_trim_comment(line)\r\n\r\n\t\tlocal r, _, tag, tagpostfix, text = string.find(tline, \"@([_%w%.]+)(#?)%s+(.*)\")\r\n\t\tif r ~= nil then\r\n\t\t\t-- found new tag, add previous one, and start a new one\r\n\t\t\t-- TODO: what to do with invalid tags? issue an error? or log a warning?\r\n\t\t\ttags.handle(currenttag, block, currenttext)\r\n\r\n\t\t\tcurrenttag = tag\r\n\t\t\tcurrenttext = text\r\n\t\t\tocurrenttext = text\r\n            currenttagpostfix = tagpostfix\r\n\t\telse\r\n\t\t\tcurrenttext = util.concat(currenttext, tline)\r\n\t\t\tocurrenttext = util.no_concat(ocurrenttext, oline)\r\n\t\t\tassert(string.sub(currenttext, 1, 1) ~= \" \", string.format(\"`%s', `%s'\", currenttext, tline))\r\n\t\tend\r\n\tend)\r\n    if currenttagpostfix == \"#\" then\r\n        tags.handle(currenttag, block, ocurrenttext)    -- dispatch text with original linebreaks and indentations\r\n    else\r\n        tags.handle(currenttag, block, currenttext)     -- dispatch text with trimmed and concatenated\r\n    end\r\n\r\n\t-- extracts summary information from the description\r\n\tblock.summary = parse_summary(block.description)\r\n\tassert(string.sub(block.description, 1, 1) ~= \" \", string.format(\"`%s'\", block.description))\r\n\r\n\treturn block\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function parse_file (filepath, doc)\r\n\tlocal blocks = {}\r\n\tlocal modulename = nil\r\n\r\n\t-- read each line\r\n\tlocal f = io.open(filepath, \"r\")\r\n\tlocal i = 1\r\n\tlocal line = f:read()\r\n\tlocal first = true\r\n\twhile line ~= nil do\r\n\t\tif string.find(line, \"^[\\t ]*%-%-%-\") then\r\n\t\t\t-- reached a luadoc block\r\n\t\t\tlocal block\r\n\t\t\tline, block, modulename = parse_block(f, line, modulename, first)\r\n\t\t\ttable.insert(blocks, block)\r\n\t\telse\r\n\t\t\t-- look for a module definition\r\n\t\t\tmodulename = check_module(line, modulename)\r\n\r\n\t\t\t-- TODO: keep beginning of file somewhere\r\n\r\n\t\t\tline = f:read()\r\n\t\tend\r\n\t\tfirst = false\r\n\t\ti = i + 1\r\n\tend\r\n\tf:close()\r\n\t-- store blocks in file hierarchy\r\n\tassert(doc.files[filepath] == nil, string.format(\"doc for file `%s' already defined\", filepath))\r\n\ttable.insert(doc.files, filepath)\r\n\tdoc.files[filepath] = {\r\n\t\ttype = \"file\",\r\n\t\tname = filepath,\r\n\t\tdoc = blocks,\r\n--\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\ttables = class_iterator(blocks, \"table\"),\r\n\t}\r\n--\r\n\tlocal first = doc.files[filepath].doc[1]\r\n\tif first and modulename then\r\n\t\tdoc.files[filepath].author = first.author\r\n\t\tdoc.files[filepath].copyright = first.copyright\r\n\t\tdoc.files[filepath].description = first.description\r\n\t\tdoc.files[filepath].release = first.release\r\n\t\tdoc.files[filepath].summary = first.summary\r\n\tend\r\n\r\n\t-- if module definition is found, store in module hierarchy\r\n\tif modulename ~= nil then\r\n\t\tif modulename == \"...\" then\r\n\t\t\t\tmodulename = string.gsub (filepath, \"%.lua$\", \"\")\r\n\t\t\t\tmodulename = string.gsub (modulename, \"/\", \".\")\r\n\t\tend\r\n\t\tif doc.modules[modulename] ~= nil then\r\n\t\t\t-- module is already defined, just add the blocks\r\n\t\t\ttable.foreachi(blocks, function (_, v)\r\n\t\t\t\ttable.insert(doc.modules[modulename].doc, v)\r\n\t\t\tend)\r\n\t\telse\r\n\t\t\t-- TODO: put this in a different module\r\n\t\t\ttable.insert(doc.modules, modulename)\r\n\t\t\tdoc.modules[modulename] = {\r\n\t\t\t\ttype = \"module\",\r\n\t\t\t\tname = modulename,\r\n\t\t\t\tdoc = blocks,\r\n--\t\t\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\t\t\ttables = class_iterator(blocks, \"table\"),\r\n\t\t\t\tauthor = first and first.author,\r\n\t\t\t\tcopyright = first and first.copyright,\r\n\t\t\t\tdescription = \"\",\r\n\t\t\t\trelease = first and first.release,\r\n\t\t\t\tsummary = \"\",\r\n\t\t\t}\r\n\r\n\t\t\t-- find module description\r\n\t\t\tfor m in class_iterator(blocks, \"module\")() do\r\n\t\t\t\tdoc.modules[modulename].description = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].description,\r\n\t\t\t\t\tm.description)\r\n\t\t\t\tdoc.modules[modulename].summary = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].summary,\r\n\t\t\t\t\tm.summary)\r\n\t\t\t\tif m.author then\r\n\t\t\t\t\tdoc.modules[modulename].author = m.author\r\n\t\t\t\tend\r\n\t\t\t\tif m.copyright then\r\n\t\t\t\t\tdoc.modules[modulename].copyright = m.copyright\r\n\t\t\t\tend\r\n\t\t\t\tif m.release then\r\n\t\t\t\t\tdoc.modules[modulename].release = m.release\r\n\t\t\t\tend\r\n\t\t\t\tif m.name then\r\n\t\t\t\t\tdoc.modules[modulename].name = m.name\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tdoc.modules[modulename].description = doc.modules[modulename].description or (first and first.description) or \"\"\r\n\t\t\tdoc.modules[modulename].summary = doc.modules[modulename].summary or (first and first.summary) or \"\"\r\n\t\tend\r\n\r\n\t\t-- make functions table\r\n\t\tdoc.modules[modulename].functions = {}\r\n\t\tfor f in class_iterator(blocks, \"function\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].functions, f.name)\r\n\t\t\tdoc.modules[modulename].functions[f.name] = f\r\n\t\tend\r\n\r\n\t\t-- make tables table\r\n\t\tdoc.modules[modulename].tables = {}\r\n\t\tfor t in class_iterator(blocks, \"table\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].tables, t.name)\r\n\t\t\tdoc.modules[modulename].tables[t.name] = t\r\n\t\tend\r\n\tend\r\n\r\n\t-- make functions table\r\n\tdoc.files[filepath].functions = {}\r\n\tfor f in class_iterator(blocks, \"function\")() do\r\n\t\ttable.insert(doc.files[filepath].functions, f.name)\r\n\t\tdoc.files[filepath].functions[f.name] = f\r\n\tend\r\n\r\n\t-- make tables table\r\n\tdoc.files[filepath].tables = {}\r\n\tfor t in class_iterator(blocks, \"table\")() do\r\n\t\ttable.insert(doc.files[filepath].tables, t.name)\r\n\t\tdoc.files[filepath].tables[t.name] = t\r\n\tend\r\n\r\n\treturn doc\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function trim (s)\r\n\treturn (string.gsub(s, \"^%s*(.-)%s*$\", \"%1\"))\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function trim_comment (s)\r\n\ts = string.gsub(s, \"%-%-+(.*)$\", \"%1\")\r\n\treturn trim(s)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "s = string.gsub(s, \"%-%-+(.*)$\", \"%1\")",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function line_empty (line)\r\n\treturn (string.len(trim(line)) == 0)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function concat (str1, str2)\r\n\tif str1 == nil or string.len(str1) == 0 then\r\n\t\treturn str2\r\n\telse\r\n\t\treturn str1 .. \" \" .. str2\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if str1 == nil or string.len(str1) == 0 then\r\n\t\treturn str2\r\n\telse\r\n\t\treturn str1 .. \" \" .. str2\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function split(delim, text)\r\n\tlocal list = {}\r\n\tif string.len(text) > 0 then\r\n\t\tdelim = delim or \"\"\r\n\t\tlocal pos = 1\r\n\t\t-- if delim matches empty string then it would give an endless loop\r\n\t\tif string.find(\"\", delim, 1) and delim ~= \"\" then\r\n\t\t\terror(\"delim matches empty string!\")\r\n\t\tend\r\n\t\tlocal first, last\r\n\t\twhile 1 do\r\n\t\t\tif delim ~= \"\" then\r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn list\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if string.len(text) > 0 then\r\n\t\tdelim = delim or \"\"\r\n\t\tlocal pos = 1\r\n\t\t-- if delim matches empty string then it would give an endless loop\r\n\t\tif string.find(\"\", delim, 1) and delim ~= \"\" then\r\n\t\t\terror(\"delim matches empty string!\")\r\n\t\tend\r\n\t\tlocal first, last\r\n\t\twhile 1 do\r\n\t\t\tif delim ~= \"\" then\r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "delim = delim or \"\"",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if string.find(\"\", delim, 1) and delim ~= \"\" then\r\n\t\t\terror(\"delim matches empty string!\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "error(\"delim matches empty string!\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local first, last",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "while 1 do\r\n\t\t\tif delim ~= \"\" then\r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 29,
    "text": "if delim ~= \"\" then\r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "first, last = string.find(text, delim, pos)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "first, last = string.find(text, \"%s+\", pos)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "pos = last+1",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "table.insert(list, string.sub(text, pos, first-1))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "table.insert(list, string.sub(text, pos))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function comment (text)\r\n\ttext = string.gsub(text, \"\\n\", \"\\n-- \")\r\n\treturn \"-- \" .. text\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "text = string.gsub(text, \"\\n\", \"\\n-- \")",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function wrap(s, w, i1, i2)\r\n\tw = w or 80\r\n\ti1 = i1 or 0\r\n\ti2 = i2 or 0\r\n\tassert(i1 < w and i2 < w, \"the indents must be less than the line width\")\r\n\ts = string.rep(\" \", i1) .. s\r\n\tlocal lstart, len = 1, string.len(s)\r\n\twhile len - lstart > w do\r\n\t\tlocal i = lstart + w\r\n\t\twhile i > lstart and string.sub(s, i, i) ~= \" \" do i = i - 1 end\r\n\t\tlocal j = i\r\n\t\twhile j > lstart and string.sub(s, j, j) == \" \" do j = j - 1 end\r\n\t\ts = string.sub(s, 1, j) .. \"\\n\" .. string.rep(\" \", i2) ..\r\n\t\t\tstring.sub(s, i + 1, -1)\r\n\t\tlocal change = i2 + 1 - (i - j)\r\n\t\tlstart = j + change\r\n\t\tlen = len + change\r\n\tend\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "w = w or 80",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "i1 = i1 or 0",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "i2 = i2 or 0",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "assert(i1 < w and i2 < w, \"the indents must be less than the line width\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "s = string.rep(\" \", i1) .. s",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local lstart, len = 1, string.len(s)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "while len - lstart > w do\r\n\t\tlocal i = lstart + w\r\n\t\twhile i > lstart and string.sub(s, i, i) ~= \" \" do i = i - 1 end\r\n\t\tlocal j = i\r\n\t\twhile j > lstart and string.sub(s, j, j) == \" \" do j = j - 1 end\r\n\t\ts = string.sub(s, 1, j) .. \"\\n\" .. string.rep(\" \", i2) ..\r\n\t\t\tstring.sub(s, i + 1, -1)\r\n\t\tlocal change = i2 + 1 - (i - j)\r\n\t\tlstart = j + change\r\n\t\tlen = len + change\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 49,
    "text": "local i = lstart + w",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "while i > lstart and string.sub(s, i, i) ~= \" \" do i = i - 1 end",
    "type": "statement:while"
  }, {
    "id": 51,
    "text": "i = i - 1",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local j = i",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "while j > lstart and string.sub(s, j, j) == \" \" do j = j - 1 end",
    "type": "statement:while"
  }, {
    "id": 54,
    "text": "j = j - 1",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "s = string.sub(s, 1, j) .. \"\\n\" .. string.rep(\" \", i2) ..\r\n\t\t\tstring.sub(s, i + 1, -1)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local change = i2 + 1 - (i - j)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "lstart = j + change",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "len = len + change",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function lfs.open (filename, mode)\r\n\tlocal f = io.open(filename, mode)\r\n\tif f == nil then\r\n\t\tfilename = string.gsub(filename, \"\\\\\", \"/\")\r\n\t\tlocal dir = \"\"\r\n\t\tfor d in string.gfind(filename, \".-/\") do\r\n\t\t\tdir = dir .. d\r\n\t\t\tlfs.mkdir(dir)\r\n\t\tend\r\n\t\tf = io.open(filename, mode)\r\n\tend\r\n\treturn f\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local f = io.open(filename, mode)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if f == nil then\r\n\t\tfilename = string.gsub(filename, \"\\\\\", \"/\")\r\n\t\tlocal dir = \"\"\r\n\t\tfor d in string.gfind(filename, \".-/\") do\r\n\t\t\tdir = dir .. d\r\n\t\t\tlfs.mkdir(dir)\r\n\t\tend\r\n\t\tf = io.open(filename, mode)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "filename = string.gsub(filename, \"\\\\\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local dir = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "for d in string.gfind(filename, \".-/\") do\r\n\t\t\tdir = dir .. d\r\n\t\t\tlfs.mkdir(dir)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 66,
    "text": "dir = dir .. d",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "lfs.mkdir(dir)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "f = io.open(filename, mode)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function loadlogengine(options)\r\n\tlocal logenabled = pcall(function()\r\n\t\trequire \"logging\"\r\n\t\trequire \"logging.console\"\r\n\tend)\r\n\r\n\tlocal logging = logenabled and logging\r\n\r\n\tif logenabled then\r\n\t\tif options.filelog then\r\n\t\t\tlogger = logging.file(\"luadoc.log\") -- use this to get a file log\r\n\t\telse\r\n\t\t\tlogger = logging.console(\"[%level] %message\\n\")\r\n\t\tend\r\n\r\n\t\tif options.verbose then\r\n\t\t\tlogger:setLevel(logging.INFO)\r\n\t\telse\r\n\t\t\tlogger:setLevel(logging.WARN)\r\n\t\tend\r\n\r\n\telse\r\n\t\tnoop = {__index=function(...)\r\n\t\t\treturn function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend\r\n\t\tend}\r\n\r\n\t\tlogger = {}\r\n\t\tsetmetatable(logger, noop)\r\n\tend\r\n\r\n\treturn logger\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local logenabled = pcall(function()\r\n\t\trequire \"logging\"\r\n\t\trequire \"logging.console\"\r\n\tend)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "require \"logging\"",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "require \"logging.console\"",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "local logging = logenabled and logging",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if logenabled then\r\n\t\tif options.filelog then\r\n\t\t\tlogger = logging.file(\"luadoc.log\") -- use this to get a file log\r\n\t\telse\r\n\t\t\tlogger = logging.console(\"[%level] %message\\n\")\r\n\t\tend\r\n\r\n\t\tif options.verbose then\r\n\t\t\tlogger:setLevel(logging.INFO)\r\n\t\telse\r\n\t\t\tlogger:setLevel(logging.WARN)\r\n\t\tend\r\n\r\n\telse\r\n\t\tnoop = {__index=function(...)\r\n\t\t\treturn function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend\r\n\t\tend}\r\n\r\n\t\tlogger = {}\r\n\t\tsetmetatable(logger, noop)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "if options.filelog then\r\n\t\t\tlogger = logging.file(\"luadoc.log\") -- use this to get a file log\r\n\t\telse\r\n\t\t\tlogger = logging.console(\"[%level] %message\\n\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "logger = logging.file(\"luadoc.log\")",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "logger = logging.console(\"[%level] %message\\n\")",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "if options.verbose then\r\n\t\t\tlogger:setLevel(logging.INFO)\r\n\t\telse\r\n\t\t\tlogger:setLevel(logging.WARN)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "logger:setLevel(logging.INFO)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "logger:setLevel(logging.WARN)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "noop = {__index=function(...)\r\n\t\t\treturn function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend\r\n\t\tend}",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "logger = {}",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "setmetatable(logger, noop)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function iswindows()\r\n    return string.find(_G.package.config:sub(1,1), \"\\\\\")\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function no_trim_comment (s)\r\n\ts = string.gsub(trim(s), \"%-%-+ (.*)$\", \"%1\")\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "s = string.gsub(trim(s), \"%-%-+ (.*)$\", \"%1\")",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function no_concat (str1, str2)\r\n\tif str1 == nil or string.len(str1) == 0 then\r\n\t\treturn str2\r\n\telse\r\n\t\treturn str1 .. \"\\n\" .. str2\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "if str1 == nil or string.len(str1) == 0 then\r\n\t\treturn str2\r\n\telse\r\n\t\treturn str1 .. \"\\n\" .. str2\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function()\r\n\t\trequire \"logging\"\r\n\t\trequire \"logging.console\"\r\n\tend",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function(...)\r\n\t\t\treturn function(...)\r\n\t\t\t\t-- noop\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "",
    "type": "function container"
  }, {
    "id": 101,
    "text": "find",
    "type": "global function"
  }, {
    "id": 102,
    "text": "file",
    "type": "global function"
  }, {
    "id": 103,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 104,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 105,
    "text": "len",
    "type": "global function"
  }, {
    "id": 106,
    "text": "open",
    "type": "global function"
  }, {
    "id": 107,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 108,
    "text": "console",
    "type": "global function"
  }, {
    "id": 109,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 110,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 111,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 112,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 113,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 114,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 115,
    "text": "module",
    "type": "global function"
  }, {
    "id": 116,
    "text": "error",
    "type": "global function"
  }, {
    "id": 117,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 118,
    "text": "require",
    "type": "global function"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "variable container"
  }, {
    "id": 124,
    "text": "",
    "type": "require container"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  } ]
}