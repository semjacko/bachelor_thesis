{
  "_filename": "lp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadoc/src/luadoc/lp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 43
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 17,
    "label": "has",
    "to": 26
  }, {
    "from": 10,
    "label": "has",
    "to": 27
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 6
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 6
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 43,
    "label": "has",
    "to": 52
  }, {
    "from": 43,
    "label": "has",
    "to": 53
  }, {
    "from": 10,
    "label": "calls",
    "to": 60
  }, {
    "from": 43,
    "label": "calls",
    "to": 56
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 61
  }, {
    "from": 35,
    "label": "calls",
    "to": 62
  }, {
    "from": 3,
    "label": "calls",
    "to": 57
  }, {
    "from": 3,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 43,
    "label": "calls",
    "to": 35
  }, {
    "from": 35,
    "label": "calls",
    "to": 10
  }, {
    "from": 3,
    "label": "calls",
    "to": 55
  }, {
    "from": 10,
    "label": "calls",
    "to": 55
  }, {
    "from": 10,
    "label": "calls",
    "to": 55
  }, {
    "from": 10,
    "label": "calls",
    "to": 64
  }, {
    "from": 43,
    "label": "calls",
    "to": 63
  }, {
    "from": 54,
    "label": "calls",
    "to": 58
  }, {
    "from": 10,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 3
  }, {
    "from": 35,
    "label": "calls",
    "to": 66
  }, {
    "from": 43,
    "label": "calls",
    "to": 59
  }, {
    "from": 10,
    "label": "calls",
    "to": 67
  }, {
    "from": 10,
    "label": "calls",
    "to": 67
  }, {
    "from": 10,
    "label": "calls",
    "to": 67
  }, {
    "from": 10,
    "label": "calls",
    "to": 67
  }, {
    "from": 10,
    "label": "calls",
    "to": 67
  }, {
    "from": 3,
    "label": "calls",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 54,
    "label": "declares",
    "to": 3
  }, {
    "from": 54,
    "label": "declares",
    "to": 10
  }, {
    "from": 54,
    "label": "declares",
    "to": 29
  }, {
    "from": 54,
    "label": "declares",
    "to": 32
  }, {
    "from": 54,
    "label": "declares",
    "to": 35
  }, {
    "from": 54,
    "label": "declares",
    "to": 43
  }, {
    "from": 69,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 70,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 70,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 70,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 70,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 70,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 70,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 70,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 70,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 70,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 70,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 70,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 70,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 70,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 70,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 70,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lp",
    "type": "module"
  }, {
    "id": 2,
    "text": "function include (template, env)\r\n\t-- template_dir is relative to package.path\r\n\tlocal templatepath = options.template_dir .. template\r\n\r\n\t-- search using package.path (modified to search .lp instead of .lua\r\n\tlocal search_path = string.gsub(package.path, \"%.lua\", \"\")\r\n\tlocal templatepath = search(search_path, templatepath)\r\n\tassert(templatepath, string.format(\"template `%s' not found\", template))\r\n\r\n\tenv = env or {}\r\n\tenv.table = table\r\n\tenv.io = io\r\n\tenv.lp = lp\r\n\tenv.ipairs = ipairs\r\n\tenv.tonumber = tonumber\r\n\tenv.tostring = tostring\r\n\tenv.type = type\r\n\tenv.luadoc = luadoc\r\n\tenv.options = options\r\n\r\n\treturn lp.include(templatepath, env)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function out (s, i, f)\r\n\ts = strsub(s, i, f or -1)\r\n\tif s == \"\" then return s end\r\n\t-- we could use `%q' here, but this way we have better control\r\n\ts = gsub(s, \"([\\\\\\n\\'])\", \"\\\\%1\")\r\n\t-- substitute '\\r' by '\\'+'r' and let `loadstring' reconstruct it\r\n\ts = gsub(s, \"\\r\", \"\\\\r\")\r\n\treturn format(\" %s('%s'); \", outfunc, s)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "s = strsub(s, i, f or -1)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "if s == \"\" then return s end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "s = gsub(s, \"([\\\\\\n\\'])\", \"\\\\%1\")",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "s = gsub(s, \"\\r\", \"\\\\r\")",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function translate (s)\r\n\tif compatmode then\r\n\t\ts = gsub(s, \"$|(.-)|%$\", \"<?lua = %1 ?>\")\r\n\t\ts = gsub(s, \"<!%-%-$$(.-)$$%-%->\", \"<?lua %1 ?>\")\r\n\tend\r\n\ts = gsub(s, \"<%%(.-)%%>\", \"<?lua %1 ?>\")\r\n\tlocal res = {}\r\n\tlocal start = 1   -- start of untranslated part in `s'\r\n\twhile true do\r\n\t\tlocal ip, fp, target, exp, code = find(s, \"<%?(%w*)[ \\t]*(=?)(.-)%?>\", start)\r\n\t\tif not ip then break end\r\n\t\ttinsert(res, out(s, start, ip-1))\r\n\t\tif target ~= \"\" and target ~= \"lua\" then\r\n\t\t\t-- not for Lua; pass whole instruction to the output\r\n\t\t\ttinsert(res, out(s, ip, fp))\r\n\t\telse\r\n\t\t\tif exp == \"=\" then   -- expression?\r\n\t\t\t\ttinsert(res, format(\" %s(%s);\", outfunc, code))\r\n\t\t\telse  -- command\r\n\t\t\t\ttinsert(res, format(\" %s \", code))\r\n\t\t\tend\r\n\t\tend\r\n\t\tstart = fp + 1\r\n\tend\r\n\ttinsert(res, out(s, start))\r\n\treturn concat(res)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if compatmode then\r\n\t\ts = gsub(s, \"$|(.-)|%$\", \"<?lua = %1 ?>\")\r\n\t\ts = gsub(s, \"<!%-%-$$(.-)$$%-%->\", \"<?lua %1 ?>\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "s = gsub(s, \"$|(.-)|%$\", \"<?lua = %1 ?>\")",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "s = gsub(s, \"<!%-%-$$(.-)$$%-%->\", \"<?lua %1 ?>\")",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "s = gsub(s, \"<%%(.-)%%>\", \"<?lua %1 ?>\")",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local start = 1",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "while true do\r\n\t\tlocal ip, fp, target, exp, code = find(s, \"<%?(%w*)[ \\t]*(=?)(.-)%?>\", start)\r\n\t\tif not ip then break end\r\n\t\ttinsert(res, out(s, start, ip-1))\r\n\t\tif target ~= \"\" and target ~= \"lua\" then\r\n\t\t\t-- not for Lua; pass whole instruction to the output\r\n\t\t\ttinsert(res, out(s, ip, fp))\r\n\t\telse\r\n\t\t\tif exp == \"=\" then   -- expression?\r\n\t\t\t\ttinsert(res, format(\" %s(%s);\", outfunc, code))\r\n\t\t\telse  -- command\r\n\t\t\t\ttinsert(res, format(\" %s \", code))\r\n\t\t\tend\r\n\t\tend\r\n\t\tstart = fp + 1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 18,
    "text": "local ip, fp, target, exp, code = find(s, \"<%?(%w*)[ \\t]*(=?)(.-)%?>\", start)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if not ip then break end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "tinsert(res, out(s, start, ip-1))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "if target ~= \"\" and target ~= \"lua\" then\r\n\t\t\t-- not for Lua; pass whole instruction to the output\r\n\t\t\ttinsert(res, out(s, ip, fp))\r\n\t\telse\r\n\t\t\tif exp == \"=\" then   -- expression?\r\n\t\t\t\ttinsert(res, format(\" %s(%s);\", outfunc, code))\r\n\t\t\telse  -- command\r\n\t\t\t\ttinsert(res, format(\" %s \", code))\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "tinsert(res, out(s, ip, fp))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "if exp == \"=\" then   -- expression?\r\n\t\t\t\ttinsert(res, format(\" %s(%s);\", outfunc, code))\r\n\t\t\telse  -- command\r\n\t\t\t\ttinsert(res, format(\" %s \", code))\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "tinsert(res, format(\" %s(%s);\", outfunc, code))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "tinsert(res, format(\" %s \", code))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "start = fp + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "tinsert(res, out(s, start))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function setoutfunc (f)\r\n\toutfunc = f\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "outfunc = f",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function setcompatmode (c)\r\n\tcompatmode = c\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "compatmode = c",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function compile (string, chunkname)\r\n\tlocal f, err = cache[string]\r\n\tif f then return f end\r\n\tf, err = loadstring (translate (string), chunkname)\r\n\tif not f then error (err, 3) end\r\n\tcache[string] = f\r\n\treturn f\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local f, err = cache[string]",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if f then return f end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "f, err = loadstring (translate (string), chunkname)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if not f then error (err, 3) end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "error (err, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "cache[string] = f",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function include (filename, env)\r\n\t-- read the whole contents of the file\r\n\tlocal fh = assert (open (filename))\r\n\tlocal src = fh:read(\"*a\")\r\n\tfh:close()\r\n\t-- translates the file into a function\r\n\tlocal prog = compile (src, '@'..filename)\r\n\tlocal _env\r\n\tif env then\r\n\t\t_env = getfenv (prog)\r\n\t\tsetfenv (prog, env)\r\n\tend\r\n\tprog ()\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local fh = assert (open (filename))",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local src = fh:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local prog = compile (src, '@'..filename)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local _env",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if env then\r\n\t\t_env = getfenv (prog)\r\n\t\tsetfenv (prog, env)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "_env = getfenv (prog)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "setfenv (prog, env)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "prog ()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "",
    "type": "function container"
  }, {
    "id": 55,
    "text": "format",
    "type": "global function"
  }, {
    "id": 56,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 57,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 58,
    "text": "module",
    "type": "global function"
  }, {
    "id": 59,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 60,
    "text": "find",
    "type": "global function"
  }, {
    "id": 61,
    "text": "open",
    "type": "global function"
  }, {
    "id": 62,
    "text": "error",
    "type": "global function"
  }, {
    "id": 63,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 64,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 65,
    "text": "prog",
    "type": "global function"
  }, {
    "id": 66,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 67,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 68,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "variable container"
  }, {
    "id": 71,
    "text": "",
    "type": "require container"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "n/a"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "n/a"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "string"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "boolean"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "tableconstructor"
  } ]
}