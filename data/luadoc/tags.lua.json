{
  "_filename": "tags.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadoc/src/luadoc/taglet/standard/tags.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 12
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 5
  }, {
    "from": 30,
    "label": "has",
    "to": 21
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 23
  }, {
    "from": 30,
    "label": "has",
    "to": 24
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 12
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 12
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 8
  }, {
    "from": 54,
    "label": "has",
    "to": 8
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 34
  }, {
    "from": 58,
    "label": "has",
    "to": 8
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 50
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 26,
    "label": "calls",
    "to": 71
  }, {
    "from": 30,
    "label": "calls",
    "to": 71
  }, {
    "from": 54,
    "label": "calls",
    "to": 71
  }, {
    "from": 18,
    "label": "calls",
    "to": 72
  }, {
    "from": 4,
    "label": "calls",
    "to": 70
  }, {
    "from": 18,
    "label": "calls",
    "to": 70
  }, {
    "from": 30,
    "label": "calls",
    "to": 70
  }, {
    "from": 40,
    "label": "calls",
    "to": 70
  }, {
    "from": 46,
    "label": "calls",
    "to": 70
  }, {
    "from": 52,
    "label": "calls",
    "to": 70
  }, {
    "from": 18,
    "label": "calls",
    "to": 66
  }, {
    "from": 30,
    "label": "calls",
    "to": 66
  }, {
    "from": 46,
    "label": "calls",
    "to": 67
  }, {
    "from": 54,
    "label": "calls",
    "to": 74
  }, {
    "from": 30,
    "label": "calls",
    "to": 69
  }, {
    "from": 46,
    "label": "calls",
    "to": 69
  }, {
    "from": 40,
    "label": "calls",
    "to": 75
  }, {
    "from": 40,
    "label": "calls",
    "to": 75
  }, {
    "from": 52,
    "label": "calls",
    "to": 75
  }, {
    "from": 52,
    "label": "calls",
    "to": 75
  }, {
    "from": 62,
    "label": "calls",
    "to": 76
  }, {
    "from": 62,
    "label": "calls",
    "to": 76
  }, {
    "from": 62,
    "label": "calls",
    "to": 76
  }, {
    "from": 62,
    "label": "calls",
    "to": 76
  }, {
    "from": 46,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 62,
    "label": "declares",
    "to": 4
  }, {
    "from": 62,
    "label": "declares",
    "to": 11
  }, {
    "from": 62,
    "label": "declares",
    "to": 14
  }, {
    "from": 62,
    "label": "declares",
    "to": 16
  }, {
    "from": 62,
    "label": "declares",
    "to": 18
  }, {
    "from": 62,
    "label": "declares",
    "to": 26
  }, {
    "from": 62,
    "label": "declares",
    "to": 30
  }, {
    "from": 62,
    "label": "declares",
    "to": 38
  }, {
    "from": 62,
    "label": "declares",
    "to": 40
  }, {
    "from": 62,
    "label": "declares",
    "to": 46
  }, {
    "from": 62,
    "label": "declares",
    "to": 52
  }, {
    "from": 62,
    "label": "declares",
    "to": 54
  }, {
    "from": 62,
    "label": "declares",
    "to": 58
  }, {
    "from": 62,
    "label": "declares",
    "to": 60
  }, {
    "from": 63,
    "label": "calls",
    "to": 54
  }, {
    "from": 63,
    "label": "calls",
    "to": 54
  }, {
    "from": 63,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 77,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 77,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 77,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 77,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 77,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 77,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 77,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 77,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 77,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 77,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 77,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 77,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 77,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 77,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 77,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 78,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 3
  }, {
    "from": 78,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 2
  }, {
    "from": 78,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 65
  }, {
    "from": 78,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 68
  }, {
    "from": 113,
    "label": "requires",
    "to": 1
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 60
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tags",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "luadoc",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function author (tag, block, text)\r\n\tblock[tag] = block[tag] or {}\r\n\tif not text then\r\n\t\tluadoc.logger:warn(\"author `name' not defined [[\"..text..\"]]: skipping\")\r\n\t\treturn\r\n\tend\r\n\ttable.insert (block[tag], text)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "block[tag] = block[tag] or {}",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "if not text then\r\n\t\tluadoc.logger:warn(\"author `name' not defined [[\"..text..\"]]: skipping\")\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "luadoc.logger:warn(\"author `name' not defined [[\"..text..\"]]: skipping\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "table.insert (block[tag], text)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function class (tag, block, text)\r\n\tblock[tag] = text\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "block[tag] = text",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function copyright (tag, block, text)\r\n\tblock[tag] = text\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function description (tag, block, text)\r\n\tblock[tag] = text\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function field (tag, block, text)\r\n\tif block[\"class\"] ~= \"table\" then\r\n\t\tluadoc.logger:warn(\"documenting `field' for block that is not a `table'\")\r\n\tend\r\n\tblock[tag] = block[tag] or {}\r\n\r\n\tlocal _, _, name, desc = string.find(text, \"^([_%w%.]+)%s+(.*)\")\r\n\tassert(name, \"field name not defined\")\r\n\t\r\n\ttable.insert(block[tag], name)\r\n\tblock[tag][name] = desc\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if block[\"class\"] ~= \"table\" then\r\n\t\tluadoc.logger:warn(\"documenting `field' for block that is not a `table'\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "luadoc.logger:warn(\"documenting `field' for block that is not a `table'\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "local _, _, name, desc = string.find(text, \"^([_%w%.]+)%s+(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "assert(name, \"field name not defined\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "table.insert(block[tag], name)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "block[tag][name] = desc",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function name (tag, block, text)\r\n\tif block[tag] and block[tag] ~= text then\r\n\t\tluadoc.logger:error(string.format(\"block name conflict: `%s' -> `%s'\", block[tag], text))\r\n\tend\r\n\t\r\n\tblock[tag] = text\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "if block[tag] and block[tag] ~= text then\r\n\t\tluadoc.logger:error(string.format(\"block name conflict: `%s' -> `%s'\", block[tag], text))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "luadoc.logger:error(string.format(\"block name conflict: `%s' -> `%s'\", block[tag], text))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function param (tag, block, text)\r\n\tblock[tag] = block[tag] or {}\r\n\t-- TODO: make this pattern more flexible, accepting empty descriptions\r\n\tlocal _, _, name, desc = string.find(text, \"^([_%w%.]+)%s+(.*)\")\r\n\tif not name then\r\n\t\tluadoc.logger:warn(\"parameter `name' not defined [[\"..text..\"]]: skipping\")\r\n\t\treturn\r\n\tend\r\n\tlocal i = table.foreachi(block[tag], function (i, v)\r\n\t\tif v == name then\r\n\t\t\treturn i\r\n\t\tend\r\n\tend)\r\n\tif i == nil then\r\n\t\tluadoc.logger:warn(string.format(\"documenting undefined parameter `%s'\", name))\r\n\t\ttable.insert(block[tag], name)\r\n\tend\r\n\tblock[tag][name] = desc\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if not name then\r\n\t\tluadoc.logger:warn(\"parameter `name' not defined [[\"..text..\"]]: skipping\")\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "luadoc.logger:warn(\"parameter `name' not defined [[\"..text..\"]]: skipping\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local i = table.foreachi(block[tag], function (i, v)\r\n\t\tif v == name then\r\n\t\t\treturn i\r\n\t\tend\r\n\tend)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if v == name then\r\n\t\t\treturn i\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if i == nil then\r\n\t\tluadoc.logger:warn(string.format(\"documenting undefined parameter `%s'\", name))\r\n\t\ttable.insert(block[tag], name)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "luadoc.logger:warn(string.format(\"documenting undefined parameter `%s'\", name))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function release (tag, block, text)\r\n\tblock[tag] = text\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function ret (tag, block, text)\r\n\ttag = \"ret\"\r\n\tif type(block[tag]) == \"string\" then\r\n\t\tblock[tag] = { block[tag], text }\r\n\telseif type(block[tag]) == \"table\" then\r\n\t\ttable.insert(block[tag], text)\r\n\telse\r\n\t\tblock[tag] = text\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "tag = \"ret\"",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if type(block[tag]) == \"string\" then\r\n\t\tblock[tag] = { block[tag], text }\r\n\telseif type(block[tag]) == \"table\" then\r\n\t\ttable.insert(block[tag], text)\r\n\telse\r\n\t\tblock[tag] = text\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "block[tag] = { block[tag], text }",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "table.insert(block[tag], text)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function see (tag, block, text)\r\n\t-- see is always an array\r\n\tblock[tag] = block[tag] or {}\r\n\t\r\n\t-- remove trailing \".\"\r\n\ttext = string.gsub(text, \"(.*)%.$\", \"%1\")\r\n\t\r\n\tlocal s = util.split(\"%s*,%s*\", text)\t\t\t\r\n\t\r\n\ttable.foreachi(s, function (_, v)\r\n\t\ttable.insert(block[tag], v)\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "text = string.gsub(text, \"(.*)%.$\", \"%1\")",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local s = util.split(\"%s*,%s*\", text)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "table.foreachi(s, function (_, v)\r\n\t\ttable.insert(block[tag], v)\r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "table.insert(block[tag], v)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function usage (tag, block, text)\r\n\tif type(block[tag]) == \"string\" then\r\n\t\tblock[tag] = { block[tag], text }\r\n\telseif type(block[tag]) == \"table\" then\r\n\t\ttable.insert(block[tag], text)\r\n\telse\r\n\t\tblock[tag] = text\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function handle (tag, block, text)\r\n\tif not handlers[tag] then\r\n\t\tluadoc.logger:error(string.format(\"undefined handler for tag `%s'\", tag))\r\n\t\treturn\r\n\tend\r\n--\tassert(handlers[tag], string.format(\"undefined handler for tag `%s'\", tag))\r\n\treturn handlers[tag](tag, block, text)\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "if not handlers[tag] then\r\n\t\tluadoc.logger:error(string.format(\"undefined handler for tag `%s'\", tag))\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "luadoc.logger:error(string.format(\"undefined handler for tag `%s'\", tag))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function (i, v)\r\n\t\tif v == name then\r\n\t\t\treturn i\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function (_, v)\r\n\t\ttable.insert(block[tag], v)\r\n\tend",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "",
    "type": "function container"
  }, {
    "id": 63,
    "text": "local function parse_comment (block, first_line)\r\n\r\n\t-- get the first non-empty line of code\r\n\tlocal code = table.foreachi(block.code, function(_, line)\r\n\t\tif not util.line_empty(line) then\r\n\t\t\t-- `local' declarations are ignored in two cases:\r\n\t\t\t-- when the `nolocals' option is turned on; and\r\n\t\t\t-- when the first block of a file is parsed (this is\r\n\t\t\t--\tnecessary to avoid confusion between the top\r\n\t\t\t--\tlocal declarations and the `module' definition.\r\n\t\t\tif (options.nolocals or first_line) and line:find\"^%s*local\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\treturn line\r\n\t\tend\r\n\tend)\r\n\r\n\t-- parse first line of code\r\n\tif code ~= nil then\r\n\t\tlocal func_info = check_function(code)\r\n\t\tlocal module_name = check_module(code)\r\n\t\tif func_info then\r\n\t\t\tblock.class = \"function\"\r\n\t\t\tblock.name = func_info.name\r\n\t\t\tblock.param = func_info.param\r\n\t\t\tblock.private = func_info.private\r\n\t\telseif module_name then\r\n\t\t\tblock.class = \"module\"\r\n\t\t\tblock.name = module_name\r\n\t\t\tblock.param = {}\r\n\t\telse\r\n\t\t\tblock.param = {}\r\n\t\tend\r\n\telse\r\n\t\t-- TODO: comment without any code. Does this means we are dealing\r\n\t\t-- with a file comment?\r\n\tend\r\n\r\n\t-- parse @ tags\r\n\tlocal currenttag = \"description\"\r\n\tlocal currenttext\t\t-- trimmed and concatenated lines\r\n\tlocal ocurrenttext\t\t-- concatenated lines with linebreaks (eg. original non-stripped text format)\r\n    local currenttagpostfix -- postfix '#' for current tag\r\n\r\n\ttable.foreachi(block.comment, function (_, line)\r\n\t\ttline = util.trim_comment(line)\r\n\t\toline = util.no_trim_comment(line)\r\n\r\n\t\tlocal r, _, tag, tagpostfix, text = string.find(tline, \"@([_%w%.]+)(#?)%s+(.*)\")\r\n\t\tif r ~= nil then\r\n\t\t\t-- found new tag, add previous one, and start a new one\r\n\t\t\t-- TODO: what to do with invalid tags? issue an error? or log a warning?\r\n\t\t\ttags.handle(currenttag, block, currenttext)\r\n\r\n\t\t\tcurrenttag = tag\r\n\t\t\tcurrenttext = text\r\n\t\t\tocurrenttext = text\r\n            currenttagpostfix = tagpostfix\r\n\t\telse\r\n\t\t\tcurrenttext = util.concat(currenttext, tline)\r\n\t\t\tocurrenttext = util.no_concat(ocurrenttext, oline)\r\n\t\t\tassert(string.sub(currenttext, 1, 1) ~= \" \", string.format(\"`%s', `%s'\", currenttext, tline))\r\n\t\tend\r\n\tend)\r\n    if currenttagpostfix == \"#\" then\r\n        tags.handle(currenttag, block, ocurrenttext)    -- dispatch text with original linebreaks and indentations\r\n    else\r\n        tags.handle(currenttag, block, currenttext)     -- dispatch text with trimmed and concatenated\r\n    end\r\n\r\n\t-- extracts summary information from the description\r\n\tblock.summary = parse_summary(block.description)\r\n\tassert(string.sub(block.description, 1, 1) ~= \" \", string.format(\"`%s'\", block.description))\r\n\r\n\treturn block\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "function split(delim, text)\r\n\tlocal list = {}\r\n\tif string.len(text) > 0 then\r\n\t\tdelim = delim or \"\"\r\n\t\tlocal pos = 1\r\n\t\t-- if delim matches empty string then it would give an endless loop\r\n\t\tif string.find(\"\", delim, 1) and delim ~= \"\" then\r\n\t\t\terror(\"delim matches empty string!\")\r\n\t\tend\r\n\t\tlocal first, last\r\n\t\twhile 1 do\r\n\t\t\tif delim ~= \"\" then\r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn list\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "string",
    "type": "module"
  }, {
    "id": 66,
    "text": "find",
    "type": "global function"
  }, {
    "id": 67,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 68,
    "text": "table",
    "type": "module"
  }, {
    "id": 69,
    "text": "foreachi",
    "type": "global function"
  }, {
    "id": 70,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 71,
    "text": "format",
    "type": "global function"
  }, {
    "id": 72,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 73,
    "text": "module",
    "type": "global function"
  }, {
    "id": 74,
    "text": "handlers[tag]",
    "type": "global function"
  }, {
    "id": 75,
    "text": "type",
    "type": "global function"
  }, {
    "id": 76,
    "text": "require",
    "type": "global function"
  }, {
    "id": 77,
    "text": "",
    "type": "variable container"
  }, {
    "id": 78,
    "text": "",
    "type": "require container"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "global variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "global variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "global variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "global variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "global variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "global variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "global variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "global variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "global variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  } ]
}