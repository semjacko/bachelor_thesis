{
  "_filename": "standard.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadoc/src/luadoc/taglet/standard.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 7
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 7
  }, {
    "from": 33,
    "label": "has",
    "to": 7
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 7
  }, {
    "from": 42,
    "label": "has",
    "to": 7
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 41,
    "label": "has",
    "to": 56
  }, {
    "from": 41,
    "label": "has",
    "to": 57
  }, {
    "from": 41,
    "label": "has",
    "to": 58
  }, {
    "from": 41,
    "label": "has",
    "to": 59
  }, {
    "from": 41,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 71
  }, {
    "from": 64,
    "label": "has",
    "to": 72
  }, {
    "from": 41,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 65
  }, {
    "from": 41,
    "label": "has",
    "to": 75
  }, {
    "from": 41,
    "label": "has",
    "to": 76
  }, {
    "from": 41,
    "label": "has",
    "to": 7
  }, {
    "from": 41,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 39
  }, {
    "from": 78,
    "label": "has",
    "to": 7
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 7
  }, {
    "from": 78,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 8
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 37
  }, {
    "from": 93,
    "label": "has",
    "to": 39
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 92,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 98
  }, {
    "from": 86,
    "label": "has",
    "to": 99
  }, {
    "from": 86,
    "label": "has",
    "to": 100
  }, {
    "from": 86,
    "label": "has",
    "to": 101
  }, {
    "from": 86,
    "label": "has",
    "to": 102
  }, {
    "from": 86,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 86,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 113,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 118,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 118,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 118,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 113,
    "label": "has",
    "to": 129
  }, {
    "from": 113,
    "label": "has",
    "to": 130
  }, {
    "from": 109,
    "label": "has",
    "to": 131
  }, {
    "from": 109,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 109,
    "label": "has",
    "to": 135
  }, {
    "from": 109,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 86,
    "label": "has",
    "to": 139
  }, {
    "from": 86,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 86,
    "label": "has",
    "to": 143
  }, {
    "from": 86,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 86,
    "label": "has",
    "to": 7
  }, {
    "from": 86,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 7
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 148,
    "label": "has",
    "to": 7
  }, {
    "from": 148,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 156,
    "label": "has",
    "to": 7
  }, {
    "from": 156,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 165,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 173,
    "label": "has",
    "to": 176
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 173,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 173,
    "label": "has",
    "to": 184
  }, {
    "from": 173,
    "label": "has",
    "to": 185
  }, {
    "from": 173,
    "label": "has",
    "to": 7
  }, {
    "from": 173,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 187,
    "label": "has",
    "to": 11
  }, {
    "from": 187,
    "label": "has",
    "to": 10
  }, {
    "from": 187,
    "label": "has",
    "to": 7
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 8
  }, {
    "from": 189,
    "label": "has",
    "to": 7
  }, {
    "from": 189,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 189,
    "label": "has",
    "to": 11
  }, {
    "from": 189,
    "label": "has",
    "to": 10
  }, {
    "from": 189,
    "label": "has",
    "to": 7
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 16
  }, {
    "from": 191,
    "label": "has",
    "to": 17
  }, {
    "from": 191,
    "label": "has",
    "to": 7
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 193,
    "label": "has",
    "to": 7
  }, {
    "from": 193,
    "label": "has",
    "to": 7
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 61
  }, {
    "from": 195,
    "label": "has",
    "to": 62
  }, {
    "from": 195,
    "label": "has",
    "to": 63
  }, {
    "from": 195,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 71
  }, {
    "from": 64,
    "label": "has",
    "to": 72
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 115
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 151
  }, {
    "from": 199,
    "label": "has",
    "to": 7
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 179
  }, {
    "from": 201,
    "label": "has",
    "to": 180
  }, {
    "from": 201,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 13,
    "label": "calls",
    "to": 222
  }, {
    "from": 22,
    "label": "calls",
    "to": 222
  }, {
    "from": 41,
    "label": "calls",
    "to": 222
  }, {
    "from": 41,
    "label": "calls",
    "to": 222
  }, {
    "from": 86,
    "label": "calls",
    "to": 222
  }, {
    "from": 148,
    "label": "calls",
    "to": 222
  }, {
    "from": 156,
    "label": "calls",
    "to": 222
  }, {
    "from": 173,
    "label": "calls",
    "to": 222
  }, {
    "from": 13,
    "label": "calls",
    "to": 226
  }, {
    "from": 13,
    "label": "calls",
    "to": 226
  }, {
    "from": 41,
    "label": "calls",
    "to": 226
  }, {
    "from": 41,
    "label": "calls",
    "to": 226
  }, {
    "from": 86,
    "label": "calls",
    "to": 226
  }, {
    "from": 156,
    "label": "calls",
    "to": 226
  }, {
    "from": 173,
    "label": "calls",
    "to": 226
  }, {
    "from": 173,
    "label": "calls",
    "to": 226
  }, {
    "from": 173,
    "label": "calls",
    "to": 226
  }, {
    "from": 173,
    "label": "calls",
    "to": 226
  }, {
    "from": 86,
    "label": "calls",
    "to": 78
  }, {
    "from": 13,
    "label": "calls",
    "to": 212
  }, {
    "from": 22,
    "label": "calls",
    "to": 212
  }, {
    "from": 33,
    "label": "calls",
    "to": 212
  }, {
    "from": 41,
    "label": "calls",
    "to": 212
  }, {
    "from": 78,
    "label": "calls",
    "to": 212
  }, {
    "from": 86,
    "label": "calls",
    "to": 212
  }, {
    "from": 148,
    "label": "calls",
    "to": 212
  }, {
    "from": 41,
    "label": "calls",
    "to": 207
  }, {
    "from": 86,
    "label": "calls",
    "to": 207
  }, {
    "from": 86,
    "label": "calls",
    "to": 207
  }, {
    "from": 78,
    "label": "calls",
    "to": 41
  }, {
    "from": 78,
    "label": "calls",
    "to": 41
  }, {
    "from": 173,
    "label": "calls",
    "to": 165
  }, {
    "from": 173,
    "label": "calls",
    "to": 165
  }, {
    "from": 13,
    "label": "calls",
    "to": 208
  }, {
    "from": 156,
    "label": "calls",
    "to": 148
  }, {
    "from": 173,
    "label": "calls",
    "to": 148
  }, {
    "from": 203,
    "label": "calls",
    "to": 227
  }, {
    "from": 78,
    "label": "calls",
    "to": 33
  }, {
    "from": 86,
    "label": "calls",
    "to": 216
  }, {
    "from": 86,
    "label": "calls",
    "to": 216
  }, {
    "from": 41,
    "label": "calls",
    "to": 27
  }, {
    "from": 148,
    "label": "calls",
    "to": 86
  }, {
    "from": 165,
    "label": "calls",
    "to": 228
  }, {
    "from": 41,
    "label": "calls",
    "to": 206
  }, {
    "from": 86,
    "label": "calls",
    "to": 215
  }, {
    "from": 13,
    "label": "calls",
    "to": 218
  }, {
    "from": 41,
    "label": "calls",
    "to": 218
  }, {
    "from": 41,
    "label": "calls",
    "to": 218
  }, {
    "from": 86,
    "label": "calls",
    "to": 218
  }, {
    "from": 148,
    "label": "calls",
    "to": 218
  }, {
    "from": 173,
    "label": "calls",
    "to": 218
  }, {
    "from": 41,
    "label": "calls",
    "to": 210
  }, {
    "from": 41,
    "label": "calls",
    "to": 224
  }, {
    "from": 41,
    "label": "calls",
    "to": 224
  }, {
    "from": 156,
    "label": "calls",
    "to": 225
  }, {
    "from": 156,
    "label": "calls",
    "to": 156
  }, {
    "from": 173,
    "label": "calls",
    "to": 156
  }, {
    "from": 33,
    "label": "calls",
    "to": 220
  }, {
    "from": 78,
    "label": "calls",
    "to": 220
  }, {
    "from": 86,
    "label": "calls",
    "to": 220
  }, {
    "from": 86,
    "label": "calls",
    "to": 220
  }, {
    "from": 86,
    "label": "calls",
    "to": 220
  }, {
    "from": 86,
    "label": "calls",
    "to": 220
  }, {
    "from": 86,
    "label": "calls",
    "to": 220
  }, {
    "from": 86,
    "label": "calls",
    "to": 220
  }, {
    "from": 86,
    "label": "calls",
    "to": 220
  }, {
    "from": 86,
    "label": "calls",
    "to": 220
  }, {
    "from": 41,
    "label": "calls",
    "to": 205
  }, {
    "from": 33,
    "label": "calls",
    "to": 22
  }, {
    "from": 41,
    "label": "calls",
    "to": 22
  }, {
    "from": 86,
    "label": "calls",
    "to": 22
  }, {
    "from": 27,
    "label": "calls",
    "to": 223
  }, {
    "from": 41,
    "label": "calls",
    "to": 209
  }, {
    "from": 41,
    "label": "calls",
    "to": 5
  }, {
    "from": 41,
    "label": "calls",
    "to": 5
  }, {
    "from": 41,
    "label": "calls",
    "to": 5
  }, {
    "from": 156,
    "label": "calls",
    "to": 221
  }, {
    "from": 173,
    "label": "calls",
    "to": 221
  }, {
    "from": 13,
    "label": "calls",
    "to": 204
  }, {
    "from": 22,
    "label": "calls",
    "to": 204
  }, {
    "from": 165,
    "label": "calls",
    "to": 219
  }, {
    "from": 165,
    "label": "calls",
    "to": 219
  }, {
    "from": 165,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 229
  }, {
    "from": 203,
    "label": "calls",
    "to": 229
  }, {
    "from": 203,
    "label": "calls",
    "to": 229
  }, {
    "from": 203,
    "label": "calls",
    "to": 229
  }, {
    "from": 203,
    "label": "calls",
    "to": 229
  }, {
    "from": 203,
    "label": "calls",
    "to": 229
  }, {
    "from": 203,
    "label": "calls",
    "to": 229
  }, {
    "from": 41,
    "label": "calls",
    "to": 13
  }, {
    "from": 86,
    "label": "calls",
    "to": 6
  }, {
    "from": 86,
    "label": "calls",
    "to": 6
  }, {
    "from": 86,
    "label": "calls",
    "to": 6
  }, {
    "from": 86,
    "label": "calls",
    "to": 6
  }, {
    "from": 86,
    "label": "calls",
    "to": 6
  }, {
    "from": 2,
    "label": "contains",
    "to": 203
  }, {
    "from": 203,
    "label": "declares",
    "to": 6
  }, {
    "from": 203,
    "label": "declares",
    "to": 13
  }, {
    "from": 203,
    "label": "declares",
    "to": 22
  }, {
    "from": 203,
    "label": "declares",
    "to": 27
  }, {
    "from": 203,
    "label": "declares",
    "to": 33
  }, {
    "from": 203,
    "label": "declares",
    "to": 41
  }, {
    "from": 203,
    "label": "declares",
    "to": 78
  }, {
    "from": 203,
    "label": "declares",
    "to": 86
  }, {
    "from": 203,
    "label": "declares",
    "to": 148
  }, {
    "from": 203,
    "label": "declares",
    "to": 156
  }, {
    "from": 203,
    "label": "declares",
    "to": 165
  }, {
    "from": 203,
    "label": "declares",
    "to": 173
  }, {
    "from": 203,
    "label": "declares",
    "to": 187
  }, {
    "from": 203,
    "label": "declares",
    "to": 189
  }, {
    "from": 203,
    "label": "declares",
    "to": 191
  }, {
    "from": 203,
    "label": "declares",
    "to": 193
  }, {
    "from": 203,
    "label": "declares",
    "to": 195
  }, {
    "from": 203,
    "label": "declares",
    "to": 197
  }, {
    "from": 203,
    "label": "declares",
    "to": 199
  }, {
    "from": 203,
    "label": "declares",
    "to": 201
  }, {
    "from": 2,
    "label": "contains",
    "to": 230
  }, {
    "from": 2,
    "label": "contains",
    "to": 231
  }, {
    "from": 230,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 230,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 230,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "assigns",
    "to": 237
  }, {
    "from": 230,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "assigns",
    "to": 239
  }, {
    "from": 230,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  }, {
    "from": 230,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 230,
    "label": "initializes",
    "to": 244
  }, {
    "from": 244,
    "label": "assigns",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 245,
    "label": "assigns",
    "to": 247
  }, {
    "from": 245,
    "label": "assigns",
    "to": 248
  }, {
    "from": 231,
    "label": "initializes",
    "to": 249
  }, {
    "from": 249,
    "label": "requires",
    "to": 214
  }, {
    "from": 231,
    "label": "initializes",
    "to": 250
  }, {
    "from": 250,
    "label": "requires",
    "to": 213
  }, {
    "from": 231,
    "label": "initializes",
    "to": 251
  }, {
    "from": 251,
    "label": "requires",
    "to": 4
  }, {
    "from": 231,
    "label": "initializes",
    "to": 252
  }, {
    "from": 252,
    "label": "requires",
    "to": 3
  }, {
    "from": 231,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "requires",
    "to": 1
  }, {
    "from": 231,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "requires",
    "to": 211
  }, {
    "from": 231,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "requires",
    "to": 217
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 195
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 197
  }, {
    "from": 178,
    "label": "hasArgument",
    "to": 201
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tags",
    "type": "module"
  }, {
    "id": 2,
    "text": "standard",
    "type": "module"
  }, {
    "id": 3,
    "text": "util",
    "type": "module"
  }, {
    "id": 4,
    "text": "luadoc",
    "type": "module"
  }, {
    "id": 5,
    "text": "function handle (tag, block, text)\r\n\tif not handlers[tag] then\r\n\t\tluadoc.logger:error(string.format(\"undefined handler for tag `%s'\", tag))\r\n\t\treturn\r\n\tend\r\n--\tassert(handlers[tag], string.format(\"undefined handler for tag `%s'\", tag))\r\n\treturn handlers[tag](tag, block, text)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function class_iterator (t, class)\r\n\treturn function ()\r\n\t\tlocal i = 1\r\n\t\treturn function ()\r\n\t\t\twhile t[i] and t[i].class ~= class do\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\tlocal v = t[i]\r\n\t\t\ti = i + 1\r\n\t\t\treturn v\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "while t[i] and t[i].class ~= class do\r\n\t\t\t\ti = i + 1\r\n\t\t\tend",
    "type": "statement:while"
  }, {
    "id": 10,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local v = t[i]",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function check_function (line)\r\n\tline = util.trim(line)\r\n\r\n\tlocal info = table.foreachi(function_patterns, function (_, pattern)\r\n\t\tlocal r, _, l, id, param = string.find(line, pattern)\r\n\t\tif r ~= nil then\r\n\t\t\treturn {\r\n\t\t\t\tname = id,\r\n\t\t\t\tprivate = (l == \"local\"),\r\n\t\t\t\tparam = util.split(\"%s*,%s*\", param),\r\n\t\t\t}\r\n\t\tend\r\n\tend)\r\n\r\n\t-- TODO: remove these assert's?\r\n\tif info ~= nil then\r\n\t\tassert(info.name, \"function name undefined\")\r\n\t\tassert(info.param, string.format(\"undefined parameter list for function `%s'\", info.name))\r\n\tend\r\n\r\n\treturn info\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "line = util.trim(line)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local info = table.foreachi(function_patterns, function (_, pattern)\r\n\t\tlocal r, _, l, id, param = string.find(line, pattern)\r\n\t\tif r ~= nil then\r\n\t\t\treturn {\r\n\t\t\t\tname = id,\r\n\t\t\t\tprivate = (l == \"local\"),\r\n\t\t\t\tparam = util.split(\"%s*,%s*\", param),\r\n\t\t\t}\r\n\t\tend\r\n\tend)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local r, _, l, id, param = string.find(line, pattern)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if r ~= nil then\r\n\t\t\treturn {\r\n\t\t\t\tname = id,\r\n\t\t\t\tprivate = (l == \"local\"),\r\n\t\t\t\tparam = util.split(\"%s*,%s*\", param),\r\n\t\t\t}\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "if info ~= nil then\r\n\t\tassert(info.name, \"function name undefined\")\r\n\t\tassert(info.param, string.format(\"undefined parameter list for function `%s'\", info.name))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "assert(info.name, \"function name undefined\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert(info.param, string.format(\"undefined parameter list for function `%s'\", info.name))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function check_module (line, currentmodule)\r\n\tline = util.trim(line)\r\n\r\n\t-- module\"x.y\"\r\n\t-- module'x.y'\r\n\t-- module[[x.y]]\r\n\t-- module(\"x.y\")\r\n\t-- module('x.y')\r\n\t-- module([[x.y]])\r\n\t-- module(...)\r\n\r\n\tlocal r, _, modulename = string.find(line, \"^module%s*[%s\\\"'(%[]+([^,\\\"')%]]+)\")\r\n\tif r then\r\n\t\t-- found module definition\r\n\t\tlogger:debug(string.format(\"found module `%s'\", modulename))\r\n\t\treturn modulename\r\n\tend\r\n\treturn currentmodule\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local r, _, modulename = string.find(line, \"^module%s*[%s\\\"'(%[]+([^,\\\"')%]]+)\")",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if r then\r\n\t\t-- found module definition\r\n\t\tlogger:debug(string.format(\"found module `%s'\", modulename))\r\n\t\treturn modulename\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "logger:debug(string.format(\"found module `%s'\", modulename))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function parse_summary (description)\r\n\t-- summary is never nil...\r\n\tdescription = description or \"\"\r\n\r\n\t-- append an \" \" at the end to make the pattern work in all cases\r\n\tdescription = description..\" \"\r\n\r\n\t-- read until the first period followed by a space or tab\r\n\tlocal summary = string.match(description, \"(.-%.)[%s\\t]\")\r\n\r\n\t-- if pattern did not find the first sentence, summary is the whole description\r\n\tsummary = summary or description\r\n\r\n\treturn summary\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "description = description or \"\"",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "description = description..\" \"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local summary = string.match(description, \"(.-%.)[%s\\t]\")",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "summary = summary or description",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function parse_code (f, line, modulename)\r\n\tlocal code = {}\r\n\twhile line ~= nil do\r\n\t\tif string.find(line, \"^[\\t ]*%-%-%-\") then\r\n\t\t\t-- reached another luadoc block, end this parsing\r\n\t\t\treturn line, code, modulename\r\n\t\telse\r\n\t\t\t-- look for a module definition\r\n\t\t\tmodulename = check_module(line, modulename)\r\n\r\n\t\t\ttable.insert(code, line)\r\n\t\t\tline = f:read()\r\n\t\tend\r\n\tend\r\n\t-- reached end of file\r\n\treturn line, code, modulename\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local code = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "while line ~= nil do\r\n\t\tif string.find(line, \"^[\\t ]*%-%-%-\") then\r\n\t\t\t-- reached another luadoc block, end this parsing\r\n\t\t\treturn line, code, modulename\r\n\t\telse\r\n\t\t\t-- look for a module definition\r\n\t\t\tmodulename = check_module(line, modulename)\r\n\r\n\t\t\ttable.insert(code, line)\r\n\t\t\tline = f:read()\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 36,
    "text": "if string.find(line, \"^[\\t ]*%-%-%-\") then\r\n\t\t\t-- reached another luadoc block, end this parsing\r\n\t\t\treturn line, code, modulename\r\n\t\telse\r\n\t\t\t-- look for a module definition\r\n\t\t\tmodulename = check_module(line, modulename)\r\n\r\n\t\t\ttable.insert(code, line)\r\n\t\t\tline = f:read()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "modulename = check_module(line, modulename)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "table.insert(code, line)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "line = f:read()",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function parse_comment (block, first_line)\r\n\r\n\t-- get the first non-empty line of code\r\n\tlocal code = table.foreachi(block.code, function(_, line)\r\n\t\tif not util.line_empty(line) then\r\n\t\t\t-- `local' declarations are ignored in two cases:\r\n\t\t\t-- when the `nolocals' option is turned on; and\r\n\t\t\t-- when the first block of a file is parsed (this is\r\n\t\t\t--\tnecessary to avoid confusion between the top\r\n\t\t\t--\tlocal declarations and the `module' definition.\r\n\t\t\tif (options.nolocals or first_line) and line:find\"^%s*local\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\treturn line\r\n\t\tend\r\n\tend)\r\n\r\n\t-- parse first line of code\r\n\tif code ~= nil then\r\n\t\tlocal func_info = check_function(code)\r\n\t\tlocal module_name = check_module(code)\r\n\t\tif func_info then\r\n\t\t\tblock.class = \"function\"\r\n\t\t\tblock.name = func_info.name\r\n\t\t\tblock.param = func_info.param\r\n\t\t\tblock.private = func_info.private\r\n\t\telseif module_name then\r\n\t\t\tblock.class = \"module\"\r\n\t\t\tblock.name = module_name\r\n\t\t\tblock.param = {}\r\n\t\telse\r\n\t\t\tblock.param = {}\r\n\t\tend\r\n\telse\r\n\t\t-- TODO: comment without any code. Does this means we are dealing\r\n\t\t-- with a file comment?\r\n\tend\r\n\r\n\t-- parse @ tags\r\n\tlocal currenttag = \"description\"\r\n\tlocal currenttext\t\t-- trimmed and concatenated lines\r\n\tlocal ocurrenttext\t\t-- concatenated lines with linebreaks (eg. original non-stripped text format)\r\n    local currenttagpostfix -- postfix '#' for current tag\r\n\r\n\ttable.foreachi(block.comment, function (_, line)\r\n\t\ttline = util.trim_comment(line)\r\n\t\toline = util.no_trim_comment(line)\r\n\r\n\t\tlocal r, _, tag, tagpostfix, text = string.find(tline, \"@([_%w%.]+)(#?)%s+(.*)\")\r\n\t\tif r ~= nil then\r\n\t\t\t-- found new tag, add previous one, and start a new one\r\n\t\t\t-- TODO: what to do with invalid tags? issue an error? or log a warning?\r\n\t\t\ttags.handle(currenttag, block, currenttext)\r\n\r\n\t\t\tcurrenttag = tag\r\n\t\t\tcurrenttext = text\r\n\t\t\tocurrenttext = text\r\n            currenttagpostfix = tagpostfix\r\n\t\telse\r\n\t\t\tcurrenttext = util.concat(currenttext, tline)\r\n\t\t\tocurrenttext = util.no_concat(ocurrenttext, oline)\r\n\t\t\tassert(string.sub(currenttext, 1, 1) ~= \" \", string.format(\"`%s', `%s'\", currenttext, tline))\r\n\t\tend\r\n\tend)\r\n    if currenttagpostfix == \"#\" then\r\n        tags.handle(currenttag, block, ocurrenttext)    -- dispatch text with original linebreaks and indentations\r\n    else\r\n        tags.handle(currenttag, block, currenttext)     -- dispatch text with trimmed and concatenated\r\n    end\r\n\r\n\t-- extracts summary information from the description\r\n\tblock.summary = parse_summary(block.description)\r\n\tassert(string.sub(block.description, 1, 1) ~= \" \", string.format(\"`%s'\", block.description))\r\n\r\n\treturn block\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local code = table.foreachi(block.code, function(_, line)\r\n\t\tif not util.line_empty(line) then\r\n\t\t\t-- `local' declarations are ignored in two cases:\r\n\t\t\t-- when the `nolocals' option is turned on; and\r\n\t\t\t-- when the first block of a file is parsed (this is\r\n\t\t\t--\tnecessary to avoid confusion between the top\r\n\t\t\t--\tlocal declarations and the `module' definition.\r\n\t\t\tif (options.nolocals or first_line) and line:find\"^%s*local\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\treturn line\r\n\t\tend\r\n\tend)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if not util.line_empty(line) then\r\n\t\t\t-- `local' declarations are ignored in two cases:\r\n\t\t\t-- when the `nolocals' option is turned on; and\r\n\t\t\t-- when the first block of a file is parsed (this is\r\n\t\t\t--\tnecessary to avoid confusion between the top\r\n\t\t\t--\tlocal declarations and the `module' definition.\r\n\t\t\tif (options.nolocals or first_line) and line:find\"^%s*local\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\treturn line\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "if (options.nolocals or first_line) and line:find\"^%s*local\" then\r\n\t\t\t\treturn\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "if code ~= nil then\r\n\t\tlocal func_info = check_function(code)\r\n\t\tlocal module_name = check_module(code)\r\n\t\tif func_info then\r\n\t\t\tblock.class = \"function\"\r\n\t\t\tblock.name = func_info.name\r\n\t\t\tblock.param = func_info.param\r\n\t\t\tblock.private = func_info.private\r\n\t\telseif module_name then\r\n\t\t\tblock.class = \"module\"\r\n\t\t\tblock.name = module_name\r\n\t\t\tblock.param = {}\r\n\t\telse\r\n\t\t\tblock.param = {}\r\n\t\tend\r\n\telse\r\n\t\t-- TODO: comment without any code. Does this means we are dealing\r\n\t\t-- with a file comment?\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "local func_info = check_function(code)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local module_name = check_module(code)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if func_info then\r\n\t\t\tblock.class = \"function\"\r\n\t\t\tblock.name = func_info.name\r\n\t\t\tblock.param = func_info.param\r\n\t\t\tblock.private = func_info.private\r\n\t\telseif module_name then\r\n\t\t\tblock.class = \"module\"\r\n\t\t\tblock.name = module_name\r\n\t\t\tblock.param = {}\r\n\t\telse\r\n\t\t\tblock.param = {}\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "block.class = \"function\"",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "block.name = func_info.name",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "block.param = func_info.param",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "block.private = func_info.private",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "block.class = \"module\"",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "block.name = module_name",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "block.param = {}",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local currenttag = \"description\"",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local currenttext",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local ocurrenttext",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local currenttagpostfix",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "table.foreachi(block.comment, function (_, line)\r\n\t\ttline = util.trim_comment(line)\r\n\t\toline = util.no_trim_comment(line)\r\n\r\n\t\tlocal r, _, tag, tagpostfix, text = string.find(tline, \"@([_%w%.]+)(#?)%s+(.*)\")\r\n\t\tif r ~= nil then\r\n\t\t\t-- found new tag, add previous one, and start a new one\r\n\t\t\t-- TODO: what to do with invalid tags? issue an error? or log a warning?\r\n\t\t\ttags.handle(currenttag, block, currenttext)\r\n\r\n\t\t\tcurrenttag = tag\r\n\t\t\tcurrenttext = text\r\n\t\t\tocurrenttext = text\r\n            currenttagpostfix = tagpostfix\r\n\t\telse\r\n\t\t\tcurrenttext = util.concat(currenttext, tline)\r\n\t\t\tocurrenttext = util.no_concat(ocurrenttext, oline)\r\n\t\t\tassert(string.sub(currenttext, 1, 1) ~= \" \", string.format(\"`%s', `%s'\", currenttext, tline))\r\n\t\tend\r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "tline = util.trim_comment(line)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "oline = util.no_trim_comment(line)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "local r, _, tag, tagpostfix, text = string.find(tline, \"@([_%w%.]+)(#?)%s+(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if r ~= nil then\r\n\t\t\t-- found new tag, add previous one, and start a new one\r\n\t\t\t-- TODO: what to do with invalid tags? issue an error? or log a warning?\r\n\t\t\ttags.handle(currenttag, block, currenttext)\r\n\r\n\t\t\tcurrenttag = tag\r\n\t\t\tcurrenttext = text\r\n\t\t\tocurrenttext = text\r\n            currenttagpostfix = tagpostfix\r\n\t\telse\r\n\t\t\tcurrenttext = util.concat(currenttext, tline)\r\n\t\t\tocurrenttext = util.no_concat(ocurrenttext, oline)\r\n\t\t\tassert(string.sub(currenttext, 1, 1) ~= \" \", string.format(\"`%s', `%s'\", currenttext, tline))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "tags.handle(currenttag, block, currenttext)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "currenttag = tag",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "currenttext = text",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "ocurrenttext = text",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "currenttagpostfix = tagpostfix",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "currenttext = util.concat(currenttext, tline)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "ocurrenttext = util.no_concat(ocurrenttext, oline)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "assert(string.sub(currenttext, 1, 1) ~= \" \", string.format(\"`%s', `%s'\", currenttext, tline))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if currenttagpostfix == \"#\" then\r\n        tags.handle(currenttag, block, ocurrenttext)    -- dispatch text with original linebreaks and indentations\r\n    else\r\n        tags.handle(currenttag, block, currenttext)     -- dispatch text with trimmed and concatenated\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "tags.handle(currenttag, block, ocurrenttext)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "block.summary = parse_summary(block.description)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "assert(string.sub(block.description, 1, 1) ~= \" \", string.format(\"`%s'\", block.description))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "local function parse_block (f, line, modulename, first)\r\n\tlocal block = {\r\n\t\tcomment = {},\r\n\t\tcode = {},\r\n\t}\r\n\r\n\twhile line ~= nil do\r\n\t\tif string.find(line, \"^[\\t ]*%-%-\") == nil then\r\n\t\t\t-- reached end of comment, read the code below it\r\n\t\t\t-- TODO: allow empty lines\r\n\t\t\tline, block.code, modulename = parse_code(f, line, modulename)\r\n\r\n\t\t\t-- parse information in block comment\r\n\t\t\tblock = parse_comment(block, first)\r\n\r\n\t\t\treturn line, block, modulename\r\n\t\telse\r\n\t\t\ttable.insert(block.comment, line)\r\n\t\t\tline = f:read()\r\n\t\tend\r\n\tend\r\n\t-- reached end of file\r\n\r\n\t-- parse information in block comment\r\n\tblock = parse_comment(block, first)\r\n\r\n\treturn line, block, modulename\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local block = {\r\n\t\tcomment = {},\r\n\t\tcode = {},\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "while line ~= nil do\r\n\t\tif string.find(line, \"^[\\t ]*%-%-\") == nil then\r\n\t\t\t-- reached end of comment, read the code below it\r\n\t\t\t-- TODO: allow empty lines\r\n\t\t\tline, block.code, modulename = parse_code(f, line, modulename)\r\n\r\n\t\t\t-- parse information in block comment\r\n\t\t\tblock = parse_comment(block, first)\r\n\r\n\t\t\treturn line, block, modulename\r\n\t\telse\r\n\t\t\ttable.insert(block.comment, line)\r\n\t\t\tline = f:read()\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 81,
    "text": "if string.find(line, \"^[\\t ]*%-%-\") == nil then\r\n\t\t\t-- reached end of comment, read the code below it\r\n\t\t\t-- TODO: allow empty lines\r\n\t\t\tline, block.code, modulename = parse_code(f, line, modulename)\r\n\r\n\t\t\t-- parse information in block comment\r\n\t\t\tblock = parse_comment(block, first)\r\n\r\n\t\t\treturn line, block, modulename\r\n\t\telse\r\n\t\t\ttable.insert(block.comment, line)\r\n\t\t\tline = f:read()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "line, block.code, modulename = parse_code(f, line, modulename)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "block = parse_comment(block, first)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "table.insert(block.comment, line)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function parse_file (filepath, doc)\r\n\tlocal blocks = {}\r\n\tlocal modulename = nil\r\n\r\n\t-- read each line\r\n\tlocal f = io.open(filepath, \"r\")\r\n\tlocal i = 1\r\n\tlocal line = f:read()\r\n\tlocal first = true\r\n\twhile line ~= nil do\r\n\t\tif string.find(line, \"^[\\t ]*%-%-%-\") then\r\n\t\t\t-- reached a luadoc block\r\n\t\t\tlocal block\r\n\t\t\tline, block, modulename = parse_block(f, line, modulename, first)\r\n\t\t\ttable.insert(blocks, block)\r\n\t\telse\r\n\t\t\t-- look for a module definition\r\n\t\t\tmodulename = check_module(line, modulename)\r\n\r\n\t\t\t-- TODO: keep beginning of file somewhere\r\n\r\n\t\t\tline = f:read()\r\n\t\tend\r\n\t\tfirst = false\r\n\t\ti = i + 1\r\n\tend\r\n\tf:close()\r\n\t-- store blocks in file hierarchy\r\n\tassert(doc.files[filepath] == nil, string.format(\"doc for file `%s' already defined\", filepath))\r\n\ttable.insert(doc.files, filepath)\r\n\tdoc.files[filepath] = {\r\n\t\ttype = \"file\",\r\n\t\tname = filepath,\r\n\t\tdoc = blocks,\r\n--\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\ttables = class_iterator(blocks, \"table\"),\r\n\t}\r\n--\r\n\tlocal first = doc.files[filepath].doc[1]\r\n\tif first and modulename then\r\n\t\tdoc.files[filepath].author = first.author\r\n\t\tdoc.files[filepath].copyright = first.copyright\r\n\t\tdoc.files[filepath].description = first.description\r\n\t\tdoc.files[filepath].release = first.release\r\n\t\tdoc.files[filepath].summary = first.summary\r\n\tend\r\n\r\n\t-- if module definition is found, store in module hierarchy\r\n\tif modulename ~= nil then\r\n\t\tif modulename == \"...\" then\r\n\t\t\t\tmodulename = string.gsub (filepath, \"%.lua$\", \"\")\r\n\t\t\t\tmodulename = string.gsub (modulename, \"/\", \".\")\r\n\t\tend\r\n\t\tif doc.modules[modulename] ~= nil then\r\n\t\t\t-- module is already defined, just add the blocks\r\n\t\t\ttable.foreachi(blocks, function (_, v)\r\n\t\t\t\ttable.insert(doc.modules[modulename].doc, v)\r\n\t\t\tend)\r\n\t\telse\r\n\t\t\t-- TODO: put this in a different module\r\n\t\t\ttable.insert(doc.modules, modulename)\r\n\t\t\tdoc.modules[modulename] = {\r\n\t\t\t\ttype = \"module\",\r\n\t\t\t\tname = modulename,\r\n\t\t\t\tdoc = blocks,\r\n--\t\t\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\t\t\ttables = class_iterator(blocks, \"table\"),\r\n\t\t\t\tauthor = first and first.author,\r\n\t\t\t\tcopyright = first and first.copyright,\r\n\t\t\t\tdescription = \"\",\r\n\t\t\t\trelease = first and first.release,\r\n\t\t\t\tsummary = \"\",\r\n\t\t\t}\r\n\r\n\t\t\t-- find module description\r\n\t\t\tfor m in class_iterator(blocks, \"module\")() do\r\n\t\t\t\tdoc.modules[modulename].description = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].description,\r\n\t\t\t\t\tm.description)\r\n\t\t\t\tdoc.modules[modulename].summary = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].summary,\r\n\t\t\t\t\tm.summary)\r\n\t\t\t\tif m.author then\r\n\t\t\t\t\tdoc.modules[modulename].author = m.author\r\n\t\t\t\tend\r\n\t\t\t\tif m.copyright then\r\n\t\t\t\t\tdoc.modules[modulename].copyright = m.copyright\r\n\t\t\t\tend\r\n\t\t\t\tif m.release then\r\n\t\t\t\t\tdoc.modules[modulename].release = m.release\r\n\t\t\t\tend\r\n\t\t\t\tif m.name then\r\n\t\t\t\t\tdoc.modules[modulename].name = m.name\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tdoc.modules[modulename].description = doc.modules[modulename].description or (first and first.description) or \"\"\r\n\t\t\tdoc.modules[modulename].summary = doc.modules[modulename].summary or (first and first.summary) or \"\"\r\n\t\tend\r\n\r\n\t\t-- make functions table\r\n\t\tdoc.modules[modulename].functions = {}\r\n\t\tfor f in class_iterator(blocks, \"function\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].functions, f.name)\r\n\t\t\tdoc.modules[modulename].functions[f.name] = f\r\n\t\tend\r\n\r\n\t\t-- make tables table\r\n\t\tdoc.modules[modulename].tables = {}\r\n\t\tfor t in class_iterator(blocks, \"table\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].tables, t.name)\r\n\t\t\tdoc.modules[modulename].tables[t.name] = t\r\n\t\tend\r\n\tend\r\n\r\n\t-- make functions table\r\n\tdoc.files[filepath].functions = {}\r\n\tfor f in class_iterator(blocks, \"function\")() do\r\n\t\ttable.insert(doc.files[filepath].functions, f.name)\r\n\t\tdoc.files[filepath].functions[f.name] = f\r\n\tend\r\n\r\n\t-- make tables table\r\n\tdoc.files[filepath].tables = {}\r\n\tfor t in class_iterator(blocks, \"table\")() do\r\n\t\ttable.insert(doc.files[filepath].tables, t.name)\r\n\t\tdoc.files[filepath].tables[t.name] = t\r\n\tend\r\n\r\n\treturn doc\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local blocks = {}",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local modulename = nil",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local f = io.open(filepath, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local line = f:read()",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local first = true",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "while line ~= nil do\r\n\t\tif string.find(line, \"^[\\t ]*%-%-%-\") then\r\n\t\t\t-- reached a luadoc block\r\n\t\t\tlocal block\r\n\t\t\tline, block, modulename = parse_block(f, line, modulename, first)\r\n\t\t\ttable.insert(blocks, block)\r\n\t\telse\r\n\t\t\t-- look for a module definition\r\n\t\t\tmodulename = check_module(line, modulename)\r\n\r\n\t\t\t-- TODO: keep beginning of file somewhere\r\n\r\n\t\t\tline = f:read()\r\n\t\tend\r\n\t\tfirst = false\r\n\t\ti = i + 1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 93,
    "text": "if string.find(line, \"^[\\t ]*%-%-%-\") then\r\n\t\t\t-- reached a luadoc block\r\n\t\t\tlocal block\r\n\t\t\tline, block, modulename = parse_block(f, line, modulename, first)\r\n\t\t\ttable.insert(blocks, block)\r\n\t\telse\r\n\t\t\t-- look for a module definition\r\n\t\t\tmodulename = check_module(line, modulename)\r\n\r\n\t\t\t-- TODO: keep beginning of file somewhere\r\n\r\n\t\t\tline = f:read()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "local block",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "line, block, modulename = parse_block(f, line, modulename, first)",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "table.insert(blocks, block)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "first = false",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert(doc.files[filepath] == nil, string.format(\"doc for file `%s' already defined\", filepath))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "table.insert(doc.files, filepath)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "doc.files[filepath] = {\r\n\t\ttype = \"file\",\r\n\t\tname = filepath,\r\n\t\tdoc = blocks,\r\n--\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\ttables = class_iterator(blocks, \"table\"),\r\n\t}",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "local first = doc.files[filepath].doc[1]",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if first and modulename then\r\n\t\tdoc.files[filepath].author = first.author\r\n\t\tdoc.files[filepath].copyright = first.copyright\r\n\t\tdoc.files[filepath].description = first.description\r\n\t\tdoc.files[filepath].release = first.release\r\n\t\tdoc.files[filepath].summary = first.summary\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "doc.files[filepath].author = first.author",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "doc.files[filepath].copyright = first.copyright",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "doc.files[filepath].description = first.description",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "doc.files[filepath].release = first.release",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "doc.files[filepath].summary = first.summary",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if modulename ~= nil then\r\n\t\tif modulename == \"...\" then\r\n\t\t\t\tmodulename = string.gsub (filepath, \"%.lua$\", \"\")\r\n\t\t\t\tmodulename = string.gsub (modulename, \"/\", \".\")\r\n\t\tend\r\n\t\tif doc.modules[modulename] ~= nil then\r\n\t\t\t-- module is already defined, just add the blocks\r\n\t\t\ttable.foreachi(blocks, function (_, v)\r\n\t\t\t\ttable.insert(doc.modules[modulename].doc, v)\r\n\t\t\tend)\r\n\t\telse\r\n\t\t\t-- TODO: put this in a different module\r\n\t\t\ttable.insert(doc.modules, modulename)\r\n\t\t\tdoc.modules[modulename] = {\r\n\t\t\t\ttype = \"module\",\r\n\t\t\t\tname = modulename,\r\n\t\t\t\tdoc = blocks,\r\n--\t\t\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\t\t\ttables = class_iterator(blocks, \"table\"),\r\n\t\t\t\tauthor = first and first.author,\r\n\t\t\t\tcopyright = first and first.copyright,\r\n\t\t\t\tdescription = \"\",\r\n\t\t\t\trelease = first and first.release,\r\n\t\t\t\tsummary = \"\",\r\n\t\t\t}\r\n\r\n\t\t\t-- find module description\r\n\t\t\tfor m in class_iterator(blocks, \"module\")() do\r\n\t\t\t\tdoc.modules[modulename].description = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].description,\r\n\t\t\t\t\tm.description)\r\n\t\t\t\tdoc.modules[modulename].summary = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].summary,\r\n\t\t\t\t\tm.summary)\r\n\t\t\t\tif m.author then\r\n\t\t\t\t\tdoc.modules[modulename].author = m.author\r\n\t\t\t\tend\r\n\t\t\t\tif m.copyright then\r\n\t\t\t\t\tdoc.modules[modulename].copyright = m.copyright\r\n\t\t\t\tend\r\n\t\t\t\tif m.release then\r\n\t\t\t\t\tdoc.modules[modulename].release = m.release\r\n\t\t\t\tend\r\n\t\t\t\tif m.name then\r\n\t\t\t\t\tdoc.modules[modulename].name = m.name\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tdoc.modules[modulename].description = doc.modules[modulename].description or (first and first.description) or \"\"\r\n\t\t\tdoc.modules[modulename].summary = doc.modules[modulename].summary or (first and first.summary) or \"\"\r\n\t\tend\r\n\r\n\t\t-- make functions table\r\n\t\tdoc.modules[modulename].functions = {}\r\n\t\tfor f in class_iterator(blocks, \"function\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].functions, f.name)\r\n\t\t\tdoc.modules[modulename].functions[f.name] = f\r\n\t\tend\r\n\r\n\t\t-- make tables table\r\n\t\tdoc.modules[modulename].tables = {}\r\n\t\tfor t in class_iterator(blocks, \"table\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].tables, t.name)\r\n\t\t\tdoc.modules[modulename].tables[t.name] = t\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "if modulename == \"...\" then\r\n\t\t\t\tmodulename = string.gsub (filepath, \"%.lua$\", \"\")\r\n\t\t\t\tmodulename = string.gsub (modulename, \"/\", \".\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "modulename = string.gsub (filepath, \"%.lua$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "modulename = string.gsub (modulename, \"/\", \".\")",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if doc.modules[modulename] ~= nil then\r\n\t\t\t-- module is already defined, just add the blocks\r\n\t\t\ttable.foreachi(blocks, function (_, v)\r\n\t\t\t\ttable.insert(doc.modules[modulename].doc, v)\r\n\t\t\tend)\r\n\t\telse\r\n\t\t\t-- TODO: put this in a different module\r\n\t\t\ttable.insert(doc.modules, modulename)\r\n\t\t\tdoc.modules[modulename] = {\r\n\t\t\t\ttype = \"module\",\r\n\t\t\t\tname = modulename,\r\n\t\t\t\tdoc = blocks,\r\n--\t\t\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\t\t\ttables = class_iterator(blocks, \"table\"),\r\n\t\t\t\tauthor = first and first.author,\r\n\t\t\t\tcopyright = first and first.copyright,\r\n\t\t\t\tdescription = \"\",\r\n\t\t\t\trelease = first and first.release,\r\n\t\t\t\tsummary = \"\",\r\n\t\t\t}\r\n\r\n\t\t\t-- find module description\r\n\t\t\tfor m in class_iterator(blocks, \"module\")() do\r\n\t\t\t\tdoc.modules[modulename].description = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].description,\r\n\t\t\t\t\tm.description)\r\n\t\t\t\tdoc.modules[modulename].summary = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].summary,\r\n\t\t\t\t\tm.summary)\r\n\t\t\t\tif m.author then\r\n\t\t\t\t\tdoc.modules[modulename].author = m.author\r\n\t\t\t\tend\r\n\t\t\t\tif m.copyright then\r\n\t\t\t\t\tdoc.modules[modulename].copyright = m.copyright\r\n\t\t\t\tend\r\n\t\t\t\tif m.release then\r\n\t\t\t\t\tdoc.modules[modulename].release = m.release\r\n\t\t\t\tend\r\n\t\t\t\tif m.name then\r\n\t\t\t\t\tdoc.modules[modulename].name = m.name\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tdoc.modules[modulename].description = doc.modules[modulename].description or (first and first.description) or \"\"\r\n\t\t\tdoc.modules[modulename].summary = doc.modules[modulename].summary or (first and first.summary) or \"\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "table.foreachi(blocks, function (_, v)\r\n\t\t\t\ttable.insert(doc.modules[modulename].doc, v)\r\n\t\t\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "table.insert(doc.modules[modulename].doc, v)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "table.insert(doc.modules, modulename)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "doc.modules[modulename] = {\r\n\t\t\t\ttype = \"module\",\r\n\t\t\t\tname = modulename,\r\n\t\t\t\tdoc = blocks,\r\n--\t\t\t\tfunctions = class_iterator(blocks, \"function\"),\r\n--\t\t\t\ttables = class_iterator(blocks, \"table\"),\r\n\t\t\t\tauthor = first and first.author,\r\n\t\t\t\tcopyright = first and first.copyright,\r\n\t\t\t\tdescription = \"\",\r\n\t\t\t\trelease = first and first.release,\r\n\t\t\t\tsummary = \"\",\r\n\t\t\t}",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "for m in class_iterator(blocks, \"module\")() do\r\n\t\t\t\tdoc.modules[modulename].description = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].description,\r\n\t\t\t\t\tm.description)\r\n\t\t\t\tdoc.modules[modulename].summary = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].summary,\r\n\t\t\t\t\tm.summary)\r\n\t\t\t\tif m.author then\r\n\t\t\t\t\tdoc.modules[modulename].author = m.author\r\n\t\t\t\tend\r\n\t\t\t\tif m.copyright then\r\n\t\t\t\t\tdoc.modules[modulename].copyright = m.copyright\r\n\t\t\t\tend\r\n\t\t\t\tif m.release then\r\n\t\t\t\t\tdoc.modules[modulename].release = m.release\r\n\t\t\t\tend\r\n\t\t\t\tif m.name then\r\n\t\t\t\t\tdoc.modules[modulename].name = m.name\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 119,
    "text": "doc.modules[modulename].description = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].description,\r\n\t\t\t\t\tm.description)",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "doc.modules[modulename].summary = util.concat(\r\n\t\t\t\t\tdoc.modules[modulename].summary,\r\n\t\t\t\t\tm.summary)",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "if m.author then\r\n\t\t\t\t\tdoc.modules[modulename].author = m.author\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "doc.modules[modulename].author = m.author",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "if m.copyright then\r\n\t\t\t\t\tdoc.modules[modulename].copyright = m.copyright\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "doc.modules[modulename].copyright = m.copyright",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if m.release then\r\n\t\t\t\t\tdoc.modules[modulename].release = m.release\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "doc.modules[modulename].release = m.release",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if m.name then\r\n\t\t\t\t\tdoc.modules[modulename].name = m.name\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "doc.modules[modulename].name = m.name",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "doc.modules[modulename].description = doc.modules[modulename].description or (first and first.description) or \"\"",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "doc.modules[modulename].summary = doc.modules[modulename].summary or (first and first.summary) or \"\"",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "doc.modules[modulename].functions = {}",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "for f in class_iterator(blocks, \"function\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].functions, f.name)\r\n\t\t\tdoc.modules[modulename].functions[f.name] = f\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 133,
    "text": "table.insert(doc.modules[modulename].functions, f.name)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "doc.modules[modulename].functions[f.name] = f",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "doc.modules[modulename].tables = {}",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "for t in class_iterator(blocks, \"table\")() do\r\n\t\t\ttable.insert(doc.modules[modulename].tables, t.name)\r\n\t\t\tdoc.modules[modulename].tables[t.name] = t\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 137,
    "text": "table.insert(doc.modules[modulename].tables, t.name)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "doc.modules[modulename].tables[t.name] = t",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "doc.files[filepath].functions = {}",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "for f in class_iterator(blocks, \"function\")() do\r\n\t\ttable.insert(doc.files[filepath].functions, f.name)\r\n\t\tdoc.files[filepath].functions[f.name] = f\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 141,
    "text": "table.insert(doc.files[filepath].functions, f.name)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "doc.files[filepath].functions[f.name] = f",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "doc.files[filepath].tables = {}",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "for t in class_iterator(blocks, \"table\")() do\r\n\t\ttable.insert(doc.files[filepath].tables, t.name)\r\n\t\tdoc.files[filepath].tables[t.name] = t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 145,
    "text": "table.insert(doc.files[filepath].tables, t.name)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "doc.files[filepath].tables[t.name] = t",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function file (filepath, doc)\r\n\tlocal patterns = { \"%.lua$\", \"%.luadoc$\" }\r\n\tlocal valid = table.foreachi(patterns, function (_, pattern)\r\n\t\tif string.find(filepath, pattern) ~= nil then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend)\r\n\r\n\tif valid then\r\n\t\tlogger:info(string.format(\"processing file `%s'\", filepath))\r\n\t\tdoc = parse_file(filepath, doc)\r\n\tend\r\n\r\n\treturn doc\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "local patterns = { \"%.lua$\", \"%.luadoc$\" }",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "local valid = table.foreachi(patterns, function (_, pattern)\r\n\t\tif string.find(filepath, pattern) ~= nil then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend)",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "if string.find(filepath, pattern) ~= nil then\r\n\t\t\treturn true\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "if valid then\r\n\t\tlogger:info(string.format(\"processing file `%s'\", filepath))\r\n\t\tdoc = parse_file(filepath, doc)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "logger:info(string.format(\"processing file `%s'\", filepath))",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "doc = parse_file(filepath, doc)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function directory (path, doc)\r\n\tfor f in lfs.dir(path) do\r\n\t\tlocal fullpath = path .. \"/\" .. f\r\n\t\tlocal attr = lfs.attributes(fullpath)\r\n\t\tassert(attr, string.format(\"error stating file `%s'\", fullpath))\r\n\r\n\t\tif attr.mode == \"file\" then\r\n\t\t\tdoc = file(fullpath, doc)\r\n\t\telseif attr.mode == \"directory\" and f ~= \".\" and f ~= \"..\" then\r\n\t\t\tdoc = directory(fullpath, doc)\r\n\t\tend\r\n\tend\r\n\treturn doc\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "for f in lfs.dir(path) do\r\n\t\tlocal fullpath = path .. \"/\" .. f\r\n\t\tlocal attr = lfs.attributes(fullpath)\r\n\t\tassert(attr, string.format(\"error stating file `%s'\", fullpath))\r\n\r\n\t\tif attr.mode == \"file\" then\r\n\t\t\tdoc = file(fullpath, doc)\r\n\t\telseif attr.mode == \"directory\" and f ~= \".\" and f ~= \"..\" then\r\n\t\t\tdoc = directory(fullpath, doc)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 158,
    "text": "local fullpath = path .. \"/\" .. f",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local attr = lfs.attributes(fullpath)",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "assert(attr, string.format(\"error stating file `%s'\", fullpath))",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "if attr.mode == \"file\" then\r\n\t\t\tdoc = file(fullpath, doc)\r\n\t\telseif attr.mode == \"directory\" and f ~= \".\" and f ~= \"..\" then\r\n\t\t\tdoc = directory(fullpath, doc)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "doc = file(fullpath, doc)",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "doc = directory(fullpath, doc)",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "local function recsort (tab)\r\n\ttable.sort (tab)\r\n\t-- sort list of functions by name alphabetically\r\n\tfor f, doc in pairs(tab) do\r\n\t\tif doc.functions then\r\n\t\t\ttable.sort(doc.functions)\r\n\t\tend\r\n\t\tif doc.tables then\r\n\t\t\ttable.sort(doc.tables)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "table.sort (tab)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "for f, doc in pairs(tab) do\r\n\t\tif doc.functions then\r\n\t\t\ttable.sort(doc.functions)\r\n\t\tend\r\n\t\tif doc.tables then\r\n\t\t\ttable.sort(doc.tables)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 168,
    "text": "if doc.functions then\r\n\t\t\ttable.sort(doc.functions)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "table.sort(doc.functions)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "if doc.tables then\r\n\t\t\ttable.sort(doc.tables)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "table.sort(doc.tables)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function start (files, doc)\r\n\tassert(files, \"file list not specified\")\r\n\r\n\t-- Create an empty document, or use the given one\r\n\tdoc = doc or {\r\n\t\tfiles = {},\r\n\t\tmodules = {},\r\n\t}\r\n\tassert(doc.files, \"undefined `files' field\")\r\n\tassert(doc.modules, \"undefined `modules' field\")\r\n\r\n\ttable.foreachi(files, function (_, path)\r\n\t\tlocal attr = lfs.attributes(path)\r\n\t\tassert(attr, string.format(\"error stating path `%s'\", path))\r\n\r\n\t\tif attr.mode == \"file\" then\r\n\t\t\tdoc = file(path, doc)\r\n\t\telseif attr.mode == \"directory\" then\r\n\t\t\tdoc = directory(path, doc)\r\n\t\tend\r\n\tend)\r\n\r\n\t-- order arrays alphabetically\r\n\trecsort(doc.files)\r\n\trecsort(doc.modules)\r\n\r\n\treturn doc\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "assert(files, \"file list not specified\")",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "doc = doc or {\r\n\t\tfiles = {},\r\n\t\tmodules = {},\r\n\t}",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "assert(doc.files, \"undefined `files' field\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "assert(doc.modules, \"undefined `modules' field\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "table.foreachi(files, function (_, path)\r\n\t\tlocal attr = lfs.attributes(path)\r\n\t\tassert(attr, string.format(\"error stating path `%s'\", path))\r\n\r\n\t\tif attr.mode == \"file\" then\r\n\t\t\tdoc = file(path, doc)\r\n\t\telseif attr.mode == \"directory\" then\r\n\t\t\tdoc = directory(path, doc)\r\n\t\tend\r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "local attr = lfs.attributes(path)",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "assert(attr, string.format(\"error stating path `%s'\", path))",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "if attr.mode == \"file\" then\r\n\t\t\tdoc = file(path, doc)\r\n\t\telseif attr.mode == \"directory\" then\r\n\t\t\tdoc = directory(path, doc)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "doc = file(path, doc)",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "doc = directory(path, doc)",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "recsort(doc.files)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "recsort(doc.modules)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function ()\r\n\t\t\twhile t[i] and t[i].class ~= class do\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\tlocal v = t[i]\r\n\t\t\ti = i + 1\r\n\t\t\treturn v\r\n\t\tend",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function ()\r\n\t\tlocal i = 1\r\n\t\treturn function ()\r\n\t\t\twhile t[i] and t[i].class ~= class do\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\t\tlocal v = t[i]\r\n\t\t\ti = i + 1\r\n\t\t\treturn v\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function (_, pattern)\r\n\t\tlocal r, _, l, id, param = string.find(line, pattern)\r\n\t\tif r ~= nil then\r\n\t\t\treturn {\r\n\t\t\t\tname = id,\r\n\t\t\t\tprivate = (l == \"local\"),\r\n\t\t\t\tparam = util.split(\"%s*,%s*\", param),\r\n\t\t\t}\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function(_, line)\r\n\t\tif not util.line_empty(line) then\r\n\t\t\t-- `local' declarations are ignored in two cases:\r\n\t\t\t-- when the `nolocals' option is turned on; and\r\n\t\t\t-- when the first block of a file is parsed (this is\r\n\t\t\t--\tnecessary to avoid confusion between the top\r\n\t\t\t--\tlocal declarations and the `module' definition.\r\n\t\t\tif (options.nolocals or first_line) and line:find\"^%s*local\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\treturn line\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function (_, line)\r\n\t\ttline = util.trim_comment(line)\r\n\t\toline = util.no_trim_comment(line)\r\n\r\n\t\tlocal r, _, tag, tagpostfix, text = string.find(tline, \"@([_%w%.]+)(#?)%s+(.*)\")\r\n\t\tif r ~= nil then\r\n\t\t\t-- found new tag, add previous one, and start a new one\r\n\t\t\t-- TODO: what to do with invalid tags? issue an error? or log a warning?\r\n\t\t\ttags.handle(currenttag, block, currenttext)\r\n\r\n\t\t\tcurrenttag = tag\r\n\t\t\tcurrenttext = text\r\n\t\t\tocurrenttext = text\r\n            currenttagpostfix = tagpostfix\r\n\t\telse\r\n\t\t\tcurrenttext = util.concat(currenttext, tline)\r\n\t\t\tocurrenttext = util.no_concat(ocurrenttext, oline)\r\n\t\t\tassert(string.sub(currenttext, 1, 1) ~= \" \", string.format(\"`%s', `%s'\", currenttext, tline))\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function (_, v)\r\n\t\t\t\ttable.insert(doc.modules[modulename].doc, v)\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function (_, pattern)\r\n\t\tif string.find(filepath, pattern) ~= nil then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function (_, path)\r\n\t\tlocal attr = lfs.attributes(path)\r\n\t\tassert(attr, string.format(\"error stating path `%s'\", path))\r\n\r\n\t\tif attr.mode == \"file\" then\r\n\t\t\tdoc = file(path, doc)\r\n\t\telseif attr.mode == \"directory\" then\r\n\t\t\tdoc = directory(path, doc)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "",
    "type": "function container"
  }, {
    "id": 204,
    "text": "function trim (s)\r\n\treturn (string.gsub(s, \"^%s*(.-)%s*$\", \"%1\"))\r\nend",
    "type": "function"
  }, {
    "id": 205,
    "text": "function trim_comment (s)\r\n\ts = string.gsub(s, \"%-%-+(.*)$\", \"%1\")\r\n\treturn trim(s)\r\nend",
    "type": "function"
  }, {
    "id": 206,
    "text": "function line_empty (line)\r\n\treturn (string.len(trim(line)) == 0)\r\nend",
    "type": "function"
  }, {
    "id": 207,
    "text": "function concat (str1, str2)\r\n\tif str1 == nil or string.len(str1) == 0 then\r\n\t\treturn str2\r\n\telse\r\n\t\treturn str1 .. \" \" .. str2\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "function split(delim, text)\r\n\tlocal list = {}\r\n\tif string.len(text) > 0 then\r\n\t\tdelim = delim or \"\"\r\n\t\tlocal pos = 1\r\n\t\t-- if delim matches empty string then it would give an endless loop\r\n\t\tif string.find(\"\", delim, 1) and delim ~= \"\" then\r\n\t\t\terror(\"delim matches empty string!\")\r\n\t\tend\r\n\t\tlocal first, last\r\n\t\twhile 1 do\r\n\t\t\tif delim ~= \"\" then\r\n\t\t\t\tfirst, last = string.find(text, delim, pos)\r\n\t\t\telse\r\n\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tif first == 1 then\r\n\t\t\t\t\tpos = last+1\r\n\t\t\t\t\tfirst, last = string.find(text, \"%s+\", pos)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn list\r\nend",
    "type": "function"
  }, {
    "id": 209,
    "text": "function no_trim_comment (s)\r\n\ts = string.gsub(trim(s), \"%-%-+ (.*)$\", \"%1\")\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "function no_concat (str1, str2)\r\n\tif str1 == nil or string.len(str1) == 0 then\r\n\t\treturn str2\r\n\telse\r\n\t\treturn str1 .. \"\\n\" .. str2\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "string",
    "type": "module"
  }, {
    "id": 212,
    "text": "find",
    "type": "global function"
  }, {
    "id": 213,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 214,
    "text": "io",
    "type": "module"
  }, {
    "id": 215,
    "text": "open",
    "type": "global function"
  }, {
    "id": 216,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 217,
    "text": "table",
    "type": "module"
  }, {
    "id": 218,
    "text": "foreachi",
    "type": "global function"
  }, {
    "id": 219,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 220,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 221,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 222,
    "text": "format",
    "type": "global function"
  }, {
    "id": 223,
    "text": "match",
    "type": "global function"
  }, {
    "id": 224,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 225,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 226,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 227,
    "text": "module",
    "type": "global function"
  }, {
    "id": 228,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 229,
    "text": "require",
    "type": "global function"
  }, {
    "id": 230,
    "text": "",
    "type": "variable container"
  }, {
    "id": 231,
    "text": "",
    "type": "require container"
  }, {
    "id": 232,
    "text": "",
    "type": "local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 234,
    "text": "",
    "type": "local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 236,
    "text": "",
    "type": "local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "n/a"
  }, {
    "id": 238,
    "text": "",
    "type": "local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "n/a"
  }, {
    "id": 240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "string"
  }, {
    "id": 242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "string"
  }, {
    "id": 244,
    "text": "",
    "type": "local variable"
  }, {
    "id": 245,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 246,
    "text": "",
    "type": "string"
  }, {
    "id": 247,
    "text": "",
    "type": "string"
  }, {
    "id": 248,
    "text": "",
    "type": "string"
  }, {
    "id": 249,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 250,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 251,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "require local variable"
  } ]
}