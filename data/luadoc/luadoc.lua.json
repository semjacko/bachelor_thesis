{
  "_filename": "luadoc.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadoc/src/luadoc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 16,
    "label": "has",
    "to": 27
  }, {
    "from": 12,
    "label": "has",
    "to": 28
  }, {
    "from": 12,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 28
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 37
  }, {
    "from": 42,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 28
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 28
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 28
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 12,
    "label": "calls",
    "to": 56
  }, {
    "from": 3,
    "label": "calls",
    "to": 54
  }, {
    "from": 12,
    "label": "calls",
    "to": 53
  }, {
    "from": 3,
    "label": "calls",
    "to": 57
  }, {
    "from": 6,
    "label": "calls",
    "to": 57
  }, {
    "from": 30,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 30
  }, {
    "from": 12,
    "label": "calls",
    "to": 52
  }, {
    "from": 51,
    "label": "calls",
    "to": 30
  }, {
    "from": 51,
    "label": "calls",
    "to": 58
  }, {
    "from": 12,
    "label": "calls",
    "to": 58
  }, {
    "from": 51,
    "label": "calls",
    "to": 55
  }, {
    "from": 51,
    "label": "calls",
    "to": 55
  }, {
    "from": 12,
    "label": "calls",
    "to": 55
  }, {
    "from": 12,
    "label": "calls",
    "to": 55
  }, {
    "from": 12,
    "label": "calls",
    "to": 55
  }, {
    "from": 30,
    "label": "calls",
    "to": 12
  }, {
    "from": 2,
    "label": "contains",
    "to": 51
  }, {
    "from": 51,
    "label": "declares",
    "to": 3
  }, {
    "from": 51,
    "label": "declares",
    "to": 6
  }, {
    "from": 51,
    "label": "declares",
    "to": 9
  }, {
    "from": 51,
    "label": "declares",
    "to": 12
  }, {
    "from": 51,
    "label": "declares",
    "to": 30
  }, {
    "from": 51,
    "label": "declares",
    "to": 36
  }, {
    "from": 51,
    "label": "declares",
    "to": 42
  }, {
    "from": 51,
    "label": "declares",
    "to": 45
  }, {
    "from": 51,
    "label": "declares",
    "to": 48
  }, {
    "from": 59,
    "label": "requires",
    "to": 2
  }, {
    "from": 61,
    "label": "requires",
    "to": 2
  }, {
    "from": 62,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 63
  }, {
    "from": 2,
    "label": "contains",
    "to": 64
  }, {
    "from": 64,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "requires",
    "to": 1
  }, {
    "from": 64,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "config",
    "type": "module"
  }, {
    "id": 2,
    "text": "luadoc",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function print_version ()\r\n\tprint (string.format(\"%s\\n%s\\n%s\", \r\n\t\tluadoc._VERSION, \r\n\t\tluadoc._DESCRIPTION, \r\n\t\tluadoc._COPYRIGHT))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "print (string.format(\"%s\\n%s\\n%s\", \r\n\t\tluadoc._VERSION, \r\n\t\tluadoc._DESCRIPTION, \r\n\t\tluadoc._COPYRIGHT))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function print_help ()\r\n\tprint (\"Usage: \"..arg[0]..[[ [options|files]\r\nGenerate documentation from files. Available options are:\r\n  -d path                      output directory path\r\n  -t path                      template directory path\r\n  -h, --help                   print this help and exit\r\n      --noindexpage            do not generate global index page\r\n      --nofiles                do not generate documentation for files\r\n      --nomodules              do not generate documentation for modules\r\n      --doclet doclet_module   doclet module to generate output\r\n      --taglet taglet_module   taglet module to parse input code\r\n  -q, --quiet                  suppress all normal output\r\n  -v, --version                print version information]])\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "print (\"Usage: \"..arg[0]..[[ [options|files]\r\nGenerate documentation from files. Available options are:\r\n  -d path                      output directory path\r\n  -t path                      template directory path\r\n  -h, --help                   print this help and exit\r\n      --noindexpage            do not generate global index page\r\n      --nofiles                do not generate documentation for files\r\n      --nomodules              do not generate documentation for modules\r\n      --doclet doclet_module   doclet module to generate output\r\n      --taglet taglet_module   taglet module to parse input code\r\n  -q, --quiet                  suppress all normal output\r\n  -v, --version                print version information]])",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function off_messages (arg, i, options)\r\n\toptions.verbose = nil\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "options.verbose = nil",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function process_options (arg)\r\n\tlocal files = {}\r\n\tlocal options = require \"luadoc.config\"\r\n\tlocal i = 1\r\n\twhile i <= #arg do\r\n\t\tlocal argi = arg[i]\r\n\t\tif string.sub (argi, 1, 1) ~= '-' then\r\n\t\t\ttable.insert (files, argi)\r\n\t\telse\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend\r\n\t\tend\r\n\t\ti = i+1\r\n\tend\r\n\treturn files, options\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local files = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local options = require \"luadoc.config\"",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "while i <= #arg do\r\n\t\tlocal argi = arg[i]\r\n\t\tif string.sub (argi, 1, 1) ~= '-' then\r\n\t\t\ttable.insert (files, argi)\r\n\t\telse\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend\r\n\t\tend\r\n\t\ti = i+1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 17,
    "text": "local argi = arg[i]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if string.sub (argi, 1, 1) ~= '-' then\r\n\t\t\ttable.insert (files, argi)\r\n\t\telse\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "table.insert (files, argi)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local opt = string.sub (argi, 2)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "opt = string.gsub (opt, \"%-\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\toptions[opt] = 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "if OPTIONS[opt] (arg, i, options) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "options[opt] = 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function main (arg)\r\n\t-- Process options\r\n\tlocal argc = #arg\r\n\tif argc < 1 then\r\n\t\tprint_help ()\r\n\t\treturn\r\n\tend\r\n\tlocal files, options = process_options (arg)\r\n\treturn luadoc.main(files, options)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local argc = #arg",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if argc < 1 then\r\n\t\tprint_help ()\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "print_help ()",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local files, options = process_options (arg)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function (arg, i, options)\r\n\t\tlocal dir = arg[i+1]\r\n\t\tif string.sub (dir, -2) ~= \"/\" then\r\n\t\t\tdir = dir..'/'\r\n\t\tend\r\n\t\toptions.output_dir = dir\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local dir = arg[i+1]",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if string.sub (dir, -2) ~= \"/\" then\r\n\t\t\tdir = dir..'/'\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "dir = dir..'/'",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "options.output_dir = dir",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function (arg, i, options)\r\n\t\tlocal dir = arg[i+1]\r\n\t\tif string.sub (dir, -2) ~= \"/\" then\r\n\t\t\tdir = dir..'/'\r\n\t\tend\r\n\t\toptions.template_dir = dir\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 43,
    "text": "options.template_dir = dir",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function (arg, i, options)\r\n\t\toptions.doclet = arg[i+1]\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 46,
    "text": "options.doclet = arg[i+1]",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function (arg, i, options)\r\n\t\toptions.taglet = arg[i+1]\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 49,
    "text": "options.taglet = arg[i+1]",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "",
    "type": "function container"
  }, {
    "id": 52,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 53,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 54,
    "text": "format",
    "type": "global function"
  }, {
    "id": 55,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 56,
    "text": "OPTIONS[opt]",
    "type": "global function"
  }, {
    "id": 57,
    "text": "print",
    "type": "global function"
  }, {
    "id": 58,
    "text": "require",
    "type": "global function"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "global variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "variable container"
  }, {
    "id": 64,
    "text": "",
    "type": "require container"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  } ]
}