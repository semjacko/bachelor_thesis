{
  "_filename": "formatter.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luadoc/src/luadoc/doclet/formatter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 15,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 10,
    "label": "has",
    "to": 28
  }, {
    "from": 8,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 21
  }, {
    "from": 30,
    "label": "has",
    "to": 18
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 8,
    "label": "calls",
    "to": 41
  }, {
    "from": 8,
    "label": "calls",
    "to": 41
  }, {
    "from": 8,
    "label": "calls",
    "to": 41
  }, {
    "from": 8,
    "label": "calls",
    "to": 41
  }, {
    "from": 8,
    "label": "calls",
    "to": 41
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 8,
    "label": "calls",
    "to": 42
  }, {
    "from": 8,
    "label": "calls",
    "to": 40
  }, {
    "from": 8,
    "label": "calls",
    "to": 45
  }, {
    "from": 8,
    "label": "calls",
    "to": 35
  }, {
    "from": 8,
    "label": "calls",
    "to": 35
  }, {
    "from": 8,
    "label": "calls",
    "to": 35
  }, {
    "from": 8,
    "label": "calls",
    "to": 35
  }, {
    "from": 34,
    "label": "calls",
    "to": 44
  }, {
    "from": 8,
    "label": "calls",
    "to": 39
  }, {
    "from": 8,
    "label": "calls",
    "to": 39
  }, {
    "from": 8,
    "label": "calls",
    "to": 46
  }, {
    "from": 34,
    "label": "calls",
    "to": 47
  }, {
    "from": 34,
    "label": "calls",
    "to": 47
  }, {
    "from": 34,
    "label": "calls",
    "to": 47
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 8,
    "label": "calls",
    "to": 36
  }, {
    "from": 8,
    "label": "calls",
    "to": 36
  }, {
    "from": 8,
    "label": "calls",
    "to": 36
  }, {
    "from": 8,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "declares",
    "to": 3
  }, {
    "from": 34,
    "label": "declares",
    "to": 8
  }, {
    "from": 34,
    "label": "declares",
    "to": 30
  }, {
    "from": 34,
    "label": "declares",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 48,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 48,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 48,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 48,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 48,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 49,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 2
  }, {
    "from": 49,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 37
  }, {
    "from": 49,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "requires",
    "to": 38
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 32
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "formatter",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "function out_file (filename)\r\n\tlocal h = filename\r\n\th = options.output_dir..h\r\n\treturn h\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local h = filename",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "h = options.output_dir..h",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function start (doc)\r\n\tlocal todo = \"<TODO>\"\r\n\t\r\n\t-- Process files\r\n\tfor i, file_doc in ipairs(doc.files) do\r\n\t\t-- assembly the filename\r\n\t\tlocal filename = out_file(file_doc.name)\r\n\t\tluadoc.logger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t-- TODO: confirm file overwrite\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\r\n\t\tfor _, block in ipairs(file_doc.doc) do\r\n\r\n\t\t\t-- write reorganized comments\r\n\t\t\tf:write(string.rep(\"-\", 80)..\"\\n\")\r\n\t\t\t\r\n\t\t\t-- description\r\n\t\t\tf:write(util.comment(util.wrap(block.description, 77)))\r\n\t\t\tf:write(\"\\n\")\r\n\t\t\t\r\n\t\t\tif block.class == \"function\" then\r\n\t\t\t\t-- parameters\r\n\t\t\t\ttable.foreachi(block.param, function (_, param_name)\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))\r\n\t\t\t\t\tf:write(\"\\n\")\r\n\t\t\t\tend)\r\n\t\t\t\t\r\n\t\t\t\t-- return\r\n\t\t\t\tif type(block.ret) == \"table\" then\r\n\t\t\t\t\ttable.foreachi(block.ret, function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend)\r\n\t\t\t\telse\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", block.ret or todo), 77))..\"\\n\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- TODO: usage\r\n\t\t\t-- TODO: see\r\n\r\n\t\t\t-- write code\r\n\t\t\tfor _, line in ipairs(block.code) do\r\n\t\t\t\tf:write(line..\"\\n\")\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tf:close()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local todo = \"<TODO>\"",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for i, file_doc in ipairs(doc.files) do\r\n\t\t-- assembly the filename\r\n\t\tlocal filename = out_file(file_doc.name)\r\n\t\tluadoc.logger:info(string.format(\"generating file `%s'\", filename))\r\n\r\n\t\t-- TODO: confirm file overwrite\r\n\t\tlocal f = lfs.open(filename, \"w\")\r\n\t\tassert(f, string.format(\"could not open `%s' for writing\", filename))\r\n\r\n\t\tfor _, block in ipairs(file_doc.doc) do\r\n\r\n\t\t\t-- write reorganized comments\r\n\t\t\tf:write(string.rep(\"-\", 80)..\"\\n\")\r\n\t\t\t\r\n\t\t\t-- description\r\n\t\t\tf:write(util.comment(util.wrap(block.description, 77)))\r\n\t\t\tf:write(\"\\n\")\r\n\t\t\t\r\n\t\t\tif block.class == \"function\" then\r\n\t\t\t\t-- parameters\r\n\t\t\t\ttable.foreachi(block.param, function (_, param_name)\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))\r\n\t\t\t\t\tf:write(\"\\n\")\r\n\t\t\t\tend)\r\n\t\t\t\t\r\n\t\t\t\t-- return\r\n\t\t\t\tif type(block.ret) == \"table\" then\r\n\t\t\t\t\ttable.foreachi(block.ret, function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend)\r\n\t\t\t\telse\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", block.ret or todo), 77))..\"\\n\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- TODO: usage\r\n\t\t\t-- TODO: see\r\n\r\n\t\t\t-- write code\r\n\t\t\tfor _, line in ipairs(block.code) do\r\n\t\t\t\tf:write(line..\"\\n\")\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tf:close()\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "local filename = out_file(file_doc.name)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "luadoc.logger:info(string.format(\"generating file `%s'\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local f = lfs.open(filename, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "assert(f, string.format(\"could not open `%s' for writing\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "for _, block in ipairs(file_doc.doc) do\r\n\r\n\t\t\t-- write reorganized comments\r\n\t\t\tf:write(string.rep(\"-\", 80)..\"\\n\")\r\n\t\t\t\r\n\t\t\t-- description\r\n\t\t\tf:write(util.comment(util.wrap(block.description, 77)))\r\n\t\t\tf:write(\"\\n\")\r\n\t\t\t\r\n\t\t\tif block.class == \"function\" then\r\n\t\t\t\t-- parameters\r\n\t\t\t\ttable.foreachi(block.param, function (_, param_name)\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))\r\n\t\t\t\t\tf:write(\"\\n\")\r\n\t\t\t\tend)\r\n\t\t\t\t\r\n\t\t\t\t-- return\r\n\t\t\t\tif type(block.ret) == \"table\" then\r\n\t\t\t\t\ttable.foreachi(block.ret, function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend)\r\n\t\t\t\telse\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", block.ret or todo), 77))..\"\\n\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- TODO: usage\r\n\t\t\t-- TODO: see\r\n\r\n\t\t\t-- write code\r\n\t\t\tfor _, line in ipairs(block.code) do\r\n\t\t\t\tf:write(line..\"\\n\")\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "f:write(string.rep(\"-\", 80)..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "f:write(util.comment(util.wrap(block.description, 77)))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "f:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if block.class == \"function\" then\r\n\t\t\t\t-- parameters\r\n\t\t\t\ttable.foreachi(block.param, function (_, param_name)\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))\r\n\t\t\t\t\tf:write(\"\\n\")\r\n\t\t\t\tend)\r\n\t\t\t\t\r\n\t\t\t\t-- return\r\n\t\t\t\tif type(block.ret) == \"table\" then\r\n\t\t\t\t\ttable.foreachi(block.ret, function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend)\r\n\t\t\t\telse\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", block.ret or todo), 77))..\"\\n\")\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "table.foreachi(block.param, function (_, param_name)\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))\r\n\t\t\t\t\tf:write(\"\\n\")\r\n\t\t\t\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "f:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if type(block.ret) == \"table\" then\r\n\t\t\t\t\ttable.foreachi(block.ret, function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend)\r\n\t\t\t\telse\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", block.ret or todo), 77))..\"\\n\")\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "table.foreachi(block.ret, function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "f:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "f:write(util.comment(util.wrap(string.format(\"@return %s\", block.ret or todo), 77))..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "for _, line in ipairs(block.code) do\r\n\t\t\t\tf:write(line..\"\\n\")\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "f:write(line..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function (_, param_name)\r\n\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@param %s %s\", param_name, block.param[param_name] or todo), 77)))\r\n\t\t\t\t\tf:write(\"\\n\")\r\n\t\t\t\tend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function (_, ret)\r\n\t\t\t\t\t\tf:write(util.comment(util.wrap(string.format(\"@return %s\", ret), 77))..\"\\n\")\r\n\t\t\t\t\tend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "function comment (text)\r\n\ttext = string.gsub(text, \"\\n\", \"\\n-- \")\r\n\treturn \"-- \" .. text\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function wrap(s, w, i1, i2)\r\n\tw = w or 80\r\n\ti1 = i1 or 0\r\n\ti2 = i2 or 0\r\n\tassert(i1 < w and i2 < w, \"the indents must be less than the line width\")\r\n\ts = string.rep(\" \", i1) .. s\r\n\tlocal lstart, len = 1, string.len(s)\r\n\twhile len - lstart > w do\r\n\t\tlocal i = lstart + w\r\n\t\twhile i > lstart and string.sub(s, i, i) ~= \" \" do i = i - 1 end\r\n\t\tlocal j = i\r\n\t\twhile j > lstart and string.sub(s, j, j) == \" \" do j = j - 1 end\r\n\t\ts = string.sub(s, 1, j) .. \"\\n\" .. string.rep(\" \", i2) ..\r\n\t\t\tstring.sub(s, i + 1, -1)\r\n\t\tlocal change = i2 + 1 - (i - j)\r\n\t\tlstart = j + change\r\n\t\tlen = len + change\r\n\tend\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "string",
    "type": "module"
  }, {
    "id": 38,
    "text": "table",
    "type": "module"
  }, {
    "id": 39,
    "text": "foreachi",
    "type": "global function"
  }, {
    "id": 40,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 41,
    "text": "format",
    "type": "global function"
  }, {
    "id": 42,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 43,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 44,
    "text": "module",
    "type": "global function"
  }, {
    "id": 45,
    "text": "open",
    "type": "global function"
  }, {
    "id": 46,
    "text": "type",
    "type": "global function"
  }, {
    "id": 47,
    "text": "require",
    "type": "global function"
  }, {
    "id": 48,
    "text": "",
    "type": "variable container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "require local variable"
  } ]
}