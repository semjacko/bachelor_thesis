{
  "_filename": "re.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lpeg/re.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 2,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 43,
    "label": "has",
    "to": 36
  }, {
    "from": 43,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 36
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 36
  }, {
    "from": 51,
    "label": "has",
    "to": 36
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 36
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 36
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 36
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 36
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 36
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 36
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 36
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 36
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 84,
    "label": "has",
    "to": 36
  }, {
    "from": 84,
    "label": "has",
    "to": 36
  }, {
    "from": 84,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 81
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 93,
    "label": "has",
    "to": 36
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 36
  }, {
    "from": 103,
    "label": "has",
    "to": 36
  }, {
    "from": 104,
    "label": "has",
    "to": 36
  }, {
    "from": 105,
    "label": "has",
    "to": 36
  }, {
    "from": 106,
    "label": "calls",
    "to": 124
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 119
  }, {
    "from": 106,
    "label": "calls",
    "to": 116
  }, {
    "from": 106,
    "label": "calls",
    "to": 123
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 2,
    "label": "calls",
    "to": 125
  }, {
    "from": 32,
    "label": "calls",
    "to": 126
  }, {
    "from": 38,
    "label": "calls",
    "to": 126
  }, {
    "from": 106,
    "label": "calls",
    "to": 126
  }, {
    "from": 62,
    "label": "calls",
    "to": 126
  }, {
    "from": 68,
    "label": "calls",
    "to": 126
  }, {
    "from": 72,
    "label": "calls",
    "to": 126
  }, {
    "from": 84,
    "label": "calls",
    "to": 127
  }, {
    "from": 84,
    "label": "calls",
    "to": 127
  }, {
    "from": 106,
    "label": "calls",
    "to": 112
  }, {
    "from": 106,
    "label": "calls",
    "to": 112
  }, {
    "from": 106,
    "label": "calls",
    "to": 112
  }, {
    "from": 106,
    "label": "calls",
    "to": 112
  }, {
    "from": 51,
    "label": "calls",
    "to": 132
  }, {
    "from": 106,
    "label": "calls",
    "to": 128
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 106,
    "label": "calls",
    "to": 118
  }, {
    "from": 78,
    "label": "calls",
    "to": 72
  }, {
    "from": 84,
    "label": "calls",
    "to": 72
  }, {
    "from": 93,
    "label": "calls",
    "to": 72
  }, {
    "from": 106,
    "label": "calls",
    "to": 136
  }, {
    "from": 43,
    "label": "calls",
    "to": 136
  }, {
    "from": 84,
    "label": "calls",
    "to": 136
  }, {
    "from": 106,
    "label": "calls",
    "to": 113
  }, {
    "from": 106,
    "label": "calls",
    "to": 113
  }, {
    "from": 106,
    "label": "calls",
    "to": 113
  }, {
    "from": 106,
    "label": "calls",
    "to": 113
  }, {
    "from": 106,
    "label": "calls",
    "to": 113
  }, {
    "from": 106,
    "label": "calls",
    "to": 2
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 106,
    "label": "calls",
    "to": 120
  }, {
    "from": 72,
    "label": "calls",
    "to": 130
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 106,
    "label": "calls",
    "to": 115
  }, {
    "from": 67,
    "label": "calls",
    "to": 62
  }, {
    "from": 68,
    "label": "calls",
    "to": 134
  }, {
    "from": 84,
    "label": "calls",
    "to": 134
  }, {
    "from": 93,
    "label": "calls",
    "to": 133
  }, {
    "from": 106,
    "label": "calls",
    "to": 131
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 106,
    "label": "calls",
    "to": 114
  }, {
    "from": 106,
    "label": "calls",
    "to": 121
  }, {
    "from": 106,
    "label": "calls",
    "to": 121
  }, {
    "from": 106,
    "label": "calls",
    "to": 121
  }, {
    "from": 106,
    "label": "calls",
    "to": 121
  }, {
    "from": 106,
    "label": "calls",
    "to": 121
  }, {
    "from": 106,
    "label": "calls",
    "to": 121
  }, {
    "from": 106,
    "label": "calls",
    "to": 121
  }, {
    "from": 106,
    "label": "calls",
    "to": 111
  }, {
    "from": 106,
    "label": "calls",
    "to": 137
  }, {
    "from": 106,
    "label": "calls",
    "to": 122
  }, {
    "from": 106,
    "label": "calls",
    "to": 117
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 106,
    "label": "declares",
    "to": 2
  }, {
    "from": 106,
    "label": "declares",
    "to": 32
  }, {
    "from": 106,
    "label": "declares",
    "to": 38
  }, {
    "from": 106,
    "label": "declares",
    "to": 43
  }, {
    "from": 106,
    "label": "declares",
    "to": 51
  }, {
    "from": 106,
    "label": "declares",
    "to": 56
  }, {
    "from": 106,
    "label": "declares",
    "to": 61
  }, {
    "from": 106,
    "label": "declares",
    "to": 62
  }, {
    "from": 106,
    "label": "declares",
    "to": 67
  }, {
    "from": 106,
    "label": "declares",
    "to": 68
  }, {
    "from": 106,
    "label": "declares",
    "to": 72
  }, {
    "from": 106,
    "label": "declares",
    "to": 78
  }, {
    "from": 106,
    "label": "declares",
    "to": 84
  }, {
    "from": 106,
    "label": "declares",
    "to": 93
  }, {
    "from": 106,
    "label": "declares",
    "to": 101
  }, {
    "from": 106,
    "label": "declares",
    "to": 103
  }, {
    "from": 106,
    "label": "declares",
    "to": 104
  }, {
    "from": 106,
    "label": "declares",
    "to": 105
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 107,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 84
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 93
  }, {
    "from": 109,
    "label": "calls",
    "to": 93
  }, {
    "from": 109,
    "label": "calls",
    "to": 93
  }, {
    "from": 109,
    "label": "calls",
    "to": 93
  }, {
    "from": 109,
    "label": "calls",
    "to": 93
  }, {
    "from": 109,
    "label": "calls",
    "to": 93
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 108,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 109,
    "label": "calls",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 1,
    "label": "contains",
    "to": 139
  }, {
    "from": 138,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 138,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 138,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 138,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 138,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 138,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 138,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 138,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 138,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 138,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 138,
    "label": "initializes",
    "to": 162
  }, {
    "from": 138,
    "label": "initializes",
    "to": 163
  }, {
    "from": 138,
    "label": "initializes",
    "to": 164
  }, {
    "from": 138,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 138,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 138,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 138,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 138,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 138,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 138,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 138,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 138,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 138,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 138,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 138,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 138,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 138,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 138,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 194,
    "label": "assigns",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 194,
    "label": "assigns",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 194,
    "label": "assigns",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 194,
    "label": "assigns",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 138,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 139,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "requires",
    "to": 110
  }, {
    "from": 1,
    "label": "provides",
    "to": 208
  }, {
    "from": 193,
    "label": "represents",
    "to": 209
  }, {
    "from": 208,
    "label": "provides",
    "to": 209
  }, {
    "from": 210,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "re",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function updatelocale ()\r\n  mm.locale(Predef)\r\n  Predef.a = Predef.alpha\r\n  Predef.c = Predef.cntrl\r\n  Predef.d = Predef.digit\r\n  Predef.g = Predef.graph\r\n  Predef.l = Predef.lower\r\n  Predef.p = Predef.punct\r\n  Predef.s = Predef.space\r\n  Predef.u = Predef.upper\r\n  Predef.w = Predef.alnum\r\n  Predef.x = Predef.xdigit\r\n  Predef.A = any - Predef.a\r\n  Predef.C = any - Predef.c\r\n  Predef.D = any - Predef.d\r\n  Predef.G = any - Predef.g\r\n  Predef.L = any - Predef.l\r\n  Predef.P = any - Predef.p\r\n  Predef.S = any - Predef.s\r\n  Predef.U = any - Predef.u\r\n  Predef.W = any - Predef.w\r\n  Predef.X = any - Predef.x\r\n  mem = {}    -- restart memoization\r\n  fmem = {}\r\n  gmem = {}\r\n  local mt = {__mode = \"v\"}\r\n  setmetatable(mem, mt)\r\n  setmetatable(fmem, mt)\r\n  setmetatable(gmem, mt)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "mm.locale(Predef)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "Predef.a = Predef.alpha",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "Predef.c = Predef.cntrl",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "Predef.d = Predef.digit",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "Predef.g = Predef.graph",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "Predef.l = Predef.lower",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "Predef.p = Predef.punct",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "Predef.s = Predef.space",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "Predef.u = Predef.upper",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "Predef.w = Predef.alnum",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "Predef.x = Predef.xdigit",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "Predef.A = any - Predef.a",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "Predef.C = any - Predef.c",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "Predef.D = any - Predef.d",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "Predef.G = any - Predef.g",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "Predef.L = any - Predef.l",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "Predef.P = any - Predef.p",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "Predef.S = any - Predef.s",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "Predef.U = any - Predef.u",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "Predef.W = any - Predef.w",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "Predef.X = any - Predef.x",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "mem = {}",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "fmem = {}",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "gmem = {}",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "local mt = {__mode = \"v\"}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "setmetatable(mem, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "setmetatable(fmem, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "setmetatable(gmem, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function getdef (id, defs)\r\n  local c = defs and defs[id]\r\n  if not c then error(\"undefined name: \" .. id) end\r\n  return c\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local c = defs and defs[id]",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if not c then error(\"undefined name: \" .. id) end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "error(\"undefined name: \" .. id)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function patt_error (s, i)\r\n  local msg = (#s < i + 20) and s:sub(i)\r\n                             or s:sub(i,i+20) .. \"...\"\r\n  msg = (\"pattern error near '%s'\"):format(msg)\r\n  error(msg, 2)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local msg = (#s < i + 20) and s:sub(i)\r\n                             or s:sub(i,i+20) .. \"...\"",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "msg = (\"pattern error near '%s'\"):format(msg)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "error(msg, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function mult (p, n)\r\n  local np = mm.P(true)\r\n  while n >= 1 do\r\n    if n%2 >= 1 then np = np * p end\r\n    p = p * p\r\n    n = n/2\r\n  end\r\n  return np\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local np = mm.P(true)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "while n >= 1 do\r\n    if n%2 >= 1 then np = np * p end\r\n    p = p * p\r\n    n = n/2\r\n  end",
    "type": "statement:while"
  }, {
    "id": 46,
    "text": "if n%2 >= 1 then np = np * p end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "np = np * p",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "p = p * p",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "n = n/2",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function equalcap (s, i, c)\r\n  if type(c) ~= \"string\" then return nil end\r\n  local e = #c + i\r\n  if s:sub(i, e - 1) == c then return e else return nil end\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "if type(c) ~= \"string\" then return nil end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local e = #c + i",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if s:sub(i, e - 1) == c then return e else return nil end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function (c,Defs)\r\n  local cat =  Defs and Defs[c] or Predef[c]\r\n  if not cat then error (\"name '\" .. c .. \"' undefined\") end\r\n  return cat\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local cat =  Defs and Defs[c] or Predef[c]",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if not cat then error (\"name '\" .. c .. \"' undefined\") end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "error (\"name '\" .. c .. \"' undefined\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function (c, p) return c == \"^\" and any - p or p end",
    "type": "function"
  }, {
    "id": 62,
    "text": "local function adddef (t, k, exp)\r\n  if t[k] then\r\n    error(\"'\"..k..\"' already defined as a rule\")\r\n  else\r\n    t[k] = exp\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "if t[k] then\r\n    error(\"'\"..k..\"' already defined as a rule\")\r\n  else\r\n    t[k] = exp\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "error(\"'\"..k..\"' already defined as a rule\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "t[k] = exp",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "local function firstdef (n, r) return adddef({n}, n, r) end",
    "type": "function"
  }, {
    "id": 68,
    "text": "local function NT (n, b)\r\n  if not b then\r\n    error(\"rule '\"..n..\"' used outside a grammar\")\r\n  else return mm.V(n)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "if not b then\r\n    error(\"rule '\"..n..\"' used outside a grammar\")\r\n  else return mm.V(n)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "error(\"rule '\"..n..\"' used outside a grammar\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "local function compile (p, defs)\r\n  if mm.type(p) == \"pattern\" then return p end   -- already compiled\r\n  local cp = pattern:match(p, 1, defs)\r\n  if not cp then error(\"incorrect pattern\", 3) end\r\n  return cp\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "if mm.type(p) == \"pattern\" then return p end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local cp = pattern:match(p, 1, defs)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if not cp then error(\"incorrect pattern\", 3) end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "error(\"incorrect pattern\", 3)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "local function match (s, p, i)\r\n  local cp = mem[p]\r\n  if not cp then\r\n    cp = compile(p)\r\n    mem[p] = cp\r\n  end\r\n  return cp:match(s, i or 1)\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local cp = mem[p]",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if not cp then\r\n    cp = compile(p)\r\n    mem[p] = cp\r\n  end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "cp = compile(p)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "mem[p] = cp",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function find (s, p, i)\r\n  local cp = fmem[p]\r\n  if not cp then\r\n    cp = compile(p) / 0\r\n    cp = mm.P{ mm.Cp() * cp * mm.Cp() + 1 * mm.V(1) }\r\n    fmem[p] = cp\r\n  end\r\n  local i, e = cp:match(s, i or 1)\r\n  if i then return i, e - 1\r\n  else return i\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local cp = fmem[p]",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if not cp then\r\n    cp = compile(p) / 0\r\n    cp = mm.P{ mm.Cp() * cp * mm.Cp() + 1 * mm.V(1) }\r\n    fmem[p] = cp\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "cp = compile(p) / 0",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "cp = mm.P{ mm.Cp() * cp * mm.Cp() + 1 * mm.V(1) }",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "fmem[p] = cp",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "local i, e = cp:match(s, i or 1)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if i then return i, e - 1\r\n  else return i\r\n  end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "local function gsub (s, p, rep)\r\n  local g = gmem[p] or {}   -- ensure gmem[p] is not collected while here\r\n  gmem[p] = g\r\n  local cp = g[rep]\r\n  if not cp then\r\n    cp = compile(p)\r\n    cp = mm.Cs((cp / rep + 1)^0)\r\n    g[rep] = cp\r\n  end\r\n  return cp:match(s)\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "local g = gmem[p] or {}",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "gmem[p] = g",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "local cp = g[rep]",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "if not cp then\r\n    cp = compile(p)\r\n    cp = mm.Cs((cp / rep + 1)^0)\r\n    g[rep] = cp\r\n  end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "cp = mm.Cs((cp / rep + 1)^0)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "g[rep] = cp",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function (s,i) print(i, s:sub(1, i-1)); return i end",
    "type": "function"
  }, {
    "id": 102,
    "text": "print(i, s:sub(1, i-1))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "function (a,b,f) return f(a,b) end",
    "type": "function"
  }, {
    "id": 104,
    "text": "function (n, p) return mm.Cg(p, n) end",
    "type": "function"
  }, {
    "id": 105,
    "text": "function (n) return mm.Cmt(mm.Cb(n), equalcap) end",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "function container"
  }, {
    "id": 107,
    "text": "local function match (s,p)\r\n  local i,e = re.find(s,p)\r\n  if i then return s:sub(i, e) end\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "function eqlpeggsub (p1, p2)\r\n  local s1 = cs2str(re.compile(p1))\r\n  local s2 = string.gsub(allchar, \"[^\" .. p2 .. \"]\", \"\")\r\n  -- if s1 ~= s2 then print(#s1,#s2) end\r\n  assert(s1 == s2)\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "function container"
  }, {
    "id": 110,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 111,
    "text": "S",
    "type": "global function"
  }, {
    "id": 112,
    "text": "R",
    "type": "global function"
  }, {
    "id": 113,
    "text": "Cf",
    "type": "global function"
  }, {
    "id": 114,
    "text": "Cs",
    "type": "global function"
  }, {
    "id": 115,
    "text": "Cg",
    "type": "global function"
  }, {
    "id": 116,
    "text": "Carg",
    "type": "global function"
  }, {
    "id": 117,
    "text": "Cb",
    "type": "global function"
  }, {
    "id": 118,
    "text": "P",
    "type": "global function"
  }, {
    "id": 119,
    "text": "Cc",
    "type": "global function"
  }, {
    "id": 120,
    "text": "V",
    "type": "global function"
  }, {
    "id": 121,
    "text": "C",
    "type": "global function"
  }, {
    "id": 122,
    "text": "Cg",
    "type": "global function"
  }, {
    "id": 123,
    "text": "print",
    "type": "global function"
  }, {
    "id": 124,
    "text": "f",
    "type": "global function"
  }, {
    "id": 125,
    "text": "locale",
    "type": "global function"
  }, {
    "id": 126,
    "text": "error",
    "type": "global function"
  }, {
    "id": 127,
    "text": "Cp",
    "type": "global function"
  }, {
    "id": 128,
    "text": "Cb",
    "type": "global function"
  }, {
    "id": 129,
    "text": "require",
    "type": "global function"
  }, {
    "id": 130,
    "text": "type",
    "type": "global function"
  }, {
    "id": 131,
    "text": "Cmt",
    "type": "global function"
  }, {
    "id": 132,
    "text": "type",
    "type": "global function"
  }, {
    "id": 133,
    "text": "Cs",
    "type": "global function"
  }, {
    "id": 134,
    "text": "V",
    "type": "global function"
  }, {
    "id": 135,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 136,
    "text": "P",
    "type": "global function"
  }, {
    "id": 137,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 138,
    "text": "",
    "type": "variable container"
  }, {
    "id": 139,
    "text": "",
    "type": "require container"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "n/a"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "n/a"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "n/a"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "n/a"
  }, {
    "id": 154,
    "text": "",
    "type": "local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 160,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 161,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 162,
    "text": "",
    "type": "local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "n/a"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "n/a"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 195,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 196,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 197,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 198,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 199,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 200,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 201,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 202,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 203,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 204,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 205,
    "text": "",
    "type": "global variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "interface container"
  }, {
    "id": 209,
    "text": "",
    "type": "interface"
  }, {
    "id": 210,
    "text": "",
    "type": "require local variable"
  } ]
}