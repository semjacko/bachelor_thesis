{
  "_filename": "Counter.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacontractor/examples/Counter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "calls",
    "to": 22
  }, {
    "from": 21,
    "label": "calls",
    "to": 23
  }, {
    "from": 21,
    "label": "calls",
    "to": 25
  }, {
    "from": 6,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 24
  }, {
    "from": 21,
    "label": "calls",
    "to": 26
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 21,
    "label": "calls",
    "to": 29
  }, {
    "from": 21,
    "label": "calls",
    "to": 29
  }, {
    "from": 21,
    "label": "calls",
    "to": 29
  }, {
    "from": 15,
    "label": "calls",
    "to": 29
  }, {
    "from": 21,
    "label": "calls",
    "to": 29
  }, {
    "from": 21,
    "label": "calls",
    "to": 28
  }, {
    "from": 21,
    "label": "calls",
    "to": 15
  }, {
    "from": 21,
    "label": "calls",
    "to": 15
  }, {
    "from": 21,
    "label": "calls",
    "to": 15
  }, {
    "from": 21,
    "label": "calls",
    "to": 15
  }, {
    "from": 21,
    "label": "calls",
    "to": 15
  }, {
    "from": 21,
    "label": "calls",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 21
  }, {
    "from": 21,
    "label": "declares",
    "to": 2
  }, {
    "from": 21,
    "label": "declares",
    "to": 6
  }, {
    "from": 21,
    "label": "declares",
    "to": 12
  }, {
    "from": 21,
    "label": "declares",
    "to": 15
  }, {
    "from": 21,
    "label": "declares",
    "to": 19
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 32,
    "label": "initializes",
    "to": 34
  }, {
    "from": 34,
    "label": "assigns",
    "to": 35
  }, {
    "from": 32,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 32,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 32,
    "label": "initializes",
    "to": 40
  }, {
    "from": 32,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 42,
    "label": "assigns",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 32,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 32,
    "label": "initializes",
    "to": 49
  }, {
    "from": 32,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 32,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 32,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 32,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 33,
    "label": "initializes",
    "to": 31
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Counter",
    "type": "module"
  }, {
    "id": 2,
    "text": "function addCounter(val)\r\n  counter = counter + val\r\n  print(\"Counter is\",counter)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "counter = counter + val",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "print(\"Counter is\",counter)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function addCounterPre(contract,val)\r\n  local test,message = contract:check(val>0,\"val should be >0, given \"..tostring(val))\r\n  if not test then\r\n    return test,message\r\n  end\r\n  contract:capture(\"counter\",counter)\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local test,message = contract:check(val>0,\"val should be >0, given \"..tostring(val))",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not test then\r\n    return test,message\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "contract:capture(\"counter\",counter)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function addCounterPost(contract,val)\r\n  local test,message = contract:check(counter==contract.captures[\"counter\"]+val,\"counter should be counter+val (=\"..tostring(counter+val)..\") found \"..tostring(counter))\r\n  if not test then\r\n    return test,message\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local test,message = contract:check(counter==contract.captures[\"counter\"]+val,\"counter should be counter+val (=\"..tostring(counter+val)..\") found \"..tostring(counter))",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function changeCounter(val)\r\n  counter.value = counter.value + val\r\n  print(\"Counter is\",counter.value)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "counter.value = counter.value + val",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "print(\"Counter is\",counter.value)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function counterInv(contract,tabl)\r\n  --print(\"calling 'counterInv' invariant\")\r\n  return contract:check(tabl.value>=0,\"the counter should be positive, found \"..tostring(tabl.value))\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "",
    "type": "function container"
  }, {
    "id": 22,
    "text": "unwrapFunction",
    "type": "global function"
  }, {
    "id": 23,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 24,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 25,
    "text": "addPrecondition",
    "type": "global function"
  }, {
    "id": 26,
    "text": "addPostcondition",
    "type": "global function"
  }, {
    "id": 27,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 28,
    "text": "require",
    "type": "global function"
  }, {
    "id": 29,
    "text": "print",
    "type": "global function"
  }, {
    "id": 30,
    "text": "addInvariant",
    "type": "global function"
  }, {
    "id": 31,
    "text": "",
    "type": "global variable"
  }, {
    "id": 32,
    "text": "",
    "type": "variable container"
  }, {
    "id": 33,
    "text": "",
    "type": "require container"
  }, {
    "id": 34,
    "text": "",
    "type": "local variable"
  }, {
    "id": 35,
    "text": "",
    "type": "n/a"
  }, {
    "id": 36,
    "text": "",
    "type": "local variable"
  }, {
    "id": 37,
    "text": "",
    "type": "number"
  }, {
    "id": 38,
    "text": "",
    "type": "local variable"
  }, {
    "id": 39,
    "text": "",
    "type": "n/a"
  }, {
    "id": 40,
    "text": "",
    "type": "local variable"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 43,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 44,
    "text": "",
    "type": "string"
  }, {
    "id": 45,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 46,
    "text": "",
    "type": "number"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "global variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  } ]
}