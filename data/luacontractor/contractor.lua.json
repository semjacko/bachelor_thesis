{
  "_filename": "contractor.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacontractor/lib/contractor.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 32
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 29,
    "label": "has",
    "to": 40
  }, {
    "from": 29,
    "label": "has",
    "to": 13
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 42
  }, {
    "from": 24,
    "label": "has",
    "to": 43
  }, {
    "from": 24,
    "label": "has",
    "to": 44
  }, {
    "from": 23,
    "label": "has",
    "to": 13
  }, {
    "from": 23,
    "label": "has",
    "to": 13
  }, {
    "from": 23,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 46,
    "label": "has",
    "to": 35
  }, {
    "from": 46,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 32
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 40
  }, {
    "from": 46,
    "label": "has",
    "to": 13
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 13
  }, {
    "from": 48,
    "label": "has",
    "to": 13
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 13
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 64
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 64
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 13
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 64
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 13
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 93,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 87,
    "label": "has",
    "to": 104
  }, {
    "from": 87,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 13
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 13
  }, {
    "from": 105,
    "label": "has",
    "to": 13
  }, {
    "from": 105,
    "label": "has",
    "to": 13
  }, {
    "from": 87,
    "label": "has",
    "to": 111
  }, {
    "from": 87,
    "label": "has",
    "to": 13
  }, {
    "from": 87,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 94
  }, {
    "from": 113,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 113,
    "label": "has",
    "to": 98
  }, {
    "from": 113,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 106
  }, {
    "from": 115,
    "label": "has",
    "to": 107
  }, {
    "from": 115,
    "label": "has",
    "to": 13
  }, {
    "from": 115,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 115,
    "label": "has",
    "to": 13
  }, {
    "from": 115,
    "label": "has",
    "to": 13
  }, {
    "from": 115,
    "label": "has",
    "to": 13
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 117,
    "label": "has",
    "to": 125
  }, {
    "from": 117,
    "label": "has",
    "to": 13
  }, {
    "from": 117,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 132,
    "label": "has",
    "to": 138
  }, {
    "from": 132,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 140
  }, {
    "from": 132,
    "label": "has",
    "to": 13
  }, {
    "from": 132,
    "label": "has",
    "to": 141
  }, {
    "from": 117,
    "label": "calls",
    "to": 87
  }, {
    "from": 87,
    "label": "calls",
    "to": 151
  }, {
    "from": 15,
    "label": "calls",
    "to": 143
  }, {
    "from": 2,
    "label": "calls",
    "to": 144
  }, {
    "from": 2,
    "label": "calls",
    "to": 144
  }, {
    "from": 2,
    "label": "calls",
    "to": 144
  }, {
    "from": 2,
    "label": "calls",
    "to": 144
  }, {
    "from": 15,
    "label": "calls",
    "to": 144
  }, {
    "from": 15,
    "label": "calls",
    "to": 144
  }, {
    "from": 23,
    "label": "calls",
    "to": 145
  }, {
    "from": 23,
    "label": "calls",
    "to": 145
  }, {
    "from": 59,
    "label": "calls",
    "to": 145
  }, {
    "from": 59,
    "label": "calls",
    "to": 145
  }, {
    "from": 70,
    "label": "calls",
    "to": 145
  }, {
    "from": 70,
    "label": "calls",
    "to": 145
  }, {
    "from": 87,
    "label": "calls",
    "to": 145
  }, {
    "from": 117,
    "label": "calls",
    "to": 145
  }, {
    "from": 117,
    "label": "calls",
    "to": 145
  }, {
    "from": 127,
    "label": "calls",
    "to": 145
  }, {
    "from": 132,
    "label": "calls",
    "to": 145
  }, {
    "from": 87,
    "label": "calls",
    "to": 146
  }, {
    "from": 87,
    "label": "calls",
    "to": 146
  }, {
    "from": 87,
    "label": "calls",
    "to": 146
  }, {
    "from": 87,
    "label": "calls",
    "to": 146
  }, {
    "from": 87,
    "label": "calls",
    "to": 146
  }, {
    "from": 87,
    "label": "calls",
    "to": 146
  }, {
    "from": 23,
    "label": "calls",
    "to": 147
  }, {
    "from": 2,
    "label": "calls",
    "to": 150
  }, {
    "from": 2,
    "label": "calls",
    "to": 150
  }, {
    "from": 23,
    "label": "calls",
    "to": 150
  }, {
    "from": 23,
    "label": "calls",
    "to": 150
  }, {
    "from": 87,
    "label": "calls",
    "to": 150
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 59,
    "label": "calls",
    "to": 152
  }, {
    "from": 70,
    "label": "calls",
    "to": 152
  }, {
    "from": 117,
    "label": "calls",
    "to": 152
  }, {
    "from": 23,
    "label": "calls",
    "to": 156
  }, {
    "from": 23,
    "label": "calls",
    "to": 156
  }, {
    "from": 142,
    "label": "calls",
    "to": 154
  }, {
    "from": 23,
    "label": "calls",
    "to": 154
  }, {
    "from": 87,
    "label": "calls",
    "to": 154
  }, {
    "from": 132,
    "label": "calls",
    "to": 154
  }, {
    "from": 87,
    "label": "calls",
    "to": 153
  }, {
    "from": 142,
    "label": "calls",
    "to": 155
  }, {
    "from": 59,
    "label": "calls",
    "to": 23
  }, {
    "from": 67,
    "label": "calls",
    "to": 23
  }, {
    "from": 70,
    "label": "calls",
    "to": 23
  }, {
    "from": 77,
    "label": "calls",
    "to": 23
  }, {
    "from": 23,
    "label": "calls",
    "to": 157
  }, {
    "from": 23,
    "label": "calls",
    "to": 157
  }, {
    "from": 87,
    "label": "calls",
    "to": 149
  }, {
    "from": 132,
    "label": "calls",
    "to": 149
  }, {
    "from": 59,
    "label": "calls",
    "to": 148
  }, {
    "from": 59,
    "label": "calls",
    "to": 148
  }, {
    "from": 70,
    "label": "calls",
    "to": 148
  }, {
    "from": 70,
    "label": "calls",
    "to": 148
  }, {
    "from": 117,
    "label": "calls",
    "to": 148
  }, {
    "from": 117,
    "label": "calls",
    "to": 148
  }, {
    "from": 127,
    "label": "calls",
    "to": 148
  }, {
    "from": 132,
    "label": "calls",
    "to": 148
  }, {
    "from": 23,
    "label": "calls",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 142
  }, {
    "from": 142,
    "label": "declares",
    "to": 2
  }, {
    "from": 142,
    "label": "declares",
    "to": 15
  }, {
    "from": 142,
    "label": "declares",
    "to": 23
  }, {
    "from": 142,
    "label": "declares",
    "to": 46
  }, {
    "from": 142,
    "label": "declares",
    "to": 48
  }, {
    "from": 142,
    "label": "declares",
    "to": 51
  }, {
    "from": 142,
    "label": "declares",
    "to": 56
  }, {
    "from": 142,
    "label": "declares",
    "to": 59
  }, {
    "from": 142,
    "label": "declares",
    "to": 67
  }, {
    "from": 142,
    "label": "declares",
    "to": 70
  }, {
    "from": 142,
    "label": "declares",
    "to": 77
  }, {
    "from": 142,
    "label": "declares",
    "to": 80
  }, {
    "from": 142,
    "label": "declares",
    "to": 87
  }, {
    "from": 142,
    "label": "declares",
    "to": 113
  }, {
    "from": 142,
    "label": "declares",
    "to": 115
  }, {
    "from": 142,
    "label": "declares",
    "to": 117
  }, {
    "from": 142,
    "label": "declares",
    "to": 127
  }, {
    "from": 142,
    "label": "declares",
    "to": 132
  }, {
    "from": 158,
    "label": "requires",
    "to": 1
  }, {
    "from": 158,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 159
  }, {
    "from": 1,
    "label": "contains",
    "to": 160
  }, {
    "from": 159,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 159,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "contractor",
    "type": "module"
  }, {
    "id": 2,
    "text": "function functionalContractToString(contract)\r\n  local str = \"{ \"\r\n  str = str..\"pre={\"\r\n  for i,v in ipairs(contract.pre) do\r\n    str = str..tostring(v)\r\n    if i<#contract.pre then\r\n      str = str..\",\"\r\n    end\r\n  end\r\n  str = str..\"},post={\"\r\n  for i,v in ipairs(contract.post) do\r\n    str = str..tostring(v)\r\n    if i<#contract.post then\r\n      str = str..\",\"\r\n    end\r\n  end\r\n  str = str..\"},base=\"..tostring(contract.base)..\",wrap=\"..tostring(contract.wrapper)..\" }\"\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local str = \"{ \"",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "str = str..\"pre={\"",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "for i,v in ipairs(contract.pre) do\r\n    str = str..tostring(v)\r\n    if i<#contract.pre then\r\n      str = str..\",\"\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "str = str..tostring(v)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if i<#contract.pre then\r\n      str = str..\",\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "str = str..\",\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "str = str..\"},post={\"",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "for i,v in ipairs(contract.post) do\r\n    str = str..tostring(v)\r\n    if i<#contract.post then\r\n      str = str..\",\"\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "if i<#contract.post then\r\n      str = str..\",\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "str = str..\"},base=\"..tostring(contract.base)..\",wrap=\"..tostring(contract.wrapper)..\" }\"",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function functionalContractsToString(contracts)\r\n  str = \"{ \\n\"\r\n  for k,v in pairs(contracts) do\r\n    if k~=v then\r\n      str = str..\"  \"..tostring(k)..\"=\"..functionalContractToString(v)..\"\\n\"\r\n    else\r\n      str = str..\"  \"..tostring(k)..\" [wrapper]\\n\"\r\n    end\r\n  end\r\n  str = str..\"}\\n\"\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "str = \"{ \\n\"",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "for k,v in pairs(contracts) do\r\n    if k~=v then\r\n      str = str..\"  \"..tostring(k)..\"=\"..functionalContractToString(v)..\"\\n\"\r\n    else\r\n      str = str..\"  \"..tostring(k)..\" [wrapper]\\n\"\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "if k~=v then\r\n      str = str..\"  \"..tostring(k)..\"=\"..functionalContractToString(v)..\"\\n\"\r\n    else\r\n      str = str..\"  \"..tostring(k)..\" [wrapper]\\n\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "str = str..\"  \"..tostring(k)..\"=\"..functionalContractToString(v)..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "str = str..\"  \"..tostring(k)..\" [wrapper]\\n\"",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "str = str..\"}\\n\"",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function buildFunctionalWrapper(fun)\r\n  if FunctionalContracts[fun]==nil then\r\n    -- not an already wrapped function\r\n    local contract = { tag = \"fcontract\", pre = {}, post = {}, captures = {}, base=fun }\r\n    local FunctionalContractMT = { __tostring = functionalContractToString }\r\n    setmetatable(contract,FunctionalContractMT)\r\n    \r\n    FunctionalContracts[fun] = contract\r\n    local wrapper = function(...)\r\n      --print(\"Function wrapper called with args=\",...)\r\n      -- 1) test preconditions\r\n      if next(contract.pre)~=nil then\r\n        for i,cond in ipairs(contract.pre) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Precondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end --if\r\n      -- 2) treatment\r\n      ret = contract.base(...)\r\n      -- 3) test postconditions\r\n      if next(contract.post)~=nil then\r\n        for i,cond in ipairs(contract.post) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Postcondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end -- if\r\n      -- 4) erase the captures\r\n      eraseCaptures(contract)\r\n      return ret\r\n    end -- wrapper function\r\n    contract.wrapper = wrapper\r\n    contract.capture = captureVariable\r\n    contract.check = checkCondition\r\n    -- register the wrapper so that it may not be wrapped itself\r\n    FunctionalContracts[wrapper] = contract\r\n    return fun,wrapper\r\n  elseif FunctionalContracts[fun]~=nil then\r\n    return fun,FunctionalContracts[fun].wrapper\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if FunctionalContracts[fun]==nil then\r\n    -- not an already wrapped function\r\n    local contract = { tag = \"fcontract\", pre = {}, post = {}, captures = {}, base=fun }\r\n    local FunctionalContractMT = { __tostring = functionalContractToString }\r\n    setmetatable(contract,FunctionalContractMT)\r\n    \r\n    FunctionalContracts[fun] = contract\r\n    local wrapper = function(...)\r\n      --print(\"Function wrapper called with args=\",...)\r\n      -- 1) test preconditions\r\n      if next(contract.pre)~=nil then\r\n        for i,cond in ipairs(contract.pre) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Precondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end --if\r\n      -- 2) treatment\r\n      ret = contract.base(...)\r\n      -- 3) test postconditions\r\n      if next(contract.post)~=nil then\r\n        for i,cond in ipairs(contract.post) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Postcondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end -- if\r\n      -- 4) erase the captures\r\n      eraseCaptures(contract)\r\n      return ret\r\n    end -- wrapper function\r\n    contract.wrapper = wrapper\r\n    contract.capture = captureVariable\r\n    contract.check = checkCondition\r\n    -- register the wrapper so that it may not be wrapped itself\r\n    FunctionalContracts[wrapper] = contract\r\n    return fun,wrapper\r\n  elseif FunctionalContracts[fun]~=nil then\r\n    return fun,FunctionalContracts[fun].wrapper\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local contract = { tag = \"fcontract\", pre = {}, post = {}, captures = {}, base=fun }",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local FunctionalContractMT = { __tostring = functionalContractToString }",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "setmetatable(contract,FunctionalContractMT)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "FunctionalContracts[fun] = contract",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local wrapper = function(...)\r\n      --print(\"Function wrapper called with args=\",...)\r\n      -- 1) test preconditions\r\n      if next(contract.pre)~=nil then\r\n        for i,cond in ipairs(contract.pre) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Precondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end --if\r\n      -- 2) treatment\r\n      ret = contract.base(...)\r\n      -- 3) test postconditions\r\n      if next(contract.post)~=nil then\r\n        for i,cond in ipairs(contract.post) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Postcondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end -- if\r\n      -- 4) erase the captures\r\n      eraseCaptures(contract)\r\n      return ret\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if next(contract.pre)~=nil then\r\n        for i,cond in ipairs(contract.pre) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Precondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "for i,cond in ipairs(contract.pre) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Precondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "local res,message = cond(contract,...)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if not res then\r\n             error(\"Precondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "error(\"Precondition failure:\\n  ==> \"..message..\"\\n\",3)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "ret = contract.base(...)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if next(contract.post)~=nil then\r\n        for i,cond in ipairs(contract.post) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Postcondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "for i,cond in ipairs(contract.post) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Postcondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "if not res then\r\n             error(\"Postcondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "error(\"Postcondition failure:\\n  ==> \"..message..\"\\n\",3)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "eraseCaptures(contract)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "contract.wrapper = wrapper",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "contract.capture = captureVariable",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "contract.check = checkCondition",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "FunctionalContracts[wrapper] = contract",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function(...)\r\n      --print(\"Function wrapper called with args=\",...)\r\n      -- 1) test preconditions\r\n      if next(contract.pre)~=nil then\r\n        for i,cond in ipairs(contract.pre) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Precondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end --if\r\n      -- 2) treatment\r\n      ret = contract.base(...)\r\n      -- 3) test postconditions\r\n      if next(contract.post)~=nil then\r\n        for i,cond in ipairs(contract.post) do \r\n           local res,message = cond(contract,...)\r\n           if not res then\r\n             error(\"Postcondition failure:\\n  ==> \"..message..\"\\n\",3) -- caller error\r\n           end -- if\r\n        end -- for\r\n      end -- if\r\n      -- 4) erase the captures\r\n      eraseCaptures(contract)\r\n      return ret\r\n    end",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function checkCondition(contract,cond,message)\r\n  if not cond then\r\n    return cond,message\r\n  else\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if not cond then\r\n    return cond,message\r\n  else\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function captureVariable(contract,varname,value)\r\n  if contract.captures==nil then\r\n    contract.captures = {}\r\n  end\r\n  contract.captures[varname] = value\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "if contract.captures==nil then\r\n    contract.captures = {}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "contract.captures = {}",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "contract.captures[varname] = value",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function eraseCaptures(contract)\r\n  contract.captures = nil\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "contract.captures = nil",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function addPrecondition(fun,pre)\r\n  if type(fun)~=\"function\" then\r\n    error(\"Precondition only apply to functions\")\r\n  end\r\n  if type(pre)~=\"function\" then\r\n    error(\"Precondition must be a function\")\r\n  end\r\n  local base,wrapper = buildFunctionalWrapper(fun)\r\n  --print(\"addPre: fun\",fun,\"base\",base,\"wrapper\",wrapper)\r\n  table.insert(FunctionalContracts[fun].pre,pre)\r\n  --print(\"addPre: contract = \"..tostring(FunctionalContracts[base]))\r\n  return wrapper\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "if type(fun)~=\"function\" then\r\n    error(\"Precondition only apply to functions\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "error(\"Precondition only apply to functions\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if type(pre)~=\"function\" then\r\n    error(\"Precondition must be a function\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "error(\"Precondition must be a function\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "local base,wrapper = buildFunctionalWrapper(fun)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "table.insert(FunctionalContracts[fun].pre,pre)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function clearPreconditions(fun)\r\n  local base,wrapper = buildFunctionalWrapper(fun)\r\n  FunctionalContracts[base].pre = {}\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "FunctionalContracts[base].pre = {}",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function addPostcondition(fun,post)\r\n  if type(fun)~=\"function\" then\r\n    error(\"Postconditions only apply to functions\")\r\n  end\r\n  if type(post)~=\"function\" then\r\n    error(\"Postcondition must be a function\")\r\n  end\r\n  local base,wrapper = buildFunctionalWrapper(fun)\r\n  --print(\"addPost: fun\",fun,\"base\",base,\"wrapper\",wrapper)\r\n  table.insert(FunctionalContracts[base].post,post)\r\n  --print(\"addPost: contract = \"..tostring(FunctionalContracts[base]))\r\n  return wrapper\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "if type(fun)~=\"function\" then\r\n    error(\"Postconditions only apply to functions\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "error(\"Postconditions only apply to functions\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if type(post)~=\"function\" then\r\n    error(\"Postcondition must be a function\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "error(\"Postcondition must be a function\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "table.insert(FunctionalContracts[base].post,post)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function clearPostconditions(fun)\r\n  local base,wrapper = buildFunctionalWrapper(fun)\r\n  FunctionalContracts[base].post = {}\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "FunctionalContracts[base].post = {}",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function unwrapFunction(fun)\r\n  if FunctionalContracts[fun]==fun then\r\n    return fun -- not a wrapped function but a wrapper => return itself\r\n  elseif FunctionalContracts[fun]~=nil then\r\n    -- that's a wrapped function\r\n    local contract = FunctionalContracts[fun]\r\n    local wrapper = contract.wrapper\r\n    FunctionalContracts[wrapper] = nil\r\n    FunctionalContracts[fun] = nil\r\n    return contract.base\r\n  else -- a normal (non-wrapped function): just return itself\r\n    return fun\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "if FunctionalContracts[fun]==fun then\r\n    return fun -- not a wrapped function but a wrapper => return itself\r\n  elseif FunctionalContracts[fun]~=nil then\r\n    -- that's a wrapped function\r\n    local contract = FunctionalContracts[fun]\r\n    local wrapper = contract.wrapper\r\n    FunctionalContracts[wrapper] = nil\r\n    FunctionalContracts[fun] = nil\r\n    return contract.base\r\n  else -- a normal (non-wrapped function): just return itself\r\n    return fun\r\n  end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "local contract = FunctionalContracts[fun]",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local wrapper = contract.wrapper",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "FunctionalContracts[wrapper] = nil",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "FunctionalContracts[fun] = nil",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function buildTableWrapper(tabl)\r\n  --print(\"Wrapping table\",tabl)\r\n  tablWrapper = { tag=\"tcontract\", delegate=tabl, inv = { inv } }\r\n  local tablWMT = getmetatable(tabl) -- install metamethods in delegate\r\n  -- metamethod : ttable[key] = val\r\n  if tablWMT==nil then\r\n    tablWMT = {}\r\n  end\r\n  tablWrapper.oldNewIndex = tablWMT.__newindex\r\n  tablWMT.__newindex = function(ttabl,key,val)\r\n    --print(\"Assignment to table\",ttabl,\"for key\",key,\"and value\",val)\r\n    local oldval = ttabl.delegate[key]\r\n    -- if new index metamethod was installed, delegate to it\r\n    -- Remark: this can not be reversed by the wrapper\r\n    if tablWrapper.oldNewIndex~=nil then\r\n      tablWrapper.oldNewIndex(ttabl.delegate,key,val)\r\n    else\r\n      ttabl.delegate[key] = val\r\n    end\r\n    local contract = { check = checkCondition }\r\n    for i,invfun in ipairs(ttabl.inv) do\r\n      local test, message = invfun(contract,ttabl.delegate)\r\n      --print(\"Invariant test is\",test)\r\n      --print(\"Invariant message is\",message)\r\n      if not test then\r\n        ttabl.delegate[key] = oldval\r\n        error(\"Invariant failure:\\n  ==> \"..message..\"\\n\",2) -- caller error\r\n      end\r\n    end\r\n  end\r\n  -- metamethod: ttabl[key]\r\n  tablWrapper.oldIndex = tablWMT.__index\r\n  --print(\"old index =\",tablWrapper.oldIndex)\r\n  tablWMT.__index = function(ttabl,key)\r\n    --print(\"indexing key\",tostring(key))\r\n    local val = rawget(ttabl,key)\r\n    --print(\"fetch val\",val)\r\n    if val~=nil then\r\n      return val\r\n    end\r\n    --print(\"old index = \",tostring(rawget(ttabl,oldIndex)))\r\n    if rawget(ttabl,oldIndex)~=nil then\r\n      --print(\"calling old index\")\r\n      return rawget(ttabl,oldIndex)(rawget(ttabl,\"delegate\"),key)\r\n    else\r\n      --print(\"Accessing\",key,\"on delegate\",rawget(ttabl,\"delegate\"))\r\n      if rawget(ttabl,\"delegate\") ~= nil then\r\n        local val = rawget(ttabl,\"delegate\")[key]\r\n        --print(\"Accessed value is\",val)\r\n        return val\r\n      else\r\n        return nil\r\n      end\r\n    end\r\n  end\r\n  -- install the metatable\r\n  setmetatable(tablWrapper,tablWMT)\r\n  return tablWrapper\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "tablWrapper = { tag=\"tcontract\", delegate=tabl, inv = { inv } }",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "local tablWMT = getmetatable(tabl)",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if tablWMT==nil then\r\n    tablWMT = {}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "tablWMT = {}",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "tablWrapper.oldNewIndex = tablWMT.__newindex",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "tablWMT.__newindex = function(ttabl,key,val)\r\n    --print(\"Assignment to table\",ttabl,\"for key\",key,\"and value\",val)\r\n    local oldval = ttabl.delegate[key]\r\n    -- if new index metamethod was installed, delegate to it\r\n    -- Remark: this can not be reversed by the wrapper\r\n    if tablWrapper.oldNewIndex~=nil then\r\n      tablWrapper.oldNewIndex(ttabl.delegate,key,val)\r\n    else\r\n      ttabl.delegate[key] = val\r\n    end\r\n    local contract = { check = checkCondition }\r\n    for i,invfun in ipairs(ttabl.inv) do\r\n      local test, message = invfun(contract,ttabl.delegate)\r\n      --print(\"Invariant test is\",test)\r\n      --print(\"Invariant message is\",message)\r\n      if not test then\r\n        ttabl.delegate[key] = oldval\r\n        error(\"Invariant failure:\\n  ==> \"..message..\"\\n\",2) -- caller error\r\n      end\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "local oldval = ttabl.delegate[key]",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if tablWrapper.oldNewIndex~=nil then\r\n      tablWrapper.oldNewIndex(ttabl.delegate,key,val)\r\n    else\r\n      ttabl.delegate[key] = val\r\n    end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "tablWrapper.oldNewIndex(ttabl.delegate,key,val)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "ttabl.delegate[key] = val",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "local contract = { check = checkCondition }",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "for i,invfun in ipairs(ttabl.inv) do\r\n      local test, message = invfun(contract,ttabl.delegate)\r\n      --print(\"Invariant test is\",test)\r\n      --print(\"Invariant message is\",message)\r\n      if not test then\r\n        ttabl.delegate[key] = oldval\r\n        error(\"Invariant failure:\\n  ==> \"..message..\"\\n\",2) -- caller error\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 100,
    "text": "local test, message = invfun(contract,ttabl.delegate)",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if not test then\r\n        ttabl.delegate[key] = oldval\r\n        error(\"Invariant failure:\\n  ==> \"..message..\"\\n\",2) -- caller error\r\n      end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "ttabl.delegate[key] = oldval",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "error(\"Invariant failure:\\n  ==> \"..message..\"\\n\",2)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "tablWrapper.oldIndex = tablWMT.__index",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "tablWMT.__index = function(ttabl,key)\r\n    --print(\"indexing key\",tostring(key))\r\n    local val = rawget(ttabl,key)\r\n    --print(\"fetch val\",val)\r\n    if val~=nil then\r\n      return val\r\n    end\r\n    --print(\"old index = \",tostring(rawget(ttabl,oldIndex)))\r\n    if rawget(ttabl,oldIndex)~=nil then\r\n      --print(\"calling old index\")\r\n      return rawget(ttabl,oldIndex)(rawget(ttabl,\"delegate\"),key)\r\n    else\r\n      --print(\"Accessing\",key,\"on delegate\",rawget(ttabl,\"delegate\"))\r\n      if rawget(ttabl,\"delegate\") ~= nil then\r\n        local val = rawget(ttabl,\"delegate\")[key]\r\n        --print(\"Accessed value is\",val)\r\n        return val\r\n      else\r\n        return nil\r\n      end\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "local val = rawget(ttabl,key)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "if val~=nil then\r\n      return val\r\n    end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "if rawget(ttabl,oldIndex)~=nil then\r\n      --print(\"calling old index\")\r\n      return rawget(ttabl,oldIndex)(rawget(ttabl,\"delegate\"),key)\r\n    else\r\n      --print(\"Accessing\",key,\"on delegate\",rawget(ttabl,\"delegate\"))\r\n      if rawget(ttabl,\"delegate\") ~= nil then\r\n        local val = rawget(ttabl,\"delegate\")[key]\r\n        --print(\"Accessed value is\",val)\r\n        return val\r\n      else\r\n        return nil\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "if rawget(ttabl,\"delegate\") ~= nil then\r\n        local val = rawget(ttabl,\"delegate\")[key]\r\n        --print(\"Accessed value is\",val)\r\n        return val\r\n      else\r\n        return nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "local val = rawget(ttabl,\"delegate\")[key]",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "setmetatable(tablWrapper,tablWMT)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function(ttabl,key,val)\r\n    --print(\"Assignment to table\",ttabl,\"for key\",key,\"and value\",val)\r\n    local oldval = ttabl.delegate[key]\r\n    -- if new index metamethod was installed, delegate to it\r\n    -- Remark: this can not be reversed by the wrapper\r\n    if tablWrapper.oldNewIndex~=nil then\r\n      tablWrapper.oldNewIndex(ttabl.delegate,key,val)\r\n    else\r\n      ttabl.delegate[key] = val\r\n    end\r\n    local contract = { check = checkCondition }\r\n    for i,invfun in ipairs(ttabl.inv) do\r\n      local test, message = invfun(contract,ttabl.delegate)\r\n      --print(\"Invariant test is\",test)\r\n      --print(\"Invariant message is\",message)\r\n      if not test then\r\n        ttabl.delegate[key] = oldval\r\n        error(\"Invariant failure:\\n  ==> \"..message..\"\\n\",2) -- caller error\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function(ttabl,key)\r\n    --print(\"indexing key\",tostring(key))\r\n    local val = rawget(ttabl,key)\r\n    --print(\"fetch val\",val)\r\n    if val~=nil then\r\n      return val\r\n    end\r\n    --print(\"old index = \",tostring(rawget(ttabl,oldIndex)))\r\n    if rawget(ttabl,oldIndex)~=nil then\r\n      --print(\"calling old index\")\r\n      return rawget(ttabl,oldIndex)(rawget(ttabl,\"delegate\"),key)\r\n    else\r\n      --print(\"Accessing\",key,\"on delegate\",rawget(ttabl,\"delegate\"))\r\n      if rawget(ttabl,\"delegate\") ~= nil then\r\n        local val = rawget(ttabl,\"delegate\")[key]\r\n        --print(\"Accessed value is\",val)\r\n        return val\r\n      else\r\n        return nil\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function addInvariant(tabl,inv)\r\n  if type(table)~=\"table\" then\r\n    error(\"Invariants only apply on tables\")\r\n  end\r\n  if type(inv)~=\"function\" then\r\n    error(\"Invariant must be a function\")\r\n  end\r\n  local wrap = tabl\r\n  if table.tag~=\"tcontract\" then\r\n    wrap = buildTableWrapper(tabl)\r\n  end\r\n  table.insert(wrap.inv,inv)\r\n  return wrap\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "if type(table)~=\"table\" then\r\n    error(\"Invariants only apply on tables\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "error(\"Invariants only apply on tables\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "if type(inv)~=\"function\" then\r\n    error(\"Invariant must be a function\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "error(\"Invariant must be a function\")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "local wrap = tabl",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "if table.tag~=\"tcontract\" then\r\n    wrap = buildTableWrapper(tabl)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "wrap = buildTableWrapper(tabl)",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "table.insert(wrap.inv,inv)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function clearInvariants(tabl)\r\n  if type(table)~=\"table\" or table.tag~=\"tcontract\" then\r\n    error(\"Can only remove invariants from contracted table\")\r\n  end\r\n  tabl.inv = {}\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "if type(table)~=\"table\" or table.tag~=\"tcontract\" then\r\n    error(\"Can only remove invariants from contracted table\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "error(\"Can only remove invariants from contracted table\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "tabl.inv = {}",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function unwrapTable(tabl)\r\n  if type(table)~=\"table\" or tabl.tag~=\"tcontract\" then\r\n    error(\"Can only unwrap a contracted table\")\r\n  end\r\n  tablMT = getmetatable(tabl)\r\n  tablMT.__newindex = tabl.oldNewIndex\r\n  tablMT.__index = tabl.oldIndex\r\n  delegate = tabl.delegate\r\n  setmetatable(delegate,tablMT)\r\n  tabl = {} -- no need for the wrapper any more\r\n  return delegate\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "if type(table)~=\"table\" or tabl.tag~=\"tcontract\" then\r\n    error(\"Can only unwrap a contracted table\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "error(\"Can only unwrap a contracted table\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "tablMT = getmetatable(tabl)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "tablMT.__newindex = tabl.oldNewIndex",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "tablMT.__index = tabl.oldIndex",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "delegate = tabl.delegate",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "setmetatable(delegate,tablMT)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "tabl = {}",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "",
    "type": "function container"
  }, {
    "id": 143,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 144,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 145,
    "text": "error",
    "type": "global function"
  }, {
    "id": 146,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 147,
    "text": "base",
    "type": "global function"
  }, {
    "id": 148,
    "text": "type",
    "type": "global function"
  }, {
    "id": 149,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 150,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 151,
    "text": "oldNewIndex",
    "type": "global function"
  }, {
    "id": 152,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 153,
    "text": "invfun",
    "type": "global function"
  }, {
    "id": 154,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 155,
    "text": "module",
    "type": "global function"
  }, {
    "id": 156,
    "text": "next",
    "type": "global function"
  }, {
    "id": 157,
    "text": "cond",
    "type": "global function"
  }, {
    "id": 158,
    "text": "",
    "type": "global variable"
  }, {
    "id": 159,
    "text": "",
    "type": "variable container"
  }, {
    "id": 160,
    "text": "",
    "type": "require container"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 165,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 166,
    "text": "",
    "type": "_prefixexp"
  } ]
}