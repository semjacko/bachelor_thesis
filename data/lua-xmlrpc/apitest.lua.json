{
  "_filename": "apitest.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-xmlrpc/tests/apitest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 8
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 13
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 32
  }, {
    "from": 20,
    "label": "has",
    "to": 33
  }, {
    "from": 20,
    "label": "has",
    "to": 34
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 40
  }, {
    "from": 46,
    "label": "has",
    "to": 34
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 34
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 34
  }, {
    "from": 52,
    "label": "has",
    "to": 34
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 34
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 58,
    "label": "has",
    "to": 66
  }, {
    "from": 58,
    "label": "has",
    "to": 67
  }, {
    "from": 58,
    "label": "has",
    "to": 68
  }, {
    "from": 58,
    "label": "has",
    "to": 69
  }, {
    "from": 58,
    "label": "has",
    "to": 70
  }, {
    "from": 58,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 72,
    "label": "has",
    "to": 81
  }, {
    "from": 72,
    "label": "has",
    "to": 65
  }, {
    "from": 72,
    "label": "has",
    "to": 82
  }, {
    "from": 72,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 74
  }, {
    "from": 84,
    "label": "has",
    "to": 75
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 81
  }, {
    "from": 84,
    "label": "has",
    "to": 65
  }, {
    "from": 84,
    "label": "has",
    "to": 82
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 20,
    "label": "calls",
    "to": 97
  }, {
    "from": 58,
    "label": "calls",
    "to": 99
  }, {
    "from": 58,
    "label": "calls",
    "to": 99
  }, {
    "from": 58,
    "label": "calls",
    "to": 99
  }, {
    "from": 72,
    "label": "calls",
    "to": 99
  }, {
    "from": 72,
    "label": "calls",
    "to": 99
  }, {
    "from": 72,
    "label": "calls",
    "to": 99
  }, {
    "from": 84,
    "label": "calls",
    "to": 99
  }, {
    "from": 84,
    "label": "calls",
    "to": 99
  }, {
    "from": 84,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 107
  }, {
    "from": 20,
    "label": "calls",
    "to": 107
  }, {
    "from": 52,
    "label": "calls",
    "to": 107
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 20,
    "label": "calls",
    "to": 100
  }, {
    "from": 20,
    "label": "calls",
    "to": 100
  }, {
    "from": 39,
    "label": "calls",
    "to": 101
  }, {
    "from": 90,
    "label": "calls",
    "to": 94
  }, {
    "from": 90,
    "label": "calls",
    "to": 94
  }, {
    "from": 90,
    "label": "calls",
    "to": 94
  }, {
    "from": 52,
    "label": "calls",
    "to": 52
  }, {
    "from": 58,
    "label": "calls",
    "to": 52
  }, {
    "from": 72,
    "label": "calls",
    "to": 52
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 20,
    "label": "calls",
    "to": 20
  }, {
    "from": 36,
    "label": "calls",
    "to": 20
  }, {
    "from": 46,
    "label": "calls",
    "to": 20
  }, {
    "from": 46,
    "label": "calls",
    "to": 20
  }, {
    "from": 58,
    "label": "calls",
    "to": 95
  }, {
    "from": 90,
    "label": "calls",
    "to": 84
  }, {
    "from": 58,
    "label": "calls",
    "to": 96
  }, {
    "from": 46,
    "label": "calls",
    "to": 103
  }, {
    "from": 46,
    "label": "calls",
    "to": 103
  }, {
    "from": 58,
    "label": "calls",
    "to": 103
  }, {
    "from": 58,
    "label": "calls",
    "to": 103
  }, {
    "from": 58,
    "label": "calls",
    "to": 103
  }, {
    "from": 58,
    "label": "calls",
    "to": 103
  }, {
    "from": 58,
    "label": "calls",
    "to": 103
  }, {
    "from": 72,
    "label": "calls",
    "to": 103
  }, {
    "from": 72,
    "label": "calls",
    "to": 103
  }, {
    "from": 72,
    "label": "calls",
    "to": 103
  }, {
    "from": 72,
    "label": "calls",
    "to": 103
  }, {
    "from": 84,
    "label": "calls",
    "to": 103
  }, {
    "from": 84,
    "label": "calls",
    "to": 103
  }, {
    "from": 84,
    "label": "calls",
    "to": 103
  }, {
    "from": 84,
    "label": "calls",
    "to": 103
  }, {
    "from": 58,
    "label": "calls",
    "to": 104
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 20,
    "label": "calls",
    "to": 108
  }, {
    "from": 90,
    "label": "calls",
    "to": 102
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 20,
    "label": "calls",
    "to": 98
  }, {
    "from": 20,
    "label": "calls",
    "to": 98
  }, {
    "from": 20,
    "label": "calls",
    "to": 98
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 91
  }, {
    "from": 90,
    "label": "calls",
    "to": 109
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 36,
    "label": "calls",
    "to": 105
  }, {
    "from": 72,
    "label": "calls",
    "to": 92
  }, {
    "from": 84,
    "label": "calls",
    "to": 92
  }, {
    "from": 72,
    "label": "calls",
    "to": 93
  }, {
    "from": 84,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 20,
    "label": "calls",
    "to": 106
  }, {
    "from": 20,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 46,
    "label": "calls",
    "to": 106
  }, {
    "from": 46,
    "label": "calls",
    "to": 106
  }, {
    "from": 52,
    "label": "calls",
    "to": 106
  }, {
    "from": 52,
    "label": "calls",
    "to": 106
  }, {
    "from": 72,
    "label": "calls",
    "to": 106
  }, {
    "from": 90,
    "label": "calls",
    "to": 58
  }, {
    "from": 90,
    "label": "calls",
    "to": 58
  }, {
    "from": 90,
    "label": "calls",
    "to": 58
  }, {
    "from": 90,
    "label": "calls",
    "to": 58
  }, {
    "from": 90,
    "label": "calls",
    "to": 58
  }, {
    "from": 39,
    "label": "calls",
    "to": 46
  }, {
    "from": 58,
    "label": "calls",
    "to": 46
  }, {
    "from": 72,
    "label": "calls",
    "to": 46
  }, {
    "from": 90,
    "label": "calls",
    "to": 72
  }, {
    "from": 90,
    "label": "calls",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 90
  }, {
    "from": 90,
    "label": "declares",
    "to": 2
  }, {
    "from": 90,
    "label": "declares",
    "to": 20
  }, {
    "from": 90,
    "label": "declares",
    "to": 36
  }, {
    "from": 90,
    "label": "declares",
    "to": 39
  }, {
    "from": 90,
    "label": "declares",
    "to": 46
  }, {
    "from": 90,
    "label": "declares",
    "to": 52
  }, {
    "from": 90,
    "label": "declares",
    "to": 58
  }, {
    "from": 90,
    "label": "declares",
    "to": 72
  }, {
    "from": 90,
    "label": "declares",
    "to": 84
  }, {
    "from": 1,
    "label": "contains",
    "to": 111
  }, {
    "from": 1,
    "label": "contains",
    "to": 112
  }, {
    "from": 112,
    "label": "initializes",
    "to": 110
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "apitest",
    "type": "module"
  }, {
    "id": 2,
    "text": "function table._print (tab, indent, spacing)\r\n\tspacing = spacing or \"\"\r\n\tindent = indent or \"\\t\"\r\n    io.write (\"{\\n\")\r\n    for nome, val in pairs (tab) do\r\n        io.write (spacing..indent)\r\n        local t = type(nome)\r\n\t\tif t == \"string\" then\r\n            io.write (string.format (\"[%q] = \", tostring (nome)))\r\n\t\telseif t == \"number\" or t == \"boolean\" then\r\n            io.write (string.format (\"[%s] = \", tostring (nome)))\r\n        else\r\n            io.write (t)\r\n        end\r\n        t = type(val)\r\n        if t == \"string\" or t == \"number\" then\r\n            io.write (string.format (\"%q\", val))\r\n        elseif t == \"table\" then\r\n            table.print (val, indent, spacing..indent)\r\n        else\r\n            io.write (t)\r\n        end\r\n        io.write (\",\\n\")\r\n    end\r\n    io.write (spacing..\"}\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "spacing = spacing or \"\"",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "indent = indent or \"\\t\"",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "io.write (\"{\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "for nome, val in pairs (tab) do\r\n        io.write (spacing..indent)\r\n        local t = type(nome)\r\n\t\tif t == \"string\" then\r\n            io.write (string.format (\"[%q] = \", tostring (nome)))\r\n\t\telseif t == \"number\" or t == \"boolean\" then\r\n            io.write (string.format (\"[%s] = \", tostring (nome)))\r\n        else\r\n            io.write (t)\r\n        end\r\n        t = type(val)\r\n        if t == \"string\" or t == \"number\" then\r\n            io.write (string.format (\"%q\", val))\r\n        elseif t == \"table\" then\r\n            table.print (val, indent, spacing..indent)\r\n        else\r\n            io.write (t)\r\n        end\r\n        io.write (\",\\n\")\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "io.write (spacing..indent)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local t = type(nome)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if t == \"string\" then\r\n            io.write (string.format (\"[%q] = \", tostring (nome)))\r\n\t\telseif t == \"number\" or t == \"boolean\" then\r\n            io.write (string.format (\"[%s] = \", tostring (nome)))\r\n        else\r\n            io.write (t)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "io.write (string.format (\"[%q] = \", tostring (nome)))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "io.write (string.format (\"[%s] = \", tostring (nome)))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "io.write (t)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "t = type(val)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if t == \"string\" or t == \"number\" then\r\n            io.write (string.format (\"%q\", val))\r\n        elseif t == \"table\" then\r\n            table.print (val, indent, spacing..indent)\r\n        else\r\n            io.write (t)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "io.write (string.format (\"%q\", val))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "table.print (val, indent, spacing..indent)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "io.write (\",\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "io.write (spacing..\"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function table._tostring (tab, indent, spacing)\r\n\tlocal s = {}\r\n\tspacing = spacing or \"\"\r\n\tindent = indent or \"\\t\"\r\n    table.insert (s, \"{\\n\")\r\n    for nome, val in pairs (tab) do\r\n        table.insert (s, spacing..indent)\r\n        local t = type(nome)\r\n\t\tif t == \"string\" then\r\n            table.insert (s, string.format (\"[%q] = \", tostring (nome)))\r\n\t\telseif t == \"number\" or t == \"boolean\" then\r\n            table.insert (s, string.format (\"[%s] = \", tostring (nome)))\r\n        else\r\n            table.insert (s, t)\r\n        end\r\n        t = type(val)\r\n        if t == \"string\" or t == \"number\" then\r\n            table.insert (s, string.format (\"%q\", val))\r\n        elseif t == \"table\" then\r\n            table.insert (s, table._tostring (val, indent, spacing..indent))\r\n        else\r\n            table.insert (s, t)\r\n        end\r\n        table.insert (s, \",\\n\")\r\n    end\r\n    table.insert (s, spacing..\"}\")\r\n\treturn table.concat (s)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local s = {}",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "table.insert (s, \"{\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "for nome, val in pairs (tab) do\r\n        table.insert (s, spacing..indent)\r\n        local t = type(nome)\r\n\t\tif t == \"string\" then\r\n            table.insert (s, string.format (\"[%q] = \", tostring (nome)))\r\n\t\telseif t == \"number\" or t == \"boolean\" then\r\n            table.insert (s, string.format (\"[%s] = \", tostring (nome)))\r\n        else\r\n            table.insert (s, t)\r\n        end\r\n        t = type(val)\r\n        if t == \"string\" or t == \"number\" then\r\n            table.insert (s, string.format (\"%q\", val))\r\n        elseif t == \"table\" then\r\n            table.insert (s, table._tostring (val, indent, spacing..indent))\r\n        else\r\n            table.insert (s, t)\r\n        end\r\n        table.insert (s, \",\\n\")\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "table.insert (s, spacing..indent)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if t == \"string\" then\r\n            table.insert (s, string.format (\"[%q] = \", tostring (nome)))\r\n\t\telseif t == \"number\" or t == \"boolean\" then\r\n            table.insert (s, string.format (\"[%s] = \", tostring (nome)))\r\n        else\r\n            table.insert (s, t)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "table.insert (s, string.format (\"[%q] = \", tostring (nome)))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "table.insert (s, string.format (\"[%s] = \", tostring (nome)))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "table.insert (s, t)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if t == \"string\" or t == \"number\" then\r\n            table.insert (s, string.format (\"%q\", val))\r\n        elseif t == \"table\" then\r\n            table.insert (s, table._tostring (val, indent, spacing..indent))\r\n        else\r\n            table.insert (s, t)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "table.insert (s, string.format (\"%q\", val))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "table.insert (s, table._tostring (val, indent, spacing..indent))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "table.insert (s, \",\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "table.insert (s, spacing..\"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function table.print (tab, indent, spacing)\r\n\tio.write (table._tostring (tab, indent, spacing))\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "io.write (table._tostring (tab, indent, spacing))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function table.equal2 (t1, t2)\r\n\tif type(t1) ~= \"table\" or type(t2) ~= \"table\" then\r\n\t\treturn false\r\n\tend\r\n\tfor key, v1 in t1 do\r\n\t\tlocal v2 = rawget (t2, key)\r\n\t\tif type(v1) == \"table\" and type(v2) == \"table\" then\r\n\t\t\tif not table.equal (v1, v2) then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\telseif v1 ~= v2 then\r\n\t\t\treturn false\r\n\t\tend\r\n\tend\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "if type(t1) ~= \"table\" or type(t2) ~= \"table\" then\r\n\t\treturn false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "for key, v1 in t1 do\r\n\t\tlocal v2 = rawget (t2, key)\r\n\t\tif type(v1) == \"table\" and type(v2) == \"table\" then\r\n\t\t\tif not table.equal (v1, v2) then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\telseif v1 ~= v2 then\r\n\t\t\treturn false\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "local v2 = rawget (t2, key)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if type(v1) == \"table\" and type(v2) == \"table\" then\r\n\t\t\tif not table.equal (v1, v2) then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\telseif v1 ~= v2 then\r\n\t\t\treturn false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "if not table.equal (v1, v2) then\r\n\t\t\t\treturn false\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function table.equal (t1, t2)\r\n\tif type(t1) ~= \"table\" or type(t2) ~= \"table\" then\r\n\t\treturn false\r\n\tend\r\n\tlocal s1 = table._tostring (t1)\r\n\tlocal s2 = table._tostring (t2)\r\n\ts1 = string.gsub (s1, \"%s*\", \"\")\r\n\ts2 = string.gsub (s2, \"%s*\", \"\")\r\n\t--if s1 ~= s2 then\r\n\t\t--print(s1, \"!!!!\", s2)\r\n\t--end\r\n\treturn s1 == s2, s1..\"!!!\"..s2\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local s1 = table._tostring (t1)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local s2 = table._tostring (t2)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "s1 = string.gsub (s1, \"%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "s2 = string.gsub (s2, \"%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function remove_type (tab)\r\n\tif type(tab) ~= \"table\" then\r\n\t\treturn tab\r\n\telseif tab[\"*type\"] then\r\n\t\treturn tab[\"*value\"]\r\n\tend\r\n\tfor i,v in pairs (tab) do\r\n\t\tif type(v) == \"table\" then\r\n\t\t\ttab[i] = remove_type (v)\r\n\t\tend\r\n\tend\r\n\treturn tab\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "if type(tab) ~= \"table\" then\r\n\t\treturn tab\r\n\telseif tab[\"*type\"] then\r\n\t\treturn tab[\"*value\"]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "for i,v in pairs (tab) do\r\n\t\tif type(v) == \"table\" then\r\n\t\t\ttab[i] = remove_type (v)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "if type(v) == \"table\" then\r\n\t\t\ttab[i] = remove_type (v)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "tab[i] = remove_type (v)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function call_test (xml_call, method, ...)\r\n\tlocal xc = string.gsub (xml_call, \"(%p)\", \"%%%1\")\r\n\t--xc = string.gsub (xc, \"\\r?\\n%s*\", \"%%s*\")\r\n\txc = string.gsub (xc, \"%s*\", \"\")\r\n\targ.n = nil\r\n\r\n\t-- client enconding test\r\n\tlocal meth_call = xmlrpc.clEncode (method, unpack (arg))\r\n\tmeth_call = string.gsub (meth_call, \"%s*\", \"\")\r\n\tlocal s = string.gsub (meth_call, xc, \"\")\r\n\ts = string.gsub (s, \"%s*\", \"\")\r\n\tassert (s == \"\", s..\"\\n!!!\\n\"..xc)\r\n\r\n\t-- server decoding test\r\n\tlocal meth_call, param = xmlrpc.srvDecode (xml_call)\r\n\tassert (meth_call == method, meth_call)\r\n\targ = remove_type (arg)\r\n\tassert (table.equal (arg, param))\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local xc = string.gsub (xml_call, \"(%p)\", \"%%%1\")",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "xc = string.gsub (xc, \"%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "arg.n = nil",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "local meth_call = xmlrpc.clEncode (method, unpack (arg))",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "meth_call = string.gsub (meth_call, \"%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local s = string.gsub (meth_call, xc, \"\")",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "s = string.gsub (s, \"%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "assert (s == \"\", s..\"\\n!!!\\n\"..xc)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "local meth_call, param = xmlrpc.srvDecode (xml_call)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "assert (meth_call == method, meth_call)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "arg = remove_type (arg)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "assert (table.equal (arg, param))",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function response_test (xml_resp, lua_obj)\r\n\t-- client decoding test\r\n\tlocal ok, obj = xmlrpc.clDecode (xml_resp)\r\n\r\n\t-- server encoding test\r\n\txml_resp = string.gsub (xml_resp, \"(%p)\", \"%%%1\")\r\n\txml_resp = string.gsub (xml_resp, \"\\r?\\n%s*\", \"%%s*\")\r\n\tlocal meth_resp = xmlrpc.srvEncode (lua_obj)\r\n\r\n\tif type (obj) == \"table\" then\r\n\t\tlua_obj = remove_type (lua_obj)\r\n\t\tassert (table.equal (obj, lua_obj))\r\n\telse\r\n\t\tassert (obj == lua_obj)\r\n\tend\r\n\tlocal s = string.gsub (meth_resp, xml_resp, \"\")\r\n\ts = string.gsub (s, \"%s*\", \"\")\r\n\tassert (s == \"\", s)\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "local ok, obj = xmlrpc.clDecode (xml_resp)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "xml_resp = string.gsub (xml_resp, \"(%p)\", \"%%%1\")",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "xml_resp = string.gsub (xml_resp, \"\\r?\\n%s*\", \"%%s*\")",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local meth_resp = xmlrpc.srvEncode (lua_obj)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if type (obj) == \"table\" then\r\n\t\tlua_obj = remove_type (lua_obj)\r\n\t\tassert (table.equal (obj, lua_obj))\r\n\telse\r\n\t\tassert (obj == lua_obj)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "lua_obj = remove_type (lua_obj)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "assert (table.equal (obj, lua_obj))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert (obj == lua_obj)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "local s = string.gsub (meth_resp, xml_resp, \"\")",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "assert (s == \"\", s)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function fault_test (xml_resp, message, code)\r\n\t-- client decoding test\r\n\tlocal ok, str, n = xmlrpc.clDecode (xml_resp)\r\n\tassert (str == message)\r\n\tassert (n == code)\r\n\r\n\t-- server encoding test\r\n\txml_resp = string.gsub (xml_resp, \"(%p)\", \"%%%1\")\r\n\txml_resp = string.gsub (xml_resp, \"\\r?\\n%s*\", \"%%s*\")\r\n\tlocal meth_resp = xmlrpc.srvEncode ({ message = message, code = code }, true)\r\n\tlocal s = string.gsub (meth_resp, xml_resp, \"\")\r\n\ts = string.gsub (s, \"%s*\", \"\")\r\n\tassert (s == \"\", s)\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local ok, str, n = xmlrpc.clDecode (xml_resp)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "assert (str == message)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert (n == code)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "local meth_resp = xmlrpc.srvEncode ({ message = message, code = code }, true)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "",
    "type": "function container"
  }, {
    "id": 91,
    "text": "newTypedValue",
    "type": "global function"
  }, {
    "id": 92,
    "text": "srvEncode",
    "type": "global function"
  }, {
    "id": 93,
    "text": "clDecode",
    "type": "global function"
  }, {
    "id": 94,
    "text": "newArray",
    "type": "global function"
  }, {
    "id": 95,
    "text": "clEncode",
    "type": "global function"
  }, {
    "id": 96,
    "text": "srvDecode",
    "type": "global function"
  }, {
    "id": 97,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 98,
    "text": "format",
    "type": "global function"
  }, {
    "id": 99,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 100,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 101,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 102,
    "text": "print",
    "type": "global function"
  }, {
    "id": 103,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 104,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 105,
    "text": "write",
    "type": "global function"
  }, {
    "id": 106,
    "text": "type",
    "type": "global function"
  }, {
    "id": 107,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 108,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 109,
    "text": "require",
    "type": "global function"
  }, {
    "id": 110,
    "text": "",
    "type": "global variable"
  }, {
    "id": 111,
    "text": "",
    "type": "variable container"
  }, {
    "id": 112,
    "text": "",
    "type": "require container"
  } ]
}