{
  "_filename": "httptest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-xmlrpc/tests/httptest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 30
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 17,
    "label": "has",
    "to": 37
  }, {
    "from": 17,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 11,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 17,
    "label": "calls",
    "to": 9
  }, {
    "from": 53,
    "label": "calls",
    "to": 9
  }, {
    "from": 53,
    "label": "calls",
    "to": 9
  }, {
    "from": 11,
    "label": "calls",
    "to": 56
  }, {
    "from": 11,
    "label": "calls",
    "to": 56
  }, {
    "from": 17,
    "label": "calls",
    "to": 56
  }, {
    "from": 17,
    "label": "calls",
    "to": 56
  }, {
    "from": 17,
    "label": "calls",
    "to": 56
  }, {
    "from": 17,
    "label": "calls",
    "to": 56
  }, {
    "from": 11,
    "label": "calls",
    "to": 62
  }, {
    "from": 53,
    "label": "calls",
    "to": 62
  }, {
    "from": 53,
    "label": "calls",
    "to": 2
  }, {
    "from": 39,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 2,
    "label": "calls",
    "to": 58
  }, {
    "from": 17,
    "label": "calls",
    "to": 57
  }, {
    "from": 17,
    "label": "calls",
    "to": 57
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 11,
    "label": "calls",
    "to": 61
  }, {
    "from": 17,
    "label": "calls",
    "to": 61
  }, {
    "from": 17,
    "label": "calls",
    "to": 61
  }, {
    "from": 17,
    "label": "calls",
    "to": 61
  }, {
    "from": 17,
    "label": "calls",
    "to": 59
  }, {
    "from": 17,
    "label": "calls",
    "to": 59
  }, {
    "from": 53,
    "label": "calls",
    "to": 60
  }, {
    "from": 53,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 11,
    "label": "calls",
    "to": 11
  }, {
    "from": 17,
    "label": "calls",
    "to": 11
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 53,
    "label": "declares",
    "to": 2
  }, {
    "from": 53,
    "label": "declares",
    "to": 9
  }, {
    "from": 53,
    "label": "declares",
    "to": 11
  }, {
    "from": 53,
    "label": "declares",
    "to": 17
  }, {
    "from": 53,
    "label": "declares",
    "to": 39
  }, {
    "from": 53,
    "label": "declares",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 65,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 65,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 70,
    "label": "assigns",
    "to": 72
  }, {
    "from": 65,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 74,
    "label": "assigns",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 66,
    "label": "initializes",
    "to": 64
  }, {
    "from": 66,
    "label": "initializes",
    "to": 64
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "httptest",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function init_launcher(launcher)\r\n  if launcher == 'cgilua' then \r\n    require\"cgilua\"\r\n    cgilua.htmlheader()\r\n    io.write = function(str)\r\n      cgilua.put(string.gsub(str, '\\n','<br>'))\r\n    end --io.write\r\n  end --if \r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if launcher == 'cgilua' then \r\n    require\"cgilua\"\r\n    cgilua.htmlheader()\r\n    io.write = function(str)\r\n      cgilua.put(string.gsub(str, '\\n','<br>'))\r\n    end --io.write\r\n  end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "require\"cgilua\"",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "cgilua.htmlheader()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "io.write = function(str)\r\n      cgilua.put(string.gsub(str, '\\n','<br>'))\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "cgilua.put(string.gsub(str, '\\n','<br>'))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function(str)\r\n      cgilua.put(string.gsub(str, '\\n','<br>'))\r\n    end",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function dumpt(t)\r\n  for k,v in pairs(t) do\r\n    io.write('\\nk='..tostring(k)..'\\tv='..tostring(v))\r\n    if type(v) == 'table' then dumpt(v) end\r\n  end --for\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "for k,v in pairs(t) do\r\n    io.write('\\nk='..tostring(k)..'\\tv='..tostring(v))\r\n    if type(v) == 'table' then dumpt(v) end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "io.write('\\nk='..tostring(k)..'\\tv='..tostring(v))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "if type(v) == 'table' then dumpt(v) end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "dumpt(v)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function test(url, rtype, rvalue, method, args)\r\n  local status, res\r\n  io.write('\\nURL='..url..'\\nMETHOD='..method..'\\nPARAMETERS=')\r\n  io.write(unpack(args or {'void'}))\r\n  if args then\r\n    status, xmlstatus, res = pcall( xmlrpc.http.call,url, method, unpack(args))\r\n  else\r\n    status, xmlstatus, res = pcall( xmlrpc.http.call,url, method)  \r\n  end --if\r\n  if not status then\r\n    io.write('\\nFAILURE! '..xmlstatus)\r\n  else\r\n    if not xmlstatus and rtype ~= 'failure' then\r\n      io.write('\\nFAILURE! '..res)\r\n    else\r\n      io.write('\\nreturn type expected= '..rtype)  \r\n      if type(res) == rtype or (not xmlstatus and rtype == 'failure') then\r\n        io.write(' (OK)')\r\n      else\r\n        io.write(' (FAILURE) returning a '..type(res))\r\n      end --if    \r\n      if rvalue then\r\n        io.write('\\nvalue expected='..tostring(rvalue))\r\n        if type(res) == 'table' then\r\n          dumpt(res)\r\n        elseif tostring(rvalue) == tostring(res) then\r\n          io.write(' (OK)')\r\n        else\r\n          io.write(' (FAILURE) value returned='..tostring(res))\r\n        end --if\r\n      end --if\r\n    end --if\r\n  end --if\r\n  io.write('\\n')\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local status, res",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "io.write('\\nURL='..url..'\\nMETHOD='..method..'\\nPARAMETERS=')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "io.write(unpack(args or {'void'}))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "if args then\r\n    status, xmlstatus, res = pcall( xmlrpc.http.call,url, method, unpack(args))\r\n  else\r\n    status, xmlstatus, res = pcall( xmlrpc.http.call,url, method)  \r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "status, xmlstatus, res = pcall( xmlrpc.http.call,url, method, unpack(args))",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "status, xmlstatus, res = pcall( xmlrpc.http.call,url, method)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if not status then\r\n    io.write('\\nFAILURE! '..xmlstatus)\r\n  else\r\n    if not xmlstatus and rtype ~= 'failure' then\r\n      io.write('\\nFAILURE! '..res)\r\n    else\r\n      io.write('\\nreturn type expected= '..rtype)  \r\n      if type(res) == rtype or (not xmlstatus and rtype == 'failure') then\r\n        io.write(' (OK)')\r\n      else\r\n        io.write(' (FAILURE) returning a '..type(res))\r\n      end --if    \r\n      if rvalue then\r\n        io.write('\\nvalue expected='..tostring(rvalue))\r\n        if type(res) == 'table' then\r\n          dumpt(res)\r\n        elseif tostring(rvalue) == tostring(res) then\r\n          io.write(' (OK)')\r\n        else\r\n          io.write(' (FAILURE) value returned='..tostring(res))\r\n        end --if\r\n      end --if\r\n    end --if\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "io.write('\\nFAILURE! '..xmlstatus)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "if not xmlstatus and rtype ~= 'failure' then\r\n      io.write('\\nFAILURE! '..res)\r\n    else\r\n      io.write('\\nreturn type expected= '..rtype)  \r\n      if type(res) == rtype or (not xmlstatus and rtype == 'failure') then\r\n        io.write(' (OK)')\r\n      else\r\n        io.write(' (FAILURE) returning a '..type(res))\r\n      end --if    \r\n      if rvalue then\r\n        io.write('\\nvalue expected='..tostring(rvalue))\r\n        if type(res) == 'table' then\r\n          dumpt(res)\r\n        elseif tostring(rvalue) == tostring(res) then\r\n          io.write(' (OK)')\r\n        else\r\n          io.write(' (FAILURE) value returned='..tostring(res))\r\n        end --if\r\n      end --if\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "io.write('\\nFAILURE! '..res)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "io.write('\\nreturn type expected= '..rtype)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if type(res) == rtype or (not xmlstatus and rtype == 'failure') then\r\n        io.write(' (OK)')\r\n      else\r\n        io.write(' (FAILURE) returning a '..type(res))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "io.write(' (OK)')",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "io.write(' (FAILURE) returning a '..type(res))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "if rvalue then\r\n        io.write('\\nvalue expected='..tostring(rvalue))\r\n        if type(res) == 'table' then\r\n          dumpt(res)\r\n        elseif tostring(rvalue) == tostring(res) then\r\n          io.write(' (OK)')\r\n        else\r\n          io.write(' (FAILURE) value returned='..tostring(res))\r\n        end --if\r\n      end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "io.write('\\nvalue expected='..tostring(rvalue))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "if type(res) == 'table' then\r\n          dumpt(res)\r\n        elseif tostring(rvalue) == tostring(res) then\r\n          io.write(' (OK)')\r\n        else\r\n          io.write(' (FAILURE) value returned='..tostring(res))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "dumpt(res)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "io.write(' (FAILURE) value returned='..tostring(res))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "io.write('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function syndic8()\r\n  test( \"http://www.syndic8.com/xmlrpc.php\", \"string\", nil, \"syndic8.GetFeedCount\" )\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "test( \"http://www.syndic8.com/xmlrpc.php\", \"string\", nil, \"syndic8.GetFeedCount\" )",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function calc()\r\n  test( server, 'number', '25', 'calc.add', {10,15} )\r\n  test( server, 'string', '0.1v', 'calc.getVersion' )\r\n  test( server, 'boolean', 'true', 'calc.isprime', {7} )\r\n  test( server, 'boolean', 'false', 'calc.isprime', {80} )\r\n  test( server, 'table', {{1,0},{0,1}}, 'calc.MID' )\r\n  test( server, 'failure', 'Unavailable method', 'calc' )\r\n  test( server, 'failure', 'Unavailable method', 'calc.MID2' )\r\n  test( server, 'failure', 'Unavailable method', 'foo', {2} )\r\n  test( server, 'failure', 'Unavailable method', 'foo.foo2.foo3', {3,4,5} )\r\n--  test( 'http://localhost:82/calc.xmlrpc', 'number', '25', 'calc.add', {10,15} )\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "test( server, 'number', '25', 'calc.add', {10,15} )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "test( server, 'string', '0.1v', 'calc.getVersion' )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "test( server, 'boolean', 'true', 'calc.isprime', {7} )",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "test( server, 'boolean', 'false', 'calc.isprime', {80} )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "test( server, 'table', {{1,0},{0,1}}, 'calc.MID' )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "test( server, 'failure', 'Unavailable method', 'calc' )",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "test( server, 'failure', 'Unavailable method', 'calc.MID2' )",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "test( server, 'failure', 'Unavailable method', 'foo', {2} )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "test( server, 'failure', 'Unavailable method', 'foo.foo2.foo3', {3,4,5} )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "",
    "type": "function container"
  }, {
    "id": 54,
    "text": "htmlheader",
    "type": "global function"
  }, {
    "id": 55,
    "text": "put",
    "type": "global function"
  }, {
    "id": 56,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 57,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 58,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 59,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 60,
    "text": "func",
    "type": "global function"
  }, {
    "id": 61,
    "text": "type",
    "type": "global function"
  }, {
    "id": 62,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 63,
    "text": "require",
    "type": "global function"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "variable container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "string"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 71,
    "text": "",
    "type": "string"
  }, {
    "id": 72,
    "text": "",
    "type": "string"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 75,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 76,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 77,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 78,
    "text": "",
    "type": "tableconstructor"
  } ]
}