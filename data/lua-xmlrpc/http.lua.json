{
  "_filename": "http.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-xmlrpc/src/http.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "calls",
    "to": 19
  }, {
    "from": 2,
    "label": "calls",
    "to": 25
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 18
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 16
  }, {
    "from": 11,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 14
  }, {
    "from": 2,
    "label": "calls",
    "to": 21
  }, {
    "from": 11,
    "label": "calls",
    "to": 27
  }, {
    "from": 11,
    "label": "calls",
    "to": 27
  }, {
    "from": 11,
    "label": "calls",
    "to": 27
  }, {
    "from": 11,
    "label": "calls",
    "to": 27
  }, {
    "from": 11,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 11
  }, {
    "from": 11,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 29,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "assigns",
    "to": 32
  }, {
    "from": 29,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 29,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 29,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 30,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 13
  }, {
    "from": 30,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "requires",
    "to": 1
  }, {
    "from": 30,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "requires",
    "to": 20
  }, {
    "from": 30,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "requires",
    "to": 17
  }, {
    "from": 30,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "requires",
    "to": 12
  }, {
    "from": 28,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "http",
    "type": "module"
  }, {
    "id": 2,
    "text": "function call (url, method, ...)\r\n\tlocal request_sink, tbody = ltn12.sink.table()\r\n\tlocal request_body = xmlrpc.clEncode(method, ...)\r\n\tlocal err, code, headers, status = request {\r\n\t\turl = url,\r\n\t\tmethod = \"POST\",\r\n\t\tsource = ltn12.source.string (request_body),\r\n\t\tsink = request_sink,\r\n\t\theaders = {\r\n\t\t\t[\"User-agent\"] = xmlrpc._PKGNAME .. \" \" .. xmlrpc._VERSION,\r\n\t\t\t[\"Content-type\"] = \"text/xml\",\r\n\t\t\t[\"content-length\"] = tostring (string.len (request_body)),\r\n\t\t},\r\n\t}\r\n\tlocal body = table.concat (tbody)\r\n\tif tonumber (code) == 200 then\r\n\t\treturn xmlrpc.clDecode (body)\r\n\telse\r\n\t\terror (tostring (err or code)..\"\\n\\n\"..tostring(body))\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local request_sink, tbody = ltn12.sink.table()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local request_body = xmlrpc.clEncode(method, ...)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local err, code, headers, status = request {\r\n\t\turl = url,\r\n\t\tmethod = \"POST\",\r\n\t\tsource = ltn12.source.string (request_body),\r\n\t\tsink = request_sink,\r\n\t\theaders = {\r\n\t\t\t[\"User-agent\"] = xmlrpc._PKGNAME .. \" \" .. xmlrpc._VERSION,\r\n\t\t\t[\"Content-type\"] = \"text/xml\",\r\n\t\t\t[\"content-length\"] = tostring (string.len (request_body)),\r\n\t\t},\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local body = table.concat (tbody)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if tonumber (code) == 200 then\r\n\t\treturn xmlrpc.clDecode (body)\r\n\telse\r\n\t\terror (tostring (err or code)..\"\\n\\n\"..tostring(body))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "error (tostring (err or code)..\"\\n\\n\"..tostring(body))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "",
    "type": "function container"
  }, {
    "id": 12,
    "text": "xmlrpc",
    "type": "module"
  }, {
    "id": 13,
    "text": "ltn12",
    "type": "module"
  }, {
    "id": 14,
    "text": "sink.table",
    "type": "global function"
  }, {
    "id": 15,
    "text": "clDecode",
    "type": "global function"
  }, {
    "id": 16,
    "text": "source.string",
    "type": "global function"
  }, {
    "id": 17,
    "text": "table",
    "type": "module"
  }, {
    "id": 18,
    "text": "clEncode",
    "type": "global function"
  }, {
    "id": 19,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 20,
    "text": "string",
    "type": "module"
  }, {
    "id": 21,
    "text": "len",
    "type": "global function"
  }, {
    "id": 22,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 23,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 24,
    "text": "module",
    "type": "global function"
  }, {
    "id": 25,
    "text": "request",
    "type": "global function"
  }, {
    "id": 26,
    "text": "error",
    "type": "global function"
  }, {
    "id": 27,
    "text": "require",
    "type": "global function"
  }, {
    "id": 28,
    "text": "",
    "type": "global variable"
  }, {
    "id": 29,
    "text": "",
    "type": "variable container"
  }, {
    "id": 30,
    "text": "",
    "type": "require container"
  }, {
    "id": 31,
    "text": "",
    "type": "local variable"
  }, {
    "id": 32,
    "text": "",
    "type": "n/a"
  }, {
    "id": 33,
    "text": "",
    "type": "local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "n/a"
  }, {
    "id": 35,
    "text": "",
    "type": "local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "local variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 41,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 43,
    "text": "",
    "type": "require local variable"
  } ]
}