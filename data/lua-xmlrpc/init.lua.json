{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-xmlrpc/src/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 3
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 3
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 3
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 37
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 3
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 3
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 37
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 3
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 87,
    "label": "has",
    "to": 3
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 3
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 3
  }, {
    "from": 91,
    "label": "has",
    "to": 3
  }, {
    "from": 91,
    "label": "has",
    "to": 3
  }, {
    "from": 91,
    "label": "has",
    "to": 3
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 3
  }, {
    "from": 95,
    "label": "has",
    "to": 3
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 98,
    "label": "has",
    "to": 3
  }, {
    "from": 98,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 99
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 109,
    "label": "has",
    "to": 3
  }, {
    "from": 109,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 3
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 3
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 3
  }, {
    "from": 126,
    "label": "has",
    "to": 3
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 3
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 3
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 140,
    "label": "has",
    "to": 3
  }, {
    "from": 140,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 3
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 3
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 3
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 3
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 3
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 3
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 166,
    "label": "has",
    "to": 3
  }, {
    "from": 166,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 3
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 3
  }, {
    "from": 178,
    "label": "has",
    "to": 3
  }, {
    "from": 178,
    "label": "has",
    "to": 3
  }, {
    "from": 178,
    "label": "has",
    "to": 3
  }, {
    "from": 176,
    "label": "has",
    "to": 182
  }, {
    "from": 174,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 179
  }, {
    "from": 184,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 3
  }, {
    "from": 184,
    "label": "has",
    "to": 3
  }, {
    "from": 184,
    "label": "has",
    "to": 3
  }, {
    "from": 184,
    "label": "has",
    "to": 3
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 3
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 91,
    "label": "calls",
    "to": 189
  }, {
    "from": 188,
    "label": "calls",
    "to": 205
  }, {
    "from": 188,
    "label": "calls",
    "to": 205
  }, {
    "from": 188,
    "label": "calls",
    "to": 205
  }, {
    "from": 88,
    "label": "calls",
    "to": 205
  }, {
    "from": 98,
    "label": "calls",
    "to": 205
  }, {
    "from": 98,
    "label": "calls",
    "to": 205
  }, {
    "from": 98,
    "label": "calls",
    "to": 205
  }, {
    "from": 109,
    "label": "calls",
    "to": 205
  }, {
    "from": 109,
    "label": "calls",
    "to": 205
  }, {
    "from": 117,
    "label": "calls",
    "to": 205
  }, {
    "from": 126,
    "label": "calls",
    "to": 205
  }, {
    "from": 126,
    "label": "calls",
    "to": 205
  }, {
    "from": 130,
    "label": "calls",
    "to": 205
  }, {
    "from": 130,
    "label": "calls",
    "to": 205
  }, {
    "from": 135,
    "label": "calls",
    "to": 205
  }, {
    "from": 135,
    "label": "calls",
    "to": 205
  }, {
    "from": 140,
    "label": "calls",
    "to": 205
  }, {
    "from": 147,
    "label": "calls",
    "to": 205
  }, {
    "from": 50,
    "label": "calls",
    "to": 190
  }, {
    "from": 50,
    "label": "calls",
    "to": 190
  }, {
    "from": 188,
    "label": "calls",
    "to": 190
  }, {
    "from": 188,
    "label": "calls",
    "to": 190
  }, {
    "from": 188,
    "label": "calls",
    "to": 190
  }, {
    "from": 79,
    "label": "calls",
    "to": 190
  }, {
    "from": 82,
    "label": "calls",
    "to": 190
  }, {
    "from": 109,
    "label": "calls",
    "to": 117
  }, {
    "from": 18,
    "label": "calls",
    "to": 191
  }, {
    "from": 21,
    "label": "calls",
    "to": 191
  }, {
    "from": 2,
    "label": "calls",
    "to": 192
  }, {
    "from": 98,
    "label": "calls",
    "to": 95
  }, {
    "from": 98,
    "label": "calls",
    "to": 95
  }, {
    "from": 109,
    "label": "calls",
    "to": 95
  }, {
    "from": 33,
    "label": "calls",
    "to": 58
  }, {
    "from": 43,
    "label": "calls",
    "to": 58
  }, {
    "from": 188,
    "label": "calls",
    "to": 58
  }, {
    "from": 188,
    "label": "calls",
    "to": 58
  }, {
    "from": 35,
    "label": "calls",
    "to": 33
  }, {
    "from": 91,
    "label": "calls",
    "to": 85
  }, {
    "from": 91,
    "label": "calls",
    "to": 85
  }, {
    "from": 91,
    "label": "calls",
    "to": 86
  }, {
    "from": 91,
    "label": "calls",
    "to": 86
  }, {
    "from": 98,
    "label": "calls",
    "to": 206
  }, {
    "from": 126,
    "label": "calls",
    "to": 193
  }, {
    "from": 147,
    "label": "calls",
    "to": 140
  }, {
    "from": 98,
    "label": "calls",
    "to": 119
  }, {
    "from": 126,
    "label": "calls",
    "to": 119
  }, {
    "from": 188,
    "label": "calls",
    "to": 194
  }, {
    "from": 98,
    "label": "calls",
    "to": 195
  }, {
    "from": 109,
    "label": "calls",
    "to": 195
  }, {
    "from": 188,
    "label": "calls",
    "to": 201
  }, {
    "from": 50,
    "label": "calls",
    "to": 71
  }, {
    "from": 82,
    "label": "calls",
    "to": 71
  }, {
    "from": 98,
    "label": "calls",
    "to": 203
  }, {
    "from": 109,
    "label": "calls",
    "to": 203
  }, {
    "from": 130,
    "label": "calls",
    "to": 203
  }, {
    "from": 135,
    "label": "calls",
    "to": 196
  }, {
    "from": 174,
    "label": "calls",
    "to": 196
  }, {
    "from": 135,
    "label": "calls",
    "to": 130
  }, {
    "from": 147,
    "label": "calls",
    "to": 130
  }, {
    "from": 50,
    "label": "calls",
    "to": 208
  }, {
    "from": 188,
    "label": "calls",
    "to": 208
  }, {
    "from": 135,
    "label": "calls",
    "to": 208
  }, {
    "from": 161,
    "label": "calls",
    "to": 208
  }, {
    "from": 166,
    "label": "calls",
    "to": 208
  }, {
    "from": 174,
    "label": "calls",
    "to": 208
  }, {
    "from": 2,
    "label": "calls",
    "to": 199
  }, {
    "from": 5,
    "label": "calls",
    "to": 199
  }, {
    "from": 13,
    "label": "calls",
    "to": 199
  }, {
    "from": 50,
    "label": "calls",
    "to": 199
  }, {
    "from": 188,
    "label": "calls",
    "to": 199
  }, {
    "from": 188,
    "label": "calls",
    "to": 199
  }, {
    "from": 188,
    "label": "calls",
    "to": 199
  }, {
    "from": 188,
    "label": "calls",
    "to": 199
  }, {
    "from": 91,
    "label": "calls",
    "to": 199
  }, {
    "from": 95,
    "label": "calls",
    "to": 199
  }, {
    "from": 109,
    "label": "calls",
    "to": 199
  }, {
    "from": 119,
    "label": "calls",
    "to": 199
  }, {
    "from": 126,
    "label": "calls",
    "to": 199
  }, {
    "from": 140,
    "label": "calls",
    "to": 199
  }, {
    "from": 161,
    "label": "calls",
    "to": 199
  }, {
    "from": 166,
    "label": "calls",
    "to": 199
  }, {
    "from": 174,
    "label": "calls",
    "to": 199
  }, {
    "from": 82,
    "label": "calls",
    "to": 79
  }, {
    "from": 159,
    "label": "calls",
    "to": 135
  }, {
    "from": 18,
    "label": "calls",
    "to": 7
  }, {
    "from": 21,
    "label": "calls",
    "to": 7
  }, {
    "from": 27,
    "label": "calls",
    "to": 7
  }, {
    "from": 29,
    "label": "calls",
    "to": 7
  }, {
    "from": 31,
    "label": "calls",
    "to": 7
  }, {
    "from": 50,
    "label": "calls",
    "to": 7
  }, {
    "from": 188,
    "label": "calls",
    "to": 7
  }, {
    "from": 188,
    "label": "calls",
    "to": 7
  }, {
    "from": 188,
    "label": "calls",
    "to": 7
  }, {
    "from": 188,
    "label": "calls",
    "to": 7
  }, {
    "from": 188,
    "label": "calls",
    "to": 7
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 35,
    "label": "calls",
    "to": 5
  }, {
    "from": 43,
    "label": "calls",
    "to": 5
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 50,
    "label": "calls",
    "to": 198
  }, {
    "from": 50,
    "label": "calls",
    "to": 68
  }, {
    "from": 174,
    "label": "calls",
    "to": 202
  }, {
    "from": 117,
    "label": "calls",
    "to": 126
  }, {
    "from": 130,
    "label": "calls",
    "to": 126
  }, {
    "from": 140,
    "label": "calls",
    "to": 126
  }, {
    "from": 43,
    "label": "calls",
    "to": 211
  }, {
    "from": 188,
    "label": "calls",
    "to": 211
  }, {
    "from": 98,
    "label": "calls",
    "to": 211
  }, {
    "from": 98,
    "label": "calls",
    "to": 211
  }, {
    "from": 109,
    "label": "calls",
    "to": 211
  }, {
    "from": 109,
    "label": "calls",
    "to": 211
  }, {
    "from": 33,
    "label": "calls",
    "to": 13
  }, {
    "from": 33,
    "label": "calls",
    "to": 13
  }, {
    "from": 43,
    "label": "calls",
    "to": 13
  }, {
    "from": 188,
    "label": "calls",
    "to": 13
  }, {
    "from": 82,
    "label": "calls",
    "to": 13
  }, {
    "from": 82,
    "label": "calls",
    "to": 13
  }, {
    "from": 109,
    "label": "calls",
    "to": 204
  }, {
    "from": 109,
    "label": "calls",
    "to": 204
  }, {
    "from": 166,
    "label": "calls",
    "to": 82
  }, {
    "from": 171,
    "label": "calls",
    "to": 147
  }, {
    "from": 126,
    "label": "calls",
    "to": 212
  }, {
    "from": 161,
    "label": "calls",
    "to": 50
  }, {
    "from": 130,
    "label": "calls",
    "to": 207
  }, {
    "from": 130,
    "label": "calls",
    "to": 207
  }, {
    "from": 98,
    "label": "calls",
    "to": 197
  }, {
    "from": 161,
    "label": "calls",
    "to": 209
  }, {
    "from": 166,
    "label": "calls",
    "to": 209
  }, {
    "from": 188,
    "label": "calls",
    "to": 210
  }, {
    "from": 188,
    "label": "calls",
    "to": 210
  }, {
    "from": 33,
    "label": "calls",
    "to": 31
  }, {
    "from": 135,
    "label": "calls",
    "to": 200
  }, {
    "from": 1,
    "label": "contains",
    "to": 188
  }, {
    "from": 188,
    "label": "declares",
    "to": 2
  }, {
    "from": 188,
    "label": "declares",
    "to": 5
  }, {
    "from": 188,
    "label": "declares",
    "to": 7
  }, {
    "from": 188,
    "label": "declares",
    "to": 13
  }, {
    "from": 188,
    "label": "declares",
    "to": 18
  }, {
    "from": 188,
    "label": "declares",
    "to": 21
  }, {
    "from": 188,
    "label": "declares",
    "to": 25
  }, {
    "from": 188,
    "label": "declares",
    "to": 27
  }, {
    "from": 188,
    "label": "declares",
    "to": 29
  }, {
    "from": 188,
    "label": "declares",
    "to": 31
  }, {
    "from": 188,
    "label": "declares",
    "to": 33
  }, {
    "from": 188,
    "label": "declares",
    "to": 35
  }, {
    "from": 188,
    "label": "declares",
    "to": 43
  }, {
    "from": 188,
    "label": "declares",
    "to": 50
  }, {
    "from": 188,
    "label": "declares",
    "to": 58
  }, {
    "from": 188,
    "label": "declares",
    "to": 68
  }, {
    "from": 188,
    "label": "declares",
    "to": 71
  }, {
    "from": 188,
    "label": "declares",
    "to": 79
  }, {
    "from": 188,
    "label": "declares",
    "to": 82
  }, {
    "from": 188,
    "label": "declares",
    "to": 85
  }, {
    "from": 188,
    "label": "declares",
    "to": 86
  }, {
    "from": 188,
    "label": "declares",
    "to": 87
  }, {
    "from": 188,
    "label": "declares",
    "to": 88
  }, {
    "from": 188,
    "label": "declares",
    "to": 91
  }, {
    "from": 188,
    "label": "declares",
    "to": 95
  }, {
    "from": 188,
    "label": "declares",
    "to": 98
  }, {
    "from": 188,
    "label": "declares",
    "to": 109
  }, {
    "from": 188,
    "label": "declares",
    "to": 117
  }, {
    "from": 188,
    "label": "declares",
    "to": 119
  }, {
    "from": 188,
    "label": "declares",
    "to": 126
  }, {
    "from": 188,
    "label": "declares",
    "to": 130
  }, {
    "from": 188,
    "label": "declares",
    "to": 135
  }, {
    "from": 188,
    "label": "declares",
    "to": 140
  }, {
    "from": 188,
    "label": "declares",
    "to": 147
  }, {
    "from": 188,
    "label": "declares",
    "to": 153
  }, {
    "from": 188,
    "label": "declares",
    "to": 155
  }, {
    "from": 188,
    "label": "declares",
    "to": 157
  }, {
    "from": 188,
    "label": "declares",
    "to": 159
  }, {
    "from": 188,
    "label": "declares",
    "to": 161
  }, {
    "from": 188,
    "label": "declares",
    "to": 166
  }, {
    "from": 188,
    "label": "declares",
    "to": 171
  }, {
    "from": 188,
    "label": "declares",
    "to": 174
  }, {
    "from": 188,
    "label": "declares",
    "to": 184
  }, {
    "from": 188,
    "label": "declares",
    "to": 186
  }, {
    "from": 1,
    "label": "contains",
    "to": 213
  }, {
    "from": 1,
    "label": "contains",
    "to": 214
  }, {
    "from": 213,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 213,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 213,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 213,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 213,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 213,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 213,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 213,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 213,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 213,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 213,
    "label": "initializes",
    "to": 235
  }, {
    "from": 235,
    "label": "assigns",
    "to": 236
  }, {
    "from": 213,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 213,
    "label": "initializes",
    "to": 239
  }, {
    "from": 239,
    "label": "assigns",
    "to": 240
  }, {
    "from": 213,
    "label": "initializes",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 213,
    "label": "initializes",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 213,
    "label": "initializes",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 213,
    "label": "initializes",
    "to": 247
  }, {
    "from": 213,
    "label": "initializes",
    "to": 248
  }, {
    "from": 248,
    "label": "assigns",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 250,
    "label": "assigns",
    "to": 251
  }, {
    "from": 249,
    "label": "assigns",
    "to": 252
  }, {
    "from": 252,
    "label": "assigns",
    "to": 253
  }, {
    "from": 249,
    "label": "assigns",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 249,
    "label": "assigns",
    "to": 256
  }, {
    "from": 256,
    "label": "assigns",
    "to": 257
  }, {
    "from": 249,
    "label": "assigns",
    "to": 258
  }, {
    "from": 258,
    "label": "assigns",
    "to": 259
  }, {
    "from": 249,
    "label": "assigns",
    "to": 260
  }, {
    "from": 260,
    "label": "assigns",
    "to": 261
  }, {
    "from": 249,
    "label": "assigns",
    "to": 262
  }, {
    "from": 262,
    "label": "assigns",
    "to": 263
  }, {
    "from": 249,
    "label": "assigns",
    "to": 264
  }, {
    "from": 264,
    "label": "assigns",
    "to": 265
  }, {
    "from": 249,
    "label": "assigns",
    "to": 266
  }, {
    "from": 266,
    "label": "assigns",
    "to": 267
  }, {
    "from": 213,
    "label": "initializes",
    "to": 268
  }, {
    "from": 213,
    "label": "initializes",
    "to": 269
  }, {
    "from": 213,
    "label": "initializes",
    "to": 270
  }, {
    "from": 270,
    "label": "assigns",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 272,
    "label": "assigns",
    "to": 273
  }, {
    "from": 271,
    "label": "assigns",
    "to": 274
  }, {
    "from": 274,
    "label": "assigns",
    "to": 275
  }, {
    "from": 271,
    "label": "assigns",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 271,
    "label": "assigns",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 271,
    "label": "assigns",
    "to": 280
  }, {
    "from": 280,
    "label": "assigns",
    "to": 281
  }, {
    "from": 271,
    "label": "assigns",
    "to": 282
  }, {
    "from": 282,
    "label": "assigns",
    "to": 283
  }, {
    "from": 271,
    "label": "assigns",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 271,
    "label": "assigns",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 271,
    "label": "assigns",
    "to": 288
  }, {
    "from": 288,
    "label": "assigns",
    "to": 289
  }, {
    "from": 271,
    "label": "assigns",
    "to": 290
  }, {
    "from": 290,
    "label": "assigns",
    "to": 291
  }, {
    "from": 271,
    "label": "assigns",
    "to": 292
  }, {
    "from": 292,
    "label": "assigns",
    "to": 293
  }, {
    "from": 271,
    "label": "assigns",
    "to": 294
  }, {
    "from": 294,
    "label": "assigns",
    "to": 295
  }, {
    "from": 271,
    "label": "assigns",
    "to": 296
  }, {
    "from": 296,
    "label": "assigns",
    "to": 297
  }, {
    "from": 271,
    "label": "assigns",
    "to": 298
  }, {
    "from": 298,
    "label": "assigns",
    "to": 299
  }, {
    "from": 213,
    "label": "initializes",
    "to": 300
  }, {
    "from": 300,
    "label": "assigns",
    "to": 301
  }, {
    "from": 213,
    "label": "initializes",
    "to": 302
  }, {
    "from": 213,
    "label": "initializes",
    "to": 303
  }, {
    "from": 213,
    "label": "initializes",
    "to": 304
  }, {
    "from": 213,
    "label": "initializes",
    "to": 305
  }, {
    "from": 213,
    "label": "initializes",
    "to": 306
  }, {
    "from": 213,
    "label": "initializes",
    "to": 307
  }, {
    "from": 213,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 213,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 213,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 213,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 213,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 213,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 213,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 213,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 213,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 213,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 214,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "requires",
    "to": 329
  }, {
    "from": 214,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "requires",
    "to": 331
  }, {
    "from": 300,
    "label": "contains",
    "to": 85
  }, {
    "from": 300,
    "label": "contains",
    "to": 86
  }, {
    "from": 300,
    "label": "contains",
    "to": 87
  }, {
    "from": 300,
    "label": "contains",
    "to": 88
  }, {
    "from": 300,
    "label": "contains",
    "to": 91
  }, {
    "from": 300,
    "label": "contains",
    "to": 98
  }, {
    "from": 300,
    "label": "contains",
    "to": 109
  }, {
    "from": 300,
    "label": "contains",
    "to": 117
  }, {
    "from": 300,
    "label": "contains",
    "to": 126
  }, {
    "from": 300,
    "label": "contains",
    "to": 130
  }, {
    "from": 300,
    "label": "contains",
    "to": 135
  }, {
    "from": 300,
    "label": "contains",
    "to": 140
  }, {
    "from": 300,
    "label": "contains",
    "to": 147
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "init",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function trim (s)\r\n\treturn (type(s) == \"string\" and gsub (s, \"^%s*(.-)%s*$\", \"%1\"))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function is_space (s)\r\n\treturn type(s) == \"string\" and trim(s) == \"\"\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function next_nonspace (tab, i)\r\n\tif not i then i = 1 end\r\n\twhile is_space (tab[i]) do i = i+1 end\r\n\treturn tab[i], i\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if not i then i = 1 end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "i = 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "while is_space (tab[i]) do i = i+1 end",
    "type": "statement:while"
  }, {
    "id": 11,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function next_tag (tab, tag, i)\r\n\tif not i then i = 1 end\r\n\twhile tab[i] do\r\n\t\tif type (tab[i]) == \"table\" and tab[i].tag == tag then\r\n\t\t\treturn tab[i], i\r\n\t\tend\r\n\t\ti = i + 1\r\n\tend\r\n\treturn nil, i\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "while tab[i] do\r\n\t\tif type (tab[i]) == \"table\" and tab[i].tag == tag then\r\n\t\t\treturn tab[i], i\r\n\t\tend\r\n\t\ti = i + 1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 15,
    "text": "if type (tab[i]) == \"table\" and tab[i].tag == tag then\r\n\t\t\treturn tab[i], i\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function x2number (tab)\r\n\tif tab.tag == \"int\" or tab.tag == \"i4\" or tab.tag == \"double\" then\r\n\t\treturn tonumber (next_nonspace (tab, 1), 10)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if tab.tag == \"int\" or tab.tag == \"i4\" or tab.tag == \"double\" then\r\n\t\treturn tonumber (next_nonspace (tab, 1), 10)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function x2boolean (tab)\r\n\tif tab.tag == \"boolean\" then\r\n\t\tlocal v = next_nonspace (tab, 1)\r\n\t\treturn v == true or v == \"true\" or tonumber (v) == 1 or false\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "if tab.tag == \"boolean\" then\r\n\t\tlocal v = next_nonspace (tab, 1)\r\n\t\treturn v == true or v == \"true\" or tonumber (v) == 1 or false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local v = next_nonspace (tab, 1)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function x2string (tab)\r\n\treturn tab.tag == \"string\" and (tab[1] or \"\")\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function x2date (tab)\r\n\treturn tab.tag == \"dateTime.iso8601\" and next_nonspace (tab, 1)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function x2base64 (tab)\r\n\treturn tab.tag == \"base64\" and next_nonspace (tab, 1)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function x2name (tab)\r\n\treturn tab.tag == \"name\" and next_nonspace (tab, 1)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function x2member (tab)\r\n\treturn\r\n\t\tx2name (next_tag(tab,\"name\")),\r\n\t\tx2value (next_tag(tab,\"value\"))\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function x2struct (tab)\r\n\tif tab.tag == \"struct\" then\r\n\t\tlocal res = {}\r\n\t\tfor i = 1, #tab do\r\n\t\t\tif not is_space (tab[i]) then\r\n\t\t\t\tlocal name, val = x2member (tab[i])\r\n\t\t\t\tres[name] = val\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn res\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "if tab.tag == \"struct\" then\r\n\t\tlocal res = {}\r\n\t\tfor i = 1, #tab do\r\n\t\t\tif not is_space (tab[i]) then\r\n\t\t\t\tlocal name, val = x2member (tab[i])\r\n\t\t\t\tres[name] = val\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn res\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "for i = 1, #tab do\r\n\t\t\tif not is_space (tab[i]) then\r\n\t\t\t\tlocal name, val = x2member (tab[i])\r\n\t\t\t\tres[name] = val\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 39,
    "text": "if not is_space (tab[i]) then\r\n\t\t\t\tlocal name, val = x2member (tab[i])\r\n\t\t\t\tres[name] = val\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local name, val = x2member (tab[i])",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "res[name] = val",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function x2array (tab)\r\n\tif tab.tag == \"array\" then\r\n\t\tlocal d = next_tag (tab, \"data\")\r\n\t\tlocal res = {}\r\n\t\tfor i = 1, #d do\r\n\t\t\tif not is_space (d[i]) then\r\n\t\t\t\ttinsert (res, x2value (d[i]))\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn res\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "if tab.tag == \"array\" then\r\n\t\tlocal d = next_tag (tab, \"data\")\r\n\t\tlocal res = {}\r\n\t\tfor i = 1, #d do\r\n\t\t\tif not is_space (d[i]) then\r\n\t\t\t\ttinsert (res, x2value (d[i]))\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn res\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local d = next_tag (tab, \"data\")",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "for i = 1, #d do\r\n\t\t\tif not is_space (d[i]) then\r\n\t\t\t\ttinsert (res, x2value (d[i]))\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 47,
    "text": "if not is_space (d[i]) then\r\n\t\t\t\ttinsert (res, x2value (d[i]))\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "tinsert (res, x2value (d[i]))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function x2methodResponse (tab)\r\n\tassert (type(tab) == \"table\", \"Not a table\")\r\n\tassert (tab.tag == \"methodResponse\",\r\n\t\t\"Not a `methodResponse' tag: \"..tab.tag)\r\n\tlocal t = next_nonspace (tab, 1)\r\n\tif t.tag == \"params\" then\r\n\t\treturn true, unpack (x2param (t))\r\n\telseif t.tag == \"fault\" then\r\n\t\tlocal f = x2fault (t)\r\n\t\treturn false, f.faultString, f.faultCode\r\n\telse\r\n\t\terror (\"Couldn't find a <params> nor a <fault> element\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "assert (type(tab) == \"table\", \"Not a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert (tab.tag == \"methodResponse\",\r\n\t\t\"Not a `methodResponse' tag: \"..tab.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local t = next_nonspace (tab, 1)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if t.tag == \"params\" then\r\n\t\treturn true, unpack (x2param (t))\r\n\telseif t.tag == \"fault\" then\r\n\t\tlocal f = x2fault (t)\r\n\t\treturn false, f.faultString, f.faultCode\r\n\telse\r\n\t\terror (\"Couldn't find a <params> nor a <fault> element\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local f = x2fault (t)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "error (\"Couldn't find a <params> nor a <fault> element\")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function (tab)\r\n\tlocal t = tab.tag\r\n\tassert (t == \"value\", \"Not a `value' tag: \"..t)\r\n\tlocal n = next_nonspace (tab)\r\n\tif type(n) == \"string\" or type(n) == \"number\" then\r\n\t\treturn n\r\n\telseif type (n) == \"table\" then\r\n\t\tlocal t = n.tag\r\n\t\tlocal get = xmlrpc_types[t]\r\n\t\tif not get then error (\"Invalid <\"..t..\"> element\") end\r\n\t\treturn get (next_nonspace (tab))\r\n        elseif type(n) == \"nil\" then\r\n                -- the next best thing is to assume it's an empty string\r\n               return \"\"\r\n\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local t = tab.tag",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "assert (t == \"value\", \"Not a `value' tag: \"..t)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "local n = next_nonspace (tab)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if type(n) == \"string\" or type(n) == \"number\" then\r\n\t\treturn n\r\n\telseif type (n) == \"table\" then\r\n\t\tlocal t = n.tag\r\n\t\tlocal get = xmlrpc_types[t]\r\n\t\tif not get then error (\"Invalid <\"..t..\"> element\") end\r\n\t\treturn get (next_nonspace (tab))\r\n        elseif type(n) == \"nil\" then\r\n                -- the next best thing is to assume it's an empty string\r\n               return \"\"\r\n\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local t = n.tag",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local get = xmlrpc_types[t]",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if not get then error (\"Invalid <\"..t..\"> element\") end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "error (\"Invalid <\"..t..\"> element\")",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function (tab)\r\n\tassert (tab.tag == \"fault\", \"Not a `fault' tag: \"..tab.tag)\r\n\treturn x2value (next_nonspace (tab))\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "assert (tab.tag == \"fault\", \"Not a `fault' tag: \"..tab.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function (tab)\r\n\tassert (tab.tag == \"params\", \"Not a `params' tag\")\r\n\tlocal res = {}\r\n\tlocal p, i = next_nonspace (tab, 1)\r\n\twhile p do\r\n\t\tif p.tag == \"param\" then\r\n\t\t\ttinsert (res, x2value (next_tag (p, \"value\")))\r\n\t\tend\r\n\t\tp, i = next_nonspace (tab, i+1)\r\n\tend\r\n\treturn res\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "assert (tab.tag == \"params\", \"Not a `params' tag\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "local p, i = next_nonspace (tab, 1)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "while p do\r\n\t\tif p.tag == \"param\" then\r\n\t\t\ttinsert (res, x2value (next_tag (p, \"value\")))\r\n\t\tend\r\n\t\tp, i = next_nonspace (tab, i+1)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 75,
    "text": "if p.tag == \"param\" then\r\n\t\t\ttinsert (res, x2value (next_tag (p, \"value\")))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "tinsert (res, x2value (next_tag (p, \"value\")))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "p, i = next_nonspace (tab, i+1)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "local function x2methodName (tab)\r\n\tassert (tab.tag == \"methodName\", \"Not a `methodName' tag: \"..tab.tag)\r\n\treturn (next_nonspace (tab, 1))\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "assert (tab.tag == \"methodName\", \"Not a `methodName' tag: \"..tab.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function x2methodCall (tab)\r\n\tassert (tab.tag == \"methodCall\", \"Not a `methodCall' tag: \"..tab.tag)\r\n\treturn\r\n\t\tx2methodName (next_tag (tab,\"methodName\")),\r\n\t\tx2param (next_tag (tab,\"params\"))\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "assert (tab.tag == \"methodCall\", \"Not a `methodCall' tag: \"..tab.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function (v,t) return format (formats.double, v) end",
    "type": "function"
  }, {
    "id": 86,
    "text": "function (v,t) return format (formats.int, v) end",
    "type": "function"
  }, {
    "id": 87,
    "text": "function (v,t) return format (formats.string, v) end",
    "type": "function"
  }, {
    "id": 88,
    "text": "function toxml.boolean (v)\r\n\tlocal n = (v and 1) or 0\r\n\treturn format (formats.boolean, n)\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "local n = (v and 1) or 0",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function toxml.number (v, t)\r\n\tlocal tt = (type(t) == \"table\") and t[\"*type\"]\r\n\tif tt == \"int\" or tt == \"i4\" then\r\n\t\treturn toxml.int (v, t)\r\n\telseif tt == \"double\" then\r\n\t\treturn toxml.double (v, t)\r\n\telseif v == ceil(v) then\r\n\t\treturn toxml.int (v, t)\r\n\telse\r\n\t\treturn toxml.double (v, t)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "local tt = (type(t) == \"table\") and t[\"*type\"]",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if tt == \"int\" or tt == \"i4\" then\r\n\t\treturn toxml.int (v, t)\r\n\telseif tt == \"double\" then\r\n\t\treturn toxml.double (v, t)\r\n\telseif v == ceil(v) then\r\n\t\treturn toxml.int (v, t)\r\n\telse\r\n\t\treturn toxml.double (v, t)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "local function format_func (typ)\r\n\tif type (typ) == \"table\" then\r\n\t\treturn toxml[typ.type]\r\n\telse\r\n\t\treturn toxml[typ]\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "if type (typ) == \"table\" then\r\n\t\treturn toxml[typ.type]\r\n\telse\r\n\t\treturn toxml[typ]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function toxml.array (val, typ)\r\n\tlocal ret = {}\r\n\tlocal et = typ.elemtype\r\n\tlocal f = format_func (et)\r\n\tfor i,v in ipairs (val) do\r\n\t\tif et and et ~= \"array\" then\r\n\t\t\ttinsert (ret, format (formats.value, f (v, et)))\r\n\t\telse\r\n\t\t\tlocal ct,cv = type_val(v)\r\n\t\t\tlocal cf = format_func(ct)\r\n\t\t\ttinsert (ret, format (formats.value, cf(cv, ct)))\r\n\t\tend\r\n\r\n\tend\r\n\treturn format (formats.array, concat (ret, '\\n'))\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "local ret = {}",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local et = typ.elemtype",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local f = format_func (et)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "for i,v in ipairs (val) do\r\n\t\tif et and et ~= \"array\" then\r\n\t\t\ttinsert (ret, format (formats.value, f (v, et)))\r\n\t\telse\r\n\t\t\tlocal ct,cv = type_val(v)\r\n\t\t\tlocal cf = format_func(ct)\r\n\t\t\ttinsert (ret, format (formats.value, cf(cv, ct)))\r\n\t\tend\r\n\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 103,
    "text": "if et and et ~= \"array\" then\r\n\t\t\ttinsert (ret, format (formats.value, f (v, et)))\r\n\t\telse\r\n\t\t\tlocal ct,cv = type_val(v)\r\n\t\t\tlocal cf = format_func(ct)\r\n\t\t\ttinsert (ret, format (formats.value, cf(cv, ct)))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "tinsert (ret, format (formats.value, f (v, et)))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "local ct,cv = type_val(v)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local cf = format_func(ct)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "tinsert (ret, format (formats.value, cf(cv, ct)))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function toxml.struct (val, typ)\r\n\tlocal ret = {}\r\n\tif type (typ) == \"table\" then\r\n\t\tfor n,t in pairs (typ.elemtype) do\r\n\t\t\tlocal f = format_func (t)\r\n\t\t\ttinsert (ret, format (formats.member, n, f (val[n], t)))\r\n\t\tend\r\n\telse\r\n\t\tfor i, v in pairs (val) do\r\n\t\t\ttinsert (ret, toxml.member (i, v))\r\n\t\tend\r\n\tend\r\n\treturn format (formats.struct, concat (ret))\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "if type (typ) == \"table\" then\r\n\t\tfor n,t in pairs (typ.elemtype) do\r\n\t\t\tlocal f = format_func (t)\r\n\t\t\ttinsert (ret, format (formats.member, n, f (val[n], t)))\r\n\t\tend\r\n\telse\r\n\t\tfor i, v in pairs (val) do\r\n\t\t\ttinsert (ret, toxml.member (i, v))\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "for n,t in pairs (typ.elemtype) do\r\n\t\t\tlocal f = format_func (t)\r\n\t\t\ttinsert (ret, format (formats.member, n, f (val[n], t)))\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 112,
    "text": "local f = format_func (t)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "tinsert (ret, format (formats.member, n, f (val[n], t)))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "for i, v in pairs (val) do\r\n\t\t\ttinsert (ret, toxml.member (i, v))\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 115,
    "text": "tinsert (ret, toxml.member (i, v))",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function toxml.member (n, v)\r\n\treturn format (formats.member, n, toxml.value (v))\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function type_val (obj)\r\n\tlocal t = type (obj)\r\n\tlocal v = obj\r\n\tif t == \"table\" then\r\n\t\tt = obj[\"*type\"] or \"table\"\r\n\t\tv = obj[\"*value\"] or obj\r\n\tend\r\n\treturn t, v\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local t = type (obj)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local v = obj",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if t == \"table\" then\r\n\t\tt = obj[\"*type\"] or \"table\"\r\n\t\tv = obj[\"*value\"] or obj\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "t = obj[\"*type\"] or \"table\"",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "v = obj[\"*value\"] or obj",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function toxml.value (obj)\r\n\tlocal to, val = type_val (obj)\r\n\tif type(to) == \"table\" then\r\n\t\treturn format (formats.value, toxml[to.type] (val, to))\r\n\telse\r\n\t\t-- primitive (not structured) types.\r\n\t\t--return format (formats[to], val)\r\n\t\treturn format (formats.value, toxml[to] (val, to))\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "local to, val = type_val (obj)",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "if type(to) == \"table\" then\r\n\t\treturn format (formats.value, toxml[to.type] (val, to))\r\n\telse\r\n\t\t-- primitive (not structured) types.\r\n\t\t--return format (formats[to], val)\r\n\t\treturn format (formats.value, toxml[to] (val, to))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function toxml.params (...)\r\n\tlocal params_list = {}\r\n\tfor i = 1, select (\"#\", ...) do\r\n\t\tparams_list[i] = format (formats.param, toxml.value (select (i, ...)))\r\n\tend\r\n\treturn format (formats.params, concat (params_list, '\\n      '))\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "local params_list = {}",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "for i = 1, select (\"#\", ...) do\r\n\t\tparams_list[i] = format (formats.param, toxml.value (select (i, ...)))\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 133,
    "text": "params_list[i] = format (formats.param, toxml.value (select (i, ...)))",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function toxml.methodCall (method, ...)\r\n\tlocal idx = strfind (method, \"[^A-Za-z_.:/0-9]\")\r\n\tif idx then\r\n\t\terror (format (\"Invalid character `%s'\", strsub (method, idx, idx)))\r\n\tend\r\n\treturn format (formats.methodCall, method, toxml.params (...))\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local idx = strfind (method, \"[^A-Za-z_.:/0-9]\")",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if idx then\r\n\t\terror (format (\"Invalid character `%s'\", strsub (method, idx, idx)))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "error (format (\"Invalid character `%s'\", strsub (method, idx, idx)))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function toxml.fault (err)\r\n\tlocal code\r\n\tlocal message = err\r\n\tif type (err) == \"table\" then\r\n\t\tcode = err.code\r\n\t\tmessage = err.message\r\n\tend\r\n\treturn format (formats.fault, toxml.value {\r\n\t\tfaultCode = { [\"*type\"] = \"int\", [\"*value\"] = code or err.faultCode or 1 },\r\n\t\tfaultString = message or err.faultString or \"fatal error\",\r\n\t})\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "local code",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "local message = err",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "if type (err) == \"table\" then\r\n\t\tcode = err.code\r\n\t\tmessage = err.message\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "code = err.code",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "message = err.message",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function toxml.methodResponse (ok, params)\r\n\tlocal resp\r\n\tif ok then\r\n\t\tresp = toxml.params (params)\r\n\telse\r\n\t\tresp = toxml.fault (params)\r\n\tend\r\n\treturn format (formats.methodResponse, resp)\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "local resp",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "if ok then\r\n\t\tresp = toxml.params (params)\r\n\telse\r\n\t\tresp = toxml.fault (params)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "resp = toxml.params (params)",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "resp = toxml.fault (params)",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function newArray (elemtype)\r\n\treturn { type = \"array\", elemtype = elemtype, }\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function newStruct (members)\r\n\treturn { type = \"struct\", elemtype = members, }\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function newTypedValue (val, typ)\r\n\treturn { [\"*type\"] = typ, [\"*value\"] = val }\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function clEncode (method, ...)\r\n\treturn toxml.methodCall (method, ...)\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function clDecode (meth_resp)\r\n\tlocal d = parse (meth_resp)\r\n\tif type(d) ~= \"table\" then\r\n\t\terror (\"Not an XML document: \"..meth_resp)\r\n\tend\r\n\treturn x2methodResponse (d)\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local d = parse (meth_resp)",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "if type(d) ~= \"table\" then\r\n\t\terror (\"Not an XML document: \"..meth_resp)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "error (\"Not an XML document: \"..meth_resp)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function srvDecode (request)\r\n\tlocal d = parse (request)\r\n\tif type(d) ~= \"table\" then\r\n\t\terror (\"Not an XML document: \"..request)\r\n\tend\r\n\treturn x2methodCall (d)\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "local d = parse (request)",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "if type(d) ~= \"table\" then\r\n\t\terror (\"Not an XML document: \"..request)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "error (\"Not an XML document: \"..request)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function srvEncode (obj, is_fault)\r\n\tlocal ok = not (is_fault or false)\r\n\treturn toxml.methodResponse (ok, obj)\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "local ok = not (is_fault or false)",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function srvMethods (tab_or_func)\r\n\tlocal t = type (tab_or_func)\r\n\tif t == \"function\" then\r\n\t\tdispatch = tab_or_func\r\n\telseif t == \"table\" then\r\n\t\tdispatch = function (name)\r\n\t\t\tlocal ok, _, obj, method = strfind (name, \"^([^.]+)%.(.+)$\")\r\n\t\t\tif not ok then\r\n\t\t\t\treturn tab_or_func[name]\r\n\t\t\telse\r\n\t\t\t\tif tab_or_func[obj] and tab_or_func[obj][method] then\r\n\t\t\t\t\treturn function (...)\r\n\t\t\t\t\t\treturn tab_or_func[obj][method] (obj, ...)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\treturn nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\telse\r\n\t\terror (\"Argument is neither a table nor a function\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "local t = type (tab_or_func)",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "if t == \"function\" then\r\n\t\tdispatch = tab_or_func\r\n\telseif t == \"table\" then\r\n\t\tdispatch = function (name)\r\n\t\t\tlocal ok, _, obj, method = strfind (name, \"^([^.]+)%.(.+)$\")\r\n\t\t\tif not ok then\r\n\t\t\t\treturn tab_or_func[name]\r\n\t\t\telse\r\n\t\t\t\tif tab_or_func[obj] and tab_or_func[obj][method] then\r\n\t\t\t\t\treturn function (...)\r\n\t\t\t\t\t\treturn tab_or_func[obj][method] (obj, ...)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\treturn nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\telse\r\n\t\terror (\"Argument is neither a table nor a function\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "dispatch = tab_or_func",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "dispatch = function (name)\r\n\t\t\tlocal ok, _, obj, method = strfind (name, \"^([^.]+)%.(.+)$\")\r\n\t\t\tif not ok then\r\n\t\t\t\treturn tab_or_func[name]\r\n\t\t\telse\r\n\t\t\t\tif tab_or_func[obj] and tab_or_func[obj][method] then\r\n\t\t\t\t\treturn function (...)\r\n\t\t\t\t\t\treturn tab_or_func[obj][method] (obj, ...)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\treturn nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "local ok, _, obj, method = strfind (name, \"^([^.]+)%.(.+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "if not ok then\r\n\t\t\t\treturn tab_or_func[name]\r\n\t\t\telse\r\n\t\t\t\tif tab_or_func[obj] and tab_or_func[obj][method] then\r\n\t\t\t\t\treturn function (...)\r\n\t\t\t\t\t\treturn tab_or_func[obj][method] (obj, ...)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\treturn nil\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "if tab_or_func[obj] and tab_or_func[obj][method] then\r\n\t\t\t\t\treturn function (...)\r\n\t\t\t\t\t\treturn tab_or_func[obj][method] (obj, ...)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\treturn nil\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "error (\"Argument is neither a table nor a function\")",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function (name)\r\n\t\t\tlocal ok, _, obj, method = strfind (name, \"^([^.]+)%.(.+)$\")\r\n\t\t\tif not ok then\r\n\t\t\t\treturn tab_or_func[name]\r\n\t\t\telse\r\n\t\t\t\tif tab_or_func[obj] and tab_or_func[obj][method] then\r\n\t\t\t\t\treturn function (...)\r\n\t\t\t\t\t\treturn tab_or_func[obj][method] (obj, ...)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\treturn nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function (...)\r\n\t\t\t\t\t\treturn tab_or_func[obj][method] (obj, ...)\r\n\t\t\t\t\tend",
    "type": "function"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "",
    "type": "function container"
  }, {
    "id": 189,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 190,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 191,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 192,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 193,
    "text": "toxml[to]",
    "type": "global function"
  }, {
    "id": 194,
    "text": "module",
    "type": "global function"
  }, {
    "id": 195,
    "text": "f",
    "type": "global function"
  }, {
    "id": 196,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 197,
    "text": "cf",
    "type": "global function"
  }, {
    "id": 198,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 199,
    "text": "type",
    "type": "global function"
  }, {
    "id": 200,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 201,
    "text": "get",
    "type": "global function"
  }, {
    "id": 202,
    "text": "tab_or_func[obj][method]",
    "type": "global function"
  }, {
    "id": 203,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 204,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 205,
    "text": "format",
    "type": "global function"
  }, {
    "id": 206,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 207,
    "text": "select",
    "type": "global function"
  }, {
    "id": 208,
    "text": "error",
    "type": "global function"
  }, {
    "id": 209,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 210,
    "text": "require",
    "type": "global function"
  }, {
    "id": 211,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 212,
    "text": "type]",
    "type": "global function"
  }, {
    "id": 213,
    "text": "",
    "type": "variable container"
  }, {
    "id": 214,
    "text": "",
    "type": "require container"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "n/a"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "n/a"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "n/a"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "n/a"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "n/a"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "n/a"
  }, {
    "id": 229,
    "text": "",
    "type": "local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "n/a"
  }, {
    "id": 233,
    "text": "",
    "type": "local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "n/a"
  }, {
    "id": 235,
    "text": "",
    "type": "local variable"
  }, {
    "id": 236,
    "text": "",
    "type": "n/a"
  }, {
    "id": 237,
    "text": "",
    "type": "local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "n/a"
  }, {
    "id": 239,
    "text": "",
    "type": "local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "n/a"
  }, {
    "id": 241,
    "text": "",
    "type": "local variable"
  }, {
    "id": 242,
    "text": "",
    "type": "n/a"
  }, {
    "id": 243,
    "text": "",
    "type": "local variable"
  }, {
    "id": 244,
    "text": "",
    "type": "n/a"
  }, {
    "id": 245,
    "text": "",
    "type": "local variable"
  }, {
    "id": 246,
    "text": "",
    "type": "n/a"
  }, {
    "id": 247,
    "text": "",
    "type": "local variable"
  }, {
    "id": 248,
    "text": "",
    "type": "local variable"
  }, {
    "id": 249,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 250,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 251,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 252,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 253,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 254,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 255,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 256,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 257,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 258,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 259,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 260,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 261,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 262,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 263,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 264,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 265,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 266,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 267,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 268,
    "text": "",
    "type": "local variable"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 272,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 273,
    "text": "",
    "type": "string"
  }, {
    "id": 274,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 275,
    "text": "",
    "type": "string"
  }, {
    "id": 276,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 277,
    "text": "",
    "type": "string"
  }, {
    "id": 278,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 279,
    "text": "",
    "type": "string"
  }, {
    "id": 280,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 281,
    "text": "",
    "type": "string"
  }, {
    "id": 282,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 283,
    "text": "",
    "type": "string"
  }, {
    "id": 284,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 285,
    "text": "",
    "type": "string"
  }, {
    "id": 286,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 287,
    "text": "",
    "type": "string"
  }, {
    "id": 288,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 289,
    "text": "",
    "type": "string"
  }, {
    "id": 290,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 291,
    "text": "",
    "type": "string"
  }, {
    "id": 292,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 293,
    "text": "",
    "type": "string"
  }, {
    "id": 294,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 295,
    "text": "",
    "type": "string"
  }, {
    "id": 296,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 297,
    "text": "",
    "type": "string"
  }, {
    "id": 298,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 299,
    "text": "",
    "type": "string"
  }, {
    "id": 300,
    "text": "",
    "type": "local variable"
  }, {
    "id": 301,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 302,
    "text": "",
    "type": "global variable"
  }, {
    "id": 303,
    "text": "",
    "type": "global variable"
  }, {
    "id": 304,
    "text": "",
    "type": "global variable"
  }, {
    "id": 305,
    "text": "",
    "type": "global variable"
  }, {
    "id": 306,
    "text": "",
    "type": "global variable"
  }, {
    "id": 307,
    "text": "",
    "type": "global variable"
  }, {
    "id": 308,
    "text": "",
    "type": "global variable"
  }, {
    "id": 309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 310,
    "text": "",
    "type": "global variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "global variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "global variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "global variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "global variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "global variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "global variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "global variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "global variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 329,
    "text": "lxp",
    "type": "module"
  }, {
    "id": 330,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 331,
    "text": "lom",
    "type": "module"
  } ]
}