{
  "_filename": "globbing_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/globbing_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 10
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 13
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 16
  }, {
    "from": 63,
    "label": "has",
    "to": 17
  }, {
    "from": 63,
    "label": "has",
    "to": 18
  }, {
    "from": 63,
    "label": "has",
    "to": 19
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 22
  }, {
    "from": 64,
    "label": "has",
    "to": 23
  }, {
    "from": 64,
    "label": "has",
    "to": 24
  }, {
    "from": 64,
    "label": "has",
    "to": 25
  }, {
    "from": 64,
    "label": "has",
    "to": 26
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 29
  }, {
    "from": 65,
    "label": "has",
    "to": 30
  }, {
    "from": 65,
    "label": "has",
    "to": 31
  }, {
    "from": 58,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 34
  }, {
    "from": 66,
    "label": "has",
    "to": 35
  }, {
    "from": 66,
    "label": "has",
    "to": 36
  }, {
    "from": 58,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 39
  }, {
    "from": 67,
    "label": "has",
    "to": 40
  }, {
    "from": 67,
    "label": "has",
    "to": 41
  }, {
    "from": 58,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 44
  }, {
    "from": 68,
    "label": "has",
    "to": 45
  }, {
    "from": 68,
    "label": "has",
    "to": 46
  }, {
    "from": 58,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 49
  }, {
    "from": 69,
    "label": "has",
    "to": 50
  }, {
    "from": 69,
    "label": "has",
    "to": 51
  }, {
    "from": 69,
    "label": "has",
    "to": 52
  }, {
    "from": 69,
    "label": "has",
    "to": 53
  }, {
    "from": 69,
    "label": "has",
    "to": 54
  }, {
    "from": 69,
    "label": "has",
    "to": 55
  }, {
    "from": 69,
    "label": "has",
    "to": 56
  }, {
    "from": 58,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 4
  }, {
    "from": 72,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 7
  }, {
    "from": 72,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 10
  }, {
    "from": 72,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 13
  }, {
    "from": 72,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 16
  }, {
    "from": 63,
    "label": "has",
    "to": 17
  }, {
    "from": 63,
    "label": "has",
    "to": 18
  }, {
    "from": 63,
    "label": "has",
    "to": 19
  }, {
    "from": 72,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 22
  }, {
    "from": 64,
    "label": "has",
    "to": 23
  }, {
    "from": 64,
    "label": "has",
    "to": 24
  }, {
    "from": 64,
    "label": "has",
    "to": 25
  }, {
    "from": 64,
    "label": "has",
    "to": 26
  }, {
    "from": 72,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 29
  }, {
    "from": 65,
    "label": "has",
    "to": 30
  }, {
    "from": 65,
    "label": "has",
    "to": 31
  }, {
    "from": 72,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 34
  }, {
    "from": 66,
    "label": "has",
    "to": 35
  }, {
    "from": 66,
    "label": "has",
    "to": 36
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 39
  }, {
    "from": 67,
    "label": "has",
    "to": 40
  }, {
    "from": 67,
    "label": "has",
    "to": 41
  }, {
    "from": 72,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 44
  }, {
    "from": 68,
    "label": "has",
    "to": 45
  }, {
    "from": 68,
    "label": "has",
    "to": 46
  }, {
    "from": 72,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 49
  }, {
    "from": 69,
    "label": "has",
    "to": 50
  }, {
    "from": 69,
    "label": "has",
    "to": 51
  }, {
    "from": 69,
    "label": "has",
    "to": 52
  }, {
    "from": 69,
    "label": "has",
    "to": 53
  }, {
    "from": 69,
    "label": "has",
    "to": 54
  }, {
    "from": 69,
    "label": "has",
    "to": 55
  }, {
    "from": 69,
    "label": "has",
    "to": 56
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 78
  }, {
    "from": 74,
    "label": "calls",
    "to": 78
  }, {
    "from": 74,
    "label": "calls",
    "to": 76
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 74,
    "label": "declares",
    "to": 3
  }, {
    "from": 74,
    "label": "declares",
    "to": 6
  }, {
    "from": 74,
    "label": "declares",
    "to": 9
  }, {
    "from": 74,
    "label": "declares",
    "to": 12
  }, {
    "from": 74,
    "label": "declares",
    "to": 15
  }, {
    "from": 74,
    "label": "declares",
    "to": 21
  }, {
    "from": 74,
    "label": "declares",
    "to": 28
  }, {
    "from": 74,
    "label": "declares",
    "to": 33
  }, {
    "from": 74,
    "label": "declares",
    "to": 38
  }, {
    "from": 74,
    "label": "declares",
    "to": 43
  }, {
    "from": 74,
    "label": "declares",
    "to": 48
  }, {
    "from": 74,
    "label": "declares",
    "to": 58
  }, {
    "from": 74,
    "label": "declares",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 82,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 2
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 58
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "globbing_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "globbing",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar\"))\r\n      end",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert.is_true(globbing.match(\"foo/bar\", \"foo/bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function()\r\n         assert.is_true(globbing.match(\"foo//bar/baz/..\", \"./foo/bar/\"))\r\n      end",
    "type": "function"
  }, {
    "id": 7,
    "text": "assert.is_true(globbing.match(\"foo//bar/baz/..\", \"./foo/bar/\"))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function()\r\n         assert.is_false(globbing.match(\"foo/bar\", \"foo/baz\"))\r\n      end",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert.is_false(globbing.match(\"foo/bar\", \"foo/baz\"))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar/baz\"))\r\n      end",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert.is_true(globbing.match(\"foo/bar\", \"foo/bar/baz\"))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n         assert.is_true(globbing.match(\"*\", \"foo\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar/baz\"))\r\n         assert.is_false(globbing.match(\"foo/*r\", \"foo/baz\"))\r\n      end",
    "type": "function"
  }, {
    "id": 16,
    "text": "assert.is_true(globbing.match(\"*\", \"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert.is_true(globbing.match(\"foo/*r\", \"foo/bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert.is_true(globbing.match(\"foo/*r\", \"foo/bar/baz\"))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.is_false(globbing.match(\"foo/*r\", \"foo/baz\"))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function()\r\n         assert.is_false(globbing.match(\"?\", \"foo\"))\r\n         assert.is_true(globbing.match(\"???\", \"foo\"))\r\n         assert.is_true(globbing.match(\"????\", \"foo\"))\r\n         assert.is_true(globbing.match(\"f?o/?a?\", \"foo/bar\"))\r\n         assert.is_false(globbing.match(\"f?o/?a?\", \"foo/abc\"))\r\n      end",
    "type": "function"
  }, {
    "id": 22,
    "text": "assert.is_false(globbing.match(\"?\", \"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.is_true(globbing.match(\"???\", \"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert.is_true(globbing.match(\"????\", \"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert.is_true(globbing.match(\"f?o/?a?\", \"foo/bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert.is_false(globbing.match(\"f?o/?a?\", \"foo/abc\"))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n         assert.is_true(globbing.match(\"[d-h]o[something]\", \"foo\"))\r\n         assert.is_false(globbing.match(\"[d-h]o[somewhere]\", \"bar\"))\r\n         assert.is_false(globbing.match(\"[.-h]o[i-z]\", \"bar\"))\r\n      end",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert.is_true(globbing.match(\"[d-h]o[something]\", \"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert.is_false(globbing.match(\"[d-h]o[somewhere]\", \"bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_false(globbing.match(\"[.-h]o[i-z]\", \"bar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n         assert.is_true(globbing.match(\"[]]\", \"]\"))\r\n         assert.is_false(globbing.match(\"[]]\", \"[\"))\r\n         assert.is_true(globbing.match(\"[]foo][]foo][]foo]\", \"foo\"))\r\n      end",
    "type": "function"
  }, {
    "id": 34,
    "text": "assert.is_true(globbing.match(\"[]]\", \"]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert.is_false(globbing.match(\"[]]\", \"[\"))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.is_true(globbing.match(\"[]foo][]foo][]foo]\", \"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n         assert.is_true(globbing.match(\"[-]\", \"-\"))\r\n         assert.is_false(globbing.match(\"[-]\", \"+\"))\r\n         assert.is_true(globbing.match(\"[---]\", \"-\"))\r\n      end",
    "type": "function"
  }, {
    "id": 39,
    "text": "assert.is_true(globbing.match(\"[-]\", \"-\"))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.is_false(globbing.match(\"[-]\", \"+\"))",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.is_true(globbing.match(\"[---]\", \"-\"))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()\r\n         assert.is_true(globbing.match(\"[!foo][!bar][!baz]\", \"boo\"))\r\n         assert.is_false(globbing.match(\"[!foo][!bar][!baz]\", \"far\"))\r\n         assert.is_false(globbing.match(\"[!a-z]\", \"g\"))\r\n      end",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert.is_true(globbing.match(\"[!foo][!bar][!baz]\", \"boo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.is_false(globbing.match(\"[!foo][!bar][!baz]\", \"far\"))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert.is_false(globbing.match(\"[!a-z]\", \"g\"))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo/bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/bar/baz.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/foo2/foo3/bar/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"foo/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"bar/baz.lua\"))\r\n      end",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert.is_true(globbing.match(\"**/*.lua\", \"foo.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert.is_true(globbing.match(\"**/*.lua\", \"foo/bar.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.is_false(globbing.match(\"foo/**/*.lua\", \"bar.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert.is_false(globbing.match(\"foo/**/*.lua\", \"foo.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/bar/baz.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/foo2/foo3/bar/baz.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"foo/baz.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"bar/baz.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n      it(\"returns true on literal match\", function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar\"))\r\n      end)\r\n\r\n      it(\"returns true on literal match after normalization\", function()\r\n         assert.is_true(globbing.match(\"foo//bar/baz/..\", \"./foo/bar/\"))\r\n      end)\r\n\r\n      it(\"returns false for on literal mismatch\", function()\r\n         assert.is_false(globbing.match(\"foo/bar\", \"foo/baz\"))\r\n      end)\r\n\r\n      it(\"accepts subdirectory matches\", function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar/baz\"))\r\n      end)\r\n\r\n      it(\"understands wildcards\", function()\r\n         assert.is_true(globbing.match(\"*\", \"foo\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar/baz\"))\r\n         assert.is_false(globbing.match(\"foo/*r\", \"foo/baz\"))\r\n      end)\r\n\r\n      it(\"understands optional characters\", function()\r\n         assert.is_false(globbing.match(\"?\", \"foo\"))\r\n         assert.is_true(globbing.match(\"???\", \"foo\"))\r\n         assert.is_true(globbing.match(\"????\", \"foo\"))\r\n         assert.is_true(globbing.match(\"f?o/?a?\", \"foo/bar\"))\r\n         assert.is_false(globbing.match(\"f?o/?a?\", \"foo/abc\"))\r\n      end)\r\n\r\n      it(\"understands ranges and classes\", function()\r\n         assert.is_true(globbing.match(\"[d-h]o[something]\", \"foo\"))\r\n         assert.is_false(globbing.match(\"[d-h]o[somewhere]\", \"bar\"))\r\n         assert.is_false(globbing.match(\"[.-h]o[i-z]\", \"bar\"))\r\n      end)\r\n\r\n      it(\"accepts closing bracket as first class character\", function()\r\n         assert.is_true(globbing.match(\"[]]\", \"]\"))\r\n         assert.is_false(globbing.match(\"[]]\", \"[\"))\r\n         assert.is_true(globbing.match(\"[]foo][]foo][]foo]\", \"foo\"))\r\n      end)\r\n\r\n      it(\"accepts dash as first or last class character\", function()\r\n         assert.is_true(globbing.match(\"[-]\", \"-\"))\r\n         assert.is_false(globbing.match(\"[-]\", \"+\"))\r\n         assert.is_true(globbing.match(\"[---]\", \"-\"))\r\n      end)\r\n\r\n      it(\"understands negation\", function()\r\n         assert.is_true(globbing.match(\"[!foo][!bar][!baz]\", \"boo\"))\r\n         assert.is_false(globbing.match(\"[!foo][!bar][!baz]\", \"far\"))\r\n         assert.is_false(globbing.match(\"[!a-z]\", \"g\"))\r\n      end)\r\n\r\n      it(\"understands recursive globbing using **\", function()\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo/bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/bar/baz.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/foo2/foo3/bar/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"foo/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"bar/baz.lua\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 59,
    "text": "it(\"returns true on literal match\", function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "it(\"returns true on literal match after normalization\", function()\r\n         assert.is_true(globbing.match(\"foo//bar/baz/..\", \"./foo/bar/\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "it(\"returns false for on literal mismatch\", function()\r\n         assert.is_false(globbing.match(\"foo/bar\", \"foo/baz\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "it(\"accepts subdirectory matches\", function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar/baz\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "it(\"understands wildcards\", function()\r\n         assert.is_true(globbing.match(\"*\", \"foo\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar/baz\"))\r\n         assert.is_false(globbing.match(\"foo/*r\", \"foo/baz\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "it(\"understands optional characters\", function()\r\n         assert.is_false(globbing.match(\"?\", \"foo\"))\r\n         assert.is_true(globbing.match(\"???\", \"foo\"))\r\n         assert.is_true(globbing.match(\"????\", \"foo\"))\r\n         assert.is_true(globbing.match(\"f?o/?a?\", \"foo/bar\"))\r\n         assert.is_false(globbing.match(\"f?o/?a?\", \"foo/abc\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "it(\"understands ranges and classes\", function()\r\n         assert.is_true(globbing.match(\"[d-h]o[something]\", \"foo\"))\r\n         assert.is_false(globbing.match(\"[d-h]o[somewhere]\", \"bar\"))\r\n         assert.is_false(globbing.match(\"[.-h]o[i-z]\", \"bar\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "it(\"accepts closing bracket as first class character\", function()\r\n         assert.is_true(globbing.match(\"[]]\", \"]\"))\r\n         assert.is_false(globbing.match(\"[]]\", \"[\"))\r\n         assert.is_true(globbing.match(\"[]foo][]foo][]foo]\", \"foo\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "it(\"accepts dash as first or last class character\", function()\r\n         assert.is_true(globbing.match(\"[-]\", \"-\"))\r\n         assert.is_false(globbing.match(\"[-]\", \"+\"))\r\n         assert.is_true(globbing.match(\"[---]\", \"-\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "it(\"understands negation\", function()\r\n         assert.is_true(globbing.match(\"[!foo][!bar][!baz]\", \"boo\"))\r\n         assert.is_false(globbing.match(\"[!foo][!bar][!baz]\", \"far\"))\r\n         assert.is_false(globbing.match(\"[!a-z]\", \"g\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "it(\"understands recursive globbing using **\", function()\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo/bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/bar/baz.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/foo2/foo3/bar/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"foo/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"bar/baz.lua\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function()\r\n   describe(\"match\", function()\r\n      it(\"returns true on literal match\", function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar\"))\r\n      end)\r\n\r\n      it(\"returns true on literal match after normalization\", function()\r\n         assert.is_true(globbing.match(\"foo//bar/baz/..\", \"./foo/bar/\"))\r\n      end)\r\n\r\n      it(\"returns false for on literal mismatch\", function()\r\n         assert.is_false(globbing.match(\"foo/bar\", \"foo/baz\"))\r\n      end)\r\n\r\n      it(\"accepts subdirectory matches\", function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar/baz\"))\r\n      end)\r\n\r\n      it(\"understands wildcards\", function()\r\n         assert.is_true(globbing.match(\"*\", \"foo\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar/baz\"))\r\n         assert.is_false(globbing.match(\"foo/*r\", \"foo/baz\"))\r\n      end)\r\n\r\n      it(\"understands optional characters\", function()\r\n         assert.is_false(globbing.match(\"?\", \"foo\"))\r\n         assert.is_true(globbing.match(\"???\", \"foo\"))\r\n         assert.is_true(globbing.match(\"????\", \"foo\"))\r\n         assert.is_true(globbing.match(\"f?o/?a?\", \"foo/bar\"))\r\n         assert.is_false(globbing.match(\"f?o/?a?\", \"foo/abc\"))\r\n      end)\r\n\r\n      it(\"understands ranges and classes\", function()\r\n         assert.is_true(globbing.match(\"[d-h]o[something]\", \"foo\"))\r\n         assert.is_false(globbing.match(\"[d-h]o[somewhere]\", \"bar\"))\r\n         assert.is_false(globbing.match(\"[.-h]o[i-z]\", \"bar\"))\r\n      end)\r\n\r\n      it(\"accepts closing bracket as first class character\", function()\r\n         assert.is_true(globbing.match(\"[]]\", \"]\"))\r\n         assert.is_false(globbing.match(\"[]]\", \"[\"))\r\n         assert.is_true(globbing.match(\"[]foo][]foo][]foo]\", \"foo\"))\r\n      end)\r\n\r\n      it(\"accepts dash as first or last class character\", function()\r\n         assert.is_true(globbing.match(\"[-]\", \"-\"))\r\n         assert.is_false(globbing.match(\"[-]\", \"+\"))\r\n         assert.is_true(globbing.match(\"[---]\", \"-\"))\r\n      end)\r\n\r\n      it(\"understands negation\", function()\r\n         assert.is_true(globbing.match(\"[!foo][!bar][!baz]\", \"boo\"))\r\n         assert.is_false(globbing.match(\"[!foo][!bar][!baz]\", \"far\"))\r\n         assert.is_false(globbing.match(\"[!a-z]\", \"g\"))\r\n      end)\r\n\r\n      it(\"understands recursive globbing using **\", function()\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo/bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/bar/baz.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/foo2/foo3/bar/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"foo/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"bar/baz.lua\"))\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "describe(\"match\", function()\r\n      it(\"returns true on literal match\", function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar\"))\r\n      end)\r\n\r\n      it(\"returns true on literal match after normalization\", function()\r\n         assert.is_true(globbing.match(\"foo//bar/baz/..\", \"./foo/bar/\"))\r\n      end)\r\n\r\n      it(\"returns false for on literal mismatch\", function()\r\n         assert.is_false(globbing.match(\"foo/bar\", \"foo/baz\"))\r\n      end)\r\n\r\n      it(\"accepts subdirectory matches\", function()\r\n         assert.is_true(globbing.match(\"foo/bar\", \"foo/bar/baz\"))\r\n      end)\r\n\r\n      it(\"understands wildcards\", function()\r\n         assert.is_true(globbing.match(\"*\", \"foo\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar\"))\r\n         assert.is_true(globbing.match(\"foo/*r\", \"foo/bar/baz\"))\r\n         assert.is_false(globbing.match(\"foo/*r\", \"foo/baz\"))\r\n      end)\r\n\r\n      it(\"understands optional characters\", function()\r\n         assert.is_false(globbing.match(\"?\", \"foo\"))\r\n         assert.is_true(globbing.match(\"???\", \"foo\"))\r\n         assert.is_true(globbing.match(\"????\", \"foo\"))\r\n         assert.is_true(globbing.match(\"f?o/?a?\", \"foo/bar\"))\r\n         assert.is_false(globbing.match(\"f?o/?a?\", \"foo/abc\"))\r\n      end)\r\n\r\n      it(\"understands ranges and classes\", function()\r\n         assert.is_true(globbing.match(\"[d-h]o[something]\", \"foo\"))\r\n         assert.is_false(globbing.match(\"[d-h]o[somewhere]\", \"bar\"))\r\n         assert.is_false(globbing.match(\"[.-h]o[i-z]\", \"bar\"))\r\n      end)\r\n\r\n      it(\"accepts closing bracket as first class character\", function()\r\n         assert.is_true(globbing.match(\"[]]\", \"]\"))\r\n         assert.is_false(globbing.match(\"[]]\", \"[\"))\r\n         assert.is_true(globbing.match(\"[]foo][]foo][]foo]\", \"foo\"))\r\n      end)\r\n\r\n      it(\"accepts dash as first or last class character\", function()\r\n         assert.is_true(globbing.match(\"[-]\", \"-\"))\r\n         assert.is_false(globbing.match(\"[-]\", \"+\"))\r\n         assert.is_true(globbing.match(\"[---]\", \"-\"))\r\n      end)\r\n\r\n      it(\"understands negation\", function()\r\n         assert.is_true(globbing.match(\"[!foo][!bar][!baz]\", \"boo\"))\r\n         assert.is_false(globbing.match(\"[!foo][!bar][!baz]\", \"far\"))\r\n         assert.is_false(globbing.match(\"[!a-z]\", \"g\"))\r\n      end)\r\n\r\n      it(\"understands recursive globbing using **\", function()\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"**/*.lua\", \"foo/bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"bar.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/*.lua\", \"foo.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/bar/baz.lua\"))\r\n         assert.is_true(globbing.match(\"foo/**/bar/*.lua\", \"foo/foo2/foo3/bar/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"foo/baz.lua\"))\r\n         assert.is_false(globbing.match(\"foo/**/bar/*.lua\", \"bar/baz.lua\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "",
    "type": "function container"
  }, {
    "id": 75,
    "text": "match",
    "type": "global function"
  }, {
    "id": 76,
    "text": "require",
    "type": "global function"
  }, {
    "id": 77,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 78,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 79,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 80,
    "text": "it",
    "type": "global function"
  }, {
    "id": 81,
    "text": "",
    "type": "variable container"
  }, {
    "id": 82,
    "text": "",
    "type": "require container"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  } ]
}