{
  "_filename": "lexer_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/lexer_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 7
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 10
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 26
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 48,
    "label": "has",
    "to": 59
  }, {
    "from": 48,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 48,
    "label": "has",
    "to": 62
  }, {
    "from": 48,
    "label": "has",
    "to": 63
  }, {
    "from": 48,
    "label": "has",
    "to": 64
  }, {
    "from": 48,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 104,
    "label": "has",
    "to": 111
  }, {
    "from": 104,
    "label": "has",
    "to": 112
  }, {
    "from": 104,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 121
  }, {
    "from": 114,
    "label": "has",
    "to": 122
  }, {
    "from": 114,
    "label": "has",
    "to": 123
  }, {
    "from": 114,
    "label": "has",
    "to": 124
  }, {
    "from": 114,
    "label": "has",
    "to": 125
  }, {
    "from": 114,
    "label": "has",
    "to": 126
  }, {
    "from": 114,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 131,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 72
  }, {
    "from": 137,
    "label": "has",
    "to": 73
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 76
  }, {
    "from": 138,
    "label": "has",
    "to": 77
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 80
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 83
  }, {
    "from": 140,
    "label": "has",
    "to": 84
  }, {
    "from": 140,
    "label": "has",
    "to": 85
  }, {
    "from": 136,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 88
  }, {
    "from": 141,
    "label": "has",
    "to": 89
  }, {
    "from": 136,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 92
  }, {
    "from": 142,
    "label": "has",
    "to": 93
  }, {
    "from": 142,
    "label": "has",
    "to": 94
  }, {
    "from": 142,
    "label": "has",
    "to": 95
  }, {
    "from": 136,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 98
  }, {
    "from": 143,
    "label": "has",
    "to": 99
  }, {
    "from": 143,
    "label": "has",
    "to": 100
  }, {
    "from": 143,
    "label": "has",
    "to": 101
  }, {
    "from": 143,
    "label": "has",
    "to": 102
  }, {
    "from": 136,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 105
  }, {
    "from": 144,
    "label": "has",
    "to": 106
  }, {
    "from": 144,
    "label": "has",
    "to": 107
  }, {
    "from": 144,
    "label": "has",
    "to": 108
  }, {
    "from": 144,
    "label": "has",
    "to": 109
  }, {
    "from": 144,
    "label": "has",
    "to": 110
  }, {
    "from": 144,
    "label": "has",
    "to": 111
  }, {
    "from": 144,
    "label": "has",
    "to": 112
  }, {
    "from": 136,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 115
  }, {
    "from": 145,
    "label": "has",
    "to": 116
  }, {
    "from": 145,
    "label": "has",
    "to": 117
  }, {
    "from": 145,
    "label": "has",
    "to": 118
  }, {
    "from": 145,
    "label": "has",
    "to": 119
  }, {
    "from": 145,
    "label": "has",
    "to": 120
  }, {
    "from": 145,
    "label": "has",
    "to": 121
  }, {
    "from": 145,
    "label": "has",
    "to": 122
  }, {
    "from": 145,
    "label": "has",
    "to": 123
  }, {
    "from": 145,
    "label": "has",
    "to": 124
  }, {
    "from": 145,
    "label": "has",
    "to": 125
  }, {
    "from": 145,
    "label": "has",
    "to": 126
  }, {
    "from": 136,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 129
  }, {
    "from": 136,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 132
  }, {
    "from": 147,
    "label": "has",
    "to": 133
  }, {
    "from": 147,
    "label": "has",
    "to": 134
  }, {
    "from": 136,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 150
  }, {
    "from": 174,
    "label": "has",
    "to": 151
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 154
  }, {
    "from": 175,
    "label": "has",
    "to": 155
  }, {
    "from": 173,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 158
  }, {
    "from": 176,
    "label": "has",
    "to": 159
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 162
  }, {
    "from": 177,
    "label": "has",
    "to": 163
  }, {
    "from": 173,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 166
  }, {
    "from": 178,
    "label": "has",
    "to": 167
  }, {
    "from": 173,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 170
  }, {
    "from": 179,
    "label": "has",
    "to": 171
  }, {
    "from": 173,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 189
  }, {
    "from": 185,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 196,
    "label": "has",
    "to": 199
  }, {
    "from": 196,
    "label": "has",
    "to": 200
  }, {
    "from": 196,
    "label": "has",
    "to": 201
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 206
  }, {
    "from": 202,
    "label": "has",
    "to": 207
  }, {
    "from": 202,
    "label": "has",
    "to": 208
  }, {
    "from": 202,
    "label": "has",
    "to": 209
  }, {
    "from": 202,
    "label": "has",
    "to": 210
  }, {
    "from": 202,
    "label": "has",
    "to": 211
  }, {
    "from": 202,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 213,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 213,
    "label": "has",
    "to": 218
  }, {
    "from": 213,
    "label": "has",
    "to": 219
  }, {
    "from": 213,
    "label": "has",
    "to": 220
  }, {
    "from": 213,
    "label": "has",
    "to": 221
  }, {
    "from": 213,
    "label": "has",
    "to": 222
  }, {
    "from": 213,
    "label": "has",
    "to": 223
  }, {
    "from": 213,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 225,
    "label": "has",
    "to": 228
  }, {
    "from": 225,
    "label": "has",
    "to": 229
  }, {
    "from": 225,
    "label": "has",
    "to": 230
  }, {
    "from": 225,
    "label": "has",
    "to": 231
  }, {
    "from": 225,
    "label": "has",
    "to": 232
  }, {
    "from": 225,
    "label": "has",
    "to": 233
  }, {
    "from": 225,
    "label": "has",
    "to": 234
  }, {
    "from": 225,
    "label": "has",
    "to": 235
  }, {
    "from": 225,
    "label": "has",
    "to": 236
  }, {
    "from": 225,
    "label": "has",
    "to": 237
  }, {
    "from": 225,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 239,
    "label": "has",
    "to": 242
  }, {
    "from": 239,
    "label": "has",
    "to": 243
  }, {
    "from": 239,
    "label": "has",
    "to": 244
  }, {
    "from": 239,
    "label": "has",
    "to": 245
  }, {
    "from": 239,
    "label": "has",
    "to": 246
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 182
  }, {
    "from": 248,
    "label": "has",
    "to": 183
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 186
  }, {
    "from": 249,
    "label": "has",
    "to": 187
  }, {
    "from": 249,
    "label": "has",
    "to": 188
  }, {
    "from": 249,
    "label": "has",
    "to": 189
  }, {
    "from": 247,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 192
  }, {
    "from": 250,
    "label": "has",
    "to": 193
  }, {
    "from": 250,
    "label": "has",
    "to": 194
  }, {
    "from": 247,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 197
  }, {
    "from": 251,
    "label": "has",
    "to": 198
  }, {
    "from": 251,
    "label": "has",
    "to": 199
  }, {
    "from": 251,
    "label": "has",
    "to": 200
  }, {
    "from": 247,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 203
  }, {
    "from": 252,
    "label": "has",
    "to": 204
  }, {
    "from": 252,
    "label": "has",
    "to": 205
  }, {
    "from": 252,
    "label": "has",
    "to": 206
  }, {
    "from": 252,
    "label": "has",
    "to": 207
  }, {
    "from": 252,
    "label": "has",
    "to": 208
  }, {
    "from": 252,
    "label": "has",
    "to": 209
  }, {
    "from": 252,
    "label": "has",
    "to": 210
  }, {
    "from": 252,
    "label": "has",
    "to": 211
  }, {
    "from": 247,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 214
  }, {
    "from": 253,
    "label": "has",
    "to": 215
  }, {
    "from": 253,
    "label": "has",
    "to": 216
  }, {
    "from": 253,
    "label": "has",
    "to": 217
  }, {
    "from": 253,
    "label": "has",
    "to": 218
  }, {
    "from": 253,
    "label": "has",
    "to": 219
  }, {
    "from": 253,
    "label": "has",
    "to": 220
  }, {
    "from": 253,
    "label": "has",
    "to": 221
  }, {
    "from": 253,
    "label": "has",
    "to": 222
  }, {
    "from": 253,
    "label": "has",
    "to": 223
  }, {
    "from": 247,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 226
  }, {
    "from": 254,
    "label": "has",
    "to": 227
  }, {
    "from": 254,
    "label": "has",
    "to": 228
  }, {
    "from": 254,
    "label": "has",
    "to": 229
  }, {
    "from": 254,
    "label": "has",
    "to": 230
  }, {
    "from": 254,
    "label": "has",
    "to": 231
  }, {
    "from": 254,
    "label": "has",
    "to": 232
  }, {
    "from": 254,
    "label": "has",
    "to": 233
  }, {
    "from": 254,
    "label": "has",
    "to": 234
  }, {
    "from": 254,
    "label": "has",
    "to": 235
  }, {
    "from": 254,
    "label": "has",
    "to": 236
  }, {
    "from": 254,
    "label": "has",
    "to": 237
  }, {
    "from": 247,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 240
  }, {
    "from": 255,
    "label": "has",
    "to": 241
  }, {
    "from": 255,
    "label": "has",
    "to": 242
  }, {
    "from": 255,
    "label": "has",
    "to": 243
  }, {
    "from": 255,
    "label": "has",
    "to": 244
  }, {
    "from": 255,
    "label": "has",
    "to": 245
  }, {
    "from": 247,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 257,
    "label": "has",
    "to": 260
  }, {
    "from": 257,
    "label": "has",
    "to": 261
  }, {
    "from": 257,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 263,
    "label": "has",
    "to": 267
  }, {
    "from": 263,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 274
  }, {
    "from": 272,
    "label": "has",
    "to": 275
  }, {
    "from": 272,
    "label": "has",
    "to": 276
  }, {
    "from": 272,
    "label": "has",
    "to": 277
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 278,
    "label": "has",
    "to": 280
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 26
  }, {
    "from": 285,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 36
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 39
  }, {
    "from": 287,
    "label": "has",
    "to": 40
  }, {
    "from": 287,
    "label": "has",
    "to": 41
  }, {
    "from": 287,
    "label": "has",
    "to": 42
  }, {
    "from": 284,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 45
  }, {
    "from": 288,
    "label": "has",
    "to": 46
  }, {
    "from": 284,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 49
  }, {
    "from": 289,
    "label": "has",
    "to": 50
  }, {
    "from": 289,
    "label": "has",
    "to": 51
  }, {
    "from": 289,
    "label": "has",
    "to": 52
  }, {
    "from": 289,
    "label": "has",
    "to": 53
  }, {
    "from": 289,
    "label": "has",
    "to": 54
  }, {
    "from": 289,
    "label": "has",
    "to": 55
  }, {
    "from": 289,
    "label": "has",
    "to": 56
  }, {
    "from": 289,
    "label": "has",
    "to": 57
  }, {
    "from": 289,
    "label": "has",
    "to": 58
  }, {
    "from": 289,
    "label": "has",
    "to": 59
  }, {
    "from": 289,
    "label": "has",
    "to": 60
  }, {
    "from": 289,
    "label": "has",
    "to": 61
  }, {
    "from": 289,
    "label": "has",
    "to": 62
  }, {
    "from": 289,
    "label": "has",
    "to": 63
  }, {
    "from": 289,
    "label": "has",
    "to": 64
  }, {
    "from": 284,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 67
  }, {
    "from": 290,
    "label": "has",
    "to": 68
  }, {
    "from": 290,
    "label": "has",
    "to": 69
  }, {
    "from": 284,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 72
  }, {
    "from": 137,
    "label": "has",
    "to": 73
  }, {
    "from": 291,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 76
  }, {
    "from": 138,
    "label": "has",
    "to": 77
  }, {
    "from": 291,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 80
  }, {
    "from": 291,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 83
  }, {
    "from": 140,
    "label": "has",
    "to": 84
  }, {
    "from": 140,
    "label": "has",
    "to": 85
  }, {
    "from": 291,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 88
  }, {
    "from": 141,
    "label": "has",
    "to": 89
  }, {
    "from": 291,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 92
  }, {
    "from": 142,
    "label": "has",
    "to": 93
  }, {
    "from": 142,
    "label": "has",
    "to": 94
  }, {
    "from": 142,
    "label": "has",
    "to": 95
  }, {
    "from": 291,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 98
  }, {
    "from": 143,
    "label": "has",
    "to": 99
  }, {
    "from": 143,
    "label": "has",
    "to": 100
  }, {
    "from": 143,
    "label": "has",
    "to": 101
  }, {
    "from": 143,
    "label": "has",
    "to": 102
  }, {
    "from": 291,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 105
  }, {
    "from": 144,
    "label": "has",
    "to": 106
  }, {
    "from": 144,
    "label": "has",
    "to": 107
  }, {
    "from": 144,
    "label": "has",
    "to": 108
  }, {
    "from": 144,
    "label": "has",
    "to": 109
  }, {
    "from": 144,
    "label": "has",
    "to": 110
  }, {
    "from": 144,
    "label": "has",
    "to": 111
  }, {
    "from": 144,
    "label": "has",
    "to": 112
  }, {
    "from": 291,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 115
  }, {
    "from": 145,
    "label": "has",
    "to": 116
  }, {
    "from": 145,
    "label": "has",
    "to": 117
  }, {
    "from": 145,
    "label": "has",
    "to": 118
  }, {
    "from": 145,
    "label": "has",
    "to": 119
  }, {
    "from": 145,
    "label": "has",
    "to": 120
  }, {
    "from": 145,
    "label": "has",
    "to": 121
  }, {
    "from": 145,
    "label": "has",
    "to": 122
  }, {
    "from": 145,
    "label": "has",
    "to": 123
  }, {
    "from": 145,
    "label": "has",
    "to": 124
  }, {
    "from": 145,
    "label": "has",
    "to": 125
  }, {
    "from": 145,
    "label": "has",
    "to": 126
  }, {
    "from": 291,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 129
  }, {
    "from": 291,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 132
  }, {
    "from": 147,
    "label": "has",
    "to": 133
  }, {
    "from": 147,
    "label": "has",
    "to": 134
  }, {
    "from": 284,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 150
  }, {
    "from": 174,
    "label": "has",
    "to": 151
  }, {
    "from": 292,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 154
  }, {
    "from": 175,
    "label": "has",
    "to": 155
  }, {
    "from": 292,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 158
  }, {
    "from": 176,
    "label": "has",
    "to": 159
  }, {
    "from": 292,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 162
  }, {
    "from": 177,
    "label": "has",
    "to": 163
  }, {
    "from": 292,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 166
  }, {
    "from": 178,
    "label": "has",
    "to": 167
  }, {
    "from": 292,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 170
  }, {
    "from": 179,
    "label": "has",
    "to": 171
  }, {
    "from": 284,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 182
  }, {
    "from": 248,
    "label": "has",
    "to": 183
  }, {
    "from": 293,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 186
  }, {
    "from": 249,
    "label": "has",
    "to": 187
  }, {
    "from": 249,
    "label": "has",
    "to": 188
  }, {
    "from": 249,
    "label": "has",
    "to": 189
  }, {
    "from": 293,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 192
  }, {
    "from": 250,
    "label": "has",
    "to": 193
  }, {
    "from": 250,
    "label": "has",
    "to": 194
  }, {
    "from": 293,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 197
  }, {
    "from": 251,
    "label": "has",
    "to": 198
  }, {
    "from": 251,
    "label": "has",
    "to": 199
  }, {
    "from": 251,
    "label": "has",
    "to": 200
  }, {
    "from": 293,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 203
  }, {
    "from": 252,
    "label": "has",
    "to": 204
  }, {
    "from": 252,
    "label": "has",
    "to": 205
  }, {
    "from": 252,
    "label": "has",
    "to": 206
  }, {
    "from": 252,
    "label": "has",
    "to": 207
  }, {
    "from": 252,
    "label": "has",
    "to": 208
  }, {
    "from": 252,
    "label": "has",
    "to": 209
  }, {
    "from": 252,
    "label": "has",
    "to": 210
  }, {
    "from": 252,
    "label": "has",
    "to": 211
  }, {
    "from": 293,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 214
  }, {
    "from": 253,
    "label": "has",
    "to": 215
  }, {
    "from": 253,
    "label": "has",
    "to": 216
  }, {
    "from": 253,
    "label": "has",
    "to": 217
  }, {
    "from": 253,
    "label": "has",
    "to": 218
  }, {
    "from": 253,
    "label": "has",
    "to": 219
  }, {
    "from": 253,
    "label": "has",
    "to": 220
  }, {
    "from": 253,
    "label": "has",
    "to": 221
  }, {
    "from": 253,
    "label": "has",
    "to": 222
  }, {
    "from": 253,
    "label": "has",
    "to": 223
  }, {
    "from": 293,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 226
  }, {
    "from": 254,
    "label": "has",
    "to": 227
  }, {
    "from": 254,
    "label": "has",
    "to": 228
  }, {
    "from": 254,
    "label": "has",
    "to": 229
  }, {
    "from": 254,
    "label": "has",
    "to": 230
  }, {
    "from": 254,
    "label": "has",
    "to": 231
  }, {
    "from": 254,
    "label": "has",
    "to": 232
  }, {
    "from": 254,
    "label": "has",
    "to": 233
  }, {
    "from": 254,
    "label": "has",
    "to": 234
  }, {
    "from": 254,
    "label": "has",
    "to": 235
  }, {
    "from": 254,
    "label": "has",
    "to": 236
  }, {
    "from": 254,
    "label": "has",
    "to": 237
  }, {
    "from": 293,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 240
  }, {
    "from": 255,
    "label": "has",
    "to": 241
  }, {
    "from": 255,
    "label": "has",
    "to": 242
  }, {
    "from": 255,
    "label": "has",
    "to": 243
  }, {
    "from": 255,
    "label": "has",
    "to": 244
  }, {
    "from": 255,
    "label": "has",
    "to": 245
  }, {
    "from": 284,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 258
  }, {
    "from": 294,
    "label": "has",
    "to": 259
  }, {
    "from": 294,
    "label": "has",
    "to": 260
  }, {
    "from": 294,
    "label": "has",
    "to": 261
  }, {
    "from": 284,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 264
  }, {
    "from": 295,
    "label": "has",
    "to": 265
  }, {
    "from": 295,
    "label": "has",
    "to": 266
  }, {
    "from": 295,
    "label": "has",
    "to": 267
  }, {
    "from": 284,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 270
  }, {
    "from": 284,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 273
  }, {
    "from": 297,
    "label": "has",
    "to": 274
  }, {
    "from": 297,
    "label": "has",
    "to": 275
  }, {
    "from": 297,
    "label": "has",
    "to": 276
  }, {
    "from": 284,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 279
  }, {
    "from": 284,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 282
  }, {
    "from": 284,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 305
  }, {
    "from": 301,
    "label": "calls",
    "to": 304
  }, {
    "from": 301,
    "label": "calls",
    "to": 304
  }, {
    "from": 18,
    "label": "calls",
    "to": 15
  }, {
    "from": 20,
    "label": "calls",
    "to": 15
  }, {
    "from": 301,
    "label": "calls",
    "to": 306
  }, {
    "from": 301,
    "label": "calls",
    "to": 306
  }, {
    "from": 301,
    "label": "calls",
    "to": 309
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 310
  }, {
    "from": 301,
    "label": "calls",
    "to": 3
  }, {
    "from": 301,
    "label": "calls",
    "to": 3
  }, {
    "from": 301,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 302
  }, {
    "from": 12,
    "label": "calls",
    "to": 302
  }, {
    "from": 15,
    "label": "calls",
    "to": 302
  }, {
    "from": 301,
    "label": "calls",
    "to": 20
  }, {
    "from": 301,
    "label": "calls",
    "to": 20
  }, {
    "from": 301,
    "label": "calls",
    "to": 20
  }, {
    "from": 301,
    "label": "calls",
    "to": 20
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 301,
    "label": "calls",
    "to": 18
  }, {
    "from": 3,
    "label": "calls",
    "to": 303
  }, {
    "from": 12,
    "label": "calls",
    "to": 303
  }, {
    "from": 18,
    "label": "calls",
    "to": 303
  }, {
    "from": 20,
    "label": "calls",
    "to": 303
  }, {
    "from": 301,
    "label": "calls",
    "to": 307
  }, {
    "from": 301,
    "label": "calls",
    "to": 308
  }, {
    "from": 301,
    "label": "calls",
    "to": 308
  }, {
    "from": 301,
    "label": "calls",
    "to": 308
  }, {
    "from": 301,
    "label": "calls",
    "to": 308
  }, {
    "from": 301,
    "label": "calls",
    "to": 308
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 301,
    "label": "calls",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 301
  }, {
    "from": 301,
    "label": "declares",
    "to": 3
  }, {
    "from": 301,
    "label": "declares",
    "to": 12
  }, {
    "from": 301,
    "label": "declares",
    "to": 15
  }, {
    "from": 301,
    "label": "declares",
    "to": 18
  }, {
    "from": 301,
    "label": "declares",
    "to": 20
  }, {
    "from": 301,
    "label": "declares",
    "to": 25
  }, {
    "from": 301,
    "label": "declares",
    "to": 28
  }, {
    "from": 301,
    "label": "declares",
    "to": 31
  }, {
    "from": 301,
    "label": "declares",
    "to": 35
  }, {
    "from": 301,
    "label": "declares",
    "to": 38
  }, {
    "from": 301,
    "label": "declares",
    "to": 44
  }, {
    "from": 301,
    "label": "declares",
    "to": 48
  }, {
    "from": 301,
    "label": "declares",
    "to": 66
  }, {
    "from": 301,
    "label": "declares",
    "to": 71
  }, {
    "from": 301,
    "label": "declares",
    "to": 75
  }, {
    "from": 301,
    "label": "declares",
    "to": 79
  }, {
    "from": 301,
    "label": "declares",
    "to": 82
  }, {
    "from": 301,
    "label": "declares",
    "to": 87
  }, {
    "from": 301,
    "label": "declares",
    "to": 91
  }, {
    "from": 301,
    "label": "declares",
    "to": 97
  }, {
    "from": 301,
    "label": "declares",
    "to": 104
  }, {
    "from": 301,
    "label": "declares",
    "to": 114
  }, {
    "from": 301,
    "label": "declares",
    "to": 128
  }, {
    "from": 301,
    "label": "declares",
    "to": 131
  }, {
    "from": 301,
    "label": "declares",
    "to": 136
  }, {
    "from": 301,
    "label": "declares",
    "to": 149
  }, {
    "from": 301,
    "label": "declares",
    "to": 153
  }, {
    "from": 301,
    "label": "declares",
    "to": 157
  }, {
    "from": 301,
    "label": "declares",
    "to": 161
  }, {
    "from": 301,
    "label": "declares",
    "to": 165
  }, {
    "from": 301,
    "label": "declares",
    "to": 169
  }, {
    "from": 301,
    "label": "declares",
    "to": 173
  }, {
    "from": 301,
    "label": "declares",
    "to": 181
  }, {
    "from": 301,
    "label": "declares",
    "to": 185
  }, {
    "from": 301,
    "label": "declares",
    "to": 191
  }, {
    "from": 301,
    "label": "declares",
    "to": 196
  }, {
    "from": 301,
    "label": "declares",
    "to": 202
  }, {
    "from": 301,
    "label": "declares",
    "to": 213
  }, {
    "from": 301,
    "label": "declares",
    "to": 225
  }, {
    "from": 301,
    "label": "declares",
    "to": 239
  }, {
    "from": 301,
    "label": "declares",
    "to": 247
  }, {
    "from": 301,
    "label": "declares",
    "to": 257
  }, {
    "from": 301,
    "label": "declares",
    "to": 263
  }, {
    "from": 301,
    "label": "declares",
    "to": 269
  }, {
    "from": 301,
    "label": "declares",
    "to": 272
  }, {
    "from": 301,
    "label": "declares",
    "to": 278
  }, {
    "from": 301,
    "label": "declares",
    "to": 281
  }, {
    "from": 301,
    "label": "declares",
    "to": 284
  }, {
    "from": 1,
    "label": "contains",
    "to": 311
  }, {
    "from": 1,
    "label": "contains",
    "to": 312
  }, {
    "from": 312,
    "label": "initializes",
    "to": 313
  }, {
    "from": 313,
    "label": "requires",
    "to": 2
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 142,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 143,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 145,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 128
  }, {
    "from": 147,
    "label": "hasArgument",
    "to": 131
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 149
  }, {
    "from": 175,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 176,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 177,
    "label": "hasArgument",
    "to": 161
  }, {
    "from": 178,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 179,
    "label": "hasArgument",
    "to": 169
  }, {
    "from": 248,
    "label": "hasArgument",
    "to": 181
  }, {
    "from": 249,
    "label": "hasArgument",
    "to": 185
  }, {
    "from": 250,
    "label": "hasArgument",
    "to": 191
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 196
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 202
  }, {
    "from": 253,
    "label": "hasArgument",
    "to": 213
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 225
  }, {
    "from": 255,
    "label": "hasArgument",
    "to": 239
  }, {
    "from": 285,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 285,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 285,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 290,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 128
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 131
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 136
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 149
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 161
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 169
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 181
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 185
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 191
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 196
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 202
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 213
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 225
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 239
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 247
  }, {
    "from": 294,
    "label": "hasArgument",
    "to": 257
  }, {
    "from": 295,
    "label": "hasArgument",
    "to": 263
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 269
  }, {
    "from": 297,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 298,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 299,
    "label": "hasArgument",
    "to": 281
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lexer_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "lexer",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function get_tokens(source)\r\n   local lexer_state = lexer.new_state(source)\r\n   local tokens = {}\r\n\r\n   repeat\r\n      local token = {}\r\n      token.token, token.token_value, token.line, token.column, token.offset = lexer.next_token(lexer_state)\r\n      tokens[#tokens+1] = token\r\n   until token.token == \"eof\"\r\n\r\n   return tokens\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local lexer_state = lexer.new_state(source)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local tokens = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "repeat\r\n      local token = {}\r\n      token.token, token.token_value, token.line, token.column, token.offset = lexer.next_token(lexer_state)\r\n      tokens[#tokens+1] = token\r\n   until token.token == \"eof\"",
    "type": "statement:repeat"
  }, {
    "id": 7,
    "text": "local token = {}",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "token.token, token.token_value, token.line, token.column, token.offset = lexer.next_token(lexer_state)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "tokens[#tokens+1] = token",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function get_token(source)\r\n   local lexer_state = lexer.new_state(source)\r\n   local token = {}\r\n   token.token, token.token_value = lexer.next_token(lexer_state)\r\n   return token\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "token.token, token.token_value = lexer.next_token(lexer_state)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function maybe_error(lexer_state)\r\n   local ok, err, line, column, _, end_column = lexer.next_token(lexer_state)\r\n   return not ok and {msg = err, line = line, column = column, end_column = end_column}\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local ok, err, line, column, _, end_column = lexer.next_token(lexer_state)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function get_error(source)\r\n   return maybe_error(lexer.new_state(source))\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function get_last_error(source)\r\n   local lexer_state = lexer.new_state(source)\r\n   local err\r\n\r\n   repeat\r\n      err = maybe_error(lexer_state)\r\n   until err\r\n\r\n   return err\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "repeat\r\n      err = maybe_error(lexer_state)\r\n   until err",
    "type": "statement:repeat"
  }, {
    "id": 23,
    "text": "err = maybe_error(lexer_state)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n         assert.equal(\"'foo'\", lexer.quote(\"foo\"))\r\n      end",
    "type": "function"
  }, {
    "id": 26,
    "text": "assert.equal(\"'foo'\", lexer.quote(\"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n         assert.equal([['\\0\\1foo \\240bar\\127\\10']], lexer.quote(\"\\0\\1foo \\240bar\\127\\n\"))\r\n      end",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert.equal([['\\0\\1foo \\240bar\\127\\10']], lexer.quote(\"\\0\\1foo \\240bar\\127\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n      it(\"quotes strings\", function()\r\n         assert.equal(\"'foo'\", lexer.quote(\"foo\"))\r\n      end)\r\n\r\n      it(\"escapes not printable characters\", function()\r\n         assert.equal([['\\0\\1foo \\240bar\\127\\10']], lexer.quote(\"\\0\\1foo \\240bar\\127\\n\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 32,
    "text": "it(\"quotes strings\", function()\r\n         assert.equal(\"'foo'\", lexer.quote(\"foo\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "it(\"escapes not printable characters\", function()\r\n         assert.equal([['\\0\\1foo \\240bar\\127\\10']], lexer.quote(\"\\0\\1foo \\240bar\\127\\n\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function()\r\n      assert.same({token = \"eof\"}, get_token(\" \"))\r\n   end",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert.same({token = \"eof\"}, get_token(\" \"))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n      assert.same({token = \"name\", token_value = \"foo\"}, get_token(\"foo\"))\r\n      assert.same({token = \"name\", token_value = \"_\"}, get_token(\"_\"))\r\n      assert.same({token = \"name\", token_value = \"foo1_2\"}, get_token(\"foo1_2\"))\r\n      assert.same({token = \"name\", token_value = \"foo\"}, get_token(\"foo!\"))\r\n   end",
    "type": "function"
  }, {
    "id": 39,
    "text": "assert.same({token = \"name\", token_value = \"foo\"}, get_token(\"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.same({token = \"name\", token_value = \"_\"}, get_token(\"_\"))",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.same({token = \"name\", token_value = \"foo1_2\"}, get_token(\"foo1_2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert.same({token = \"name\", token_value = \"foo\"}, get_token(\"foo!\"))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n      assert.same({token = \"do\"}, get_token(\"do\"))\r\n      assert.same({token = \"goto\"}, get_token(\"goto fail;\"))\r\n   end",
    "type": "function"
  }, {
    "id": 45,
    "text": "assert.same({token = \"do\"}, get_token(\"do\"))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert.same({token = \"goto\"}, get_token(\"goto fail;\"))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n      assert.same({token = \"=\"}, get_token(\"= =\"))\r\n      assert.same({token = \"==\"}, get_token(\"==\"))\r\n      assert.same({token = \"<\"}, get_token(\"< =\"))\r\n      assert.same({token = \"<=\"}, get_token(\"<=\"))\r\n      assert.same({token = \"<<\"}, get_token(\"<<\"))\r\n      assert.same({token = \">\"}, get_token(\"> =\"))\r\n      assert.same({token = \">=\"}, get_token(\">=\"))\r\n      assert.same({token = \">>\"}, get_token(\">>\"))\r\n      assert.same({token = \"/\"}, get_token(\"/ /\"))\r\n      assert.same({token = \"//\"}, get_token(\"//\"))\r\n      assert.same({token = \".\"}, get_token(\".?.\"))\r\n      assert.same({token = \".\"}, get_token(\".\"))\r\n      assert.same({token = \"..\"}, get_token(\"..%\"))\r\n      assert.same({token = \"...\", token_value = \"...\"}, get_token(\"...\"))\r\n      assert.same({token = \":\"}, get_token(\":.:\"))\r\n      assert.same({token = \"::\"}, get_token(\"::.\"))\r\n   end",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert.same({token = \"=\"}, get_token(\"= =\"))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert.same({token = \"==\"}, get_token(\"==\"))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.same({token = \"<\"}, get_token(\"< =\"))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert.same({token = \"<=\"}, get_token(\"<=\"))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert.same({token = \"<<\"}, get_token(\"<<\"))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert.same({token = \">\"}, get_token(\"> =\"))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert.same({token = \">=\"}, get_token(\">=\"))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert.same({token = \">>\"}, get_token(\">>\"))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert.same({token = \"/\"}, get_token(\"/ /\"))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert.same({token = \"//\"}, get_token(\"//\"))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert.same({token = \".\"}, get_token(\".?.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.same({token = \".\"}, get_token(\".\"))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.same({token = \"..\"}, get_token(\"..%\"))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert.same({token = \"...\", token_value = \"...\"}, get_token(\"...\"))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert.same({token = \":\"}, get_token(\":.:\"))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert.same({token = \"::\"}, get_token(\"::.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n      assert.same({token = \"(\"}, get_token(\"((\"))\r\n      assert.same({token = \"[\"}, get_token(\"[x]\"))\r\n      assert.same({token = \"$\"}, get_token(\"$$$\"))\r\n   end",
    "type": "function"
  }, {
    "id": 67,
    "text": "assert.same({token = \"(\"}, get_token(\"((\"))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert.same({token = \"[\"}, get_token(\"[x]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert.same({token = \"$\"}, get_token(\"$$$\"))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([[\"\"]]))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([['']]))\r\n      end",
    "type": "function"
  }, {
    "id": 72,
    "text": "assert.same({token = \"string\", token_value = \"\"}, get_token([[\"\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert.same({token = \"string\", token_value = \"\"}, get_token([['']]))",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"'\"}, get_token([[\"'\"]]))\r\n         assert.same({token = \"string\", token_value = '\"'}, get_token([['\"']]))\r\n      end",
    "type": "function"
  }, {
    "id": 76,
    "text": "assert.same({token = \"string\", token_value = \"'\"}, get_token([[\"'\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert.same({token = \"string\", token_value = '\"'}, get_token([['\"']]))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token([[\"foo\"]]))\r\n      end",
    "type": "function"
  }, {
    "id": 80,
    "text": "assert.same({token = \"string\", token_value = \"foo\"}, get_token([[\"foo\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"\\r\\n\"}, get_token([[\"\\r\\n\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo\\\\bar\"}, get_token([[\"foo\\\\bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"a\\'\\'b\\\"\\\"\"}, get_token([[\"a\\'\\'b\\\"\\\"\"]]))\r\n      end",
    "type": "function"
  }, {
    "id": 83,
    "text": "assert.same({token = \"string\", token_value = \"\\r\\n\"}, get_token([[\"\\r\\n\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "assert.same({token = \"string\", token_value = \"foo\\\\bar\"}, get_token([[\"foo\\\\bar\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert.same({token = \"string\", token_value = \"a\\'\\'b\\\"\\\"\"}, get_token([[\"a\\'\\'b\\\"\\\"\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"foo \\nbar\"}, get_token([[\"foo \\\r\nbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo \\n\\n\\nbar\"}, get_token([[\"foo \\\r\n\\\r\n\\\r\nbar\"]]))\r\n      end",
    "type": "function"
  }, {
    "id": 88,
    "text": "assert.same({token = \"string\", token_value = \"foo \\nbar\"}, get_token([[\"foo \\\r\nbar\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert.same({token = \"string\", token_value = \"foo \\n\\n\\nbar\"}, get_token([[\"foo \\\r\n\\\r\n\\\r\nbar\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"foo \"}, get_token([[\"foo \\z\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\zbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z \r\n\r\n            bar\\z \"]]))\r\n      end",
    "type": "function"
  }, {
    "id": 92,
    "text": "assert.same({token = \"string\", token_value = \"foo \"}, get_token([[\"foo \\z\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\zbar\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z bar\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z \r\n\r\n            bar\\z \"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\0buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo b\\97r\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\1234\"}, get_token([[\"\\1234\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_error([[\"\\300\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"invalid escape sequence '\\\\'\"}, get_error([[\"\\]]))\r\n      end",
    "type": "function"
  }, {
    "id": 98,
    "text": "assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\0buffer exploit\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo b\\97r\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert.same({token = \"string\", token_value = \"\\1234\"}, get_token([[\"\\1234\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_error([[\"\\300\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "assert.same({line = 1, column = 2, end_column = 2, msg = \"invalid escape sequence '\\\\'\"}, get_error([[\"\\]]))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\x00buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo\\x20bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"jj\"}, get_token([[\"\\x6a\\x6A\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\X'\"}, get_error([[\"\\XFF\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x\\\"'\"}, get_error([[\"\\x\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid hexadecimal escape sequence '\\\\x1\\\"'\"}, get_error([[\"\\x1\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x1'\"}, get_error([[\"\\x1]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\xx'\"}, get_error([[\"\\xxx\"]]))\r\n      end",
    "type": "function"
  }, {
    "id": 105,
    "text": "assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\x00buffer exploit\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo\\x20bar\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert.same({token = \"string\", token_value = \"jj\"}, get_token([[\"\\x6a\\x6A\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\X'\"}, get_error([[\"\\XFF\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x\\\"'\"}, get_error([[\"\\x\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid hexadecimal escape sequence '\\\\x1\\\"'\"}, get_error([[\"\\x1\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x1'\"}, get_error([[\"\\x1]]))",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\xx'\"}, get_error([[\"\\xxx\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"\\0\\0\"},\r\n            get_token([[\"\\u{0}\\u{00000000}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\0\\127\"},\r\n            get_token([[\"\\u{0}\\u{7F}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\194\\128\\223\\191\"},\r\n            get_token([[\"\\u{80}\\u{7fF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\224\\160\\128\\239\\191\\191\"},\r\n            get_token([[\"\\u{800}\\u{FFFF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\240\\144\\128\\128\\244\\143\\191\\191\"},\r\n            get_token([[\"\\u{10000}\\u{10FFFF}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 10, msg = \"invalid UTF-8 escape sequence '\\\\u{110000'\"}, get_error([[\"\\u{110000}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u\\\"'\"}, get_error([[\"\\u\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\un'\"}, get_error([[\"\\unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 7, msg = \"invalid UTF-8 escape sequence '\\\\u{11u'\"}, get_error([[\"\\u{11unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 6, msg = \"invalid UTF-8 escape sequence '\\\\u{11'\"}, get_error([[\"\\u{11]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid UTF-8 escape sequence '\\\\u{u'\"}, get_error([[\"\\u{unrelated}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u{'\"}, get_error([[\"\\u{]]))\r\n      end",
    "type": "function"
  }, {
    "id": 115,
    "text": "assert.same({token = \"string\", token_value = \"\\0\\0\"},\r\n            get_token([[\"\\u{0}\\u{00000000}\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert.same({token = \"string\", token_value = \"\\0\\127\"},\r\n            get_token([[\"\\u{0}\\u{7F}\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert.same({token = \"string\", token_value = \"\\194\\128\\223\\191\"},\r\n            get_token([[\"\\u{80}\\u{7fF}\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert.same({token = \"string\", token_value = \"\\224\\160\\128\\239\\191\\191\"},\r\n            get_token([[\"\\u{800}\\u{FFFF}\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert.same({token = \"string\", token_value = \"\\240\\144\\128\\128\\244\\143\\191\\191\"},\r\n            get_token([[\"\\u{10000}\\u{10FFFF}\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert.same({line = 1, column = 2, end_column = 10, msg = \"invalid UTF-8 escape sequence '\\\\u{110000'\"}, get_error([[\"\\u{110000}\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u\\\"'\"}, get_error([[\"\\u\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\un'\"}, get_error([[\"\\unrelated\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert.same({line = 1, column = 2, end_column = 7, msg = \"invalid UTF-8 escape sequence '\\\\u{11u'\"}, get_error([[\"\\u{11unrelated\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert.same({line = 1, column = 2, end_column = 6, msg = \"invalid UTF-8 escape sequence '\\\\u{11'\"}, get_error([[\"\\u{11]]))",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid UTF-8 escape sequence '\\\\u{u'\"}, get_error([[\"\\u{unrelated}\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u{'\"}, get_error([[\"\\u{]]))",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function()\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\c'\"}, get_error([[\"\\c\"]]))\r\n      end",
    "type": "function"
  }, {
    "id": 129,
    "text": "assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\c'\"}, get_error([[\"\\c\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"]]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"']]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"\r\n\"]]))\r\n      end",
    "type": "function"
  }, {
    "id": 132,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"']]))",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"\r\n\"]]))",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function()\r\n      it(\"parses empty short strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([[\"\"]]))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([['']]))\r\n      end)\r\n\r\n      it(\"parses short strings containing quotation marks correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"'\"}, get_token([[\"'\"]]))\r\n         assert.same({token = \"string\", token_value = '\"'}, get_token([['\"']]))\r\n      end)\r\n\r\n      it(\"parses simple short strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token([[\"foo\"]]))\r\n      end)\r\n\r\n      it(\"parses simple escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\r\\n\"}, get_token([[\"\\r\\n\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo\\\\bar\"}, get_token([[\"foo\\\\bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"a\\'\\'b\\\"\\\"\"}, get_token([[\"a\\'\\'b\\\"\\\"\"]]))\r\n      end)\r\n\r\n      it(\"parses escaped newline correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo \\nbar\"}, get_token([[\"foo \\\r\nbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo \\n\\n\\nbar\"}, get_token([[\"foo \\\r\n\\\r\n\\\r\nbar\"]]))\r\n      end)\r\n\r\n      it(\"parses \\\\z correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo \"}, get_token([[\"foo \\z\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\zbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z \r\n\r\n            bar\\z \"]]))\r\n      end)\r\n\r\n      it(\"parses decimal escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\0buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo b\\97r\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\1234\"}, get_token([[\"\\1234\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_error([[\"\\300\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"invalid escape sequence '\\\\'\"}, get_error([[\"\\]]))\r\n      end)\r\n\r\n      it(\"parses hexadecimal escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\x00buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo\\x20bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"jj\"}, get_token([[\"\\x6a\\x6A\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\X'\"}, get_error([[\"\\XFF\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x\\\"'\"}, get_error([[\"\\x\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid hexadecimal escape sequence '\\\\x1\\\"'\"}, get_error([[\"\\x1\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x1'\"}, get_error([[\"\\x1]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\xx'\"}, get_error([[\"\\xxx\"]]))\r\n      end)\r\n\r\n      it(\"parses utf-8 escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0\\0\"},\r\n            get_token([[\"\\u{0}\\u{00000000}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\0\\127\"},\r\n            get_token([[\"\\u{0}\\u{7F}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\194\\128\\223\\191\"},\r\n            get_token([[\"\\u{80}\\u{7fF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\224\\160\\128\\239\\191\\191\"},\r\n            get_token([[\"\\u{800}\\u{FFFF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\240\\144\\128\\128\\244\\143\\191\\191\"},\r\n            get_token([[\"\\u{10000}\\u{10FFFF}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 10, msg = \"invalid UTF-8 escape sequence '\\\\u{110000'\"}, get_error([[\"\\u{110000}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u\\\"'\"}, get_error([[\"\\u\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\un'\"}, get_error([[\"\\unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 7, msg = \"invalid UTF-8 escape sequence '\\\\u{11u'\"}, get_error([[\"\\u{11unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 6, msg = \"invalid UTF-8 escape sequence '\\\\u{11'\"}, get_error([[\"\\u{11]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid UTF-8 escape sequence '\\\\u{u'\"}, get_error([[\"\\u{unrelated}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u{'\"}, get_error([[\"\\u{]]))\r\n      end)\r\n\r\n      it(\"detects unknown escape sequences\", function()\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\c'\"}, get_error([[\"\\c\"]]))\r\n      end)\r\n\r\n      it(\"detects unfinished strings\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"]]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"']]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"\r\n\"]]))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 137,
    "text": "it(\"parses empty short strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([[\"\"]]))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([['']]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "it(\"parses short strings containing quotation marks correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"'\"}, get_token([[\"'\"]]))\r\n         assert.same({token = \"string\", token_value = '\"'}, get_token([['\"']]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "it(\"parses simple short strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token([[\"foo\"]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "it(\"parses simple escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\r\\n\"}, get_token([[\"\\r\\n\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo\\\\bar\"}, get_token([[\"foo\\\\bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"a\\'\\'b\\\"\\\"\"}, get_token([[\"a\\'\\'b\\\"\\\"\"]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "it(\"parses escaped newline correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo \\nbar\"}, get_token([[\"foo \\\r\nbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo \\n\\n\\nbar\"}, get_token([[\"foo \\\r\n\\\r\n\\\r\nbar\"]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "it(\"parses \\\\z correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo \"}, get_token([[\"foo \\z\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\zbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z \r\n\r\n            bar\\z \"]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "it(\"parses decimal escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\0buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo b\\97r\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\1234\"}, get_token([[\"\\1234\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_error([[\"\\300\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"invalid escape sequence '\\\\'\"}, get_error([[\"\\]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "it(\"parses hexadecimal escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\x00buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo\\x20bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"jj\"}, get_token([[\"\\x6a\\x6A\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\X'\"}, get_error([[\"\\XFF\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x\\\"'\"}, get_error([[\"\\x\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid hexadecimal escape sequence '\\\\x1\\\"'\"}, get_error([[\"\\x1\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x1'\"}, get_error([[\"\\x1]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\xx'\"}, get_error([[\"\\xxx\"]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "it(\"parses utf-8 escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0\\0\"},\r\n            get_token([[\"\\u{0}\\u{00000000}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\0\\127\"},\r\n            get_token([[\"\\u{0}\\u{7F}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\194\\128\\223\\191\"},\r\n            get_token([[\"\\u{80}\\u{7fF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\224\\160\\128\\239\\191\\191\"},\r\n            get_token([[\"\\u{800}\\u{FFFF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\240\\144\\128\\128\\244\\143\\191\\191\"},\r\n            get_token([[\"\\u{10000}\\u{10FFFF}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 10, msg = \"invalid UTF-8 escape sequence '\\\\u{110000'\"}, get_error([[\"\\u{110000}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u\\\"'\"}, get_error([[\"\\u\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\un'\"}, get_error([[\"\\unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 7, msg = \"invalid UTF-8 escape sequence '\\\\u{11u'\"}, get_error([[\"\\u{11unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 6, msg = \"invalid UTF-8 escape sequence '\\\\u{11'\"}, get_error([[\"\\u{11]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid UTF-8 escape sequence '\\\\u{u'\"}, get_error([[\"\\u{unrelated}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u{'\"}, get_error([[\"\\u{]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "it(\"detects unknown escape sequences\", function()\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\c'\"}, get_error([[\"\\c\"]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "it(\"detects unfinished strings\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"]]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"']]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"\r\n\"]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[]]\"))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[===[]===]\"))\r\n      end",
    "type": "function"
  }, {
    "id": 150,
    "text": "assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[]]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert.same({token = \"string\", token_value = \"\"}, get_token(\"[===[]===]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token(\"[[foo]]\"))\r\n         assert.same({token = \"string\", token_value = \"'foo'\\n'bar'\\n\"}, get_token(\"[===['foo'\\n'bar'\\n]===]\"))\r\n      end",
    "type": "function"
  }, {
    "id": 154,
    "text": "assert.same({token = \"string\", token_value = \"foo\"}, get_token(\"[[foo]]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "assert.same({token = \"string\", token_value = \"'foo'\\n'bar'\\n\"}, get_token(\"[===['foo'\\n'bar'\\n]===]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[\\n]]\"))\r\n         assert.same({token = \"string\", token_value = \"\\n\"}, get_token(\"[===[\\n\\n]===]\"))\r\n      end",
    "type": "function"
  }, {
    "id": 158,
    "text": "assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[\\n]]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "assert.same({token = \"string\", token_value = \"\\n\"}, get_token(\"[===[\\n\\n]===]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function()\r\n         assert.same({token = \"string\", token_value = \"]=] \"}, get_token(\"[[]=] ]]\"))\r\n         assert.same({token = \"string\", token_value = \"foo]]\\n]=== ]]\"}, get_token(\"[===[foo]]\\n]=== ]]]===]\"))\r\n      end",
    "type": "function"
  }, {
    "id": 162,
    "text": "assert.same({token = \"string\", token_value = \"]=] \"}, get_token(\"[[]=] ]]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert.same({token = \"string\", token_value = \"foo]]\\n]=== ]]\"}, get_token(\"[===[foo]]\\n]=== ]]]===]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=|\"))\r\n      end",
    "type": "function"
  }, {
    "id": 166,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=\"))",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=|\"))",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[=[\\n\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[[]\"))\r\n      end",
    "type": "function"
  }, {
    "id": 170,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[=[\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[[]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function()\r\n      it(\"parses empty long strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[]]\"))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[===[]===]\"))\r\n      end)\r\n\r\n      it(\"parses simple long strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token(\"[[foo]]\"))\r\n         assert.same({token = \"string\", token_value = \"'foo'\\n'bar'\\n\"}, get_token(\"[===['foo'\\n'bar'\\n]===]\"))\r\n      end)\r\n\r\n      it(\"skips first newline\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[\\n]]\"))\r\n         assert.same({token = \"string\", token_value = \"\\n\"}, get_token(\"[===[\\n\\n]===]\"))\r\n      end)\r\n\r\n      it(\"ignores closing brackets of unrelated length\", function()\r\n         assert.same({token = \"string\", token_value = \"]=] \"}, get_token(\"[[]=] ]]\"))\r\n         assert.same({token = \"string\", token_value = \"foo]]\\n]=== ]]\"}, get_token(\"[===[foo]]\\n]=== ]]]===]\"))\r\n      end)\r\n\r\n      it(\"detects invalid opening brackets\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=|\"))\r\n      end)\r\n\r\n      it(\"detects unfinished long strings\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[=[\\n\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[[]\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 174,
    "text": "it(\"parses empty long strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[]]\"))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[===[]===]\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "it(\"parses simple long strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token(\"[[foo]]\"))\r\n         assert.same({token = \"string\", token_value = \"'foo'\\n'bar'\\n\"}, get_token(\"[===['foo'\\n'bar'\\n]===]\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "it(\"skips first newline\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[\\n]]\"))\r\n         assert.same({token = \"string\", token_value = \"\\n\"}, get_token(\"[===[\\n\\n]===]\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "it(\"ignores closing brackets of unrelated length\", function()\r\n         assert.same({token = \"string\", token_value = \"]=] \"}, get_token(\"[[]=] ]]\"))\r\n         assert.same({token = \"string\", token_value = \"foo]]\\n]=== ]]\"}, get_token(\"[===[foo]]\\n]=== ]]]===]\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "it(\"detects invalid opening brackets\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=|\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "it(\"detects unfinished long strings\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[=[\\n\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[[]\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function()\r\n         assert.same({token = \"number\", token_value = \"0\"}, get_token(\"0\"))\r\n         assert.same({token = \"number\", token_value = \"123456789\"}, get_token(\"123456789\"))\r\n      end",
    "type": "function"
  }, {
    "id": 182,
    "text": "assert.same({token = \"number\", token_value = \"0\"}, get_token(\"0\"))",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "assert.same({token = \"number\", token_value = \"123456789\"}, get_token(\"123456789\"))",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function()\r\n         assert.same({token = \"number\", token_value = \"0x0\"}, get_token(\"0x0\"))\r\n         assert.same({token = \"number\", token_value = \"0X0\"}, get_token(\"0X0\"))\r\n         assert.same({token = \"number\", token_value = \"0xFfab\"}, get_token(\"0xFfab\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x\"))\r\n      end",
    "type": "function"
  }, {
    "id": 186,
    "text": "assert.same({token = \"number\", token_value = \"0x0\"}, get_token(\"0x0\"))",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "assert.same({token = \"number\", token_value = \"0X0\"}, get_token(\"0X0\"))",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert.same({token = \"number\", token_value = \"0xFfab\"}, get_token(\"0xFfab\"))",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x\"))",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function()\r\n         assert.same({token = \"number\", token_value = \"0.0\"}, get_token(\"0.0\"))\r\n         assert.same({token = \"number\", token_value = \"0.\"}, get_token(\"0.\"))\r\n         assert.same({token = \"number\", token_value = \".1234\"}, get_token(\".1234\"))\r\n      end",
    "type": "function"
  }, {
    "id": 192,
    "text": "assert.same({token = \"number\", token_value = \"0.0\"}, get_token(\"0.0\"))",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "assert.same({token = \"number\", token_value = \"0.\"}, get_token(\"0.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "assert.same({token = \"number\", token_value = \".1234\"}, get_token(\".1234\"))",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 196,
    "text": "function()\r\n         assert.same({token = \"number\", token_value = \"0xf.A\"}, get_token(\"0xf.A\"))\r\n         assert.same({token = \"number\", token_value = \"0x9.\"}, get_token(\"0x9.\"))\r\n         assert.same({token = \"number\", token_value = \"0x.b\"}, get_token(\"0x.b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.\"))\r\n      end",
    "type": "function"
  }, {
    "id": 197,
    "text": "assert.same({token = \"number\", token_value = \"0xf.A\"}, get_token(\"0xf.A\"))",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "assert.same({token = \"number\", token_value = \"0x9.\"}, get_token(\"0x9.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "assert.same({token = \"number\", token_value = \"0x.b\"}, get_token(\"0x.b\"))",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.\"))",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 202,
    "text": "function()\r\n         assert.same({token = \"number\", token_value = \"1.8e1\"}, get_token(\"1.8e1\"))\r\n         assert.same({token = \"number\", token_value = \".8e-1\"}, get_token(\".8e-1\"))\r\n         assert.same({token = \"number\", token_value = \"1.E+20\"}, get_token(\"1.E+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8ee\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+i\"))\r\n      end",
    "type": "function"
  }, {
    "id": 203,
    "text": "assert.same({token = \"number\", token_value = \"1.8e1\"}, get_token(\"1.8e1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "assert.same({token = \"number\", token_value = \".8e-1\"}, get_token(\".8e-1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "assert.same({token = \"number\", token_value = \"1.E+20\"}, get_token(\"1.E+20\"))",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e\"))",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-\"))",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+\"))",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8ee\"))",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-e\"))",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+i\"))",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function()\r\n         assert.same({token = \"number\", token_value = \"0x1.8p1\"}, get_token(\"0x1.8p1\"))\r\n         assert.same({token = \"number\", token_value = \"0x.8P-1\"}, get_token(\"0x.8P-1\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.p+20\"}, get_token(\"0x1.p+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8P+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8pF\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-F\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p+LL\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.p1\"))\r\n      end",
    "type": "function"
  }, {
    "id": 214,
    "text": "assert.same({token = \"number\", token_value = \"0x1.8p1\"}, get_token(\"0x1.8p1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "assert.same({token = \"number\", token_value = \"0x.8P-1\"}, get_token(\"0x.8P-1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "assert.same({token = \"number\", token_value = \"0x1.p+20\"}, get_token(\"0x1.p+20\"))",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p\"))",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-\"))",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8P+\"))",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8pF\"))",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-F\"))",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p+LL\"))",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.p1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 225,
    "text": "function()\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1ll\"}, get_token(\"1ll\"))\r\n         assert.same({token = \"number\", token_value = \"1Ll\"}, get_token(\"1Ll\"))\r\n         assert.same({token = \"number\", token_value = \"1lL\"}, get_token(\"1lL\"))\r\n         assert.same({token = \"number\", token_value = \"1ULL\"}, get_token(\"1ULL\"))\r\n         assert.same({token = \"number\", token_value = \"1uLl\"}, get_token(\"1uLl\"))\r\n         assert.same({token = \"number\", token_value = \"1LLu\"}, get_token(\"1LLu\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1L\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLG\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1LUL\"))\r\n         assert.same({token = \"number\", token_value = \"0x1LL\"}, get_token(\"0x1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1.0\"}, get_token(\"1.0LL\"))\r\n      end",
    "type": "function"
  }, {
    "id": 226,
    "text": "assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LL\"))",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "assert.same({token = \"number\", token_value = \"1ll\"}, get_token(\"1ll\"))",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "assert.same({token = \"number\", token_value = \"1Ll\"}, get_token(\"1Ll\"))",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "assert.same({token = \"number\", token_value = \"1lL\"}, get_token(\"1lL\"))",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "assert.same({token = \"number\", token_value = \"1ULL\"}, get_token(\"1ULL\"))",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "assert.same({token = \"number\", token_value = \"1uLl\"}, get_token(\"1uLl\"))",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "assert.same({token = \"number\", token_value = \"1LLu\"}, get_token(\"1LLu\"))",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1L\"))",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLG\"))",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1LUL\"))",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "assert.same({token = \"number\", token_value = \"0x1LL\"}, get_token(\"0x1LL\"))",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "assert.same({token = \"number\", token_value = \"1.0\"}, get_token(\"1.0LL\"))",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function()\r\n         assert.same({token = \"number\", token_value = \"1i\"}, get_token(\"1i\"))\r\n         assert.same({token = \"number\", token_value = \"1I\"}, get_token(\"1I\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1j\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLi\"))\r\n         assert.same({token = \"number\", token_value = \"0x1i\"}, get_token(\"0x1i\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.0i\"}, get_token(\"0x1.0i\"))\r\n      end",
    "type": "function"
  }, {
    "id": 240,
    "text": "assert.same({token = \"number\", token_value = \"1i\"}, get_token(\"1i\"))",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "assert.same({token = \"number\", token_value = \"1I\"}, get_token(\"1I\"))",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1j\"))",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLi\"))",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "assert.same({token = \"number\", token_value = \"0x1i\"}, get_token(\"0x1i\"))",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "assert.same({token = \"number\", token_value = \"0x1.0i\"}, get_token(\"0x1.0i\"))",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 247,
    "text": "function()\r\n      it(\"parses decimal integers correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0\"}, get_token(\"0\"))\r\n         assert.same({token = \"number\", token_value = \"123456789\"}, get_token(\"123456789\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal integers correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0x0\"}, get_token(\"0x0\"))\r\n         assert.same({token = \"number\", token_value = \"0X0\"}, get_token(\"0X0\"))\r\n         assert.same({token = \"number\", token_value = \"0xFfab\"}, get_token(\"0xFfab\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x\"))\r\n      end)\r\n\r\n      it(\"parses decimal floats correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0.0\"}, get_token(\"0.0\"))\r\n         assert.same({token = \"number\", token_value = \"0.\"}, get_token(\"0.\"))\r\n         assert.same({token = \"number\", token_value = \".1234\"}, get_token(\".1234\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal floats correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0xf.A\"}, get_token(\"0xf.A\"))\r\n         assert.same({token = \"number\", token_value = \"0x9.\"}, get_token(\"0x9.\"))\r\n         assert.same({token = \"number\", token_value = \"0x.b\"}, get_token(\"0x.b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.\"))\r\n      end)\r\n\r\n      it(\"parses decimal floats with exponent correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1.8e1\"}, get_token(\"1.8e1\"))\r\n         assert.same({token = \"number\", token_value = \".8e-1\"}, get_token(\".8e-1\"))\r\n         assert.same({token = \"number\", token_value = \"1.E+20\"}, get_token(\"1.E+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8ee\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+i\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal floats with exponent correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0x1.8p1\"}, get_token(\"0x1.8p1\"))\r\n         assert.same({token = \"number\", token_value = \"0x.8P-1\"}, get_token(\"0x.8P-1\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.p+20\"}, get_token(\"0x1.p+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8P+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8pF\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-F\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p+LL\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.p1\"))\r\n      end)\r\n\r\n      it(\"parses 64 bits cdata literals correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1ll\"}, get_token(\"1ll\"))\r\n         assert.same({token = \"number\", token_value = \"1Ll\"}, get_token(\"1Ll\"))\r\n         assert.same({token = \"number\", token_value = \"1lL\"}, get_token(\"1lL\"))\r\n         assert.same({token = \"number\", token_value = \"1ULL\"}, get_token(\"1ULL\"))\r\n         assert.same({token = \"number\", token_value = \"1uLl\"}, get_token(\"1uLl\"))\r\n         assert.same({token = \"number\", token_value = \"1LLu\"}, get_token(\"1LLu\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1L\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLG\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1LUL\"))\r\n         assert.same({token = \"number\", token_value = \"0x1LL\"}, get_token(\"0x1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1.0\"}, get_token(\"1.0LL\"))\r\n      end)\r\n\r\n      it(\"parses complex cdata literals correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1i\"}, get_token(\"1i\"))\r\n         assert.same({token = \"number\", token_value = \"1I\"}, get_token(\"1I\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1j\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLi\"))\r\n         assert.same({token = \"number\", token_value = \"0x1i\"}, get_token(\"0x1i\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.0i\"}, get_token(\"0x1.0i\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 248,
    "text": "it(\"parses decimal integers correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0\"}, get_token(\"0\"))\r\n         assert.same({token = \"number\", token_value = \"123456789\"}, get_token(\"123456789\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "it(\"parses hexadecimal integers correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0x0\"}, get_token(\"0x0\"))\r\n         assert.same({token = \"number\", token_value = \"0X0\"}, get_token(\"0X0\"))\r\n         assert.same({token = \"number\", token_value = \"0xFfab\"}, get_token(\"0xFfab\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "it(\"parses decimal floats correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0.0\"}, get_token(\"0.0\"))\r\n         assert.same({token = \"number\", token_value = \"0.\"}, get_token(\"0.\"))\r\n         assert.same({token = \"number\", token_value = \".1234\"}, get_token(\".1234\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "it(\"parses hexadecimal floats correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0xf.A\"}, get_token(\"0xf.A\"))\r\n         assert.same({token = \"number\", token_value = \"0x9.\"}, get_token(\"0x9.\"))\r\n         assert.same({token = \"number\", token_value = \"0x.b\"}, get_token(\"0x.b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "it(\"parses decimal floats with exponent correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1.8e1\"}, get_token(\"1.8e1\"))\r\n         assert.same({token = \"number\", token_value = \".8e-1\"}, get_token(\".8e-1\"))\r\n         assert.same({token = \"number\", token_value = \"1.E+20\"}, get_token(\"1.E+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8ee\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+i\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "it(\"parses hexadecimal floats with exponent correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0x1.8p1\"}, get_token(\"0x1.8p1\"))\r\n         assert.same({token = \"number\", token_value = \"0x.8P-1\"}, get_token(\"0x.8P-1\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.p+20\"}, get_token(\"0x1.p+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8P+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8pF\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-F\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p+LL\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.p1\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "it(\"parses 64 bits cdata literals correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1ll\"}, get_token(\"1ll\"))\r\n         assert.same({token = \"number\", token_value = \"1Ll\"}, get_token(\"1Ll\"))\r\n         assert.same({token = \"number\", token_value = \"1lL\"}, get_token(\"1lL\"))\r\n         assert.same({token = \"number\", token_value = \"1ULL\"}, get_token(\"1ULL\"))\r\n         assert.same({token = \"number\", token_value = \"1uLl\"}, get_token(\"1uLl\"))\r\n         assert.same({token = \"number\", token_value = \"1LLu\"}, get_token(\"1LLu\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1L\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLG\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1LUL\"))\r\n         assert.same({token = \"number\", token_value = \"0x1LL\"}, get_token(\"0x1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1.0\"}, get_token(\"1.0LL\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "it(\"parses complex cdata literals correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1i\"}, get_token(\"1i\"))\r\n         assert.same({token = \"number\", token_value = \"1I\"}, get_token(\"1I\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1j\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLi\"))\r\n         assert.same({token = \"number\", token_value = \"0x1i\"}, get_token(\"0x1i\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.0i\"}, get_token(\"0x1.0i\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "function()\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--\"))\r\n      assert.same({token = \"comment\", token_value = \"foo\"}, get_token(\"--foo\\nbar\"))\r\n      assert.same({token = \"comment\", token_value = \"[\"}, get_token(\"--[\"))\r\n      assert.same({token = \"comment\", token_value = \"[=foo\"}, get_token(\"--[=foo\\nbar\"))\r\n   end",
    "type": "function"
  }, {
    "id": 258,
    "text": "assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--\"))",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "assert.same({token = \"comment\", token_value = \"foo\"}, get_token(\"--foo\\nbar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "assert.same({token = \"comment\", token_value = \"[\"}, get_token(\"--[\"))",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "assert.same({token = \"comment\", token_value = \"[=foo\"}, get_token(\"--[=foo\\nbar\"))",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function()\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--[[]]\"))\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--[[\\n]]\"))\r\n      assert.same({token = \"comment\", token_value = \"foo\\nbar\"}, get_token(\"--[[foo\\nbar]]\"))\r\n      assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long comment\"}, get_error(\"--[=[]]\"))\r\n   end",
    "type": "function"
  }, {
    "id": 264,
    "text": "assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--[[]]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--[[\\n]]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "assert.same({token = \"comment\", token_value = \"foo\\nbar\"}, get_token(\"--[[foo\\nbar]]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long comment\"}, get_error(\"--[=[]]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function()\r\n      assert.same({\r\n         {token = \"local\", line = 1, column = 1, offset = 1},\r\n         {token = \"function\", line = 1, column = 7, offset = 7},\r\n         {token = \"name\", token_value = \"foo\", line = 1, column = 16, offset = 16},\r\n         {token = \"(\", line = 1, column = 19, offset = 19},\r\n         {token = \"name\", token_value = \"bar\", line = 1, column = 20, offset = 20},\r\n         {token = \")\", line = 1, column = 23, offset = 23},\r\n         {token = \"return\", line = 2, column = 4, offset = 28},\r\n         {token = \"name\", token_value = \"bar\", line = 2, column = 11, offset = 35},\r\n         {token = \":\", line = 2, column = 14, offset = 38},\r\n         {token = \"name\", token_value = \"get_foo\", line = 2, column = 15, offset = 39},\r\n         {token = \"string\", token_value = \"long string\\n\", line = 2, column = 22, offset = 46},\r\n         {token = \"end\", line = 5, column = 1, offset = 66},\r\n         {token = \"name\", token_value = \"print\", line = 7, column = 1, offset = 71},\r\n         {token = \"string\", token_value = \"123\\n\", line = 7, column = 7, offset = 77},\r\n         {token = \"eof\", line = 10, column = 1, offset = 105}\r\n      }, get_tokens([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\z\r\n       2\\z\r\n       3\\n\"\r\n]]))\r\n   end",
    "type": "function"
  }, {
    "id": 270,
    "text": "assert.same({\r\n         {token = \"local\", line = 1, column = 1, offset = 1},\r\n         {token = \"function\", line = 1, column = 7, offset = 7},\r\n         {token = \"name\", token_value = \"foo\", line = 1, column = 16, offset = 16},\r\n         {token = \"(\", line = 1, column = 19, offset = 19},\r\n         {token = \"name\", token_value = \"bar\", line = 1, column = 20, offset = 20},\r\n         {token = \")\", line = 1, column = 23, offset = 23},\r\n         {token = \"return\", line = 2, column = 4, offset = 28},\r\n         {token = \"name\", token_value = \"bar\", line = 2, column = 11, offset = 35},\r\n         {token = \":\", line = 2, column = 14, offset = 38},\r\n         {token = \"name\", token_value = \"get_foo\", line = 2, column = 15, offset = 39},\r\n         {token = \"string\", token_value = \"long string\\n\", line = 2, column = 22, offset = 46},\r\n         {token = \"end\", line = 5, column = 1, offset = 66},\r\n         {token = \"name\", token_value = \"print\", line = 7, column = 1, offset = 71},\r\n         {token = \"string\", token_value = \"123\\n\", line = 7, column = 7, offset = 77},\r\n         {token = \"eof\", line = 10, column = 1, offset = 105}\r\n      }, get_tokens([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\z\r\n       2\\z\r\n       3\\n\"\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 272,
    "text": "function()\r\n      assert.same({line = 7, column = 9, end_column = 10, msg = \"invalid escape sequence '\\\\g'\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\g\r\n       2\\z\r\n       3\\n\"\r\n]]))\r\n\r\n      assert.same({line = 8, column = 9, end_column = 12, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\\r\n       2\\300\r\n       3\\n\"\r\n]]))\r\n\r\n      assert.same({line = 8, column = 1, end_column = 1, msg = \"malformed number\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint (\r\n0xx)\r\n]]))\r\n\r\n      assert.same({line = 7, column = 7, end_column = 7, msg = \"unfinished string\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\z\r\n       2\\z\r\n       3\\n\r\n]]))\r\n   end",
    "type": "function"
  }, {
    "id": 273,
    "text": "assert.same({line = 7, column = 9, end_column = 10, msg = \"invalid escape sequence '\\\\g'\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\g\r\n       2\\z\r\n       3\\n\"\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "assert.same({line = 8, column = 9, end_column = 12, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\\r\n       2\\300\r\n       3\\n\"\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "assert.same({line = 8, column = 1, end_column = 1, msg = \"malformed number\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint (\r\n0xx)\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "assert.same({line = 7, column = 7, end_column = 7, msg = \"unfinished string\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\z\r\n       2\\z\r\n       3\\n\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 278,
    "text": "function()\r\n      assert.same({\r\n         {token = \"name\", token_value = \"a\", line = 1, column = 1, offset = 1},\r\n         {token = \",\", line = 1, column = 2, offset = 2},\r\n         {token = \"name\", token_value = \"b\", line = 1, column = 3, offset = 3},\r\n         {token = \"=\", line = 1, column = 4, offset = 4},\r\n         {token = \"number\", token_value = \"4ll\", line = 1, column = 5, offset = 5},\r\n         {token = \"name\", token_value = \"f\", line = 1, column = 8, offset = 8},\r\n         {token = \"=\", line = 1, column = 9, offset = 9},\r\n         {token = \"string\", token_value = \"\", line = 1, column = 10, offset = 10},\r\n         {token = \"function\", line = 1, column = 12, offset = 12},\r\n         {token = \"name\", token_value = \"_\", line = 1, column = 21, offset = 21},\r\n         {token = \"(\", line = 1, column = 22, offset = 22},\r\n         {token = \")\", line = 1, column = 23, offset = 23},\r\n         {token = \"return\", line = 1, column = 24, offset = 24},\r\n         {token = \"number\", token_value = \"1\", line = 1, column = 31, offset = 31},\r\n         {token = \"or\", line = 1, column = 32, offset = 32},\r\n         {token = \"string\", token_value = \"\", line = 1, column = 34, offset = 34},\r\n         {token = \"end\", line = 1, column = 36, offset = 36},\r\n         {token = \"eof\", line = 1, column = 39, offset = 39}\r\n      }, get_tokens(\"a,b=4llf=''function _()return 1or''end\"))\r\n   end",
    "type": "function"
  }, {
    "id": 279,
    "text": "assert.same({\r\n         {token = \"name\", token_value = \"a\", line = 1, column = 1, offset = 1},\r\n         {token = \",\", line = 1, column = 2, offset = 2},\r\n         {token = \"name\", token_value = \"b\", line = 1, column = 3, offset = 3},\r\n         {token = \"=\", line = 1, column = 4, offset = 4},\r\n         {token = \"number\", token_value = \"4ll\", line = 1, column = 5, offset = 5},\r\n         {token = \"name\", token_value = \"f\", line = 1, column = 8, offset = 8},\r\n         {token = \"=\", line = 1, column = 9, offset = 9},\r\n         {token = \"string\", token_value = \"\", line = 1, column = 10, offset = 10},\r\n         {token = \"function\", line = 1, column = 12, offset = 12},\r\n         {token = \"name\", token_value = \"_\", line = 1, column = 21, offset = 21},\r\n         {token = \"(\", line = 1, column = 22, offset = 22},\r\n         {token = \")\", line = 1, column = 23, offset = 23},\r\n         {token = \"return\", line = 1, column = 24, offset = 24},\r\n         {token = \"number\", token_value = \"1\", line = 1, column = 31, offset = 31},\r\n         {token = \"or\", line = 1, column = 32, offset = 32},\r\n         {token = \"string\", token_value = \"\", line = 1, column = 34, offset = 34},\r\n         {token = \"end\", line = 1, column = 36, offset = 36},\r\n         {token = \"eof\", line = 1, column = 39, offset = 39}\r\n      }, get_tokens(\"a,b=4llf=''function _()return 1or''end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 281,
    "text": "function()\r\n      get_tokens(io.open(\"spec/samples/argparse.lua\", \"rb\"):read(\"*a\"))\r\n   end",
    "type": "function"
  }, {
    "id": 282,
    "text": "get_tokens(io.open(\"spec/samples/argparse.lua\", \"rb\"):read(\"*a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function()\r\n   describe(\"quote\", function()\r\n      it(\"quotes strings\", function()\r\n         assert.equal(\"'foo'\", lexer.quote(\"foo\"))\r\n      end)\r\n\r\n      it(\"escapes not printable characters\", function()\r\n         assert.equal([['\\0\\1foo \\240bar\\127\\10']], lexer.quote(\"\\0\\1foo \\240bar\\127\\n\"))\r\n      end)\r\n   end)\r\n\r\n   it(\"parses EOS correctly\", function()\r\n      assert.same({token = \"eof\"}, get_token(\" \"))\r\n   end)\r\n\r\n   it(\"parses names correctly\", function()\r\n      assert.same({token = \"name\", token_value = \"foo\"}, get_token(\"foo\"))\r\n      assert.same({token = \"name\", token_value = \"_\"}, get_token(\"_\"))\r\n      assert.same({token = \"name\", token_value = \"foo1_2\"}, get_token(\"foo1_2\"))\r\n      assert.same({token = \"name\", token_value = \"foo\"}, get_token(\"foo!\"))\r\n   end)\r\n\r\n   it(\"parses keywords correctly\", function()\r\n      assert.same({token = \"do\"}, get_token(\"do\"))\r\n      assert.same({token = \"goto\"}, get_token(\"goto fail;\"))\r\n   end)\r\n\r\n   it(\"parses operators and special tokens correctly\", function()\r\n      assert.same({token = \"=\"}, get_token(\"= =\"))\r\n      assert.same({token = \"==\"}, get_token(\"==\"))\r\n      assert.same({token = \"<\"}, get_token(\"< =\"))\r\n      assert.same({token = \"<=\"}, get_token(\"<=\"))\r\n      assert.same({token = \"<<\"}, get_token(\"<<\"))\r\n      assert.same({token = \">\"}, get_token(\"> =\"))\r\n      assert.same({token = \">=\"}, get_token(\">=\"))\r\n      assert.same({token = \">>\"}, get_token(\">>\"))\r\n      assert.same({token = \"/\"}, get_token(\"/ /\"))\r\n      assert.same({token = \"//\"}, get_token(\"//\"))\r\n      assert.same({token = \".\"}, get_token(\".?.\"))\r\n      assert.same({token = \".\"}, get_token(\".\"))\r\n      assert.same({token = \"..\"}, get_token(\"..%\"))\r\n      assert.same({token = \"...\", token_value = \"...\"}, get_token(\"...\"))\r\n      assert.same({token = \":\"}, get_token(\":.:\"))\r\n      assert.same({token = \"::\"}, get_token(\"::.\"))\r\n   end)\r\n\r\n   it(\"parses single character tokens correctly\", function()\r\n      assert.same({token = \"(\"}, get_token(\"((\"))\r\n      assert.same({token = \"[\"}, get_token(\"[x]\"))\r\n      assert.same({token = \"$\"}, get_token(\"$$$\"))\r\n   end)\r\n\r\n   describe(\"when parsing short strings\", function()\r\n      it(\"parses empty short strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([[\"\"]]))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([['']]))\r\n      end)\r\n\r\n      it(\"parses short strings containing quotation marks correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"'\"}, get_token([[\"'\"]]))\r\n         assert.same({token = \"string\", token_value = '\"'}, get_token([['\"']]))\r\n      end)\r\n\r\n      it(\"parses simple short strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token([[\"foo\"]]))\r\n      end)\r\n\r\n      it(\"parses simple escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\r\\n\"}, get_token([[\"\\r\\n\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo\\\\bar\"}, get_token([[\"foo\\\\bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"a\\'\\'b\\\"\\\"\"}, get_token([[\"a\\'\\'b\\\"\\\"\"]]))\r\n      end)\r\n\r\n      it(\"parses escaped newline correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo \\nbar\"}, get_token([[\"foo \\\r\nbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo \\n\\n\\nbar\"}, get_token([[\"foo \\\r\n\\\r\n\\\r\nbar\"]]))\r\n      end)\r\n\r\n      it(\"parses \\\\z correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo \"}, get_token([[\"foo \\z\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\zbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z \r\n\r\n            bar\\z \"]]))\r\n      end)\r\n\r\n      it(\"parses decimal escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\0buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo b\\97r\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\1234\"}, get_token([[\"\\1234\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_error([[\"\\300\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"invalid escape sequence '\\\\'\"}, get_error([[\"\\]]))\r\n      end)\r\n\r\n      it(\"parses hexadecimal escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\x00buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo\\x20bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"jj\"}, get_token([[\"\\x6a\\x6A\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\X'\"}, get_error([[\"\\XFF\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x\\\"'\"}, get_error([[\"\\x\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid hexadecimal escape sequence '\\\\x1\\\"'\"}, get_error([[\"\\x1\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x1'\"}, get_error([[\"\\x1]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\xx'\"}, get_error([[\"\\xxx\"]]))\r\n      end)\r\n\r\n      it(\"parses utf-8 escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0\\0\"},\r\n            get_token([[\"\\u{0}\\u{00000000}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\0\\127\"},\r\n            get_token([[\"\\u{0}\\u{7F}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\194\\128\\223\\191\"},\r\n            get_token([[\"\\u{80}\\u{7fF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\224\\160\\128\\239\\191\\191\"},\r\n            get_token([[\"\\u{800}\\u{FFFF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\240\\144\\128\\128\\244\\143\\191\\191\"},\r\n            get_token([[\"\\u{10000}\\u{10FFFF}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 10, msg = \"invalid UTF-8 escape sequence '\\\\u{110000'\"}, get_error([[\"\\u{110000}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u\\\"'\"}, get_error([[\"\\u\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\un'\"}, get_error([[\"\\unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 7, msg = \"invalid UTF-8 escape sequence '\\\\u{11u'\"}, get_error([[\"\\u{11unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 6, msg = \"invalid UTF-8 escape sequence '\\\\u{11'\"}, get_error([[\"\\u{11]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid UTF-8 escape sequence '\\\\u{u'\"}, get_error([[\"\\u{unrelated}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u{'\"}, get_error([[\"\\u{]]))\r\n      end)\r\n\r\n      it(\"detects unknown escape sequences\", function()\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\c'\"}, get_error([[\"\\c\"]]))\r\n      end)\r\n\r\n      it(\"detects unfinished strings\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"]]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"']]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"\r\n\"]]))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing long strings\", function()\r\n      it(\"parses empty long strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[]]\"))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[===[]===]\"))\r\n      end)\r\n\r\n      it(\"parses simple long strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token(\"[[foo]]\"))\r\n         assert.same({token = \"string\", token_value = \"'foo'\\n'bar'\\n\"}, get_token(\"[===['foo'\\n'bar'\\n]===]\"))\r\n      end)\r\n\r\n      it(\"skips first newline\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[\\n]]\"))\r\n         assert.same({token = \"string\", token_value = \"\\n\"}, get_token(\"[===[\\n\\n]===]\"))\r\n      end)\r\n\r\n      it(\"ignores closing brackets of unrelated length\", function()\r\n         assert.same({token = \"string\", token_value = \"]=] \"}, get_token(\"[[]=] ]]\"))\r\n         assert.same({token = \"string\", token_value = \"foo]]\\n]=== ]]\"}, get_token(\"[===[foo]]\\n]=== ]]]===]\"))\r\n      end)\r\n\r\n      it(\"detects invalid opening brackets\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=|\"))\r\n      end)\r\n\r\n      it(\"detects unfinished long strings\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[=[\\n\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[[]\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when parsing numbers\", function()\r\n      it(\"parses decimal integers correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0\"}, get_token(\"0\"))\r\n         assert.same({token = \"number\", token_value = \"123456789\"}, get_token(\"123456789\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal integers correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0x0\"}, get_token(\"0x0\"))\r\n         assert.same({token = \"number\", token_value = \"0X0\"}, get_token(\"0X0\"))\r\n         assert.same({token = \"number\", token_value = \"0xFfab\"}, get_token(\"0xFfab\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x\"))\r\n      end)\r\n\r\n      it(\"parses decimal floats correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0.0\"}, get_token(\"0.0\"))\r\n         assert.same({token = \"number\", token_value = \"0.\"}, get_token(\"0.\"))\r\n         assert.same({token = \"number\", token_value = \".1234\"}, get_token(\".1234\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal floats correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0xf.A\"}, get_token(\"0xf.A\"))\r\n         assert.same({token = \"number\", token_value = \"0x9.\"}, get_token(\"0x9.\"))\r\n         assert.same({token = \"number\", token_value = \"0x.b\"}, get_token(\"0x.b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.\"))\r\n      end)\r\n\r\n      it(\"parses decimal floats with exponent correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1.8e1\"}, get_token(\"1.8e1\"))\r\n         assert.same({token = \"number\", token_value = \".8e-1\"}, get_token(\".8e-1\"))\r\n         assert.same({token = \"number\", token_value = \"1.E+20\"}, get_token(\"1.E+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8ee\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+i\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal floats with exponent correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0x1.8p1\"}, get_token(\"0x1.8p1\"))\r\n         assert.same({token = \"number\", token_value = \"0x.8P-1\"}, get_token(\"0x.8P-1\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.p+20\"}, get_token(\"0x1.p+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8P+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8pF\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-F\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p+LL\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.p1\"))\r\n      end)\r\n\r\n      it(\"parses 64 bits cdata literals correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1ll\"}, get_token(\"1ll\"))\r\n         assert.same({token = \"number\", token_value = \"1Ll\"}, get_token(\"1Ll\"))\r\n         assert.same({token = \"number\", token_value = \"1lL\"}, get_token(\"1lL\"))\r\n         assert.same({token = \"number\", token_value = \"1ULL\"}, get_token(\"1ULL\"))\r\n         assert.same({token = \"number\", token_value = \"1uLl\"}, get_token(\"1uLl\"))\r\n         assert.same({token = \"number\", token_value = \"1LLu\"}, get_token(\"1LLu\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1L\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLG\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1LUL\"))\r\n         assert.same({token = \"number\", token_value = \"0x1LL\"}, get_token(\"0x1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1.0\"}, get_token(\"1.0LL\"))\r\n      end)\r\n\r\n      it(\"parses complex cdata literals correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1i\"}, get_token(\"1i\"))\r\n         assert.same({token = \"number\", token_value = \"1I\"}, get_token(\"1I\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1j\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLi\"))\r\n         assert.same({token = \"number\", token_value = \"0x1i\"}, get_token(\"0x1i\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.0i\"}, get_token(\"0x1.0i\"))\r\n      end)\r\n   end)\r\n\r\n   it(\"parses short comments correctly\", function()\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--\"))\r\n      assert.same({token = \"comment\", token_value = \"foo\"}, get_token(\"--foo\\nbar\"))\r\n      assert.same({token = \"comment\", token_value = \"[\"}, get_token(\"--[\"))\r\n      assert.same({token = \"comment\", token_value = \"[=foo\"}, get_token(\"--[=foo\\nbar\"))\r\n   end)\r\n\r\n   it(\"parses long comments correctly\", function()\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--[[]]\"))\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--[[\\n]]\"))\r\n      assert.same({token = \"comment\", token_value = \"foo\\nbar\"}, get_token(\"--[[foo\\nbar]]\"))\r\n      assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long comment\"}, get_error(\"--[=[]]\"))\r\n   end)\r\n\r\n   it(\"provides correct location info\", function()\r\n      assert.same({\r\n         {token = \"local\", line = 1, column = 1, offset = 1},\r\n         {token = \"function\", line = 1, column = 7, offset = 7},\r\n         {token = \"name\", token_value = \"foo\", line = 1, column = 16, offset = 16},\r\n         {token = \"(\", line = 1, column = 19, offset = 19},\r\n         {token = \"name\", token_value = \"bar\", line = 1, column = 20, offset = 20},\r\n         {token = \")\", line = 1, column = 23, offset = 23},\r\n         {token = \"return\", line = 2, column = 4, offset = 28},\r\n         {token = \"name\", token_value = \"bar\", line = 2, column = 11, offset = 35},\r\n         {token = \":\", line = 2, column = 14, offset = 38},\r\n         {token = \"name\", token_value = \"get_foo\", line = 2, column = 15, offset = 39},\r\n         {token = \"string\", token_value = \"long string\\n\", line = 2, column = 22, offset = 46},\r\n         {token = \"end\", line = 5, column = 1, offset = 66},\r\n         {token = \"name\", token_value = \"print\", line = 7, column = 1, offset = 71},\r\n         {token = \"string\", token_value = \"123\\n\", line = 7, column = 7, offset = 77},\r\n         {token = \"eof\", line = 10, column = 1, offset = 105}\r\n      }, get_tokens([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\z\r\n       2\\z\r\n       3\\n\"\r\n]]))\r\n   end)\r\n\r\n   it(\"provides correct location info for errors\", function()\r\n      assert.same({line = 7, column = 9, end_column = 10, msg = \"invalid escape sequence '\\\\g'\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\g\r\n       2\\z\r\n       3\\n\"\r\n]]))\r\n\r\n      assert.same({line = 8, column = 9, end_column = 12, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\\r\n       2\\300\r\n       3\\n\"\r\n]]))\r\n\r\n      assert.same({line = 8, column = 1, end_column = 1, msg = \"malformed number\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint (\r\n0xx)\r\n]]))\r\n\r\n      assert.same({line = 7, column = 7, end_column = 7, msg = \"unfinished string\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\z\r\n       2\\z\r\n       3\\n\r\n]]))\r\n   end)\r\n\r\n   it(\"parses minified source correctly\", function()\r\n      assert.same({\r\n         {token = \"name\", token_value = \"a\", line = 1, column = 1, offset = 1},\r\n         {token = \",\", line = 1, column = 2, offset = 2},\r\n         {token = \"name\", token_value = \"b\", line = 1, column = 3, offset = 3},\r\n         {token = \"=\", line = 1, column = 4, offset = 4},\r\n         {token = \"number\", token_value = \"4ll\", line = 1, column = 5, offset = 5},\r\n         {token = \"name\", token_value = \"f\", line = 1, column = 8, offset = 8},\r\n         {token = \"=\", line = 1, column = 9, offset = 9},\r\n         {token = \"string\", token_value = \"\", line = 1, column = 10, offset = 10},\r\n         {token = \"function\", line = 1, column = 12, offset = 12},\r\n         {token = \"name\", token_value = \"_\", line = 1, column = 21, offset = 21},\r\n         {token = \"(\", line = 1, column = 22, offset = 22},\r\n         {token = \")\", line = 1, column = 23, offset = 23},\r\n         {token = \"return\", line = 1, column = 24, offset = 24},\r\n         {token = \"number\", token_value = \"1\", line = 1, column = 31, offset = 31},\r\n         {token = \"or\", line = 1, column = 32, offset = 32},\r\n         {token = \"string\", token_value = \"\", line = 1, column = 34, offset = 34},\r\n         {token = \"end\", line = 1, column = 36, offset = 36},\r\n         {token = \"eof\", line = 1, column = 39, offset = 39}\r\n      }, get_tokens(\"a,b=4llf=''function _()return 1or''end\"))\r\n   end)\r\n\r\n   it(\"handles argparse sample\", function()\r\n      get_tokens(io.open(\"spec/samples/argparse.lua\", \"rb\"):read(\"*a\"))\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 285,
    "text": "describe(\"quote\", function()\r\n      it(\"quotes strings\", function()\r\n         assert.equal(\"'foo'\", lexer.quote(\"foo\"))\r\n      end)\r\n\r\n      it(\"escapes not printable characters\", function()\r\n         assert.equal([['\\0\\1foo \\240bar\\127\\10']], lexer.quote(\"\\0\\1foo \\240bar\\127\\n\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "it(\"parses EOS correctly\", function()\r\n      assert.same({token = \"eof\"}, get_token(\" \"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "it(\"parses names correctly\", function()\r\n      assert.same({token = \"name\", token_value = \"foo\"}, get_token(\"foo\"))\r\n      assert.same({token = \"name\", token_value = \"_\"}, get_token(\"_\"))\r\n      assert.same({token = \"name\", token_value = \"foo1_2\"}, get_token(\"foo1_2\"))\r\n      assert.same({token = \"name\", token_value = \"foo\"}, get_token(\"foo!\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "it(\"parses keywords correctly\", function()\r\n      assert.same({token = \"do\"}, get_token(\"do\"))\r\n      assert.same({token = \"goto\"}, get_token(\"goto fail;\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "it(\"parses operators and special tokens correctly\", function()\r\n      assert.same({token = \"=\"}, get_token(\"= =\"))\r\n      assert.same({token = \"==\"}, get_token(\"==\"))\r\n      assert.same({token = \"<\"}, get_token(\"< =\"))\r\n      assert.same({token = \"<=\"}, get_token(\"<=\"))\r\n      assert.same({token = \"<<\"}, get_token(\"<<\"))\r\n      assert.same({token = \">\"}, get_token(\"> =\"))\r\n      assert.same({token = \">=\"}, get_token(\">=\"))\r\n      assert.same({token = \">>\"}, get_token(\">>\"))\r\n      assert.same({token = \"/\"}, get_token(\"/ /\"))\r\n      assert.same({token = \"//\"}, get_token(\"//\"))\r\n      assert.same({token = \".\"}, get_token(\".?.\"))\r\n      assert.same({token = \".\"}, get_token(\".\"))\r\n      assert.same({token = \"..\"}, get_token(\"..%\"))\r\n      assert.same({token = \"...\", token_value = \"...\"}, get_token(\"...\"))\r\n      assert.same({token = \":\"}, get_token(\":.:\"))\r\n      assert.same({token = \"::\"}, get_token(\"::.\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "it(\"parses single character tokens correctly\", function()\r\n      assert.same({token = \"(\"}, get_token(\"((\"))\r\n      assert.same({token = \"[\"}, get_token(\"[x]\"))\r\n      assert.same({token = \"$\"}, get_token(\"$$$\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "describe(\"when parsing short strings\", function()\r\n      it(\"parses empty short strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([[\"\"]]))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token([['']]))\r\n      end)\r\n\r\n      it(\"parses short strings containing quotation marks correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"'\"}, get_token([[\"'\"]]))\r\n         assert.same({token = \"string\", token_value = '\"'}, get_token([['\"']]))\r\n      end)\r\n\r\n      it(\"parses simple short strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token([[\"foo\"]]))\r\n      end)\r\n\r\n      it(\"parses simple escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\r\\n\"}, get_token([[\"\\r\\n\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo\\\\bar\"}, get_token([[\"foo\\\\bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"a\\'\\'b\\\"\\\"\"}, get_token([[\"a\\'\\'b\\\"\\\"\"]]))\r\n      end)\r\n\r\n      it(\"parses escaped newline correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo \\nbar\"}, get_token([[\"foo \\\r\nbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo \\n\\n\\nbar\"}, get_token([[\"foo \\\r\n\\\r\n\\\r\nbar\"]]))\r\n      end)\r\n\r\n      it(\"parses \\\\z correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo \"}, get_token([[\"foo \\z\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\zbar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo \\z \r\n\r\n            bar\\z \"]]))\r\n      end)\r\n\r\n      it(\"parses decimal escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\0buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo b\\97r\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\1234\"}, get_token([[\"\\1234\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_error([[\"\\300\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 2, msg = \"invalid escape sequence '\\\\'\"}, get_error([[\"\\]]))\r\n      end)\r\n\r\n      it(\"parses hexadecimal escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0buffer exploit\"}, get_token([[\"\\x00buffer exploit\"]]))\r\n         assert.same({token = \"string\", token_value = \"foo bar\"}, get_token([[\"foo\\x20bar\"]]))\r\n         assert.same({token = \"string\", token_value = \"jj\"}, get_token([[\"\\x6a\\x6A\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\X'\"}, get_error([[\"\\XFF\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x\\\"'\"}, get_error([[\"\\x\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid hexadecimal escape sequence '\\\\x1\\\"'\"}, get_error([[\"\\x1\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\x1'\"}, get_error([[\"\\x1]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid hexadecimal escape sequence '\\\\xx'\"}, get_error([[\"\\xxx\"]]))\r\n      end)\r\n\r\n      it(\"parses utf-8 escape sequences correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\\0\\0\"},\r\n            get_token([[\"\\u{0}\\u{00000000}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\0\\127\"},\r\n            get_token([[\"\\u{0}\\u{7F}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\194\\128\\223\\191\"},\r\n            get_token([[\"\\u{80}\\u{7fF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\224\\160\\128\\239\\191\\191\"},\r\n            get_token([[\"\\u{800}\\u{FFFF}\"]]))\r\n         assert.same({token = \"string\", token_value = \"\\240\\144\\128\\128\\244\\143\\191\\191\"},\r\n            get_token([[\"\\u{10000}\\u{10FFFF}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 10, msg = \"invalid UTF-8 escape sequence '\\\\u{110000'\"}, get_error([[\"\\u{110000}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u\\\"'\"}, get_error([[\"\\u\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\un'\"}, get_error([[\"\\unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 7, msg = \"invalid UTF-8 escape sequence '\\\\u{11u'\"}, get_error([[\"\\u{11unrelated\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 6, msg = \"invalid UTF-8 escape sequence '\\\\u{11'\"}, get_error([[\"\\u{11]]))\r\n         assert.same({line = 1, column = 2, end_column = 5, msg = \"invalid UTF-8 escape sequence '\\\\u{u'\"}, get_error([[\"\\u{unrelated}\"]]))\r\n         assert.same({line = 1, column = 2, end_column = 4, msg = \"invalid UTF-8 escape sequence '\\\\u{'\"}, get_error([[\"\\u{]]))\r\n      end)\r\n\r\n      it(\"detects unknown escape sequences\", function()\r\n         assert.same({line = 1, column = 2, end_column = 3, msg = \"invalid escape sequence '\\\\c'\"}, get_error([[\"\\c\"]]))\r\n      end)\r\n\r\n      it(\"detects unfinished strings\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"]]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"']]))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished string\"}, get_error([[\"\r\n\"]]))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "describe(\"when parsing long strings\", function()\r\n      it(\"parses empty long strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[]]\"))\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[===[]===]\"))\r\n      end)\r\n\r\n      it(\"parses simple long strings correctly\", function()\r\n         assert.same({token = \"string\", token_value = \"foo\"}, get_token(\"[[foo]]\"))\r\n         assert.same({token = \"string\", token_value = \"'foo'\\n'bar'\\n\"}, get_token(\"[===['foo'\\n'bar'\\n]===]\"))\r\n      end)\r\n\r\n      it(\"skips first newline\", function()\r\n         assert.same({token = \"string\", token_value = \"\"}, get_token(\"[[\\n]]\"))\r\n         assert.same({token = \"string\", token_value = \"\\n\"}, get_token(\"[===[\\n\\n]===]\"))\r\n      end)\r\n\r\n      it(\"ignores closing brackets of unrelated length\", function()\r\n         assert.same({token = \"string\", token_value = \"]=] \"}, get_token(\"[[]=] ]]\"))\r\n         assert.same({token = \"string\", token_value = \"foo]]\\n]=== ]]\"}, get_token(\"[===[foo]]\\n]=== ]]]===]\"))\r\n      end)\r\n\r\n      it(\"detects invalid opening brackets\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"invalid long string delimiter\"}, get_error(\"[=|\"))\r\n      end)\r\n\r\n      it(\"detects unfinished long strings\", function()\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[=[\\n\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long string\"}, get_error(\"[[]\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "describe(\"when parsing numbers\", function()\r\n      it(\"parses decimal integers correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0\"}, get_token(\"0\"))\r\n         assert.same({token = \"number\", token_value = \"123456789\"}, get_token(\"123456789\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal integers correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0x0\"}, get_token(\"0x0\"))\r\n         assert.same({token = \"number\", token_value = \"0X0\"}, get_token(\"0X0\"))\r\n         assert.same({token = \"number\", token_value = \"0xFfab\"}, get_token(\"0xFfab\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x\"))\r\n      end)\r\n\r\n      it(\"parses decimal floats correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0.0\"}, get_token(\"0.0\"))\r\n         assert.same({token = \"number\", token_value = \"0.\"}, get_token(\"0.\"))\r\n         assert.same({token = \"number\", token_value = \".1234\"}, get_token(\".1234\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal floats correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0xf.A\"}, get_token(\"0xf.A\"))\r\n         assert.same({token = \"number\", token_value = \"0x9.\"}, get_token(\"0x9.\"))\r\n         assert.same({token = \"number\", token_value = \"0x.b\"}, get_token(\"0x.b\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.\"))\r\n      end)\r\n\r\n      it(\"parses decimal floats with exponent correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1.8e1\"}, get_token(\"1.8e1\"))\r\n         assert.same({token = \"number\", token_value = \".8e-1\"}, get_token(\".8e-1\"))\r\n         assert.same({token = \"number\", token_value = \"1.E+20\"}, get_token(\"1.E+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8ee\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8e-e\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"1.8E+i\"))\r\n      end)\r\n\r\n      it(\"parses hexadecimal floats with exponent correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"0x1.8p1\"}, get_token(\"0x1.8p1\"))\r\n         assert.same({token = \"number\", token_value = \"0x.8P-1\"}, get_token(\"0x.8P-1\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.p+20\"}, get_token(\"0x1.p+20\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8P+\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8pF\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p-F\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x1.8p+LL\"))\r\n         assert.same({line = 1, column = 1, end_column = 1, msg = \"malformed number\"}, get_error(\"0x.p1\"))\r\n      end)\r\n\r\n      it(\"parses 64 bits cdata literals correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1ll\"}, get_token(\"1ll\"))\r\n         assert.same({token = \"number\", token_value = \"1Ll\"}, get_token(\"1Ll\"))\r\n         assert.same({token = \"number\", token_value = \"1lL\"}, get_token(\"1lL\"))\r\n         assert.same({token = \"number\", token_value = \"1ULL\"}, get_token(\"1ULL\"))\r\n         assert.same({token = \"number\", token_value = \"1uLl\"}, get_token(\"1uLl\"))\r\n         assert.same({token = \"number\", token_value = \"1LLu\"}, get_token(\"1LLu\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1L\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLG\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1LUL\"))\r\n         assert.same({token = \"number\", token_value = \"0x1LL\"}, get_token(\"0x1LL\"))\r\n         assert.same({token = \"number\", token_value = \"1.0\"}, get_token(\"1.0LL\"))\r\n      end)\r\n\r\n      it(\"parses complex cdata literals correctly\", function()\r\n         assert.same({token = \"number\", token_value = \"1i\"}, get_token(\"1i\"))\r\n         assert.same({token = \"number\", token_value = \"1I\"}, get_token(\"1I\"))\r\n         assert.same({token = \"number\", token_value = \"1\"}, get_token(\"1j\"))\r\n         assert.same({token = \"number\", token_value = \"1LL\"}, get_token(\"1LLi\"))\r\n         assert.same({token = \"number\", token_value = \"0x1i\"}, get_token(\"0x1i\"))\r\n         assert.same({token = \"number\", token_value = \"0x1.0i\"}, get_token(\"0x1.0i\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "it(\"parses short comments correctly\", function()\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--\"))\r\n      assert.same({token = \"comment\", token_value = \"foo\"}, get_token(\"--foo\\nbar\"))\r\n      assert.same({token = \"comment\", token_value = \"[\"}, get_token(\"--[\"))\r\n      assert.same({token = \"comment\", token_value = \"[=foo\"}, get_token(\"--[=foo\\nbar\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "it(\"parses long comments correctly\", function()\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--[[]]\"))\r\n      assert.same({token = \"comment\", token_value = \"\"}, get_token(\"--[[\\n]]\"))\r\n      assert.same({token = \"comment\", token_value = \"foo\\nbar\"}, get_token(\"--[[foo\\nbar]]\"))\r\n      assert.same({line = 1, column = 1, end_column = 1, msg = \"unfinished long comment\"}, get_error(\"--[=[]]\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "it(\"provides correct location info\", function()\r\n      assert.same({\r\n         {token = \"local\", line = 1, column = 1, offset = 1},\r\n         {token = \"function\", line = 1, column = 7, offset = 7},\r\n         {token = \"name\", token_value = \"foo\", line = 1, column = 16, offset = 16},\r\n         {token = \"(\", line = 1, column = 19, offset = 19},\r\n         {token = \"name\", token_value = \"bar\", line = 1, column = 20, offset = 20},\r\n         {token = \")\", line = 1, column = 23, offset = 23},\r\n         {token = \"return\", line = 2, column = 4, offset = 28},\r\n         {token = \"name\", token_value = \"bar\", line = 2, column = 11, offset = 35},\r\n         {token = \":\", line = 2, column = 14, offset = 38},\r\n         {token = \"name\", token_value = \"get_foo\", line = 2, column = 15, offset = 39},\r\n         {token = \"string\", token_value = \"long string\\n\", line = 2, column = 22, offset = 46},\r\n         {token = \"end\", line = 5, column = 1, offset = 66},\r\n         {token = \"name\", token_value = \"print\", line = 7, column = 1, offset = 71},\r\n         {token = \"string\", token_value = \"123\\n\", line = 7, column = 7, offset = 77},\r\n         {token = \"eof\", line = 10, column = 1, offset = 105}\r\n      }, get_tokens([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\z\r\n       2\\z\r\n       3\\n\"\r\n]]))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "it(\"provides correct location info for errors\", function()\r\n      assert.same({line = 7, column = 9, end_column = 10, msg = \"invalid escape sequence '\\\\g'\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\g\r\n       2\\z\r\n       3\\n\"\r\n]]))\r\n\r\n      assert.same({line = 8, column = 9, end_column = 12, msg = \"invalid decimal escape sequence '\\\\300'\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\\r\n       2\\300\r\n       3\\n\"\r\n]]))\r\n\r\n      assert.same({line = 8, column = 1, end_column = 1, msg = \"malformed number\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint (\r\n0xx)\r\n]]))\r\n\r\n      assert.same({line = 7, column = 7, end_column = 7, msg = \"unfinished string\"}, get_last_error([[\r\nlocal function foo(bar)\r\n   return bar:get_foo[=[\r\nlong string\r\n]=]\r\nend\r\n\r\nprint \"1\\z\r\n       2\\z\r\n       3\\n\r\n]]))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "it(\"parses minified source correctly\", function()\r\n      assert.same({\r\n         {token = \"name\", token_value = \"a\", line = 1, column = 1, offset = 1},\r\n         {token = \",\", line = 1, column = 2, offset = 2},\r\n         {token = \"name\", token_value = \"b\", line = 1, column = 3, offset = 3},\r\n         {token = \"=\", line = 1, column = 4, offset = 4},\r\n         {token = \"number\", token_value = \"4ll\", line = 1, column = 5, offset = 5},\r\n         {token = \"name\", token_value = \"f\", line = 1, column = 8, offset = 8},\r\n         {token = \"=\", line = 1, column = 9, offset = 9},\r\n         {token = \"string\", token_value = \"\", line = 1, column = 10, offset = 10},\r\n         {token = \"function\", line = 1, column = 12, offset = 12},\r\n         {token = \"name\", token_value = \"_\", line = 1, column = 21, offset = 21},\r\n         {token = \"(\", line = 1, column = 22, offset = 22},\r\n         {token = \")\", line = 1, column = 23, offset = 23},\r\n         {token = \"return\", line = 1, column = 24, offset = 24},\r\n         {token = \"number\", token_value = \"1\", line = 1, column = 31, offset = 31},\r\n         {token = \"or\", line = 1, column = 32, offset = 32},\r\n         {token = \"string\", token_value = \"\", line = 1, column = 34, offset = 34},\r\n         {token = \"end\", line = 1, column = 36, offset = 36},\r\n         {token = \"eof\", line = 1, column = 39, offset = 39}\r\n      }, get_tokens(\"a,b=4llf=''function _()return 1or''end\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "it(\"handles argparse sample\", function()\r\n      get_tokens(io.open(\"spec/samples/argparse.lua\", \"rb\"):read(\"*a\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "",
    "type": "function container"
  }, {
    "id": 302,
    "text": "next_token",
    "type": "global function"
  }, {
    "id": 303,
    "text": "new_state",
    "type": "global function"
  }, {
    "id": 304,
    "text": "quote",
    "type": "global function"
  }, {
    "id": 305,
    "text": "same",
    "type": "global function"
  }, {
    "id": 306,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 307,
    "text": "require",
    "type": "global function"
  }, {
    "id": 308,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 309,
    "text": "open",
    "type": "global function"
  }, {
    "id": 310,
    "text": "it",
    "type": "global function"
  }, {
    "id": 311,
    "text": "",
    "type": "variable container"
  }, {
    "id": 312,
    "text": "",
    "type": "require container"
  }, {
    "id": 313,
    "text": "",
    "type": "require local variable"
  } ]
}