{
  "_filename": "check_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/check_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 106,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 4
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 7
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 10
  }, {
    "from": 163,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 13
  }, {
    "from": 163,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 16
  }, {
    "from": 163,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 19
  }, {
    "from": 163,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 22
  }, {
    "from": 163,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 25
  }, {
    "from": 163,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 28
  }, {
    "from": 163,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 31
  }, {
    "from": 163,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 34
  }, {
    "from": 163,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 37
  }, {
    "from": 163,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 40
  }, {
    "from": 163,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 43
  }, {
    "from": 177,
    "label": "has",
    "to": 44
  }, {
    "from": 163,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 47
  }, {
    "from": 163,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 50
  }, {
    "from": 163,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 53
  }, {
    "from": 163,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 56
  }, {
    "from": 163,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 59
  }, {
    "from": 163,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 62
  }, {
    "from": 163,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 65
  }, {
    "from": 163,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 68
  }, {
    "from": 163,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 71
  }, {
    "from": 163,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 74
  }, {
    "from": 187,
    "label": "has",
    "to": 75
  }, {
    "from": 163,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 78
  }, {
    "from": 188,
    "label": "has",
    "to": 79
  }, {
    "from": 188,
    "label": "has",
    "to": 80
  }, {
    "from": 163,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 83
  }, {
    "from": 163,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 86
  }, {
    "from": 163,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 89
  }, {
    "from": 163,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 92
  }, {
    "from": 163,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 95
  }, {
    "from": 163,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 98
  }, {
    "from": 163,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 101
  }, {
    "from": 163,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 104
  }, {
    "from": 163,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 107
  }, {
    "from": 197,
    "label": "has",
    "to": 108
  }, {
    "from": 197,
    "label": "has",
    "to": 109
  }, {
    "from": 163,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 112
  }, {
    "from": 163,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 115
  }, {
    "from": 163,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 118
  }, {
    "from": 163,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 121
  }, {
    "from": 201,
    "label": "has",
    "to": 122
  }, {
    "from": 163,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 125
  }, {
    "from": 202,
    "label": "has",
    "to": 126
  }, {
    "from": 202,
    "label": "has",
    "to": 127
  }, {
    "from": 163,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 130
  }, {
    "from": 203,
    "label": "has",
    "to": 131
  }, {
    "from": 163,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 134
  }, {
    "from": 163,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 137
  }, {
    "from": 163,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 140
  }, {
    "from": 163,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 143
  }, {
    "from": 163,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 146
  }, {
    "from": 163,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 149
  }, {
    "from": 163,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 152
  }, {
    "from": 163,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 155
  }, {
    "from": 163,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 158
  }, {
    "from": 163,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 161
  }, {
    "from": 163,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 217
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 218
  }, {
    "from": 215,
    "label": "calls",
    "to": 220
  }, {
    "from": 215,
    "label": "calls",
    "to": 216
  }, {
    "from": 215,
    "label": "calls",
    "to": 219
  }, {
    "from": 215,
    "label": "calls",
    "to": 221
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 215,
    "label": "calls",
    "to": 222
  }, {
    "from": 1,
    "label": "contains",
    "to": 215
  }, {
    "from": 215,
    "label": "declares",
    "to": 3
  }, {
    "from": 215,
    "label": "declares",
    "to": 6
  }, {
    "from": 215,
    "label": "declares",
    "to": 9
  }, {
    "from": 215,
    "label": "declares",
    "to": 12
  }, {
    "from": 215,
    "label": "declares",
    "to": 15
  }, {
    "from": 215,
    "label": "declares",
    "to": 18
  }, {
    "from": 215,
    "label": "declares",
    "to": 21
  }, {
    "from": 215,
    "label": "declares",
    "to": 24
  }, {
    "from": 215,
    "label": "declares",
    "to": 27
  }, {
    "from": 215,
    "label": "declares",
    "to": 30
  }, {
    "from": 215,
    "label": "declares",
    "to": 33
  }, {
    "from": 215,
    "label": "declares",
    "to": 36
  }, {
    "from": 215,
    "label": "declares",
    "to": 39
  }, {
    "from": 215,
    "label": "declares",
    "to": 42
  }, {
    "from": 215,
    "label": "declares",
    "to": 46
  }, {
    "from": 215,
    "label": "declares",
    "to": 49
  }, {
    "from": 215,
    "label": "declares",
    "to": 52
  }, {
    "from": 215,
    "label": "declares",
    "to": 55
  }, {
    "from": 215,
    "label": "declares",
    "to": 58
  }, {
    "from": 215,
    "label": "declares",
    "to": 61
  }, {
    "from": 215,
    "label": "declares",
    "to": 64
  }, {
    "from": 215,
    "label": "declares",
    "to": 67
  }, {
    "from": 215,
    "label": "declares",
    "to": 70
  }, {
    "from": 215,
    "label": "declares",
    "to": 73
  }, {
    "from": 215,
    "label": "declares",
    "to": 77
  }, {
    "from": 215,
    "label": "declares",
    "to": 82
  }, {
    "from": 215,
    "label": "declares",
    "to": 85
  }, {
    "from": 215,
    "label": "declares",
    "to": 88
  }, {
    "from": 215,
    "label": "declares",
    "to": 91
  }, {
    "from": 215,
    "label": "declares",
    "to": 94
  }, {
    "from": 215,
    "label": "declares",
    "to": 97
  }, {
    "from": 215,
    "label": "declares",
    "to": 100
  }, {
    "from": 215,
    "label": "declares",
    "to": 103
  }, {
    "from": 215,
    "label": "declares",
    "to": 106
  }, {
    "from": 215,
    "label": "declares",
    "to": 111
  }, {
    "from": 215,
    "label": "declares",
    "to": 114
  }, {
    "from": 215,
    "label": "declares",
    "to": 117
  }, {
    "from": 215,
    "label": "declares",
    "to": 120
  }, {
    "from": 215,
    "label": "declares",
    "to": 124
  }, {
    "from": 215,
    "label": "declares",
    "to": 129
  }, {
    "from": 215,
    "label": "declares",
    "to": 133
  }, {
    "from": 215,
    "label": "declares",
    "to": 136
  }, {
    "from": 215,
    "label": "declares",
    "to": 139
  }, {
    "from": 215,
    "label": "declares",
    "to": 142
  }, {
    "from": 215,
    "label": "declares",
    "to": 145
  }, {
    "from": 215,
    "label": "declares",
    "to": 148
  }, {
    "from": 215,
    "label": "declares",
    "to": 151
  }, {
    "from": 215,
    "label": "declares",
    "to": 154
  }, {
    "from": 215,
    "label": "declares",
    "to": 157
  }, {
    "from": 215,
    "label": "declares",
    "to": 160
  }, {
    "from": 215,
    "label": "declares",
    "to": 163
  }, {
    "from": 1,
    "label": "contains",
    "to": 223
  }, {
    "from": 1,
    "label": "contains",
    "to": 224
  }, {
    "from": 224,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "requires",
    "to": 2
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 166,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 167,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 169,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 173,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 175,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 176,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 177,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 178,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 179,
    "label": "hasArgument",
    "to": 49
  }, {
    "from": 180,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 181,
    "label": "hasArgument",
    "to": 55
  }, {
    "from": 182,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 183,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 184,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 185,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 186,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 187,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 188,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 189,
    "label": "hasArgument",
    "to": 82
  }, {
    "from": 190,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 191,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 192,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 193,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 100
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 103
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 106
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 200,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 201,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 124
  }, {
    "from": 203,
    "label": "hasArgument",
    "to": 129
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 136
  }, {
    "from": 206,
    "label": "hasArgument",
    "to": 139
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 208,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 211,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 212,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 160
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "check_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "check",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n      assert.same({}, check(\"\"))\r\n   end",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert.same({}, check(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function()\r\n      assert.same({\r\n         {code = \"113\", name = \"print\", line = 5, column = 4, end_column = 8}\r\n      }, check[[\r\nlocal a\r\nlocal b = 5\r\na = 6\r\ndo\r\n   print(b, {a})\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 7,
    "text": "assert.same({\r\n         {code = \"113\", name = \"print\", line = 5, column = 4, end_column = 8}\r\n      }, check[[\r\nlocal a\r\nlocal b = 5\r\na = 6\r\ndo\r\n   print(b, {a})\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function()\r\n      assert.same({\r\n         {code = \"111\", name = \"foo\", line = 1, column = 1, end_column = 3, top = true}\r\n      }, check[[\r\nfoo = {}\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert.same({\r\n         {code = \"111\", name = \"foo\", line = 1, column = 1, end_column = 3, top = true}\r\n      }, check[[\r\nfoo = {}\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n      assert.same({\r\n         {code = \"111\", name = \"foo\", line = 2, column = 4, end_column = 6}\r\n      }, check[[\r\nlocal function bar()\r\n   foo = {}\r\nend\r\nbar()\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert.same({\r\n         {code = \"111\", name = \"foo\", line = 2, column = 4, end_column = 6}\r\n      }, check[[\r\nlocal function bar()\r\n   foo = {}\r\nend\r\nbar()\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n      assert.same({\r\n         {code = \"111\", name = \"y\", line = 2, column = 4, end_column = 4, top = true},\r\n         {code = \"532\", line = 2, column = 6, end_column = 6},\r\n         {code = \"113\", name = \"print\", line = 3, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal x\r\nx, y = 1\r\nprint(x)\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 16,
    "text": "assert.same({\r\n         {code = \"111\", name = \"y\", line = 2, column = 4, end_column = 4, top = true},\r\n         {code = \"532\", line = 2, column = 6, end_column = 6},\r\n         {code = \"113\", name = \"print\", line = 3, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal x\r\nx, y = 1\r\nprint(x)\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function()\r\n      assert.same({\r\n         {code = \"113\", name = \"a\", line = 1, column = 11, end_column = 11},\r\n         {code = \"113\", name = \"print\", line = 2, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal a = a\r\nprint(a)\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert.same({\r\n         {code = \"113\", name = \"a\", line = 1, column = 11, end_column = 11},\r\n         {code = \"113\", name = \"print\", line = 2, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal a = a\r\nprint(a)\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function()\r\n      assert.same({\r\n         {code = \"112\", name = \"a\", line = 1, column = 1, end_column = 1}\r\n      }, check[[\r\na[1] = 6\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 22,
    "text": "assert.same({\r\n         {code = \"112\", name = \"a\", line = 1, column = 1, end_column = 1}\r\n      }, check[[\r\na[1] = 6\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"113\", name = \"print\", line = 5, column = 4, end_column = 8}\r\n      }, check[[\r\nlocal a = 4\r\n\r\ndo\r\n   local b = 6\r\n   print(b)\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 25,
    "text": "assert.same({\r\n         {code = \"211\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"113\", name = \"print\", line = 5, column = 4, end_column = 8}\r\n      }, check[[\r\nlocal a = 4\r\n\r\ndo\r\n   local b = 6\r\n   print(b)\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"_\", useless = true, line = 2, column = 10, end_column = 10},\r\n         {code = \"211\", name = \"_\", useless = true, line = 7, column = 13, end_column = 13},\r\n         {code = \"211\", name = \"_\", filtered = true, secondary = true, line = 12, column = 13, end_column = 13}\r\n      }, check[[\r\ndo\r\n   local _\r\nend\r\n\r\ndo\r\n   local a = 5\r\n   local b, _ = a\r\n   b()\r\nend\r\n\r\ndo\r\n   local c, _ = ...\r\n   c()\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 28,
    "text": "assert.same({\r\n         {code = \"211\", name = \"_\", useless = true, line = 2, column = 10, end_column = 10},\r\n         {code = \"211\", name = \"_\", useless = true, line = 7, column = 13, end_column = 13},\r\n         {code = \"211\", name = \"_\", filtered = true, secondary = true, line = 12, column = 13, end_column = 13}\r\n      }, check[[\r\ndo\r\n   local _\r\nend\r\n\r\ndo\r\n   local a = 5\r\n   local b, _ = a\r\n   b()\r\nend\r\n\r\ndo\r\n   local c, _ = ...\r\n   c()\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"noop\", func = true, line = 1, column = 22, end_column = 25}\r\n      }, check[[\r\nlocal noop; function noop() end\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 31,
    "text": "assert.same({\r\n         {code = \"211\", name = \"noop\", func = true, line = 1, column = 22, end_column = 25}\r\n      }, check[[\r\nlocal noop; function noop() end\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"f\", func = true, recursive = true, line = 1, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal function f(x)\r\n   return x <= 1 and 1 or x * f(x - 1)\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 34,
    "text": "assert.same({\r\n         {code = \"211\", name = \"f\", func = true, recursive = true, line = 1, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal function f(x)\r\n   return x <= 1 and 1 or x * f(x - 1)\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"odd\", func = true, mutually_recursive = true, line = 3, column = 16, end_column = 18},\r\n         {code = \"211\", name = \"even\", func = true, mutually_recursive = true, line = 7, column = 10, end_column = 13}\r\n      }, check[[\r\nlocal even\r\n\r\nlocal function odd(x)\r\n   return x == 1 or even(x - 1)\r\nend\r\n\r\nfunction even(x)\r\n   return x == 0 or odd(x - 1)\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 37,
    "text": "assert.same({\r\n         {code = \"211\", name = \"odd\", func = true, mutually_recursive = true, line = 3, column = 16, end_column = 18},\r\n         {code = \"211\", name = \"even\", func = true, mutually_recursive = true, line = 7, column = 10, end_column = 13}\r\n      }, check[[\r\nlocal even\r\n\r\nlocal function odd(x)\r\n   return x == 1 or even(x - 1)\r\nend\r\n\r\nfunction even(x)\r\n   return x == 0 or odd(x - 1)\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"unused\", func = true, line = 1, column = 16, end_column = 21}\r\n      }, check[[\r\nlocal function unused()\r\n   local function nested1() end\r\n   local function nested2() nested2() end\r\n   return nested1(), nested2()\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 40,
    "text": "assert.same({\r\n         {code = \"211\", name = \"unused\", func = true, line = 1, column = 16, end_column = 21}\r\n      }, check[[\r\nlocal function unused()\r\n   local function nested1() end\r\n   local function nested2() nested2() end\r\n   return nested1(), nested2()\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"g\", func = true, recursive = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal function f() return 1 end\r\nlocal function g() return f() + g() end\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"211\", name = \"g\", func = true, recursive = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal f\r\nlocal function g() return f() + g() end\r\nfunction f() return 1 end\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 43,
    "text": "assert.same({\r\n         {code = \"211\", name = \"g\", func = true, recursive = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal function f() return 1 end\r\nlocal function g() return f() + g() end\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert.same({\r\n         {code = \"211\", name = \"g\", func = true, recursive = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal f\r\nlocal function g() return f() + g() end\r\nfunction f() return 1 end\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function()\r\n      assert.same({\r\n         {code = \"212\", name = \"foo\", line = 1, column = 17, end_column = 19}\r\n      }, check[[\r\nreturn function(foo, ...)\r\n   return ...\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 47,
    "text": "assert.same({\r\n         {code = \"212\", name = \"foo\", line = 1, column = 17, end_column = 19}\r\n      }, check[[\r\nreturn function(foo, ...)\r\n   return ...\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function()\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", self = true, line = 2, column = 11, end_column = 11}\r\n      }, check[[\r\nlocal a = {}\r\nfunction a:b()\r\n   \r\nend\r\nreturn a\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 50,
    "text": "assert.same({\r\n         {code = \"212\", name = \"self\", self = true, line = 2, column = 11, end_column = 11}\r\n      }, check[[\r\nlocal a = {}\r\nfunction a:b()\r\n   \r\nend\r\nreturn a\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function()\r\n      assert.same({\r\n         {code = \"213\", name = \"i\", line = 1, column = 5, end_column = 5},\r\n         {code = \"213\", name = \"i\", line = 2, column = 5, end_column = 5},\r\n         {code = \"113\", name = \"pairs\", line = 2, column = 10, end_column = 14}\r\n      }, check[[\r\nfor i=1, 2 do end\r\nfor i in pairs{} do end\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 53,
    "text": "assert.same({\r\n         {code = \"213\", name = \"i\", line = 1, column = 5, end_column = 5},\r\n         {code = \"213\", name = \"i\", line = 2, column = 5, end_column = 5},\r\n         {code = \"113\", name = \"pairs\", line = 2, column = 10, end_column = 14}\r\n      }, check[[\r\nfor i=1, 2 do end\r\nfor i in pairs{} do end\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function()\r\n      assert.same({\r\n         {code = \"311\", name = \"a\", line = 3, column = 4, end_column = 4},\r\n         {code = \"311\", name = \"a\", line = 5, column = 4, end_column = 4},\r\n         {code = \"113\", name = \"print\", line = 9, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal a\r\nif ... then\r\n   a = 2\r\nelse\r\n   a = 3\r\nend\r\n\r\na = 5\r\nprint(a)\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 56,
    "text": "assert.same({\r\n         {code = \"311\", name = \"a\", line = 3, column = 4, end_column = 4},\r\n         {code = \"311\", name = \"a\", line = 5, column = 4, end_column = 4},\r\n         {code = \"113\", name = \"print\", line = 9, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal a\r\nif ... then\r\n   a = 2\r\nelse\r\n   a = 3\r\nend\r\n\r\na = 5\r\nprint(a)\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n      assert.same({\r\n         {code = \"113\", name = \"escape\", line = 3, column = 4, end_column = 9}\r\n      }, check[[\r\nlocal a = 3\r\nif true then\r\n   escape(function() return a end)\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 59,
    "text": "assert.same({\r\n         {code = \"113\", name = \"escape\", line = 3, column = 4, end_column = 9}\r\n      }, check[[\r\nlocal a = 3\r\nif true then\r\n   escape(function() return a end)\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function()\r\n      assert.same({}, check[[\r\nlocal a\r\n\r\nlocal function f(x) a = x end\r\nlocal function g() return a end\r\nreturn f, g\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 62,
    "text": "assert.same({}, check[[\r\nlocal a\r\n\r\nlocal function f(x) a = x end\r\nlocal function g() return a end\r\nreturn f, g\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function()\r\n      assert.same({}, check[[\r\nlocal a, b = \"foo\"\r\nb = \"bar\"\r\nreturn a, b\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 65,
    "text": "assert.same({}, check[[\r\nlocal a, b = \"foo\"\r\nb = \"bar\"\r\nreturn a, b\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function()\r\n      assert.same({\r\n         {code = \"311\", name = \"b\", line = 2, column = 13, end_column = 13, secondary = true}\r\n      }, check[[\r\nreturn function(...)\r\n   local a, b = ...\r\n   b = \"bar\"\r\n   return a, b\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 68,
    "text": "assert.same({\r\n         {code = \"311\", name = \"b\", line = 2, column = 13, end_column = 13, secondary = true}\r\n      }, check[[\r\nreturn function(...)\r\n   local a, b = ...\r\n   b = \"bar\"\r\n   return a, b\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f)\r\n   local a, b = f()\r\n   return b\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 71,
    "text": "assert.same({\r\n         {code = \"211\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f)\r\n   local a, b = f()\r\n   return b\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n      assert.same({\r\n         {code = \"231\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f)\r\n   local a, b\r\n   a, b = f()\r\n   return b\r\nend\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"231\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f, t)\r\n   local a\r\n   a, t[1] = f()\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert.same({\r\n         {code = \"231\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f)\r\n   local a, b\r\n   a, b = f()\r\n   return b\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert.same({\r\n         {code = \"231\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f, t)\r\n   local a\r\n   a, t[1] = f()\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a = {}\r\na.k = 1\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = {}\r\n   a.k1 = 1\r\nelse\r\n   a = {}\r\n   a.k2 = 2\r\nend\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"311\", name = \"a\", line = 7, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = {}\r\n   a.k1 = 1\r\nelse\r\n   a = {}\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 78,
    "text": "assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a = {}\r\na.k = 1\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = {}\r\n   a.k1 = 1\r\nelse\r\n   a = {}\r\n   a.k2 = 2\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"311\", name = \"a\", line = 7, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = {}\r\n   a.k1 = 1\r\nelse\r\n   a = {}\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function()\r\n      assert.same({\r\n         {code = \"331\", name = \"a\", line = 5, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal a\r\nlocal b = (...).k\r\n\r\nif (...)[1] then\r\n   a = {}\r\n   a.k1 = 1\r\nelseif (...)[2] then\r\n   a = b\r\n   a.k2 = 2\r\nelseif (...)[3] then\r\n   a = b()\r\n   a.k3 = 3\r\nelseif (...)[4] then\r\n   a = b(1) or b(2)\r\n   a.k4 = 4\r\nelse\r\n   a = {}\r\n   return a\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 83,
    "text": "assert.same({\r\n         {code = \"331\", name = \"a\", line = 5, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal a\r\nlocal b = (...).k\r\n\r\nif (...)[1] then\r\n   a = {}\r\n   a.k1 = 1\r\nelseif (...)[2] then\r\n   a = b\r\n   a.k2 = 2\r\nelseif (...)[3] then\r\n   a = b()\r\n   a.k3 = 3\r\nelseif (...)[4] then\r\n   a = b(1) or b(2)\r\n   a.k4 = 4\r\nelse\r\n   a = {}\r\n   return a\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n      assert.same({\r\n         {code = \"314\", name = \"key\", line = 3, column = 4, end_column = 4},\r\n         {code = \"314\", name = \"2\", index = true, line = 6, column = 4, end_column = 4},\r\n         {code = \"314\", name = \"key\", line = 7, column = 4, end_column = 6},\r\n         {code = \"314\", name = \"0.2e1\", line = 9, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal x, y, z = 1, 2, 3\r\nreturn {\r\n   [\"key\"] = 4,\r\n   [z] = 7,\r\n   1,\r\n   y,\r\n   key = x,\r\n   key = 0,\r\n   [0.2e1] = 6,\r\n   [2] = 7\r\n}\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 86,
    "text": "assert.same({\r\n         {code = \"314\", name = \"key\", line = 3, column = 4, end_column = 4},\r\n         {code = \"314\", name = \"2\", index = true, line = 6, column = 4, end_column = 4},\r\n         {code = \"314\", name = \"key\", line = 7, column = 4, end_column = 6},\r\n         {code = \"314\", name = \"0.2e1\", line = 9, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal x, y, z = 1, 2, 3\r\nreturn {\r\n   [\"key\"] = 4,\r\n   [z] = 7,\r\n   1,\r\n   y,\r\n   key = x,\r\n   key = 0,\r\n   [0.2e1] = 6,\r\n   [2] = 7\r\n}\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function()\r\n      assert.same({\r\n         {code = \"311\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"311\", name = \"b\", line = 1, column = 10, end_column = 10},\r\n         {code = \"532\", line = 2, column = 6, end_column = 6}\r\n      }, check[[\r\nlocal a, b = \"foo\", \"bar\"\r\na, b = \"bar\"\r\nreturn a, b\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 89,
    "text": "assert.same({\r\n         {code = \"311\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"311\", name = \"b\", line = 1, column = 10, end_column = 10},\r\n         {code = \"532\", line = 2, column = 6, end_column = 6}\r\n      }, check[[\r\nlocal a, b = \"foo\", \"bar\"\r\na, b = \"bar\"\r\nreturn a, b\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function()\r\n      assert.same({\r\n         {code = \"312\", name = \"b\", line = 1, column = 23, end_column = 23},\r\n         {code = \"311\", name = \"a\", line = 2, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal function foo(a, b)\r\n   a = a or \"default\"\r\n   a = 42\r\n   b = 7\r\n   return a, b\r\nend\r\n\r\nreturn foo\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 92,
    "text": "assert.same({\r\n         {code = \"312\", name = \"b\", line = 1, column = 23, end_column = 23},\r\n         {code = \"311\", name = \"a\", line = 2, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal function foo(a, b)\r\n   a = a or \"default\"\r\n   a = 42\r\n   b = 7\r\n   return a, b\r\nend\r\n\r\nreturn foo\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function()\r\n      assert.same({\r\n         {code = \"113\", name = \"print\", line = 3, column = 4, end_column = 8},\r\n         {code = \"113\", name = \"math\", line = 4, column = 8, end_column = 11}\r\n      }, check[[\r\nlocal a = 10\r\nwhile a > 0 do\r\n   print(a)\r\n   a = math.floor(a/2)\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 95,
    "text": "assert.same({\r\n         {code = \"113\", name = \"print\", line = 3, column = 4, end_column = 8},\r\n         {code = \"113\", name = \"math\", line = 4, column = 8, end_column = 11}\r\n      }, check[[\r\nlocal a = 10\r\nwhile a > 0 do\r\n   print(a)\r\n   a = math.floor(a/2)\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function()\r\n      assert.same({\r\n         {code = \"221\", name = \"x\", line = 1, column = 7, end_column = 7},\r\n         {code = \"211\", name = \"f\", func = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal x\r\nlocal function f() return x end\r\n::loop::\r\ngoto loop\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 98,
    "text": "assert.same({\r\n         {code = \"221\", name = \"x\", line = 1, column = 7, end_column = 7},\r\n         {code = \"211\", name = \"f\", func = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal x\r\nlocal function f() return x end\r\n::loop::\r\ngoto loop\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"foo\", line = 1, column = 7, end_column = 9},\r\n         {code = \"411\", name = \"foo\", line = 2, column = 7, end_column = 9, prev_line = 1, prev_column = 7},\r\n         {code = \"113\", name = \"print\", line = 3, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal foo\r\nlocal foo = \"bar\"\r\nprint(foo)\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 101,
    "text": "assert.same({\r\n         {code = \"211\", name = \"foo\", line = 1, column = 7, end_column = 9},\r\n         {code = \"411\", name = \"foo\", line = 2, column = 7, end_column = 9, prev_line = 1, prev_column = 7},\r\n         {code = \"113\", name = \"print\", line = 3, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal foo\r\nlocal foo = \"bar\"\r\nprint(foo)\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function()\r\n      assert.same({\r\n         {code = \"212\", name = \"foo\", line = 1, column = 17, end_column = 19},\r\n         {code = \"212\", name = \"...\", line = 1, column = 22, end_column = 24},\r\n         {code = \"412\", name = \"foo\", line = 2, column = 10, end_column = 12, prev_line = 1, prev_column = 17}\r\n      }, check[[\r\nreturn function(foo, ...)\r\n   local foo = 1\r\n   return foo\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 104,
    "text": "assert.same({\r\n         {code = \"212\", name = \"foo\", line = 1, column = 17, end_column = 19},\r\n         {code = \"212\", name = \"...\", line = 1, column = 22, end_column = 24},\r\n         {code = \"412\", name = \"foo\", line = 2, column = 10, end_column = 12, prev_line = 1, prev_column = 17}\r\n      }, check[[\r\nreturn function(foo, ...)\r\n   local foo = 1\r\n   return foo\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function()\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 11, end_column = 11, self = true},\r\n         {code = \"212\", name = \"self\", line = 4, column = 14, end_column = 14, self = true},\r\n         {code = \"432\", name = \"self\", line = 4, column = 14, end_column = 14, self = true, prev_line = 2, prev_column = 11}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t:f()\r\n   local o = {}\r\n   function o:g() end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 14, end_column = 17},\r\n         {code = \"212\", name = \"self\", line = 4, column = 14, end_column = 14, self = true},\r\n         {code = \"432\", name = \"self\", line = 4, column = 14, end_column = 14, prev_line = 2, prev_column = 14}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t.f(self)\r\n   local o = {}\r\n   function o:g() end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 11, end_column = 11, self = true},\r\n         {code = \"212\", name = \"self\", line = 4, column = 17, end_column = 20},\r\n         {code = \"432\", name = \"self\", line = 4, column = 17, end_column = 20, prev_line = 2, prev_column = 11}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t:f()\r\n   local o = {}\r\n   function o.g(self) end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 107,
    "text": "assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 11, end_column = 11, self = true},\r\n         {code = \"212\", name = \"self\", line = 4, column = 14, end_column = 14, self = true},\r\n         {code = \"432\", name = \"self\", line = 4, column = 14, end_column = 14, self = true, prev_line = 2, prev_column = 11}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t:f()\r\n   local o = {}\r\n   function o:g() end\r\n   return o\r\nend\r\nreturn t\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 14, end_column = 17},\r\n         {code = \"212\", name = \"self\", line = 4, column = 14, end_column = 14, self = true},\r\n         {code = \"432\", name = \"self\", line = 4, column = 14, end_column = 14, prev_line = 2, prev_column = 14}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t.f(self)\r\n   local o = {}\r\n   function o:g() end\r\n   return o\r\nend\r\nreturn t\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 11, end_column = 11, self = true},\r\n         {code = \"212\", name = \"self\", line = 4, column = 17, end_column = 20},\r\n         {code = \"432\", name = \"self\", line = 4, column = 17, end_column = 20, prev_line = 2, prev_column = 11}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t:f()\r\n   local o = {}\r\n   function o.g(self) end\r\n   return o\r\nend\r\nreturn t\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function()\r\n      assert.same({\r\n         {code = \"431\", name = \"a\", line = 4, column = 10, end_column = 10, prev_line = 1, prev_column = 7},\r\n         {code = \"421\", name = \"a\", line = 7, column = 13, end_column = 13, prev_line = 4, prev_column = 10}\r\n      }, check[[\r\nlocal a = 46\r\n\r\nreturn a, function(foo, ...)\r\n   local a = 1\r\n\r\n   do\r\n      local a = 6\r\n      foo(a, ...)\r\n   end\r\n\r\n   return a\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 112,
    "text": "assert.same({\r\n         {code = \"431\", name = \"a\", line = 4, column = 10, end_column = 10, prev_line = 1, prev_column = 7},\r\n         {code = \"421\", name = \"a\", line = 7, column = 13, end_column = 13, prev_line = 4, prev_column = 10}\r\n      }, check[[\r\nlocal a = 46\r\n\r\nreturn a, function(foo, ...)\r\n   local a = 1\r\n\r\n   do\r\n      local a = 6\r\n      foo(a, ...)\r\n   end\r\n\r\n   return a\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function()\r\n      assert.same({\r\n         {code = \"221\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a\r\nreturn a\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 115,
    "text": "assert.same({\r\n         {code = \"221\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a\r\nreturn a\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function()\r\n      assert.same({\r\n         {code = \"521\", name = \"fail\", line = 2, column = 4, end_column = 11}\r\n      }, check[[\r\n::fail::\r\ndo ::fail:: end\r\ngoto fail\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 118,
    "text": "assert.same({\r\n         {code = \"521\", name = \"fail\", line = 2, column = 4, end_column = 11}\r\n      }, check[[\r\n::fail::\r\ndo ::fail:: end\r\ngoto fail\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function()\r\n      assert.same({\r\n         {code = \"511\", line = 2, column = 1, end_column = 2}\r\n      }, check[[\r\ndo return end\r\nif ... then return 6 end\r\nreturn 3\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 7, column = 1, end_column = 2},\r\n         {code = \"511\", line = 13, column = 1, end_column = 6}\r\n      }, check[[\r\nif ... then\r\n   return 4\r\nelse\r\n   return 6\r\nend\r\n\r\nif ... then\r\n   return 7\r\nelse\r\n   return 8\r\nend\r\n\r\nreturn 3\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 121,
    "text": "assert.same({\r\n         {code = \"511\", line = 2, column = 1, end_column = 2}\r\n      }, check[[\r\ndo return end\r\nif ... then return 6 end\r\nreturn 3\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert.same({\r\n         {code = \"511\", line = 7, column = 1, end_column = 2},\r\n         {code = \"511\", line = 13, column = 1, end_column = 6}\r\n      }, check[[\r\nif ... then\r\n   return 4\r\nelse\r\n   return 6\r\nend\r\n\r\nif ... then\r\n   return 7\r\nelse\r\n   return 8\r\nend\r\n\r\nreturn 3\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function()\r\n      assert.same({\r\n         {code = \"511\", line = 4, column = 1, end_column = 6}\r\n      }, check[[\r\nwhile true do\r\n   (...)()\r\nend\r\nreturn\r\n      ]])\r\n\r\n      assert.same({}, check[[\r\nrepeat\r\n   if ... then\r\n      break\r\n   end\r\nuntil false\r\nreturn\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 6, column = 1, end_column = 6}\r\n      }, check[[\r\nrepeat\r\n   if nil then\r\n      break\r\n   end\r\nuntil false\r\nreturn\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 125,
    "text": "assert.same({\r\n         {code = \"511\", line = 4, column = 1, end_column = 6}\r\n      }, check[[\r\nwhile true do\r\n   (...)()\r\nend\r\nreturn\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert.same({}, check[[\r\nrepeat\r\n   if ... then\r\n      break\r\n   end\r\nuntil false\r\nreturn\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "assert.same({\r\n         {code = \"511\", line = 6, column = 1, end_column = 6}\r\n      }, check[[\r\nrepeat\r\n   if nil then\r\n      break\r\n   end\r\nuntil false\r\nreturn\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function()\r\n      assert.same({\r\n         {code = \"511\", line = 3, column = 7, end_column = 9}\r\n      }, check[[\r\nrepeat\r\n    return\r\nuntil ...\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 3, column = 8, end_column = 10}\r\n      }, check[[\r\nif true then\r\n   (...)()\r\nelseif ... then\r\n   (...)()\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 130,
    "text": "assert.same({\r\n         {code = \"511\", line = 3, column = 7, end_column = 9}\r\n      }, check[[\r\nrepeat\r\n    return\r\nuntil ...\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert.same({\r\n         {code = \"511\", line = 3, column = 8, end_column = 10}\r\n      }, check[[\r\nif true then\r\n   (...)()\r\nelseif ... then\r\n   (...)()\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function()\r\n      assert.same({\r\n         {code = \"511\", line = 4, column = 7, end_column = 12}\r\n      }, check[[\r\nreturn function()\r\n   return function()\r\n      do return end\r\n      return\r\n   end\r\nend\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 134,
    "text": "assert.same({\r\n         {code = \"511\", line = 4, column = 7, end_column = 12}\r\n      }, check[[\r\nreturn function()\r\n   return function()\r\n      do return end\r\n      return\r\n   end\r\nend\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 6, column = 8, end_column = 10},\r\n         {code = \"321\", name = \"a\", line = 6, column = 12, end_column = 12}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = 5\r\nelse\r\n   a = get(a)\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 137,
    "text": "assert.same({\r\n         {code = \"113\", name = \"get\", line = 6, column = 8, end_column = 10},\r\n         {code = \"321\", name = \"a\", line = 6, column = 12, end_column = 12}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = 5\r\nelse\r\n   a = get(a)\r\nend\r\n\r\nreturn a\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function()\r\n      assert.same({\r\n         {code = \"341\", name = \"a\", line = 4, column = 4, end_column = 4},\r\n         {code = \"113\", name = \"get\", line = 6, column = 8, end_column = 10}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a.k = 5\r\nelse\r\n   a = get(5)\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 140,
    "text": "assert.same({\r\n         {code = \"341\", name = \"a\", line = 4, column = 4, end_column = 4},\r\n         {code = \"113\", name = \"get\", line = 6, column = 8, end_column = 10}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a.k = 5\r\nelse\r\n   a = get(5)\r\nend\r\n\r\nreturn a\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 7, column = 8, end_column = 10},\r\n         {code = \"321\", name = \"a\", line = 7, column = 12, end_column = 12}\r\n      }, check[[\r\nreturn function() return function(...)\r\nlocal a\r\n\r\nif ... then\r\n   a = 5\r\nelse\r\n   a = get(a)\r\nend\r\n\r\nreturn a\r\nend end\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 143,
    "text": "assert.same({\r\n         {code = \"113\", name = \"get\", line = 7, column = 8, end_column = 10},\r\n         {code = \"321\", name = \"a\", line = 7, column = 12, end_column = 12}\r\n      }, check[[\r\nreturn function() return function(...)\r\nlocal a\r\n\r\nif ... then\r\n   a = 5\r\nelse\r\n   a = get(a)\r\nend\r\n\r\nreturn a\r\nend end\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 4, column = 8, end_column = 10}\r\n      }, check[[\r\nlocal a\r\n\r\nwhile not a do\r\n   a = get()\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 146,
    "text": "assert.same({\r\n         {code = \"113\", name = \"get\", line = 4, column = 8, end_column = 10}\r\n      }, check[[\r\nlocal a\r\n\r\nwhile not a do\r\n   a = get()\r\nend\r\n\r\nreturn a\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function()\r\n      assert.same({\r\n         {code = \"532\", line = 4, column = 6, end_column = 6},\r\n         {code = \"531\", line = 5, column = 6, end_column = 6}\r\n      }, check[[\r\nlocal a, b = 4; (...)(a)\r\n\r\na, b = (...)(); (...)(a, b)\r\na, b = 5; (...)(a, b)\r\na, b = 1, 2, 3; (...)(a, b)\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 149,
    "text": "assert.same({\r\n         {code = \"532\", line = 4, column = 6, end_column = 6},\r\n         {code = \"531\", line = 5, column = 6, end_column = 6}\r\n      }, check[[\r\nlocal a, b = 4; (...)(a)\r\n\r\na, b = (...)(); (...)(a, b)\r\na, b = 5; (...)(a, b)\r\na, b = 1, 2, 3; (...)(a, b)\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function()\r\n      assert.same({\r\n         {code = \"541\", line = 1, column = 1, end_column = 2},\r\n         {code = \"542\", line = 3, column = 8, end_column = 11},\r\n         {code = \"542\", line = 5, column = 12, end_column = 15},\r\n         {code = \"542\", line = 7, column = 1, end_column = 4}\r\n      }, check[[\r\ndo end\r\n\r\nif ... then\r\n\r\nelseif ... then\r\n\r\nelse\r\n\r\nend\r\n\r\nwhile ... do end\r\nrepeat until ...\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 152,
    "text": "assert.same({\r\n         {code = \"541\", line = 1, column = 1, end_column = 2},\r\n         {code = \"542\", line = 3, column = 8, end_column = 11},\r\n         {code = \"542\", line = 5, column = 12, end_column = 15},\r\n         {code = \"542\", line = 7, column = 1, end_column = 4}\r\n      }, check[[\r\ndo end\r\n\r\nif ... then\r\n\r\nelseif ... then\r\n\r\nelse\r\n\r\nend\r\n\r\nwhile ... do end\r\nrepeat until ...\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function()\r\n      assert.same({\r\n         {code = \"551\", line = 1, column = 1, end_column = 1},\r\n         {code = \"541\", line = 2, column = 1, end_column = 2},\r\n         {code = \"551\", line = 2, column = 8, end_column = 8},\r\n         {code = \"551\", line = 4, column = 20, end_column = 20},\r\n         {code = \"551\", line = 7, column = 17, end_column = 17}\r\n      }, check[[\r\n;\r\ndo end;;\r\nlocal foo = \"bar\";\r\nfoo = foo .. \"baz\";;\r\n\r\nwhile true do\r\n   if foo() then;\r\n      goto fail;\r\n   elseif foo() then\r\n      break;\r\n   end\r\nend\r\n\r\n::fail::\r\nreturn foo;\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 155,
    "text": "assert.same({\r\n         {code = \"551\", line = 1, column = 1, end_column = 1},\r\n         {code = \"541\", line = 2, column = 1, end_column = 2},\r\n         {code = \"551\", line = 2, column = 8, end_column = 8},\r\n         {code = \"551\", line = 4, column = 20, end_column = 20},\r\n         {code = \"551\", line = 7, column = 17, end_column = 17}\r\n      }, check[[\r\n;\r\ndo end;;\r\nlocal foo = \"bar\";\r\nfoo = foo .. \"baz\";;\r\n\r\nwhile true do\r\n   if foo() then;\r\n      goto fail;\r\n   elseif foo() then\r\n      break;\r\n   end\r\nend\r\n\r\n::fail::\r\nreturn foo;\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function()\r\n      assert.same({\r\n         {code = \"211\", name = \"foo\", filtered = true, line = 1, column = 7, end_column = 9},\r\n         {code = \"211\", name = \"bar\", line = 1, column = 12, end_column = 14},\r\n         {code = \"512\", filtered = true, line = 2, column = 1, end_column = 3},\r\n         {code = \"213\", name = \"_\", filtered = true, line = 2, column = 5, end_column = 5},\r\n         {code = \"113\", name = \"pairs\", filtered_113 = true, line = 2, column = 10, end_column = 14},\r\n      }, check[[\r\nlocal foo, bar -- luacheck: ignore foo\r\nfor _ in pairs({}) do return end -- luacheck: ignore\r\n      ]])\r\n   end",
    "type": "function"
  }, {
    "id": 158,
    "text": "assert.same({\r\n         {code = \"211\", name = \"foo\", filtered = true, line = 1, column = 7, end_column = 9},\r\n         {code = \"211\", name = \"bar\", line = 1, column = 12, end_column = 14},\r\n         {code = \"512\", filtered = true, line = 2, column = 1, end_column = 3},\r\n         {code = \"213\", name = \"_\", filtered = true, line = 2, column = 5, end_column = 5},\r\n         {code = \"113\", name = \"pairs\", filtered_113 = true, line = 2, column = 10, end_column = 14},\r\n      }, check[[\r\nlocal foo, bar -- luacheck: ignore foo\r\nfor _ in pairs({}) do return end -- luacheck: ignore\r\n      ]])",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function()\r\n      assert.table(check(io.open(\"spec/samples/argparse.lua\", \"rb\"):read(\"*a\")))\r\n   end",
    "type": "function"
  }, {
    "id": 161,
    "text": "assert.table(check(io.open(\"spec/samples/argparse.lua\", \"rb\"):read(\"*a\")))",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function()\r\n   it(\"does not find anything wrong in an empty block\", function()\r\n      assert.same({}, check(\"\"))\r\n   end)\r\n\r\n   it(\"does not find anything wrong in used locals\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"print\", line = 5, column = 4, end_column = 8}\r\n      }, check[[\r\nlocal a\r\nlocal b = 5\r\na = 6\r\ndo\r\n   print(b, {a})\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects global set\", function()\r\n      assert.same({\r\n         {code = \"111\", name = \"foo\", line = 1, column = 1, end_column = 3, top = true}\r\n      }, check[[\r\nfoo = {}\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects global set in nested functions\", function()\r\n      assert.same({\r\n         {code = \"111\", name = \"foo\", line = 2, column = 4, end_column = 6}\r\n      }, check[[\r\nlocal function bar()\r\n   foo = {}\r\nend\r\nbar()\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects global access in multi-assignments\", function()\r\n      assert.same({\r\n         {code = \"111\", name = \"y\", line = 2, column = 4, end_column = 4, top = true},\r\n         {code = \"532\", line = 2, column = 6, end_column = 6},\r\n         {code = \"113\", name = \"print\", line = 3, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal x\r\nx, y = 1\r\nprint(x)\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects global access in self swap\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"a\", line = 1, column = 11, end_column = 11},\r\n         {code = \"113\", name = \"print\", line = 2, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal a = a\r\nprint(a)\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects global mutation\", function()\r\n      assert.same({\r\n         {code = \"112\", name = \"a\", line = 1, column = 1, end_column = 1}\r\n      }, check[[\r\na[1] = 6\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unused locals\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"113\", name = \"print\", line = 5, column = 4, end_column = 8}\r\n      }, check[[\r\nlocal a = 4\r\n\r\ndo\r\n   local b = 6\r\n   print(b)\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects useless local _ variable\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"_\", useless = true, line = 2, column = 10, end_column = 10},\r\n         {code = \"211\", name = \"_\", useless = true, line = 7, column = 13, end_column = 13},\r\n         {code = \"211\", name = \"_\", filtered = true, secondary = true, line = 12, column = 13, end_column = 13}\r\n      }, check[[\r\ndo\r\n   local _\r\nend\r\n\r\ndo\r\n   local a = 5\r\n   local b, _ = a\r\n   b()\r\nend\r\n\r\ndo\r\n   local c, _ = ...\r\n   c()\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"reports unused function with forward declaration as variable, not value\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"noop\", func = true, line = 1, column = 22, end_column = 25}\r\n      }, check[[\r\nlocal noop; function noop() end\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unused recursive functions\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"f\", func = true, recursive = true, line = 1, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal function f(x)\r\n   return x <= 1 and 1 or x * f(x - 1)\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unused mutually recursive functions\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"odd\", func = true, mutually_recursive = true, line = 3, column = 16, end_column = 18},\r\n         {code = \"211\", name = \"even\", func = true, mutually_recursive = true, line = 7, column = 10, end_column = 13}\r\n      }, check[[\r\nlocal even\r\n\r\nlocal function odd(x)\r\n   return x == 1 or even(x - 1)\r\nend\r\n\r\nfunction even(x)\r\n   return x == 0 or odd(x - 1)\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"does not incorrectly detect unused recursive functions inside unused functions\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"unused\", func = true, line = 1, column = 16, end_column = 21}\r\n      }, check[[\r\nlocal function unused()\r\n   local function nested1() end\r\n   local function nested2() nested2() end\r\n   return nested1(), nested2()\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"does not incorrectly detect unused recursive functions used by an unused recursive function\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"g\", func = true, recursive = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal function f() return 1 end\r\nlocal function g() return f() + g() end\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"211\", name = \"g\", func = true, recursive = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal f\r\nlocal function g() return f() + g() end\r\nfunction f() return 1 end\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unused locals from function arguments\", function()\r\n      assert.same({\r\n         {code = \"212\", name = \"foo\", line = 1, column = 17, end_column = 19}\r\n      }, check[[\r\nreturn function(foo, ...)\r\n   return ...\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unused implicit self\", function()\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", self = true, line = 2, column = 11, end_column = 11}\r\n      }, check[[\r\nlocal a = {}\r\nfunction a:b()\r\n   \r\nend\r\nreturn a\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unused locals from loops\", function()\r\n      assert.same({\r\n         {code = \"213\", name = \"i\", line = 1, column = 5, end_column = 5},\r\n         {code = \"213\", name = \"i\", line = 2, column = 5, end_column = 5},\r\n         {code = \"113\", name = \"pairs\", line = 2, column = 10, end_column = 14}\r\n      }, check[[\r\nfor i=1, 2 do end\r\nfor i in pairs{} do end\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unused values\", function()\r\n      assert.same({\r\n         {code = \"311\", name = \"a\", line = 3, column = 4, end_column = 4},\r\n         {code = \"311\", name = \"a\", line = 5, column = 4, end_column = 4},\r\n         {code = \"113\", name = \"print\", line = 9, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal a\r\nif ... then\r\n   a = 2\r\nelse\r\n   a = 3\r\nend\r\n\r\na = 5\r\nprint(a)\r\n      ]])\r\n   end)\r\n\r\n   it(\"does not detect unused value when it and a closure using it can live together\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"escape\", line = 3, column = 4, end_column = 9}\r\n      }, check[[\r\nlocal a = 3\r\nif true then\r\n   escape(function() return a end)\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"does not consider value assigned to upvalue as unused if it is accessed in another closure\", function()\r\n      assert.same({}, check[[\r\nlocal a\r\n\r\nlocal function f(x) a = x end\r\nlocal function g() return a end\r\nreturn f, g\r\n      ]])\r\n   end)\r\n\r\n   it(\"does not consider a variable initialized if it can't get a value due to short rhs\", function()\r\n      assert.same({}, check[[\r\nlocal a, b = \"foo\"\r\nb = \"bar\"\r\nreturn a, b\r\n      ]])\r\n   end)\r\n\r\n   it(\"considers a variable initialized if short rhs ends with potential multivalue\", function()\r\n      assert.same({\r\n         {code = \"311\", name = \"b\", line = 2, column = 13, end_column = 13, secondary = true}\r\n      }, check[[\r\nreturn function(...)\r\n   local a, b = ...\r\n   b = \"bar\"\r\n   return a, b\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"reports unused variable as secondary if it is assigned together with a used one\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f)\r\n   local a, b = f()\r\n   return b\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"reports unused value as secondary if it is assigned together with a used one\", function()\r\n      assert.same({\r\n         {code = \"231\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f)\r\n   local a, b\r\n   a, b = f()\r\n   return b\r\nend\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"231\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f, t)\r\n   local a\r\n   a, t[1] = f()\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects variable that is mutated but never accessed\", function()\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a = {}\r\na.k = 1\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = {}\r\n   a.k1 = 1\r\nelse\r\n   a = {}\r\n   a.k2 = 2\r\nend\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"311\", name = \"a\", line = 7, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = {}\r\n   a.k1 = 1\r\nelse\r\n   a = {}\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects values that are mutated but never accessed\", function()\r\n      assert.same({\r\n         {code = \"331\", name = \"a\", line = 5, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal a\r\nlocal b = (...).k\r\n\r\nif (...)[1] then\r\n   a = {}\r\n   a.k1 = 1\r\nelseif (...)[2] then\r\n   a = b\r\n   a.k2 = 2\r\nelseif (...)[3] then\r\n   a = b()\r\n   a.k3 = 3\r\nelseif (...)[4] then\r\n   a = b(1) or b(2)\r\n   a.k4 = 4\r\nelse\r\n   a = {}\r\n   return a\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects duplicated fields in table literals\", function()\r\n      assert.same({\r\n         {code = \"314\", name = \"key\", line = 3, column = 4, end_column = 4},\r\n         {code = \"314\", name = \"2\", index = true, line = 6, column = 4, end_column = 4},\r\n         {code = \"314\", name = \"key\", line = 7, column = 4, end_column = 6},\r\n         {code = \"314\", name = \"0.2e1\", line = 9, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal x, y, z = 1, 2, 3\r\nreturn {\r\n   [\"key\"] = 4,\r\n   [z] = 7,\r\n   1,\r\n   y,\r\n   key = x,\r\n   key = 0,\r\n   [0.2e1] = 6,\r\n   [2] = 7\r\n}\r\n      ]])\r\n   end)\r\n\r\n   it(\"considers a variable assigned even if it can't get a value due to short rhs (it still gets nil)\", function()\r\n      assert.same({\r\n         {code = \"311\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"311\", name = \"b\", line = 1, column = 10, end_column = 10},\r\n         {code = \"532\", line = 2, column = 6, end_column = 6}\r\n      }, check[[\r\nlocal a, b = \"foo\", \"bar\"\r\na, b = \"bar\"\r\nreturn a, b\r\n      ]])\r\n   end)\r\n\r\n   it(\"reports vartype == var when the unused value is not the initial\", function()\r\n      assert.same({\r\n         {code = \"312\", name = \"b\", line = 1, column = 23, end_column = 23},\r\n         {code = \"311\", name = \"a\", line = 2, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal function foo(a, b)\r\n   a = a or \"default\"\r\n   a = 42\r\n   b = 7\r\n   return a, b\r\nend\r\n\r\nreturn foo\r\n      ]])\r\n   end)\r\n\r\n   it(\"does not detect unused values in loops\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"print\", line = 3, column = 4, end_column = 8},\r\n         {code = \"113\", name = \"math\", line = 4, column = 8, end_column = 11}\r\n      }, check[[\r\nlocal a = 10\r\nwhile a > 0 do\r\n   print(a)\r\n   a = math.floor(a/2)\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"handles upvalues before infinite loops\", function()\r\n      assert.same({\r\n         {code = \"221\", name = \"x\", line = 1, column = 7, end_column = 7},\r\n         {code = \"211\", name = \"f\", func = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal x\r\nlocal function f() return x end\r\n::loop::\r\ngoto loop\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects redefinition in the same scope\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"foo\", line = 1, column = 7, end_column = 9},\r\n         {code = \"411\", name = \"foo\", line = 2, column = 7, end_column = 9, prev_line = 1, prev_column = 7},\r\n         {code = \"113\", name = \"print\", line = 3, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal foo\r\nlocal foo = \"bar\"\r\nprint(foo)\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects redefinition of function arguments\", function()\r\n      assert.same({\r\n         {code = \"212\", name = \"foo\", line = 1, column = 17, end_column = 19},\r\n         {code = \"212\", name = \"...\", line = 1, column = 22, end_column = 24},\r\n         {code = \"412\", name = \"foo\", line = 2, column = 10, end_column = 12, prev_line = 1, prev_column = 17}\r\n      }, check[[\r\nreturn function(foo, ...)\r\n   local foo = 1\r\n   return foo\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"marks redefinition of implicit self\", function()\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 11, end_column = 11, self = true},\r\n         {code = \"212\", name = \"self\", line = 4, column = 14, end_column = 14, self = true},\r\n         {code = \"432\", name = \"self\", line = 4, column = 14, end_column = 14, self = true, prev_line = 2, prev_column = 11}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t:f()\r\n   local o = {}\r\n   function o:g() end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 14, end_column = 17},\r\n         {code = \"212\", name = \"self\", line = 4, column = 14, end_column = 14, self = true},\r\n         {code = \"432\", name = \"self\", line = 4, column = 14, end_column = 14, prev_line = 2, prev_column = 14}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t.f(self)\r\n   local o = {}\r\n   function o:g() end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 11, end_column = 11, self = true},\r\n         {code = \"212\", name = \"self\", line = 4, column = 17, end_column = 20},\r\n         {code = \"432\", name = \"self\", line = 4, column = 17, end_column = 20, prev_line = 2, prev_column = 11}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t:f()\r\n   local o = {}\r\n   function o.g(self) end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects shadowing definitions\", function()\r\n      assert.same({\r\n         {code = \"431\", name = \"a\", line = 4, column = 10, end_column = 10, prev_line = 1, prev_column = 7},\r\n         {code = \"421\", name = \"a\", line = 7, column = 13, end_column = 13, prev_line = 4, prev_column = 10}\r\n      }, check[[\r\nlocal a = 46\r\n\r\nreturn a, function(foo, ...)\r\n   local a = 1\r\n\r\n   do\r\n      local a = 6\r\n      foo(a, ...)\r\n   end\r\n\r\n   return a\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unset variables\", function()\r\n      assert.same({\r\n         {code = \"221\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a\r\nreturn a\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unused labels\", function()\r\n      assert.same({\r\n         {code = \"521\", name = \"fail\", line = 2, column = 4, end_column = 11}\r\n      }, check[[\r\n::fail::\r\ndo ::fail:: end\r\ngoto fail\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unreachable code\", function()\r\n      assert.same({\r\n         {code = \"511\", line = 2, column = 1, end_column = 2}\r\n      }, check[[\r\ndo return end\r\nif ... then return 6 end\r\nreturn 3\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 7, column = 1, end_column = 2},\r\n         {code = \"511\", line = 13, column = 1, end_column = 6}\r\n      }, check[[\r\nif ... then\r\n   return 4\r\nelse\r\n   return 6\r\nend\r\n\r\nif ... then\r\n   return 7\r\nelse\r\n   return 8\r\nend\r\n\r\nreturn 3\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unreachable code with literal conditions\", function()\r\n      assert.same({\r\n         {code = \"511\", line = 4, column = 1, end_column = 6}\r\n      }, check[[\r\nwhile true do\r\n   (...)()\r\nend\r\nreturn\r\n      ]])\r\n\r\n      assert.same({}, check[[\r\nrepeat\r\n   if ... then\r\n      break\r\n   end\r\nuntil false\r\nreturn\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 6, column = 1, end_column = 6}\r\n      }, check[[\r\nrepeat\r\n   if nil then\r\n      break\r\n   end\r\nuntil false\r\nreturn\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unreachable expressions\", function()\r\n      assert.same({\r\n         {code = \"511\", line = 3, column = 7, end_column = 9}\r\n      }, check[[\r\nrepeat\r\n    return\r\nuntil ...\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 3, column = 8, end_column = 10}\r\n      }, check[[\r\nif true then\r\n   (...)()\r\nelseif ... then\r\n   (...)()\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unreachable code in nested function\", function()\r\n      assert.same({\r\n         {code = \"511\", line = 4, column = 7, end_column = 12}\r\n      }, check[[\r\nreturn function()\r\n   return function()\r\n      do return end\r\n      return\r\n   end\r\nend\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects accessing uninitialized variables\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 6, column = 8, end_column = 10},\r\n         {code = \"321\", name = \"a\", line = 6, column = 12, end_column = 12}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = 5\r\nelse\r\n   a = get(a)\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects mutating uninitialized variables\", function()\r\n      assert.same({\r\n         {code = \"341\", name = \"a\", line = 4, column = 4, end_column = 4},\r\n         {code = \"113\", name = \"get\", line = 6, column = 8, end_column = 10}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a.k = 5\r\nelse\r\n   a = get(5)\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects accessing uninitialized variables in nested functions\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 7, column = 8, end_column = 10},\r\n         {code = \"321\", name = \"a\", line = 7, column = 12, end_column = 12}\r\n      }, check[[\r\nreturn function() return function(...)\r\nlocal a\r\n\r\nif ... then\r\n   a = 5\r\nelse\r\n   a = get(a)\r\nend\r\n\r\nreturn a\r\nend end\r\n      ]])\r\n   end)\r\n\r\n   it(\"does not detect accessing unitialized variables incorrectly in loops\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 4, column = 8, end_column = 10}\r\n      }, check[[\r\nlocal a\r\n\r\nwhile not a do\r\n   a = get()\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects unbalanced assignments\", function()\r\n      assert.same({\r\n         {code = \"532\", line = 4, column = 6, end_column = 6},\r\n         {code = \"531\", line = 5, column = 6, end_column = 6}\r\n      }, check[[\r\nlocal a, b = 4; (...)(a)\r\n\r\na, b = (...)(); (...)(a, b)\r\na, b = 5; (...)(a, b)\r\na, b = 1, 2, 3; (...)(a, b)\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects empty blocks\", function()\r\n      assert.same({\r\n         {code = \"541\", line = 1, column = 1, end_column = 2},\r\n         {code = \"542\", line = 3, column = 8, end_column = 11},\r\n         {code = \"542\", line = 5, column = 12, end_column = 15},\r\n         {code = \"542\", line = 7, column = 1, end_column = 4}\r\n      }, check[[\r\ndo end\r\n\r\nif ... then\r\n\r\nelseif ... then\r\n\r\nelse\r\n\r\nend\r\n\r\nwhile ... do end\r\nrepeat until ...\r\n      ]])\r\n   end)\r\n\r\n   it(\"detects empty statements\", function()\r\n      assert.same({\r\n         {code = \"551\", line = 1, column = 1, end_column = 1},\r\n         {code = \"541\", line = 2, column = 1, end_column = 2},\r\n         {code = \"551\", line = 2, column = 8, end_column = 8},\r\n         {code = \"551\", line = 4, column = 20, end_column = 20},\r\n         {code = \"551\", line = 7, column = 17, end_column = 17}\r\n      }, check[[\r\n;\r\ndo end;;\r\nlocal foo = \"bar\";\r\nfoo = foo .. \"baz\";;\r\n\r\nwhile true do\r\n   if foo() then;\r\n      goto fail;\r\n   elseif foo() then\r\n      break;\r\n   end\r\nend\r\n\r\n::fail::\r\nreturn foo;\r\n      ]])\r\n   end)\r\n\r\n   it(\"marks ignored warnings as filtered\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"foo\", filtered = true, line = 1, column = 7, end_column = 9},\r\n         {code = \"211\", name = \"bar\", line = 1, column = 12, end_column = 14},\r\n         {code = \"512\", filtered = true, line = 2, column = 1, end_column = 3},\r\n         {code = \"213\", name = \"_\", filtered = true, line = 2, column = 5, end_column = 5},\r\n         {code = \"113\", name = \"pairs\", filtered_113 = true, line = 2, column = 10, end_column = 14},\r\n      }, check[[\r\nlocal foo, bar -- luacheck: ignore foo\r\nfor _ in pairs({}) do return end -- luacheck: ignore\r\n      ]])\r\n   end)\r\n\r\n   it(\"handles argparse sample\", function()\r\n      assert.table(check(io.open(\"spec/samples/argparse.lua\", \"rb\"):read(\"*a\")))\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "it(\"does not find anything wrong in an empty block\", function()\r\n      assert.same({}, check(\"\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "it(\"does not find anything wrong in used locals\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"print\", line = 5, column = 4, end_column = 8}\r\n      }, check[[\r\nlocal a\r\nlocal b = 5\r\na = 6\r\ndo\r\n   print(b, {a})\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "it(\"detects global set\", function()\r\n      assert.same({\r\n         {code = \"111\", name = \"foo\", line = 1, column = 1, end_column = 3, top = true}\r\n      }, check[[\r\nfoo = {}\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "it(\"detects global set in nested functions\", function()\r\n      assert.same({\r\n         {code = \"111\", name = \"foo\", line = 2, column = 4, end_column = 6}\r\n      }, check[[\r\nlocal function bar()\r\n   foo = {}\r\nend\r\nbar()\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "it(\"detects global access in multi-assignments\", function()\r\n      assert.same({\r\n         {code = \"111\", name = \"y\", line = 2, column = 4, end_column = 4, top = true},\r\n         {code = \"532\", line = 2, column = 6, end_column = 6},\r\n         {code = \"113\", name = \"print\", line = 3, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal x\r\nx, y = 1\r\nprint(x)\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "it(\"detects global access in self swap\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"a\", line = 1, column = 11, end_column = 11},\r\n         {code = \"113\", name = \"print\", line = 2, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal a = a\r\nprint(a)\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "it(\"detects global mutation\", function()\r\n      assert.same({\r\n         {code = \"112\", name = \"a\", line = 1, column = 1, end_column = 1}\r\n      }, check[[\r\na[1] = 6\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "it(\"detects unused locals\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"113\", name = \"print\", line = 5, column = 4, end_column = 8}\r\n      }, check[[\r\nlocal a = 4\r\n\r\ndo\r\n   local b = 6\r\n   print(b)\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "it(\"detects useless local _ variable\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"_\", useless = true, line = 2, column = 10, end_column = 10},\r\n         {code = \"211\", name = \"_\", useless = true, line = 7, column = 13, end_column = 13},\r\n         {code = \"211\", name = \"_\", filtered = true, secondary = true, line = 12, column = 13, end_column = 13}\r\n      }, check[[\r\ndo\r\n   local _\r\nend\r\n\r\ndo\r\n   local a = 5\r\n   local b, _ = a\r\n   b()\r\nend\r\n\r\ndo\r\n   local c, _ = ...\r\n   c()\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "it(\"reports unused function with forward declaration as variable, not value\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"noop\", func = true, line = 1, column = 22, end_column = 25}\r\n      }, check[[\r\nlocal noop; function noop() end\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "it(\"detects unused recursive functions\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"f\", func = true, recursive = true, line = 1, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal function f(x)\r\n   return x <= 1 and 1 or x * f(x - 1)\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "it(\"detects unused mutually recursive functions\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"odd\", func = true, mutually_recursive = true, line = 3, column = 16, end_column = 18},\r\n         {code = \"211\", name = \"even\", func = true, mutually_recursive = true, line = 7, column = 10, end_column = 13}\r\n      }, check[[\r\nlocal even\r\n\r\nlocal function odd(x)\r\n   return x == 1 or even(x - 1)\r\nend\r\n\r\nfunction even(x)\r\n   return x == 0 or odd(x - 1)\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "it(\"does not incorrectly detect unused recursive functions inside unused functions\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"unused\", func = true, line = 1, column = 16, end_column = 21}\r\n      }, check[[\r\nlocal function unused()\r\n   local function nested1() end\r\n   local function nested2() nested2() end\r\n   return nested1(), nested2()\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "it(\"does not incorrectly detect unused recursive functions used by an unused recursive function\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"g\", func = true, recursive = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal function f() return 1 end\r\nlocal function g() return f() + g() end\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"211\", name = \"g\", func = true, recursive = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal f\r\nlocal function g() return f() + g() end\r\nfunction f() return 1 end\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "it(\"detects unused locals from function arguments\", function()\r\n      assert.same({\r\n         {code = \"212\", name = \"foo\", line = 1, column = 17, end_column = 19}\r\n      }, check[[\r\nreturn function(foo, ...)\r\n   return ...\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "it(\"detects unused implicit self\", function()\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", self = true, line = 2, column = 11, end_column = 11}\r\n      }, check[[\r\nlocal a = {}\r\nfunction a:b()\r\n   \r\nend\r\nreturn a\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "it(\"detects unused locals from loops\", function()\r\n      assert.same({\r\n         {code = \"213\", name = \"i\", line = 1, column = 5, end_column = 5},\r\n         {code = \"213\", name = \"i\", line = 2, column = 5, end_column = 5},\r\n         {code = \"113\", name = \"pairs\", line = 2, column = 10, end_column = 14}\r\n      }, check[[\r\nfor i=1, 2 do end\r\nfor i in pairs{} do end\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "it(\"detects unused values\", function()\r\n      assert.same({\r\n         {code = \"311\", name = \"a\", line = 3, column = 4, end_column = 4},\r\n         {code = \"311\", name = \"a\", line = 5, column = 4, end_column = 4},\r\n         {code = \"113\", name = \"print\", line = 9, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal a\r\nif ... then\r\n   a = 2\r\nelse\r\n   a = 3\r\nend\r\n\r\na = 5\r\nprint(a)\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "it(\"does not detect unused value when it and a closure using it can live together\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"escape\", line = 3, column = 4, end_column = 9}\r\n      }, check[[\r\nlocal a = 3\r\nif true then\r\n   escape(function() return a end)\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "it(\"does not consider value assigned to upvalue as unused if it is accessed in another closure\", function()\r\n      assert.same({}, check[[\r\nlocal a\r\n\r\nlocal function f(x) a = x end\r\nlocal function g() return a end\r\nreturn f, g\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "it(\"does not consider a variable initialized if it can't get a value due to short rhs\", function()\r\n      assert.same({}, check[[\r\nlocal a, b = \"foo\"\r\nb = \"bar\"\r\nreturn a, b\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "it(\"considers a variable initialized if short rhs ends with potential multivalue\", function()\r\n      assert.same({\r\n         {code = \"311\", name = \"b\", line = 2, column = 13, end_column = 13, secondary = true}\r\n      }, check[[\r\nreturn function(...)\r\n   local a, b = ...\r\n   b = \"bar\"\r\n   return a, b\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "it(\"reports unused variable as secondary if it is assigned together with a used one\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f)\r\n   local a, b = f()\r\n   return b\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "it(\"reports unused value as secondary if it is assigned together with a used one\", function()\r\n      assert.same({\r\n         {code = \"231\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f)\r\n   local a, b\r\n   a, b = f()\r\n   return b\r\nend\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"231\", name = \"a\", line = 2, column = 10, end_column = 10, secondary = true}\r\n      }, check[[\r\nreturn function(f, t)\r\n   local a\r\n   a, t[1] = f()\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "it(\"detects variable that is mutated but never accessed\", function()\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a = {}\r\na.k = 1\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = {}\r\n   a.k1 = 1\r\nelse\r\n   a = {}\r\n   a.k2 = 2\r\nend\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"241\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"311\", name = \"a\", line = 7, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = {}\r\n   a.k1 = 1\r\nelse\r\n   a = {}\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "it(\"detects values that are mutated but never accessed\", function()\r\n      assert.same({\r\n         {code = \"331\", name = \"a\", line = 5, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal a\r\nlocal b = (...).k\r\n\r\nif (...)[1] then\r\n   a = {}\r\n   a.k1 = 1\r\nelseif (...)[2] then\r\n   a = b\r\n   a.k2 = 2\r\nelseif (...)[3] then\r\n   a = b()\r\n   a.k3 = 3\r\nelseif (...)[4] then\r\n   a = b(1) or b(2)\r\n   a.k4 = 4\r\nelse\r\n   a = {}\r\n   return a\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "it(\"detects duplicated fields in table literals\", function()\r\n      assert.same({\r\n         {code = \"314\", name = \"key\", line = 3, column = 4, end_column = 4},\r\n         {code = \"314\", name = \"2\", index = true, line = 6, column = 4, end_column = 4},\r\n         {code = \"314\", name = \"key\", line = 7, column = 4, end_column = 6},\r\n         {code = \"314\", name = \"0.2e1\", line = 9, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal x, y, z = 1, 2, 3\r\nreturn {\r\n   [\"key\"] = 4,\r\n   [z] = 7,\r\n   1,\r\n   y,\r\n   key = x,\r\n   key = 0,\r\n   [0.2e1] = 6,\r\n   [2] = 7\r\n}\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "it(\"considers a variable assigned even if it can't get a value due to short rhs (it still gets nil)\", function()\r\n      assert.same({\r\n         {code = \"311\", name = \"a\", line = 1, column = 7, end_column = 7},\r\n         {code = \"311\", name = \"b\", line = 1, column = 10, end_column = 10},\r\n         {code = \"532\", line = 2, column = 6, end_column = 6}\r\n      }, check[[\r\nlocal a, b = \"foo\", \"bar\"\r\na, b = \"bar\"\r\nreturn a, b\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "it(\"reports vartype == var when the unused value is not the initial\", function()\r\n      assert.same({\r\n         {code = \"312\", name = \"b\", line = 1, column = 23, end_column = 23},\r\n         {code = \"311\", name = \"a\", line = 2, column = 4, end_column = 4}\r\n      }, check[[\r\nlocal function foo(a, b)\r\n   a = a or \"default\"\r\n   a = 42\r\n   b = 7\r\n   return a, b\r\nend\r\n\r\nreturn foo\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "it(\"does not detect unused values in loops\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"print\", line = 3, column = 4, end_column = 8},\r\n         {code = \"113\", name = \"math\", line = 4, column = 8, end_column = 11}\r\n      }, check[[\r\nlocal a = 10\r\nwhile a > 0 do\r\n   print(a)\r\n   a = math.floor(a/2)\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "it(\"handles upvalues before infinite loops\", function()\r\n      assert.same({\r\n         {code = \"221\", name = \"x\", line = 1, column = 7, end_column = 7},\r\n         {code = \"211\", name = \"f\", func = true, line = 2, column = 16, end_column = 16}\r\n      }, check[[\r\nlocal x\r\nlocal function f() return x end\r\n::loop::\r\ngoto loop\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "it(\"detects redefinition in the same scope\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"foo\", line = 1, column = 7, end_column = 9},\r\n         {code = \"411\", name = \"foo\", line = 2, column = 7, end_column = 9, prev_line = 1, prev_column = 7},\r\n         {code = \"113\", name = \"print\", line = 3, column = 1, end_column = 5}\r\n      }, check[[\r\nlocal foo\r\nlocal foo = \"bar\"\r\nprint(foo)\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "it(\"detects redefinition of function arguments\", function()\r\n      assert.same({\r\n         {code = \"212\", name = \"foo\", line = 1, column = 17, end_column = 19},\r\n         {code = \"212\", name = \"...\", line = 1, column = 22, end_column = 24},\r\n         {code = \"412\", name = \"foo\", line = 2, column = 10, end_column = 12, prev_line = 1, prev_column = 17}\r\n      }, check[[\r\nreturn function(foo, ...)\r\n   local foo = 1\r\n   return foo\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "it(\"marks redefinition of implicit self\", function()\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 11, end_column = 11, self = true},\r\n         {code = \"212\", name = \"self\", line = 4, column = 14, end_column = 14, self = true},\r\n         {code = \"432\", name = \"self\", line = 4, column = 14, end_column = 14, self = true, prev_line = 2, prev_column = 11}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t:f()\r\n   local o = {}\r\n   function o:g() end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 14, end_column = 17},\r\n         {code = \"212\", name = \"self\", line = 4, column = 14, end_column = 14, self = true},\r\n         {code = \"432\", name = \"self\", line = 4, column = 14, end_column = 14, prev_line = 2, prev_column = 14}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t.f(self)\r\n   local o = {}\r\n   function o:g() end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"212\", name = \"self\", line = 2, column = 11, end_column = 11, self = true},\r\n         {code = \"212\", name = \"self\", line = 4, column = 17, end_column = 20},\r\n         {code = \"432\", name = \"self\", line = 4, column = 17, end_column = 20, prev_line = 2, prev_column = 11}\r\n      }, check[[\r\nlocal t = {}\r\nfunction t:f()\r\n   local o = {}\r\n   function o.g(self) end\r\n   return o\r\nend\r\nreturn t\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "it(\"detects shadowing definitions\", function()\r\n      assert.same({\r\n         {code = \"431\", name = \"a\", line = 4, column = 10, end_column = 10, prev_line = 1, prev_column = 7},\r\n         {code = \"421\", name = \"a\", line = 7, column = 13, end_column = 13, prev_line = 4, prev_column = 10}\r\n      }, check[[\r\nlocal a = 46\r\n\r\nreturn a, function(foo, ...)\r\n   local a = 1\r\n\r\n   do\r\n      local a = 6\r\n      foo(a, ...)\r\n   end\r\n\r\n   return a\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "it(\"detects unset variables\", function()\r\n      assert.same({\r\n         {code = \"221\", name = \"a\", line = 1, column = 7, end_column = 7}\r\n      }, check[[\r\nlocal a\r\nreturn a\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "it(\"detects unused labels\", function()\r\n      assert.same({\r\n         {code = \"521\", name = \"fail\", line = 2, column = 4, end_column = 11}\r\n      }, check[[\r\n::fail::\r\ndo ::fail:: end\r\ngoto fail\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "it(\"detects unreachable code\", function()\r\n      assert.same({\r\n         {code = \"511\", line = 2, column = 1, end_column = 2}\r\n      }, check[[\r\ndo return end\r\nif ... then return 6 end\r\nreturn 3\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 7, column = 1, end_column = 2},\r\n         {code = \"511\", line = 13, column = 1, end_column = 6}\r\n      }, check[[\r\nif ... then\r\n   return 4\r\nelse\r\n   return 6\r\nend\r\n\r\nif ... then\r\n   return 7\r\nelse\r\n   return 8\r\nend\r\n\r\nreturn 3\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "it(\"detects unreachable code with literal conditions\", function()\r\n      assert.same({\r\n         {code = \"511\", line = 4, column = 1, end_column = 6}\r\n      }, check[[\r\nwhile true do\r\n   (...)()\r\nend\r\nreturn\r\n      ]])\r\n\r\n      assert.same({}, check[[\r\nrepeat\r\n   if ... then\r\n      break\r\n   end\r\nuntil false\r\nreturn\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 6, column = 1, end_column = 6}\r\n      }, check[[\r\nrepeat\r\n   if nil then\r\n      break\r\n   end\r\nuntil false\r\nreturn\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "it(\"detects unreachable expressions\", function()\r\n      assert.same({\r\n         {code = \"511\", line = 3, column = 7, end_column = 9}\r\n      }, check[[\r\nrepeat\r\n    return\r\nuntil ...\r\n      ]])\r\n\r\n      assert.same({\r\n         {code = \"511\", line = 3, column = 8, end_column = 10}\r\n      }, check[[\r\nif true then\r\n   (...)()\r\nelseif ... then\r\n   (...)()\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "it(\"detects unreachable code in nested function\", function()\r\n      assert.same({\r\n         {code = \"511\", line = 4, column = 7, end_column = 12}\r\n      }, check[[\r\nreturn function()\r\n   return function()\r\n      do return end\r\n      return\r\n   end\r\nend\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "it(\"detects accessing uninitialized variables\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 6, column = 8, end_column = 10},\r\n         {code = \"321\", name = \"a\", line = 6, column = 12, end_column = 12}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a = 5\r\nelse\r\n   a = get(a)\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "it(\"detects mutating uninitialized variables\", function()\r\n      assert.same({\r\n         {code = \"341\", name = \"a\", line = 4, column = 4, end_column = 4},\r\n         {code = \"113\", name = \"get\", line = 6, column = 8, end_column = 10}\r\n      }, check[[\r\nlocal a\r\n\r\nif ... then\r\n   a.k = 5\r\nelse\r\n   a = get(5)\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "it(\"detects accessing uninitialized variables in nested functions\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 7, column = 8, end_column = 10},\r\n         {code = \"321\", name = \"a\", line = 7, column = 12, end_column = 12}\r\n      }, check[[\r\nreturn function() return function(...)\r\nlocal a\r\n\r\nif ... then\r\n   a = 5\r\nelse\r\n   a = get(a)\r\nend\r\n\r\nreturn a\r\nend end\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "it(\"does not detect accessing unitialized variables incorrectly in loops\", function()\r\n      assert.same({\r\n         {code = \"113\", name = \"get\", line = 4, column = 8, end_column = 10}\r\n      }, check[[\r\nlocal a\r\n\r\nwhile not a do\r\n   a = get()\r\nend\r\n\r\nreturn a\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "it(\"detects unbalanced assignments\", function()\r\n      assert.same({\r\n         {code = \"532\", line = 4, column = 6, end_column = 6},\r\n         {code = \"531\", line = 5, column = 6, end_column = 6}\r\n      }, check[[\r\nlocal a, b = 4; (...)(a)\r\n\r\na, b = (...)(); (...)(a, b)\r\na, b = 5; (...)(a, b)\r\na, b = 1, 2, 3; (...)(a, b)\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "it(\"detects empty blocks\", function()\r\n      assert.same({\r\n         {code = \"541\", line = 1, column = 1, end_column = 2},\r\n         {code = \"542\", line = 3, column = 8, end_column = 11},\r\n         {code = \"542\", line = 5, column = 12, end_column = 15},\r\n         {code = \"542\", line = 7, column = 1, end_column = 4}\r\n      }, check[[\r\ndo end\r\n\r\nif ... then\r\n\r\nelseif ... then\r\n\r\nelse\r\n\r\nend\r\n\r\nwhile ... do end\r\nrepeat until ...\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "it(\"detects empty statements\", function()\r\n      assert.same({\r\n         {code = \"551\", line = 1, column = 1, end_column = 1},\r\n         {code = \"541\", line = 2, column = 1, end_column = 2},\r\n         {code = \"551\", line = 2, column = 8, end_column = 8},\r\n         {code = \"551\", line = 4, column = 20, end_column = 20},\r\n         {code = \"551\", line = 7, column = 17, end_column = 17}\r\n      }, check[[\r\n;\r\ndo end;;\r\nlocal foo = \"bar\";\r\nfoo = foo .. \"baz\";;\r\n\r\nwhile true do\r\n   if foo() then;\r\n      goto fail;\r\n   elseif foo() then\r\n      break;\r\n   end\r\nend\r\n\r\n::fail::\r\nreturn foo;\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "it(\"marks ignored warnings as filtered\", function()\r\n      assert.same({\r\n         {code = \"211\", name = \"foo\", filtered = true, line = 1, column = 7, end_column = 9},\r\n         {code = \"211\", name = \"bar\", line = 1, column = 12, end_column = 14},\r\n         {code = \"512\", filtered = true, line = 2, column = 1, end_column = 3},\r\n         {code = \"213\", name = \"_\", filtered = true, line = 2, column = 5, end_column = 5},\r\n         {code = \"113\", name = \"pairs\", filtered_113 = true, line = 2, column = 10, end_column = 14},\r\n      }, check[[\r\nlocal foo, bar -- luacheck: ignore foo\r\nfor _ in pairs({}) do return end -- luacheck: ignore\r\n      ]])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "it(\"handles argparse sample\", function()\r\n      assert.table(check(io.open(\"spec/samples/argparse.lua\", \"rb\"):read(\"*a\")))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 215,
    "text": "",
    "type": "function container"
  }, {
    "id": 216,
    "text": "table",
    "type": "global function"
  }, {
    "id": 217,
    "text": "same",
    "type": "global function"
  }, {
    "id": 218,
    "text": "check",
    "type": "global function"
  }, {
    "id": 219,
    "text": "require",
    "type": "global function"
  }, {
    "id": 220,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 221,
    "text": "open",
    "type": "global function"
  }, {
    "id": 222,
    "text": "it",
    "type": "global function"
  }, {
    "id": 223,
    "text": "",
    "type": "variable container"
  }, {
    "id": 224,
    "text": "",
    "type": "require container"
  }, {
    "id": 225,
    "text": "",
    "type": "require local variable"
  } ]
}