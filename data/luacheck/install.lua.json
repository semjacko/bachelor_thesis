{
  "_filename": "install.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacheck/install.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 15
  }, {
    "from": 20,
    "label": "calls",
    "to": 15
  }, {
    "from": 20,
    "label": "calls",
    "to": 15
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 26
  }, {
    "from": 20,
    "label": "calls",
    "to": 10
  }, {
    "from": 20,
    "label": "calls",
    "to": 10
  }, {
    "from": 20,
    "label": "calls",
    "to": 22
  }, {
    "from": 20,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 25
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 15,
    "label": "calls",
    "to": 2
  }, {
    "from": 20,
    "label": "calls",
    "to": 2
  }, {
    "from": 20,
    "label": "calls",
    "to": 21
  }, {
    "from": 20,
    "label": "calls",
    "to": 23
  }, {
    "from": 20,
    "label": "calls",
    "to": 23
  }, {
    "from": 20,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 20,
    "label": "calls",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 20
  }, {
    "from": 20,
    "label": "declares",
    "to": 2
  }, {
    "from": 20,
    "label": "declares",
    "to": 10
  }, {
    "from": 20,
    "label": "declares",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "install",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function run_command(cmd)\r\n   if is_windows then\r\n      cmd = cmd .. \" >NUL\"\r\n   else\r\n      cmd = cmd .. \" >/dev/null\"\r\n   end\r\n\r\n   print(\"        Running \" .. cmd)\r\n   local ok = os.execute(cmd)\r\n   assert(ok == true or ok == 0, \"couldn't run \" .. cmd)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if is_windows then\r\n      cmd = cmd .. \" >NUL\"\r\n   else\r\n      cmd = cmd .. \" >/dev/null\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "cmd = cmd .. \" >NUL\"",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "cmd = cmd .. \" >/dev/null\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "print(\"        Running \" .. cmd)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local ok = os.execute(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "assert(ok == true or ok == 0, \"couldn't run \" .. cmd)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function mkdir(dir)\r\n   if is_windows then\r\n      run_command(([[if not exist \"%s\" md \"%s\"]]):format(dir, dir))\r\n   else\r\n      run_command(([[mkdir -p \"%s\"]]):format(dir))\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if is_windows then\r\n      run_command(([[if not exist \"%s\" md \"%s\"]]):format(dir, dir))\r\n   else\r\n      run_command(([[mkdir -p \"%s\"]]):format(dir))\r\n   end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "run_command(([[if not exist \"%s\" md \"%s\"]]):format(dir, dir))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "run_command(([[mkdir -p \"%s\"]]):format(dir))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function copy(src, dest)\r\n   if is_windows then\r\n      run_command(([[copy /y \"%s\" \"%s\"]]):format(src, dest))\r\n   else\r\n      run_command(([[cp \"%s\" \"%s\"]]):format(src, dest))\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "if is_windows then\r\n      run_command(([[copy /y \"%s\" \"%s\"]]):format(src, dest))\r\n   else\r\n      run_command(([[cp \"%s\" \"%s\"]]):format(src, dest))\r\n   end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "run_command(([[copy /y \"%s\" \"%s\"]]):format(src, dest))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "run_command(([[cp \"%s\" \"%s\"]]):format(src, dest))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "",
    "type": "function container"
  }, {
    "id": 21,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 22,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 23,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 24,
    "text": "argparse",
    "type": "global function"
  }, {
    "id": 25,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 26,
    "text": "open",
    "type": "global function"
  }, {
    "id": 27,
    "text": "print",
    "type": "global function"
  }, {
    "id": 28,
    "text": "",
    "type": "variable container"
  }, {
    "id": 29,
    "text": "",
    "type": "require container"
  } ]
}