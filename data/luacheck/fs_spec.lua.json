{
  "_filename": "fs_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/fs_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 7
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 38
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 41
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 48
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 54,
    "label": "has",
    "to": 50
  }, {
    "from": 54,
    "label": "has",
    "to": 51
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 57
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 57
  }, {
    "from": 67,
    "label": "has",
    "to": 58
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 57
  }, {
    "from": 68,
    "label": "has",
    "to": 61
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 64
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 72,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 7
  }, {
    "from": 72,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 73,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 73,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 24
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 32
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 38
  }, {
    "from": 75,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 41
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 48
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 54,
    "label": "has",
    "to": 50
  }, {
    "from": 54,
    "label": "has",
    "to": 51
  }, {
    "from": 71,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 57
  }, {
    "from": 67,
    "label": "has",
    "to": 58
  }, {
    "from": 77,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 57
  }, {
    "from": 68,
    "label": "has",
    "to": 61
  }, {
    "from": 77,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 64
  }, {
    "from": 71,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "calls",
    "to": 87
  }, {
    "from": 79,
    "label": "calls",
    "to": 87
  }, {
    "from": 79,
    "label": "calls",
    "to": 87
  }, {
    "from": 79,
    "label": "calls",
    "to": 87
  }, {
    "from": 79,
    "label": "calls",
    "to": 86
  }, {
    "from": 79,
    "label": "calls",
    "to": 86
  }, {
    "from": 79,
    "label": "calls",
    "to": 86
  }, {
    "from": 79,
    "label": "calls",
    "to": 93
  }, {
    "from": 79,
    "label": "calls",
    "to": 93
  }, {
    "from": 79,
    "label": "calls",
    "to": 92
  }, {
    "from": 79,
    "label": "calls",
    "to": 81
  }, {
    "from": 79,
    "label": "calls",
    "to": 81
  }, {
    "from": 79,
    "label": "calls",
    "to": 81
  }, {
    "from": 79,
    "label": "calls",
    "to": 81
  }, {
    "from": 79,
    "label": "calls",
    "to": 98
  }, {
    "from": 79,
    "label": "calls",
    "to": 98
  }, {
    "from": 79,
    "label": "calls",
    "to": 98
  }, {
    "from": 79,
    "label": "calls",
    "to": 88
  }, {
    "from": 79,
    "label": "calls",
    "to": 85
  }, {
    "from": 79,
    "label": "calls",
    "to": 84
  }, {
    "from": 79,
    "label": "calls",
    "to": 84
  }, {
    "from": 79,
    "label": "calls",
    "to": 84
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 99
  }, {
    "from": 79,
    "label": "calls",
    "to": 95
  }, {
    "from": 79,
    "label": "calls",
    "to": 95
  }, {
    "from": 79,
    "label": "calls",
    "to": 95
  }, {
    "from": 79,
    "label": "calls",
    "to": 95
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 79,
    "label": "calls",
    "to": 83
  }, {
    "from": 79,
    "label": "calls",
    "to": 91
  }, {
    "from": 79,
    "label": "calls",
    "to": 91
  }, {
    "from": 79,
    "label": "calls",
    "to": 80
  }, {
    "from": 79,
    "label": "calls",
    "to": 80
  }, {
    "from": 79,
    "label": "calls",
    "to": 96
  }, {
    "from": 79,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 94
  }, {
    "from": 79,
    "label": "calls",
    "to": 97
  }, {
    "from": 79,
    "label": "calls",
    "to": 97
  }, {
    "from": 79,
    "label": "calls",
    "to": 97
  }, {
    "from": 79,
    "label": "calls",
    "to": 97
  }, {
    "from": 79,
    "label": "calls",
    "to": 97
  }, {
    "from": 79,
    "label": "calls",
    "to": 97
  }, {
    "from": 79,
    "label": "calls",
    "to": 97
  }, {
    "from": 79,
    "label": "calls",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 79,
    "label": "declares",
    "to": 3
  }, {
    "from": 79,
    "label": "declares",
    "to": 6
  }, {
    "from": 79,
    "label": "declares",
    "to": 9
  }, {
    "from": 79,
    "label": "declares",
    "to": 12
  }, {
    "from": 79,
    "label": "declares",
    "to": 17
  }, {
    "from": 79,
    "label": "declares",
    "to": 20
  }, {
    "from": 79,
    "label": "declares",
    "to": 23
  }, {
    "from": 79,
    "label": "declares",
    "to": 26
  }, {
    "from": 79,
    "label": "declares",
    "to": 31
  }, {
    "from": 79,
    "label": "declares",
    "to": 34
  }, {
    "from": 79,
    "label": "declares",
    "to": 37
  }, {
    "from": 79,
    "label": "declares",
    "to": 40
  }, {
    "from": 79,
    "label": "declares",
    "to": 43
  }, {
    "from": 79,
    "label": "declares",
    "to": 47
  }, {
    "from": 79,
    "label": "declares",
    "to": 53
  }, {
    "from": 79,
    "label": "declares",
    "to": 56
  }, {
    "from": 79,
    "label": "declares",
    "to": 60
  }, {
    "from": 79,
    "label": "declares",
    "to": 63
  }, {
    "from": 79,
    "label": "declares",
    "to": 66
  }, {
    "from": 79,
    "label": "declares",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 100,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 101,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "requires",
    "to": 2
  }, {
    "from": 13,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 60
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 76,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 60
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fs_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "fs",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n         assert.is_true(fs.is_dir(\"spec/folder\"))\r\n      end",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert.is_true(fs.is_dir(\"spec/folder\"))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/foo\"))\r\n      end",
    "type": "function"
  }, {
    "id": 7,
    "text": "assert.is_false(fs.is_dir(\"spec/folder/foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/non-existent\"))\r\n      end",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert.is_false(fs.is_dir(\"spec/folder/non-existent\"))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n      it(\"returns true for directories\", function()\r\n         assert.is_true(fs.is_dir(\"spec/folder\"))\r\n      end)\r\n\r\n      it(\"returns false for files\", function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns false for non-existent paths\", function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/non-existent\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 13,
    "text": "it(\"returns true for directories\", function()\r\n         assert.is_true(fs.is_dir(\"spec/folder\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "it(\"returns false for files\", function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/foo\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "it(\"returns false for non-existent paths\", function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/non-existent\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n         assert.is_true(fs.is_file(\"spec/folder/foo\"))\r\n      end",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert.is_true(fs.is_file(\"spec/folder/foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function()\r\n         assert.is_false(fs.is_file(\"spec/folder\"))\r\n      end",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert.is_false(fs.is_file(\"spec/folder\"))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n         assert.is_false(fs.is_file(\"spec/folder/non-existent\"))\r\n      end",
    "type": "function"
  }, {
    "id": 24,
    "text": "assert.is_false(fs.is_file(\"spec/folder/non-existent\"))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n      it(\"returns true for files\", function()\r\n         assert.is_true(fs.is_file(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns false for directories\", function()\r\n         assert.is_false(fs.is_file(\"spec/folder\"))\r\n      end)\r\n\r\n      it(\"returns false for non-existent paths\", function()\r\n         assert.is_false(fs.is_file(\"spec/folder/non-existent\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 27,
    "text": "it(\"returns true for files\", function()\r\n         assert.is_true(fs.is_file(\"spec/folder/foo\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "it(\"returns false for directories\", function()\r\n         assert.is_false(fs.is_file(\"spec/folder\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "it(\"returns false for non-existent paths\", function()\r\n         assert.is_false(fs.is_file(\"spec/folder/non-existent\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n         assert.same({\r\n            P\"spec/folder/folder1/fail\",\r\n            P\"spec/folder/folder1/file\",\r\n            P\"spec/folder/foo\"\r\n         }, fs.extract_files(P\"spec/folder\", \"^f\"))\r\n      end",
    "type": "function"
  }, {
    "id": 32,
    "text": "assert.same({\r\n            P\"spec/folder/folder1/fail\",\r\n            P\"spec/folder/folder1/file\",\r\n            P\"spec/folder/foo\"\r\n         }, fs.extract_files(P\"spec/folder\", \"^f\"))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n      it(\"returns sorted list of files in a directory matching pattern\", function()\r\n         assert.same({\r\n            P\"spec/folder/folder1/fail\",\r\n            P\"spec/folder/folder1/file\",\r\n            P\"spec/folder/foo\"\r\n         }, fs.extract_files(P\"spec/folder\", \"^f\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 35,
    "text": "it(\"returns sorted list of files in a directory matching pattern\", function()\r\n         assert.same({\r\n            P\"spec/folder/folder1/fail\",\r\n            P\"spec/folder/folder1/file\",\r\n            P\"spec/folder/foo\"\r\n         }, fs.extract_files(P\"spec/folder\", \"^f\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n         assert.number(fs.mtime(\"spec/folder/foo\"))\r\n      end",
    "type": "function"
  }, {
    "id": 38,
    "text": "assert.number(fs.mtime(\"spec/folder/foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n         assert.is_nil(fs.mtime(\"spec/folder/non-existent\"))\r\n      end",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert.is_nil(fs.mtime(\"spec/folder/non-existent\"))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()\r\n      it(\"returns modification time as a number\", function()\r\n         assert.number(fs.mtime(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns nil for non-existent files\", function()\r\n         assert.is_nil(fs.mtime(\"spec/folder/non-existent\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 44,
    "text": "it(\"returns modification time as a number\", function()\r\n         assert.number(fs.mtime(\"spec/folder/foo\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "it(\"returns nil for non-existent files\", function()\r\n         assert.is_nil(fs.mtime(\"spec/folder/non-existent\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n         local current_dir = fs.current_dir()\r\n         assert.string(current_dir)\r\n         assert.not_equal(\"\", (fs.split_base(current_dir)))\r\n         assert.is_true(fs.is_file(current_dir .. \"spec/folder/foo\"))\r\n      end",
    "type": "function"
  }, {
    "id": 48,
    "text": "local current_dir = fs.current_dir()",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "assert.string(current_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert.not_equal(\"\", (fs.split_base(current_dir)))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.is_true(fs.is_file(current_dir .. \"spec/folder/foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n      it(\"returns absolute path to current directory\", function()\r\n         local current_dir = fs.current_dir()\r\n         assert.string(current_dir)\r\n         assert.not_equal(\"\", (fs.split_base(current_dir)))\r\n         assert.is_true(fs.is_file(current_dir .. \"spec/folder/foo\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 54,
    "text": "it(\"returns absolute path to current directory\", function()\r\n         local current_dir = fs.current_dir()\r\n         assert.string(current_dir)\r\n         assert.not_equal(\"\", (fs.split_base(current_dir)))\r\n         assert.is_true(fs.is_file(current_dir .. \"spec/folder/foo\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(path, \"foo\"))\r\n      end",
    "type": "function"
  }, {
    "id": 57,
    "text": "local path = fs.current_dir() .. P\"spec/folder\"",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "assert.equal(path, fs.find_file(path, \"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(fs.join(path, \"folder1\"), \"foo\"))\r\n      end",
    "type": "function"
  }, {
    "id": 61,
    "text": "assert.equal(path, fs.find_file(fs.join(path, \"folder1\"), \"foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function()\r\n         assert.is_nil(fs.find_file(fs.current_dir(), \"this file shouldn't exist or it will make luacheck testsuite break\"))\r\n      end",
    "type": "function"
  }, {
    "id": 64,
    "text": "assert.is_nil(fs.find_file(fs.current_dir(), \"this file shouldn't exist or it will make luacheck testsuite break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n      it(\"finds file in a directory\", function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(path, \"foo\"))\r\n      end)\r\n\r\n      it(\"finds file in a parent directory\", function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(fs.join(path, \"folder1\"), \"foo\"))\r\n      end)\r\n\r\n      it(\"returns nil if can't find file\", function()\r\n         assert.is_nil(fs.find_file(fs.current_dir(), \"this file shouldn't exist or it will make luacheck testsuite break\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 67,
    "text": "it(\"finds file in a directory\", function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(path, \"foo\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "it(\"finds file in a parent directory\", function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(fs.join(path, \"folder1\"), \"foo\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "it(\"returns nil if can't find file\", function()\r\n         assert.is_nil(fs.find_file(fs.current_dir(), \"this file shouldn't exist or it will make luacheck testsuite break\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function()\r\n   describe(\"is_dir\", function()\r\n      it(\"returns true for directories\", function()\r\n         assert.is_true(fs.is_dir(\"spec/folder\"))\r\n      end)\r\n\r\n      it(\"returns false for files\", function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns false for non-existent paths\", function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/non-existent\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"is_file\", function()\r\n      it(\"returns true for files\", function()\r\n         assert.is_true(fs.is_file(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns false for directories\", function()\r\n         assert.is_false(fs.is_file(\"spec/folder\"))\r\n      end)\r\n\r\n      it(\"returns false for non-existent paths\", function()\r\n         assert.is_false(fs.is_file(\"spec/folder/non-existent\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"extract_files\", function()\r\n      it(\"returns sorted list of files in a directory matching pattern\", function()\r\n         assert.same({\r\n            P\"spec/folder/folder1/fail\",\r\n            P\"spec/folder/folder1/file\",\r\n            P\"spec/folder/foo\"\r\n         }, fs.extract_files(P\"spec/folder\", \"^f\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"mtime\", function()\r\n      it(\"returns modification time as a number\", function()\r\n         assert.number(fs.mtime(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns nil for non-existent files\", function()\r\n         assert.is_nil(fs.mtime(\"spec/folder/non-existent\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"current_dir\", function()\r\n      it(\"returns absolute path to current directory\", function()\r\n         local current_dir = fs.current_dir()\r\n         assert.string(current_dir)\r\n         assert.not_equal(\"\", (fs.split_base(current_dir)))\r\n         assert.is_true(fs.is_file(current_dir .. \"spec/folder/foo\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"find_file\", function()\r\n      it(\"finds file in a directory\", function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(path, \"foo\"))\r\n      end)\r\n\r\n      it(\"finds file in a parent directory\", function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(fs.join(path, \"folder1\"), \"foo\"))\r\n      end)\r\n\r\n      it(\"returns nil if can't find file\", function()\r\n         assert.is_nil(fs.find_file(fs.current_dir(), \"this file shouldn't exist or it will make luacheck testsuite break\"))\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "describe(\"is_dir\", function()\r\n      it(\"returns true for directories\", function()\r\n         assert.is_true(fs.is_dir(\"spec/folder\"))\r\n      end)\r\n\r\n      it(\"returns false for files\", function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns false for non-existent paths\", function()\r\n         assert.is_false(fs.is_dir(\"spec/folder/non-existent\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "describe(\"is_file\", function()\r\n      it(\"returns true for files\", function()\r\n         assert.is_true(fs.is_file(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns false for directories\", function()\r\n         assert.is_false(fs.is_file(\"spec/folder\"))\r\n      end)\r\n\r\n      it(\"returns false for non-existent paths\", function()\r\n         assert.is_false(fs.is_file(\"spec/folder/non-existent\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "describe(\"extract_files\", function()\r\n      it(\"returns sorted list of files in a directory matching pattern\", function()\r\n         assert.same({\r\n            P\"spec/folder/folder1/fail\",\r\n            P\"spec/folder/folder1/file\",\r\n            P\"spec/folder/foo\"\r\n         }, fs.extract_files(P\"spec/folder\", \"^f\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "describe(\"mtime\", function()\r\n      it(\"returns modification time as a number\", function()\r\n         assert.number(fs.mtime(\"spec/folder/foo\"))\r\n      end)\r\n\r\n      it(\"returns nil for non-existent files\", function()\r\n         assert.is_nil(fs.mtime(\"spec/folder/non-existent\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "describe(\"current_dir\", function()\r\n      it(\"returns absolute path to current directory\", function()\r\n         local current_dir = fs.current_dir()\r\n         assert.string(current_dir)\r\n         assert.not_equal(\"\", (fs.split_base(current_dir)))\r\n         assert.is_true(fs.is_file(current_dir .. \"spec/folder/foo\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "describe(\"find_file\", function()\r\n      it(\"finds file in a directory\", function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(path, \"foo\"))\r\n      end)\r\n\r\n      it(\"finds file in a parent directory\", function()\r\n         local path = fs.current_dir() .. P\"spec/folder\"\r\n         assert.equal(path, fs.find_file(fs.join(path, \"folder1\"), \"foo\"))\r\n      end)\r\n\r\n      it(\"returns nil if can't find file\", function()\r\n         assert.is_nil(fs.find_file(fs.current_dir(), \"this file shouldn't exist or it will make luacheck testsuite break\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "",
    "type": "function container"
  }, {
    "id": 80,
    "text": "mtime",
    "type": "global function"
  }, {
    "id": 81,
    "text": "current_dir",
    "type": "global function"
  }, {
    "id": 82,
    "text": "split_base",
    "type": "global function"
  }, {
    "id": 83,
    "text": "join",
    "type": "global function"
  }, {
    "id": 84,
    "text": "find_file",
    "type": "global function"
  }, {
    "id": 85,
    "text": "extract_files",
    "type": "global function"
  }, {
    "id": 86,
    "text": "is_dir",
    "type": "global function"
  }, {
    "id": 87,
    "text": "is_file",
    "type": "global function"
  }, {
    "id": 88,
    "text": "number",
    "type": "global function"
  }, {
    "id": 89,
    "text": "same",
    "type": "global function"
  }, {
    "id": 90,
    "text": "P",
    "type": "global function"
  }, {
    "id": 91,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 92,
    "text": "not_equal",
    "type": "global function"
  }, {
    "id": 93,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 94,
    "text": "require",
    "type": "global function"
  }, {
    "id": 95,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 96,
    "text": "string",
    "type": "global function"
  }, {
    "id": 97,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 98,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 99,
    "text": "it",
    "type": "global function"
  }, {
    "id": 100,
    "text": "",
    "type": "variable container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "require local variable"
  } ]
}