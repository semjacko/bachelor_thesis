{
  "_filename": "argparse.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/samples/argparse.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 6
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 8
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 8
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 11
  }, {
    "from": 27,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 27,
    "label": "has",
    "to": 8
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 8
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 42,
    "label": "has",
    "to": 8
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 8
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 68,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 80,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 80,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 80,
    "label": "has",
    "to": 8
  }, {
    "from": 80,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 8
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 101,
    "label": "has",
    "to": 8
  }, {
    "from": 101,
    "label": "has",
    "to": 8
  }, {
    "from": 101,
    "label": "has",
    "to": 8
  }, {
    "from": 101,
    "label": "has",
    "to": 8
  }, {
    "from": 101,
    "label": "has",
    "to": 8
  }, {
    "from": 101,
    "label": "has",
    "to": 8
  }, {
    "from": 101,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 8
  }, {
    "from": 106,
    "label": "has",
    "to": 8
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 8
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 8
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 8
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 116,
    "label": "has",
    "to": 8
  }, {
    "from": 116,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 8
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 8
  }, {
    "from": 126,
    "label": "has",
    "to": 8
  }, {
    "from": 126,
    "label": "has",
    "to": 8
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 8
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 99
  }, {
    "from": 132,
    "label": "has",
    "to": 8
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 8
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 8
  }, {
    "from": 138,
    "label": "has",
    "to": 8
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 143,
    "label": "has",
    "to": 8
  }, {
    "from": 143,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 150,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 150,
    "label": "has",
    "to": 8
  }, {
    "from": 150,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 8
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 8
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 8
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 170,
    "label": "has",
    "to": 8
  }, {
    "from": 170,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 175,
    "label": "has",
    "to": 179
  }, {
    "from": 175,
    "label": "has",
    "to": 8
  }, {
    "from": 175,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 8
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 181,
    "label": "has",
    "to": 188
  }, {
    "from": 181,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 81
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 189,
    "label": "has",
    "to": 193
  }, {
    "from": 181,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 181,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 198,
    "label": "has",
    "to": 202
  }, {
    "from": 181,
    "label": "has",
    "to": 8
  }, {
    "from": 181,
    "label": "has",
    "to": 203
  }, {
    "from": 204,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 8
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 8
  }, {
    "from": 208,
    "label": "has",
    "to": 8
  }, {
    "from": 206,
    "label": "has",
    "to": 210
  }, {
    "from": 206,
    "label": "has",
    "to": 8
  }, {
    "from": 206,
    "label": "has",
    "to": 8
  }, {
    "from": 206,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 8
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 212,
    "label": "has",
    "to": 217
  }, {
    "from": 212,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 219,
    "label": "has",
    "to": 223
  }, {
    "from": 212,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 212,
    "label": "has",
    "to": 8
  }, {
    "from": 212,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 227,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 227,
    "label": "has",
    "to": 243
  }, {
    "from": 227,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 245,
    "label": "has",
    "to": 249
  }, {
    "from": 227,
    "label": "has",
    "to": 8
  }, {
    "from": 227,
    "label": "has",
    "to": 8
  }, {
    "from": 227,
    "label": "has",
    "to": 8
  }, {
    "from": 227,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 8
  }, {
    "from": 251,
    "label": "has",
    "to": 8
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 254,
    "label": "has",
    "to": 258
  }, {
    "from": 254,
    "label": "has",
    "to": 259
  }, {
    "from": 254,
    "label": "has",
    "to": 260
  }, {
    "from": 254,
    "label": "has",
    "to": 261
  }, {
    "from": 254,
    "label": "has",
    "to": 262
  }, {
    "from": 254,
    "label": "has",
    "to": 263
  }, {
    "from": 254,
    "label": "has",
    "to": 264
  }, {
    "from": 254,
    "label": "has",
    "to": 265
  }, {
    "from": 254,
    "label": "has",
    "to": 266
  }, {
    "from": 254,
    "label": "has",
    "to": 267
  }, {
    "from": 254,
    "label": "has",
    "to": 268
  }, {
    "from": 254,
    "label": "has",
    "to": 269
  }, {
    "from": 254,
    "label": "has",
    "to": 270
  }, {
    "from": 254,
    "label": "has",
    "to": 271
  }, {
    "from": 254,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 8
  }, {
    "from": 254,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 8
  }, {
    "from": 254,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 275,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 277,
    "label": "has",
    "to": 279
  }, {
    "from": 275,
    "label": "has",
    "to": 280
  }, {
    "from": 275,
    "label": "has",
    "to": 281
  }, {
    "from": 274,
    "label": "has",
    "to": 8
  }, {
    "from": 254,
    "label": "has",
    "to": 282
  }, {
    "from": 254,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 285,
    "label": "has",
    "to": 289
  }, {
    "from": 283,
    "label": "has",
    "to": 290
  }, {
    "from": 283,
    "label": "has",
    "to": 291
  }, {
    "from": 283,
    "label": "has",
    "to": 292
  }, {
    "from": 283,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 293,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 293,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 293,
    "label": "has",
    "to": 300
  }, {
    "from": 293,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 283,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 254,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 303,
    "label": "has",
    "to": 291
  }, {
    "from": 303,
    "label": "has",
    "to": 292
  }, {
    "from": 303,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 306,
    "label": "has",
    "to": 309
  }, {
    "from": 303,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 302
  }, {
    "from": 254,
    "label": "has",
    "to": 311
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 254,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 315,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 319,
    "label": "has",
    "to": 322
  }, {
    "from": 254,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 325,
    "label": "has",
    "to": 329
  }, {
    "from": 325,
    "label": "has",
    "to": 330
  }, {
    "from": 325,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 331,
    "label": "has",
    "to": 333
  }, {
    "from": 325,
    "label": "has",
    "to": 334
  }, {
    "from": 323,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 337,
    "label": "has",
    "to": 338
  }, {
    "from": 337,
    "label": "has",
    "to": 339
  }, {
    "from": 323,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 340,
    "label": "has",
    "to": 343
  }, {
    "from": 340,
    "label": "has",
    "to": 344
  }, {
    "from": 323,
    "label": "has",
    "to": 322
  }, {
    "from": 323,
    "label": "has",
    "to": 345
  }, {
    "from": 323,
    "label": "has",
    "to": 346
  }, {
    "from": 323,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 254,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 8
  }, {
    "from": 254,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 254,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 356,
    "label": "has",
    "to": 359
  }, {
    "from": 356,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 361,
    "label": "has",
    "to": 363
  }, {
    "from": 360,
    "label": "has",
    "to": 364
  }, {
    "from": 360,
    "label": "has",
    "to": 365
  }, {
    "from": 360,
    "label": "has",
    "to": 366
  }, {
    "from": 254,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 367,
    "label": "has",
    "to": 370
  }, {
    "from": 367,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 373,
    "label": "has",
    "to": 375
  }, {
    "from": 367,
    "label": "has",
    "to": 376
  }, {
    "from": 367,
    "label": "has",
    "to": 377
  }, {
    "from": 254,
    "label": "has",
    "to": 378
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 378,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 380,
    "label": "has",
    "to": 383
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 383,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 386,
    "label": "has",
    "to": 387
  }, {
    "from": 386,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 390,
    "label": "has",
    "to": 369
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 389,
    "label": "has",
    "to": 392
  }, {
    "from": 389,
    "label": "has",
    "to": 393
  }, {
    "from": 393,
    "label": "has",
    "to": 394
  }, {
    "from": 393,
    "label": "has",
    "to": 395
  }, {
    "from": 393,
    "label": "has",
    "to": 396
  }, {
    "from": 393,
    "label": "has",
    "to": 397
  }, {
    "from": 393,
    "label": "has",
    "to": 398
  }, {
    "from": 393,
    "label": "has",
    "to": 399
  }, {
    "from": 393,
    "label": "has",
    "to": 400
  }, {
    "from": 388,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 401,
    "label": "has",
    "to": 395
  }, {
    "from": 401,
    "label": "has",
    "to": 403
  }, {
    "from": 401,
    "label": "has",
    "to": 404
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 380,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 254,
    "label": "has",
    "to": 408
  }, {
    "from": 254,
    "label": "has",
    "to": 409
  }, {
    "from": 254,
    "label": "has",
    "to": 410
  }, {
    "from": 254,
    "label": "has",
    "to": 411
  }, {
    "from": 411,
    "label": "has",
    "to": 369
  }, {
    "from": 254,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 413,
    "label": "has",
    "to": 415
  }, {
    "from": 254,
    "label": "has",
    "to": 416
  }, {
    "from": 416,
    "label": "has",
    "to": 417
  }, {
    "from": 254,
    "label": "has",
    "to": 418
  }, {
    "from": 418,
    "label": "has",
    "to": 419
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 421
  }, {
    "from": 420,
    "label": "has",
    "to": 422
  }, {
    "from": 420,
    "label": "has",
    "to": 423
  }, {
    "from": 418,
    "label": "has",
    "to": 424
  }, {
    "from": 424,
    "label": "has",
    "to": 425
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 426,
    "label": "has",
    "to": 421
  }, {
    "from": 426,
    "label": "has",
    "to": 423
  }, {
    "from": 425,
    "label": "has",
    "to": 427
  }, {
    "from": 254,
    "label": "has",
    "to": 8
  }, {
    "from": 254,
    "label": "has",
    "to": 428
  }, {
    "from": 429,
    "label": "has",
    "to": 8
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 431,
    "label": "has",
    "to": 8
  }, {
    "from": 431,
    "label": "has",
    "to": 432
  }, {
    "from": 433,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 275,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 277,
    "label": "has",
    "to": 279
  }, {
    "from": 275,
    "label": "has",
    "to": 280
  }, {
    "from": 275,
    "label": "has",
    "to": 281
  }, {
    "from": 433,
    "label": "has",
    "to": 8
  }, {
    "from": 433,
    "label": "has",
    "to": 434
  }, {
    "from": 435,
    "label": "has",
    "to": 284
  }, {
    "from": 435,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 285,
    "label": "has",
    "to": 289
  }, {
    "from": 435,
    "label": "has",
    "to": 290
  }, {
    "from": 435,
    "label": "has",
    "to": 291
  }, {
    "from": 435,
    "label": "has",
    "to": 292
  }, {
    "from": 435,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 293,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 293,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 293,
    "label": "has",
    "to": 300
  }, {
    "from": 293,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 435,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 437,
    "label": "has",
    "to": 304
  }, {
    "from": 437,
    "label": "has",
    "to": 305
  }, {
    "from": 437,
    "label": "has",
    "to": 291
  }, {
    "from": 437,
    "label": "has",
    "to": 292
  }, {
    "from": 437,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 306,
    "label": "has",
    "to": 309
  }, {
    "from": 437,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 302
  }, {
    "from": 437,
    "label": "has",
    "to": 438
  }, {
    "from": 439,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 439,
    "label": "has",
    "to": 440
  }, {
    "from": 441,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 315,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 319,
    "label": "has",
    "to": 322
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 443,
    "label": "has",
    "to": 324
  }, {
    "from": 443,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 325,
    "label": "has",
    "to": 329
  }, {
    "from": 325,
    "label": "has",
    "to": 330
  }, {
    "from": 325,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 331,
    "label": "has",
    "to": 333
  }, {
    "from": 325,
    "label": "has",
    "to": 334
  }, {
    "from": 443,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 337,
    "label": "has",
    "to": 338
  }, {
    "from": 337,
    "label": "has",
    "to": 339
  }, {
    "from": 443,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 340,
    "label": "has",
    "to": 343
  }, {
    "from": 340,
    "label": "has",
    "to": 344
  }, {
    "from": 443,
    "label": "has",
    "to": 322
  }, {
    "from": 443,
    "label": "has",
    "to": 345
  }, {
    "from": 443,
    "label": "has",
    "to": 346
  }, {
    "from": 443,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 443,
    "label": "has",
    "to": 444
  }, {
    "from": 445,
    "label": "has",
    "to": 8
  }, {
    "from": 445,
    "label": "has",
    "to": 446
  }, {
    "from": 447,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 447,
    "label": "has",
    "to": 448
  }, {
    "from": 449,
    "label": "has",
    "to": 356
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 356,
    "label": "has",
    "to": 359
  }, {
    "from": 356,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 361,
    "label": "has",
    "to": 363
  }, {
    "from": 360,
    "label": "has",
    "to": 364
  }, {
    "from": 360,
    "label": "has",
    "to": 365
  }, {
    "from": 360,
    "label": "has",
    "to": 366
  }, {
    "from": 449,
    "label": "has",
    "to": 450
  }, {
    "from": 451,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 451,
    "label": "has",
    "to": 370
  }, {
    "from": 451,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 373,
    "label": "has",
    "to": 375
  }, {
    "from": 451,
    "label": "has",
    "to": 376
  }, {
    "from": 451,
    "label": "has",
    "to": 377
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 453,
    "label": "has",
    "to": 379
  }, {
    "from": 453,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 380,
    "label": "has",
    "to": 383
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 383,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 386,
    "label": "has",
    "to": 387
  }, {
    "from": 386,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 390,
    "label": "has",
    "to": 369
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 389,
    "label": "has",
    "to": 392
  }, {
    "from": 389,
    "label": "has",
    "to": 393
  }, {
    "from": 393,
    "label": "has",
    "to": 394
  }, {
    "from": 393,
    "label": "has",
    "to": 395
  }, {
    "from": 393,
    "label": "has",
    "to": 396
  }, {
    "from": 393,
    "label": "has",
    "to": 397
  }, {
    "from": 393,
    "label": "has",
    "to": 398
  }, {
    "from": 393,
    "label": "has",
    "to": 399
  }, {
    "from": 393,
    "label": "has",
    "to": 400
  }, {
    "from": 388,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 401,
    "label": "has",
    "to": 395
  }, {
    "from": 401,
    "label": "has",
    "to": 403
  }, {
    "from": 401,
    "label": "has",
    "to": 404
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 380,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 456,
    "label": "has",
    "to": 457
  }, {
    "from": 456,
    "label": "has",
    "to": 458
  }, {
    "from": 456,
    "label": "has",
    "to": 459
  }, {
    "from": 455,
    "label": "has",
    "to": 460
  }, {
    "from": 461,
    "label": "has",
    "to": 8
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 463,
    "label": "has",
    "to": 464
  }, {
    "from": 463,
    "label": "has",
    "to": 465
  }, {
    "from": 465,
    "label": "has",
    "to": 8
  }, {
    "from": 465,
    "label": "has",
    "to": 466
  }, {
    "from": 465,
    "label": "has",
    "to": 8
  }, {
    "from": 463,
    "label": "has",
    "to": 467
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 463,
    "label": "has",
    "to": 8
  }, {
    "from": 463,
    "label": "has",
    "to": 8
  }, {
    "from": 463,
    "label": "has",
    "to": 469
  }, {
    "from": 470,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 470,
    "label": "has",
    "to": 471
  }, {
    "from": 472,
    "label": "has",
    "to": 473
  }, {
    "from": 473,
    "label": "has",
    "to": 8
  }, {
    "from": 473,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 472,
    "label": "has",
    "to": 474
  }, {
    "from": 472,
    "label": "has",
    "to": 8
  }, {
    "from": 472,
    "label": "has",
    "to": 475
  }, {
    "from": 476,
    "label": "has",
    "to": 53
  }, {
    "from": 476,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 476,
    "label": "has",
    "to": 56
  }, {
    "from": 476,
    "label": "has",
    "to": 477
  }, {
    "from": 478,
    "label": "has",
    "to": 74
  }, {
    "from": 478,
    "label": "has",
    "to": 75
  }, {
    "from": 478,
    "label": "has",
    "to": 479
  }, {
    "from": 480,
    "label": "has",
    "to": 209
  }, {
    "from": 480,
    "label": "has",
    "to": 8
  }, {
    "from": 480,
    "label": "has",
    "to": 8
  }, {
    "from": 480,
    "label": "has",
    "to": 481
  }, {
    "from": 482,
    "label": "has",
    "to": 466
  }, {
    "from": 482,
    "label": "has",
    "to": 8
  }, {
    "from": 482,
    "label": "has",
    "to": 483
  }, {
    "from": 484,
    "label": "has",
    "to": 8
  }, {
    "from": 484,
    "label": "has",
    "to": 466
  }, {
    "from": 484,
    "label": "has",
    "to": 8
  }, {
    "from": 484,
    "label": "has",
    "to": 485
  }, {
    "from": 486,
    "label": "has",
    "to": 8
  }, {
    "from": 486,
    "label": "has",
    "to": 487
  }, {
    "from": 58,
    "label": "calls",
    "to": 431
  }, {
    "from": 445,
    "label": "calls",
    "to": 431
  }, {
    "from": 453,
    "label": "calls",
    "to": 431
  }, {
    "from": 3,
    "label": "calls",
    "to": 489
  }, {
    "from": 68,
    "label": "calls",
    "to": 497
  }, {
    "from": 455,
    "label": "calls",
    "to": 497
  }, {
    "from": 175,
    "label": "calls",
    "to": 502
  }, {
    "from": 463,
    "label": "calls",
    "to": 502
  }, {
    "from": 42,
    "label": "calls",
    "to": 503
  }, {
    "from": 42,
    "label": "calls",
    "to": 503
  }, {
    "from": 42,
    "label": "calls",
    "to": 503
  }, {
    "from": 42,
    "label": "calls",
    "to": 503
  }, {
    "from": 42,
    "label": "calls",
    "to": 503
  }, {
    "from": 42,
    "label": "calls",
    "to": 503
  }, {
    "from": 488,
    "label": "calls",
    "to": 52
  }, {
    "from": 488,
    "label": "calls",
    "to": 52
  }, {
    "from": 488,
    "label": "calls",
    "to": 52
  }, {
    "from": 68,
    "label": "calls",
    "to": 510
  }, {
    "from": 3,
    "label": "calls",
    "to": 514
  }, {
    "from": 116,
    "label": "calls",
    "to": 491
  }, {
    "from": 138,
    "label": "calls",
    "to": 491
  }, {
    "from": 150,
    "label": "calls",
    "to": 491
  }, {
    "from": 150,
    "label": "calls",
    "to": 491
  }, {
    "from": 150,
    "label": "calls",
    "to": 491
  }, {
    "from": 175,
    "label": "calls",
    "to": 491
  }, {
    "from": 181,
    "label": "calls",
    "to": 491
  }, {
    "from": 181,
    "label": "calls",
    "to": 491
  }, {
    "from": 181,
    "label": "calls",
    "to": 491
  }, {
    "from": 181,
    "label": "calls",
    "to": 491
  }, {
    "from": 212,
    "label": "calls",
    "to": 491
  }, {
    "from": 212,
    "label": "calls",
    "to": 491
  }, {
    "from": 227,
    "label": "calls",
    "to": 491
  }, {
    "from": 443,
    "label": "calls",
    "to": 491
  }, {
    "from": 443,
    "label": "calls",
    "to": 491
  }, {
    "from": 443,
    "label": "calls",
    "to": 491
  }, {
    "from": 443,
    "label": "calls",
    "to": 491
  }, {
    "from": 443,
    "label": "calls",
    "to": 491
  }, {
    "from": 443,
    "label": "calls",
    "to": 491
  }, {
    "from": 443,
    "label": "calls",
    "to": 491
  }, {
    "from": 451,
    "label": "calls",
    "to": 491
  }, {
    "from": 453,
    "label": "calls",
    "to": 491
  }, {
    "from": 254,
    "label": "calls",
    "to": 491
  }, {
    "from": 447,
    "label": "calls",
    "to": 504
  }, {
    "from": 95,
    "label": "calls",
    "to": 496
  }, {
    "from": 116,
    "label": "calls",
    "to": 496
  }, {
    "from": 116,
    "label": "calls",
    "to": 496
  }, {
    "from": 124,
    "label": "calls",
    "to": 496
  }, {
    "from": 132,
    "label": "calls",
    "to": 496
  }, {
    "from": 143,
    "label": "calls",
    "to": 496
  }, {
    "from": 181,
    "label": "calls",
    "to": 496
  }, {
    "from": 181,
    "label": "calls",
    "to": 496
  }, {
    "from": 212,
    "label": "calls",
    "to": 496
  }, {
    "from": 212,
    "label": "calls",
    "to": 496
  }, {
    "from": 227,
    "label": "calls",
    "to": 496
  }, {
    "from": 175,
    "label": "calls",
    "to": 516
  }, {
    "from": 254,
    "label": "calls",
    "to": 58
  }, {
    "from": 463,
    "label": "calls",
    "to": 492
  }, {
    "from": 168,
    "label": "calls",
    "to": 505
  }, {
    "from": 429,
    "label": "calls",
    "to": 490
  }, {
    "from": 80,
    "label": "calls",
    "to": 513
  }, {
    "from": 80,
    "label": "calls",
    "to": 513
  }, {
    "from": 453,
    "label": "calls",
    "to": 451
  }, {
    "from": 453,
    "label": "calls",
    "to": 451
  }, {
    "from": 453,
    "label": "calls",
    "to": 451
  }, {
    "from": 3,
    "label": "calls",
    "to": 498
  }, {
    "from": 453,
    "label": "calls",
    "to": 449
  }, {
    "from": 453,
    "label": "calls",
    "to": 449
  }, {
    "from": 453,
    "label": "calls",
    "to": 449
  }, {
    "from": 170,
    "label": "calls",
    "to": 506
  }, {
    "from": 212,
    "label": "calls",
    "to": 206
  }, {
    "from": 68,
    "label": "calls",
    "to": 493
  }, {
    "from": 227,
    "label": "calls",
    "to": 499
  }, {
    "from": 439,
    "label": "calls",
    "to": 437
  }, {
    "from": 449,
    "label": "calls",
    "to": 437
  }, {
    "from": 449,
    "label": "calls",
    "to": 437
  }, {
    "from": 52,
    "label": "calls",
    "to": 512
  }, {
    "from": 58,
    "label": "calls",
    "to": 512
  }, {
    "from": 63,
    "label": "calls",
    "to": 512
  }, {
    "from": 455,
    "label": "calls",
    "to": 512
  }, {
    "from": 463,
    "label": "calls",
    "to": 512
  }, {
    "from": 443,
    "label": "calls",
    "to": 435
  }, {
    "from": 451,
    "label": "calls",
    "to": 435
  }, {
    "from": 254,
    "label": "calls",
    "to": 435
  }, {
    "from": 254,
    "label": "calls",
    "to": 435
  }, {
    "from": 449,
    "label": "calls",
    "to": 447
  }, {
    "from": 451,
    "label": "calls",
    "to": 447
  }, {
    "from": 254,
    "label": "calls",
    "to": 439
  }, {
    "from": 254,
    "label": "calls",
    "to": 439
  }, {
    "from": 254,
    "label": "calls",
    "to": 439
  }, {
    "from": 488,
    "label": "calls",
    "to": 3
  }, {
    "from": 488,
    "label": "calls",
    "to": 3
  }, {
    "from": 488,
    "label": "calls",
    "to": 3
  }, {
    "from": 488,
    "label": "calls",
    "to": 3
  }, {
    "from": 181,
    "label": "calls",
    "to": 204
  }, {
    "from": 181,
    "label": "calls",
    "to": 204
  }, {
    "from": 181,
    "label": "calls",
    "to": 204
  }, {
    "from": 181,
    "label": "calls",
    "to": 204
  }, {
    "from": 181,
    "label": "calls",
    "to": 204
  }, {
    "from": 3,
    "label": "calls",
    "to": 511
  }, {
    "from": 3,
    "label": "calls",
    "to": 511
  }, {
    "from": 227,
    "label": "calls",
    "to": 511
  }, {
    "from": 227,
    "label": "calls",
    "to": 511
  }, {
    "from": 431,
    "label": "calls",
    "to": 429
  }, {
    "from": 254,
    "label": "calls",
    "to": 429
  }, {
    "from": 254,
    "label": "calls",
    "to": 429
  }, {
    "from": 449,
    "label": "calls",
    "to": 429
  }, {
    "from": 449,
    "label": "calls",
    "to": 429
  }, {
    "from": 451,
    "label": "calls",
    "to": 429
  }, {
    "from": 254,
    "label": "calls",
    "to": 429
  }, {
    "from": 254,
    "label": "calls",
    "to": 429
  }, {
    "from": 52,
    "label": "calls",
    "to": 42
  }, {
    "from": 254,
    "label": "calls",
    "to": 251
  }, {
    "from": 254,
    "label": "calls",
    "to": 251
  }, {
    "from": 227,
    "label": "calls",
    "to": 508
  }, {
    "from": 227,
    "label": "calls",
    "to": 508
  }, {
    "from": 254,
    "label": "calls",
    "to": 453
  }, {
    "from": 3,
    "label": "calls",
    "to": 494
  }, {
    "from": 33,
    "label": "calls",
    "to": 494
  }, {
    "from": 80,
    "label": "calls",
    "to": 494
  }, {
    "from": 80,
    "label": "calls",
    "to": 494
  }, {
    "from": 80,
    "label": "calls",
    "to": 494
  }, {
    "from": 116,
    "label": "calls",
    "to": 494
  }, {
    "from": 116,
    "label": "calls",
    "to": 494
  }, {
    "from": 132,
    "label": "calls",
    "to": 494
  }, {
    "from": 143,
    "label": "calls",
    "to": 494
  }, {
    "from": 158,
    "label": "calls",
    "to": 494
  }, {
    "from": 162,
    "label": "calls",
    "to": 494
  }, {
    "from": 162,
    "label": "calls",
    "to": 494
  }, {
    "from": 170,
    "label": "calls",
    "to": 494
  }, {
    "from": 175,
    "label": "calls",
    "to": 494
  }, {
    "from": 181,
    "label": "calls",
    "to": 494
  }, {
    "from": 212,
    "label": "calls",
    "to": 494
  }, {
    "from": 212,
    "label": "calls",
    "to": 494
  }, {
    "from": 212,
    "label": "calls",
    "to": 494
  }, {
    "from": 212,
    "label": "calls",
    "to": 494
  }, {
    "from": 227,
    "label": "calls",
    "to": 494
  }, {
    "from": 227,
    "label": "calls",
    "to": 494
  }, {
    "from": 254,
    "label": "calls",
    "to": 494
  }, {
    "from": 254,
    "label": "calls",
    "to": 494
  }, {
    "from": 254,
    "label": "calls",
    "to": 494
  }, {
    "from": 443,
    "label": "calls",
    "to": 494
  }, {
    "from": 443,
    "label": "calls",
    "to": 494
  }, {
    "from": 443,
    "label": "calls",
    "to": 494
  }, {
    "from": 68,
    "label": "calls",
    "to": 515
  }, {
    "from": 254,
    "label": "calls",
    "to": 515
  }, {
    "from": 254,
    "label": "calls",
    "to": 515
  }, {
    "from": 33,
    "label": "calls",
    "to": 507
  }, {
    "from": 37,
    "label": "calls",
    "to": 509
  }, {
    "from": 254,
    "label": "calls",
    "to": 441
  }, {
    "from": 254,
    "label": "calls",
    "to": 441
  }, {
    "from": 451,
    "label": "calls",
    "to": 441
  }, {
    "from": 453,
    "label": "calls",
    "to": 441
  }, {
    "from": 254,
    "label": "calls",
    "to": 441
  }, {
    "from": 254,
    "label": "calls",
    "to": 441
  }, {
    "from": 254,
    "label": "calls",
    "to": 441
  }, {
    "from": 254,
    "label": "calls",
    "to": 441
  }, {
    "from": 3,
    "label": "calls",
    "to": 500
  }, {
    "from": 3,
    "label": "calls",
    "to": 500
  }, {
    "from": 449,
    "label": "calls",
    "to": 443
  }, {
    "from": 254,
    "label": "calls",
    "to": 443
  }, {
    "from": 3,
    "label": "calls",
    "to": 495
  }, {
    "from": 3,
    "label": "calls",
    "to": 495
  }, {
    "from": 58,
    "label": "calls",
    "to": 495
  }, {
    "from": 58,
    "label": "calls",
    "to": 495
  }, {
    "from": 58,
    "label": "calls",
    "to": 495
  }, {
    "from": 63,
    "label": "calls",
    "to": 495
  }, {
    "from": 63,
    "label": "calls",
    "to": 495
  }, {
    "from": 63,
    "label": "calls",
    "to": 495
  }, {
    "from": 106,
    "label": "calls",
    "to": 495
  }, {
    "from": 58,
    "label": "calls",
    "to": 495
  }, {
    "from": 58,
    "label": "calls",
    "to": 501
  }, {
    "from": 445,
    "label": "calls",
    "to": 227
  }, {
    "from": 449,
    "label": "calls",
    "to": 227
  }, {
    "from": 453,
    "label": "calls",
    "to": 445
  }, {
    "from": 453,
    "label": "calls",
    "to": 445
  }, {
    "from": 453,
    "label": "calls",
    "to": 445
  }, {
    "from": 488,
    "label": "declares",
    "to": 3
  }, {
    "from": 488,
    "label": "declares",
    "to": 23
  }, {
    "from": 488,
    "label": "declares",
    "to": 25
  }, {
    "from": 488,
    "label": "declares",
    "to": 27
  }, {
    "from": 488,
    "label": "declares",
    "to": 29
  }, {
    "from": 488,
    "label": "declares",
    "to": 33
  }, {
    "from": 488,
    "label": "declares",
    "to": 37
  }, {
    "from": 488,
    "label": "declares",
    "to": 42
  }, {
    "from": 488,
    "label": "declares",
    "to": 52
  }, {
    "from": 488,
    "label": "declares",
    "to": 58
  }, {
    "from": 488,
    "label": "declares",
    "to": 63
  }, {
    "from": 488,
    "label": "declares",
    "to": 68
  }, {
    "from": 488,
    "label": "declares",
    "to": 80
  }, {
    "from": 488,
    "label": "declares",
    "to": 95
  }, {
    "from": 488,
    "label": "declares",
    "to": 101
  }, {
    "from": 488,
    "label": "declares",
    "to": 106
  }, {
    "from": 488,
    "label": "declares",
    "to": 110
  }, {
    "from": 488,
    "label": "declares",
    "to": 112
  }, {
    "from": 488,
    "label": "declares",
    "to": 114
  }, {
    "from": 488,
    "label": "declares",
    "to": 116
  }, {
    "from": 488,
    "label": "declares",
    "to": 124
  }, {
    "from": 488,
    "label": "declares",
    "to": 126
  }, {
    "from": 488,
    "label": "declares",
    "to": 130
  }, {
    "from": 488,
    "label": "declares",
    "to": 132
  }, {
    "from": 488,
    "label": "declares",
    "to": 138
  }, {
    "from": 488,
    "label": "declares",
    "to": 143
  }, {
    "from": 488,
    "label": "declares",
    "to": 150
  }, {
    "from": 488,
    "label": "declares",
    "to": 158
  }, {
    "from": 488,
    "label": "declares",
    "to": 162
  }, {
    "from": 488,
    "label": "declares",
    "to": 168
  }, {
    "from": 488,
    "label": "declares",
    "to": 170
  }, {
    "from": 488,
    "label": "declares",
    "to": 175
  }, {
    "from": 488,
    "label": "declares",
    "to": 181
  }, {
    "from": 488,
    "label": "declares",
    "to": 204
  }, {
    "from": 488,
    "label": "declares",
    "to": 206
  }, {
    "from": 488,
    "label": "declares",
    "to": 212
  }, {
    "from": 488,
    "label": "declares",
    "to": 227
  }, {
    "from": 488,
    "label": "declares",
    "to": 251
  }, {
    "from": 488,
    "label": "declares",
    "to": 254
  }, {
    "from": 488,
    "label": "declares",
    "to": 429
  }, {
    "from": 488,
    "label": "declares",
    "to": 431
  }, {
    "from": 488,
    "label": "declares",
    "to": 433
  }, {
    "from": 488,
    "label": "declares",
    "to": 435
  }, {
    "from": 488,
    "label": "declares",
    "to": 437
  }, {
    "from": 488,
    "label": "declares",
    "to": 439
  }, {
    "from": 488,
    "label": "declares",
    "to": 441
  }, {
    "from": 488,
    "label": "declares",
    "to": 443
  }, {
    "from": 488,
    "label": "declares",
    "to": 445
  }, {
    "from": 488,
    "label": "declares",
    "to": 447
  }, {
    "from": 488,
    "label": "declares",
    "to": 449
  }, {
    "from": 488,
    "label": "declares",
    "to": 451
  }, {
    "from": 488,
    "label": "declares",
    "to": 453
  }, {
    "from": 488,
    "label": "declares",
    "to": 455
  }, {
    "from": 488,
    "label": "declares",
    "to": 461
  }, {
    "from": 488,
    "label": "declares",
    "to": 463
  }, {
    "from": 488,
    "label": "declares",
    "to": 470
  }, {
    "from": 488,
    "label": "declares",
    "to": 472
  }, {
    "from": 488,
    "label": "declares",
    "to": 476
  }, {
    "from": 488,
    "label": "declares",
    "to": 478
  }, {
    "from": 488,
    "label": "declares",
    "to": 480
  }, {
    "from": 488,
    "label": "declares",
    "to": 482
  }, {
    "from": 488,
    "label": "declares",
    "to": 484
  }, {
    "from": 488,
    "label": "declares",
    "to": 486
  }, {
    "from": 2,
    "label": "contains",
    "to": 517
  }, {
    "from": 2,
    "label": "contains",
    "to": 518
  }, {
    "from": 517,
    "label": "initializes",
    "to": 519
  }, {
    "from": 517,
    "label": "initializes",
    "to": 520
  }, {
    "from": 517,
    "label": "initializes",
    "to": 521
  }, {
    "from": 517,
    "label": "initializes",
    "to": 522
  }, {
    "from": 517,
    "label": "initializes",
    "to": 523
  }, {
    "from": 523,
    "label": "assigns",
    "to": 524
  }, {
    "from": 517,
    "label": "initializes",
    "to": 525
  }, {
    "from": 525,
    "label": "assigns",
    "to": 526
  }, {
    "from": 517,
    "label": "initializes",
    "to": 527
  }, {
    "from": 527,
    "label": "assigns",
    "to": 528
  }, {
    "from": 517,
    "label": "initializes",
    "to": 529
  }, {
    "from": 529,
    "label": "assigns",
    "to": 530
  }, {
    "from": 517,
    "label": "initializes",
    "to": 531
  }, {
    "from": 531,
    "label": "assigns",
    "to": 532
  }, {
    "from": 517,
    "label": "initializes",
    "to": 533
  }, {
    "from": 533,
    "label": "assigns",
    "to": 534
  }, {
    "from": 517,
    "label": "initializes",
    "to": 535
  }, {
    "from": 535,
    "label": "assigns",
    "to": 536
  }, {
    "from": 518,
    "label": "initializes",
    "to": 537
  }, {
    "from": 537,
    "label": "requires",
    "to": 538
  }, {
    "from": 2,
    "label": "provides",
    "to": 539
  }, {
    "from": 539,
    "label": "provides",
    "to": 540
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "argparse",
    "type": "module"
  }, {
    "id": 2,
    "text": "argparse",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function add_setters(cl, fields)\r\n      for field, setter in pairs(fields) do\r\n         cl[field] = function(self, value)\r\n            setter(self, value)\r\n            self[\"_\"..field] = value\r\n            return self\r\n         end\r\n      end\r\n\r\n      cl.__init = function(self, ...)\r\n         return self(...)\r\n      end\r\n\r\n      cl.__call = function(self, ...)\r\n         local name_or_options\r\n\r\n         for i=1, select(\"#\", ...) do\r\n            name_or_options = select(i, ...)\r\n\r\n            if type(name_or_options) == \"string\" then\r\n               if self._aliases then\r\n                  table.insert(self._aliases, name_or_options)\r\n               end\r\n\r\n               if not self._aliases or not self._name then\r\n                  self._name = name_or_options\r\n               end\r\n            elseif type(name_or_options) == \"table\" then\r\n               for field, setter in pairs(fields) do\r\n                  if name_or_options[field] ~= nil then\r\n                     self[field](self, name_or_options[field])\r\n                  end\r\n               end\r\n            end\r\n         end\r\n\r\n         return self\r\n      end\r\n\r\n      return cl\r\n   end",
    "type": "function"
  }, {
    "id": 4,
    "text": "for field, setter in pairs(fields) do\r\n         cl[field] = function(self, value)\r\n            setter(self, value)\r\n            self[\"_\"..field] = value\r\n            return self\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "cl[field] = function(self, value)\r\n            setter(self, value)\r\n            self[\"_\"..field] = value\r\n            return self\r\n         end",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "setter(self, value)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "self[\"_\"..field] = value",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "cl.__init = function(self, ...)\r\n         return self(...)\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "cl.__call = function(self, ...)\r\n         local name_or_options\r\n\r\n         for i=1, select(\"#\", ...) do\r\n            name_or_options = select(i, ...)\r\n\r\n            if type(name_or_options) == \"string\" then\r\n               if self._aliases then\r\n                  table.insert(self._aliases, name_or_options)\r\n               end\r\n\r\n               if not self._aliases or not self._name then\r\n                  self._name = name_or_options\r\n               end\r\n            elseif type(name_or_options) == \"table\" then\r\n               for field, setter in pairs(fields) do\r\n                  if name_or_options[field] ~= nil then\r\n                     self[field](self, name_or_options[field])\r\n                  end\r\n               end\r\n            end\r\n         end\r\n\r\n         return self\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local name_or_options",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "for i=1, select(\"#\", ...) do\r\n            name_or_options = select(i, ...)\r\n\r\n            if type(name_or_options) == \"string\" then\r\n               if self._aliases then\r\n                  table.insert(self._aliases, name_or_options)\r\n               end\r\n\r\n               if not self._aliases or not self._name then\r\n                  self._name = name_or_options\r\n               end\r\n            elseif type(name_or_options) == \"table\" then\r\n               for field, setter in pairs(fields) do\r\n                  if name_or_options[field] ~= nil then\r\n                     self[field](self, name_or_options[field])\r\n                  end\r\n               end\r\n            end\r\n         end",
    "type": "statement:numericfor"
  }, {
    "id": 13,
    "text": "name_or_options = select(i, ...)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if type(name_or_options) == \"string\" then\r\n               if self._aliases then\r\n                  table.insert(self._aliases, name_or_options)\r\n               end\r\n\r\n               if not self._aliases or not self._name then\r\n                  self._name = name_or_options\r\n               end\r\n            elseif type(name_or_options) == \"table\" then\r\n               for field, setter in pairs(fields) do\r\n                  if name_or_options[field] ~= nil then\r\n                     self[field](self, name_or_options[field])\r\n                  end\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if self._aliases then\r\n                  table.insert(self._aliases, name_or_options)\r\n               end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "table.insert(self._aliases, name_or_options)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "if not self._aliases or not self._name then\r\n                  self._name = name_or_options\r\n               end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "self._name = name_or_options",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "for field, setter in pairs(fields) do\r\n                  if name_or_options[field] ~= nil then\r\n                     self[field](self, name_or_options[field])\r\n                  end\r\n               end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "if name_or_options[field] ~= nil then\r\n                     self[field](self, name_or_options[field])\r\n                  end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "self[field](self, name_or_options[field])",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function(self, value)\r\n            setter(self, value)\r\n            self[\"_\"..field] = value\r\n            return self\r\n         end",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function(self, ...)\r\n         return self(...)\r\n      end",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function(self, ...)\r\n         local name_or_options\r\n\r\n         for i=1, select(\"#\", ...) do\r\n            name_or_options = select(i, ...)\r\n\r\n            if type(name_or_options) == \"string\" then\r\n               if self._aliases then\r\n                  table.insert(self._aliases, name_or_options)\r\n               end\r\n\r\n               if not self._aliases or not self._name then\r\n                  self._name = name_or_options\r\n               end\r\n            elseif type(name_or_options) == \"table\" then\r\n               for field, setter in pairs(fields) do\r\n                  if name_or_options[field] ~= nil then\r\n                     self[field](self, name_or_options[field])\r\n                  end\r\n               end\r\n            end\r\n         end\r\n\r\n         return self\r\n      end",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function(field)\r\n            return function(_, value)\r\n               if type(value) ~= type_ then\r\n                  error((\"bad field '%s' (%s expected, got %s)\"):format(field, type_, type(value)))\r\n               end\r\n            end\r\n         end",
    "type": "function"
  }, {
    "id": 30,
    "text": "if type(value) ~= type_ then\r\n                  error((\"bad field '%s' (%s expected, got %s)\"):format(field, type_, type(value)))\r\n               end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "error((\"bad field '%s' (%s expected, got %s)\"):format(field, type_, type(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function aliased_name(self, name)\r\n      typecheck.string \"name\" (self, name)\r\n\r\n      table.insert(self._aliases, name)\r\n   end",
    "type": "function"
  }, {
    "id": 34,
    "text": "typecheck.string \"name\" (self, name)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "table.insert(self._aliases, name)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function aliased_aliases(self, aliases)\r\n      typecheck.table \"aliases\" (self, aliases)\r\n\r\n      if not self._name then\r\n         self._name = aliases[1]\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 38,
    "text": "typecheck.table \"aliases\" (self, aliases)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if not self._name then\r\n         self._name = aliases[1]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "self._name = aliases[1]",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function parse_boundaries(boundaries)\r\n      if tonumber(boundaries) then\r\n         return tonumber(boundaries), tonumber(boundaries)\r\n      end\r\n\r\n      if boundaries == \"*\" then\r\n         return 0, math.huge\r\n      end\r\n\r\n      if boundaries == \"+\" then\r\n         return 1, math.huge\r\n      end\r\n\r\n      if boundaries == \"?\" then\r\n         return 0, 1\r\n      end\r\n\r\n      if boundaries:match \"^%d+%-%d+$\" then\r\n         local min, max = boundaries:match \"^(%d+)%-(%d+)$\"\r\n         return tonumber(min), tonumber(max)\r\n      end\r\n\r\n      if boundaries:match \"^%d+%+$\" then\r\n         local min = boundaries:match \"^(%d+)%+$\"\r\n         return tonumber(min), math.huge\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 43,
    "text": "if tonumber(boundaries) then\r\n         return tonumber(boundaries), tonumber(boundaries)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "if boundaries == \"*\" then\r\n         return 0, math.huge\r\n      end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "if boundaries == \"+\" then\r\n         return 1, math.huge\r\n      end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "if boundaries == \"?\" then\r\n         return 0, 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "if boundaries:match \"^%d+%-%d+$\" then\r\n         local min, max = boundaries:match \"^(%d+)%-(%d+)$\"\r\n         return tonumber(min), tonumber(max)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local min, max = boundaries:match \"^(%d+)%-(%d+)$\"",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if boundaries:match \"^%d+%+$\" then\r\n         local min = boundaries:match \"^(%d+)%+$\"\r\n         return tonumber(min), math.huge\r\n      end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local min = boundaries:match \"^(%d+)%+$\"",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function boundaries(field)\r\n      return function(self, value)\r\n         local min, max = parse_boundaries(value)\r\n\r\n         if not min then\r\n            error((\"bad field '%s'\"):format(field))\r\n         end\r\n\r\n         self[\"_min\"..field], self[\"_max\"..field] = min, max\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 53,
    "text": "local min, max = parse_boundaries(value)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if not min then\r\n            error((\"bad field '%s'\"):format(field))\r\n         end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "error((\"bad field '%s'\"):format(field))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "self[\"_min\"..field], self[\"_max\"..field] = min, max",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function convert(self, value)\r\n      if type(value) ~= \"function\" then\r\n         if type(value) ~= \"table\" then\r\n            error((\"bad field 'convert' (function or table expected, got %s)\"):format(type(value)))\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 59,
    "text": "if type(value) ~= \"function\" then\r\n         if type(value) ~= \"table\" then\r\n            error((\"bad field 'convert' (function or table expected, got %s)\"):format(type(value)))\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "if type(value) ~= \"table\" then\r\n            error((\"bad field 'convert' (function or table expected, got %s)\"):format(type(value)))\r\n         end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "error((\"bad field 'convert' (function or table expected, got %s)\"):format(type(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function argname(self, value)\r\n      if type(value) ~= \"string\" then\r\n         if type(value) ~= \"table\" then\r\n            error((\"bad field 'argname' (string or table expected, got %s)\"):format(type(value)))\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 64,
    "text": "if type(value) ~= \"string\" then\r\n         if type(value) ~= \"table\" then\r\n            error((\"bad field 'argname' (string or table expected, got %s)\"):format(type(value)))\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "if type(value) ~= \"table\" then\r\n            error((\"bad field 'argname' (string or table expected, got %s)\"):format(type(value)))\r\n         end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "error((\"bad field 'argname' (string or table expected, got %s)\"):format(type(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function add_help(self, param)\r\n      if self._has_help then\r\n         table.remove(self._options)\r\n         self._has_help = false\r\n      end\r\n\r\n      if param then\r\n         local help = self:flag()\r\n            :description \"Show this help message and exit. \"\r\n            :action(function()\r\n               io.stdout:write(self:get_help() .. \"\\r\\n\")\r\n               os.exit(0)\r\n            end)(param)\r\n\r\n         if not help._name then\r\n            help \"-h\" \"--help\"\r\n         end\r\n\r\n         self._has_help = true\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 69,
    "text": "if self._has_help then\r\n         table.remove(self._options)\r\n         self._has_help = false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "table.remove(self._options)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "self._has_help = false",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "if param then\r\n         local help = self:flag()\r\n            :description \"Show this help message and exit. \"\r\n            :action(function()\r\n               io.stdout:write(self:get_help() .. \"\\r\\n\")\r\n               os.exit(0)\r\n            end)(param)\r\n\r\n         if not help._name then\r\n            help \"-h\" \"--help\"\r\n         end\r\n\r\n         self._has_help = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "local help = self:flag()\r\n            :description \"Show this help message and exit. \"\r\n            :action(function()\r\n               io.stdout:write(self:get_help() .. \"\\r\\n\")\r\n               os.exit(0)\r\n            end)(param)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "io.stdout:write(self:get_help() .. \"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "os.exit(0)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "if not help._name then\r\n            help \"-h\" \"--help\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "help \"-h\" \"--help\"",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "self._has_help = true",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function Argument:_get_argument_list()\r\n   local buf = {}\r\n   local i = 1\r\n\r\n   while i <= math.min(self._minargs, 3) do\r\n      local argname = self:_get_argname_i(i)\r\n\r\n      if self._default and self._defmode:find \"a\" then\r\n         argname = \"[\" .. argname .. \"]\"\r\n      end\r\n\r\n      table.insert(buf, argname)\r\n      i = i+1\r\n   end\r\n\r\n   while i <= math.min(self._maxargs, 3) do\r\n      table.insert(buf, \"[\" .. self:_get_argname_i(i) .. \"]\")\r\n      i = i+1\r\n\r\n      if self._maxargs == math.huge then\r\n         break\r\n      end\r\n   end\r\n\r\n   if i < self._maxargs then\r\n      table.insert(buf, \"...\")\r\n   end\r\n\r\n   return buf\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local buf = {}",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "while i <= math.min(self._minargs, 3) do\r\n      local argname = self:_get_argname_i(i)\r\n\r\n      if self._default and self._defmode:find \"a\" then\r\n         argname = \"[\" .. argname .. \"]\"\r\n      end\r\n\r\n      table.insert(buf, argname)\r\n      i = i+1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 84,
    "text": "local argname = self:_get_argname_i(i)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if self._default and self._defmode:find \"a\" then\r\n         argname = \"[\" .. argname .. \"]\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "argname = \"[\" .. argname .. \"]\"",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "table.insert(buf, argname)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "while i <= math.min(self._maxargs, 3) do\r\n      table.insert(buf, \"[\" .. self:_get_argname_i(i) .. \"]\")\r\n      i = i+1\r\n\r\n      if self._maxargs == math.huge then\r\n         break\r\n      end\r\n   end",
    "type": "statement:while"
  }, {
    "id": 90,
    "text": "table.insert(buf, \"[\" .. self:_get_argname_i(i) .. \"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "if self._maxargs == math.huge then\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "if i < self._maxargs then\r\n      table.insert(buf, \"...\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "table.insert(buf, \"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function Argument:_get_usage()\r\n   local usage = table.concat(self:_get_argument_list(), \" \")\r\n\r\n   if self._default and self._defmode:find \"u\" then\r\n      if self._maxargs > 1 or (self._minargs == 1 and not self._defmode:find \"a\") then\r\n         usage = \"[\" .. usage .. \"]\"\r\n      end\r\n   end\r\n\r\n   return usage\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "local usage = table.concat(self:_get_argument_list(), \" \")",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "if self._default and self._defmode:find \"u\" then\r\n      if self._maxargs > 1 or (self._minargs == 1 and not self._defmode:find \"a\") then\r\n         usage = \"[\" .. usage .. \"]\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "if self._maxargs > 1 or (self._minargs == 1 and not self._defmode:find \"a\") then\r\n         usage = \"[\" .. usage .. \"]\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "usage = \"[\" .. usage .. \"]\"",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function Argument:_get_type()\r\n   if self._maxcount == 1 then\r\n      if self._maxargs == 0 then\r\n         return \"flag\"\r\n      elseif self._maxargs == 1 and (self._minargs == 1 or self._mincount == 1) then\r\n         return \"arg\"\r\n      else\r\n         return \"multiarg\"\r\n      end\r\n   else\r\n      if self._maxargs == 0 then\r\n         return \"counter\"\r\n      elseif self._maxargs == 1 and self._minargs == 1 then\r\n         return \"multicount\"\r\n      else\r\n         return \"twodimensional\"\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "if self._maxcount == 1 then\r\n      if self._maxargs == 0 then\r\n         return \"flag\"\r\n      elseif self._maxargs == 1 and (self._minargs == 1 or self._mincount == 1) then\r\n         return \"arg\"\r\n      else\r\n         return \"multiarg\"\r\n      end\r\n   else\r\n      if self._maxargs == 0 then\r\n         return \"counter\"\r\n      elseif self._maxargs == 1 and self._minargs == 1 then\r\n         return \"multicount\"\r\n      else\r\n         return \"twodimensional\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "if self._maxargs == 0 then\r\n         return \"flag\"\r\n      elseif self._maxargs == 1 and (self._minargs == 1 or self._mincount == 1) then\r\n         return \"arg\"\r\n      else\r\n         return \"multiarg\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "if self._maxargs == 0 then\r\n         return \"counter\"\r\n      elseif self._maxargs == 1 and self._minargs == 1 then\r\n         return \"multicount\"\r\n      else\r\n         return \"twodimensional\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function Argument:_get_argname_i(i)\r\n   local argname = self:_get_argname()\r\n\r\n   if type(argname) == \"table\" then\r\n      return argname[i]\r\n   else\r\n      return argname\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "local argname = self:_get_argname()",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "if type(argname) == \"table\" then\r\n      return argname[i]\r\n   else\r\n      return argname\r\n   end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function Argument:_get_argname()\r\n   return self._argname or (\"<\"..self._name..\">\")\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function Option:_get_argname()\r\n   return self._argname or (\"<\"..self:_get_target()..\">\")\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function Argument:_get_label()\r\n   return self._name\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function Option:_get_label()\r\n   local variants = {}\r\n   local argument_list = self:_get_argument_list()\r\n   table.insert(argument_list, 1, nil)\r\n\r\n   for _, alias in ipairs(self._aliases) do\r\n      argument_list[1] = alias\r\n      table.insert(variants, table.concat(argument_list, \" \"))\r\n   end\r\n\r\n   return table.concat(variants, \", \")\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "local variants = {}",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local argument_list = self:_get_argument_list()",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "table.insert(argument_list, 1, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "for _, alias in ipairs(self._aliases) do\r\n      argument_list[1] = alias\r\n      table.insert(variants, table.concat(argument_list, \" \"))\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 121,
    "text": "argument_list[1] = alias",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "table.insert(variants, table.concat(argument_list, \" \"))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function Command:_get_label()\r\n   return table.concat(self._aliases, \", \")\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function Argument:_get_description()\r\n   if self._default then\r\n      if self._description then\r\n         return (\"%s (default: %s)\"):format(self._description, self._default)\r\n      else\r\n         return (\"default: %s\"):format(self._default)\r\n      end\r\n   else\r\n      return self._description or \"\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "if self._default then\r\n      if self._description then\r\n         return (\"%s (default: %s)\"):format(self._description, self._default)\r\n      else\r\n         return (\"default: %s\"):format(self._default)\r\n      end\r\n   else\r\n      return self._description or \"\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "if self._description then\r\n         return (\"%s (default: %s)\"):format(self._description, self._default)\r\n      else\r\n         return (\"default: %s\"):format(self._default)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function Command:_get_description()\r\n   return self._description or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function Option:_get_usage()\r\n   local usage = self:_get_argument_list()\r\n   table.insert(usage, 1, self._name)\r\n   usage = table.concat(usage, \" \")\r\n\r\n   if self._mincount == 0 or self._default then\r\n      usage = \"[\" .. usage .. \"]\"\r\n   end\r\n\r\n   return usage\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "local usage = self:_get_argument_list()",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "table.insert(usage, 1, self._name)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "usage = table.concat(usage, \" \")",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "if self._mincount == 0 or self._default then\r\n      usage = \"[\" .. usage .. \"]\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function Option:_get_target()\r\n   if self._target then\r\n      return self._target\r\n   end\r\n\r\n   for _, alias in ipairs(self._aliases) do\r\n      if alias:sub(1, 1) == alias:sub(2, 2) then\r\n         return alias:sub(3)\r\n      end\r\n   end\r\n\r\n   return self._name:sub(2)\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "if self._target then\r\n      return self._target\r\n   end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "for _, alias in ipairs(self._aliases) do\r\n      if alias:sub(1, 1) == alias:sub(2, 2) then\r\n         return alias:sub(3)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 141,
    "text": "if alias:sub(1, 1) == alias:sub(2, 2) then\r\n         return alias:sub(3)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function Parser:_get_fullname()\r\n   local parent = self._parent\r\n   local buf = {self._name}\r\n\r\n   while parent do\r\n      table.insert(buf, 1, parent._name)\r\n      parent = parent._parent\r\n   end\r\n\r\n   return table.concat(buf, \" \")\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "local parent = self._parent",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "local buf = {self._name}",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "while parent do\r\n      table.insert(buf, 1, parent._name)\r\n      parent = parent._parent\r\n   end",
    "type": "statement:while"
  }, {
    "id": 147,
    "text": "table.insert(buf, 1, parent._name)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "parent = parent._parent",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function Parser:_update_charset(charset)\r\n   charset = charset or {}\r\n\r\n   for _, command in ipairs(self._commands) do\r\n      command:_update_charset(charset)\r\n   end\r\n\r\n   for _, option in ipairs(self._options) do\r\n      for _, alias in ipairs(option._aliases) do\r\n         charset[alias:sub(1, 1)] = true\r\n      end\r\n   end\r\n\r\n   return charset\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "charset = charset or {}",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "for _, command in ipairs(self._commands) do\r\n      command:_update_charset(charset)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 153,
    "text": "command:_update_charset(charset)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "for _, option in ipairs(self._options) do\r\n      for _, alias in ipairs(option._aliases) do\r\n         charset[alias:sub(1, 1)] = true\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 155,
    "text": "for _, alias in ipairs(option._aliases) do\r\n         charset[alias:sub(1, 1)] = true\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "charset[alias:sub(1, 1)] = true",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function Parser:argument(...)\r\n   local argument = Argument:new(...)\r\n   table.insert(self._arguments, argument)\r\n   return argument\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "local argument = Argument:new(...)",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "table.insert(self._arguments, argument)",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function Parser:option(...)\r\n   local option = Option:new(...)\r\n\r\n   if self._has_help then\r\n      table.insert(self._options, #self._options, option)\r\n   else\r\n      table.insert(self._options, option)\r\n   end\r\n\r\n   return option\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "local option = Option:new(...)",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "if self._has_help then\r\n      table.insert(self._options, #self._options, option)\r\n   else\r\n      table.insert(self._options, option)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "table.insert(self._options, #self._options, option)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "table.insert(self._options, option)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function Parser:flag(...)\r\n   return self:option():args(0)(...)\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function Parser:command(...)\r\n   local command = Command:new():add_help(true)(...)\r\n   command._parent = self\r\n   table.insert(self._commands, command)\r\n   return command\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "local command = Command:new():add_help(true)(...)",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "command._parent = self",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "table.insert(self._commands, command)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function Parser:mutex(...)\r\n   local options = {...}\r\n\r\n   for i, option in ipairs(options) do\r\n      assert(getmetatable(option) == Option, (\"bad argument #%d to 'mutex' (Option expected)\"):format(i))\r\n   end\r\n\r\n   table.insert(self._mutexes, options)\r\n   return self\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "local options = {...}",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "for i, option in ipairs(options) do\r\n      assert(getmetatable(option) == Option, (\"bad argument #%d to 'mutex' (Option expected)\"):format(i))\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 178,
    "text": "assert(getmetatable(option) == Option, (\"bad argument #%d to 'mutex' (Option expected)\"):format(i))",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "table.insert(self._mutexes, options)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function Parser:get_usage()\r\n   if self._usage then\r\n      return self._usage\r\n   end\r\n\r\n   local lines = {usage_welcome .. self:_get_fullname()}\r\n\r\n   local function add(s)\r\n      if #lines[#lines]+1+#s <= max_usage_width then\r\n         lines[#lines] = lines[#lines] .. \" \" .. s\r\n      else\r\n         lines[#lines+1] = (\" \"):rep(#usage_welcome) .. s\r\n      end\r\n   end\r\n\r\n   -- set of mentioned elements\r\n   local used = {}\r\n\r\n   for _, mutex in ipairs(self._mutexes) do\r\n      local buf = {}\r\n\r\n      for _, option in ipairs(mutex) do\r\n         table.insert(buf, option:_get_usage())\r\n         used[option] = true\r\n      end\r\n\r\n      add(\"(\" .. table.concat(buf, \" | \") .. \")\")\r\n   end\r\n\r\n   for _, elements in ipairs{self._options, self._arguments} do\r\n      for _, element in ipairs(elements) do\r\n         if not used[element] then\r\n            add(element:_get_usage())\r\n         end\r\n      end\r\n   end\r\n\r\n   if #self._commands > 0 then\r\n      if self._require_command then\r\n         add(\"<command>\")\r\n      else\r\n         add(\"[<command>]\")\r\n      end\r\n\r\n      add(\"...\")\r\n   end\r\n\r\n   return table.concat(lines, \"\\r\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "if self._usage then\r\n      return self._usage\r\n   end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "local lines = {usage_welcome .. self:_get_fullname()}",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "local function add(s)\r\n      if #lines[#lines]+1+#s <= max_usage_width then\r\n         lines[#lines] = lines[#lines] .. \" \" .. s\r\n      else\r\n         lines[#lines+1] = (\" \"):rep(#usage_welcome) .. s\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 185,
    "text": "if #lines[#lines]+1+#s <= max_usage_width then\r\n         lines[#lines] = lines[#lines] .. \" \" .. s\r\n      else\r\n         lines[#lines+1] = (\" \"):rep(#usage_welcome) .. s\r\n      end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "lines[#lines] = lines[#lines] .. \" \" .. s",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "lines[#lines+1] = (\" \"):rep(#usage_welcome) .. s",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "local used = {}",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "for _, mutex in ipairs(self._mutexes) do\r\n      local buf = {}\r\n\r\n      for _, option in ipairs(mutex) do\r\n         table.insert(buf, option:_get_usage())\r\n         used[option] = true\r\n      end\r\n\r\n      add(\"(\" .. table.concat(buf, \" | \") .. \")\")\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 190,
    "text": "for _, option in ipairs(mutex) do\r\n         table.insert(buf, option:_get_usage())\r\n         used[option] = true\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 191,
    "text": "table.insert(buf, option:_get_usage())",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "used[option] = true",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "add(\"(\" .. table.concat(buf, \" | \") .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "for _, elements in ipairs{self._options, self._arguments} do\r\n      for _, element in ipairs(elements) do\r\n         if not used[element] then\r\n            add(element:_get_usage())\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 195,
    "text": "for _, element in ipairs(elements) do\r\n         if not used[element] then\r\n            add(element:_get_usage())\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 196,
    "text": "if not used[element] then\r\n            add(element:_get_usage())\r\n         end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "add(element:_get_usage())",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "if #self._commands > 0 then\r\n      if self._require_command then\r\n         add(\"<command>\")\r\n      else\r\n         add(\"[<command>]\")\r\n      end\r\n\r\n      add(\"...\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "if self._require_command then\r\n         add(\"<command>\")\r\n      else\r\n         add(\"[<command>]\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "add(\"<command>\")",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "add(\"[<command>]\")",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "add(\"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 204,
    "text": "local function add(s)\r\n      if #lines[#lines]+1+#s <= max_usage_width then\r\n         lines[#lines] = lines[#lines] .. \" \" .. s\r\n      else\r\n         lines[#lines+1] = (\" \"):rep(#usage_welcome) .. s\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "local function make_two_columns(s1, s2)\r\n   if s2 == \"\" then\r\n      return margin .. s1\r\n   end\r\n\r\n   s2 = s2:gsub(\"[\\r\\n][\\r\\n]?\", function(sub)\r\n      if #sub == 1 or sub == \"\\r\\n\" then\r\n         return \"\\r\\n\" .. margin2\r\n      else\r\n         return \"\\r\\n\\r\\n\" .. margin2\r\n      end\r\n   end)\r\n\r\n   if #s1 < (margin_len2-margin_len) then\r\n      return margin .. s1 .. (\" \"):rep(margin_len2-margin_len-#s1) .. s2\r\n   else\r\n      return margin .. s1 .. \"\\r\\n\" .. margin2 .. s2\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 207,
    "text": "if s2 == \"\" then\r\n      return margin .. s1\r\n   end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "s2 = s2:gsub(\"[\\r\\n][\\r\\n]?\", function(sub)\r\n      if #sub == 1 or sub == \"\\r\\n\" then\r\n         return \"\\r\\n\" .. margin2\r\n      else\r\n         return \"\\r\\n\\r\\n\" .. margin2\r\n      end\r\n   end)",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "if #sub == 1 or sub == \"\\r\\n\" then\r\n         return \"\\r\\n\" .. margin2\r\n      else\r\n         return \"\\r\\n\\r\\n\" .. margin2\r\n      end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "if #s1 < (margin_len2-margin_len) then\r\n      return margin .. s1 .. (\" \"):rep(margin_len2-margin_len-#s1) .. s2\r\n   else\r\n      return margin .. s1 .. \"\\r\\n\" .. margin2 .. s2\r\n   end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function Parser:get_help()\r\n   if self._help then\r\n      return self._help\r\n   end\r\n\r\n   local blocks = {self:get_usage()}\r\n   \r\n   if self._description then\r\n      table.insert(blocks, self._description)\r\n   end\r\n\r\n   local labels = {\"Arguments: \", \"Options: \", \"Commands: \"}\r\n\r\n   for i, elements in ipairs{self._arguments, self._options, self._commands} do\r\n      if #elements > 0 then\r\n         local buf = {labels[i]}\r\n\r\n         for _, element in ipairs(elements) do\r\n            table.insert(buf, make_two_columns(element:_get_label(), element:_get_description()))\r\n         end\r\n\r\n         table.insert(blocks, table.concat(buf, \"\\r\\n\"))\r\n      end\r\n   end\r\n\r\n   if self._epilog then\r\n      table.insert(blocks, self._epilog)\r\n   end\r\n\r\n   return table.concat(blocks, \"\\r\\n\\r\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 213,
    "text": "if self._help then\r\n      return self._help\r\n   end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "local blocks = {self:get_usage()}",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "if self._description then\r\n      table.insert(blocks, self._description)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 216,
    "text": "table.insert(blocks, self._description)",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "local labels = {\"Arguments: \", \"Options: \", \"Commands: \"}",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "for i, elements in ipairs{self._arguments, self._options, self._commands} do\r\n      if #elements > 0 then\r\n         local buf = {labels[i]}\r\n\r\n         for _, element in ipairs(elements) do\r\n            table.insert(buf, make_two_columns(element:_get_label(), element:_get_description()))\r\n         end\r\n\r\n         table.insert(blocks, table.concat(buf, \"\\r\\n\"))\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 219,
    "text": "if #elements > 0 then\r\n         local buf = {labels[i]}\r\n\r\n         for _, element in ipairs(elements) do\r\n            table.insert(buf, make_two_columns(element:_get_label(), element:_get_description()))\r\n         end\r\n\r\n         table.insert(blocks, table.concat(buf, \"\\r\\n\"))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "local buf = {labels[i]}",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "for _, element in ipairs(elements) do\r\n            table.insert(buf, make_two_columns(element:_get_label(), element:_get_description()))\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 222,
    "text": "table.insert(buf, make_two_columns(element:_get_label(), element:_get_description()))",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "table.insert(blocks, table.concat(buf, \"\\r\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "if self._epilog then\r\n      table.insert(blocks, self._epilog)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "table.insert(blocks, self._epilog)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "local function get_tip(context, wrong_name)\r\n   local context_pool = {}\r\n   local possible_name\r\n   local possible_names = {}\r\n\r\n   for name in pairs(context) do\r\n      for i=1, #name do\r\n         possible_name = name:sub(1, i-1) .. name:sub(i+1)\r\n\r\n         if not context_pool[possible_name] then\r\n            context_pool[possible_name] = {}\r\n         end\r\n\r\n         table.insert(context_pool[possible_name], name)\r\n      end\r\n   end\r\n\r\n   for i=1, #wrong_name+1 do\r\n      possible_name = wrong_name:sub(1, i-1) .. wrong_name:sub(i+1)\r\n\r\n      if context[possible_name] then\r\n         possible_names[possible_name] = true\r\n      elseif context_pool[possible_name] then\r\n         for _, name in ipairs(context_pool[possible_name]) do\r\n            possible_names[name] = true\r\n         end\r\n      end\r\n   end\r\n\r\n   local first = next(possible_names)\r\n   if first then\r\n      if next(possible_names, first) then\r\n         local possible_names_arr = {}\r\n\r\n         for name in pairs(possible_names) do\r\n            table.insert(possible_names_arr, \"'\" .. name .. \"'\")\r\n         end\r\n\r\n         table.sort(possible_names_arr)\r\n         return \"\\r\\nDid you mean one of these: \" .. table.concat(possible_names_arr, \" \") .. \"?\"\r\n      else\r\n         return \"\\r\\nDid you mean '\" .. first .. \"'?\"\r\n      end\r\n   else\r\n      return \"\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "local context_pool = {}",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "local possible_name",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "local possible_names = {}",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "for name in pairs(context) do\r\n      for i=1, #name do\r\n         possible_name = name:sub(1, i-1) .. name:sub(i+1)\r\n\r\n         if not context_pool[possible_name] then\r\n            context_pool[possible_name] = {}\r\n         end\r\n\r\n         table.insert(context_pool[possible_name], name)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 232,
    "text": "for i=1, #name do\r\n         possible_name = name:sub(1, i-1) .. name:sub(i+1)\r\n\r\n         if not context_pool[possible_name] then\r\n            context_pool[possible_name] = {}\r\n         end\r\n\r\n         table.insert(context_pool[possible_name], name)\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 233,
    "text": "possible_name = name:sub(1, i-1) .. name:sub(i+1)",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "if not context_pool[possible_name] then\r\n            context_pool[possible_name] = {}\r\n         end",
    "type": "statement:if"
  }, {
    "id": 235,
    "text": "context_pool[possible_name] = {}",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "table.insert(context_pool[possible_name], name)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "for i=1, #wrong_name+1 do\r\n      possible_name = wrong_name:sub(1, i-1) .. wrong_name:sub(i+1)\r\n\r\n      if context[possible_name] then\r\n         possible_names[possible_name] = true\r\n      elseif context_pool[possible_name] then\r\n         for _, name in ipairs(context_pool[possible_name]) do\r\n            possible_names[name] = true\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 238,
    "text": "possible_name = wrong_name:sub(1, i-1) .. wrong_name:sub(i+1)",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "if context[possible_name] then\r\n         possible_names[possible_name] = true\r\n      elseif context_pool[possible_name] then\r\n         for _, name in ipairs(context_pool[possible_name]) do\r\n            possible_names[name] = true\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 240,
    "text": "possible_names[possible_name] = true",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "for _, name in ipairs(context_pool[possible_name]) do\r\n            possible_names[name] = true\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 242,
    "text": "possible_names[name] = true",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "local first = next(possible_names)",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "if first then\r\n      if next(possible_names, first) then\r\n         local possible_names_arr = {}\r\n\r\n         for name in pairs(possible_names) do\r\n            table.insert(possible_names_arr, \"'\" .. name .. \"'\")\r\n         end\r\n\r\n         table.sort(possible_names_arr)\r\n         return \"\\r\\nDid you mean one of these: \" .. table.concat(possible_names_arr, \" \") .. \"?\"\r\n      else\r\n         return \"\\r\\nDid you mean '\" .. first .. \"'?\"\r\n      end\r\n   else\r\n      return \"\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "if next(possible_names, first) then\r\n         local possible_names_arr = {}\r\n\r\n         for name in pairs(possible_names) do\r\n            table.insert(possible_names_arr, \"'\" .. name .. \"'\")\r\n         end\r\n\r\n         table.sort(possible_names_arr)\r\n         return \"\\r\\nDid you mean one of these: \" .. table.concat(possible_names_arr, \" \") .. \"?\"\r\n      else\r\n         return \"\\r\\nDid you mean '\" .. first .. \"'?\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "local possible_names_arr = {}",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "for name in pairs(possible_names) do\r\n            table.insert(possible_names_arr, \"'\" .. name .. \"'\")\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 248,
    "text": "table.insert(possible_names_arr, \"'\" .. name .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "table.sort(possible_names_arr)",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "local function plural(x)\r\n   if x == 1 then\r\n      return \"\"\r\n   end\r\n\r\n   return \"s\"\r\nend",
    "type": "function"
  }, {
    "id": 252,
    "text": "if x == 1 then\r\n      return \"\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "function Parser:_parse(args, errhandler)\r\n   args = args or default_cmdline\r\n   local parser\r\n   local charset\r\n   local options = {}\r\n   local arguments = {}\r\n   local commands\r\n   local option_mutexes = {}\r\n   local used_mutexes = {}\r\n   local opt_context = {}\r\n   local com_context\r\n   local result = {}\r\n   local invocations = {}\r\n   local passed = {}\r\n   local cur_option\r\n   local cur_arg_i = 1\r\n   local cur_arg\r\n   local targets = {}\r\n\r\n   local function error_(fmt, ...)\r\n      return errhandler(parser, fmt:format(...))\r\n   end\r\n\r\n   local function assert_(assertion, ...)\r\n      return assertion or error_(...)\r\n   end\r\n\r\n   local function convert(element, data)\r\n      if element._convert then\r\n         local ok, err\r\n\r\n         if type(element._convert) == \"function\" then\r\n            ok, err = element._convert(data)\r\n         else\r\n            ok, err = element._convert[data]\r\n         end\r\n\r\n         assert_(ok ~= nil, \"%s\", err or \"malformed argument '\" .. data .. \"'\")\r\n         data = ok\r\n      end\r\n\r\n      return data\r\n   end\r\n\r\n   local invoke, pass, close\r\n\r\n   function invoke(element)\r\n      local overwrite = false\r\n\r\n      if invocations[element] == element._maxcount then\r\n         if element._overwrite then\r\n            overwrite = true\r\n         else\r\n            error_(\"option '%s' must be used at most %d time%s\", element._name, element._maxcount, plural(element._maxcount))\r\n         end\r\n      else\r\n         invocations[element] = invocations[element]+1\r\n      end\r\n\r\n      passed[element] = 0\r\n      local type_ = element:_get_type()\r\n      local target = targets[element]\r\n\r\n      if type_ == \"flag\" then\r\n         result[target] = true\r\n      elseif type_ == \"multiarg\" then\r\n         result[target] = {}\r\n      elseif type_ == \"counter\" then\r\n         if not overwrite then\r\n            result[target] = result[target]+1\r\n         end\r\n      elseif type_ == \"multicount\" then\r\n         if overwrite then\r\n            table.remove(result[target], 1)\r\n         end\r\n      elseif type_ == \"twodimensional\" then\r\n         table.insert(result[target], {})\r\n\r\n         if overwrite then\r\n            table.remove(result[target], 1)\r\n         end\r\n      end\r\n\r\n      if element._maxargs == 0 then\r\n         close(element)\r\n      end\r\n   end\r\n\r\n   function pass(element, data)\r\n      passed[element] = passed[element]+1\r\n      data = convert(element, data)\r\n      local type_ = element:_get_type()\r\n      local target = targets[element]\r\n\r\n      if type_ == \"arg\" then\r\n         result[target] = data\r\n      elseif type_ == \"multiarg\" or type_ == \"multicount\" then\r\n         table.insert(result[target], data)\r\n      elseif type_ == \"twodimensional\" then\r\n         table.insert(result[target][#result[target]], data)\r\n      end\r\n\r\n      if passed[element] == element._maxargs then\r\n         close(element)\r\n      end\r\n   end\r\n\r\n   local function complete_invocation(element)\r\n      while passed[element] < element._minargs do\r\n         pass(element, element._default)\r\n      end\r\n   end\r\n\r\n   function close(element)\r\n      if passed[element] < element._minargs then\r\n         if element._default and element._defmode:find \"a\" then\r\n            complete_invocation(element)\r\n         else\r\n            error_(\"too few arguments\")\r\n         end\r\n      else\r\n         if element == cur_option then\r\n            cur_option = nil\r\n         elseif element == cur_arg then\r\n            cur_arg_i = cur_arg_i+1\r\n            cur_arg = arguments[cur_arg_i]\r\n         end\r\n      end\r\n   end\r\n\r\n   local function switch(p)\r\n      parser = p\r\n\r\n      for _, option in ipairs(parser._options) do\r\n         table.insert(options, option)\r\n\r\n         for _, alias in ipairs(option._aliases) do\r\n            opt_context[alias] = option\r\n         end\r\n\r\n         local type_ = option:_get_type()\r\n         targets[option] = option:_get_target()\r\n\r\n         if type_ == \"counter\" then\r\n            result[targets[option]] = 0\r\n         elseif type_ == \"multicount\" or type_ == \"twodimensional\" then\r\n            result[targets[option]] = {}\r\n         end\r\n\r\n         invocations[option] = 0\r\n      end\r\n\r\n      for _, mutex in ipairs(parser._mutexes) do\r\n         for _, option in ipairs(mutex) do\r\n            if not option_mutexes[option] then\r\n               option_mutexes[option] = {mutex}\r\n            else\r\n               table.insert(option_mutexes[option], mutex)\r\n            end\r\n         end\r\n      end\r\n\r\n      for _, argument in ipairs(parser._arguments) do\r\n         table.insert(arguments, argument)\r\n         invocations[argument] = 0\r\n         targets[argument] = argument._target or argument._name\r\n         invoke(argument)\r\n      end\r\n\r\n      cur_arg = arguments[cur_arg_i]\r\n      commands = parser._commands\r\n      com_context = {}\r\n\r\n      for _, command in ipairs(commands) do\r\n         targets[command] = command._target or command._name\r\n\r\n         for _, alias in ipairs(command._aliases) do\r\n            com_context[alias] = command\r\n         end\r\n      end\r\n   end\r\n\r\n   local function get_option(name)\r\n      return assert_(opt_context[name], \"unknown option '%s'%s\", name, get_tip(opt_context, name))\r\n   end\r\n\r\n   local function do_action(element)\r\n      if element._action then\r\n         element._action()\r\n      end\r\n   end\r\n\r\n   local function handle_argument(data)\r\n      if cur_option then\r\n         pass(cur_option, data)\r\n      elseif cur_arg then\r\n         pass(cur_arg, data)\r\n      else\r\n         local com = com_context[data]\r\n\r\n         if not com then\r\n            if #commands > 0 then\r\n               error_(\"unknown command '%s'%s\", data, get_tip(com_context, data))\r\n            else\r\n               error_(\"too many arguments\")\r\n            end\r\n         else\r\n            result[targets[com]] = true\r\n            do_action(com)\r\n            switch(com)\r\n         end\r\n      end\r\n   end\r\n\r\n   local function handle_option(data)\r\n      if cur_option then\r\n         close(cur_option)\r\n      end\r\n\r\n      cur_option = opt_context[data]\r\n\r\n      if option_mutexes[cur_option] then\r\n         for _, mutex in ipairs(option_mutexes[cur_option]) do\r\n            if used_mutexes[mutex] and used_mutexes[mutex] ~= cur_option then\r\n               error_(\"option '%s' can not be used together with option '%s'\", data, used_mutexes[mutex]._name)\r\n            else\r\n               used_mutexes[mutex] = cur_option\r\n            end\r\n         end\r\n      end\r\n\r\n      do_action(cur_option)\r\n      invoke(cur_option)\r\n   end\r\n\r\n   local function mainloop()\r\n      local handle_options = true\r\n\r\n      for _, data in ipairs(args) do\r\n         local plain = true\r\n         local first, name, option\r\n\r\n         if handle_options then\r\n            first = data:sub(1, 1)\r\n            if charset[first] then\r\n               if #data > 1 then\r\n                  plain = false\r\n                  if data:sub(2, 2) == first then\r\n                     if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end\r\n                  else\r\n                     for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end\r\n\r\n         if plain then\r\n            handle_argument(data)\r\n         end\r\n      end\r\n   end\r\n\r\n   switch(self)\r\n   charset = parser:_update_charset()\r\n   mainloop()\r\n\r\n   if cur_option then\r\n      close(cur_option)\r\n   end\r\n\r\n   while cur_arg do\r\n      if passed[cur_arg] == 0 and cur_arg._default and cur_arg._defmode:find \"u\" then\r\n         complete_invocation(cur_arg)\r\n      else\r\n         close(cur_arg)\r\n      end\r\n   end\r\n\r\n   if parser._require_command and #commands > 0 then\r\n      error_(\"a command is required\")\r\n   end\r\n\r\n   for _, option in ipairs(options) do\r\n      if invocations[option] == 0 then\r\n         if option._default and option._defmode:find \"u\" then\r\n            invoke(option)\r\n            complete_invocation(option)\r\n            close(option)\r\n         end\r\n      end\r\n\r\n      if invocations[option] < option._mincount then\r\n         if option._default and option._defmode:find \"a\" then\r\n            while invocations[option] < option._mincount do\r\n               invoke(option)\r\n               close(option)\r\n            end\r\n         else\r\n            error_(\"option '%s' must be used at least %d time%s\", option._name, option._mincount, plural(option._mincount))\r\n         end\r\n      end\r\n   end\r\n\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 255,
    "text": "args = args or default_cmdline",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "local parser",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "local charset",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "local options = {}",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "local arguments = {}",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "local commands",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "local option_mutexes = {}",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "local used_mutexes = {}",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "local opt_context = {}",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "local com_context",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "local invocations = {}",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "local passed = {}",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "local cur_option",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "local cur_arg_i = 1",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "local cur_arg",
    "type": "statement:localassign"
  }, {
    "id": 271,
    "text": "local targets = {}",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "local function error_(fmt, ...)\r\n      return errhandler(parser, fmt:format(...))\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 273,
    "text": "local function assert_(assertion, ...)\r\n      return assertion or error_(...)\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 274,
    "text": "local function convert(element, data)\r\n      if element._convert then\r\n         local ok, err\r\n\r\n         if type(element._convert) == \"function\" then\r\n            ok, err = element._convert(data)\r\n         else\r\n            ok, err = element._convert[data]\r\n         end\r\n\r\n         assert_(ok ~= nil, \"%s\", err or \"malformed argument '\" .. data .. \"'\")\r\n         data = ok\r\n      end\r\n\r\n      return data\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 275,
    "text": "if element._convert then\r\n         local ok, err\r\n\r\n         if type(element._convert) == \"function\" then\r\n            ok, err = element._convert(data)\r\n         else\r\n            ok, err = element._convert[data]\r\n         end\r\n\r\n         assert_(ok ~= nil, \"%s\", err or \"malformed argument '\" .. data .. \"'\")\r\n         data = ok\r\n      end",
    "type": "statement:if"
  }, {
    "id": 276,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "if type(element._convert) == \"function\" then\r\n            ok, err = element._convert(data)\r\n         else\r\n            ok, err = element._convert[data]\r\n         end",
    "type": "statement:if"
  }, {
    "id": 278,
    "text": "ok, err = element._convert(data)",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "ok, err = element._convert[data]",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "assert_(ok ~= nil, \"%s\", err or \"malformed argument '\" .. data .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "data = ok",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "local invoke, pass, close",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "function invoke(element)\r\n      local overwrite = false\r\n\r\n      if invocations[element] == element._maxcount then\r\n         if element._overwrite then\r\n            overwrite = true\r\n         else\r\n            error_(\"option '%s' must be used at most %d time%s\", element._name, element._maxcount, plural(element._maxcount))\r\n         end\r\n      else\r\n         invocations[element] = invocations[element]+1\r\n      end\r\n\r\n      passed[element] = 0\r\n      local type_ = element:_get_type()\r\n      local target = targets[element]\r\n\r\n      if type_ == \"flag\" then\r\n         result[target] = true\r\n      elseif type_ == \"multiarg\" then\r\n         result[target] = {}\r\n      elseif type_ == \"counter\" then\r\n         if not overwrite then\r\n            result[target] = result[target]+1\r\n         end\r\n      elseif type_ == \"multicount\" then\r\n         if overwrite then\r\n            table.remove(result[target], 1)\r\n         end\r\n      elseif type_ == \"twodimensional\" then\r\n         table.insert(result[target], {})\r\n\r\n         if overwrite then\r\n            table.remove(result[target], 1)\r\n         end\r\n      end\r\n\r\n      if element._maxargs == 0 then\r\n         close(element)\r\n      end\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 284,
    "text": "local overwrite = false",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "if invocations[element] == element._maxcount then\r\n         if element._overwrite then\r\n            overwrite = true\r\n         else\r\n            error_(\"option '%s' must be used at most %d time%s\", element._name, element._maxcount, plural(element._maxcount))\r\n         end\r\n      else\r\n         invocations[element] = invocations[element]+1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "if element._overwrite then\r\n            overwrite = true\r\n         else\r\n            error_(\"option '%s' must be used at most %d time%s\", element._name, element._maxcount, plural(element._maxcount))\r\n         end",
    "type": "statement:if"
  }, {
    "id": 287,
    "text": "overwrite = true",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "error_(\"option '%s' must be used at most %d time%s\", element._name, element._maxcount, plural(element._maxcount))",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "invocations[element] = invocations[element]+1",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "passed[element] = 0",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "local type_ = element:_get_type()",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "local target = targets[element]",
    "type": "statement:localassign"
  }, {
    "id": 293,
    "text": "if type_ == \"flag\" then\r\n         result[target] = true\r\n      elseif type_ == \"multiarg\" then\r\n         result[target] = {}\r\n      elseif type_ == \"counter\" then\r\n         if not overwrite then\r\n            result[target] = result[target]+1\r\n         end\r\n      elseif type_ == \"multicount\" then\r\n         if overwrite then\r\n            table.remove(result[target], 1)\r\n         end\r\n      elseif type_ == \"twodimensional\" then\r\n         table.insert(result[target], {})\r\n\r\n         if overwrite then\r\n            table.remove(result[target], 1)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 294,
    "text": "result[target] = true",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "result[target] = {}",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "if not overwrite then\r\n            result[target] = result[target]+1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "result[target] = result[target]+1",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "if overwrite then\r\n            table.remove(result[target], 1)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 299,
    "text": "table.remove(result[target], 1)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "table.insert(result[target], {})",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "if element._maxargs == 0 then\r\n         close(element)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 302,
    "text": "close(element)",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "function pass(element, data)\r\n      passed[element] = passed[element]+1\r\n      data = convert(element, data)\r\n      local type_ = element:_get_type()\r\n      local target = targets[element]\r\n\r\n      if type_ == \"arg\" then\r\n         result[target] = data\r\n      elseif type_ == \"multiarg\" or type_ == \"multicount\" then\r\n         table.insert(result[target], data)\r\n      elseif type_ == \"twodimensional\" then\r\n         table.insert(result[target][#result[target]], data)\r\n      end\r\n\r\n      if passed[element] == element._maxargs then\r\n         close(element)\r\n      end\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 304,
    "text": "passed[element] = passed[element]+1",
    "type": "statement:assign"
  }, {
    "id": 305,
    "text": "data = convert(element, data)",
    "type": "statement:assign"
  }, {
    "id": 306,
    "text": "if type_ == \"arg\" then\r\n         result[target] = data\r\n      elseif type_ == \"multiarg\" or type_ == \"multicount\" then\r\n         table.insert(result[target], data)\r\n      elseif type_ == \"twodimensional\" then\r\n         table.insert(result[target][#result[target]], data)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 307,
    "text": "result[target] = data",
    "type": "statement:assign"
  }, {
    "id": 308,
    "text": "table.insert(result[target], data)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "table.insert(result[target][#result[target]], data)",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "if passed[element] == element._maxargs then\r\n         close(element)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "local function complete_invocation(element)\r\n      while passed[element] < element._minargs do\r\n         pass(element, element._default)\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 312,
    "text": "while passed[element] < element._minargs do\r\n         pass(element, element._default)\r\n      end",
    "type": "statement:while"
  }, {
    "id": 313,
    "text": "pass(element, element._default)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "function close(element)\r\n      if passed[element] < element._minargs then\r\n         if element._default and element._defmode:find \"a\" then\r\n            complete_invocation(element)\r\n         else\r\n            error_(\"too few arguments\")\r\n         end\r\n      else\r\n         if element == cur_option then\r\n            cur_option = nil\r\n         elseif element == cur_arg then\r\n            cur_arg_i = cur_arg_i+1\r\n            cur_arg = arguments[cur_arg_i]\r\n         end\r\n      end\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 315,
    "text": "if passed[element] < element._minargs then\r\n         if element._default and element._defmode:find \"a\" then\r\n            complete_invocation(element)\r\n         else\r\n            error_(\"too few arguments\")\r\n         end\r\n      else\r\n         if element == cur_option then\r\n            cur_option = nil\r\n         elseif element == cur_arg then\r\n            cur_arg_i = cur_arg_i+1\r\n            cur_arg = arguments[cur_arg_i]\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 316,
    "text": "if element._default and element._defmode:find \"a\" then\r\n            complete_invocation(element)\r\n         else\r\n            error_(\"too few arguments\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 317,
    "text": "complete_invocation(element)",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "error_(\"too few arguments\")",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "if element == cur_option then\r\n            cur_option = nil\r\n         elseif element == cur_arg then\r\n            cur_arg_i = cur_arg_i+1\r\n            cur_arg = arguments[cur_arg_i]\r\n         end",
    "type": "statement:if"
  }, {
    "id": 320,
    "text": "cur_option = nil",
    "type": "statement:assign"
  }, {
    "id": 321,
    "text": "cur_arg_i = cur_arg_i+1",
    "type": "statement:assign"
  }, {
    "id": 322,
    "text": "cur_arg = arguments[cur_arg_i]",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "local function switch(p)\r\n      parser = p\r\n\r\n      for _, option in ipairs(parser._options) do\r\n         table.insert(options, option)\r\n\r\n         for _, alias in ipairs(option._aliases) do\r\n            opt_context[alias] = option\r\n         end\r\n\r\n         local type_ = option:_get_type()\r\n         targets[option] = option:_get_target()\r\n\r\n         if type_ == \"counter\" then\r\n            result[targets[option]] = 0\r\n         elseif type_ == \"multicount\" or type_ == \"twodimensional\" then\r\n            result[targets[option]] = {}\r\n         end\r\n\r\n         invocations[option] = 0\r\n      end\r\n\r\n      for _, mutex in ipairs(parser._mutexes) do\r\n         for _, option in ipairs(mutex) do\r\n            if not option_mutexes[option] then\r\n               option_mutexes[option] = {mutex}\r\n            else\r\n               table.insert(option_mutexes[option], mutex)\r\n            end\r\n         end\r\n      end\r\n\r\n      for _, argument in ipairs(parser._arguments) do\r\n         table.insert(arguments, argument)\r\n         invocations[argument] = 0\r\n         targets[argument] = argument._target or argument._name\r\n         invoke(argument)\r\n      end\r\n\r\n      cur_arg = arguments[cur_arg_i]\r\n      commands = parser._commands\r\n      com_context = {}\r\n\r\n      for _, command in ipairs(commands) do\r\n         targets[command] = command._target or command._name\r\n\r\n         for _, alias in ipairs(command._aliases) do\r\n            com_context[alias] = command\r\n         end\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 324,
    "text": "parser = p",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "for _, option in ipairs(parser._options) do\r\n         table.insert(options, option)\r\n\r\n         for _, alias in ipairs(option._aliases) do\r\n            opt_context[alias] = option\r\n         end\r\n\r\n         local type_ = option:_get_type()\r\n         targets[option] = option:_get_target()\r\n\r\n         if type_ == \"counter\" then\r\n            result[targets[option]] = 0\r\n         elseif type_ == \"multicount\" or type_ == \"twodimensional\" then\r\n            result[targets[option]] = {}\r\n         end\r\n\r\n         invocations[option] = 0\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 326,
    "text": "table.insert(options, option)",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "for _, alias in ipairs(option._aliases) do\r\n            opt_context[alias] = option\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 328,
    "text": "opt_context[alias] = option",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "local type_ = option:_get_type()",
    "type": "statement:localassign"
  }, {
    "id": 330,
    "text": "targets[option] = option:_get_target()",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "if type_ == \"counter\" then\r\n            result[targets[option]] = 0\r\n         elseif type_ == \"multicount\" or type_ == \"twodimensional\" then\r\n            result[targets[option]] = {}\r\n         end",
    "type": "statement:if"
  }, {
    "id": 332,
    "text": "result[targets[option]] = 0",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "result[targets[option]] = {}",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "invocations[option] = 0",
    "type": "statement:assign"
  }, {
    "id": 335,
    "text": "for _, mutex in ipairs(parser._mutexes) do\r\n         for _, option in ipairs(mutex) do\r\n            if not option_mutexes[option] then\r\n               option_mutexes[option] = {mutex}\r\n            else\r\n               table.insert(option_mutexes[option], mutex)\r\n            end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 336,
    "text": "for _, option in ipairs(mutex) do\r\n            if not option_mutexes[option] then\r\n               option_mutexes[option] = {mutex}\r\n            else\r\n               table.insert(option_mutexes[option], mutex)\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 337,
    "text": "if not option_mutexes[option] then\r\n               option_mutexes[option] = {mutex}\r\n            else\r\n               table.insert(option_mutexes[option], mutex)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 338,
    "text": "option_mutexes[option] = {mutex}",
    "type": "statement:assign"
  }, {
    "id": 339,
    "text": "table.insert(option_mutexes[option], mutex)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "for _, argument in ipairs(parser._arguments) do\r\n         table.insert(arguments, argument)\r\n         invocations[argument] = 0\r\n         targets[argument] = argument._target or argument._name\r\n         invoke(argument)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 341,
    "text": "table.insert(arguments, argument)",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "invocations[argument] = 0",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "targets[argument] = argument._target or argument._name",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "invoke(argument)",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "commands = parser._commands",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "com_context = {}",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "for _, command in ipairs(commands) do\r\n         targets[command] = command._target or command._name\r\n\r\n         for _, alias in ipairs(command._aliases) do\r\n            com_context[alias] = command\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 348,
    "text": "targets[command] = command._target or command._name",
    "type": "statement:assign"
  }, {
    "id": 349,
    "text": "for _, alias in ipairs(command._aliases) do\r\n            com_context[alias] = command\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 350,
    "text": "com_context[alias] = command",
    "type": "statement:assign"
  }, {
    "id": 351,
    "text": "local function get_option(name)\r\n      return assert_(opt_context[name], \"unknown option '%s'%s\", name, get_tip(opt_context, name))\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 352,
    "text": "local function do_action(element)\r\n      if element._action then\r\n         element._action()\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 353,
    "text": "if element._action then\r\n         element._action()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 354,
    "text": "element._action()",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "local function handle_argument(data)\r\n      if cur_option then\r\n         pass(cur_option, data)\r\n      elseif cur_arg then\r\n         pass(cur_arg, data)\r\n      else\r\n         local com = com_context[data]\r\n\r\n         if not com then\r\n            if #commands > 0 then\r\n               error_(\"unknown command '%s'%s\", data, get_tip(com_context, data))\r\n            else\r\n               error_(\"too many arguments\")\r\n            end\r\n         else\r\n            result[targets[com]] = true\r\n            do_action(com)\r\n            switch(com)\r\n         end\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 356,
    "text": "if cur_option then\r\n         pass(cur_option, data)\r\n      elseif cur_arg then\r\n         pass(cur_arg, data)\r\n      else\r\n         local com = com_context[data]\r\n\r\n         if not com then\r\n            if #commands > 0 then\r\n               error_(\"unknown command '%s'%s\", data, get_tip(com_context, data))\r\n            else\r\n               error_(\"too many arguments\")\r\n            end\r\n         else\r\n            result[targets[com]] = true\r\n            do_action(com)\r\n            switch(com)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 357,
    "text": "pass(cur_option, data)",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "pass(cur_arg, data)",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "local com = com_context[data]",
    "type": "statement:localassign"
  }, {
    "id": 360,
    "text": "if not com then\r\n            if #commands > 0 then\r\n               error_(\"unknown command '%s'%s\", data, get_tip(com_context, data))\r\n            else\r\n               error_(\"too many arguments\")\r\n            end\r\n         else\r\n            result[targets[com]] = true\r\n            do_action(com)\r\n            switch(com)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 361,
    "text": "if #commands > 0 then\r\n               error_(\"unknown command '%s'%s\", data, get_tip(com_context, data))\r\n            else\r\n               error_(\"too many arguments\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 362,
    "text": "error_(\"unknown command '%s'%s\", data, get_tip(com_context, data))",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "error_(\"too many arguments\")",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "result[targets[com]] = true",
    "type": "statement:assign"
  }, {
    "id": 365,
    "text": "do_action(com)",
    "type": "statement:functioncall"
  }, {
    "id": 366,
    "text": "switch(com)",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "local function handle_option(data)\r\n      if cur_option then\r\n         close(cur_option)\r\n      end\r\n\r\n      cur_option = opt_context[data]\r\n\r\n      if option_mutexes[cur_option] then\r\n         for _, mutex in ipairs(option_mutexes[cur_option]) do\r\n            if used_mutexes[mutex] and used_mutexes[mutex] ~= cur_option then\r\n               error_(\"option '%s' can not be used together with option '%s'\", data, used_mutexes[mutex]._name)\r\n            else\r\n               used_mutexes[mutex] = cur_option\r\n            end\r\n         end\r\n      end\r\n\r\n      do_action(cur_option)\r\n      invoke(cur_option)\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 368,
    "text": "if cur_option then\r\n         close(cur_option)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 369,
    "text": "close(cur_option)",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "cur_option = opt_context[data]",
    "type": "statement:assign"
  }, {
    "id": 371,
    "text": "if option_mutexes[cur_option] then\r\n         for _, mutex in ipairs(option_mutexes[cur_option]) do\r\n            if used_mutexes[mutex] and used_mutexes[mutex] ~= cur_option then\r\n               error_(\"option '%s' can not be used together with option '%s'\", data, used_mutexes[mutex]._name)\r\n            else\r\n               used_mutexes[mutex] = cur_option\r\n            end\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 372,
    "text": "for _, mutex in ipairs(option_mutexes[cur_option]) do\r\n            if used_mutexes[mutex] and used_mutexes[mutex] ~= cur_option then\r\n               error_(\"option '%s' can not be used together with option '%s'\", data, used_mutexes[mutex]._name)\r\n            else\r\n               used_mutexes[mutex] = cur_option\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 373,
    "text": "if used_mutexes[mutex] and used_mutexes[mutex] ~= cur_option then\r\n               error_(\"option '%s' can not be used together with option '%s'\", data, used_mutexes[mutex]._name)\r\n            else\r\n               used_mutexes[mutex] = cur_option\r\n            end",
    "type": "statement:if"
  }, {
    "id": 374,
    "text": "error_(\"option '%s' can not be used together with option '%s'\", data, used_mutexes[mutex]._name)",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "used_mutexes[mutex] = cur_option",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "do_action(cur_option)",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "invoke(cur_option)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "local function mainloop()\r\n      local handle_options = true\r\n\r\n      for _, data in ipairs(args) do\r\n         local plain = true\r\n         local first, name, option\r\n\r\n         if handle_options then\r\n            first = data:sub(1, 1)\r\n            if charset[first] then\r\n               if #data > 1 then\r\n                  plain = false\r\n                  if data:sub(2, 2) == first then\r\n                     if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end\r\n                  else\r\n                     for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end\r\n\r\n         if plain then\r\n            handle_argument(data)\r\n         end\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 379,
    "text": "local handle_options = true",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "for _, data in ipairs(args) do\r\n         local plain = true\r\n         local first, name, option\r\n\r\n         if handle_options then\r\n            first = data:sub(1, 1)\r\n            if charset[first] then\r\n               if #data > 1 then\r\n                  plain = false\r\n                  if data:sub(2, 2) == first then\r\n                     if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end\r\n                  else\r\n                     for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end\r\n\r\n         if plain then\r\n            handle_argument(data)\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 381,
    "text": "local plain = true",
    "type": "statement:localassign"
  }, {
    "id": 382,
    "text": "local first, name, option",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "if handle_options then\r\n            first = data:sub(1, 1)\r\n            if charset[first] then\r\n               if #data > 1 then\r\n                  plain = false\r\n                  if data:sub(2, 2) == first then\r\n                     if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end\r\n                  else\r\n                     for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 384,
    "text": "first = data:sub(1, 1)",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "if charset[first] then\r\n               if #data > 1 then\r\n                  plain = false\r\n                  if data:sub(2, 2) == first then\r\n                     if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end\r\n                  else\r\n                     for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end\r\n                  end\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 386,
    "text": "if #data > 1 then\r\n                  plain = false\r\n                  if data:sub(2, 2) == first then\r\n                     if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end\r\n                  else\r\n                     for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end\r\n                  end\r\n               end",
    "type": "statement:if"
  }, {
    "id": 387,
    "text": "plain = false",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "if data:sub(2, 2) == first then\r\n                     if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end\r\n                  else\r\n                     for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end\r\n                  end",
    "type": "statement:if"
  }, {
    "id": 389,
    "text": "if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end",
    "type": "statement:if"
  }, {
    "id": 390,
    "text": "if cur_option then\r\n                           close(cur_option)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 391,
    "text": "handle_options = false",
    "type": "statement:assign"
  }, {
    "id": 392,
    "text": "local equal = data:find \"=\"",
    "type": "statement:localassign"
  }, {
    "id": 393,
    "text": "if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 394,
    "text": "name = data:sub(1, equal-1)",
    "type": "statement:assign"
  }, {
    "id": 395,
    "text": "option = get_option(name)",
    "type": "statement:assign"
  }, {
    "id": 396,
    "text": "assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "handle_option(data:sub(1, equal-1))",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "handle_argument(data:sub(equal+1))",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "get_option(data)",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "handle_option(data)",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end",
    "type": "statement:numericfor"
  }, {
    "id": 402,
    "text": "name = first .. data:sub(i, i)",
    "type": "statement:assign"
  }, {
    "id": 403,
    "text": "handle_option(name)",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 405,
    "text": "handle_argument(data:sub(i+1))",
    "type": "statement:functioncall"
  }, {
    "id": 406,
    "text": "if plain then\r\n            handle_argument(data)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 407,
    "text": "handle_argument(data)",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "switch(self)",
    "type": "statement:functioncall"
  }, {
    "id": 409,
    "text": "charset = parser:_update_charset()",
    "type": "statement:assign"
  }, {
    "id": 410,
    "text": "mainloop()",
    "type": "statement:functioncall"
  }, {
    "id": 411,
    "text": "if cur_option then\r\n      close(cur_option)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 412,
    "text": "while cur_arg do\r\n      if passed[cur_arg] == 0 and cur_arg._default and cur_arg._defmode:find \"u\" then\r\n         complete_invocation(cur_arg)\r\n      else\r\n         close(cur_arg)\r\n      end\r\n   end",
    "type": "statement:while"
  }, {
    "id": 413,
    "text": "if passed[cur_arg] == 0 and cur_arg._default and cur_arg._defmode:find \"u\" then\r\n         complete_invocation(cur_arg)\r\n      else\r\n         close(cur_arg)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 414,
    "text": "complete_invocation(cur_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 415,
    "text": "close(cur_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 416,
    "text": "if parser._require_command and #commands > 0 then\r\n      error_(\"a command is required\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 417,
    "text": "error_(\"a command is required\")",
    "type": "statement:functioncall"
  }, {
    "id": 418,
    "text": "for _, option in ipairs(options) do\r\n      if invocations[option] == 0 then\r\n         if option._default and option._defmode:find \"u\" then\r\n            invoke(option)\r\n            complete_invocation(option)\r\n            close(option)\r\n         end\r\n      end\r\n\r\n      if invocations[option] < option._mincount then\r\n         if option._default and option._defmode:find \"a\" then\r\n            while invocations[option] < option._mincount do\r\n               invoke(option)\r\n               close(option)\r\n            end\r\n         else\r\n            error_(\"option '%s' must be used at least %d time%s\", option._name, option._mincount, plural(option._mincount))\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 419,
    "text": "if invocations[option] == 0 then\r\n         if option._default and option._defmode:find \"u\" then\r\n            invoke(option)\r\n            complete_invocation(option)\r\n            close(option)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 420,
    "text": "if option._default and option._defmode:find \"u\" then\r\n            invoke(option)\r\n            complete_invocation(option)\r\n            close(option)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 421,
    "text": "invoke(option)",
    "type": "statement:functioncall"
  }, {
    "id": 422,
    "text": "complete_invocation(option)",
    "type": "statement:functioncall"
  }, {
    "id": 423,
    "text": "close(option)",
    "type": "statement:functioncall"
  }, {
    "id": 424,
    "text": "if invocations[option] < option._mincount then\r\n         if option._default and option._defmode:find \"a\" then\r\n            while invocations[option] < option._mincount do\r\n               invoke(option)\r\n               close(option)\r\n            end\r\n         else\r\n            error_(\"option '%s' must be used at least %d time%s\", option._name, option._mincount, plural(option._mincount))\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 425,
    "text": "if option._default and option._defmode:find \"a\" then\r\n            while invocations[option] < option._mincount do\r\n               invoke(option)\r\n               close(option)\r\n            end\r\n         else\r\n            error_(\"option '%s' must be used at least %d time%s\", option._name, option._mincount, plural(option._mincount))\r\n         end",
    "type": "statement:if"
  }, {
    "id": 426,
    "text": "while invocations[option] < option._mincount do\r\n               invoke(option)\r\n               close(option)\r\n            end",
    "type": "statement:while"
  }, {
    "id": 427,
    "text": "error_(\"option '%s' must be used at least %d time%s\", option._name, option._mincount, plural(option._mincount))",
    "type": "statement:functioncall"
  }, {
    "id": 428,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 429,
    "text": "local function error_(fmt, ...)\r\n      return errhandler(parser, fmt:format(...))\r\n   end",
    "type": "function"
  }, {
    "id": 430,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 431,
    "text": "local function assert_(assertion, ...)\r\n      return assertion or error_(...)\r\n   end",
    "type": "function"
  }, {
    "id": 432,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 433,
    "text": "local function convert(element, data)\r\n      if element._convert then\r\n         local ok, err\r\n\r\n         if type(element._convert) == \"function\" then\r\n            ok, err = element._convert(data)\r\n         else\r\n            ok, err = element._convert[data]\r\n         end\r\n\r\n         assert_(ok ~= nil, \"%s\", err or \"malformed argument '\" .. data .. \"'\")\r\n         data = ok\r\n      end\r\n\r\n      return data\r\n   end",
    "type": "function"
  }, {
    "id": 434,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 435,
    "text": "function invoke(element)\r\n      local overwrite = false\r\n\r\n      if invocations[element] == element._maxcount then\r\n         if element._overwrite then\r\n            overwrite = true\r\n         else\r\n            error_(\"option '%s' must be used at most %d time%s\", element._name, element._maxcount, plural(element._maxcount))\r\n         end\r\n      else\r\n         invocations[element] = invocations[element]+1\r\n      end\r\n\r\n      passed[element] = 0\r\n      local type_ = element:_get_type()\r\n      local target = targets[element]\r\n\r\n      if type_ == \"flag\" then\r\n         result[target] = true\r\n      elseif type_ == \"multiarg\" then\r\n         result[target] = {}\r\n      elseif type_ == \"counter\" then\r\n         if not overwrite then\r\n            result[target] = result[target]+1\r\n         end\r\n      elseif type_ == \"multicount\" then\r\n         if overwrite then\r\n            table.remove(result[target], 1)\r\n         end\r\n      elseif type_ == \"twodimensional\" then\r\n         table.insert(result[target], {})\r\n\r\n         if overwrite then\r\n            table.remove(result[target], 1)\r\n         end\r\n      end\r\n\r\n      if element._maxargs == 0 then\r\n         close(element)\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 436,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 437,
    "text": "function pass(element, data)\r\n      passed[element] = passed[element]+1\r\n      data = convert(element, data)\r\n      local type_ = element:_get_type()\r\n      local target = targets[element]\r\n\r\n      if type_ == \"arg\" then\r\n         result[target] = data\r\n      elseif type_ == \"multiarg\" or type_ == \"multicount\" then\r\n         table.insert(result[target], data)\r\n      elseif type_ == \"twodimensional\" then\r\n         table.insert(result[target][#result[target]], data)\r\n      end\r\n\r\n      if passed[element] == element._maxargs then\r\n         close(element)\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 438,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 439,
    "text": "local function complete_invocation(element)\r\n      while passed[element] < element._minargs do\r\n         pass(element, element._default)\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 440,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 441,
    "text": "function close(element)\r\n      if passed[element] < element._minargs then\r\n         if element._default and element._defmode:find \"a\" then\r\n            complete_invocation(element)\r\n         else\r\n            error_(\"too few arguments\")\r\n         end\r\n      else\r\n         if element == cur_option then\r\n            cur_option = nil\r\n         elseif element == cur_arg then\r\n            cur_arg_i = cur_arg_i+1\r\n            cur_arg = arguments[cur_arg_i]\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 442,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 443,
    "text": "local function switch(p)\r\n      parser = p\r\n\r\n      for _, option in ipairs(parser._options) do\r\n         table.insert(options, option)\r\n\r\n         for _, alias in ipairs(option._aliases) do\r\n            opt_context[alias] = option\r\n         end\r\n\r\n         local type_ = option:_get_type()\r\n         targets[option] = option:_get_target()\r\n\r\n         if type_ == \"counter\" then\r\n            result[targets[option]] = 0\r\n         elseif type_ == \"multicount\" or type_ == \"twodimensional\" then\r\n            result[targets[option]] = {}\r\n         end\r\n\r\n         invocations[option] = 0\r\n      end\r\n\r\n      for _, mutex in ipairs(parser._mutexes) do\r\n         for _, option in ipairs(mutex) do\r\n            if not option_mutexes[option] then\r\n               option_mutexes[option] = {mutex}\r\n            else\r\n               table.insert(option_mutexes[option], mutex)\r\n            end\r\n         end\r\n      end\r\n\r\n      for _, argument in ipairs(parser._arguments) do\r\n         table.insert(arguments, argument)\r\n         invocations[argument] = 0\r\n         targets[argument] = argument._target or argument._name\r\n         invoke(argument)\r\n      end\r\n\r\n      cur_arg = arguments[cur_arg_i]\r\n      commands = parser._commands\r\n      com_context = {}\r\n\r\n      for _, command in ipairs(commands) do\r\n         targets[command] = command._target or command._name\r\n\r\n         for _, alias in ipairs(command._aliases) do\r\n            com_context[alias] = command\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 444,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 445,
    "text": "local function get_option(name)\r\n      return assert_(opt_context[name], \"unknown option '%s'%s\", name, get_tip(opt_context, name))\r\n   end",
    "type": "function"
  }, {
    "id": 446,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 447,
    "text": "local function do_action(element)\r\n      if element._action then\r\n         element._action()\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 448,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 449,
    "text": "local function handle_argument(data)\r\n      if cur_option then\r\n         pass(cur_option, data)\r\n      elseif cur_arg then\r\n         pass(cur_arg, data)\r\n      else\r\n         local com = com_context[data]\r\n\r\n         if not com then\r\n            if #commands > 0 then\r\n               error_(\"unknown command '%s'%s\", data, get_tip(com_context, data))\r\n            else\r\n               error_(\"too many arguments\")\r\n            end\r\n         else\r\n            result[targets[com]] = true\r\n            do_action(com)\r\n            switch(com)\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 450,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 451,
    "text": "local function handle_option(data)\r\n      if cur_option then\r\n         close(cur_option)\r\n      end\r\n\r\n      cur_option = opt_context[data]\r\n\r\n      if option_mutexes[cur_option] then\r\n         for _, mutex in ipairs(option_mutexes[cur_option]) do\r\n            if used_mutexes[mutex] and used_mutexes[mutex] ~= cur_option then\r\n               error_(\"option '%s' can not be used together with option '%s'\", data, used_mutexes[mutex]._name)\r\n            else\r\n               used_mutexes[mutex] = cur_option\r\n            end\r\n         end\r\n      end\r\n\r\n      do_action(cur_option)\r\n      invoke(cur_option)\r\n   end",
    "type": "function"
  }, {
    "id": 452,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 453,
    "text": "local function mainloop()\r\n      local handle_options = true\r\n\r\n      for _, data in ipairs(args) do\r\n         local plain = true\r\n         local first, name, option\r\n\r\n         if handle_options then\r\n            first = data:sub(1, 1)\r\n            if charset[first] then\r\n               if #data > 1 then\r\n                  plain = false\r\n                  if data:sub(2, 2) == first then\r\n                     if #data == 2 then\r\n                        if cur_option then\r\n                           close(cur_option)\r\n                        end\r\n\r\n                        handle_options = false\r\n                     else\r\n                        local equal = data:find \"=\"\r\n                        if equal then\r\n                           name = data:sub(1, equal-1)\r\n                           option = get_option(name)\r\n                           assert_(option._maxargs > 0, \"option '%s' does not take arguments\", name)\r\n\r\n                           handle_option(data:sub(1, equal-1))\r\n                           handle_argument(data:sub(equal+1))\r\n                        else\r\n                           get_option(data)\r\n                           handle_option(data)\r\n                        end\r\n                     end\r\n                  else\r\n                     for i = 2, #data do\r\n                        name = first .. data:sub(i, i)\r\n                        option = get_option(name)\r\n                        handle_option(name)\r\n\r\n                        if i ~= #data and option._minargs > 0 then\r\n                           handle_argument(data:sub(i+1))\r\n                           break\r\n                        end\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end\r\n\r\n         if plain then\r\n            handle_argument(data)\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 454,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 455,
    "text": "function Parser:error(msg)\r\n   if _TEST then\r\n      error(msg)\r\n   else\r\n      io.stderr:write((\"%s\\r\\n\\r\\nError: %s\\r\\n\"):format(self:get_usage(), msg))\r\n      os.exit(1)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 456,
    "text": "if _TEST then\r\n      error(msg)\r\n   else\r\n      io.stderr:write((\"%s\\r\\n\\r\\nError: %s\\r\\n\"):format(self:get_usage(), msg))\r\n      os.exit(1)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 457,
    "text": "error(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 458,
    "text": "io.stderr:write((\"%s\\r\\n\\r\\nError: %s\\r\\n\"):format(self:get_usage(), msg))",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 460,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 461,
    "text": "function Parser:parse(args)\r\n   return self:_parse(args, Parser.error)\r\nend",
    "type": "function"
  }, {
    "id": 462,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 463,
    "text": "function Parser:pparse(args)\r\n   local errmsg\r\n   local ok, result = pcall(function()\r\n      return self:_parse(args, function(parser, err)\r\n         errmsg = err\r\n         return error()\r\n      end)\r\n   end)\r\n\r\n   if ok then\r\n      return true, result\r\n   else\r\n      assert(errmsg, result)\r\n      return false, errmsg\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 464,
    "text": "local errmsg",
    "type": "statement:localassign"
  }, {
    "id": 465,
    "text": "local ok, result = pcall(function()\r\n      return self:_parse(args, function(parser, err)\r\n         errmsg = err\r\n         return error()\r\n      end)\r\n   end)",
    "type": "statement:localassign"
  }, {
    "id": 466,
    "text": "errmsg = err",
    "type": "statement:assign"
  }, {
    "id": 467,
    "text": "if ok then\r\n      return true, result\r\n   else\r\n      assert(errmsg, result)\r\n      return false, errmsg\r\n   end",
    "type": "statement:if"
  }, {
    "id": 468,
    "text": "assert(errmsg, result)",
    "type": "statement:functioncall"
  }, {
    "id": 469,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 470,
    "text": "function(_, value)\r\n               if type(value) ~= type_ then\r\n                  error((\"bad field '%s' (%s expected, got %s)\"):format(field, type_, type(value)))\r\n               end\r\n            end",
    "type": "function"
  }, {
    "id": 471,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 472,
    "text": "function(self, type_)\r\n         local typechecker_factory = function(field)\r\n            return function(_, value)\r\n               if type(value) ~= type_ then\r\n                  error((\"bad field '%s' (%s expected, got %s)\"):format(field, type_, type(value)))\r\n               end\r\n            end\r\n         end\r\n\r\n         self[type_] = typechecker_factory\r\n         return typechecker_factory\r\n      end",
    "type": "function"
  }, {
    "id": 473,
    "text": "local typechecker_factory = function(field)\r\n            return function(_, value)\r\n               if type(value) ~= type_ then\r\n                  error((\"bad field '%s' (%s expected, got %s)\"):format(field, type_, type(value)))\r\n               end\r\n            end\r\n         end",
    "type": "statement:localassign"
  }, {
    "id": 474,
    "text": "self[type_] = typechecker_factory",
    "type": "statement:assign"
  }, {
    "id": 475,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 476,
    "text": "function(self, value)\r\n         local min, max = parse_boundaries(value)\r\n\r\n         if not min then\r\n            error((\"bad field '%s'\"):format(field))\r\n         end\r\n\r\n         self[\"_min\"..field], self[\"_max\"..field] = min, max\r\n      end",
    "type": "function"
  }, {
    "id": 477,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 478,
    "text": "function()\r\n               io.stdout:write(self:get_help() .. \"\\r\\n\")\r\n               os.exit(0)\r\n            end",
    "type": "function"
  }, {
    "id": 479,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 480,
    "text": "function(sub)\r\n      if #sub == 1 or sub == \"\\r\\n\" then\r\n         return \"\\r\\n\" .. margin2\r\n      else\r\n         return \"\\r\\n\\r\\n\" .. margin2\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 481,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 482,
    "text": "function(parser, err)\r\n         errmsg = err\r\n         return error()\r\n      end",
    "type": "function"
  }, {
    "id": 483,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 484,
    "text": "function()\r\n      return self:_parse(args, function(parser, err)\r\n         errmsg = err\r\n         return error()\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 485,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 486,
    "text": "function(...)\r\n   return Parser(default_cmdline[0]):add_help(true)(...)\r\nend",
    "type": "function"
  }, {
    "id": 487,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 488,
    "text": "",
    "type": "function container"
  }, {
    "id": 489,
    "text": "self",
    "type": "global function"
  }, {
    "id": 490,
    "text": "errhandler",
    "type": "global function"
  }, {
    "id": 491,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 492,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 493,
    "text": "help",
    "type": "global function"
  }, {
    "id": 494,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 495,
    "text": "type",
    "type": "global function"
  }, {
    "id": 496,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 497,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 498,
    "text": "self[field]",
    "type": "global function"
  }, {
    "id": 499,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 500,
    "text": "select",
    "type": "global function"
  }, {
    "id": 501,
    "text": "_convert",
    "type": "global function"
  }, {
    "id": 502,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 503,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 504,
    "text": "_action",
    "type": "global function"
  }, {
    "id": 505,
    "text": "selfoption",
    "type": "global function"
  }, {
    "id": 506,
    "text": "Commandnew",
    "type": "global function"
  }, {
    "id": 507,
    "text": "string",
    "type": "global function"
  }, {
    "id": 508,
    "text": "next",
    "type": "global function"
  }, {
    "id": 509,
    "text": "table",
    "type": "global function"
  }, {
    "id": 510,
    "text": "selfflag",
    "type": "global function"
  }, {
    "id": 511,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 512,
    "text": "error",
    "type": "global function"
  }, {
    "id": 513,
    "text": "min",
    "type": "global function"
  }, {
    "id": 514,
    "text": "setter",
    "type": "global function"
  }, {
    "id": 515,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 516,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 517,
    "text": "",
    "type": "variable container"
  }, {
    "id": 518,
    "text": "",
    "type": "require container"
  }, {
    "id": 519,
    "text": "",
    "type": "local variable"
  }, {
    "id": 520,
    "text": "",
    "type": "local variable"
  }, {
    "id": 521,
    "text": "",
    "type": "local variable"
  }, {
    "id": 522,
    "text": "",
    "type": "local variable"
  }, {
    "id": 523,
    "text": "",
    "type": "local variable"
  }, {
    "id": 524,
    "text": "",
    "type": "number"
  }, {
    "id": 525,
    "text": "",
    "type": "local variable"
  }, {
    "id": 526,
    "text": "",
    "type": "string"
  }, {
    "id": 527,
    "text": "",
    "type": "local variable"
  }, {
    "id": 528,
    "text": "",
    "type": "number"
  }, {
    "id": 529,
    "text": "",
    "type": "local variable"
  }, {
    "id": 530,
    "text": "",
    "type": "number"
  }, {
    "id": 531,
    "text": "",
    "type": "local variable"
  }, {
    "id": 532,
    "text": "",
    "type": "n/a"
  }, {
    "id": 533,
    "text": "",
    "type": "local variable"
  }, {
    "id": 534,
    "text": "",
    "type": "n/a"
  }, {
    "id": 535,
    "text": "",
    "type": "local variable"
  }, {
    "id": 536,
    "text": "",
    "type": "n/a"
  }, {
    "id": 537,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 538,
    "text": "30log",
    "type": "module"
  }, {
    "id": 539,
    "text": "",
    "type": "interface container"
  }, {
    "id": 540,
    "text": "",
    "type": "interface"
  } ]
}