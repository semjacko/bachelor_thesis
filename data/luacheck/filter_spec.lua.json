{
  "_filename": "filter_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/filter_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 7
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 10
  }, {
    "from": 49,
    "label": "has",
    "to": 11
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 14
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 20
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 23
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 26
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 29
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 32
  }, {
    "from": 46,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 35
  }, {
    "from": 46,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 38
  }, {
    "from": 46,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 41
  }, {
    "from": 46,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 44
  }, {
    "from": 46,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 64
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 63
  }, {
    "from": 62,
    "label": "calls",
    "to": 65
  }, {
    "from": 62,
    "label": "calls",
    "to": 66
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 62,
    "label": "declares",
    "to": 3
  }, {
    "from": 62,
    "label": "declares",
    "to": 6
  }, {
    "from": 62,
    "label": "declares",
    "to": 9
  }, {
    "from": 62,
    "label": "declares",
    "to": 13
  }, {
    "from": 62,
    "label": "declares",
    "to": 16
  }, {
    "from": 62,
    "label": "declares",
    "to": 19
  }, {
    "from": 62,
    "label": "declares",
    "to": 22
  }, {
    "from": 62,
    "label": "declares",
    "to": 25
  }, {
    "from": 62,
    "label": "declares",
    "to": 28
  }, {
    "from": 62,
    "label": "declares",
    "to": 31
  }, {
    "from": 62,
    "label": "declares",
    "to": 34
  }, {
    "from": 62,
    "label": "declares",
    "to": 37
  }, {
    "from": 62,
    "label": "declares",
    "to": 40
  }, {
    "from": 62,
    "label": "declares",
    "to": 43
  }, {
    "from": 62,
    "label": "declares",
    "to": 46
  }, {
    "from": 1,
    "label": "contains",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "requires",
    "to": 2
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 19
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 43
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "filter_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "filter",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"bar\"},\r\n         only = {\"bar\", \"baz\"}\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"bar\"},\r\n         only = {\"bar\", \"baz\"}\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"_\",\r\n               useless = true\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"_\",\r\n               useless = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"_\"\r\n            },\r\n            {\r\n               code = \"221\",\r\n               name = \"_\"\r\n            }\r\n         }\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 7,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"_\",\r\n               useless = true\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"_\",\r\n               useless = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"_\"\r\n            },\r\n            {\r\n               code = \"221\",\r\n               name = \"_\"\r\n            }\r\n         }\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         global = false,\r\n         redefined = false\r\n      }))\r\n\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"221\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"221\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"321\",\r\n               name = \"qu\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"32\"}\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         global = false,\r\n         redefined = false\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"221\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"221\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"321\",\r\n               name = \"qu\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"32\"}\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"_baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"_qu\"\r\n            },\r\n            {\r\n               code = \"321\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"_baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"foo\", \"212/_.*\"}\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"_baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"_qu\"\r\n            },\r\n            {\r\n               code = \"321\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"_baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"foo\", \"212/_.*\"}\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            },\r\n            {\r\n               code = \"221\",\r\n               name = \"qu\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"22\", \"31\"},\r\n         unused_args = false\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 17,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            },\r\n            {\r\n               code = \"221\",\r\n               name = \"qu\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"22\", \"31\"},\r\n         unused_args = false\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\",\r\n               secondary = true\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"bar\",\r\n               secondary = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         unused_secondaries = false\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 20,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\",\r\n               secondary = true\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"bar\",\r\n               secondary = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         unused_secondaries = false\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"self\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"self\",\r\n               self = true\r\n            },\r\n            {\r\n               code = \"432\",\r\n               name = \"self\",\r\n               self = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"self\"\r\n            }\r\n         }\r\n      }, {\r\n         self = false\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 23,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"self\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"self\",\r\n               self = true\r\n            },\r\n            {\r\n               code = \"432\",\r\n               name = \"self\",\r\n               self = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"self\"\r\n            }\r\n         }\r\n      }, {\r\n         self = false\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, {\r\n         std = {},\r\n         globals = {\"foo\"}\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 26,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, {\r\n         std = {},\r\n         globals = {\"foo\"}\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"package\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, {\r\n         std = \"min\"\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"package\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, {\r\n         std = \"min\"\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"131\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined = true\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 32,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"131\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined = true\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined_top = true\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined_top = true\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined = true,\r\n         module = true\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 38,
    "text": "assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined = true,\r\n         module = true\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"string\",\r\n               module = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\",\r\n               module = true\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"string\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            }\r\n         }\r\n      }, {\r\n            {\r\n               allow_defined = true,\r\n               ignore = {\"13\"}\r\n            },\r\n            {\r\n               allow_defined_top = true,\r\n               module = true\r\n            }\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"string\",\r\n               module = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\",\r\n               module = true\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"string\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            }\r\n         }\r\n      }, {\r\n            {\r\n               allow_defined = true,\r\n               ignore = {\"13\"}\r\n            },\r\n            {\r\n               allow_defined_top = true,\r\n               module = true\r\n            }\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()\r\n      assert.same({\r\n         {},\r\n         {}\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\",\r\n            }\r\n         }\r\n      }, {\r\n            {\r\n               allow_defined = true\r\n            },\r\n            {\r\n               allow_defined = true,\r\n               module = true\r\n            }\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert.same({\r\n         {},\r\n         {}\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\",\r\n            }\r\n         }\r\n      }, {\r\n            {\r\n               allow_defined = true\r\n            },\r\n            {\r\n               allow_defined = true,\r\n               module = true\r\n            }\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function()\r\n   it(\"filters warnings by name\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"bar\"},\r\n         only = {\"bar\", \"baz\"}\r\n      }))\r\n   end)\r\n\r\n   it(\"removes unused var/value and redefined warnings related to _, unless it's useless\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"_\",\r\n               useless = true\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"_\",\r\n               useless = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"_\"\r\n            },\r\n            {\r\n               code = \"221\",\r\n               name = \"_\"\r\n            }\r\n         }\r\n      }))\r\n   end)\r\n\r\n   it(\"filters warnings by type\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         global = false,\r\n         redefined = false\r\n      }))\r\n\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"221\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"221\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"321\",\r\n               name = \"qu\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"32\"}\r\n      }))\r\n   end)\r\n\r\n   it(\"filters warnings by code and name using patterns\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"_baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"_qu\"\r\n            },\r\n            {\r\n               code = \"321\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"_baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"foo\", \"212/_.*\"}\r\n      }))\r\n   end)\r\n\r\n   it(\"filters unused warnings by subtype\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            },\r\n            {\r\n               code = \"221\",\r\n               name = \"qu\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"22\", \"31\"},\r\n         unused_args = false\r\n      }))\r\n   end)\r\n\r\n   it(\"filters unused warnings related to secondary variables\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\",\r\n               secondary = true\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"bar\",\r\n               secondary = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         unused_secondaries = false\r\n      }))\r\n   end)\r\n\r\n   it(\"filters unused and redefined warnings related to implicit self\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"self\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"self\",\r\n               self = true\r\n            },\r\n            {\r\n               code = \"432\",\r\n               name = \"self\",\r\n               self = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"self\"\r\n            }\r\n         }\r\n      }, {\r\n         self = false\r\n      }))\r\n   end)\r\n\r\n   it(\"filters defined globals\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, {\r\n         std = {},\r\n         globals = {\"foo\"}\r\n      }))\r\n   end)\r\n\r\n   it(\"filters standard globals\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"package\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, {\r\n         std = \"min\"\r\n      }))\r\n   end)\r\n\r\n   it(\"allows defined globals with allow_defined = true\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"131\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined = true\r\n      }))\r\n   end)\r\n\r\n   it(\"allows globals defined in top level function scope with allow_defined_top = true\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined_top = true\r\n      }))\r\n   end)\r\n\r\n   it(\"allows globals defined in the same file with module = true\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined = true,\r\n         module = true\r\n      }))\r\n   end)\r\n\r\n   it(\"only allows setting globals defined in the same file with module = true\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"string\",\r\n               module = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\",\r\n               module = true\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"string\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            }\r\n         }\r\n      }, {\r\n            {\r\n               allow_defined = true,\r\n               ignore = {\"13\"}\r\n            },\r\n            {\r\n               allow_defined_top = true,\r\n               module = true\r\n            }\r\n      }))\r\n   end)\r\n\r\n   it(\"using an implicitly defined global from a module marks it as used\", function()\r\n      assert.same({\r\n         {},\r\n         {}\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\",\r\n            }\r\n         }\r\n      }, {\r\n            {\r\n               allow_defined = true\r\n            },\r\n            {\r\n               allow_defined = true,\r\n               module = true\r\n            }\r\n      }))\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "it(\"filters warnings by name\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"bar\"},\r\n         only = {\"bar\", \"baz\"}\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "it(\"removes unused var/value and redefined warnings related to _, unless it's useless\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"_\",\r\n               useless = true\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"211\",\r\n               name = \"_\",\r\n               useless = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"_\"\r\n            },\r\n            {\r\n               code = \"221\",\r\n               name = \"_\"\r\n            }\r\n         }\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "it(\"filters warnings by type\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         global = false,\r\n         redefined = false\r\n      }))\r\n\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"221\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"221\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"321\",\r\n               name = \"qu\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"32\"}\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "it(\"filters warnings by code and name using patterns\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"_baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"_qu\"\r\n            },\r\n            {\r\n               code = \"321\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"413\",\r\n               name = \"_baz\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"foo\", \"212/_.*\"}\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "it(\"filters unused warnings by subtype\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            },\r\n            {\r\n               code = \"221\",\r\n               name = \"qu\"\r\n            }\r\n         }\r\n      }, {\r\n         ignore = {\"22\", \"31\"},\r\n         unused_args = false\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "it(\"filters unused warnings related to secondary variables\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"foo\",\r\n               secondary = true\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"bar\",\r\n               secondary = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         unused_secondaries = false\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "it(\"filters unused and redefined warnings related to implicit self\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"self\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"212\",\r\n               name = \"self\",\r\n               self = true\r\n            },\r\n            {\r\n               code = \"432\",\r\n               name = \"self\",\r\n               self = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"self\"\r\n            }\r\n         }\r\n      }, {\r\n         self = false\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "it(\"filters defined globals\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, {\r\n         std = {},\r\n         globals = {\"foo\"}\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "it(\"filters standard globals\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"package\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"module\"\r\n            }\r\n         }\r\n      }, {\r\n         std = \"min\"\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "it(\"allows defined globals with allow_defined = true\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"131\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined = true\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "it(\"allows globals defined in top level function scope with allow_defined_top = true\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"baz\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined_top = true\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "it(\"allows globals defined in the same file with module = true\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         }\r\n      }, {\r\n         allow_defined = true,\r\n         module = true\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "it(\"only allows setting globals defined in the same file with module = true\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"string\",\r\n               module = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\",\r\n               module = true\r\n            }\r\n         }\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\",\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"string\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\"\r\n            }\r\n         }\r\n      }, {\r\n            {\r\n               allow_defined = true,\r\n               ignore = {\"13\"}\r\n            },\r\n            {\r\n               allow_defined_top = true,\r\n               module = true\r\n            }\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "it(\"using an implicitly defined global from a module marks it as used\", function()\r\n      assert.same({\r\n         {},\r\n         {}\r\n      }, filter({\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"bar\",\r\n            }\r\n         }\r\n      }, {\r\n            {\r\n               allow_defined = true\r\n            },\r\n            {\r\n               allow_defined = true,\r\n               module = true\r\n            }\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "",
    "type": "function container"
  }, {
    "id": 63,
    "text": "same",
    "type": "global function"
  }, {
    "id": 64,
    "text": "filter",
    "type": "global function"
  }, {
    "id": 65,
    "text": "require",
    "type": "global function"
  }, {
    "id": 66,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 67,
    "text": "it",
    "type": "global function"
  }, {
    "id": 68,
    "text": "",
    "type": "variable container"
  }, {
    "id": 69,
    "text": "",
    "type": "require container"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  } ]
}