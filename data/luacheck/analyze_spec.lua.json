{
  "_filename": "analyze_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/analyze_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 16
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 16
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 44
  }, {
    "from": 53,
    "label": "has",
    "to": 45
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 48
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 57
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 60
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 63
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 41
  }, {
    "from": 71,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 44
  }, {
    "from": 53,
    "label": "has",
    "to": 45
  }, {
    "from": 71,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 48
  }, {
    "from": 54,
    "label": "has",
    "to": 49
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 57
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 60
  }, {
    "from": 72,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 63
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 23,
    "label": "calls",
    "to": 82
  }, {
    "from": 23,
    "label": "calls",
    "to": 82
  }, {
    "from": 32,
    "label": "calls",
    "to": 82
  }, {
    "from": 74,
    "label": "calls",
    "to": 75
  }, {
    "from": 23,
    "label": "calls",
    "to": 91
  }, {
    "from": 13,
    "label": "calls",
    "to": 88
  }, {
    "from": 23,
    "label": "calls",
    "to": 76
  }, {
    "from": 23,
    "label": "calls",
    "to": 76
  }, {
    "from": 18,
    "label": "calls",
    "to": 92
  }, {
    "from": 23,
    "label": "calls",
    "to": 83
  }, {
    "from": 32,
    "label": "calls",
    "to": 18
  }, {
    "from": 74,
    "label": "calls",
    "to": 32
  }, {
    "from": 74,
    "label": "calls",
    "to": 32
  }, {
    "from": 74,
    "label": "calls",
    "to": 32
  }, {
    "from": 74,
    "label": "calls",
    "to": 32
  }, {
    "from": 74,
    "label": "calls",
    "to": 32
  }, {
    "from": 74,
    "label": "calls",
    "to": 32
  }, {
    "from": 74,
    "label": "calls",
    "to": 32
  }, {
    "from": 74,
    "label": "calls",
    "to": 32
  }, {
    "from": 32,
    "label": "calls",
    "to": 23
  }, {
    "from": 32,
    "label": "calls",
    "to": 93
  }, {
    "from": 23,
    "label": "calls",
    "to": 77
  }, {
    "from": 32,
    "label": "calls",
    "to": 77
  }, {
    "from": 23,
    "label": "calls",
    "to": 80
  }, {
    "from": 23,
    "label": "calls",
    "to": 80
  }, {
    "from": 32,
    "label": "calls",
    "to": 80
  }, {
    "from": 32,
    "label": "calls",
    "to": 85
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 74,
    "label": "calls",
    "to": 94
  }, {
    "from": 18,
    "label": "calls",
    "to": 78
  }, {
    "from": 13,
    "label": "calls",
    "to": 89
  }, {
    "from": 32,
    "label": "calls",
    "to": 89
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 13,
    "label": "calls",
    "to": 79
  }, {
    "from": 18,
    "label": "calls",
    "to": 81
  }, {
    "from": 74,
    "label": "calls",
    "to": 87
  }, {
    "from": 74,
    "label": "calls",
    "to": 87
  }, {
    "from": 74,
    "label": "calls",
    "to": 87
  }, {
    "from": 74,
    "label": "calls",
    "to": 87
  }, {
    "from": 74,
    "label": "calls",
    "to": 90
  }, {
    "from": 74,
    "label": "calls",
    "to": 90
  }, {
    "from": 74,
    "label": "calls",
    "to": 90
  }, {
    "from": 32,
    "label": "calls",
    "to": 84
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 74,
    "label": "declares",
    "to": 6
  }, {
    "from": 74,
    "label": "declares",
    "to": 7
  }, {
    "from": 74,
    "label": "declares",
    "to": 8
  }, {
    "from": 74,
    "label": "declares",
    "to": 9
  }, {
    "from": 74,
    "label": "declares",
    "to": 10
  }, {
    "from": 74,
    "label": "declares",
    "to": 11
  }, {
    "from": 74,
    "label": "declares",
    "to": 12
  }, {
    "from": 74,
    "label": "declares",
    "to": 13
  }, {
    "from": 74,
    "label": "declares",
    "to": 18
  }, {
    "from": 74,
    "label": "declares",
    "to": 23
  }, {
    "from": 74,
    "label": "declares",
    "to": 32
  }, {
    "from": 74,
    "label": "declares",
    "to": 40
  }, {
    "from": 74,
    "label": "declares",
    "to": 43
  }, {
    "from": 74,
    "label": "declares",
    "to": 47
  }, {
    "from": 74,
    "label": "declares",
    "to": 51
  }, {
    "from": 74,
    "label": "declares",
    "to": 56
  }, {
    "from": 74,
    "label": "declares",
    "to": 59
  }, {
    "from": 74,
    "label": "declares",
    "to": 62
  }, {
    "from": 74,
    "label": "declares",
    "to": 65
  }, {
    "from": 74,
    "label": "declares",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 96
  }, {
    "from": 95,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 96,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 2
  }, {
    "from": 96,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 3
  }, {
    "from": 96,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "requires",
    "to": 4
  }, {
    "from": 96,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "requires",
    "to": 5
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 65
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "analyze_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "analyze",
    "type": "module"
  }, {
    "id": 3,
    "text": "linearize",
    "type": "module"
  }, {
    "id": 4,
    "text": "parser",
    "type": "module"
  }, {
    "id": 5,
    "text": "utils",
    "type": "module"
  }, {
    "id": 6,
    "text": "function ChState.__init() end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function ChState.warn_redefined() end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function ChState.warn_global() end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function ChState.warn_unused_label() end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function ChState.warn_unused_variable() end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function ChState.warn_unused_value() end",
    "type": "function"
  }, {
    "id": 12,
    "text": "function ChState.warn_unset() end",
    "type": "function"
  }, {
    "id": 13,
    "text": "local function get_line_(src)\r\n   local ast = parser(src)\r\n   local chstate = ChState()\r\n   return linearize(chstate, ast)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local ast = parser(src)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local chstate = ChState()",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function get_line(src)\r\n   local ok, res = pcall(get_line_, src)\r\n\r\n   if ok then\r\n      return res\r\n   elseif type(res) == \"table\" then\r\n      return nil\r\n   else\r\n      error(res, 0)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local ok, res = pcall(get_line_, src)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if ok then\r\n      return res\r\n   elseif type(res) == \"table\" then\r\n      return nil\r\n   else\r\n      error(res, 0)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "error(res, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function used_variables_to_string(item)\r\n   local buf = {}\r\n\r\n   for var, values in pairs(item.used_values) do\r\n      local values_buf = {}\r\n\r\n      for _, value in ipairs(values) do\r\n         table.insert(values_buf, tostring(value.location.line) .. \":\" .. tostring(value.location.column))\r\n      end\r\n\r\n      table.insert(buf, var.name .. \" = (\" .. table.concat(values_buf, \", \") .. \")\")\r\n   end\r\n\r\n   table.sort(buf)\r\n   return item.tag .. \": \" .. table.concat(buf, \"; \")\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local buf = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "for var, values in pairs(item.used_values) do\r\n      local values_buf = {}\r\n\r\n      for _, value in ipairs(values) do\r\n         table.insert(values_buf, tostring(value.location.line) .. \":\" .. tostring(value.location.column))\r\n      end\r\n\r\n      table.insert(buf, var.name .. \" = (\" .. table.concat(values_buf, \", \") .. \")\")\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "local values_buf = {}",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "for _, value in ipairs(values) do\r\n         table.insert(values_buf, tostring(value.location.line) .. \":\" .. tostring(value.location.column))\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "table.insert(values_buf, tostring(value.location.line) .. \":\" .. tostring(value.location.column))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "table.insert(buf, var.name .. \" = (\" .. table.concat(values_buf, \", \") .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "table.sort(buf)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function get_used_variables_as_string(src)\r\n   local line = get_line(src)\r\n   analyze(ChState(), line)\r\n\r\n   local buf = {}\r\n\r\n   for _, item in ipairs(line.items) do\r\n      if item.accesses and next(item.accesses) then\r\n         assert.is_table(item.used_values)\r\n         table.insert(buf, used_variables_to_string(item))\r\n      end\r\n   end\r\n\r\n   return table.concat(buf, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local line = get_line(src)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "analyze(ChState(), line)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "for _, item in ipairs(line.items) do\r\n      if item.accesses and next(item.accesses) then\r\n         assert.is_table(item.used_values)\r\n         table.insert(buf, used_variables_to_string(item))\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "if item.accesses and next(item.accesses) then\r\n         assert.is_table(item.used_values)\r\n         table.insert(buf, used_variables_to_string(item))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "assert.is_table(item.used_values)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "table.insert(buf, used_variables_to_string(item))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n         assert.equal([[\r\nEval: a = (1:7)]], get_used_variables_as_string([[\r\nlocal a = 6\r\nprint(a)\r\n]]))\r\n      end",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert.equal([[\r\nEval: a = (1:7)]], get_used_variables_as_string([[\r\nlocal a = 6\r\nprint(a)\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()\r\n         assert.equal([[\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nif expr then\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nEval: a = (4:4, 7:4, 10:7, 13:4)]], get_used_variables_as_string([[\r\nlocal a = 3\r\n\r\nif expr then\r\n   a = 4\r\nelseif expr then\r\n   a = 5\r\n   a = 8\r\n\r\n   if expr then\r\n      a = 7\r\n   end\r\nelse\r\n   a = 6\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert.equal([[\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nif expr then\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.equal([[\r\nEval: a = (4:4, 7:4, 10:7, 13:4)]], get_used_variables_as_string([[\r\nlocal a = 3\r\n\r\nif expr then\r\n   a = 4\r\nelseif expr then\r\n   a = 5\r\n   a = 8\r\n\r\n   if expr then\r\n      a = 7\r\n   end\r\nelse\r\n   a = 6\r\nend\r\n\r\nprint(a)\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n         assert.equal([[\r\nEval: a = (1:7, 5:7)\r\nEval: a = (1:7, 5:7)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nwhile not a do\r\n   if expr then\r\n      a = expr2\r\n   end\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nSet: k = (2:5)\r\nEval: v = (2:8)\r\nEval: a = (3:4); b = (1:10)\r\nEval: a = (1:7, 3:4); b = (1:10)]], get_used_variables_as_string([[\r\nlocal a, b = 1, 2\r\nfor k, v in pairs(t) do\r\n   a = k\r\n\r\n   if v then\r\n      print(a, b)\r\n   end\r\nend\r\n\r\nprint(a, b)\r\n]]))\r\n      end",
    "type": "function"
  }, {
    "id": 48,
    "text": "assert.equal([[\r\nEval: a = (1:7, 5:7)\r\nEval: a = (1:7, 5:7)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nwhile not a do\r\n   if expr then\r\n      a = expr2\r\n   end\r\nend\r\n\r\nprint(a)\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert.equal([[\r\nSet: k = (2:5)\r\nEval: v = (2:8)\r\nEval: a = (3:4); b = (1:10)\r\nEval: a = (1:7, 3:4); b = (1:10)]], get_used_variables_as_string([[\r\nlocal a, b = 1, 2\r\nfor k, v in pairs(t) do\r\n   a = k\r\n\r\n   if v then\r\n      print(a, b)\r\n   end\r\nend\r\n\r\nprint(a, b)\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n      it(\"resolves values in linear cases\", function()\r\n         assert.equal([[\r\nEval: a = (1:7)]], get_used_variables_as_string([[\r\nlocal a = 6\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"resolves values after ifs\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nif expr then\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nEval: a = (4:4, 7:4, 10:7, 13:4)]], get_used_variables_as_string([[\r\nlocal a = 3\r\n\r\nif expr then\r\n   a = 4\r\nelseif expr then\r\n   a = 5\r\n   a = 8\r\n\r\n   if expr then\r\n      a = 7\r\n   end\r\nelse\r\n   a = 6\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"resolves values after loops\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 5:7)\r\nEval: a = (1:7, 5:7)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nwhile not a do\r\n   if expr then\r\n      a = expr2\r\n   end\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nSet: k = (2:5)\r\nEval: v = (2:8)\r\nEval: a = (3:4); b = (1:10)\r\nEval: a = (1:7, 3:4); b = (1:10)]], get_used_variables_as_string([[\r\nlocal a, b = 1, 2\r\nfor k, v in pairs(t) do\r\n   a = k\r\n\r\n   if v then\r\n      print(a, b)\r\n   end\r\nend\r\n\r\nprint(a, b)\r\n]]))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 52,
    "text": "it(\"resolves values in linear cases\", function()\r\n         assert.equal([[\r\nEval: a = (1:7)]], get_used_variables_as_string([[\r\nlocal a = 6\r\nprint(a)\r\n]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "it(\"resolves values after ifs\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nif expr then\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nEval: a = (4:4, 7:4, 10:7, 13:4)]], get_used_variables_as_string([[\r\nlocal a = 3\r\n\r\nif expr then\r\n   a = 4\r\nelseif expr then\r\n   a = 5\r\n   a = 8\r\n\r\n   if expr then\r\n      a = 7\r\n   end\r\nelse\r\n   a = 6\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "it(\"resolves values after loops\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 5:7)\r\nEval: a = (1:7, 5:7)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nwhile not a do\r\n   if expr then\r\n      a = expr2\r\n   end\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nSet: k = (2:5)\r\nEval: v = (2:8)\r\nEval: a = (3:4); b = (1:10)\r\nEval: a = (1:7, 3:4); b = (1:10)]], get_used_variables_as_string([[\r\nlocal a, b = 1, 2\r\nfor k, v in pairs(t) do\r\n   a = k\r\n\r\n   if v then\r\n      print(a, b)\r\n   end\r\nend\r\n\r\nprint(a, b)\r\n]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n         assert.equal([[\r\nEval: f = (3:16)\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nf()\r\nprint(a)\r\n]]))\r\n      end",
    "type": "function"
  }, {
    "id": 57,
    "text": "assert.equal([[\r\nEval: f = (3:16)\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nf()\r\nprint(a)\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function()\r\n         assert.equal([[\r\nEval: a = (1:7)\r\nEval: a = (1:7, 6:4)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nprint(a)\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end",
    "type": "function"
  }, {
    "id": 60,
    "text": "assert.equal([[\r\nEval: a = (1:7)\r\nEval: a = (1:7, 6:4)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nprint(a)\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function()\r\n         assert.equal([[\r\nEval: a = (1:7, 6:22)\r\nEval: a = (1:7, 6:22)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nrepeat\r\n   print(a)\r\n\r\n   escape(function() a = 5 end)\r\nuntil a\r\n]]))\r\n      end",
    "type": "function"
  }, {
    "id": 63,
    "text": "assert.equal([[\r\nEval: a = (1:7, 6:22)\r\nEval: a = (1:7, 6:22)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nrepeat\r\n   print(a)\r\n\r\n   escape(function() a = 5 end)\r\nuntil a\r\n]]))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function()\r\n      it(\"resolves set upvalues naively\", function()\r\n         assert.equal([[\r\nEval: f = (3:16)\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nf()\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"naively determines where closure is live\", function()\r\n         assert.equal([[\r\nEval: a = (1:7)\r\nEval: a = (1:7, 6:4)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nprint(a)\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"naively determines where closure is live in loops\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 6:22)\r\nEval: a = (1:7, 6:22)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nrepeat\r\n   print(a)\r\n\r\n   escape(function() a = 5 end)\r\nuntil a\r\n]]))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 66,
    "text": "it(\"resolves set upvalues naively\", function()\r\n         assert.equal([[\r\nEval: f = (3:16)\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nf()\r\nprint(a)\r\n]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "it(\"naively determines where closure is live\", function()\r\n         assert.equal([[\r\nEval: a = (1:7)\r\nEval: a = (1:7, 6:4)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nprint(a)\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "it(\"naively determines where closure is live in loops\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 6:22)\r\nEval: a = (1:7, 6:22)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nrepeat\r\n   print(a)\r\n\r\n   escape(function() a = 5 end)\r\nuntil a\r\n]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n   describe(\"when resolving values\", function()\r\n      it(\"resolves values in linear cases\", function()\r\n         assert.equal([[\r\nEval: a = (1:7)]], get_used_variables_as_string([[\r\nlocal a = 6\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"resolves values after ifs\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nif expr then\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nEval: a = (4:4, 7:4, 10:7, 13:4)]], get_used_variables_as_string([[\r\nlocal a = 3\r\n\r\nif expr then\r\n   a = 4\r\nelseif expr then\r\n   a = 5\r\n   a = 8\r\n\r\n   if expr then\r\n      a = 7\r\n   end\r\nelse\r\n   a = 6\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"resolves values after loops\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 5:7)\r\nEval: a = (1:7, 5:7)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nwhile not a do\r\n   if expr then\r\n      a = expr2\r\n   end\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nSet: k = (2:5)\r\nEval: v = (2:8)\r\nEval: a = (3:4); b = (1:10)\r\nEval: a = (1:7, 3:4); b = (1:10)]], get_used_variables_as_string([[\r\nlocal a, b = 1, 2\r\nfor k, v in pairs(t) do\r\n   a = k\r\n\r\n   if v then\r\n      print(a, b)\r\n   end\r\nend\r\n\r\nprint(a, b)\r\n]]))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when resolving upvalues\", function()\r\n      it(\"resolves set upvalues naively\", function()\r\n         assert.equal([[\r\nEval: f = (3:16)\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nf()\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"naively determines where closure is live\", function()\r\n         assert.equal([[\r\nEval: a = (1:7)\r\nEval: a = (1:7, 6:4)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nprint(a)\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"naively determines where closure is live in loops\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 6:22)\r\nEval: a = (1:7, 6:22)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nrepeat\r\n   print(a)\r\n\r\n   escape(function() a = 5 end)\r\nuntil a\r\n]]))\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "describe(\"when resolving values\", function()\r\n      it(\"resolves values in linear cases\", function()\r\n         assert.equal([[\r\nEval: a = (1:7)]], get_used_variables_as_string([[\r\nlocal a = 6\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"resolves values after ifs\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nif expr then\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nEval: a = (4:4, 7:4, 10:7, 13:4)]], get_used_variables_as_string([[\r\nlocal a = 3\r\n\r\nif expr then\r\n   a = 4\r\nelseif expr then\r\n   a = 5\r\n   a = 8\r\n\r\n   if expr then\r\n      a = 7\r\n   end\r\nelse\r\n   a = 6\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"resolves values after loops\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 5:7)\r\nEval: a = (1:7, 5:7)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nwhile not a do\r\n   if expr then\r\n      a = expr2\r\n   end\r\nend\r\n\r\nprint(a)\r\n]]))\r\n\r\n         assert.equal([[\r\nSet: k = (2:5)\r\nEval: v = (2:8)\r\nEval: a = (3:4); b = (1:10)\r\nEval: a = (1:7, 3:4); b = (1:10)]], get_used_variables_as_string([[\r\nlocal a, b = 1, 2\r\nfor k, v in pairs(t) do\r\n   a = k\r\n\r\n   if v then\r\n      print(a, b)\r\n   end\r\nend\r\n\r\nprint(a, b)\r\n]]))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "describe(\"when resolving upvalues\", function()\r\n      it(\"resolves set upvalues naively\", function()\r\n         assert.equal([[\r\nEval: f = (3:16)\r\nEval: a = (1:7, 4:4)]], get_used_variables_as_string([[\r\nlocal a\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nf()\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"naively determines where closure is live\", function()\r\n         assert.equal([[\r\nEval: a = (1:7)\r\nEval: a = (1:7, 6:4)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nprint(a)\r\n\r\nlocal function f()\r\n   a = 5\r\nend\r\n\r\nprint(a)\r\n]]))\r\n      end)\r\n\r\n      it(\"naively determines where closure is live in loops\", function()\r\n         assert.equal([[\r\nEval: a = (1:7, 6:22)\r\nEval: a = (1:7, 6:22)]], get_used_variables_as_string([[\r\nlocal a = 4\r\n\r\nrepeat\r\n   print(a)\r\n\r\n   escape(function() a = 5 end)\r\nuntil a\r\n]]))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "",
    "type": "function container"
  }, {
    "id": 75,
    "text": "class",
    "type": "global function"
  }, {
    "id": 76,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 77,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 78,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 79,
    "text": "parser",
    "type": "global function"
  }, {
    "id": 80,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 81,
    "text": "type",
    "type": "global function"
  }, {
    "id": 82,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 83,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 84,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 85,
    "text": "next",
    "type": "global function"
  }, {
    "id": 86,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 87,
    "text": "require",
    "type": "global function"
  }, {
    "id": 88,
    "text": "linearize",
    "type": "global function"
  }, {
    "id": 89,
    "text": "ChState",
    "type": "global function"
  }, {
    "id": 90,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 91,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 92,
    "text": "error",
    "type": "global function"
  }, {
    "id": 93,
    "text": "analyze",
    "type": "global function"
  }, {
    "id": 94,
    "text": "it",
    "type": "global function"
  }, {
    "id": 95,
    "text": "",
    "type": "variable container"
  }, {
    "id": 96,
    "text": "",
    "type": "require container"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  } ]
}