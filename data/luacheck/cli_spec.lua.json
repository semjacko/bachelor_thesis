{
  "_filename": "cli_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/cli_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 11,
    "label": "has",
    "to": 20
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 157,
    "label": "has",
    "to": 162
  }, {
    "from": 157,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 170,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 178,
    "label": "has",
    "to": 182
  }, {
    "from": 178,
    "label": "has",
    "to": 183
  }, {
    "from": 178,
    "label": "has",
    "to": 184
  }, {
    "from": 178,
    "label": "has",
    "to": 185
  }, {
    "from": 178,
    "label": "has",
    "to": 186
  }, {
    "from": 178,
    "label": "has",
    "to": 187
  }, {
    "from": 178,
    "label": "has",
    "to": 188
  }, {
    "from": 178,
    "label": "has",
    "to": 189
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 178,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 178,
    "label": "has",
    "to": 190
  }, {
    "from": 178,
    "label": "has",
    "to": 191
  }, {
    "from": 178,
    "label": "has",
    "to": 191
  }, {
    "from": 178,
    "label": "has",
    "to": 192
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 178,
    "label": "has",
    "to": 193
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 178,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 171
  }, {
    "from": 197,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 176
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 179
  }, {
    "from": 199,
    "label": "has",
    "to": 180
  }, {
    "from": 199,
    "label": "has",
    "to": 181
  }, {
    "from": 199,
    "label": "has",
    "to": 182
  }, {
    "from": 199,
    "label": "has",
    "to": 183
  }, {
    "from": 199,
    "label": "has",
    "to": 184
  }, {
    "from": 199,
    "label": "has",
    "to": 185
  }, {
    "from": 199,
    "label": "has",
    "to": 186
  }, {
    "from": 199,
    "label": "has",
    "to": 187
  }, {
    "from": 199,
    "label": "has",
    "to": 188
  }, {
    "from": 199,
    "label": "has",
    "to": 189
  }, {
    "from": 199,
    "label": "has",
    "to": 181
  }, {
    "from": 199,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 199,
    "label": "has",
    "to": 190
  }, {
    "from": 199,
    "label": "has",
    "to": 191
  }, {
    "from": 199,
    "label": "has",
    "to": 191
  }, {
    "from": 199,
    "label": "has",
    "to": 192
  }, {
    "from": 199,
    "label": "has",
    "to": 181
  }, {
    "from": 199,
    "label": "has",
    "to": 193
  }, {
    "from": 199,
    "label": "has",
    "to": 181
  }, {
    "from": 195,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 213
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 219
  }, {
    "from": 217,
    "label": "has",
    "to": 220
  }, {
    "from": 217,
    "label": "has",
    "to": 221
  }, {
    "from": 217,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 274
  }, {
    "from": 272,
    "label": "has",
    "to": 275
  }, {
    "from": 272,
    "label": "has",
    "to": 276
  }, {
    "from": 272,
    "label": "has",
    "to": 277
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 278,
    "label": "has",
    "to": 280
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 234
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 237
  }, {
    "from": 281,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 240
  }, {
    "from": 281,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 243
  }, {
    "from": 281,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 246
  }, {
    "from": 281,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 249
  }, {
    "from": 281,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 252
  }, {
    "from": 281,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 255
  }, {
    "from": 281,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 258
  }, {
    "from": 281,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 261
  }, {
    "from": 281,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 264
  }, {
    "from": 281,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 267
  }, {
    "from": 281,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 270
  }, {
    "from": 281,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 273
  }, {
    "from": 295,
    "label": "has",
    "to": 274
  }, {
    "from": 295,
    "label": "has",
    "to": 275
  }, {
    "from": 295,
    "label": "has",
    "to": 276
  }, {
    "from": 281,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 279
  }, {
    "from": 281,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 298,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 302,
    "label": "has",
    "to": 305
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 299
  }, {
    "from": 307,
    "label": "has",
    "to": 300
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 303
  }, {
    "from": 308,
    "label": "has",
    "to": 304
  }, {
    "from": 306,
    "label": "has",
    "to": 309
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 313,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 311
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 314
  }, {
    "from": 319,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 317
  }, {
    "from": 319,
    "label": "has",
    "to": 323
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 234
  }, {
    "from": 325,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 237
  }, {
    "from": 325,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 240
  }, {
    "from": 325,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 243
  }, {
    "from": 325,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 246
  }, {
    "from": 325,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 249
  }, {
    "from": 325,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 252
  }, {
    "from": 325,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 255
  }, {
    "from": 325,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 258
  }, {
    "from": 325,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 261
  }, {
    "from": 325,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 264
  }, {
    "from": 325,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 267
  }, {
    "from": 325,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 270
  }, {
    "from": 325,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 273
  }, {
    "from": 295,
    "label": "has",
    "to": 274
  }, {
    "from": 295,
    "label": "has",
    "to": 275
  }, {
    "from": 295,
    "label": "has",
    "to": 276
  }, {
    "from": 325,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 279
  }, {
    "from": 324,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 299
  }, {
    "from": 307,
    "label": "has",
    "to": 300
  }, {
    "from": 326,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 303
  }, {
    "from": 308,
    "label": "has",
    "to": 304
  }, {
    "from": 324,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 311
  }, {
    "from": 327,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 314
  }, {
    "from": 327,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 317
  }, {
    "from": 324,
    "label": "has",
    "to": 328
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 35
  }, {
    "from": 329,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 38
  }, {
    "from": 331,
    "label": "has",
    "to": 39
  }, {
    "from": 329,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 42
  }, {
    "from": 329,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 45
  }, {
    "from": 329,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 48
  }, {
    "from": 329,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 51
  }, {
    "from": 329,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 54
  }, {
    "from": 329,
    "label": "has",
    "to": 337
  }, {
    "from": 337,
    "label": "has",
    "to": 57
  }, {
    "from": 337,
    "label": "has",
    "to": 58
  }, {
    "from": 329,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 61
  }, {
    "from": 329,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 64
  }, {
    "from": 329,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 67
  }, {
    "from": 329,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 70
  }, {
    "from": 341,
    "label": "has",
    "to": 71
  }, {
    "from": 329,
    "label": "has",
    "to": 342
  }, {
    "from": 342,
    "label": "has",
    "to": 74
  }, {
    "from": 329,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 77
  }, {
    "from": 329,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 80
  }, {
    "from": 344,
    "label": "has",
    "to": 81
  }, {
    "from": 344,
    "label": "has",
    "to": 82
  }, {
    "from": 329,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 85
  }, {
    "from": 329,
    "label": "has",
    "to": 346
  }, {
    "from": 346,
    "label": "has",
    "to": 88
  }, {
    "from": 346,
    "label": "has",
    "to": 89
  }, {
    "from": 329,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 92
  }, {
    "from": 329,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 95
  }, {
    "from": 329,
    "label": "has",
    "to": 349
  }, {
    "from": 349,
    "label": "has",
    "to": 98
  }, {
    "from": 329,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 101
  }, {
    "from": 329,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 104
  }, {
    "from": 351,
    "label": "has",
    "to": 105
  }, {
    "from": 329,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 108
  }, {
    "from": 329,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 111
  }, {
    "from": 353,
    "label": "has",
    "to": 112
  }, {
    "from": 329,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 115
  }, {
    "from": 329,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 118
  }, {
    "from": 329,
    "label": "has",
    "to": 356
  }, {
    "from": 356,
    "label": "has",
    "to": 121
  }, {
    "from": 356,
    "label": "has",
    "to": 122
  }, {
    "from": 329,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 125
  }, {
    "from": 329,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 128
  }, {
    "from": 329,
    "label": "has",
    "to": 359
  }, {
    "from": 359,
    "label": "has",
    "to": 131
  }, {
    "from": 359,
    "label": "has",
    "to": 132
  }, {
    "from": 329,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 135
  }, {
    "from": 360,
    "label": "has",
    "to": 136
  }, {
    "from": 329,
    "label": "has",
    "to": 361
  }, {
    "from": 361,
    "label": "has",
    "to": 139
  }, {
    "from": 361,
    "label": "has",
    "to": 140
  }, {
    "from": 329,
    "label": "has",
    "to": 362
  }, {
    "from": 362,
    "label": "has",
    "to": 143
  }, {
    "from": 329,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 146
  }, {
    "from": 329,
    "label": "has",
    "to": 364
  }, {
    "from": 364,
    "label": "has",
    "to": 149
  }, {
    "from": 329,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 152
  }, {
    "from": 329,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 155
  }, {
    "from": 329,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 158
  }, {
    "from": 367,
    "label": "has",
    "to": 159
  }, {
    "from": 367,
    "label": "has",
    "to": 160
  }, {
    "from": 367,
    "label": "has",
    "to": 161
  }, {
    "from": 367,
    "label": "has",
    "to": 162
  }, {
    "from": 329,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 165
  }, {
    "from": 329,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 168
  }, {
    "from": 329,
    "label": "has",
    "to": 370
  }, {
    "from": 370,
    "label": "has",
    "to": 196
  }, {
    "from": 370,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 171
  }, {
    "from": 197,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 370,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 176
  }, {
    "from": 370,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 179
  }, {
    "from": 199,
    "label": "has",
    "to": 180
  }, {
    "from": 199,
    "label": "has",
    "to": 181
  }, {
    "from": 199,
    "label": "has",
    "to": 182
  }, {
    "from": 199,
    "label": "has",
    "to": 183
  }, {
    "from": 199,
    "label": "has",
    "to": 184
  }, {
    "from": 199,
    "label": "has",
    "to": 185
  }, {
    "from": 199,
    "label": "has",
    "to": 186
  }, {
    "from": 199,
    "label": "has",
    "to": 187
  }, {
    "from": 199,
    "label": "has",
    "to": 188
  }, {
    "from": 199,
    "label": "has",
    "to": 189
  }, {
    "from": 199,
    "label": "has",
    "to": 181
  }, {
    "from": 199,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 199,
    "label": "has",
    "to": 190
  }, {
    "from": 199,
    "label": "has",
    "to": 191
  }, {
    "from": 199,
    "label": "has",
    "to": 191
  }, {
    "from": 199,
    "label": "has",
    "to": 192
  }, {
    "from": 199,
    "label": "has",
    "to": 181
  }, {
    "from": 199,
    "label": "has",
    "to": 193
  }, {
    "from": 199,
    "label": "has",
    "to": 181
  }, {
    "from": 329,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 371,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 202
  }, {
    "from": 329,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 205
  }, {
    "from": 329,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 208
  }, {
    "from": 329,
    "label": "has",
    "to": 376
  }, {
    "from": 376,
    "label": "has",
    "to": 211
  }, {
    "from": 376,
    "label": "has",
    "to": 212
  }, {
    "from": 329,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 215
  }, {
    "from": 329,
    "label": "has",
    "to": 378
  }, {
    "from": 378,
    "label": "has",
    "to": 218
  }, {
    "from": 378,
    "label": "has",
    "to": 219
  }, {
    "from": 378,
    "label": "has",
    "to": 220
  }, {
    "from": 378,
    "label": "has",
    "to": 221
  }, {
    "from": 329,
    "label": "has",
    "to": 379
  }, {
    "from": 379,
    "label": "has",
    "to": 224
  }, {
    "from": 379,
    "label": "has",
    "to": 225
  }, {
    "from": 329,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 228
  }, {
    "from": 329,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 231
  }, {
    "from": 329,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 234
  }, {
    "from": 325,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 237
  }, {
    "from": 325,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 240
  }, {
    "from": 325,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 243
  }, {
    "from": 325,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 246
  }, {
    "from": 325,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 249
  }, {
    "from": 325,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 252
  }, {
    "from": 325,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 255
  }, {
    "from": 325,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 258
  }, {
    "from": 325,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 261
  }, {
    "from": 325,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 264
  }, {
    "from": 325,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 267
  }, {
    "from": 325,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 270
  }, {
    "from": 325,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 273
  }, {
    "from": 295,
    "label": "has",
    "to": 274
  }, {
    "from": 295,
    "label": "has",
    "to": 275
  }, {
    "from": 295,
    "label": "has",
    "to": 276
  }, {
    "from": 325,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 279
  }, {
    "from": 382,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 299
  }, {
    "from": 307,
    "label": "has",
    "to": 300
  }, {
    "from": 326,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 303
  }, {
    "from": 308,
    "label": "has",
    "to": 304
  }, {
    "from": 382,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 311
  }, {
    "from": 327,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 314
  }, {
    "from": 327,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 317
  }, {
    "from": 329,
    "label": "has",
    "to": 383
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 384,
    "label": "calls",
    "to": 11
  }, {
    "from": 28,
    "label": "calls",
    "to": 390
  }, {
    "from": 384,
    "label": "calls",
    "to": 402
  }, {
    "from": 384,
    "label": "calls",
    "to": 402
  }, {
    "from": 384,
    "label": "calls",
    "to": 402
  }, {
    "from": 384,
    "label": "calls",
    "to": 22
  }, {
    "from": 384,
    "label": "calls",
    "to": 22
  }, {
    "from": 384,
    "label": "calls",
    "to": 22
  }, {
    "from": 384,
    "label": "calls",
    "to": 22
  }, {
    "from": 384,
    "label": "calls",
    "to": 22
  }, {
    "from": 384,
    "label": "calls",
    "to": 22
  }, {
    "from": 384,
    "label": "calls",
    "to": 22
  }, {
    "from": 384,
    "label": "calls",
    "to": 22
  }, {
    "from": 11,
    "label": "calls",
    "to": 392
  }, {
    "from": 384,
    "label": "calls",
    "to": 392
  }, {
    "from": 22,
    "label": "calls",
    "to": 391
  }, {
    "from": 384,
    "label": "calls",
    "to": 393
  }, {
    "from": 28,
    "label": "calls",
    "to": 393
  }, {
    "from": 11,
    "label": "calls",
    "to": 401
  }, {
    "from": 28,
    "label": "calls",
    "to": 404
  }, {
    "from": 384,
    "label": "calls",
    "to": 28
  }, {
    "from": 384,
    "label": "calls",
    "to": 28
  }, {
    "from": 384,
    "label": "calls",
    "to": 28
  }, {
    "from": 384,
    "label": "calls",
    "to": 9
  }, {
    "from": 384,
    "label": "calls",
    "to": 9
  }, {
    "from": 384,
    "label": "calls",
    "to": 9
  }, {
    "from": 384,
    "label": "calls",
    "to": 389
  }, {
    "from": 384,
    "label": "calls",
    "to": 406
  }, {
    "from": 384,
    "label": "calls",
    "to": 385
  }, {
    "from": 11,
    "label": "calls",
    "to": 385
  }, {
    "from": 384,
    "label": "calls",
    "to": 398
  }, {
    "from": 384,
    "label": "calls",
    "to": 398
  }, {
    "from": 384,
    "label": "calls",
    "to": 398
  }, {
    "from": 384,
    "label": "calls",
    "to": 398
  }, {
    "from": 11,
    "label": "calls",
    "to": 407
  }, {
    "from": 384,
    "label": "calls",
    "to": 407
  }, {
    "from": 384,
    "label": "calls",
    "to": 386
  }, {
    "from": 384,
    "label": "calls",
    "to": 403
  }, {
    "from": 384,
    "label": "calls",
    "to": 397
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 405
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 384,
    "label": "calls",
    "to": 394
  }, {
    "from": 28,
    "label": "calls",
    "to": 388
  }, {
    "from": 384,
    "label": "calls",
    "to": 388
  }, {
    "from": 384,
    "label": "calls",
    "to": 388
  }, {
    "from": 22,
    "label": "calls",
    "to": 399
  }, {
    "from": 384,
    "label": "calls",
    "to": 387
  }, {
    "from": 384,
    "label": "calls",
    "to": 396
  }, {
    "from": 384,
    "label": "calls",
    "to": 395
  }, {
    "from": 384,
    "label": "calls",
    "to": 395
  }, {
    "from": 384,
    "label": "calls",
    "to": 395
  }, {
    "from": 384,
    "label": "calls",
    "to": 400
  }, {
    "from": 384,
    "label": "calls",
    "to": 400
  }, {
    "from": 384,
    "label": "calls",
    "to": 400
  }, {
    "from": 384,
    "label": "calls",
    "to": 400
  }, {
    "from": 384,
    "label": "calls",
    "to": 400
  }, {
    "from": 384,
    "label": "calls",
    "to": 400
  }, {
    "from": 384,
    "label": "calls",
    "to": 5
  }, {
    "from": 384,
    "label": "calls",
    "to": 5
  }, {
    "from": 384,
    "label": "calls",
    "to": 5
  }, {
    "from": 384,
    "label": "calls",
    "to": 5
  }, {
    "from": 384,
    "label": "calls",
    "to": 5
  }, {
    "from": 384,
    "label": "calls",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 384
  }, {
    "from": 384,
    "label": "declares",
    "to": 5
  }, {
    "from": 384,
    "label": "declares",
    "to": 9
  }, {
    "from": 384,
    "label": "declares",
    "to": 11
  }, {
    "from": 384,
    "label": "declares",
    "to": 22
  }, {
    "from": 384,
    "label": "declares",
    "to": 28
  }, {
    "from": 384,
    "label": "declares",
    "to": 34
  }, {
    "from": 384,
    "label": "declares",
    "to": 37
  }, {
    "from": 384,
    "label": "declares",
    "to": 41
  }, {
    "from": 384,
    "label": "declares",
    "to": 44
  }, {
    "from": 384,
    "label": "declares",
    "to": 47
  }, {
    "from": 384,
    "label": "declares",
    "to": 50
  }, {
    "from": 384,
    "label": "declares",
    "to": 53
  }, {
    "from": 384,
    "label": "declares",
    "to": 56
  }, {
    "from": 384,
    "label": "declares",
    "to": 60
  }, {
    "from": 384,
    "label": "declares",
    "to": 63
  }, {
    "from": 384,
    "label": "declares",
    "to": 66
  }, {
    "from": 384,
    "label": "declares",
    "to": 69
  }, {
    "from": 384,
    "label": "declares",
    "to": 73
  }, {
    "from": 384,
    "label": "declares",
    "to": 76
  }, {
    "from": 384,
    "label": "declares",
    "to": 79
  }, {
    "from": 384,
    "label": "declares",
    "to": 84
  }, {
    "from": 384,
    "label": "declares",
    "to": 87
  }, {
    "from": 384,
    "label": "declares",
    "to": 91
  }, {
    "from": 384,
    "label": "declares",
    "to": 94
  }, {
    "from": 384,
    "label": "declares",
    "to": 97
  }, {
    "from": 384,
    "label": "declares",
    "to": 100
  }, {
    "from": 384,
    "label": "declares",
    "to": 103
  }, {
    "from": 384,
    "label": "declares",
    "to": 107
  }, {
    "from": 384,
    "label": "declares",
    "to": 110
  }, {
    "from": 384,
    "label": "declares",
    "to": 114
  }, {
    "from": 384,
    "label": "declares",
    "to": 117
  }, {
    "from": 384,
    "label": "declares",
    "to": 120
  }, {
    "from": 384,
    "label": "declares",
    "to": 124
  }, {
    "from": 384,
    "label": "declares",
    "to": 127
  }, {
    "from": 384,
    "label": "declares",
    "to": 130
  }, {
    "from": 384,
    "label": "declares",
    "to": 134
  }, {
    "from": 384,
    "label": "declares",
    "to": 138
  }, {
    "from": 384,
    "label": "declares",
    "to": 142
  }, {
    "from": 384,
    "label": "declares",
    "to": 145
  }, {
    "from": 384,
    "label": "declares",
    "to": 148
  }, {
    "from": 384,
    "label": "declares",
    "to": 151
  }, {
    "from": 384,
    "label": "declares",
    "to": 154
  }, {
    "from": 384,
    "label": "declares",
    "to": 157
  }, {
    "from": 384,
    "label": "declares",
    "to": 164
  }, {
    "from": 384,
    "label": "declares",
    "to": 167
  }, {
    "from": 384,
    "label": "declares",
    "to": 170
  }, {
    "from": 384,
    "label": "declares",
    "to": 175
  }, {
    "from": 384,
    "label": "declares",
    "to": 178
  }, {
    "from": 384,
    "label": "declares",
    "to": 195
  }, {
    "from": 384,
    "label": "declares",
    "to": 201
  }, {
    "from": 384,
    "label": "declares",
    "to": 204
  }, {
    "from": 384,
    "label": "declares",
    "to": 207
  }, {
    "from": 384,
    "label": "declares",
    "to": 210
  }, {
    "from": 384,
    "label": "declares",
    "to": 214
  }, {
    "from": 384,
    "label": "declares",
    "to": 217
  }, {
    "from": 384,
    "label": "declares",
    "to": 223
  }, {
    "from": 384,
    "label": "declares",
    "to": 227
  }, {
    "from": 384,
    "label": "declares",
    "to": 230
  }, {
    "from": 384,
    "label": "declares",
    "to": 233
  }, {
    "from": 384,
    "label": "declares",
    "to": 236
  }, {
    "from": 384,
    "label": "declares",
    "to": 239
  }, {
    "from": 384,
    "label": "declares",
    "to": 242
  }, {
    "from": 384,
    "label": "declares",
    "to": 245
  }, {
    "from": 384,
    "label": "declares",
    "to": 248
  }, {
    "from": 384,
    "label": "declares",
    "to": 251
  }, {
    "from": 384,
    "label": "declares",
    "to": 254
  }, {
    "from": 384,
    "label": "declares",
    "to": 257
  }, {
    "from": 384,
    "label": "declares",
    "to": 260
  }, {
    "from": 384,
    "label": "declares",
    "to": 263
  }, {
    "from": 384,
    "label": "declares",
    "to": 266
  }, {
    "from": 384,
    "label": "declares",
    "to": 269
  }, {
    "from": 384,
    "label": "declares",
    "to": 272
  }, {
    "from": 384,
    "label": "declares",
    "to": 278
  }, {
    "from": 384,
    "label": "declares",
    "to": 281
  }, {
    "from": 384,
    "label": "declares",
    "to": 298
  }, {
    "from": 384,
    "label": "declares",
    "to": 302
  }, {
    "from": 384,
    "label": "declares",
    "to": 306
  }, {
    "from": 384,
    "label": "declares",
    "to": 310
  }, {
    "from": 384,
    "label": "declares",
    "to": 313
  }, {
    "from": 384,
    "label": "declares",
    "to": 316
  }, {
    "from": 384,
    "label": "declares",
    "to": 319
  }, {
    "from": 384,
    "label": "declares",
    "to": 324
  }, {
    "from": 384,
    "label": "declares",
    "to": 329
  }, {
    "from": 1,
    "label": "contains",
    "to": 408
  }, {
    "from": 1,
    "label": "contains",
    "to": 409
  }, {
    "from": 408,
    "label": "initializes",
    "to": 410
  }, {
    "from": 410,
    "label": "assigns",
    "to": 411
  }, {
    "from": 409,
    "label": "initializes",
    "to": 412
  }, {
    "from": 412,
    "label": "requires",
    "to": 4
  }, {
    "from": 409,
    "label": "initializes",
    "to": 413
  }, {
    "from": 413,
    "label": "requires",
    "to": 3
  }, {
    "from": 409,
    "label": "initializes",
    "to": 414
  }, {
    "from": 414,
    "label": "requires",
    "to": 2
  }, {
    "from": 197,
    "label": "hasArgument",
    "to": 170
  }, {
    "from": 198,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 178
  }, {
    "from": 282,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 283,
    "label": "hasArgument",
    "to": 236
  }, {
    "from": 284,
    "label": "hasArgument",
    "to": 239
  }, {
    "from": 285,
    "label": "hasArgument",
    "to": 242
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 245
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 251
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 254
  }, {
    "from": 290,
    "label": "hasArgument",
    "to": 257
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 263
  }, {
    "from": 293,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 294,
    "label": "hasArgument",
    "to": 269
  }, {
    "from": 295,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 296,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 298
  }, {
    "from": 308,
    "label": "hasArgument",
    "to": 302
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 310
  }, {
    "from": 321,
    "label": "hasArgument",
    "to": 313
  }, {
    "from": 322,
    "label": "hasArgument",
    "to": 316
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 236
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 239
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 242
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 245
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 251
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 254
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 257
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 263
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 269
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 325,
    "label": "hasArgument",
    "to": 281
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 298
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 302
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 306
  }, {
    "from": 327,
    "label": "hasArgument",
    "to": 310
  }, {
    "from": 327,
    "label": "hasArgument",
    "to": 313
  }, {
    "from": 327,
    "label": "hasArgument",
    "to": 316
  }, {
    "from": 327,
    "label": "hasArgument",
    "to": 319
  }, {
    "from": 330,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 331,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 332,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 333,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 334,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 335,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 336,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 337,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 338,
    "label": "hasArgument",
    "to": 60
  }, {
    "from": 339,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 340,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 341,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 342,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 343,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 344,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 345,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 346,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 347,
    "label": "hasArgument",
    "to": 91
  }, {
    "from": 348,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 350,
    "label": "hasArgument",
    "to": 100
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 103
  }, {
    "from": 352,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 353,
    "label": "hasArgument",
    "to": 110
  }, {
    "from": 354,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 117
  }, {
    "from": 356,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 357,
    "label": "hasArgument",
    "to": 124
  }, {
    "from": 358,
    "label": "hasArgument",
    "to": 127
  }, {
    "from": 359,
    "label": "hasArgument",
    "to": 130
  }, {
    "from": 360,
    "label": "hasArgument",
    "to": 134
  }, {
    "from": 361,
    "label": "hasArgument",
    "to": 138
  }, {
    "from": 362,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 363,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 364,
    "label": "hasArgument",
    "to": 148
  }, {
    "from": 365,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 366,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 367,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 368,
    "label": "hasArgument",
    "to": 164
  }, {
    "from": 369,
    "label": "hasArgument",
    "to": 167
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 170
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 175
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 178
  }, {
    "from": 370,
    "label": "hasArgument",
    "to": 195
  }, {
    "from": 373,
    "label": "hasArgument",
    "to": 201
  }, {
    "from": 374,
    "label": "hasArgument",
    "to": 204
  }, {
    "from": 375,
    "label": "hasArgument",
    "to": 207
  }, {
    "from": 376,
    "label": "hasArgument",
    "to": 210
  }, {
    "from": 377,
    "label": "hasArgument",
    "to": 214
  }, {
    "from": 378,
    "label": "hasArgument",
    "to": 217
  }, {
    "from": 379,
    "label": "hasArgument",
    "to": 223
  }, {
    "from": 380,
    "label": "hasArgument",
    "to": 227
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 230
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 233
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 236
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 239
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 242
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 245
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 248
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 251
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 254
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 257
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 260
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 263
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 266
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 269
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 272
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 278
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 281
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 298
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 302
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 306
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 310
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 313
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 316
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 319
  }, {
    "from": 382,
    "label": "hasArgument",
    "to": 324
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cli_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "helper",
    "type": "module"
  }, {
    "id": 3,
    "text": "multithreading",
    "type": "module"
  }, {
    "id": 4,
    "text": "utils",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function quote(argument)\r\n   -- Do not worry about special characters too much, just quote.\r\n   local mark = utils.is_windows and '\"' or \"'\"\r\n   return mark .. argument .. mark\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local mark = utils.is_windows and '\"' or \"'\"",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function norm_output(output)\r\n   -- Replace \"/\" with native slashes, except when it's used to separate\r\n   -- warning and error numbers on the last line.\r\n   return output:gsub(\"(%w)/(%w)\", \"%1\" .. utils.dir_sep .. \"%2\")\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function get_output(command, wd, color)\r\n   if color then\r\n      if utils.is_windows and not os.getenv(\"ANSICON\") then\r\n         pending(\"uses terminal colors\")\r\n      end\r\n   else\r\n      command = \"--no-color \" .. command\r\n   end\r\n\r\n   command = (\"%s %s 2>&1\"):format(helper.luacheck_command(wd), command)\r\n   local handler = io.popen(command)\r\n   local output = handler:read(\"*a\")\r\n   handler:close()\r\n\r\n   if color then\r\n      return (output:gsub(\"\\27%[%d+m\", \"\\27\"):gsub(\"\\27+\", \"#\"))\r\n   else\r\n      return output\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if color then\r\n      if utils.is_windows and not os.getenv(\"ANSICON\") then\r\n         pending(\"uses terminal colors\")\r\n      end\r\n   else\r\n      command = \"--no-color \" .. command\r\n   end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "if utils.is_windows and not os.getenv(\"ANSICON\") then\r\n         pending(\"uses terminal colors\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "pending(\"uses terminal colors\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "command = \"--no-color \" .. command",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "command = (\"%s %s 2>&1\"):format(helper.luacheck_command(wd), command)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local handler = io.popen(command)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local output = handler:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "handler:close()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "if color then\r\n      return (output:gsub(\"\\27%[%d+m\", \"\\27\"):gsub(\"\\27+\", \"#\"))\r\n   else\r\n      return output\r\n   end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function get_exitcode(command)\r\n   local nosql_db = package.config:sub(1, 1) == \"/\" and \"/dev/null\" or \"NUL\"\r\n   local code51, _, code52plus = os.execute(luacheck_cmd..\" \"..command..\" > \"..nosql_db..\" 2>&1\")\r\n\r\n   if _VERSION:find \"5.1\" then\r\n      if code51 >= 256 then\r\n         return math.floor(code51/256)\r\n      else\r\n         return code51\r\n      end\r\n   else\r\n      return code52plus\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local nosql_db = package.config:sub(1, 1) == \"/\" and \"/dev/null\" or \"NUL\"",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local code51, _, code52plus = os.execute(luacheck_cmd..\" \"..command..\" > \"..nosql_db..\" 2>&1\")",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if _VERSION:find \"5.1\" then\r\n      if code51 >= 256 then\r\n         return math.floor(code51/256)\r\n      else\r\n         return code51\r\n      end\r\n   else\r\n      return code52plus\r\n   end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if code51 >= 256 then\r\n         return math.floor(code51/256)\r\n      else\r\n         return code51\r\n      end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function write_new_cache(version)\r\n            local fh = io.open(tmpname, \"wb\")\r\n            assert.userdata(fh)\r\n            fh:write(([[\r\n%s\r\nspec/samples/python_code.lua\r\n%s\r\nreturn {{\"111\", \"global\", 1, 1}, {\"321\", \"uninit\", 6, 8}}\r\nspec/samples/good_code.lua\r\n%s\r\nreturn {{\"011\",[3]=5,[4]=7,[23]=\"this code is actually bad\"}}\r\nspec/samples/bad_code.lua\r\n%s\r\nreturn {}]]):format(version, python_mtime, good_mtime, tostring(tonumber(bad_mtime) - 1)))\r\n            fh:close()\r\n         end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local fh = io.open(tmpname, \"wb\")",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "assert.userdata(fh)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "fh:write(([[\r\n%s\r\nspec/samples/python_code.lua\r\n%s\r\nreturn {{\"111\", \"global\", 1, 1}, {\"321\", \"uninit\", 6, 8}}\r\nspec/samples/good_code.lua\r\n%s\r\nreturn {{\"011\",[3]=5,[4]=7,[23]=\"this code is actually bad\"}}\r\nspec/samples/bad_code.lua\r\n%s\r\nreturn {}]]):format(version, python_mtime, good_mtime, tostring(tonumber(bad_mtime) - 1)))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n      assert.equal(0, get_exitcode \"--help\")\r\n   end",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert.equal(0, get_exitcode \"--help\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/good_code.lua --no-config\")\r\n      assert.equal(0, get_exitcode \"spec/samples/good_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 38,
    "text": "assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/good_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert.equal(0, get_exitcode \"spec/samples/good_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"./spec/samples/good_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 42,
    "text": "assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"./spec/samples/good_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n      assert.equal([[\r\nChecking new.lua                                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/good_code.lua --no-config --filename new.lua\")\r\n   end",
    "type": "function"
  }, {
    "id": 45,
    "text": "assert.equal([[\r\nChecking new.lua                                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/good_code.lua --no-config --filename new.lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config --exclude-files \" .. quote(\"**/??d_code.lua\")))\r\n   end",
    "type": "function"
  }, {
    "id": 48,
    "text": "assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config --exclude-files \" .. quote(\"**/??d_code.lua\")))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config -qq --include-files \" .. quote(\"**/??d_code.lua\")))\r\n   end",
    "type": "function"
  }, {
    "id": 51,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config -qq --include-files \" .. quote(\"**/??d_code.lua\")))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config --include-files \" .. quote(\"**/*.lua\") .. \" --exclude-files \" .. quote(\"**/??d_code.lua\")))\r\n   end",
    "type": "function"
  }, {
    "id": 54,
    "text": "assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config --include-files \" .. quote(\"**/*.lua\") .. \" --exclude-files \" .. quote(\"**/??d_code.lua\")))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --no-config\")\r\n      assert.equal(1, get_exitcode \"spec/samples/bad_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 57,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert.equal(1, get_exitcode \"spec/samples/bad_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function()\r\n      assert.equal([[\r\nCritical error: Invalid pattern '^%1foo$'\r\n]], get_output \"spec/samples/bad_code.lua --ignore %1foo --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 61,
    "text": "assert.equal([[\r\nCritical error: Invalid pattern '^%1foo$'\r\n]], get_output \"spec/samples/bad_code.lua --ignore %1foo --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function()\r\n      assert.equal([[\r\nChecking stdin                                    5 warnings\r\n\r\n    stdin:3:16: unused function 'helper'\r\n    stdin:3:23: unused variable length argument\r\n    stdin:7:10: setting non-standard global variable 'embrace'\r\n    stdin:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    stdin:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc < spec/samples/bad_code.lua\")\r\n   end",
    "type": "function"
  }, {
    "id": 64,
    "text": "assert.equal([[\r\nChecking stdin                                    5 warnings\r\n\r\n    stdin:3:16: unused function 'helper'\r\n    stdin:3:23: unused variable length argument\r\n    stdin:7:10: setting non-standard global variable 'embrace'\r\n    stdin:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    stdin:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc < spec/samples/bad_code.lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               #OK#\r\nChecking spec/samples/bad_code.lua                #5 warnings#\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function #helper#\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable #embrace#\r\n    spec/samples/bad_code.lua:8:10: variable #opt# was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable #hepler#\r\n\r\nTotal: #5# warnings / #0# errors in 2 files\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config\", nil, true))\r\n   end",
    "type": "function"
  }, {
    "id": 67,
    "text": "assert.equal([[\r\nChecking spec/samples/good_code.lua               #OK#\r\nChecking spec/samples/bad_code.lua                #5 warnings#\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function #helper#\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable #embrace#\r\n    spec/samples/bad_code.lua:8:10: variable #opt# was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable #hepler#\r\n\r\nTotal: #5# warnings / #0# errors in 2 files\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config\", nil, true))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-q spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n      assert.equal([[\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"-q spec/samples/good_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 70,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-q spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert.equal([[\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"-q spec/samples/good_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\nTotal: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-qq spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\nTotal: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-qq spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function()\r\n      assert.equal([[Total: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-qqq spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 77,
    "text": "assert.equal([[Total: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-qqq spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"-u spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"-g spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"-r spec/samples/bad_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 80,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"-u spec/samples/bad_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"-g spec/samples/bad_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"-r spec/samples/bad_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --globals embrace --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 85,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --globals embrace --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                6 warnings\r\n\r\n    spec/samples/bad_code.lua:1:1: mutating non-standard global variable 'package'\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"--std none spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"--std lua51+lua52+lua53 spec/samples/bad_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 88,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                6 warnings\r\n\r\n    spec/samples/bad_code.lua:1:1: mutating non-standard global variable 'package'\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"--std none spec/samples/bad_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"--std lua51+lua52+lua53 spec/samples/bad_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --ignore embrace opt --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 92,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --ignore embrace opt --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                1 warning\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --only helper --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 95,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                1 warning\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --only helper --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 9 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 98,
    "text": "assert.equal([[\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 9 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_code.lua             4 warnings\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_code.lua --no-unused-args --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 101,
    "text": "assert.equal([[\r\nChecking spec/samples/unused_code.lua             4 warnings\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_code.lua --no-unused-args --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\n    spec/samples/unused_secondaries.lua:3:7: unused variable 'a'\r\n    spec/samples/unused_secondaries.lua:6:7: unused variable 'x'\r\n    spec/samples/unused_secondaries.lua:6:13: unused variable 'z'\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_secondaries.lua --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:6:7: unused variable 'x'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_secondaries.lua -s --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 104,
    "text": "assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\n    spec/samples/unused_secondaries.lua:3:7: unused variable 'a'\r\n    spec/samples/unused_secondaries.lua:6:7: unused variable 'x'\r\n    spec/samples/unused_secondaries.lua:6:13: unused variable 'z'\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_secondaries.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:6:7: unused variable 'x'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_secondaries.lua -s --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/redefined.lua               5 warnings\r\n\r\n    spec/samples/redefined.lua:4:10: shadowing upvalue 'a' on line 1\r\n    spec/samples/redefined.lua:4:13: variable 'self' is never set\r\n    spec/samples/redefined.lua:4:13: variable 'self' was previously defined as an argument on line 3\r\n    spec/samples/redefined.lua:7:13: shadowing definition of variable 'a' on line 4\r\n    spec/samples/redefined.lua:8:32: shadowing upvalue 'self' on line 4\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/redefined.lua --no-self --globals each --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 108,
    "text": "assert.equal([[\r\nChecking spec/samples/redefined.lua               5 warnings\r\n\r\n    spec/samples/redefined.lua:4:10: shadowing upvalue 'a' on line 1\r\n    spec/samples/redefined.lua:4:13: variable 'self' is never set\r\n    spec/samples/redefined.lua:4:13: variable 'self' was previously defined as an argument on line 3\r\n    spec/samples/redefined.lua:7:13: shadowing definition of variable 'a' on line 4\r\n    spec/samples/redefined.lua:8:32: shadowing upvalue 'self' on line 4\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/redefined.lua --no-self --globals each --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nChecking s/samples/absent_code.lua                I/O error\r\n\r\n    s/samples/absent_code.lua: couldn't read: No such file or directory\r\n\r\nTotal: 0 warnings / 1 error in 1 file, couldn't check 1 file\r\n]], get_output \"spec/samples/python_code.lua s/samples/absent_code.lua --no-config\")\r\n      assert.equal(2, get_exitcode \"spec/samples/python_code.lua spec/samples/absent_code.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 111,
    "text": "assert.equal([[\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nChecking s/samples/absent_code.lua                I/O error\r\n\r\n    s/samples/absent_code.lua: couldn't read: No such file or directory\r\n\r\nTotal: 0 warnings / 1 error in 1 file, couldn't check 1 file\r\n]], get_output \"spec/samples/python_code.lua s/samples/absent_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert.equal(2, get_exitcode \"spec/samples/python_code.lua spec/samples/absent_code.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/sample.rockspec --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 115,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/sample.rockspec --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad.rockspec                Syntax error\r\n\r\n    spec/samples/bad.rockspec: rockspec.build is not a table\r\n\r\nTotal: 0 warnings / 0 errors in 0 files, couldn't check 1 file\r\n]], get_output \"spec/samples/bad.rockspec --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 118,
    "text": "assert.equal([[\r\nChecking spec/samples/bad.rockspec                Syntax error\r\n\r\n    spec/samples/bad.rockspec: rockspec.build is not a table\r\n\r\nTotal: 0 warnings / 0 errors in 0 files, couldn't check 1 file\r\n]], get_output \"spec/samples/bad.rockspec --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/defined.lua                 1 warning\r\n\r\n    spec/samples/defined.lua:4:4: accessing undefined variable 'baz'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined.lua spec/samples/defined2.lua -d --no-config\")\r\n\r\n   assert.equal([[\r\nChecking spec/samples/defined2.lua                OK\r\nChecking spec/samples/defined.lua                 1 warning\r\n\r\n    spec/samples/defined.lua:4:4: accessing undefined variable 'baz'\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined2.lua spec/samples/defined.lua -d --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 121,
    "text": "assert.equal([[\r\nChecking spec/samples/defined.lua                 1 warning\r\n\r\n    spec/samples/defined.lua:4:4: accessing undefined variable 'baz'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined.lua spec/samples/defined2.lua -d --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert.equal([[\r\nChecking spec/samples/defined2.lua                OK\r\nChecking spec/samples/defined.lua                 1 warning\r\n\r\n    spec/samples/defined.lua:4:4: accessing undefined variable 'baz'\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined2.lua spec/samples/defined.lua -d --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/defined2.lua                1 warning\r\n\r\n    spec/samples/defined2.lua:1:1: accessing undefined variable 'foo'\r\n\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined2.lua spec/samples/defined3.lua -d -m --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 125,
    "text": "assert.equal([[\r\nChecking spec/samples/defined2.lua                1 warning\r\n\r\n    spec/samples/defined2.lua:1:1: accessing undefined variable 'foo'\r\n\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined2.lua spec/samples/defined3.lua -d -m --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/defined4.lua                2 warnings\r\n\r\n    spec/samples/defined4.lua:1:10: unused global variable 'foo'\r\n    spec/samples/defined4.lua:3:4: setting non-standard global variable 'bar'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined4.lua -t --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 128,
    "text": "assert.equal([[\r\nChecking spec/samples/defined4.lua                2 warnings\r\n\r\n    spec/samples/defined4.lua:1:10: unused global variable 'foo'\r\n    spec/samples/defined4.lua:3:4: setting non-standard global variable 'bar'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined4.lua -t --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                3 warnings\r\n\r\n    spec/samples/defined3.lua:1:1: unused global variable 'foo'\r\n    spec/samples/defined3.lua:2:1: unused global variable 'foo'\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -d --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                1 warning\r\n\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -d --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 131,
    "text": "assert.equal([[\r\nChecking spec/samples/defined3.lua                3 warnings\r\n\r\n    spec/samples/defined3.lua:1:1: unused global variable 'foo'\r\n    spec/samples/defined3.lua:2:1: unused global variable 'foo'\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -d --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "assert.equal([[\r\nChecking spec/samples/defined3.lua                1 warning\r\n\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -d --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -gd --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                1 warning\r\n\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -ud --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 135,
    "text": "assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -gd --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assert.equal([[\r\nChecking spec/samples/defined3.lua                1 warning\r\n\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -ud --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -d --ignore 13 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -d --ignore 13 --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 139,
    "text": "assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -d --ignore 13 --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -d --ignore 13 --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_flow.lua                6 warnings\r\n\r\n    spec/samples/bad_flow.lua:1:28: empty if branch\r\n    spec/samples/bad_flow.lua:6:4: empty do..end block\r\n    spec/samples/bad_flow.lua:12:15: left-hand side of assignment is too long\r\n    spec/samples/bad_flow.lua:16:15: left-hand side of assignment is too short\r\n    spec/samples/bad_flow.lua:21:7: unreachable code\r\n    spec/samples/bad_flow.lua:25:1: loop is executed at most once\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_flow.lua --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 143,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_flow.lua                6 warnings\r\n\r\n    spec/samples/bad_flow.lua:1:28: empty if branch\r\n    spec/samples/bad_flow.lua:6:4: empty do..end block\r\n    spec/samples/bad_flow.lua:12:15: left-hand side of assignment is too long\r\n    spec/samples/bad_flow.lua:16:15: left-hand side of assignment is too short\r\n    spec/samples/bad_flow.lua:21:7: unreachable code\r\n    spec/samples/bad_flow.lua:25:1: loop is executed at most once\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_flow.lua --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/redefined.lua               6 warnings\r\n\r\n    spec/samples/redefined.lua:3:11: unused argument 'self'\r\n    spec/samples/redefined.lua:4:10: shadowing upvalue 'a' on line 1\r\n    spec/samples/redefined.lua:4:13: variable 'self' is never set\r\n    spec/samples/redefined.lua:4:13: variable 'self' was previously defined as an argument on line 3\r\n    spec/samples/redefined.lua:7:13: shadowing definition of variable 'a' on line 4\r\n    spec/samples/redefined.lua:8:32: shadowing upvalue 'self' on line 4\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/redefined.lua --globals each --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 146,
    "text": "assert.equal([[\r\nChecking spec/samples/redefined.lua               6 warnings\r\n\r\n    spec/samples/redefined.lua:3:11: unused argument 'self'\r\n    spec/samples/redefined.lua:4:10: shadowing upvalue 'a' on line 1\r\n    spec/samples/redefined.lua:4:13: variable 'self' is never set\r\n    spec/samples/redefined.lua:4:13: variable 'self' was previously defined as an argument on line 3\r\n    spec/samples/redefined.lua:7:13: shadowing definition of variable 'a' on line 4\r\n    spec/samples/redefined.lua:8:32: shadowing upvalue 'self' on line 4\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/redefined.lua --globals each --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/read_globals.lua            5 warnings\r\n\r\n    spec/samples/read_globals.lua:1:1: setting read-only global variable 'string'\r\n    spec/samples/read_globals.lua:2:1: mutating read-only global variable 'table'\r\n    spec/samples/read_globals.lua:5:1: setting read-only global variable 'bar'\r\n    spec/samples/read_globals.lua:6:1: mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals.lua:6:21: accessing undefined variable 'baz'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals.lua --std=lua52 --globals foo --read-globals bar --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 149,
    "text": "assert.equal([[\r\nChecking spec/samples/read_globals.lua            5 warnings\r\n\r\n    spec/samples/read_globals.lua:1:1: setting read-only global variable 'string'\r\n    spec/samples/read_globals.lua:2:1: mutating read-only global variable 'table'\r\n    spec/samples/read_globals.lua:5:1: setting read-only global variable 'bar'\r\n    spec/samples/read_globals.lua:6:1: mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals.lua:6:21: accessing undefined variable 'baz'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals.lua --std=lua52 --globals foo --read-globals bar --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/read_globals.lua            5 warnings\r\n\r\n    spec/samples/read_globals.lua:1:1: (W121) setting read-only global variable 'string'\r\n    spec/samples/read_globals.lua:2:1: (W122) mutating read-only global variable 'table'\r\n    spec/samples/read_globals.lua:5:1: (W121) setting read-only global variable 'bar'\r\n    spec/samples/read_globals.lua:6:1: (W112) mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals.lua:6:21: (W113) accessing undefined variable 'baz'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals.lua --std=lua52 --globals foo --read-globals bar --codes --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 152,
    "text": "assert.equal([[\r\nChecking spec/samples/read_globals.lua            5 warnings\r\n\r\n    spec/samples/read_globals.lua:1:1: (W121) setting read-only global variable 'string'\r\n    spec/samples/read_globals.lua:2:1: (W122) mutating read-only global variable 'table'\r\n    spec/samples/read_globals.lua:5:1: (W121) setting read-only global variable 'bar'\r\n    spec/samples/read_globals.lua:6:1: (W112) mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals.lua:6:21: (W113) accessing undefined variable 'baz'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals.lua --std=lua52 --globals foo --read-globals bar --codes --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          8 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16-16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4-5: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1-3: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10-10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7-7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10-10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1-17: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4-19: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1-2: empty do..end block\r\n    spec/samples/inline_options.lua:35:10-13: empty if branch\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6-15: expected '=' near '__future__'\r\n\r\nTotal: 8 warnings / 3 errors in 2 files\r\n]], get_output \"spec/samples/inline_options.lua spec/samples/python_code.lua --ranges --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 155,
    "text": "assert.equal([[\r\nChecking spec/samples/inline_options.lua          8 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16-16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4-5: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1-3: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10-10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7-7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10-10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1-17: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4-19: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1-2: empty do..end block\r\n    spec/samples/inline_options.lua:35:10-13: empty if branch\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6-15: expected '=' near '__future__'\r\n\r\nTotal: 8 warnings / 3 errors in 2 files\r\n]], get_output \"spec/samples/inline_options.lua spec/samples/python_code.lua --ranges --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          8 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n    spec/samples/inline_options.lua:35:10: empty if branch\r\n\r\nTotal: 8 warnings / 2 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n\r\nTotal: 7 warnings / 2 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --ignore=542 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\n\r\n    spec/samples/global_inline_options.lua:6:10: unused global variable 'f'\r\n    spec/samples/global_inline_options.lua:7:4: setting non-standard global variable 'baz'\r\n    spec/samples/global_inline_options.lua:18:4: setting non-module global variable 'external'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/global_inline_options.lua --std=lua52 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/read_globals_inline_options.lua 5 warnings\r\n\r\n    spec/samples/read_globals_inline_options.lua:2:10: accessing undefined variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:3:1: setting read-only global variable 'foo'\r\n    spec/samples/read_globals_inline_options.lua:3:11: setting non-standard global variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:3:16: mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:5:1: setting read-only global variable 'foo'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals_inline_options.lua --std=lua52 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/read_globals_inline_options.lua 1 warning\r\n\r\n    spec/samples/read_globals_inline_options.lua:3:16: mutating read-only global variable 'baz'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals_inline_options.lua --std=lua52 --read-globals baz --globals foo --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 158,
    "text": "assert.equal([[\r\nChecking spec/samples/inline_options.lua          8 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n    spec/samples/inline_options.lua:35:10: empty if branch\r\n\r\nTotal: 8 warnings / 2 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "assert.equal([[\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n\r\nTotal: 7 warnings / 2 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --ignore=542 --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "assert.equal([[\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\n\r\n    spec/samples/global_inline_options.lua:6:10: unused global variable 'f'\r\n    spec/samples/global_inline_options.lua:7:4: setting non-standard global variable 'baz'\r\n    spec/samples/global_inline_options.lua:18:4: setting non-module global variable 'external'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/global_inline_options.lua --std=lua52 --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "assert.equal([[\r\nChecking spec/samples/read_globals_inline_options.lua 5 warnings\r\n\r\n    spec/samples/read_globals_inline_options.lua:2:10: accessing undefined variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:3:1: setting read-only global variable 'foo'\r\n    spec/samples/read_globals_inline_options.lua:3:11: setting non-standard global variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:3:16: mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:5:1: setting read-only global variable 'foo'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals_inline_options.lua --std=lua52 --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "assert.equal([[\r\nChecking spec/samples/read_globals_inline_options.lua 1 warning\r\n\r\n    spec/samples/read_globals_inline_options.lua:3:16: mutating read-only global variable 'baz'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals_inline_options.lua --std=lua52 --read-globals baz --globals foo --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/custom_std_inline_options.lua 2 warnings\r\n\r\n    spec/samples/custom_std_inline_options.lua:3:1: accessing undefined variable 'tostring'\r\n    spec/samples/custom_std_inline_options.lua:6:25: accessing undefined variable 'it'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/custom_std_inline_options.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n   end",
    "type": "function"
  }, {
    "id": 165,
    "text": "assert.equal([[\r\nChecking spec/samples/custom_std_inline_options.lua 2 warnings\r\n\r\n    spec/samples/custom_std_inline_options.lua:3:1: accessing undefined variable 'tostring'\r\n    spec/samples/custom_std_inline_options.lua:6:25: accessing undefined variable 'it'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/custom_std_inline_options.lua --config=spec/configs/custom_stds_config.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          26 warnings\r\n\r\n    spec/samples/inline_options.lua:3:1: accessing undefined variable 'foo'\r\n    spec/samples/inline_options.lua:4:1: accessing undefined variable 'bar'\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:6:18: unused argument 'a'\r\n    spec/samples/inline_options.lua:8:4: accessing undefined variable 'foo'\r\n    spec/samples/inline_options.lua:9:4: accessing undefined variable 'bar'\r\n    spec/samples/inline_options.lua:10:4: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:11:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:18:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:18:7: variable 'f' was previously defined on line 6\r\n    spec/samples/inline_options.lua:20:7: unused variable 'g'\r\n    spec/samples/inline_options.lua:22:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:22:7: variable 'f' was previously defined on line 18\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:22:10: variable 'g' was previously defined on line 20\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:7: variable 'f' was previously defined on line 22\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:10: variable 'g' was previously defined on line 22\r\n    spec/samples/inline_options.lua:27:16: unused function 'f'\r\n    spec/samples/inline_options.lua:27:16: variable 'f' was previously defined on line 24\r\n    spec/samples/inline_options.lua:32:1: empty do..end block\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n    spec/samples/inline_options.lua:35:10: empty if branch\r\n\r\nTotal: 26 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --no-inline --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 168,
    "text": "assert.equal([[\r\nChecking spec/samples/inline_options.lua          26 warnings\r\n\r\n    spec/samples/inline_options.lua:3:1: accessing undefined variable 'foo'\r\n    spec/samples/inline_options.lua:4:1: accessing undefined variable 'bar'\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:6:18: unused argument 'a'\r\n    spec/samples/inline_options.lua:8:4: accessing undefined variable 'foo'\r\n    spec/samples/inline_options.lua:9:4: accessing undefined variable 'bar'\r\n    spec/samples/inline_options.lua:10:4: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:11:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:18:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:18:7: variable 'f' was previously defined on line 6\r\n    spec/samples/inline_options.lua:20:7: unused variable 'g'\r\n    spec/samples/inline_options.lua:22:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:22:7: variable 'f' was previously defined on line 18\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:22:10: variable 'g' was previously defined on line 20\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:7: variable 'f' was previously defined on line 22\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:10: variable 'g' was previously defined on line 22\r\n    spec/samples/inline_options.lua:27:16: unused function 'f'\r\n    spec/samples/inline_options.lua:27:16: variable 'f' was previously defined on line 24\r\n    spec/samples/inline_options.lua:32:1: empty do..end block\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n    spec/samples/inline_options.lua:35:10: empty if branch\r\n\r\nTotal: 26 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --no-inline --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 171,
    "text": "tmpname = os.tmpname()",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "tmpname = os.getenv(\"TEMP\") .. tmpname",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function()\r\n         os.remove(tmpname)\r\n      end",
    "type": "function"
  }, {
    "id": 176,
    "text": "os.remove(tmpname)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function()\r\n         local normal_output = [[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]]\r\n\r\n         local mocked_output = [[\r\nChecking spec/samples/good_code.lua               1 error\r\n\r\n    spec/samples/good_code.lua:5:7: this code is actually bad\r\n\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             2 warnings\r\n\r\n    spec/samples/python_code.lua:1:1: setting non-standard global variable 'global'\r\n    spec/samples/python_code.lua:6:8: accessing uninitialized variable 'uninit'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 16 warnings / 1 error in 4 files\r\n]]\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local cache = utils.read_file(tmpname)\r\n         assert.string(cache)\r\n         local format_version, good_mtime, bad_mtime, python_mtime = cache:match([[\r\n\r\n(%d+)\r\nspec/samples/good_code.lua\r\n(%d+)\r\nreturn {}\r\nspec/samples/bad_code.lua\r\n(%d+)\r\nreturn {{\"112\",\"package\",1,1,7},{\"211\",\"helper\",3,16,21,%[10%]=true},{\"212\",\"...\",3,23,25},{\"111\",\"embrace\",7,10,16,%[12%]=true},{\"412\",\"opt\",8,10,12,7,18},{\"113\",\"hepler\",9,11,16}}\r\nspec/samples/python_code.lua\r\n(%d+)\r\nreturn {{\"011\",%[3%]=1,%[4%]=6,%[5%]=15,%[23%]=\"expected '=' near '__future__'\"}}\r\n]])\r\n\r\n         format_version = tonumber(format_version)\r\n         assert.number(format_version)\r\n         assert.string(good_mtime)\r\n         assert.string(bad_mtime)\r\n         assert.string(python_mtime)\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local function write_new_cache(version)\r\n            local fh = io.open(tmpname, \"wb\")\r\n            assert.userdata(fh)\r\n            fh:write(([[\r\n%s\r\nspec/samples/python_code.lua\r\n%s\r\nreturn {{\"111\", \"global\", 1, 1}, {\"321\", \"uninit\", 6, 8}}\r\nspec/samples/good_code.lua\r\n%s\r\nreturn {{\"011\",[3]=5,[4]=7,[23]=\"this code is actually bad\"}}\r\nspec/samples/bad_code.lua\r\n%s\r\nreturn {}]]):format(version, python_mtime, good_mtime, tostring(tonumber(bad_mtime) - 1)))\r\n            fh:close()\r\n         end\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version + 1))\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\")\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n      end",
    "type": "function"
  }, {
    "id": 179,
    "text": "local normal_output = [[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "local mocked_output = [[\r\nChecking spec/samples/good_code.lua               1 error\r\n\r\n    spec/samples/good_code.lua:5:7: this code is actually bad\r\n\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             2 warnings\r\n\r\n    spec/samples/python_code.lua:1:1: setting non-standard global variable 'global'\r\n    spec/samples/python_code.lua:6:8: accessing uninitialized variable 'uninit'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 16 warnings / 1 error in 4 files\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "local cache = utils.read_file(tmpname)",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "assert.string(cache)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "local format_version, good_mtime, bad_mtime, python_mtime = cache:match([[\r\n\r\n(%d+)\r\nspec/samples/good_code.lua\r\n(%d+)\r\nreturn {}\r\nspec/samples/bad_code.lua\r\n(%d+)\r\nreturn {{\"112\",\"package\",1,1,7},{\"211\",\"helper\",3,16,21,%[10%]=true},{\"212\",\"...\",3,23,25},{\"111\",\"embrace\",7,10,16,%[12%]=true},{\"412\",\"opt\",8,10,12,7,18},{\"113\",\"hepler\",9,11,16}}\r\nspec/samples/python_code.lua\r\n(%d+)\r\nreturn {{\"011\",%[3%]=1,%[4%]=6,%[5%]=15,%[23%]=\"expected '=' near '__future__'\"}}\r\n]])",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "format_version = tonumber(format_version)",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "assert.number(format_version)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "assert.string(good_mtime)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert.string(bad_mtime)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert.string(python_mtime)",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "write_new_cache(\"\\n\"..tostring(format_version))",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "write_new_cache(\"\\n\"..tostring(format_version + 1))",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "write_new_cache(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function()\r\n      local tmpname\r\n\r\n      before_each(function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end)\r\n\r\n      after_each(function()\r\n         os.remove(tmpname)\r\n      end)\r\n\r\n      it(\"caches results\", function()\r\n         local normal_output = [[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]]\r\n\r\n         local mocked_output = [[\r\nChecking spec/samples/good_code.lua               1 error\r\n\r\n    spec/samples/good_code.lua:5:7: this code is actually bad\r\n\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             2 warnings\r\n\r\n    spec/samples/python_code.lua:1:1: setting non-standard global variable 'global'\r\n    spec/samples/python_code.lua:6:8: accessing uninitialized variable 'uninit'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 16 warnings / 1 error in 4 files\r\n]]\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local cache = utils.read_file(tmpname)\r\n         assert.string(cache)\r\n         local format_version, good_mtime, bad_mtime, python_mtime = cache:match([[\r\n\r\n(%d+)\r\nspec/samples/good_code.lua\r\n(%d+)\r\nreturn {}\r\nspec/samples/bad_code.lua\r\n(%d+)\r\nreturn {{\"112\",\"package\",1,1,7},{\"211\",\"helper\",3,16,21,%[10%]=true},{\"212\",\"...\",3,23,25},{\"111\",\"embrace\",7,10,16,%[12%]=true},{\"412\",\"opt\",8,10,12,7,18},{\"113\",\"hepler\",9,11,16}}\r\nspec/samples/python_code.lua\r\n(%d+)\r\nreturn {{\"011\",%[3%]=1,%[4%]=6,%[5%]=15,%[23%]=\"expected '=' near '__future__'\"}}\r\n]])\r\n\r\n         format_version = tonumber(format_version)\r\n         assert.number(format_version)\r\n         assert.string(good_mtime)\r\n         assert.string(bad_mtime)\r\n         assert.string(python_mtime)\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local function write_new_cache(version)\r\n            local fh = io.open(tmpname, \"wb\")\r\n            assert.userdata(fh)\r\n            fh:write(([[\r\n%s\r\nspec/samples/python_code.lua\r\n%s\r\nreturn {{\"111\", \"global\", 1, 1}, {\"321\", \"uninit\", 6, 8}}\r\nspec/samples/good_code.lua\r\n%s\r\nreturn {{\"011\",[3]=5,[4]=7,[23]=\"this code is actually bad\"}}\r\nspec/samples/bad_code.lua\r\n%s\r\nreturn {}]]):format(version, python_mtime, good_mtime, tostring(tonumber(bad_mtime) - 1)))\r\n            fh:close()\r\n         end\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version + 1))\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\")\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 196,
    "text": "local tmpname",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "before_each(function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "after_each(function()\r\n         os.remove(tmpname)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "it(\"caches results\", function()\r\n         local normal_output = [[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]]\r\n\r\n         local mocked_output = [[\r\nChecking spec/samples/good_code.lua               1 error\r\n\r\n    spec/samples/good_code.lua:5:7: this code is actually bad\r\n\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             2 warnings\r\n\r\n    spec/samples/python_code.lua:1:1: setting non-standard global variable 'global'\r\n    spec/samples/python_code.lua:6:8: accessing uninitialized variable 'uninit'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 16 warnings / 1 error in 4 files\r\n]]\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local cache = utils.read_file(tmpname)\r\n         assert.string(cache)\r\n         local format_version, good_mtime, bad_mtime, python_mtime = cache:match([[\r\n\r\n(%d+)\r\nspec/samples/good_code.lua\r\n(%d+)\r\nreturn {}\r\nspec/samples/bad_code.lua\r\n(%d+)\r\nreturn {{\"112\",\"package\",1,1,7},{\"211\",\"helper\",3,16,21,%[10%]=true},{\"212\",\"...\",3,23,25},{\"111\",\"embrace\",7,10,16,%[12%]=true},{\"412\",\"opt\",8,10,12,7,18},{\"113\",\"hepler\",9,11,16}}\r\nspec/samples/python_code.lua\r\n(%d+)\r\nreturn {{\"011\",%[3%]=1,%[4%]=6,%[5%]=15,%[23%]=\"expected '=' near '__future__'\"}}\r\n]])\r\n\r\n         format_version = tonumber(format_version)\r\n         assert.number(format_version)\r\n         assert.string(good_mtime)\r\n         assert.string(bad_mtime)\r\n         assert.string(python_mtime)\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local function write_new_cache(version)\r\n            local fh = io.open(tmpname, \"wb\")\r\n            assert.userdata(fh)\r\n            fh:write(([[\r\n%s\r\nspec/samples/python_code.lua\r\n%s\r\nreturn {{\"111\", \"global\", 1, 1}, {\"321\", \"uninit\", 6, 8}}\r\nspec/samples/good_code.lua\r\n%s\r\nreturn {{\"011\",[3]=5,[4]=7,[23]=\"this code is actually bad\"}}\r\nspec/samples/bad_code.lua\r\n%s\r\nreturn {}]]):format(version, python_mtime, good_mtime, tostring(tonumber(bad_mtime) - 1)))\r\n            fh:close()\r\n         end\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version + 1))\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\")\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function()\r\n         assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 -j2 --no-config\")\r\n      end",
    "type": "function"
  }, {
    "id": 202,
    "text": "assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 -j2 --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 204,
    "text": "function()\r\n      assert.equal([[Files: 2\r\nFormatter: spec.formatters.custom_formatter\r\nQuiet: 1\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua --formatter spec.formatters.custom_formatter -q --codes --no-color --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 205,
    "text": "assert.equal([[Files: 2\r\nFormatter: spec.formatters.custom_formatter\r\nQuiet: 1\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua --formatter spec.formatters.custom_formatter -q --codes --no-color --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function()\r\n      assert.equal([[Files: 2\r\nFormatter: spec.formatters.custom_formatter\r\nQuiet: 1\r\nColor: false\r\nCodes: true\r\n]], get_output(\"samples/good_code.lua samples/bad_code.lua --formatter spec.formatters.custom_formatter -q --codes --no-color --no-config\", \"spec/\"))\r\n   end",
    "type": "function"
  }, {
    "id": 208,
    "text": "assert.equal([[Files: 2\r\nFormatter: spec.formatters.custom_formatter\r\nQuiet: 1\r\nColor: false\r\nCodes: true\r\n]], get_output(\"samples/good_code.lua samples/bad_code.lua --formatter spec.formatters.custom_formatter -q --codes --no-color --no-config\", \"spec/\"))",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function()\r\n      assert.equal([[\r\n1..7\r\nok 1 spec/samples/good_code.lua\r\nnot ok 2 spec/samples/bad_code.lua:3:16: unused function 'helper'\r\nnot ok 3 spec/samples/bad_code.lua:3:23: unused variable length argument\r\nnot ok 4 spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\nnot ok 5 spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\nnot ok 6 spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\nnot ok 7 spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter TAP --no-config\")\r\n\r\n      assert.equal([[\r\n1..7\r\nok 1 spec/samples/good_code.lua\r\nnot ok 2 spec/samples/bad_code.lua:3:16: (W211) unused function 'helper'\r\nnot ok 3 spec/samples/bad_code.lua:3:23: (W212) unused variable length argument\r\nnot ok 4 spec/samples/bad_code.lua:7:10: (W111) setting non-standard global variable 'embrace'\r\nnot ok 5 spec/samples/bad_code.lua:8:10: (W412) variable 'opt' was previously defined as an argument on line 7\r\nnot ok 6 spec/samples/bad_code.lua:9:11: (W113) accessing undefined variable 'hepler'\r\nnot ok 7 spec/samples/python_code.lua:1:6: (E011) expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter TAP --codes --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 211,
    "text": "assert.equal([[\r\n1..7\r\nok 1 spec/samples/good_code.lua\r\nnot ok 2 spec/samples/bad_code.lua:3:16: unused function 'helper'\r\nnot ok 3 spec/samples/bad_code.lua:3:23: unused variable length argument\r\nnot ok 4 spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\nnot ok 5 spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\nnot ok 6 spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\nnot ok 7 spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter TAP --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "assert.equal([[\r\n1..7\r\nok 1 spec/samples/good_code.lua\r\nnot ok 2 spec/samples/bad_code.lua:3:16: (W211) unused function 'helper'\r\nnot ok 3 spec/samples/bad_code.lua:3:23: (W212) unused variable length argument\r\nnot ok 4 spec/samples/bad_code.lua:7:10: (W111) setting non-standard global variable 'embrace'\r\nnot ok 5 spec/samples/bad_code.lua:8:10: (W412) variable 'opt' was previously defined as an argument on line 7\r\nnot ok 6 spec/samples/bad_code.lua:9:11: (W113) accessing undefined variable 'hepler'\r\nnot ok 7 spec/samples/python_code.lua:1:6: (E011) expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter TAP --codes --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 214,
    "text": "function()\r\n      assert.equal([[\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<testsuite name=\"Luacheck report\" tests=\"7\">\r\n    <testcase name=\"spec/samples/good_code.lua\" classname=\"spec/samples/good_code.lua\"/>\r\n    <testcase name=\"spec/samples/bad_code.lua:1\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W211\" message=\"spec/samples/bad_code.lua:3:16: unused function &apos;helper&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:2\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W212\" message=\"spec/samples/bad_code.lua:3:23: unused variable length argument\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:3\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W111\" message=\"spec/samples/bad_code.lua:7:10: setting non-standard global variable &apos;embrace&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:4\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W412\" message=\"spec/samples/bad_code.lua:8:10: variable &apos;opt&apos; was previously defined as an argument on line 7\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:5\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W113\" message=\"spec/samples/bad_code.lua:9:11: accessing undefined variable &apos;hepler&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/python_code.lua:1\" classname=\"spec/samples/python_code.lua\">\r\n        <failure type=\"E011\" message=\"spec/samples/python_code.lua:1:6: expected &apos;=&apos; near &apos;__future__&apos;\"/>\r\n    </testcase>\r\n</testsuite>\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter JUnit --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 215,
    "text": "assert.equal([[\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<testsuite name=\"Luacheck report\" tests=\"7\">\r\n    <testcase name=\"spec/samples/good_code.lua\" classname=\"spec/samples/good_code.lua\"/>\r\n    <testcase name=\"spec/samples/bad_code.lua:1\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W211\" message=\"spec/samples/bad_code.lua:3:16: unused function &apos;helper&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:2\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W212\" message=\"spec/samples/bad_code.lua:3:23: unused variable length argument\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:3\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W111\" message=\"spec/samples/bad_code.lua:7:10: setting non-standard global variable &apos;embrace&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:4\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W412\" message=\"spec/samples/bad_code.lua:8:10: variable &apos;opt&apos; was previously defined as an argument on line 7\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:5\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W113\" message=\"spec/samples/bad_code.lua:9:11: accessing undefined variable &apos;hepler&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/python_code.lua:1\" classname=\"spec/samples/python_code.lua\">\r\n        <failure type=\"E011\" message=\"spec/samples/python_code.lua:1:6: expected &apos;=&apos; near &apos;__future__&apos;\"/>\r\n    </testcase>\r\n</testsuite>\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter JUnit --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function()\r\n      assert.equal(\"\", get_output \"spec/samples/good_code.lua --std=lua52 --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/bad_code.lua:3:16: unused function 'helper'\r\nspec/samples/bad_code.lua:3:23: unused variable length argument\r\nspec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\nspec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\nspec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\nspec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/404.lua: I/O error (couldn't read: No such file or directory)\r\n]], get_output \"spec/samples/404.lua --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/bad_code.lua:3:16: (W211) unused function 'helper'\r\nspec/samples/bad_code.lua:3:23: (W212) unused variable length argument\r\nspec/samples/bad_code.lua:7:10: (W111) setting non-standard global variable 'embrace'\r\nspec/samples/bad_code.lua:8:10: (W412) variable 'opt' was previously defined as an argument on line 7\r\nspec/samples/bad_code.lua:9:11: (W113) accessing undefined variable 'hepler'\r\nspec/samples/python_code.lua:1:6: (E011) expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter plain --codes --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 218,
    "text": "assert.equal(\"\", get_output \"spec/samples/good_code.lua --std=lua52 --formatter plain --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "assert.equal([[\r\nspec/samples/bad_code.lua:3:16: unused function 'helper'\r\nspec/samples/bad_code.lua:3:23: unused variable length argument\r\nspec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\nspec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\nspec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\nspec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter plain --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "assert.equal([[\r\nspec/samples/404.lua: I/O error (couldn't read: No such file or directory)\r\n]], get_output \"spec/samples/404.lua --formatter plain --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "assert.equal([[\r\nspec/samples/bad_code.lua:3:16: (W211) unused function 'helper'\r\nspec/samples/bad_code.lua:3:23: (W212) unused variable length argument\r\nspec/samples/bad_code.lua:7:10: (W111) setting non-standard global variable 'embrace'\r\nspec/samples/bad_code.lua:8:10: (W412) variable 'opt' was previously defined as an argument on line 7\r\nspec/samples/bad_code.lua:9:11: (W113) accessing undefined variable 'hepler'\r\nspec/samples/python_code.lua:1:6: (E011) expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter plain --codes --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function()\r\n      local output = get_output \"--version\"\r\n      assert.truthy(output:match(\"^Luacheck: [%w%p ]+\\nLua: [%w%p ]+\\nLuaFileSystem: [%w%p ]+\\nLuaLanes: [%w%p ]+\\n$\"))\r\n   end",
    "type": "function"
  }, {
    "id": 224,
    "text": "local output = get_output \"--version\"",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "assert.truthy(output:match(\"^Luacheck: [%w%p ]+\\nLua: [%w%p ]+\\nLuaFileSystem: [%w%p ]+\\nLuaLanes: [%w%p ]+\\n$\"))",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function()\r\n      assert.matches(\"^Total: %d+ warnings / %d+ errors in 20 files\\n$\", get_output \"spec/samples -qqq --no-config\")\r\n   end",
    "type": "function"
  }, {
    "id": 228,
    "text": "assert.matches(\"^Total: %d+ warnings / %d+ errors in 20 files\\n$\", get_output \"spec/samples -qqq --no-config\")",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function()\r\n      assert.matches(\"^Total: %d+ warnings / %d+ errors in 2 files\\n$\",\r\n         get_output(\"spec/samples -qqq --no-config --include-files \" .. quote(\"**/*.rockspec\")))\r\n   end",
    "type": "function"
  }, {
    "id": 231,
    "text": "assert.matches(\"^Total: %d+ warnings / %d+ errors in 2 files\\n$\",\r\n         get_output(\"spec/samples -qqq --no-config --include-files \" .. quote(\"**/*.rockspec\")))",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            1 warning\r\n\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    2 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"nested\", \"spec/configs/project/\"))\r\n         end",
    "type": "function"
  }, {
    "id": 234,
    "text": "assert.equal(norm_output [[\r\nChecking nested/ab.lua                            1 warning\r\n\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    2 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"nested\", \"spec/configs/project/\"))",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 236,
    "text": "function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            2 warnings\r\n\r\n    nested/ab.lua:1:7: accessing undefined variable 'a'\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    3 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:10: accessing undefined variable 'b'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output(\"nested --no-config\", \"spec/configs/project/\"))\r\n         end",
    "type": "function"
  }, {
    "id": 237,
    "text": "assert.equal(norm_output [[\r\nChecking nested/ab.lua                            2 warnings\r\n\r\n    nested/ab.lua:1:7: accessing undefined variable 'a'\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    3 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:10: accessing undefined variable 'b'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output(\"nested --no-config\", \"spec/configs/project/\"))",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function()\r\n            assert.equal(norm_output [[\r\nChecking ab.lua                                   1 warning\r\n\r\n    ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/abc.lua                           2 warnings\r\n\r\n    nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"ab.lua nested\", \"spec/configs/project/nested/\"))\r\n         end",
    "type": "function"
  }, {
    "id": 240,
    "text": "assert.equal(norm_output [[\r\nChecking ab.lua                                   1 warning\r\n\r\n    ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/abc.lua                           2 warnings\r\n\r\n    nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"ab.lua nested\", \"spec/configs/project/nested/\"))",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 242,
    "text": "function()\r\n            assert.equal([[\r\nChecking spec/samples/compat.lua                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/compat.lua --config=spec/configs/global_config.luacheckrc\")\r\n         end",
    "type": "function"
  }, {
    "id": 243,
    "text": "assert.equal([[\r\nChecking spec/samples/compat.lua                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/compat.lua --config=spec/configs/global_config.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function()\r\n            assert.equal([[\r\nChecking stdin                                    OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/global_config.luacheckrc < spec/samples/compat.lua\")\r\n         end",
    "type": "function"
  }, {
    "id": 246,
    "text": "assert.equal([[\r\nChecking stdin                                    OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/global_config.luacheckrc < spec/samples/compat.lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 4 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc\")\r\n         end",
    "type": "function"
  }, {
    "id": 249,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 4 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc --filename spec/samples/unused_code.lua < spec/samples/unused_code.lua\")\r\n         end",
    "type": "function"
  }, {
    "id": 252,
    "text": "assert.equal([[\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc --filename spec/samples/unused_code.lua < spec/samples/unused_code.lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nChecking spec/samples/unused_code.lua             7 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n\r\nTotal: 8 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/unused_secondaries.lua spec/samples/unused_code.lua --config=spec/configs/multioverride_config.luacheckrc\")\r\n         end",
    "type": "function"
  }, {
    "id": 255,
    "text": "assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nChecking spec/samples/unused_code.lua             7 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n\r\nTotal: 8 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/unused_secondaries.lua spec/samples/unused_code.lua --config=spec/configs/multioverride_config.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             1 warning\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc --enable=211\")\r\n         end",
    "type": "function"
  }, {
    "id": 258,
    "text": "assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             1 warning\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc --enable=211\")",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "function()\r\n            assert.equal([[Files: 2\r\nWarnings: 14\r\nErrors: 0\r\nQuiet: 0\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/cli_specific_config.luacheckrc --std=lua52\")\r\n         end",
    "type": "function"
  }, {
    "id": 261,
    "text": "assert.equal([[Files: 2\r\nWarnings: 14\r\nErrors: 0\r\nQuiet: 0\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/cli_specific_config.luacheckrc --std=lua52\")",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function()\r\n            assert.equal(([[\r\nChecking spec/samples/argparse.lua                6 warnings\r\nChecking spec/samples/compat.lua                  4 warnings\r\nChecking spec/samples/custom_std_inline_options.lua 3 warnings / 1 error\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\nChecking spec/samples/globals.lua                 2 warnings\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\nChecking spec/samples/python_code.lua             1 error\r\nChecking spec/samples/read_globals.lua            5 warnings\r\nChecking spec/samples/read_globals_inline_options.lua 3 warnings\r\nChecking spec/samples/redefined.lua               7 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]]):gsub(\"(spec/samples)/\", \"%1\"..package.config:sub(1, 1)),\r\n            get_output \"spec/samples --config=spec/configs/exclude_files_config.luacheckrc -qq\")\r\n         end",
    "type": "function"
  }, {
    "id": 264,
    "text": "assert.equal(([[\r\nChecking spec/samples/argparse.lua                6 warnings\r\nChecking spec/samples/compat.lua                  4 warnings\r\nChecking spec/samples/custom_std_inline_options.lua 3 warnings / 1 error\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\nChecking spec/samples/globals.lua                 2 warnings\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\nChecking spec/samples/python_code.lua             1 error\r\nChecking spec/samples/read_globals.lua            5 warnings\r\nChecking spec/samples/read_globals_inline_options.lua 3 warnings\r\nChecking spec/samples/redefined.lua               7 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]]):gsub(\"(spec/samples)/\", \"%1\"..package.config:sub(1, 1)),\r\n            get_output \"spec/samples --config=spec/configs/exclude_files_config.luacheckrc -qq\")",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking read_globals.lua                         5 warnings\r\nChecking read_globals_inline_options.lua          3 warnings\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq\", \"spec/samples/\"))\r\n         end",
    "type": "function"
  }, {
    "id": 267,
    "text": "assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking read_globals.lua                         5 warnings\r\nChecking read_globals_inline_options.lua          3 warnings\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq\", \"spec/samples/\"))",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 45 warnings / 4 errors in 12 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq --exclude-files \" .. quote(\"./read*\"), \"spec/samples/\"))\r\n         end",
    "type": "function"
  }, {
    "id": 270,
    "text": "assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 45 warnings / 4 errors in 12 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq --exclude-files \" .. quote(\"./read*\"), \"spec/samples/\"))",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 272,
    "text": "function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n    spec/samples/globals.lua:1:22: accessing undefined variable 'tostring'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:1: accessing undefined variable 'print'\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=+other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=lua52\")\r\n         end",
    "type": "function"
  }, {
    "id": 273,
    "text": "assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n    spec/samples/globals.lua:1:22: accessing undefined variable 'tostring'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:1: accessing undefined variable 'print'\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=other_std\")",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=+other_std\")",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=lua52\")",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 278,
    "text": "function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: (W113) accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/import_config.luacheckrc\")\r\n         end",
    "type": "function"
  }, {
    "id": 279,
    "text": "assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: (W113) accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/import_config.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 281,
    "text": "function()\r\n         it(\"uses .luacheckrc in current directory if possible\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            1 warning\r\n\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    2 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"nested\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"does not use .luacheckrc in current directory with --no-config\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            2 warnings\r\n\r\n    nested/ab.lua:1:7: accessing undefined variable 'a'\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    3 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:10: accessing undefined variable 'b'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output(\"nested --no-config\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"uses .luacheckrc in upper directory\", function()\r\n            assert.equal(norm_output [[\r\nChecking ab.lua                                   1 warning\r\n\r\n    ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/abc.lua                           2 warnings\r\n\r\n    nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"ab.lua nested\", \"spec/configs/project/nested/\"))\r\n         end)\r\n\r\n         it(\"uses config provided with --config=path\", function()\r\n            assert.equal([[\r\nChecking spec/samples/compat.lua                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/compat.lua --config=spec/configs/global_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses config when checking stdin\", function()\r\n            assert.equal([[\r\nChecking stdin                                    OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/global_config.luacheckrc < spec/samples/compat.lua\")\r\n         end)\r\n\r\n         it(\"uses per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 4 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses new filename when selecting per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc --filename spec/samples/unused_code.lua < spec/samples/unused_code.lua\")\r\n         end)\r\n\r\n         it(\"uses all overrides prefixing file name\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nChecking spec/samples/unused_code.lua             7 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n\r\nTotal: 8 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/unused_secondaries.lua spec/samples/unused_code.lua --config=spec/configs/multioverride_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"allows reenabling warnings ignored in config using --enable\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             1 warning\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc --enable=211\")\r\n         end)\r\n\r\n         it(\"allows using cli-specific options in top level config\", function()\r\n            assert.equal([[Files: 2\r\nWarnings: 14\r\nErrors: 0\r\nQuiet: 0\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/cli_specific_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"uses exclude_files option\", function()\r\n            assert.equal(([[\r\nChecking spec/samples/argparse.lua                6 warnings\r\nChecking spec/samples/compat.lua                  4 warnings\r\nChecking spec/samples/custom_std_inline_options.lua 3 warnings / 1 error\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\nChecking spec/samples/globals.lua                 2 warnings\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\nChecking spec/samples/python_code.lua             1 error\r\nChecking spec/samples/read_globals.lua            5 warnings\r\nChecking spec/samples/read_globals_inline_options.lua 3 warnings\r\nChecking spec/samples/redefined.lua               7 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]]):gsub(\"(spec/samples)/\", \"%1\"..package.config:sub(1, 1)),\r\n            get_output \"spec/samples --config=spec/configs/exclude_files_config.luacheckrc -qq\")\r\n         end)\r\n\r\n         it(\"loads exclude_files option correctly from upper directory\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking read_globals.lua                         5 warnings\r\nChecking read_globals_inline_options.lua          3 warnings\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq\", \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"combines excluded files from config and cli\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 45 warnings / 4 errors in 12 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq --exclude-files \" .. quote(\"./read*\"), \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"allows defining custom stds\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n    spec/samples/globals.lua:1:22: accessing undefined variable 'tostring'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:1: accessing undefined variable 'print'\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=+other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"allows importing options with require\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: (W113) accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/import_config.luacheckrc\")\r\n         end)\r\n      end",
    "type": "function"
  }, {
    "id": 282,
    "text": "it(\"uses .luacheckrc in current directory if possible\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            1 warning\r\n\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    2 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"nested\", \"spec/configs/project/\"))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "it(\"does not use .luacheckrc in current directory with --no-config\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            2 warnings\r\n\r\n    nested/ab.lua:1:7: accessing undefined variable 'a'\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    3 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:10: accessing undefined variable 'b'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output(\"nested --no-config\", \"spec/configs/project/\"))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "it(\"uses .luacheckrc in upper directory\", function()\r\n            assert.equal(norm_output [[\r\nChecking ab.lua                                   1 warning\r\n\r\n    ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/abc.lua                           2 warnings\r\n\r\n    nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"ab.lua nested\", \"spec/configs/project/nested/\"))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "it(\"uses config provided with --config=path\", function()\r\n            assert.equal([[\r\nChecking spec/samples/compat.lua                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/compat.lua --config=spec/configs/global_config.luacheckrc\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "it(\"uses config when checking stdin\", function()\r\n            assert.equal([[\r\nChecking stdin                                    OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/global_config.luacheckrc < spec/samples/compat.lua\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "it(\"uses per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 4 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "it(\"uses new filename when selecting per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc --filename spec/samples/unused_code.lua < spec/samples/unused_code.lua\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "it(\"uses all overrides prefixing file name\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nChecking spec/samples/unused_code.lua             7 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n\r\nTotal: 8 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/unused_secondaries.lua spec/samples/unused_code.lua --config=spec/configs/multioverride_config.luacheckrc\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "it(\"allows reenabling warnings ignored in config using --enable\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             1 warning\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc --enable=211\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "it(\"allows using cli-specific options in top level config\", function()\r\n            assert.equal([[Files: 2\r\nWarnings: 14\r\nErrors: 0\r\nQuiet: 0\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/cli_specific_config.luacheckrc --std=lua52\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "it(\"uses exclude_files option\", function()\r\n            assert.equal(([[\r\nChecking spec/samples/argparse.lua                6 warnings\r\nChecking spec/samples/compat.lua                  4 warnings\r\nChecking spec/samples/custom_std_inline_options.lua 3 warnings / 1 error\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\nChecking spec/samples/globals.lua                 2 warnings\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\nChecking spec/samples/python_code.lua             1 error\r\nChecking spec/samples/read_globals.lua            5 warnings\r\nChecking spec/samples/read_globals_inline_options.lua 3 warnings\r\nChecking spec/samples/redefined.lua               7 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]]):gsub(\"(spec/samples)/\", \"%1\"..package.config:sub(1, 1)),\r\n            get_output \"spec/samples --config=spec/configs/exclude_files_config.luacheckrc -qq\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "it(\"loads exclude_files option correctly from upper directory\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking read_globals.lua                         5 warnings\r\nChecking read_globals_inline_options.lua          3 warnings\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq\", \"spec/samples/\"))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "it(\"combines excluded files from config and cli\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 45 warnings / 4 errors in 12 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq --exclude-files \" .. quote(\"./read*\"), \"spec/samples/\"))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "it(\"allows defining custom stds\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n    spec/samples/globals.lua:1:22: accessing undefined variable 'tostring'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:1: accessing undefined variable 'print'\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=+other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=lua52\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "it(\"allows importing options with require\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: (W113) accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/import_config.luacheckrc\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function()\r\n            assert.matches([[\r\nCritical error: Couldn't load configuration from spec/configs/bad_config.luacheckrc: syntax error %(line 2: .*%)\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n         end",
    "type": "function"
  }, {
    "id": 299,
    "text": "assert.matches([[\r\nCritical error: Couldn't load configuration from spec/configs/bad_config.luacheckrc: syntax error %(line 2: .*%)\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "function()\r\n            assert.equal([[\r\nCritical error: Couldn't find configuration file spec/configs/config_404.luacheckrc\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n         end",
    "type": "function"
  }, {
    "id": 303,
    "text": "assert.equal([[\r\nCritical error: Couldn't find configuration file spec/configs/config_404.luacheckrc\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 306,
    "text": "function()\r\n         it(\"raises critical error on config with syntax errors\", function()\r\n            assert.matches([[\r\nCritical error: Couldn't load configuration from spec/configs/bad_config.luacheckrc: syntax error %(line 2: .*%)\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"raises critical error on non-existent config\", function()\r\n            assert.equal([[\r\nCritical error: Couldn't find configuration file spec/configs/config_404.luacheckrc\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n         end)\r\n      end",
    "type": "function"
  }, {
    "id": 307,
    "text": "it(\"raises critical error on config with syntax errors\", function()\r\n            assert.matches([[\r\nCritical error: Couldn't load configuration from spec/configs/bad_config.luacheckrc: syntax error %(line 2: .*%)\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "it(\"raises critical error on non-existent config\", function()\r\n            assert.equal([[\r\nCritical error: Couldn't find configuration file spec/configs/config_404.luacheckrc\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 310,
    "text": "function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_config.luacheckrc --new-globals foo\")\r\n         end",
    "type": "function"
  }, {
    "id": 311,
    "text": "assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_config.luacheckrc --new-globals foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 313,
    "text": "function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_file_config.luacheckrc --new-globals foo\")\r\n         end",
    "type": "function"
  }, {
    "id": 314,
    "text": "assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_file_config.luacheckrc --new-globals foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/global_config.luacheckrc --globals tostring\")\r\n         end",
    "type": "function"
  }, {
    "id": 317,
    "text": "assert.equal([[\r\nChecking spec/samples/globals.lua                 OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/global_config.luacheckrc --globals tostring\")",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function()\r\n         it(\"prioritizes CLI options over config\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"prioritizes CLI options over config overrides\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_file_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"concats array-like options from config and CLI\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/global_config.luacheckrc --globals tostring\")\r\n         end)\r\n      end",
    "type": "function"
  }, {
    "id": 320,
    "text": "it(\"prioritizes CLI options over config\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_config.luacheckrc --new-globals foo\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "it(\"prioritizes CLI options over config overrides\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_file_config.luacheckrc --new-globals foo\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "it(\"concats array-like options from config and CLI\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/global_config.luacheckrc --globals tostring\")\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 324,
    "text": "function()\r\n      describe(\"loading\", function()\r\n         it(\"uses .luacheckrc in current directory if possible\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            1 warning\r\n\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    2 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"nested\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"does not use .luacheckrc in current directory with --no-config\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            2 warnings\r\n\r\n    nested/ab.lua:1:7: accessing undefined variable 'a'\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    3 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:10: accessing undefined variable 'b'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output(\"nested --no-config\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"uses .luacheckrc in upper directory\", function()\r\n            assert.equal(norm_output [[\r\nChecking ab.lua                                   1 warning\r\n\r\n    ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/abc.lua                           2 warnings\r\n\r\n    nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"ab.lua nested\", \"spec/configs/project/nested/\"))\r\n         end)\r\n\r\n         it(\"uses config provided with --config=path\", function()\r\n            assert.equal([[\r\nChecking spec/samples/compat.lua                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/compat.lua --config=spec/configs/global_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses config when checking stdin\", function()\r\n            assert.equal([[\r\nChecking stdin                                    OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/global_config.luacheckrc < spec/samples/compat.lua\")\r\n         end)\r\n\r\n         it(\"uses per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 4 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses new filename when selecting per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc --filename spec/samples/unused_code.lua < spec/samples/unused_code.lua\")\r\n         end)\r\n\r\n         it(\"uses all overrides prefixing file name\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nChecking spec/samples/unused_code.lua             7 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n\r\nTotal: 8 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/unused_secondaries.lua spec/samples/unused_code.lua --config=spec/configs/multioverride_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"allows reenabling warnings ignored in config using --enable\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             1 warning\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc --enable=211\")\r\n         end)\r\n\r\n         it(\"allows using cli-specific options in top level config\", function()\r\n            assert.equal([[Files: 2\r\nWarnings: 14\r\nErrors: 0\r\nQuiet: 0\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/cli_specific_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"uses exclude_files option\", function()\r\n            assert.equal(([[\r\nChecking spec/samples/argparse.lua                6 warnings\r\nChecking spec/samples/compat.lua                  4 warnings\r\nChecking spec/samples/custom_std_inline_options.lua 3 warnings / 1 error\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\nChecking spec/samples/globals.lua                 2 warnings\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\nChecking spec/samples/python_code.lua             1 error\r\nChecking spec/samples/read_globals.lua            5 warnings\r\nChecking spec/samples/read_globals_inline_options.lua 3 warnings\r\nChecking spec/samples/redefined.lua               7 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]]):gsub(\"(spec/samples)/\", \"%1\"..package.config:sub(1, 1)),\r\n            get_output \"spec/samples --config=spec/configs/exclude_files_config.luacheckrc -qq\")\r\n         end)\r\n\r\n         it(\"loads exclude_files option correctly from upper directory\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking read_globals.lua                         5 warnings\r\nChecking read_globals_inline_options.lua          3 warnings\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq\", \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"combines excluded files from config and cli\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 45 warnings / 4 errors in 12 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq --exclude-files \" .. quote(\"./read*\"), \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"allows defining custom stds\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n    spec/samples/globals.lua:1:22: accessing undefined variable 'tostring'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:1: accessing undefined variable 'print'\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=+other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"allows importing options with require\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: (W113) accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/import_config.luacheckrc\")\r\n         end)\r\n      end)\r\n\r\n      describe(\"error handling\", function()\r\n         it(\"raises critical error on config with syntax errors\", function()\r\n            assert.matches([[\r\nCritical error: Couldn't load configuration from spec/configs/bad_config.luacheckrc: syntax error %(line 2: .*%)\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"raises critical error on non-existent config\", function()\r\n            assert.equal([[\r\nCritical error: Couldn't find configuration file spec/configs/config_404.luacheckrc\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n         end)\r\n      end)\r\n\r\n      describe(\"overwriting\", function()\r\n         it(\"prioritizes CLI options over config\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"prioritizes CLI options over config overrides\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_file_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"concats array-like options from config and CLI\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/global_config.luacheckrc --globals tostring\")\r\n         end)\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 325,
    "text": "describe(\"loading\", function()\r\n         it(\"uses .luacheckrc in current directory if possible\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            1 warning\r\n\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    2 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"nested\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"does not use .luacheckrc in current directory with --no-config\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            2 warnings\r\n\r\n    nested/ab.lua:1:7: accessing undefined variable 'a'\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    3 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:10: accessing undefined variable 'b'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output(\"nested --no-config\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"uses .luacheckrc in upper directory\", function()\r\n            assert.equal(norm_output [[\r\nChecking ab.lua                                   1 warning\r\n\r\n    ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/abc.lua                           2 warnings\r\n\r\n    nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"ab.lua nested\", \"spec/configs/project/nested/\"))\r\n         end)\r\n\r\n         it(\"uses config provided with --config=path\", function()\r\n            assert.equal([[\r\nChecking spec/samples/compat.lua                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/compat.lua --config=spec/configs/global_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses config when checking stdin\", function()\r\n            assert.equal([[\r\nChecking stdin                                    OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/global_config.luacheckrc < spec/samples/compat.lua\")\r\n         end)\r\n\r\n         it(\"uses per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 4 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses new filename when selecting per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc --filename spec/samples/unused_code.lua < spec/samples/unused_code.lua\")\r\n         end)\r\n\r\n         it(\"uses all overrides prefixing file name\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nChecking spec/samples/unused_code.lua             7 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n\r\nTotal: 8 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/unused_secondaries.lua spec/samples/unused_code.lua --config=spec/configs/multioverride_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"allows reenabling warnings ignored in config using --enable\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             1 warning\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc --enable=211\")\r\n         end)\r\n\r\n         it(\"allows using cli-specific options in top level config\", function()\r\n            assert.equal([[Files: 2\r\nWarnings: 14\r\nErrors: 0\r\nQuiet: 0\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/cli_specific_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"uses exclude_files option\", function()\r\n            assert.equal(([[\r\nChecking spec/samples/argparse.lua                6 warnings\r\nChecking spec/samples/compat.lua                  4 warnings\r\nChecking spec/samples/custom_std_inline_options.lua 3 warnings / 1 error\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\nChecking spec/samples/globals.lua                 2 warnings\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\nChecking spec/samples/python_code.lua             1 error\r\nChecking spec/samples/read_globals.lua            5 warnings\r\nChecking spec/samples/read_globals_inline_options.lua 3 warnings\r\nChecking spec/samples/redefined.lua               7 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]]):gsub(\"(spec/samples)/\", \"%1\"..package.config:sub(1, 1)),\r\n            get_output \"spec/samples --config=spec/configs/exclude_files_config.luacheckrc -qq\")\r\n         end)\r\n\r\n         it(\"loads exclude_files option correctly from upper directory\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking read_globals.lua                         5 warnings\r\nChecking read_globals_inline_options.lua          3 warnings\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq\", \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"combines excluded files from config and cli\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 45 warnings / 4 errors in 12 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq --exclude-files \" .. quote(\"./read*\"), \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"allows defining custom stds\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n    spec/samples/globals.lua:1:22: accessing undefined variable 'tostring'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:1: accessing undefined variable 'print'\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=+other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"allows importing options with require\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: (W113) accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/import_config.luacheckrc\")\r\n         end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "describe(\"error handling\", function()\r\n         it(\"raises critical error on config with syntax errors\", function()\r\n            assert.matches([[\r\nCritical error: Couldn't load configuration from spec/configs/bad_config.luacheckrc: syntax error %(line 2: .*%)\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"raises critical error on non-existent config\", function()\r\n            assert.equal([[\r\nCritical error: Couldn't find configuration file spec/configs/config_404.luacheckrc\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n         end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "describe(\"overwriting\", function()\r\n         it(\"prioritizes CLI options over config\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"prioritizes CLI options over config overrides\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_file_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"concats array-like options from config and CLI\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/global_config.luacheckrc --globals tostring\")\r\n         end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 328,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 329,
    "text": "function()\r\n   it(\"exists\", function()\r\n      assert.equal(0, get_exitcode \"--help\")\r\n   end)\r\n\r\n   it(\"works for correct files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/good_code.lua --no-config\")\r\n      assert.equal(0, get_exitcode \"spec/samples/good_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"removes ./ in the beginnings of file names\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"./spec/samples/good_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"allows setting new filename\", function()\r\n      assert.equal([[\r\nChecking new.lua                                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/good_code.lua --no-config --filename new.lua\")\r\n   end)\r\n\r\n   it(\"filters files using --exclude-files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config --exclude-files \" .. quote(\"**/??d_code.lua\")))\r\n   end)\r\n\r\n   it(\"filters files using --include-files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config -qq --include-files \" .. quote(\"**/??d_code.lua\")))\r\n   end)\r\n\r\n   it(\"--exclude-files has priority over --include-files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config --include-files \" .. quote(\"**/*.lua\") .. \" --exclude-files \" .. quote(\"**/??d_code.lua\")))\r\n   end)\r\n\r\n   it(\"works for incorrect files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --no-config\")\r\n      assert.equal(1, get_exitcode \"spec/samples/bad_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"works for incorrect patterns in options\", function()\r\n      assert.equal([[\r\nCritical error: Invalid pattern '^%1foo$'\r\n]], get_output \"spec/samples/bad_code.lua --ignore %1foo --no-config\")\r\n   end)\r\n\r\n   it(\"checks stdin when given -\", function()\r\n      assert.equal([[\r\nChecking stdin                                    5 warnings\r\n\r\n    stdin:3:16: unused function 'helper'\r\n    stdin:3:23: unused variable length argument\r\n    stdin:7:10: setting non-standard global variable 'embrace'\r\n    stdin:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    stdin:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc < spec/samples/bad_code.lua\")\r\n   end)\r\n\r\n   it(\"colors output by default\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               #OK#\r\nChecking spec/samples/bad_code.lua                #5 warnings#\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function #helper#\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable #embrace#\r\n    spec/samples/bad_code.lua:8:10: variable #opt# was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable #hepler#\r\n\r\nTotal: #5# warnings / #0# errors in 2 files\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config\", nil, true))\r\n   end)\r\n\r\n   it(\"suppresses OK output with -q\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-q spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n      assert.equal([[\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"-q spec/samples/good_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"suppresses warnings output with -qq\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\nTotal: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-qq spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"suppresses file info output with -qqq\", function()\r\n      assert.equal([[Total: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-qqq spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"allows to ignore some types of warnings\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"-u spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"-g spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"-r spec/samples/bad_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"allows to define additional globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --globals embrace --no-config\")\r\n   end)\r\n\r\n   it(\"allows to set standard globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                6 warnings\r\n\r\n    spec/samples/bad_code.lua:1:1: mutating non-standard global variable 'package'\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"--std none spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"--std lua51+lua52+lua53 spec/samples/bad_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"allows to ignore some variables\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --ignore embrace opt --no-config\")\r\n   end)\r\n\r\n   it(\"allows to only watch some variables\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                1 warning\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --only helper --no-config\")\r\n   end)\r\n\r\n   it(\"recognizes different types of variables\", function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 9 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"allows to ignore unused arguments\", function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_code.lua             4 warnings\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_code.lua --no-unused-args --no-config\")\r\n   end)\r\n\r\n   it(\"allows to ignore unused secondary values and variables\", function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\n    spec/samples/unused_secondaries.lua:3:7: unused variable 'a'\r\n    spec/samples/unused_secondaries.lua:6:7: unused variable 'x'\r\n    spec/samples/unused_secondaries.lua:6:13: unused variable 'z'\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_secondaries.lua --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:6:7: unused variable 'x'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_secondaries.lua -s --no-config\")\r\n   end)\r\n\r\n   it(\"allows to ignore warnings related to implicit self\", function()\r\n      assert.equal([[\r\nChecking spec/samples/redefined.lua               5 warnings\r\n\r\n    spec/samples/redefined.lua:4:10: shadowing upvalue 'a' on line 1\r\n    spec/samples/redefined.lua:4:13: variable 'self' is never set\r\n    spec/samples/redefined.lua:4:13: variable 'self' was previously defined as an argument on line 3\r\n    spec/samples/redefined.lua:7:13: shadowing definition of variable 'a' on line 4\r\n    spec/samples/redefined.lua:8:32: shadowing upvalue 'self' on line 4\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/redefined.lua --no-self --globals each --no-config\")\r\n   end)\r\n\r\n   it(\"handles errors gracefully\", function()\r\n      assert.equal([[\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nChecking s/samples/absent_code.lua                I/O error\r\n\r\n    s/samples/absent_code.lua: couldn't read: No such file or directory\r\n\r\nTotal: 0 warnings / 1 error in 1 file, couldn't check 1 file\r\n]], get_output \"spec/samples/python_code.lua s/samples/absent_code.lua --no-config\")\r\n      assert.equal(2, get_exitcode \"spec/samples/python_code.lua spec/samples/absent_code.lua --no-config\")\r\n   end)\r\n\r\n   it(\"expands rockspecs\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/sample.rockspec --no-config\")\r\n   end)\r\n\r\n   it(\"handles bad rockspecs\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad.rockspec                Syntax error\r\n\r\n    spec/samples/bad.rockspec: rockspec.build is not a table\r\n\r\nTotal: 0 warnings / 0 errors in 0 files, couldn't check 1 file\r\n]], get_output \"spec/samples/bad.rockspec --no-config\")\r\n   end)\r\n\r\n   it(\"allows ignoring defined globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined.lua                 1 warning\r\n\r\n    spec/samples/defined.lua:4:4: accessing undefined variable 'baz'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined.lua spec/samples/defined2.lua -d --no-config\")\r\n\r\n   assert.equal([[\r\nChecking spec/samples/defined2.lua                OK\r\nChecking spec/samples/defined.lua                 1 warning\r\n\r\n    spec/samples/defined.lua:4:4: accessing undefined variable 'baz'\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined2.lua spec/samples/defined.lua -d --no-config\")\r\n   end)\r\n\r\n   it(\"allows restricting scope of defined globals to the file with their definition\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined2.lua                1 warning\r\n\r\n    spec/samples/defined2.lua:1:1: accessing undefined variable 'foo'\r\n\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined2.lua spec/samples/defined3.lua -d -m --no-config\")\r\n   end)\r\n\r\n   it(\"allows ignoring globals defined in top level scope\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined4.lua                2 warnings\r\n\r\n    spec/samples/defined4.lua:1:10: unused global variable 'foo'\r\n    spec/samples/defined4.lua:3:4: setting non-standard global variable 'bar'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined4.lua -t --no-config\")\r\n   end)\r\n\r\n   it(\"detects unused defined globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                3 warnings\r\n\r\n    spec/samples/defined3.lua:1:1: unused global variable 'foo'\r\n    spec/samples/defined3.lua:2:1: unused global variable 'foo'\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -d --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                1 warning\r\n\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -d --no-config\")\r\n   end)\r\n\r\n   it(\"treats `unused global` warnings as `global` type warnings\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -gd --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                1 warning\r\n\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -ud --no-config\")\r\n   end)\r\n\r\n   it(\"allows ignoring unused defined globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -d --ignore 13 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -d --ignore 13 --no-config\")\r\n   end)\r\n\r\n   it(\"detects flow issues\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_flow.lua                6 warnings\r\n\r\n    spec/samples/bad_flow.lua:1:28: empty if branch\r\n    spec/samples/bad_flow.lua:6:4: empty do..end block\r\n    spec/samples/bad_flow.lua:12:15: left-hand side of assignment is too long\r\n    spec/samples/bad_flow.lua:16:15: left-hand side of assignment is too short\r\n    spec/samples/bad_flow.lua:21:7: unreachable code\r\n    spec/samples/bad_flow.lua:25:1: loop is executed at most once\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_flow.lua --no-config\")\r\n   end)\r\n\r\n   it(\"detects redefinitions\", function()\r\n      assert.equal([[\r\nChecking spec/samples/redefined.lua               6 warnings\r\n\r\n    spec/samples/redefined.lua:3:11: unused argument 'self'\r\n    spec/samples/redefined.lua:4:10: shadowing upvalue 'a' on line 1\r\n    spec/samples/redefined.lua:4:13: variable 'self' is never set\r\n    spec/samples/redefined.lua:4:13: variable 'self' was previously defined as an argument on line 3\r\n    spec/samples/redefined.lua:7:13: shadowing definition of variable 'a' on line 4\r\n    spec/samples/redefined.lua:8:32: shadowing upvalue 'self' on line 4\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/redefined.lua --globals each --no-config\")\r\n   end)\r\n\r\n   it(\"detects issues related to read-only globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/read_globals.lua            5 warnings\r\n\r\n    spec/samples/read_globals.lua:1:1: setting read-only global variable 'string'\r\n    spec/samples/read_globals.lua:2:1: mutating read-only global variable 'table'\r\n    spec/samples/read_globals.lua:5:1: setting read-only global variable 'bar'\r\n    spec/samples/read_globals.lua:6:1: mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals.lua:6:21: accessing undefined variable 'baz'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals.lua --std=lua52 --globals foo --read-globals bar --no-config\")\r\n   end)\r\n\r\n   it(\"allows showing warning codes\", function()\r\n      assert.equal([[\r\nChecking spec/samples/read_globals.lua            5 warnings\r\n\r\n    spec/samples/read_globals.lua:1:1: (W121) setting read-only global variable 'string'\r\n    spec/samples/read_globals.lua:2:1: (W122) mutating read-only global variable 'table'\r\n    spec/samples/read_globals.lua:5:1: (W121) setting read-only global variable 'bar'\r\n    spec/samples/read_globals.lua:6:1: (W112) mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals.lua:6:21: (W113) accessing undefined variable 'baz'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals.lua --std=lua52 --globals foo --read-globals bar --codes --no-config\")\r\n   end)\r\n\r\n   it(\"allows showing token ranges\", function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          8 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16-16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4-5: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1-3: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10-10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7-7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10-10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1-17: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4-19: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1-2: empty do..end block\r\n    spec/samples/inline_options.lua:35:10-13: empty if branch\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6-15: expected '=' near '__future__'\r\n\r\nTotal: 8 warnings / 3 errors in 2 files\r\n]], get_output \"spec/samples/inline_options.lua spec/samples/python_code.lua --ranges --no-config\")\r\n   end)\r\n\r\n   it(\"applies inline options\", function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          8 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n    spec/samples/inline_options.lua:35:10: empty if branch\r\n\r\nTotal: 8 warnings / 2 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n\r\nTotal: 7 warnings / 2 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --ignore=542 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\n\r\n    spec/samples/global_inline_options.lua:6:10: unused global variable 'f'\r\n    spec/samples/global_inline_options.lua:7:4: setting non-standard global variable 'baz'\r\n    spec/samples/global_inline_options.lua:18:4: setting non-module global variable 'external'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/global_inline_options.lua --std=lua52 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/read_globals_inline_options.lua 5 warnings\r\n\r\n    spec/samples/read_globals_inline_options.lua:2:10: accessing undefined variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:3:1: setting read-only global variable 'foo'\r\n    spec/samples/read_globals_inline_options.lua:3:11: setting non-standard global variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:3:16: mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:5:1: setting read-only global variable 'foo'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals_inline_options.lua --std=lua52 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/read_globals_inline_options.lua 1 warning\r\n\r\n    spec/samples/read_globals_inline_options.lua:3:16: mutating read-only global variable 'baz'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals_inline_options.lua --std=lua52 --read-globals baz --globals foo --no-config\")\r\n   end)\r\n\r\n   it(\"inline options can use extended stds\", function()\r\n      assert.equal([[\r\nChecking spec/samples/custom_std_inline_options.lua 2 warnings\r\n\r\n    spec/samples/custom_std_inline_options.lua:3:1: accessing undefined variable 'tostring'\r\n    spec/samples/custom_std_inline_options.lua:6:25: accessing undefined variable 'it'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/custom_std_inline_options.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n   end)\r\n\r\n   it(\"inline options can be disabled\", function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          26 warnings\r\n\r\n    spec/samples/inline_options.lua:3:1: accessing undefined variable 'foo'\r\n    spec/samples/inline_options.lua:4:1: accessing undefined variable 'bar'\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:6:18: unused argument 'a'\r\n    spec/samples/inline_options.lua:8:4: accessing undefined variable 'foo'\r\n    spec/samples/inline_options.lua:9:4: accessing undefined variable 'bar'\r\n    spec/samples/inline_options.lua:10:4: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:11:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:18:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:18:7: variable 'f' was previously defined on line 6\r\n    spec/samples/inline_options.lua:20:7: unused variable 'g'\r\n    spec/samples/inline_options.lua:22:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:22:7: variable 'f' was previously defined on line 18\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:22:10: variable 'g' was previously defined on line 20\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:7: variable 'f' was previously defined on line 22\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:10: variable 'g' was previously defined on line 22\r\n    spec/samples/inline_options.lua:27:16: unused function 'f'\r\n    spec/samples/inline_options.lua:27:16: variable 'f' was previously defined on line 24\r\n    spec/samples/inline_options.lua:32:1: empty do..end block\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n    spec/samples/inline_options.lua:35:10: empty if branch\r\n\r\nTotal: 26 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --no-inline --no-config\")\r\n   end)\r\n\r\n   describe(\"caching\", function()\r\n      local tmpname\r\n\r\n      before_each(function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end)\r\n\r\n      after_each(function()\r\n         os.remove(tmpname)\r\n      end)\r\n\r\n      it(\"caches results\", function()\r\n         local normal_output = [[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]]\r\n\r\n         local mocked_output = [[\r\nChecking spec/samples/good_code.lua               1 error\r\n\r\n    spec/samples/good_code.lua:5:7: this code is actually bad\r\n\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             2 warnings\r\n\r\n    spec/samples/python_code.lua:1:1: setting non-standard global variable 'global'\r\n    spec/samples/python_code.lua:6:8: accessing uninitialized variable 'uninit'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 16 warnings / 1 error in 4 files\r\n]]\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local cache = utils.read_file(tmpname)\r\n         assert.string(cache)\r\n         local format_version, good_mtime, bad_mtime, python_mtime = cache:match([[\r\n\r\n(%d+)\r\nspec/samples/good_code.lua\r\n(%d+)\r\nreturn {}\r\nspec/samples/bad_code.lua\r\n(%d+)\r\nreturn {{\"112\",\"package\",1,1,7},{\"211\",\"helper\",3,16,21,%[10%]=true},{\"212\",\"...\",3,23,25},{\"111\",\"embrace\",7,10,16,%[12%]=true},{\"412\",\"opt\",8,10,12,7,18},{\"113\",\"hepler\",9,11,16}}\r\nspec/samples/python_code.lua\r\n(%d+)\r\nreturn {{\"011\",%[3%]=1,%[4%]=6,%[5%]=15,%[23%]=\"expected '=' near '__future__'\"}}\r\n]])\r\n\r\n         format_version = tonumber(format_version)\r\n         assert.number(format_version)\r\n         assert.string(good_mtime)\r\n         assert.string(bad_mtime)\r\n         assert.string(python_mtime)\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local function write_new_cache(version)\r\n            local fh = io.open(tmpname, \"wb\")\r\n            assert.userdata(fh)\r\n            fh:write(([[\r\n%s\r\nspec/samples/python_code.lua\r\n%s\r\nreturn {{\"111\", \"global\", 1, 1}, {\"321\", \"uninit\", 6, 8}}\r\nspec/samples/good_code.lua\r\n%s\r\nreturn {{\"011\",[3]=5,[4]=7,[23]=\"this code is actually bad\"}}\r\nspec/samples/bad_code.lua\r\n%s\r\nreturn {}]]):format(version, python_mtime, good_mtime, tostring(tonumber(bad_mtime) - 1)))\r\n            fh:close()\r\n         end\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version + 1))\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\")\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n      end)\r\n   end)\r\n\r\n   if not multithreading.has_lanes then\r\n      pending(\"uses multithreading\")\r\n   else\r\n      it(\"uses multithreading\", function()\r\n         assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 -j2 --no-config\")\r\n      end)\r\n   end\r\n\r\n   it(\"allows using custom formatter\", function()\r\n      assert.equal([[Files: 2\r\nFormatter: spec.formatters.custom_formatter\r\nQuiet: 1\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua --formatter spec.formatters.custom_formatter -q --codes --no-color --no-config\")\r\n   end)\r\n\r\n   it(\"loads custom formatters relatively to project root\", function()\r\n      assert.equal([[Files: 2\r\nFormatter: spec.formatters.custom_formatter\r\nQuiet: 1\r\nColor: false\r\nCodes: true\r\n]], get_output(\"samples/good_code.lua samples/bad_code.lua --formatter spec.formatters.custom_formatter -q --codes --no-color --no-config\", \"spec/\"))\r\n   end)\r\n\r\n   it(\"has built-in TAP formatter\", function()\r\n      assert.equal([[\r\n1..7\r\nok 1 spec/samples/good_code.lua\r\nnot ok 2 spec/samples/bad_code.lua:3:16: unused function 'helper'\r\nnot ok 3 spec/samples/bad_code.lua:3:23: unused variable length argument\r\nnot ok 4 spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\nnot ok 5 spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\nnot ok 6 spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\nnot ok 7 spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter TAP --no-config\")\r\n\r\n      assert.equal([[\r\n1..7\r\nok 1 spec/samples/good_code.lua\r\nnot ok 2 spec/samples/bad_code.lua:3:16: (W211) unused function 'helper'\r\nnot ok 3 spec/samples/bad_code.lua:3:23: (W212) unused variable length argument\r\nnot ok 4 spec/samples/bad_code.lua:7:10: (W111) setting non-standard global variable 'embrace'\r\nnot ok 5 spec/samples/bad_code.lua:8:10: (W412) variable 'opt' was previously defined as an argument on line 7\r\nnot ok 6 spec/samples/bad_code.lua:9:11: (W113) accessing undefined variable 'hepler'\r\nnot ok 7 spec/samples/python_code.lua:1:6: (E011) expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter TAP --codes --no-config\")\r\n   end)\r\n\r\n   it(\"has built-in JUnit formatter\", function()\r\n      assert.equal([[\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<testsuite name=\"Luacheck report\" tests=\"7\">\r\n    <testcase name=\"spec/samples/good_code.lua\" classname=\"spec/samples/good_code.lua\"/>\r\n    <testcase name=\"spec/samples/bad_code.lua:1\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W211\" message=\"spec/samples/bad_code.lua:3:16: unused function &apos;helper&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:2\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W212\" message=\"spec/samples/bad_code.lua:3:23: unused variable length argument\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:3\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W111\" message=\"spec/samples/bad_code.lua:7:10: setting non-standard global variable &apos;embrace&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:4\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W412\" message=\"spec/samples/bad_code.lua:8:10: variable &apos;opt&apos; was previously defined as an argument on line 7\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:5\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W113\" message=\"spec/samples/bad_code.lua:9:11: accessing undefined variable &apos;hepler&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/python_code.lua:1\" classname=\"spec/samples/python_code.lua\">\r\n        <failure type=\"E011\" message=\"spec/samples/python_code.lua:1:6: expected &apos;=&apos; near &apos;__future__&apos;\"/>\r\n    </testcase>\r\n</testsuite>\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter JUnit --no-config\")\r\n   end)\r\n\r\n   it(\"has built-in simple warning-per-line formatter\", function()\r\n      assert.equal(\"\", get_output \"spec/samples/good_code.lua --std=lua52 --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/bad_code.lua:3:16: unused function 'helper'\r\nspec/samples/bad_code.lua:3:23: unused variable length argument\r\nspec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\nspec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\nspec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\nspec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/404.lua: I/O error (couldn't read: No such file or directory)\r\n]], get_output \"spec/samples/404.lua --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/bad_code.lua:3:16: (W211) unused function 'helper'\r\nspec/samples/bad_code.lua:3:23: (W212) unused variable length argument\r\nspec/samples/bad_code.lua:7:10: (W111) setting non-standard global variable 'embrace'\r\nspec/samples/bad_code.lua:8:10: (W412) variable 'opt' was previously defined as an argument on line 7\r\nspec/samples/bad_code.lua:9:11: (W113) accessing undefined variable 'hepler'\r\nspec/samples/python_code.lua:1:6: (E011) expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter plain --codes --no-config\")\r\n   end)\r\n\r\n   it(\"provides version info\", function()\r\n      local output = get_output \"--version\"\r\n      assert.truthy(output:match(\"^Luacheck: [%w%p ]+\\nLua: [%w%p ]+\\nLuaFileSystem: [%w%p ]+\\nLuaLanes: [%w%p ]+\\n$\"))\r\n   end)\r\n\r\n   it(\"expands folders\", function()\r\n      assert.matches(\"^Total: %d+ warnings / %d+ errors in 20 files\\n$\", get_output \"spec/samples -qqq --no-config\")\r\n   end)\r\n\r\n   it(\"uses --include-files when expanding folders\", function()\r\n      assert.matches(\"^Total: %d+ warnings / %d+ errors in 2 files\\n$\",\r\n         get_output(\"spec/samples -qqq --no-config --include-files \" .. quote(\"**/*.rockspec\")))\r\n   end)\r\n\r\n   describe(\"config\", function()\r\n      describe(\"loading\", function()\r\n         it(\"uses .luacheckrc in current directory if possible\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            1 warning\r\n\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    2 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"nested\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"does not use .luacheckrc in current directory with --no-config\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            2 warnings\r\n\r\n    nested/ab.lua:1:7: accessing undefined variable 'a'\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    3 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:10: accessing undefined variable 'b'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output(\"nested --no-config\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"uses .luacheckrc in upper directory\", function()\r\n            assert.equal(norm_output [[\r\nChecking ab.lua                                   1 warning\r\n\r\n    ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/abc.lua                           2 warnings\r\n\r\n    nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"ab.lua nested\", \"spec/configs/project/nested/\"))\r\n         end)\r\n\r\n         it(\"uses config provided with --config=path\", function()\r\n            assert.equal([[\r\nChecking spec/samples/compat.lua                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/compat.lua --config=spec/configs/global_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses config when checking stdin\", function()\r\n            assert.equal([[\r\nChecking stdin                                    OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/global_config.luacheckrc < spec/samples/compat.lua\")\r\n         end)\r\n\r\n         it(\"uses per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 4 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses new filename when selecting per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc --filename spec/samples/unused_code.lua < spec/samples/unused_code.lua\")\r\n         end)\r\n\r\n         it(\"uses all overrides prefixing file name\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nChecking spec/samples/unused_code.lua             7 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n\r\nTotal: 8 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/unused_secondaries.lua spec/samples/unused_code.lua --config=spec/configs/multioverride_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"allows reenabling warnings ignored in config using --enable\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             1 warning\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc --enable=211\")\r\n         end)\r\n\r\n         it(\"allows using cli-specific options in top level config\", function()\r\n            assert.equal([[Files: 2\r\nWarnings: 14\r\nErrors: 0\r\nQuiet: 0\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/cli_specific_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"uses exclude_files option\", function()\r\n            assert.equal(([[\r\nChecking spec/samples/argparse.lua                6 warnings\r\nChecking spec/samples/compat.lua                  4 warnings\r\nChecking spec/samples/custom_std_inline_options.lua 3 warnings / 1 error\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\nChecking spec/samples/globals.lua                 2 warnings\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\nChecking spec/samples/python_code.lua             1 error\r\nChecking spec/samples/read_globals.lua            5 warnings\r\nChecking spec/samples/read_globals_inline_options.lua 3 warnings\r\nChecking spec/samples/redefined.lua               7 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]]):gsub(\"(spec/samples)/\", \"%1\"..package.config:sub(1, 1)),\r\n            get_output \"spec/samples --config=spec/configs/exclude_files_config.luacheckrc -qq\")\r\n         end)\r\n\r\n         it(\"loads exclude_files option correctly from upper directory\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking read_globals.lua                         5 warnings\r\nChecking read_globals_inline_options.lua          3 warnings\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq\", \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"combines excluded files from config and cli\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 45 warnings / 4 errors in 12 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq --exclude-files \" .. quote(\"./read*\"), \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"allows defining custom stds\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n    spec/samples/globals.lua:1:22: accessing undefined variable 'tostring'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:1: accessing undefined variable 'print'\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=+other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"allows importing options with require\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: (W113) accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/import_config.luacheckrc\")\r\n         end)\r\n      end)\r\n\r\n      describe(\"error handling\", function()\r\n         it(\"raises critical error on config with syntax errors\", function()\r\n            assert.matches([[\r\nCritical error: Couldn't load configuration from spec/configs/bad_config.luacheckrc: syntax error %(line 2: .*%)\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"raises critical error on non-existent config\", function()\r\n            assert.equal([[\r\nCritical error: Couldn't find configuration file spec/configs/config_404.luacheckrc\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n         end)\r\n      end)\r\n\r\n      describe(\"overwriting\", function()\r\n         it(\"prioritizes CLI options over config\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"prioritizes CLI options over config overrides\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_file_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"concats array-like options from config and CLI\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/global_config.luacheckrc --globals tostring\")\r\n         end)\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 330,
    "text": "it(\"exists\", function()\r\n      assert.equal(0, get_exitcode \"--help\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "it(\"works for correct files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/good_code.lua --no-config\")\r\n      assert.equal(0, get_exitcode \"spec/samples/good_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "it(\"removes ./ in the beginnings of file names\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"./spec/samples/good_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "it(\"allows setting new filename\", function()\r\n      assert.equal([[\r\nChecking new.lua                                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/good_code.lua --no-config --filename new.lua\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 334,
    "text": "it(\"filters files using --exclude-files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config --exclude-files \" .. quote(\"**/??d_code.lua\")))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "it(\"filters files using --include-files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config -qq --include-files \" .. quote(\"**/??d_code.lua\")))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "it(\"--exclude-files has priority over --include-files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config --include-files \" .. quote(\"**/*.lua\") .. \" --exclude-files \" .. quote(\"**/??d_code.lua\")))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "it(\"works for incorrect files\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --no-config\")\r\n      assert.equal(1, get_exitcode \"spec/samples/bad_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "it(\"works for incorrect patterns in options\", function()\r\n      assert.equal([[\r\nCritical error: Invalid pattern '^%1foo$'\r\n]], get_output \"spec/samples/bad_code.lua --ignore %1foo --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "it(\"checks stdin when given -\", function()\r\n      assert.equal([[\r\nChecking stdin                                    5 warnings\r\n\r\n    stdin:3:16: unused function 'helper'\r\n    stdin:3:23: unused variable length argument\r\n    stdin:7:10: setting non-standard global variable 'embrace'\r\n    stdin:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    stdin:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc < spec/samples/bad_code.lua\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "it(\"colors output by default\", function()\r\n      assert.equal([[\r\nChecking spec/samples/good_code.lua               #OK#\r\nChecking spec/samples/bad_code.lua                #5 warnings#\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function #helper#\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable #embrace#\r\n    spec/samples/bad_code.lua:8:10: variable #opt# was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable #hepler#\r\n\r\nTotal: #5# warnings / #0# errors in 2 files\r\n]], get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua --no-config\", nil, true))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "it(\"suppresses OK output with -q\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-q spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n      assert.equal([[\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"-q spec/samples/good_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "it(\"suppresses warnings output with -qq\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\nTotal: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-qq spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "it(\"suppresses file info output with -qqq\", function()\r\n      assert.equal([[Total: 14 warnings / 0 errors in 3 files\r\n]], get_output \"-qqq spec/samples/bad_code.lua spec/samples/good_code.lua spec/samples/unused_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "it(\"allows to ignore some types of warnings\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"-u spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"-g spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"-r spec/samples/bad_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "it(\"allows to define additional globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --globals embrace --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "it(\"allows to set standard globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                6 warnings\r\n\r\n    spec/samples/bad_code.lua:1:1: mutating non-standard global variable 'package'\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"--std none spec/samples/bad_code.lua --no-config\")\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"--std lua51+lua52+lua53 spec/samples/bad_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "it(\"allows to ignore some variables\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                3 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --ignore embrace opt --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "it(\"allows to only watch some variables\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                1 warning\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_code.lua --only helper --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "it(\"recognizes different types of variables\", function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 9 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "it(\"allows to ignore unused arguments\", function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_code.lua             4 warnings\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_code.lua --no-unused-args --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "it(\"allows to ignore unused secondary values and variables\", function()\r\n      assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\n    spec/samples/unused_secondaries.lua:3:7: unused variable 'a'\r\n    spec/samples/unused_secondaries.lua:6:7: unused variable 'x'\r\n    spec/samples/unused_secondaries.lua:6:13: unused variable 'z'\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nTotal: 4 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_secondaries.lua --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:6:7: unused variable 'x'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/unused_secondaries.lua -s --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "it(\"allows to ignore warnings related to implicit self\", function()\r\n      assert.equal([[\r\nChecking spec/samples/redefined.lua               5 warnings\r\n\r\n    spec/samples/redefined.lua:4:10: shadowing upvalue 'a' on line 1\r\n    spec/samples/redefined.lua:4:13: variable 'self' is never set\r\n    spec/samples/redefined.lua:4:13: variable 'self' was previously defined as an argument on line 3\r\n    spec/samples/redefined.lua:7:13: shadowing definition of variable 'a' on line 4\r\n    spec/samples/redefined.lua:8:32: shadowing upvalue 'self' on line 4\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/redefined.lua --no-self --globals each --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "it(\"handles errors gracefully\", function()\r\n      assert.equal([[\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nChecking s/samples/absent_code.lua                I/O error\r\n\r\n    s/samples/absent_code.lua: couldn't read: No such file or directory\r\n\r\nTotal: 0 warnings / 1 error in 1 file, couldn't check 1 file\r\n]], get_output \"spec/samples/python_code.lua s/samples/absent_code.lua --no-config\")\r\n      assert.equal(2, get_exitcode \"spec/samples/python_code.lua spec/samples/absent_code.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "it(\"expands rockspecs\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/good_code.lua               OK\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/sample.rockspec --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "it(\"handles bad rockspecs\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad.rockspec                Syntax error\r\n\r\n    spec/samples/bad.rockspec: rockspec.build is not a table\r\n\r\nTotal: 0 warnings / 0 errors in 0 files, couldn't check 1 file\r\n]], get_output \"spec/samples/bad.rockspec --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "it(\"allows ignoring defined globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined.lua                 1 warning\r\n\r\n    spec/samples/defined.lua:4:4: accessing undefined variable 'baz'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined.lua spec/samples/defined2.lua -d --no-config\")\r\n\r\n   assert.equal([[\r\nChecking spec/samples/defined2.lua                OK\r\nChecking spec/samples/defined.lua                 1 warning\r\n\r\n    spec/samples/defined.lua:4:4: accessing undefined variable 'baz'\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined2.lua spec/samples/defined.lua -d --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "it(\"allows restricting scope of defined globals to the file with their definition\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined2.lua                1 warning\r\n\r\n    spec/samples/defined2.lua:1:1: accessing undefined variable 'foo'\r\n\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined2.lua spec/samples/defined3.lua -d -m --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "it(\"allows ignoring globals defined in top level scope\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined4.lua                2 warnings\r\n\r\n    spec/samples/defined4.lua:1:10: unused global variable 'foo'\r\n    spec/samples/defined4.lua:3:4: setting non-standard global variable 'bar'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined4.lua -t --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "it(\"detects unused defined globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                3 warnings\r\n\r\n    spec/samples/defined3.lua:1:1: unused global variable 'foo'\r\n    spec/samples/defined3.lua:2:1: unused global variable 'foo'\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -d --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                1 warning\r\n\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -d --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "it(\"treats `unused global` warnings as `global` type warnings\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -gd --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                1 warning\r\n\r\n    spec/samples/defined3.lua:3:1: unused global variable 'bar'\r\n\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 1 warning / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -ud --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "it(\"allows ignoring unused defined globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/defined3.lua -d --ignore 13 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/defined3.lua                OK\r\nChecking spec/samples/defined2.lua                OK\r\n\r\nTotal: 0 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/defined3.lua spec/samples/defined2.lua -d --ignore 13 --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "it(\"detects flow issues\", function()\r\n      assert.equal([[\r\nChecking spec/samples/bad_flow.lua                6 warnings\r\n\r\n    spec/samples/bad_flow.lua:1:28: empty if branch\r\n    spec/samples/bad_flow.lua:6:4: empty do..end block\r\n    spec/samples/bad_flow.lua:12:15: left-hand side of assignment is too long\r\n    spec/samples/bad_flow.lua:16:15: left-hand side of assignment is too short\r\n    spec/samples/bad_flow.lua:21:7: unreachable code\r\n    spec/samples/bad_flow.lua:25:1: loop is executed at most once\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/bad_flow.lua --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "it(\"detects redefinitions\", function()\r\n      assert.equal([[\r\nChecking spec/samples/redefined.lua               6 warnings\r\n\r\n    spec/samples/redefined.lua:3:11: unused argument 'self'\r\n    spec/samples/redefined.lua:4:10: shadowing upvalue 'a' on line 1\r\n    spec/samples/redefined.lua:4:13: variable 'self' is never set\r\n    spec/samples/redefined.lua:4:13: variable 'self' was previously defined as an argument on line 3\r\n    spec/samples/redefined.lua:7:13: shadowing definition of variable 'a' on line 4\r\n    spec/samples/redefined.lua:8:32: shadowing upvalue 'self' on line 4\r\n\r\nTotal: 6 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/redefined.lua --globals each --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "it(\"detects issues related to read-only globals\", function()\r\n      assert.equal([[\r\nChecking spec/samples/read_globals.lua            5 warnings\r\n\r\n    spec/samples/read_globals.lua:1:1: setting read-only global variable 'string'\r\n    spec/samples/read_globals.lua:2:1: mutating read-only global variable 'table'\r\n    spec/samples/read_globals.lua:5:1: setting read-only global variable 'bar'\r\n    spec/samples/read_globals.lua:6:1: mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals.lua:6:21: accessing undefined variable 'baz'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals.lua --std=lua52 --globals foo --read-globals bar --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 365,
    "text": "it(\"allows showing warning codes\", function()\r\n      assert.equal([[\r\nChecking spec/samples/read_globals.lua            5 warnings\r\n\r\n    spec/samples/read_globals.lua:1:1: (W121) setting read-only global variable 'string'\r\n    spec/samples/read_globals.lua:2:1: (W122) mutating read-only global variable 'table'\r\n    spec/samples/read_globals.lua:5:1: (W121) setting read-only global variable 'bar'\r\n    spec/samples/read_globals.lua:6:1: (W112) mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals.lua:6:21: (W113) accessing undefined variable 'baz'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals.lua --std=lua52 --globals foo --read-globals bar --codes --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 366,
    "text": "it(\"allows showing token ranges\", function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          8 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16-16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4-5: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1-3: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10-10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7-7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10-10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1-17: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4-19: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1-2: empty do..end block\r\n    spec/samples/inline_options.lua:35:10-13: empty if branch\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6-15: expected '=' near '__future__'\r\n\r\nTotal: 8 warnings / 3 errors in 2 files\r\n]], get_output \"spec/samples/inline_options.lua spec/samples/python_code.lua --ranges --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "it(\"applies inline options\", function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          8 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n    spec/samples/inline_options.lua:35:10: empty if branch\r\n\r\nTotal: 8 warnings / 2 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\n\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:26:1: unpaired push directive\r\n    spec/samples/inline_options.lua:28:4: unpaired pop directive\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n\r\nTotal: 7 warnings / 2 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --ignore=542 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\n\r\n    spec/samples/global_inline_options.lua:6:10: unused global variable 'f'\r\n    spec/samples/global_inline_options.lua:7:4: setting non-standard global variable 'baz'\r\n    spec/samples/global_inline_options.lua:18:4: setting non-module global variable 'external'\r\n\r\nTotal: 3 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/global_inline_options.lua --std=lua52 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/read_globals_inline_options.lua 5 warnings\r\n\r\n    spec/samples/read_globals_inline_options.lua:2:10: accessing undefined variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:3:1: setting read-only global variable 'foo'\r\n    spec/samples/read_globals_inline_options.lua:3:11: setting non-standard global variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:3:16: mutating non-standard global variable 'baz'\r\n    spec/samples/read_globals_inline_options.lua:5:1: setting read-only global variable 'foo'\r\n\r\nTotal: 5 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals_inline_options.lua --std=lua52 --no-config\")\r\n\r\n      assert.equal([[\r\nChecking spec/samples/read_globals_inline_options.lua 1 warning\r\n\r\n    spec/samples/read_globals_inline_options.lua:3:16: mutating read-only global variable 'baz'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/read_globals_inline_options.lua --std=lua52 --read-globals baz --globals foo --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "it(\"inline options can use extended stds\", function()\r\n      assert.equal([[\r\nChecking spec/samples/custom_std_inline_options.lua 2 warnings\r\n\r\n    spec/samples/custom_std_inline_options.lua:3:1: accessing undefined variable 'tostring'\r\n    spec/samples/custom_std_inline_options.lua:6:25: accessing undefined variable 'it'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/custom_std_inline_options.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "it(\"inline options can be disabled\", function()\r\n      assert.equal([[\r\nChecking spec/samples/inline_options.lua          26 warnings\r\n\r\n    spec/samples/inline_options.lua:3:1: accessing undefined variable 'foo'\r\n    spec/samples/inline_options.lua:4:1: accessing undefined variable 'bar'\r\n    spec/samples/inline_options.lua:6:16: unused function 'f'\r\n    spec/samples/inline_options.lua:6:18: unused argument 'a'\r\n    spec/samples/inline_options.lua:8:4: accessing undefined variable 'foo'\r\n    spec/samples/inline_options.lua:9:4: accessing undefined variable 'bar'\r\n    spec/samples/inline_options.lua:10:4: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:11:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:12:4: accessing undefined variable 'qu'\r\n    spec/samples/inline_options.lua:15:1: accessing undefined variable 'baz'\r\n    spec/samples/inline_options.lua:18:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:18:7: variable 'f' was previously defined on line 6\r\n    spec/samples/inline_options.lua:20:7: unused variable 'g'\r\n    spec/samples/inline_options.lua:22:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:22:7: variable 'f' was previously defined on line 18\r\n    spec/samples/inline_options.lua:22:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:22:10: variable 'g' was previously defined on line 20\r\n    spec/samples/inline_options.lua:24:7: unused variable 'f'\r\n    spec/samples/inline_options.lua:24:7: variable 'f' was previously defined on line 22\r\n    spec/samples/inline_options.lua:24:10: unused variable 'g'\r\n    spec/samples/inline_options.lua:24:10: variable 'g' was previously defined on line 22\r\n    spec/samples/inline_options.lua:27:16: unused function 'f'\r\n    spec/samples/inline_options.lua:27:16: variable 'f' was previously defined on line 24\r\n    spec/samples/inline_options.lua:32:1: empty do..end block\r\n    spec/samples/inline_options.lua:34:1: empty do..end block\r\n    spec/samples/inline_options.lua:35:10: empty if branch\r\n\r\nTotal: 26 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/inline_options.lua --std=none --no-inline --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "describe(\"caching\", function()\r\n      local tmpname\r\n\r\n      before_each(function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end)\r\n\r\n      after_each(function()\r\n         os.remove(tmpname)\r\n      end)\r\n\r\n      it(\"caches results\", function()\r\n         local normal_output = [[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]]\r\n\r\n         local mocked_output = [[\r\nChecking spec/samples/good_code.lua               1 error\r\n\r\n    spec/samples/good_code.lua:5:7: this code is actually bad\r\n\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             2 warnings\r\n\r\n    spec/samples/python_code.lua:1:1: setting non-standard global variable 'global'\r\n    spec/samples/python_code.lua:6:8: accessing uninitialized variable 'uninit'\r\n\r\nChecking spec/samples/unused_code.lua             9 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:21:7: variable 'z' is never accessed\r\n\r\nTotal: 16 warnings / 1 error in 4 files\r\n]]\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local cache = utils.read_file(tmpname)\r\n         assert.string(cache)\r\n         local format_version, good_mtime, bad_mtime, python_mtime = cache:match([[\r\n\r\n(%d+)\r\nspec/samples/good_code.lua\r\n(%d+)\r\nreturn {}\r\nspec/samples/bad_code.lua\r\n(%d+)\r\nreturn {{\"112\",\"package\",1,1,7},{\"211\",\"helper\",3,16,21,%[10%]=true},{\"212\",\"...\",3,23,25},{\"111\",\"embrace\",7,10,16,%[12%]=true},{\"412\",\"opt\",8,10,12,7,18},{\"113\",\"hepler\",9,11,16}}\r\nspec/samples/python_code.lua\r\n(%d+)\r\nreturn {{\"011\",%[3%]=1,%[4%]=6,%[5%]=15,%[23%]=\"expected '=' near '__future__'\"}}\r\n]])\r\n\r\n         format_version = tonumber(format_version)\r\n         assert.number(format_version)\r\n         assert.string(good_mtime)\r\n         assert.string(bad_mtime)\r\n         assert.string(python_mtime)\r\n\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         local function write_new_cache(version)\r\n            local fh = io.open(tmpname, \"wb\")\r\n            assert.userdata(fh)\r\n            fh:write(([[\r\n%s\r\nspec/samples/python_code.lua\r\n%s\r\nreturn {{\"111\", \"global\", 1, 1}, {\"321\", \"uninit\", 6, 8}}\r\nspec/samples/good_code.lua\r\n%s\r\nreturn {{\"011\",[3]=5,[4]=7,[23]=\"this code is actually bad\"}}\r\nspec/samples/bad_code.lua\r\n%s\r\nreturn {}]]):format(version, python_mtime, good_mtime, tostring(tonumber(bad_mtime) - 1)))\r\n            fh:close()\r\n         end\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n         assert.equal(mocked_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua spec/samples/unused_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\\n\"..tostring(format_version + 1))\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n\r\n         write_new_cache(\"\")\r\n         assert.equal(normal_output, get_output(\"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --no-config --cache \"..tmpname))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "if not multithreading.has_lanes then\r\n      pending(\"uses multithreading\")\r\n   else\r\n      it(\"uses multithreading\", function()\r\n         assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 -j2 --no-config\")\r\n      end)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 372,
    "text": "pending(\"uses multithreading\")",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "it(\"uses multithreading\", function()\r\n         assert.equal([[\r\nChecking spec/samples/good_code.lua               OK\r\nChecking spec/samples/bad_code.lua                5 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/python_code.lua             1 error\r\n\r\n    spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n\r\nTotal: 5 warnings / 1 error in 3 files\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 -j2 --no-config\")\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "it(\"allows using custom formatter\", function()\r\n      assert.equal([[Files: 2\r\nFormatter: spec.formatters.custom_formatter\r\nQuiet: 1\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua --formatter spec.formatters.custom_formatter -q --codes --no-color --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "it(\"loads custom formatters relatively to project root\", function()\r\n      assert.equal([[Files: 2\r\nFormatter: spec.formatters.custom_formatter\r\nQuiet: 1\r\nColor: false\r\nCodes: true\r\n]], get_output(\"samples/good_code.lua samples/bad_code.lua --formatter spec.formatters.custom_formatter -q --codes --no-color --no-config\", \"spec/\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 376,
    "text": "it(\"has built-in TAP formatter\", function()\r\n      assert.equal([[\r\n1..7\r\nok 1 spec/samples/good_code.lua\r\nnot ok 2 spec/samples/bad_code.lua:3:16: unused function 'helper'\r\nnot ok 3 spec/samples/bad_code.lua:3:23: unused variable length argument\r\nnot ok 4 spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\nnot ok 5 spec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\nnot ok 6 spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\nnot ok 7 spec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter TAP --no-config\")\r\n\r\n      assert.equal([[\r\n1..7\r\nok 1 spec/samples/good_code.lua\r\nnot ok 2 spec/samples/bad_code.lua:3:16: (W211) unused function 'helper'\r\nnot ok 3 spec/samples/bad_code.lua:3:23: (W212) unused variable length argument\r\nnot ok 4 spec/samples/bad_code.lua:7:10: (W111) setting non-standard global variable 'embrace'\r\nnot ok 5 spec/samples/bad_code.lua:8:10: (W412) variable 'opt' was previously defined as an argument on line 7\r\nnot ok 6 spec/samples/bad_code.lua:9:11: (W113) accessing undefined variable 'hepler'\r\nnot ok 7 spec/samples/python_code.lua:1:6: (E011) expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter TAP --codes --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "it(\"has built-in JUnit formatter\", function()\r\n      assert.equal([[\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<testsuite name=\"Luacheck report\" tests=\"7\">\r\n    <testcase name=\"spec/samples/good_code.lua\" classname=\"spec/samples/good_code.lua\"/>\r\n    <testcase name=\"spec/samples/bad_code.lua:1\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W211\" message=\"spec/samples/bad_code.lua:3:16: unused function &apos;helper&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:2\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W212\" message=\"spec/samples/bad_code.lua:3:23: unused variable length argument\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:3\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W111\" message=\"spec/samples/bad_code.lua:7:10: setting non-standard global variable &apos;embrace&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:4\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W412\" message=\"spec/samples/bad_code.lua:8:10: variable &apos;opt&apos; was previously defined as an argument on line 7\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/bad_code.lua:5\" classname=\"spec/samples/bad_code.lua\">\r\n        <failure type=\"W113\" message=\"spec/samples/bad_code.lua:9:11: accessing undefined variable &apos;hepler&apos;\"/>\r\n    </testcase>\r\n    <testcase name=\"spec/samples/python_code.lua:1\" classname=\"spec/samples/python_code.lua\">\r\n        <failure type=\"E011\" message=\"spec/samples/python_code.lua:1:6: expected &apos;=&apos; near &apos;__future__&apos;\"/>\r\n    </testcase>\r\n</testsuite>\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter JUnit --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "it(\"has built-in simple warning-per-line formatter\", function()\r\n      assert.equal(\"\", get_output \"spec/samples/good_code.lua --std=lua52 --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/bad_code.lua:3:16: unused function 'helper'\r\nspec/samples/bad_code.lua:3:23: unused variable length argument\r\nspec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\nspec/samples/bad_code.lua:8:10: variable 'opt' was previously defined as an argument on line 7\r\nspec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\nspec/samples/python_code.lua:1:6: expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/404.lua: I/O error (couldn't read: No such file or directory)\r\n]], get_output \"spec/samples/404.lua --formatter plain --no-config\")\r\n\r\n      assert.equal([[\r\nspec/samples/bad_code.lua:3:16: (W211) unused function 'helper'\r\nspec/samples/bad_code.lua:3:23: (W212) unused variable length argument\r\nspec/samples/bad_code.lua:7:10: (W111) setting non-standard global variable 'embrace'\r\nspec/samples/bad_code.lua:8:10: (W412) variable 'opt' was previously defined as an argument on line 7\r\nspec/samples/bad_code.lua:9:11: (W113) accessing undefined variable 'hepler'\r\nspec/samples/python_code.lua:1:6: (E011) expected '=' near '__future__'\r\n]], get_output \"spec/samples/good_code.lua spec/samples/bad_code.lua spec/samples/python_code.lua --std=lua52 --formatter plain --codes --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "it(\"provides version info\", function()\r\n      local output = get_output \"--version\"\r\n      assert.truthy(output:match(\"^Luacheck: [%w%p ]+\\nLua: [%w%p ]+\\nLuaFileSystem: [%w%p ]+\\nLuaLanes: [%w%p ]+\\n$\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 380,
    "text": "it(\"expands folders\", function()\r\n      assert.matches(\"^Total: %d+ warnings / %d+ errors in 20 files\\n$\", get_output \"spec/samples -qqq --no-config\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "it(\"uses --include-files when expanding folders\", function()\r\n      assert.matches(\"^Total: %d+ warnings / %d+ errors in 2 files\\n$\",\r\n         get_output(\"spec/samples -qqq --no-config --include-files \" .. quote(\"**/*.rockspec\")))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "describe(\"config\", function()\r\n      describe(\"loading\", function()\r\n         it(\"uses .luacheckrc in current directory if possible\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            1 warning\r\n\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    2 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"nested\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"does not use .luacheckrc in current directory with --no-config\", function()\r\n            assert.equal(norm_output [[\r\nChecking nested/ab.lua                            2 warnings\r\n\r\n    nested/ab.lua:1:7: accessing undefined variable 'a'\r\n    nested/ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/nested/abc.lua                    3 warnings\r\n\r\n    nested/nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/nested/abc.lua:1:10: accessing undefined variable 'b'\r\n    nested/nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output(\"nested --no-config\", \"spec/configs/project/\"))\r\n         end)\r\n\r\n         it(\"uses .luacheckrc in upper directory\", function()\r\n            assert.equal(norm_output [[\r\nChecking ab.lua                                   1 warning\r\n\r\n    ab.lua:1:10: accessing undefined variable 'b'\r\n\r\nChecking nested/abc.lua                           2 warnings\r\n\r\n    nested/abc.lua:1:7: accessing undefined variable 'a'\r\n    nested/abc.lua:1:13: accessing undefined variable 'c'\r\n\r\nTotal: 3 warnings / 0 errors in 2 files\r\n]], get_output(\"ab.lua nested\", \"spec/configs/project/nested/\"))\r\n         end)\r\n\r\n         it(\"uses config provided with --config=path\", function()\r\n            assert.equal([[\r\nChecking spec/samples/compat.lua                  OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/compat.lua --config=spec/configs/global_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses config when checking stdin\", function()\r\n            assert.equal([[\r\nChecking stdin                                    OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/global_config.luacheckrc < spec/samples/compat.lua\")\r\n         end)\r\n\r\n         it(\"uses per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 4 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"uses new filename when selecting per-file overrides\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_code.lua             OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"- --config=spec/configs/override_config.luacheckrc --filename spec/samples/unused_code.lua < spec/samples/unused_code.lua\")\r\n         end)\r\n\r\n         it(\"uses all overrides prefixing file name\", function()\r\n            assert.equal([[\r\nChecking spec/samples/unused_secondaries.lua      1 warning\r\n\r\n    spec/samples/unused_secondaries.lua:12:1: value assigned to variable 'o' is unused\r\n\r\nChecking spec/samples/unused_code.lua             7 warnings\r\n\r\n    spec/samples/unused_code.lua:3:18: unused argument 'baz'\r\n    spec/samples/unused_code.lua:4:8: unused loop variable 'i'\r\n    spec/samples/unused_code.lua:7:11: unused loop variable 'a'\r\n    spec/samples/unused_code.lua:7:14: unused loop variable 'b'\r\n    spec/samples/unused_code.lua:7:17: unused loop variable 'c'\r\n    spec/samples/unused_code.lua:13:7: value assigned to variable 'x' is unused\r\n    spec/samples/unused_code.lua:14:1: value assigned to variable 'x' is unused\r\n\r\nTotal: 8 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/unused_secondaries.lua spec/samples/unused_code.lua --config=spec/configs/multioverride_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"allows reenabling warnings ignored in config using --enable\", function()\r\n            assert.equal([[\r\nChecking spec/samples/bad_code.lua                4 warnings\r\n\r\n    spec/samples/bad_code.lua:3:16: unused function 'helper'\r\n    spec/samples/bad_code.lua:3:23: unused variable length argument\r\n    spec/samples/bad_code.lua:7:10: setting non-standard global variable 'embrace'\r\n    spec/samples/bad_code.lua:9:11: accessing undefined variable 'hepler'\r\n\r\nChecking spec/samples/unused_code.lua             1 warning\r\n\r\n    spec/samples/unused_code.lua:5:13: unused variable 'q'\r\n\r\nTotal: 5 warnings / 0 errors in 2 files\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/override_config.luacheckrc --enable=211\")\r\n         end)\r\n\r\n         it(\"allows using cli-specific options in top level config\", function()\r\n            assert.equal([[Files: 2\r\nWarnings: 14\r\nErrors: 0\r\nQuiet: 0\r\nColor: false\r\nCodes: true\r\n]], get_output \"spec/samples/bad_code.lua spec/samples/unused_code.lua --config=spec/configs/cli_specific_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"uses exclude_files option\", function()\r\n            assert.equal(([[\r\nChecking spec/samples/argparse.lua                6 warnings\r\nChecking spec/samples/compat.lua                  4 warnings\r\nChecking spec/samples/custom_std_inline_options.lua 3 warnings / 1 error\r\nChecking spec/samples/global_inline_options.lua   3 warnings\r\nChecking spec/samples/globals.lua                 2 warnings\r\nChecking spec/samples/inline_options.lua          7 warnings / 2 errors\r\nChecking spec/samples/python_code.lua             1 error\r\nChecking spec/samples/read_globals.lua            5 warnings\r\nChecking spec/samples/read_globals_inline_options.lua 3 warnings\r\nChecking spec/samples/redefined.lua               7 warnings\r\nChecking spec/samples/unused_code.lua             9 warnings\r\nChecking spec/samples/unused_secondaries.lua      4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]]):gsub(\"(spec/samples)/\", \"%1\"..package.config:sub(1, 1)),\r\n            get_output \"spec/samples --config=spec/configs/exclude_files_config.luacheckrc -qq\")\r\n         end)\r\n\r\n         it(\"loads exclude_files option correctly from upper directory\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking read_globals.lua                         5 warnings\r\nChecking read_globals_inline_options.lua          3 warnings\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 53 warnings / 4 errors in 14 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq\", \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"combines excluded files from config and cli\", function()\r\n            assert.equal([[\r\nChecking argparse.lua                             6 warnings\r\nChecking compat.lua                               4 warnings\r\nChecking custom_std_inline_options.lua            3 warnings / 1 error\r\nChecking global_inline_options.lua                3 warnings\r\nChecking globals.lua                              2 warnings\r\nChecking inline_options.lua                       7 warnings / 2 errors\r\nChecking python_code.lua                          1 error\r\nChecking redefined.lua                            7 warnings\r\nChecking unused_code.lua                          9 warnings\r\nChecking unused_secondaries.lua                   4 warnings\r\n\r\nTotal: 45 warnings / 4 errors in 12 files\r\n]], get_output(\". --config=spec/configs/exclude_files_config.luacheckrc -qq --exclude-files \" .. quote(\"./read*\"), \"spec/samples/\"))\r\n         end)\r\n\r\n         it(\"allows defining custom stds\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n    spec/samples/globals.lua:1:22: accessing undefined variable 'tostring'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 2 warnings\r\n\r\n    spec/samples/globals.lua:1:1: accessing undefined variable 'print'\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 2 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:15: accessing undefined variable 'rawlen'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=+other_std\")\r\n\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/custom_stds_config.luacheckrc --std=lua52\")\r\n         end)\r\n\r\n         it(\"allows importing options with require\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 1 warning\r\n\r\n    spec/samples/globals.lua:1:7: (W113) accessing undefined variable 'setfenv'\r\n\r\nTotal: 1 warning / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/import_config.luacheckrc\")\r\n         end)\r\n      end)\r\n\r\n      describe(\"error handling\", function()\r\n         it(\"raises critical error on config with syntax errors\", function()\r\n            assert.matches([[\r\nCritical error: Couldn't load configuration from spec/configs/bad_config.luacheckrc: syntax error %(line 2: .*%)\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/bad_config.luacheckrc\")\r\n         end)\r\n\r\n         it(\"raises critical error on non-existent config\", function()\r\n            assert.equal([[\r\nCritical error: Couldn't find configuration file spec/configs/config_404.luacheckrc\r\n]], get_output \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n            assert.equal(3, get_exitcode \"spec/samples/empty.lua --config=spec/configs/config_404.luacheckrc\")\r\n         end)\r\n      end)\r\n\r\n      describe(\"overwriting\", function()\r\n         it(\"prioritizes CLI options over config\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"prioritizes CLI options over config overrides\", function()\r\n            assert.equal(1, get_exitcode \"spec/samples/compat.lua --config=spec/configs/cli_override_file_config.luacheckrc --new-globals foo\")\r\n         end)\r\n\r\n         it(\"concats array-like options from config and CLI\", function()\r\n            assert.equal([[\r\nChecking spec/samples/globals.lua                 OK\r\n\r\nTotal: 0 warnings / 0 errors in 1 file\r\n]], get_output \"spec/samples/globals.lua --config=spec/configs/global_config.luacheckrc --globals tostring\")\r\n         end)\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 384,
    "text": "",
    "type": "function container"
  }, {
    "id": 385,
    "text": "luacheck_command",
    "type": "global function"
  }, {
    "id": 386,
    "text": "read_file",
    "type": "global function"
  }, {
    "id": 387,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 388,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 389,
    "text": "number",
    "type": "global function"
  }, {
    "id": 390,
    "text": "userdata",
    "type": "global function"
  }, {
    "id": 391,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 392,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 393,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 394,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 395,
    "text": "require",
    "type": "global function"
  }, {
    "id": 396,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 397,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 398,
    "text": "string",
    "type": "global function"
  }, {
    "id": 399,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 400,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 401,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 402,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 403,
    "text": "truthy",
    "type": "global function"
  }, {
    "id": 404,
    "text": "open",
    "type": "global function"
  }, {
    "id": 405,
    "text": "it",
    "type": "global function"
  }, {
    "id": 406,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 407,
    "text": "pending",
    "type": "global function"
  }, {
    "id": 408,
    "text": "",
    "type": "variable container"
  }, {
    "id": 409,
    "text": "",
    "type": "require container"
  }, {
    "id": 410,
    "text": "",
    "type": "local variable"
  }, {
    "id": 411,
    "text": "",
    "type": "n/a"
  }, {
    "id": 412,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 413,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 414,
    "text": "",
    "type": "require local variable"
  } ]
}