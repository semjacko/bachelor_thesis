{
  "_filename": "cache_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/cache_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 12
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 18
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 38
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 39
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 38
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 44
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 39
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 30
  }, {
    "from": 55,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 35
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 38
  }, {
    "from": 57,
    "label": "has",
    "to": 39
  }, {
    "from": 57,
    "label": "has",
    "to": 40
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 38
  }, {
    "from": 58,
    "label": "has",
    "to": 43
  }, {
    "from": 58,
    "label": "has",
    "to": 44
  }, {
    "from": 58,
    "label": "has",
    "to": 45
  }, {
    "from": 58,
    "label": "has",
    "to": 39
  }, {
    "from": 58,
    "label": "has",
    "to": 46
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 38
  }, {
    "from": 59,
    "label": "has",
    "to": 49
  }, {
    "from": 59,
    "label": "has",
    "to": 44
  }, {
    "from": 59,
    "label": "has",
    "to": 50
  }, {
    "from": 59,
    "label": "has",
    "to": 39
  }, {
    "from": 59,
    "label": "has",
    "to": 51
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 62
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 65
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 68
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 71
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 74
  }, {
    "from": 82,
    "label": "has",
    "to": 75
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 30
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 35
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 54
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 30
  }, {
    "from": 102,
    "label": "has",
    "to": 85
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 35
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 90
  }, {
    "from": 101,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 93
  }, {
    "from": 101,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 96
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 99
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 62
  }, {
    "from": 110,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 65
  }, {
    "from": 110,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 68
  }, {
    "from": 110,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 71
  }, {
    "from": 110,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 74
  }, {
    "from": 82,
    "label": "has",
    "to": 75
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 54
  }, {
    "from": 111,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 30
  }, {
    "from": 102,
    "label": "has",
    "to": 85
  }, {
    "from": 111,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 35
  }, {
    "from": 111,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 90
  }, {
    "from": 111,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 93
  }, {
    "from": 111,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 96
  }, {
    "from": 111,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 99
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 12
  }, {
    "from": 114,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 114,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 18
  }, {
    "from": 114,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 21
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 54
  }, {
    "from": 115,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 30
  }, {
    "from": 55,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 115,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 35
  }, {
    "from": 115,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 38
  }, {
    "from": 57,
    "label": "has",
    "to": 39
  }, {
    "from": 57,
    "label": "has",
    "to": 40
  }, {
    "from": 115,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 38
  }, {
    "from": 58,
    "label": "has",
    "to": 43
  }, {
    "from": 58,
    "label": "has",
    "to": 44
  }, {
    "from": 58,
    "label": "has",
    "to": 45
  }, {
    "from": 58,
    "label": "has",
    "to": 39
  }, {
    "from": 58,
    "label": "has",
    "to": 46
  }, {
    "from": 115,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 38
  }, {
    "from": 59,
    "label": "has",
    "to": 49
  }, {
    "from": 59,
    "label": "has",
    "to": 44
  }, {
    "from": 59,
    "label": "has",
    "to": 50
  }, {
    "from": 59,
    "label": "has",
    "to": 39
  }, {
    "from": 59,
    "label": "has",
    "to": 51
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 62
  }, {
    "from": 110,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 65
  }, {
    "from": 110,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 68
  }, {
    "from": 110,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 71
  }, {
    "from": 110,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 74
  }, {
    "from": 82,
    "label": "has",
    "to": 75
  }, {
    "from": 116,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 54
  }, {
    "from": 111,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 30
  }, {
    "from": 102,
    "label": "has",
    "to": 85
  }, {
    "from": 111,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 35
  }, {
    "from": 111,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 90
  }, {
    "from": 111,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 93
  }, {
    "from": 111,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 96
  }, {
    "from": 111,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 99
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 125
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 123
  }, {
    "from": 118,
    "label": "calls",
    "to": 123
  }, {
    "from": 118,
    "label": "calls",
    "to": 124
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 118,
    "label": "calls",
    "to": 135
  }, {
    "from": 118,
    "label": "calls",
    "to": 135
  }, {
    "from": 118,
    "label": "calls",
    "to": 135
  }, {
    "from": 118,
    "label": "calls",
    "to": 126
  }, {
    "from": 118,
    "label": "calls",
    "to": 126
  }, {
    "from": 118,
    "label": "calls",
    "to": 126
  }, {
    "from": 118,
    "label": "calls",
    "to": 122
  }, {
    "from": 118,
    "label": "calls",
    "to": 122
  }, {
    "from": 118,
    "label": "calls",
    "to": 122
  }, {
    "from": 118,
    "label": "calls",
    "to": 133
  }, {
    "from": 118,
    "label": "calls",
    "to": 133
  }, {
    "from": 118,
    "label": "calls",
    "to": 119
  }, {
    "from": 118,
    "label": "calls",
    "to": 119
  }, {
    "from": 118,
    "label": "calls",
    "to": 119
  }, {
    "from": 118,
    "label": "calls",
    "to": 119
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 128
  }, {
    "from": 118,
    "label": "calls",
    "to": 127
  }, {
    "from": 118,
    "label": "calls",
    "to": 127
  }, {
    "from": 118,
    "label": "calls",
    "to": 127
  }, {
    "from": 118,
    "label": "calls",
    "to": 127
  }, {
    "from": 118,
    "label": "calls",
    "to": 137
  }, {
    "from": 118,
    "label": "calls",
    "to": 137
  }, {
    "from": 118,
    "label": "calls",
    "to": 129
  }, {
    "from": 118,
    "label": "calls",
    "to": 131
  }, {
    "from": 118,
    "label": "calls",
    "to": 131
  }, {
    "from": 118,
    "label": "calls",
    "to": 130
  }, {
    "from": 118,
    "label": "calls",
    "to": 130
  }, {
    "from": 118,
    "label": "calls",
    "to": 134
  }, {
    "from": 118,
    "label": "calls",
    "to": 134
  }, {
    "from": 118,
    "label": "calls",
    "to": 134
  }, {
    "from": 118,
    "label": "calls",
    "to": 134
  }, {
    "from": 118,
    "label": "calls",
    "to": 134
  }, {
    "from": 118,
    "label": "calls",
    "to": 134
  }, {
    "from": 118,
    "label": "calls",
    "to": 132
  }, {
    "from": 1,
    "label": "contains",
    "to": 118
  }, {
    "from": 118,
    "label": "declares",
    "to": 4
  }, {
    "from": 118,
    "label": "declares",
    "to": 8
  }, {
    "from": 118,
    "label": "declares",
    "to": 11
  }, {
    "from": 118,
    "label": "declares",
    "to": 14
  }, {
    "from": 118,
    "label": "declares",
    "to": 17
  }, {
    "from": 118,
    "label": "declares",
    "to": 20
  }, {
    "from": 118,
    "label": "declares",
    "to": 23
  }, {
    "from": 118,
    "label": "declares",
    "to": 29
  }, {
    "from": 118,
    "label": "declares",
    "to": 34
  }, {
    "from": 118,
    "label": "declares",
    "to": 37
  }, {
    "from": 118,
    "label": "declares",
    "to": 42
  }, {
    "from": 118,
    "label": "declares",
    "to": 48
  }, {
    "from": 118,
    "label": "declares",
    "to": 53
  }, {
    "from": 118,
    "label": "declares",
    "to": 61
  }, {
    "from": 118,
    "label": "declares",
    "to": 64
  }, {
    "from": 118,
    "label": "declares",
    "to": 67
  }, {
    "from": 118,
    "label": "declares",
    "to": 70
  }, {
    "from": 118,
    "label": "declares",
    "to": 73
  }, {
    "from": 118,
    "label": "declares",
    "to": 77
  }, {
    "from": 118,
    "label": "declares",
    "to": 84
  }, {
    "from": 118,
    "label": "declares",
    "to": 87
  }, {
    "from": 118,
    "label": "declares",
    "to": 89
  }, {
    "from": 118,
    "label": "declares",
    "to": 92
  }, {
    "from": 118,
    "label": "declares",
    "to": 95
  }, {
    "from": 118,
    "label": "declares",
    "to": 98
  }, {
    "from": 118,
    "label": "declares",
    "to": 101
  }, {
    "from": 118,
    "label": "declares",
    "to": 109
  }, {
    "from": 118,
    "label": "declares",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 1,
    "label": "contains",
    "to": 139
  }, {
    "from": 138,
    "label": "initializes",
    "to": 140
  }, {
    "from": 139,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "requires",
    "to": 2
  }, {
    "from": 139,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "requires",
    "to": 3
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 80,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 81,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 98
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 98
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 101
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 67
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 98
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 101
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 109
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cache_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "cache",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "function()\r\n   actual_format_version = cache.format_version\r\n   cache.format_version = 0\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "actual_format_version = cache.format_version",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "cache.format_version = 0",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n   cache.format_version = actual_format_version\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "cache.format_version = actual_format_version",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function()\r\n         assert.same(\r\n            [[return {{\"111\",\"foo\",5,100,102,[22]=true},{\"211\",\"bar\",4,1,3,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, end_column = 102, in_module = true},\r\n               {code = \"211\", name = \"bar\", line = 4, column = 1, end_column = 3, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end",
    "type": "function"
  }, {
    "id": 12,
    "text": "assert.same(\r\n            [[return {{\"111\",\"foo\",5,100,102,[22]=true},{\"211\",\"bar\",4,1,3,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, end_column = 102, in_module = true},\r\n               {code = \"211\", name = \"bar\", line = 4, column = 1, end_column = 3, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function()\r\n         assert.same(\r\n            [[local A,B=\"111\",\"foo\";return {{A,B,5,100,[22]=true},{A,B,6,100,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, in_module = true},\r\n               {code = \"111\", name = \"foo\", line = 6, column = 100, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end",
    "type": "function"
  }, {
    "id": 15,
    "text": "assert.same(\r\n            [[local A,B=\"111\",\"foo\";return {{A,B,5,100,[22]=true},{A,B,6,100,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, in_module = true},\r\n               {code = \"111\", name = \"foo\", line = 6, column = 100, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n         assert.same(\r\n            'local A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z=' ..\r\n            '\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",' ..\r\n            '\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",' ..\r\n            '\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\";' ..\r\n            'return {{A,A},{B,B},{C,C},{D,D},{E,E},{F,F},{G,G},{H,H},{I,I},{J,J},{K,K},{L,L},{M,M},{N,N},{O,O},' ..\r\n            '{P,P},{Q,Q},{R,R},{S,S},{T,T},{U,U},{V,V},{W,W},{X,X},{Y,Y},{Z,Z},' ..\r\n            '{a,a},{b,b},{c,c},{d,d},{e,e},{f,f},{g,g},{h,h},{i,i},{j,j},{k,k},{l,l},{m,m},{n,n},{o,o},' .. \r\n            '{p,p},{q,q},{r,r},{s,s},{t,t},{u,u},{v,v},{w,w},{x,x},{y,y},{z,z},{\"163\",\"163\"},{\"164\",\"164\"}}',\r\n            cache.serialize({\r\n               {code = \"111\", name = \"111\"}, {code = \"112\", name = \"112\"},\r\n               {code = \"113\", name = \"113\"}, {code = \"114\", name = \"114\"},\r\n               {code = \"115\", name = \"115\"}, {code = \"116\", name = \"116\"},\r\n               {code = \"117\", name = \"117\"}, {code = \"118\", name = \"118\"},\r\n               {code = \"119\", name = \"119\"}, {code = \"120\", name = \"120\"},\r\n               {code = \"121\", name = \"121\"}, {code = \"122\", name = \"122\"},\r\n               {code = \"123\", name = \"123\"}, {code = \"124\", name = \"124\"},\r\n               {code = \"125\", name = \"125\"}, {code = \"126\", name = \"126\"},\r\n               {code = \"127\", name = \"127\"}, {code = \"128\", name = \"128\"},\r\n               {code = \"129\", name = \"129\"}, {code = \"130\", name = \"130\"},\r\n               {code = \"131\", name = \"131\"}, {code = \"132\", name = \"132\"},\r\n               {code = \"133\", name = \"133\"}, {code = \"134\", name = \"134\"},\r\n               {code = \"135\", name = \"135\"}, {code = \"136\", name = \"136\"},\r\n               {code = \"137\", name = \"137\"}, {code = \"138\", name = \"138\"},\r\n               {code = \"139\", name = \"139\"}, {code = \"140\", name = \"140\"},\r\n               {code = \"141\", name = \"141\"}, {code = \"142\", name = \"142\"},\r\n               {code = \"143\", name = \"143\"}, {code = \"144\", name = \"144\"},\r\n               {code = \"145\", name = \"145\"}, {code = \"146\", name = \"146\"},\r\n               {code = \"147\", name = \"147\"}, {code = \"148\", name = \"148\"},\r\n               {code = \"149\", name = \"149\"}, {code = \"150\", name = \"150\"},\r\n               {code = \"151\", name = \"151\"}, {code = \"152\", name = \"152\"},\r\n               {code = \"153\", name = \"153\"}, {code = \"154\", name = \"154\"},\r\n               {code = \"155\", name = \"155\"}, {code = \"156\", name = \"156\"},\r\n               {code = \"157\", name = \"157\"}, {code = \"158\", name = \"158\"},\r\n               {code = \"159\", name = \"159\"}, {code = \"160\", name = \"160\"},\r\n               {code = \"161\", name = \"161\"}, {code = \"162\", name = \"162\"},\r\n               {code = \"163\", name = \"163\"}, {code = \"164\", name = \"164\"}\r\n            })\r\n         )\r\n      end",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert.same(\r\n            'local A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z=' ..\r\n            '\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",' ..\r\n            '\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",' ..\r\n            '\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\";' ..\r\n            'return {{A,A},{B,B},{C,C},{D,D},{E,E},{F,F},{G,G},{H,H},{I,I},{J,J},{K,K},{L,L},{M,M},{N,N},{O,O},' ..\r\n            '{P,P},{Q,Q},{R,R},{S,S},{T,T},{U,U},{V,V},{W,W},{X,X},{Y,Y},{Z,Z},' ..\r\n            '{a,a},{b,b},{c,c},{d,d},{e,e},{f,f},{g,g},{h,h},{i,i},{j,j},{k,k},{l,l},{m,m},{n,n},{o,o},' .. \r\n            '{p,p},{q,q},{r,r},{s,s},{t,t},{u,u},{v,v},{w,w},{x,x},{y,y},{z,z},{\"163\",\"163\"},{\"164\",\"164\"}}',\r\n            cache.serialize({\r\n               {code = \"111\", name = \"111\"}, {code = \"112\", name = \"112\"},\r\n               {code = \"113\", name = \"113\"}, {code = \"114\", name = \"114\"},\r\n               {code = \"115\", name = \"115\"}, {code = \"116\", name = \"116\"},\r\n               {code = \"117\", name = \"117\"}, {code = \"118\", name = \"118\"},\r\n               {code = \"119\", name = \"119\"}, {code = \"120\", name = \"120\"},\r\n               {code = \"121\", name = \"121\"}, {code = \"122\", name = \"122\"},\r\n               {code = \"123\", name = \"123\"}, {code = \"124\", name = \"124\"},\r\n               {code = \"125\", name = \"125\"}, {code = \"126\", name = \"126\"},\r\n               {code = \"127\", name = \"127\"}, {code = \"128\", name = \"128\"},\r\n               {code = \"129\", name = \"129\"}, {code = \"130\", name = \"130\"},\r\n               {code = \"131\", name = \"131\"}, {code = \"132\", name = \"132\"},\r\n               {code = \"133\", name = \"133\"}, {code = \"134\", name = \"134\"},\r\n               {code = \"135\", name = \"135\"}, {code = \"136\", name = \"136\"},\r\n               {code = \"137\", name = \"137\"}, {code = \"138\", name = \"138\"},\r\n               {code = \"139\", name = \"139\"}, {code = \"140\", name = \"140\"},\r\n               {code = \"141\", name = \"141\"}, {code = \"142\", name = \"142\"},\r\n               {code = \"143\", name = \"143\"}, {code = \"144\", name = \"144\"},\r\n               {code = \"145\", name = \"145\"}, {code = \"146\", name = \"146\"},\r\n               {code = \"147\", name = \"147\"}, {code = \"148\", name = \"148\"},\r\n               {code = \"149\", name = \"149\"}, {code = \"150\", name = \"150\"},\r\n               {code = \"151\", name = \"151\"}, {code = \"152\", name = \"152\"},\r\n               {code = \"153\", name = \"153\"}, {code = \"154\", name = \"154\"},\r\n               {code = \"155\", name = \"155\"}, {code = \"156\", name = \"156\"},\r\n               {code = \"157\", name = \"157\"}, {code = \"158\", name = \"158\"},\r\n               {code = \"159\", name = \"159\"}, {code = \"160\", name = \"160\"},\r\n               {code = \"161\", name = \"161\"}, {code = \"162\", name = \"162\"},\r\n               {code = \"163\", name = \"163\"}, {code = \"164\", name = \"164\"}\r\n            })\r\n         )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function()\r\n         assert.same('return {{\"011\",[3]=2,[4]=4,[23]=\"message\"}}', cache.serialize({{code = \"011\", line = 2, column = 4, msg = \"message\"}}))\r\n      end",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert.same('return {{\"011\",[3]=2,[4]=4,[23]=\"message\"}}', cache.serialize({{code = \"011\", line = 2, column = 4, msg = \"message\"}}))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n      it(\"returns serialized result\", function()\r\n         assert.same(\r\n            [[return {{\"111\",\"foo\",5,100,102,[22]=true},{\"211\",\"bar\",4,1,3,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, end_column = 102, in_module = true},\r\n               {code = \"211\", name = \"bar\", line = 4, column = 1, end_column = 3, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"puts repeating string values into locals\", function()\r\n         assert.same(\r\n            [[local A,B=\"111\",\"foo\";return {{A,B,5,100,[22]=true},{A,B,6,100,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, in_module = true},\r\n               {code = \"111\", name = \"foo\", line = 6, column = 100, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"uses at most 52 locals\", function()\r\n         assert.same(\r\n            'local A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z=' ..\r\n            '\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",' ..\r\n            '\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",' ..\r\n            '\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\";' ..\r\n            'return {{A,A},{B,B},{C,C},{D,D},{E,E},{F,F},{G,G},{H,H},{I,I},{J,J},{K,K},{L,L},{M,M},{N,N},{O,O},' ..\r\n            '{P,P},{Q,Q},{R,R},{S,S},{T,T},{U,U},{V,V},{W,W},{X,X},{Y,Y},{Z,Z},' ..\r\n            '{a,a},{b,b},{c,c},{d,d},{e,e},{f,f},{g,g},{h,h},{i,i},{j,j},{k,k},{l,l},{m,m},{n,n},{o,o},' .. \r\n            '{p,p},{q,q},{r,r},{s,s},{t,t},{u,u},{v,v},{w,w},{x,x},{y,y},{z,z},{\"163\",\"163\"},{\"164\",\"164\"}}',\r\n            cache.serialize({\r\n               {code = \"111\", name = \"111\"}, {code = \"112\", name = \"112\"},\r\n               {code = \"113\", name = \"113\"}, {code = \"114\", name = \"114\"},\r\n               {code = \"115\", name = \"115\"}, {code = \"116\", name = \"116\"},\r\n               {code = \"117\", name = \"117\"}, {code = \"118\", name = \"118\"},\r\n               {code = \"119\", name = \"119\"}, {code = \"120\", name = \"120\"},\r\n               {code = \"121\", name = \"121\"}, {code = \"122\", name = \"122\"},\r\n               {code = \"123\", name = \"123\"}, {code = \"124\", name = \"124\"},\r\n               {code = \"125\", name = \"125\"}, {code = \"126\", name = \"126\"},\r\n               {code = \"127\", name = \"127\"}, {code = \"128\", name = \"128\"},\r\n               {code = \"129\", name = \"129\"}, {code = \"130\", name = \"130\"},\r\n               {code = \"131\", name = \"131\"}, {code = \"132\", name = \"132\"},\r\n               {code = \"133\", name = \"133\"}, {code = \"134\", name = \"134\"},\r\n               {code = \"135\", name = \"135\"}, {code = \"136\", name = \"136\"},\r\n               {code = \"137\", name = \"137\"}, {code = \"138\", name = \"138\"},\r\n               {code = \"139\", name = \"139\"}, {code = \"140\", name = \"140\"},\r\n               {code = \"141\", name = \"141\"}, {code = \"142\", name = \"142\"},\r\n               {code = \"143\", name = \"143\"}, {code = \"144\", name = \"144\"},\r\n               {code = \"145\", name = \"145\"}, {code = \"146\", name = \"146\"},\r\n               {code = \"147\", name = \"147\"}, {code = \"148\", name = \"148\"},\r\n               {code = \"149\", name = \"149\"}, {code = \"150\", name = \"150\"},\r\n               {code = \"151\", name = \"151\"}, {code = \"152\", name = \"152\"},\r\n               {code = \"153\", name = \"153\"}, {code = \"154\", name = \"154\"},\r\n               {code = \"155\", name = \"155\"}, {code = \"156\", name = \"156\"},\r\n               {code = \"157\", name = \"157\"}, {code = \"158\", name = \"158\"},\r\n               {code = \"159\", name = \"159\"}, {code = \"160\", name = \"160\"},\r\n               {code = \"161\", name = \"161\"}, {code = \"162\", name = \"162\"},\r\n               {code = \"163\", name = \"163\"}, {code = \"164\", name = \"164\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"handles error result\", function()\r\n         assert.same('return {{\"011\",[3]=2,[4]=4,[23]=\"message\"}}', cache.serialize({{code = \"011\", line = 2, column = 4, msg = \"message\"}}))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 24,
    "text": "it(\"returns serialized result\", function()\r\n         assert.same(\r\n            [[return {{\"111\",\"foo\",5,100,102,[22]=true},{\"211\",\"bar\",4,1,3,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, end_column = 102, in_module = true},\r\n               {code = \"211\", name = \"bar\", line = 4, column = 1, end_column = 3, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "it(\"puts repeating string values into locals\", function()\r\n         assert.same(\r\n            [[local A,B=\"111\",\"foo\";return {{A,B,5,100,[22]=true},{A,B,6,100,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, in_module = true},\r\n               {code = \"111\", name = \"foo\", line = 6, column = 100, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "it(\"uses at most 52 locals\", function()\r\n         assert.same(\r\n            'local A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z=' ..\r\n            '\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",' ..\r\n            '\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",' ..\r\n            '\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\";' ..\r\n            'return {{A,A},{B,B},{C,C},{D,D},{E,E},{F,F},{G,G},{H,H},{I,I},{J,J},{K,K},{L,L},{M,M},{N,N},{O,O},' ..\r\n            '{P,P},{Q,Q},{R,R},{S,S},{T,T},{U,U},{V,V},{W,W},{X,X},{Y,Y},{Z,Z},' ..\r\n            '{a,a},{b,b},{c,c},{d,d},{e,e},{f,f},{g,g},{h,h},{i,i},{j,j},{k,k},{l,l},{m,m},{n,n},{o,o},' .. \r\n            '{p,p},{q,q},{r,r},{s,s},{t,t},{u,u},{v,v},{w,w},{x,x},{y,y},{z,z},{\"163\",\"163\"},{\"164\",\"164\"}}',\r\n            cache.serialize({\r\n               {code = \"111\", name = \"111\"}, {code = \"112\", name = \"112\"},\r\n               {code = \"113\", name = \"113\"}, {code = \"114\", name = \"114\"},\r\n               {code = \"115\", name = \"115\"}, {code = \"116\", name = \"116\"},\r\n               {code = \"117\", name = \"117\"}, {code = \"118\", name = \"118\"},\r\n               {code = \"119\", name = \"119\"}, {code = \"120\", name = \"120\"},\r\n               {code = \"121\", name = \"121\"}, {code = \"122\", name = \"122\"},\r\n               {code = \"123\", name = \"123\"}, {code = \"124\", name = \"124\"},\r\n               {code = \"125\", name = \"125\"}, {code = \"126\", name = \"126\"},\r\n               {code = \"127\", name = \"127\"}, {code = \"128\", name = \"128\"},\r\n               {code = \"129\", name = \"129\"}, {code = \"130\", name = \"130\"},\r\n               {code = \"131\", name = \"131\"}, {code = \"132\", name = \"132\"},\r\n               {code = \"133\", name = \"133\"}, {code = \"134\", name = \"134\"},\r\n               {code = \"135\", name = \"135\"}, {code = \"136\", name = \"136\"},\r\n               {code = \"137\", name = \"137\"}, {code = \"138\", name = \"138\"},\r\n               {code = \"139\", name = \"139\"}, {code = \"140\", name = \"140\"},\r\n               {code = \"141\", name = \"141\"}, {code = \"142\", name = \"142\"},\r\n               {code = \"143\", name = \"143\"}, {code = \"144\", name = \"144\"},\r\n               {code = \"145\", name = \"145\"}, {code = \"146\", name = \"146\"},\r\n               {code = \"147\", name = \"147\"}, {code = \"148\", name = \"148\"},\r\n               {code = \"149\", name = \"149\"}, {code = \"150\", name = \"150\"},\r\n               {code = \"151\", name = \"151\"}, {code = \"152\", name = \"152\"},\r\n               {code = \"153\", name = \"153\"}, {code = \"154\", name = \"154\"},\r\n               {code = \"155\", name = \"155\"}, {code = \"156\", name = \"156\"},\r\n               {code = \"157\", name = \"157\"}, {code = \"158\", name = \"158\"},\r\n               {code = \"159\", name = \"159\"}, {code = \"160\", name = \"160\"},\r\n               {code = \"161\", name = \"161\"}, {code = \"162\", name = \"162\"},\r\n               {code = \"163\", name = \"163\"}, {code = \"164\", name = \"164\"}\r\n            })\r\n         )\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "it(\"handles error result\", function()\r\n         assert.same('return {{\"011\",[3]=2,[4]=4,[23]=\"message\"}}', cache.serialize({{code = \"011\", line = 2, column = 4, msg = \"message\"}}))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 30,
    "text": "tmpname = os.tmpname()",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "tmpname = os.getenv(\"TEMP\") .. tmpname",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n         os.remove(tmpname)\r\n      end",
    "type": "function"
  }, {
    "id": 35,
    "text": "os.remove(tmpname)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\n]], data)\r\n      end",
    "type": "function"
  }, {
    "id": 38,
    "text": "cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local data = utils.read_file(tmpname)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\n]], data)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\"}, {3}, {{{code=\"111\"},{code=\"122\"}}})\r\n         assert.is_true(ok)\r\n         assert.is_true(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end",
    "type": "function"
  }, {
    "id": 43,
    "text": "local ok, appended = cache.update(tmpname, {\"baz\"}, {3}, {{{code=\"111\"},{code=\"122\"}}})",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "assert.is_true(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.is_true(appended)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\", \"foo\"}, {3, 4}, {{{code=\"111\"},{code=\"122\"}}, {}})\r\n         assert.is_true(ok)\r\n         assert.is_false(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n4\r\nreturn {}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end",
    "type": "function"
  }, {
    "id": 49,
    "text": "local ok, appended = cache.update(tmpname, {\"baz\", \"foo\"}, {3, 4}, {{{code=\"111\"},{code=\"122\"}}, {}})",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "assert.is_false(appended)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.equals([[\r\n\r\n0\r\nfoo\r\n4\r\nreturn {}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n      local tmpname\r\n\r\n      before_each(function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end)\r\n\r\n      after_each(function()\r\n         os.remove(tmpname)\r\n      end)\r\n\r\n      it(\"creates new cache\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\n]], data)\r\n      end)\r\n\r\n      it(\"appends new entries\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\"}, {3}, {{{code=\"111\"},{code=\"122\"}}})\r\n         assert.is_true(ok)\r\n         assert.is_true(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end)\r\n\r\n      it(\"overwrites old entries\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\", \"foo\"}, {3, 4}, {{{code=\"111\"},{code=\"122\"}}, {}})\r\n         assert.is_true(ok)\r\n         assert.is_false(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n4\r\nreturn {}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 54,
    "text": "local tmpname",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "before_each(function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "after_each(function()\r\n         os.remove(tmpname)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "it(\"creates new cache\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\n]], data)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "it(\"appends new entries\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\"}, {3}, {{{code=\"111\"},{code=\"122\"}}})\r\n         assert.is_true(ok)\r\n         assert.is_true(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "it(\"overwrites old entries\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\", \"foo\"}, {3, 4}, {{{code=\"111\"},{code=\"122\"}}, {}})\r\n         assert.is_true(ok)\r\n         assert.is_false(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n4\r\nreturn {}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function()\r\n            assert.same({}, cache.load(\"spec/caches/different_format.cache\", {\"foo\"}, {123}))\r\n         end",
    "type": "function"
  }, {
    "id": 62,
    "text": "assert.same({}, cache.load(\"spec/caches/different_format.cache\", {\"foo\"}, {123}))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function()\r\n            assert.same({}, cache.load(\"spec/caches/old_format.cache\", {\"foo\"}, {123}))\r\n         end",
    "type": "function"
  }, {
    "id": 65,
    "text": "assert.same({}, cache.load(\"spec/caches/old_format.cache\", {\"foo\"}, {123}))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_lines.cache\", {\"foo\"}, {123}))\r\n         end",
    "type": "function"
  }, {
    "id": 68,
    "text": "assert.is_nil(cache.load(\"spec/caches/bad_lines.cache\", {\"foo\"}, {123}))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_mtime.cache\", {\"foo\"}, {123}))\r\n         end",
    "type": "function"
  }, {
    "id": 71,
    "text": "assert.is_nil(cache.load(\"spec/caches/bad_mtime.cache\", {\"foo\"}, {123}))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result.cache\", {\"foo\"}, {123}))\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result2.cache\", {\"foo\"}, {123}))\r\n         end",
    "type": "function"
  }, {
    "id": 74,
    "text": "assert.is_nil(cache.load(\"spec/caches/bad_result.cache\", {\"foo\"}, {123}))",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert.is_nil(cache.load(\"spec/caches/bad_result2.cache\", {\"foo\"}, {123}))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n         it(\"returns {} on cache with bad version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/different_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns {} on cache without version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/old_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad number of lines\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_lines.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad mtime\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_mtime.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad result\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result.cache\", {\"foo\"}, {123}))\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result2.cache\", {\"foo\"}, {123}))\r\n         end)\r\n      end",
    "type": "function"
  }, {
    "id": 78,
    "text": "it(\"returns {} on cache with bad version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/different_format.cache\", {\"foo\"}, {123}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "it(\"returns {} on cache without version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/old_format.cache\", {\"foo\"}, {123}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "it(\"returns nil on cache with bad number of lines\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_lines.cache\", {\"foo\"}, {123}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "it(\"returns nil on cache with bad mtime\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_mtime.cache\", {\"foo\"}, {123}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "it(\"returns nil on cache with bad result\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result.cache\", {\"foo\"}, {123}))\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result2.cache\", {\"foo\"}, {123}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n            tmpname = os.tmpname()\r\n            cache.update(tmpname,\r\n               {\"foo\", \"bar\"},\r\n               {1, 2},\r\n               {{{code=\"111\"}}, {{code = \"011\", line = 2, column = 4, msg = \"message\"}}})\r\n         end",
    "type": "function"
  }, {
    "id": 85,
    "text": "cache.update(tmpname,\r\n               {\"foo\", \"bar\"},\r\n               {1, 2},\r\n               {{{code=\"111\"}}, {{code = \"011\", line = 2, column = 4, msg = \"message\"}}})",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function()\r\n            os.remove(tmpname)\r\n         end",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function()\r\n            assert.same({}, cache.load(\"non-existent.file\", {\"foo\"}))\r\n         end",
    "type": "function"
  }, {
    "id": 90,
    "text": "assert.same({}, cache.load(\"non-existent.file\", {\"foo\"}))",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n            assert.same({\r\n               foo = {{code=\"111\"}},\r\n               bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}\r\n            }, cache.load(tmpname, {\"foo\", \"bar\"}, {1, 2}))\r\n         end",
    "type": "function"
  }, {
    "id": 93,
    "text": "assert.same({\r\n               foo = {{code=\"111\"}},\r\n               bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}\r\n            }, cache.load(tmpname, {\"foo\", \"bar\"}, {1, 2}))",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function()\r\n            assert.same({foo = {{code=\"111\"}}}, cache.load(tmpname, {\"foo\", \"baz\"}, {1, 2}))\r\n         end",
    "type": "function"
  }, {
    "id": 96,
    "text": "assert.same({foo = {{code=\"111\"}}}, cache.load(tmpname, {\"foo\", \"baz\"}, {1, 2}))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function()\r\n            assert.same(\r\n               {bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}},\r\n               cache.load(tmpname, {\"foo\", \"bar\", \"baz\"}, {2, 2}))\r\n         end",
    "type": "function"
  }, {
    "id": 99,
    "text": "assert.same(\r\n               {bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}},\r\n               cache.load(tmpname, {\"foo\", \"bar\", \"baz\"}, {2, 2}))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function()\r\n         local tmpname\r\n\r\n         before_each(function()\r\n            tmpname = os.tmpname()\r\n            cache.update(tmpname,\r\n               {\"foo\", \"bar\"},\r\n               {1, 2},\r\n               {{{code=\"111\"}}, {{code = \"011\", line = 2, column = 4, msg = \"message\"}}})\r\n         end)\r\n\r\n         after_each(function()\r\n            os.remove(tmpname)\r\n         end)\r\n\r\n         it(\"loads {} from non-existent cache\", function()\r\n            assert.same({}, cache.load(\"non-existent.file\", {\"foo\"}))\r\n         end)\r\n\r\n         it(\"loads cached results\", function()\r\n            assert.same({\r\n               foo = {{code=\"111\"}},\r\n               bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}\r\n            }, cache.load(tmpname, {\"foo\", \"bar\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load results for missing files\", function()\r\n            assert.same({foo = {{code=\"111\"}}}, cache.load(tmpname, {\"foo\", \"baz\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load outdated results\", function()\r\n            assert.same(\r\n               {bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}},\r\n               cache.load(tmpname, {\"foo\", \"bar\", \"baz\"}, {2, 2}))\r\n         end)\r\n      end",
    "type": "function"
  }, {
    "id": 102,
    "text": "before_each(function()\r\n            tmpname = os.tmpname()\r\n            cache.update(tmpname,\r\n               {\"foo\", \"bar\"},\r\n               {1, 2},\r\n               {{{code=\"111\"}}, {{code = \"011\", line = 2, column = 4, msg = \"message\"}}})\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "after_each(function()\r\n            os.remove(tmpname)\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "it(\"loads {} from non-existent cache\", function()\r\n            assert.same({}, cache.load(\"non-existent.file\", {\"foo\"}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "it(\"loads cached results\", function()\r\n            assert.same({\r\n               foo = {{code=\"111\"}},\r\n               bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}\r\n            }, cache.load(tmpname, {\"foo\", \"bar\"}, {1, 2}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "it(\"does not load results for missing files\", function()\r\n            assert.same({foo = {{code=\"111\"}}}, cache.load(tmpname, {\"foo\", \"baz\"}, {1, 2}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "it(\"does not load outdated results\", function()\r\n            assert.same(\r\n               {bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}},\r\n               cache.load(tmpname, {\"foo\", \"bar\", \"baz\"}, {2, 2}))\r\n         end)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function()\r\n      describe(\"error handling\", function()\r\n         it(\"returns {} on cache with bad version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/different_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns {} on cache without version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/old_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad number of lines\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_lines.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad mtime\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_mtime.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad result\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result.cache\", {\"foo\"}, {123}))\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result2.cache\", {\"foo\"}, {123}))\r\n         end)\r\n      end)\r\n\r\n      describe(\"loading\", function()\r\n         local tmpname\r\n\r\n         before_each(function()\r\n            tmpname = os.tmpname()\r\n            cache.update(tmpname,\r\n               {\"foo\", \"bar\"},\r\n               {1, 2},\r\n               {{{code=\"111\"}}, {{code = \"011\", line = 2, column = 4, msg = \"message\"}}})\r\n         end)\r\n\r\n         after_each(function()\r\n            os.remove(tmpname)\r\n         end)\r\n\r\n         it(\"loads {} from non-existent cache\", function()\r\n            assert.same({}, cache.load(\"non-existent.file\", {\"foo\"}))\r\n         end)\r\n\r\n         it(\"loads cached results\", function()\r\n            assert.same({\r\n               foo = {{code=\"111\"}},\r\n               bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}\r\n            }, cache.load(tmpname, {\"foo\", \"bar\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load results for missing files\", function()\r\n            assert.same({foo = {{code=\"111\"}}}, cache.load(tmpname, {\"foo\", \"baz\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load outdated results\", function()\r\n            assert.same(\r\n               {bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}},\r\n               cache.load(tmpname, {\"foo\", \"bar\", \"baz\"}, {2, 2}))\r\n         end)\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 110,
    "text": "describe(\"error handling\", function()\r\n         it(\"returns {} on cache with bad version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/different_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns {} on cache without version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/old_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad number of lines\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_lines.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad mtime\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_mtime.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad result\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result.cache\", {\"foo\"}, {123}))\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result2.cache\", {\"foo\"}, {123}))\r\n         end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "describe(\"loading\", function()\r\n         local tmpname\r\n\r\n         before_each(function()\r\n            tmpname = os.tmpname()\r\n            cache.update(tmpname,\r\n               {\"foo\", \"bar\"},\r\n               {1, 2},\r\n               {{{code=\"111\"}}, {{code = \"011\", line = 2, column = 4, msg = \"message\"}}})\r\n         end)\r\n\r\n         after_each(function()\r\n            os.remove(tmpname)\r\n         end)\r\n\r\n         it(\"loads {} from non-existent cache\", function()\r\n            assert.same({}, cache.load(\"non-existent.file\", {\"foo\"}))\r\n         end)\r\n\r\n         it(\"loads cached results\", function()\r\n            assert.same({\r\n               foo = {{code=\"111\"}},\r\n               bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}\r\n            }, cache.load(tmpname, {\"foo\", \"bar\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load results for missing files\", function()\r\n            assert.same({foo = {{code=\"111\"}}}, cache.load(tmpname, {\"foo\", \"baz\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load outdated results\", function()\r\n            assert.same(\r\n               {bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}},\r\n               cache.load(tmpname, {\"foo\", \"bar\", \"baz\"}, {2, 2}))\r\n         end)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function()\r\n   describe(\"serialize\", function()\r\n      it(\"returns serialized result\", function()\r\n         assert.same(\r\n            [[return {{\"111\",\"foo\",5,100,102,[22]=true},{\"211\",\"bar\",4,1,3,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, end_column = 102, in_module = true},\r\n               {code = \"211\", name = \"bar\", line = 4, column = 1, end_column = 3, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"puts repeating string values into locals\", function()\r\n         assert.same(\r\n            [[local A,B=\"111\",\"foo\";return {{A,B,5,100,[22]=true},{A,B,6,100,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, in_module = true},\r\n               {code = \"111\", name = \"foo\", line = 6, column = 100, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"uses at most 52 locals\", function()\r\n         assert.same(\r\n            'local A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z=' ..\r\n            '\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",' ..\r\n            '\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",' ..\r\n            '\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\";' ..\r\n            'return {{A,A},{B,B},{C,C},{D,D},{E,E},{F,F},{G,G},{H,H},{I,I},{J,J},{K,K},{L,L},{M,M},{N,N},{O,O},' ..\r\n            '{P,P},{Q,Q},{R,R},{S,S},{T,T},{U,U},{V,V},{W,W},{X,X},{Y,Y},{Z,Z},' ..\r\n            '{a,a},{b,b},{c,c},{d,d},{e,e},{f,f},{g,g},{h,h},{i,i},{j,j},{k,k},{l,l},{m,m},{n,n},{o,o},' .. \r\n            '{p,p},{q,q},{r,r},{s,s},{t,t},{u,u},{v,v},{w,w},{x,x},{y,y},{z,z},{\"163\",\"163\"},{\"164\",\"164\"}}',\r\n            cache.serialize({\r\n               {code = \"111\", name = \"111\"}, {code = \"112\", name = \"112\"},\r\n               {code = \"113\", name = \"113\"}, {code = \"114\", name = \"114\"},\r\n               {code = \"115\", name = \"115\"}, {code = \"116\", name = \"116\"},\r\n               {code = \"117\", name = \"117\"}, {code = \"118\", name = \"118\"},\r\n               {code = \"119\", name = \"119\"}, {code = \"120\", name = \"120\"},\r\n               {code = \"121\", name = \"121\"}, {code = \"122\", name = \"122\"},\r\n               {code = \"123\", name = \"123\"}, {code = \"124\", name = \"124\"},\r\n               {code = \"125\", name = \"125\"}, {code = \"126\", name = \"126\"},\r\n               {code = \"127\", name = \"127\"}, {code = \"128\", name = \"128\"},\r\n               {code = \"129\", name = \"129\"}, {code = \"130\", name = \"130\"},\r\n               {code = \"131\", name = \"131\"}, {code = \"132\", name = \"132\"},\r\n               {code = \"133\", name = \"133\"}, {code = \"134\", name = \"134\"},\r\n               {code = \"135\", name = \"135\"}, {code = \"136\", name = \"136\"},\r\n               {code = \"137\", name = \"137\"}, {code = \"138\", name = \"138\"},\r\n               {code = \"139\", name = \"139\"}, {code = \"140\", name = \"140\"},\r\n               {code = \"141\", name = \"141\"}, {code = \"142\", name = \"142\"},\r\n               {code = \"143\", name = \"143\"}, {code = \"144\", name = \"144\"},\r\n               {code = \"145\", name = \"145\"}, {code = \"146\", name = \"146\"},\r\n               {code = \"147\", name = \"147\"}, {code = \"148\", name = \"148\"},\r\n               {code = \"149\", name = \"149\"}, {code = \"150\", name = \"150\"},\r\n               {code = \"151\", name = \"151\"}, {code = \"152\", name = \"152\"},\r\n               {code = \"153\", name = \"153\"}, {code = \"154\", name = \"154\"},\r\n               {code = \"155\", name = \"155\"}, {code = \"156\", name = \"156\"},\r\n               {code = \"157\", name = \"157\"}, {code = \"158\", name = \"158\"},\r\n               {code = \"159\", name = \"159\"}, {code = \"160\", name = \"160\"},\r\n               {code = \"161\", name = \"161\"}, {code = \"162\", name = \"162\"},\r\n               {code = \"163\", name = \"163\"}, {code = \"164\", name = \"164\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"handles error result\", function()\r\n         assert.same('return {{\"011\",[3]=2,[4]=4,[23]=\"message\"}}', cache.serialize({{code = \"011\", line = 2, column = 4, msg = \"message\"}}))\r\n      end)\r\n   end)\r\n\r\n   describe(\"update\", function()\r\n      local tmpname\r\n\r\n      before_each(function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end)\r\n\r\n      after_each(function()\r\n         os.remove(tmpname)\r\n      end)\r\n\r\n      it(\"creates new cache\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\n]], data)\r\n      end)\r\n\r\n      it(\"appends new entries\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\"}, {3}, {{{code=\"111\"},{code=\"122\"}}})\r\n         assert.is_true(ok)\r\n         assert.is_true(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end)\r\n\r\n      it(\"overwrites old entries\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\", \"foo\"}, {3, 4}, {{{code=\"111\"},{code=\"122\"}}, {}})\r\n         assert.is_true(ok)\r\n         assert.is_false(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n4\r\nreturn {}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end)\r\n   end)\r\n\r\n   describe(\"load\", function()\r\n      describe(\"error handling\", function()\r\n         it(\"returns {} on cache with bad version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/different_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns {} on cache without version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/old_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad number of lines\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_lines.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad mtime\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_mtime.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad result\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result.cache\", {\"foo\"}, {123}))\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result2.cache\", {\"foo\"}, {123}))\r\n         end)\r\n      end)\r\n\r\n      describe(\"loading\", function()\r\n         local tmpname\r\n\r\n         before_each(function()\r\n            tmpname = os.tmpname()\r\n            cache.update(tmpname,\r\n               {\"foo\", \"bar\"},\r\n               {1, 2},\r\n               {{{code=\"111\"}}, {{code = \"011\", line = 2, column = 4, msg = \"message\"}}})\r\n         end)\r\n\r\n         after_each(function()\r\n            os.remove(tmpname)\r\n         end)\r\n\r\n         it(\"loads {} from non-existent cache\", function()\r\n            assert.same({}, cache.load(\"non-existent.file\", {\"foo\"}))\r\n         end)\r\n\r\n         it(\"loads cached results\", function()\r\n            assert.same({\r\n               foo = {{code=\"111\"}},\r\n               bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}\r\n            }, cache.load(tmpname, {\"foo\", \"bar\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load results for missing files\", function()\r\n            assert.same({foo = {{code=\"111\"}}}, cache.load(tmpname, {\"foo\", \"baz\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load outdated results\", function()\r\n            assert.same(\r\n               {bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}},\r\n               cache.load(tmpname, {\"foo\", \"bar\", \"baz\"}, {2, 2}))\r\n         end)\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "describe(\"serialize\", function()\r\n      it(\"returns serialized result\", function()\r\n         assert.same(\r\n            [[return {{\"111\",\"foo\",5,100,102,[22]=true},{\"211\",\"bar\",4,1,3,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, end_column = 102, in_module = true},\r\n               {code = \"211\", name = \"bar\", line = 4, column = 1, end_column = 3, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"puts repeating string values into locals\", function()\r\n         assert.same(\r\n            [[local A,B=\"111\",\"foo\";return {{A,B,5,100,[22]=true},{A,B,6,100,[8]=true,[11]=true},{\"011\",[4]=100000,[23]=\"near '\\\"'\"}}]],\r\n            cache.serialize({\r\n               {code = \"111\", name = \"foo\", line = 5, column = 100, in_module = true},\r\n               {code = \"111\", name = \"foo\", line = 6, column = 100, secondary = true, filtered = true},\r\n               {code = \"011\", column = 100000, msg = \"near '\\\"'\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"uses at most 52 locals\", function()\r\n         assert.same(\r\n            'local A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z=' ..\r\n            '\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",' ..\r\n            '\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",' ..\r\n            '\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\";' ..\r\n            'return {{A,A},{B,B},{C,C},{D,D},{E,E},{F,F},{G,G},{H,H},{I,I},{J,J},{K,K},{L,L},{M,M},{N,N},{O,O},' ..\r\n            '{P,P},{Q,Q},{R,R},{S,S},{T,T},{U,U},{V,V},{W,W},{X,X},{Y,Y},{Z,Z},' ..\r\n            '{a,a},{b,b},{c,c},{d,d},{e,e},{f,f},{g,g},{h,h},{i,i},{j,j},{k,k},{l,l},{m,m},{n,n},{o,o},' .. \r\n            '{p,p},{q,q},{r,r},{s,s},{t,t},{u,u},{v,v},{w,w},{x,x},{y,y},{z,z},{\"163\",\"163\"},{\"164\",\"164\"}}',\r\n            cache.serialize({\r\n               {code = \"111\", name = \"111\"}, {code = \"112\", name = \"112\"},\r\n               {code = \"113\", name = \"113\"}, {code = \"114\", name = \"114\"},\r\n               {code = \"115\", name = \"115\"}, {code = \"116\", name = \"116\"},\r\n               {code = \"117\", name = \"117\"}, {code = \"118\", name = \"118\"},\r\n               {code = \"119\", name = \"119\"}, {code = \"120\", name = \"120\"},\r\n               {code = \"121\", name = \"121\"}, {code = \"122\", name = \"122\"},\r\n               {code = \"123\", name = \"123\"}, {code = \"124\", name = \"124\"},\r\n               {code = \"125\", name = \"125\"}, {code = \"126\", name = \"126\"},\r\n               {code = \"127\", name = \"127\"}, {code = \"128\", name = \"128\"},\r\n               {code = \"129\", name = \"129\"}, {code = \"130\", name = \"130\"},\r\n               {code = \"131\", name = \"131\"}, {code = \"132\", name = \"132\"},\r\n               {code = \"133\", name = \"133\"}, {code = \"134\", name = \"134\"},\r\n               {code = \"135\", name = \"135\"}, {code = \"136\", name = \"136\"},\r\n               {code = \"137\", name = \"137\"}, {code = \"138\", name = \"138\"},\r\n               {code = \"139\", name = \"139\"}, {code = \"140\", name = \"140\"},\r\n               {code = \"141\", name = \"141\"}, {code = \"142\", name = \"142\"},\r\n               {code = \"143\", name = \"143\"}, {code = \"144\", name = \"144\"},\r\n               {code = \"145\", name = \"145\"}, {code = \"146\", name = \"146\"},\r\n               {code = \"147\", name = \"147\"}, {code = \"148\", name = \"148\"},\r\n               {code = \"149\", name = \"149\"}, {code = \"150\", name = \"150\"},\r\n               {code = \"151\", name = \"151\"}, {code = \"152\", name = \"152\"},\r\n               {code = \"153\", name = \"153\"}, {code = \"154\", name = \"154\"},\r\n               {code = \"155\", name = \"155\"}, {code = \"156\", name = \"156\"},\r\n               {code = \"157\", name = \"157\"}, {code = \"158\", name = \"158\"},\r\n               {code = \"159\", name = \"159\"}, {code = \"160\", name = \"160\"},\r\n               {code = \"161\", name = \"161\"}, {code = \"162\", name = \"162\"},\r\n               {code = \"163\", name = \"163\"}, {code = \"164\", name = \"164\"}\r\n            })\r\n         )\r\n      end)\r\n\r\n      it(\"handles error result\", function()\r\n         assert.same('return {{\"011\",[3]=2,[4]=4,[23]=\"message\"}}', cache.serialize({{code = \"011\", line = 2, column = 4, msg = \"message\"}}))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "describe(\"update\", function()\r\n      local tmpname\r\n\r\n      before_each(function()\r\n         tmpname = os.tmpname()\r\n\r\n         -- Work around os.tmpname being broken on Windows sometimes.\r\n         if utils.is_windows and not tmpname:find(':') then\r\n            tmpname = os.getenv(\"TEMP\") .. tmpname\r\n         end\r\n      end)\r\n\r\n      after_each(function()\r\n         os.remove(tmpname)\r\n      end)\r\n\r\n      it(\"creates new cache\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\n]], data)\r\n      end)\r\n\r\n      it(\"appends new entries\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\"}, {3}, {{{code=\"111\"},{code=\"122\"}}})\r\n         assert.is_true(ok)\r\n         assert.is_true(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n1\r\nreturn {{\"112\"}}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end)\r\n\r\n      it(\"overwrites old entries\", function()\r\n         cache.update(tmpname, {\"foo\", \"bar\", \"foo\"}, {1, 2, 1}, {{{code=\"111\"}}, {}, {{code=\"112\"}}})\r\n         local ok, appended = cache.update(tmpname, {\"baz\", \"foo\"}, {3, 4}, {{{code=\"111\"},{code=\"122\"}}, {}})\r\n         assert.is_true(ok)\r\n         assert.is_false(appended)\r\n         local data = utils.read_file(tmpname)\r\n         assert.equals([[\r\n\r\n0\r\nfoo\r\n4\r\nreturn {}\r\nbar\r\n2\r\nreturn {}\r\nbaz\r\n3\r\nreturn {{\"111\"},{\"122\"}}\r\n]], data)\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "describe(\"load\", function()\r\n      describe(\"error handling\", function()\r\n         it(\"returns {} on cache with bad version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/different_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns {} on cache without version\", function()\r\n            assert.same({}, cache.load(\"spec/caches/old_format.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad number of lines\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_lines.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad mtime\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_mtime.cache\", {\"foo\"}, {123}))\r\n         end)\r\n\r\n         it(\"returns nil on cache with bad result\", function()\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result.cache\", {\"foo\"}, {123}))\r\n            assert.is_nil(cache.load(\"spec/caches/bad_result2.cache\", {\"foo\"}, {123}))\r\n         end)\r\n      end)\r\n\r\n      describe(\"loading\", function()\r\n         local tmpname\r\n\r\n         before_each(function()\r\n            tmpname = os.tmpname()\r\n            cache.update(tmpname,\r\n               {\"foo\", \"bar\"},\r\n               {1, 2},\r\n               {{{code=\"111\"}}, {{code = \"011\", line = 2, column = 4, msg = \"message\"}}})\r\n         end)\r\n\r\n         after_each(function()\r\n            os.remove(tmpname)\r\n         end)\r\n\r\n         it(\"loads {} from non-existent cache\", function()\r\n            assert.same({}, cache.load(\"non-existent.file\", {\"foo\"}))\r\n         end)\r\n\r\n         it(\"loads cached results\", function()\r\n            assert.same({\r\n               foo = {{code=\"111\"}},\r\n               bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}\r\n            }, cache.load(tmpname, {\"foo\", \"bar\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load results for missing files\", function()\r\n            assert.same({foo = {{code=\"111\"}}}, cache.load(tmpname, {\"foo\", \"baz\"}, {1, 2}))\r\n         end)\r\n\r\n         it(\"does not load outdated results\", function()\r\n            assert.same(\r\n               {bar = {{code = \"011\", line = 2, column = 4, msg = \"message\"}}},\r\n               cache.load(tmpname, {\"foo\", \"bar\", \"baz\"}, {2, 2}))\r\n         end)\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "",
    "type": "function container"
  }, {
    "id": 119,
    "text": "serialize",
    "type": "global function"
  }, {
    "id": 120,
    "text": "update",
    "type": "global function"
  }, {
    "id": 121,
    "text": "load",
    "type": "global function"
  }, {
    "id": 122,
    "text": "read_file",
    "type": "global function"
  }, {
    "id": 123,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 124,
    "text": "setup",
    "type": "global function"
  }, {
    "id": 125,
    "text": "same",
    "type": "global function"
  }, {
    "id": 126,
    "text": "equals",
    "type": "global function"
  }, {
    "id": 127,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 128,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 129,
    "text": "teardown",
    "type": "global function"
  }, {
    "id": 130,
    "text": "require",
    "type": "global function"
  }, {
    "id": 131,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 132,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 133,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 134,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 135,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 136,
    "text": "it",
    "type": "global function"
  }, {
    "id": 137,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 138,
    "text": "",
    "type": "variable container"
  }, {
    "id": 139,
    "text": "",
    "type": "require container"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  } ]
}