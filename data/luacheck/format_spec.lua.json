{
  "_filename": "format_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/format_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 13
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 16
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "calls",
    "to": 3
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 3
  }, {
    "from": 30,
    "label": "declares",
    "to": 6
  }, {
    "from": 30,
    "label": "declares",
    "to": 9
  }, {
    "from": 30,
    "label": "declares",
    "to": 12
  }, {
    "from": 30,
    "label": "declares",
    "to": 15
  }, {
    "from": 30,
    "label": "declares",
    "to": 18
  }, {
    "from": 30,
    "label": "declares",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 39,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "requires",
    "to": 2
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 18
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "format_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "format",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function mark_colors(s)\r\n   return (s:gsub(\"\\27%[%d+m\", \"\\27\"):gsub(\"\\27+\", \"#\"))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\n\r\n    stdin:2:7: unused global variable 'foo'\r\n\r\nChecking foo.lua                                  1 warning\r\n\r\n    foo.lua:2:7: empty statement\r\n\r\nChecking bar.lua                                  OK\r\nChecking baz.lua                                  1 error\r\n\r\n    baz.lua:4:3: something went wrong\r\n\r\nTotal: 2 warnings / 1 error in 4 files]], format({\r\n   warnings = 2,\r\n   errors = 1,\r\n   fatals = 0,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"551\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      {\r\n         code = \"011\",\r\n         line = 4,\r\n         column = 3,\r\n         msg = \"something went wrong\"\r\n      }\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {color = false}))\r\n   end",
    "type": "function"
  }, {
    "id": 7,
    "text": "assert.equal([[Checking stdin                                    1 warning\r\n\r\n    stdin:2:7: unused global variable 'foo'\r\n\r\nChecking foo.lua                                  1 warning\r\n\r\n    foo.lua:2:7: empty statement\r\n\r\nChecking bar.lua                                  OK\r\nChecking baz.lua                                  1 error\r\n\r\n    baz.lua:4:3: something went wrong\r\n\r\nTotal: 2 warnings / 1 error in 4 files]], format({\r\n   warnings = 2,\r\n   errors = 1,\r\n   fatals = 0,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"551\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      {\r\n         code = \"011\",\r\n         line = 4,\r\n         column = 3,\r\n         msg = \"something went wrong\"\r\n      }\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {color = false}))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\n\r\n    stdin:2:7: unused global variable 'foo'\r\n\r\nChecking foo.lua                                  1 warning / 1 error\r\n\r\n    foo.lua:2:7: unused global variable 'foo'\r\n    foo.lua:3:10: invalid inline option\r\n\r\nChecking baz.lua                                  Syntax error\r\n\r\n    baz.lua: error message\r\n\r\nTotal: 2 warnings / 1 error in 3 files, couldn't check 1 file]], format({\r\n   warnings = 2,\r\n   errors = 1,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      },\r\n      {\r\n         code = \"021\",\r\n         line = 3,\r\n         column = 10\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\",\r\n      msg = \"error message\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 1, color = false}))\r\n   end",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert.equal([[Checking stdin                                    1 warning\r\n\r\n    stdin:2:7: unused global variable 'foo'\r\n\r\nChecking foo.lua                                  1 warning / 1 error\r\n\r\n    foo.lua:2:7: unused global variable 'foo'\r\n    foo.lua:3:10: invalid inline option\r\n\r\nChecking baz.lua                                  Syntax error\r\n\r\n    baz.lua: error message\r\n\r\nTotal: 2 warnings / 1 error in 3 files, couldn't check 1 file]], format({\r\n   warnings = 2,\r\n   errors = 1,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      },\r\n      {\r\n         code = \"021\",\r\n         line = 3,\r\n         column = 10\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\",\r\n      msg = \"error message\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 1, color = false}))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\nChecking foo.lua                                  1 warning\r\nChecking baz.lua                                  Syntax error\r\n\r\nTotal: 2 warnings / 0 errors in 3 files, couldn't check 1 file]], format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 2, color = false}))\r\n   end",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert.equal([[Checking stdin                                    1 warning\r\nChecking foo.lua                                  1 warning\r\nChecking baz.lua                                  Syntax error\r\n\r\nTotal: 2 warnings / 0 errors in 3 files, couldn't check 1 file]], format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 2, color = false}))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n      assert.equal(\"Total: 2 warnings / 0 errors in 3 files, couldn't check 1 file\", format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 3, color = false}))\r\n   end",
    "type": "function"
  }, {
    "id": 16,
    "text": "assert.equal(\"Total: 2 warnings / 0 errors in 3 files, couldn't check 1 file\", format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 3, color = false}))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function()\r\n      if package.config:sub(1, 1) == \"\\\\\" and not os.getenv(\"ANSICON\") then\r\n         pending(\"uses terminal colors\")\r\n      end\r\n\r\n      assert.equal([[Checking stdin                                    #1 warning#\r\n\r\n    stdin:2:7: unused global variable #foo#\r\n\r\nChecking foo.lua                                  #1 warning#\r\n\r\n    foo.lua:2:7: unused global variable #foo#\r\n\r\nChecking bar.lua                                  #OK#\r\nChecking baz.lua                                  #Syntax error#\r\n\r\n    baz.lua: error message\r\n\r\nTotal: #2# warnings / #0# errors in 3 files, couldn't check 1 file]], mark_colors(format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\",\r\n      msg = \"error message\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {})))\r\n   end",
    "type": "function"
  }, {
    "id": 19,
    "text": "if package.config:sub(1, 1) == \"\\\\\" and not os.getenv(\"ANSICON\") then\r\n         pending(\"uses terminal colors\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "pending(\"uses terminal colors\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.equal([[Checking stdin                                    #1 warning#\r\n\r\n    stdin:2:7: unused global variable #foo#\r\n\r\nChecking foo.lua                                  #1 warning#\r\n\r\n    foo.lua:2:7: unused global variable #foo#\r\n\r\nChecking bar.lua                                  #OK#\r\nChecking baz.lua                                  #Syntax error#\r\n\r\n    baz.lua: error message\r\n\r\nTotal: #2# warnings / #0# errors in 3 files, couldn't check 1 file]], mark_colors(format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\",\r\n      msg = \"error message\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {})))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n   it(\"returns formatted report\", function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\n\r\n    stdin:2:7: unused global variable 'foo'\r\n\r\nChecking foo.lua                                  1 warning\r\n\r\n    foo.lua:2:7: empty statement\r\n\r\nChecking bar.lua                                  OK\r\nChecking baz.lua                                  1 error\r\n\r\n    baz.lua:4:3: something went wrong\r\n\r\nTotal: 2 warnings / 1 error in 4 files]], format({\r\n   warnings = 2,\r\n   errors = 1,\r\n   fatals = 0,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"551\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      {\r\n         code = \"011\",\r\n         line = 4,\r\n         column = 3,\r\n         msg = \"something went wrong\"\r\n      }\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {color = false}))\r\n   end)\r\n\r\n   it(\"does not output OK messages with options.quiet >= 1\", function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\n\r\n    stdin:2:7: unused global variable 'foo'\r\n\r\nChecking foo.lua                                  1 warning / 1 error\r\n\r\n    foo.lua:2:7: unused global variable 'foo'\r\n    foo.lua:3:10: invalid inline option\r\n\r\nChecking baz.lua                                  Syntax error\r\n\r\n    baz.lua: error message\r\n\r\nTotal: 2 warnings / 1 error in 3 files, couldn't check 1 file]], format({\r\n   warnings = 2,\r\n   errors = 1,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      },\r\n      {\r\n         code = \"021\",\r\n         line = 3,\r\n         column = 10\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\",\r\n      msg = \"error message\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 1, color = false}))\r\n   end)\r\n\r\n   it(\"does not output warnings with options.quiet >= 2\", function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\nChecking foo.lua                                  1 warning\r\nChecking baz.lua                                  Syntax error\r\n\r\nTotal: 2 warnings / 0 errors in 3 files, couldn't check 1 file]], format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 2, color = false}))\r\n   end)\r\n\r\n   it(\"does not output file info with options.quiet == 3\", function()\r\n      assert.equal(\"Total: 2 warnings / 0 errors in 3 files, couldn't check 1 file\", format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 3, color = false}))\r\n   end)\r\n\r\n   it(\"colors output by default\", function()\r\n      if package.config:sub(1, 1) == \"\\\\\" and not os.getenv(\"ANSICON\") then\r\n         pending(\"uses terminal colors\")\r\n      end\r\n\r\n      assert.equal([[Checking stdin                                    #1 warning#\r\n\r\n    stdin:2:7: unused global variable #foo#\r\n\r\nChecking foo.lua                                  #1 warning#\r\n\r\n    foo.lua:2:7: unused global variable #foo#\r\n\r\nChecking bar.lua                                  #OK#\r\nChecking baz.lua                                  #Syntax error#\r\n\r\n    baz.lua: error message\r\n\r\nTotal: #2# warnings / #0# errors in 3 files, couldn't check 1 file]], mark_colors(format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\",\r\n      msg = \"error message\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {})))\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "it(\"returns formatted report\", function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\n\r\n    stdin:2:7: unused global variable 'foo'\r\n\r\nChecking foo.lua                                  1 warning\r\n\r\n    foo.lua:2:7: empty statement\r\n\r\nChecking bar.lua                                  OK\r\nChecking baz.lua                                  1 error\r\n\r\n    baz.lua:4:3: something went wrong\r\n\r\nTotal: 2 warnings / 1 error in 4 files]], format({\r\n   warnings = 2,\r\n   errors = 1,\r\n   fatals = 0,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"551\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      {\r\n         code = \"011\",\r\n         line = 4,\r\n         column = 3,\r\n         msg = \"something went wrong\"\r\n      }\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {color = false}))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "it(\"does not output OK messages with options.quiet >= 1\", function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\n\r\n    stdin:2:7: unused global variable 'foo'\r\n\r\nChecking foo.lua                                  1 warning / 1 error\r\n\r\n    foo.lua:2:7: unused global variable 'foo'\r\n    foo.lua:3:10: invalid inline option\r\n\r\nChecking baz.lua                                  Syntax error\r\n\r\n    baz.lua: error message\r\n\r\nTotal: 2 warnings / 1 error in 3 files, couldn't check 1 file]], format({\r\n   warnings = 2,\r\n   errors = 1,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      },\r\n      {\r\n         code = \"021\",\r\n         line = 3,\r\n         column = 10\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\",\r\n      msg = \"error message\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 1, color = false}))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "it(\"does not output warnings with options.quiet >= 2\", function()\r\n      assert.equal([[Checking stdin                                    1 warning\r\nChecking foo.lua                                  1 warning\r\nChecking baz.lua                                  Syntax error\r\n\r\nTotal: 2 warnings / 0 errors in 3 files, couldn't check 1 file]], format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 2, color = false}))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "it(\"does not output file info with options.quiet == 3\", function()\r\n      assert.equal(\"Total: 2 warnings / 0 errors in 3 files, couldn't check 1 file\", format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {quiet = 3, color = false}))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "it(\"colors output by default\", function()\r\n      if package.config:sub(1, 1) == \"\\\\\" and not os.getenv(\"ANSICON\") then\r\n         pending(\"uses terminal colors\")\r\n      end\r\n\r\n      assert.equal([[Checking stdin                                    #1 warning#\r\n\r\n    stdin:2:7: unused global variable #foo#\r\n\r\nChecking foo.lua                                  #1 warning#\r\n\r\n    foo.lua:2:7: unused global variable #foo#\r\n\r\nChecking bar.lua                                  #OK#\r\nChecking baz.lua                                  #Syntax error#\r\n\r\n    baz.lua: error message\r\n\r\nTotal: #2# warnings / #0# errors in 3 files, couldn't check 1 file]], mark_colors(format({\r\n   warnings = 2,\r\n   errors = 0,\r\n   fatals = 1,\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {\r\n      {\r\n         code = \"131\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         column = 7\r\n      }\r\n   },\r\n   {},\r\n   {\r\n      fatal = \"syntax\",\r\n      msg = \"error message\"\r\n   }\r\n}, {\"stdin\", \"foo.lua\", \"bar.lua\", \"baz.lua\"}, {})))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 32,
    "text": "format",
    "type": "global function"
  }, {
    "id": 33,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 34,
    "text": "require",
    "type": "global function"
  }, {
    "id": 35,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 36,
    "text": "it",
    "type": "global function"
  }, {
    "id": 37,
    "text": "pending",
    "type": "global function"
  }, {
    "id": 38,
    "text": "",
    "type": "variable container"
  }, {
    "id": 39,
    "text": "",
    "type": "require container"
  }, {
    "id": 40,
    "text": "",
    "type": "require local variable"
  } ]
}