{
  "_filename": "luacheck_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/luacheck_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 17
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 25
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 27
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 14
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 17
  }, {
    "from": 49,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 25
  }, {
    "from": 50,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 27
  }, {
    "from": 50,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 36
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 39
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 42
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 45
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 57
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 65
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 57
  }, {
    "from": 100,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 59
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 65
  }, {
    "from": 101,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 101,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 69
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 76
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 79
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 82
  }, {
    "from": 99,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 85
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 88
  }, {
    "from": 99,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 91
  }, {
    "from": 99,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 94
  }, {
    "from": 99,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 97
  }, {
    "from": 99,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 112
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 117
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 120
  }, {
    "from": 126,
    "label": "has",
    "to": 121
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 134
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 136
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 129
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 134
  }, {
    "from": 152,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 136
  }, {
    "from": 152,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 138
  }, {
    "from": 150,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 145
  }, {
    "from": 150,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 148
  }, {
    "from": 150,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 157
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 162
  }, {
    "from": 169,
    "label": "has",
    "to": 163
  }, {
    "from": 169,
    "label": "has",
    "to": 164
  }, {
    "from": 169,
    "label": "has",
    "to": 165
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 171,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 177
  }, {
    "from": 3,
    "label": "calls",
    "to": 177
  }, {
    "from": 171,
    "label": "calls",
    "to": 181
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 179
  }, {
    "from": 171,
    "label": "calls",
    "to": 182
  }, {
    "from": 171,
    "label": "calls",
    "to": 182
  }, {
    "from": 171,
    "label": "calls",
    "to": 182
  }, {
    "from": 171,
    "label": "calls",
    "to": 182
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 178
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 185
  }, {
    "from": 171,
    "label": "calls",
    "to": 172
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 173
  }, {
    "from": 171,
    "label": "calls",
    "to": 175
  }, {
    "from": 171,
    "label": "calls",
    "to": 175
  }, {
    "from": 171,
    "label": "calls",
    "to": 175
  }, {
    "from": 171,
    "label": "calls",
    "to": 175
  }, {
    "from": 171,
    "label": "calls",
    "to": 175
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 180
  }, {
    "from": 171,
    "label": "calls",
    "to": 184
  }, {
    "from": 171,
    "label": "calls",
    "to": 184
  }, {
    "from": 171,
    "label": "calls",
    "to": 184
  }, {
    "from": 171,
    "label": "calls",
    "to": 184
  }, {
    "from": 171,
    "label": "calls",
    "to": 184
  }, {
    "from": 171,
    "label": "calls",
    "to": 183
  }, {
    "from": 171,
    "label": "calls",
    "to": 174
  }, {
    "from": 171,
    "label": "calls",
    "to": 174
  }, {
    "from": 171,
    "label": "calls",
    "to": 174
  }, {
    "from": 171,
    "label": "calls",
    "to": 174
  }, {
    "from": 171,
    "label": "calls",
    "to": 174
  }, {
    "from": 171,
    "label": "calls",
    "to": 174
  }, {
    "from": 171,
    "label": "calls",
    "to": 176
  }, {
    "from": 171,
    "label": "calls",
    "to": 176
  }, {
    "from": 171,
    "label": "calls",
    "to": 176
  }, {
    "from": 171,
    "label": "calls",
    "to": 176
  }, {
    "from": 171,
    "label": "calls",
    "to": 176
  }, {
    "from": 171,
    "label": "calls",
    "to": 176
  }, {
    "from": 171,
    "label": "calls",
    "to": 176
  }, {
    "from": 2,
    "label": "contains",
    "to": 171
  }, {
    "from": 171,
    "label": "declares",
    "to": 3
  }, {
    "from": 171,
    "label": "declares",
    "to": 13
  }, {
    "from": 171,
    "label": "declares",
    "to": 16
  }, {
    "from": 171,
    "label": "declares",
    "to": 18
  }, {
    "from": 171,
    "label": "declares",
    "to": 20
  }, {
    "from": 171,
    "label": "declares",
    "to": 24
  }, {
    "from": 171,
    "label": "declares",
    "to": 26
  }, {
    "from": 171,
    "label": "declares",
    "to": 28
  }, {
    "from": 171,
    "label": "declares",
    "to": 30
  }, {
    "from": 171,
    "label": "declares",
    "to": 35
  }, {
    "from": 171,
    "label": "declares",
    "to": 38
  }, {
    "from": 171,
    "label": "declares",
    "to": 41
  }, {
    "from": 171,
    "label": "declares",
    "to": 44
  }, {
    "from": 171,
    "label": "declares",
    "to": 47
  }, {
    "from": 171,
    "label": "declares",
    "to": 56
  }, {
    "from": 171,
    "label": "declares",
    "to": 58
  }, {
    "from": 171,
    "label": "declares",
    "to": 60
  }, {
    "from": 171,
    "label": "declares",
    "to": 64
  }, {
    "from": 171,
    "label": "declares",
    "to": 66
  }, {
    "from": 171,
    "label": "declares",
    "to": 68
  }, {
    "from": 171,
    "label": "declares",
    "to": 70
  }, {
    "from": 171,
    "label": "declares",
    "to": 75
  }, {
    "from": 171,
    "label": "declares",
    "to": 78
  }, {
    "from": 171,
    "label": "declares",
    "to": 81
  }, {
    "from": 171,
    "label": "declares",
    "to": 84
  }, {
    "from": 171,
    "label": "declares",
    "to": 87
  }, {
    "from": 171,
    "label": "declares",
    "to": 90
  }, {
    "from": 171,
    "label": "declares",
    "to": 93
  }, {
    "from": 171,
    "label": "declares",
    "to": 96
  }, {
    "from": 171,
    "label": "declares",
    "to": 99
  }, {
    "from": 171,
    "label": "declares",
    "to": 111
  }, {
    "from": 171,
    "label": "declares",
    "to": 113
  }, {
    "from": 171,
    "label": "declares",
    "to": 116
  }, {
    "from": 171,
    "label": "declares",
    "to": 119
  }, {
    "from": 171,
    "label": "declares",
    "to": 123
  }, {
    "from": 171,
    "label": "declares",
    "to": 128
  }, {
    "from": 171,
    "label": "declares",
    "to": 130
  }, {
    "from": 171,
    "label": "declares",
    "to": 133
  }, {
    "from": 171,
    "label": "declares",
    "to": 135
  }, {
    "from": 171,
    "label": "declares",
    "to": 137
  }, {
    "from": 171,
    "label": "declares",
    "to": 139
  }, {
    "from": 171,
    "label": "declares",
    "to": 144
  }, {
    "from": 171,
    "label": "declares",
    "to": 147
  }, {
    "from": 171,
    "label": "declares",
    "to": 150
  }, {
    "from": 171,
    "label": "declares",
    "to": 156
  }, {
    "from": 171,
    "label": "declares",
    "to": 158
  }, {
    "from": 171,
    "label": "declares",
    "to": 161
  }, {
    "from": 171,
    "label": "declares",
    "to": 167
  }, {
    "from": 2,
    "label": "contains",
    "to": 186
  }, {
    "from": 2,
    "label": "contains",
    "to": 187
  }, {
    "from": 187,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "requires",
    "to": 1
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 60
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 104,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 106,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 113
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 116
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 119
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 128
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 135
  }, {
    "from": 142,
    "label": "hasArgument",
    "to": 137
  }, {
    "from": 151,
    "label": "hasArgument",
    "to": 128
  }, {
    "from": 151,
    "label": "hasArgument",
    "to": 130
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 135
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 137
  }, {
    "from": 152,
    "label": "hasArgument",
    "to": 139
  }, {
    "from": 153,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 154,
    "label": "hasArgument",
    "to": 147
  }, {
    "from": 159,
    "label": "hasArgument",
    "to": 156
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 156
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 158
  }, {
    "from": 169,
    "label": "hasArgument",
    "to": 161
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luacheck",
    "type": "module"
  }, {
    "id": 2,
    "text": "luacheck_spec",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function strip_locations(report)\r\n   for _, file_report in ipairs(report) do\r\n      for _, event in ipairs(file_report) do\r\n         event.line = nil\r\n         event.column = nil\r\n         event.end_column = nil\r\n         event.prev_line = nil\r\n         event.prev_column = nil\r\n      end\r\n   end\r\n\r\n   return report\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "for _, file_report in ipairs(report) do\r\n      for _, event in ipairs(file_report) do\r\n         event.line = nil\r\n         event.column = nil\r\n         event.end_column = nil\r\n         event.prev_line = nil\r\n         event.prev_column = nil\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "for _, event in ipairs(file_report) do\r\n         event.line = nil\r\n         event.column = nil\r\n         event.end_column = nil\r\n         event.prev_line = nil\r\n         event.prev_column = nil\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "event.line = nil",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "event.column = nil",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "event.end_column = nil",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "event.prev_line = nil",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "event.prev_column = nil",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function()\r\n      assert.same(luacheck.check_files({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }), luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert.same(luacheck.check_files({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }), luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function() luacheck(\"foo\") end",
    "type": "function"
  }, {
    "id": 17,
    "text": "luacheck(\"foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "function() luacheck({123}) end",
    "type": "function"
  }, {
    "id": 19,
    "text": "luacheck({123})",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "function()\r\n      assert.has_error(function() luacheck(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.check_files' (table expected, got string)\")\r\n      assert.has_error(function() luacheck({123}) end,\r\n         \"bad argument #1 to 'luacheck.check_files' (array of paths or file handles expected, got number)\")\r\n   end",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert.has_error(function() luacheck(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.check_files' (table expected, got string)\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.has_error(function() luacheck({123}) end,\r\n         \"bad argument #1 to 'luacheck.check_files' (array of paths or file handles expected, got number)\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function() luacheck({\"foo\"}, \"bar\") end",
    "type": "function"
  }, {
    "id": 25,
    "text": "luacheck({\"foo\"}, \"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "function() luacheck({\"foo\"}, {globals = \"bar\"}) end",
    "type": "function"
  }, {
    "id": 27,
    "text": "luacheck({\"foo\"}, {globals = \"bar\"})",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "function() luacheck({\"foo\"}, {{unused = 123}}) end",
    "type": "function"
  }, {
    "id": 29,
    "text": "luacheck({\"foo\"}, {{unused = 123}})",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "function()\r\n      assert.has_error(function() luacheck({\"foo\"}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.check_files' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck({\"foo\"}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.check_files' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck({\"foo\"}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.check_files' (invalid value of option 'unused')\")\r\n   end",
    "type": "function"
  }, {
    "id": 31,
    "text": "assert.has_error(function() luacheck({\"foo\"}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.check_files' (table or nil expected, got string)\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.has_error(function() luacheck({\"foo\"}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.check_files' (invalid value of option 'globals')\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert.has_error(function() luacheck({\"foo\"}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.check_files' (invalid value of option 'unused')\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function()\r\n      assert.same({\r\n         warnings = 0,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({})))\r\n   end",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert.same({\r\n         warnings = 0,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({})))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"helper\",\r\n               func = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"...\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"opt\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 5,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      })))\r\n   end",
    "type": "function"
  }, {
    "id": 39,
    "text": "assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"helper\",\r\n               func = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"...\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"opt\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 5,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      })))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"opt\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 3,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }, {\r\n         unused = false\r\n      })))\r\n   end",
    "type": "function"
  }, {
    "id": 42,
    "text": "assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"opt\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 3,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }, {\r\n         unused = false\r\n      })))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 2,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }, {\r\n         nil,\r\n         {\r\n            global = true,\r\n            unused = false,\r\n            redefined = false\r\n         },\r\n         global = false\r\n      })))\r\n   end",
    "type": "function"
  }, {
    "id": 45,
    "text": "assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 2,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }, {\r\n         nil,\r\n         {\r\n            global = true,\r\n            unused = false,\r\n            redefined = false\r\n         },\r\n         global = false\r\n      })))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n   it(\"is an alias of luacheck.check_files\", function()\r\n      assert.same(luacheck.check_files({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }), luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }))\r\n   end)\r\n\r\n   it(\"panics on bad files\", function()\r\n      assert.has_error(function() luacheck(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.check_files' (table expected, got string)\")\r\n      assert.has_error(function() luacheck({123}) end,\r\n         \"bad argument #1 to 'luacheck.check_files' (array of paths or file handles expected, got number)\")\r\n   end)\r\n\r\n   it(\"panics on bad options\", function()\r\n      assert.has_error(function() luacheck({\"foo\"}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.check_files' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck({\"foo\"}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.check_files' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck({\"foo\"}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.check_files' (invalid value of option 'unused')\")\r\n   end)\r\n\r\n   it(\"works on empty list\", function()\r\n      assert.same({\r\n         warnings = 0,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({})))\r\n   end)\r\n\r\n   it(\"works on files\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"helper\",\r\n               func = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"...\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"opt\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 5,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      })))\r\n   end)\r\n\r\n   it(\"uses options\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"opt\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 3,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }, {\r\n         unused = false\r\n      })))\r\n   end)\r\n\r\n   it(\"uses option overrides\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 2,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }, {\r\n         nil,\r\n         {\r\n            global = true,\r\n            unused = false,\r\n            redefined = false\r\n         },\r\n         global = false\r\n      })))\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "it(\"is an alias of luacheck.check_files\", function()\r\n      assert.same(luacheck.check_files({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }), luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "it(\"panics on bad files\", function()\r\n      assert.has_error(function() luacheck(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.check_files' (table expected, got string)\")\r\n      assert.has_error(function() luacheck({123}) end,\r\n         \"bad argument #1 to 'luacheck.check_files' (array of paths or file handles expected, got number)\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "it(\"panics on bad options\", function()\r\n      assert.has_error(function() luacheck({\"foo\"}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.check_files' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck({\"foo\"}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.check_files' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck({\"foo\"}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.check_files' (invalid value of option 'unused')\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "it(\"works on empty list\", function()\r\n      assert.same({\r\n         warnings = 0,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({})))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "it(\"works on files\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"helper\",\r\n               func = true\r\n            },\r\n            {\r\n               code = \"212\",\r\n               name = \"...\"\r\n            },\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"opt\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 5,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      })))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "it(\"uses options\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"412\",\r\n               name = \"opt\"\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 3,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }, {\r\n         unused = false\r\n      })))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "it(\"uses option overrides\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"111\",\r\n               name = \"embrace\",\r\n               top = true\r\n            },\r\n            {\r\n               code = \"113\",\r\n               name = \"hepler\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected '=' near '__future__'\"\r\n            }\r\n         },\r\n         warnings = 2,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck({\r\n         \"spec/samples/good_code.lua\",\r\n         \"spec/samples/bad_code.lua\",\r\n         \"spec/samples/python_code.lua\"\r\n      }, {\r\n         nil,\r\n         {\r\n            global = true,\r\n            unused = false,\r\n            redefined = false\r\n         },\r\n         global = false\r\n      })))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function() luacheck.check_strings(\"foo\") end",
    "type": "function"
  }, {
    "id": 57,
    "text": "luacheck.check_strings(\"foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "function() luacheck.check_strings({1}) end",
    "type": "function"
  }, {
    "id": 59,
    "text": "luacheck.check_strings({1})",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "function()\r\n      assert.has_error(function() luacheck.check_strings(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.check_strings' (table expected, got string)\")\r\n      assert.has_error(function() luacheck.check_strings({1}) end,\r\n         \"bad argument #1 to 'luacheck.check_strings' (array of strings or tables expected, got number)\")\r\n   end",
    "type": "function"
  }, {
    "id": 61,
    "text": "assert.has_error(function() luacheck.check_strings(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.check_strings' (table expected, got string)\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert.has_error(function() luacheck.check_strings({1}) end,\r\n         \"bad argument #1 to 'luacheck.check_strings' (array of strings or tables expected, got number)\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function() luacheck.check_strings({\"foo\"}, \"bar\") end",
    "type": "function"
  }, {
    "id": 65,
    "text": "luacheck.check_strings({\"foo\"}, \"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "function() luacheck.check_strings({\"foo\"}, {globals = \"bar\"}) end",
    "type": "function"
  }, {
    "id": 67,
    "text": "luacheck.check_strings({\"foo\"}, {globals = \"bar\"})",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "function() luacheck.check_strings({\"foo\"}, {{unused = 123}}) end",
    "type": "function"
  }, {
    "id": 69,
    "text": "luacheck.check_strings({\"foo\"}, {{unused = 123}})",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "function()\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (invalid value of option 'unused')\")\r\n   end",
    "type": "function"
  }, {
    "id": 71,
    "text": "assert.has_error(function() luacheck.check_strings({\"foo\"}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (table or nil expected, got string)\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert.has_error(function() luacheck.check_strings({\"foo\"}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (invalid value of option 'globals')\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert.has_error(function() luacheck.check_strings({\"foo\"}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (invalid value of option 'unused')\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function()\r\n      assert.same({\r\n         warnings = 0,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, luacheck.check_strings({}))\r\n   end",
    "type": "function"
  }, {
    "id": 76,
    "text": "assert.same({\r\n         warnings = 0,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, luacheck.check_strings({}))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected expression near 'return'\"\r\n            }\r\n         },\r\n         warnings = 1,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", \"return return\"})))\r\n   end",
    "type": "function"
  }, {
    "id": 79,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected expression near 'return'\"\r\n            }\r\n         },\r\n         warnings = 1,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", \"return return\"})))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"bar\"\r\n            }\r\n         },\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"local foo, bar -- luacheck: ignore foo (not bar though)\"})))\r\n   end",
    "type": "function"
  }, {
    "id": 82,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"bar\"\r\n            }\r\n         },\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"local foo, bar -- luacheck: ignore foo (not bar though)\"})))",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"521\",\r\n               name = \"foo\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 6\r\n            },\r\n            {\r\n               code = \"312\",\r\n               name = \"self\",\r\n               line = 3,\r\n               column = 11,\r\n               end_column = 11\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"self\",\r\n               line = 4,\r\n               column = 4,\r\n               end_column = 7\r\n            },\r\n            {\r\n               code = \"511\",\r\n               line = 9,\r\n               column = 1,\r\n               end_column = 1\r\n            }\r\n         },\r\n         warnings = 4,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, luacheck.check_strings({[[\r\n:: foo\r\n::local t = {}\r\nfunction t:m(x)\r\n   self = x\r\n   self = x\r\n   return self\r\nend\r\ndo return t end\r\n(t)()\r\n]]}))\r\n   end",
    "type": "function"
  }, {
    "id": 85,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"521\",\r\n               name = \"foo\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 6\r\n            },\r\n            {\r\n               code = \"312\",\r\n               name = \"self\",\r\n               line = 3,\r\n               column = 11,\r\n               end_column = 11\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"self\",\r\n               line = 4,\r\n               column = 4,\r\n               end_column = 7\r\n            },\r\n            {\r\n               code = \"511\",\r\n               line = 9,\r\n               column = 1,\r\n               end_column = 1\r\n            }\r\n         },\r\n         warnings = 4,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, luacheck.check_strings({[[\r\n:: foo\r\n::local t = {}\r\nfunction t:m(x)\r\n   self = x\r\n   self = x\r\n   return self\r\nend\r\ndo return t end\r\n(t)()\r\n]]}))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"022\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 17\r\n            },\r\n            {\r\n               code = \"023\",\r\n               line = 3,\r\n               column = 4,\r\n               end_column = 26\r\n            },\r\n            {\r\n               code = \"021\",\r\n               line = 6,\r\n               column = 10,\r\n               end_column = 14\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 3,\r\n         fatals = 0\r\n      }, luacheck.check_strings({[[\r\n-- luacheck: push\r\nlocal function f()\r\n   --[=[ luacheck: pop ]=]\r\nend\r\n\r\nreturn f --[=[\r\n   luacheck: some invalid comment\r\n]=]\r\n]]}))\r\n   end",
    "type": "function"
  }, {
    "id": 88,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"022\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 17\r\n            },\r\n            {\r\n               code = \"023\",\r\n               line = 3,\r\n               column = 4,\r\n               end_column = 26\r\n            },\r\n            {\r\n               code = \"021\",\r\n               line = 6,\r\n               column = 10,\r\n               end_column = 14\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 3,\r\n         fatals = 0\r\n      }, luacheck.check_strings({[[\r\n-- luacheck: push\r\nlocal function f()\r\n   --[=[ luacheck: pop ]=]\r\nend\r\n\r\nreturn f --[=[\r\n   luacheck: some invalid comment\r\n]=]\r\n]]}))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"unfinished string\",\r\n               line = 1,\r\n               column = 11,\r\n               end_column = 11\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"invalid hexadecimal escape sequence '\\\\x2'\",\r\n               line = 1,\r\n               column = 15,\r\n               end_column = 17\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected 'then' near <eof>\",\r\n               line = 1,\r\n               column = 9,\r\n               end_column = 9\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"label 'b' already defined on line 1\",\r\n               line = 1,\r\n               column = 7,\r\n               end_column = 11\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"cannot use '...' outside a vararg function\",\r\n               line = 1,\r\n               column = 15,\r\n               end_column = 17\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"'break' is not inside a loop\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 5\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 6,\r\n         fatals = 0\r\n      }, luacheck.check_strings({\r\n         [[local x = \"foo]],\r\n         [[local x = \"foo\\x2]],\r\n         [[if true ]],\r\n         [[::b:: ::b::]],\r\n         [[function f() (...)() end]],\r\n         [[break it()]]\r\n         }))\r\n   end",
    "type": "function"
  }, {
    "id": 91,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"unfinished string\",\r\n               line = 1,\r\n               column = 11,\r\n               end_column = 11\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"invalid hexadecimal escape sequence '\\\\x2'\",\r\n               line = 1,\r\n               column = 15,\r\n               end_column = 17\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected 'then' near <eof>\",\r\n               line = 1,\r\n               column = 9,\r\n               end_column = 9\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"label 'b' already defined on line 1\",\r\n               line = 1,\r\n               column = 7,\r\n               end_column = 11\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"cannot use '...' outside a vararg function\",\r\n               line = 1,\r\n               column = 15,\r\n               end_column = 17\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"'break' is not inside a loop\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 5\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 6,\r\n         fatals = 0\r\n      }, luacheck.check_strings({\r\n         [[local x = \"foo]],\r\n         [[local x = \"foo\\x2]],\r\n         [[if true ]],\r\n         [[::b:: ::b::]],\r\n         [[function f() (...)() end]],\r\n         [[break it()]]\r\n         }))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected expression near 'return'\"\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", \"return return\"}, {ignore = {\"113\"}})))\r\n   end",
    "type": "function"
  }, {
    "id": 94,
    "text": "assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected expression near 'return'\"\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", \"return return\"}, {ignore = {\"113\"}})))",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            fatal = \"I/O\"\r\n         },\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 1\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", {fatal = \"I/O\"}})))\r\n   end",
    "type": "function"
  }, {
    "id": 97,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            fatal = \"I/O\"\r\n         },\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 1\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", {fatal = \"I/O\"}})))",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function()\r\n   it(\"panics on bad strings\", function()\r\n      assert.has_error(function() luacheck.check_strings(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.check_strings' (table expected, got string)\")\r\n      assert.has_error(function() luacheck.check_strings({1}) end,\r\n         \"bad argument #1 to 'luacheck.check_strings' (array of strings or tables expected, got number)\")\r\n   end)\r\n\r\n   it(\"panics on bad options\", function()\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (invalid value of option 'unused')\")\r\n   end)\r\n\r\n   it(\"works on empty list\", function()\r\n      assert.same({\r\n         warnings = 0,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, luacheck.check_strings({}))\r\n   end)\r\n\r\n   it(\"works on strings\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected expression near 'return'\"\r\n            }\r\n         },\r\n         warnings = 1,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", \"return return\"})))\r\n   end)\r\n\r\n   it(\"supports comments in inline options\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"bar\"\r\n            }\r\n         },\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"local foo, bar -- luacheck: ignore foo (not bar though)\"})))\r\n   end)\r\n\r\n   it(\"provides correct location info for warnings\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"521\",\r\n               name = \"foo\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 6\r\n            },\r\n            {\r\n               code = \"312\",\r\n               name = \"self\",\r\n               line = 3,\r\n               column = 11,\r\n               end_column = 11\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"self\",\r\n               line = 4,\r\n               column = 4,\r\n               end_column = 7\r\n            },\r\n            {\r\n               code = \"511\",\r\n               line = 9,\r\n               column = 1,\r\n               end_column = 1\r\n            }\r\n         },\r\n         warnings = 4,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, luacheck.check_strings({[[\r\n:: foo\r\n::local t = {}\r\nfunction t:m(x)\r\n   self = x\r\n   self = x\r\n   return self\r\nend\r\ndo return t end\r\n(t)()\r\n]]}))\r\n   end)\r\n\r\n   it(\"provides correct location info for bad inline options\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"022\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 17\r\n            },\r\n            {\r\n               code = \"023\",\r\n               line = 3,\r\n               column = 4,\r\n               end_column = 26\r\n            },\r\n            {\r\n               code = \"021\",\r\n               line = 6,\r\n               column = 10,\r\n               end_column = 14\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 3,\r\n         fatals = 0\r\n      }, luacheck.check_strings({[[\r\n-- luacheck: push\r\nlocal function f()\r\n   --[=[ luacheck: pop ]=]\r\nend\r\n\r\nreturn f --[=[\r\n   luacheck: some invalid comment\r\n]=]\r\n]]}))\r\n   end)\r\n\r\n   it(\"provides correct location info for syntax errors\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"unfinished string\",\r\n               line = 1,\r\n               column = 11,\r\n               end_column = 11\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"invalid hexadecimal escape sequence '\\\\x2'\",\r\n               line = 1,\r\n               column = 15,\r\n               end_column = 17\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected 'then' near <eof>\",\r\n               line = 1,\r\n               column = 9,\r\n               end_column = 9\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"label 'b' already defined on line 1\",\r\n               line = 1,\r\n               column = 7,\r\n               end_column = 11\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"cannot use '...' outside a vararg function\",\r\n               line = 1,\r\n               column = 15,\r\n               end_column = 17\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"'break' is not inside a loop\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 5\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 6,\r\n         fatals = 0\r\n      }, luacheck.check_strings({\r\n         [[local x = \"foo]],\r\n         [[local x = \"foo\\x2]],\r\n         [[if true ]],\r\n         [[::b:: ::b::]],\r\n         [[function f() (...)() end]],\r\n         [[break it()]]\r\n         }))\r\n   end)\r\n\r\n   it(\"uses options\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected expression near 'return'\"\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", \"return return\"}, {ignore = {\"113\"}})))\r\n   end)\r\n\r\n   it(\"ignores tables with .fatal field\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            fatal = \"I/O\"\r\n         },\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 1\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", {fatal = \"I/O\"}})))\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "it(\"panics on bad strings\", function()\r\n      assert.has_error(function() luacheck.check_strings(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.check_strings' (table expected, got string)\")\r\n      assert.has_error(function() luacheck.check_strings({1}) end,\r\n         \"bad argument #1 to 'luacheck.check_strings' (array of strings or tables expected, got number)\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "it(\"panics on bad options\", function()\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck.check_strings({\"foo\"}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.check_strings' (invalid value of option 'unused')\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "it(\"works on empty list\", function()\r\n      assert.same({\r\n         warnings = 0,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, luacheck.check_strings({}))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "it(\"works on strings\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected expression near 'return'\"\r\n            }\r\n         },\r\n         warnings = 1,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", \"return return\"})))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "it(\"supports comments in inline options\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"211\",\r\n               name = \"bar\"\r\n            }\r\n         },\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"local foo, bar -- luacheck: ignore foo (not bar though)\"})))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "it(\"provides correct location info for warnings\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"521\",\r\n               name = \"foo\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 6\r\n            },\r\n            {\r\n               code = \"312\",\r\n               name = \"self\",\r\n               line = 3,\r\n               column = 11,\r\n               end_column = 11\r\n            },\r\n            {\r\n               code = \"311\",\r\n               name = \"self\",\r\n               line = 4,\r\n               column = 4,\r\n               end_column = 7\r\n            },\r\n            {\r\n               code = \"511\",\r\n               line = 9,\r\n               column = 1,\r\n               end_column = 1\r\n            }\r\n         },\r\n         warnings = 4,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, luacheck.check_strings({[[\r\n:: foo\r\n::local t = {}\r\nfunction t:m(x)\r\n   self = x\r\n   self = x\r\n   return self\r\nend\r\ndo return t end\r\n(t)()\r\n]]}))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "it(\"provides correct location info for bad inline options\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"022\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 17\r\n            },\r\n            {\r\n               code = \"023\",\r\n               line = 3,\r\n               column = 4,\r\n               end_column = 26\r\n            },\r\n            {\r\n               code = \"021\",\r\n               line = 6,\r\n               column = 10,\r\n               end_column = 14\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 3,\r\n         fatals = 0\r\n      }, luacheck.check_strings({[[\r\n-- luacheck: push\r\nlocal function f()\r\n   --[=[ luacheck: pop ]=]\r\nend\r\n\r\nreturn f --[=[\r\n   luacheck: some invalid comment\r\n]=]\r\n]]}))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "it(\"provides correct location info for syntax errors\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"unfinished string\",\r\n               line = 1,\r\n               column = 11,\r\n               end_column = 11\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"invalid hexadecimal escape sequence '\\\\x2'\",\r\n               line = 1,\r\n               column = 15,\r\n               end_column = 17\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected 'then' near <eof>\",\r\n               line = 1,\r\n               column = 9,\r\n               end_column = 9\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"label 'b' already defined on line 1\",\r\n               line = 1,\r\n               column = 7,\r\n               end_column = 11\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"cannot use '...' outside a vararg function\",\r\n               line = 1,\r\n               column = 15,\r\n               end_column = 17\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"'break' is not inside a loop\",\r\n               line = 1,\r\n               column = 1,\r\n               end_column = 5\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 6,\r\n         fatals = 0\r\n      }, luacheck.check_strings({\r\n         [[local x = \"foo]],\r\n         [[local x = \"foo\\x2]],\r\n         [[if true ]],\r\n         [[::b:: ::b::]],\r\n         [[function f() (...)() end]],\r\n         [[break it()]]\r\n         }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "it(\"uses options\", function()\r\n      assert.same({\r\n         {},\r\n         {\r\n            {\r\n               code = \"011\",\r\n               msg = \"expected expression near 'return'\"\r\n            }\r\n         },\r\n         warnings = 0,\r\n         errors = 1,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", \"return return\"}, {ignore = {\"113\"}})))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "it(\"ignores tables with .fatal field\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            fatal = \"I/O\"\r\n         },\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 1\r\n      }, strip_locations(luacheck.check_strings({\"return foo\", {fatal = \"I/O\"}})))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function() luacheck.get_report({}) end",
    "type": "function"
  }, {
    "id": 112,
    "text": "luacheck.get_report({})",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "function()\r\n      assert.has_error(function() luacheck.get_report({}) end,\r\n         \"bad argument #1 to 'luacheck.get_report' (string expected, got table)\")\r\n   end",
    "type": "function"
  }, {
    "id": 114,
    "text": "assert.has_error(function() luacheck.get_report({}) end,\r\n         \"bad argument #1 to 'luacheck.get_report' (string expected, got table)\")",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function()\r\n      assert.is_table(luacheck.get_report(\"return foo\"))\r\n   end",
    "type": "function"
  }, {
    "id": 117,
    "text": "assert.is_table(luacheck.get_report(\"return foo\"))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function()\r\n      local report = strip_locations({luacheck.get_report(\"return return\")})[1]\r\n      assert.same({code = \"011\", msg = \"expected expression near 'return'\"}, report[1])\r\n   end",
    "type": "function"
  }, {
    "id": 120,
    "text": "local report = strip_locations({luacheck.get_report(\"return return\")})[1]",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "assert.same({code = \"011\", msg = \"expected expression near 'return'\"}, report[1])",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function()\r\n   it(\"panics on bad argument\", function()\r\n      assert.has_error(function() luacheck.get_report({}) end,\r\n         \"bad argument #1 to 'luacheck.get_report' (string expected, got table)\")\r\n   end)\r\n\r\n   it(\"returns a table\", function()\r\n      assert.is_table(luacheck.get_report(\"return foo\"))\r\n   end)\r\n\r\n   it(\"returns a table with single error event on syntax error\", function()\r\n      local report = strip_locations({luacheck.get_report(\"return return\")})[1]\r\n      assert.same({code = \"011\", msg = \"expected expression near 'return'\"}, report[1])\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "it(\"panics on bad argument\", function()\r\n      assert.has_error(function() luacheck.get_report({}) end,\r\n         \"bad argument #1 to 'luacheck.get_report' (string expected, got table)\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "it(\"returns a table\", function()\r\n      assert.is_table(luacheck.get_report(\"return foo\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "it(\"returns a table with single error event on syntax error\", function()\r\n      local report = strip_locations({luacheck.get_report(\"return return\")})[1]\r\n      assert.same({code = \"011\", msg = \"expected expression near 'return'\"}, report[1])\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function() luacheck.process_reports(\"foo\") end",
    "type": "function"
  }, {
    "id": 129,
    "text": "luacheck.process_reports(\"foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "function()\r\n      assert.has_error(function() luacheck.process_reports(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.process_reports' (table expected, got string)\")\r\n   end",
    "type": "function"
  }, {
    "id": 131,
    "text": "assert.has_error(function() luacheck.process_reports(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.process_reports' (table expected, got string)\")",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function() luacheck.process_reports({{}}, \"bar\") end",
    "type": "function"
  }, {
    "id": 134,
    "text": "luacheck.process_reports({{}}, \"bar\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "function() luacheck.process_reports({{}}, {globals = \"bar\"}) end",
    "type": "function"
  }, {
    "id": 136,
    "text": "luacheck.process_reports({{}}, {globals = \"bar\"})",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "function() luacheck.process_reports({{}}, {{unused = 123}}) end",
    "type": "function"
  }, {
    "id": 138,
    "text": "luacheck.process_reports({{}}, {{unused = 123}})",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "function()\r\n      assert.has_error(function() luacheck.process_reports({{}}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck.process_reports({{}}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck.process_reports({{}}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (invalid value of option 'unused')\")\r\n   end",
    "type": "function"
  }, {
    "id": 140,
    "text": "assert.has_error(function() luacheck.process_reports({{}}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (table or nil expected, got string)\")",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "assert.has_error(function() luacheck.process_reports({{}}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (invalid value of option 'globals')\")",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "assert.has_error(function() luacheck.process_reports({{}}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (invalid value of option 'unused')\")",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {},\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.process_reports({luacheck.get_report(\"return foo\"), luacheck.get_report(\"return math\")})))\r\n   end",
    "type": "function"
  }, {
    "id": 145,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {},\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.process_reports({luacheck.get_report(\"return foo\"), luacheck.get_report(\"return math\")})))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"math\"\r\n            }\r\n         },\r\n         warnings = 2,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.process_reports({luacheck.get_report(\"return foo\"), luacheck.get_report(\"return math\")}, {\r\n         std = \"none\"\r\n      })))\r\n   end",
    "type": "function"
  }, {
    "id": 148,
    "text": "assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"math\"\r\n            }\r\n         },\r\n         warnings = 2,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.process_reports({luacheck.get_report(\"return foo\"), luacheck.get_report(\"return math\")}, {\r\n         std = \"none\"\r\n      })))",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function()\r\n   it(\"panics on bad reports\", function()\r\n      assert.has_error(function() luacheck.process_reports(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.process_reports' (table expected, got string)\")\r\n   end)\r\n\r\n   it(\"panics on bad options\", function()\r\n      assert.has_error(function() luacheck.process_reports({{}}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck.process_reports({{}}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck.process_reports({{}}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (invalid value of option 'unused')\")\r\n   end)\r\n\r\n   it(\"processes reports\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {},\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.process_reports({luacheck.get_report(\"return foo\"), luacheck.get_report(\"return math\")})))\r\n   end)\r\n\r\n   it(\"uses options\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"math\"\r\n            }\r\n         },\r\n         warnings = 2,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.process_reports({luacheck.get_report(\"return foo\"), luacheck.get_report(\"return math\")}, {\r\n         std = \"none\"\r\n      })))\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "it(\"panics on bad reports\", function()\r\n      assert.has_error(function() luacheck.process_reports(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.process_reports' (table expected, got string)\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "it(\"panics on bad options\", function()\r\n      assert.has_error(function() luacheck.process_reports({{}}, \"bar\") end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (table or nil expected, got string)\")\r\n      assert.has_error(function() luacheck.process_reports({{}}, {globals = \"bar\"}) end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (invalid value of option 'globals')\")\r\n      assert.has_error(function() luacheck.process_reports({{}}, {{unused = 123}}) end,\r\n         \"bad argument #2 to 'luacheck.process_reports' (invalid value of option 'unused')\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "it(\"processes reports\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {},\r\n         warnings = 1,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.process_reports({luacheck.get_report(\"return foo\"), luacheck.get_report(\"return math\")})))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "it(\"uses options\", function()\r\n      assert.same({\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"foo\"\r\n            }\r\n         },\r\n         {\r\n            {\r\n               code = \"113\",\r\n               name = \"math\"\r\n            }\r\n         },\r\n         warnings = 2,\r\n         errors = 0,\r\n         fatals = 0\r\n      }, strip_locations(luacheck.process_reports({luacheck.get_report(\"return foo\"), luacheck.get_report(\"return math\")}, {\r\n         std = \"none\"\r\n      })))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function() luacheck.get_message(\"foo\") end",
    "type": "function"
  }, {
    "id": 157,
    "text": "luacheck.get_message(\"foo\")",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "function()\r\n      assert.has_error(function() luacheck.get_message(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.get_message' (table expected, got string)\")\r\n   end",
    "type": "function"
  }, {
    "id": 159,
    "text": "assert.has_error(function() luacheck.get_message(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.get_message' (table expected, got string)\")",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function()\r\n      assert.equal(\"unused argument 'bar'\", luacheck.get_message({\r\n         code = \"212\",\r\n         name = \"bar\"\r\n      }))\r\n      assert.equal(\"shadowing definition of loop variable 'foo' on line 1\", luacheck.get_message({\r\n         code = \"423\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         prev_line = 1\r\n      }))\r\n      assert.equal(\"message goes here\", luacheck.get_message({\r\n         code = \"011\",\r\n         msg = \"message goes here\"\r\n      }))\r\n      assert.equal(\"unexpected character near '%'\", luacheck.get_message({\r\n         code = \"011\",\r\n         msg = \"unexpected character near '%'\"\r\n      }))\r\n   end",
    "type": "function"
  }, {
    "id": 162,
    "text": "assert.equal(\"unused argument 'bar'\", luacheck.get_message({\r\n         code = \"212\",\r\n         name = \"bar\"\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert.equal(\"shadowing definition of loop variable 'foo' on line 1\", luacheck.get_message({\r\n         code = \"423\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         prev_line = 1\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "assert.equal(\"message goes here\", luacheck.get_message({\r\n         code = \"011\",\r\n         msg = \"message goes here\"\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "assert.equal(\"unexpected character near '%'\", luacheck.get_message({\r\n         code = \"011\",\r\n         msg = \"unexpected character near '%'\"\r\n      }))",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function()\r\n   it(\"panics on bad events\", function()\r\n      assert.has_error(function() luacheck.get_message(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.get_message' (table expected, got string)\")\r\n   end)\r\n\r\n   it(\"returns message for an event\", function()\r\n      assert.equal(\"unused argument 'bar'\", luacheck.get_message({\r\n         code = \"212\",\r\n         name = \"bar\"\r\n      }))\r\n      assert.equal(\"shadowing definition of loop variable 'foo' on line 1\", luacheck.get_message({\r\n         code = \"423\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         prev_line = 1\r\n      }))\r\n      assert.equal(\"message goes here\", luacheck.get_message({\r\n         code = \"011\",\r\n         msg = \"message goes here\"\r\n      }))\r\n      assert.equal(\"unexpected character near '%'\", luacheck.get_message({\r\n         code = \"011\",\r\n         msg = \"unexpected character near '%'\"\r\n      }))\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "it(\"panics on bad events\", function()\r\n      assert.has_error(function() luacheck.get_message(\"foo\") end,\r\n         \"bad argument #1 to 'luacheck.get_message' (table expected, got string)\")\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "it(\"returns message for an event\", function()\r\n      assert.equal(\"unused argument 'bar'\", luacheck.get_message({\r\n         code = \"212\",\r\n         name = \"bar\"\r\n      }))\r\n      assert.equal(\"shadowing definition of loop variable 'foo' on line 1\", luacheck.get_message({\r\n         code = \"423\",\r\n         name = \"foo\",\r\n         line = 2,\r\n         prev_line = 1\r\n      }))\r\n      assert.equal(\"message goes here\", luacheck.get_message({\r\n         code = \"011\",\r\n         msg = \"message goes here\"\r\n      }))\r\n      assert.equal(\"unexpected character near '%'\", luacheck.get_message({\r\n         code = \"011\",\r\n         msg = \"unexpected character near '%'\"\r\n      }))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "",
    "type": "function container"
  }, {
    "id": 172,
    "text": "check_files",
    "type": "global function"
  }, {
    "id": 173,
    "text": "check_strings",
    "type": "global function"
  }, {
    "id": 174,
    "text": "process_reports",
    "type": "global function"
  }, {
    "id": 175,
    "text": "get_message",
    "type": "global function"
  }, {
    "id": 176,
    "text": "get_report",
    "type": "global function"
  }, {
    "id": 177,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 178,
    "text": "has_error",
    "type": "global function"
  }, {
    "id": 179,
    "text": "luacheck",
    "type": "global function"
  }, {
    "id": 180,
    "text": "same",
    "type": "global function"
  }, {
    "id": 181,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 182,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 183,
    "text": "require",
    "type": "global function"
  }, {
    "id": 184,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 185,
    "text": "it",
    "type": "global function"
  }, {
    "id": 186,
    "text": "",
    "type": "variable container"
  }, {
    "id": 187,
    "text": "",
    "type": "require container"
  }, {
    "id": 188,
    "text": "",
    "type": "require local variable"
  } ]
}