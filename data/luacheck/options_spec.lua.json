{
  "_filename": "options_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/options_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 14
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 18
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 26,
    "label": "has",
    "to": 20
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 31
  }, {
    "from": 38,
    "label": "has",
    "to": 33
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 51,
    "label": "has",
    "to": 57
  }, {
    "from": 51,
    "label": "has",
    "to": 58
  }, {
    "from": 51,
    "label": "has",
    "to": 59
  }, {
    "from": 51,
    "label": "has",
    "to": 60
  }, {
    "from": 51,
    "label": "has",
    "to": 61
  }, {
    "from": 51,
    "label": "has",
    "to": 62
  }, {
    "from": 51,
    "label": "has",
    "to": 63
  }, {
    "from": 51,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 29
  }, {
    "from": 69,
    "label": "has",
    "to": 30
  }, {
    "from": 69,
    "label": "has",
    "to": 31
  }, {
    "from": 69,
    "label": "has",
    "to": 32
  }, {
    "from": 69,
    "label": "has",
    "to": 33
  }, {
    "from": 69,
    "label": "has",
    "to": 34
  }, {
    "from": 69,
    "label": "has",
    "to": 35
  }, {
    "from": 69,
    "label": "has",
    "to": 36
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 39
  }, {
    "from": 70,
    "label": "has",
    "to": 40
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 70,
    "label": "has",
    "to": 33
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 43
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 46
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 49
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 52
  }, {
    "from": 74,
    "label": "has",
    "to": 53
  }, {
    "from": 74,
    "label": "has",
    "to": 54
  }, {
    "from": 74,
    "label": "has",
    "to": 55
  }, {
    "from": 74,
    "label": "has",
    "to": 56
  }, {
    "from": 74,
    "label": "has",
    "to": 57
  }, {
    "from": 74,
    "label": "has",
    "to": 58
  }, {
    "from": 74,
    "label": "has",
    "to": 59
  }, {
    "from": 74,
    "label": "has",
    "to": 60
  }, {
    "from": 74,
    "label": "has",
    "to": 61
  }, {
    "from": 74,
    "label": "has",
    "to": 62
  }, {
    "from": 74,
    "label": "has",
    "to": 63
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 66
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 78,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 78,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 14
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 78,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 18
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 26,
    "label": "has",
    "to": 20
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 29
  }, {
    "from": 69,
    "label": "has",
    "to": 30
  }, {
    "from": 69,
    "label": "has",
    "to": 31
  }, {
    "from": 69,
    "label": "has",
    "to": 32
  }, {
    "from": 69,
    "label": "has",
    "to": 33
  }, {
    "from": 69,
    "label": "has",
    "to": 34
  }, {
    "from": 69,
    "label": "has",
    "to": 35
  }, {
    "from": 69,
    "label": "has",
    "to": 36
  }, {
    "from": 79,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 39
  }, {
    "from": 70,
    "label": "has",
    "to": 40
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 70,
    "label": "has",
    "to": 33
  }, {
    "from": 79,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 43
  }, {
    "from": 79,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 46
  }, {
    "from": 79,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 49
  }, {
    "from": 79,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 52
  }, {
    "from": 74,
    "label": "has",
    "to": 53
  }, {
    "from": 74,
    "label": "has",
    "to": 54
  }, {
    "from": 74,
    "label": "has",
    "to": 55
  }, {
    "from": 74,
    "label": "has",
    "to": 56
  }, {
    "from": 74,
    "label": "has",
    "to": 57
  }, {
    "from": 74,
    "label": "has",
    "to": 58
  }, {
    "from": 74,
    "label": "has",
    "to": 59
  }, {
    "from": 74,
    "label": "has",
    "to": 60
  }, {
    "from": 74,
    "label": "has",
    "to": 61
  }, {
    "from": 74,
    "label": "has",
    "to": 62
  }, {
    "from": 74,
    "label": "has",
    "to": 63
  }, {
    "from": 79,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 66
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 89
  }, {
    "from": 81,
    "label": "calls",
    "to": 89
  }, {
    "from": 81,
    "label": "calls",
    "to": 89
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 82
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 86
  }, {
    "from": 81,
    "label": "calls",
    "to": 86
  }, {
    "from": 81,
    "label": "calls",
    "to": 87
  }, {
    "from": 81,
    "label": "calls",
    "to": 87
  }, {
    "from": 81,
    "label": "calls",
    "to": 87
  }, {
    "from": 81,
    "label": "calls",
    "to": 92
  }, {
    "from": 81,
    "label": "calls",
    "to": 92
  }, {
    "from": 81,
    "label": "calls",
    "to": 92
  }, {
    "from": 81,
    "label": "calls",
    "to": 93
  }, {
    "from": 81,
    "label": "calls",
    "to": 93
  }, {
    "from": 81,
    "label": "calls",
    "to": 93
  }, {
    "from": 81,
    "label": "calls",
    "to": 93
  }, {
    "from": 81,
    "label": "calls",
    "to": 93
  }, {
    "from": 81,
    "label": "calls",
    "to": 90
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 81,
    "label": "declares",
    "to": 3
  }, {
    "from": 81,
    "label": "declares",
    "to": 6
  }, {
    "from": 81,
    "label": "declares",
    "to": 7
  }, {
    "from": 81,
    "label": "declares",
    "to": 10
  }, {
    "from": 81,
    "label": "declares",
    "to": 11
  }, {
    "from": 81,
    "label": "declares",
    "to": 17
  }, {
    "from": 81,
    "label": "declares",
    "to": 22
  }, {
    "from": 81,
    "label": "declares",
    "to": 28
  }, {
    "from": 81,
    "label": "declares",
    "to": 38
  }, {
    "from": 81,
    "label": "declares",
    "to": 42
  }, {
    "from": 81,
    "label": "declares",
    "to": 45
  }, {
    "from": 81,
    "label": "declares",
    "to": 48
  }, {
    "from": 81,
    "label": "declares",
    "to": 51
  }, {
    "from": 81,
    "label": "declares",
    "to": 65
  }, {
    "from": 81,
    "label": "declares",
    "to": 68
  }, {
    "from": 81,
    "label": "declares",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 96
  }, {
    "from": 96,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "requires",
    "to": 2
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 8,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 71,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 72,
    "label": "hasArgument",
    "to": 45
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 42
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 45
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 68
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "options_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "options",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n         assert.is_true(options.validate(options.all_options))\r\n      end",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert.is_true(options.validate(options.all_options))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function()\r\n         assert.is_true(options.validate(options.all_options, {\r\n            globals = {\"foo\"},\r\n            compat = false,\r\n            unrelated = function() end\r\n         }))\r\n      end",
    "type": "function"
  }, {
    "id": 8,
    "text": "assert.is_true(options.validate(options.all_options, {\r\n            globals = {\"foo\"},\r\n            compat = false,\r\n            unrelated = function() end\r\n         }))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function()\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = {3}\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, function() end))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            unused = 0\r\n         }))\r\n      end",
    "type": "function"
  }, {
    "id": 12,
    "text": "assert.is_false(options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         }))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert.is_false(options.validate(options.all_options, {\r\n            globals = {3}\r\n         }))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert.is_false(options.validate(options.all_options, function() end))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert.is_false(options.validate(options.all_options, {\r\n            unused = 0\r\n         }))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         })))\r\n\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = {3}\r\n         })))\r\n\r\n         assert.equal(\"unused\", select(2, options.validate(options.all_options, {\r\n            unused = 0\r\n         })))\r\n      end",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         })))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = {3}\r\n         })))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert.equal(\"unused\", select(2, options.validate(options.all_options, {\r\n            unused = 0\r\n         })))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function()\r\n      it(\"returns true if options are empty\", function()\r\n         assert.is_true(options.validate(options.all_options))\r\n      end)\r\n\r\n      it(\"returns true if options are valid\", function()\r\n         assert.is_true(options.validate(options.all_options, {\r\n            globals = {\"foo\"},\r\n            compat = false,\r\n            unrelated = function() end\r\n         }))\r\n      end)\r\n\r\n      it(\"returns false if options are invalid\", function()\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = {3}\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, function() end))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            unused = 0\r\n         }))\r\n      end)\r\n\r\n      it(\"additionally returns name of the problematic field\", function()\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         })))\r\n\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = {3}\r\n         })))\r\n\r\n         assert.equal(\"unused\", select(2, options.validate(options.all_options, {\r\n            unused = 0\r\n         })))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 23,
    "text": "it(\"returns true if options are empty\", function()\r\n         assert.is_true(options.validate(options.all_options))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "it(\"returns true if options are valid\", function()\r\n         assert.is_true(options.validate(options.all_options, {\r\n            globals = {\"foo\"},\r\n            compat = false,\r\n            unrelated = function() end\r\n         }))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "it(\"returns false if options are invalid\", function()\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = {3}\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, function() end))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            unused = 0\r\n         }))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "it(\"additionally returns name of the problematic field\", function()\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         })))\r\n\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = {3}\r\n         })))\r\n\r\n         assert.equal(\"unused\", select(2, options.validate(options.all_options, {\r\n            unused = 0\r\n         })))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n         local opts = options.normalize({})\r\n         assert.same(opts, options.normalize({{}}))\r\n\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.module)\r\n         assert.is_false(opts.allow_defined)\r\n         assert.is_false(opts.allow_defined_top)\r\n         assert.is_table(opts.globals)\r\n         assert.same({}, opts.rules)\r\n      end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local opts = options.normalize({})",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "assert.same(opts, options.normalize({{}}))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert.is_true(opts.unused_secondaries)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.is_false(opts.module)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert.is_false(opts.allow_defined)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert.is_false(opts.allow_defined_top)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert.is_table(opts.globals)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert.same({}, opts.rules)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n         local opts = options.normalize({\r\n            {\r\n               module = false,\r\n               unused_secondaries = true\r\n            }, {\r\n               module = true,\r\n               allow_defined = false\r\n            }\r\n         })\r\n\r\n         assert.is_true(opts.module)\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.allow_defined)\r\n      end",
    "type": "function"
  }, {
    "id": 39,
    "text": "local opts = options.normalize({\r\n            {\r\n               module = false,\r\n               unused_secondaries = true\r\n            }, {\r\n               module = true,\r\n               allow_defined = false\r\n            }\r\n         })",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "assert.is_true(opts.module)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function()\r\n         assert.same({baz = 1}, options.normalize({\r\n            {\r\n               std = \"none\"\r\n            }, {\r\n               globals = {\"foo\", \"bar\"},\r\n               compat = true\r\n            }, {\r\n               new_globals = {\"baz\"},\r\n               compat = false\r\n            }\r\n         }).globals)\r\n      end",
    "type": "function"
  }, {
    "id": 43,
    "text": "assert.same({baz = 1}, options.normalize({\r\n            {\r\n               std = \"none\"\r\n            }, {\r\n               globals = {\"foo\", \"bar\"},\r\n               compat = true\r\n            }, {\r\n               new_globals = {\"baz\"},\r\n               compat = false\r\n            }\r\n         }).globals)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"lua51+lua52+lua53+luajit\"\r\n            },\r\n         }).globals)\r\n      end",
    "type": "function"
  }, {
    "id": 46,
    "text": "assert.same(options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"lua51+lua52+lua53+luajit\"\r\n            },\r\n         }).globals)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"lua52 + busted\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n            {\r\n               std = \"none\"\r\n            },\r\n            {\r\n               std = \"+lua52+busted\"\r\n            }\r\n         }).globals)\r\n      end",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert.same(options.normalize({\r\n            {\r\n               std = \"lua52 + busted\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n            {\r\n               std = \"none\"\r\n            },\r\n            {\r\n               std = \"+lua52+busted\"\r\n            }\r\n         }).globals)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n         local opts = options.normalize({\r\n            {\r\n               std = \"lua52\",\r\n               globals = {\"foo\", \"bar\"},\r\n               read_globals = {\"baz\"}\r\n            }, {\r\n               new_read_globals = {\"quux\"},\r\n            }\r\n         })\r\n         local globals = opts.globals\r\n         local read_globals = opts.read_globals\r\n         assert.is_truthy(globals.foo)\r\n         assert.is_truthy(globals.bar)\r\n         assert.is_nil(globals.baz)\r\n         assert.is_truthy(globals.quux)\r\n         assert.is_truthy(read_globals.quux)\r\n         assert.is_truthy(read_globals.string)\r\n         assert.is_nil(read_globals._ENV)\r\n         assert.is_truthy(globals.string)\r\n         assert.is_truthy(globals._ENV)\r\n      end",
    "type": "function"
  }, {
    "id": 52,
    "text": "local opts = options.normalize({\r\n            {\r\n               std = \"lua52\",\r\n               globals = {\"foo\", \"bar\"},\r\n               read_globals = {\"baz\"}\r\n            }, {\r\n               new_read_globals = {\"quux\"},\r\n            }\r\n         })",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local globals = opts.globals",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local read_globals = opts.read_globals",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "assert.is_truthy(globals.foo)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert.is_truthy(globals.bar)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert.is_nil(globals.baz)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert.is_truthy(globals.quux)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert.is_truthy(read_globals.quux)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.is_truthy(read_globals.string)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert.is_nil(read_globals._ENV)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert.is_truthy(globals.string)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert.is_truthy(globals._ENV)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function()\r\n         assert.same({\r\n               {{{nil, \"^foo$\"}}, \"only\"},\r\n               {{{\"^21[23]\", nil}}, \"disable\"},\r\n               {{{\"^[23]\", nil}}, \"enable\"},\r\n               {{{\"^511\", nil}}, \"enable\"},\r\n               {{{\"^412\", nil}, {\"1$\", \"^bar$\"}}, \"disable\"}\r\n            }, options.normalize({\r\n            {\r\n               unused = false\r\n            }, {\r\n               ignore = {\"412\", \"1$/bar\"}\r\n            }, {\r\n               unused = true,\r\n               unused_args = false,\r\n               enable = {\"511\"}\r\n            }, {\r\n               only = {\"foo\"}\r\n            }\r\n         }).rules)\r\n      end",
    "type": "function"
  }, {
    "id": 66,
    "text": "assert.same({\r\n               {{{nil, \"^foo$\"}}, \"only\"},\r\n               {{{\"^21[23]\", nil}}, \"disable\"},\r\n               {{{\"^[23]\", nil}}, \"enable\"},\r\n               {{{\"^511\", nil}}, \"enable\"},\r\n               {{{\"^412\", nil}, {\"1$\", \"^bar$\"}}, \"disable\"}\r\n            }, options.normalize({\r\n            {\r\n               unused = false\r\n            }, {\r\n               ignore = {\"412\", \"1$/bar\"}\r\n            }, {\r\n               unused = true,\r\n               unused_args = false,\r\n               enable = {\"511\"}\r\n            }, {\r\n               only = {\"foo\"}\r\n            }\r\n         }).rules)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function()\r\n      it(\"applies default values\", function()\r\n         local opts = options.normalize({})\r\n         assert.same(opts, options.normalize({{}}))\r\n\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.module)\r\n         assert.is_false(opts.allow_defined)\r\n         assert.is_false(opts.allow_defined_top)\r\n         assert.is_table(opts.globals)\r\n         assert.same({}, opts.rules)\r\n      end)\r\n\r\n      it(\"considers simple boolean options\", function()\r\n         local opts = options.normalize({\r\n            {\r\n               module = false,\r\n               unused_secondaries = true\r\n            }, {\r\n               module = true,\r\n               allow_defined = false\r\n            }\r\n         })\r\n\r\n         assert.is_true(opts.module)\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.allow_defined)\r\n      end)\r\n\r\n      it(\"considers opts.std and opts.compat\", function()\r\n         assert.same({baz = 1}, options.normalize({\r\n            {\r\n               std = \"none\"\r\n            }, {\r\n               globals = {\"foo\", \"bar\"},\r\n               compat = true\r\n            }, {\r\n               new_globals = {\"baz\"},\r\n               compat = false\r\n            }\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"allows compound std unions\", function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"lua51+lua52+lua53+luajit\"\r\n            },\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"allows std addition\", function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"lua52 + busted\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n            {\r\n               std = \"none\"\r\n            },\r\n            {\r\n               std = \"+lua52+busted\"\r\n            }\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"considers read-only and regular globals\", function()\r\n         local opts = options.normalize({\r\n            {\r\n               std = \"lua52\",\r\n               globals = {\"foo\", \"bar\"},\r\n               read_globals = {\"baz\"}\r\n            }, {\r\n               new_read_globals = {\"quux\"},\r\n            }\r\n         })\r\n         local globals = opts.globals\r\n         local read_globals = opts.read_globals\r\n         assert.is_truthy(globals.foo)\r\n         assert.is_truthy(globals.bar)\r\n         assert.is_nil(globals.baz)\r\n         assert.is_truthy(globals.quux)\r\n         assert.is_truthy(read_globals.quux)\r\n         assert.is_truthy(read_globals.string)\r\n         assert.is_nil(read_globals._ENV)\r\n         assert.is_truthy(globals.string)\r\n         assert.is_truthy(globals._ENV)\r\n      end)\r\n\r\n      it(\"considers macros, ignore, enable and only\", function()\r\n         assert.same({\r\n               {{{nil, \"^foo$\"}}, \"only\"},\r\n               {{{\"^21[23]\", nil}}, \"disable\"},\r\n               {{{\"^[23]\", nil}}, \"enable\"},\r\n               {{{\"^511\", nil}}, \"enable\"},\r\n               {{{\"^412\", nil}, {\"1$\", \"^bar$\"}}, \"disable\"}\r\n            }, options.normalize({\r\n            {\r\n               unused = false\r\n            }, {\r\n               ignore = {\"412\", \"1$/bar\"}\r\n            }, {\r\n               unused = true,\r\n               unused_args = false,\r\n               enable = {\"511\"}\r\n            }, {\r\n               only = {\"foo\"}\r\n            }\r\n         }).rules)\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 69,
    "text": "it(\"applies default values\", function()\r\n         local opts = options.normalize({})\r\n         assert.same(opts, options.normalize({{}}))\r\n\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.module)\r\n         assert.is_false(opts.allow_defined)\r\n         assert.is_false(opts.allow_defined_top)\r\n         assert.is_table(opts.globals)\r\n         assert.same({}, opts.rules)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "it(\"considers simple boolean options\", function()\r\n         local opts = options.normalize({\r\n            {\r\n               module = false,\r\n               unused_secondaries = true\r\n            }, {\r\n               module = true,\r\n               allow_defined = false\r\n            }\r\n         })\r\n\r\n         assert.is_true(opts.module)\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.allow_defined)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "it(\"considers opts.std and opts.compat\", function()\r\n         assert.same({baz = 1}, options.normalize({\r\n            {\r\n               std = \"none\"\r\n            }, {\r\n               globals = {\"foo\", \"bar\"},\r\n               compat = true\r\n            }, {\r\n               new_globals = {\"baz\"},\r\n               compat = false\r\n            }\r\n         }).globals)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "it(\"allows compound std unions\", function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"lua51+lua52+lua53+luajit\"\r\n            },\r\n         }).globals)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "it(\"allows std addition\", function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"lua52 + busted\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n            {\r\n               std = \"none\"\r\n            },\r\n            {\r\n               std = \"+lua52+busted\"\r\n            }\r\n         }).globals)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "it(\"considers read-only and regular globals\", function()\r\n         local opts = options.normalize({\r\n            {\r\n               std = \"lua52\",\r\n               globals = {\"foo\", \"bar\"},\r\n               read_globals = {\"baz\"}\r\n            }, {\r\n               new_read_globals = {\"quux\"},\r\n            }\r\n         })\r\n         local globals = opts.globals\r\n         local read_globals = opts.read_globals\r\n         assert.is_truthy(globals.foo)\r\n         assert.is_truthy(globals.bar)\r\n         assert.is_nil(globals.baz)\r\n         assert.is_truthy(globals.quux)\r\n         assert.is_truthy(read_globals.quux)\r\n         assert.is_truthy(read_globals.string)\r\n         assert.is_nil(read_globals._ENV)\r\n         assert.is_truthy(globals.string)\r\n         assert.is_truthy(globals._ENV)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "it(\"considers macros, ignore, enable and only\", function()\r\n         assert.same({\r\n               {{{nil, \"^foo$\"}}, \"only\"},\r\n               {{{\"^21[23]\", nil}}, \"disable\"},\r\n               {{{\"^[23]\", nil}}, \"enable\"},\r\n               {{{\"^511\", nil}}, \"enable\"},\r\n               {{{\"^412\", nil}, {\"1$\", \"^bar$\"}}, \"disable\"}\r\n            }, options.normalize({\r\n            {\r\n               unused = false\r\n            }, {\r\n               ignore = {\"412\", \"1$/bar\"}\r\n            }, {\r\n               unused = true,\r\n               unused_args = false,\r\n               enable = {\"511\"}\r\n            }, {\r\n               only = {\"foo\"}\r\n            }\r\n         }).rules)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n   describe(\"validate\", function()\r\n      it(\"returns true if options are empty\", function()\r\n         assert.is_true(options.validate(options.all_options))\r\n      end)\r\n\r\n      it(\"returns true if options are valid\", function()\r\n         assert.is_true(options.validate(options.all_options, {\r\n            globals = {\"foo\"},\r\n            compat = false,\r\n            unrelated = function() end\r\n         }))\r\n      end)\r\n\r\n      it(\"returns false if options are invalid\", function()\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = {3}\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, function() end))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            unused = 0\r\n         }))\r\n      end)\r\n\r\n      it(\"additionally returns name of the problematic field\", function()\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         })))\r\n\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = {3}\r\n         })))\r\n\r\n         assert.equal(\"unused\", select(2, options.validate(options.all_options, {\r\n            unused = 0\r\n         })))\r\n      end)\r\n   end)\r\n\r\n   describe(\"normalize\", function()\r\n      it(\"applies default values\", function()\r\n         local opts = options.normalize({})\r\n         assert.same(opts, options.normalize({{}}))\r\n\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.module)\r\n         assert.is_false(opts.allow_defined)\r\n         assert.is_false(opts.allow_defined_top)\r\n         assert.is_table(opts.globals)\r\n         assert.same({}, opts.rules)\r\n      end)\r\n\r\n      it(\"considers simple boolean options\", function()\r\n         local opts = options.normalize({\r\n            {\r\n               module = false,\r\n               unused_secondaries = true\r\n            }, {\r\n               module = true,\r\n               allow_defined = false\r\n            }\r\n         })\r\n\r\n         assert.is_true(opts.module)\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.allow_defined)\r\n      end)\r\n\r\n      it(\"considers opts.std and opts.compat\", function()\r\n         assert.same({baz = 1}, options.normalize({\r\n            {\r\n               std = \"none\"\r\n            }, {\r\n               globals = {\"foo\", \"bar\"},\r\n               compat = true\r\n            }, {\r\n               new_globals = {\"baz\"},\r\n               compat = false\r\n            }\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"allows compound std unions\", function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"lua51+lua52+lua53+luajit\"\r\n            },\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"allows std addition\", function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"lua52 + busted\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n            {\r\n               std = \"none\"\r\n            },\r\n            {\r\n               std = \"+lua52+busted\"\r\n            }\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"considers read-only and regular globals\", function()\r\n         local opts = options.normalize({\r\n            {\r\n               std = \"lua52\",\r\n               globals = {\"foo\", \"bar\"},\r\n               read_globals = {\"baz\"}\r\n            }, {\r\n               new_read_globals = {\"quux\"},\r\n            }\r\n         })\r\n         local globals = opts.globals\r\n         local read_globals = opts.read_globals\r\n         assert.is_truthy(globals.foo)\r\n         assert.is_truthy(globals.bar)\r\n         assert.is_nil(globals.baz)\r\n         assert.is_truthy(globals.quux)\r\n         assert.is_truthy(read_globals.quux)\r\n         assert.is_truthy(read_globals.string)\r\n         assert.is_nil(read_globals._ENV)\r\n         assert.is_truthy(globals.string)\r\n         assert.is_truthy(globals._ENV)\r\n      end)\r\n\r\n      it(\"considers macros, ignore, enable and only\", function()\r\n         assert.same({\r\n               {{{nil, \"^foo$\"}}, \"only\"},\r\n               {{{\"^21[23]\", nil}}, \"disable\"},\r\n               {{{\"^[23]\", nil}}, \"enable\"},\r\n               {{{\"^511\", nil}}, \"enable\"},\r\n               {{{\"^412\", nil}, {\"1$\", \"^bar$\"}}, \"disable\"}\r\n            }, options.normalize({\r\n            {\r\n               unused = false\r\n            }, {\r\n               ignore = {\"412\", \"1$/bar\"}\r\n            }, {\r\n               unused = true,\r\n               unused_args = false,\r\n               enable = {\"511\"}\r\n            }, {\r\n               only = {\"foo\"}\r\n            }\r\n         }).rules)\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "describe(\"validate\", function()\r\n      it(\"returns true if options are empty\", function()\r\n         assert.is_true(options.validate(options.all_options))\r\n      end)\r\n\r\n      it(\"returns true if options are valid\", function()\r\n         assert.is_true(options.validate(options.all_options, {\r\n            globals = {\"foo\"},\r\n            compat = false,\r\n            unrelated = function() end\r\n         }))\r\n      end)\r\n\r\n      it(\"returns false if options are invalid\", function()\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            globals = {3}\r\n         }))\r\n\r\n         assert.is_false(options.validate(options.all_options, function() end))\r\n\r\n         assert.is_false(options.validate(options.all_options, {\r\n            unused = 0\r\n         }))\r\n      end)\r\n\r\n      it(\"additionally returns name of the problematic field\", function()\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = 3,\r\n            redefined = false\r\n         })))\r\n\r\n         assert.equal(\"globals\", select(2, options.validate(options.all_options, {\r\n            globals = {3}\r\n         })))\r\n\r\n         assert.equal(\"unused\", select(2, options.validate(options.all_options, {\r\n            unused = 0\r\n         })))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "describe(\"normalize\", function()\r\n      it(\"applies default values\", function()\r\n         local opts = options.normalize({})\r\n         assert.same(opts, options.normalize({{}}))\r\n\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.module)\r\n         assert.is_false(opts.allow_defined)\r\n         assert.is_false(opts.allow_defined_top)\r\n         assert.is_table(opts.globals)\r\n         assert.same({}, opts.rules)\r\n      end)\r\n\r\n      it(\"considers simple boolean options\", function()\r\n         local opts = options.normalize({\r\n            {\r\n               module = false,\r\n               unused_secondaries = true\r\n            }, {\r\n               module = true,\r\n               allow_defined = false\r\n            }\r\n         })\r\n\r\n         assert.is_true(opts.module)\r\n         assert.is_true(opts.unused_secondaries)\r\n         assert.is_false(opts.allow_defined)\r\n      end)\r\n\r\n      it(\"considers opts.std and opts.compat\", function()\r\n         assert.same({baz = 1}, options.normalize({\r\n            {\r\n               std = \"none\"\r\n            }, {\r\n               globals = {\"foo\", \"bar\"},\r\n               compat = true\r\n            }, {\r\n               new_globals = {\"baz\"},\r\n               compat = false\r\n            }\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"allows compound std unions\", function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"lua51+lua52+lua53+luajit\"\r\n            },\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"allows std addition\", function()\r\n         assert.same(options.normalize({\r\n            {\r\n               std = \"lua52 + busted\"\r\n            },\r\n         }).globals, options.normalize({\r\n            {\r\n               std = \"max\"\r\n            },\r\n            {\r\n               std = \"none\"\r\n            },\r\n            {\r\n               std = \"+lua52+busted\"\r\n            }\r\n         }).globals)\r\n      end)\r\n\r\n      it(\"considers read-only and regular globals\", function()\r\n         local opts = options.normalize({\r\n            {\r\n               std = \"lua52\",\r\n               globals = {\"foo\", \"bar\"},\r\n               read_globals = {\"baz\"}\r\n            }, {\r\n               new_read_globals = {\"quux\"},\r\n            }\r\n         })\r\n         local globals = opts.globals\r\n         local read_globals = opts.read_globals\r\n         assert.is_truthy(globals.foo)\r\n         assert.is_truthy(globals.bar)\r\n         assert.is_nil(globals.baz)\r\n         assert.is_truthy(globals.quux)\r\n         assert.is_truthy(read_globals.quux)\r\n         assert.is_truthy(read_globals.string)\r\n         assert.is_nil(read_globals._ENV)\r\n         assert.is_truthy(globals.string)\r\n         assert.is_truthy(globals._ENV)\r\n      end)\r\n\r\n      it(\"considers macros, ignore, enable and only\", function()\r\n         assert.same({\r\n               {{{nil, \"^foo$\"}}, \"only\"},\r\n               {{{\"^21[23]\", nil}}, \"disable\"},\r\n               {{{\"^[23]\", nil}}, \"enable\"},\r\n               {{{\"^511\", nil}}, \"enable\"},\r\n               {{{\"^412\", nil}, {\"1$\", \"^bar$\"}}, \"disable\"}\r\n            }, options.normalize({\r\n            {\r\n               unused = false\r\n            }, {\r\n               ignore = {\"412\", \"1$/bar\"}\r\n            }, {\r\n               unused = true,\r\n               unused_args = false,\r\n               enable = {\"511\"}\r\n            }, {\r\n               only = {\"foo\"}\r\n            }\r\n         }).rules)\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "",
    "type": "function container"
  }, {
    "id": 82,
    "text": "normalize",
    "type": "global function"
  }, {
    "id": 83,
    "text": "validate",
    "type": "global function"
  }, {
    "id": 84,
    "text": "is_truthy",
    "type": "global function"
  }, {
    "id": 85,
    "text": "same",
    "type": "global function"
  }, {
    "id": 86,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 87,
    "text": "select",
    "type": "global function"
  }, {
    "id": 88,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 89,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 90,
    "text": "require",
    "type": "global function"
  }, {
    "id": 91,
    "text": "is_false",
    "type": "global function"
  }, {
    "id": 92,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 93,
    "text": "is_true",
    "type": "global function"
  }, {
    "id": 94,
    "text": "it",
    "type": "global function"
  }, {
    "id": 95,
    "text": "",
    "type": "variable container"
  }, {
    "id": 96,
    "text": "",
    "type": "require container"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  } ]
}