{
  "_filename": "config_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/config_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 4,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 23
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 25
  }, {
    "from": 32,
    "label": "has",
    "to": 26
  }, {
    "from": 32,
    "label": "has",
    "to": 27
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 31
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 34
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 24
  }, {
    "from": 41,
    "label": "has",
    "to": 25
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 31
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 25
  }, {
    "from": 48,
    "label": "has",
    "to": 43
  }, {
    "from": 48,
    "label": "has",
    "to": 44
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 34
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 53
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 57
  }, {
    "from": 64,
    "label": "has",
    "to": 58
  }, {
    "from": 64,
    "label": "has",
    "to": 59
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 58
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 53
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 67
  }, {
    "from": 73,
    "label": "has",
    "to": 58
  }, {
    "from": 73,
    "label": "has",
    "to": 68
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 58
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 53
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 76
  }, {
    "from": 82,
    "label": "has",
    "to": 58
  }, {
    "from": 82,
    "label": "has",
    "to": 77
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 58
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 53
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 85
  }, {
    "from": 91,
    "label": "has",
    "to": 58
  }, {
    "from": 91,
    "label": "has",
    "to": 86
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 20
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 30
  }, {
    "from": 95,
    "label": "has",
    "to": 31
  }, {
    "from": 95,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 23
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 25
  }, {
    "from": 32,
    "label": "has",
    "to": 26
  }, {
    "from": 32,
    "label": "has",
    "to": 27
  }, {
    "from": 95,
    "label": "has",
    "to": 33
  }, {
    "from": 95,
    "label": "has",
    "to": 34
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 37
  }, {
    "from": 96,
    "label": "has",
    "to": 31
  }, {
    "from": 96,
    "label": "has",
    "to": 38
  }, {
    "from": 96,
    "label": "has",
    "to": 39
  }, {
    "from": 96,
    "label": "has",
    "to": 34
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 47
  }, {
    "from": 97,
    "label": "has",
    "to": 31
  }, {
    "from": 97,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 25
  }, {
    "from": 48,
    "label": "has",
    "to": 43
  }, {
    "from": 48,
    "label": "has",
    "to": 44
  }, {
    "from": 97,
    "label": "has",
    "to": 49
  }, {
    "from": 97,
    "label": "has",
    "to": 34
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 52
  }, {
    "from": 98,
    "label": "has",
    "to": 53
  }, {
    "from": 98,
    "label": "has",
    "to": 54
  }, {
    "from": 93,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 62
  }, {
    "from": 99,
    "label": "has",
    "to": 53
  }, {
    "from": 99,
    "label": "has",
    "to": 63
  }, {
    "from": 99,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 57
  }, {
    "from": 64,
    "label": "has",
    "to": 58
  }, {
    "from": 64,
    "label": "has",
    "to": 59
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 71
  }, {
    "from": 100,
    "label": "has",
    "to": 53
  }, {
    "from": 100,
    "label": "has",
    "to": 72
  }, {
    "from": 100,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 67
  }, {
    "from": 73,
    "label": "has",
    "to": 58
  }, {
    "from": 73,
    "label": "has",
    "to": 68
  }, {
    "from": 93,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 80
  }, {
    "from": 101,
    "label": "has",
    "to": 53
  }, {
    "from": 101,
    "label": "has",
    "to": 81
  }, {
    "from": 101,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 76
  }, {
    "from": 82,
    "label": "has",
    "to": 58
  }, {
    "from": 82,
    "label": "has",
    "to": 77
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 89
  }, {
    "from": 102,
    "label": "has",
    "to": 53
  }, {
    "from": 102,
    "label": "has",
    "to": 90
  }, {
    "from": 102,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 85
  }, {
    "from": 91,
    "label": "has",
    "to": 58
  }, {
    "from": 91,
    "label": "has",
    "to": 86
  }, {
    "from": 93,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "calls",
    "to": 111
  }, {
    "from": 104,
    "label": "calls",
    "to": 111
  }, {
    "from": 104,
    "label": "calls",
    "to": 111
  }, {
    "from": 104,
    "label": "calls",
    "to": 111
  }, {
    "from": 104,
    "label": "calls",
    "to": 111
  }, {
    "from": 104,
    "label": "calls",
    "to": 111
  }, {
    "from": 104,
    "label": "calls",
    "to": 122
  }, {
    "from": 104,
    "label": "calls",
    "to": 122
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 104,
    "label": "calls",
    "to": 119
  }, {
    "from": 4,
    "label": "calls",
    "to": 17
  }, {
    "from": 4,
    "label": "calls",
    "to": 116
  }, {
    "from": 4,
    "label": "calls",
    "to": 112
  }, {
    "from": 104,
    "label": "calls",
    "to": 4
  }, {
    "from": 104,
    "label": "calls",
    "to": 4
  }, {
    "from": 104,
    "label": "calls",
    "to": 4
  }, {
    "from": 104,
    "label": "calls",
    "to": 4
  }, {
    "from": 104,
    "label": "calls",
    "to": 4
  }, {
    "from": 104,
    "label": "calls",
    "to": 4
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 123
  }, {
    "from": 104,
    "label": "calls",
    "to": 117
  }, {
    "from": 104,
    "label": "calls",
    "to": 113
  }, {
    "from": 104,
    "label": "calls",
    "to": 113
  }, {
    "from": 4,
    "label": "calls",
    "to": 106
  }, {
    "from": 4,
    "label": "calls",
    "to": 106
  }, {
    "from": 104,
    "label": "calls",
    "to": 109
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 110
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 114
  }, {
    "from": 104,
    "label": "calls",
    "to": 107
  }, {
    "from": 104,
    "label": "calls",
    "to": 107
  }, {
    "from": 104,
    "label": "calls",
    "to": 107
  }, {
    "from": 104,
    "label": "calls",
    "to": 107
  }, {
    "from": 104,
    "label": "calls",
    "to": 107
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 115
  }, {
    "from": 104,
    "label": "calls",
    "to": 108
  }, {
    "from": 104,
    "label": "calls",
    "to": 108
  }, {
    "from": 104,
    "label": "calls",
    "to": 108
  }, {
    "from": 104,
    "label": "calls",
    "to": 108
  }, {
    "from": 104,
    "label": "calls",
    "to": 108
  }, {
    "from": 4,
    "label": "calls",
    "to": 124
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 105
  }, {
    "from": 104,
    "label": "calls",
    "to": 120
  }, {
    "from": 104,
    "label": "calls",
    "to": 120
  }, {
    "from": 104,
    "label": "calls",
    "to": 121
  }, {
    "from": 104,
    "label": "calls",
    "to": 118
  }, {
    "from": 104,
    "label": "calls",
    "to": 118
  }, {
    "from": 104,
    "label": "calls",
    "to": 118
  }, {
    "from": 104,
    "label": "calls",
    "to": 118
  }, {
    "from": 104,
    "label": "calls",
    "to": 118
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 104,
    "label": "declares",
    "to": 4
  }, {
    "from": 104,
    "label": "declares",
    "to": 17
  }, {
    "from": 104,
    "label": "declares",
    "to": 19
  }, {
    "from": 104,
    "label": "declares",
    "to": 22
  }, {
    "from": 104,
    "label": "declares",
    "to": 29
  }, {
    "from": 104,
    "label": "declares",
    "to": 36
  }, {
    "from": 104,
    "label": "declares",
    "to": 41
  }, {
    "from": 104,
    "label": "declares",
    "to": 46
  }, {
    "from": 104,
    "label": "declares",
    "to": 51
  }, {
    "from": 104,
    "label": "declares",
    "to": 56
  }, {
    "from": 104,
    "label": "declares",
    "to": 61
  }, {
    "from": 104,
    "label": "declares",
    "to": 66
  }, {
    "from": 104,
    "label": "declares",
    "to": 70
  }, {
    "from": 104,
    "label": "declares",
    "to": 75
  }, {
    "from": 104,
    "label": "declares",
    "to": 79
  }, {
    "from": 104,
    "label": "declares",
    "to": 84
  }, {
    "from": 104,
    "label": "declares",
    "to": 88
  }, {
    "from": 104,
    "label": "declares",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 125
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 125,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 125,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 126,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "requires",
    "to": 2
  }, {
    "from": 126,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "requires",
    "to": 3
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 19
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 96,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 98,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 88
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "config_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "config",
    "type": "module"
  }, {
    "id": 3,
    "text": "fs",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function nest(dir, func)\r\n   if not fs.has_lfs then\r\n      pending(\"uses lfs\")\r\n   end\r\n\r\n   local backed = false\r\n\r\n   local function back()\r\n      if not backed then\r\n         fs.lfs.chdir(cur_dir)\r\n         backed = true\r\n      end\r\n   end\r\n\r\n   finally(back)\r\n   fs.lfs.chdir(dir)\r\n   func()\r\n   back()\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if not fs.has_lfs then\r\n      pending(\"uses lfs\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "pending(\"uses lfs\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local backed = false",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local function back()\r\n      if not backed then\r\n         fs.lfs.chdir(cur_dir)\r\n         backed = true\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 9,
    "text": "if not backed then\r\n         fs.lfs.chdir(cur_dir)\r\n         backed = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "fs.lfs.chdir(cur_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "backed = true",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "finally(back)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "fs.lfs.chdir(dir)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "func()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "back()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function back()\r\n      if not backed then\r\n         fs.lfs.chdir(cur_dir)\r\n         backed = true\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n      assert.is_string(config.default_path)\r\n   end",
    "type": "function"
  }, {
    "id": 20,
    "text": "assert.is_string(config.default_path)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function()\r\n         local nested_conf = config.load_config()\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(config.get_options(conf, P\"spec/foo.lua\"), config.get_options(nested_conf, P\"../foo.lua\"))\r\n         assert.equal(P\"../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end",
    "type": "function"
  }, {
    "id": 23,
    "text": "local nested_conf = config.load_config()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "assert.is_table(nested_conf)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert.same(config.get_options(conf, P\"spec/foo.lua\"), config.get_options(nested_conf, P\"../foo.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert.equal(P\"../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n      local conf = config.load_config()\r\n      assert.is_table(conf)\r\n\r\n      nest(\"spec/configs\", function()\r\n         local nested_conf = config.load_config()\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(config.get_options(conf, P\"spec/foo.lua\"), config.get_options(nested_conf, P\"../foo.lua\"))\r\n         assert.equal(P\"../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end)\r\n\r\n      assert.not_same(config.get_options(conf, P\"spec/foo_spec.lua\"), config.get_options(conf, \"foo_spec.lua\"))\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end",
    "type": "function"
  }, {
    "id": 30,
    "text": "local conf = config.load_config()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "assert.is_table(conf)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "nest(\"spec/configs\", function()\r\n         local nested_conf = config.load_config()\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(config.get_options(conf, P\"spec/foo.lua\"), config.get_options(nested_conf, P\"../foo.lua\"))\r\n         assert.equal(P\"../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert.not_same(config.get_options(conf, P\"spec/foo_spec.lua\"), config.get_options(conf, \"foo_spec.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function()\r\n      local conf = config.empty_config\r\n      assert.is_table(conf)\r\n      assert.same({}, config.get_top_options(conf))\r\n      assert.same({}, config.get_options(conf, \"bar.lua\"))\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end",
    "type": "function"
  }, {
    "id": 37,
    "text": "local conf = config.empty_config",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "assert.same({}, config.get_top_options(conf))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert.same({}, config.get_options(conf, \"bar.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function()\r\n         local nested_conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(\r\n            config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n            config.get_options(nested_conf, P\"../../samples/bad_code.lua\")\r\n         )\r\n         assert.equal(P\"../../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end",
    "type": "function"
  }, {
    "id": 42,
    "text": "local nested_conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "assert.same(\r\n            config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n            config.get_options(nested_conf, P\"../../samples/bad_code.lua\")\r\n         )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert.equal(P\"../../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function()\r\n      local conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")\r\n      assert.is_table(conf)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(\r\n            config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n            config.get_options(nested_conf, P\"../../samples/bad_code.lua\")\r\n         )\r\n         assert.equal(P\"../../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end)\r\n\r\n      assert.not_same(\r\n         config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n         config.get_options(conf, P\"spec/samples/unused_code.lua\")\r\n      )\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end",
    "type": "function"
  }, {
    "id": 47,
    "text": "local conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "nest(\"spec/configs/project\", function()\r\n         local nested_conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(\r\n            config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n            config.get_options(nested_conf, P\"../../samples/bad_code.lua\")\r\n         )\r\n         assert.equal(P\"../../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "assert.not_same(\r\n         config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n         config.get_options(conf, P\"spec/samples/unused_code.lua\")\r\n      )",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n      local conf, err = config.load_config(P\"spec/configs/config_404.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't find configuration file \"..P\"spec/configs/config_404.luacheckrc\", err)\r\n   end",
    "type": "function"
  }, {
    "id": 52,
    "text": "local conf, err = config.load_config(P\"spec/configs/config_404.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "assert.is_nil(conf)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert.equal(\"Couldn't find configuration file \"..P\"spec/configs/config_404.luacheckrc\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.matches(\"Couldn't load configuration from \"..P\"../../../spec/configs/bad_config.luacheckrc\"..\r\n            \": syntax error %(line 2: .*%)\", nested_err)\r\n      end",
    "type": "function"
  }, {
    "id": 57,
    "text": "local nested_conf, nested_err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "assert.is_nil(nested_conf)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert.matches(\"Couldn't load configuration from \"..P\"../../../spec/configs/bad_config.luacheckrc\"..\r\n            \": syntax error %(line 2: .*%)\", nested_err)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function()\r\n      local conf, err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.matches(\"Couldn't load configuration from \"..P\"spec/configs/bad_config.luacheckrc\"..\r\n         \": syntax error %(line 2: .*%)\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.matches(\"Couldn't load configuration from \"..P\"../../../spec/configs/bad_config.luacheckrc\"..\r\n            \": syntax error %(line 2: .*%)\", nested_err)\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 62,
    "text": "local conf, err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "assert.matches(\"Couldn't load configuration from \"..P\"spec/configs/bad_config.luacheckrc\"..\r\n         \": syntax error %(line 2: .*%)\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.matches(\"Couldn't load configuration from \"..P\"../../../spec/configs/bad_config.luacheckrc\"..\r\n            \": syntax error %(line 2: .*%)\", nested_err)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/runtime_bad_config.luacheckrc\"..\r\n            \": runtime error (line 1: attempt to call a nil value)\", nested_err)\r\n      end",
    "type": "function"
  }, {
    "id": 67,
    "text": "local nested_conf, nested_err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/runtime_bad_config.luacheckrc\"..\r\n            \": runtime error (line 1: attempt to call a nil value)\", nested_err)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n      local conf, err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/runtime_bad_config.luacheckrc\"..\r\n         \": runtime error (line 1: attempt to call a nil value)\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/runtime_bad_config.luacheckrc\"..\r\n            \": runtime error (line 1: attempt to call a nil value)\", nested_err)\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 71,
    "text": "local conf, err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/runtime_bad_config.luacheckrc\"..\r\n         \": runtime error (line 1: attempt to call a nil value)\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/runtime_bad_config.luacheckrc\"..\r\n            \": runtime error (line 1: attempt to call a nil value)\", nested_err)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_config.luacheckrc\"..\r\n            \": invalid value of option 'ignore'\", nested_err)\r\n      end",
    "type": "function"
  }, {
    "id": 76,
    "text": "local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_config.luacheckrc\"..\r\n            \": invalid value of option 'ignore'\", nested_err)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function()\r\n      local conf, err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/invalid_config.luacheckrc\"..\r\n         \": invalid value of option 'ignore'\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_config.luacheckrc\"..\r\n            \": invalid value of option 'ignore'\", nested_err)\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 80,
    "text": "local conf, err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/invalid_config.luacheckrc\"..\r\n         \": invalid value of option 'ignore'\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_config.luacheckrc\"..\r\n            \": invalid value of option 'ignore'\", nested_err)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_override_config.luacheckrc\"..\r\n            \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", nested_err)\r\n      end",
    "type": "function"
  }, {
    "id": 85,
    "text": "local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_override_config.luacheckrc\"..\r\n            \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", nested_err)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function()\r\n      local conf, err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/invalid_override_config.luacheckrc\"..\r\n         \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_override_config.luacheckrc\"..\r\n            \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", nested_err)\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 89,
    "text": "local conf, err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/invalid_override_config.luacheckrc\"..\r\n         \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_override_config.luacheckrc\"..\r\n            \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", nested_err)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function()\r\n   it(\"has default path\", function()\r\n      assert.is_string(config.default_path)\r\n   end)\r\n\r\n   it(\"loads default config\", function()\r\n      local conf = config.load_config()\r\n      assert.is_table(conf)\r\n\r\n      nest(\"spec/configs\", function()\r\n         local nested_conf = config.load_config()\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(config.get_options(conf, P\"spec/foo.lua\"), config.get_options(nested_conf, P\"../foo.lua\"))\r\n         assert.equal(P\"../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end)\r\n\r\n      assert.not_same(config.get_options(conf, P\"spec/foo_spec.lua\"), config.get_options(conf, \"foo_spec.lua\"))\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end)\r\n\r\n   it(\"works with empty config\", function()\r\n      local conf = config.empty_config\r\n      assert.is_table(conf)\r\n      assert.same({}, config.get_top_options(conf))\r\n      assert.same({}, config.get_options(conf, \"bar.lua\"))\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end)\r\n\r\n   it(\"loads config from path\", function()\r\n      local conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")\r\n      assert.is_table(conf)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(\r\n            config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n            config.get_options(nested_conf, P\"../../samples/bad_code.lua\")\r\n         )\r\n         assert.equal(P\"../../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end)\r\n\r\n      assert.not_same(\r\n         config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n         config.get_options(conf, P\"spec/samples/unused_code.lua\")\r\n      )\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end)\r\n\r\n   it(\"returns nil, error on missing config\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/config_404.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't find configuration file \"..P\"spec/configs/config_404.luacheckrc\", err)\r\n   end)\r\n\r\n   it(\"returns nil, error on config with bad syntax\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.matches(\"Couldn't load configuration from \"..P\"spec/configs/bad_config.luacheckrc\"..\r\n         \": syntax error %(line 2: .*%)\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.matches(\"Couldn't load configuration from \"..P\"../../../spec/configs/bad_config.luacheckrc\"..\r\n            \": syntax error %(line 2: .*%)\", nested_err)\r\n      end)\r\n   end)\r\n\r\n   it(\"returns nil, error on config with runtime issues\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/runtime_bad_config.luacheckrc\"..\r\n         \": runtime error (line 1: attempt to call a nil value)\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/runtime_bad_config.luacheckrc\"..\r\n            \": runtime error (line 1: attempt to call a nil value)\", nested_err)\r\n      end)\r\n   end)\r\n\r\n   it(\"returns nil, error on invalid config\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/invalid_config.luacheckrc\"..\r\n         \": invalid value of option 'ignore'\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_config.luacheckrc\"..\r\n            \": invalid value of option 'ignore'\", nested_err)\r\n      end)\r\n   end)\r\n\r\n   it(\"returns nil, error on config with invalid override\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/invalid_override_config.luacheckrc\"..\r\n         \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_override_config.luacheckrc\"..\r\n            \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", nested_err)\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "it(\"has default path\", function()\r\n      assert.is_string(config.default_path)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "it(\"loads default config\", function()\r\n      local conf = config.load_config()\r\n      assert.is_table(conf)\r\n\r\n      nest(\"spec/configs\", function()\r\n         local nested_conf = config.load_config()\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(config.get_options(conf, P\"spec/foo.lua\"), config.get_options(nested_conf, P\"../foo.lua\"))\r\n         assert.equal(P\"../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end)\r\n\r\n      assert.not_same(config.get_options(conf, P\"spec/foo_spec.lua\"), config.get_options(conf, \"foo_spec.lua\"))\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "it(\"works with empty config\", function()\r\n      local conf = config.empty_config\r\n      assert.is_table(conf)\r\n      assert.same({}, config.get_top_options(conf))\r\n      assert.same({}, config.get_options(conf, \"bar.lua\"))\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "it(\"loads config from path\", function()\r\n      local conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")\r\n      assert.is_table(conf)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf = config.load_config(P\"spec/configs/override_config.luacheckrc\")\r\n         assert.is_table(nested_conf)\r\n         assert.same(config.get_top_options(conf), config.get_top_options(nested_conf))\r\n         assert.same(\r\n            config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n            config.get_options(nested_conf, P\"../../samples/bad_code.lua\")\r\n         )\r\n         assert.equal(P\"../../../bar.lua\", config.relative_path(nested_conf, \"bar.lua\"))\r\n      end)\r\n\r\n      assert.not_same(\r\n         config.get_options(conf, P\"spec/samples/bad_code.lua\"),\r\n         config.get_options(conf, P\"spec/samples/unused_code.lua\")\r\n      )\r\n      assert.equal(\"bar.lua\", config.relative_path(conf, \"bar.lua\"))\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "it(\"returns nil, error on missing config\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/config_404.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't find configuration file \"..P\"spec/configs/config_404.luacheckrc\", err)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "it(\"returns nil, error on config with bad syntax\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.matches(\"Couldn't load configuration from \"..P\"spec/configs/bad_config.luacheckrc\"..\r\n         \": syntax error %(line 2: .*%)\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.matches(\"Couldn't load configuration from \"..P\"../../../spec/configs/bad_config.luacheckrc\"..\r\n            \": syntax error %(line 2: .*%)\", nested_err)\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "it(\"returns nil, error on config with runtime issues\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/runtime_bad_config.luacheckrc\"..\r\n         \": runtime error (line 1: attempt to call a nil value)\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/runtime_bad_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/runtime_bad_config.luacheckrc\"..\r\n            \": runtime error (line 1: attempt to call a nil value)\", nested_err)\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "it(\"returns nil, error on invalid config\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/invalid_config.luacheckrc\"..\r\n         \": invalid value of option 'ignore'\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_config.luacheckrc\"..\r\n            \": invalid value of option 'ignore'\", nested_err)\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "it(\"returns nil, error on config with invalid override\", function()\r\n      local conf, err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")\r\n      assert.is_nil(conf)\r\n      assert.equal(\"Couldn't load configuration from \"..P\"spec/configs/invalid_override_config.luacheckrc\"..\r\n         \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", err)\r\n\r\n      nest(\"spec/configs/project\", function()\r\n         local nested_conf, nested_err = config.load_config(P\"spec/configs/invalid_override_config.luacheckrc\")\r\n         assert.is_nil(nested_conf)\r\n         assert.equal(\"Couldn't load configuration from \"..P\"../../../spec/configs/invalid_override_config.luacheckrc\"..\r\n            \": invalid value of option 'enable' in options for path 'spec/foo.lua'\", nested_err)\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "",
    "type": "function container"
  }, {
    "id": 105,
    "text": "get_options",
    "type": "global function"
  }, {
    "id": 106,
    "text": "lfs.chdir",
    "type": "global function"
  }, {
    "id": 107,
    "text": "get_top_options",
    "type": "global function"
  }, {
    "id": 108,
    "text": "relative_path",
    "type": "global function"
  }, {
    "id": 109,
    "text": "lfs.currentdir",
    "type": "global function"
  }, {
    "id": 110,
    "text": "load_config",
    "type": "global function"
  }, {
    "id": 111,
    "text": "same",
    "type": "global function"
  }, {
    "id": 112,
    "text": "finally",
    "type": "global function"
  }, {
    "id": 113,
    "text": "not_same",
    "type": "global function"
  }, {
    "id": 114,
    "text": "P",
    "type": "global function"
  }, {
    "id": 115,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 116,
    "text": "func",
    "type": "global function"
  }, {
    "id": 117,
    "text": "is_string",
    "type": "global function"
  }, {
    "id": 118,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 119,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 120,
    "text": "require",
    "type": "global function"
  }, {
    "id": 121,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 122,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 123,
    "text": "it",
    "type": "global function"
  }, {
    "id": 124,
    "text": "pending",
    "type": "global function"
  }, {
    "id": 125,
    "text": "",
    "type": "variable container"
  }, {
    "id": 126,
    "text": "",
    "type": "require container"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  } ]
}