{
  "_filename": "linearize_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/luacheck/spec/linearize_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 23
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 14
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 23
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 14
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 28
  }, {
    "from": 37,
    "label": "has",
    "to": 23
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 14
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 44
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 47
  }, {
    "from": 59,
    "label": "has",
    "to": 48
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 51
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 54
  }, {
    "from": 61,
    "label": "has",
    "to": 55
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 64
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 67
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 70
  }, {
    "from": 96,
    "label": "has",
    "to": 71
  }, {
    "from": 96,
    "label": "has",
    "to": 72
  }, {
    "from": 96,
    "label": "has",
    "to": 73
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 76
  }, {
    "from": 97,
    "label": "has",
    "to": 77
  }, {
    "from": 97,
    "label": "has",
    "to": 78
  }, {
    "from": 97,
    "label": "has",
    "to": 79
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 82
  }, {
    "from": 93,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 85
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 88
  }, {
    "from": 93,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 91
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 104
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 107
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 110
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 113
  }, {
    "from": 124,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 116
  }, {
    "from": 124,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 119
  }, {
    "from": 124,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 122
  }, {
    "from": 124,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 44
  }, {
    "from": 134,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 47
  }, {
    "from": 59,
    "label": "has",
    "to": 48
  }, {
    "from": 134,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 51
  }, {
    "from": 134,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 54
  }, {
    "from": 61,
    "label": "has",
    "to": 55
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 64
  }, {
    "from": 135,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 67
  }, {
    "from": 135,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 70
  }, {
    "from": 96,
    "label": "has",
    "to": 71
  }, {
    "from": 96,
    "label": "has",
    "to": 72
  }, {
    "from": 96,
    "label": "has",
    "to": 73
  }, {
    "from": 135,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 76
  }, {
    "from": 97,
    "label": "has",
    "to": 77
  }, {
    "from": 97,
    "label": "has",
    "to": 78
  }, {
    "from": 97,
    "label": "has",
    "to": 79
  }, {
    "from": 135,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 82
  }, {
    "from": 135,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 85
  }, {
    "from": 135,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 88
  }, {
    "from": 135,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 91
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 104
  }, {
    "from": 136,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 107
  }, {
    "from": 136,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 110
  }, {
    "from": 136,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 113
  }, {
    "from": 136,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 116
  }, {
    "from": 136,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 119
  }, {
    "from": 136,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 122
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 139
  }, {
    "from": 32,
    "label": "calls",
    "to": 155
  }, {
    "from": 11,
    "label": "calls",
    "to": 152
  }, {
    "from": 21,
    "label": "calls",
    "to": 140
  }, {
    "from": 27,
    "label": "calls",
    "to": 140
  }, {
    "from": 32,
    "label": "calls",
    "to": 140
  }, {
    "from": 16,
    "label": "calls",
    "to": 156
  }, {
    "from": 32,
    "label": "calls",
    "to": 148
  }, {
    "from": 27,
    "label": "calls",
    "to": 16
  }, {
    "from": 37,
    "label": "calls",
    "to": 16
  }, {
    "from": 138,
    "label": "calls",
    "to": 16
  }, {
    "from": 138,
    "label": "calls",
    "to": 16
  }, {
    "from": 138,
    "label": "calls",
    "to": 16
  }, {
    "from": 138,
    "label": "calls",
    "to": 16
  }, {
    "from": 138,
    "label": "calls",
    "to": 16
  }, {
    "from": 138,
    "label": "calls",
    "to": 16
  }, {
    "from": 21,
    "label": "calls",
    "to": 146
  }, {
    "from": 27,
    "label": "calls",
    "to": 146
  }, {
    "from": 32,
    "label": "calls",
    "to": 146
  }, {
    "from": 37,
    "label": "calls",
    "to": 146
  }, {
    "from": 138,
    "label": "calls",
    "to": 37
  }, {
    "from": 138,
    "label": "calls",
    "to": 37
  }, {
    "from": 138,
    "label": "calls",
    "to": 37
  }, {
    "from": 138,
    "label": "calls",
    "to": 37
  }, {
    "from": 138,
    "label": "calls",
    "to": 37
  }, {
    "from": 138,
    "label": "calls",
    "to": 37
  }, {
    "from": 138,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 21
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 138,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 144
  }, {
    "from": 32,
    "label": "calls",
    "to": 144
  }, {
    "from": 37,
    "label": "calls",
    "to": 144
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 138,
    "label": "calls",
    "to": 150
  }, {
    "from": 11,
    "label": "calls",
    "to": 153
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 138,
    "label": "calls",
    "to": 157
  }, {
    "from": 16,
    "label": "calls",
    "to": 142
  }, {
    "from": 37,
    "label": "calls",
    "to": 32
  }, {
    "from": 21,
    "label": "calls",
    "to": 141
  }, {
    "from": 27,
    "label": "calls",
    "to": 141
  }, {
    "from": 37,
    "label": "calls",
    "to": 141
  }, {
    "from": 11,
    "label": "calls",
    "to": 143
  }, {
    "from": 16,
    "label": "calls",
    "to": 145
  }, {
    "from": 138,
    "label": "calls",
    "to": 151
  }, {
    "from": 138,
    "label": "calls",
    "to": 151
  }, {
    "from": 138,
    "label": "calls",
    "to": 151
  }, {
    "from": 138,
    "label": "calls",
    "to": 154
  }, {
    "from": 138,
    "label": "calls",
    "to": 154
  }, {
    "from": 138,
    "label": "calls",
    "to": 154
  }, {
    "from": 138,
    "label": "calls",
    "to": 154
  }, {
    "from": 37,
    "label": "calls",
    "to": 149
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 138,
    "label": "declares",
    "to": 5
  }, {
    "from": 138,
    "label": "declares",
    "to": 6
  }, {
    "from": 138,
    "label": "declares",
    "to": 7
  }, {
    "from": 138,
    "label": "declares",
    "to": 8
  }, {
    "from": 138,
    "label": "declares",
    "to": 9
  }, {
    "from": 138,
    "label": "declares",
    "to": 10
  }, {
    "from": 138,
    "label": "declares",
    "to": 11
  }, {
    "from": 138,
    "label": "declares",
    "to": 16
  }, {
    "from": 138,
    "label": "declares",
    "to": 21
  }, {
    "from": 138,
    "label": "declares",
    "to": 27
  }, {
    "from": 138,
    "label": "declares",
    "to": 32
  }, {
    "from": 138,
    "label": "declares",
    "to": 37
  }, {
    "from": 138,
    "label": "declares",
    "to": 43
  }, {
    "from": 138,
    "label": "declares",
    "to": 46
  }, {
    "from": 138,
    "label": "declares",
    "to": 50
  }, {
    "from": 138,
    "label": "declares",
    "to": 53
  }, {
    "from": 138,
    "label": "declares",
    "to": 57
  }, {
    "from": 138,
    "label": "declares",
    "to": 63
  }, {
    "from": 138,
    "label": "declares",
    "to": 66
  }, {
    "from": 138,
    "label": "declares",
    "to": 69
  }, {
    "from": 138,
    "label": "declares",
    "to": 75
  }, {
    "from": 138,
    "label": "declares",
    "to": 81
  }, {
    "from": 138,
    "label": "declares",
    "to": 84
  }, {
    "from": 138,
    "label": "declares",
    "to": 87
  }, {
    "from": 138,
    "label": "declares",
    "to": 90
  }, {
    "from": 138,
    "label": "declares",
    "to": 93
  }, {
    "from": 138,
    "label": "declares",
    "to": 103
  }, {
    "from": 138,
    "label": "declares",
    "to": 106
  }, {
    "from": 138,
    "label": "declares",
    "to": 109
  }, {
    "from": 138,
    "label": "declares",
    "to": 112
  }, {
    "from": 138,
    "label": "declares",
    "to": 115
  }, {
    "from": 138,
    "label": "declares",
    "to": 118
  }, {
    "from": 138,
    "label": "declares",
    "to": 121
  }, {
    "from": 138,
    "label": "declares",
    "to": 124
  }, {
    "from": 138,
    "label": "declares",
    "to": 133
  }, {
    "from": 1,
    "label": "contains",
    "to": 158
  }, {
    "from": 1,
    "label": "contains",
    "to": 159
  }, {
    "from": 158,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 159,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "requires",
    "to": 2
  }, {
    "from": 159,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 3
  }, {
    "from": 159,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "requires",
    "to": 4
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 96,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 98,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 103
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 106
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 109
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 121
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 57
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 103
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 106
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 109
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 112
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 121
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 124
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "linearize_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "linearize",
    "type": "module"
  }, {
    "id": 3,
    "text": "parser",
    "type": "module"
  }, {
    "id": 4,
    "text": "utils",
    "type": "module"
  }, {
    "id": 5,
    "text": "function ChState.__init() end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function ChState.warn_redefined() end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function ChState.warn_global() end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function ChState.warn_unused_label() end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function ChState.warn_unbalanced() end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function ChState.warn_empty_block() end",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function get_line_(src)\r\n   local ast = parser(src)\r\n   local chstate = ChState()\r\n   return linearize(chstate, ast)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local ast = parser(src)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local chstate = ChState()",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function get_line(src)\r\n   local ok, res = pcall(get_line_, src)\r\n\r\n   if ok or type(res) == \"table\" then\r\n      return res\r\n   else\r\n      error(res, 0)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local ok, res = pcall(get_line_, src)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if ok or type(res) == \"table\" then\r\n      return res\r\n   else\r\n      error(res, 0)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "error(res, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function item_to_string(item)\r\n   if item.tag == \"Jump\" or item.tag == \"Cjump\" then\r\n      return item.tag .. \" -> \" .. tostring(item.to)\r\n   elseif item.tag == \"Eval\" then\r\n      return \"Eval \" .. item.expr.tag\r\n   elseif item.tag == \"Local\" then\r\n      local buf = {}\r\n\r\n      for _, node in ipairs(item.lhs) do\r\n         table.insert(buf, (\"%s (%d..%d)\"):format(node.var.name, node.var.scope_start, node.var.scope_end))\r\n      end\r\n\r\n      return \"Local \" .. table.concat(buf, \", \")\r\n   else\r\n      return item.tag\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "if item.tag == \"Jump\" or item.tag == \"Cjump\" then\r\n      return item.tag .. \" -> \" .. tostring(item.to)\r\n   elseif item.tag == \"Eval\" then\r\n      return \"Eval \" .. item.expr.tag\r\n   elseif item.tag == \"Local\" then\r\n      local buf = {}\r\n\r\n      for _, node in ipairs(item.lhs) do\r\n         table.insert(buf, (\"%s (%d..%d)\"):format(node.var.name, node.var.scope_start, node.var.scope_end))\r\n      end\r\n\r\n      return \"Local \" .. table.concat(buf, \", \")\r\n   else\r\n      return item.tag\r\n   end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local buf = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for _, node in ipairs(item.lhs) do\r\n         table.insert(buf, (\"%s (%d..%d)\"):format(node.var.name, node.var.scope_start, node.var.scope_end))\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "table.insert(buf, (\"%s (%d..%d)\"):format(node.var.name, node.var.scope_start, node.var.scope_end))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function get_line_as_string(src)\r\n   local line = get_line(src)\r\n   local buf = {}\r\n\r\n   for i, item in ipairs(line.items) do\r\n      buf[i] = tostring(i) .. \": \" .. item_to_string(item)\r\n   end\r\n\r\n   return table.concat(buf, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local line = get_line(src)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "for i, item in ipairs(line.items) do\r\n      buf[i] = tostring(i) .. \": \" .. item_to_string(item)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "buf[i] = tostring(i) .. \": \" .. item_to_string(item)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function value_info_to_string(item)\r\n   local buf = {}\r\n\r\n   for var, value in pairs(item.set_variables) do\r\n      table.insert(buf, (\"%s (%s / %s%s%s%s)\"):format(\r\n         var.name, var.type, value.type,\r\n         value.empty and \", empty\" or (value.initial and \", initial\" or \"\"),\r\n         value.secondaries and (\", \" .. tostring(#value.secondaries) .. \" secondaries\") or \"\",\r\n         value.secondaries and value.secondaries.used and \", used\" or \"\"))\r\n   end\r\n\r\n   table.sort(buf)\r\n   return item.tag .. \": \" .. table.concat(buf, \", \")\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "for var, value in pairs(item.set_variables) do\r\n      table.insert(buf, (\"%s (%s / %s%s%s%s)\"):format(\r\n         var.name, var.type, value.type,\r\n         value.empty and \", empty\" or (value.initial and \", initial\" or \"\"),\r\n         value.secondaries and (\", \" .. tostring(#value.secondaries) .. \" secondaries\") or \"\",\r\n         value.secondaries and value.secondaries.used and \", used\" or \"\"))\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "table.insert(buf, (\"%s (%s / %s%s%s%s)\"):format(\r\n         var.name, var.type, value.type,\r\n         value.empty and \", empty\" or (value.initial and \", initial\" or \"\"),\r\n         value.secondaries and (\", \" .. tostring(#value.secondaries) .. \" secondaries\") or \"\",\r\n         value.secondaries and value.secondaries.used and \", used\" or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "table.sort(buf)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function get_value_info_as_string(src)\r\n   local line = get_line(src)\r\n   local buf = {}\r\n\r\n   for _, item in ipairs(line.items) do\r\n      if item.tag == \"Local\" or item.tag == \"Set\" then\r\n         assert.is_table(item.set_variables)\r\n         table.insert(buf, value_info_to_string(item))\r\n      end\r\n   end\r\n\r\n   return table.concat(buf, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "for _, item in ipairs(line.items) do\r\n      if item.tag == \"Local\" or item.tag == \"Set\" then\r\n         assert.is_table(item.set_variables)\r\n         table.insert(buf, value_info_to_string(item))\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "if item.tag == \"Local\" or item.tag == \"Set\" then\r\n         assert.is_table(item.set_variables)\r\n         table.insert(buf, value_info_to_string(item))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "assert.is_table(item.set_variables)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "table.insert(buf, value_info_to_string(item))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()\r\n         assert.same({line = 1, column = 1, end_column = 4, msg = \"no visible label 'fail'\"},\r\n            get_line(\"goto fail\"))\r\n      end",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert.same({line = 1, column = 1, end_column = 4, msg = \"no visible label 'fail'\"},\r\n            get_line(\"goto fail\"))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function()\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"break\"))\r\n         assert.same({line = 1, column = 28, end_column = 32, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"while true do function f() break end end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 47,
    "text": "assert.same({line = 1, column = 1, end_column = 5, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"break\"))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert.same({line = 1, column = 28, end_column = 32, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"while true do function f() break end end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function()\r\n         assert.same({line = 2, column = 1, end_column = 8, msg = \"label 'fail' already defined on line 1\"},\r\n            get_line(\"::fail::\\n::fail::\"))\r\n      end",
    "type": "function"
  }, {
    "id": 51,
    "text": "assert.same({line = 2, column = 1, end_column = 8, msg = \"label 'fail' already defined on line 1\"},\r\n            get_line(\"::fail::\\n::fail::\"))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f() return ... end\"))\r\n         assert.same({line = 1, column = 42, end_column = 44, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f(...) return function() return ... end end\"))\r\n      end",
    "type": "function"
  }, {
    "id": 54,
    "text": "assert.same({line = 1, column = 21, end_column = 23, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f() return ... end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert.same({line = 1, column = 42, end_column = 44, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f(...) return function() return ... end end\"))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function()\r\n      it(\"detects gotos without labels\", function()\r\n         assert.same({line = 1, column = 1, end_column = 4, msg = \"no visible label 'fail'\"},\r\n            get_line(\"goto fail\"))\r\n      end)\r\n\r\n      it(\"detects break outside loops\", function()\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"break\"))\r\n         assert.same({line = 1, column = 28, end_column = 32, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"while true do function f() break end end\"))\r\n      end)\r\n\r\n      it(\"detects duplicate labels\", function()\r\n         assert.same({line = 2, column = 1, end_column = 8, msg = \"label 'fail' already defined on line 1\"},\r\n            get_line(\"::fail::\\n::fail::\"))\r\n      end)\r\n\r\n      it(\"detects varargs outside vararg functions\", function()\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f() return ... end\"))\r\n         assert.same({line = 1, column = 42, end_column = 44, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f(...) return function() return ... end end\"))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 58,
    "text": "it(\"detects gotos without labels\", function()\r\n         assert.same({line = 1, column = 1, end_column = 4, msg = \"no visible label 'fail'\"},\r\n            get_line(\"goto fail\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "it(\"detects break outside loops\", function()\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"break\"))\r\n         assert.same({line = 1, column = 28, end_column = 32, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"while true do function f() break end end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "it(\"detects duplicate labels\", function()\r\n         assert.same({line = 2, column = 1, end_column = 8, msg = \"label 'fail' already defined on line 1\"},\r\n            get_line(\"::fail::\\n::fail::\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "it(\"detects varargs outside vararg functions\", function()\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f() return ... end\"))\r\n         assert.same({line = 1, column = 42, end_column = 44, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f(...) return function() return ... end end\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function()\r\n         assert.equal(\"1: Local ... (2..1)\", get_line_as_string(\"\"))\r\n      end",
    "type": "function"
  }, {
    "id": 64,
    "text": "assert.equal(\"1: Local ... (2..1)\", get_line_as_string(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Noop\r\n4: Eval Call]], get_line_as_string([[\r\ndo end\r\ndo print(foo) end]]))\r\n      end",
    "type": "function"
  }, {
    "id": 67,
    "text": "assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Noop\r\n4: Eval Call]], get_line_as_string([[\r\ndo end\r\ndo print(foo) end]]))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function()\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Id\r\n4: Cjump -> 9\r\n5: Local s (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 3]], get_line_as_string([[\r\nwhile cond do\r\n   local s = io.read()\r\n   print(s)\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Local s (4..5)\r\n4: Eval Call\r\n5: Eval Id\r\n6: Cjump -> 3]], get_line_as_string([[\r\nrepeat\r\n   local s = io.read()\r\n   print(s)\r\nuntil cond]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..9)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Op\r\n5: Cjump -> 10\r\n6: Local i (7..7)\r\n7: Eval Call\r\n8: Noop\r\n9: Jump -> 5]], get_line_as_string([[\r\nfor i = 1, #t do\r\n   print(t[i])\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 9\r\n5: Local k (6..6), v (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 4]], get_line_as_string([[\r\nfor k, v in pairs(t) do\r\n   print(k, v)\r\nend]]))\r\n      end",
    "type": "function"
  }, {
    "id": 70,
    "text": "assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Id\r\n4: Cjump -> 9\r\n5: Local s (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 3]], get_line_as_string([[\r\nwhile cond do\r\n   local s = io.read()\r\n   print(s)\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Local s (4..5)\r\n4: Eval Call\r\n5: Eval Id\r\n6: Cjump -> 3]], get_line_as_string([[\r\nrepeat\r\n   local s = io.read()\r\n   print(s)\r\nuntil cond]]))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert.equal([[\r\n1: Local ... (2..9)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Op\r\n5: Cjump -> 10\r\n6: Local i (7..7)\r\n7: Eval Call\r\n8: Noop\r\n9: Jump -> 5]], get_line_as_string([[\r\nfor i = 1, #t do\r\n   print(t[i])\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 9\r\n5: Local k (6..6), v (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 4]], get_line_as_string([[\r\nfor k, v in pairs(t) do\r\n   print(k, v)\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function()\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Call\r\n5: Noop\r\n6: Jump -> 3]], get_line_as_string([[\r\nwhile 1 do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..7)\r\n2: Noop\r\n3: Eval False\r\n4: Jump -> 8\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 3]], get_line_as_string([[\r\nwhile false do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval True]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil true]]))\r\n\r\n            assert.equal([[\r\n1: Local ... (2..5)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval Nil\r\n5: Jump -> 3]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil nil]]))\r\n      end",
    "type": "function"
  }, {
    "id": 76,
    "text": "assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Call\r\n5: Noop\r\n6: Jump -> 3]], get_line_as_string([[\r\nwhile 1 do\r\n   foo()\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert.equal([[\r\n1: Local ... (2..7)\r\n2: Noop\r\n3: Eval False\r\n4: Jump -> 8\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 3]], get_line_as_string([[\r\nwhile false do\r\n   foo()\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval True]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil true]]))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert.equal([[\r\n1: Local ... (2..5)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval Nil\r\n5: Jump -> 3]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil nil]]))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function()\r\n         assert.equal([[\r\n1: Local ... (2..24)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 25\r\n5: Eval Call\r\n6: Noop\r\n7: Eval Call\r\n8: Cjump -> 18\r\n9: Eval Call\r\n10: Noop\r\n11: Eval Call\r\n12: Cjump -> 15\r\n13: Jump -> 18\r\n14: Jump -> 15\r\n15: Eval Call\r\n16: Noop\r\n17: Jump -> 7\r\n18: Noop\r\n19: Eval Call\r\n20: Cjump -> 23\r\n21: Jump -> 25\r\n22: Jump -> 23\r\n23: Noop\r\n24: Jump -> 3]], get_line_as_string([[\r\nwhile cond() do\r\n   stmts()\r\n\r\n   while cond() do\r\n      stmts()\r\n\r\n      if cond() then\r\n         break\r\n      end\r\n\r\n      stmts()\r\n   end\r\n\r\n   if cond() then\r\n      break\r\n   end\r\nend]]))\r\n      end",
    "type": "function"
  }, {
    "id": 82,
    "text": "assert.equal([[\r\n1: Local ... (2..24)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 25\r\n5: Eval Call\r\n6: Noop\r\n7: Eval Call\r\n8: Cjump -> 18\r\n9: Eval Call\r\n10: Noop\r\n11: Eval Call\r\n12: Cjump -> 15\r\n13: Jump -> 18\r\n14: Jump -> 15\r\n15: Eval Call\r\n16: Noop\r\n17: Jump -> 7\r\n18: Noop\r\n19: Eval Call\r\n20: Cjump -> 23\r\n21: Jump -> 25\r\n22: Jump -> 23\r\n23: Noop\r\n24: Jump -> 3]], get_line_as_string([[\r\nwhile cond() do\r\n   stmts()\r\n\r\n   while cond() do\r\n      stmts()\r\n\r\n      if cond() then\r\n         break\r\n      end\r\n\r\n      stmts()\r\n   end\r\n\r\n   if cond() then\r\n      break\r\n   end\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n         assert.equal([[\r\n1: Local ... (2..15)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 16\r\n5: Noop\r\n6: Eval Call\r\n7: Cjump -> 10\r\n8: Eval Call\r\n9: Jump -> 15\r\n10: Eval Call\r\n11: Cjump -> 14\r\n12: Eval Call\r\n13: Jump -> 15\r\n14: Eval Call\r\n15: Jump -> 16]], get_line_as_string([[\r\nif cond() then\r\n   if cond() then\r\n      stmts()\r\n   elseif cond() then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end",
    "type": "function"
  }, {
    "id": 85,
    "text": "assert.equal([[\r\n1: Local ... (2..15)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 16\r\n5: Noop\r\n6: Eval Call\r\n7: Cjump -> 10\r\n8: Eval Call\r\n9: Jump -> 15\r\n10: Eval Call\r\n11: Cjump -> 14\r\n12: Eval Call\r\n13: Jump -> 15\r\n14: Eval Call\r\n15: Jump -> 16]], get_line_as_string([[\r\nif cond() then\r\n   if cond() then\r\n      stmts()\r\n   elseif cond() then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function()\r\n         assert.equal([[\r\n1: Local ... (2..14)\r\n2: Noop\r\n3: Eval True\r\n4: Noop\r\n5: Eval Call\r\n6: Cjump -> 9\r\n7: Eval Call\r\n8: Jump -> 14\r\n9: Eval False\r\n10: Jump -> 13\r\n11: Eval Call\r\n12: Jump -> 14\r\n13: Eval Call\r\n14: Jump -> 15]], get_line_as_string([[\r\nif true then\r\n   if cond() then\r\n      stmts()\r\n   elseif false then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end",
    "type": "function"
  }, {
    "id": 88,
    "text": "assert.equal([[\r\n1: Local ... (2..14)\r\n2: Noop\r\n3: Eval True\r\n4: Noop\r\n5: Eval Call\r\n6: Cjump -> 9\r\n7: Eval Call\r\n8: Jump -> 14\r\n9: Eval False\r\n10: Jump -> 13\r\n11: Eval Call\r\n12: Jump -> 14\r\n13: Eval Call\r\n14: Jump -> 15]], get_line_as_string([[\r\nif true then\r\n   if cond() then\r\n      stmts()\r\n   elseif false then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function()\r\n         assert.equal([[\r\n1: Local ... (2..13)\r\n2: Eval Call\r\n3: Noop\r\n4: Jump -> 2\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 9\r\n8: Eval Call\r\n9: Eval Call\r\n10: Noop\r\n11: Noop\r\n12: Jump -> 14\r\n13: Eval Call]], get_line_as_string([[\r\n::label1::\r\nstmts()\r\ngoto label1\r\nstmts()\r\ngoto label2\r\nstmts()\r\n::label2::\r\nstmts()\r\n\r\ndo\r\n   goto label2\r\n   stmts()\r\n   ::label2::\r\nend]]))\r\n      end",
    "type": "function"
  }, {
    "id": 91,
    "text": "assert.equal([[\r\n1: Local ... (2..13)\r\n2: Eval Call\r\n3: Noop\r\n4: Jump -> 2\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 9\r\n8: Eval Call\r\n9: Eval Call\r\n10: Noop\r\n11: Noop\r\n12: Jump -> 14\r\n13: Eval Call]], get_line_as_string([[\r\n::label1::\r\nstmts()\r\ngoto label1\r\nstmts()\r\ngoto label2\r\nstmts()\r\n::label2::\r\nstmts()\r\n\r\ndo\r\n   goto label2\r\n   stmts()\r\n   ::label2::\r\nend]]))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function()\r\n      it(\"linearizes empty source correctly\", function()\r\n         assert.equal(\"1: Local ... (2..1)\", get_line_as_string(\"\"))\r\n      end)\r\n\r\n      it(\"linearizes do-end blocks correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Noop\r\n4: Eval Call]], get_line_as_string([[\r\ndo end\r\ndo print(foo) end]]))\r\n      end)\r\n\r\n      it(\"linearizes loops correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Id\r\n4: Cjump -> 9\r\n5: Local s (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 3]], get_line_as_string([[\r\nwhile cond do\r\n   local s = io.read()\r\n   print(s)\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Local s (4..5)\r\n4: Eval Call\r\n5: Eval Id\r\n6: Cjump -> 3]], get_line_as_string([[\r\nrepeat\r\n   local s = io.read()\r\n   print(s)\r\nuntil cond]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..9)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Op\r\n5: Cjump -> 10\r\n6: Local i (7..7)\r\n7: Eval Call\r\n8: Noop\r\n9: Jump -> 5]], get_line_as_string([[\r\nfor i = 1, #t do\r\n   print(t[i])\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 9\r\n5: Local k (6..6), v (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 4]], get_line_as_string([[\r\nfor k, v in pairs(t) do\r\n   print(k, v)\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes loops with literal condition correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Call\r\n5: Noop\r\n6: Jump -> 3]], get_line_as_string([[\r\nwhile 1 do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..7)\r\n2: Noop\r\n3: Eval False\r\n4: Jump -> 8\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 3]], get_line_as_string([[\r\nwhile false do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval True]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil true]]))\r\n\r\n            assert.equal([[\r\n1: Local ... (2..5)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval Nil\r\n5: Jump -> 3]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil nil]]))\r\n      end)\r\n\r\n      it(\"linearizes nested loops and breaks correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..24)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 25\r\n5: Eval Call\r\n6: Noop\r\n7: Eval Call\r\n8: Cjump -> 18\r\n9: Eval Call\r\n10: Noop\r\n11: Eval Call\r\n12: Cjump -> 15\r\n13: Jump -> 18\r\n14: Jump -> 15\r\n15: Eval Call\r\n16: Noop\r\n17: Jump -> 7\r\n18: Noop\r\n19: Eval Call\r\n20: Cjump -> 23\r\n21: Jump -> 25\r\n22: Jump -> 23\r\n23: Noop\r\n24: Jump -> 3]], get_line_as_string([[\r\nwhile cond() do\r\n   stmts()\r\n\r\n   while cond() do\r\n      stmts()\r\n\r\n      if cond() then\r\n         break\r\n      end\r\n\r\n      stmts()\r\n   end\r\n\r\n   if cond() then\r\n      break\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes if correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..15)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 16\r\n5: Noop\r\n6: Eval Call\r\n7: Cjump -> 10\r\n8: Eval Call\r\n9: Jump -> 15\r\n10: Eval Call\r\n11: Cjump -> 14\r\n12: Eval Call\r\n13: Jump -> 15\r\n14: Eval Call\r\n15: Jump -> 16]], get_line_as_string([[\r\nif cond() then\r\n   if cond() then\r\n      stmts()\r\n   elseif cond() then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes if with literal condition correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..14)\r\n2: Noop\r\n3: Eval True\r\n4: Noop\r\n5: Eval Call\r\n6: Cjump -> 9\r\n7: Eval Call\r\n8: Jump -> 14\r\n9: Eval False\r\n10: Jump -> 13\r\n11: Eval Call\r\n12: Jump -> 14\r\n13: Eval Call\r\n14: Jump -> 15]], get_line_as_string([[\r\nif true then\r\n   if cond() then\r\n      stmts()\r\n   elseif false then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes gotos correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..13)\r\n2: Eval Call\r\n3: Noop\r\n4: Jump -> 2\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 9\r\n8: Eval Call\r\n9: Eval Call\r\n10: Noop\r\n11: Noop\r\n12: Jump -> 14\r\n13: Eval Call]], get_line_as_string([[\r\n::label1::\r\nstmts()\r\ngoto label1\r\nstmts()\r\ngoto label2\r\nstmts()\r\n::label2::\r\nstmts()\r\n\r\ndo\r\n   goto label2\r\n   stmts()\r\n   ::label2::\r\nend]]))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 94,
    "text": "it(\"linearizes empty source correctly\", function()\r\n         assert.equal(\"1: Local ... (2..1)\", get_line_as_string(\"\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "it(\"linearizes do-end blocks correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Noop\r\n4: Eval Call]], get_line_as_string([[\r\ndo end\r\ndo print(foo) end]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "it(\"linearizes loops correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Id\r\n4: Cjump -> 9\r\n5: Local s (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 3]], get_line_as_string([[\r\nwhile cond do\r\n   local s = io.read()\r\n   print(s)\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Local s (4..5)\r\n4: Eval Call\r\n5: Eval Id\r\n6: Cjump -> 3]], get_line_as_string([[\r\nrepeat\r\n   local s = io.read()\r\n   print(s)\r\nuntil cond]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..9)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Op\r\n5: Cjump -> 10\r\n6: Local i (7..7)\r\n7: Eval Call\r\n8: Noop\r\n9: Jump -> 5]], get_line_as_string([[\r\nfor i = 1, #t do\r\n   print(t[i])\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 9\r\n5: Local k (6..6), v (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 4]], get_line_as_string([[\r\nfor k, v in pairs(t) do\r\n   print(k, v)\r\nend]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "it(\"linearizes loops with literal condition correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Call\r\n5: Noop\r\n6: Jump -> 3]], get_line_as_string([[\r\nwhile 1 do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..7)\r\n2: Noop\r\n3: Eval False\r\n4: Jump -> 8\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 3]], get_line_as_string([[\r\nwhile false do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval True]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil true]]))\r\n\r\n            assert.equal([[\r\n1: Local ... (2..5)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval Nil\r\n5: Jump -> 3]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil nil]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "it(\"linearizes nested loops and breaks correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..24)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 25\r\n5: Eval Call\r\n6: Noop\r\n7: Eval Call\r\n8: Cjump -> 18\r\n9: Eval Call\r\n10: Noop\r\n11: Eval Call\r\n12: Cjump -> 15\r\n13: Jump -> 18\r\n14: Jump -> 15\r\n15: Eval Call\r\n16: Noop\r\n17: Jump -> 7\r\n18: Noop\r\n19: Eval Call\r\n20: Cjump -> 23\r\n21: Jump -> 25\r\n22: Jump -> 23\r\n23: Noop\r\n24: Jump -> 3]], get_line_as_string([[\r\nwhile cond() do\r\n   stmts()\r\n\r\n   while cond() do\r\n      stmts()\r\n\r\n      if cond() then\r\n         break\r\n      end\r\n\r\n      stmts()\r\n   end\r\n\r\n   if cond() then\r\n      break\r\n   end\r\nend]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "it(\"linearizes if correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..15)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 16\r\n5: Noop\r\n6: Eval Call\r\n7: Cjump -> 10\r\n8: Eval Call\r\n9: Jump -> 15\r\n10: Eval Call\r\n11: Cjump -> 14\r\n12: Eval Call\r\n13: Jump -> 15\r\n14: Eval Call\r\n15: Jump -> 16]], get_line_as_string([[\r\nif cond() then\r\n   if cond() then\r\n      stmts()\r\n   elseif cond() then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "it(\"linearizes if with literal condition correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..14)\r\n2: Noop\r\n3: Eval True\r\n4: Noop\r\n5: Eval Call\r\n6: Cjump -> 9\r\n7: Eval Call\r\n8: Jump -> 14\r\n9: Eval False\r\n10: Jump -> 13\r\n11: Eval Call\r\n12: Jump -> 14\r\n13: Eval Call\r\n14: Jump -> 15]], get_line_as_string([[\r\nif true then\r\n   if cond() then\r\n      stmts()\r\n   elseif false then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "it(\"linearizes gotos correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..13)\r\n2: Eval Call\r\n3: Noop\r\n4: Jump -> 2\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 9\r\n8: Eval Call\r\n9: Eval Call\r\n10: Noop\r\n11: Noop\r\n12: Jump -> 14\r\n13: Eval Call]], get_line_as_string([[\r\n::label1::\r\nstmts()\r\ngoto label1\r\nstmts()\r\ngoto label2\r\nstmts()\r\n::label2::\r\nstmts()\r\n\r\ndo\r\n   goto label2\r\n   stmts()\r\n   ::label2::\r\nend]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)]], get_value_info_as_string(\"\"))\r\n      end",
    "type": "function"
  }, {
    "id": 104,
    "text": "assert.equal([[\r\nLocal: ... (arg / arg, initial)]], get_value_info_as_string(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial)\r\nSet: a (var / var)]], get_value_info_as_string([[\r\nlocal a = b\r\na = d]]))\r\n      end",
    "type": "function"
  }, {
    "id": 107,
    "text": "assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial)\r\nSet: a (var / var)]], get_value_info_as_string([[\r\nlocal a = b\r\na = d]]))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, empty)\r\nSet: a (var / var), b (var / var)]], get_value_info_as_string([[\r\nlocal a, b = 4\r\na, b = 5]]))\r\n      end",
    "type": "function"
  }, {
    "id": 110,
    "text": "assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, empty)\r\nSet: a (var / var), b (var / var)]], get_value_info_as_string([[\r\nlocal a, b = 4\r\na, b = 5]]))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: f (var / func, initial)]], get_value_info_as_string([[\r\nlocal function f() end]]))\r\n      end",
    "type": "function"
  }, {
    "id": 113,
    "text": "assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: f (var / func, initial)]], get_value_info_as_string([[\r\nlocal function f() end]]))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: i (loopi / loopi, initial)\r\nSet: i (loopi / var)]], get_value_info_as_string([[\r\nfor i = 1, 10 do i = 6 end]]))\r\n      end",
    "type": "function"
  }, {
    "id": 116,
    "text": "assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: i (loopi / loopi, initial)\r\nSet: i (loopi / var)]], get_value_info_as_string([[\r\nfor i = 1, 10 do i = 6 end]]))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, initial, 2 secondaries), c (var / var, initial, 2 secondaries)\r\nSet: a (var / var), b (var / var, 2 secondaries), c (var / var, 2 secondaries)]], get_value_info_as_string([[\r\nlocal a, b, c = f(), g()\r\na, b, c = f(), g()]]))\r\n      end",
    "type": "function"
  }, {
    "id": 119,
    "text": "assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, initial, 2 secondaries), c (var / var, initial, 2 secondaries)\r\nSet: a (var / var), b (var / var, 2 secondaries), c (var / var, 2 secondaries)]], get_value_info_as_string([[\r\nlocal a, b, c = f(), g()\r\na, b, c = f(), g()]]))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, empty)\r\nSet: a (var / var, 1 secondaries, used)]], get_value_info_as_string([[\r\nlocal a\r\ng, a = f()]]))\r\n      end",
    "type": "function"
  }, {
    "id": 122,
    "text": "assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, empty)\r\nSet: a (var / var, 1 secondaries, used)]], get_value_info_as_string([[\r\nlocal a\r\ng, a = f()]]))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function()\r\n      it(\"registers values in empty chunk correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)]], get_value_info_as_string(\"\"))\r\n      end)\r\n\r\n      it(\"registers values in assignments correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial)\r\nSet: a (var / var)]], get_value_info_as_string([[\r\nlocal a = b\r\na = d]]))\r\n      end)\r\n\r\n      it(\"registers empty values correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, empty)\r\nSet: a (var / var), b (var / var)]], get_value_info_as_string([[\r\nlocal a, b = 4\r\na, b = 5]]))\r\n      end)\r\n\r\n      it(\"registers function values as of type func\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: f (var / func, initial)]], get_value_info_as_string([[\r\nlocal function f() end]]))\r\n      end)\r\n\r\n      it(\"registers overwritten args and counters as of type var\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: i (loopi / loopi, initial)\r\nSet: i (loopi / var)]], get_value_info_as_string([[\r\nfor i = 1, 10 do i = 6 end]]))\r\n      end)\r\n\r\n      it(\"registers groups of secondary values\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, initial, 2 secondaries), c (var / var, initial, 2 secondaries)\r\nSet: a (var / var), b (var / var, 2 secondaries), c (var / var, 2 secondaries)]], get_value_info_as_string([[\r\nlocal a, b, c = f(), g()\r\na, b, c = f(), g()]]))\r\n      end)\r\n\r\n      it(\"marks groups of secondary values used if one of values is put into global or index\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, empty)\r\nSet: a (var / var, 1 secondaries, used)]], get_value_info_as_string([[\r\nlocal a\r\ng, a = f()]]))\r\n      end)\r\n   end",
    "type": "function"
  }, {
    "id": 125,
    "text": "it(\"registers values in empty chunk correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)]], get_value_info_as_string(\"\"))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "it(\"registers values in assignments correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial)\r\nSet: a (var / var)]], get_value_info_as_string([[\r\nlocal a = b\r\na = d]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "it(\"registers empty values correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, empty)\r\nSet: a (var / var), b (var / var)]], get_value_info_as_string([[\r\nlocal a, b = 4\r\na, b = 5]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "it(\"registers function values as of type func\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: f (var / func, initial)]], get_value_info_as_string([[\r\nlocal function f() end]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "it(\"registers overwritten args and counters as of type var\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: i (loopi / loopi, initial)\r\nSet: i (loopi / var)]], get_value_info_as_string([[\r\nfor i = 1, 10 do i = 6 end]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "it(\"registers groups of secondary values\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, initial, 2 secondaries), c (var / var, initial, 2 secondaries)\r\nSet: a (var / var), b (var / var, 2 secondaries), c (var / var, 2 secondaries)]], get_value_info_as_string([[\r\nlocal a, b, c = f(), g()\r\na, b, c = f(), g()]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "it(\"marks groups of secondary values used if one of values is put into global or index\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, empty)\r\nSet: a (var / var, 1 secondaries, used)]], get_value_info_as_string([[\r\nlocal a\r\ng, a = f()]]))\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function()\r\n   describe(\"when handling post-parse syntax errors\", function()\r\n      it(\"detects gotos without labels\", function()\r\n         assert.same({line = 1, column = 1, end_column = 4, msg = \"no visible label 'fail'\"},\r\n            get_line(\"goto fail\"))\r\n      end)\r\n\r\n      it(\"detects break outside loops\", function()\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"break\"))\r\n         assert.same({line = 1, column = 28, end_column = 32, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"while true do function f() break end end\"))\r\n      end)\r\n\r\n      it(\"detects duplicate labels\", function()\r\n         assert.same({line = 2, column = 1, end_column = 8, msg = \"label 'fail' already defined on line 1\"},\r\n            get_line(\"::fail::\\n::fail::\"))\r\n      end)\r\n\r\n      it(\"detects varargs outside vararg functions\", function()\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f() return ... end\"))\r\n         assert.same({line = 1, column = 42, end_column = 44, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f(...) return function() return ... end end\"))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when linearizing flow\", function()\r\n      it(\"linearizes empty source correctly\", function()\r\n         assert.equal(\"1: Local ... (2..1)\", get_line_as_string(\"\"))\r\n      end)\r\n\r\n      it(\"linearizes do-end blocks correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Noop\r\n4: Eval Call]], get_line_as_string([[\r\ndo end\r\ndo print(foo) end]]))\r\n      end)\r\n\r\n      it(\"linearizes loops correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Id\r\n4: Cjump -> 9\r\n5: Local s (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 3]], get_line_as_string([[\r\nwhile cond do\r\n   local s = io.read()\r\n   print(s)\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Local s (4..5)\r\n4: Eval Call\r\n5: Eval Id\r\n6: Cjump -> 3]], get_line_as_string([[\r\nrepeat\r\n   local s = io.read()\r\n   print(s)\r\nuntil cond]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..9)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Op\r\n5: Cjump -> 10\r\n6: Local i (7..7)\r\n7: Eval Call\r\n8: Noop\r\n9: Jump -> 5]], get_line_as_string([[\r\nfor i = 1, #t do\r\n   print(t[i])\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 9\r\n5: Local k (6..6), v (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 4]], get_line_as_string([[\r\nfor k, v in pairs(t) do\r\n   print(k, v)\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes loops with literal condition correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Call\r\n5: Noop\r\n6: Jump -> 3]], get_line_as_string([[\r\nwhile 1 do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..7)\r\n2: Noop\r\n3: Eval False\r\n4: Jump -> 8\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 3]], get_line_as_string([[\r\nwhile false do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval True]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil true]]))\r\n\r\n            assert.equal([[\r\n1: Local ... (2..5)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval Nil\r\n5: Jump -> 3]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil nil]]))\r\n      end)\r\n\r\n      it(\"linearizes nested loops and breaks correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..24)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 25\r\n5: Eval Call\r\n6: Noop\r\n7: Eval Call\r\n8: Cjump -> 18\r\n9: Eval Call\r\n10: Noop\r\n11: Eval Call\r\n12: Cjump -> 15\r\n13: Jump -> 18\r\n14: Jump -> 15\r\n15: Eval Call\r\n16: Noop\r\n17: Jump -> 7\r\n18: Noop\r\n19: Eval Call\r\n20: Cjump -> 23\r\n21: Jump -> 25\r\n22: Jump -> 23\r\n23: Noop\r\n24: Jump -> 3]], get_line_as_string([[\r\nwhile cond() do\r\n   stmts()\r\n\r\n   while cond() do\r\n      stmts()\r\n\r\n      if cond() then\r\n         break\r\n      end\r\n\r\n      stmts()\r\n   end\r\n\r\n   if cond() then\r\n      break\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes if correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..15)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 16\r\n5: Noop\r\n6: Eval Call\r\n7: Cjump -> 10\r\n8: Eval Call\r\n9: Jump -> 15\r\n10: Eval Call\r\n11: Cjump -> 14\r\n12: Eval Call\r\n13: Jump -> 15\r\n14: Eval Call\r\n15: Jump -> 16]], get_line_as_string([[\r\nif cond() then\r\n   if cond() then\r\n      stmts()\r\n   elseif cond() then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes if with literal condition correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..14)\r\n2: Noop\r\n3: Eval True\r\n4: Noop\r\n5: Eval Call\r\n6: Cjump -> 9\r\n7: Eval Call\r\n8: Jump -> 14\r\n9: Eval False\r\n10: Jump -> 13\r\n11: Eval Call\r\n12: Jump -> 14\r\n13: Eval Call\r\n14: Jump -> 15]], get_line_as_string([[\r\nif true then\r\n   if cond() then\r\n      stmts()\r\n   elseif false then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes gotos correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..13)\r\n2: Eval Call\r\n3: Noop\r\n4: Jump -> 2\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 9\r\n8: Eval Call\r\n9: Eval Call\r\n10: Noop\r\n11: Noop\r\n12: Jump -> 14\r\n13: Eval Call]], get_line_as_string([[\r\n::label1::\r\nstmts()\r\ngoto label1\r\nstmts()\r\ngoto label2\r\nstmts()\r\n::label2::\r\nstmts()\r\n\r\ndo\r\n   goto label2\r\n   stmts()\r\n   ::label2::\r\nend]]))\r\n      end)\r\n   end)\r\n\r\n   describe(\"when registering values\", function()\r\n      it(\"registers values in empty chunk correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)]], get_value_info_as_string(\"\"))\r\n      end)\r\n\r\n      it(\"registers values in assignments correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial)\r\nSet: a (var / var)]], get_value_info_as_string([[\r\nlocal a = b\r\na = d]]))\r\n      end)\r\n\r\n      it(\"registers empty values correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, empty)\r\nSet: a (var / var), b (var / var)]], get_value_info_as_string([[\r\nlocal a, b = 4\r\na, b = 5]]))\r\n      end)\r\n\r\n      it(\"registers function values as of type func\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: f (var / func, initial)]], get_value_info_as_string([[\r\nlocal function f() end]]))\r\n      end)\r\n\r\n      it(\"registers overwritten args and counters as of type var\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: i (loopi / loopi, initial)\r\nSet: i (loopi / var)]], get_value_info_as_string([[\r\nfor i = 1, 10 do i = 6 end]]))\r\n      end)\r\n\r\n      it(\"registers groups of secondary values\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, initial, 2 secondaries), c (var / var, initial, 2 secondaries)\r\nSet: a (var / var), b (var / var, 2 secondaries), c (var / var, 2 secondaries)]], get_value_info_as_string([[\r\nlocal a, b, c = f(), g()\r\na, b, c = f(), g()]]))\r\n      end)\r\n\r\n      it(\"marks groups of secondary values used if one of values is put into global or index\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, empty)\r\nSet: a (var / var, 1 secondaries, used)]], get_value_info_as_string([[\r\nlocal a\r\ng, a = f()]]))\r\n      end)\r\n   end)\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "describe(\"when handling post-parse syntax errors\", function()\r\n      it(\"detects gotos without labels\", function()\r\n         assert.same({line = 1, column = 1, end_column = 4, msg = \"no visible label 'fail'\"},\r\n            get_line(\"goto fail\"))\r\n      end)\r\n\r\n      it(\"detects break outside loops\", function()\r\n         assert.same({line = 1, column = 1, end_column = 5, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"break\"))\r\n         assert.same({line = 1, column = 28, end_column = 32, msg = \"'break' is not inside a loop\"},\r\n            get_line(\"while true do function f() break end end\"))\r\n      end)\r\n\r\n      it(\"detects duplicate labels\", function()\r\n         assert.same({line = 2, column = 1, end_column = 8, msg = \"label 'fail' already defined on line 1\"},\r\n            get_line(\"::fail::\\n::fail::\"))\r\n      end)\r\n\r\n      it(\"detects varargs outside vararg functions\", function()\r\n         assert.same({line = 1, column = 21, end_column = 23, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f() return ... end\"))\r\n         assert.same({line = 1, column = 42, end_column = 44, msg = \"cannot use '...' outside a vararg function\"},\r\n            get_line(\"function f(...) return function() return ... end end\"))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "describe(\"when linearizing flow\", function()\r\n      it(\"linearizes empty source correctly\", function()\r\n         assert.equal(\"1: Local ... (2..1)\", get_line_as_string(\"\"))\r\n      end)\r\n\r\n      it(\"linearizes do-end blocks correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Noop\r\n4: Eval Call]], get_line_as_string([[\r\ndo end\r\ndo print(foo) end]]))\r\n      end)\r\n\r\n      it(\"linearizes loops correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Id\r\n4: Cjump -> 9\r\n5: Local s (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 3]], get_line_as_string([[\r\nwhile cond do\r\n   local s = io.read()\r\n   print(s)\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Local s (4..5)\r\n4: Eval Call\r\n5: Eval Id\r\n6: Cjump -> 3]], get_line_as_string([[\r\nrepeat\r\n   local s = io.read()\r\n   print(s)\r\nuntil cond]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..9)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Op\r\n5: Cjump -> 10\r\n6: Local i (7..7)\r\n7: Eval Call\r\n8: Noop\r\n9: Jump -> 5]], get_line_as_string([[\r\nfor i = 1, #t do\r\n   print(t[i])\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..8)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 9\r\n5: Local k (6..6), v (6..6)\r\n6: Eval Call\r\n7: Noop\r\n8: Jump -> 4]], get_line_as_string([[\r\nfor k, v in pairs(t) do\r\n   print(k, v)\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes loops with literal condition correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..6)\r\n2: Noop\r\n3: Eval Number\r\n4: Eval Call\r\n5: Noop\r\n6: Jump -> 3]], get_line_as_string([[\r\nwhile 1 do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..7)\r\n2: Noop\r\n3: Eval False\r\n4: Jump -> 8\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 3]], get_line_as_string([[\r\nwhile false do\r\n   foo()\r\nend]]))\r\n\r\n         assert.equal([[\r\n1: Local ... (2..4)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval True]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil true]]))\r\n\r\n            assert.equal([[\r\n1: Local ... (2..5)\r\n2: Noop\r\n3: Eval Call\r\n4: Eval Nil\r\n5: Jump -> 3]], get_line_as_string([[\r\nrepeat\r\n   foo()\r\nuntil nil]]))\r\n      end)\r\n\r\n      it(\"linearizes nested loops and breaks correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..24)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 25\r\n5: Eval Call\r\n6: Noop\r\n7: Eval Call\r\n8: Cjump -> 18\r\n9: Eval Call\r\n10: Noop\r\n11: Eval Call\r\n12: Cjump -> 15\r\n13: Jump -> 18\r\n14: Jump -> 15\r\n15: Eval Call\r\n16: Noop\r\n17: Jump -> 7\r\n18: Noop\r\n19: Eval Call\r\n20: Cjump -> 23\r\n21: Jump -> 25\r\n22: Jump -> 23\r\n23: Noop\r\n24: Jump -> 3]], get_line_as_string([[\r\nwhile cond() do\r\n   stmts()\r\n\r\n   while cond() do\r\n      stmts()\r\n\r\n      if cond() then\r\n         break\r\n      end\r\n\r\n      stmts()\r\n   end\r\n\r\n   if cond() then\r\n      break\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes if correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..15)\r\n2: Noop\r\n3: Eval Call\r\n4: Cjump -> 16\r\n5: Noop\r\n6: Eval Call\r\n7: Cjump -> 10\r\n8: Eval Call\r\n9: Jump -> 15\r\n10: Eval Call\r\n11: Cjump -> 14\r\n12: Eval Call\r\n13: Jump -> 15\r\n14: Eval Call\r\n15: Jump -> 16]], get_line_as_string([[\r\nif cond() then\r\n   if cond() then\r\n      stmts()\r\n   elseif cond() then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes if with literal condition correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..14)\r\n2: Noop\r\n3: Eval True\r\n4: Noop\r\n5: Eval Call\r\n6: Cjump -> 9\r\n7: Eval Call\r\n8: Jump -> 14\r\n9: Eval False\r\n10: Jump -> 13\r\n11: Eval Call\r\n12: Jump -> 14\r\n13: Eval Call\r\n14: Jump -> 15]], get_line_as_string([[\r\nif true then\r\n   if cond() then\r\n      stmts()\r\n   elseif false then\r\n      stmts()\r\n   else\r\n      stmts()\r\n   end\r\nend]]))\r\n      end)\r\n\r\n      it(\"linearizes gotos correctly\", function()\r\n         assert.equal([[\r\n1: Local ... (2..13)\r\n2: Eval Call\r\n3: Noop\r\n4: Jump -> 2\r\n5: Eval Call\r\n6: Noop\r\n7: Jump -> 9\r\n8: Eval Call\r\n9: Eval Call\r\n10: Noop\r\n11: Noop\r\n12: Jump -> 14\r\n13: Eval Call]], get_line_as_string([[\r\n::label1::\r\nstmts()\r\ngoto label1\r\nstmts()\r\ngoto label2\r\nstmts()\r\n::label2::\r\nstmts()\r\n\r\ndo\r\n   goto label2\r\n   stmts()\r\n   ::label2::\r\nend]]))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "describe(\"when registering values\", function()\r\n      it(\"registers values in empty chunk correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)]], get_value_info_as_string(\"\"))\r\n      end)\r\n\r\n      it(\"registers values in assignments correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial)\r\nSet: a (var / var)]], get_value_info_as_string([[\r\nlocal a = b\r\na = d]]))\r\n      end)\r\n\r\n      it(\"registers empty values correctly\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, empty)\r\nSet: a (var / var), b (var / var)]], get_value_info_as_string([[\r\nlocal a, b = 4\r\na, b = 5]]))\r\n      end)\r\n\r\n      it(\"registers function values as of type func\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: f (var / func, initial)]], get_value_info_as_string([[\r\nlocal function f() end]]))\r\n      end)\r\n\r\n      it(\"registers overwritten args and counters as of type var\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: i (loopi / loopi, initial)\r\nSet: i (loopi / var)]], get_value_info_as_string([[\r\nfor i = 1, 10 do i = 6 end]]))\r\n      end)\r\n\r\n      it(\"registers groups of secondary values\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, initial), b (var / var, initial, 2 secondaries), c (var / var, initial, 2 secondaries)\r\nSet: a (var / var), b (var / var, 2 secondaries), c (var / var, 2 secondaries)]], get_value_info_as_string([[\r\nlocal a, b, c = f(), g()\r\na, b, c = f(), g()]]))\r\n      end)\r\n\r\n      it(\"marks groups of secondary values used if one of values is put into global or index\", function()\r\n         assert.equal([[\r\nLocal: ... (arg / arg, initial)\r\nLocal: a (var / var, empty)\r\nSet: a (var / var, 1 secondaries, used)]], get_value_info_as_string([[\r\nlocal a\r\ng, a = f()]]))\r\n      end)\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "",
    "type": "function container"
  }, {
    "id": 139,
    "text": "class",
    "type": "global function"
  }, {
    "id": 140,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 141,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 142,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 143,
    "text": "parser",
    "type": "global function"
  }, {
    "id": 144,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 145,
    "text": "type",
    "type": "global function"
  }, {
    "id": 146,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 147,
    "text": "same",
    "type": "global function"
  }, {
    "id": 148,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 149,
    "text": "is_table",
    "type": "global function"
  }, {
    "id": 150,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 151,
    "text": "require",
    "type": "global function"
  }, {
    "id": 152,
    "text": "linearize",
    "type": "global function"
  }, {
    "id": 153,
    "text": "ChState",
    "type": "global function"
  }, {
    "id": 154,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 155,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 156,
    "text": "error",
    "type": "global function"
  }, {
    "id": 157,
    "text": "it",
    "type": "global function"
  }, {
    "id": 158,
    "text": "",
    "type": "variable container"
  }, {
    "id": 159,
    "text": "",
    "type": "require container"
  }, {
    "id": 160,
    "text": "",
    "type": "local variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "require local variable"
  } ]
}